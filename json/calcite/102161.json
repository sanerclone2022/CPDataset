[{"authorTime":"2015-08-13 16:00:09","codes":[{"authorDate":"2015-08-13 16:00:09","commitOrder":8,"curCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(new ViewExpanderImpl(), validator,\n            createCatalogReader(), cluster, convertletTable);\n    sqlToRelConverter.setTrimUnusedFields(false);\n    sqlToRelConverter.enableTableAccessConversion(false);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","date":"2015-09-02 07:17:16","endLine":202,"groupId":"8043","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"rel","params":"(SqlNodesql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d5/8cfd82de09efbe4cc9dafceab1a9210aa9763a.src","preCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(new ViewExpanderImpl(), validator,\n            createCatalogReader(), cluster, convertletTable);\n    sqlToRelConverter.setTrimUnusedFields(false);\n    sqlToRelConverter.enableTableAccessConversion(false);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"B"},{"authorDate":"2015-08-13 16:00:09","commitOrder":8,"curCode":"    public RelRoot expandView(RelDataType rowType, String queryString,\n        List<String> schemaPath) {\n      SqlParser parser = SqlParser.create(queryString, parserConfig);\n      SqlNode sqlNode;\n      try {\n        sqlNode = parser.parseQuery();\n      } catch (SqlParseException e) {\n        throw new RuntimeException(\"parse failed\", e);\n      }\n\n      final CalciteCatalogReader catalogReader =\n          createCatalogReader().withSchemaPath(schemaPath);\n      final SqlValidator validator = new CalciteSqlValidator(operatorTable,\n          catalogReader, typeFactory);\n      validator.setIdentifierExpansion(true);\n      final SqlNode validatedSqlNode = validator.validate(sqlNode);\n\n      final RexBuilder rexBuilder = createRexBuilder();\n      final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n      final SqlToRelConverter sqlToRelConverter =\n          new SqlToRelConverter(new ViewExpanderImpl(), validator,\n              catalogReader, cluster, convertletTable);\n\n      sqlToRelConverter.setTrimUnusedFields(false);\n      sqlToRelConverter.enableTableAccessConversion(false);\n\n      root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);\n      root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n      root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n\n      return PlannerImpl.this.root;\n    }\n","date":"2015-09-02 07:17:16","endLine":238,"groupId":"8044","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"expandView","params":"(RelDataTyperowType@StringqueryString@List<String>schemaPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d5/8cfd82de09efbe4cc9dafceab1a9210aa9763a.src","preCode":"    public RelRoot expandView(RelDataType rowType, String queryString,\n        List<String> schemaPath) {\n      SqlParser parser = SqlParser.create(queryString, parserConfig);\n      SqlNode sqlNode;\n      try {\n        sqlNode = parser.parseQuery();\n      } catch (SqlParseException e) {\n        throw new RuntimeException(\"parse failed\", e);\n      }\n\n      final CalciteCatalogReader catalogReader =\n          createCatalogReader().withSchemaPath(schemaPath);\n      final SqlValidator validator = new CalciteSqlValidator(operatorTable,\n          catalogReader, typeFactory);\n      validator.setIdentifierExpansion(true);\n      final SqlNode validatedSqlNode = validator.validate(sqlNode);\n\n      final RexBuilder rexBuilder = createRexBuilder();\n      final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n      final SqlToRelConverter sqlToRelConverter =\n          new SqlToRelConverter(new ViewExpanderImpl(), validator,\n              catalogReader, cluster, convertletTable);\n\n      sqlToRelConverter.setTrimUnusedFields(false);\n      sqlToRelConverter.enableTableAccessConversion(false);\n\n      root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);\n      root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n      root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n\n      return PlannerImpl.this.root;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"MB"}],"commitId":"5a3970635030ddde27e4237da5d8c5c3419c34b5","commitMessage":"@@@[CALCITE-819] Add RelRoot.  a contract for the result of a relational expression\n\nRemove PRESERVE collation\n","date":"2015-09-02 07:17:16","modifiedFileCount":"36","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-05-15 08:55:50","codes":[{"authorDate":"2015-08-13 16:00:09","commitOrder":9,"curCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(new ViewExpanderImpl(), validator,\n            createCatalogReader(), cluster, convertletTable);\n    sqlToRelConverter.setTrimUnusedFields(false);\n    sqlToRelConverter.enableTableAccessConversion(false);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","date":"2015-09-02 07:17:16","endLine":202,"groupId":"8043","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"rel","params":"(SqlNodesql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d5/8cfd82de09efbe4cc9dafceab1a9210aa9763a.src","preCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(new ViewExpanderImpl(), validator,\n            createCatalogReader(), cluster, convertletTable);\n    sqlToRelConverter.setTrimUnusedFields(false);\n    sqlToRelConverter.enableTableAccessConversion(false);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"N"},{"authorDate":"2016-05-15 08:55:50","commitOrder":9,"curCode":"    public RelRoot expandView(RelDataType rowType, String queryString,\n        List<String> schemaPath) {\n      SqlParser parser = SqlParser.create(queryString, parserConfig);\n      SqlNode sqlNode;\n      try {\n        sqlNode = parser.parseQuery();\n      } catch (SqlParseException e) {\n        throw new RuntimeException(\"parse failed\", e);\n      }\n\n      final SqlConformance conformance = conformance();\n      final CalciteCatalogReader catalogReader =\n          createCatalogReader().withSchemaPath(schemaPath);\n      final SqlValidator validator =\n          new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,\n              conformance);\n      validator.setIdentifierExpansion(true);\n      final SqlNode validatedSqlNode = validator.validate(sqlNode);\n\n      final RexBuilder rexBuilder = createRexBuilder();\n      final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n      final SqlToRelConverter sqlToRelConverter =\n          new SqlToRelConverter(new ViewExpanderImpl(), validator,\n              catalogReader, cluster, convertletTable);\n\n      sqlToRelConverter.setTrimUnusedFields(false);\n      sqlToRelConverter.enableTableAccessConversion(false);\n\n      root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);\n      root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n      root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n\n      return PlannerImpl.this.root;\n    }\n","date":"2016-05-16 06:28:12","endLine":270,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"expandView","params":"(RelDataTyperowType@StringqueryString@List<String>schemaPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a4/72683df2e8f8bb246ac8f410693e57d4aff30c.src","preCode":"    public RelRoot expandView(RelDataType rowType, String queryString,\n        List<String> schemaPath) {\n      SqlParser parser = SqlParser.create(queryString, parserConfig);\n      SqlNode sqlNode;\n      try {\n        sqlNode = parser.parseQuery();\n      } catch (SqlParseException e) {\n        throw new RuntimeException(\"parse failed\", e);\n      }\n\n      final CalciteCatalogReader catalogReader =\n          createCatalogReader().withSchemaPath(schemaPath);\n      final SqlValidator validator = new CalciteSqlValidator(operatorTable,\n          catalogReader, typeFactory);\n      validator.setIdentifierExpansion(true);\n      final SqlNode validatedSqlNode = validator.validate(sqlNode);\n\n      final RexBuilder rexBuilder = createRexBuilder();\n      final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n      final SqlToRelConverter sqlToRelConverter =\n          new SqlToRelConverter(new ViewExpanderImpl(), validator,\n              catalogReader, cluster, convertletTable);\n\n      sqlToRelConverter.setTrimUnusedFields(false);\n      sqlToRelConverter.enableTableAccessConversion(false);\n\n      root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);\n      root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n      root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n\n      return PlannerImpl.this.root;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"f8f2af3e16364745e228570a51cf2fa5decbe686","commitMessage":"@@@Further work on [CALCITE-1120]\n\nDocument new syntax in SQL reference;\nWHERE.  GROUP BY and HAVING are illegal if SELECT has no FROM.\n\nAdd \"conformance\" connect-string parameter.  and enable SELECT without\nFROM if conformance is not strict. It is enabled by default.\n","date":"2016-05-16 06:28:12","modifiedFileCount":"13","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-07-20 05:56:32","codes":[{"authorDate":"2016-07-20 05:56:32","commitOrder":10,"curCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withTrimUnusedFields(false).withConvertTableAccess(false).build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(new ViewExpanderImpl(), validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","date":"2016-07-27 12:42:51","endLine":232,"groupId":"9869","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"rel","params":"(SqlNodesql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7f/ab35524edd11b7d262141d5411fbefe373158a.src","preCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(new ViewExpanderImpl(), validator,\n            createCatalogReader(), cluster, convertletTable);\n    sqlToRelConverter.setTrimUnusedFields(false);\n    sqlToRelConverter.enableTableAccessConversion(false);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"},{"authorDate":"2016-07-20 05:56:32","commitOrder":10,"curCode":"    public RelRoot expandView(RelDataType rowType, String queryString,\n        List<String> schemaPath) {\n      SqlParser parser = SqlParser.create(queryString, parserConfig);\n      SqlNode sqlNode;\n      try {\n        sqlNode = parser.parseQuery();\n      } catch (SqlParseException e) {\n        throw new RuntimeException(\"parse failed\", e);\n      }\n\n      final SqlConformance conformance = conformance();\n      final CalciteCatalogReader catalogReader =\n          createCatalogReader().withSchemaPath(schemaPath);\n      final SqlValidator validator =\n          new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,\n              conformance);\n      validator.setIdentifierExpansion(true);\n      final SqlNode validatedSqlNode = validator.validate(sqlNode);\n\n      final RexBuilder rexBuilder = createRexBuilder();\n      final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n      final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n          .withTrimUnusedFields(false).withConvertTableAccess(false).build();\n      final SqlToRelConverter sqlToRelConverter =\n          new SqlToRelConverter(new ViewExpanderImpl(), validator,\n              catalogReader, cluster, convertletTable, config);\n\n      root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);\n      root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n      root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n\n      return PlannerImpl.this.root;\n    }\n","date":"2016-07-27 12:42:51","endLine":269,"groupId":"9871","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"expandView","params":"(RelDataTyperowType@StringqueryString@List<String>schemaPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7f/ab35524edd11b7d262141d5411fbefe373158a.src","preCode":"    public RelRoot expandView(RelDataType rowType, String queryString,\n        List<String> schemaPath) {\n      SqlParser parser = SqlParser.create(queryString, parserConfig);\n      SqlNode sqlNode;\n      try {\n        sqlNode = parser.parseQuery();\n      } catch (SqlParseException e) {\n        throw new RuntimeException(\"parse failed\", e);\n      }\n\n      final SqlConformance conformance = conformance();\n      final CalciteCatalogReader catalogReader =\n          createCatalogReader().withSchemaPath(schemaPath);\n      final SqlValidator validator =\n          new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,\n              conformance);\n      validator.setIdentifierExpansion(true);\n      final SqlNode validatedSqlNode = validator.validate(sqlNode);\n\n      final RexBuilder rexBuilder = createRexBuilder();\n      final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n      final SqlToRelConverter sqlToRelConverter =\n          new SqlToRelConverter(new ViewExpanderImpl(), validator,\n              catalogReader, cluster, convertletTable);\n\n      sqlToRelConverter.setTrimUnusedFields(false);\n      sqlToRelConverter.enableTableAccessConversion(false);\n\n      root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);\n      root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n      root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n\n      return PlannerImpl.this.root;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"c933c79f7ba2ccedd109c4a3cb55e23cfbe90f2b","commitMessage":"@@@[CALCITE-1321] When converting IN-list to join.  make minimum list size configurable (Gautam Parai)\n\nAdd SqlToRelConverter.Config.  so that all configuration parameters\ncan be passed as a single immutable object.\n\nClose apache/calcite#257\n","date":"2016-07-27 12:42:51","modifiedFileCount":"9","status":"M","submitter":"Gautam Parai"},{"authorTime":"2016-08-02 05:46:56","codes":[{"authorDate":"2016-07-20 05:56:32","commitOrder":11,"curCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withTrimUnusedFields(false).withConvertTableAccess(false).build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(new ViewExpanderImpl(), validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","date":"2016-07-27 12:42:51","endLine":232,"groupId":"9869","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"rel","params":"(SqlNodesql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7f/ab35524edd11b7d262141d5411fbefe373158a.src","preCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withTrimUnusedFields(false).withConvertTableAccess(false).build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(new ViewExpanderImpl(), validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"N"},{"authorDate":"2016-08-02 05:46:56","commitOrder":11,"curCode":"    @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n      SqlParser parser = SqlParser.create(queryString, parserConfig);\n      SqlNode sqlNode;\n      try {\n        sqlNode = parser.parseQuery();\n      } catch (SqlParseException e) {\n        throw new RuntimeException(\"parse failed\", e);\n      }\n\n      final SqlConformance conformance = conformance();\n      final CalciteCatalogReader catalogReader =\n          createCatalogReader().withSchemaPath(schemaPath);\n      final SqlValidator validator =\n          new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,\n              conformance);\n      validator.setIdentifierExpansion(true);\n      final SqlNode validatedSqlNode = validator.validate(sqlNode);\n\n      final RexBuilder rexBuilder = createRexBuilder();\n      final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n      final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n          .withTrimUnusedFields(false).withConvertTableAccess(false).build();\n      final SqlToRelConverter sqlToRelConverter =\n          new SqlToRelConverter(new ViewExpanderImpl(), validator,\n              catalogReader, cluster, convertletTable, config);\n\n      root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);\n      root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n      root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n\n      return PlannerImpl.this.root;\n    }\n","date":"2016-08-03 16:05:00","endLine":269,"groupId":"9871","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"expandView","params":"(RelDataTyperowType@StringqueryString@List<String>schemaPath@List<String>viewPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/32/91ceb2f27951bfe7bdaf568f98f4b8673b72bf.src","preCode":"    public RelRoot expandView(RelDataType rowType, String queryString,\n        List<String> schemaPath) {\n      SqlParser parser = SqlParser.create(queryString, parserConfig);\n      SqlNode sqlNode;\n      try {\n        sqlNode = parser.parseQuery();\n      } catch (SqlParseException e) {\n        throw new RuntimeException(\"parse failed\", e);\n      }\n\n      final SqlConformance conformance = conformance();\n      final CalciteCatalogReader catalogReader =\n          createCatalogReader().withSchemaPath(schemaPath);\n      final SqlValidator validator =\n          new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,\n              conformance);\n      validator.setIdentifierExpansion(true);\n      final SqlNode validatedSqlNode = validator.validate(sqlNode);\n\n      final RexBuilder rexBuilder = createRexBuilder();\n      final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n      final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n          .withTrimUnusedFields(false).withConvertTableAccess(false).build();\n      final SqlToRelConverter sqlToRelConverter =\n          new SqlToRelConverter(new ViewExpanderImpl(), validator,\n              catalogReader, cluster, convertletTable, config);\n\n      root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);\n      root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n      root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n\n      return PlannerImpl.this.root;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"7936185e55e3243c9fec6bb6461a934d2539e32f","commitMessage":"@@@[CALCITE-1336] Add fully-qualified view name to view expander (Julien Le Dem)\n\nClose apache/calcite#263\n","date":"2016-08-03 16:05:00","modifiedFileCount":"16","status":"M","submitter":"Julien Le Dem"},{"authorTime":"2017-07-06 01:36:06","codes":[{"authorDate":"2017-07-06 01:36:06","commitOrder":12,"curCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .withConvertTableAccess(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(new ViewExpanderImpl(), validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","date":"2017-07-07 02:24:38","endLine":242,"groupId":"9869","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"rel","params":"(SqlNodesql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/09/236a0bbfccddee718624f8d62c594a28038f63.src","preCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withTrimUnusedFields(false).withConvertTableAccess(false).build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(new ViewExpanderImpl(), validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"},{"authorDate":"2017-07-06 01:36:06","commitOrder":12,"curCode":"    @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n      SqlParser parser = SqlParser.create(queryString, parserConfig);\n      SqlNode sqlNode;\n      try {\n        sqlNode = parser.parseQuery();\n      } catch (SqlParseException e) {\n        throw new RuntimeException(\"parse failed\", e);\n      }\n\n      final SqlConformance conformance = conformance();\n      final CalciteCatalogReader catalogReader =\n          createCatalogReader().withSchemaPath(schemaPath);\n      final SqlValidator validator =\n          new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,\n              conformance);\n      validator.setIdentifierExpansion(true);\n      final SqlNode validatedSqlNode = validator.validate(sqlNode);\n\n      final RexBuilder rexBuilder = createRexBuilder();\n      final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n      final SqlToRelConverter.Config config = SqlToRelConverter\n          .configBuilder()\n          .withConfig(sqlToRelConverterConfig)\n          .withTrimUnusedFields(false)\n          .withConvertTableAccess(false)\n          .build();\n      final SqlToRelConverter sqlToRelConverter =\n          new SqlToRelConverter(new ViewExpanderImpl(), validator,\n              catalogReader, cluster, convertletTable, config);\n\n      root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);\n      root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n      root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n\n      return PlannerImpl.this.root;\n    }\n","date":"2017-07-07 02:24:38","endLine":283,"groupId":"1983","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"expandView","params":"(RelDataTyperowType@StringqueryString@List<String>schemaPath@List<String>viewPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/09/236a0bbfccddee718624f8d62c594a28038f63.src","preCode":"    @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n      SqlParser parser = SqlParser.create(queryString, parserConfig);\n      SqlNode sqlNode;\n      try {\n        sqlNode = parser.parseQuery();\n      } catch (SqlParseException e) {\n        throw new RuntimeException(\"parse failed\", e);\n      }\n\n      final SqlConformance conformance = conformance();\n      final CalciteCatalogReader catalogReader =\n          createCatalogReader().withSchemaPath(schemaPath);\n      final SqlValidator validator =\n          new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,\n              conformance);\n      validator.setIdentifierExpansion(true);\n      final SqlNode validatedSqlNode = validator.validate(sqlNode);\n\n      final RexBuilder rexBuilder = createRexBuilder();\n      final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n      final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n          .withTrimUnusedFields(false).withConvertTableAccess(false).build();\n      final SqlToRelConverter sqlToRelConverter =\n          new SqlToRelConverter(new ViewExpanderImpl(), validator,\n              catalogReader, cluster, convertletTable, config);\n\n      root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);\n      root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n      root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n\n      return PlannerImpl.this.root;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"}],"commitId":"8e707d433f6f0e0ca9a35218fd8f92e555eb1b4d","commitMessage":"@@@[CALCITE-1874] In Frameworks.  make SqlToRelConverter configurable\n\nClose apache/calcite#492\n","date":"2017-07-07 02:24:38","modifiedFileCount":"3","status":"M","submitter":"Gian Merlino"},{"authorTime":"2018-02-07 21:05:27","codes":[{"authorDate":"2018-02-07 21:05:27","commitOrder":13,"curCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .withConvertTableAccess(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(new ViewExpanderImpl(), validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","date":"2018-03-27 05:21:54","endLine":249,"groupId":"9869","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"rel","params":"(SqlNodesql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e5/f2ae05391601d866abeef3f16dcacdda7044ae.src","preCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .withConvertTableAccess(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(new ViewExpanderImpl(), validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2018-02-07 21:05:27","commitOrder":13,"curCode":"    @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n      SqlParser parser = SqlParser.create(queryString, parserConfig);\n      SqlNode sqlNode;\n      try {\n        sqlNode = parser.parseQuery();\n      } catch (SqlParseException e) {\n        throw new RuntimeException(\"parse failed\", e);\n      }\n\n      final SqlConformance conformance = conformance();\n      final CalciteCatalogReader catalogReader =\n          createCatalogReader().withSchemaPath(schemaPath);\n      final SqlValidator validator =\n          new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,\n              conformance);\n      validator.setIdentifierExpansion(true);\n      final SqlNode validatedSqlNode = validator.validate(sqlNode);\n\n      final RexBuilder rexBuilder = createRexBuilder();\n      final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n      final SqlToRelConverter.Config config = SqlToRelConverter\n          .configBuilder()\n          .withConfig(sqlToRelConverterConfig)\n          .withTrimUnusedFields(false)\n          .withConvertTableAccess(false)\n          .build();\n      final SqlToRelConverter sqlToRelConverter =\n          new SqlToRelConverter(new ViewExpanderImpl(), validator,\n              catalogReader, cluster, convertletTable, config);\n\n      root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);\n      root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n      final RelBuilder relBuilder =\n          config.getRelBuilderFactory().create(cluster, null);\n      root = root.withRel(\n          RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n\n      return PlannerImpl.this.root;\n    }\n","date":"2018-03-27 05:21:54","endLine":293,"groupId":"1983","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"expandView","params":"(RelDataTyperowType@StringqueryString@List<String>schemaPath@List<String>viewPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e5/f2ae05391601d866abeef3f16dcacdda7044ae.src","preCode":"    @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n      SqlParser parser = SqlParser.create(queryString, parserConfig);\n      SqlNode sqlNode;\n      try {\n        sqlNode = parser.parseQuery();\n      } catch (SqlParseException e) {\n        throw new RuntimeException(\"parse failed\", e);\n      }\n\n      final SqlConformance conformance = conformance();\n      final CalciteCatalogReader catalogReader =\n          createCatalogReader().withSchemaPath(schemaPath);\n      final SqlValidator validator =\n          new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,\n              conformance);\n      validator.setIdentifierExpansion(true);\n      final SqlNode validatedSqlNode = validator.validate(sqlNode);\n\n      final RexBuilder rexBuilder = createRexBuilder();\n      final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n      final SqlToRelConverter.Config config = SqlToRelConverter\n          .configBuilder()\n          .withConfig(sqlToRelConverterConfig)\n          .withTrimUnusedFields(false)\n          .withConvertTableAccess(false)\n          .build();\n      final SqlToRelConverter sqlToRelConverter =\n          new SqlToRelConverter(new ViewExpanderImpl(), validator,\n              catalogReader, cluster, convertletTable, config);\n\n      root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);\n      root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n      root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel));\n\n      return PlannerImpl.this.root;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"}],"commitId":"03ec2cfda469f9e401ff0ad1045f94cee4a80e1f","commitMessage":"@@@[CALCITE-2201] Pass RelBuilder into RelDecorrelator and RelStructuredTypeFlattener (Volodymyr Vysotskyi)\n\nAdd a method RelBuilder.projectNamed to replace RelOptUtil.createProject. \nand change various other methods in RelOptUtil to use RelBuilder.\nDeprecate obsolete methods in RelOptUtil.\n\nClose apache/calcite#640\n","date":"2018-03-27 05:21:54","modifiedFileCount":"12","status":"M","submitter":"Volodymyr Vysotskyi"},{"authorTime":"2018-08-03 22:35:19","codes":[{"authorDate":"2018-02-07 21:05:27","commitOrder":14,"curCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .withConvertTableAccess(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(new ViewExpanderImpl(), validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","date":"2018-03-27 05:21:54","endLine":249,"groupId":"9869","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"rel","params":"(SqlNodesql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e5/f2ae05391601d866abeef3f16dcacdda7044ae.src","preCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .withConvertTableAccess(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(new ViewExpanderImpl(), validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"N"},{"authorDate":"2018-08-03 22:35:19","commitOrder":14,"curCode":"    @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n      SqlParser parser = SqlParser.create(queryString, parserConfig);\n      SqlNode sqlNode;\n      try {\n        sqlNode = parser.parseQuery();\n      } catch (SqlParseException e) {\n        throw new RuntimeException(\"parse failed\", e);\n      }\n\n      final SqlConformance conformance = conformance();\n      final CalciteCatalogReader catalogReader =\n          createCatalogReader().withSchemaPath(schemaPath);\n      final SqlValidator validator =\n          new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,\n              conformance);\n      validator.setIdentifierExpansion(true);\n\n      final RexBuilder rexBuilder = createRexBuilder();\n      final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n      final SqlToRelConverter.Config config = SqlToRelConverter\n          .configBuilder()\n          .withConfig(sqlToRelConverterConfig)\n          .withTrimUnusedFields(false)\n          .withConvertTableAccess(false)\n          .build();\n      final SqlToRelConverter sqlToRelConverter =\n          new SqlToRelConverter(new ViewExpanderImpl(), validator,\n              catalogReader, cluster, convertletTable, config);\n\n      root = sqlToRelConverter.convertQuery(sqlNode, true, false);\n      root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n      final RelBuilder relBuilder =\n          config.getRelBuilderFactory().create(cluster, null);\n      root = root.withRel(\n          RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n\n      return PlannerImpl.this.root;\n    }\n","date":"2018-08-13 06:16:51","endLine":286,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"expandView","params":"(RelDataTyperowType@StringqueryString@List<String>schemaPath@List<String>viewPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6f/746aba5c6951416ce03b67a558124bfd5c9a53.src","preCode":"    @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n      SqlParser parser = SqlParser.create(queryString, parserConfig);\n      SqlNode sqlNode;\n      try {\n        sqlNode = parser.parseQuery();\n      } catch (SqlParseException e) {\n        throw new RuntimeException(\"parse failed\", e);\n      }\n\n      final SqlConformance conformance = conformance();\n      final CalciteCatalogReader catalogReader =\n          createCatalogReader().withSchemaPath(schemaPath);\n      final SqlValidator validator =\n          new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,\n              conformance);\n      validator.setIdentifierExpansion(true);\n      final SqlNode validatedSqlNode = validator.validate(sqlNode);\n\n      final RexBuilder rexBuilder = createRexBuilder();\n      final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n      final SqlToRelConverter.Config config = SqlToRelConverter\n          .configBuilder()\n          .withConfig(sqlToRelConverterConfig)\n          .withTrimUnusedFields(false)\n          .withConvertTableAccess(false)\n          .build();\n      final SqlToRelConverter sqlToRelConverter =\n          new SqlToRelConverter(new ViewExpanderImpl(), validator,\n              catalogReader, cluster, convertletTable, config);\n\n      root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);\n      root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n      final RelBuilder relBuilder =\n          config.getRelBuilderFactory().create(cluster, null);\n      root = root.withRel(\n          RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n\n      return PlannerImpl.this.root;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"}],"commitId":"5574873844a440d2ed14dfdc7b0e40a0dae91355","commitMessage":"@@@[CALCITE-2446] Lateral joins do not work when saved as custom views (Piotr Bojko)\n\nWhen expanding views.  Calcite had one additional step in which\nexpanded sqlnode tree was validated and thus rewritten. During this\nstep - information about lateral join was lost.\n\nThis change removes validation step from view expansion algorithms.\n\nAlso.  added bug reproduction in form of unit tests.\n\nClose apache/calcite#780\n","date":"2018-08-13 06:16:51","modifiedFileCount":"5","status":"M","submitter":"Piotr Bojko"},{"authorTime":"2018-10-26 07:50:44","codes":[{"authorDate":"2018-10-26 07:50:44","commitOrder":15,"curCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .withConvertTableAccess(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","date":"2018-11-01 03:01:28","endLine":243,"groupId":"2952","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"rel","params":"(SqlNodesql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/92/69155a11c5312a7407908ac45d99854564e5bb.src","preCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .withConvertTableAccess(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(new ViewExpanderImpl(), validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2018-10-26 07:50:44","commitOrder":15,"curCode":"  @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n    if (planner == null) {\n      ready();\n    }\n    SqlParser parser = SqlParser.create(queryString, parserConfig);\n    SqlNode sqlNode;\n    try {\n      sqlNode = parser.parseQuery();\n    } catch (SqlParseException e) {\n      throw new RuntimeException(\"parse failed\", e);\n    }\n\n    final SqlConformance conformance = conformance();\n    final CalciteCatalogReader catalogReader =\n        createCatalogReader().withSchemaPath(schemaPath);\n    final SqlValidator validator =\n        new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,\n            conformance);\n    validator.setIdentifierExpansion(true);\n\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter\n        .configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .withConvertTableAccess(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            catalogReader, cluster, convertletTable, config);\n\n    final RelRoot root =\n        sqlToRelConverter.convertQuery(sqlNode, true, false);\n    final RelRoot root2 =\n        root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    return root2.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n  }\n","date":"2018-11-01 03:01:28","endLine":300,"groupId":"14009","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"expandView","params":"(RelDataTyperowType@StringqueryString@List<String>schemaPath@List<String>viewPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/92/69155a11c5312a7407908ac45d99854564e5bb.src","preCode":"    @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n      SqlParser parser = SqlParser.create(queryString, parserConfig);\n      SqlNode sqlNode;\n      try {\n        sqlNode = parser.parseQuery();\n      } catch (SqlParseException e) {\n        throw new RuntimeException(\"parse failed\", e);\n      }\n\n      final SqlConformance conformance = conformance();\n      final CalciteCatalogReader catalogReader =\n          createCatalogReader().withSchemaPath(schemaPath);\n      final SqlValidator validator =\n          new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,\n              conformance);\n      validator.setIdentifierExpansion(true);\n\n      final RexBuilder rexBuilder = createRexBuilder();\n      final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n      final SqlToRelConverter.Config config = SqlToRelConverter\n          .configBuilder()\n          .withConfig(sqlToRelConverterConfig)\n          .withTrimUnusedFields(false)\n          .withConvertTableAccess(false)\n          .build();\n      final SqlToRelConverter sqlToRelConverter =\n          new SqlToRelConverter(new ViewExpanderImpl(), validator,\n              catalogReader, cluster, convertletTable, config);\n\n      root = sqlToRelConverter.convertQuery(sqlNode, true, false);\n      root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n      final RelBuilder relBuilder =\n          config.getRelBuilderFactory().create(cluster, null);\n      root = root.withRel(\n          RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n\n      return PlannerImpl.this.root;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"9c26a9e74dafadb27ea363d82cfe1105d5dd3329","commitMessage":"@@@[CALCITE-2441] RelBuilder.scan should expand TranslatableTable and views\n\nAdd class ViewExpanders.  which has utility methods for creating\nToRelContext and ViewExpander.\n","date":"2018-11-01 03:01:28","modifiedFileCount":"20","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-11-29 18:50:56","codes":[{"authorDate":"2018-10-26 07:50:44","commitOrder":16,"curCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .withConvertTableAccess(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","date":"2018-11-01 03:01:28","endLine":243,"groupId":"2952","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"rel","params":"(SqlNodesql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/92/69155a11c5312a7407908ac45d99854564e5bb.src","preCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .withConvertTableAccess(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"N"},{"authorDate":"2019-11-29 18:50:56","commitOrder":16,"curCode":"  @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n    if (planner == null) {\n      ready();\n    }\n    SqlParser parser = SqlParser.create(queryString, parserConfig);\n    SqlNode sqlNode;\n    try {\n      sqlNode = parser.parseQuery();\n    } catch (SqlParseException e) {\n      throw new RuntimeException(\"parse failed\", e);\n    }\n\n    final CalciteCatalogReader catalogReader =\n        createCatalogReader().withSchemaPath(schemaPath);\n    final SqlValidator validator = createSqlValidator(catalogReader);\n\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter\n        .configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .withConvertTableAccess(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            catalogReader, cluster, convertletTable, config);\n\n    final RelRoot root =\n        sqlToRelConverter.convertQuery(sqlNode, true, false);\n    final RelRoot root2 =\n        root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    return root2.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n  }\n","date":"2019-12-06 13:46:26","endLine":317,"groupId":"312","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"expandView","params":"(RelDataTyperowType@StringqueryString@List<String>schemaPath@List<String>viewPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4b/eee6e68d32114133d071266f2a655768755da1.src","preCode":"  @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n    if (planner == null) {\n      ready();\n    }\n    SqlParser parser = SqlParser.create(queryString, parserConfig);\n    SqlNode sqlNode;\n    try {\n      sqlNode = parser.parseQuery();\n    } catch (SqlParseException e) {\n      throw new RuntimeException(\"parse failed\", e);\n    }\n\n    final SqlConformance conformance = conformance();\n    final CalciteCatalogReader catalogReader =\n        createCatalogReader().withSchemaPath(schemaPath);\n    final SqlValidator validator =\n        new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,\n            conformance);\n    validator.setIdentifierExpansion(true);\n\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter\n        .configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .withConvertTableAccess(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            catalogReader, cluster, convertletTable, config);\n\n    final RelRoot root =\n        sqlToRelConverter.convertQuery(sqlNode, true, false);\n    final RelRoot root2 =\n        root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    return root2.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"}],"commitId":"3f340bf9642b19e34be384a4f2b53f8cd4940a67","commitMessage":"@@@[CALCITE-3547] SqlValidatorException because Planner cannot find UDFs added to schema (Chenxiao Mao)\n\n* Fix PlannerImpl#validate and PlannerImpl#expandView\n\nclose apache/calcite#1615\n","date":"2019-12-06 13:46:26","modifiedFileCount":"2","status":"M","submitter":"seancxmao"},{"authorTime":"2020-02-17 13:04:42","codes":[{"authorDate":"2020-02-17 13:04:42","commitOrder":17,"curCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","date":"2020-02-19 10:20:36","endLine":263,"groupId":"2952","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"rel","params":"(SqlNodesql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/6bb66505a0b406b848e5e17c7c289fd0fbca83.src","preCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .withConvertTableAccess(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2020-02-17 13:04:42","commitOrder":17,"curCode":"  @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n    if (planner == null) {\n      ready();\n    }\n    SqlParser parser = SqlParser.create(queryString, parserConfig);\n    SqlNode sqlNode;\n    try {\n      sqlNode = parser.parseQuery();\n    } catch (SqlParseException e) {\n      throw new RuntimeException(\"parse failed\", e);\n    }\n\n    final CalciteCatalogReader catalogReader =\n        createCatalogReader().withSchemaPath(schemaPath);\n    final SqlValidator validator = createSqlValidator(catalogReader);\n\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter\n        .configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            catalogReader, cluster, convertletTable, config);\n\n    final RelRoot root =\n        sqlToRelConverter.convertQuery(sqlNode, true, false);\n    final RelRoot root2 =\n        root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    return root2.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n  }\n","date":"2020-02-19 10:20:36","endLine":315,"groupId":"2681","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"expandView","params":"(RelDataTyperowType@StringqueryString@List<String>schemaPath@List<String>viewPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/6bb66505a0b406b848e5e17c7c289fd0fbca83.src","preCode":"  @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n    if (planner == null) {\n      ready();\n    }\n    SqlParser parser = SqlParser.create(queryString, parserConfig);\n    SqlNode sqlNode;\n    try {\n      sqlNode = parser.parseQuery();\n    } catch (SqlParseException e) {\n      throw new RuntimeException(\"parse failed\", e);\n    }\n\n    final CalciteCatalogReader catalogReader =\n        createCatalogReader().withSchemaPath(schemaPath);\n    final SqlValidator validator = createSqlValidator(catalogReader);\n\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter\n        .configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .withConvertTableAccess(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            catalogReader, cluster, convertletTable, config);\n\n    final RelRoot root =\n        sqlToRelConverter.convertQuery(sqlNode, true, false);\n    final RelRoot root2 =\n        root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    return root2.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"c395c10b6efa781ecd33f49c6322d60579f78ac5","commitMessage":"@@@[CALCITE-3801] Deprecate SqlToRelConverter.Config#isConvertTableAccess\n\nBecause of CALCITE-3769.  this config option is actually useless now. \nwe always return logical rel with method RelOptTable#toRel.\n\nUpdate the CalcitePrepareImpl to use VolcanoPlanner when analyzing the\nview because it can handle the traits correctly.\n","date":"2020-02-19 10:20:36","modifiedFileCount":"5","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-02-17 13:04:42","codes":[{"authorDate":"2020-04-09 10:56:51","commitOrder":18,"curCode":"  public RelRoot rel(SqlNode sql) {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","date":"2020-04-10 10:56:43","endLine":259,"groupId":"2952","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"rel","params":"(SqlNodesql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/51/a366bdf776db90f99f15cbe9eab4e05c103e63.src","preCode":"  public RelRoot rel(SqlNode sql) throws RelConversionException {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"},{"authorDate":"2020-02-17 13:04:42","commitOrder":18,"curCode":"  @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n    if (planner == null) {\n      ready();\n    }\n    SqlParser parser = SqlParser.create(queryString, parserConfig);\n    SqlNode sqlNode;\n    try {\n      sqlNode = parser.parseQuery();\n    } catch (SqlParseException e) {\n      throw new RuntimeException(\"parse failed\", e);\n    }\n\n    final CalciteCatalogReader catalogReader =\n        createCatalogReader().withSchemaPath(schemaPath);\n    final SqlValidator validator = createSqlValidator(catalogReader);\n\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter\n        .configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            catalogReader, cluster, convertletTable, config);\n\n    final RelRoot root =\n        sqlToRelConverter.convertQuery(sqlNode, true, false);\n    final RelRoot root2 =\n        root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    return root2.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n  }\n","date":"2020-02-19 10:20:36","endLine":315,"groupId":"2681","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"expandView","params":"(RelDataTyperowType@StringqueryString@List<String>schemaPath@List<String>viewPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/6bb66505a0b406b848e5e17c7c289fd0fbca83.src","preCode":"  @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n    if (planner == null) {\n      ready();\n    }\n    SqlParser parser = SqlParser.create(queryString, parserConfig);\n    SqlNode sqlNode;\n    try {\n      sqlNode = parser.parseQuery();\n    } catch (SqlParseException e) {\n      throw new RuntimeException(\"parse failed\", e);\n    }\n\n    final CalciteCatalogReader catalogReader =\n        createCatalogReader().withSchemaPath(schemaPath);\n    final SqlValidator validator = createSqlValidator(catalogReader);\n\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter\n        .configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            catalogReader, cluster, convertletTable, config);\n\n    final RelRoot root =\n        sqlToRelConverter.convertQuery(sqlNode, true, false);\n    final RelRoot root2 =\n        root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    return root2.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"N"}],"commitId":"4e9870078fcaa7da9e475c94f43309cc3244fa22","commitMessage":"@@@[CALCITE-3900] Add Config for SqlValidator\n\nThe SqlValidator now has 7 setXXX methods for all kinds of control flags. \nwhich is hard for code evolving.\n\nThere is also no way to config these things through the FrameworkConfig.\n\nAdd a SqlValidator.Config to solve these problems.\n","date":"2020-04-10 10:56:43","modifiedFileCount":"33","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-09-04 11:20:30","codes":[{"authorDate":"2020-09-04 11:20:30","commitOrder":19,"curCode":"  public RelRoot rel(SqlNode sql) {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config =\n        sqlToRelConverterConfig.withTrimUnusedFields(false);\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","date":"2020-09-05 02:41:29","endLine":255,"groupId":"2952","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"rel","params":"(SqlNodesql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/54/17a64b1b767e01be0dc538ea894e3341039c1f.src","preCode":"  public RelRoot rel(SqlNode sql) {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter.configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"},{"authorDate":"2020-09-04 11:20:30","commitOrder":19,"curCode":"  @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n    if (planner == null) {\n      ready();\n    }\n    SqlParser parser = SqlParser.create(queryString, parserConfig);\n    SqlNode sqlNode;\n    try {\n      sqlNode = parser.parseQuery();\n    } catch (SqlParseException e) {\n      throw new RuntimeException(\"parse failed\", e);\n    }\n\n    final CalciteCatalogReader catalogReader =\n        createCatalogReader().withSchemaPath(schemaPath);\n    final SqlValidator validator = createSqlValidator(catalogReader);\n\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config =\n        sqlToRelConverterConfig.withTrimUnusedFields(false);\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            catalogReader, cluster, convertletTable, config);\n\n    final RelRoot root =\n        sqlToRelConverter.convertQuery(sqlNode, true, false);\n    final RelRoot root2 =\n        root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    return root2.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n  }\n","date":"2020-09-05 02:41:29","endLine":305,"groupId":"1793","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"expandView","params":"(RelDataTyperowType@StringqueryString@List<String>schemaPath@List<String>viewPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/54/17a64b1b767e01be0dc538ea894e3341039c1f.src","preCode":"  @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n    if (planner == null) {\n      ready();\n    }\n    SqlParser parser = SqlParser.create(queryString, parserConfig);\n    SqlNode sqlNode;\n    try {\n      sqlNode = parser.parseQuery();\n    } catch (SqlParseException e) {\n      throw new RuntimeException(\"parse failed\", e);\n    }\n\n    final CalciteCatalogReader catalogReader =\n        createCatalogReader().withSchemaPath(schemaPath);\n    final SqlValidator validator = createSqlValidator(catalogReader);\n\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config = SqlToRelConverter\n        .configBuilder()\n        .withConfig(sqlToRelConverterConfig)\n        .withTrimUnusedFields(false)\n        .build();\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            catalogReader, cluster, convertletTable, config);\n\n    final RelRoot root =\n        sqlToRelConverter.convertQuery(sqlNode, true, false);\n    final RelRoot root2 =\n        root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    return root2.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"}],"commitId":"962d9a27ae2801fedbcd35a1f928cc9b73ca60c4","commitMessage":"@@@Obsolete SqlToRelConverter.ConfigBuilder.  and refactor SqlToRelConverterTest\n\nSqlToRelConverter.Config now has a withXxx method for each\nproperty.  so there is no need for a builder. Implementation\nis based upon ImmutableBeans.\n\nProvide methods in TesterImpl and Sql to directly change the\nconfiguration of SqlToRelConverter and RelBuilder. This makes\ntest fixtures more composable.\n","date":"2020-09-05 02:41:29","modifiedFileCount":"18","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-04 11:20:30","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":20,"curCode":"  @Override public RelRoot rel(SqlNode sql) {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config =\n        sqlToRelConverterConfig.withTrimUnusedFields(false);\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","date":"2020-10-07 05:42:47","endLine":255,"groupId":"2952","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"rel","params":"(SqlNodesql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/39/e77a95f9a4d699370afd27ec95ae2cb996ed48.src","preCode":"  public RelRoot rel(SqlNode sql) {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config =\n        sqlToRelConverterConfig.withTrimUnusedFields(false);\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"},{"authorDate":"2020-09-04 11:20:30","commitOrder":20,"curCode":"  @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n    if (planner == null) {\n      ready();\n    }\n    SqlParser parser = SqlParser.create(queryString, parserConfig);\n    SqlNode sqlNode;\n    try {\n      sqlNode = parser.parseQuery();\n    } catch (SqlParseException e) {\n      throw new RuntimeException(\"parse failed\", e);\n    }\n\n    final CalciteCatalogReader catalogReader =\n        createCatalogReader().withSchemaPath(schemaPath);\n    final SqlValidator validator = createSqlValidator(catalogReader);\n\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config =\n        sqlToRelConverterConfig.withTrimUnusedFields(false);\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            catalogReader, cluster, convertletTable, config);\n\n    final RelRoot root =\n        sqlToRelConverter.convertQuery(sqlNode, true, false);\n    final RelRoot root2 =\n        root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    return root2.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n  }\n","date":"2020-09-05 02:41:29","endLine":305,"groupId":"1793","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"expandView","params":"(RelDataTyperowType@StringqueryString@List<String>schemaPath@List<String>viewPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/54/17a64b1b767e01be0dc538ea894e3341039c1f.src","preCode":"  @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n    if (planner == null) {\n      ready();\n    }\n    SqlParser parser = SqlParser.create(queryString, parserConfig);\n    SqlNode sqlNode;\n    try {\n      sqlNode = parser.parseQuery();\n    } catch (SqlParseException e) {\n      throw new RuntimeException(\"parse failed\", e);\n    }\n\n    final CalciteCatalogReader catalogReader =\n        createCatalogReader().withSchemaPath(schemaPath);\n    final SqlValidator validator = createSqlValidator(catalogReader);\n\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config =\n        sqlToRelConverterConfig.withTrimUnusedFields(false);\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            catalogReader, cluster, convertletTable, config);\n\n    final RelRoot root =\n        sqlToRelConverter.convertQuery(sqlNode, true, false);\n    final RelRoot root2 =\n        root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    return root2.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"N"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":21,"curCode":"  @Override public RelRoot rel(SqlNode sql) {\n    ensure(State.STATE_4_VALIDATED);\n    SqlNode validatedSqlNode = requireNonNull(this.validatedSqlNode,\n        \"validatedSqlNode is null. Need to call #validate() first\");\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(\n        requireNonNull(planner, \"planner\"),\n        rexBuilder);\n    final SqlToRelConverter.Config config =\n        sqlToRelConverterConfig.withTrimUnusedFields(false);\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    RelRoot root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","date":"2020-11-30 06:45:33","endLine":269,"groupId":"102161","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"rel","params":"(SqlNodesql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/52/4e40fecf8507221cee24b2fe4dc8dfc2620a3b.src","preCode":"  @Override public RelRoot rel(SqlNode sql) {\n    ensure(State.STATE_4_VALIDATED);\n    assert validatedSqlNode != null;\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config =\n        sqlToRelConverterConfig.withTrimUnusedFields(false);\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            createCatalogReader(), cluster, convertletTable, config);\n    root =\n        sqlToRelConverter.convertQuery(validatedSqlNode, false, true);\n    root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    root = root.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n    state = State.STATE_5_CONVERTED;\n    return root;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":21,"curCode":"  @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, @Nullable List<String> viewPath) {\n    RelOptPlanner planner = this.planner;\n    if (planner == null) {\n      ready();\n      planner = requireNonNull(this.planner, \"planner\");\n    }\n    SqlParser parser = SqlParser.create(queryString, parserConfig);\n    SqlNode sqlNode;\n    try {\n      sqlNode = parser.parseQuery();\n    } catch (SqlParseException e) {\n      throw new RuntimeException(\"parse failed\", e);\n    }\n\n    final CalciteCatalogReader catalogReader =\n        createCatalogReader().withSchemaPath(schemaPath);\n    final SqlValidator validator = createSqlValidator(catalogReader);\n\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config =\n        sqlToRelConverterConfig.withTrimUnusedFields(false);\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            catalogReader, cluster, convertletTable, config);\n\n    final RelRoot root =\n        sqlToRelConverter.convertQuery(sqlNode, true, false);\n    final RelRoot root2 =\n        root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    return root2.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n  }\n","date":"2020-11-30 06:45:33","endLine":321,"groupId":"102161","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"expandView","params":"(RelDataTyperowType@StringqueryString@List<String>schemaPath@@NullableList<String>viewPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/52/4e40fecf8507221cee24b2fe4dc8dfc2620a3b.src","preCode":"  @Override public RelRoot expandView(RelDataType rowType, String queryString,\n      List<String> schemaPath, List<String> viewPath) {\n    if (planner == null) {\n      ready();\n    }\n    SqlParser parser = SqlParser.create(queryString, parserConfig);\n    SqlNode sqlNode;\n    try {\n      sqlNode = parser.parseQuery();\n    } catch (SqlParseException e) {\n      throw new RuntimeException(\"parse failed\", e);\n    }\n\n    final CalciteCatalogReader catalogReader =\n        createCatalogReader().withSchemaPath(schemaPath);\n    final SqlValidator validator = createSqlValidator(catalogReader);\n\n    final RexBuilder rexBuilder = createRexBuilder();\n    final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);\n    final SqlToRelConverter.Config config =\n        sqlToRelConverterConfig.withTrimUnusedFields(false);\n    final SqlToRelConverter sqlToRelConverter =\n        new SqlToRelConverter(this, validator,\n            catalogReader, cluster, convertletTable, config);\n\n    final RelRoot root =\n        sqlToRelConverter.convertQuery(sqlNode, true, false);\n    final RelRoot root2 =\n        root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));\n    final RelBuilder relBuilder =\n        config.getRelBuilderFactory().create(cluster, null);\n    return root2.withRel(\n        RelDecorrelator.decorrelateQuery(root.rel, relBuilder));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
