[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"DELETE FROM\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","date":"2014-11-14 09:39:34","endLine":136,"groupId":"934","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/35/33c9947bd9a6eb1b57066398f586290bffa085.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"DELETE FROM\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlDelete.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"MERGE INTO\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n\n    writer.newlineAndIndent();\n    writer.keyword(\"USING\");\n    source.unparse(writer, opLeft, opRight);\n\n    writer.newlineAndIndent();\n    writer.keyword(\"ON\");\n    condition.unparse(writer, opLeft, opRight);\n\n    if (updateCall != null) {\n      writer.newlineAndIndent();\n      writer.keyword(\"WHEN MATCHED THEN UPDATE\");\n      final SqlWriter.Frame setFrame =\n          writer.startList(\n              SqlWriter.FrameTypeEnum.UPDATE_SET_LIST,\n              \"SET\",\n              \"\");\n\n      Iterator targetColumnIter =\n          updateCall.getTargetColumnList().getList().iterator();\n      Iterator sourceExpressionIter =\n          updateCall.getSourceExpressionList().getList().iterator();\n\n      for (Pair<SqlNode, SqlNode> pair : Pair.zip(\n          updateCall.targetColumnList, updateCall.sourceExpressionList)) {\n        writer.sep(\",\");\n        SqlIdentifier id = (SqlIdentifier) pair.left;\n        id.unparse(writer, opLeft, opRight);\n        writer.keyword(\"=\");\n        SqlNode sourceExp = pair.right;\n        sourceExp.unparse(writer, opLeft, opRight);\n      }\n      writer.endList(setFrame);\n    }\n\n    if (insertCall != null) {\n      writer.newlineAndIndent();\n      writer.keyword(\"WHEN NOT MATCHED THEN INSERT\");\n      if (insertCall.getTargetColumnList() != null) {\n        insertCall.getTargetColumnList().unparse(writer, opLeft, opRight);\n      }\n      insertCall.getSource().unparse(writer, opLeft, opRight);\n\n      writer.endList(frame);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":222,"groupId":"10947","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/d584b998f02d49ef5510ba0cd12bdba9bced73.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"MERGE INTO\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n\n    writer.newlineAndIndent();\n    writer.keyword(\"USING\");\n    source.unparse(writer, opLeft, opRight);\n\n    writer.newlineAndIndent();\n    writer.keyword(\"ON\");\n    condition.unparse(writer, opLeft, opRight);\n\n    if (updateCall != null) {\n      writer.newlineAndIndent();\n      writer.keyword(\"WHEN MATCHED THEN UPDATE\");\n      final SqlWriter.Frame setFrame =\n          writer.startList(\n              SqlWriter.FrameTypeEnum.UPDATE_SET_LIST,\n              \"SET\",\n              \"\");\n\n      Iterator targetColumnIter =\n          updateCall.getTargetColumnList().getList().iterator();\n      Iterator sourceExpressionIter =\n          updateCall.getSourceExpressionList().getList().iterator();\n\n      for (Pair<SqlNode, SqlNode> pair : Pair.zip(\n          updateCall.targetColumnList, updateCall.sourceExpressionList)) {\n        writer.sep(\",\");\n        SqlIdentifier id = (SqlIdentifier) pair.left;\n        id.unparse(writer, opLeft, opRight);\n        writer.keyword(\"=\");\n        SqlNode sourceExp = pair.right;\n        sourceExp.unparse(writer, opLeft, opRight);\n      }\n      writer.endList(setFrame);\n    }\n\n    if (insertCall != null) {\n      writer.newlineAndIndent();\n      writer.keyword(\"WHEN NOT MATCHED THEN INSERT\");\n      if (insertCall.getTargetColumnList() != null) {\n        insertCall.getTargetColumnList().unparse(writer, opLeft, opRight);\n      }\n      insertCall.getSource().unparse(writer, opLeft, opRight);\n\n      writer.endList(frame);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlMerge.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2015-08-20 07:25:30","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"DELETE FROM\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","date":"2014-11-14 09:39:34","endLine":136,"groupId":"934","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/35/33c9947bd9a6eb1b57066398f586290bffa085.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"DELETE FROM\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlDelete.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"},{"authorDate":"2015-08-20 07:25:30","commitOrder":2,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"MERGE INTO\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n\n    writer.newlineAndIndent();\n    writer.keyword(\"USING\");\n    source.unparse(writer, opLeft, opRight);\n\n    writer.newlineAndIndent();\n    writer.keyword(\"ON\");\n    condition.unparse(writer, opLeft, opRight);\n\n    if (updateCall != null) {\n      writer.newlineAndIndent();\n      writer.keyword(\"WHEN MATCHED THEN UPDATE\");\n      final SqlWriter.Frame setFrame =\n          writer.startList(\n              SqlWriter.FrameTypeEnum.UPDATE_SET_LIST,\n              \"SET\",\n              \"\");\n\n      for (Pair<SqlNode, SqlNode> pair : Pair.zip(\n          updateCall.targetColumnList, updateCall.sourceExpressionList)) {\n        writer.sep(\",\");\n        SqlIdentifier id = (SqlIdentifier) pair.left;\n        id.unparse(writer, opLeft, opRight);\n        writer.keyword(\"=\");\n        SqlNode sourceExp = pair.right;\n        sourceExp.unparse(writer, opLeft, opRight);\n      }\n      writer.endList(setFrame);\n    }\n\n    if (insertCall != null) {\n      writer.newlineAndIndent();\n      writer.keyword(\"WHEN NOT MATCHED THEN INSERT\");\n      if (insertCall.getTargetColumnList() != null) {\n        insertCall.getTargetColumnList().unparse(writer, opLeft, opRight);\n      }\n      insertCall.getSource().unparse(writer, opLeft, opRight);\n\n      writer.endList(frame);\n    }\n  }\n","date":"2016-01-10 16:51:24","endLine":219,"groupId":"15060","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/38c391dacb59050ebeb92638569d74dbcdddbc.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"MERGE INTO\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n\n    writer.newlineAndIndent();\n    writer.keyword(\"USING\");\n    source.unparse(writer, opLeft, opRight);\n\n    writer.newlineAndIndent();\n    writer.keyword(\"ON\");\n    condition.unparse(writer, opLeft, opRight);\n\n    if (updateCall != null) {\n      writer.newlineAndIndent();\n      writer.keyword(\"WHEN MATCHED THEN UPDATE\");\n      final SqlWriter.Frame setFrame =\n          writer.startList(\n              SqlWriter.FrameTypeEnum.UPDATE_SET_LIST,\n              \"SET\",\n              \"\");\n\n      Iterator targetColumnIter =\n          updateCall.getTargetColumnList().getList().iterator();\n      Iterator sourceExpressionIter =\n          updateCall.getSourceExpressionList().getList().iterator();\n\n      for (Pair<SqlNode, SqlNode> pair : Pair.zip(\n          updateCall.targetColumnList, updateCall.sourceExpressionList)) {\n        writer.sep(\",\");\n        SqlIdentifier id = (SqlIdentifier) pair.left;\n        id.unparse(writer, opLeft, opRight);\n        writer.keyword(\"=\");\n        SqlNode sourceExp = pair.right;\n        sourceExp.unparse(writer, opLeft, opRight);\n      }\n      writer.endList(setFrame);\n    }\n\n    if (insertCall != null) {\n      writer.newlineAndIndent();\n      writer.keyword(\"WHEN NOT MATCHED THEN INSERT\");\n      if (insertCall.getTargetColumnList() != null) {\n        insertCall.getTargetColumnList().unparse(writer, opLeft, opRight);\n      }\n      insertCall.getSource().unparse(writer, opLeft, opRight);\n\n      writer.endList(frame);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlMerge.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"}],"commitId":"7837e64c3294aa776ca38cba3f756550af3494ab","commitMessage":"@@@Simplify RexProgram.  in particular \"(NOT CASE ... END) IS TRUE\".  which occurs in NOT IN\n","date":"2016-01-10 16:51:24","modifiedFileCount":"12","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"DELETE FROM\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    SqlIdentifier alias = this.alias;\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    SqlNode condition = this.condition;\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","date":"2020-11-30 06:45:33","endLine":144,"groupId":"101874","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/32c1126b36ba382f1c5bcb2c67b96ae272e5d7.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"DELETE FROM\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlDelete.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"MERGE INTO\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    SqlIdentifier alias = this.alias;\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n\n    writer.newlineAndIndent();\n    writer.keyword(\"USING\");\n    source.unparse(writer, opLeft, opRight);\n\n    writer.newlineAndIndent();\n    writer.keyword(\"ON\");\n    condition.unparse(writer, opLeft, opRight);\n\n    SqlUpdate updateCall = this.updateCall;\n    if (updateCall != null) {\n      writer.newlineAndIndent();\n      writer.keyword(\"WHEN MATCHED THEN UPDATE\");\n      final SqlWriter.Frame setFrame =\n          writer.startList(\n              SqlWriter.FrameTypeEnum.UPDATE_SET_LIST,\n              \"SET\",\n              \"\");\n\n      for (Pair<SqlNode, SqlNode> pair : Pair.zip(\n          updateCall.targetColumnList, updateCall.sourceExpressionList)) {\n        writer.sep(\",\");\n        SqlIdentifier id = (SqlIdentifier) pair.left;\n        id.unparse(writer, opLeft, opRight);\n        writer.keyword(\"=\");\n        SqlNode sourceExp = pair.right;\n        sourceExp.unparse(writer, opLeft, opRight);\n      }\n      writer.endList(setFrame);\n    }\n\n    SqlInsert insertCall = this.insertCall;\n    if (insertCall != null) {\n      writer.newlineAndIndent();\n      writer.keyword(\"WHEN NOT MATCHED THEN INSERT\");\n      SqlNodeList targetColumnList = insertCall.getTargetColumnList();\n      if (targetColumnList != null) {\n        targetColumnList.unparse(writer, opLeft, opRight);\n      }\n      insertCall.getSource().unparse(writer, opLeft, opRight);\n\n      writer.endList(frame);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":218,"groupId":"101874","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7f/77650c6b4b8abc895064c7cfb37541f655d049.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"MERGE INTO\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n\n    writer.newlineAndIndent();\n    writer.keyword(\"USING\");\n    source.unparse(writer, opLeft, opRight);\n\n    writer.newlineAndIndent();\n    writer.keyword(\"ON\");\n    condition.unparse(writer, opLeft, opRight);\n\n    if (updateCall != null) {\n      writer.newlineAndIndent();\n      writer.keyword(\"WHEN MATCHED THEN UPDATE\");\n      final SqlWriter.Frame setFrame =\n          writer.startList(\n              SqlWriter.FrameTypeEnum.UPDATE_SET_LIST,\n              \"SET\",\n              \"\");\n\n      for (Pair<SqlNode, SqlNode> pair : Pair.zip(\n          updateCall.targetColumnList, updateCall.sourceExpressionList)) {\n        writer.sep(\",\");\n        SqlIdentifier id = (SqlIdentifier) pair.left;\n        id.unparse(writer, opLeft, opRight);\n        writer.keyword(\"=\");\n        SqlNode sourceExp = pair.right;\n        sourceExp.unparse(writer, opLeft, opRight);\n      }\n      writer.endList(setFrame);\n    }\n\n    if (insertCall != null) {\n      writer.newlineAndIndent();\n      writer.keyword(\"WHEN NOT MATCHED THEN INSERT\");\n      if (insertCall.getTargetColumnList() != null) {\n        insertCall.getTargetColumnList().unparse(writer, opLeft, opRight);\n      }\n      insertCall.getSource().unparse(writer, opLeft, opRight);\n\n      writer.endList(frame);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlMerge.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
