[{"authorTime":"2020-05-20 14:52:40","codes":[{"authorDate":"2020-05-20 14:52:40","commitOrder":1,"curCode":"  @Override public Pair<RelTraitSet, List<RelTraitSet>> passThroughTraits(\n      RelTraitSet required) {\n    RelCollation collation = required.getCollation();\n    if (collation == null || collation == RelCollations.EMPTY) {\n      return null;\n    }\n    RelTraitSet traits = traitSet.replace(collation);\n    return Pair.of(traits, ImmutableList.of(traits));\n  }\n","date":"2020-05-30 03:06:17","endLine":87,"groupId":"16133","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"passThroughTraits","params":"(RelTraitSetrequired)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5a/f195c826fe668df2ac2302725f28a11ea9d410.src","preCode":"  @Override public Pair<RelTraitSet, List<RelTraitSet>> passThroughTraits(\n      RelTraitSet required) {\n    RelCollation collation = required.getCollation();\n    if (collation == null || collation == RelCollations.EMPTY) {\n      return null;\n    }\n    RelTraitSet traits = traitSet.replace(collation);\n    return Pair.of(traits, ImmutableList.of(traits));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"},{"authorDate":"2020-05-20 14:52:40","commitOrder":1,"curCode":"  @Override public Pair<RelTraitSet, List<RelTraitSet>> deriveTraits(\n      final RelTraitSet childTraits, final int childId) {\n    RelCollation collation = childTraits.getCollation();\n    if (collation == null || collation == RelCollations.EMPTY) {\n      return null;\n    }\n    RelTraitSet traits = traitSet.replace(collation);\n    return Pair.of(traits, ImmutableList.of(traits));\n  }\n","date":"2020-05-30 03:06:17","endLine":97,"groupId":"16133","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deriveTraits","params":"(finalRelTraitSetchildTraits@finalintchildId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5a/f195c826fe668df2ac2302725f28a11ea9d410.src","preCode":"  @Override public Pair<RelTraitSet, List<RelTraitSet>> deriveTraits(\n      final RelTraitSet childTraits, final int childId) {\n    RelCollation collation = childTraits.getCollation();\n    if (collation == null || collation == RelCollations.EMPTY) {\n      return null;\n    }\n    RelTraitSet traits = traitSet.replace(collation);\n    return Pair.of(traits, ImmutableList.of(traits));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"}],"commitId":"0af3fd17a293d37125c7cca58257e5f6cbc1a76c","commitMessage":"@@@[CALCITE-4011] Support trait propagation for EnumerableProject and EnumerableFilter (Rui Wang)\n\nTrait propgation includes trait passthrough and trait derivation.\n\nTrait passthrough could happen when Project satisfies the ordering\nrequirement that is defined by collations. Project will not satisfy the\nordering requirement when a requested collation is defined on a\nnon-trivial expression. Usually a RexCall is considered as non-trivial. \nunless it is a CAST that perserves monotonicity. \n\nHere is an example to demonstrate why trait cannot pass through when\ncollations are defined on non-trival expr:\n\nselect a.  b*-1 as b\nfrom foo\norder by a.  b;\n\nwhich generates the logical plan:\nLogicalSort\n  LogicalProject\n     LogicalTableScan\n\nWe cannot move the top sort down through the project. Because b*-1 will\nchange ordering to the opposite. The sort has to remain on top of\nproject for correness.\n\nTrait derivaiton does something simlar to trait pass through.  except for\none difference:\ntrait derivation can return parital collations that are derived from\nchild. For example.  if [a.  b.  c.  d] is derived from child.  and if c is\ndefined on a non-trival expr.  then [a.  b] will be returned cause it\nmight be useful for parents.\n\nAnother example to show why trait derivation could be useful to reutrn\npartial collations:\n\nselect a.  b\nfrom (\n select a.  b.  c*-1.  d\n from foo\n order by a.  b.  c.  d\n)\norder by a.  b;\n\nIn this example.  even though the inner project does not preserve the\ntotal ordering for inner sort.  but the outer sort only want to sort on\n[a.  b].  thus if inner project can derive [a.  b].  the outer project will\nnot need the top sort or enforce a sort for its input.\n\nAfter top-down optimization is enabled.  trait propagation for EnumerableProject\nand EnumerableFilter is supposed to replace ProjectSortTransposeRule and\nSortProjectTransposeRule.\n\nClose #1985\n","date":"2020-05-30 03:06:17","modifiedFileCount":"13","status":"B","submitter":"amaliujia"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  @Override public @Nullable Pair<RelTraitSet, List<RelTraitSet>> passThroughTraits(\n      RelTraitSet required) {\n    RelCollation collation = required.getCollation();\n    if (collation == null || collation == RelCollations.EMPTY) {\n      return null;\n    }\n    RelTraitSet traits = traitSet.replace(collation);\n    return Pair.of(traits, ImmutableList.of(traits));\n  }\n","date":"2020-11-30 06:45:33","endLine":89,"groupId":"102127","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"passThroughTraits","params":"(RelTraitSetrequired)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f4/943ce8917c44504156f62db77988d02b7064ee.src","preCode":"  @Override public Pair<RelTraitSet, List<RelTraitSet>> passThroughTraits(\n      RelTraitSet required) {\n    RelCollation collation = required.getCollation();\n    if (collation == null || collation == RelCollations.EMPTY) {\n      return null;\n    }\n    RelTraitSet traits = traitSet.replace(collation);\n    return Pair.of(traits, ImmutableList.of(traits));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  @Override public @Nullable Pair<RelTraitSet, List<RelTraitSet>> deriveTraits(\n      final RelTraitSet childTraits, final int childId) {\n    RelCollation collation = childTraits.getCollation();\n    if (collation == null || collation == RelCollations.EMPTY) {\n      return null;\n    }\n    RelTraitSet traits = traitSet.replace(collation);\n    return Pair.of(traits, ImmutableList.of(traits));\n  }\n","date":"2020-11-30 06:45:33","endLine":99,"groupId":"102127","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"deriveTraits","params":"(finalRelTraitSetchildTraits@finalintchildId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f4/943ce8917c44504156f62db77988d02b7064ee.src","preCode":"  @Override public Pair<RelTraitSet, List<RelTraitSet>> deriveTraits(\n      final RelTraitSet childTraits, final int childId) {\n    RelCollation collation = childTraits.getCollation();\n    if (collation == null || collation == RelCollations.EMPTY) {\n      return null;\n    }\n    RelTraitSet traits = traitSet.replace(collation);\n    return Pair.of(traits, ImmutableList.of(traits));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
