[{"authorTime":"2019-05-05 17:23:45","codes":[{"authorDate":"2019-05-05 17:23:45","commitOrder":1,"curCode":"  @Test public void testFunctionExpression1() {\n    ParameterExpression param = Expressions.parameter(String.class, \"input\");\n    FunctionExpression expr = Expressions.lambda(Function1.class,\n        Expressions.block(\n            Expressions.return_(null, param)),\n        param);\n    assertJavaCodeContains(\"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n        + \"  public String apply(String input) {\\n\"\n        + \"    return input;\\n\"\n        + \"  }\\n\"\n        + \"  public Object apply(Object input) {\\n\"\n        + \"    return apply(\\n\"\n        + \"      (String) input);\\n\"\n        + \"  }\\n\"\n        + \"}\\n\", expr);\n    assertTypeContains(String.class, expr);\n  }\n","date":"2019-05-08 23:37:29","endLine":74,"groupId":"15686","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFunctionExpression1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/48/66eb01e76ac31312c5ed420f141c1c45e34310.src","preCode":"  @Test public void testFunctionExpression1() {\n    ParameterExpression param = Expressions.parameter(String.class, \"input\");\n    FunctionExpression expr = Expressions.lambda(Function1.class,\n        Expressions.block(\n            Expressions.return_(null, param)),\n        param);\n    assertJavaCodeContains(\"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n        + \"  public String apply(String input) {\\n\"\n        + \"    return input;\\n\"\n        + \"  }\\n\"\n        + \"  public Object apply(Object input) {\\n\"\n        + \"    return apply(\\n\"\n        + \"      (String) input);\\n\"\n        + \"  }\\n\"\n        + \"}\\n\", expr);\n    assertTypeContains(String.class, expr);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/adapter/enumerable/TypeFinderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2019-05-05 17:23:45","commitOrder":1,"curCode":"  @Test public void testFunctionExpression2() {\n    FunctionExpression expr = Expressions.lambda(Function1.class,\n        Expressions.block(\n            Expressions.return_(null, Expressions.constant(1L, Long.class))),\n        Expressions.parameter(String.class, \"input\"));\n    assertJavaCodeContains(\"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n        + \"  public Long apply(String input) {\\n\"\n        + \"    return Long.valueOf(1L);\\n\"\n        + \"  }\\n\"\n        + \"  public Object apply(Object input) {\\n\"\n        + \"    return apply(\\n\"\n        + \"      (String) input);\\n\"\n        + \"  }\\n\"\n        + \"}\\n\", expr);\n    assertTypeContains(Arrays.asList(String.class, Long.class), expr);\n  }\n","date":"2019-05-08 23:37:29","endLine":91,"groupId":"13230","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFunctionExpression2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/48/66eb01e76ac31312c5ed420f141c1c45e34310.src","preCode":"  @Test public void testFunctionExpression2() {\n    FunctionExpression expr = Expressions.lambda(Function1.class,\n        Expressions.block(\n            Expressions.return_(null, Expressions.constant(1L, Long.class))),\n        Expressions.parameter(String.class, \"input\"));\n    assertJavaCodeContains(\"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n        + \"  public Long apply(String input) {\\n\"\n        + \"    return Long.valueOf(1L);\\n\"\n        + \"  }\\n\"\n        + \"  public Object apply(Object input) {\\n\"\n        + \"    return apply(\\n\"\n        + \"      (String) input);\\n\"\n        + \"  }\\n\"\n        + \"}\\n\", expr);\n    assertTypeContains(Arrays.asList(String.class, Long.class), expr);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/adapter/enumerable/TypeFinderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"}],"commitId":"b8bdfb074be12f90c98f9f1fa2af8cf46f2d36f1","commitMessage":"@@@[CALCITE-3046] CompileException when inserting casted value of composited user defined type into table\n\nAlso.  add several test cases for EnumerableRelImplementor.TypeFinder.\n","date":"2019-05-08 23:37:29","modifiedFileCount":"3","status":"B","submitter":"Hongze Zhang"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testFunctionExpression1() {\n    ParameterExpression param = Expressions.parameter(String.class, \"input\");\n    FunctionExpression expr = Expressions.lambda(Function1.class,\n        Expressions.block(\n            Expressions.return_(null, param)),\n        param);\n    assertJavaCodeContains(\"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n        + \"  public String apply(String input) {\\n\"\n        + \"    return input;\\n\"\n        + \"  }\\n\"\n        + \"  public Object apply(Object input) {\\n\"\n        + \"    return apply(\\n\"\n        + \"      (String) input);\\n\"\n        + \"  }\\n\"\n        + \"}\\n\", expr);\n    assertTypeContains(String.class, expr);\n  }\n","date":"2020-04-06 04:57:49","endLine":75,"groupId":"101606","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFunctionExpression1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/17/9982ab24046d58cfe701a13e65b64df4f5fa82.src","preCode":"  @Test public void testFunctionExpression1() {\n    ParameterExpression param = Expressions.parameter(String.class, \"input\");\n    FunctionExpression expr = Expressions.lambda(Function1.class,\n        Expressions.block(\n            Expressions.return_(null, param)),\n        param);\n    assertJavaCodeContains(\"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n        + \"  public String apply(String input) {\\n\"\n        + \"    return input;\\n\"\n        + \"  }\\n\"\n        + \"  public Object apply(Object input) {\\n\"\n        + \"    return apply(\\n\"\n        + \"      (String) input);\\n\"\n        + \"  }\\n\"\n        + \"}\\n\", expr);\n    assertTypeContains(String.class, expr);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/adapter/enumerable/TypeFinderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testFunctionExpression2() {\n    FunctionExpression expr = Expressions.lambda(Function1.class,\n        Expressions.block(\n            Expressions.return_(null, Expressions.constant(1L, Long.class))),\n        Expressions.parameter(String.class, \"input\"));\n    assertJavaCodeContains(\"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n        + \"  public Long apply(String input) {\\n\"\n        + \"    return Long.valueOf(1L);\\n\"\n        + \"  }\\n\"\n        + \"  public Object apply(Object input) {\\n\"\n        + \"    return apply(\\n\"\n        + \"      (String) input);\\n\"\n        + \"  }\\n\"\n        + \"}\\n\", expr);\n    assertTypeContains(Arrays.asList(String.class, Long.class), expr);\n  }\n","date":"2020-04-06 04:57:49","endLine":92,"groupId":"101606","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFunctionExpression2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/17/9982ab24046d58cfe701a13e65b64df4f5fa82.src","preCode":"  @Test public void testFunctionExpression2() {\n    FunctionExpression expr = Expressions.lambda(Function1.class,\n        Expressions.block(\n            Expressions.return_(null, Expressions.constant(1L, Long.class))),\n        Expressions.parameter(String.class, \"input\"));\n    assertJavaCodeContains(\"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n        + \"  public Long apply(String input) {\\n\"\n        + \"    return Long.valueOf(1L);\\n\"\n        + \"  }\\n\"\n        + \"  public Object apply(Object input) {\\n\"\n        + \"    return apply(\\n\"\n        + \"      (String) input);\\n\"\n        + \"  }\\n\"\n        + \"}\\n\", expr);\n    assertTypeContains(Arrays.asList(String.class, Long.class), expr);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/adapter/enumerable/TypeFinderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
