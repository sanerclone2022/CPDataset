[{"authorTime":"2020-08-13 15:59:15","codes":[{"authorDate":"2020-08-13 15:59:15","commitOrder":2,"curCode":"  @Test void testRangeSetMinus() {\n    final RangeSet<Integer> setNone = ImmutableRangeSet.of();\n    final RangeSet<Integer> setAll = setNone.complement();\n    final RangeSet<Integer> setGt2 = ImmutableRangeSet.of(Range.greaterThan(2));\n    final RangeSet<Integer> setGt1 = ImmutableRangeSet.of(Range.greaterThan(1));\n    final RangeSet<Integer> setGe1 = ImmutableRangeSet.of(Range.atLeast(1));\n    final RangeSet<Integer> setGt0 = ImmutableRangeSet.of(Range.greaterThan(0));\n    final RangeSet<Integer> setComplex =\n        ImmutableRangeSet.<Integer>builder()\n            .add(Range.closed(0, 2))\n            .add(Range.singleton(3))\n            .add(Range.greaterThan(5))\n            .build();\n    assertThat(setComplex.toString(),\n        is(\"[[0\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n\n    assertThat(RangeSets.minus(setAll, Range.singleton(1)).toString(),\n        is(\"[(-\\u221e\\u20251), (1\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setNone, Range.singleton(1)), is(setNone));\n    assertThat(RangeSets.minus(setGt2, Range.singleton(1)), is(setGt2));\n    assertThat(RangeSets.minus(setGt1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGe1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGt0, Range.singleton(1)).toString(),\n        is(\"[(0\\u20251), (1\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(1)).toString(),\n        is(\"[[0\\u20251), (1\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(2)).toString(),\n        is(\"[[0\\u20252), [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(3)).toString(),\n        is(\"[[0\\u20252], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.open(2, 3)).toString(),\n        is(\"[[0\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 3)).toString(),\n        is(\"[[0\\u20252), (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 7)).toString(),\n        is(\"[[0\\u20252), (7\\u2025+\\u221e)]\"));\n  }\n","date":"2020-09-05 00:58:49","endLine":1386,"groupId":"7665","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeSetMinus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1b/836f2e9c52bf3f80f0c453746a87bfa8fd46a2.src","preCode":"  @Test void testRangeSetMinus() {\n    final RangeSet<Integer> setNone = ImmutableRangeSet.of();\n    final RangeSet<Integer> setAll = setNone.complement();\n    final RangeSet<Integer> setGt2 = ImmutableRangeSet.of(Range.greaterThan(2));\n    final RangeSet<Integer> setGt1 = ImmutableRangeSet.of(Range.greaterThan(1));\n    final RangeSet<Integer> setGe1 = ImmutableRangeSet.of(Range.atLeast(1));\n    final RangeSet<Integer> setGt0 = ImmutableRangeSet.of(Range.greaterThan(0));\n    final RangeSet<Integer> setComplex =\n        ImmutableRangeSet.<Integer>builder()\n            .add(Range.closed(0, 2))\n            .add(Range.singleton(3))\n            .add(Range.greaterThan(5))\n            .build();\n    assertThat(setComplex.toString(),\n        is(\"[[0\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n\n    assertThat(RangeSets.minus(setAll, Range.singleton(1)).toString(),\n        is(\"[(-\\u221e\\u20251), (1\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setNone, Range.singleton(1)), is(setNone));\n    assertThat(RangeSets.minus(setGt2, Range.singleton(1)), is(setGt2));\n    assertThat(RangeSets.minus(setGt1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGe1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGt0, Range.singleton(1)).toString(),\n        is(\"[(0\\u20251), (1\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(1)).toString(),\n        is(\"[[0\\u20251), (1\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(2)).toString(),\n        is(\"[[0\\u20252), [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(3)).toString(),\n        is(\"[[0\\u20252], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.open(2, 3)).toString(),\n        is(\"[[0\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 3)).toString(),\n        is(\"[[0\\u20252), (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 7)).toString(),\n        is(\"[[0\\u20252), (7\\u2025+\\u221e)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1350,"status":"MB"},{"authorDate":"2020-08-13 15:59:15","commitOrder":2,"curCode":"  @Test void testRangeSetMinus() {\n    final RangeSet<Integer> setNone = ImmutableRangeSet.of();\n    final RangeSet<Integer> setAll = setNone.complement();\n    final RangeSet<Integer> setGt2 = ImmutableRangeSet.of(Range.greaterThan(2));\n    final RangeSet<Integer> setGt1 = ImmutableRangeSet.of(Range.greaterThan(1));\n    final RangeSet<Integer> setGe1 = ImmutableRangeSet.of(Range.atLeast(1));\n    final RangeSet<Integer> setGt0 = ImmutableRangeSet.of(Range.greaterThan(0));\n    final RangeSet<Integer> setComplex =\n        ImmutableRangeSet.<Integer>builder()\n            .add(Range.closed(0, 2))\n            .add(Range.singleton(3))\n            .add(Range.greaterThan(5))\n            .build();\n    assertThat(setComplex.toString(), is(\"[[0\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n\n    assertThat(RangeSets.minus(setAll, Range.singleton(1)).toString(),\n        is(\"[(-\\u221e\\u20251), (1\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setNone, Range.singleton(1)), is(setNone));\n    assertThat(RangeSets.minus(setGt2, Range.singleton(1)), is(setGt2));\n    assertThat(RangeSets.minus(setGt1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGe1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGt0, Range.singleton(1)).toString(),\n        is(\"[(0\\u20251), (1\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(1)).toString(),\n        is(\"[[0\\u20251), (1\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(2)).toString(),\n        is(\"[[0\\u20252), [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(3)).toString(),\n        is(\"[[0\\u20252], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.open(2, 3)).toString(),\n        is(\"[[0\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 3)).toString(),\n        is(\"[[0\\u20252), (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 7)).toString(),\n        is(\"[[0\\u20252), (7\\u2025+\\u221e)]\"));\n  }\n","date":"2020-09-05 00:58:49","endLine":81,"groupId":"7665","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRangeSetMinus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2d/74877f90639afcb88118fc9b73638145e5555b.src","preCode":"  @Test void testRangeSetMinus() {\n    final RangeSet<Integer> setNone = ImmutableRangeSet.of();\n    final RangeSet<Integer> setAll = setNone.complement();\n    final RangeSet<Integer> setGt2 = ImmutableRangeSet.of(Range.greaterThan(2));\n    final RangeSet<Integer> setGt1 = ImmutableRangeSet.of(Range.greaterThan(1));\n    final RangeSet<Integer> setGe1 = ImmutableRangeSet.of(Range.atLeast(1));\n    final RangeSet<Integer> setGt0 = ImmutableRangeSet.of(Range.greaterThan(0));\n    final RangeSet<Integer> setComplex =\n        ImmutableRangeSet.<Integer>builder()\n            .add(Range.closed(0, 2))\n            .add(Range.singleton(3))\n            .add(Range.greaterThan(5))\n            .build();\n    assertThat(setComplex.toString(), is(\"[[0\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n\n    assertThat(RangeSets.minus(setAll, Range.singleton(1)).toString(),\n        is(\"[(-\\u221e\\u20251), (1\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setNone, Range.singleton(1)), is(setNone));\n    assertThat(RangeSets.minus(setGt2, Range.singleton(1)), is(setGt2));\n    assertThat(RangeSets.minus(setGt1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGe1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGt0, Range.singleton(1)).toString(),\n        is(\"[(0\\u20251), (1\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(1)).toString(),\n        is(\"[[0\\u20251), (1\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(2)).toString(),\n        is(\"[[0\\u20252), [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(3)).toString(),\n        is(\"[[0\\u20252], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.open(2, 3)).toString(),\n        is(\"[[0\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 3)).toString(),\n        is(\"[[0\\u20252), (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 7)).toString(),\n        is(\"[[0\\u20252), (7\\u2025+\\u221e)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/RangeSetTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"}],"commitId":"850f0f4a04fc2399b8fd1c1fed532cd8e1e39514","commitMessage":"@@@[CALCITE-4173] Add internal SEARCH operator and Sarg literal that represents a set of values or ranges\n\nObsolete use of IN in RexCall; in Druid.  replace some uses\nwith DRUID_IN operator.\n\nCreate Sarg instances during RexSimplify of AND.  OR. Also\nduring simplify.  strengthen Sarg.containsNull from true to\nfalse if predicates prove that NULL values are impossible.\n\nIn JDBC adapter we handle SEARCH natively.  but in Geode. \nMongoDB and Spark adapters.  expand SEARCH before translating\nto target query language. Later.  it may be better to handle\nSEARCH explicitly. For instance.  it will be easier to recognize\nexpressions that can be translated to Geode's 'IN SET'\nconstruct.\n\nClose apache/calcite#2124\n","date":"2020-09-05 00:58:49","modifiedFileCount":"44","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-17 05:42:37","codes":[{"authorDate":"2020-09-17 05:42:37","commitOrder":3,"curCode":"  @Test void testRangeSetMinus() {\n    final RangeSet<Integer> setNone = ImmutableRangeSet.of();\n    final RangeSet<Integer> setAll = setNone.complement();\n    final RangeSet<Integer> setGt2 = ImmutableRangeSet.of(Range.greaterThan(2));\n    final RangeSet<Integer> setGt1 = ImmutableRangeSet.of(Range.greaterThan(1));\n    final RangeSet<Integer> setGe1 = ImmutableRangeSet.of(Range.atLeast(1));\n    final RangeSet<Integer> setGt0 = ImmutableRangeSet.of(Range.greaterThan(0));\n    final RangeSet<Integer> setComplex =\n        ImmutableRangeSet.<Integer>builder()\n            .add(Range.closed(0, 2))\n            .add(Range.singleton(3))\n            .add(Range.greaterThan(5))\n            .build();\n    assertThat(setComplex, isRangeSet(\"[[0..2], [3..3], (5..+\\u221e)]\"));\n\n    assertThat(RangeSets.minus(setAll, Range.singleton(1)),\n        isRangeSet(\"[(-\\u221e..1), (1..+\\u221e)]\"));\n    assertThat(RangeSets.minus(setNone, Range.singleton(1)), is(setNone));\n    assertThat(RangeSets.minus(setGt2, Range.singleton(1)), is(setGt2));\n    assertThat(RangeSets.minus(setGt1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGe1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGt0, Range.singleton(1)),\n        isRangeSet(\"[(0..1), (1..+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(1)),\n        isRangeSet(\"[[0..1), (1..2], [3..3], (5..+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(2)),\n        isRangeSet(\"[[0..2), [3..3], (5..+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(3)),\n        isRangeSet(\"[[0..2], (5..+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.open(2, 3)),\n        isRangeSet(\"[[0..2], [3..3], (5..+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 3)),\n        isRangeSet(\"[[0..2), (5..+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 7)),\n        isRangeSet(\"[[0..2), (7..+\\u221e)]\"));\n  }\n","date":"2020-09-28 23:30:05","endLine":1387,"groupId":"10684","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeSetMinus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8d/15644592da26a07c77aae4d4f9dce60876ce01.src","preCode":"  @Test void testRangeSetMinus() {\n    final RangeSet<Integer> setNone = ImmutableRangeSet.of();\n    final RangeSet<Integer> setAll = setNone.complement();\n    final RangeSet<Integer> setGt2 = ImmutableRangeSet.of(Range.greaterThan(2));\n    final RangeSet<Integer> setGt1 = ImmutableRangeSet.of(Range.greaterThan(1));\n    final RangeSet<Integer> setGe1 = ImmutableRangeSet.of(Range.atLeast(1));\n    final RangeSet<Integer> setGt0 = ImmutableRangeSet.of(Range.greaterThan(0));\n    final RangeSet<Integer> setComplex =\n        ImmutableRangeSet.<Integer>builder()\n            .add(Range.closed(0, 2))\n            .add(Range.singleton(3))\n            .add(Range.greaterThan(5))\n            .build();\n    assertThat(setComplex.toString(),\n        is(\"[[0\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n\n    assertThat(RangeSets.minus(setAll, Range.singleton(1)).toString(),\n        is(\"[(-\\u221e\\u20251), (1\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setNone, Range.singleton(1)), is(setNone));\n    assertThat(RangeSets.minus(setGt2, Range.singleton(1)), is(setGt2));\n    assertThat(RangeSets.minus(setGt1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGe1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGt0, Range.singleton(1)).toString(),\n        is(\"[(0\\u20251), (1\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(1)).toString(),\n        is(\"[[0\\u20251), (1\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(2)).toString(),\n        is(\"[[0\\u20252), [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(3)).toString(),\n        is(\"[[0\\u20252], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.open(2, 3)).toString(),\n        is(\"[[0\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 3)).toString(),\n        is(\"[[0\\u20252), (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 7)).toString(),\n        is(\"[[0\\u20252), (7\\u2025+\\u221e)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1352,"status":"M"},{"authorDate":"2020-09-17 05:42:37","commitOrder":3,"curCode":"  @Test void testRangeSetMinus() {\n    final RangeSet<Integer> setNone = ImmutableRangeSet.of();\n    final RangeSet<Integer> setAll = setNone.complement();\n    final RangeSet<Integer> setGt2 = ImmutableRangeSet.of(Range.greaterThan(2));\n    final RangeSet<Integer> setGt1 = ImmutableRangeSet.of(Range.greaterThan(1));\n    final RangeSet<Integer> setGe1 = ImmutableRangeSet.of(Range.atLeast(1));\n    final RangeSet<Integer> setGt0 = ImmutableRangeSet.of(Range.greaterThan(0));\n    final RangeSet<Integer> setComplex =\n        ImmutableRangeSet.<Integer>builder()\n            .add(Range.closed(0, 2))\n            .add(Range.singleton(3))\n            .add(Range.greaterThan(5))\n            .build();\n    assertThat(setComplex, isRangeSet(\"[[0..2], [3..3], (5..+\\u221e)]\"));\n\n    assertThat(RangeSets.minus(setAll, Range.singleton(1)),\n        isRangeSet(\"[(-\\u221e..1), (1..+\\u221e)]\"));\n    assertThat(RangeSets.minus(setNone, Range.singleton(1)), is(setNone));\n    assertThat(RangeSets.minus(setGt2, Range.singleton(1)), is(setGt2));\n    assertThat(RangeSets.minus(setGt1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGe1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGt0, Range.singleton(1)),\n        isRangeSet(\"[(0..1), (1..+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(1)),\n        isRangeSet(\"[[0..1), (1..2], [3..3], (5..+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(2)),\n        isRangeSet(\"[[0..2), [3..3], (5..+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(3)),\n        isRangeSet(\"[[0..2], (5..+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.open(2, 3)),\n        isRangeSet(\"[[0..2], [3..3], (5..+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 3)),\n        isRangeSet(\"[[0..2), (5..+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 7)),\n        isRangeSet(\"[[0..2), (7..+\\u221e)]\"));\n  }\n","date":"2020-09-28 23:30:05","endLine":84,"groupId":"10684","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRangeSetMinus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f0/4870563bc1f7885341c878567e4a649ebe4e48.src","preCode":"  @Test void testRangeSetMinus() {\n    final RangeSet<Integer> setNone = ImmutableRangeSet.of();\n    final RangeSet<Integer> setAll = setNone.complement();\n    final RangeSet<Integer> setGt2 = ImmutableRangeSet.of(Range.greaterThan(2));\n    final RangeSet<Integer> setGt1 = ImmutableRangeSet.of(Range.greaterThan(1));\n    final RangeSet<Integer> setGe1 = ImmutableRangeSet.of(Range.atLeast(1));\n    final RangeSet<Integer> setGt0 = ImmutableRangeSet.of(Range.greaterThan(0));\n    final RangeSet<Integer> setComplex =\n        ImmutableRangeSet.<Integer>builder()\n            .add(Range.closed(0, 2))\n            .add(Range.singleton(3))\n            .add(Range.greaterThan(5))\n            .build();\n    assertThat(setComplex.toString(), is(\"[[0\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n\n    assertThat(RangeSets.minus(setAll, Range.singleton(1)).toString(),\n        is(\"[(-\\u221e\\u20251), (1\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setNone, Range.singleton(1)), is(setNone));\n    assertThat(RangeSets.minus(setGt2, Range.singleton(1)), is(setGt2));\n    assertThat(RangeSets.minus(setGt1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGe1, Range.singleton(1)), is(setGt1));\n    assertThat(RangeSets.minus(setGt0, Range.singleton(1)).toString(),\n        is(\"[(0\\u20251), (1\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(1)).toString(),\n        is(\"[[0\\u20251), (1\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(2)).toString(),\n        is(\"[[0\\u20252), [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.singleton(3)).toString(),\n        is(\"[[0\\u20252], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.open(2, 3)).toString(),\n        is(\"[[0\\u20252], [3\\u20253], (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 3)).toString(),\n        is(\"[[0\\u20252), (5\\u2025+\\u221e)]\"));\n    assertThat(RangeSets.minus(setComplex, Range.closed(2, 7)).toString(),\n        is(\"[[0\\u20252), (7\\u2025+\\u221e)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/RangeSetTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"84ac41900bc41fc38bc5238b3bb53f765b70349b","commitMessage":"@@@[CALCITE-4259] Support JDK 15 and Guava version 29.0-jre\n\nCalcite still supports JDK 8 and higher.  and Guava 19.0 and higher.\n\nUpgrade io.airlift.tpch-0.1 to io.prestosql.tpch-1.0.\n\nIn guava-29.  RangeSet.toString() changed format. Change\nCalcite's formatting of Sargs to match.  and add wrappers so\nthat tests pass on all versions of Guava.\n\nRemove log4j; disable checking for warnings in\nSqlHintsConverterTest. Danny Chen has agreed to re-enable\nshortly.\n\nSwitch CI from JDK 14 to 15\n\nThrow if SQL strings in RelOptRulesTest have trailing spaces;\nthe spaces make reference logs brittle.\n\nSimplify description of which JDKs we support.\n\nClose apache/calcite#2153\n","date":"2020-09-28 23:30:05","modifiedFileCount":"17","status":"M","submitter":"Julian Hyde"}]
