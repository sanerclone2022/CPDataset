[{"authorTime":"2019-04-12 15:11:30","codes":[{"authorDate":"2019-04-12 15:11:30","commitOrder":1,"curCode":"  public static EnumerableHashJoin create(\n      RelNode left,\n      RelNode right,\n      RexNode condition,\n      Set<CorrelationId> variablesSet,\n      JoinRelType joinType)\n      throws InvalidRelException {\n    final RelOptCluster cluster = left.getCluster();\n    final RelMetadataQuery mq = cluster.getMetadataQuery();\n    final RelTraitSet traitSet =\n        cluster.traitSetOf(EnumerableConvention.INSTANCE)\n            .replaceIfs(RelCollationTraitDef.INSTANCE,\n                () -> RelMdCollation.enumerableHashJoin(mq, left, right, joinType));\n    return new EnumerableHashJoin(cluster, traitSet, left, right, condition,\n        variablesSet, joinType);\n  }\n","date":"2019-05-30 11:27:53","endLine":94,"groupId":"9363","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(RelNodeleft@RelNoderight@RexNodecondition@Set<CorrelationId>variablesSet@JoinRelTypejoinType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/be/dbbeb3d759d705f5a079c895bd41879ada57d3.src","preCode":"  public static EnumerableHashJoin create(\n      RelNode left,\n      RelNode right,\n      RexNode condition,\n      Set<CorrelationId> variablesSet,\n      JoinRelType joinType)\n      throws InvalidRelException {\n    final RelOptCluster cluster = left.getCluster();\n    final RelMetadataQuery mq = cluster.getMetadataQuery();\n    final RelTraitSet traitSet =\n        cluster.traitSetOf(EnumerableConvention.INSTANCE)\n            .replaceIfs(RelCollationTraitDef.INSTANCE,\n                () -> RelMdCollation.enumerableHashJoin(mq, left, right, joinType));\n    return new EnumerableHashJoin(cluster, traitSet, left, right, condition,\n        variablesSet, joinType);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableHashJoin.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"},{"authorDate":"2019-04-12 15:11:30","commitOrder":1,"curCode":"  public static EnumerableNestedLoopJoin create(\n      RelNode left,\n      RelNode right,\n      RexNode condition,\n      Set<CorrelationId> variablesSet,\n      JoinRelType joinType) throws InvalidRelException {\n    final RelOptCluster cluster = left.getCluster();\n    final RelMetadataQuery mq = cluster.getMetadataQuery();\n    final RelTraitSet traitSet =\n        cluster.traitSetOf(EnumerableConvention.INSTANCE)\n            .replaceIfs(RelCollationTraitDef.INSTANCE,\n                () -> RelMdCollation.enumerableNestedLoopJoin(mq, left, right, joinType));\n    return new EnumerableNestedLoopJoin(cluster, traitSet, left, right, condition,\n        variablesSet, joinType);\n  }\n","date":"2019-05-30 11:27:53","endLine":94,"groupId":"9363","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(RelNodeleft@RelNoderight@RexNodecondition@Set<CorrelationId>variablesSet@JoinRelTypejoinType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c7/37cac6fad979f9d0515536a9657a5936e2fccc.src","preCode":"  public static EnumerableNestedLoopJoin create(\n      RelNode left,\n      RelNode right,\n      RexNode condition,\n      Set<CorrelationId> variablesSet,\n      JoinRelType joinType) throws InvalidRelException {\n    final RelOptCluster cluster = left.getCluster();\n    final RelMetadataQuery mq = cluster.getMetadataQuery();\n    final RelTraitSet traitSet =\n        cluster.traitSetOf(EnumerableConvention.INSTANCE)\n            .replaceIfs(RelCollationTraitDef.INSTANCE,\n                () -> RelMdCollation.enumerableNestedLoopJoin(mq, left, right, joinType));\n    return new EnumerableNestedLoopJoin(cluster, traitSet, left, right, condition,\n        variablesSet, joinType);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableNestedLoopJoin.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"}],"commitId":"48093937ae4db179884d1111fa9d12e978e57e1f","commitMessage":"@@@[CALCITE-2696] Improve design of join-like relational expressions\n\n**Diff**\n- Deprecate SemiJoin.  EnumerableSemiJoin.  SemiJoinType. \nEnumerableSemiJoinRule.  JoinToCorrelateRule#SEMI\n- Add SEMI and ANTI join type to JoinRelType.  add method\nprojectsRight() and isOuterJoin()\n- Correlate use JoinRelType instead of SemiJoinType\n- Rename EnumerableThetaJoin to EnumerableNestedLoopJoin\n- Rename EnumerableJoin to EnumerableHashJoin\n- EnumerableJoinRule converts semi join to EnumerableHashJoin\n(EnumerableSemiJoin's functionality is merged into this rule)\n- Add method isSemiJoin() in Join.java to decide if this join is a semi join\n(comes from SemiJoinRule during decorrelateation). \nthe return value true means the join is a semi join equivalent to\nSemiJoin before this patch.\n- Cache the JoinInfo in Join and use it to get leftKeys and rightKeys. \nmerge SemiJoin#computeSelfCost logic into Join#computeSelfCost\n- For RelBuilder.  removes SemiJoinFactory.  method #semiJoin\nnow returns a LogicalJoin with JoinRelType#SEMI\n- Rename EnumerableDefaults#join to EnumerableDefaults#hashJoin\n- Rename EnumerableDefaults#thetaJoin to EnumerableDefaults#nestedLoopJoin\n\n**Rules tweak**\n- JoinAddRedundantSemiJoinRule now creates LogicalJoin with JoinRelType#SEMI\ninstead of SemiJoin\n- JoinToCorrelateRule deprecates SEMI instance and change the matches\ncondition to !join.getJoinType().generatesNullsOnLeft() which also\nallowed ANTI compared before this patch.\n- SemiJoinRule matches SEMI join specifically.\n\n**Metadata tweak**\n- RelMdAllPredicates.  RelMdExpressionLineage: Add full rowType to\ngetAllPredicates(Join) cause semi join only outputs one side\n- RelMdColumnUniqueness.  RelMdSelectivity.  RelMdDistinctRowCount. \nRelMdSize.  RelMdUniqueKeys: merge semi join logic to join\n\n**Test cases change**\n- MaterializationTest#testJoinMaterialization11 now can materialize\nsuccessfully.  cause i allow logical SemiJoin node to match.  the original\nmatches SemiJoin as SemiJoin.class.isAssignableFrom().  which i think is\nwrong cause this will only matches subClasses of SemiJoin which is only\nEnumerableSemiJoin before this patch.\n- SortRemoveRuleTest#removeSortOverEnumerableCorrelate.  because\nCALCITE-2018.  the final EnumerableSort's cost was cached by the previous\nEnumerableSort with logical children.  so i remove the EnumerableSortRule\nand the best plan is correct\n\nclose apache/calcite#1157\n","date":"2019-05-30 11:27:53","modifiedFileCount":"81","status":"B","submitter":"yuzhao.cyz"},{"authorTime":"2019-05-31 12:53:37","codes":[{"authorDate":"2019-05-31 12:53:37","commitOrder":2,"curCode":"  public static EnumerableHashJoin create(\n      RelNode left,\n      RelNode right,\n      RexNode condition,\n      Set<CorrelationId> variablesSet,\n      JoinRelType joinType) {\n    final RelOptCluster cluster = left.getCluster();\n    final RelMetadataQuery mq = cluster.getMetadataQuery();\n    final RelTraitSet traitSet =\n        cluster.traitSetOf(EnumerableConvention.INSTANCE)\n            .replaceIfs(RelCollationTraitDef.INSTANCE,\n                () -> RelMdCollation.enumerableHashJoin(mq, left, right, joinType));\n    return new EnumerableHashJoin(cluster, traitSet, left, right, condition,\n        variablesSet, joinType);\n  }\n","date":"2019-08-21 01:58:52","endLine":92,"groupId":"102139","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(RelNodeleft@RelNoderight@RexNodecondition@Set<CorrelationId>variablesSet@JoinRelTypejoinType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/67/9d7fbdeba19647f40f1deecfe246060546dde7.src","preCode":"  public static EnumerableHashJoin create(\n      RelNode left,\n      RelNode right,\n      RexNode condition,\n      Set<CorrelationId> variablesSet,\n      JoinRelType joinType)\n      throws InvalidRelException {\n    final RelOptCluster cluster = left.getCluster();\n    final RelMetadataQuery mq = cluster.getMetadataQuery();\n    final RelTraitSet traitSet =\n        cluster.traitSetOf(EnumerableConvention.INSTANCE)\n            .replaceIfs(RelCollationTraitDef.INSTANCE,\n                () -> RelMdCollation.enumerableHashJoin(mq, left, right, joinType));\n    return new EnumerableHashJoin(cluster, traitSet, left, right, condition,\n        variablesSet, joinType);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableHashJoin.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2019-05-31 12:53:37","commitOrder":2,"curCode":"  public static EnumerableNestedLoopJoin create(\n      RelNode left,\n      RelNode right,\n      RexNode condition,\n      Set<CorrelationId> variablesSet,\n      JoinRelType joinType) {\n    final RelOptCluster cluster = left.getCluster();\n    final RelMetadataQuery mq = cluster.getMetadataQuery();\n    final RelTraitSet traitSet =\n        cluster.traitSetOf(EnumerableConvention.INSTANCE)\n            .replaceIfs(RelCollationTraitDef.INSTANCE,\n                () -> RelMdCollation.enumerableNestedLoopJoin(mq, left, right, joinType));\n    return new EnumerableNestedLoopJoin(cluster, traitSet, left, right, condition,\n        variablesSet, joinType);\n  }\n","date":"2019-08-21 01:58:52","endLine":86,"groupId":"102139","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(RelNodeleft@RelNoderight@RexNodecondition@Set<CorrelationId>variablesSet@JoinRelTypejoinType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a4/e7b81df0107f34fb9f9c926aa60dbc91eb9a3d.src","preCode":"  public static EnumerableNestedLoopJoin create(\n      RelNode left,\n      RelNode right,\n      RexNode condition,\n      Set<CorrelationId> variablesSet,\n      JoinRelType joinType) throws InvalidRelException {\n    final RelOptCluster cluster = left.getCluster();\n    final RelMetadataQuery mq = cluster.getMetadataQuery();\n    final RelTraitSet traitSet =\n        cluster.traitSetOf(EnumerableConvention.INSTANCE)\n            .replaceIfs(RelCollationTraitDef.INSTANCE,\n                () -> RelMdCollation.enumerableNestedLoopJoin(mq, left, right, joinType));\n    return new EnumerableNestedLoopJoin(cluster, traitSet, left, right, condition,\n        variablesSet, joinType);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableNestedLoopJoin.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"36e3109fb524c13ca0a08e3ad585785aa5abc18b","commitMessage":"@@@[CALCITE-3089] Deprecate EquiJoin\n\nClose apache/calcite#1247\n","date":"2019-08-21 01:58:52","modifiedFileCount":"13","status":"M","submitter":"Haisheng Yuan"}]
