[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testCastStringToDecimal() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n    if (!DECIMAL) {\n      return;\n    }\n    \r\n    tester.checkScalarExact(\n        \"cast('1.29' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast(' 1.25 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast('1.21' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.2\");\n    tester.checkScalarExact(\n        \"cast(' -1.29 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast('-1.25' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast(' -1.21 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.2\");\n    tester.checkFails(\n        \"cast(' -1.21e' as decimal(2,1))\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","date":"2014-11-14 09:39:34","endLine":662,"groupId":"6754","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastStringToDecimal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCastStringToDecimal() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n    if (!DECIMAL) {\n      return;\n    }\n    \r\n    tester.checkScalarExact(\n        \"cast('1.29' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast(' 1.25 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast('1.21' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.2\");\n    tester.checkScalarExact(\n        \"cast(' -1.29 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast('-1.25' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast(' -1.21 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.2\");\n    tester.checkFails(\n        \"cast(' -1.21e' as decimal(2,1))\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testCastIntervalToNumeric() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    if (DECIMAL) {\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.29' second(1,2) as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.29' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.21' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.2\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' minute as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' hour as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' month as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' year as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-5.0\");\n    }\n\n    if (!INTERVAL) {\n      return;\n    }\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"5\");\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as integer)\",\n        \"INTEGER NOT NULL\",\n        \"5\");\n  }\n","date":"2014-11-14 09:39:34","endLine":746,"groupId":"6754","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastIntervalToNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCastIntervalToNumeric() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    if (DECIMAL) {\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.29' second(1,2) as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.29' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.21' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.2\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' minute as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' hour as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' month as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' year as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-5.0\");\n    }\n\n    if (!INTERVAL) {\n      return;\n    }\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"5\");\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as integer)\",\n        \"INTEGER NOT NULL\",\n        \"5\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2016-06-14 00:58:22","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testCastStringToDecimal() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n    if (!DECIMAL) {\n      return;\n    }\n    \r\n    tester.checkScalarExact(\n        \"cast('1.29' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast(' 1.25 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast('1.21' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.2\");\n    tester.checkScalarExact(\n        \"cast(' -1.29 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast('-1.25' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast(' -1.21 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.2\");\n    tester.checkFails(\n        \"cast(' -1.21e' as decimal(2,1))\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","date":"2014-11-14 09:39:34","endLine":662,"groupId":"6754","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastStringToDecimal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCastStringToDecimal() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n    if (!DECIMAL) {\n      return;\n    }\n    \r\n    tester.checkScalarExact(\n        \"cast('1.29' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast(' 1.25 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast('1.21' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.2\");\n    tester.checkScalarExact(\n        \"cast(' -1.29 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast('-1.25' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast(' -1.21 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.2\");\n    tester.checkFails(\n        \"cast(' -1.21e' as decimal(2,1))\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"N"},{"authorDate":"2016-06-14 00:58:22","commitOrder":2,"curCode":"  @Test public void testCastIntervalToNumeric() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    if (DECIMAL) {\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.29' second(1,2) as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.29' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.21' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.2\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' minute as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' hour as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' month as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' year as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-5.0\");\n    }\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"5\");\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as integer)\",\n        \"INTEGER NOT NULL\",\n        \"5\");\n  }\n","date":"2016-06-28 05:14:19","endLine":844,"groupId":"6754","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastIntervalToNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e8/1ed4ca2441054478c2f927aad5d9aa1fb40467.src","preCode":"  @Test public void testCastIntervalToNumeric() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    if (DECIMAL) {\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.29' second(1,2) as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.29' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.21' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.2\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' minute as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' hour as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' month as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' year as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-5.0\");\n    }\n\n    if (!INTERVAL) {\n      return;\n    }\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"5\");\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as integer)\",\n        \"INTEGER NOT NULL\",\n        \"5\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":766,"status":"M"}],"commitId":"5511253b5c46741dfed8e1ac8d4fa23025aeb3c5","commitMessage":"@@@[CALCITE-308] DATE + INTERVAL gives wrong result\n\nAll tests for operations on intervals now succeed.\n","date":"2016-06-28 05:14:19","modifiedFileCount":"17","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-06-13 01:44:48","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":3,"curCode":"  @Test public void testCastStringToDecimal() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n    if (!DECIMAL) {\n      return;\n    }\n    \r\n    tester.checkScalarExact(\n        \"cast('1.29' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast(' 1.25 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast('1.21' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.2\");\n    tester.checkScalarExact(\n        \"cast(' -1.29 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast('-1.25' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast(' -1.21 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.2\");\n    tester.checkFails(\n        \"cast(' -1.21e' as decimal(2,1))\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","date":"2014-11-14 09:39:34","endLine":662,"groupId":"6754","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastStringToDecimal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCastStringToDecimal() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n    if (!DECIMAL) {\n      return;\n    }\n    \r\n    tester.checkScalarExact(\n        \"cast('1.29' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast(' 1.25 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast('1.21' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.2\");\n    tester.checkScalarExact(\n        \"cast(' -1.29 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast('-1.25' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast(' -1.21 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.2\");\n    tester.checkFails(\n        \"cast(' -1.21e' as decimal(2,1))\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"N"},{"authorDate":"2018-06-13 01:44:48","commitOrder":3,"curCode":"  @Test public void testCastIntervalToNumeric() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    if (DECIMAL) {\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.29' second(1,2) as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.29' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.21' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.2\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' minute as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' hour as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' month as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' year as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-5.0\");\n    }\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"5\");\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as integer)\",\n        \"INTEGER NOT NULL\",\n        \"5\");\n\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' year as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' year - INTERVAL '2' year) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' month as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' month - INTERVAL '2' month) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' day as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' day - INTERVAL '2' day) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' hour as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' hour - INTERVAL '2' hour) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' hour as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' minute - INTERVAL '2' minute) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' minute as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' second - INTERVAL '2' second) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n  }\n","date":"2018-06-29 16:27:43","endLine":915,"groupId":"6754","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastIntervalToNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/b60c1a65f1dbf3d85ac3a6c241936f8493750c.src","preCode":"  @Test public void testCastIntervalToNumeric() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    if (DECIMAL) {\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.29' second(1,2) as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.29' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.21' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.2\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' minute as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' hour as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' month as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' year as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-5.0\");\n    }\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"5\");\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as integer)\",\n        \"INTEGER NOT NULL\",\n        \"5\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":788,"status":"M"}],"commitId":"184bb1857fcb6df63b05410d25bc0078de0f71ab","commitMessage":"@@@[CALCITE-2359] Inconsistent results casting intervals to integers (James Duong)\n\nEnsure casting intervals to integers always returns the result in terms\nof the trailing unit.\n\nPreviously we had the following behavior:\n- Casting a standalone day interval literal returned results in terms of the trailing unit.\n- Casting a standalone year interval literal returned results in terms of months.\n- Casting a day interval expression returned results in terms of milliseconds.\n- Casting a year interval expression returned results in terms of months.\n\nClose apache/calcite#730\n","date":"2018-06-29 16:27:43","modifiedFileCount":"3","status":"M","submitter":"James Duong"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testCastStringToDecimal() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n    if (!DECIMAL) {\n      return;\n    }\n    \r\n    tester.checkScalarExact(\n        \"cast('1.29' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast(' 1.25 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast('1.21' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.2\");\n    tester.checkScalarExact(\n        \"cast(' -1.29 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast('-1.25' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast(' -1.21 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.2\");\n    tester.checkFails(\n        \"cast(' -1.21e' as decimal(2,1))\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","date":"2020-04-06 04:57:49","endLine":823,"groupId":"10740","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastStringToDecimal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testCastStringToDecimal() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n    if (!DECIMAL) {\n      return;\n    }\n    \r\n    tester.checkScalarExact(\n        \"cast('1.29' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast(' 1.25 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.3\");\n    tester.checkScalarExact(\n        \"cast('1.21' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"1.2\");\n    tester.checkScalarExact(\n        \"cast(' -1.29 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast('-1.25' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.3\");\n    tester.checkScalarExact(\n        \"cast(' -1.21 ' as decimal(2,1))\",\n        \"DECIMAL(2, 1) NOT NULL\",\n        \"-1.2\");\n    tester.checkFails(\n        \"cast(' -1.21e' as decimal(2,1))\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":790,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testCastIntervalToNumeric() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    if (DECIMAL) {\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.29' second(1,2) as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.29' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.21' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.2\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' minute as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' hour as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' month as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' year as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-5.0\");\n    }\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"5\");\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as integer)\",\n        \"INTEGER NOT NULL\",\n        \"5\");\n\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' year as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' year - INTERVAL '2' year) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' month as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' month - INTERVAL '2' month) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' day as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' day - INTERVAL '2' day) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' hour as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' hour - INTERVAL '2' hour) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' hour as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' minute - INTERVAL '2' minute) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' minute as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' second - INTERVAL '2' second) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n  }\n","date":"2020-04-06 04:57:49","endLine":952,"groupId":"10740","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastIntervalToNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testCastIntervalToNumeric() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    if (DECIMAL) {\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.29' second(1,2) as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.29' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.25' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.3\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-1.21' second as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-1.2\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' minute as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' hour as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' month as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '5' year as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"5.0\");\n      tester.checkScalarExact(\n          \"cast(INTERVAL '-5' day as decimal(2,1))\",\n          \"DECIMAL(2, 1) NOT NULL\",\n          \"-5.0\");\n    }\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as bigint)\",\n        \"BIGINT NOT NULL\",\n        \"5\");\n\n    \r\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1.25' second as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '-1.29' second(1,2) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '5' day as integer)\",\n        \"INTEGER NOT NULL\",\n        \"5\");\n\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' year as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' year - INTERVAL '2' year) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' month as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' month - INTERVAL '2' month) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' day as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' day - INTERVAL '2' day) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' hour as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' hour - INTERVAL '2' hour) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' hour as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' minute - INTERVAL '2' minute) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n    tester.checkScalarExact(\n        \"cast(INTERVAL '1' minute as integer)\",\n        \"INTEGER NOT NULL\",\n        \"1\");\n    tester.checkScalarExact(\n        \"cast((INTERVAL '1' second - INTERVAL '2' second) as integer)\",\n        \"INTEGER NOT NULL\",\n        \"-1\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":825,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
