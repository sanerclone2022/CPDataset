[{"authorTime":"2018-03-30 02:18:34","codes":[{"authorDate":"2018-03-30 02:18:34","commitOrder":1,"curCode":"  @Test public void testAlmostBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51])\\n\"\n        + \"  EnumerableProject(product_id0=[$44], time_id=[$45], customer_id0=[$46], promotion_id=[$47], store_id=[$48], store_sales=[$49], store_cost=[$50], unit_sales=[$51], customer_id=[$15], account_num=[$16], lname=[$17], fname=[$18], mi=[$19], address1=[$20], address2=[$21], address3=[$22], address4=[$23], city=[$24], state_province=[$25], postal_code=[$26], country=[$27], customer_region_id=[$28], phone1=[$29], phone2=[$30], birthdate=[$31], marital_status=[$32], yearly_income=[$33], gender=[$34], total_children=[$35], num_children_at_home=[$36], education=[$37], date_accnt_opened=[$38], member_card=[$39], occupation=[$40], houseowner=[$41], num_cars_owned=[$42], fullname=[$43], product_class_id=[$0], product_id=[$1], brand_name=[$2], product_name=[$3], SKU=[$4], SRP=[$5], gross_weight=[$6], net_weight=[$7], recyclable_package=[$8], low_fat=[$9], units_per_case=[$10], cases_per_pallet=[$11], shelf_width=[$12], shelf_height=[$13], shelf_depth=[$14])\\n\"\n        + \"    EnumerableJoin(condition=[=($1, $44)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"      EnumerableJoin(condition=[=($0, $31)], joinType=[inner])\\n\"\n        + \"        EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","date":"2018-04-24 01:29:52","endLine":816,"groupId":"11393","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAlmostBushy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/50d854306fb33e5c8317eaf6343fb2b2b5ab5e.src","preCode":"  @Test public void testAlmostBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51])\\n\"\n        + \"  EnumerableProject(product_id0=[$44], time_id=[$45], customer_id0=[$46], promotion_id=[$47], store_id=[$48], store_sales=[$49], store_cost=[$50], unit_sales=[$51], customer_id=[$15], account_num=[$16], lname=[$17], fname=[$18], mi=[$19], address1=[$20], address2=[$21], address3=[$22], address4=[$23], city=[$24], state_province=[$25], postal_code=[$26], country=[$27], customer_region_id=[$28], phone1=[$29], phone2=[$30], birthdate=[$31], marital_status=[$32], yearly_income=[$33], gender=[$34], total_children=[$35], num_children_at_home=[$36], education=[$37], date_accnt_opened=[$38], member_card=[$39], occupation=[$40], houseowner=[$41], num_cars_owned=[$42], fullname=[$43], product_class_id=[$0], product_id=[$1], brand_name=[$2], product_name=[$3], SKU=[$4], SRP=[$5], gross_weight=[$6], net_weight=[$7], recyclable_package=[$8], low_fat=[$9], units_per_case=[$10], cases_per_pallet=[$11], shelf_width=[$12], shelf_height=[$13], shelf_depth=[$14])\\n\"\n        + \"    EnumerableJoin(condition=[=($1, $44)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"      EnumerableJoin(condition=[=($0, $31)], joinType=[inner])\\n\"\n        + \"        EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":796,"status":"B"},{"authorDate":"2018-03-30 02:18:34","commitOrder":1,"curCode":"  @Test public void testBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"join \\\"product_class\\\" as pc\\n\"\n        + \"  on p.\\\"product_class_id\\\" = pc.\\\"product_class_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51], product_class_id0=[$52], product_subcategory=[$53], product_category=[$54], product_department=[$55], product_family=[$56])\\n\"\n        + \"  EnumerableProject(product_id0=[$49], time_id=[$50], customer_id0=[$51], promotion_id=[$52], store_id=[$53], store_sales=[$54], store_cost=[$55], unit_sales=[$56], customer_id=[$0], account_num=[$1], lname=[$2], fname=[$3], mi=[$4], address1=[$5], address2=[$6], address3=[$7], address4=[$8], city=[$9], state_province=[$10], postal_code=[$11], country=[$12], customer_region_id=[$13], phone1=[$14], phone2=[$15], birthdate=[$16], marital_status=[$17], yearly_income=[$18], gender=[$19], total_children=[$20], num_children_at_home=[$21], education=[$22], date_accnt_opened=[$23], member_card=[$24], occupation=[$25], houseowner=[$26], num_cars_owned=[$27], fullname=[$28], product_class_id0=[$34], product_id=[$35], brand_name=[$36], product_name=[$37], SKU=[$38], SRP=[$39], gross_weight=[$40], net_weight=[$41], recyclable_package=[$42], low_fat=[$43], units_per_case=[$44], cases_per_pallet=[$45], shelf_width=[$46], shelf_height=[$47], shelf_depth=[$48], product_class_id=[$29], product_subcategory=[$30], product_category=[$31], product_department=[$32], product_family=[$33])\\n\"\n        + \"    EnumerableJoin(condition=[=($0, $51)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"      EnumerableJoin(condition=[=($6, $20)], joinType=[inner])\\n\"\n        + \"        EnumerableJoin(condition=[=($0, $5)], joinType=[inner])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, product_class]])\\n\"\n        + \"          EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"            EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","date":"2018-04-24 01:29:52","endLine":849,"groupId":"11393","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBushy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/50d854306fb33e5c8317eaf6343fb2b2b5ab5e.src","preCode":"  @Test public void testBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"join \\\"product_class\\\" as pc\\n\"\n        + \"  on p.\\\"product_class_id\\\" = pc.\\\"product_class_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51], product_class_id0=[$52], product_subcategory=[$53], product_category=[$54], product_department=[$55], product_family=[$56])\\n\"\n        + \"  EnumerableProject(product_id0=[$49], time_id=[$50], customer_id0=[$51], promotion_id=[$52], store_id=[$53], store_sales=[$54], store_cost=[$55], unit_sales=[$56], customer_id=[$0], account_num=[$1], lname=[$2], fname=[$3], mi=[$4], address1=[$5], address2=[$6], address3=[$7], address4=[$8], city=[$9], state_province=[$10], postal_code=[$11], country=[$12], customer_region_id=[$13], phone1=[$14], phone2=[$15], birthdate=[$16], marital_status=[$17], yearly_income=[$18], gender=[$19], total_children=[$20], num_children_at_home=[$21], education=[$22], date_accnt_opened=[$23], member_card=[$24], occupation=[$25], houseowner=[$26], num_cars_owned=[$27], fullname=[$28], product_class_id0=[$34], product_id=[$35], brand_name=[$36], product_name=[$37], SKU=[$38], SRP=[$39], gross_weight=[$40], net_weight=[$41], recyclable_package=[$42], low_fat=[$43], units_per_case=[$44], cases_per_pallet=[$45], shelf_width=[$46], shelf_height=[$47], shelf_depth=[$48], product_class_id=[$29], product_subcategory=[$30], product_category=[$31], product_department=[$32], product_family=[$33])\\n\"\n        + \"    EnumerableJoin(condition=[=($0, $51)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"      EnumerableJoin(condition=[=($6, $20)], joinType=[inner])\\n\"\n        + \"        EnumerableJoin(condition=[=($0, $5)], joinType=[inner])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, product_class]])\\n\"\n        + \"          EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"            EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":825,"status":"B"}],"commitId":"92f7259b96744180a0a556ac9f5842f705192b3f","commitMessage":"@@@[CALCITE-2227] Standards-compliant column ordering for NATURAL JOIN and JOIN USING\n\nNow the join column(s) occur only once in the expansion of \"SELECT *\". \nand are derived using COALESCE(left.k.  right.k) so are sometimes NOT\nNULL where preivously nullable. This is a breaking change for those\nqueries.\n\nImprove type-inference for COALESCE.\n","date":"2018-04-24 01:29:52","modifiedFileCount":"22","status":"B","submitter":"Julian Hyde"},{"authorTime":"2019-04-12 15:11:30","codes":[{"authorDate":"2019-04-12 15:11:30","commitOrder":2,"curCode":"  @Test public void testAlmostBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51])\\n\"\n        + \"  EnumerableProject(product_id0=[$44], time_id=[$45], customer_id0=[$46], promotion_id=[$47], store_id=[$48], store_sales=[$49], store_cost=[$50], unit_sales=[$51], customer_id=[$15], account_num=[$16], lname=[$17], fname=[$18], mi=[$19], address1=[$20], address2=[$21], address3=[$22], address4=[$23], city=[$24], state_province=[$25], postal_code=[$26], country=[$27], customer_region_id=[$28], phone1=[$29], phone2=[$30], birthdate=[$31], marital_status=[$32], yearly_income=[$33], gender=[$34], total_children=[$35], num_children_at_home=[$36], education=[$37], date_accnt_opened=[$38], member_card=[$39], occupation=[$40], houseowner=[$41], num_cars_owned=[$42], fullname=[$43], product_class_id=[$0], product_id=[$1], brand_name=[$2], product_name=[$3], SKU=[$4], SRP=[$5], gross_weight=[$6], net_weight=[$7], recyclable_package=[$8], low_fat=[$9], units_per_case=[$10], cases_per_pallet=[$11], shelf_width=[$12], shelf_height=[$13], shelf_depth=[$14])\\n\"\n        + \"    EnumerableHashJoin(condition=[=($1, $44)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"      EnumerableHashJoin(condition=[=($0, $31)], joinType=[inner])\\n\"\n        + \"        EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","date":"2019-05-30 11:27:53","endLine":1036,"groupId":"11393","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAlmostBushy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9e/d4c05a5a81d4a10939223d0688438a54be346b.src","preCode":"  @Test public void testAlmostBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51])\\n\"\n        + \"  EnumerableProject(product_id0=[$44], time_id=[$45], customer_id0=[$46], promotion_id=[$47], store_id=[$48], store_sales=[$49], store_cost=[$50], unit_sales=[$51], customer_id=[$15], account_num=[$16], lname=[$17], fname=[$18], mi=[$19], address1=[$20], address2=[$21], address3=[$22], address4=[$23], city=[$24], state_province=[$25], postal_code=[$26], country=[$27], customer_region_id=[$28], phone1=[$29], phone2=[$30], birthdate=[$31], marital_status=[$32], yearly_income=[$33], gender=[$34], total_children=[$35], num_children_at_home=[$36], education=[$37], date_accnt_opened=[$38], member_card=[$39], occupation=[$40], houseowner=[$41], num_cars_owned=[$42], fullname=[$43], product_class_id=[$0], product_id=[$1], brand_name=[$2], product_name=[$3], SKU=[$4], SRP=[$5], gross_weight=[$6], net_weight=[$7], recyclable_package=[$8], low_fat=[$9], units_per_case=[$10], cases_per_pallet=[$11], shelf_width=[$12], shelf_height=[$13], shelf_depth=[$14])\\n\"\n        + \"    EnumerableJoin(condition=[=($1, $44)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"      EnumerableJoin(condition=[=($0, $31)], joinType=[inner])\\n\"\n        + \"        EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1016,"status":"M"},{"authorDate":"2019-04-12 15:11:30","commitOrder":2,"curCode":"  @Test public void testBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"join \\\"product_class\\\" as pc\\n\"\n        + \"  on p.\\\"product_class_id\\\" = pc.\\\"product_class_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51], product_class_id0=[$52], product_subcategory=[$53], product_category=[$54], product_department=[$55], product_family=[$56])\\n\"\n        + \"  EnumerableProject(product_id0=[$49], time_id=[$50], customer_id0=[$51], promotion_id=[$52], store_id=[$53], store_sales=[$54], store_cost=[$55], unit_sales=[$56], customer_id=[$0], account_num=[$1], lname=[$2], fname=[$3], mi=[$4], address1=[$5], address2=[$6], address3=[$7], address4=[$8], city=[$9], state_province=[$10], postal_code=[$11], country=[$12], customer_region_id=[$13], phone1=[$14], phone2=[$15], birthdate=[$16], marital_status=[$17], yearly_income=[$18], gender=[$19], total_children=[$20], num_children_at_home=[$21], education=[$22], date_accnt_opened=[$23], member_card=[$24], occupation=[$25], houseowner=[$26], num_cars_owned=[$27], fullname=[$28], product_class_id0=[$34], product_id=[$35], brand_name=[$36], product_name=[$37], SKU=[$38], SRP=[$39], gross_weight=[$40], net_weight=[$41], recyclable_package=[$42], low_fat=[$43], units_per_case=[$44], cases_per_pallet=[$45], shelf_width=[$46], shelf_height=[$47], shelf_depth=[$48], product_class_id=[$29], product_subcategory=[$30], product_category=[$31], product_department=[$32], product_family=[$33])\\n\"\n        + \"    EnumerableHashJoin(condition=[=($0, $51)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"      EnumerableHashJoin(condition=[=($6, $20)], joinType=[inner])\\n\"\n        + \"        EnumerableHashJoin(condition=[=($0, $5)], joinType=[inner])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, product_class]])\\n\"\n        + \"          EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"            EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","date":"2019-05-30 11:27:53","endLine":1069,"groupId":"11393","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBushy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9e/d4c05a5a81d4a10939223d0688438a54be346b.src","preCode":"  @Test public void testBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"join \\\"product_class\\\" as pc\\n\"\n        + \"  on p.\\\"product_class_id\\\" = pc.\\\"product_class_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51], product_class_id0=[$52], product_subcategory=[$53], product_category=[$54], product_department=[$55], product_family=[$56])\\n\"\n        + \"  EnumerableProject(product_id0=[$49], time_id=[$50], customer_id0=[$51], promotion_id=[$52], store_id=[$53], store_sales=[$54], store_cost=[$55], unit_sales=[$56], customer_id=[$0], account_num=[$1], lname=[$2], fname=[$3], mi=[$4], address1=[$5], address2=[$6], address3=[$7], address4=[$8], city=[$9], state_province=[$10], postal_code=[$11], country=[$12], customer_region_id=[$13], phone1=[$14], phone2=[$15], birthdate=[$16], marital_status=[$17], yearly_income=[$18], gender=[$19], total_children=[$20], num_children_at_home=[$21], education=[$22], date_accnt_opened=[$23], member_card=[$24], occupation=[$25], houseowner=[$26], num_cars_owned=[$27], fullname=[$28], product_class_id0=[$34], product_id=[$35], brand_name=[$36], product_name=[$37], SKU=[$38], SRP=[$39], gross_weight=[$40], net_weight=[$41], recyclable_package=[$42], low_fat=[$43], units_per_case=[$44], cases_per_pallet=[$45], shelf_width=[$46], shelf_height=[$47], shelf_depth=[$48], product_class_id=[$29], product_subcategory=[$30], product_category=[$31], product_department=[$32], product_family=[$33])\\n\"\n        + \"    EnumerableJoin(condition=[=($0, $51)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"      EnumerableJoin(condition=[=($6, $20)], joinType=[inner])\\n\"\n        + \"        EnumerableJoin(condition=[=($0, $5)], joinType=[inner])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, product_class]])\\n\"\n        + \"          EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"            EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1045,"status":"M"}],"commitId":"48093937ae4db179884d1111fa9d12e978e57e1f","commitMessage":"@@@[CALCITE-2696] Improve design of join-like relational expressions\n\n**Diff**\n- Deprecate SemiJoin.  EnumerableSemiJoin.  SemiJoinType. \nEnumerableSemiJoinRule.  JoinToCorrelateRule#SEMI\n- Add SEMI and ANTI join type to JoinRelType.  add method\nprojectsRight() and isOuterJoin()\n- Correlate use JoinRelType instead of SemiJoinType\n- Rename EnumerableThetaJoin to EnumerableNestedLoopJoin\n- Rename EnumerableJoin to EnumerableHashJoin\n- EnumerableJoinRule converts semi join to EnumerableHashJoin\n(EnumerableSemiJoin's functionality is merged into this rule)\n- Add method isSemiJoin() in Join.java to decide if this join is a semi join\n(comes from SemiJoinRule during decorrelateation). \nthe return value true means the join is a semi join equivalent to\nSemiJoin before this patch.\n- Cache the JoinInfo in Join and use it to get leftKeys and rightKeys. \nmerge SemiJoin#computeSelfCost logic into Join#computeSelfCost\n- For RelBuilder.  removes SemiJoinFactory.  method #semiJoin\nnow returns a LogicalJoin with JoinRelType#SEMI\n- Rename EnumerableDefaults#join to EnumerableDefaults#hashJoin\n- Rename EnumerableDefaults#thetaJoin to EnumerableDefaults#nestedLoopJoin\n\n**Rules tweak**\n- JoinAddRedundantSemiJoinRule now creates LogicalJoin with JoinRelType#SEMI\ninstead of SemiJoin\n- JoinToCorrelateRule deprecates SEMI instance and change the matches\ncondition to !join.getJoinType().generatesNullsOnLeft() which also\nallowed ANTI compared before this patch.\n- SemiJoinRule matches SEMI join specifically.\n\n**Metadata tweak**\n- RelMdAllPredicates.  RelMdExpressionLineage: Add full rowType to\ngetAllPredicates(Join) cause semi join only outputs one side\n- RelMdColumnUniqueness.  RelMdSelectivity.  RelMdDistinctRowCount. \nRelMdSize.  RelMdUniqueKeys: merge semi join logic to join\n\n**Test cases change**\n- MaterializationTest#testJoinMaterialization11 now can materialize\nsuccessfully.  cause i allow logical SemiJoin node to match.  the original\nmatches SemiJoin as SemiJoin.class.isAssignableFrom().  which i think is\nwrong cause this will only matches subClasses of SemiJoin which is only\nEnumerableSemiJoin before this patch.\n- SortRemoveRuleTest#removeSortOverEnumerableCorrelate.  because\nCALCITE-2018.  the final EnumerableSort's cost was cached by the previous\nEnumerableSort with logical children.  so i remove the EnumerableSortRule\nand the best plan is correct\n\nclose apache/calcite#1157\n","date":"2019-05-30 11:27:53","modifiedFileCount":"81","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testAlmostBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51])\\n\"\n        + \"  EnumerableProject(product_id0=[$44], time_id=[$45], customer_id0=[$46], promotion_id=[$47], store_id=[$48], store_sales=[$49], store_cost=[$50], unit_sales=[$51], customer_id=[$15], account_num=[$16], lname=[$17], fname=[$18], mi=[$19], address1=[$20], address2=[$21], address3=[$22], address4=[$23], city=[$24], state_province=[$25], postal_code=[$26], country=[$27], customer_region_id=[$28], phone1=[$29], phone2=[$30], birthdate=[$31], marital_status=[$32], yearly_income=[$33], gender=[$34], total_children=[$35], num_children_at_home=[$36], education=[$37], date_accnt_opened=[$38], member_card=[$39], occupation=[$40], houseowner=[$41], num_cars_owned=[$42], fullname=[$43], product_class_id=[$0], product_id=[$1], brand_name=[$2], product_name=[$3], SKU=[$4], SRP=[$5], gross_weight=[$6], net_weight=[$7], recyclable_package=[$8], low_fat=[$9], units_per_case=[$10], cases_per_pallet=[$11], shelf_width=[$12], shelf_height=[$13], shelf_depth=[$14])\\n\"\n        + \"    EnumerableHashJoin(condition=[=($1, $44)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"      EnumerableHashJoin(condition=[=($0, $31)], joinType=[inner])\\n\"\n        + \"        EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":1074,"groupId":"11393","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAlmostBushy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/ce8a05eee1dbae94fa526e1af77f6e77e09e4d.src","preCode":"  @Test public void testAlmostBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51])\\n\"\n        + \"  EnumerableProject(product_id0=[$44], time_id=[$45], customer_id0=[$46], promotion_id=[$47], store_id=[$48], store_sales=[$49], store_cost=[$50], unit_sales=[$51], customer_id=[$15], account_num=[$16], lname=[$17], fname=[$18], mi=[$19], address1=[$20], address2=[$21], address3=[$22], address4=[$23], city=[$24], state_province=[$25], postal_code=[$26], country=[$27], customer_region_id=[$28], phone1=[$29], phone2=[$30], birthdate=[$31], marital_status=[$32], yearly_income=[$33], gender=[$34], total_children=[$35], num_children_at_home=[$36], education=[$37], date_accnt_opened=[$38], member_card=[$39], occupation=[$40], houseowner=[$41], num_cars_owned=[$42], fullname=[$43], product_class_id=[$0], product_id=[$1], brand_name=[$2], product_name=[$3], SKU=[$4], SRP=[$5], gross_weight=[$6], net_weight=[$7], recyclable_package=[$8], low_fat=[$9], units_per_case=[$10], cases_per_pallet=[$11], shelf_width=[$12], shelf_height=[$13], shelf_depth=[$14])\\n\"\n        + \"    EnumerableHashJoin(condition=[=($1, $44)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"      EnumerableHashJoin(condition=[=($0, $31)], joinType=[inner])\\n\"\n        + \"        EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1054,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"join \\\"product_class\\\" as pc\\n\"\n        + \"  on p.\\\"product_class_id\\\" = pc.\\\"product_class_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51], product_class_id0=[$52], product_subcategory=[$53], product_category=[$54], product_department=[$55], product_family=[$56])\\n\"\n        + \"  EnumerableProject(product_id0=[$49], time_id=[$50], customer_id0=[$51], promotion_id=[$52], store_id=[$53], store_sales=[$54], store_cost=[$55], unit_sales=[$56], customer_id=[$0], account_num=[$1], lname=[$2], fname=[$3], mi=[$4], address1=[$5], address2=[$6], address3=[$7], address4=[$8], city=[$9], state_province=[$10], postal_code=[$11], country=[$12], customer_region_id=[$13], phone1=[$14], phone2=[$15], birthdate=[$16], marital_status=[$17], yearly_income=[$18], gender=[$19], total_children=[$20], num_children_at_home=[$21], education=[$22], date_accnt_opened=[$23], member_card=[$24], occupation=[$25], houseowner=[$26], num_cars_owned=[$27], fullname=[$28], product_class_id0=[$34], product_id=[$35], brand_name=[$36], product_name=[$37], SKU=[$38], SRP=[$39], gross_weight=[$40], net_weight=[$41], recyclable_package=[$42], low_fat=[$43], units_per_case=[$44], cases_per_pallet=[$45], shelf_width=[$46], shelf_height=[$47], shelf_depth=[$48], product_class_id=[$29], product_subcategory=[$30], product_category=[$31], product_department=[$32], product_family=[$33])\\n\"\n        + \"    EnumerableHashJoin(condition=[=($0, $51)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"      EnumerableHashJoin(condition=[=($6, $20)], joinType=[inner])\\n\"\n        + \"        EnumerableHashJoin(condition=[=($0, $5)], joinType=[inner])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, product_class]])\\n\"\n        + \"          EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"            EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":1107,"groupId":"11393","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBushy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/ce8a05eee1dbae94fa526e1af77f6e77e09e4d.src","preCode":"  @Test public void testBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"join \\\"product_class\\\" as pc\\n\"\n        + \"  on p.\\\"product_class_id\\\" = pc.\\\"product_class_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51], product_class_id0=[$52], product_subcategory=[$53], product_category=[$54], product_department=[$55], product_family=[$56])\\n\"\n        + \"  EnumerableProject(product_id0=[$49], time_id=[$50], customer_id0=[$51], promotion_id=[$52], store_id=[$53], store_sales=[$54], store_cost=[$55], unit_sales=[$56], customer_id=[$0], account_num=[$1], lname=[$2], fname=[$3], mi=[$4], address1=[$5], address2=[$6], address3=[$7], address4=[$8], city=[$9], state_province=[$10], postal_code=[$11], country=[$12], customer_region_id=[$13], phone1=[$14], phone2=[$15], birthdate=[$16], marital_status=[$17], yearly_income=[$18], gender=[$19], total_children=[$20], num_children_at_home=[$21], education=[$22], date_accnt_opened=[$23], member_card=[$24], occupation=[$25], houseowner=[$26], num_cars_owned=[$27], fullname=[$28], product_class_id0=[$34], product_id=[$35], brand_name=[$36], product_name=[$37], SKU=[$38], SRP=[$39], gross_weight=[$40], net_weight=[$41], recyclable_package=[$42], low_fat=[$43], units_per_case=[$44], cases_per_pallet=[$45], shelf_width=[$46], shelf_height=[$47], shelf_depth=[$48], product_class_id=[$29], product_subcategory=[$30], product_category=[$31], product_department=[$32], product_family=[$33])\\n\"\n        + \"    EnumerableHashJoin(condition=[=($0, $51)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"      EnumerableHashJoin(condition=[=($6, $20)], joinType=[inner])\\n\"\n        + \"        EnumerableHashJoin(condition=[=($0, $5)], joinType=[inner])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, product_class]])\\n\"\n        + \"          EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"            EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1083,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-29 22:56:19","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testAlmostBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51])\\n\"\n        + \"  EnumerableProject(product_id0=[$44], time_id=[$45], customer_id0=[$46], promotion_id=[$47], store_id=[$48], store_sales=[$49], store_cost=[$50], unit_sales=[$51], customer_id=[$15], account_num=[$16], lname=[$17], fname=[$18], mi=[$19], address1=[$20], address2=[$21], address3=[$22], address4=[$23], city=[$24], state_province=[$25], postal_code=[$26], country=[$27], customer_region_id=[$28], phone1=[$29], phone2=[$30], birthdate=[$31], marital_status=[$32], yearly_income=[$33], gender=[$34], total_children=[$35], num_children_at_home=[$36], education=[$37], date_accnt_opened=[$38], member_card=[$39], occupation=[$40], houseowner=[$41], num_cars_owned=[$42], fullname=[$43], product_class_id=[$0], product_id=[$1], brand_name=[$2], product_name=[$3], SKU=[$4], SRP=[$5], gross_weight=[$6], net_weight=[$7], recyclable_package=[$8], low_fat=[$9], units_per_case=[$10], cases_per_pallet=[$11], shelf_width=[$12], shelf_height=[$13], shelf_depth=[$14])\\n\"\n        + \"    EnumerableHashJoin(condition=[=($1, $44)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"      EnumerableHashJoin(condition=[=($0, $31)], joinType=[inner])\\n\"\n        + \"        EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":1074,"groupId":"11393","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAlmostBushy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/ce8a05eee1dbae94fa526e1af77f6e77e09e4d.src","preCode":"  @Test void testAlmostBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51])\\n\"\n        + \"  EnumerableProject(product_id0=[$44], time_id=[$45], customer_id0=[$46], promotion_id=[$47], store_id=[$48], store_sales=[$49], store_cost=[$50], unit_sales=[$51], customer_id=[$15], account_num=[$16], lname=[$17], fname=[$18], mi=[$19], address1=[$20], address2=[$21], address3=[$22], address4=[$23], city=[$24], state_province=[$25], postal_code=[$26], country=[$27], customer_region_id=[$28], phone1=[$29], phone2=[$30], birthdate=[$31], marital_status=[$32], yearly_income=[$33], gender=[$34], total_children=[$35], num_children_at_home=[$36], education=[$37], date_accnt_opened=[$38], member_card=[$39], occupation=[$40], houseowner=[$41], num_cars_owned=[$42], fullname=[$43], product_class_id=[$0], product_id=[$1], brand_name=[$2], product_name=[$3], SKU=[$4], SRP=[$5], gross_weight=[$6], net_weight=[$7], recyclable_package=[$8], low_fat=[$9], units_per_case=[$10], cases_per_pallet=[$11], shelf_width=[$12], shelf_height=[$13], shelf_depth=[$14])\\n\"\n        + \"    EnumerableHashJoin(condition=[=($1, $44)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"      EnumerableHashJoin(condition=[=($0, $31)], joinType=[inner])\\n\"\n        + \"        EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1054,"status":"N"},{"authorDate":"2020-04-29 22:56:19","commitOrder":4,"curCode":"  @Test void testBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"join \\\"product_class\\\" as pc\\n\"\n        + \"  on p.\\\"product_class_id\\\" = pc.\\\"product_class_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51], product_class_id0=[$52], product_subcategory=[$53], product_category=[$54], product_department=[$55], product_family=[$56])\\n\"\n        + \"  EnumerableProject(product_id0=[$49], time_id=[$50], customer_id0=[$51], promotion_id=[$52], store_id=[$53], store_sales=[$54], store_cost=[$55], unit_sales=[$56], customer_id=[$0], account_num=[$1], lname=[$2], fname=[$3], mi=[$4], address1=[$5], address2=[$6], address3=[$7], address4=[$8], city=[$9], state_province=[$10], postal_code=[$11], country=[$12], customer_region_id=[$13], phone1=[$14], phone2=[$15], birthdate=[$16], marital_status=[$17], yearly_income=[$18], gender=[$19], total_children=[$20], num_children_at_home=[$21], education=[$22], date_accnt_opened=[$23], member_card=[$24], occupation=[$25], houseowner=[$26], num_cars_owned=[$27], fullname=[$28], product_class_id0=[$34], product_id=[$35], brand_name=[$36], product_name=[$37], SKU=[$38], SRP=[$39], gross_weight=[$40], net_weight=[$41], recyclable_package=[$42], low_fat=[$43], units_per_case=[$44], cases_per_pallet=[$45], shelf_width=[$46], shelf_height=[$47], shelf_depth=[$48], product_class_id=[$29], product_subcategory=[$30], product_category=[$31], product_department=[$32], product_family=[$33])\\n\"\n        + \"    EnumerableHashJoin(condition=[=($0, $51)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"      EnumerableHashJoin(condition=[=($6, $20)], joinType=[inner])\\n\"\n        + \"        EnumerableMergeJoin(condition=[=($0, $5)], joinType=[inner])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, product_class]])\\n\"\n        + \"          EnumerableSort(sort0=[$0], dir0=[ASC])\\n\"\n        + \"            EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"              EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","date":"2020-05-11 11:40:36","endLine":1110,"groupId":"11393","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBushy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/7105007c2146a8ee4d2fcadc9989336cb8189d.src","preCode":"  @Test void testBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"join \\\"product_class\\\" as pc\\n\"\n        + \"  on p.\\\"product_class_id\\\" = pc.\\\"product_class_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51], product_class_id0=[$52], product_subcategory=[$53], product_category=[$54], product_department=[$55], product_family=[$56])\\n\"\n        + \"  EnumerableProject(product_id0=[$49], time_id=[$50], customer_id0=[$51], promotion_id=[$52], store_id=[$53], store_sales=[$54], store_cost=[$55], unit_sales=[$56], customer_id=[$0], account_num=[$1], lname=[$2], fname=[$3], mi=[$4], address1=[$5], address2=[$6], address3=[$7], address4=[$8], city=[$9], state_province=[$10], postal_code=[$11], country=[$12], customer_region_id=[$13], phone1=[$14], phone2=[$15], birthdate=[$16], marital_status=[$17], yearly_income=[$18], gender=[$19], total_children=[$20], num_children_at_home=[$21], education=[$22], date_accnt_opened=[$23], member_card=[$24], occupation=[$25], houseowner=[$26], num_cars_owned=[$27], fullname=[$28], product_class_id0=[$34], product_id=[$35], brand_name=[$36], product_name=[$37], SKU=[$38], SRP=[$39], gross_weight=[$40], net_weight=[$41], recyclable_package=[$42], low_fat=[$43], units_per_case=[$44], cases_per_pallet=[$45], shelf_width=[$46], shelf_height=[$47], shelf_depth=[$48], product_class_id=[$29], product_subcategory=[$30], product_category=[$31], product_department=[$32], product_family=[$33])\\n\"\n        + \"    EnumerableHashJoin(condition=[=($0, $51)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"      EnumerableHashJoin(condition=[=($6, $20)], joinType=[inner])\\n\"\n        + \"        EnumerableHashJoin(condition=[=($0, $5)], joinType=[inner])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, product_class]])\\n\"\n        + \"          EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"            EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1085,"status":"M"}],"commitId":"9c31d9e83dc718800a36f7719534f9f74633c8a7","commitMessage":"@@@[CALCITE-3896] Top down trait request\n\n1. Top-down trait request\n2. Bottom-up trait derivation\n3. Trait enforcement without AbstractConverter\n\nHow to use?\n\n1. Enable top-down optimization by setting {VolcanoPlanner#setTopDownOpt(boolean)}\nor add 'calcite.planner.topdown.opt=true' to saffron.properties config file.\n\n2. Let your convention's rel interface extends {PhysicalNode}.  see\n{EnumerableRel} as an example.\n\n3. Each physical operator overrides any one of the two methods:\n{PhysicalNode#passThrough(RelTraitSet)} or\n{PhysicalNode#passThroughTraits(RelTraitSet)} depending on your needs.\n\n4. Choose derive mode for each physical operator by overriding\n{PhysicalNode#getDeriveMode()}.\n\n5. If the derive mode is {DeriveMode#OMAKASE}.  override method\n{PhysicalNode#derive(List)} in the physical operator.  otherwise.  override\n{PhysicalNode#derive(RelTraitSet.  int)} or\n{PhysicalNode#deriveTraits(RelTraitSet.  int)}.\n\n6. Mark your enforcer operator by overriding {RelNode#isEnforcer()}.  see\n{Sort#isEnforcer()} as an example. This is important.  because it can help\n{VolcanoPlanner} avoid unnecessary trait propagation and derivation.  therefore\nimprove optimization efficiency.\n\n7. Implement {Convention#enforce(RelNode.  RelTraitSet)} in your convention. \nwhich generates appropriate physical enforcer. See\n{EnumerableConvention#enforce(RelNode.  RelTraitSet)} as example. Simply return\nnull if you don't want physical trait enforcement.\n\nHow does it work?\n\nLet S# denote the seed physical operator in a RelSet after logical and physical\nrules transformation.  P# denote the physical operator generated by passing down\nparent trait requirements.  D# denote the physical operator generated by\nderiving from child delivered traitSets.\n\nThe initial rel list state in a RelSet is as follows:\n    cursor\n      |\n      V\n     S1.  S2\n\nWhen we create a task for RelSubset1.  the task will immediately pass the\nsubset's traitSet to seed operators.  S1 and S2.  now we have:\n    cursor\n      |\n      V\n     S1.  S2.  P1.  P2\n\nThe subset task will create a optimization task for the relnode pointed by\ncursor.  and move cursor to next available physical operator S2. In the task for\nS1.  it will continue optimize its child nodes.  which are RelSubsets. After\nchild inputs optimization is finished.  S1 will derive new relnodes from\ndelivered subsets in input RelSet. Once task for S1 is completed.  we have:\n        cursor\n          |\n          V\n     S1.  S2.  P1.  P2.  D1\n\nThe subset task continues scheduling task for S2.  P1... until there is no more\nrelnode created for the RelSet.  then we have:\n                                cursor\n                                  |\n                                  V\n     S1.  S2.  P1.  P2.  D1.  D2.  D3.  null\n\nWhen a task for another RelSubset2 is created.  the task will try to pass down\nthe subset's traitSet to seed operator S1 and S2.  now the RelSet looks like:\n                                cursor\n                                  |\n                                  V\n     S1.  S2.  P1.  P2.  D1.  D2.  D3.  P3.  P4\n\nThe process continues till there is no more subsets or relnodes created for the\nRelSet.\n\nSee https://t.ly/MmaF for discussion.\n\nClose #1953\n","date":"2020-05-11 11:40:36","modifiedFileCount":"17","status":"M","submitter":"Haisheng Yuan"},{"authorTime":"2020-05-20 14:52:40","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testAlmostBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51])\\n\"\n        + \"  EnumerableProject(product_id0=[$44], time_id=[$45], customer_id0=[$46], promotion_id=[$47], store_id=[$48], store_sales=[$49], store_cost=[$50], unit_sales=[$51], customer_id=[$15], account_num=[$16], lname=[$17], fname=[$18], mi=[$19], address1=[$20], address2=[$21], address3=[$22], address4=[$23], city=[$24], state_province=[$25], postal_code=[$26], country=[$27], customer_region_id=[$28], phone1=[$29], phone2=[$30], birthdate=[$31], marital_status=[$32], yearly_income=[$33], gender=[$34], total_children=[$35], num_children_at_home=[$36], education=[$37], date_accnt_opened=[$38], member_card=[$39], occupation=[$40], houseowner=[$41], num_cars_owned=[$42], fullname=[$43], product_class_id=[$0], product_id=[$1], brand_name=[$2], product_name=[$3], SKU=[$4], SRP=[$5], gross_weight=[$6], net_weight=[$7], recyclable_package=[$8], low_fat=[$9], units_per_case=[$10], cases_per_pallet=[$11], shelf_width=[$12], shelf_height=[$13], shelf_depth=[$14])\\n\"\n        + \"    EnumerableHashJoin(condition=[=($1, $44)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"      EnumerableHashJoin(condition=[=($0, $31)], joinType=[inner])\\n\"\n        + \"        EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":1074,"groupId":"10664","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testAlmostBushy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/ce8a05eee1dbae94fa526e1af77f6e77e09e4d.src","preCode":"  @Test void testAlmostBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51])\\n\"\n        + \"  EnumerableProject(product_id0=[$44], time_id=[$45], customer_id0=[$46], promotion_id=[$47], store_id=[$48], store_sales=[$49], store_cost=[$50], unit_sales=[$51], customer_id=[$15], account_num=[$16], lname=[$17], fname=[$18], mi=[$19], address1=[$20], address2=[$21], address3=[$22], address4=[$23], city=[$24], state_province=[$25], postal_code=[$26], country=[$27], customer_region_id=[$28], phone1=[$29], phone2=[$30], birthdate=[$31], marital_status=[$32], yearly_income=[$33], gender=[$34], total_children=[$35], num_children_at_home=[$36], education=[$37], date_accnt_opened=[$38], member_card=[$39], occupation=[$40], houseowner=[$41], num_cars_owned=[$42], fullname=[$43], product_class_id=[$0], product_id=[$1], brand_name=[$2], product_name=[$3], SKU=[$4], SRP=[$5], gross_weight=[$6], net_weight=[$7], recyclable_package=[$8], low_fat=[$9], units_per_case=[$10], cases_per_pallet=[$11], shelf_width=[$12], shelf_height=[$13], shelf_depth=[$14])\\n\"\n        + \"    EnumerableHashJoin(condition=[=($1, $44)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"      EnumerableHashJoin(condition=[=($0, $31)], joinType=[inner])\\n\"\n        + \"        EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1054,"status":"N"},{"authorDate":"2020-05-20 14:52:40","commitOrder":5,"curCode":"  @Test void testBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"join \\\"product_class\\\" as pc\\n\"\n        + \"  on p.\\\"product_class_id\\\" = pc.\\\"product_class_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51], product_class_id0=[$52], product_subcategory=[$53], product_category=[$54], product_department=[$55], product_family=[$56])\\n\"\n        + \"  EnumerableProject(product_id0=[$49], time_id=[$50], customer_id0=[$51], promotion_id=[$52], store_id=[$53], store_sales=[$54], store_cost=[$55], unit_sales=[$56], customer_id=[$0], account_num=[$1], lname=[$2], fname=[$3], mi=[$4], address1=[$5], address2=[$6], address3=[$7], address4=[$8], city=[$9], state_province=[$10], postal_code=[$11], country=[$12], customer_region_id=[$13], phone1=[$14], phone2=[$15], birthdate=[$16], marital_status=[$17], yearly_income=[$18], gender=[$19], total_children=[$20], num_children_at_home=[$21], education=[$22], date_accnt_opened=[$23], member_card=[$24], occupation=[$25], houseowner=[$26], num_cars_owned=[$27], fullname=[$28], product_class_id0=[$34], product_id=[$35], brand_name=[$36], product_name=[$37], SKU=[$38], SRP=[$39], gross_weight=[$40], net_weight=[$41], recyclable_package=[$42], low_fat=[$43], units_per_case=[$44], cases_per_pallet=[$45], shelf_width=[$46], shelf_height=[$47], shelf_depth=[$48], product_class_id=[$29], product_subcategory=[$30], product_category=[$31], product_department=[$32], product_family=[$33])\\n\"\n        + \"    EnumerableHashJoin(condition=[=($0, $51)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"      EnumerableHashJoin(condition=[=($6, $20)], joinType=[inner])\\n\"\n        + \"        EnumerableHashJoin(condition=[=($0, $5)], joinType=[inner])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, product_class]])\\n\"\n        + \"          EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"            EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","date":"2020-05-30 03:06:17","endLine":1107,"groupId":"10664","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testBushy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/ce8a05eee1dbae94fa526e1af77f6e77e09e4d.src","preCode":"  @Test void testBushy() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c\\n\"\n        + \"  on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p\\n\"\n        + \"  on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"join \\\"product_class\\\" as pc\\n\"\n        + \"  on p.\\\"product_class_id\\\" = pc.\\\"product_class_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and p.\\\"brand_name\\\" = 'Washington'\";\n    final String expected = \"\"\n        + \"EnumerableProject(product_id=[$0], time_id=[$1], customer_id=[$2], promotion_id=[$3], store_id=[$4], store_sales=[$5], store_cost=[$6], unit_sales=[$7], customer_id0=[$8], account_num=[$9], lname=[$10], fname=[$11], mi=[$12], address1=[$13], address2=[$14], address3=[$15], address4=[$16], city=[$17], state_province=[$18], postal_code=[$19], country=[$20], customer_region_id=[$21], phone1=[$22], phone2=[$23], birthdate=[$24], marital_status=[$25], yearly_income=[$26], gender=[$27], total_children=[$28], num_children_at_home=[$29], education=[$30], date_accnt_opened=[$31], member_card=[$32], occupation=[$33], houseowner=[$34], num_cars_owned=[$35], fullname=[$36], product_class_id=[$37], product_id0=[$38], brand_name=[$39], product_name=[$40], SKU=[$41], SRP=[$42], gross_weight=[$43], net_weight=[$44], recyclable_package=[$45], low_fat=[$46], units_per_case=[$47], cases_per_pallet=[$48], shelf_width=[$49], shelf_height=[$50], shelf_depth=[$51], product_class_id0=[$52], product_subcategory=[$53], product_category=[$54], product_department=[$55], product_family=[$56])\\n\"\n        + \"  EnumerableProject(product_id0=[$49], time_id=[$50], customer_id0=[$51], promotion_id=[$52], store_id=[$53], store_sales=[$54], store_cost=[$55], unit_sales=[$56], customer_id=[$0], account_num=[$1], lname=[$2], fname=[$3], mi=[$4], address1=[$5], address2=[$6], address3=[$7], address4=[$8], city=[$9], state_province=[$10], postal_code=[$11], country=[$12], customer_region_id=[$13], phone1=[$14], phone2=[$15], birthdate=[$16], marital_status=[$17], yearly_income=[$18], gender=[$19], total_children=[$20], num_children_at_home=[$21], education=[$22], date_accnt_opened=[$23], member_card=[$24], occupation=[$25], houseowner=[$26], num_cars_owned=[$27], fullname=[$28], product_class_id0=[$34], product_id=[$35], brand_name=[$36], product_name=[$37], SKU=[$38], SRP=[$39], gross_weight=[$40], net_weight=[$41], recyclable_package=[$42], low_fat=[$43], units_per_case=[$44], cases_per_pallet=[$45], shelf_width=[$46], shelf_height=[$47], shelf_depth=[$48], product_class_id=[$29], product_subcategory=[$30], product_category=[$31], product_department=[$32], product_family=[$33])\\n\"\n        + \"    EnumerableHashJoin(condition=[=($0, $51)], joinType=[inner])\\n\"\n        + \"      EnumerableFilter(condition=[=($9, 'San Francisco')])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, customer]])\\n\"\n        + \"      EnumerableHashJoin(condition=[=($6, $20)], joinType=[inner])\\n\"\n        + \"        EnumerableMergeJoin(condition=[=($0, $5)], joinType=[inner])\\n\"\n        + \"          EnumerableTableScan(table=[[foodmart2, product_class]])\\n\"\n        + \"          EnumerableSort(sort0=[$0], dir0=[ASC])\\n\"\n        + \"            EnumerableFilter(condition=[=($2, 'Washington')])\\n\"\n        + \"              EnumerableTableScan(table=[[foodmart2, product]])\\n\"\n        + \"        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\\n\";\n    checkBushy(sql, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1083,"status":"M"}],"commitId":"0af3fd17a293d37125c7cca58257e5f6cbc1a76c","commitMessage":"@@@[CALCITE-4011] Support trait propagation for EnumerableProject and EnumerableFilter (Rui Wang)\n\nTrait propgation includes trait passthrough and trait derivation.\n\nTrait passthrough could happen when Project satisfies the ordering\nrequirement that is defined by collations. Project will not satisfy the\nordering requirement when a requested collation is defined on a\nnon-trivial expression. Usually a RexCall is considered as non-trivial. \nunless it is a CAST that perserves monotonicity. \n\nHere is an example to demonstrate why trait cannot pass through when\ncollations are defined on non-trival expr:\n\nselect a.  b*-1 as b\nfrom foo\norder by a.  b;\n\nwhich generates the logical plan:\nLogicalSort\n  LogicalProject\n     LogicalTableScan\n\nWe cannot move the top sort down through the project. Because b*-1 will\nchange ordering to the opposite. The sort has to remain on top of\nproject for correness.\n\nTrait derivaiton does something simlar to trait pass through.  except for\none difference:\ntrait derivation can return parital collations that are derived from\nchild. For example.  if [a.  b.  c.  d] is derived from child.  and if c is\ndefined on a non-trival expr.  then [a.  b] will be returned cause it\nmight be useful for parents.\n\nAnother example to show why trait derivation could be useful to reutrn\npartial collations:\n\nselect a.  b\nfrom (\n select a.  b.  c*-1.  d\n from foo\n order by a.  b.  c.  d\n)\norder by a.  b;\n\nIn this example.  even though the inner project does not preserve the\ntotal ordering for inner sort.  but the outer sort only want to sort on\n[a.  b].  thus if inner project can derive [a.  b].  the outer project will\nnot need the top sort or enforce a sort for its input.\n\nAfter top-down optimization is enabled.  trait propagation for EnumerableProject\nand EnumerableFilter is supposed to replace ProjectSortTransposeRule and\nSortProjectTransposeRule.\n\nClose #1985\n","date":"2020-05-30 03:06:17","modifiedFileCount":"13","status":"M","submitter":"amaliujia"}]
