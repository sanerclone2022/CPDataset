[{"authorTime":"2019-11-21 20:03:51","codes":[{"authorDate":"2020-07-20 08:23:08","commitOrder":2,"curCode":"  static JsonDataConverter deduceRowType(RelDataTypeFactory typeFactory, Source source) {\n    final ObjectMapper objectMapper = new ObjectMapper();\n    List<Object> list;\n    LinkedHashMap<String, Object> jsonFieldMap = new LinkedHashMap<>(1);\n    Object jsonObj = null;\n    try {\n      objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true)\n          .configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true)\n          .configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n\n      if (\"file\".equals(source.protocol()) && source.file().exists()) {\n        \r\n        jsonObj = objectMapper.readValue(source.file(), Object.class);\n      } else if (Arrays.asList(\"http\", \"https\", \"ftp\").contains(source.protocol())) {\n        \r\n        jsonObj = objectMapper.readValue(source.url(), Object.class);\n      } else {\n        jsonObj = objectMapper.readValue(source.reader(), Object.class);\n      }\n\n    } catch (MismatchedInputException e) {\n      if (!e.getMessage().contains(\"No content\")) {\n        throw new RuntimeException(\"Couldn't read \" + source, e);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Couldn't read \" + source, e);\n    }\n\n    if (jsonObj == null) {\n      list = new ArrayList<>();\n      jsonFieldMap.put(\"EmptyFileHasNoColumns\", Boolean.TRUE);\n    } else if (jsonObj instanceof Collection) {\n      \r\n      list = (List<Object>) jsonObj;\n      \r\n      jsonFieldMap = (LinkedHashMap) (list.get(0));\n    } else if (jsonObj instanceof Map) {\n      \r\n      jsonFieldMap = (LinkedHashMap) jsonObj;\n      \r\n      list = new ArrayList(((LinkedHashMap) jsonObj).values());\n    } else {\n      jsonFieldMap.put(\"line\", jsonObj);\n      list = new ArrayList<>();\n      list.add(0, jsonObj);\n    }\n\n    final List<RelDataType> types = new ArrayList<RelDataType>(jsonFieldMap.size());\n    final List<String> names = new ArrayList<String>(jsonFieldMap.size());\n\n    for (Object key : jsonFieldMap.keySet()) {\n      final RelDataType type = typeFactory.createJavaType(jsonFieldMap.get(key).getClass());\n      names.add(key.toString());\n      types.add(type);\n    }\n\n    RelDataType relDataType = typeFactory.createStructType(Pair.zip(names, types));\n    return new JsonDataConverter(relDataType, list);\n  }\n","date":"2020-07-29 03:09:43","endLine":120,"groupId":"198","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deduceRowType","params":"(RelDataTypeFactorytypeFactory@Sourcesource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7f/d064051981451d551064c4bbad72640ab1aff2.src","preCode":"  static JsonDataConverter deduceRowType(RelDataTypeFactory typeFactory, Source source) {\n    final ObjectMapper objectMapper = new ObjectMapper();\n    List<Object> list;\n    LinkedHashMap<String, Object> jsonFieldMap = new LinkedHashMap<>(1);\n    Object jsonObj = null;\n    try {\n      objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true)\n          .configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true)\n          .configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n\n      if (\"file\".equals(source.protocol()) && source.file().exists()) {\n        \r\n        jsonObj = objectMapper.readValue(source.file(), Object.class);\n      } else if (Arrays.asList(\"http\", \"https\", \"ftp\").contains(source.protocol())) {\n        \r\n        jsonObj = objectMapper.readValue(source.url(), Object.class);\n      } else {\n        jsonObj = objectMapper.readValue(source.reader(), Object.class);\n      }\n\n    } catch (MismatchedInputException e) {\n      if (!e.getMessage().contains(\"No content\")) {\n        throw new RuntimeException(\"Couldn't read \" + source, e);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Couldn't read \" + source, e);\n    }\n\n    if (jsonObj == null) {\n      list = new ArrayList<>();\n      jsonFieldMap.put(\"EmptyFileHasNoColumns\", Boolean.TRUE);\n    } else if (jsonObj instanceof Collection) {\n      \r\n      list = (List<Object>) jsonObj;\n      \r\n      jsonFieldMap = (LinkedHashMap) (list.get(0));\n    } else if (jsonObj instanceof Map) {\n      \r\n      jsonFieldMap = (LinkedHashMap) jsonObj;\n      \r\n      list = new ArrayList(((LinkedHashMap) jsonObj).values());\n    } else {\n      jsonFieldMap.put(\"line\", jsonObj);\n      list = new ArrayList<>();\n      list.add(0, jsonObj);\n    }\n\n    final List<RelDataType> types = new ArrayList<RelDataType>(jsonFieldMap.size());\n    final List<String> names = new ArrayList<String>(jsonFieldMap.size());\n\n    for (Object key : jsonFieldMap.keySet()) {\n      final RelDataType type = typeFactory.createJavaType(jsonFieldMap.get(key).getClass());\n      names.add(key.toString());\n      types.add(type);\n    }\n\n    RelDataType relDataType = typeFactory.createStructType(Pair.zip(names, types));\n    return new JsonDataConverter(relDataType, list);\n  }\n","realPath":"file/src/main/java/org/apache/calcite/adapter/file/JsonEnumerator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"},{"authorDate":"2019-11-21 20:03:51","commitOrder":2,"curCode":"  public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n    if (protoRowType != null) {\n      return protoRowType.apply(typeFactory);\n    }\n    final List<RelDataType> types = new ArrayList<RelDataType>(allFields.size());\n    final List<String> names = new ArrayList<String>(allFields.size());\n\n    for (Object key : allFields.keySet()) {\n      final RelDataType type = typeFactory.createJavaType(allFields.get(key).getClass());\n      names.add(key.toString());\n      types.add(type);\n    }\n    return typeFactory.createStructType(Pair.zip(names, types));\n  }\n","date":"2020-01-07 15:08:11","endLine":80,"groupId":"9633","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getRowType","params":"(RelDataTypeFactorytypeFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/33/2c81645c02e04fa8119f0f804b0706fcc0ef1c.src","preCode":"  public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n    if (protoRowType != null) {\n      return protoRowType.apply(typeFactory);\n    }\n    final List<RelDataType> types = new ArrayList<RelDataType>(allFields.size());\n    final List<String> names = new ArrayList<String>(allFields.size());\n\n    for (Object key : allFields.keySet()) {\n      final RelDataType type = typeFactory.createJavaType(allFields.get(key).getClass());\n      names.add(key.toString());\n      types.add(type);\n    }\n    return typeFactory.createStructType(Pair.zip(names, types));\n  }\n","realPath":"redis/src/main/java/org/apache/calcite/adapter/redis/RedisTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"NB"}],"commitId":"9b678f1d7ffe030711d86f475c3a9e9e95bacb8f","commitMessage":"@@@[CALCITE-4128] Remove dependency of File adapter on Example CSV adapter\n\nMove some classes from 'example/csv' to 'file'.  and make CSV adapter\ndepend on File adapter. Copy some other classes (so that we can keep the\n'example/csv' versions simple.  and add functionality to the 'file'\nadapter).\n\nRename SqlTest to FileAdapterTest.  factor utility methods into\nFileAdapterTests.  and copy in a bunch of tests from example/csv/.../CsvTest.\n","date":"2020-07-29 03:09:43","modifiedFileCount":"10","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-07-20 08:23:08","commitOrder":3,"curCode":"  static JsonDataConverter deduceRowType(RelDataTypeFactory typeFactory, Source source) {\n    final ObjectMapper objectMapper = new ObjectMapper();\n    List<Object> list;\n    LinkedHashMap<String, Object> jsonFieldMap = new LinkedHashMap<>(1);\n    Object jsonObj = null;\n    try {\n      objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true)\n          .configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true)\n          .configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n\n      if (\"file\".equals(source.protocol()) && source.file().exists()) {\n        \r\n        jsonObj = objectMapper.readValue(source.file(), Object.class);\n      } else if (Arrays.asList(\"http\", \"https\", \"ftp\").contains(source.protocol())) {\n        \r\n        jsonObj = objectMapper.readValue(source.url(), Object.class);\n      } else {\n        jsonObj = objectMapper.readValue(source.reader(), Object.class);\n      }\n\n    } catch (MismatchedInputException e) {\n      if (!e.getMessage().contains(\"No content\")) {\n        throw new RuntimeException(\"Couldn't read \" + source, e);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Couldn't read \" + source, e);\n    }\n\n    if (jsonObj == null) {\n      list = new ArrayList<>();\n      jsonFieldMap.put(\"EmptyFileHasNoColumns\", Boolean.TRUE);\n    } else if (jsonObj instanceof Collection) {\n      \r\n      list = (List<Object>) jsonObj;\n      \r\n      jsonFieldMap = (LinkedHashMap) (list.get(0));\n    } else if (jsonObj instanceof Map) {\n      \r\n      jsonFieldMap = (LinkedHashMap) jsonObj;\n      \r\n      list = new ArrayList(((LinkedHashMap) jsonObj).values());\n    } else {\n      jsonFieldMap.put(\"line\", jsonObj);\n      list = new ArrayList<>();\n      list.add(0, jsonObj);\n    }\n\n    final List<RelDataType> types = new ArrayList<RelDataType>(jsonFieldMap.size());\n    final List<String> names = new ArrayList<String>(jsonFieldMap.size());\n\n    for (Object key : jsonFieldMap.keySet()) {\n      final RelDataType type = typeFactory.createJavaType(jsonFieldMap.get(key).getClass());\n      names.add(key.toString());\n      types.add(type);\n    }\n\n    RelDataType relDataType = typeFactory.createStructType(Pair.zip(names, types));\n    return new JsonDataConverter(relDataType, list);\n  }\n","date":"2020-07-29 03:09:43","endLine":120,"groupId":"198","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deduceRowType","params":"(RelDataTypeFactorytypeFactory@Sourcesource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7f/d064051981451d551064c4bbad72640ab1aff2.src","preCode":"  static JsonDataConverter deduceRowType(RelDataTypeFactory typeFactory, Source source) {\n    final ObjectMapper objectMapper = new ObjectMapper();\n    List<Object> list;\n    LinkedHashMap<String, Object> jsonFieldMap = new LinkedHashMap<>(1);\n    Object jsonObj = null;\n    try {\n      objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true)\n          .configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true)\n          .configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n\n      if (\"file\".equals(source.protocol()) && source.file().exists()) {\n        \r\n        jsonObj = objectMapper.readValue(source.file(), Object.class);\n      } else if (Arrays.asList(\"http\", \"https\", \"ftp\").contains(source.protocol())) {\n        \r\n        jsonObj = objectMapper.readValue(source.url(), Object.class);\n      } else {\n        jsonObj = objectMapper.readValue(source.reader(), Object.class);\n      }\n\n    } catch (MismatchedInputException e) {\n      if (!e.getMessage().contains(\"No content\")) {\n        throw new RuntimeException(\"Couldn't read \" + source, e);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Couldn't read \" + source, e);\n    }\n\n    if (jsonObj == null) {\n      list = new ArrayList<>();\n      jsonFieldMap.put(\"EmptyFileHasNoColumns\", Boolean.TRUE);\n    } else if (jsonObj instanceof Collection) {\n      \r\n      list = (List<Object>) jsonObj;\n      \r\n      jsonFieldMap = (LinkedHashMap) (list.get(0));\n    } else if (jsonObj instanceof Map) {\n      \r\n      jsonFieldMap = (LinkedHashMap) jsonObj;\n      \r\n      list = new ArrayList(((LinkedHashMap) jsonObj).values());\n    } else {\n      jsonFieldMap.put(\"line\", jsonObj);\n      list = new ArrayList<>();\n      list.add(0, jsonObj);\n    }\n\n    final List<RelDataType> types = new ArrayList<RelDataType>(jsonFieldMap.size());\n    final List<String> names = new ArrayList<String>(jsonFieldMap.size());\n\n    for (Object key : jsonFieldMap.keySet()) {\n      final RelDataType type = typeFactory.createJavaType(jsonFieldMap.get(key).getClass());\n      names.add(key.toString());\n      types.add(type);\n    }\n\n    RelDataType relDataType = typeFactory.createStructType(Pair.zip(names, types));\n    return new JsonDataConverter(relDataType, list);\n  }\n","realPath":"file/src/main/java/org/apache/calcite/adapter/file/JsonEnumerator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"},{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  @Override public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n    if (protoRowType != null) {\n      return protoRowType.apply(typeFactory);\n    }\n    final List<RelDataType> types = new ArrayList<RelDataType>(allFields.size());\n    final List<String> names = new ArrayList<String>(allFields.size());\n\n    for (Object key : allFields.keySet()) {\n      final RelDataType type = typeFactory.createJavaType(allFields.get(key).getClass());\n      names.add(key.toString());\n      types.add(type);\n    }\n    return typeFactory.createStructType(Pair.zip(names, types));\n  }\n","date":"2020-10-07 05:42:47","endLine":80,"groupId":"9633","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getRowType","params":"(RelDataTypeFactorytypeFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f6/ddbdf9f4021d59dd12b6055da5b051c2cb4b41.src","preCode":"  public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n    if (protoRowType != null) {\n      return protoRowType.apply(typeFactory);\n    }\n    final List<RelDataType> types = new ArrayList<RelDataType>(allFields.size());\n    final List<String> names = new ArrayList<String>(allFields.size());\n\n    for (Object key : allFields.keySet()) {\n      final RelDataType type = typeFactory.createJavaType(allFields.get(key).getClass());\n      names.add(key.toString());\n      types.add(type);\n    }\n    return typeFactory.createStructType(Pair.zip(names, types));\n  }\n","realPath":"redis/src/main/java/org/apache/calcite/adapter/redis/RedisTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:24:23","commitOrder":4,"curCode":"  static JsonDataConverter deduceRowType(RelDataTypeFactory typeFactory, Source source) {\n    final ObjectMapper objectMapper = new ObjectMapper();\n    List<Object> list;\n    LinkedHashMap<String, Object> jsonFieldMap = new LinkedHashMap<>(1);\n    Object jsonObj = null;\n    try {\n      objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true)\n          .configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true)\n          .configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n\n      if (\"file\".equals(source.protocol()) && source.file().exists()) {\n        \r\n        jsonObj = objectMapper.readValue(source.file(), Object.class);\n      } else if (Arrays.asList(\"http\", \"https\", \"ftp\").contains(source.protocol())) {\n        \r\n        jsonObj = objectMapper.readValue(source.url(), Object.class);\n      } else {\n        jsonObj = objectMapper.readValue(source.reader(), Object.class);\n      }\n\n    } catch (MismatchedInputException e) {\n      if (!e.getMessage().contains(\"No content\")) {\n        throw new RuntimeException(\"Couldn't read \" + source, e);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Couldn't read \" + source, e);\n    }\n\n    if (jsonObj == null) {\n      list = new ArrayList<>();\n      jsonFieldMap.put(\"EmptyFileHasNoColumns\", Boolean.TRUE);\n    } else if (jsonObj instanceof Collection) {\n      \r\n      list = (List<Object>) jsonObj;\n      \r\n      jsonFieldMap = (LinkedHashMap) list.get(0);\n    } else if (jsonObj instanceof Map) {\n      \r\n      jsonFieldMap = (LinkedHashMap) jsonObj;\n      \r\n      list = new ArrayList(((LinkedHashMap) jsonObj).values());\n    } else {\n      jsonFieldMap.put(\"line\", jsonObj);\n      list = new ArrayList<>();\n      list.add(0, jsonObj);\n    }\n\n    final List<RelDataType> types = new ArrayList<RelDataType>(jsonFieldMap.size());\n    final List<String> names = new ArrayList<String>(jsonFieldMap.size());\n\n    for (Object key : jsonFieldMap.keySet()) {\n      final RelDataType type = typeFactory.createJavaType(jsonFieldMap.get(key).getClass());\n      names.add(key.toString());\n      types.add(type);\n    }\n\n    RelDataType relDataType = typeFactory.createStructType(Pair.zip(names, types));\n    return new JsonDataConverter(relDataType, list);\n  }\n","date":"2020-10-07 05:42:52","endLine":120,"groupId":"10512","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"deduceRowType","params":"(RelDataTypeFactorytypeFactory@Sourcesource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/25/fe0ec94f810b9fb264de1192dd94e9741074f2.src","preCode":"  static JsonDataConverter deduceRowType(RelDataTypeFactory typeFactory, Source source) {\n    final ObjectMapper objectMapper = new ObjectMapper();\n    List<Object> list;\n    LinkedHashMap<String, Object> jsonFieldMap = new LinkedHashMap<>(1);\n    Object jsonObj = null;\n    try {\n      objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true)\n          .configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true)\n          .configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n\n      if (\"file\".equals(source.protocol()) && source.file().exists()) {\n        \r\n        jsonObj = objectMapper.readValue(source.file(), Object.class);\n      } else if (Arrays.asList(\"http\", \"https\", \"ftp\").contains(source.protocol())) {\n        \r\n        jsonObj = objectMapper.readValue(source.url(), Object.class);\n      } else {\n        jsonObj = objectMapper.readValue(source.reader(), Object.class);\n      }\n\n    } catch (MismatchedInputException e) {\n      if (!e.getMessage().contains(\"No content\")) {\n        throw new RuntimeException(\"Couldn't read \" + source, e);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Couldn't read \" + source, e);\n    }\n\n    if (jsonObj == null) {\n      list = new ArrayList<>();\n      jsonFieldMap.put(\"EmptyFileHasNoColumns\", Boolean.TRUE);\n    } else if (jsonObj instanceof Collection) {\n      \r\n      list = (List<Object>) jsonObj;\n      \r\n      jsonFieldMap = (LinkedHashMap) (list.get(0));\n    } else if (jsonObj instanceof Map) {\n      \r\n      jsonFieldMap = (LinkedHashMap) jsonObj;\n      \r\n      list = new ArrayList(((LinkedHashMap) jsonObj).values());\n    } else {\n      jsonFieldMap.put(\"line\", jsonObj);\n      list = new ArrayList<>();\n      list.add(0, jsonObj);\n    }\n\n    final List<RelDataType> types = new ArrayList<RelDataType>(jsonFieldMap.size());\n    final List<String> names = new ArrayList<String>(jsonFieldMap.size());\n\n    for (Object key : jsonFieldMap.keySet()) {\n      final RelDataType type = typeFactory.createJavaType(jsonFieldMap.get(key).getClass());\n      names.add(key.toString());\n      types.add(type);\n    }\n\n    RelDataType relDataType = typeFactory.createStructType(Pair.zip(names, types));\n    return new JsonDataConverter(relDataType, list);\n  }\n","realPath":"file/src/main/java/org/apache/calcite/adapter/file/JsonEnumerator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":4,"curCode":"  @Override public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n    if (protoRowType != null) {\n      return protoRowType.apply(typeFactory);\n    }\n    final List<RelDataType> types = new ArrayList<RelDataType>(allFields.size());\n    final List<String> names = new ArrayList<String>(allFields.size());\n\n    for (Object key : allFields.keySet()) {\n      final RelDataType type = typeFactory.createJavaType(allFields.get(key).getClass());\n      names.add(key.toString());\n      types.add(type);\n    }\n    return typeFactory.createStructType(Pair.zip(names, types));\n  }\n","date":"2020-10-07 05:42:47","endLine":80,"groupId":"10512","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getRowType","params":"(RelDataTypeFactorytypeFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f6/ddbdf9f4021d59dd12b6055da5b051c2cb4b41.src","preCode":"  @Override public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n    if (protoRowType != null) {\n      return protoRowType.apply(typeFactory);\n    }\n    final List<RelDataType> types = new ArrayList<RelDataType>(allFields.size());\n    final List<String> names = new ArrayList<String>(allFields.size());\n\n    for (Object key : allFields.keySet()) {\n      final RelDataType type = typeFactory.createJavaType(allFields.get(key).getClass());\n      names.add(key.toString());\n      types.add(type);\n    }\n    return typeFactory.createStructType(Pair.zip(names, types));\n  }\n","realPath":"redis/src/main/java/org/apache/calcite/adapter/redis/RedisTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"b5a94de7d270ecd0defbb7475d797d0e48649955","commitMessage":"@@@[CALCITE-4314] Remove unnecessary parentheses\n\nSee https://errorprone.info/bugpattern/UnnecessaryParentheses\n","date":"2020-10-07 05:42:52","modifiedFileCount":"18","status":"M","submitter":"Vladimir Sitnikov"}]
