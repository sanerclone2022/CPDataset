[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testNotBetween() {\n    tester.setFor(SqlStdOperatorTable.NOT_BETWEEN, VM_EXPAND);\n    tester.checkBoolean(\"2 not between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"3 not between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"4 not between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.2e0 not between 1.1 and 1.3\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"1.2e1 not between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 not between 2 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 not between 2e0 and 3e0\", Boolean.TRUE);\n  }\n","date":"2014-11-14 09:39:34","endLine":311,"groupId":"2962","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotBetween","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testNotBetween() {\n    tester.setFor(SqlStdOperatorTable.NOT_BETWEEN, VM_EXPAND);\n    tester.checkBoolean(\"2 not between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"3 not between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"4 not between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.2e0 not between 1.1 and 1.3\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"1.2e1 not between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 not between 2 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 not between 2e0 and 3e0\", Boolean.TRUE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testIsNotDistinctFromOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,\n        VM_EXPAND);\n    tester.checkBoolean(\"1 is not distinct from 1\", Boolean.TRUE);\n    tester.checkBoolean(\"1 is not distinct from 1.0\", Boolean.TRUE);\n    tester.checkBoolean(\"1 is not distinct from 2\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(null as integer) is not distinct from 2\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(null as integer) is not distinct from cast(null as integer)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.23 is not distinct from 1.23\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.23 is not distinct from 5.23\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"-23e0 is not distinct from -2.3e1\",\n        Boolean.TRUE);\n\n    \r\n    if (false) {\n      tester.checkBoolean(\n          \"row(1,1) is not distinct from row(1,1)\",\n          false);\n      tester.checkBoolean(\n          \"row(1,1) is not distinct from row(1,2)\",\n          true);\n    }\n\n    \r\n    tester.checkBoolean(\n        \"interval '2' day is not distinct from interval '1' day\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"interval '10' hour is not distinct from interval '10' hour\",\n        Boolean.TRUE);\n  }\n","date":"2014-11-14 09:39:34","endLine":2078,"groupId":"11089","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsNotDistinctFromOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testIsNotDistinctFromOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,\n        VM_EXPAND);\n    tester.checkBoolean(\"1 is not distinct from 1\", Boolean.TRUE);\n    tester.checkBoolean(\"1 is not distinct from 1.0\", Boolean.TRUE);\n    tester.checkBoolean(\"1 is not distinct from 2\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(null as integer) is not distinct from 2\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(null as integer) is not distinct from cast(null as integer)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.23 is not distinct from 1.23\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.23 is not distinct from 5.23\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"-23e0 is not distinct from -2.3e1\",\n        Boolean.TRUE);\n\n    \r\n    if (false) {\n      tester.checkBoolean(\n          \"row(1,1) is not distinct from row(1,1)\",\n          false);\n      tester.checkBoolean(\n          \"row(1,1) is not distinct from row(1,2)\",\n          true);\n    }\n\n    \r\n    tester.checkBoolean(\n        \"interval '2' day is not distinct from interval '1' day\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"interval '10' hour is not distinct from interval '10' hour\",\n        Boolean.TRUE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2038,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2015-07-25 00:48:09","commitOrder":2,"curCode":"  @Test public void testNotBetween() {\n    tester.setFor(SqlStdOperatorTable.NOT_BETWEEN, VM_EXPAND);\n    tester.checkBoolean(\"2 not between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"3 not between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"4 not between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.2e0 not between 1.1 and 1.3\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"1.2e1 not between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 not between 2 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 not between 2e0 and 3e0\", Boolean.TRUE);\n    tester.checkBoolean(\"x'0A00015A' not between x'0A000130' and x'0A0001B0'\", Boolean.FALSE);\n    tester.checkBoolean(\"x'0A00015A' not between x'0A0001A0' and x'0A0001B0'\", Boolean.TRUE);\n  }\n","date":"2015-07-25 00:48:09","endLine":346,"groupId":"2962","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotBetween","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/82/041ccf13d47d60eed17ed20e4ae7a9c8a07a4b.src","preCode":"  @Test public void testNotBetween() {\n    tester.setFor(SqlStdOperatorTable.NOT_BETWEEN, VM_EXPAND);\n    tester.checkBoolean(\"2 not between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"3 not between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"4 not between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.2e0 not between 1.1 and 1.3\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"1.2e1 not between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 not between 2 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 not between 2e0 and 3e0\", Boolean.TRUE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testIsNotDistinctFromOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,\n        VM_EXPAND);\n    tester.checkBoolean(\"1 is not distinct from 1\", Boolean.TRUE);\n    tester.checkBoolean(\"1 is not distinct from 1.0\", Boolean.TRUE);\n    tester.checkBoolean(\"1 is not distinct from 2\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(null as integer) is not distinct from 2\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(null as integer) is not distinct from cast(null as integer)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.23 is not distinct from 1.23\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.23 is not distinct from 5.23\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"-23e0 is not distinct from -2.3e1\",\n        Boolean.TRUE);\n\n    \r\n    if (false) {\n      tester.checkBoolean(\n          \"row(1,1) is not distinct from row(1,1)\",\n          false);\n      tester.checkBoolean(\n          \"row(1,1) is not distinct from row(1,2)\",\n          true);\n    }\n\n    \r\n    tester.checkBoolean(\n        \"interval '2' day is not distinct from interval '1' day\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"interval '10' hour is not distinct from interval '10' hour\",\n        Boolean.TRUE);\n  }\n","date":"2014-11-14 09:39:34","endLine":2078,"groupId":"11089","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsNotDistinctFromOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testIsNotDistinctFromOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,\n        VM_EXPAND);\n    tester.checkBoolean(\"1 is not distinct from 1\", Boolean.TRUE);\n    tester.checkBoolean(\"1 is not distinct from 1.0\", Boolean.TRUE);\n    tester.checkBoolean(\"1 is not distinct from 2\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(null as integer) is not distinct from 2\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(null as integer) is not distinct from cast(null as integer)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.23 is not distinct from 1.23\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.23 is not distinct from 5.23\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"-23e0 is not distinct from -2.3e1\",\n        Boolean.TRUE);\n\n    \r\n    if (false) {\n      tester.checkBoolean(\n          \"row(1,1) is not distinct from row(1,1)\",\n          false);\n      tester.checkBoolean(\n          \"row(1,1) is not distinct from row(1,2)\",\n          true);\n    }\n\n    \r\n    tester.checkBoolean(\n        \"interval '2' day is not distinct from interval '1' day\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"interval '10' hour is not distinct from interval '10' hour\",\n        Boolean.TRUE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2038,"status":"N"}],"commitId":"26a08774516c49eba39ccb7690295f87560a43fc","commitMessage":"@@@[CALCITE-717] Compare BINARY and VARBINARY on unsigned byte values (Low Chin Wei)\n","date":"2015-07-25 00:48:09","modifiedFileCount":"3","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testNotBetween() {\n    tester.setFor(SqlStdOperatorTable.NOT_BETWEEN, VM_EXPAND);\n    tester.checkBoolean(\"2 not between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"3 not between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"4 not between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.2e0 not between 1.1 and 1.3\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"1.2e1 not between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 not between 2 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 not between 2e0 and 3e0\", Boolean.TRUE);\n    tester.checkBoolean(\"x'0A00015A' not between x'0A000130' and x'0A0001B0'\", Boolean.FALSE);\n    tester.checkBoolean(\"x'0A00015A' not between x'0A0001A0' and x'0A0001B0'\", Boolean.TRUE);\n  }\n","date":"2020-04-06 04:57:49","endLine":439,"groupId":"10737","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotBetween","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testNotBetween() {\n    tester.setFor(SqlStdOperatorTable.NOT_BETWEEN, VM_EXPAND);\n    tester.checkBoolean(\"2 not between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"3 not between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"4 not between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.2e0 not between 1.1 and 1.3\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"1.2e1 not between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 not between 2 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 not between 2e0 and 3e0\", Boolean.TRUE);\n    tester.checkBoolean(\"x'0A00015A' not between x'0A000130' and x'0A0001B0'\", Boolean.FALSE);\n    tester.checkBoolean(\"x'0A00015A' not between x'0A0001A0' and x'0A0001B0'\", Boolean.TRUE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testIsNotDistinctFromOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,\n        VM_EXPAND);\n    tester.checkBoolean(\"1 is not distinct from 1\", Boolean.TRUE);\n    tester.checkBoolean(\"1 is not distinct from 1.0\", Boolean.TRUE);\n    tester.checkBoolean(\"1 is not distinct from 2\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(null as integer) is not distinct from 2\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(null as integer) is not distinct from cast(null as integer)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.23 is not distinct from 1.23\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.23 is not distinct from 5.23\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"-23e0 is not distinct from -2.3e1\",\n        Boolean.TRUE);\n\n    \r\n    if (false) {\n      tester.checkBoolean(\n          \"row(1,1) is not distinct from row(1,1)\",\n          false);\n      tester.checkBoolean(\n          \"row(1,1) is not distinct from row(1,2)\",\n          true);\n    }\n\n    \r\n    tester.checkBoolean(\n        \"interval '2' day is not distinct from interval '1' day\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"interval '10' hour is not distinct from interval '10' hour\",\n        Boolean.TRUE);\n  }\n","date":"2020-04-06 04:57:49","endLine":2553,"groupId":"10737","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsNotDistinctFromOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testIsNotDistinctFromOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,\n        VM_EXPAND);\n    tester.checkBoolean(\"1 is not distinct from 1\", Boolean.TRUE);\n    tester.checkBoolean(\"1 is not distinct from 1.0\", Boolean.TRUE);\n    tester.checkBoolean(\"1 is not distinct from 2\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(null as integer) is not distinct from 2\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(null as integer) is not distinct from cast(null as integer)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.23 is not distinct from 1.23\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"1.23 is not distinct from 5.23\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"-23e0 is not distinct from -2.3e1\",\n        Boolean.TRUE);\n\n    \r\n    if (false) {\n      tester.checkBoolean(\n          \"row(1,1) is not distinct from row(1,1)\",\n          false);\n      tester.checkBoolean(\n          \"row(1,1) is not distinct from row(1,2)\",\n          true);\n    }\n\n    \r\n    tester.checkBoolean(\n        \"interval '2' day is not distinct from interval '1' day\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"interval '10' hour is not distinct from interval '10' hour\",\n        Boolean.TRUE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2513,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
