[{"authorTime":"2018-01-11 04:54:26","codes":[{"authorDate":"2018-01-11 04:54:26","commitOrder":1,"curCode":"  @Test public void testFloorLtRewrite() {\n    final Calendar c = Util.calendar();\n\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.lt(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<($9, 2011-01-01 00:00:00)\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.lt(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<($9, 2010-01-01 00:00:00)\"));\n  }\n","date":"2018-01-12 11:53:24","endLine":474,"groupId":"10608","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFloorLtRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f0/439aba565b3e6275cd74db3ba741367f9c3012.src","preCode":"  @Test public void testFloorLtRewrite() {\n    final Calendar c = Util.calendar();\n\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.lt(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<($9, 2011-01-01 00:00:00)\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.lt(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<($9, 2010-01-01 00:00:00)\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"B"},{"authorDate":"2018-01-11 04:54:26","commitOrder":1,"curCode":"  @Test public void testCeilLtRewrite() {\n    final Calendar c = Util.calendar();\n\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.lt(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<=($9, 2010-01-01 00:00:00)\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.lt(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<=($9, 2009-01-01 00:00:00)\"));\n  }\n","date":"2018-01-12 11:53:24","endLine":616,"groupId":"10608","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCeilLtRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f0/439aba565b3e6275cd74db3ba741367f9c3012.src","preCode":"  @Test public void testCeilLtRewrite() {\n    final Calendar c = Util.calendar();\n\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.lt(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<=($9, 2010-01-01 00:00:00)\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.lt(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<=($9, 2009-01-01 00:00:00)\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":603,"status":"B"}],"commitId":"fa19580ecfe404b75fcb6c9c174cfe9da73d2db8","commitMessage":"@@@[CALCITE-2090] Convert FLOOR and CEIL into time ranges (Nishant Bangarwa)\n\nAdd test for multiple operands.\n\nAllow RexLiteral.getValueAs(Calendar) on TIMESTAMP_WITH_LOCAL_TIME_ZONE\nliterals.\n\nClose apache/calcite#603\n","date":"2018-01-12 11:53:24","modifiedFileCount":"4","status":"B","submitter":"Nishant"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testFloorLtRewrite() {\n    final Calendar c = Util.calendar();\n\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.lt(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<($9, 2011-01-01 00:00:00)\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.lt(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<($9, 2010-01-01 00:00:00)\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":476,"groupId":"101504","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFloorLtRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/29288bd53b9dc06551209ba551f2b4be514394.src","preCode":"  @Test public void testFloorLtRewrite() {\n    final Calendar c = Util.calendar();\n\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.lt(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<($9, 2011-01-01 00:00:00)\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.lt(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<($9, 2010-01-01 00:00:00)\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":463,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testCeilLtRewrite() {\n    final Calendar c = Util.calendar();\n\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.lt(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<=($9, 2010-01-01 00:00:00)\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.lt(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<=($9, 2009-01-01 00:00:00)\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":618,"groupId":"101504","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCeilLtRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/29288bd53b9dc06551209ba551f2b4be514394.src","preCode":"  @Test public void testCeilLtRewrite() {\n    final Calendar c = Util.calendar();\n\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.lt(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<=($9, 2010-01-01 00:00:00)\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.lt(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"<=($9, 2009-01-01 00:00:00)\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
