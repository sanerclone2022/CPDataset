[{"authorTime":"2018-03-01 10:10:35","codes":[{"authorDate":"2018-03-01 10:10:35","commitOrder":2,"curCode":"  @Test public void testDistinctAlready() {\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .distinct()\n            .build();\n    final String expected = \"LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2018-03-12 15:16:13","endLine":942,"groupId":"6289","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDistinctAlready","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/9019101c478fdb0d8c9c1f7978cbf45c487a35.src","preCode":"  @Test public void testDistinctAlready() {\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .distinct()\n            .build();\n    final String expected = \"LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":933,"status":"B"},{"authorDate":"2018-03-01 10:10:35","commitOrder":2,"curCode":"  @Test public void testEmpty() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(0), builder.literal(false))\n            .empty()\n            .build();\n    final String expected =\n        \"LogicalValues(tuples=[[]])\\n\";\n    assertThat(root, hasTree(expected));\n    final String expectedType =\n        \"RecordType(TINYINT NOT NULL DEPTNO, BOOLEAN NOT NULL $f1) NOT NULL\";\n    assertThat(root.getRowType().getFullTypeString(), is(expectedType));\n  }\n","date":"2018-03-12 15:16:13","endLine":1586,"groupId":"14878","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/9019101c478fdb0d8c9c1f7978cbf45c487a35.src","preCode":"  @Test public void testEmpty() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(0), builder.literal(false))\n            .empty()\n            .build();\n    final String expected =\n        \"LogicalValues(tuples=[[]])\\n\";\n    assertThat(root, hasTree(expected));\n    final String expectedType =\n        \"RecordType(TINYINT NOT NULL DEPTNO, BOOLEAN NOT NULL $f1) NOT NULL\";\n    assertThat(root.getRowType().getFullTypeString(), is(expectedType));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1569,"status":"MB"}],"commitId":"fb8ebd31526cd2e203fa3526ca8de7a22ee0d139","commitMessage":"@@@[CALCITE-2197] Fix test failures on Windows due to line endings\n\nAdd several new matchers in Matchers: isLinux.  containsStringLinux. \nhasTree.  compose. Change tests that generate platform-specific strings\nto use them.\n","date":"2018-03-12 15:16:13","modifiedFileCount":"13","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testDistinctAlready() {\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .distinct()\n            .build();\n    final String expected = \"LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":1594,"groupId":"101258","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDistinctAlready","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testDistinctAlready() {\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .distinct()\n            .build();\n    final String expected = \"LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1585,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testEmpty() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(0), builder.literal(false))\n            .empty()\n            .build();\n    final String expected =\n        \"LogicalValues(tuples=[[]])\\n\";\n    assertThat(root, hasTree(expected));\n    final String expectedType =\n        \"RecordType(TINYINT NOT NULL DEPTNO, BOOLEAN NOT NULL $f1) NOT NULL\";\n    assertThat(root.getRowType().getFullTypeString(), is(expectedType));\n  }\n","date":"2020-04-06 04:57:49","endLine":2564,"groupId":"101258","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testEmpty() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(0), builder.literal(false))\n            .empty()\n            .build();\n    final String expected =\n        \"LogicalValues(tuples=[[]])\\n\";\n    assertThat(root, hasTree(expected));\n    final String expectedType =\n        \"RecordType(TINYINT NOT NULL DEPTNO, BOOLEAN NOT NULL $f1) NOT NULL\";\n    assertThat(root.getRowType().getFullTypeString(), is(expectedType));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2547,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
