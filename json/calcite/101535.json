[{"authorTime":"2018-11-10 00:39:20","codes":[{"authorDate":"2020-03-26 09:32:45","commitOrder":2,"curCode":"  @Test public void testConvertWindowToSql() {\n    String query0 = \"SELECT row_number() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected0 = \"SELECT ROW_NUMBER() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query1 = \"SELECT rank() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected1 = \"SELECT RANK() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query2 = \"SELECT lead(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected2 = \"SELECT LEAD(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" \"\n            + \"ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query3 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected3 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query4 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"count(*) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"count(*) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected4 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query5 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\" group by \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n    String expected5 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n\n    String query6 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"employee\\\"\\n\"\n            + \"group by \\\"hire_date\\\", \\\"employee_id\\\"\";\n    String expected6 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') \"\n            + \"OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"hire_date\\\", \\\"employee_id\\\"\";\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    RuleSet rules = RuleSets.ofList(ProjectToWindowRule.PROJECT);\n\n    sql(query0).optimize(rules, hepPlanner).ok(expected0);\n    sql(query1).optimize(rules, hepPlanner).ok(expected1);\n    sql(query2).optimize(rules, hepPlanner).ok(expected2);\n    sql(query3).optimize(rules, hepPlanner).ok(expected3);\n    sql(query4).optimize(rules, hepPlanner).ok(expected4);\n    sql(query5).optimize(rules, hepPlanner).ok(expected5);\n    sql(query6).optimize(rules, hepPlanner).ok(expected6);\n  }\n","date":"2020-04-06 04:53:38","endLine":2725,"groupId":"6859","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvertWindowToSql","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/19/d21f528a1cb1d249aeaefcc1c73d1f2182a844.src","preCode":"  @Test public void testConvertWindowToSql() {\n    String query0 = \"SELECT row_number() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected0 = \"SELECT ROW_NUMBER() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query1 = \"SELECT rank() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected1 = \"SELECT RANK() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query2 = \"SELECT lead(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected2 = \"SELECT LEAD(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" \"\n            + \"ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query3 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected3 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query4 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"count(*) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"count(*) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected4 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query5 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\" group by \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n    String expected5 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n\n    String query6 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"employee\\\"\\n\"\n            + \"group by \\\"hire_date\\\", \\\"employee_id\\\"\";\n    String expected6 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') \"\n            + \"OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"hire_date\\\", \\\"employee_id\\\"\";\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    RuleSet rules = RuleSets.ofList(ProjectToWindowRule.PROJECT);\n\n    sql(query0).optimize(rules, hepPlanner).ok(expected0);\n    sql(query1).optimize(rules, hepPlanner).ok(expected1);\n    sql(query2).optimize(rules, hepPlanner).ok(expected2);\n    sql(query3).optimize(rules, hepPlanner).ok(expected3);\n    sql(query4).optimize(rules, hepPlanner).ok(expected4);\n    sql(query5).optimize(rules, hepPlanner).ok(expected5);\n    sql(query6).optimize(rules, hepPlanner).ok(expected6);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2645,"status":"B"},{"authorDate":"2018-11-10 00:39:20","commitOrder":2,"curCode":"  @Test public void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","date":"2018-11-10 00:39:58","endLine":2905,"groupId":"15747","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonPredicate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/18/9c33f84f60a07794006fda39249415cf048bfc.src","preCode":"  @Test public void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2879,"status":"NB"}],"commitId":"ddda872b4922266c102f474042b4df27ba9a09be","commitMessage":"@@@[CALCITE-3877] In RexWindow.  make fields upperBound and lowerBound not-nullable\n\nWhere you would previously have supplied null to RexBuilder.makeOver. \nnow supply RexWindowBounds.UNBOUNDED_PRECEDING. \nRexWindowBounds.UNBOUNDED_FOLLOWING.  or RexWindowBounds.CURRENT_ROW.\n\nMove RexWindowBound.create into new class RexWindowBounds.  with methods\nand constants for the various types of bound.\n\nDon't keep SqlNode inside RexWindowBound objects.\n\nDuring validation.  don't mutate the lowerBound and upperBound fields in\nSqlWindow.\n\nNote that \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\" is not\nequivalent to \"ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\".\n\"RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\"\n(that is.  not bracket) is equivalent to\n\"ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\". \nbut we require RANGE.  to keep things canonical.\n\nClose apache/calcite#1896\n","date":"2020-04-06 04:53:38","modifiedFileCount":"22","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testConvertWindowToSql() {\n    String query0 = \"SELECT row_number() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected0 = \"SELECT ROW_NUMBER() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query1 = \"SELECT rank() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected1 = \"SELECT RANK() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query2 = \"SELECT lead(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected2 = \"SELECT LEAD(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" \"\n            + \"ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query3 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected3 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query4 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"count(*) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"count(*) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected4 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query5 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\" group by \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n    String expected5 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n\n    String query6 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"employee\\\"\\n\"\n            + \"group by \\\"hire_date\\\", \\\"employee_id\\\"\";\n    String expected6 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') \"\n            + \"OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"hire_date\\\", \\\"employee_id\\\"\";\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    RuleSet rules = RuleSets.ofList(ProjectToWindowRule.PROJECT);\n\n    sql(query0).optimize(rules, hepPlanner).ok(expected0);\n    sql(query1).optimize(rules, hepPlanner).ok(expected1);\n    sql(query2).optimize(rules, hepPlanner).ok(expected2);\n    sql(query3).optimize(rules, hepPlanner).ok(expected3);\n    sql(query4).optimize(rules, hepPlanner).ok(expected4);\n    sql(query5).optimize(rules, hepPlanner).ok(expected5);\n    sql(query6).optimize(rules, hepPlanner).ok(expected6);\n  }\n","date":"2020-04-06 04:57:49","endLine":2725,"groupId":"6859","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvertWindowToSql","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testConvertWindowToSql() {\n    String query0 = \"SELECT row_number() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected0 = \"SELECT ROW_NUMBER() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query1 = \"SELECT rank() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected1 = \"SELECT RANK() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query2 = \"SELECT lead(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected2 = \"SELECT LEAD(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" \"\n            + \"ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query3 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected3 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query4 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"count(*) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"count(*) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected4 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query5 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\" group by \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n    String expected5 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n\n    String query6 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"employee\\\"\\n\"\n            + \"group by \\\"hire_date\\\", \\\"employee_id\\\"\";\n    String expected6 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') \"\n            + \"OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"hire_date\\\", \\\"employee_id\\\"\";\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    RuleSet rules = RuleSets.ofList(ProjectToWindowRule.PROJECT);\n\n    sql(query0).optimize(rules, hepPlanner).ok(expected0);\n    sql(query1).optimize(rules, hepPlanner).ok(expected1);\n    sql(query2).optimize(rules, hepPlanner).ok(expected2);\n    sql(query3).optimize(rules, hepPlanner).ok(expected3);\n    sql(query4).optimize(rules, hepPlanner).ok(expected4);\n    sql(query5).optimize(rules, hepPlanner).ok(expected5);\n    sql(query6).optimize(rules, hepPlanner).ok(expected6);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2645,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":4522,"groupId":"15747","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonPredicate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4496,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-07-09 04:45:12","commitOrder":4,"curCode":"  @Test void testConvertWindowToSql() {\n    String query0 = \"SELECT row_number() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected0 = \"SELECT ROW_NUMBER() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query1 = \"SELECT rank() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected1 = \"SELECT RANK() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query2 = \"SELECT lead(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected2 = \"SELECT LEAD(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" \"\n            + \"ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query3 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected3 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query4 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"count(*) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"count(*) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected4 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query5 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\" group by \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n    String expected5 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n\n    String query6 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"employee\\\"\\n\"\n            + \"group by \\\"hire_date\\\", \\\"employee_id\\\"\";\n    String expected6 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') \"\n            + \"OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"hire_date\\\", \\\"employee_id\\\"\";\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    RuleSet rules = RuleSets.ofList(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW);\n\n    sql(query0).optimize(rules, hepPlanner).ok(expected0);\n    sql(query1).optimize(rules, hepPlanner).ok(expected1);\n    sql(query2).optimize(rules, hepPlanner).ok(expected2);\n    sql(query3).optimize(rules, hepPlanner).ok(expected3);\n    sql(query4).optimize(rules, hepPlanner).ok(expected4);\n    sql(query5).optimize(rules, hepPlanner).ok(expected5);\n    sql(query6).optimize(rules, hepPlanner).ok(expected6);\n  }\n","date":"2020-07-12 06:58:28","endLine":2851,"groupId":"6859","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvertWindowToSql","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a9/15ae9c6e92823e150e114dc4ce09852c9b8827.src","preCode":"  @Test void testConvertWindowToSql() {\n    String query0 = \"SELECT row_number() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected0 = \"SELECT ROW_NUMBER() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query1 = \"SELECT rank() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected1 = \"SELECT RANK() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query2 = \"SELECT lead(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected2 = \"SELECT LEAD(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" \"\n            + \"ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query3 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected3 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query4 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"count(*) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"count(*) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected4 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query5 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\" group by \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n    String expected5 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n\n    String query6 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"employee\\\"\\n\"\n            + \"group by \\\"hire_date\\\", \\\"employee_id\\\"\";\n    String expected6 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') \"\n            + \"OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"hire_date\\\", \\\"employee_id\\\"\";\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    RuleSet rules = RuleSets.ofList(ProjectToWindowRule.PROJECT);\n\n    sql(query0).optimize(rules, hepPlanner).ok(expected0);\n    sql(query1).optimize(rules, hepPlanner).ok(expected1);\n    sql(query2).optimize(rules, hepPlanner).ok(expected2);\n    sql(query3).optimize(rules, hepPlanner).ok(expected3);\n    sql(query4).optimize(rules, hepPlanner).ok(expected4);\n    sql(query5).optimize(rules, hepPlanner).ok(expected5);\n    sql(query6).optimize(rules, hepPlanner).ok(expected6);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2771,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":4522,"groupId":"15747","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonPredicate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4496,"status":"N"}],"commitId":"23b26b6287315cc2cd236e705bb651077488fc5c","commitMessage":"@@@In preparation for [CALCITE-3923] and [CALCITE-4079].  deprecate fields and methods that will be removed between 1.24 and 1.25\n\nAlso.  in RelNode.  change some methods from 'to removed before 2.0'\nto 'to be removed before 1.25'. The methods are sDistinct(). \nisKey(ImmutableBitSet).  getQuery().  getRows().  getVariablesStopped(). \ncomputeSelfCost().  isValid(boolean).  getCollationList().  getChildExps().\n","date":"2020-07-12 06:58:28","modifiedFileCount":"137","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-11-20 11:53:02","commitOrder":5,"curCode":"  @Test void testConvertWindowToSql() {\n    String query0 = \"SELECT row_number() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected0 = \"SELECT ROW_NUMBER() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query1 = \"SELECT rank() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected1 = \"SELECT RANK() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query2 = \"SELECT lead(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected2 = \"SELECT LEAD(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" \"\n            + \"ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query3 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected3 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query4 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"count(*) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"count(*) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected4 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query5 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\" group by \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n    String expected5 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n\n    String query6 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"employee\\\"\\n\"\n            + \"group by \\\"hire_date\\\", \\\"employee_id\\\"\";\n    String expected6 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') \"\n            + \"OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"hire_date\\\", \\\"employee_id\\\"\";\n    String query7 = \"SELECT \"\n        + \"count(distinct \\\"employee_id\\\") over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected7 = \"SELECT \"\n        + \"COUNT(DISTINCT \\\"employee_id\\\") \"\n        + \"OVER (ORDER BY \\\"hire_date\\\" RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$0\\\"\"\n        + \"\\nFROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query8 = \"SELECT \"\n        + \"sum(distinct \\\"position_id\\\") over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected8 =\n        \"SELECT CASE WHEN (COUNT(DISTINCT \\\"position_id\\\") OVER (ORDER BY \\\"hire_date\\\" \"\n            + \"RANGE\"\n            + \" BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)) > 0 THEN COALESCE(SUM(DISTINCT \"\n            + \"\\\"position_id\\\") OVER (ORDER BY \\\"hire_date\\\" RANGE BETWEEN UNBOUNDED \"\n            + \"PRECEDING AND CURRENT ROW), 0) ELSE NULL END\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    RuleSet rules = RuleSets.ofList(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW);\n\n    sql(query0).optimize(rules, hepPlanner).ok(expected0);\n    sql(query1).optimize(rules, hepPlanner).ok(expected1);\n    sql(query2).optimize(rules, hepPlanner).ok(expected2);\n    sql(query3).optimize(rules, hepPlanner).ok(expected3);\n    sql(query4).optimize(rules, hepPlanner).ok(expected4);\n    sql(query5).optimize(rules, hepPlanner).ok(expected5);\n    sql(query6).optimize(rules, hepPlanner).ok(expected6);\n    sql(query7).optimize(rules, hepPlanner).ok(expected7);\n    sql(query8).optimize(rules, hepPlanner).ok(expected8);\n  }\n","date":"2020-12-02 18:38:50","endLine":3042,"groupId":"6859","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvertWindowToSql","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/42/38c1979e20fa703e2ef2103271dd8efff7e52e.src","preCode":"  @Test void testConvertWindowToSql() {\n    String query0 = \"SELECT row_number() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected0 = \"SELECT ROW_NUMBER() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query1 = \"SELECT rank() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected1 = \"SELECT RANK() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query2 = \"SELECT lead(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected2 = \"SELECT LEAD(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" \"\n            + \"ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query3 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected3 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query4 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"count(*) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"count(*) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected4 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query5 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\" group by \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n    String expected5 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n\n    String query6 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"employee\\\"\\n\"\n            + \"group by \\\"hire_date\\\", \\\"employee_id\\\"\";\n    String expected6 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') \"\n            + \"OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"hire_date\\\", \\\"employee_id\\\"\";\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    RuleSet rules = RuleSets.ofList(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW);\n\n    sql(query0).optimize(rules, hepPlanner).ok(expected0);\n    sql(query1).optimize(rules, hepPlanner).ok(expected1);\n    sql(query2).optimize(rules, hepPlanner).ok(expected2);\n    sql(query3).optimize(rules, hepPlanner).ok(expected3);\n    sql(query4).optimize(rules, hepPlanner).ok(expected4);\n    sql(query5).optimize(rules, hepPlanner).ok(expected5);\n    sql(query6).optimize(rules, hepPlanner).ok(expected6);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2944,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":4522,"groupId":"15747","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonPredicate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4496,"status":"N"}],"commitId":"42cd8ca8e511beee3c5b78e872ed4a79ee691f93","commitMessage":"@@@[CALCITE-4411] RelNode to SQL loses distinct on window aggregation (Jiatao Tao)\n\nClose apache/calcite#2274\n","date":"2020-12-02 18:38:50","modifiedFileCount":"2","status":"M","submitter":"Jiatao Tao"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2021-08-12 14:23:53","commitOrder":6,"curCode":"  @Test void testConvertWindowToSql() {\n    String query0 = \"SELECT row_number() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected0 = \"SELECT ROW_NUMBER() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query1 = \"SELECT rank() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected1 = \"SELECT RANK() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query2 = \"SELECT lead(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected2 = \"SELECT LEAD(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" \"\n            + \"ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query3 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected3 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query4 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"count(*) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"count(*) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected4 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query5 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\" group by \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n    String expected5 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n\n    String query6 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"employee\\\"\\n\"\n            + \"group by \\\"hire_date\\\", \\\"employee_id\\\"\";\n    String expected6 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') \"\n            + \"OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"hire_date\\\", \\\"employee_id\\\"\";\n    String query7 = \"SELECT \"\n        + \"count(distinct \\\"employee_id\\\") over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected7 = \"SELECT \"\n        + \"COUNT(DISTINCT \\\"employee_id\\\") OVER (ORDER BY \\\"hire_date\\\"\"\n        + \" RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$0\\\"\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query8 = \"SELECT \"\n        + \"sum(distinct \\\"position_id\\\") over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected8 =\n        \"SELECT CASE WHEN (COUNT(DISTINCT \\\"position_id\\\") OVER (ORDER BY \\\"hire_date\\\" \"\n            + \"RANGE\"\n            + \" BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)) > 0 THEN COALESCE(SUM(DISTINCT \"\n            + \"\\\"position_id\\\") OVER (ORDER BY \\\"hire_date\\\" RANGE BETWEEN UNBOUNDED \"\n            + \"PRECEDING AND CURRENT ROW), 0) ELSE NULL END\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    RuleSet rules = RuleSets.ofList(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW);\n\n    sql(query0).optimize(rules, hepPlanner).ok(expected0);\n    sql(query1).optimize(rules, hepPlanner).ok(expected1);\n    sql(query2).optimize(rules, hepPlanner).ok(expected2);\n    sql(query3).optimize(rules, hepPlanner).ok(expected3);\n    sql(query4).optimize(rules, hepPlanner).ok(expected4);\n    sql(query5).optimize(rules, hepPlanner).ok(expected5);\n    sql(query6).optimize(rules, hepPlanner).ok(expected6);\n    sql(query7).optimize(rules, hepPlanner).ok(expected7);\n    sql(query8).optimize(rules, hepPlanner).ok(expected8);\n  }\n","date":"2021-08-14 15:52:54","endLine":3262,"groupId":"101535","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvertWindowToSql","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/f75c93796391bbde612ea6420ab122a1868587.src","preCode":"  @Test void testConvertWindowToSql() {\n    String query0 = \"SELECT row_number() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected0 = \"SELECT ROW_NUMBER() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query1 = \"SELECT rank() over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected1 = \"SELECT RANK() OVER (ORDER BY \\\"hire_date\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query2 = \"SELECT lead(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected2 = \"SELECT LEAD(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" \"\n            + \"ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query3 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\")\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected3 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query4 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"count(*) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"count(*) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\"\";\n    String expected4 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"COUNT(*) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query5 = \"SELECT lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as lag1, \"\n            + \"lag(\\\"employee_id\\\",1,'NA') \"\n            + \"over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as lag2, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"hire_date\\\" order by \\\"employee_id\\\") as count1, \"\n            + \"max(sum(\\\"employee_id\\\")) over (partition by \\\"birth_date\\\" order by \\\"employee_id\\\") as count2\\n\"\n            + \"FROM \\\"employee\\\" group by \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n    String expected5 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$0\\\", \"\n            + \"LAG(\\\"employee_id\\\", 1, 'NA') OVER \"\n            + \"(PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\") AS \\\"$1\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$2\\\", \"\n            + \"MAX(SUM(\\\"employee_id\\\")) OVER (PARTITION BY \\\"birth_date\\\" ORDER BY \\\"employee_id\\\" \"\n            + \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$3\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"employee_id\\\", \\\"hire_date\\\", \\\"birth_date\\\"\";\n\n    String query6 = \"SELECT lag(\\\"employee_id\\\",1,'NA') over \"\n            + \"(partition by \\\"hire_date\\\" order by \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"employee\\\"\\n\"\n            + \"group by \\\"hire_date\\\", \\\"employee_id\\\"\";\n    String expected6 = \"SELECT LAG(\\\"employee_id\\\", 1, 'NA') \"\n            + \"OVER (PARTITION BY \\\"hire_date\\\" ORDER BY \\\"employee_id\\\"), \\\"hire_date\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\\n\"\n            + \"GROUP BY \\\"hire_date\\\", \\\"employee_id\\\"\";\n    String query7 = \"SELECT \"\n        + \"count(distinct \\\"employee_id\\\") over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected7 = \"SELECT \"\n        + \"COUNT(DISTINCT \\\"employee_id\\\") \"\n        + \"OVER (ORDER BY \\\"hire_date\\\" RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \\\"$0\\\"\"\n        + \"\\nFROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    String query8 = \"SELECT \"\n        + \"sum(distinct \\\"position_id\\\") over (order by \\\"hire_date\\\") FROM \\\"employee\\\"\";\n    String expected8 =\n        \"SELECT CASE WHEN (COUNT(DISTINCT \\\"position_id\\\") OVER (ORDER BY \\\"hire_date\\\" \"\n            + \"RANGE\"\n            + \" BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)) > 0 THEN COALESCE(SUM(DISTINCT \"\n            + \"\\\"position_id\\\") OVER (ORDER BY \\\"hire_date\\\" RANGE BETWEEN UNBOUNDED \"\n            + \"PRECEDING AND CURRENT ROW), 0) ELSE NULL END\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"employee\\\"\";\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    RuleSet rules = RuleSets.ofList(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW);\n\n    sql(query0).optimize(rules, hepPlanner).ok(expected0);\n    sql(query1).optimize(rules, hepPlanner).ok(expected1);\n    sql(query2).optimize(rules, hepPlanner).ok(expected2);\n    sql(query3).optimize(rules, hepPlanner).ok(expected3);\n    sql(query4).optimize(rules, hepPlanner).ok(expected4);\n    sql(query5).optimize(rules, hepPlanner).ok(expected5);\n    sql(query6).optimize(rules, hepPlanner).ok(expected6);\n    sql(query7).optimize(rules, hepPlanner).ok(expected7);\n    sql(query8).optimize(rules, hepPlanner).ok(expected8);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3164,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":4522,"groupId":"101535","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonPredicate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4496,"status":"N"}],"commitId":"dff28d1ce49871a451c7ff3e740259441da7c72a","commitMessage":"@@@Cosmetic\n\nIn RelToSqlConverterTest. \nmerge methods that test the same query in several dialects;\nmerge '.withXxx().ok(expectedXxx)' into one line. \nand sort such lines alphabetically;\nnormalize 'expectedPostgreSQL' and 'expectedPostgreSql' to\n'expectedPostgresql'.  and so forth.\n","date":"2021-08-14 15:52:54","modifiedFileCount":"2","status":"M","submitter":"Julian Hyde"}]
