[{"authorTime":"2016-11-03 13:30:04","codes":[{"authorDate":"2016-11-03 13:30:04","commitOrder":1,"curCode":"  @Override protected Map<String, Table> getTableMap() {\n\n    if (tableMap == null) {\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      \r\n      for (String regionName : regionNames) {\n        Region region = GeodeUtils.createRegionProxy(clientCache, regionName);\n\n        Iterator regionIterator = region.keySetOnServer().iterator();\n\n        Object firstRegionEntry = region.get(regionIterator.next());\n        \r\n        Table table = new GeodeTable(this, regionName, createRelDataType(firstRegionEntry),\n            clientCache);\n\n        builder.put(regionName, table);\n      }\n\n      tableMap = builder.build();\n    }\n\n    return tableMap;\n  }\n","date":"2018-02-17 02:18:02","endLine":85,"groupId":"16173","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getTableMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2e/3874142379b83cff08237c8fd78a47bfc3b133.src","preCode":"  @Override protected Map<String, Table> getTableMap() {\n\n    if (tableMap == null) {\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      \r\n      for (String regionName : regionNames) {\n        Region region = GeodeUtils.createRegionProxy(clientCache, regionName);\n\n        Iterator regionIterator = region.keySetOnServer().iterator();\n\n        Object firstRegionEntry = region.get(regionIterator.next());\n        \r\n        Table table = new GeodeTable(this, regionName, createRelDataType(firstRegionEntry),\n            clientCache);\n\n        builder.put(regionName, table);\n      }\n\n      tableMap = builder.build();\n    }\n\n    return tableMap;\n  }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeSchema.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2016-11-03 13:30:04","commitOrder":1,"curCode":"  @Override protected Map<String, Table> getTableMap() {\n\n    if (tableMap == null) {\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String regionName : regionNames) {\n\n        Region region = GeodeUtils.createRegionProxy(clientCache, regionName);\n\n        \r\n        Object regionEntry = region.get(region.keySetOnServer().iterator().next());\n\n        Table table = new GeodeSimpleScannableTable(regionName, createRelDataType(regionEntry),\n            clientCache);\n\n        builder.put(regionName, table);\n      }\n\n      tableMap = builder.build();\n    }\n    return tableMap;\n  }\n","date":"2018-02-17 02:18:02","endLine":81,"groupId":"16173","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getTableMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bb/98e6061b637e24b17e7332b6b3a8f8662bbdd8.src","preCode":"  @Override protected Map<String, Table> getTableMap() {\n\n    if (tableMap == null) {\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String regionName : regionNames) {\n\n        Region region = GeodeUtils.createRegionProxy(clientCache, regionName);\n\n        \r\n        Object regionEntry = region.get(region.keySetOnServer().iterator().next());\n\n        Table table = new GeodeSimpleScannableTable(regionName, createRelDataType(regionEntry),\n            clientCache);\n\n        builder.put(regionName, table);\n      }\n\n      tableMap = builder.build();\n    }\n    return tableMap;\n  }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/simple/GeodeSimpleSchema.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"}],"commitId":"707f4de9cafc474d0daf807b1e4c339f6eb42d7e","commitMessage":"@@@[CALCITE-2059] Apache Geode Adapter (Christian Tzolov)\n\n- Downgrade Geode from 1.4.0 to 1.3.0 - Geode server allows connections\n  only from clients with same or lower version\n- Add links to presentations and tutorials\n\nClose apache/calcite#581\n","date":"2018-02-17 02:18:02","modifiedFileCount":"0","status":"B","submitter":"Christian Tzolov"},{"authorTime":"2018-09-13 23:37:20","codes":[{"authorDate":"2018-09-13 23:37:20","commitOrder":2,"curCode":"  @Override protected Map<String, Table> getTableMap() {\n\n    if (tableMap == null) {\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String regionName : regionNames) {\n        Region region = GeodeUtils.createRegion(cache, regionName);\n        Table table = new GeodeTable(region);\n        builder.put(regionName, table);\n      }\n\n      tableMap = builder.build();\n    }\n\n    return tableMap;\n  }\n","date":"2018-09-26 02:04:36","endLine":72,"groupId":"10548","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getTableMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0a/099a28bc5763f64e29c41e406d46d62006506f.src","preCode":"  @Override protected Map<String, Table> getTableMap() {\n\n    if (tableMap == null) {\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      \r\n      for (String regionName : regionNames) {\n        Region region = GeodeUtils.createRegionProxy(clientCache, regionName);\n\n        Iterator regionIterator = region.keySetOnServer().iterator();\n\n        Object firstRegionEntry = region.get(regionIterator.next());\n        \r\n        Table table = new GeodeTable(this, regionName, createRelDataType(firstRegionEntry),\n            clientCache);\n\n        builder.put(regionName, table);\n      }\n\n      tableMap = builder.build();\n    }\n\n    return tableMap;\n  }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeSchema.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2018-09-13 23:37:20","commitOrder":2,"curCode":"  @Override protected Map<String, Table> getTableMap() {\n\n    if (tableMap == null) {\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String regionName : regionNames) {\n\n        Region region = GeodeUtils.createRegion(clientCache, regionName);\n\n        Table table = new GeodeSimpleScannableTable(regionName, autodetectRelTypeFromRegion(region),\n            clientCache);\n\n        builder.put(regionName, table);\n      }\n\n      tableMap = builder.build();\n    }\n    return tableMap;\n  }\n","date":"2018-09-26 02:04:36","endLine":78,"groupId":"10548","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getTableMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/14/f2b8c08133d4174e89b0225edd25aeb758f753.src","preCode":"  @Override protected Map<String, Table> getTableMap() {\n\n    if (tableMap == null) {\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String regionName : regionNames) {\n\n        Region region = GeodeUtils.createRegionProxy(clientCache, regionName);\n\n        \r\n        Object regionEntry = region.get(region.keySetOnServer().iterator().next());\n\n        Table table = new GeodeSimpleScannableTable(regionName, createRelDataType(regionEntry),\n            clientCache);\n\n        builder.put(regionName, table);\n      }\n\n      tableMap = builder.build();\n    }\n    return tableMap;\n  }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/simple/GeodeSimpleSchema.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"ed424ed81d0de66fcfd6a5352f00fb99cc514882","commitMessage":"@@@[CALCITE-2588] Run Geode Adapter tests with an Embedded Instance\n\nPart of the effort to increase test coverage for adapters. Enables execution of all Geode adapter tests during CI build (instead of manual run).\n\nCreate special JUnit Rule (`GeodeEmbeddedPolicy`) which starts / stops embedded Geode instance once for all the tests.\n\nModify GeodeSchema and GeodeTable to accept exising geode instance in the constructor instance of connection parameters.\n\nIgnore two tests which currently fail for both embedded and external instance(s). These bugs will be addressed separately\n\nLocal test dataset is taken from `calcite-test-dataset` project (the one which is used for integration testing). Re-use `zips-mini.json` from mongo/elastic adapters.\n\nCloses apache/calcite#857\n","date":"2018-09-26 02:04:36","modifiedFileCount":"13","status":"M","submitter":"Andrei Sereda"}]
