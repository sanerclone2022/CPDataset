[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2020-06-12 15:56:35","commitOrder":2,"curCode":"  @Override public Object current() {\n    if (fieldTypes.size() == 1) {\n      \r\n      return currentRowField(fieldTypes.get(0));\n    } else {\n      \r\n      Object[] row = new Object[fieldTypes.size()];\n      for (int i = 0; i < fieldTypes.size(); i++) {\n        row[i] = currentRowField(fieldTypes.get(i));\n      }\n      return row;\n    }\n  }\n","date":"2020-10-12 07:23:10","endLine":74,"groupId":"10566","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"current","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1f/4e59e5fc8d1d196880b065625bf9187d0e7610.src","preCode":"  @Override public Object current() {\n    if (fieldTypes.size() == 1) {\n      \r\n      return currentRowField(fieldTypes.get(0));\n    } else {\n      \r\n      Object[] row = new Object[fieldTypes.size()];\n      for (int i = 0; i < fieldTypes.size(); i++) {\n        row[i] = currentRowField(fieldTypes.get(i));\n      }\n      return row;\n    }\n  }\n","realPath":"innodb/src/main/java/org/apache/calcite/adapter/innodb/InnodbEnumerator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  public String format(Map<Object, Object> argMap) {\n    Object[] args = new Object[parameterNames.size()];\n    for (int i = 0; i < parameterNames.size(); i++) {\n      args[i] = getArg(argMap, i);\n    }\n    return format(args);\n  }\n","date":"2014-11-14 09:39:34","endLine":223,"groupId":"10566","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"format","params":"(Map<Object@Object>argMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d7/e1737a83297b6f1928b5dbe0aadc531fc24de7.src","preCode":"  public String format(Map<Object, Object> argMap) {\n    Object[] args = new Object[parameterNames.size()];\n    for (int i = 0; i < parameterNames.size(); i++) {\n      args[i] = getArg(argMap, i);\n    }\n    return format(args);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/util/Template.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"NB"}],"commitId":"ebefe52f577da5c744ea863480ed3c98b7ef2e99","commitMessage":"@@@[CALCITE-4034] InnoDB adapter (neoremind)\n\nInnoDB is a storage engine for MySQL.  but it can also be used\nas a standlone file format. This adapter adds a SQL interface\nto InnoDB that uses Calcite rather than MySQL.\n\nThis adapter handles Sarg by expanding to an OR of ranges. A\nbetter implementation of Sarg is probably possible. The\ncurrent implementation can only handle Sargs that result in\nan AND.  e.g. x >= 10 AND x <= 20). But we ought to handle\nSargs that can result in an OR of ANDs. E.g. the SQL\n  x BETWEEN 10 AND 20 OR c > 30\nbecomes a single RexCall\n   SEARCH(x.  Sarg([10.  20].  (30.  +inf)))\nand results in an OR of ANDs.  '(x >= 10 AND x <= 20) OR (x > 30)'.\n\nTweaks (Julian Hyde):\n* Add Holder.accept\n* Make IndexCondition immutable\n* Move computation out of InnodbFilter's constructor\n\nClose apache/calcite#1996\n","date":"2020-10-12 07:23:10","modifiedFileCount":"4","status":"M","submitter":"xu"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-06-12 15:56:35","commitOrder":3,"curCode":"  @Override public Object current() {\n    if (fieldTypes.size() == 1) {\n      \r\n      return currentRowField(fieldTypes.get(0));\n    } else {\n      \r\n      Object[] row = new Object[fieldTypes.size()];\n      for (int i = 0; i < fieldTypes.size(); i++) {\n        row[i] = currentRowField(fieldTypes.get(i));\n      }\n      return row;\n    }\n  }\n","date":"2020-10-12 07:23:10","endLine":74,"groupId":"10495","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"current","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1f/4e59e5fc8d1d196880b065625bf9187d0e7610.src","preCode":"  @Override public Object current() {\n    if (fieldTypes.size() == 1) {\n      \r\n      return currentRowField(fieldTypes.get(0));\n    } else {\n      \r\n      Object[] row = new Object[fieldTypes.size()];\n      for (int i = 0; i < fieldTypes.size(); i++) {\n        row[i] = currentRowField(fieldTypes.get(i));\n      }\n      return row;\n    }\n  }\n","realPath":"innodb/src/main/java/org/apache/calcite/adapter/innodb/InnodbEnumerator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  public String format(Map<Object, Object> argMap) {\n    @Nullable Object[] args = new Object[parameterNames.size()];\n    for (int i = 0; i < parameterNames.size(); i++) {\n      args[i] = getArg(argMap, i);\n    }\n    return format(args);\n  }\n","date":"2020-11-30 06:45:33","endLine":228,"groupId":"10495","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"format","params":"(Map<Object@Object>argMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/11/047261af4f8237bccb4e7b7602ccc70853757a.src","preCode":"  public String format(Map<Object, Object> argMap) {\n    Object[] args = new Object[parameterNames.size()];\n    for (int i = 0; i < parameterNames.size(); i++) {\n      args[i] = getArg(argMap, i);\n    }\n    return format(args);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/util/Template.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
