[{"authorTime":"2018-01-30 21:13:12","codes":[{"authorDate":"2018-01-24 09:12:41","commitOrder":2,"curCode":"  protected final void unparseFetchUsingAnsi(SqlWriter writer, SqlNode offset,\n      SqlNode fetch) {\n    Preconditions.checkArgument(fetch != null || offset != null);\n    if (offset != null) {\n      writer.newlineAndIndent();\n      final SqlWriter.Frame offsetFrame =\n          writer.startList(SqlWriter.FrameTypeEnum.OFFSET);\n      writer.keyword(\"OFFSET\");\n      offset.unparse(writer, -1, -1);\n      writer.keyword(\"ROWS\");\n      writer.endList(offsetFrame);\n    }\n    if (fetch != null) {\n      writer.newlineAndIndent();\n      final SqlWriter.Frame fetchFrame =\n          writer.startList(SqlWriter.FrameTypeEnum.FETCH);\n      writer.keyword(\"FETCH\");\n      writer.keyword(\"NEXT\");\n      fetch.unparse(writer, -1, -1);\n      writer.keyword(\"ROWS\");\n      writer.keyword(\"ONLY\");\n      writer.endList(fetchFrame);\n    }\n  }\n","date":"2018-01-26 08:40:51","endLine":628,"groupId":"15964","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseFetchUsingAnsi","params":"(SqlWriterwriter@SqlNodeoffset@SqlNodefetch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/42/cf7b1c6d7172468d47f30e851a85bfc0f37469.src","preCode":"  protected final void unparseFetchUsingAnsi(SqlWriter writer, SqlNode offset,\n      SqlNode fetch) {\n    Preconditions.checkArgument(fetch != null || offset != null);\n    if (offset != null) {\n      writer.newlineAndIndent();\n      final SqlWriter.Frame offsetFrame =\n          writer.startList(SqlWriter.FrameTypeEnum.OFFSET);\n      writer.keyword(\"OFFSET\");\n      offset.unparse(writer, -1, -1);\n      writer.keyword(\"ROWS\");\n      writer.endList(offsetFrame);\n    }\n    if (fetch != null) {\n      writer.newlineAndIndent();\n      final SqlWriter.Frame fetchFrame =\n          writer.startList(SqlWriter.FrameTypeEnum.FETCH);\n      writer.keyword(\"FETCH\");\n      writer.keyword(\"NEXT\");\n      fetch.unparse(writer, -1, -1);\n      writer.keyword(\"ROWS\");\n      writer.keyword(\"ONLY\");\n      writer.endList(fetchFrame);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"NB"},{"authorDate":"2018-01-30 21:13:12","commitOrder":2,"curCode":"  @Override public void unparseOffsetFetch(SqlWriter writer, SqlNode offset,\n      SqlNode fetch) {\n    Preconditions.checkArgument(fetch != null);\n\n    writer.newlineAndIndent();\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.FETCH);\n    writer.keyword(\"LIMIT\");\n\n    if (offset != null) {\n      offset.unparse(writer, -1, -1);\n      writer.sep(\",\", true);\n    }\n\n    fetch.unparse(writer, -1, -1);\n    writer.endList(frame);\n  }\n","date":"2020-04-17 16:35:48","endLine":164,"groupId":"6256","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseOffsetFetch","params":"(SqlWriterwriter@SqlNodeoffset@SqlNodefetch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a0/5799dc150c9c7b77770f2711e589b886f32719.src","preCode":"  @Override public void unparseOffsetFetch(SqlWriter writer, SqlNode offset,\n      SqlNode fetch) {\n    Preconditions.checkArgument(fetch != null);\n\n    writer.newlineAndIndent();\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.FETCH);\n    writer.keyword(\"LIMIT\");\n\n    if (offset != null) {\n      offset.unparse(writer, -1, -1);\n      writer.sep(\",\", true);\n    }\n\n    fetch.unparse(writer, -1, -1);\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/ClickHouseSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"B"}],"commitId":"39e58566c1ac02824d99ae9260d3315539efd57e","commitMessage":"@@@[CALCITE-2157] ClickHouse dialect implementation (Chris Baynes)\n\nclose apache/calcite#618\n","date":"2020-04-17 16:35:48","modifiedFileCount":"3","status":"M","submitter":"Chris Baynes"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  protected final void unparseFetchUsingAnsi(SqlWriter writer, @Nullable SqlNode offset,\n      @Nullable SqlNode fetch) {\n    Preconditions.checkArgument(fetch != null || offset != null);\n    if (offset != null) {\n      writer.newlineAndIndent();\n      final SqlWriter.Frame offsetFrame =\n          writer.startList(SqlWriter.FrameTypeEnum.OFFSET);\n      writer.keyword(\"OFFSET\");\n      offset.unparse(writer, -1, -1);\n      writer.keyword(\"ROWS\");\n      writer.endList(offsetFrame);\n    }\n    if (fetch != null) {\n      writer.newlineAndIndent();\n      final SqlWriter.Frame fetchFrame =\n          writer.startList(SqlWriter.FrameTypeEnum.FETCH);\n      writer.keyword(\"FETCH\");\n      writer.keyword(\"NEXT\");\n      fetch.unparse(writer, -1, -1);\n      writer.keyword(\"ROWS\");\n      writer.keyword(\"ONLY\");\n      writer.endList(fetchFrame);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":926,"groupId":"15964","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseFetchUsingAnsi","params":"(SqlWriterwriter@@NullableSqlNodeoffset@@NullableSqlNodefetch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/36/d2566e8b6dff1c432e75bf0f0dfc499451e4b8.src","preCode":"  protected final void unparseFetchUsingAnsi(SqlWriter writer, SqlNode offset,\n      SqlNode fetch) {\n    Preconditions.checkArgument(fetch != null || offset != null);\n    if (offset != null) {\n      writer.newlineAndIndent();\n      final SqlWriter.Frame offsetFrame =\n          writer.startList(SqlWriter.FrameTypeEnum.OFFSET);\n      writer.keyword(\"OFFSET\");\n      offset.unparse(writer, -1, -1);\n      writer.keyword(\"ROWS\");\n      writer.endList(offsetFrame);\n    }\n    if (fetch != null) {\n      writer.newlineAndIndent();\n      final SqlWriter.Frame fetchFrame =\n          writer.startList(SqlWriter.FrameTypeEnum.FETCH);\n      writer.keyword(\"FETCH\");\n      writer.keyword(\"NEXT\");\n      fetch.unparse(writer, -1, -1);\n      writer.keyword(\"ROWS\");\n      writer.keyword(\"ONLY\");\n      writer.endList(fetchFrame);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":903,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public void unparseOffsetFetch(SqlWriter writer, @Nullable SqlNode offset,\n      @Nullable SqlNode fetch) {\n    requireNonNull(fetch, \"fetch\");\n\n    writer.newlineAndIndent();\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.FETCH);\n    writer.keyword(\"LIMIT\");\n\n    if (offset != null) {\n      offset.unparse(writer, -1, -1);\n      writer.sep(\",\", true);\n    }\n\n    fetch.unparse(writer, -1, -1);\n    writer.endList(frame);\n  }\n","date":"2020-11-30 06:45:33","endLine":149,"groupId":"6256","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseOffsetFetch","params":"(SqlWriterwriter@@NullableSqlNodeoffset@@NullableSqlNodefetch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/17/0f819ec8656f0719201492784a8ee07dcd5a07.src","preCode":"  @Override public void unparseOffsetFetch(SqlWriter writer, SqlNode offset,\n      SqlNode fetch) {\n    Preconditions.checkArgument(fetch != null);\n\n    writer.newlineAndIndent();\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.FETCH);\n    writer.keyword(\"LIMIT\");\n\n    if (offset != null) {\n      offset.unparse(writer, -1, -1);\n      writer.sep(\",\", true);\n    }\n\n    fetch.unparse(writer, -1, -1);\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/ClickHouseSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-12-02 05:40:39","commitOrder":4,"curCode":"  protected static void unparseFetchUsingAnsi(SqlWriter writer, @Nullable SqlNode offset,\n      @Nullable SqlNode fetch) {\n    Preconditions.checkArgument(fetch != null || offset != null);\n    if (offset != null) {\n      writer.newlineAndIndent();\n      final SqlWriter.Frame offsetFrame =\n          writer.startList(SqlWriter.FrameTypeEnum.OFFSET);\n      writer.keyword(\"OFFSET\");\n      offset.unparse(writer, -1, -1);\n      writer.keyword(\"ROWS\");\n      writer.endList(offsetFrame);\n    }\n    if (fetch != null) {\n      writer.newlineAndIndent();\n      final SqlWriter.Frame fetchFrame =\n          writer.startList(SqlWriter.FrameTypeEnum.FETCH);\n      writer.keyword(\"FETCH\");\n      writer.keyword(\"NEXT\");\n      fetch.unparse(writer, -1, -1);\n      writer.keyword(\"ROWS\");\n      writer.keyword(\"ONLY\");\n      writer.endList(fetchFrame);\n    }\n  }\n","date":"2020-12-08 15:07:23","endLine":926,"groupId":"101762","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseFetchUsingAnsi","params":"(SqlWriterwriter@@NullableSqlNodeoffset@@NullableSqlNodefetch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ff/5989fa64458ffaeb58fc2fe89490f61a0cd45e.src","preCode":"  protected final void unparseFetchUsingAnsi(SqlWriter writer, @Nullable SqlNode offset,\n      @Nullable SqlNode fetch) {\n    Preconditions.checkArgument(fetch != null || offset != null);\n    if (offset != null) {\n      writer.newlineAndIndent();\n      final SqlWriter.Frame offsetFrame =\n          writer.startList(SqlWriter.FrameTypeEnum.OFFSET);\n      writer.keyword(\"OFFSET\");\n      offset.unparse(writer, -1, -1);\n      writer.keyword(\"ROWS\");\n      writer.endList(offsetFrame);\n    }\n    if (fetch != null) {\n      writer.newlineAndIndent();\n      final SqlWriter.Frame fetchFrame =\n          writer.startList(SqlWriter.FrameTypeEnum.FETCH);\n      writer.keyword(\"FETCH\");\n      writer.keyword(\"NEXT\");\n      fetch.unparse(writer, -1, -1);\n      writer.keyword(\"ROWS\");\n      writer.keyword(\"ONLY\");\n      writer.endList(fetchFrame);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":903,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  @Override public void unparseOffsetFetch(SqlWriter writer, @Nullable SqlNode offset,\n      @Nullable SqlNode fetch) {\n    requireNonNull(fetch, \"fetch\");\n\n    writer.newlineAndIndent();\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.FETCH);\n    writer.keyword(\"LIMIT\");\n\n    if (offset != null) {\n      offset.unparse(writer, -1, -1);\n      writer.sep(\",\", true);\n    }\n\n    fetch.unparse(writer, -1, -1);\n    writer.endList(frame);\n  }\n","date":"2020-11-30 06:45:33","endLine":149,"groupId":"101762","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseOffsetFetch","params":"(SqlWriterwriter@@NullableSqlNodeoffset@@NullableSqlNodefetch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/17/0f819ec8656f0719201492784a8ee07dcd5a07.src","preCode":"  @Override public void unparseOffsetFetch(SqlWriter writer, @Nullable SqlNode offset,\n      @Nullable SqlNode fetch) {\n    requireNonNull(fetch, \"fetch\");\n\n    writer.newlineAndIndent();\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.FETCH);\n    writer.keyword(\"LIMIT\");\n\n    if (offset != null) {\n      offset.unparse(writer, -1, -1);\n      writer.sep(\",\", true);\n    }\n\n    fetch.unparse(writer, -1, -1);\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/ClickHouseSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"}],"commitId":"404f968f6079360621896e6ee20ec12488a40bc2","commitMessage":"@@@[CALCITE-4422] Add MethodCanBeStatic check via ErrorProne\n\nprivate and final methods can be made static.  so it is clear they do not access instance fields\n","date":"2020-12-08 15:07:23","modifiedFileCount":"169","status":"M","submitter":"Vladimir Sitnikov"}]
