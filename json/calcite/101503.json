[{"authorTime":"2018-01-11 04:54:26","codes":[{"authorDate":"2018-01-11 04:54:26","commitOrder":1,"curCode":"  @Test public void testFloorEqRewrite() {\n    final Calendar c = Util.calendar();\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    \r\n    checkDateRange(f, f.eq(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"false\"));\n    checkDateRange(f, f.eq(f.timestampLiteral(TimestampString.fromCalendarFields(c)), f.floorYear),\n        is(\"false\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-01-01 00:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-01 00:00:00), <($9, 2010-03-01 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-12-01 00:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 00:00:00), <($9, 2010-02-05 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-12-31 00:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 4, 0, 0);\n    checkDateRange(f, f.eq(f.floorHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 04:00:00), <($9, 2010-02-04 05:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 23, 0, 0);\n    checkDateRange(f, f.eq(f.floorHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-12-31 23:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 32, 0);\n    checkDateRange(f,\n        f.eq(f.floorMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 02:32:00), <($9, 2010-02-04 02:33:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 59, 0);\n    checkDateRange(f,\n        f.eq(f.floorMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 02:59:00), <($9, 2010-02-04 03:00:00))\"));\n  }\n","date":"2018-01-12 11:53:24","endLine":459,"groupId":"6730","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFloorEqRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f0/439aba565b3e6275cd74db3ba741367f9c3012.src","preCode":"  @Test public void testFloorEqRewrite() {\n    final Calendar c = Util.calendar();\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    \r\n    checkDateRange(f, f.eq(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"false\"));\n    checkDateRange(f, f.eq(f.timestampLiteral(TimestampString.fromCalendarFields(c)), f.floorYear),\n        is(\"false\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-01-01 00:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-01 00:00:00), <($9, 2010-03-01 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-12-01 00:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 00:00:00), <($9, 2010-02-05 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-12-31 00:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 4, 0, 0);\n    checkDateRange(f, f.eq(f.floorHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 04:00:00), <($9, 2010-02-04 05:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 23, 0, 0);\n    checkDateRange(f, f.eq(f.floorHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-12-31 23:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 32, 0);\n    checkDateRange(f,\n        f.eq(f.floorMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 02:32:00), <($9, 2010-02-04 02:33:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 59, 0);\n    checkDateRange(f,\n        f.eq(f.floorMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 02:59:00), <($9, 2010-02-04 03:00:00))\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":410,"status":"B"},{"authorDate":"2018-01-11 04:54:26","commitOrder":1,"curCode":"  @Test public void testCeilEqRewrite() {\n    final Calendar c = Util.calendar();\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    \r\n    checkDateRange(f, f.eq(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"false\"));\n    checkDateRange(f, f.eq(f.timestampLiteral(TimestampString.fromCalendarFields(c)), f.ceilYear),\n        is(\"false\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2009-01-01 00:00:00), <=($9, 2010-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-01-01 00:00:00), <=($9, 2010-02-01 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-11-01 00:00:00), <=($9, 2010-12-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-03 00:00:00), <=($9, 2010-02-04 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-12-30 00:00:00), <=($9, 2010-12-31 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 4, 0, 0);\n    checkDateRange(f, f.eq(f.ceilHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-04 03:00:00), <=($9, 2010-02-04 04:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 23, 0, 0);\n    checkDateRange(f, f.eq(f.ceilHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-12-31 22:00:00), <=($9, 2010-12-31 23:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 32, 0);\n    checkDateRange(f,\n        f.eq(f.ceilMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-04 02:31:00), <=($9, 2010-02-04 02:32:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 59, 0);\n    checkDateRange(f,\n        f.eq(f.ceilMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-04 02:58:00), <=($9, 2010-02-04 02:59:00))\"));\n  }\n","date":"2018-01-12 11:53:24","endLine":601,"groupId":"6730","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCeilEqRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f0/439aba565b3e6275cd74db3ba741367f9c3012.src","preCode":"  @Test public void testCeilEqRewrite() {\n    final Calendar c = Util.calendar();\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    \r\n    checkDateRange(f, f.eq(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"false\"));\n    checkDateRange(f, f.eq(f.timestampLiteral(TimestampString.fromCalendarFields(c)), f.ceilYear),\n        is(\"false\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2009-01-01 00:00:00), <=($9, 2010-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-01-01 00:00:00), <=($9, 2010-02-01 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-11-01 00:00:00), <=($9, 2010-12-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-03 00:00:00), <=($9, 2010-02-04 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-12-30 00:00:00), <=($9, 2010-12-31 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 4, 0, 0);\n    checkDateRange(f, f.eq(f.ceilHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-04 03:00:00), <=($9, 2010-02-04 04:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 23, 0, 0);\n    checkDateRange(f, f.eq(f.ceilHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-12-31 22:00:00), <=($9, 2010-12-31 23:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 32, 0);\n    checkDateRange(f,\n        f.eq(f.ceilMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-04 02:31:00), <=($9, 2010-02-04 02:32:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 59, 0);\n    checkDateRange(f,\n        f.eq(f.ceilMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-04 02:58:00), <=($9, 2010-02-04 02:59:00))\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"B"}],"commitId":"fa19580ecfe404b75fcb6c9c174cfe9da73d2db8","commitMessage":"@@@[CALCITE-2090] Convert FLOOR and CEIL into time ranges (Nishant Bangarwa)\n\nAdd test for multiple operands.\n\nAllow RexLiteral.getValueAs(Calendar) on TIMESTAMP_WITH_LOCAL_TIME_ZONE\nliterals.\n\nClose apache/calcite#603\n","date":"2018-01-12 11:53:24","modifiedFileCount":"4","status":"B","submitter":"Nishant"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testFloorEqRewrite() {\n    final Calendar c = Util.calendar();\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    \r\n    checkDateRange(f, f.eq(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"false\"));\n    checkDateRange(f, f.eq(f.timestampLiteral(TimestampString.fromCalendarFields(c)), f.floorYear),\n        is(\"false\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-01-01 00:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-01 00:00:00), <($9, 2010-03-01 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-12-01 00:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 00:00:00), <($9, 2010-02-05 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-12-31 00:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 4, 0, 0);\n    checkDateRange(f, f.eq(f.floorHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 04:00:00), <($9, 2010-02-04 05:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 23, 0, 0);\n    checkDateRange(f, f.eq(f.floorHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-12-31 23:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 32, 0);\n    checkDateRange(f,\n        f.eq(f.floorMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 02:32:00), <($9, 2010-02-04 02:33:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 59, 0);\n    checkDateRange(f,\n        f.eq(f.floorMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 02:59:00), <($9, 2010-02-04 03:00:00))\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":461,"groupId":"101503","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFloorEqRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/29288bd53b9dc06551209ba551f2b4be514394.src","preCode":"  @Test public void testFloorEqRewrite() {\n    final Calendar c = Util.calendar();\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    \r\n    checkDateRange(f, f.eq(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"false\"));\n    checkDateRange(f, f.eq(f.timestampLiteral(TimestampString.fromCalendarFields(c)), f.floorYear),\n        is(\"false\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-01-01 00:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-01 00:00:00), <($9, 2010-03-01 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-12-01 00:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 00:00:00), <($9, 2010-02-05 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 0, 0, 0);\n    checkDateRange(f, f.eq(f.floorDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-12-31 00:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 4, 0, 0);\n    checkDateRange(f, f.eq(f.floorHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 04:00:00), <($9, 2010-02-04 05:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 23, 0, 0);\n    checkDateRange(f, f.eq(f.floorHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-12-31 23:00:00), <($9, 2011-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 32, 0);\n    checkDateRange(f,\n        f.eq(f.floorMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 02:32:00), <($9, 2010-02-04 02:33:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 59, 0);\n    checkDateRange(f,\n        f.eq(f.floorMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>=($9, 2010-02-04 02:59:00), <($9, 2010-02-04 03:00:00))\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testCeilEqRewrite() {\n    final Calendar c = Util.calendar();\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    \r\n    checkDateRange(f, f.eq(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"false\"));\n    checkDateRange(f, f.eq(f.timestampLiteral(TimestampString.fromCalendarFields(c)), f.ceilYear),\n        is(\"false\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2009-01-01 00:00:00), <=($9, 2010-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-01-01 00:00:00), <=($9, 2010-02-01 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-11-01 00:00:00), <=($9, 2010-12-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-03 00:00:00), <=($9, 2010-02-04 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-12-30 00:00:00), <=($9, 2010-12-31 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 4, 0, 0);\n    checkDateRange(f, f.eq(f.ceilHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-04 03:00:00), <=($9, 2010-02-04 04:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 23, 0, 0);\n    checkDateRange(f, f.eq(f.ceilHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-12-31 22:00:00), <=($9, 2010-12-31 23:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 32, 0);\n    checkDateRange(f,\n        f.eq(f.ceilMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-04 02:31:00), <=($9, 2010-02-04 02:32:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 59, 0);\n    checkDateRange(f,\n        f.eq(f.ceilMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-04 02:58:00), <=($9, 2010-02-04 02:59:00))\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":603,"groupId":"101503","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCeilEqRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/29288bd53b9dc06551209ba551f2b4be514394.src","preCode":"  @Test public void testCeilEqRewrite() {\n    final Calendar c = Util.calendar();\n    c.clear();\n    c.set(2010, Calendar.FEBRUARY, 10, 11, 12, 05);\n    final Fixture2 f = new Fixture2();\n    \r\n    checkDateRange(f, f.eq(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"false\"));\n    checkDateRange(f, f.eq(f.timestampLiteral(TimestampString.fromCalendarFields(c)), f.ceilYear),\n        is(\"false\"));\n\n    c.clear();\n    c.set(2010, Calendar.JANUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilYear, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2009-01-01 00:00:00), <=($9, 2010-01-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-01-01 00:00:00), <=($9, 2010-02-01 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 1, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilMonth, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-11-01 00:00:00), <=($9, 2010-12-01 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-03 00:00:00), <=($9, 2010-02-04 00:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 0, 0, 0);\n    checkDateRange(f, f.eq(f.ceilDay, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-12-30 00:00:00), <=($9, 2010-12-31 00:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 4, 0, 0);\n    checkDateRange(f, f.eq(f.ceilHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-04 03:00:00), <=($9, 2010-02-04 04:00:00))\"));\n\n    c.set(2010, Calendar.DECEMBER, 31, 23, 0, 0);\n    checkDateRange(f, f.eq(f.ceilHour, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-12-31 22:00:00), <=($9, 2010-12-31 23:00:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 32, 0);\n    checkDateRange(f,\n        f.eq(f.ceilMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-04 02:31:00), <=($9, 2010-02-04 02:32:00))\"));\n\n    c.set(2010, Calendar.FEBRUARY, 4, 2, 59, 0);\n    checkDateRange(f,\n        f.eq(f.ceilMinute, f.timestampLiteral(TimestampString.fromCalendarFields(c))),\n        is(\"AND(>($9, 2010-02-04 02:58:00), <=($9, 2010-02-04 02:59:00))\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":554,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
