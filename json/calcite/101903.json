[{"authorTime":"2016-03-08 14:02:17","codes":[{"authorDate":"2016-03-08 14:02:17","commitOrder":1,"curCode":"    private void updateUnaryOpUsage(RexCall call) {\n      final List<RexNode> operands = call.getOperands();\n      RexNode first = removeCast(operands.get(0));\n\n      if (first.isA(SqlKind.INPUT_REF)) {\n        updateUsage(call.getOperator(), (RexInputRef) first, null);\n      }\n    }\n","date":"2016-03-09 02:04:09","endLine":432,"groupId":"8416","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"updateUnaryOpUsage","params":"(RexCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/27/dbd3437449aaa5b1925e791be10417b22de0ad.src","preCode":"    private void updateUnaryOpUsage(RexCall call) {\n      final List<RexNode> operands = call.getOperands();\n      RexNode first = removeCast(operands.get(0));\n\n      if (first.isA(SqlKind.INPUT_REF)) {\n        updateUsage(call.getOperator(), (RexInputRef) first, null);\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"B"},{"authorDate":"2016-03-08 14:02:17","commitOrder":1,"curCode":"    private void updateBinaryOpUsage(RexCall call) {\n      final List<RexNode> operands = call.getOperands();\n      RexNode first = removeCast(operands.get(0));\n      RexNode second = removeCast(operands.get(1));\n\n      if (first.isA(SqlKind.INPUT_REF)\n          && second.isA(SqlKind.LITERAL)) {\n        updateUsage(call.getOperator(), (RexInputRef) first, second);\n      }\n\n      if (first.isA(SqlKind.LITERAL)\n          && second.isA(SqlKind.INPUT_REF)) {\n        updateUsage(reverse(call.getOperator()), (RexInputRef) second, first);\n      }\n    }\n","date":"2016-03-09 02:04:09","endLine":448,"groupId":"14991","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"updateBinaryOpUsage","params":"(RexCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/27/dbd3437449aaa5b1925e791be10417b22de0ad.src","preCode":"    private void updateBinaryOpUsage(RexCall call) {\n      final List<RexNode> operands = call.getOperands();\n      RexNode first = removeCast(operands.get(0));\n      RexNode second = removeCast(operands.get(1));\n\n      if (first.isA(SqlKind.INPUT_REF)\n          && second.isA(SqlKind.LITERAL)) {\n        updateUsage(call.getOperator(), (RexInputRef) first, second);\n      }\n\n      if (first.isA(SqlKind.LITERAL)\n          && second.isA(SqlKind.INPUT_REF)) {\n        updateUsage(reverse(call.getOperator()), (RexInputRef) second, first);\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"B"}],"commitId":"82c3b293b172364058cc29dada5794659db4e389","commitMessage":"@@@[CALCITE-1130] Add support for operators IS_NULL and IS_NOT_NULL in RexImplicationChecker (Amogh Margoor)\n\nClose apache/calcite#207\n","date":"2016-03-09 02:04:09","modifiedFileCount":"2","status":"B","submitter":"Amogh Margoor"},{"authorTime":"2019-02-18 00:55:53","codes":[{"authorDate":"2019-02-18 00:55:53","commitOrder":2,"curCode":"    private void updateUnaryOpUsage(RexCall call) {\n      final List<RexNode> operands = call.getOperands();\n      RexNode first = RexUtil.removeCast(operands.get(0));\n\n      if (first.isA(SqlKind.INPUT_REF)) {\n        updateUsage(call.getOperator(), (RexInputRef) first, null);\n      }\n    }\n","date":"2019-08-10 02:39:13","endLine":471,"groupId":"6725","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"updateUnaryOpUsage","params":"(RexCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/07c8596f8c50005e5e59a614872c872f6388d5.src","preCode":"    private void updateUnaryOpUsage(RexCall call) {\n      final List<RexNode> operands = call.getOperands();\n      RexNode first = removeCast(operands.get(0));\n\n      if (first.isA(SqlKind.INPUT_REF)) {\n        updateUsage(call.getOperator(), (RexInputRef) first, null);\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":464,"status":"M"},{"authorDate":"2019-02-18 00:55:53","commitOrder":2,"curCode":"    private void updateBinaryOpUsage(RexCall call) {\n      final List<RexNode> operands = call.getOperands();\n      RexNode first = RexUtil.removeCast(operands.get(0));\n      RexNode second = RexUtil.removeCast(operands.get(1));\n\n      if (first.isA(SqlKind.INPUT_REF)\n          && second.isA(SqlKind.LITERAL)) {\n        updateUsage(call.getOperator(), (RexInputRef) first, second);\n      }\n\n      if (first.isA(SqlKind.LITERAL)\n          && second.isA(SqlKind.INPUT_REF)) {\n        updateUsage(reverse(call.getOperator()), (RexInputRef) second, first);\n      }\n    }\n","date":"2019-08-10 02:39:13","endLine":487,"groupId":"14991","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"updateBinaryOpUsage","params":"(RexCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/07c8596f8c50005e5e59a614872c872f6388d5.src","preCode":"    private void updateBinaryOpUsage(RexCall call) {\n      final List<RexNode> operands = call.getOperands();\n      RexNode first = removeCast(operands.get(0));\n      RexNode second = removeCast(operands.get(1));\n\n      if (first.isA(SqlKind.INPUT_REF)\n          && second.isA(SqlKind.LITERAL)) {\n        updateUsage(call.getOperator(), (RexInputRef) first, second);\n      }\n\n      if (first.isA(SqlKind.LITERAL)\n          && second.isA(SqlKind.INPUT_REF)) {\n        updateUsage(reverse(call.getOperator()), (RexInputRef) second, first);\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"M"}],"commitId":"e8baf4f4720e07cdce1aa2baabf20042b9353bbb","commitMessage":"@@@[CALCITE-2843] Support PostgreSQL cast operator '::' (Muhammad Gelbana)\n\nSqlCastOperator is in SqlLibraryOperators but not SqlStdOperatorTable;\nyou can enable it using 'fun=postgresql' in your connect string.\n\nMake SqlCastOperator a sub-class of SqlBinaryOperator to match its\nsyntax.  delegating to SqlCastFunction for behavior such as\ntype-checking. Change its precedence/associativity to match that of\n\"::\" in PostgreSQL. (Julian Hyde)\n\nClose apache/calcite#1066\n","date":"2019-08-10 02:39:13","modifiedFileCount":"9","status":"M","submitter":"Muhammad Gelbana"},{"authorTime":"2021-05-25 13:11:38","codes":[{"authorDate":"2019-02-18 00:55:53","commitOrder":3,"curCode":"    private void updateUnaryOpUsage(RexCall call) {\n      final List<RexNode> operands = call.getOperands();\n      RexNode first = RexUtil.removeCast(operands.get(0));\n\n      if (first.isA(SqlKind.INPUT_REF)) {\n        updateUsage(call.getOperator(), (RexInputRef) first, null);\n      }\n    }\n","date":"2019-08-10 02:39:13","endLine":471,"groupId":"101903","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"updateUnaryOpUsage","params":"(RexCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/07c8596f8c50005e5e59a614872c872f6388d5.src","preCode":"    private void updateUnaryOpUsage(RexCall call) {\n      final List<RexNode> operands = call.getOperands();\n      RexNode first = RexUtil.removeCast(operands.get(0));\n\n      if (first.isA(SqlKind.INPUT_REF)) {\n        updateUsage(call.getOperator(), (RexInputRef) first, null);\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":464,"status":"N"},{"authorDate":"2021-05-25 13:11:38","commitOrder":3,"curCode":"    private void updateBinaryOpUsage(RexCall call) {\n      final List<RexNode> operands = call.getOperands();\n      RexNode first = RexUtil.removeCast(operands.get(0));\n      RexNode second = RexUtil.removeCast(operands.get(1));\n\n      if (first.isA(SqlKind.INPUT_REF)\n          && second.isA(SqlKind.LITERAL)) {\n        updateUsage(call.getOperator(), (RexInputRef) first, second);\n      }\n\n      if (first.isA(SqlKind.LITERAL)\n          && second.isA(SqlKind.INPUT_REF)) {\n        updateUsage(requireNonNull(call.getOperator().reverse()),\n            (RexInputRef) second, first);\n      }\n    }\n","date":"2021-05-29 02:20:21","endLine":501,"groupId":"101903","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"updateBinaryOpUsage","params":"(RexCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3d/ff20b5a1bded7f9156e5b4ba81da84fac88383.src","preCode":"    private void updateBinaryOpUsage(RexCall call) {\n      final List<RexNode> operands = call.getOperands();\n      RexNode first = RexUtil.removeCast(operands.get(0));\n      RexNode second = RexUtil.removeCast(operands.get(1));\n\n      if (first.isA(SqlKind.INPUT_REF)\n          && second.isA(SqlKind.LITERAL)) {\n        updateUsage(call.getOperator(), (RexInputRef) first, second);\n      }\n\n      if (first.isA(SqlKind.LITERAL)\n          && second.isA(SqlKind.INPUT_REF)) {\n        updateUsage(reverse(call.getOperator()), (RexInputRef) second, first);\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":486,"status":"M"}],"commitId":"6a9832c14e7c7c02a0176920b87d15dab474300a","commitMessage":"@@@Refactor: Add method SqlOperator.reverse()\n\nDeprecate SqlStdOperatorTable.reverse(SqlOperator);\nremove RexImplicationChecker.reverse(SqlOperator)\nand SqlImplementor.reverseOperatorDirection(SqlOperator).\n","date":"2021-05-29 02:20:21","modifiedFileCount":"8","status":"M","submitter":"Julian Hyde"}]
