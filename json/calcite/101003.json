[{"authorTime":"2015-04-01 13:25:15","codes":[{"authorDate":"2015-04-01 13:25:15","commitOrder":1,"curCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename  \\n\"\n            + \"from scott.emp e inner join scott.emp m on  \\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], EMPNO0=[$2], ENAME0=[$3])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($4, $0), >($5, $1))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t0\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"EMPNO\\\" = \\\"t0\\\".\\\"MGR\\\" AND \\\"t\\\".\\\"SAL\\\" < \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","date":"2015-04-01 13:51:12","endLine":167,"groupId":"2771","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMixedJoinPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/64/0a9332e797a9ada1a3a6d450910fa549e88f21.src","preCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename  \\n\"\n            + \"from scott.emp e inner join scott.emp m on  \\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], EMPNO0=[$2], ENAME0=[$3])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($4, $0), >($5, $1))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t0\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"EMPNO\\\" = \\\"t0\\\".\\\"MGR\\\" AND \\\"t\\\".\\\"SAL\\\" < \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"B"},{"authorDate":"2015-04-01 13:25:15","commitOrder":1,"curCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"    JdbcJoin(condition=[=($4, $0)], joinType=[inner])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"DEPTNO\\\", \\\"t\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","date":"2015-04-01 13:51:12","endLine":234,"groupId":"2771","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCrossJoinWithJoinKeyPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/64/0a9332e797a9ada1a3a6d450910fa549e88f21.src","preCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"    JdbcJoin(condition=[=($4, $0)], joinType=[inner])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"DEPTNO\\\", \\\"t\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"B"}],"commitId":"a13137dc9a79795e3748d19dd34923ec674f9298","commitMessage":"@@@[CALCITE-631] Push theta joins down to JDBC adapter (Ng Jiunn Jye)\n","date":"2015-04-01 13:51:12","modifiedFileCount":"4","status":"B","submitter":"Julian Hyde"},{"authorTime":"2015-04-01 13:25:15","codes":[{"authorDate":"2015-08-20 18:03:49","commitOrder":2,"curCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename  \\n\"\n            + \"from scott.emp e inner join scott.emp m on  \\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$0], ENAME=[$1], EMPNO0=[$0], ENAME0=[$1])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($2, $4), >($3, $5))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t\\\".\\\"EMPNO\\\", \\\"t\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"MGR\\\" = \\\"t0\\\".\\\"EMPNO\\\" AND \\\"t\\\".\\\"SAL\\\" > \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","date":"2015-08-21 19:02:29","endLine":177,"groupId":"2771","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMixedJoinPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ea/69cae6602472bdddbecaae8d1736094d9d74cb.src","preCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename  \\n\"\n            + \"from scott.emp e inner join scott.emp m on  \\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], EMPNO0=[$2], ENAME0=[$3])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($4, $0), >($5, $1))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t0\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"EMPNO\\\" = \\\"t0\\\".\\\"MGR\\\" AND \\\"t\\\".\\\"SAL\\\" < \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2015-04-01 13:25:15","commitOrder":2,"curCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"    JdbcJoin(condition=[=($4, $0)], joinType=[inner])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"DEPTNO\\\", \\\"t\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","date":"2015-04-01 13:51:12","endLine":234,"groupId":"2771","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCrossJoinWithJoinKeyPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/64/0a9332e797a9ada1a3a6d450910fa549e88f21.src","preCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"    JdbcJoin(condition=[=($4, $0)], joinType=[inner])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"DEPTNO\\\", \\\"t\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"}],"commitId":"9f1f73d392fbff4f0ac2b29cc9462cf388be645d","commitMessage":"@@@[CALCITE-850] Remove push down expressions from FilterJoinRule and create a new rule for it\n\nClose apache/incubator-calcite#122\n","date":"2015-08-21 19:02:29","modifiedFileCount":"6","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2015-04-01 13:25:15","codes":[{"authorDate":"2015-07-26 05:44:20","commitOrder":3,"curCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename  \\n\"\n            + \"from scott.emp e inner join scott.emp m on  \\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], EMPNO0=[$2], ENAME0=[$3])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($4, $0), >($5, $1))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t0\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\nFROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"EMPNO\\\" = \\\"t0\\\".\\\"MGR\\\" AND \\\"t\\\".\\\"SAL\\\" < \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","date":"2016-01-10 16:51:25","endLine":189,"groupId":"2771","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMixedJoinPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/36/1500384cb46c7be5374a8ccbcd7cdeb900c6ad.src","preCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename  \\n\"\n            + \"from scott.emp e inner join scott.emp m on  \\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$0], ENAME=[$1], EMPNO0=[$0], ENAME0=[$1])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($2, $4), >($3, $5))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t\\\".\\\"EMPNO\\\", \\\"t\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"MGR\\\" = \\\"t0\\\".\\\"EMPNO\\\" AND \\\"t\\\".\\\"SAL\\\" > \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"},{"authorDate":"2015-04-01 13:25:15","commitOrder":3,"curCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"    JdbcJoin(condition=[=($4, $0)], joinType=[inner])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"DEPTNO\\\", \\\"t\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","date":"2015-04-01 13:51:12","endLine":234,"groupId":"2771","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCrossJoinWithJoinKeyPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/64/0a9332e797a9ada1a3a6d450910fa549e88f21.src","preCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"    JdbcJoin(condition=[=($4, $0)], joinType=[inner])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"DEPTNO\\\", \\\"t\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"}],"commitId":"505a9064b96a6c8399735fc2fa4d0ac9d5f3ed87","commitMessage":"@@@[CALCITE-816] Represent sub-query as a RexNode\n\nReduce 3-value logic to 1- or 2-value logic.\n\nOptimize certain IN and EXISTS to an inner join.\n\nRepresent correlation variables using CorrelationId wherever possible.\n\nIn Join.  replace field \"ImmutableSet<String> variablesStopped\" with\n\"ImmutableSet<CorrelationId> variablesSet\". RelNode.getVariablesSet\nis now preferred to RelNode.getVariablesStopped.\n\nMake Join.joinType final.\n\nVerify in builder that there are no correlation variables where there\nshouldn't be.\n\nRefactor decorrelator.\n\nLogged [CALCITE-1045] for remaining work.\n","date":"2016-01-10 16:51:25","modifiedFileCount":"76","status":"M","submitter":"Julian Hyde"},{"authorTime":"2015-04-01 13:25:15","codes":[{"authorDate":"2016-01-07 16:06:19","commitOrder":4,"curCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename  \\n\"\n            + \"from scott.emp e inner join scott.emp m on  \\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$0], ENAME=[$1], EMPNO0=[$0], ENAME0=[$1])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($2, $4), >($3, $5))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t\\\".\\\"EMPNO\\\", \\\"t\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"MGR\\\" = \\\"t0\\\".\\\"EMPNO\\\" AND \\\"t\\\".\\\"SAL\\\" > \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","date":"2016-01-10 16:51:25","endLine":185,"groupId":"2771","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMixedJoinPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/51/a4a704a2a820edcff44ee6a16f69747d47b53b.src","preCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename  \\n\"\n            + \"from scott.emp e inner join scott.emp m on  \\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], EMPNO0=[$2], ENAME0=[$3])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($4, $0), >($5, $1))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t0\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\nFROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"EMPNO\\\" = \\\"t0\\\".\\\"MGR\\\" AND \\\"t\\\".\\\"SAL\\\" < \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2015-04-01 13:25:15","commitOrder":4,"curCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"    JdbcJoin(condition=[=($4, $0)], joinType=[inner])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"DEPTNO\\\", \\\"t\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","date":"2015-04-01 13:51:12","endLine":234,"groupId":"2771","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCrossJoinWithJoinKeyPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/64/0a9332e797a9ada1a3a6d450910fa549e88f21.src","preCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"    JdbcJoin(condition=[=($4, $0)], joinType=[inner])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"DEPTNO\\\", \\\"t\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"}],"commitId":"4b519b9882c861bf366e2c9d9928cd6deb5cc8b9","commitMessage":"@@@[CALCITE-842] Decorrelator gets field offsets confused if fields have been trimmed\n","date":"2016-01-10 16:51:25","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-03-09 13:31:20","codes":[{"authorDate":"2016-03-09 13:31:20","commitOrder":5,"curCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename  \\n\"\n            + \"from scott.emp e inner join scott.emp m on  \\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], EMPNO0=[$2], ENAME0=[$3])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($4, $0), >($5, $1))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t0\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" \"\n            + \"ON \\\"t\\\".\\\"EMPNO\\\" = \\\"t0\\\".\\\"MGR\\\" AND \\\"t\\\".\\\"SAL\\\" < \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","date":"2016-07-08 14:44:51","endLine":188,"groupId":"2771","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMixedJoinPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/97/da6c3708672f32bfe4975b11737ef2c027fb77.src","preCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename  \\n\"\n            + \"from scott.emp e inner join scott.emp m on  \\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$0], ENAME=[$1], EMPNO0=[$0], ENAME0=[$1])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($2, $4), >($3, $5))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t\\\".\\\"EMPNO\\\", \\\"t\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"MGR\\\" = \\\"t0\\\".\\\"EMPNO\\\" AND \\\"t\\\".\\\"SAL\\\" > \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2016-03-09 13:31:20","commitOrder":5,"curCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$3], DNAME=[$4])\\n\"\n            + \"    JdbcJoin(condition=[=($2, $3)], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t\\\".\\\"EMPNO\\\", \\\"t\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"DEPTNO\\\", \\\"t0\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\nFROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","date":"2016-07-08 14:44:51","endLine":261,"groupId":"2771","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCrossJoinWithJoinKeyPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/97/da6c3708672f32bfe4975b11737ef2c027fb77.src","preCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"    JdbcJoin(condition=[=($4, $0)], joinType=[inner])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"DEPTNO\\\", \\\"t\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"a3bc0d8ea3c1f320b96a4ab9641becee90a388bc","commitMessage":"@@@[CALCITE-1148] Fix RelTrait conversion (e.g. distribution.  collation) (Minji Kim)\n\nIn the current calcite.  trait conversion is not handled properly.  e.g.\ncollation/distribution traits are not converted (shown by the tests).\nThis patch fixes this issue.\n\nFor each RelCollationTrait.  introduce a new API.  canConvert() which\nshould return true if the conversion from a trait to the other is\npossible.\n\nFor each Convention.  introduce two new APIs.  canConvertConvention()\nreturns true if the convernsion is possible.  and useAbstractConverters()\nreturns true if the trait conversion should be handle via\nAbstractConverters.  By default.  both functions return false.\n\nIn RelSet.  when adding a new RelSubset.  if the convention returns false\nfor useAbstractConverters().  we do not add AbstractConverters.  Even if\nconvention.useAbstractConverters() return true.  we only add\nAbstractConverters if the AbstractConverters can convert (i.e. if\nRelCollationTrait.canConvert() returns true) and the conversion is\nneeded (i.e. if RelTrait.satisfies() returns false).\n\nAdded test cases.\n\nClose apache/calcite#210\n","date":"2016-07-08 14:44:51","modifiedFileCount":"14","status":"M","submitter":"Minji Kim"},{"authorTime":"2019-11-25 20:28:55","codes":[{"authorDate":"2016-03-09 13:31:20","commitOrder":6,"curCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename  \\n\"\n            + \"from scott.emp e inner join scott.emp m on  \\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], EMPNO0=[$2], ENAME0=[$3])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($4, $0), >($5, $1))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t0\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" \"\n            + \"ON \\\"t\\\".\\\"EMPNO\\\" = \\\"t0\\\".\\\"MGR\\\" AND \\\"t\\\".\\\"SAL\\\" < \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","date":"2016-07-08 14:44:51","endLine":188,"groupId":"2771","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testMixedJoinPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/97/da6c3708672f32bfe4975b11737ef2c027fb77.src","preCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename  \\n\"\n            + \"from scott.emp e inner join scott.emp m on  \\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], EMPNO0=[$2], ENAME0=[$3])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($4, $0), >($5, $1))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t0\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" \"\n            + \"ON \\\"t\\\".\\\"EMPNO\\\" = \\\"t0\\\".\\\"MGR\\\" AND \\\"t\\\".\\\"SAL\\\" < \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"N"},{"authorDate":"2019-11-25 20:28:55","commitOrder":6,"curCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"    JdbcJoin(condition=[=($4, $0)], joinType=[inner])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"DEPTNO\\\", \\\"t\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\nFROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","date":"2019-12-24 18:59:50","endLine":318,"groupId":"2771","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCrossJoinWithJoinKeyPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ff/a37b3040488aa02eb5c16e52eca4404f5fe1ba.src","preCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$3], DNAME=[$4])\\n\"\n            + \"    JdbcJoin(condition=[=($2, $3)], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t\\\".\\\"EMPNO\\\", \\\"t\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"DEPTNO\\\", \\\"t0\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\nFROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"}],"commitId":"1f3b7105fcc5cca45e5cdbb73d59fb51c410d08f","commitMessage":"@@@[CALCITE-3525] RexSimplify: eliminate redundant rex calls in OR\n\nclose #1610\n","date":"2019-12-24 18:59:50","modifiedFileCount":"11","status":"M","submitter":"Igor Guzenko"},{"authorTime":"2020-01-24 07:50:43","codes":[{"authorDate":"2016-03-09 13:31:20","commitOrder":7,"curCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename  \\n\"\n            + \"from scott.emp e inner join scott.emp m on  \\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], EMPNO0=[$2], ENAME0=[$3])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($4, $0), >($5, $1))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t0\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" \"\n            + \"ON \\\"t\\\".\\\"EMPNO\\\" = \\\"t0\\\".\\\"MGR\\\" AND \\\"t\\\".\\\"SAL\\\" < \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","date":"2016-07-08 14:44:51","endLine":188,"groupId":"2771","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testMixedJoinPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/97/da6c3708672f32bfe4975b11737ef2c027fb77.src","preCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename  \\n\"\n            + \"from scott.emp e inner join scott.emp m on  \\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], EMPNO0=[$2], ENAME0=[$3])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($4, $0), >($5, $1))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t0\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" \"\n            + \"ON \\\"t\\\".\\\"EMPNO\\\" = \\\"t0\\\".\\\"MGR\\\" AND \\\"t\\\".\\\"SAL\\\" < \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"N"},{"authorDate":"2020-01-24 07:50:43","commitOrder":7,"curCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$3], DNAME=[$4])\\n\"\n            + \"    JdbcJoin(condition=[=($2, $3)], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t\\\".\\\"EMPNO\\\", \\\"t\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"DEPTNO\\\", \\\"t0\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\nFROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","date":"2020-01-30 03:38:37","endLine":334,"groupId":"2771","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testCrossJoinWithJoinKeyPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d1/5b2aefec33111b4f67e7f61b98bd1233110915.src","preCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"    JdbcJoin(condition=[=($4, $0)], joinType=[inner])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"DEPTNO\\\", \\\"t\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\nFROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"}],"commitId":"0b97f45752f111b56aa499b037077d27db82ec47","commitMessage":"@@@[CALCITE-3756] RelSubset should not match operand(RelNode.class)\n\nEven RelSubset is a subclass of RelNode.  but they are quite different. RelNode\nalready fires these rules.  it is not necessary to fire for RelSubset. More\nimportantly.  it never worked due to CALCITE-3755.  In addition.  it will waste\ntime to try to iterate class operands of RelSubset and try to match pattern\noperand(RelNode).  given that it never matches when ascending.\n\nAlso fixed https://issues.apache.org/jira/browse/CALCITE-3755\n","date":"2020-01-30 03:38:37","modifiedFileCount":"3","status":"M","submitter":"Haisheng Yuan"},{"authorTime":"2020-01-24 07:50:43","codes":[{"authorDate":"2020-02-29 08:01:52","commitOrder":8,"curCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename\\n\"\n            + \"from scott.emp e inner join scott.emp m on\\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$0], ENAME=[$1], EMPNO0=[$0], ENAME0=[$1])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($2, $4), >($3, $5))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t\\\".\\\"EMPNO\\\", \\\"t\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" \"\n            + \"ON \\\"t\\\".\\\"MGR\\\" = \\\"t0\\\".\\\"EMPNO\\\" AND \\\"t\\\".\\\"SAL\\\" > \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","date":"2020-03-10 07:14:45","endLine":286,"groupId":"2771","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testMixedJoinPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4f/421fdd84ebc83a27e4c2f7d945033aea497e2c.src","preCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename\\n\"\n            + \"from scott.emp e inner join scott.emp m on\\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$2], ENAME=[$3], EMPNO0=[$2], ENAME0=[$3])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($4, $0), >($5, $1))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t0\\\".\\\"EMPNO\\\", \\\"t0\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t0\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" \"\n            + \"ON \\\"t\\\".\\\"EMPNO\\\" = \\\"t0\\\".\\\"MGR\\\" AND \\\"t\\\".\\\"SAL\\\" < \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"},{"authorDate":"2020-01-24 07:50:43","commitOrder":8,"curCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$3], DNAME=[$4])\\n\"\n            + \"    JdbcJoin(condition=[=($2, $3)], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t\\\".\\\"EMPNO\\\", \\\"t\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"DEPTNO\\\", \\\"t0\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\nFROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","date":"2020-01-30 03:38:37","endLine":334,"groupId":"2771","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testCrossJoinWithJoinKeyPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d1/5b2aefec33111b4f67e7f61b98bd1233110915.src","preCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname \\n\"\n            + \"from scott.emp e,scott.dept d \\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$3], DNAME=[$4])\\n\"\n            + \"    JdbcJoin(condition=[=($2, $3)], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t\\\".\\\"EMPNO\\\", \\\"t\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"DEPTNO\\\", \\\"t0\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\nFROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"N"}],"commitId":"80e6b023d4b92b2b25908c52e10f50792787cef8","commitMessage":"@@@[CALCITE-3753] Remove rule queue importance\n\nSince we are going to execute all the rules anyway.  sorting the rule matches\nwill do more harm than good.\n\nAlso removed ambitious and impatient mode. User could override checkCancel and\nthrow VolcanoTimeoutException when appropriate (i.e. exceed 60 seconds.  exceed\n1000 ticks etc.) so that the VolcanoPlanner will stop exhaustive searching and\nreturn the best plan so far.\n\nClose #1840\n","date":"2020-03-10 07:14:45","modifiedFileCount":"20","status":"M","submitter":"Haisheng Yuan"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":9,"curCode":"  @Test void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename\\n\"\n            + \"from scott.emp e inner join scott.emp m on\\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$0], ENAME=[$1], EMPNO0=[$0], ENAME0=[$1])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($2, $4), >($3, $5))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t\\\".\\\"EMPNO\\\", \\\"t\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" \"\n            + \"ON \\\"t\\\".\\\"MGR\\\" = \\\"t0\\\".\\\"EMPNO\\\" AND \\\"t\\\".\\\"SAL\\\" > \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","date":"2020-04-06 04:57:49","endLine":286,"groupId":"101003","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testMixedJoinPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/93/d9225e24795985dc38bb15e55325e153eec03d.src","preCode":"  @Test public void testMixedJoinPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select e.empno, e.ename, e.empno, e.ename\\n\"\n            + \"from scott.emp e inner join scott.emp m on\\n\"\n            + \"e.mgr = m.empno and e.sal > m.sal\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$0], ENAME=[$1], EMPNO0=[$0], ENAME0=[$1])\\n\"\n            + \"    JdbcJoin(condition=[AND(=($2, $4), >($3, $5))], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], SAL=[$5])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t\\\".\\\"EMPNO\\\", \\\"t\\\".\\\"ENAME\\\", \"\n            + \"\\\"t\\\".\\\"EMPNO\\\" AS \\\"EMPNO0\\\", \\\"t\\\".\\\"ENAME\\\" AS \\\"ENAME0\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"MGR\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"EMPNO\\\", \\\"SAL\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t0\\\" \"\n            + \"ON \\\"t\\\".\\\"MGR\\\" = \\\"t0\\\".\\\"EMPNO\\\" AND \\\"t\\\".\\\"SAL\\\" > \\\"t0\\\".\\\"SAL\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":9,"curCode":"  @Test void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname\\n\"\n            + \"from scott.emp e,scott.dept d\\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$3], DNAME=[$4])\\n\"\n            + \"    JdbcJoin(condition=[=($2, $3)], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t\\\".\\\"EMPNO\\\", \\\"t\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"DEPTNO\\\", \\\"t0\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\nFROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","date":"2020-04-06 04:57:49","endLine":360,"groupId":"101003","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testCrossJoinWithJoinKeyPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/93/d9225e24795985dc38bb15e55325e153eec03d.src","preCode":"  @Test public void testCrossJoinWithJoinKeyPlan() {\n    CalciteAssert.model(JdbcTest.SCOTT_MODEL)\n        .query(\"select empno, ename, d.deptno, dname\\n\"\n            + \"from scott.emp e,scott.dept d\\n\"\n            + \"where e.deptno = d.deptno\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$3], DNAME=[$4])\\n\"\n            + \"    JdbcJoin(condition=[=($2, $3)], joinType=[inner])\\n\"\n            + \"      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, EMP]])\\n\"\n            + \"      JdbcProject(DEPTNO=[$0], DNAME=[$1])\\n\"\n            + \"        JdbcTableScan(table=[[SCOTT, DEPT]])\")\n        .runs()\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.HSQLDB)\n        .planHasSql(\"SELECT \\\"t\\\".\\\"EMPNO\\\", \\\"t\\\".\\\"ENAME\\\", \"\n            + \"\\\"t0\\\".\\\"DEPTNO\\\", \\\"t0\\\".\\\"DNAME\\\"\\n\"\n            + \"FROM (SELECT \\\"EMPNO\\\", \\\"ENAME\\\", \\\"DEPTNO\\\"\\nFROM \\\"SCOTT\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n            + \"INNER JOIN (SELECT \\\"DEPTNO\\\", \\\"DNAME\\\"\\n\"\n            + \"FROM \\\"SCOTT\\\".\\\"DEPT\\\") AS \\\"t0\\\" ON \\\"t\\\".\\\"DEPTNO\\\" = \\\"t0\\\".\\\"DEPTNO\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":341,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
