[{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":2,"curCode":"  @Test public void testCastFails() {\n    expr(\"cast(x as time with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as time(0) with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as timestamp with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as timestamp(0) with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as varchar(10) ^with^ local time zone)\")\n        .fails(\"(?s).*Encountered \\\"with\\\" at line 1, column 23.\\n.*\");\n    expr(\"cast(x as varchar(10) ^without^ time zone)\")\n        .fails(\"(?s).*Encountered \\\"without\\\" at line 1, column 23.\\n.*\");\n  }\n","date":"2019-09-24 02:59:18","endLine":1554,"groupId":"5559","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testCastFails() {\n    expr(\"cast(x as time with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as time(0) with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as timestamp with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as timestamp(0) with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as varchar(10) ^with^ local time zone)\")\n        .fails(\"(?s).*Encountered \\\"with\\\" at line 1, column 23.\\n.*\");\n    expr(\"cast(x as varchar(10) ^without^ time zone)\")\n        .fails(\"(?s).*Encountered \\\"without\\\" at line 1, column 23.\\n.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1541,"status":"B"},{"authorDate":"2019-09-07 07:51:19","commitOrder":2,"curCode":"  public void subTestIntervalSecondNegative() {\n    \r\n    wholeExpr(\"INTERVAL ':' SECOND\")\n        .fails(\"Illegal interval literal format ':' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '.' SECOND\")\n        .fails(\"Illegal interval literal format '\\\\.' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1-2' SECOND\")\n        .fails(\"Illegal interval literal format '1-2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.x' SECOND\")\n        .fails(\"Illegal interval literal format '1\\\\.x' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL 'x.1' SECOND\")\n        .fails(\"Illegal interval literal format 'x\\\\.1' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1 2' SECOND\")\n        .fails(\"Illegal interval literal format '1 2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1:2' SECOND\")\n        .fails(\"Illegal interval literal format '1:2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1-2' SECOND(2)\")\n        .fails(\"Illegal interval literal format '1-2' for INTERVAL SECOND\\\\(2\\\\)\");\n    wholeExpr(\"INTERVAL 'bogus text' SECOND\")\n        .fails(\"Illegal interval literal format 'bogus text' for INTERVAL SECOND.*\");\n\n    \r\n    wholeExpr(\"INTERVAL '--1' SECOND\")\n        .fails(\"Illegal interval literal format '--1' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.-1' SECOND\")\n        .fails(\"Illegal interval literal format '1.-1' for INTERVAL SECOND.*\");\n\n    \r\n    \r\n    wholeExpr(\"INTERVAL '100' SECOND\")\n        .fails(\"Interval field value 100 exceeds precision of SECOND\\\\(2\\\\) field.*\");\n    wholeExpr(\"INTERVAL '100' SECOND(2)\")\n        .fails(\"Interval field value 100 exceeds precision of SECOND\\\\(2\\\\) field.*\");\n    wholeExpr(\"INTERVAL '1000' SECOND(3)\")\n        .fails(\"Interval field value 1,000 exceeds precision of SECOND\\\\(3\\\\) field.*\");\n    wholeExpr(\"INTERVAL '-1000' SECOND(3)\")\n        .fails(\"Interval field value -1,000 exceeds precision of SECOND\\\\(3\\\\) field.*\");\n    wholeExpr(\"INTERVAL '2147483648' SECOND(10)\")\n        .fails(\"Interval field value 2,147,483,648 exceeds precision of SECOND\\\\(10\\\\) field.*\");\n    wholeExpr(\"INTERVAL '-2147483648' SECOND(10)\")\n        .fails(\"Interval field value -2,147,483,648 exceeds precision of SECOND\\\\(10\\\\) field.*\");\n    wholeExpr(\"INTERVAL '1.0000001' SECOND\")\n        .fails(\"Illegal interval literal format '1\\\\.0000001' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.0000001' SECOND(2)\")\n        .fails(\"Illegal interval literal format '1\\\\.0000001' for INTERVAL SECOND\\\\(2\\\\).*\");\n    wholeExpr(\"INTERVAL '1.0001' SECOND(2, 3)\")\n        .fails(\"Illegal interval literal format '1\\\\.0001' for INTERVAL SECOND\\\\(2, 3\\\\).*\");\n    wholeExpr(\"INTERVAL '1.0000000001' SECOND(2, 9)\")\n        .fails(\"Illegal interval literal format '1\\\\.0000000001' for\"\n            + \" INTERVAL SECOND\\\\(2, 9\\\\).*\");\n\n    \r\n    expr(\"INTERVAL '1' SECOND(11^)^\")\n        .fails(\"Interval leading field precision '11' out of range for\"\n            + \" INTERVAL SECOND\\\\(11\\\\)\");\n    expr(\"INTERVAL '1.1' SECOND(1, 10^)^\")\n        .fails(\"Interval fractional second precision '10' out of range for\"\n            + \" INTERVAL SECOND\\\\(1, 10\\\\)\");\n\n    \r\n    \r\n    \r\n    expr(\"INTERVAL '0' SECOND(0^)^\")\n        .fails(\"Interval leading field precision '0' out of range for\"\n            + \" INTERVAL SECOND\\\\(0\\\\)\");\n    expr(\"INTERVAL '0' SECOND(1, 0^)^\")\n        .fails(\"Interval fractional second precision '0' out of range for\"\n            + \" INTERVAL SECOND\\\\(1, 0\\\\)\");\n  }\n","date":"2019-09-24 02:59:18","endLine":3460,"groupId":"5559","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subTestIntervalSecondNegative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  public void subTestIntervalSecondNegative() {\n    \r\n    wholeExpr(\"INTERVAL ':' SECOND\")\n        .fails(\"Illegal interval literal format ':' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '.' SECOND\")\n        .fails(\"Illegal interval literal format '\\\\.' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1-2' SECOND\")\n        .fails(\"Illegal interval literal format '1-2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.x' SECOND\")\n        .fails(\"Illegal interval literal format '1\\\\.x' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL 'x.1' SECOND\")\n        .fails(\"Illegal interval literal format 'x\\\\.1' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1 2' SECOND\")\n        .fails(\"Illegal interval literal format '1 2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1:2' SECOND\")\n        .fails(\"Illegal interval literal format '1:2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1-2' SECOND(2)\")\n        .fails(\"Illegal interval literal format '1-2' for INTERVAL SECOND\\\\(2\\\\)\");\n    wholeExpr(\"INTERVAL 'bogus text' SECOND\")\n        .fails(\"Illegal interval literal format 'bogus text' for INTERVAL SECOND.*\");\n\n    \r\n    wholeExpr(\"INTERVAL '--1' SECOND\")\n        .fails(\"Illegal interval literal format '--1' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.-1' SECOND\")\n        .fails(\"Illegal interval literal format '1.-1' for INTERVAL SECOND.*\");\n\n    \r\n    \r\n    wholeExpr(\"INTERVAL '100' SECOND\")\n        .fails(\"Interval field value 100 exceeds precision of SECOND\\\\(2\\\\) field.*\");\n    wholeExpr(\"INTERVAL '100' SECOND(2)\")\n        .fails(\"Interval field value 100 exceeds precision of SECOND\\\\(2\\\\) field.*\");\n    wholeExpr(\"INTERVAL '1000' SECOND(3)\")\n        .fails(\"Interval field value 1,000 exceeds precision of SECOND\\\\(3\\\\) field.*\");\n    wholeExpr(\"INTERVAL '-1000' SECOND(3)\")\n        .fails(\"Interval field value -1,000 exceeds precision of SECOND\\\\(3\\\\) field.*\");\n    wholeExpr(\"INTERVAL '2147483648' SECOND(10)\")\n        .fails(\"Interval field value 2,147,483,648 exceeds precision of SECOND\\\\(10\\\\) field.*\");\n    wholeExpr(\"INTERVAL '-2147483648' SECOND(10)\")\n        .fails(\"Interval field value -2,147,483,648 exceeds precision of SECOND\\\\(10\\\\) field.*\");\n    wholeExpr(\"INTERVAL '1.0000001' SECOND\")\n        .fails(\"Illegal interval literal format '1\\\\.0000001' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.0000001' SECOND(2)\")\n        .fails(\"Illegal interval literal format '1\\\\.0000001' for INTERVAL SECOND\\\\(2\\\\).*\");\n    wholeExpr(\"INTERVAL '1.0001' SECOND(2, 3)\")\n        .fails(\"Illegal interval literal format '1\\\\.0001' for INTERVAL SECOND\\\\(2, 3\\\\).*\");\n    wholeExpr(\"INTERVAL '1.0000000001' SECOND(2, 9)\")\n        .fails(\"Illegal interval literal format '1\\\\.0000000001' for\"\n            + \" INTERVAL SECOND\\\\(2, 9\\\\).*\");\n\n    \r\n    expr(\"INTERVAL '1' SECOND(11^)^\")\n        .fails(\"Interval leading field precision '11' out of range for\"\n            + \" INTERVAL SECOND\\\\(11\\\\)\");\n    expr(\"INTERVAL '1.1' SECOND(1, 10^)^\")\n        .fails(\"Interval fractional second precision '10' out of range for\"\n            + \" INTERVAL SECOND\\\\(1, 10\\\\)\");\n\n    \r\n    \r\n    \r\n    expr(\"INTERVAL '0' SECOND(0^)^\")\n        .fails(\"Interval leading field precision '0' out of range for\"\n            + \" INTERVAL SECOND\\\\(0\\\\)\");\n    expr(\"INTERVAL '0' SECOND(1, 0^)^\")\n        .fails(\"Interval fractional second precision '0' out of range for\"\n            + \" INTERVAL SECOND\\\\(1, 0\\\\)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3392,"status":"MB"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testCastFails() {\n    expr(\"cast(x as time with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as time(0) with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as timestamp with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as timestamp(0) with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as varchar(10) ^with^ local time zone)\")\n        .fails(\"(?s).*Encountered \\\"with\\\" at line 1, column 23.\\n.*\");\n    expr(\"cast(x as varchar(10) ^without^ time zone)\")\n        .fails(\"(?s).*Encountered \\\"without\\\" at line 1, column 23.\\n.*\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1556,"groupId":"5559","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testCastFails() {\n    expr(\"cast(x as time with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as time(0) with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as timestamp with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as timestamp(0) with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as varchar(10) ^with^ local time zone)\")\n        .fails(\"(?s).*Encountered \\\"with\\\" at line 1, column 23.\\n.*\");\n    expr(\"cast(x as varchar(10) ^without^ time zone)\")\n        .fails(\"(?s).*Encountered \\\"without\\\" at line 1, column 23.\\n.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1543,"status":"M"},{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  public void subTestIntervalSecondNegative() {\n    \r\n    wholeExpr(\"INTERVAL ':' SECOND\")\n        .fails(\"Illegal interval literal format ':' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '.' SECOND\")\n        .fails(\"Illegal interval literal format '\\\\.' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1-2' SECOND\")\n        .fails(\"Illegal interval literal format '1-2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.x' SECOND\")\n        .fails(\"Illegal interval literal format '1\\\\.x' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL 'x.1' SECOND\")\n        .fails(\"Illegal interval literal format 'x\\\\.1' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1 2' SECOND\")\n        .fails(\"Illegal interval literal format '1 2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1:2' SECOND\")\n        .fails(\"Illegal interval literal format '1:2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1-2' SECOND(2)\")\n        .fails(\"Illegal interval literal format '1-2' for INTERVAL SECOND\\\\(2\\\\)\");\n    wholeExpr(\"INTERVAL 'bogus text' SECOND\")\n        .fails(\"Illegal interval literal format 'bogus text' for INTERVAL SECOND.*\");\n\n    \r\n    wholeExpr(\"INTERVAL '--1' SECOND\")\n        .fails(\"Illegal interval literal format '--1' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.-1' SECOND\")\n        .fails(\"Illegal interval literal format '1.-1' for INTERVAL SECOND.*\");\n\n    \r\n    \r\n    wholeExpr(\"INTERVAL '100' SECOND\")\n        .fails(\"Interval field value 100 exceeds precision of SECOND\\\\(2\\\\) field.*\");\n    wholeExpr(\"INTERVAL '100' SECOND(2)\")\n        .fails(\"Interval field value 100 exceeds precision of SECOND\\\\(2\\\\) field.*\");\n    wholeExpr(\"INTERVAL '1000' SECOND(3)\")\n        .fails(\"Interval field value 1,000 exceeds precision of SECOND\\\\(3\\\\) field.*\");\n    wholeExpr(\"INTERVAL '-1000' SECOND(3)\")\n        .fails(\"Interval field value -1,000 exceeds precision of SECOND\\\\(3\\\\) field.*\");\n    wholeExpr(\"INTERVAL '2147483648' SECOND(10)\")\n        .fails(\"Interval field value 2,147,483,648 exceeds precision of SECOND\\\\(10\\\\) field.*\");\n    wholeExpr(\"INTERVAL '-2147483648' SECOND(10)\")\n        .fails(\"Interval field value -2,147,483,648 exceeds precision of SECOND\\\\(10\\\\) field.*\");\n    wholeExpr(\"INTERVAL '1.0000001' SECOND\")\n        .fails(\"Illegal interval literal format '1\\\\.0000001' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.0000001' SECOND(2)\")\n        .fails(\"Illegal interval literal format '1\\\\.0000001' for INTERVAL SECOND\\\\(2\\\\).*\");\n    wholeExpr(\"INTERVAL '1.0001' SECOND(2, 3)\")\n        .fails(\"Illegal interval literal format '1\\\\.0001' for INTERVAL SECOND\\\\(2, 3\\\\).*\");\n    wholeExpr(\"INTERVAL '1.0000000001' SECOND(2, 9)\")\n        .fails(\"Illegal interval literal format '1\\\\.0000000001' for\"\n            + \" INTERVAL SECOND\\\\(2, 9\\\\).*\");\n\n    \r\n    expr(\"INTERVAL '1' SECOND(11^)^\")\n        .fails(\"Interval leading field precision '11' out of range for\"\n            + \" INTERVAL SECOND\\\\(11\\\\)\");\n    expr(\"INTERVAL '1.1' SECOND(1, 10^)^\")\n        .fails(\"Interval fractional second precision '10' out of range for\"\n            + \" INTERVAL SECOND\\\\(1, 10\\\\)\");\n\n    \r\n    \r\n    \r\n    expr(\"INTERVAL '0' SECOND(0^)^\")\n        .fails(\"Interval leading field precision '0' out of range for\"\n            + \" INTERVAL SECOND\\\\(0\\\\)\");\n    expr(\"INTERVAL '0' SECOND(1, 0^)^\")\n        .fails(\"Interval fractional second precision '0' out of range for\"\n            + \" INTERVAL SECOND\\\\(1, 0\\\\)\");\n  }\n","date":"2019-09-24 02:59:18","endLine":3460,"groupId":"5559","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subTestIntervalSecondNegative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  public void subTestIntervalSecondNegative() {\n    \r\n    wholeExpr(\"INTERVAL ':' SECOND\")\n        .fails(\"Illegal interval literal format ':' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '.' SECOND\")\n        .fails(\"Illegal interval literal format '\\\\.' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1-2' SECOND\")\n        .fails(\"Illegal interval literal format '1-2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.x' SECOND\")\n        .fails(\"Illegal interval literal format '1\\\\.x' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL 'x.1' SECOND\")\n        .fails(\"Illegal interval literal format 'x\\\\.1' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1 2' SECOND\")\n        .fails(\"Illegal interval literal format '1 2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1:2' SECOND\")\n        .fails(\"Illegal interval literal format '1:2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1-2' SECOND(2)\")\n        .fails(\"Illegal interval literal format '1-2' for INTERVAL SECOND\\\\(2\\\\)\");\n    wholeExpr(\"INTERVAL 'bogus text' SECOND\")\n        .fails(\"Illegal interval literal format 'bogus text' for INTERVAL SECOND.*\");\n\n    \r\n    wholeExpr(\"INTERVAL '--1' SECOND\")\n        .fails(\"Illegal interval literal format '--1' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.-1' SECOND\")\n        .fails(\"Illegal interval literal format '1.-1' for INTERVAL SECOND.*\");\n\n    \r\n    \r\n    wholeExpr(\"INTERVAL '100' SECOND\")\n        .fails(\"Interval field value 100 exceeds precision of SECOND\\\\(2\\\\) field.*\");\n    wholeExpr(\"INTERVAL '100' SECOND(2)\")\n        .fails(\"Interval field value 100 exceeds precision of SECOND\\\\(2\\\\) field.*\");\n    wholeExpr(\"INTERVAL '1000' SECOND(3)\")\n        .fails(\"Interval field value 1,000 exceeds precision of SECOND\\\\(3\\\\) field.*\");\n    wholeExpr(\"INTERVAL '-1000' SECOND(3)\")\n        .fails(\"Interval field value -1,000 exceeds precision of SECOND\\\\(3\\\\) field.*\");\n    wholeExpr(\"INTERVAL '2147483648' SECOND(10)\")\n        .fails(\"Interval field value 2,147,483,648 exceeds precision of SECOND\\\\(10\\\\) field.*\");\n    wholeExpr(\"INTERVAL '-2147483648' SECOND(10)\")\n        .fails(\"Interval field value -2,147,483,648 exceeds precision of SECOND\\\\(10\\\\) field.*\");\n    wholeExpr(\"INTERVAL '1.0000001' SECOND\")\n        .fails(\"Illegal interval literal format '1\\\\.0000001' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.0000001' SECOND(2)\")\n        .fails(\"Illegal interval literal format '1\\\\.0000001' for INTERVAL SECOND\\\\(2\\\\).*\");\n    wholeExpr(\"INTERVAL '1.0001' SECOND(2, 3)\")\n        .fails(\"Illegal interval literal format '1\\\\.0001' for INTERVAL SECOND\\\\(2, 3\\\\).*\");\n    wholeExpr(\"INTERVAL '1.0000000001' SECOND(2, 9)\")\n        .fails(\"Illegal interval literal format '1\\\\.0000000001' for\"\n            + \" INTERVAL SECOND\\\\(2, 9\\\\).*\");\n\n    \r\n    expr(\"INTERVAL '1' SECOND(11^)^\")\n        .fails(\"Interval leading field precision '11' out of range for\"\n            + \" INTERVAL SECOND\\\\(11\\\\)\");\n    expr(\"INTERVAL '1.1' SECOND(1, 10^)^\")\n        .fails(\"Interval fractional second precision '10' out of range for\"\n            + \" INTERVAL SECOND\\\\(1, 10\\\\)\");\n\n    \r\n    \r\n    \r\n    expr(\"INTERVAL '0' SECOND(0^)^\")\n        .fails(\"Interval leading field precision '0' out of range for\"\n            + \" INTERVAL SECOND\\\\(0\\\\)\");\n    expr(\"INTERVAL '0' SECOND(1, 0^)^\")\n        .fails(\"Interval fractional second precision '0' out of range for\"\n            + \" INTERVAL SECOND\\\\(1, 0\\\\)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3392,"status":"N"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-21 04:33:06","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testCastFails() {\n    expr(\"cast(x as time with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as time(0) with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as timestamp with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as timestamp(0) with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as varchar(10) ^with^ local time zone)\")\n        .fails(\"(?s).*Encountered \\\"with\\\" at line 1, column 23.\\n.*\");\n    expr(\"cast(x as varchar(10) ^without^ time zone)\")\n        .fails(\"(?s).*Encountered \\\"without\\\" at line 1, column 23.\\n.*\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1556,"groupId":"10844","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test void testCastFails() {\n    expr(\"cast(x as time with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as time(0) with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as timestamp with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as timestamp(0) with ^time^ zone)\")\n        .fails(\"(?s).*Encountered \\\"time\\\" at .*\");\n    expr(\"cast(x as varchar(10) ^with^ local time zone)\")\n        .fails(\"(?s).*Encountered \\\"with\\\" at line 1, column 23.\\n.*\");\n    expr(\"cast(x as varchar(10) ^without^ time zone)\")\n        .fails(\"(?s).*Encountered \\\"without\\\" at line 1, column 23.\\n.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1543,"status":"N"},{"authorDate":"2020-07-21 04:33:06","commitOrder":4,"curCode":"  void subTestIntervalSecondNegative() {\n    \r\n    wholeExpr(\"INTERVAL ':' SECOND\")\n        .fails(\"Illegal interval literal format ':' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '.' SECOND\")\n        .fails(\"Illegal interval literal format '\\\\.' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1-2' SECOND\")\n        .fails(\"Illegal interval literal format '1-2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.x' SECOND\")\n        .fails(\"Illegal interval literal format '1\\\\.x' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL 'x.1' SECOND\")\n        .fails(\"Illegal interval literal format 'x\\\\.1' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1 2' SECOND\")\n        .fails(\"Illegal interval literal format '1 2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1:2' SECOND\")\n        .fails(\"Illegal interval literal format '1:2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1-2' SECOND(2)\")\n        .fails(\"Illegal interval literal format '1-2' for INTERVAL SECOND\\\\(2\\\\)\");\n    wholeExpr(\"INTERVAL 'bogus text' SECOND\")\n        .fails(\"Illegal interval literal format 'bogus text' for INTERVAL SECOND.*\");\n\n    \r\n    wholeExpr(\"INTERVAL '--1' SECOND\")\n        .fails(\"Illegal interval literal format '--1' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.-1' SECOND\")\n        .fails(\"Illegal interval literal format '1.-1' for INTERVAL SECOND.*\");\n\n    \r\n    \r\n    wholeExpr(\"INTERVAL '100' SECOND\")\n        .fails(\"Interval field value 100 exceeds precision of SECOND\\\\(2\\\\) field.*\");\n    wholeExpr(\"INTERVAL '100' SECOND(2)\")\n        .fails(\"Interval field value 100 exceeds precision of SECOND\\\\(2\\\\) field.*\");\n    wholeExpr(\"INTERVAL '1000' SECOND(3)\")\n        .fails(\"Interval field value 1,000 exceeds precision of SECOND\\\\(3\\\\) field.*\");\n    wholeExpr(\"INTERVAL '-1000' SECOND(3)\")\n        .fails(\"Interval field value -1,000 exceeds precision of SECOND\\\\(3\\\\) field.*\");\n    wholeExpr(\"INTERVAL '2147483648' SECOND(10)\")\n        .fails(\"Interval field value 2,147,483,648 exceeds precision of SECOND\\\\(10\\\\) field.*\");\n    wholeExpr(\"INTERVAL '-2147483648' SECOND(10)\")\n        .fails(\"Interval field value -2,147,483,648 exceeds precision of SECOND\\\\(10\\\\) field.*\");\n    wholeExpr(\"INTERVAL '1.0000001' SECOND\")\n        .fails(\"Illegal interval literal format '1\\\\.0000001' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.0000001' SECOND(2)\")\n        .fails(\"Illegal interval literal format '1\\\\.0000001' for INTERVAL SECOND\\\\(2\\\\).*\");\n    wholeExpr(\"INTERVAL '1.0001' SECOND(2, 3)\")\n        .fails(\"Illegal interval literal format '1\\\\.0001' for INTERVAL SECOND\\\\(2, 3\\\\).*\");\n    wholeExpr(\"INTERVAL '1.0000000001' SECOND(2, 9)\")\n        .fails(\"Illegal interval literal format '1\\\\.0000000001' for\"\n            + \" INTERVAL SECOND\\\\(2, 9\\\\).*\");\n\n    \r\n    expr(\"INTERVAL '1' ^SECOND(11)^\")\n        .fails(\"Interval leading field precision '11' out of range for\"\n            + \" INTERVAL SECOND\\\\(11\\\\)\");\n    expr(\"INTERVAL '1.1' ^SECOND(1, 10)^\")\n        .fails(\"Interval fractional second precision '10' out of range for\"\n            + \" INTERVAL SECOND\\\\(1, 10\\\\)\");\n\n    \r\n    \r\n    \r\n    expr(\"INTERVAL '0' ^SECOND(0)^\")\n        .fails(\"Interval leading field precision '0' out of range for\"\n            + \" INTERVAL SECOND\\\\(0\\\\)\");\n    expr(\"INTERVAL '0' ^SECOND(1, 0)^\")\n        .fails(\"Interval fractional second precision '0' out of range for\"\n            + \" INTERVAL SECOND\\\\(1, 0\\\\)\");\n  }\n","date":"2020-07-29 03:09:43","endLine":3510,"groupId":"10844","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"subTestIntervalSecondNegative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/cdca6c012885a152cd97923d7167086f0b4da5.src","preCode":"  public void subTestIntervalSecondNegative() {\n    \r\n    wholeExpr(\"INTERVAL ':' SECOND\")\n        .fails(\"Illegal interval literal format ':' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '.' SECOND\")\n        .fails(\"Illegal interval literal format '\\\\.' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1-2' SECOND\")\n        .fails(\"Illegal interval literal format '1-2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.x' SECOND\")\n        .fails(\"Illegal interval literal format '1\\\\.x' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL 'x.1' SECOND\")\n        .fails(\"Illegal interval literal format 'x\\\\.1' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1 2' SECOND\")\n        .fails(\"Illegal interval literal format '1 2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1:2' SECOND\")\n        .fails(\"Illegal interval literal format '1:2' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1-2' SECOND(2)\")\n        .fails(\"Illegal interval literal format '1-2' for INTERVAL SECOND\\\\(2\\\\)\");\n    wholeExpr(\"INTERVAL 'bogus text' SECOND\")\n        .fails(\"Illegal interval literal format 'bogus text' for INTERVAL SECOND.*\");\n\n    \r\n    wholeExpr(\"INTERVAL '--1' SECOND\")\n        .fails(\"Illegal interval literal format '--1' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.-1' SECOND\")\n        .fails(\"Illegal interval literal format '1.-1' for INTERVAL SECOND.*\");\n\n    \r\n    \r\n    wholeExpr(\"INTERVAL '100' SECOND\")\n        .fails(\"Interval field value 100 exceeds precision of SECOND\\\\(2\\\\) field.*\");\n    wholeExpr(\"INTERVAL '100' SECOND(2)\")\n        .fails(\"Interval field value 100 exceeds precision of SECOND\\\\(2\\\\) field.*\");\n    wholeExpr(\"INTERVAL '1000' SECOND(3)\")\n        .fails(\"Interval field value 1,000 exceeds precision of SECOND\\\\(3\\\\) field.*\");\n    wholeExpr(\"INTERVAL '-1000' SECOND(3)\")\n        .fails(\"Interval field value -1,000 exceeds precision of SECOND\\\\(3\\\\) field.*\");\n    wholeExpr(\"INTERVAL '2147483648' SECOND(10)\")\n        .fails(\"Interval field value 2,147,483,648 exceeds precision of SECOND\\\\(10\\\\) field.*\");\n    wholeExpr(\"INTERVAL '-2147483648' SECOND(10)\")\n        .fails(\"Interval field value -2,147,483,648 exceeds precision of SECOND\\\\(10\\\\) field.*\");\n    wholeExpr(\"INTERVAL '1.0000001' SECOND\")\n        .fails(\"Illegal interval literal format '1\\\\.0000001' for INTERVAL SECOND.*\");\n    wholeExpr(\"INTERVAL '1.0000001' SECOND(2)\")\n        .fails(\"Illegal interval literal format '1\\\\.0000001' for INTERVAL SECOND\\\\(2\\\\).*\");\n    wholeExpr(\"INTERVAL '1.0001' SECOND(2, 3)\")\n        .fails(\"Illegal interval literal format '1\\\\.0001' for INTERVAL SECOND\\\\(2, 3\\\\).*\");\n    wholeExpr(\"INTERVAL '1.0000000001' SECOND(2, 9)\")\n        .fails(\"Illegal interval literal format '1\\\\.0000000001' for\"\n            + \" INTERVAL SECOND\\\\(2, 9\\\\).*\");\n\n    \r\n    expr(\"INTERVAL '1' SECOND(11^)^\")\n        .fails(\"Interval leading field precision '11' out of range for\"\n            + \" INTERVAL SECOND\\\\(11\\\\)\");\n    expr(\"INTERVAL '1.1' SECOND(1, 10^)^\")\n        .fails(\"Interval fractional second precision '10' out of range for\"\n            + \" INTERVAL SECOND\\\\(1, 10\\\\)\");\n\n    \r\n    \r\n    \r\n    expr(\"INTERVAL '0' SECOND(0^)^\")\n        .fails(\"Interval leading field precision '0' out of range for\"\n            + \" INTERVAL SECOND\\\\(0\\\\)\");\n    expr(\"INTERVAL '0' SECOND(1, 0^)^\")\n        .fails(\"Interval fractional second precision '0' out of range for\"\n            + \" INTERVAL SECOND\\\\(1, 0\\\\)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3442,"status":"M"}],"commitId":"03c76a7d2b896042ab417ddc36f1849f874ad3dd","commitMessage":"@@@[CALCITE-4134] Interval expressions\n","date":"2020-07-29 03:09:43","modifiedFileCount":"20","status":"M","submitter":"Julian Hyde"}]
