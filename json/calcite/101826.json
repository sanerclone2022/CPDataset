[{"authorTime":"2018-03-04 13:26:26","codes":[{"authorDate":"2018-03-04 13:26:26","commitOrder":1,"curCode":"  @Override public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    \r\n    \r\n    \r\n    \r\n\n    SqlIntervalLiteral.IntervalValue interval =\n        (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(literal.getValue().toString());\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n  }\n","date":"2018-03-25 06:58:01","endLine":93,"groupId":"14573","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseSqlIntervalLiteral","params":"(SqlWriterwriter@SqlIntervalLiteralliteral@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/965dcf5b5b1c5f17cb1d888df5db34d48497d6.src","preCode":"  @Override public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    \r\n    \r\n    \r\n    \r\n\n    SqlIntervalLiteral.IntervalValue interval =\n        (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(literal.getValue().toString());\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/Db2SqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"},{"authorDate":"2018-03-04 13:26:26","commitOrder":1,"curCode":"  private void unparseSqlIntervalLiteralMssql(\n      SqlWriter writer, SqlIntervalLiteral literal, int sign) {\n    SqlIntervalLiteral.IntervalValue interval\n        = (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n    writer.sep(\",\", true);\n    if (interval.getSign() * sign == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(literal.getValue().toString());\n  }\n","date":"2018-03-25 06:58:01","endLine":190,"groupId":"309","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseSqlIntervalLiteralMssql","params":"(SqlWriterwriter@SqlIntervalLiteralliteral@intsign)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/22/881deff7ea88ddc80c4c05a3a3578e8dfebc61.src","preCode":"  private void unparseSqlIntervalLiteralMssql(\n      SqlWriter writer, SqlIntervalLiteral literal, int sign) {\n    SqlIntervalLiteral.IntervalValue interval\n        = (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n    writer.sep(\",\", true);\n    if (interval.getSign() * sign == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(literal.getValue().toString());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/MssqlSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"5bf7b9a4d7b54778bbbcb71ed77f15a88b6b9680","commitMessage":"@@@[CALCITE-2188] JDBC adapter generates invalid SQL for DATE/INTERVAL arithmetic (Rahul Raj)\n\nClose apache/calcite#641\n","date":"2018-03-25 06:58:01","modifiedFileCount":"11","status":"B","submitter":"Rahul Raj"},{"authorTime":"2018-11-14 19:48:49","codes":[{"authorDate":"2018-03-04 13:26:26","commitOrder":2,"curCode":"  @Override public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    \r\n    \r\n    \r\n    \r\n\n    SqlIntervalLiteral.IntervalValue interval =\n        (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(literal.getValue().toString());\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n  }\n","date":"2018-03-25 06:58:01","endLine":93,"groupId":"14573","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseSqlIntervalLiteral","params":"(SqlWriterwriter@SqlIntervalLiteralliteral@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/965dcf5b5b1c5f17cb1d888df5db34d48497d6.src","preCode":"  @Override public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    \r\n    \r\n    \r\n    \r\n\n    SqlIntervalLiteral.IntervalValue interval =\n        (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(literal.getValue().toString());\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/Db2SqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"N"},{"authorDate":"2018-11-14 19:48:49","commitOrder":2,"curCode":"  private void unparseSqlIntervalLiteralMssql(\n      SqlWriter writer, SqlIntervalLiteral literal, int sign) {\n    final SqlIntervalLiteral.IntervalValue interval =\n        (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n    writer.sep(\",\", true);\n    if (interval.getSign() * sign == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(literal.getValue().toString());\n  }\n","date":"2018-12-06 08:59:02","endLine":192,"groupId":"309","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseSqlIntervalLiteralMssql","params":"(SqlWriterwriter@SqlIntervalLiteralliteral@intsign)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/89/de617a2b3322136b7894fc198d60315d0f4deb.src","preCode":"  private void unparseSqlIntervalLiteralMssql(\n      SqlWriter writer, SqlIntervalLiteral literal, int sign) {\n    SqlIntervalLiteral.IntervalValue interval\n        = (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n    writer.sep(\",\", true);\n    if (interval.getSign() * sign == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(literal.getValue().toString());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/MssqlSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"f3655e15a11a9fb266af290cb390e690d4301c09","commitMessage":"@@@[CALCITE-2670] Combine similar JSON aggregate functions in operator table\n\nConvert parameters from Enum to more specific types;\ninclude varying flag values in JSON aggregate functions.\n\nSome cosmetic stuff.\n\nClose apache/calcite#916\n","date":"2018-12-06 08:59:02","modifiedFileCount":"18","status":"M","submitter":"hongzezhang"},{"authorTime":"2020-07-21 04:33:06","codes":[{"authorDate":"2020-07-21 04:33:06","commitOrder":3,"curCode":"  @Override public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    \r\n    \r\n    \r\n    \r\n\n    SqlIntervalLiteral.IntervalValue interval =\n        literal.getValueAs(SqlIntervalLiteral.IntervalValue.class);\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(literal.getValue().toString());\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n  }\n","date":"2020-07-29 03:09:43","endLine":94,"groupId":"14573","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseSqlIntervalLiteral","params":"(SqlWriterwriter@SqlIntervalLiteralliteral@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9d/bbda032a2a60fe9fc26ad5751dbd073904055a.src","preCode":"  @Override public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    \r\n    \r\n    \r\n    \r\n\n    SqlIntervalLiteral.IntervalValue interval =\n        (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(literal.getValue().toString());\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/Db2SqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2020-07-21 04:33:06","commitOrder":3,"curCode":"  private void unparseSqlIntervalLiteralMssql(\n      SqlWriter writer, SqlIntervalLiteral literal, int sign) {\n    final SqlIntervalLiteral.IntervalValue interval =\n        literal.getValueAs(SqlIntervalLiteral.IntervalValue.class);\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n    writer.sep(\",\", true);\n    if (interval.getSign() * sign == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(literal.getValue().toString());\n  }\n","date":"2020-07-29 03:09:43","endLine":281,"groupId":"309","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseSqlIntervalLiteralMssql","params":"(SqlWriterwriter@SqlIntervalLiteralliteral@intsign)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f0/051751f53c04cbfcac84512f592fd2562c0693.src","preCode":"  private void unparseSqlIntervalLiteralMssql(\n      SqlWriter writer, SqlIntervalLiteral literal, int sign) {\n    final SqlIntervalLiteral.IntervalValue interval =\n        (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n    writer.sep(\",\", true);\n    if (interval.getSign() * sign == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(literal.getValue().toString());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/MssqlSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"}],"commitId":"03c76a7d2b896042ab417ddc36f1849f874ad3dd","commitMessage":"@@@[CALCITE-4134] Interval expressions\n","date":"2020-07-29 03:09:43","modifiedFileCount":"20","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  @Override public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    \r\n    \r\n    \r\n    \r\n\n    SqlIntervalLiteral.IntervalValue interval =\n        literal.getValueAs(SqlIntervalLiteral.IntervalValue.class);\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(interval.getIntervalLiteral());\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n  }\n","date":"2020-11-30 06:45:33","endLine":94,"groupId":"101826","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"unparseSqlIntervalLiteral","params":"(SqlWriterwriter@SqlIntervalLiteralliteral@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fb/335e8aa5c88fa1b7d126a7631905d044a965e0.src","preCode":"  @Override public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    \r\n    \r\n    \r\n    \r\n\n    SqlIntervalLiteral.IntervalValue interval =\n        literal.getValueAs(SqlIntervalLiteral.IntervalValue.class);\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(literal.getValue().toString());\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/Db2SqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  private void unparseSqlIntervalLiteralMssql(\n      SqlWriter writer, SqlIntervalLiteral literal, int sign) {\n    final SqlIntervalLiteral.IntervalValue interval =\n        literal.getValueAs(SqlIntervalLiteral.IntervalValue.class);\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n    writer.sep(\",\", true);\n    if (interval.getSign() * sign == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(interval.getIntervalLiteral());\n  }\n","date":"2020-11-30 06:45:33","endLine":286,"groupId":"101826","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseSqlIntervalLiteralMssql","params":"(SqlWriterwriter@SqlIntervalLiteralliteral@intsign)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/09/97233064869b37c524e66c897d040fcd2b8770.src","preCode":"  private void unparseSqlIntervalLiteralMssql(\n      SqlWriter writer, SqlIntervalLiteral literal, int sign) {\n    final SqlIntervalLiteral.IntervalValue interval =\n        literal.getValueAs(SqlIntervalLiteral.IntervalValue.class);\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n    writer.sep(\",\", true);\n    if (interval.getSign() * sign == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(literal.getValue().toString());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/MssqlSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
