[{"authorTime":"2016-05-04 02:56:16","codes":[{"authorDate":"2016-05-04 02:56:16","commitOrder":1,"curCode":"  @Test public void testSqlNodeLiteral() {\n    final SqlNode literal = SqlLiteral.createExactNumeric(\n        \"0\",\n        SqlParserPos.ZERO);\n    final SqlNode castLiteral = SqlStdOperatorTable.CAST.createCall(\n        SqlParserPos.ZERO,\n        literal,\n        integerType);\n    final SqlNode castCastLiteral = SqlStdOperatorTable.CAST.createCall(\n        SqlParserPos.ZERO,\n        castLiteral,\n        integerType);\n\n    \r\n    assertSame(true, SqlUtil.isLiteral(literal, true));\n    \r\n    assertSame(true, SqlUtil.isLiteral(castLiteral, true));\n    \r\n    assertSame(false, SqlUtil.isLiteral(castCastLiteral, true));\n  }\n","date":"2016-05-04 02:56:16","endLine":95,"groupId":"13818","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSqlNodeLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/37/62c45458635a006a4035a4ef2618937781625f.src","preCode":"  @Test public void testSqlNodeLiteral() {\n    final SqlNode literal = SqlLiteral.createExactNumeric(\n        \"0\",\n        SqlParserPos.ZERO);\n    final SqlNode castLiteral = SqlStdOperatorTable.CAST.createCall(\n        SqlParserPos.ZERO,\n        literal,\n        integerType);\n    final SqlNode castCastLiteral = SqlStdOperatorTable.CAST.createCall(\n        SqlParserPos.ZERO,\n        castLiteral,\n        integerType);\n\n    \r\n    assertSame(true, SqlUtil.isLiteral(literal, true));\n    \r\n    assertSame(true, SqlUtil.isLiteral(castLiteral, true));\n    \r\n    assertSame(false, SqlUtil.isLiteral(castCastLiteral, true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlOperatorBindingTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2016-05-04 02:56:16","commitOrder":1,"curCode":"  @Test public void testRexNodeLiteral() {\n    final RexNode literal = rexBuilder.makeZeroLiteral(\n        integerDataType);\n\n    final RexNode castLiteral = rexBuilder.makeCall(\n        integerDataType,\n        SqlStdOperatorTable.CAST,\n        Lists.newArrayList(literal));\n\n    final RexNode castCastLiteral = rexBuilder.makeCall(\n        integerDataType,\n        SqlStdOperatorTable.CAST,\n        Lists.newArrayList(castLiteral));\n\n    \r\n    assertSame(true, RexUtil.isLiteral(literal, true));\n    \r\n    assertSame(true, RexUtil.isLiteral(castLiteral, true));\n    \r\n    assertSame(false, RexUtil.isLiteral(castCastLiteral, true));\n  }\n","date":"2016-05-04 02:56:16","endLine":123,"groupId":"13819","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRexNodeLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/37/62c45458635a006a4035a4ef2618937781625f.src","preCode":"  @Test public void testRexNodeLiteral() {\n    final RexNode literal = rexBuilder.makeZeroLiteral(\n        integerDataType);\n\n    final RexNode castLiteral = rexBuilder.makeCall(\n        integerDataType,\n        SqlStdOperatorTable.CAST,\n        Lists.newArrayList(literal));\n\n    final RexNode castCastLiteral = rexBuilder.makeCall(\n        integerDataType,\n        SqlStdOperatorTable.CAST,\n        Lists.newArrayList(castLiteral));\n\n    \r\n    assertSame(true, RexUtil.isLiteral(literal, true));\n    \r\n    assertSame(true, RexUtil.isLiteral(castLiteral, true));\n    \r\n    assertSame(false, RexUtil.isLiteral(castCastLiteral, true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlOperatorBindingTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"}],"commitId":"44a6ba67b92c193468f0de9dc3417c218624e69f","commitMessage":"@@@Fix up [CALCITE-1219].  moving tests to new class SqlOperatorBindingTest\n","date":"2016-05-04 02:56:16","modifiedFileCount":"2","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSqlNodeLiteral() {\n    final SqlNode literal = SqlLiteral.createExactNumeric(\n        \"0\",\n        SqlParserPos.ZERO);\n    final SqlNode castLiteral = SqlStdOperatorTable.CAST.createCall(\n        SqlParserPos.ZERO,\n        literal,\n        integerType);\n    final SqlNode castCastLiteral = SqlStdOperatorTable.CAST.createCall(\n        SqlParserPos.ZERO,\n        castLiteral,\n        integerType);\n\n    \r\n    assertSame(true, SqlUtil.isLiteral(literal, true));\n    \r\n    assertSame(true, SqlUtil.isLiteral(castLiteral, true));\n    \r\n    assertSame(false, SqlUtil.isLiteral(castCastLiteral, true));\n  }\n","date":"2020-04-06 04:57:49","endLine":86,"groupId":"13818","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSqlNodeLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ca/c4e3b2b117aa075c7a13148e7bf0d56314b6a8.src","preCode":"  @Test public void testSqlNodeLiteral() {\n    final SqlNode literal = SqlLiteral.createExactNumeric(\n        \"0\",\n        SqlParserPos.ZERO);\n    final SqlNode castLiteral = SqlStdOperatorTable.CAST.createCall(\n        SqlParserPos.ZERO,\n        literal,\n        integerType);\n    final SqlNode castCastLiteral = SqlStdOperatorTable.CAST.createCall(\n        SqlParserPos.ZERO,\n        castLiteral,\n        integerType);\n\n    \r\n    assertSame(true, SqlUtil.isLiteral(literal, true));\n    \r\n    assertSame(true, SqlUtil.isLiteral(castLiteral, true));\n    \r\n    assertSame(false, SqlUtil.isLiteral(castCastLiteral, true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlOperatorBindingTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testRexNodeLiteral() {\n    final RexNode literal = rexBuilder.makeZeroLiteral(\n        integerDataType);\n\n    final RexNode castLiteral = rexBuilder.makeCall(\n        integerDataType,\n        SqlStdOperatorTable.CAST,\n        Lists.newArrayList(literal));\n\n    final RexNode castCastLiteral = rexBuilder.makeCall(\n        integerDataType,\n        SqlStdOperatorTable.CAST,\n        Lists.newArrayList(castLiteral));\n\n    \r\n    assertSame(true, RexUtil.isLiteral(literal, true));\n    \r\n    assertSame(true, RexUtil.isLiteral(castLiteral, true));\n    \r\n    assertSame(false, RexUtil.isLiteral(castCastLiteral, true));\n  }\n","date":"2020-04-06 04:57:49","endLine":114,"groupId":"13819","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRexNodeLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ca/c4e3b2b117aa075c7a13148e7bf0d56314b6a8.src","preCode":"  @Test public void testRexNodeLiteral() {\n    final RexNode literal = rexBuilder.makeZeroLiteral(\n        integerDataType);\n\n    final RexNode castLiteral = rexBuilder.makeCall(\n        integerDataType,\n        SqlStdOperatorTable.CAST,\n        Lists.newArrayList(literal));\n\n    final RexNode castCastLiteral = rexBuilder.makeCall(\n        integerDataType,\n        SqlStdOperatorTable.CAST,\n        Lists.newArrayList(castLiteral));\n\n    \r\n    assertSame(true, RexUtil.isLiteral(literal, true));\n    \r\n    assertSame(true, RexUtil.isLiteral(castLiteral, true));\n    \r\n    assertSame(false, RexUtil.isLiteral(castCastLiteral, true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlOperatorBindingTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-06-19 05:10:50","codes":[{"authorDate":"2018-06-19 05:10:50","commitOrder":3,"curCode":"  @Test void testSqlNodeLiteral() {\n    final SqlParserPos pos = SqlParserPos.ZERO;\n    final SqlNode zeroLiteral = SqlLiteral.createExactNumeric(\"0\", pos);\n    final SqlNode oneLiteral = SqlLiteral.createExactNumeric(\"1\", pos);\n    final SqlNode nullLiteral = SqlLiteral.createNull(pos);\n    final SqlCharStringLiteral aLiteral = SqlLiteral.createCharString(\"a\", pos);\n\n    final SqlNode castLiteral =\n        SqlStdOperatorTable.CAST.createCall(pos, zeroLiteral, integerType);\n    final SqlNode castCastLiteral =\n        SqlStdOperatorTable.CAST.createCall(pos, castLiteral, integerType);\n    final SqlNode mapLiteral =\n        SqlStdOperatorTable.MAP_VALUE_CONSTRUCTOR.createCall(pos,\n            aLiteral, oneLiteral);\n    final SqlNode map2Literal =\n        SqlStdOperatorTable.MAP_VALUE_CONSTRUCTOR.createCall(pos,\n            aLiteral, castLiteral);\n    final SqlNode arrayLiteral =\n        SqlStdOperatorTable.ARRAY_VALUE_CONSTRUCTOR.createCall(pos,\n            zeroLiteral, oneLiteral);\n    final SqlNode defaultCall = SqlStdOperatorTable.DEFAULT.createCall(pos);\n\n    \r\n    assertThat(SqlUtil.isLiteral(zeroLiteral, false), is(true));\n    assertThat(SqlUtil.isLiteral(zeroLiteral, true), is(true));\n    \r\n    assertThat(SqlUtil.isLiteral(nullLiteral, false), is(true));\n    assertThat(SqlUtil.isLiteral(nullLiteral, true), is(true));\n    \r\n    assertThat(SqlUtil.isLiteral(castLiteral, false), is(false));\n    assertThat(SqlUtil.isLiteral(castLiteral, true), is(true));\n    \r\n    \r\n    assertThat(SqlUtil.isLiteral(castCastLiteral, false), is(false));\n    assertThat(SqlUtil.isLiteral(castCastLiteral, true), is(true));\n    \r\n    \r\n    assertThat(SqlUtil.isLiteral(mapLiteral, false), is(false));\n    assertThat(SqlUtil.isLiteral(mapLiteral, true), is(true));\n    assertThat(SqlUtil.isLiteral(map2Literal, false), is(false));\n    assertThat(SqlUtil.isLiteral(map2Literal, true), is(true));\n    \r\n    assertThat(SqlUtil.isLiteral(arrayLiteral, false), is(false));\n    assertThat(SqlUtil.isLiteral(arrayLiteral, true), is(true));\n    \r\n    assertThat(SqlUtil.isLiteral(defaultCall, false), is(false));\n    assertThat(SqlUtil.isLiteral(defaultCall, true), is(true));\n  }\n","date":"2020-07-29 03:09:43","endLine":117,"groupId":"101283","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testSqlNodeLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4f/8ea4e0f7663a14b8479cda232e990c80266701.src","preCode":"  @Test void testSqlNodeLiteral() {\n    final SqlNode literal = SqlLiteral.createExactNumeric(\n        \"0\",\n        SqlParserPos.ZERO);\n    final SqlNode castLiteral = SqlStdOperatorTable.CAST.createCall(\n        SqlParserPos.ZERO,\n        literal,\n        integerType);\n    final SqlNode castCastLiteral = SqlStdOperatorTable.CAST.createCall(\n        SqlParserPos.ZERO,\n        castLiteral,\n        integerType);\n\n    \r\n    assertSame(true, SqlUtil.isLiteral(literal, true));\n    \r\n    assertSame(true, SqlUtil.isLiteral(castLiteral, true));\n    \r\n    assertSame(false, SqlUtil.isLiteral(castCastLiteral, true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlOperatorBindingTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2018-06-19 05:10:50","commitOrder":3,"curCode":"  @Test void testRexNodeLiteral() {\n    final RexNode literal = rexBuilder.makeZeroLiteral(\n        integerDataType);\n\n    final RexNode castLiteral = rexBuilder.makeCall(\n        integerDataType,\n        SqlStdOperatorTable.CAST,\n        Lists.newArrayList(literal));\n\n    final RexNode castCastLiteral = rexBuilder.makeCall(\n        integerDataType,\n        SqlStdOperatorTable.CAST,\n        Lists.newArrayList(castLiteral));\n\n    \r\n    assertThat(RexUtil.isLiteral(literal, true), is(true));\n    \r\n    assertThat(RexUtil.isLiteral(castLiteral, true), is(true));\n    \r\n    assertThat(RexUtil.isLiteral(castCastLiteral, true), is(false));\n  }\n","date":"2020-07-29 03:09:43","endLine":145,"groupId":"101283","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testRexNodeLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4f/8ea4e0f7663a14b8479cda232e990c80266701.src","preCode":"  @Test void testRexNodeLiteral() {\n    final RexNode literal = rexBuilder.makeZeroLiteral(\n        integerDataType);\n\n    final RexNode castLiteral = rexBuilder.makeCall(\n        integerDataType,\n        SqlStdOperatorTable.CAST,\n        Lists.newArrayList(literal));\n\n    final RexNode castCastLiteral = rexBuilder.makeCall(\n        integerDataType,\n        SqlStdOperatorTable.CAST,\n        Lists.newArrayList(castLiteral));\n\n    \r\n    assertSame(true, RexUtil.isLiteral(literal, true));\n    \r\n    assertSame(true, RexUtil.isLiteral(castLiteral, true));\n    \r\n    assertSame(false, RexUtil.isLiteral(castCastLiteral, true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlOperatorBindingTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"19edf52c76c6a1507721f5bd37f2a33497aa0c4c","commitMessage":"@@@[CALCITE-2569] UDFs that are table functions must implement SqlTableFunction and have CURSOR as their return type\n\nValidate that table functions are not used in contexts that require\nscalar functions.  such as the SELECT clause.\n\nChange operand type ANY to mean 'scalar expression of any type (but\nnot a cursor)'.  and add operand type IGNORE to mean skip validation -\nfor an operand that is not an expression. TABLE is one of the few\noperators that accepts a CURSOR operand.\n\nAdd SqlKind.INTERVAL_QUALIFIER.\n","date":"2020-07-29 03:09:43","modifiedFileCount":"32","status":"M","submitter":"Julian Hyde"}]
