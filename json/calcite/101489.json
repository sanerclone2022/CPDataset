[{"authorTime":"2016-07-31 03:56:19","codes":[{"authorDate":"2016-07-31 03:56:19","commitOrder":1,"curCode":"  @Test public void testExtractYearFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n\n    final RexNode e = f.eq(f.literal(2014), f.exYear);\n    assertThat(DateRangeRules.extractTimeUnits(e),\n        is(set(TimeUnitRange.YEAR)));\n    assertThat(DateRangeRules.extractTimeUnits(f.dec), is(set()));\n    assertThat(DateRangeRules.extractTimeUnits(f.literal(1)), is(set()));\n\n    \r\n    checkDateRange(f, e, is(\"AND(>=($8, 2014-01-01), <($8, 2015-01-01))\"));\n    checkDateRange(f, f.eq(f.exYear, f.literal(2014)),\n        is(\"AND(>=($8, 2014-01-01), <($8, 2015-01-01))\"));\n    checkDateRange(f, f.ge(f.exYear, f.literal(2014)),\n        is(\">=($8, 2014-01-01)\"));\n    checkDateRange(f, f.gt(f.exYear, f.literal(2014)),\n        is(\">=($8, 2015-01-01)\"));\n    checkDateRange(f, f.lt(f.exYear, f.literal(2014)),\n        is(\"<($8, 2014-01-01)\"));\n    checkDateRange(f, f.le(f.exYear, f.literal(2014)),\n        is(\"<($8, 2015-01-01)\"));\n    checkDateRange(f, f.ne(f.exYear, f.literal(2014)),\n        is(\"<>(EXTRACT_DATE(FLAG(YEAR), $8), 2014)\"));\n  }\n","date":"2016-09-07 02:39:10","endLine":70,"groupId":"13149","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractYearFromDateColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6e/f898e247dcdc9ad305bca9879d0c1c6568b673.src","preCode":"  @Test public void testExtractYearFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n\n    final RexNode e = f.eq(f.literal(2014), f.exYear);\n    assertThat(DateRangeRules.extractTimeUnits(e),\n        is(set(TimeUnitRange.YEAR)));\n    assertThat(DateRangeRules.extractTimeUnits(f.dec), is(set()));\n    assertThat(DateRangeRules.extractTimeUnits(f.literal(1)), is(set()));\n\n    \r\n    checkDateRange(f, e, is(\"AND(>=($8, 2014-01-01), <($8, 2015-01-01))\"));\n    checkDateRange(f, f.eq(f.exYear, f.literal(2014)),\n        is(\"AND(>=($8, 2014-01-01), <($8, 2015-01-01))\"));\n    checkDateRange(f, f.ge(f.exYear, f.literal(2014)),\n        is(\">=($8, 2014-01-01)\"));\n    checkDateRange(f, f.gt(f.exYear, f.literal(2014)),\n        is(\">=($8, 2015-01-01)\"));\n    checkDateRange(f, f.lt(f.exYear, f.literal(2014)),\n        is(\"<($8, 2014-01-01)\"));\n    checkDateRange(f, f.le(f.exYear, f.literal(2014)),\n        is(\"<($8, 2015-01-01)\"));\n    checkDateRange(f, f.ne(f.exYear, f.literal(2014)),\n        is(\"<>(EXTRACT_DATE(FLAG(YEAR), $8), 2014)\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2016-07-31 03:56:19","commitOrder":1,"curCode":"  @Test public void testExtractYearFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.eq(f.exYearTs, f.literal(2014)),\n        is(\"AND(>=($9, 2014-01-01), <($9, 2015-01-01))\"));\n    checkDateRange(f, f.ge(f.exYearTs, f.literal(2014)),\n        is(\">=($9, 2014-01-01)\"));\n    checkDateRange(f, f.gt(f.exYearTs, f.literal(2014)),\n        is(\">=($9, 2015-01-01)\"));\n    checkDateRange(f, f.lt(f.exYearTs, f.literal(2014)),\n        is(\"<($9, 2014-01-01)\"));\n    checkDateRange(f, f.le(f.exYearTs, f.literal(2014)),\n        is(\"<($9, 2015-01-01)\"));\n    checkDateRange(f, f.ne(f.exYearTs, f.literal(2014)),\n        is(\"<>(EXTRACT(FLAG(YEAR), $9), 2014)\"));\n  }\n","date":"2016-09-07 02:39:10","endLine":86,"groupId":"13149","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractYearFromTimestampColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6e/f898e247dcdc9ad305bca9879d0c1c6568b673.src","preCode":"  @Test public void testExtractYearFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.eq(f.exYearTs, f.literal(2014)),\n        is(\"AND(>=($9, 2014-01-01), <($9, 2015-01-01))\"));\n    checkDateRange(f, f.ge(f.exYearTs, f.literal(2014)),\n        is(\">=($9, 2014-01-01)\"));\n    checkDateRange(f, f.gt(f.exYearTs, f.literal(2014)),\n        is(\">=($9, 2015-01-01)\"));\n    checkDateRange(f, f.lt(f.exYearTs, f.literal(2014)),\n        is(\"<($9, 2014-01-01)\"));\n    checkDateRange(f, f.le(f.exYearTs, f.literal(2014)),\n        is(\"<($9, 2015-01-01)\"));\n    checkDateRange(f, f.ne(f.exYearTs, f.literal(2014)),\n        is(\"<>(EXTRACT(FLAG(YEAR), $9), 2014)\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"}],"commitId":"87435a9b86e0d44a6c9123c028e5c5180fe3da88","commitMessage":"@@@[CALCITE-1334] Convert predicates on EXTRACT function calls into date ranges\n\nTest the code on the 'timestamp' column of a Druid table.\n\nThis change requires RangeSet.  and therefore Guava 14 or higher.\n","date":"2016-09-07 02:39:10","modifiedFileCount":"14","status":"B","submitter":"Julian Hyde"},{"authorTime":"2017-09-14 20:53:41","codes":[{"authorDate":"2017-09-14 20:53:41","commitOrder":2,"curCode":"  @Test public void testExtractYearFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n\n    final RexNode e = f.eq(f.literal(2014), f.exYear);\n    assertThat(DateRangeRules.extractTimeUnits(e),\n        is(set(TimeUnitRange.YEAR)));\n    assertThat(DateRangeRules.extractTimeUnits(f.dec), is(set()));\n    assertThat(DateRangeRules.extractTimeUnits(f.literal(1)), is(set()));\n\n    \r\n    checkDateRange(f, e, is(\"AND(>=($9, 2014-01-01), <($9, 2015-01-01))\"));\n    checkDateRange(f, f.eq(f.exYear, f.literal(2014)),\n        is(\"AND(>=($9, 2014-01-01), <($9, 2015-01-01))\"));\n    checkDateRange(f, f.ge(f.exYear, f.literal(2014)),\n        is(\">=($9, 2014-01-01)\"));\n    checkDateRange(f, f.gt(f.exYear, f.literal(2014)),\n        is(\">=($9, 2015-01-01)\"));\n    checkDateRange(f, f.lt(f.exYear, f.literal(2014)),\n        is(\"<($9, 2014-01-01)\"));\n    checkDateRange(f, f.le(f.exYear, f.literal(2014)),\n        is(\"<($9, 2015-01-01)\"));\n    checkDateRange(f, f.ne(f.exYear, f.literal(2014)),\n        is(\"<>(EXTRACT(FLAG(YEAR), $9), 2014)\"));\n  }\n","date":"2017-10-03 02:13:43","endLine":69,"groupId":"13149","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractYearFromDateColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/d746d416c526637cb1a2c519f1260219e01d2f.src","preCode":"  @Test public void testExtractYearFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n\n    final RexNode e = f.eq(f.literal(2014), f.exYear);\n    assertThat(DateRangeRules.extractTimeUnits(e),\n        is(set(TimeUnitRange.YEAR)));\n    assertThat(DateRangeRules.extractTimeUnits(f.dec), is(set()));\n    assertThat(DateRangeRules.extractTimeUnits(f.literal(1)), is(set()));\n\n    \r\n    checkDateRange(f, e, is(\"AND(>=($8, 2014-01-01), <($8, 2015-01-01))\"));\n    checkDateRange(f, f.eq(f.exYear, f.literal(2014)),\n        is(\"AND(>=($8, 2014-01-01), <($8, 2015-01-01))\"));\n    checkDateRange(f, f.ge(f.exYear, f.literal(2014)),\n        is(\">=($8, 2014-01-01)\"));\n    checkDateRange(f, f.gt(f.exYear, f.literal(2014)),\n        is(\">=($8, 2015-01-01)\"));\n    checkDateRange(f, f.lt(f.exYear, f.literal(2014)),\n        is(\"<($8, 2014-01-01)\"));\n    checkDateRange(f, f.le(f.exYear, f.literal(2014)),\n        is(\"<($8, 2015-01-01)\"));\n    checkDateRange(f, f.ne(f.exYear, f.literal(2014)),\n        is(\"<>(EXTRACT_DATE(FLAG(YEAR), $8), 2014)\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2017-09-14 20:53:41","commitOrder":2,"curCode":"  @Test public void testExtractYearFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.eq(f.exYear, f.literal(2014)),\n        is(\"AND(>=($9, 2014-01-01), <($9, 2015-01-01))\"));\n    checkDateRange(f, f.ge(f.exYear, f.literal(2014)),\n        is(\">=($9, 2014-01-01)\"));\n    checkDateRange(f, f.gt(f.exYear, f.literal(2014)),\n        is(\">=($9, 2015-01-01)\"));\n    checkDateRange(f, f.lt(f.exYear, f.literal(2014)),\n        is(\"<($9, 2014-01-01)\"));\n    checkDateRange(f, f.le(f.exYear, f.literal(2014)),\n        is(\"<($9, 2015-01-01)\"));\n    checkDateRange(f, f.ne(f.exYear, f.literal(2014)),\n        is(\"<>(EXTRACT(FLAG(YEAR), $9), 2014)\"));\n  }\n","date":"2017-10-03 02:13:43","endLine":85,"groupId":"13149","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractYearFromTimestampColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/d746d416c526637cb1a2c519f1260219e01d2f.src","preCode":"  @Test public void testExtractYearFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.eq(f.exYearTs, f.literal(2014)),\n        is(\"AND(>=($9, 2014-01-01), <($9, 2015-01-01))\"));\n    checkDateRange(f, f.ge(f.exYearTs, f.literal(2014)),\n        is(\">=($9, 2014-01-01)\"));\n    checkDateRange(f, f.gt(f.exYearTs, f.literal(2014)),\n        is(\">=($9, 2015-01-01)\"));\n    checkDateRange(f, f.lt(f.exYearTs, f.literal(2014)),\n        is(\"<($9, 2014-01-01)\"));\n    checkDateRange(f, f.le(f.exYearTs, f.literal(2014)),\n        is(\"<($9, 2015-01-01)\"));\n    checkDateRange(f, f.ne(f.exYearTs, f.literal(2014)),\n        is(\"<>(EXTRACT(FLAG(YEAR), $9), 2014)\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"796a28f9a9d49a16971135074f315d536eb929cf","commitMessage":"@@@[CALCITE-1987] Implement EXTRACT for JDBC (Pavel Gubin)\n\nRemove EXTRACT_DATE function (it's all just EXTRACTi now). \nand revise Druid adapter.\n\nClose apache/calcite#539\n","date":"2017-10-03 02:13:43","modifiedFileCount":"8","status":"M","submitter":"pavelgubin"},{"authorTime":"2018-01-08 02:52:51","codes":[{"authorDate":"2018-01-08 02:52:51","commitOrder":3,"curCode":"  @Test public void testExtractYearFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n\n    final RexNode e = f.eq(f.literal(2014), f.exYearD);\n    assertThat(DateRangeRules.extractTimeUnits(e),\n        is(set(TimeUnitRange.YEAR)));\n    assertThat(DateRangeRules.extractTimeUnits(f.dec), is(set()));\n    assertThat(DateRangeRules.extractTimeUnits(f.literal(1)), is(set()));\n\n    \r\n    checkDateRange(f, e, is(\"AND(>=($8, 2014-01-01), <($8, 2015-01-01))\"));\n    checkDateRange(f, f.eq(f.exYearD, f.literal(2014)),\n        is(\"AND(>=($8, 2014-01-01), <($8, 2015-01-01))\"));\n    checkDateRange(f, f.ge(f.exYearD, f.literal(2014)),\n        is(\">=($8, 2014-01-01)\"));\n    checkDateRange(f, f.gt(f.exYearD, f.literal(2014)),\n        is(\">=($8, 2015-01-01)\"));\n    checkDateRange(f, f.lt(f.exYearD, f.literal(2014)),\n        is(\"<($8, 2014-01-01)\"));\n    checkDateRange(f, f.le(f.exYearD, f.literal(2014)),\n        is(\"<($8, 2015-01-01)\"));\n    checkDateRange(f, f.ne(f.exYearD, f.literal(2014)),\n        is(\"<>(EXTRACT(FLAG(YEAR), $8), 2014)\"));\n  }\n","date":"2018-01-09 05:34:48","endLine":67,"groupId":"13149","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractYearFromDateColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f2/47fbbf1251458ab4437e76a9619ba7d7828ce2.src","preCode":"  @Test public void testExtractYearFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n\n    final RexNode e = f.eq(f.literal(2014), f.exYear);\n    assertThat(DateRangeRules.extractTimeUnits(e),\n        is(set(TimeUnitRange.YEAR)));\n    assertThat(DateRangeRules.extractTimeUnits(f.dec), is(set()));\n    assertThat(DateRangeRules.extractTimeUnits(f.literal(1)), is(set()));\n\n    \r\n    checkDateRange(f, e, is(\"AND(>=($9, 2014-01-01), <($9, 2015-01-01))\"));\n    checkDateRange(f, f.eq(f.exYear, f.literal(2014)),\n        is(\"AND(>=($9, 2014-01-01), <($9, 2015-01-01))\"));\n    checkDateRange(f, f.ge(f.exYear, f.literal(2014)),\n        is(\">=($9, 2014-01-01)\"));\n    checkDateRange(f, f.gt(f.exYear, f.literal(2014)),\n        is(\">=($9, 2015-01-01)\"));\n    checkDateRange(f, f.lt(f.exYear, f.literal(2014)),\n        is(\"<($9, 2014-01-01)\"));\n    checkDateRange(f, f.le(f.exYear, f.literal(2014)),\n        is(\"<($9, 2015-01-01)\"));\n    checkDateRange(f, f.ne(f.exYear, f.literal(2014)),\n        is(\"<>(EXTRACT(FLAG(YEAR), $9), 2014)\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2018-01-08 02:52:51","commitOrder":3,"curCode":"  @Test public void testExtractYearFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.eq(f.exYearTs, f.literal(2014)),\n        is(\"AND(>=($9, 2014-01-01 00:00:00), <($9, 2015-01-01 00:00:00))\"));\n    checkDateRange(f, f.ge(f.exYearTs, f.literal(2014)),\n        is(\">=($9, 2014-01-01 00:00:00)\"));\n    checkDateRange(f, f.gt(f.exYearTs, f.literal(2014)),\n        is(\">=($9, 2015-01-01 00:00:00)\"));\n    checkDateRange(f, f.lt(f.exYearTs, f.literal(2014)),\n        is(\"<($9, 2014-01-01 00:00:00)\"));\n    checkDateRange(f, f.le(f.exYearTs, f.literal(2014)),\n        is(\"<($9, 2015-01-01 00:00:00)\"));\n    checkDateRange(f, f.ne(f.exYearTs, f.literal(2014)),\n        is(\"<>(EXTRACT(FLAG(YEAR), $9), 2014)\"));\n  }\n","date":"2018-01-09 05:34:48","endLine":83,"groupId":"13149","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractYearFromTimestampColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f2/47fbbf1251458ab4437e76a9619ba7d7828ce2.src","preCode":"  @Test public void testExtractYearFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.eq(f.exYear, f.literal(2014)),\n        is(\"AND(>=($9, 2014-01-01), <($9, 2015-01-01))\"));\n    checkDateRange(f, f.ge(f.exYear, f.literal(2014)),\n        is(\">=($9, 2014-01-01)\"));\n    checkDateRange(f, f.gt(f.exYear, f.literal(2014)),\n        is(\">=($9, 2015-01-01)\"));\n    checkDateRange(f, f.lt(f.exYear, f.literal(2014)),\n        is(\"<($9, 2014-01-01)\"));\n    checkDateRange(f, f.le(f.exYear, f.literal(2014)),\n        is(\"<($9, 2015-01-01)\"));\n    checkDateRange(f, f.ne(f.exYear, f.literal(2014)),\n        is(\"<>(EXTRACT(FLAG(YEAR), $9), 2014)\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"2918b8fe55c58e0bafd38accfface242f1847c54","commitMessage":"@@@[CALCITE-2122] In DateRangeRules.  make either TIMESTAMP or DATE literal.  according to target type (Nishant Bangarwa)\n\nClose apache/calcite#599\n","date":"2018-01-09 05:34:48","modifiedFileCount":"6","status":"M","submitter":"Nishant"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testExtractYearFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n\n    final RexNode e = f.eq(f.literal(2014), f.exYearD);\n    assertThat(DateRangeRules.extractTimeUnits(e),\n        is(set(TimeUnitRange.YEAR)));\n    assertThat(DateRangeRules.extractTimeUnits(f.dec), is(set()));\n    assertThat(DateRangeRules.extractTimeUnits(f.literal(1)), is(set()));\n\n    \r\n    checkDateRange(f, e, is(\"AND(>=($8, 2014-01-01), <($8, 2015-01-01))\"));\n    checkDateRange(f, f.eq(f.exYearD, f.literal(2014)),\n        is(\"AND(>=($8, 2014-01-01), <($8, 2015-01-01))\"));\n    checkDateRange(f, f.ge(f.exYearD, f.literal(2014)),\n        is(\">=($8, 2014-01-01)\"));\n    checkDateRange(f, f.gt(f.exYearD, f.literal(2014)),\n        is(\">=($8, 2015-01-01)\"));\n    checkDateRange(f, f.lt(f.exYearD, f.literal(2014)),\n        is(\"<($8, 2014-01-01)\"));\n    checkDateRange(f, f.le(f.exYearD, f.literal(2014)),\n        is(\"<($8, 2015-01-01)\"));\n    checkDateRange(f, f.ne(f.exYearD, f.literal(2014)),\n        is(\"<>(EXTRACT(FLAG(YEAR), $8), 2014)\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":66,"groupId":"101489","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractYearFromDateColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/29288bd53b9dc06551209ba551f2b4be514394.src","preCode":"  @Test public void testExtractYearFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n\n    final RexNode e = f.eq(f.literal(2014), f.exYearD);\n    assertThat(DateRangeRules.extractTimeUnits(e),\n        is(set(TimeUnitRange.YEAR)));\n    assertThat(DateRangeRules.extractTimeUnits(f.dec), is(set()));\n    assertThat(DateRangeRules.extractTimeUnits(f.literal(1)), is(set()));\n\n    \r\n    checkDateRange(f, e, is(\"AND(>=($8, 2014-01-01), <($8, 2015-01-01))\"));\n    checkDateRange(f, f.eq(f.exYearD, f.literal(2014)),\n        is(\"AND(>=($8, 2014-01-01), <($8, 2015-01-01))\"));\n    checkDateRange(f, f.ge(f.exYearD, f.literal(2014)),\n        is(\">=($8, 2014-01-01)\"));\n    checkDateRange(f, f.gt(f.exYearD, f.literal(2014)),\n        is(\">=($8, 2015-01-01)\"));\n    checkDateRange(f, f.lt(f.exYearD, f.literal(2014)),\n        is(\"<($8, 2014-01-01)\"));\n    checkDateRange(f, f.le(f.exYearD, f.literal(2014)),\n        is(\"<($8, 2015-01-01)\"));\n    checkDateRange(f, f.ne(f.exYearD, f.literal(2014)),\n        is(\"<>(EXTRACT(FLAG(YEAR), $8), 2014)\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testExtractYearFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.eq(f.exYearTs, f.literal(2014)),\n        is(\"AND(>=($9, 2014-01-01 00:00:00), <($9, 2015-01-01 00:00:00))\"));\n    checkDateRange(f, f.ge(f.exYearTs, f.literal(2014)),\n        is(\">=($9, 2014-01-01 00:00:00)\"));\n    checkDateRange(f, f.gt(f.exYearTs, f.literal(2014)),\n        is(\">=($9, 2015-01-01 00:00:00)\"));\n    checkDateRange(f, f.lt(f.exYearTs, f.literal(2014)),\n        is(\"<($9, 2014-01-01 00:00:00)\"));\n    checkDateRange(f, f.le(f.exYearTs, f.literal(2014)),\n        is(\"<($9, 2015-01-01 00:00:00)\"));\n    checkDateRange(f, f.ne(f.exYearTs, f.literal(2014)),\n        is(\"<>(EXTRACT(FLAG(YEAR), $9), 2014)\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":82,"groupId":"101489","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractYearFromTimestampColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/29288bd53b9dc06551209ba551f2b4be514394.src","preCode":"  @Test public void testExtractYearFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f, f.eq(f.exYearTs, f.literal(2014)),\n        is(\"AND(>=($9, 2014-01-01 00:00:00), <($9, 2015-01-01 00:00:00))\"));\n    checkDateRange(f, f.ge(f.exYearTs, f.literal(2014)),\n        is(\">=($9, 2014-01-01 00:00:00)\"));\n    checkDateRange(f, f.gt(f.exYearTs, f.literal(2014)),\n        is(\">=($9, 2015-01-01 00:00:00)\"));\n    checkDateRange(f, f.lt(f.exYearTs, f.literal(2014)),\n        is(\"<($9, 2014-01-01 00:00:00)\"));\n    checkDateRange(f, f.le(f.exYearTs, f.literal(2014)),\n        is(\"<($9, 2015-01-01 00:00:00)\"));\n    checkDateRange(f, f.ne(f.exYearTs, f.literal(2014)),\n        is(\"<>(EXTRACT(FLAG(YEAR), $9), 2014)\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
