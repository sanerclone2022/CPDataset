[{"authorTime":"2018-11-05 23:57:50","codes":[{"authorDate":"2018-11-05 23:57:50","commitOrder":1,"curCode":"  private Enumerator<T> enumeratorBasedOnStatement() {\n    Connection connection = null;\n    Statement statement = null;\n    try {\n      connection = dataSource.getConnection();\n      statement = connection.createStatement();\n      setTimeoutIfPossible(statement);\n      if (statement.execute(sql)) {\n        final ResultSet resultSet = statement.getResultSet();\n        statement = null;\n        connection = null;\n        return new ResultSetEnumerator<>(resultSet, rowBuilderFactory);\n      } else {\n        Integer updateCount = statement.getUpdateCount();\n        return Linq4j.singletonEnumerator((T) updateCount);\n      }\n    } catch (SQLException e) {\n      throw Static.RESOURCE.exceptionWhilePerformingQueryOnJdbcSubSchema(sql)\n          .ex(e);\n    } finally {\n      closeIfPossible(connection, statement);\n    }\n  }\n","date":"2018-11-19 08:15:42","endLine":261,"groupId":"3391","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"enumeratorBasedOnStatement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/52/c11f9aaf752cea367ae921c04a20e5e6da5488.src","preCode":"  private Enumerator<T> enumeratorBasedOnStatement() {\n    Connection connection = null;\n    Statement statement = null;\n    try {\n      connection = dataSource.getConnection();\n      statement = connection.createStatement();\n      setTimeoutIfPossible(statement);\n      if (statement.execute(sql)) {\n        final ResultSet resultSet = statement.getResultSet();\n        statement = null;\n        connection = null;\n        return new ResultSetEnumerator<>(resultSet, rowBuilderFactory);\n      } else {\n        Integer updateCount = statement.getUpdateCount();\n        return Linq4j.singletonEnumerator((T) updateCount);\n      }\n    } catch (SQLException e) {\n      throw Static.RESOURCE.exceptionWhilePerformingQueryOnJdbcSubSchema(sql)\n          .ex(e);\n    } finally {\n      closeIfPossible(connection, statement);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"B"},{"authorDate":"2018-11-05 23:57:50","commitOrder":1,"curCode":"  private Enumerator<T> enumeratorBasedOnPreparedStatement() {\n    Connection connection = null;\n    PreparedStatement preparedStatement = null;\n    try {\n      connection = dataSource.getConnection();\n      preparedStatement = connection.prepareStatement(sql);\n      setTimeoutIfPossible(preparedStatement);\n      preparedStatementEnricher.enrich(preparedStatement);\n      if (preparedStatement.execute()) {\n        final ResultSet resultSet = preparedStatement.getResultSet();\n        preparedStatement = null;\n        connection = null;\n        return new ResultSetEnumerator<>(resultSet, rowBuilderFactory);\n      } else {\n        Integer updateCount = preparedStatement.getUpdateCount();\n        return Linq4j.singletonEnumerator((T) updateCount);\n      }\n    } catch (SQLException e) {\n      throw Static.RESOURCE.exceptionWhilePerformingQueryOnJdbcSubSchema(sql)\n          .ex(e);\n    } finally {\n      closeIfPossible(connection, preparedStatement);\n    }\n  }\n","date":"2018-11-19 08:15:42","endLine":286,"groupId":"1845","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"enumeratorBasedOnPreparedStatement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/52/c11f9aaf752cea367ae921c04a20e5e6da5488.src","preCode":"  private Enumerator<T> enumeratorBasedOnPreparedStatement() {\n    Connection connection = null;\n    PreparedStatement preparedStatement = null;\n    try {\n      connection = dataSource.getConnection();\n      preparedStatement = connection.prepareStatement(sql);\n      setTimeoutIfPossible(preparedStatement);\n      preparedStatementEnricher.enrich(preparedStatement);\n      if (preparedStatement.execute()) {\n        final ResultSet resultSet = preparedStatement.getResultSet();\n        preparedStatement = null;\n        connection = null;\n        return new ResultSetEnumerator<>(resultSet, rowBuilderFactory);\n      } else {\n        Integer updateCount = preparedStatement.getUpdateCount();\n        return Linq4j.singletonEnumerator((T) updateCount);\n      }\n    } catch (SQLException e) {\n      throw Static.RESOURCE.exceptionWhilePerformingQueryOnJdbcSubSchema(sql)\n          .ex(e);\n    } finally {\n      closeIfPossible(connection, preparedStatement);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"B"}],"commitId":"53e15af6c5e8e782b2edcd7f5bf4f5f32225d110","commitMessage":"@@@[CALCITE-563] In JDBC adapter.  push bindable parameters down to the underlying JDBC data source (Vladimir Sitnikov.  Piotr Bojko)\n\nFix up.  moving JdbcPreparedStatementUtils methods into\nResultSetEnumerable.  and fixing some comments and typos. (Julian Hyde)\n\nClose apache/calcite#907\nClose apache/calcite#902\n","date":"2018-11-19 08:15:42","modifiedFileCount":"16","status":"B","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2018-11-05 23:57:50","commitOrder":2,"curCode":"  private Enumerator<T> enumeratorBasedOnStatement() {\n    Connection connection = null;\n    Statement statement = null;\n    try {\n      connection = dataSource.getConnection();\n      statement = connection.createStatement();\n      setTimeoutIfPossible(statement);\n      if (statement.execute(sql)) {\n        final ResultSet resultSet = statement.getResultSet();\n        statement = null;\n        connection = null;\n        return new ResultSetEnumerator<>(resultSet, rowBuilderFactory);\n      } else {\n        Integer updateCount = statement.getUpdateCount();\n        return Linq4j.singletonEnumerator((T) updateCount);\n      }\n    } catch (SQLException e) {\n      throw Static.RESOURCE.exceptionWhilePerformingQueryOnJdbcSubSchema(sql)\n          .ex(e);\n    } finally {\n      closeIfPossible(connection, statement);\n    }\n  }\n","date":"2018-11-19 08:15:42","endLine":261,"groupId":"101640","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"enumeratorBasedOnStatement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/52/c11f9aaf752cea367ae921c04a20e5e6da5488.src","preCode":"  private Enumerator<T> enumeratorBasedOnStatement() {\n    Connection connection = null;\n    Statement statement = null;\n    try {\n      connection = dataSource.getConnection();\n      statement = connection.createStatement();\n      setTimeoutIfPossible(statement);\n      if (statement.execute(sql)) {\n        final ResultSet resultSet = statement.getResultSet();\n        statement = null;\n        connection = null;\n        return new ResultSetEnumerator<>(resultSet, rowBuilderFactory);\n      } else {\n        Integer updateCount = statement.getUpdateCount();\n        return Linq4j.singletonEnumerator((T) updateCount);\n      }\n    } catch (SQLException e) {\n      throw Static.RESOURCE.exceptionWhilePerformingQueryOnJdbcSubSchema(sql)\n          .ex(e);\n    } finally {\n      closeIfPossible(connection, statement);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"N"},{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  private Enumerator<T> enumeratorBasedOnPreparedStatement() {\n    Connection connection = null;\n    PreparedStatement preparedStatement = null;\n    try {\n      connection = dataSource.getConnection();\n      preparedStatement = connection.prepareStatement(sql);\n      setTimeoutIfPossible(preparedStatement);\n      castNonNull(preparedStatementEnricher).enrich(preparedStatement);\n      if (preparedStatement.execute()) {\n        final ResultSet resultSet = preparedStatement.getResultSet();\n        preparedStatement = null;\n        connection = null;\n        return new ResultSetEnumerator<>(resultSet, rowBuilderFactory);\n      } else {\n        Integer updateCount = preparedStatement.getUpdateCount();\n        \r\n        return Linq4j.singletonEnumerator((T) updateCount);\n      }\n    } catch (SQLException e) {\n      throw Static.RESOURCE.exceptionWhilePerformingQueryOnJdbcSubSchema(sql)\n          .ex(e);\n    } finally {\n      closeIfPossible(connection, preparedStatement);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":312,"groupId":"101640","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"enumeratorBasedOnPreparedStatement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/84/defdd5e323d112d1abd81a824df5f9b6919b24.src","preCode":"  private Enumerator<T> enumeratorBasedOnPreparedStatement() {\n    Connection connection = null;\n    PreparedStatement preparedStatement = null;\n    try {\n      connection = dataSource.getConnection();\n      preparedStatement = connection.prepareStatement(sql);\n      setTimeoutIfPossible(preparedStatement);\n      preparedStatementEnricher.enrich(preparedStatement);\n      if (preparedStatement.execute()) {\n        final ResultSet resultSet = preparedStatement.getResultSet();\n        preparedStatement = null;\n        connection = null;\n        return new ResultSetEnumerator<>(resultSet, rowBuilderFactory);\n      } else {\n        Integer updateCount = preparedStatement.getUpdateCount();\n        return Linq4j.singletonEnumerator((T) updateCount);\n      }\n    } catch (SQLException e) {\n      throw Static.RESOURCE.exceptionWhilePerformingQueryOnJdbcSubSchema(sql)\n          .ex(e);\n    } finally {\n      closeIfPossible(connection, preparedStatement);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
