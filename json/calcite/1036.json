[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testCast() {\n    final List<Number> numbers = Arrays.asList((Number) 2, null, 3.14, 5);\n    final Enumerator<Integer> enumerator =\n        Linq4j.asEnumerable(numbers)\n            .cast(Integer.class)\n            .enumerator();\n    checkCast(enumerator);\n  }\n","date":"2014-11-14 09:39:34","endLine":654,"groupId":"10791","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/ce9619e1e3572cbab9672c4293786811c1f2fc.src","preCode":"  @Test public void testCast() {\n    final List<Number> numbers = Arrays.asList((Number) 2, null, 3.14, 5);\n    final Enumerator<Integer> enumerator =\n        Linq4j.asEnumerable(numbers)\n            .cast(Integer.class)\n            .enumerator();\n    checkCast(enumerator);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":647,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testOfType() {\n    final List<Number> numbers = Arrays.asList((Number) 2, null, 3.14, 5);\n    final Enumerator<Integer> enumerator =\n        Linq4j.asEnumerable(numbers)\n            .ofType(Integer.class)\n            .enumerator();\n    checkIterable(enumerator);\n  }\n","date":"2014-11-14 09:39:34","endLine":691,"groupId":"10791","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOfType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/ce9619e1e3572cbab9672c4293786811c1f2fc.src","preCode":"  @Test public void testOfType() {\n    final List<Number> numbers = Arrays.asList((Number) 2, null, 3.14, 5);\n    final Enumerator<Integer> enumerator =\n        Linq4j.asEnumerable(numbers)\n            .ofType(Integer.class)\n            .enumerator();\n    checkIterable(enumerator);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":684,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testCast() {\n    final List<Number> numbers = Arrays.asList((Number) 2, null, 3.14, 5);\n    final Enumerator<Integer> enumerator =\n        Linq4j.asEnumerable(numbers)\n            .cast(Integer.class)\n            .enumerator();\n    checkCast(enumerator);\n  }\n","date":"2020-04-06 04:57:49","endLine":771,"groupId":"1036","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testCast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/176b0c20dace781059f888f45af815a228f4c7.src","preCode":"  @Test public void testCast() {\n    final List<Number> numbers = Arrays.asList((Number) 2, null, 3.14, 5);\n    final Enumerator<Integer> enumerator =\n        Linq4j.asEnumerable(numbers)\n            .cast(Integer.class)\n            .enumerator();\n    checkCast(enumerator);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":764,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testOfType() {\n    final List<Number> numbers = Arrays.asList((Number) 2, null, 3.14, 5);\n    final Enumerator<Integer> enumerator =\n        Linq4j.asEnumerable(numbers)\n            .ofType(Integer.class)\n            .enumerator();\n    checkIterable(enumerator);\n  }\n","date":"2020-04-06 04:57:49","endLine":808,"groupId":"1036","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testOfType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/176b0c20dace781059f888f45af815a228f4c7.src","preCode":"  @Test public void testOfType() {\n    final List<Number> numbers = Arrays.asList((Number) 2, null, 3.14, 5);\n    final Enumerator<Integer> enumerator =\n        Linq4j.asEnumerable(numbers)\n            .ofType(Integer.class)\n            .enumerator();\n    checkIterable(enumerator);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":801,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
