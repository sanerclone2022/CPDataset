[{"authorTime":"2019-02-14 04:35:36","codes":[{"authorDate":"2019-07-26 18:41:29","commitOrder":5,"curCode":"  @Test public void testSelectCount() {\n    final String sql = \"select count(*) as c from \\\"foodmart\\\"\";\n    sql(sql)\n        .returns(input -> {\n          try {\n            assertThat(input.next(), is(true));\n            assertThat(input.getInt(1), is(86829));\n            assertThat(input.getLong(1), is(86829L));\n            assertThat(input.getString(1), is(\"86829\"));\n            assertThat(input.wasNull(), is(false));\n            assertThat(input.next(), is(false));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2019-07-26 18:41:29","endLine":262,"groupId":"4023","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/02/b3ad0d5008a0228c8f3ee8b0550059f0beed2c.src","preCode":"  @Test public void testSelectCount() {\n    final String sql = \"select count(*) as c from \\\"foodmart\\\"\";\n    sql(sql)\n        .returns(input -> {\n          try {\n            assertThat(input.next(), is(true));\n            assertThat(input.getInt(1), is(86829));\n            assertThat(input.getLong(1), is(86829L));\n            assertThat(input.getString(1), is(\"86829\"));\n            assertThat(input.wasNull(), is(false));\n            assertThat(input.next(), is(false));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapter2IT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"B"},{"authorDate":"2019-02-14 04:35:36","commitOrder":5,"curCode":"  @Test public void testSelectCount() {\n    final String sql = \"select count(*) as c from \\\"foodmart\\\"\";\n    sql(sql)\n        .returns(input -> {\n          try {\n            assertThat(input.next(), is(true));\n            assertThat(input.getInt(1), is(86829));\n            assertThat(input.getLong(1), is(86829L));\n            assertThat(input.getString(1), is(\"86829\"));\n            assertThat(input.wasNull(), is(false));\n            assertThat(input.next(), is(false));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2019-02-27 15:04:26","endLine":509,"groupId":"4023","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a6/a5ca5c440ef895917ae95fb4e010ca398216f9.src","preCode":"  @Test public void testSelectCount() {\n    final String sql = \"select count(*) as c from \\\"foodmart\\\"\";\n    sql(sql)\n        .returns(input -> {\n          try {\n            assertThat(input.next(), is(true));\n            assertThat(input.getInt(1), is(86829));\n            assertThat(input.getLong(1), is(86829L));\n            assertThat(input.getString(1), is(\"86829\"));\n            assertThat(input.wasNull(), is(false));\n            assertThat(input.next(), is(false));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":494,"status":"NB"}],"commitId":"689a5bbb14614d3f8eef4a4f7e832c6c02029b3c","commitMessage":"@@@Update stale tests in DruidAdapter\n\n1. Adapt plans based on the improvements in the simplifier and elsewhere.\n2. Rename DruidAdapterIT2 to DruidAdapterIT to be run in integration tests.\n","date":"2019-07-26 18:41:29","modifiedFileCount":"1","status":"M","submitter":"Stamatis Zampetakis"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testSelectCount() {\n    final String sql = \"select count(*) as c from \\\"foodmart\\\"\";\n    sql(sql)\n        .returns(input -> {\n          try {\n            assertThat(input.next(), is(true));\n            assertThat(input.getInt(1), is(86829));\n            assertThat(input.getLong(1), is(86829L));\n            assertThat(input.getString(1), is(\"86829\"));\n            assertThat(input.wasNull(), is(false));\n            assertThat(input.next(), is(false));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2020-04-06 04:57:49","endLine":253,"groupId":"10277","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/fa4337f27a4c651cca27b069aed6b60ee0e782.src","preCode":"  @Test public void testSelectCount() {\n    final String sql = \"select count(*) as c from \\\"foodmart\\\"\";\n    sql(sql)\n        .returns(input -> {\n          try {\n            assertThat(input.next(), is(true));\n            assertThat(input.getInt(1), is(86829));\n            assertThat(input.getLong(1), is(86829L));\n            assertThat(input.getString(1), is(\"86829\"));\n            assertThat(input.wasNull(), is(false));\n            assertThat(input.next(), is(false));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapter2IT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testSelectCount() {\n    final String sql = \"select count(*) as c from \\\"foodmart\\\"\";\n    sql(sql)\n        .returns(input -> {\n          try {\n            assertThat(input.next(), is(true));\n            assertThat(input.getInt(1), is(86829));\n            assertThat(input.getLong(1), is(86829L));\n            assertThat(input.getString(1), is(\"86829\"));\n            assertThat(input.wasNull(), is(false));\n            assertThat(input.next(), is(false));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2020-04-06 04:57:49","endLine":493,"groupId":"10277","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7a/4c255a8931d21fca61278e3f99936a6e0b3678.src","preCode":"  @Test public void testSelectCount() {\n    final String sql = \"select count(*) as c from \\\"foodmart\\\"\";\n    sql(sql)\n        .returns(input -> {\n          try {\n            assertThat(input.next(), is(true));\n            assertThat(input.getInt(1), is(86829));\n            assertThat(input.getLong(1), is(86829L));\n            assertThat(input.getString(1), is(\"86829\"));\n            assertThat(input.wasNull(), is(false));\n            assertThat(input.next(), is(false));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":478,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
