[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testSource() {\n    List<Integer> targets = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.source(targets, 10);\n    assertThat(mapping.getTarget(0), equalTo(3));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(2), equalTo(4));\n    assertThat(mapping.getTargetCount(), equalTo(10));\n    assertThat(mapping.getSourceCount(), equalTo(5));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(integers, equalTo(targets));\n\n    final Mapping inverse = mapping.inverse();\n    assertThat(inverse.toString(),\n        equalTo(\n            \"[size=5, sourceCount=10, targetCount=5, elements=[1:1, 3:0, 4:2, 5:3, 8:4]]\"));\n  }\n","date":"2014-11-14 09:39:34","endLine":150,"groupId":"6656","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/65/a9d61101898b428d11b3bc335784075410cdd7.src","preCode":"  @Test public void testSource() {\n    List<Integer> targets = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.source(targets, 10);\n    assertThat(mapping.getTarget(0), equalTo(3));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(2), equalTo(4));\n    assertThat(mapping.getTargetCount(), equalTo(10));\n    assertThat(mapping.getSourceCount(), equalTo(5));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(integers, equalTo(targets));\n\n    final Mapping inverse = mapping.inverse();\n    assertThat(inverse.toString(),\n        equalTo(\n            \"[size=5, sourceCount=10, targetCount=5, elements=[1:1, 3:0, 4:2, 5:3, 8:4]]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/mapping/MappingTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testTarget() {\n    List<Integer> sources = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.target(sources, 10);\n    assertThat(mapping.getTarget(3), equalTo(0));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(4), equalTo(2));\n    try {\n      final int target = mapping.getTarget(0);\n      fail(\"expected error, got \" + target);\n    } catch (Mappings.NoElementException e) {\n      \r\n    }\n    assertThat(mapping.getTargetCount(), equalTo(5));\n    assertThat(mapping.getSourceCount(), equalTo(10));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(integers,\n        equalTo(Arrays.asList(null, 1, null, 0, 2, 3, null, null, 4, null)));\n  }\n","date":"2014-11-14 09:39:34","endLine":171,"groupId":"9937","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/65/a9d61101898b428d11b3bc335784075410cdd7.src","preCode":"  @Test public void testTarget() {\n    List<Integer> sources = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.target(sources, 10);\n    assertThat(mapping.getTarget(3), equalTo(0));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(4), equalTo(2));\n    try {\n      final int target = mapping.getTarget(0);\n      fail(\"expected error, got \" + target);\n    } catch (Mappings.NoElementException e) {\n      \r\n    }\n    assertThat(mapping.getTargetCount(), equalTo(5));\n    assertThat(mapping.getSourceCount(), equalTo(10));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(integers,\n        equalTo(Arrays.asList(null, 1, null, 0, 2, 3, null, null, 4, null)));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/mapping/MappingTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSource() {\n    List<Integer> targets = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.source(targets, 10);\n    assertThat(mapping.getTarget(0), equalTo(3));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(2), equalTo(4));\n    assertThat(mapping.getTargetCount(), equalTo(10));\n    assertThat(mapping.getSourceCount(), equalTo(5));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(integers, equalTo(targets));\n\n    final Mapping inverse = mapping.inverse();\n    assertThat(inverse.toString(),\n        equalTo(\n            \"[size=5, sourceCount=10, targetCount=5, elements=[1:1, 3:0, 4:2, 5:3, 8:4]]\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":151,"groupId":"6656","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2e/19348644f1ce1a64b2372e0c4d5b47d0c26558.src","preCode":"  @Test public void testSource() {\n    List<Integer> targets = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.source(targets, 10);\n    assertThat(mapping.getTarget(0), equalTo(3));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(2), equalTo(4));\n    assertThat(mapping.getTargetCount(), equalTo(10));\n    assertThat(mapping.getSourceCount(), equalTo(5));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(integers, equalTo(targets));\n\n    final Mapping inverse = mapping.inverse();\n    assertThat(inverse.toString(),\n        equalTo(\n            \"[size=5, sourceCount=10, targetCount=5, elements=[1:1, 3:0, 4:2, 5:3, 8:4]]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/mapping/MappingTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testTarget() {\n    List<Integer> sources = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.target(sources, 10);\n    assertThat(mapping.getTarget(3), equalTo(0));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(4), equalTo(2));\n    try {\n      final int target = mapping.getTarget(0);\n      fail(\"expected error, got \" + target);\n    } catch (Mappings.NoElementException e) {\n      \r\n    }\n    assertThat(mapping.getTargetCount(), equalTo(5));\n    assertThat(mapping.getSourceCount(), equalTo(10));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(integers,\n        equalTo(Arrays.asList(null, 1, null, 0, 2, 3, null, null, 4, null)));\n  }\n","date":"2020-04-06 04:57:49","endLine":172,"groupId":"9937","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2e/19348644f1ce1a64b2372e0c4d5b47d0c26558.src","preCode":"  @Test public void testTarget() {\n    List<Integer> sources = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.target(sources, 10);\n    assertThat(mapping.getTarget(3), equalTo(0));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(4), equalTo(2));\n    try {\n      final int target = mapping.getTarget(0);\n      fail(\"expected error, got \" + target);\n    } catch (Mappings.NoElementException e) {\n      \r\n    }\n    assertThat(mapping.getTargetCount(), equalTo(5));\n    assertThat(mapping.getSourceCount(), equalTo(10));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(integers,\n        equalTo(Arrays.asList(null, 1, null, 0, 2, 3, null, null, 4, null)));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/mapping/MappingTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-03 20:54:28","codes":[{"authorDate":"2020-05-03 20:54:28","commitOrder":3,"curCode":"  @Test void testSource() {\n    List<Integer> targets = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.source(targets, 10);\n    assertThat(mapping.getTarget(0), equalTo(3));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(2), equalTo(4));\n    assertThat(mapping.getTargetCount(), equalTo(10));\n    assertThat(mapping.getSourceCount(), equalTo(5));\n\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTargetOpt(5));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTargetOpt(10));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTarget(10));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTargetOpt(-1));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTarget(-1));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(integers, equalTo(targets));\n\n    final Mapping inverse = mapping.inverse();\n    assertThat(inverse.toString(),\n        equalTo(\n            \"[size=5, sourceCount=10, targetCount=5, elements=[1:1, 3:0, 4:2, 5:3, 8:4]]\"));\n  }\n","date":"2020-05-12 02:28:48","endLine":180,"groupId":"1084","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9b/e59388d5279322366755e101c909a12f13a832.src","preCode":"  @Test void testSource() {\n    List<Integer> targets = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.source(targets, 10);\n    assertThat(mapping.getTarget(0), equalTo(3));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(2), equalTo(4));\n    assertThat(mapping.getTargetCount(), equalTo(10));\n    assertThat(mapping.getSourceCount(), equalTo(5));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(integers, equalTo(targets));\n\n    final Mapping inverse = mapping.inverse();\n    assertThat(inverse.toString(),\n        equalTo(\n            \"[size=5, sourceCount=10, targetCount=5, elements=[1:1, 3:0, 4:2, 5:3, 8:4]]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/mapping/MappingTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2020-05-03 20:54:28","commitOrder":3,"curCode":"  @Test void testTarget() {\n    List<Integer> sources = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.target(sources, 10);\n    assertThat(mapping.getTarget(3), equalTo(0));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(4), equalTo(2));\n\n    assertThrows(Mappings.NoElementException.class, () -> mapping.getTarget(0));\n\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTargetOpt(10));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTarget(10));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTargetOpt(-1));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTarget(-1));\n\n    assertThat(mapping.getTargetCount(), equalTo(5));\n    assertThat(mapping.getSourceCount(), equalTo(10));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(integers,\n        equalTo(Arrays.asList(null, 1, null, 0, 2, 3, null, null, 4, null)));\n  }\n","date":"2020-05-12 02:28:48","endLine":203,"groupId":"9937","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9b/e59388d5279322366755e101c909a12f13a832.src","preCode":"  @Test void testTarget() {\n    List<Integer> sources = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.target(sources, 10);\n    assertThat(mapping.getTarget(3), equalTo(0));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(4), equalTo(2));\n    try {\n      final int target = mapping.getTarget(0);\n      fail(\"expected error, got \" + target);\n    } catch (Mappings.NoElementException e) {\n      \r\n    }\n    assertThat(mapping.getTargetCount(), equalTo(5));\n    assertThat(mapping.getSourceCount(), equalTo(10));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(integers,\n        equalTo(Arrays.asList(null, 1, null, 0, 2, 3, null, null, 4, null)));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/mapping/MappingTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"}],"commitId":"888e8795598395a72b3ff2f6ecff8e488b21ebde","commitMessage":"@@@[CALCITE-3969] Trait keys remapping may throw exception when some trait key is not mapped (Roman Kondakov)\n\nCurrently method RelTrait.apply(Mappings.Mapping) might throw an exception when\ncollation/distribution keys are not covered by mapping. For example when we\napply project\nSELECT name\non input\nid.  name ORDER BY id\nMethod RelTrait.apply(Mappings.Mapping) throws NPE because of internals of\nRexUtil.apply where assumed that all sort keys [0] should be covered by project\nmapping keys name=[1]. And when this assumption is wrong.  the exception is\nthrown.\n\nIn this patch the graceful handling for such situations added for both\ncollation and distribution traits. When collation or distribution cannot be\nderived from the mapping.  RelDistributions#ANY and RelCollations#EMPTY are\nreturned accordingly.\n\nClose #1959\n","date":"2020-05-12 02:28:48","modifiedFileCount":"12","status":"M","submitter":"rkondakov"},{"authorTime":"2020-09-05 04:29:30","codes":[{"authorDate":"2020-09-05 04:29:30","commitOrder":4,"curCode":"  @Test void testSource() {\n    List<Integer> targets = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.source(targets, 10);\n    assertThat(mapping.getTarget(0), equalTo(3));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(2), equalTo(4));\n    assertThat(mapping.getTargetCount(), equalTo(10));\n    assertThat(mapping.getSourceCount(), equalTo(5));\n\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTargetOpt(5));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTargetOpt(10));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTarget(10));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTargetOpt(-1));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTarget(-1));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(\"Mappings.asList\" + mapping + \")\", integers, equalTo(targets));\n    assertThat(\n        \"Mappings.asListNonNull(\" + mapping + \")\",\n        Mappings.asListNonNull(mapping), equalTo(targets));\n\n    final Mapping inverse = mapping.inverse();\n    assertThat(inverse.toString(),\n        equalTo(\n            \"[size=5, sourceCount=10, targetCount=5, elements=[1:1, 3:0, 4:2, 5:3, 8:4]]\"));\n  }\n","date":"2020-09-06 01:16:25","endLine":183,"groupId":"101627","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/42/a41a7c1a61895aac45e1fdc01a3b7cf562a552.src","preCode":"  @Test void testSource() {\n    List<Integer> targets = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.source(targets, 10);\n    assertThat(mapping.getTarget(0), equalTo(3));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(2), equalTo(4));\n    assertThat(mapping.getTargetCount(), equalTo(10));\n    assertThat(mapping.getSourceCount(), equalTo(5));\n\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTargetOpt(5));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTargetOpt(10));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTarget(10));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTargetOpt(-1));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTarget(-1));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(integers, equalTo(targets));\n\n    final Mapping inverse = mapping.inverse();\n    assertThat(inverse.toString(),\n        equalTo(\n            \"[size=5, sourceCount=10, targetCount=5, elements=[1:1, 3:0, 4:2, 5:3, 8:4]]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/mapping/MappingTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2020-09-05 04:29:30","commitOrder":4,"curCode":"  @Test void testTarget() {\n    List<Integer> sources = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.target(sources, 10);\n    assertThat(mapping.getTarget(3), equalTo(0));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(4), equalTo(2));\n\n    assertThrows(Mappings.NoElementException.class, () -> mapping.getTarget(0));\n\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTargetOpt(10));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTarget(10));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTargetOpt(-1));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTarget(-1));\n\n    assertThat(mapping.getTargetCount(), equalTo(5));\n    assertThat(mapping.getSourceCount(), equalTo(10));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(integers,\n        equalTo(Arrays.asList(null, 1, null, 0, 2, 3, null, null, 4, null)));\n\n    \r\n    IllegalArgumentException exception =\n        assertThrows(IllegalArgumentException.class, () ->\n            Mappings.asListNonNull(mapping).get(0));\n    assertThat(exception.getMessage(),\n        equalTo(\"Element 0 is not found in mapping [size=5, sourceCount=10, targetCount=5\"\n            + \", elements=[1:1, 3:0, 4:2, 5:3, 8:4]]\"));\n  }\n","date":"2020-09-06 01:16:25","endLine":214,"groupId":"101627","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/42/a41a7c1a61895aac45e1fdc01a3b7cf562a552.src","preCode":"  @Test void testTarget() {\n    List<Integer> sources = Arrays.asList(3, 1, 4, 5, 8);\n    final Mapping mapping = Mappings.target(sources, 10);\n    assertThat(mapping.getTarget(3), equalTo(0));\n    assertThat(mapping.getTarget(1), equalTo(1));\n    assertThat(mapping.getTarget(4), equalTo(2));\n\n    assertThrows(Mappings.NoElementException.class, () -> mapping.getTarget(0));\n\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTargetOpt(10));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTarget(10));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTargetOpt(-1));\n    assertThrows(IndexOutOfBoundsException.class, () -> mapping.getTarget(-1));\n\n    assertThat(mapping.getTargetCount(), equalTo(5));\n    assertThat(mapping.getSourceCount(), equalTo(10));\n\n    final List<Integer> integers = Mappings.asList(mapping);\n    assertThat(integers,\n        equalTo(Arrays.asList(null, 1, null, 0, 2, 3, null, null, 4, null)));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/mapping/MappingTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"9422fd444f0cb01cf5659045d1bb3bc71b59b73e","commitMessage":"@@@[CALCITE-4226] Add Mappings#asListNonNull as a null-safe alternative for Mappings#asList\n","date":"2020-09-06 01:16:25","modifiedFileCount":"2","status":"M","submitter":"Vladimir Sitnikov"}]
