[{"authorTime":"2016-03-09 13:31:20","codes":[{"authorDate":"2016-03-09 13:31:20","commitOrder":1,"curCode":"    public void onMatch(RelOptRuleCall call) {\n      NoneSingleRel single = call.rel(0);\n      RelNode input = single.getInput();\n      RelNode physInput =\n          convert(input,\n              single.getTraitSet().replace(PHYS_CALLING_CONVENTION));\n      call.transformTo(\n          new PhysSingleRel(single.getCluster(), physInput));\n    }\n","date":"2016-07-08 14:44:51","endLine":203,"groupId":"11760","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onMatch","params":"(RelOptRuleCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/71/3e5c158de947fbbefb7e896e380350b8c10dd6.src","preCode":"    public void onMatch(RelOptRuleCall call) {\n      NoneSingleRel single = call.rel(0);\n      RelNode input = single.getInput();\n      RelNode physInput =\n          convert(input,\n              single.getTraitSet().replace(PHYS_CALLING_CONVENTION));\n      call.transformTo(\n          new PhysSingleRel(single.getCluster(), physInput));\n    }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/PlannerTests.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"B"},{"authorDate":"2016-03-09 13:31:20","commitOrder":1,"curCode":"    public void onMatch(RelOptRuleCall call) {\n      NoneSingleRel single = call.rel(0);\n      RelNode input = single.getInput();\n      RelNode physInput =\n          convert(input,\n              single.getTraitSet()\n                  .replace(PHYS_CALLING_CONVENTION)\n                  .plus(ROOT_COLLATION));\n      call.transformTo(\n          new RootSingleRel(\n              single.getCluster(),\n              physInput));\n    }\n","date":"2016-07-08 14:44:51","endLine":119,"groupId":"342","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onMatch","params":"(RelOptRuleCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ff/8b50d37f270c5c5877157273979a6002901f69.src","preCode":"    public void onMatch(RelOptRuleCall call) {\n      NoneSingleRel single = call.rel(0);\n      RelNode input = single.getInput();\n      RelNode physInput =\n          convert(input,\n              single.getTraitSet()\n                  .replace(PHYS_CALLING_CONVENTION)\n                  .plus(ROOT_COLLATION));\n      call.transformTo(\n          new RootSingleRel(\n              single.getCluster(),\n              physInput));\n    }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/CollationConversionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"}],"commitId":"a3bc0d8ea3c1f320b96a4ab9641becee90a388bc","commitMessage":"@@@[CALCITE-1148] Fix RelTrait conversion (e.g. distribution.  collation) (Minji Kim)\n\nIn the current calcite.  trait conversion is not handled properly.  e.g.\ncollation/distribution traits are not converted (shown by the tests).\nThis patch fixes this issue.\n\nFor each RelCollationTrait.  introduce a new API.  canConvert() which\nshould return true if the conversion from a trait to the other is\npossible.\n\nFor each Convention.  introduce two new APIs.  canConvertConvention()\nreturns true if the convernsion is possible.  and useAbstractConverters()\nreturns true if the trait conversion should be handle via\nAbstractConverters.  By default.  both functions return false.\n\nIn RelSet.  when adding a new RelSubset.  if the convention returns false\nfor useAbstractConverters().  we do not add AbstractConverters.  Even if\nconvention.useAbstractConverters() return true.  we only add\nAbstractConverters if the AbstractConverters can convert (i.e. if\nRelCollationTrait.canConvert() returns true) and the conversion is\nneeded (i.e. if RelTrait.satisfies() returns false).\n\nAdded test cases.\n\nClose apache/calcite#210\n","date":"2016-07-08 14:44:51","modifiedFileCount":"14","status":"B","submitter":"Minji Kim"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-07-09 05:31:40","commitOrder":2,"curCode":"    @Override public void onMatch(RelOptRuleCall call) {\n      NoneSingleRel single = call.rel(0);\n      RelNode input = single.getInput();\n      RelNode physInput =\n          convert(input,\n              single.getTraitSet().replace(PHYS_CALLING_CONVENTION));\n      call.transformTo(\n          new PhysSingleRel(single.getCluster(), physInput));\n    }\n","date":"2020-07-29 02:27:24","endLine":275,"groupId":"101442","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onMatch","params":"(RelOptRuleCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7c/47dcc5f410718a141c2ba003c70e5e67d7a0d5.src","preCode":"    public void onMatch(RelOptRuleCall call) {\n      NoneSingleRel single = call.rel(0);\n      RelNode input = single.getInput();\n      RelNode physInput =\n          convert(input,\n              single.getTraitSet().replace(PHYS_CALLING_CONVENTION));\n      call.transformTo(\n          new PhysSingleRel(single.getCluster(), physInput));\n    }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/PlannerTests.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"},{"authorDate":"2020-07-09 05:31:40","commitOrder":2,"curCode":"    @Override public void onMatch(RelOptRuleCall call) {\n      NoneSingleRel single = call.rel(0);\n      RelNode input = single.getInput();\n      RelNode physInput =\n          convert(input,\n              single.getTraitSet()\n                  .replace(PHYS_CALLING_CONVENTION)\n                  .plus(ROOT_COLLATION));\n      call.transformTo(\n          new RootSingleRel(\n              single.getCluster(),\n              physInput));\n    }\n","date":"2020-07-29 02:27:24","endLine":126,"groupId":"101442","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onMatch","params":"(RelOptRuleCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/02/caab20d3ff9396d827cdd879e8fdfc3044d850.src","preCode":"    public void onMatch(RelOptRuleCall call) {\n      NoneSingleRel single = call.rel(0);\n      RelNode input = single.getInput();\n      RelNode physInput =\n          convert(input,\n              single.getTraitSet()\n                  .replace(PHYS_CALLING_CONVENTION)\n                  .plus(ROOT_COLLATION));\n      call.transformTo(\n          new RootSingleRel(\n              single.getCluster(),\n              physInput));\n    }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/CollationConversionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"998cd83ebe2fcd7ff3ee565299fed6e199269715","commitMessage":"@@@[CALCITE-3923] Refactor how planner rules are parameterized\n\nCreate operands using a builder interface.  OperandBuilder.  and\ndeprecate methods RelOptRule.operand etc.\n\nThe change is backwards compatible.  in the sense that\nexisting rule constructors are deprecated but still work.\nFrom now on.  to create rules.  call RelOptRule.Config.toRule()\n(which calls the rule's (Config) constructor).\n\nSub-classes of ConverterRule are a little different.  They\ndon't need their own sub-class of Config.  You just need to\ncall Config.withRuleFactory to specify the constructor of the\nsub-class of ConverterRule.\n\nMove rule instances into holder classes such as CoreRules. \nMaterializedViewRules. Deprecate existing rule INSTANCE fields\n(to be removed in 1.25). Deprecate previous rule constructors\n(to be removed in 2.0).\n\nDescribe how to write rules in howto and tutorial.\n\nRemove rule instances marked 'deprecated.  to be removed before\n1.25'.\n\nClose apache/calcite#2024\n","date":"2020-07-29 02:27:24","modifiedFileCount":"191","status":"M","submitter":"Julian Hyde"}]
