[{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":5,"curCode":"  @Test public void testContinuedLiteral() {\n    expr(\"'abba'\\n'abba'\")\n        .ok(\"'abba'\\n'abba'\");\n    expr(\"'abba'\\n'0001'\")\n        .ok(\"'abba'\\n'0001'\");\n    expr(\"N'yabba'\\n'dabba'\\n'doo'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'doo'\");\n    expr(\"_iso-8859-1'yabba'\\n'dabba'\\n'don''t'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'don''t'\");\n\n    expr(\"x'01aa'\\n'03ff'\")\n        .ok(\"X'01AA'\\n'03FF'\");\n\n    \r\n    sql(\"x'01aa'\\n^'vvvv'^\")\n        .fails(\"Binary literal string must contain only characters '0' - '9', 'A' - 'F'\");\n  }\n","date":"2019-09-24 02:59:18","endLine":2672,"groupId":"12394","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testContinuedLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testContinuedLiteral() {\n    expr(\"'abba'\\n'abba'\")\n        .ok(\"'abba'\\n'abba'\");\n    expr(\"'abba'\\n'0001'\")\n        .ok(\"'abba'\\n'0001'\");\n    expr(\"N'yabba'\\n'dabba'\\n'doo'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'doo'\");\n    expr(\"_iso-8859-1'yabba'\\n'dabba'\\n'don''t'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'don''t'\");\n\n    expr(\"x'01aa'\\n'03ff'\")\n        .ok(\"X'01AA'\\n'03FF'\");\n\n    \r\n    sql(\"x'01aa'\\n^'vvvv'^\")\n        .fails(\"Binary literal string must contain only characters '0' - '9', 'A' - 'F'\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2656,"status":"B"},{"authorDate":"2019-09-07 07:51:19","commitOrder":5,"curCode":"  @Test public void testTimeDate() {\n    \r\n    expr(\"CURRENT_TIME(3)\")\n        .ok(\"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    expr(\"CURRENT_TIME\")\n        .ok(\"CURRENT_TIME\");\n    expr(\"CURRENT_TIME(x+y)\")\n        .ok(\"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    expr(\"LOCALTIME(3)\")\n        .ok(\"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    expr(\"LOCALTIME\")\n        .ok(\"LOCALTIME\");\n    expr(\"LOCALTIME(x+y)\")\n        .ok(\"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    expr(\"LOCALTIMESTAMP(3)\")\n        .ok(\"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    expr(\"LOCALTIMESTAMP\")\n        .ok(\"LOCALTIMESTAMP\");\n    expr(\"LOCALTIMESTAMP(x+y)\")\n        .ok(\"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    expr(\"CURRENT_DATE(3)\")\n        .ok(\"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    expr(\"CURRENT_DATE\")\n        .ok(\"CURRENT_DATE\");\n\n    \r\n    \r\n\n    \r\n    expr(\"CURRENT_TIMESTAMP(3)\")\n        .ok(\"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    expr(\"CURRENT_TIMESTAMP\")\n        .ok(\"CURRENT_TIMESTAMP\");\n    expr(\"CURRENT_TIMESTAMP(x+y)\")\n        .ok(\"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    expr(\"DATE '2004-12-01'\")\n        .ok(\"DATE '2004-12-01'\");\n\n    \r\n    expr(\"TIME '12:01:01'\")\n        .ok(\"TIME '12:01:01'\");\n    expr(\"TIME '12:01:01.'\")\n        .ok(\"TIME '12:01:01'\");\n    expr(\"TIME '12:01:01.000'\")\n        .ok(\"TIME '12:01:01.000'\");\n    expr(\"TIME '12:01:01.001'\")\n        .ok(\"TIME '12:01:01.001'\");\n    expr(\"TIME '12:01:01.01023456789'\")\n        .ok(\"TIME '12:01:01.01023456789'\");\n\n    \r\n    expr(\"TIMESTAMP '2004-12-01 12:01:01'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.1'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01'\");\n    expr(\"TIMESTAMP  '2004-12-01 12:01:01.010234567890'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01.010234567890'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.01023456789'\").same();\n\n    \r\n    sql(\"^DATE '12/21/99'^\")\n        .fails(\"(?s).*Illegal DATE literal.*\");\n    sql(\"^TIME '1230:33'^\")\n        .fails(\"(?s).*Illegal TIME literal.*\");\n    sql(\"^TIME '12:00:00 PM'^\")\n        .fails(\"(?s).*Illegal TIME literal.*\");\n    sql(\"^TIMESTAMP '12-21-99, 12:30:00'^\")\n        .fails(\"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","date":"2019-09-24 02:59:18","endLine":4216,"groupId":"12394","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testTimeDate() {\n    \r\n    expr(\"CURRENT_TIME(3)\")\n        .ok(\"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    expr(\"CURRENT_TIME\")\n        .ok(\"CURRENT_TIME\");\n    expr(\"CURRENT_TIME(x+y)\")\n        .ok(\"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    expr(\"LOCALTIME(3)\")\n        .ok(\"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    expr(\"LOCALTIME\")\n        .ok(\"LOCALTIME\");\n    expr(\"LOCALTIME(x+y)\")\n        .ok(\"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    expr(\"LOCALTIMESTAMP(3)\")\n        .ok(\"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    expr(\"LOCALTIMESTAMP\")\n        .ok(\"LOCALTIMESTAMP\");\n    expr(\"LOCALTIMESTAMP(x+y)\")\n        .ok(\"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    expr(\"CURRENT_DATE(3)\")\n        .ok(\"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    expr(\"CURRENT_DATE\")\n        .ok(\"CURRENT_DATE\");\n\n    \r\n    \r\n\n    \r\n    expr(\"CURRENT_TIMESTAMP(3)\")\n        .ok(\"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    expr(\"CURRENT_TIMESTAMP\")\n        .ok(\"CURRENT_TIMESTAMP\");\n    expr(\"CURRENT_TIMESTAMP(x+y)\")\n        .ok(\"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    expr(\"DATE '2004-12-01'\")\n        .ok(\"DATE '2004-12-01'\");\n\n    \r\n    expr(\"TIME '12:01:01'\")\n        .ok(\"TIME '12:01:01'\");\n    expr(\"TIME '12:01:01.'\")\n        .ok(\"TIME '12:01:01'\");\n    expr(\"TIME '12:01:01.000'\")\n        .ok(\"TIME '12:01:01.000'\");\n    expr(\"TIME '12:01:01.001'\")\n        .ok(\"TIME '12:01:01.001'\");\n    expr(\"TIME '12:01:01.01023456789'\")\n        .ok(\"TIME '12:01:01.01023456789'\");\n\n    \r\n    expr(\"TIMESTAMP '2004-12-01 12:01:01'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.1'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01'\");\n    expr(\"TIMESTAMP  '2004-12-01 12:01:01.010234567890'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01.010234567890'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.01023456789'\").same();\n\n    \r\n    sql(\"^DATE '12/21/99'^\")\n        .fails(\"(?s).*Illegal DATE literal.*\");\n    sql(\"^TIME '1230:33'^\")\n        .fails(\"(?s).*Illegal TIME literal.*\");\n    sql(\"^TIME '12:00:00 PM'^\")\n        .fails(\"(?s).*Illegal TIME literal.*\");\n    sql(\"^TIMESTAMP '12-21-99, 12:30:00'^\")\n        .fails(\"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4119,"status":"MB"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testContinuedLiteral() {\n    expr(\"'abba'\\n'abba'\")\n        .ok(\"'abba'\\n'abba'\");\n    expr(\"'abba'\\n'0001'\")\n        .ok(\"'abba'\\n'0001'\");\n    expr(\"N'yabba'\\n'dabba'\\n'doo'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'doo'\");\n    expr(\"_iso-8859-1'yabba'\\n'dabba'\\n'don''t'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'don''t'\");\n\n    expr(\"x'01aa'\\n'03ff'\")\n        .ok(\"X'01AA'\\n'03FF'\");\n\n    \r\n    sql(\"x'01aa'\\n^'vvvv'^\")\n        .fails(\"Binary literal string must contain only characters '0' - '9', 'A' - 'F'\");\n  }\n","date":"2020-04-06 04:57:49","endLine":2684,"groupId":"10854","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testContinuedLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testContinuedLiteral() {\n    expr(\"'abba'\\n'abba'\")\n        .ok(\"'abba'\\n'abba'\");\n    expr(\"'abba'\\n'0001'\")\n        .ok(\"'abba'\\n'0001'\");\n    expr(\"N'yabba'\\n'dabba'\\n'doo'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'doo'\");\n    expr(\"_iso-8859-1'yabba'\\n'dabba'\\n'don''t'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'don''t'\");\n\n    expr(\"x'01aa'\\n'03ff'\")\n        .ok(\"X'01AA'\\n'03FF'\");\n\n    \r\n    sql(\"x'01aa'\\n^'vvvv'^\")\n        .fails(\"Binary literal string must contain only characters '0' - '9', 'A' - 'F'\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2668,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testTimeDate() {\n    \r\n    expr(\"CURRENT_TIME(3)\")\n        .ok(\"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    expr(\"CURRENT_TIME\")\n        .ok(\"CURRENT_TIME\");\n    expr(\"CURRENT_TIME(x+y)\")\n        .ok(\"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    expr(\"LOCALTIME(3)\")\n        .ok(\"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    expr(\"LOCALTIME\")\n        .ok(\"LOCALTIME\");\n    expr(\"LOCALTIME(x+y)\")\n        .ok(\"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    expr(\"LOCALTIMESTAMP(3)\")\n        .ok(\"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    expr(\"LOCALTIMESTAMP\")\n        .ok(\"LOCALTIMESTAMP\");\n    expr(\"LOCALTIMESTAMP(x+y)\")\n        .ok(\"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    expr(\"CURRENT_DATE(3)\")\n        .ok(\"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    expr(\"CURRENT_DATE\")\n        .ok(\"CURRENT_DATE\");\n\n    \r\n    \r\n\n    \r\n    expr(\"CURRENT_TIMESTAMP(3)\")\n        .ok(\"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    expr(\"CURRENT_TIMESTAMP\")\n        .ok(\"CURRENT_TIMESTAMP\");\n    expr(\"CURRENT_TIMESTAMP(x+y)\")\n        .ok(\"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    expr(\"DATE '2004-12-01'\")\n        .ok(\"DATE '2004-12-01'\");\n\n    \r\n    expr(\"TIME '12:01:01'\")\n        .ok(\"TIME '12:01:01'\");\n    expr(\"TIME '12:01:01.'\")\n        .ok(\"TIME '12:01:01'\");\n    expr(\"TIME '12:01:01.000'\")\n        .ok(\"TIME '12:01:01.000'\");\n    expr(\"TIME '12:01:01.001'\")\n        .ok(\"TIME '12:01:01.001'\");\n    expr(\"TIME '12:01:01.01023456789'\")\n        .ok(\"TIME '12:01:01.01023456789'\");\n\n    \r\n    expr(\"TIMESTAMP '2004-12-01 12:01:01'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.1'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01'\");\n    expr(\"TIMESTAMP  '2004-12-01 12:01:01.010234567890'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01.010234567890'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.01023456789'\").same();\n\n    \r\n    sql(\"^DATE '12/21/99'^\")\n        .fails(\"(?s).*Illegal DATE literal.*\");\n    sql(\"^TIME '1230:33'^\")\n        .fails(\"(?s).*Illegal TIME literal.*\");\n    sql(\"^TIME '12:00:00 PM'^\")\n        .fails(\"(?s).*Illegal TIME literal.*\");\n    sql(\"^TIMESTAMP '12-21-99, 12:30:00'^\")\n        .fails(\"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","date":"2020-04-06 04:57:49","endLine":4295,"groupId":"10854","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testTimeDate() {\n    \r\n    expr(\"CURRENT_TIME(3)\")\n        .ok(\"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    expr(\"CURRENT_TIME\")\n        .ok(\"CURRENT_TIME\");\n    expr(\"CURRENT_TIME(x+y)\")\n        .ok(\"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    expr(\"LOCALTIME(3)\")\n        .ok(\"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    expr(\"LOCALTIME\")\n        .ok(\"LOCALTIME\");\n    expr(\"LOCALTIME(x+y)\")\n        .ok(\"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    expr(\"LOCALTIMESTAMP(3)\")\n        .ok(\"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    expr(\"LOCALTIMESTAMP\")\n        .ok(\"LOCALTIMESTAMP\");\n    expr(\"LOCALTIMESTAMP(x+y)\")\n        .ok(\"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    expr(\"CURRENT_DATE(3)\")\n        .ok(\"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    expr(\"CURRENT_DATE\")\n        .ok(\"CURRENT_DATE\");\n\n    \r\n    \r\n\n    \r\n    expr(\"CURRENT_TIMESTAMP(3)\")\n        .ok(\"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    expr(\"CURRENT_TIMESTAMP\")\n        .ok(\"CURRENT_TIMESTAMP\");\n    expr(\"CURRENT_TIMESTAMP(x+y)\")\n        .ok(\"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    expr(\"DATE '2004-12-01'\")\n        .ok(\"DATE '2004-12-01'\");\n\n    \r\n    expr(\"TIME '12:01:01'\")\n        .ok(\"TIME '12:01:01'\");\n    expr(\"TIME '12:01:01.'\")\n        .ok(\"TIME '12:01:01'\");\n    expr(\"TIME '12:01:01.000'\")\n        .ok(\"TIME '12:01:01.000'\");\n    expr(\"TIME '12:01:01.001'\")\n        .ok(\"TIME '12:01:01.001'\");\n    expr(\"TIME '12:01:01.01023456789'\")\n        .ok(\"TIME '12:01:01.01023456789'\");\n\n    \r\n    expr(\"TIMESTAMP '2004-12-01 12:01:01'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.1'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01'\");\n    expr(\"TIMESTAMP  '2004-12-01 12:01:01.010234567890'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01.010234567890'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.01023456789'\").same();\n\n    \r\n    sql(\"^DATE '12/21/99'^\")\n        .fails(\"(?s).*Illegal DATE literal.*\");\n    sql(\"^TIME '1230:33'^\")\n        .fails(\"(?s).*Illegal TIME literal.*\");\n    sql(\"^TIME '12:00:00 PM'^\")\n        .fails(\"(?s).*Illegal TIME literal.*\");\n    sql(\"^TIMESTAMP '12-21-99, 12:30:00'^\")\n        .fails(\"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4198,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
