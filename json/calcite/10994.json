[{"authorTime":"2019-02-07 04:06:13","codes":[{"authorDate":"2019-02-07 04:06:13","commitOrder":1,"curCode":"  @Test public void testNoReduceAverage() {\n    final EnumSet<SqlKind> functionsToReduce = EnumSet.noneOf(SqlKind.class);\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(\n          new AggregateReduceFunctionsRule(LogicalAggregate.class,\n            RelFactories.LOGICAL_BUILDER, functionsToReduce))\n        .build();\n    String sql = \"select name, max(name), avg(deptno), min(name)\"\n        + \" from sales.dept group by name\";\n    sql(sql).with(program).checkUnchanged();\n  }\n","date":"2019-04-02 06:08:23","endLine":4373,"groupId":"1643","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoReduceAverage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d0/33818dac9ab8f26bb7119fd06d729edae102a2.src","preCode":"  @Test public void testNoReduceAverage() {\n    final EnumSet<SqlKind> functionsToReduce = EnumSet.noneOf(SqlKind.class);\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(\n          new AggregateReduceFunctionsRule(LogicalAggregate.class,\n            RelFactories.LOGICAL_BUILDER, functionsToReduce))\n        .build();\n    String sql = \"select name, max(name), avg(deptno), min(name)\"\n        + \" from sales.dept group by name\";\n    sql(sql).with(program).checkUnchanged();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4363,"status":"B"},{"authorDate":"2019-02-07 04:06:13","commitOrder":1,"curCode":"  @Test public void testNoReduceSum() {\n    final EnumSet<SqlKind> functionsToReduce = EnumSet.noneOf(SqlKind.class);\n    HepProgram program = new HepProgramBuilder()\n            .addRuleInstance(\n              new AggregateReduceFunctionsRule(LogicalAggregate.class,\n                RelFactories.LOGICAL_BUILDER, functionsToReduce))\n            .build();\n    String sql = \"select name, sum(deptno)\"\n            + \" from sales.dept group by name\";\n    sql(sql).with(program).checkUnchanged();\n  }\n","date":"2019-04-02 06:08:23","endLine":4385,"groupId":"1643","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoReduceSum","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d0/33818dac9ab8f26bb7119fd06d729edae102a2.src","preCode":"  @Test public void testNoReduceSum() {\n    final EnumSet<SqlKind> functionsToReduce = EnumSet.noneOf(SqlKind.class);\n    HepProgram program = new HepProgramBuilder()\n            .addRuleInstance(\n              new AggregateReduceFunctionsRule(LogicalAggregate.class,\n                RelFactories.LOGICAL_BUILDER, functionsToReduce))\n            .build();\n    String sql = \"select name, sum(deptno)\"\n            + \" from sales.dept group by name\";\n    sql(sql).with(program).checkUnchanged();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4375,"status":"B"}],"commitId":"a75a689eff2f1333adc8fb800bdfa077e94da562","commitMessage":"@@@[CALCITE-2820] Avoid reducing certain aggregate functions when\nit is not necessary (Siddharth Teotia)\n","date":"2019-04-02 06:08:23","modifiedFileCount":"2","status":"B","submitter":"siddharth"},{"authorTime":"2019-10-14 20:53:23","codes":[{"authorDate":"2019-10-14 20:53:23","commitOrder":2,"curCode":"  @Test public void testNoReduceAverage() {\n    final EnumSet<SqlKind> functionsToReduce = EnumSet.noneOf(SqlKind.class);\n    final RelOptRule rule = new AggregateReduceFunctionsRule(LogicalAggregate.class,\n        RelFactories.LOGICAL_BUILDER, functionsToReduce);\n    String sql = \"select name, max(name), avg(deptno), min(name)\"\n        + \" from sales.dept group by name\";\n    sql(sql).withRule(rule).checkUnchanged();\n  }\n","date":"2019-10-15 09:37:32","endLine":5890,"groupId":"16603","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoReduceAverage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/51/b671b65dfc7e5613e63058680b48e9da669c6b.src","preCode":"  @Test public void testNoReduceAverage() {\n    final EnumSet<SqlKind> functionsToReduce = EnumSet.noneOf(SqlKind.class);\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(\n          new AggregateReduceFunctionsRule(LogicalAggregate.class,\n            RelFactories.LOGICAL_BUILDER, functionsToReduce))\n        .build();\n    String sql = \"select name, max(name), avg(deptno), min(name)\"\n        + \" from sales.dept group by name\";\n    sql(sql).with(program).checkUnchanged();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5883,"status":"M"},{"authorDate":"2019-10-14 20:53:23","commitOrder":2,"curCode":"  @Test public void testNoReduceSum() {\n    final EnumSet<SqlKind> functionsToReduce = EnumSet.noneOf(SqlKind.class);\n    final RelOptRule rule = new AggregateReduceFunctionsRule(LogicalAggregate.class,\n        RelFactories.LOGICAL_BUILDER, functionsToReduce);\n    String sql = \"select name, sum(deptno)\"\n            + \" from sales.dept group by name\";\n    sql(sql).withRule(rule).checkUnchanged();\n  }\n","date":"2019-10-15 09:37:32","endLine":5899,"groupId":"16603","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoReduceSum","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/51/b671b65dfc7e5613e63058680b48e9da669c6b.src","preCode":"  @Test public void testNoReduceSum() {\n    final EnumSet<SqlKind> functionsToReduce = EnumSet.noneOf(SqlKind.class);\n    HepProgram program = new HepProgramBuilder()\n            .addRuleInstance(\n              new AggregateReduceFunctionsRule(LogicalAggregate.class,\n                RelFactories.LOGICAL_BUILDER, functionsToReduce))\n            .build();\n    String sql = \"select name, sum(deptno)\"\n            + \" from sales.dept group by name\";\n    sql(sql).with(program).checkUnchanged();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5892,"status":"M"}],"commitId":"8da131c08afe67861ced49bc6180a20f66be52fb","commitMessage":"@@@[CALCITE-3410] Simplify RelOptRulesTest and HepPlannerTest by making test methods fluent\n\n* Add method 'Sql.withTester'\n* In RelOptTestBase.  deprecate checkPlanning method\n","date":"2019-10-15 09:37:32","modifiedFileCount":"3","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testNoReduceAverage() {\n    final EnumSet<SqlKind> functionsToReduce = EnumSet.noneOf(SqlKind.class);\n    final RelOptRule rule = new AggregateReduceFunctionsRule(LogicalAggregate.class,\n        RelFactories.LOGICAL_BUILDER, functionsToReduce);\n    String sql = \"select name, max(name), avg(deptno), min(name)\"\n        + \" from sales.dept group by name\";\n    sql(sql).withRule(rule).checkUnchanged();\n  }\n","date":"2020-04-06 04:57:49","endLine":6330,"groupId":"16603","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoReduceAverage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/c56354833d8acfcc210ae25313c78e9332a2ba.src","preCode":"  @Test public void testNoReduceAverage() {\n    final EnumSet<SqlKind> functionsToReduce = EnumSet.noneOf(SqlKind.class);\n    final RelOptRule rule = new AggregateReduceFunctionsRule(LogicalAggregate.class,\n        RelFactories.LOGICAL_BUILDER, functionsToReduce);\n    String sql = \"select name, max(name), avg(deptno), min(name)\"\n        + \" from sales.dept group by name\";\n    sql(sql).withRule(rule).checkUnchanged();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6323,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testNoReduceSum() {\n    final EnumSet<SqlKind> functionsToReduce = EnumSet.noneOf(SqlKind.class);\n    final RelOptRule rule = new AggregateReduceFunctionsRule(LogicalAggregate.class,\n        RelFactories.LOGICAL_BUILDER, functionsToReduce);\n    String sql = \"select name, sum(deptno)\"\n            + \" from sales.dept group by name\";\n    sql(sql).withRule(rule).checkUnchanged();\n  }\n","date":"2020-04-06 04:57:49","endLine":6339,"groupId":"16603","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoReduceSum","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/c56354833d8acfcc210ae25313c78e9332a2ba.src","preCode":"  @Test public void testNoReduceSum() {\n    final EnumSet<SqlKind> functionsToReduce = EnumSet.noneOf(SqlKind.class);\n    final RelOptRule rule = new AggregateReduceFunctionsRule(LogicalAggregate.class,\n        RelFactories.LOGICAL_BUILDER, functionsToReduce);\n    String sql = \"select name, sum(deptno)\"\n            + \" from sales.dept group by name\";\n    sql(sql).withRule(rule).checkUnchanged();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6332,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-07-09 05:31:40","commitOrder":4,"curCode":"  @Test void testNoReduceAverage() {\n    final RelOptRule rule = AggregateReduceFunctionsRule.Config.DEFAULT\n        .withOperandFor(LogicalAggregate.class)\n        .withFunctionsToReduce(EnumSet.noneOf(SqlKind.class))\n        .toRule();\n    String sql = \"select name, max(name), avg(deptno), min(name)\"\n        + \" from sales.dept group by name\";\n    sql(sql).withRule(rule).checkUnchanged();\n  }\n","date":"2020-07-29 02:27:24","endLine":6580,"groupId":"10994","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoReduceAverage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/40/40570b99f5fa273879b44bd2b31dffdf03345c.src","preCode":"  @Test void testNoReduceAverage() {\n    final EnumSet<SqlKind> functionsToReduce = EnumSet.noneOf(SqlKind.class);\n    final RelOptRule rule = new AggregateReduceFunctionsRule(LogicalAggregate.class,\n        RelFactories.LOGICAL_BUILDER, functionsToReduce);\n    String sql = \"select name, max(name), avg(deptno), min(name)\"\n        + \" from sales.dept group by name\";\n    sql(sql).withRule(rule).checkUnchanged();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6572,"status":"M"},{"authorDate":"2020-07-09 05:31:40","commitOrder":4,"curCode":"  @Test void testNoReduceSum() {\n    final RelOptRule rule = AggregateReduceFunctionsRule.Config.DEFAULT\n        .withOperandFor(LogicalAggregate.class)\n        .withFunctionsToReduce(EnumSet.noneOf(SqlKind.class))\n        .toRule();\n    String sql = \"select name, sum(deptno)\"\n            + \" from sales.dept group by name\";\n    sql(sql).withRule(rule).checkUnchanged();\n  }\n","date":"2020-07-29 02:27:24","endLine":6590,"groupId":"10994","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoReduceSum","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/40/40570b99f5fa273879b44bd2b31dffdf03345c.src","preCode":"  @Test void testNoReduceSum() {\n    final EnumSet<SqlKind> functionsToReduce = EnumSet.noneOf(SqlKind.class);\n    final RelOptRule rule = new AggregateReduceFunctionsRule(LogicalAggregate.class,\n        RelFactories.LOGICAL_BUILDER, functionsToReduce);\n    String sql = \"select name, sum(deptno)\"\n            + \" from sales.dept group by name\";\n    sql(sql).withRule(rule).checkUnchanged();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6582,"status":"M"}],"commitId":"998cd83ebe2fcd7ff3ee565299fed6e199269715","commitMessage":"@@@[CALCITE-3923] Refactor how planner rules are parameterized\n\nCreate operands using a builder interface.  OperandBuilder.  and\ndeprecate methods RelOptRule.operand etc.\n\nThe change is backwards compatible.  in the sense that\nexisting rule constructors are deprecated but still work.\nFrom now on.  to create rules.  call RelOptRule.Config.toRule()\n(which calls the rule's (Config) constructor).\n\nSub-classes of ConverterRule are a little different.  They\ndon't need their own sub-class of Config.  You just need to\ncall Config.withRuleFactory to specify the constructor of the\nsub-class of ConverterRule.\n\nMove rule instances into holder classes such as CoreRules. \nMaterializedViewRules. Deprecate existing rule INSTANCE fields\n(to be removed in 1.25). Deprecate previous rule constructors\n(to be removed in 2.0).\n\nDescribe how to write rules in howto and tutorial.\n\nRemove rule instances marked 'deprecated.  to be removed before\n1.25'.\n\nClose apache/calcite#2024\n","date":"2020-07-29 02:27:24","modifiedFileCount":"191","status":"M","submitter":"Julian Hyde"}]
