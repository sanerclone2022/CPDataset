[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(PushFilterPastProjectRule.INSTANCE)\n        .addRuleInstance(PushFilterPastSetOpRule.INSTANCE)\n        .addRuleInstance(FilterToCalcRule.INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(MergeCalcRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n\n            \r\n        .addRuleInstance(RemoveEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(MergeCalcRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n\n    \r\n    \r\n    checkPlanning(program,\n        \"select * from (\\n\"\n        + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n        + \"      substring(x FROM 1 FOR 1) as s\\n\"\n        + \"  from (\\n\"\n        + \"    select 'table' as x from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'view' from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'foreign table' from (values (true))\\n\"\n        + \"  )\\n\"\n        + \") where u = 'TABLE'\");\n  }\n","date":"2014-11-14 09:39:34","endLine":559,"groupId":"9214","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceConstantsCalc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7c/7472d2d5d4789eeef4393d122f6e9fee78781c.src","preCode":"  @Test public void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(PushFilterPastProjectRule.INSTANCE)\n        .addRuleInstance(PushFilterPastSetOpRule.INSTANCE)\n        .addRuleInstance(FilterToCalcRule.INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(MergeCalcRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n\n            \r\n        .addRuleInstance(RemoveEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(MergeCalcRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n\n    \r\n    \r\n    checkPlanning(program,\n        \"select * from (\\n\"\n        + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n        + \"      substring(x FROM 1 FOR 1) as s\\n\"\n        + \"  from (\\n\"\n        + \"    select 'table' as x from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'view' from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'foreign table' from (values (true))\\n\"\n        + \"  )\\n\"\n        + \") where u = 'TABLE'\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":521,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(TableModificationRel.class, false))\n\n            \r\n            \r\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(MergeCalcRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n    checkPlanning(program,\n        \"insert into sales.depts(name) \"\n        + \"select cast(gender as varchar(128)) from sales.emps\");\n  }\n","date":"2014-11-14 09:39:34","endLine":889,"groupId":"16122","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceCastsNullable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7c/7472d2d5d4789eeef4393d122f6e9fee78781c.src","preCode":"  @Test public void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(TableModificationRel.class, false))\n\n            \r\n            \r\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(MergeCalcRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n    checkPlanning(program,\n        \"insert into sales.depts(name) \"\n        + \"select cast(gender as varchar(128)) from sales.emps\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":873,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Test public void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n        .addRuleInstance(FilterSetOpTransposeRule.INSTANCE)\n        .addRuleInstance(FilterToCalcRule.INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n\n            \r\n        .addRuleInstance(EmptyPruneRules.UNION_INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n\n    \r\n    \r\n    checkPlanning(program,\n        \"select * from (\\n\"\n            + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n            + \"      substring(x FROM 1 FOR 1) as s\\n\"\n            + \"  from (\\n\"\n            + \"    select 'table' as x from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'view' from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'foreign table' from (values (true))\\n\"\n            + \"  )\\n\"\n            + \") where u = 'TABLE'\");\n  }\n","date":"2014-11-14 10:22:06","endLine":543,"groupId":"9214","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceConstantsCalc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/038feab2866d358904058ac39f257e1267ddc8.src","preCode":"  @Test public void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(PushFilterPastProjectRule.INSTANCE)\n        .addRuleInstance(PushFilterPastSetOpRule.INSTANCE)\n        .addRuleInstance(FilterToCalcRule.INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(MergeCalcRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n\n            \r\n        .addRuleInstance(RemoveEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(MergeCalcRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n\n    \r\n    \r\n    checkPlanning(program,\n        \"select * from (\\n\"\n        + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n        + \"      substring(x FROM 1 FOR 1) as s\\n\"\n        + \"  from (\\n\"\n        + \"    select 'table' as x from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'view' from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'foreign table' from (values (true))\\n\"\n        + \"  )\\n\"\n        + \") where u = 'TABLE'\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":505,"status":"M"},{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Test public void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(LogicalTableModify.class, false))\n\n            \r\n            \r\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n    checkPlanning(program,\n        \"insert into sales.depts(name) \"\n            + \"select cast(gender as varchar(128)) from sales.emps\");\n  }\n","date":"2014-11-14 10:22:06","endLine":872,"groupId":"16122","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceCastsNullable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/038feab2866d358904058ac39f257e1267ddc8.src","preCode":"  @Test public void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(TableModificationRel.class, false))\n\n            \r\n            \r\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(MergeCalcRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n    checkPlanning(program,\n        \"insert into sales.depts(name) \"\n        + \"select cast(gender as varchar(128)) from sales.emps\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":856,"status":"M"}],"commitId":"a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55","commitMessage":"@@@[CALCITE-306] Standardize code style for \"import package.*;\"\n\nRename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].\n\nMake many inner classes of EnumerableRules (e.g. EnumerableFilter.  EnumerableFilterRule) top-level classes.\n\nApply a consistent formatting convention for string literals split over multiple lines.\n\nRename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.\n\nChange occurrences of \"optiq\" and \"eigenbase\" in java code to \"calcite\".\n","date":"2014-11-14 10:22:06","modifiedFileCount":"1156","status":"M","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2014-11-15 04:26:42","commitOrder":3,"curCode":"  @Test public void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n        .addRuleInstance(FilterSetOpTransposeRule.INSTANCE)\n        .addRuleInstance(FilterToCalcRule.INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n\n            \r\n        .addRuleInstance(PruneEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n\n    \r\n    \r\n    checkPlanning(program,\n        \"select * from (\\n\"\n            + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n            + \"      substring(x FROM 1 FOR 1) as s\\n\"\n            + \"  from (\\n\"\n            + \"    select 'table' as x from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'view' from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'foreign table' from (values (true))\\n\"\n            + \"  )\\n\"\n            + \") where u = 'TABLE'\");\n  }\n","date":"2014-11-15 05:27:12","endLine":543,"groupId":"9214","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceConstantsCalc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/01/4741388b893f3cf5759126e580e10b750be36c.src","preCode":"  @Test public void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n        .addRuleInstance(FilterSetOpTransposeRule.INSTANCE)\n        .addRuleInstance(FilterToCalcRule.INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n\n            \r\n        .addRuleInstance(EmptyPruneRules.UNION_INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n\n    \r\n    \r\n    checkPlanning(program,\n        \"select * from (\\n\"\n            + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n            + \"      substring(x FROM 1 FOR 1) as s\\n\"\n            + \"  from (\\n\"\n            + \"    select 'table' as x from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'view' from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'foreign table' from (values (true))\\n\"\n            + \"  )\\n\"\n            + \") where u = 'TABLE'\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":505,"status":"M"},{"authorDate":"2014-11-14 10:11:34","commitOrder":3,"curCode":"  @Test public void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(LogicalTableModify.class, false))\n\n            \r\n            \r\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n    checkPlanning(program,\n        \"insert into sales.depts(name) \"\n            + \"select cast(gender as varchar(128)) from sales.emps\");\n  }\n","date":"2014-11-14 10:22:06","endLine":872,"groupId":"16122","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceCastsNullable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/038feab2866d358904058ac39f257e1267ddc8.src","preCode":"  @Test public void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(LogicalTableModify.class, false))\n\n            \r\n            \r\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n    checkPlanning(program,\n        \"insert into sales.depts(name) \"\n            + \"select cast(gender as varchar(128)) from sales.emps\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":856,"status":"N"}],"commitId":"71dd68de18644754543442d264b698ea4f164fbc","commitMessage":"@@@ [CALCITE-465] Remove OneRow and Empty relational expressions; Values will suffice\n\n Rename class EmptyRuleRules to PruneEmptyRules.\n","date":"2014-11-15 05:27:12","modifiedFileCount":"17","status":"M","submitter":"Julian Hyde"},{"authorTime":"2017-11-08 19:12:51","codes":[{"authorDate":"2014-11-15 04:26:42","commitOrder":4,"curCode":"  @Test public void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n        .addRuleInstance(FilterSetOpTransposeRule.INSTANCE)\n        .addRuleInstance(FilterToCalcRule.INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n\n            \r\n        .addRuleInstance(PruneEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n\n    \r\n    \r\n    checkPlanning(program,\n        \"select * from (\\n\"\n            + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n            + \"      substring(x FROM 1 FOR 1) as s\\n\"\n            + \"  from (\\n\"\n            + \"    select 'table' as x from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'view' from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'foreign table' from (values (true))\\n\"\n            + \"  )\\n\"\n            + \") where u = 'TABLE'\");\n  }\n","date":"2014-11-15 05:27:12","endLine":543,"groupId":"9214","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceConstantsCalc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/01/4741388b893f3cf5759126e580e10b750be36c.src","preCode":"  @Test public void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n        .addRuleInstance(FilterSetOpTransposeRule.INSTANCE)\n        .addRuleInstance(FilterToCalcRule.INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n\n            \r\n        .addRuleInstance(PruneEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n\n    \r\n    \r\n    checkPlanning(program,\n        \"select * from (\\n\"\n            + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n            + \"      substring(x FROM 1 FOR 1) as s\\n\"\n            + \"  from (\\n\"\n            + \"    select 'table' as x from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'view' from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'foreign table' from (values (true))\\n\"\n            + \"  )\\n\"\n            + \") where u = 'TABLE'\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":505,"status":"N"},{"authorDate":"2017-11-08 19:12:51","commitOrder":4,"curCode":"  @Test public void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(LogicalTableModify.class, false,\n                RelFactories.LOGICAL_BUILDER))\n\n            \r\n            \r\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n    checkPlanning(program,\n        \"insert into sales.depts(name) \"\n            + \"select cast(gender as varchar(128)) from sales.emps\");\n  }\n","date":"2017-11-16 03:48:57","endLine":2227,"groupId":"10154","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceCastsNullable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/c2c6a06f1be68b67c7ad232087a6997f18f1f8.src","preCode":"  @Test public void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(LogicalTableModify.class, false))\n\n            \r\n            \r\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n    checkPlanning(program,\n        \"insert into sales.depts(name) \"\n            + \"select cast(gender as varchar(128)) from sales.emps\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2210,"status":"M"}],"commitId":"d407395e05b5b37e019a44f812aae04540e6f398","commitMessage":"@@@[CALCITE-2043] Use custom RelBuilder implementation in some rules (Volodymyr Vysotskyi)\n\nClose apache/calcite#564\n","date":"2017-11-16 03:48:57","modifiedFileCount":"77","status":"M","submitter":"Volodymyr Vysotskyi"},{"authorTime":"2019-09-29 11:45:05","codes":[{"authorDate":"2014-11-15 04:26:42","commitOrder":5,"curCode":"  @Test public void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n        .addRuleInstance(FilterSetOpTransposeRule.INSTANCE)\n        .addRuleInstance(FilterToCalcRule.INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n\n            \r\n        .addRuleInstance(PruneEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n\n    \r\n    \r\n    checkPlanning(program,\n        \"select * from (\\n\"\n            + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n            + \"      substring(x FROM 1 FOR 1) as s\\n\"\n            + \"  from (\\n\"\n            + \"    select 'table' as x from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'view' from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'foreign table' from (values (true))\\n\"\n            + \"  )\\n\"\n            + \") where u = 'TABLE'\");\n  }\n","date":"2014-11-15 05:27:12","endLine":543,"groupId":"9214","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceConstantsCalc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/01/4741388b893f3cf5759126e580e10b750be36c.src","preCode":"  @Test public void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n        .addRuleInstance(FilterSetOpTransposeRule.INSTANCE)\n        .addRuleInstance(FilterToCalcRule.INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n\n            \r\n        .addRuleInstance(PruneEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n\n    \r\n    \r\n    checkPlanning(program,\n        \"select * from (\\n\"\n            + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n            + \"      substring(x FROM 1 FOR 1) as s\\n\"\n            + \"  from (\\n\"\n            + \"    select 'table' as x from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'view' from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'foreign table' from (values (true))\\n\"\n            + \"  )\\n\"\n            + \") where u = 'TABLE'\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":505,"status":"N"},{"authorDate":"2019-09-29 11:45:05","commitOrder":5,"curCode":"  @Test public void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(LogicalTableModify.class, false,\n                RelFactories.LOGICAL_BUILDER))\n\n            \r\n            \r\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n    checkPlanning(program,\n        \"insert into sales.dept(deptno, name) \"\n            + \"select empno, cast(job as varchar(128)) from sales.empnullables\");\n  }\n","date":"2019-10-04 01:32:51","endLine":3247,"groupId":"10154","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceCastsNullable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4d/7a4b92e5667500556d5d546019166ba914b499.src","preCode":"  @Test public void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(LogicalTableModify.class, false,\n                RelFactories.LOGICAL_BUILDER))\n\n            \r\n            \r\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n    checkPlanning(program,\n        \"insert into sales.depts(name) \"\n            + \"select cast(gender as varchar(128)) from sales.emps\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3230,"status":"M"}],"commitId":"87c5bd29364a23ab3c06f289ffce1300e26e8c46","commitMessage":"@@@[CALCITE-3346] Re-enable some ignored tests in RelOptRuleTests (Wang Yanlin)\n","date":"2019-10-04 01:32:51","modifiedFileCount":"1","status":"M","submitter":"yanlin-Lynn"},{"authorTime":"2019-10-14 20:53:23","codes":[{"authorDate":"2019-10-14 20:53:23","commitOrder":6,"curCode":"  @Test public void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n        .addRuleInstance(FilterSetOpTransposeRule.INSTANCE)\n        .addRuleInstance(FilterToCalcRule.INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n\n            \r\n        .addRuleInstance(PruneEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n\n    \r\n    \r\n    final String sql = \"select * from (\\n\"\n        + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n        + \"      substring(x FROM 1 FOR 1) as s\\n\"\n        + \"  from (\\n\"\n        + \"    select 'table' as x from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'view' from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'foreign table' from (values (true))\\n\"\n        + \"  )\\n\"\n        + \") where u = 'TABLE'\";\n    sql(sql).with(program).check();\n  }\n","date":"2019-10-15 09:37:32","endLine":2531,"groupId":"9214","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceConstantsCalc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/51/b671b65dfc7e5613e63058680b48e9da669c6b.src","preCode":"  @Test public void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n        .addRuleInstance(FilterSetOpTransposeRule.INSTANCE)\n        .addRuleInstance(FilterToCalcRule.INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n\n            \r\n        .addRuleInstance(PruneEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n\n    \r\n    \r\n    checkPlanning(program,\n        \"select * from (\\n\"\n            + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n            + \"      substring(x FROM 1 FOR 1) as s\\n\"\n            + \"  from (\\n\"\n            + \"    select 'table' as x from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'view' from (values (true))\\n\"\n            + \"    union\\n\"\n            + \"    select 'foreign table' from (values (true))\\n\"\n            + \"  )\\n\"\n            + \") where u = 'TABLE'\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2493,"status":"M"},{"authorDate":"2019-10-14 20:53:23","commitOrder":6,"curCode":"  @Test public void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(LogicalTableModify.class, false,\n                RelFactories.LOGICAL_BUILDER))\n\n            \r\n            \r\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n    final String sql = \"insert into sales.dept(deptno, name)\\n\"\n        + \"select empno, cast(job as varchar(128)) from sales.empnullables\";\n    sql(sql).with(program).check();\n  }\n","date":"2019-10-15 09:37:32","endLine":3134,"groupId":"10154","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceCastsNullable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/51/b671b65dfc7e5613e63058680b48e9da669c6b.src","preCode":"  @Test public void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(LogicalTableModify.class, false,\n                RelFactories.LOGICAL_BUILDER))\n\n            \r\n            \r\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n    checkPlanning(program,\n        \"insert into sales.dept(deptno, name) \"\n            + \"select empno, cast(job as varchar(128)) from sales.empnullables\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3117,"status":"M"}],"commitId":"8da131c08afe67861ced49bc6180a20f66be52fb","commitMessage":"@@@[CALCITE-3410] Simplify RelOptRulesTest and HepPlannerTest by making test methods fluent\n\n* Add method 'Sql.withTester'\n* In RelOptTestBase.  deprecate checkPlanning method\n","date":"2019-10-15 09:37:32","modifiedFileCount":"3","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n        .addRuleInstance(FilterSetOpTransposeRule.INSTANCE)\n        .addRuleInstance(FilterToCalcRule.INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n\n            \r\n        .addRuleInstance(PruneEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n\n    \r\n    \r\n    final String sql = \"select * from (\\n\"\n        + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n        + \"      substring(x FROM 1 FOR 1) as s\\n\"\n        + \"  from (\\n\"\n        + \"    select 'table' as x from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'view' from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'foreign table' from (values (true))\\n\"\n        + \"  )\\n\"\n        + \") where u = 'TABLE'\";\n    sql(sql).with(program).check();\n  }\n","date":"2020-04-06 04:57:49","endLine":2642,"groupId":"9214","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceConstantsCalc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/c56354833d8acfcc210ae25313c78e9332a2ba.src","preCode":"  @Test public void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n        .addRuleInstance(FilterSetOpTransposeRule.INSTANCE)\n        .addRuleInstance(FilterToCalcRule.INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n\n            \r\n        .addRuleInstance(PruneEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n\n    \r\n    \r\n    final String sql = \"select * from (\\n\"\n        + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n        + \"      substring(x FROM 1 FOR 1) as s\\n\"\n        + \"  from (\\n\"\n        + \"    select 'table' as x from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'view' from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'foreign table' from (values (true))\\n\"\n        + \"  )\\n\"\n        + \") where u = 'TABLE'\";\n    sql(sql).with(program).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2604,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(LogicalTableModify.class, false,\n                RelFactories.LOGICAL_BUILDER))\n\n            \r\n            \r\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n    final String sql = \"insert into sales.dept(deptno, name)\\n\"\n        + \"select empno, cast(job as varchar(128)) from sales.empnullables\";\n    sql(sql).with(program).check();\n  }\n","date":"2020-04-06 04:57:49","endLine":3482,"groupId":"10154","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceCastsNullable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/c56354833d8acfcc210ae25313c78e9332a2ba.src","preCode":"  @Test public void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(LogicalTableModify.class, false,\n                RelFactories.LOGICAL_BUILDER))\n\n            \r\n            \r\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n    final String sql = \"insert into sales.dept(deptno, name)\\n\"\n        + \"select empno, cast(job as varchar(128)) from sales.empnullables\";\n    sql(sql).with(program).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3465,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 04:45:12","codes":[{"authorDate":"2020-07-09 04:45:12","commitOrder":8,"curCode":"  @Test void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(CoreRules.FILTER_PROJECT_TRANSPOSE)\n        .addRuleInstance(CoreRules.FILTER_SET_OP_TRANSPOSE)\n        .addRuleInstance(CoreRules.FILTER_TO_CALC)\n        .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n        .addRuleInstance(CoreRules.CALC_MERGE)\n        .addRuleInstance(CoreRules.CALC_REDUCE_EXPRESSIONS)\n\n            \r\n        .addRuleInstance(PruneEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n        .addRuleInstance(CoreRules.CALC_MERGE)\n        .addRuleInstance(CoreRules.CALC_REDUCE_EXPRESSIONS)\n        .build();\n\n    \r\n    \r\n    final String sql = \"select * from (\\n\"\n        + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n        + \"      substring(x FROM 1 FOR 1) as s\\n\"\n        + \"  from (\\n\"\n        + \"    select 'table' as x from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'view' from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'foreign table' from (values (true))\\n\"\n        + \"  )\\n\"\n        + \") where u = 'TABLE'\";\n    sql(sql).with(program).check();\n  }\n","date":"2020-07-12 06:58:28","endLine":2757,"groupId":"794","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceConstantsCalc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/d77aee9e74f65d9e26a1ffa96400062e1eb119.src","preCode":"  @Test void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n        .addRuleInstance(FilterSetOpTransposeRule.INSTANCE)\n        .addRuleInstance(FilterToCalcRule.INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n\n            \r\n        .addRuleInstance(PruneEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n\n    \r\n    \r\n    final String sql = \"select * from (\\n\"\n        + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n        + \"      substring(x FROM 1 FOR 1) as s\\n\"\n        + \"  from (\\n\"\n        + \"    select 'table' as x from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'view' from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'foreign table' from (values (true))\\n\"\n        + \"  )\\n\"\n        + \") where u = 'TABLE'\";\n    sql(sql).with(program).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2719,"status":"M"},{"authorDate":"2020-07-09 04:45:12","commitOrder":8,"curCode":"  @Test void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(LogicalTableModify.class, false,\n                RelFactories.LOGICAL_BUILDER))\n\n            \r\n            \r\n        .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n        .addRuleInstance(CoreRules.CALC_MERGE)\n        .addRuleInstance(CoreRules.CALC_REDUCE_EXPRESSIONS)\n        .build();\n    final String sql = \"insert into sales.dept(deptno, name)\\n\"\n        + \"select empno, cast(job as varchar(128)) from sales.empnullables\";\n    sql(sql).with(program).check();\n  }\n","date":"2020-07-12 06:58:28","endLine":3626,"groupId":"5182","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceCastsNullable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/d77aee9e74f65d9e26a1ffa96400062e1eb119.src","preCode":"  @Test void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(LogicalTableModify.class, false,\n                RelFactories.LOGICAL_BUILDER))\n\n            \r\n            \r\n        .addRuleInstance(ProjectToCalcRule.INSTANCE)\n        .addRuleInstance(CalcMergeRule.INSTANCE)\n        .addRuleInstance(ReduceExpressionsRule.CALC_INSTANCE)\n        .build();\n    final String sql = \"insert into sales.dept(deptno, name)\\n\"\n        + \"select empno, cast(job as varchar(128)) from sales.empnullables\";\n    sql(sql).with(program).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3609,"status":"M"}],"commitId":"23b26b6287315cc2cd236e705bb651077488fc5c","commitMessage":"@@@In preparation for [CALCITE-3923] and [CALCITE-4079].  deprecate fields and methods that will be removed between 1.24 and 1.25\n\nAlso.  in RelNode.  change some methods from 'to removed before 2.0'\nto 'to be removed before 1.25'. The methods are sDistinct(). \nisKey(ImmutableBitSet).  getQuery().  getRows().  getVariablesStopped(). \ncomputeSelfCost().  isValid(boolean).  getCollationList().  getChildExps().\n","date":"2020-07-12 06:58:28","modifiedFileCount":"137","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-07-09 05:31:40","commitOrder":9,"curCode":"  @Test void testReduceConstantsCalc() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(CoreRules.FILTER_PROJECT_TRANSPOSE)\n        .addRuleInstance(CoreRules.FILTER_SET_OP_TRANSPOSE)\n        .addRuleInstance(CoreRules.FILTER_TO_CALC)\n        .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n        .addRuleInstance(CoreRules.CALC_MERGE)\n        .addRuleInstance(CoreRules.CALC_REDUCE_EXPRESSIONS)\n\n            \r\n        .addRuleInstance(PruneEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n        .addRuleInstance(CoreRules.CALC_MERGE)\n        .addRuleInstance(CoreRules.CALC_REDUCE_EXPRESSIONS)\n        .build();\n\n    \r\n    \r\n    final String sql = \"select * from (\\n\"\n        + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n        + \"      substring(x FROM 1 FOR 1) as s\\n\"\n        + \"  from (\\n\"\n        + \"    select 'table' as x from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'view' from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'foreign table' from (values (true))\\n\"\n        + \"  )\\n\"\n        + \") where u = 'TABLE'\";\n    sql(sql).with(program).check();\n  }\n","date":"2020-07-29 02:27:24","endLine":2819,"groupId":"794","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceConstantsCalc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/40/40570b99f5fa273879b44bd2b31dffdf03345c.src","preCode":"  @Test void testReduceConstantsCalc() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(CoreRules.FILTER_PROJECT_TRANSPOSE)\n        .addRuleInstance(CoreRules.FILTER_SET_OP_TRANSPOSE)\n        .addRuleInstance(CoreRules.FILTER_TO_CALC)\n        .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n        .addRuleInstance(CoreRules.CALC_MERGE)\n        .addRuleInstance(CoreRules.CALC_REDUCE_EXPRESSIONS)\n\n            \r\n        .addRuleInstance(PruneEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n        .addRuleInstance(CoreRules.CALC_MERGE)\n        .addRuleInstance(CoreRules.CALC_REDUCE_EXPRESSIONS)\n        .build();\n\n    \r\n    \r\n    final String sql = \"select * from (\\n\"\n        + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n        + \"      substring(x FROM 1 FOR 1) as s\\n\"\n        + \"  from (\\n\"\n        + \"    select 'table' as x from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'view' from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'foreign table' from (values (true))\\n\"\n        + \"  )\\n\"\n        + \") where u = 'TABLE'\";\n    sql(sql).with(program).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2781,"status":"M"},{"authorDate":"2020-07-09 05:31:40","commitOrder":9,"curCode":"  @Test void testReduceCastsNullable() {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            CoerceInputsRule.Config.DEFAULT\n                .withCoerceNames(false)\n                .withConsumerRelClass(LogicalTableModify.class)\n                .toRule())\n\n            \r\n            \r\n        .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n        .addRuleInstance(CoreRules.CALC_MERGE)\n        .addRuleInstance(CoreRules.CALC_REDUCE_EXPRESSIONS)\n        .build();\n    final String sql = \"insert into sales.dept(deptno, name)\\n\"\n        + \"select empno, cast(job as varchar(128)) from sales.empnullables\";\n    sql(sql).with(program).check();\n  }\n","date":"2020-07-29 02:27:24","endLine":3707,"groupId":"2838","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceCastsNullable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/40/40570b99f5fa273879b44bd2b31dffdf03345c.src","preCode":"  @Test void testReduceCastsNullable() throws Exception {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            new CoerceInputsRule(LogicalTableModify.class, false,\n                RelFactories.LOGICAL_BUILDER))\n\n            \r\n            \r\n        .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n        .addRuleInstance(CoreRules.CALC_MERGE)\n        .addRuleInstance(CoreRules.CALC_REDUCE_EXPRESSIONS)\n        .build();\n    final String sql = \"insert into sales.dept(deptno, name)\\n\"\n        + \"select empno, cast(job as varchar(128)) from sales.empnullables\";\n    sql(sql).with(program).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3688,"status":"M"}],"commitId":"998cd83ebe2fcd7ff3ee565299fed6e199269715","commitMessage":"@@@[CALCITE-3923] Refactor how planner rules are parameterized\n\nCreate operands using a builder interface.  OperandBuilder.  and\ndeprecate methods RelOptRule.operand etc.\n\nThe change is backwards compatible.  in the sense that\nexisting rule constructors are deprecated but still work.\nFrom now on.  to create rules.  call RelOptRule.Config.toRule()\n(which calls the rule's (Config) constructor).\n\nSub-classes of ConverterRule are a little different.  They\ndon't need their own sub-class of Config.  You just need to\ncall Config.withRuleFactory to specify the constructor of the\nsub-class of ConverterRule.\n\nMove rule instances into holder classes such as CoreRules. \nMaterializedViewRules. Deprecate existing rule INSTANCE fields\n(to be removed in 1.25). Deprecate previous rule constructors\n(to be removed in 2.0).\n\nDescribe how to write rules in howto and tutorial.\n\nRemove rule instances marked 'deprecated.  to be removed before\n1.25'.\n\nClose apache/calcite#2024\n","date":"2020-07-29 02:27:24","modifiedFileCount":"191","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-11-07 15:27:52","commitOrder":10,"curCode":"  @Test void testReduceConstantsCalc() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(CoreRules.FILTER_PROJECT_TRANSPOSE)\n        .addRuleInstance(CoreRules.FILTER_SET_OP_TRANSPOSE)\n        .addRuleInstance(CoreRules.FILTER_TO_CALC)\n        .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n        .addRuleInstance(CoreRules.CALC_MERGE)\n        .addRuleInstance(CoreRules.CALC_REDUCE_EXPRESSIONS)\n\n            \r\n        .addRuleInstance(PruneEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n        .addRuleInstance(CoreRules.CALC_MERGE)\n        .addRuleInstance(CoreRules.CALC_REDUCE_EXPRESSIONS)\n        .build();\n\n    \r\n    \r\n    final String sql = \"select * from (\\n\"\n        + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n        + \"      substring(x FROM 1 FOR 1) as s\\n\"\n        + \"  from (\\n\"\n        + \"    select 'table' as x from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'view' from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'foreign table' from (values (true))\\n\"\n        + \"  )\\n\"\n        + \") where u = 'TABLE'\";\n    sql(sql)\n        .withRelBuilderConfig(c -> c.withSimplifyValues(false))\n        .with(program).check();\n  }\n","date":"2020-11-13 13:42:45","endLine":2674,"groupId":"10990","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceConstantsCalc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fc/0169140dc6f904e287195fdc98dfd936c0c4b9.src","preCode":"  @Test void testReduceConstantsCalc() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    HepProgram program = new HepProgramBuilder()\n        .addRuleInstance(CoreRules.FILTER_PROJECT_TRANSPOSE)\n        .addRuleInstance(CoreRules.FILTER_SET_OP_TRANSPOSE)\n        .addRuleInstance(CoreRules.FILTER_TO_CALC)\n        .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n        .addRuleInstance(CoreRules.CALC_MERGE)\n        .addRuleInstance(CoreRules.CALC_REDUCE_EXPRESSIONS)\n\n            \r\n        .addRuleInstance(PruneEmptyRules.UNION_INSTANCE)\n        .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n        .addRuleInstance(CoreRules.CALC_MERGE)\n        .addRuleInstance(CoreRules.CALC_REDUCE_EXPRESSIONS)\n        .build();\n\n    \r\n    \r\n    final String sql = \"select * from (\\n\"\n        + \"  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,\\n\"\n        + \"      substring(x FROM 1 FOR 1) as s\\n\"\n        + \"  from (\\n\"\n        + \"    select 'table' as x from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'view' from (values (true))\\n\"\n        + \"    union\\n\"\n        + \"    select 'foreign table' from (values (true))\\n\"\n        + \"  )\\n\"\n        + \") where u = 'TABLE'\";\n    sql(sql).with(program).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2634,"status":"M"},{"authorDate":"2020-07-09 05:31:40","commitOrder":10,"curCode":"  @Test void testReduceCastsNullable() {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            CoerceInputsRule.Config.DEFAULT\n                .withCoerceNames(false)\n                .withConsumerRelClass(LogicalTableModify.class)\n                .toRule())\n\n            \r\n            \r\n        .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n        .addRuleInstance(CoreRules.CALC_MERGE)\n        .addRuleInstance(CoreRules.CALC_REDUCE_EXPRESSIONS)\n        .build();\n    final String sql = \"insert into sales.dept(deptno, name)\\n\"\n        + \"select empno, cast(job as varchar(128)) from sales.empnullables\";\n    sql(sql).with(program).check();\n  }\n","date":"2020-07-29 02:27:24","endLine":3707,"groupId":"10990","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceCastsNullable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/40/40570b99f5fa273879b44bd2b31dffdf03345c.src","preCode":"  @Test void testReduceCastsNullable() {\n    HepProgram program = new HepProgramBuilder()\n\n        \r\n        .addRuleInstance(\n            CoerceInputsRule.Config.DEFAULT\n                .withCoerceNames(false)\n                .withConsumerRelClass(LogicalTableModify.class)\n                .toRule())\n\n            \r\n            \r\n        .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n        .addRuleInstance(CoreRules.CALC_MERGE)\n        .addRuleInstance(CoreRules.CALC_REDUCE_EXPRESSIONS)\n        .build();\n    final String sql = \"insert into sales.dept(deptno, name)\\n\"\n        + \"select empno, cast(job as varchar(128)) from sales.empnullables\";\n    sql(sql).with(program).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3688,"status":"N"}],"commitId":"ff4c16d1ea2192435e543fc9572ae3a44decbf79","commitMessage":"@@@[CALCITE-4383] In RelBuilder.  optimize 'VALUES ... UNION ALL ... VALUES' to a single 'VALUES' with multiple rows\n","date":"2020-11-13 13:42:45","modifiedFileCount":"8","status":"M","submitter":"Julian Hyde"}]
