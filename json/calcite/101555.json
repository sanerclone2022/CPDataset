[{"authorTime":"2018-03-30 02:18:34","codes":[{"authorDate":"2019-07-13 05:33:12","commitOrder":3,"curCode":"  @Test public void testHaving4() {\n    final String query = \"select \\\"product_id\\\"\\n\"\n        + \"from (\\n\"\n        + \"  select \\\"product_id\\\", avg(\\\"gross_weight\\\") as agw\\n\"\n        + \"  from \\\"product\\\"\\n\"\n        + \"  where \\\"net_weight\\\" < 100\\n\"\n        + \"  group by \\\"product_id\\\")\\n\"\n        + \"where agw > 50\\n\"\n        + \"group by \\\"product_id\\\"\\n\"\n        + \"having avg(agw) > 60\\n\";\n    final String expected = \"SELECT \\\"product_id\\\"\\n\"\n        + \"FROM (SELECT \\\"product_id\\\", AVG(\\\"gross_weight\\\") AS \\\"AGW\\\"\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\\n\"\n        + \"WHERE \\\"net_weight\\\" < 100\\n\"\n        + \"GROUP BY \\\"product_id\\\"\\n\"\n        + \"HAVING AVG(\\\"gross_weight\\\") > 50) AS \\\"t2\\\"\\n\"\n        + \"GROUP BY \\\"product_id\\\"\\n\"\n        + \"HAVING AVG(\\\"AGW\\\") > 60\";\n    sql(query).ok(expected);\n  }\n","date":"2019-08-04 04:30:59","endLine":759,"groupId":"11574","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHaving4","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f0/13e1f68a2a52011a4203cf335c9f9466f9b7fc.src","preCode":"  @Test public void testHaving4() {\n    final String query = \"select \\\"product_id\\\"\\n\"\n        + \"from (\\n\"\n        + \"  select \\\"product_id\\\", avg(\\\"gross_weight\\\") as agw\\n\"\n        + \"  from \\\"product\\\"\\n\"\n        + \"  where \\\"net_weight\\\" < 100\\n\"\n        + \"  group by \\\"product_id\\\")\\n\"\n        + \"where agw > 50\\n\"\n        + \"group by \\\"product_id\\\"\\n\"\n        + \"having avg(agw) > 60\\n\";\n    final String expected = \"SELECT \\\"product_id\\\"\\n\"\n        + \"FROM (SELECT \\\"product_id\\\", AVG(\\\"gross_weight\\\") AS \\\"AGW\\\"\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\\n\"\n        + \"WHERE \\\"net_weight\\\" < 100\\n\"\n        + \"GROUP BY \\\"product_id\\\"\\n\"\n        + \"HAVING AVG(\\\"gross_weight\\\") > 50) AS \\\"t2\\\"\\n\"\n        + \"GROUP BY \\\"product_id\\\"\\n\"\n        + \"HAVING AVG(\\\"AGW\\\") > 60\";\n    sql(query).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":740,"status":"B"},{"authorDate":"2018-03-30 02:18:34","commitOrder":3,"curCode":"  @Test public void testSimpleJoin() {\n    String query = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"join \\\"product_class\\\" as pc\\n\"\n        + \"  on p.\\\"product_class_id\\\" = pc.\\\"product_class_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and pc.\\\"product_department\\\" = 'Snacks'\\n\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"sales_fact_1997\\\"\\n\"\n        + \"INNER JOIN \\\"foodmart\\\".\\\"customer\\\" \"\n        + \"ON \\\"sales_fact_1997\\\".\\\"customer_id\\\" = \\\"customer\\\"\"\n        + \".\\\"customer_id\\\"\\n\"\n        + \"INNER JOIN \\\"foodmart\\\".\\\"product\\\" \"\n        + \"ON \\\"sales_fact_1997\\\".\\\"product_id\\\" = \\\"product\\\".\\\"product_id\\\"\\n\"\n        + \"INNER JOIN \\\"foodmart\\\".\\\"product_class\\\" \"\n        + \"ON \\\"product\\\".\\\"product_class_id\\\" = \\\"product_class\\\"\"\n        + \".\\\"product_class_id\\\"\\n\"\n        + \"WHERE \\\"customer\\\".\\\"city\\\" = 'San Francisco' AND \"\n        + \"\\\"product_class\\\".\\\"product_department\\\" = 'Snacks'\";\n    sql(query).ok(expected);\n  }\n","date":"2018-04-24 01:29:52","endLine":684,"groupId":"10555","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8d/daaa787b67715c7eb0a4e7987028f96491204a.src","preCode":"  @Test public void testSimpleJoin() {\n    String query = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"join \\\"product_class\\\" as pc\\n\"\n        + \"  on p.\\\"product_class_id\\\" = pc.\\\"product_class_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and pc.\\\"product_department\\\" = 'Snacks'\\n\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"sales_fact_1997\\\"\\n\"\n        + \"INNER JOIN \\\"foodmart\\\".\\\"customer\\\" \"\n        + \"ON \\\"sales_fact_1997\\\".\\\"customer_id\\\" = \\\"customer\\\"\"\n        + \".\\\"customer_id\\\"\\n\"\n        + \"INNER JOIN \\\"foodmart\\\".\\\"product\\\" \"\n        + \"ON \\\"sales_fact_1997\\\".\\\"product_id\\\" = \\\"product\\\".\\\"product_id\\\"\\n\"\n        + \"INNER JOIN \\\"foodmart\\\".\\\"product_class\\\" \"\n        + \"ON \\\"product\\\".\\\"product_class_id\\\" = \\\"product_class\\\"\"\n        + \".\\\"product_class_id\\\"\\n\"\n        + \"WHERE \\\"customer\\\".\\\"city\\\" = 'San Francisco' AND \"\n        + \"\\\"product_class\\\".\\\"product_department\\\" = 'Snacks'\";\n    sql(query).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":662,"status":"NB"}],"commitId":"c3108bc1231b2aa4ba25227d225544fef4576508","commitMessage":"@@@[CALCITE-3191] In JDBC adapter for MySQL.  implement Values by generating SELECT without FROM\n\nRevisit SqlDialect methods supportsAliasedValues() and hasImplicitTableAlias();\nmake requiresAliasForFromItems() public (was protected). \nand add List<String> getSingleRowTableName().\n","date":"2019-08-04 04:30:59","modifiedFileCount":"7","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testHaving4() {\n    final String query = \"select \\\"product_id\\\"\\n\"\n        + \"from (\\n\"\n        + \"  select \\\"product_id\\\", avg(\\\"gross_weight\\\") as agw\\n\"\n        + \"  from \\\"product\\\"\\n\"\n        + \"  where \\\"net_weight\\\" < 100\\n\"\n        + \"  group by \\\"product_id\\\")\\n\"\n        + \"where agw > 50\\n\"\n        + \"group by \\\"product_id\\\"\\n\"\n        + \"having avg(agw) > 60\\n\";\n    final String expected = \"SELECT \\\"product_id\\\"\\n\"\n        + \"FROM (SELECT \\\"product_id\\\", AVG(\\\"gross_weight\\\") AS \\\"AGW\\\"\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\\n\"\n        + \"WHERE \\\"net_weight\\\" < 100\\n\"\n        + \"GROUP BY \\\"product_id\\\"\\n\"\n        + \"HAVING AVG(\\\"gross_weight\\\") > 50) AS \\\"t2\\\"\\n\"\n        + \"GROUP BY \\\"product_id\\\"\\n\"\n        + \"HAVING AVG(\\\"AGW\\\") > 60\";\n    sql(query).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":1034,"groupId":"101555","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testHaving4","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testHaving4() {\n    final String query = \"select \\\"product_id\\\"\\n\"\n        + \"from (\\n\"\n        + \"  select \\\"product_id\\\", avg(\\\"gross_weight\\\") as agw\\n\"\n        + \"  from \\\"product\\\"\\n\"\n        + \"  where \\\"net_weight\\\" < 100\\n\"\n        + \"  group by \\\"product_id\\\")\\n\"\n        + \"where agw > 50\\n\"\n        + \"group by \\\"product_id\\\"\\n\"\n        + \"having avg(agw) > 60\\n\";\n    final String expected = \"SELECT \\\"product_id\\\"\\n\"\n        + \"FROM (SELECT \\\"product_id\\\", AVG(\\\"gross_weight\\\") AS \\\"AGW\\\"\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\\n\"\n        + \"WHERE \\\"net_weight\\\" < 100\\n\"\n        + \"GROUP BY \\\"product_id\\\"\\n\"\n        + \"HAVING AVG(\\\"gross_weight\\\") > 50) AS \\\"t2\\\"\\n\"\n        + \"GROUP BY \\\"product_id\\\"\\n\"\n        + \"HAVING AVG(\\\"AGW\\\") > 60\";\n    sql(query).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1015,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testSimpleJoin() {\n    String query = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"join \\\"product_class\\\" as pc\\n\"\n        + \"  on p.\\\"product_class_id\\\" = pc.\\\"product_class_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and pc.\\\"product_department\\\" = 'Snacks'\\n\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"sales_fact_1997\\\"\\n\"\n        + \"INNER JOIN \\\"foodmart\\\".\\\"customer\\\" \"\n        + \"ON \\\"sales_fact_1997\\\".\\\"customer_id\\\" = \\\"customer\\\"\"\n        + \".\\\"customer_id\\\"\\n\"\n        + \"INNER JOIN \\\"foodmart\\\".\\\"product\\\" \"\n        + \"ON \\\"sales_fact_1997\\\".\\\"product_id\\\" = \\\"product\\\".\\\"product_id\\\"\\n\"\n        + \"INNER JOIN \\\"foodmart\\\".\\\"product_class\\\" \"\n        + \"ON \\\"product\\\".\\\"product_class_id\\\" = \\\"product_class\\\"\"\n        + \".\\\"product_class_id\\\"\\n\"\n        + \"WHERE \\\"customer\\\".\\\"city\\\" = 'San Francisco' AND \"\n        + \"\\\"product_class\\\".\\\"product_department\\\" = 'Snacks'\";\n    sql(query).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":2177,"groupId":"101555","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testSimpleJoin() {\n    String query = \"select *\\n\"\n        + \"from \\\"sales_fact_1997\\\" as s\\n\"\n        + \"join \\\"customer\\\" as c on s.\\\"customer_id\\\" = c.\\\"customer_id\\\"\\n\"\n        + \"join \\\"product\\\" as p on s.\\\"product_id\\\" = p.\\\"product_id\\\"\\n\"\n        + \"join \\\"product_class\\\" as pc\\n\"\n        + \"  on p.\\\"product_class_id\\\" = pc.\\\"product_class_id\\\"\\n\"\n        + \"where c.\\\"city\\\" = 'San Francisco'\\n\"\n        + \"and pc.\\\"product_department\\\" = 'Snacks'\\n\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"sales_fact_1997\\\"\\n\"\n        + \"INNER JOIN \\\"foodmart\\\".\\\"customer\\\" \"\n        + \"ON \\\"sales_fact_1997\\\".\\\"customer_id\\\" = \\\"customer\\\"\"\n        + \".\\\"customer_id\\\"\\n\"\n        + \"INNER JOIN \\\"foodmart\\\".\\\"product\\\" \"\n        + \"ON \\\"sales_fact_1997\\\".\\\"product_id\\\" = \\\"product\\\".\\\"product_id\\\"\\n\"\n        + \"INNER JOIN \\\"foodmart\\\".\\\"product_class\\\" \"\n        + \"ON \\\"product\\\".\\\"product_class_id\\\" = \\\"product_class\\\"\"\n        + \".\\\"product_class_id\\\"\\n\"\n        + \"WHERE \\\"customer\\\".\\\"city\\\" = 'San Francisco' AND \"\n        + \"\\\"product_class\\\".\\\"product_department\\\" = 'Snacks'\";\n    sql(query).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2155,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
