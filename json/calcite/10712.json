[{"authorTime":"2017-08-15 08:46:42","codes":[{"authorDate":"2017-05-02 12:53:12","commitOrder":2,"curCode":"  private void checkTimestamp(RexNode node) {\n    assertThat(node.toString(), is(\"1969-07-21 02:56:15\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof Calendar, is(true));\n    assertThat(literal.getValue2() instanceof Long, is(true));\n    assertThat(literal.getValue3() instanceof Long, is(true));\n    assertThat((Long) literal.getValue2(), is(MOON));\n    assertThat(literal.getValueAs(Calendar.class), notNullValue());\n    assertThat(literal.getValueAs(TimestampString.class), notNullValue());\n  }\n","date":"2017-05-31 23:17:28","endLine":177,"groupId":"3195","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkTimestamp","params":"(RexNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0f/d99f807f46643f69eb23acfc7678e2e304f44a.src","preCode":"  private void checkTimestamp(RexNode node) {\n    assertThat(node.toString(), is(\"1969-07-21 02:56:15\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof Calendar, is(true));\n    assertThat(literal.getValue2() instanceof Long, is(true));\n    assertThat(literal.getValue3() instanceof Long, is(true));\n    assertThat((Long) literal.getValue2(), is(MOON));\n    assertThat(literal.getValueAs(Calendar.class), notNullValue());\n    assertThat(literal.getValueAs(TimestampString.class), notNullValue());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"NB"},{"authorDate":"2017-08-15 08:46:42","commitOrder":2,"curCode":"  private void checkTimestampWithLocalTimeZone(RexNode node) {\n    assertThat(node.toString(), is(\"1969-07-21 02:56:15\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof TimestampString, is(true));\n    assertThat(literal.getValue2() instanceof Long, is(true));\n    assertThat(literal.getValue3() instanceof Long, is(true));\n  }\n","date":"2017-09-06 06:00:36","endLine":250,"groupId":"3195","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkTimestampWithLocalTimeZone","params":"(RexNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/a61fc2e25a84f63f03643c18dd19c51fbcb7de.src","preCode":"  private void checkTimestampWithLocalTimeZone(RexNode node) {\n    assertThat(node.toString(), is(\"1969-07-21 02:56:15\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof TimestampString, is(true));\n    assertThat(literal.getValue2() instanceof Long, is(true));\n    assertThat(literal.getValue3() instanceof Long, is(true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"B"}],"commitId":"939c9a62b4905d2cfffcb4adaefd76a809aa3520","commitMessage":"@@@[CALCITE-1947] Add time/timestamp with local time zone types to optimizer\n\nClose apache/calcite#519\n","date":"2017-09-06 06:00:36","modifiedFileCount":"34","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2019-01-11 16:14:35","codes":[{"authorDate":"2017-05-02 12:53:12","commitOrder":3,"curCode":"  private void checkTimestamp(RexNode node) {\n    assertThat(node.toString(), is(\"1969-07-21 02:56:15\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof Calendar, is(true));\n    assertThat(literal.getValue2() instanceof Long, is(true));\n    assertThat(literal.getValue3() instanceof Long, is(true));\n    assertThat((Long) literal.getValue2(), is(MOON));\n    assertThat(literal.getValueAs(Calendar.class), notNullValue());\n    assertThat(literal.getValueAs(TimestampString.class), notNullValue());\n  }\n","date":"2017-05-31 23:17:28","endLine":177,"groupId":"3195","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkTimestamp","params":"(RexNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0f/d99f807f46643f69eb23acfc7678e2e304f44a.src","preCode":"  private void checkTimestamp(RexNode node) {\n    assertThat(node.toString(), is(\"1969-07-21 02:56:15\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof Calendar, is(true));\n    assertThat(literal.getValue2() instanceof Long, is(true));\n    assertThat(literal.getValue3() instanceof Long, is(true));\n    assertThat((Long) literal.getValue2(), is(MOON));\n    assertThat(literal.getValueAs(Calendar.class), notNullValue());\n    assertThat(literal.getValueAs(TimestampString.class), notNullValue());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"N"},{"authorDate":"2019-01-11 16:14:35","commitOrder":3,"curCode":"  private void checkTimestampWithLocalTimeZone(RexNode node) {\n    assertThat(node.toString(), is(\"1969-07-21 02:56:15:TIMESTAMP_WITH_LOCAL_TIME_ZONE(0)\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof TimestampString, is(true));\n    assertThat(literal.getValue2() instanceof Long, is(true));\n    assertThat(literal.getValue3() instanceof Long, is(true));\n  }\n","date":"2019-02-07 02:23:24","endLine":258,"groupId":"3195","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkTimestampWithLocalTimeZone","params":"(RexNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b8/b30f0a982c1715dc45bc857c9b3ae35e54f0d1.src","preCode":"  private void checkTimestampWithLocalTimeZone(RexNode node) {\n    assertThat(node.toString(), is(\"1969-07-21 02:56:15\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof TimestampString, is(true));\n    assertThat(literal.getValue2() instanceof Long, is(true));\n    assertThat(literal.getValue3() instanceof Long, is(true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"866d855bfb7f95d4e064531fceb0cbf27ed6edff","commitMessage":"@@@[CALCITE-2454] Avoid treating Project(x=1) and Project(x=1) equal in case the type of 1 is int in the first rel and long in the second one\n\nAdd type information to RexLiteral#digest.  ensure planner uses just RelNode#digest for identity\n\nfixes #1002\n","date":"2019-02-07 02:23:24","modifiedFileCount":"28","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-12-14 16:40:32","codes":[{"authorDate":"2020-12-14 16:40:32","commitOrder":4,"curCode":"  private void checkTimestamp(RexLiteral literal) {\n    assertThat(literal.toString(), is(\"1969-07-21 02:56:15\"));\n    assertThat(literal.getValue() instanceof Calendar, is(true));\n    assertThat(literal.getValue2() instanceof Long, is(true));\n    assertThat(literal.getValue3() instanceof Long, is(true));\n    assertThat((Long) literal.getValue2(), is(MOON));\n    assertThat(literal.getValueAs(Calendar.class), notNullValue());\n    assertThat(literal.getValueAs(TimestampString.class), notNullValue());\n  }\n","date":"2020-12-19 05:09:44","endLine":220,"groupId":"10712","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkTimestamp","params":"(RexLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/cf1a324752a26f2b8a1f0a41e0e7d0b314695b.src","preCode":"  private void checkTimestamp(RexNode node) {\n    assertThat(node.toString(), is(\"1969-07-21 02:56:15\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof Calendar, is(true));\n    assertThat(literal.getValue2() instanceof Long, is(true));\n    assertThat(literal.getValue3() instanceof Long, is(true));\n    assertThat((Long) literal.getValue2(), is(MOON));\n    assertThat(literal.getValueAs(Calendar.class), notNullValue());\n    assertThat(literal.getValueAs(TimestampString.class), notNullValue());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2020-12-14 16:40:32","commitOrder":4,"curCode":"  private void checkTimestampWithLocalTimeZone(RexLiteral literal) {\n    assertThat(literal.toString(),\n        is(\"1969-07-21 02:56:15:TIMESTAMP_WITH_LOCAL_TIME_ZONE(0)\"));\n    assertThat(literal.getValue() instanceof TimestampString, is(true));\n    assertThat(literal.getValue2() instanceof Long, is(true));\n    assertThat(literal.getValue3() instanceof Long, is(true));\n  }\n","date":"2020-12-19 05:09:44","endLine":291,"groupId":"10712","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkTimestampWithLocalTimeZone","params":"(RexLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/cf1a324752a26f2b8a1f0a41e0e7d0b314695b.src","preCode":"  private void checkTimestampWithLocalTimeZone(RexNode node) {\n    assertThat(node.toString(), is(\"1969-07-21 02:56:15:TIMESTAMP_WITH_LOCAL_TIME_ZONE(0)\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof TimestampString, is(true));\n    assertThat(literal.getValue2() instanceof Long, is(true));\n    assertThat(literal.getValue3() instanceof Long, is(true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"}],"commitId":"56a86a032ac05ed522846910eea6f884b31820e3","commitMessage":"@@@Refactor: Change return type of RelBuilder.literal from RexNode to RexLiteral\n","date":"2020-12-19 05:09:44","modifiedFileCount":"15","status":"M","submitter":"Julian Hyde"}]
