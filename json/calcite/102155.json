[{"authorTime":"2020-09-30 01:31:14","codes":[{"authorDate":"2020-09-30 01:31:14","commitOrder":1,"curCode":"  private Expression translateCastToTime(RelDataType sourceType, Expression operand) {\n    Expression convert = null;\n    switch (sourceType.getSqlTypeName()) {\n    case CHAR:\n    case VARCHAR:\n      convert =\n          Expressions.call(BuiltInMethod.STRING_TO_TIME.method, operand);\n      break;\n    case TIME_WITH_LOCAL_TIME_ZONE:\n      convert = RexImpTable.optimize2(\n          operand,\n          Expressions.call(\n              BuiltInMethod.TIME_WITH_LOCAL_TIME_ZONE_TO_TIME.method,\n              operand,\n              Expressions.call(BuiltInMethod.TIME_ZONE.method, root)));\n      break;\n    case TIMESTAMP:\n      convert = Expressions.convert_(\n          Expressions.call(\n              BuiltInMethod.FLOOR_MOD.method,\n              operand,\n              Expressions.constant(DateTimeUtils.MILLIS_PER_DAY)),\n          int.class);\n      break;\n    case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n      convert = RexImpTable.optimize2(\n          operand,\n          Expressions.call(\n              BuiltInMethod.TIMESTAMP_WITH_LOCAL_TIME_ZONE_TO_TIME.method,\n              operand,\n              Expressions.call(BuiltInMethod.TIME_ZONE.method, root)));\n      break;\n    default:\n      break;\n    }\n    return convert;\n  }\n","date":"2020-10-07 05:43:06","endLine":631,"groupId":"15414","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"translateCastToTime","params":"(RelDataTypesourceType@Expressionoperand)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/15/ace8f46811d117ab75418179ab96343ae5c789.src","preCode":"  private Expression translateCastToTime(RelDataType sourceType, Expression operand) {\n    Expression convert = null;\n    switch (sourceType.getSqlTypeName()) {\n    case CHAR:\n    case VARCHAR:\n      convert =\n          Expressions.call(BuiltInMethod.STRING_TO_TIME.method, operand);\n      break;\n    case TIME_WITH_LOCAL_TIME_ZONE:\n      convert = RexImpTable.optimize2(\n          operand,\n          Expressions.call(\n              BuiltInMethod.TIME_WITH_LOCAL_TIME_ZONE_TO_TIME.method,\n              operand,\n              Expressions.call(BuiltInMethod.TIME_ZONE.method, root)));\n      break;\n    case TIMESTAMP:\n      convert = Expressions.convert_(\n          Expressions.call(\n              BuiltInMethod.FLOOR_MOD.method,\n              operand,\n              Expressions.constant(DateTimeUtils.MILLIS_PER_DAY)),\n          int.class);\n      break;\n    case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n      convert = RexImpTable.optimize2(\n          operand,\n          Expressions.call(\n              BuiltInMethod.TIMESTAMP_WITH_LOCAL_TIME_ZONE_TO_TIME.method,\n              operand,\n              Expressions.call(BuiltInMethod.TIME_ZONE.method, root)));\n      break;\n    default:\n      break;\n    }\n    return convert;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":595,"status":"B"},{"authorDate":"2020-09-30 01:31:14","commitOrder":1,"curCode":"  private Expression translateCastToDate(RelDataType sourceType, Expression operand) {\n    Expression convert = null;\n    switch (sourceType.getSqlTypeName()) {\n    case CHAR:\n    case VARCHAR:\n      convert =\n          Expressions.call(BuiltInMethod.STRING_TO_DATE.method, operand);\n      break;\n    case TIMESTAMP:\n      convert = Expressions.convert_(\n          Expressions.call(BuiltInMethod.FLOOR_DIV.method,\n              operand, Expressions.constant(DateTimeUtils.MILLIS_PER_DAY)),\n          int.class);\n      break;\n    case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n      convert = RexImpTable.optimize2(\n          operand,\n          Expressions.call(\n              BuiltInMethod.TIMESTAMP_WITH_LOCAL_TIME_ZONE_TO_DATE.method,\n              operand,\n              Expressions.call(BuiltInMethod.TIME_ZONE.method, root)));\n      break;\n    default:\n      break;\n    }\n    return convert;\n  }\n","date":"2020-10-07 05:43:06","endLine":659,"groupId":"15414","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"translateCastToDate","params":"(RelDataTypesourceType@Expressionoperand)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/15/ace8f46811d117ab75418179ab96343ae5c789.src","preCode":"  private Expression translateCastToDate(RelDataType sourceType, Expression operand) {\n    Expression convert = null;\n    switch (sourceType.getSqlTypeName()) {\n    case CHAR:\n    case VARCHAR:\n      convert =\n          Expressions.call(BuiltInMethod.STRING_TO_DATE.method, operand);\n      break;\n    case TIMESTAMP:\n      convert = Expressions.convert_(\n          Expressions.call(BuiltInMethod.FLOOR_DIV.method,\n              operand, Expressions.constant(DateTimeUtils.MILLIS_PER_DAY)),\n          int.class);\n      break;\n    case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n      convert = RexImpTable.optimize2(\n          operand,\n          Expressions.call(\n              BuiltInMethod.TIMESTAMP_WITH_LOCAL_TIME_ZONE_TO_DATE.method,\n              operand,\n              Expressions.call(BuiltInMethod.TIME_ZONE.method, root)));\n      break;\n    default:\n      break;\n    }\n    return convert;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":633,"status":"B"}],"commitId":"1b94f37e888cf2d186362473529e6c147afe0f6e","commitMessage":"@@@[CALCITE-4314] Add missing default branches to switch statement\n\nNote: the changes are mechanical.\nThe intention is to keep the previous behavior and prevent adding new\nnon exchaustive switch statements in the future.\n\nSee https://errorprone.info/bugpattern/MissingCasesInEnumSwitch\n","date":"2020-10-07 05:43:06","modifiedFileCount":"98","status":"B","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  private @Nullable Expression translateCastToTime(RelDataType sourceType, Expression operand) {\n    Expression convert = null;\n    switch (sourceType.getSqlTypeName()) {\n    case CHAR:\n    case VARCHAR:\n      convert =\n          Expressions.call(BuiltInMethod.STRING_TO_TIME.method, operand);\n      break;\n    case TIME_WITH_LOCAL_TIME_ZONE:\n      convert = RexImpTable.optimize2(\n          operand,\n          Expressions.call(\n              BuiltInMethod.TIME_WITH_LOCAL_TIME_ZONE_TO_TIME.method,\n              operand,\n              Expressions.call(BuiltInMethod.TIME_ZONE.method, root)));\n      break;\n    case TIMESTAMP:\n      convert = Expressions.convert_(\n          Expressions.call(\n              BuiltInMethod.FLOOR_MOD.method,\n              operand,\n              Expressions.constant(DateTimeUtils.MILLIS_PER_DAY)),\n          int.class);\n      break;\n    case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n      convert = RexImpTable.optimize2(\n          operand,\n          Expressions.call(\n              BuiltInMethod.TIMESTAMP_WITH_LOCAL_TIME_ZONE_TO_TIME.method,\n              operand,\n              Expressions.call(BuiltInMethod.TIME_ZONE.method, root)));\n      break;\n    default:\n      break;\n    }\n    return convert;\n  }\n","date":"2020-11-30 06:45:33","endLine":636,"groupId":"102155","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"translateCastToTime","params":"(RelDataTypesourceType@Expressionoperand)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ee/78362efd5815b5334cc4d1ed7a5d472c53f7e0.src","preCode":"  private Expression translateCastToTime(RelDataType sourceType, Expression operand) {\n    Expression convert = null;\n    switch (sourceType.getSqlTypeName()) {\n    case CHAR:\n    case VARCHAR:\n      convert =\n          Expressions.call(BuiltInMethod.STRING_TO_TIME.method, operand);\n      break;\n    case TIME_WITH_LOCAL_TIME_ZONE:\n      convert = RexImpTable.optimize2(\n          operand,\n          Expressions.call(\n              BuiltInMethod.TIME_WITH_LOCAL_TIME_ZONE_TO_TIME.method,\n              operand,\n              Expressions.call(BuiltInMethod.TIME_ZONE.method, root)));\n      break;\n    case TIMESTAMP:\n      convert = Expressions.convert_(\n          Expressions.call(\n              BuiltInMethod.FLOOR_MOD.method,\n              operand,\n              Expressions.constant(DateTimeUtils.MILLIS_PER_DAY)),\n          int.class);\n      break;\n    case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n      convert = RexImpTable.optimize2(\n          operand,\n          Expressions.call(\n              BuiltInMethod.TIMESTAMP_WITH_LOCAL_TIME_ZONE_TO_TIME.method,\n              operand,\n              Expressions.call(BuiltInMethod.TIME_ZONE.method, root)));\n      break;\n    default:\n      break;\n    }\n    return convert;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":600,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  private @Nullable Expression translateCastToDate(RelDataType sourceType, Expression operand) {\n    Expression convert = null;\n    switch (sourceType.getSqlTypeName()) {\n    case CHAR:\n    case VARCHAR:\n      convert =\n          Expressions.call(BuiltInMethod.STRING_TO_DATE.method, operand);\n      break;\n    case TIMESTAMP:\n      convert = Expressions.convert_(\n          Expressions.call(BuiltInMethod.FLOOR_DIV.method,\n              operand, Expressions.constant(DateTimeUtils.MILLIS_PER_DAY)),\n          int.class);\n      break;\n    case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n      convert = RexImpTable.optimize2(\n          operand,\n          Expressions.call(\n              BuiltInMethod.TIMESTAMP_WITH_LOCAL_TIME_ZONE_TO_DATE.method,\n              operand,\n              Expressions.call(BuiltInMethod.TIME_ZONE.method, root)));\n      break;\n    default:\n      break;\n    }\n    return convert;\n  }\n","date":"2020-11-30 06:45:33","endLine":664,"groupId":"102155","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"translateCastToDate","params":"(RelDataTypesourceType@Expressionoperand)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ee/78362efd5815b5334cc4d1ed7a5d472c53f7e0.src","preCode":"  private Expression translateCastToDate(RelDataType sourceType, Expression operand) {\n    Expression convert = null;\n    switch (sourceType.getSqlTypeName()) {\n    case CHAR:\n    case VARCHAR:\n      convert =\n          Expressions.call(BuiltInMethod.STRING_TO_DATE.method, operand);\n      break;\n    case TIMESTAMP:\n      convert = Expressions.convert_(\n          Expressions.call(BuiltInMethod.FLOOR_DIV.method,\n              operand, Expressions.constant(DateTimeUtils.MILLIS_PER_DAY)),\n          int.class);\n      break;\n    case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n      convert = RexImpTable.optimize2(\n          operand,\n          Expressions.call(\n              BuiltInMethod.TIMESTAMP_WITH_LOCAL_TIME_ZONE_TO_DATE.method,\n              operand,\n              Expressions.call(BuiltInMethod.TIME_ZONE.method, root)));\n      break;\n    default:\n      break;\n    }\n    return convert;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":638,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
