[{"authorTime":"2017-06-23 22:41:48","codes":[{"authorDate":"2017-06-23 22:41:48","commitOrder":1,"curCode":"  @Override public RelDataTypePrecedenceList getPrecedenceList() {\n    return new RelDataTypePrecedenceList() {\n      public boolean containsType(RelDataType type) {\n        return type.getSqlTypeName() == getSqlTypeName()\n            && type.getComponentType() != null\n            && getComponentType().getPrecedenceList().containsType(\n                type.getComponentType());\n      }\n\n      public int compareTypePrecedence(RelDataType type1, RelDataType type2) {\n        if (!containsType(type1)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type1);\n        }\n        if (!containsType(type2)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type2);\n        }\n        return getComponentType().getPrecedenceList()\n            .compareTypePrecedence(type1.getComponentType(), type2.getComponentType());\n      }\n    };\n  }\n","date":"2017-07-01 04:52:18","endLine":93,"groupId":"10920","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getPrecedenceList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/7671609cd5a5f601af4e1f6d905afc4c35460e.src","preCode":"  @Override public RelDataTypePrecedenceList getPrecedenceList() {\n    return new RelDataTypePrecedenceList() {\n      public boolean containsType(RelDataType type) {\n        return type.getSqlTypeName() == getSqlTypeName()\n            && type.getComponentType() != null\n            && getComponentType().getPrecedenceList().containsType(\n                type.getComponentType());\n      }\n\n      public int compareTypePrecedence(RelDataType type1, RelDataType type2) {\n        if (!containsType(type1)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type1);\n        }\n        if (!containsType(type2)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type2);\n        }\n        return getComponentType().getPrecedenceList()\n            .compareTypePrecedence(type1.getComponentType(), type2.getComponentType());\n      }\n    };\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/MultisetSqlType.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"},{"authorDate":"2017-06-23 22:41:48","commitOrder":1,"curCode":"  @Override public RelDataTypePrecedenceList getPrecedenceList() {\n    return new RelDataTypePrecedenceList() {\n      public boolean containsType(RelDataType type) {\n        return type.getSqlTypeName() == getSqlTypeName()\n            && type.getComponentType() != null\n            && getComponentType().getPrecedenceList().containsType(\n                type.getComponentType());\n      }\n\n      public int compareTypePrecedence(RelDataType type1, RelDataType type2) {\n        if (!containsType(type1)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type1);\n        }\n        if (!containsType(type2)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type2);\n        }\n        return getComponentType().getPrecedenceList()\n            .compareTypePrecedence(type1.getComponentType(), type2.getComponentType());\n      }\n    };\n  }\n","date":"2017-07-01 04:52:18","endLine":87,"groupId":"10920","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getPrecedenceList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c3/ae782c9fa1f6c744718f24e5859ca2a52502cd.src","preCode":"  @Override public RelDataTypePrecedenceList getPrecedenceList() {\n    return new RelDataTypePrecedenceList() {\n      public boolean containsType(RelDataType type) {\n        return type.getSqlTypeName() == getSqlTypeName()\n            && type.getComponentType() != null\n            && getComponentType().getPrecedenceList().containsType(\n                type.getComponentType());\n      }\n\n      public int compareTypePrecedence(RelDataType type1, RelDataType type2) {\n        if (!containsType(type1)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type1);\n        }\n        if (!containsType(type2)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type2);\n        }\n        return getComponentType().getPrecedenceList()\n            .compareTypePrecedence(type1.getComponentType(), type2.getComponentType());\n      }\n    };\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/ArraySqlType.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"}],"commitId":"319e888f792f1f416cbddbf77f02fd167195eef2","commitMessage":"@@@[CALCITE-1834] Allow user-defined functions to have arguments that are ARRAY or MULTISET (Ankit Singhal)\n\nImplement precedence list for Array and Multiset\n\nClose apache/calcite#469\n","date":"2017-07-01 04:52:18","modifiedFileCount":"6","status":"B","submitter":"Ankit Singhal"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":2,"curCode":"  @Override public RelDataTypePrecedenceList getPrecedenceList() {\n    return new RelDataTypePrecedenceList() {\n      @Override public boolean containsType(RelDataType type) {\n        return type.getSqlTypeName() == getSqlTypeName()\n            && type.getComponentType() != null\n            && getComponentType().getPrecedenceList().containsType(\n                type.getComponentType());\n      }\n\n      @Override public int compareTypePrecedence(RelDataType type1, RelDataType type2) {\n        if (!containsType(type1)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type1);\n        }\n        if (!containsType(type2)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type2);\n        }\n        return getComponentType().getPrecedenceList()\n            .compareTypePrecedence(type1.getComponentType(), type2.getComponentType());\n      }\n    };\n  }\n","date":"2020-10-07 05:42:47","endLine":93,"groupId":"9111","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getPrecedenceList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1b/b70eef390234e237b525ca956b44fbc6bdc295.src","preCode":"  @Override public RelDataTypePrecedenceList getPrecedenceList() {\n    return new RelDataTypePrecedenceList() {\n      public boolean containsType(RelDataType type) {\n        return type.getSqlTypeName() == getSqlTypeName()\n            && type.getComponentType() != null\n            && getComponentType().getPrecedenceList().containsType(\n                type.getComponentType());\n      }\n\n      public int compareTypePrecedence(RelDataType type1, RelDataType type2) {\n        if (!containsType(type1)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type1);\n        }\n        if (!containsType(type2)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type2);\n        }\n        return getComponentType().getPrecedenceList()\n            .compareTypePrecedence(type1.getComponentType(), type2.getComponentType());\n      }\n    };\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/MultisetSqlType.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":2,"curCode":"  @Override public RelDataTypePrecedenceList getPrecedenceList() {\n    return new RelDataTypePrecedenceList() {\n      @Override public boolean containsType(RelDataType type) {\n        return type.getSqlTypeName() == getSqlTypeName()\n            && type.getComponentType() != null\n            && getComponentType().getPrecedenceList().containsType(\n                type.getComponentType());\n      }\n\n      @Override public int compareTypePrecedence(RelDataType type1, RelDataType type2) {\n        if (!containsType(type1)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type1);\n        }\n        if (!containsType(type2)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type2);\n        }\n        return getComponentType().getPrecedenceList()\n            .compareTypePrecedence(type1.getComponentType(), type2.getComponentType());\n      }\n    };\n  }\n","date":"2020-10-07 05:42:47","endLine":87,"groupId":"9111","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getPrecedenceList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/bb983ec0677c0eaf24ae11e5f79e3a16dc2afd.src","preCode":"  @Override public RelDataTypePrecedenceList getPrecedenceList() {\n    return new RelDataTypePrecedenceList() {\n      public boolean containsType(RelDataType type) {\n        return type.getSqlTypeName() == getSqlTypeName()\n            && type.getComponentType() != null\n            && getComponentType().getPrecedenceList().containsType(\n                type.getComponentType());\n      }\n\n      public int compareTypePrecedence(RelDataType type1, RelDataType type2) {\n        if (!containsType(type1)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type1);\n        }\n        if (!containsType(type2)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type2);\n        }\n        return getComponentType().getPrecedenceList()\n            .compareTypePrecedence(type1.getComponentType(), type2.getComponentType());\n      }\n    };\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/ArraySqlType.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public RelDataTypePrecedenceList getPrecedenceList() {\n    return new RelDataTypePrecedenceList() {\n      @Override public boolean containsType(RelDataType type) {\n        if (type.getSqlTypeName() != getSqlTypeName()) {\n          return false;\n        }\n        RelDataType otherComponentType = type.getComponentType();\n        return otherComponentType != null\n            && getComponentType().getPrecedenceList().containsType(otherComponentType);\n      }\n\n      @Override public int compareTypePrecedence(RelDataType type1, RelDataType type2) {\n        if (!containsType(type1)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type1);\n        }\n        if (!containsType(type2)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type2);\n        }\n        return getComponentType().getPrecedenceList()\n            .compareTypePrecedence(\n                getComponentTypeOrThrow(type1),\n                getComponentTypeOrThrow(type2));\n      }\n    };\n  }\n","date":"2020-11-30 06:45:33","endLine":99,"groupId":"101802","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"getPrecedenceList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/c5cc346f3c95a3b5396bc0108cfa0100acb303.src","preCode":"  @Override public RelDataTypePrecedenceList getPrecedenceList() {\n    return new RelDataTypePrecedenceList() {\n      @Override public boolean containsType(RelDataType type) {\n        return type.getSqlTypeName() == getSqlTypeName()\n            && type.getComponentType() != null\n            && getComponentType().getPrecedenceList().containsType(\n                type.getComponentType());\n      }\n\n      @Override public int compareTypePrecedence(RelDataType type1, RelDataType type2) {\n        if (!containsType(type1)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type1);\n        }\n        if (!containsType(type2)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type2);\n        }\n        return getComponentType().getPrecedenceList()\n            .compareTypePrecedence(type1.getComponentType(), type2.getComponentType());\n      }\n    };\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/MultisetSqlType.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public RelDataTypePrecedenceList getPrecedenceList() {\n    return new RelDataTypePrecedenceList() {\n      @Override public boolean containsType(RelDataType type) {\n        if (type.getSqlTypeName() != getSqlTypeName()) {\n          return false;\n        }\n        RelDataType otherComponentType = type.getComponentType();\n        return otherComponentType != null\n            && getComponentType().getPrecedenceList().containsType(otherComponentType);\n      }\n\n      @Override public int compareTypePrecedence(RelDataType type1, RelDataType type2) {\n        if (!containsType(type1)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type1);\n        }\n        if (!containsType(type2)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type2);\n        }\n        return getComponentType().getPrecedenceList()\n            .compareTypePrecedence(getComponentTypeOrThrow(type1), getComponentTypeOrThrow(type2));\n      }\n    };\n  }\n","date":"2020-11-30 06:45:33","endLine":91,"groupId":"101802","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getPrecedenceList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b8/c828c85b9c9df6accfd420d3de7a9c7068584c.src","preCode":"  @Override public RelDataTypePrecedenceList getPrecedenceList() {\n    return new RelDataTypePrecedenceList() {\n      @Override public boolean containsType(RelDataType type) {\n        return type.getSqlTypeName() == getSqlTypeName()\n            && type.getComponentType() != null\n            && getComponentType().getPrecedenceList().containsType(\n                type.getComponentType());\n      }\n\n      @Override public int compareTypePrecedence(RelDataType type1, RelDataType type2) {\n        if (!containsType(type1)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type1);\n        }\n        if (!containsType(type2)) {\n          throw new IllegalArgumentException(\"must contain type: \" + type2);\n        }\n        return getComponentType().getPrecedenceList()\n            .compareTypePrecedence(type1.getComponentType(), type2.getComponentType());\n      }\n    };\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/ArraySqlType.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
