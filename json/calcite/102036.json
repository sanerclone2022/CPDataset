[{"authorTime":"2019-09-10 06:04:05","codes":[{"authorDate":"2019-09-10 06:04:05","commitOrder":1,"curCode":"  @Override protected RelNode createUnion(RelBuilder relBuilder, RexBuilder rexBuilder,\n      RelNode topProject, RelNode unionInputQuery, RelNode unionInputView) {\n    relBuilder.push(unionInputQuery);\n    relBuilder.push(unionInputView);\n    relBuilder.union(true);\n    List<RexNode> exprList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    List<String> nameList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    for (int i = 0; i < relBuilder.peek().getRowType().getFieldCount(); i++) {\n      \r\n      RelDataTypeField field = unionInputQuery.getRowType().getFieldList().get(i);\n      exprList.add(\n          rexBuilder.ensureType(\n              field.getType(),\n              rexBuilder.makeInputRef(relBuilder.peek(), i),\n              true));\n      nameList.add(field.getName());\n    }\n    relBuilder.project(exprList, nameList);\n    return relBuilder.build();\n  }\n","date":"2020-03-05 12:57:25","endLine":230,"groupId":"11318","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createUnion","params":"(RelBuilderrelBuilder@RexBuilderrexBuilder@RelNodetopProject@RelNodeunionInputQuery@RelNodeunionInputView)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7b/470fb93872624e49a03ce218a9c76f4d5a4b03.src","preCode":"  @Override protected RelNode createUnion(RelBuilder relBuilder, RexBuilder rexBuilder,\n      RelNode topProject, RelNode unionInputQuery, RelNode unionInputView) {\n    relBuilder.push(unionInputQuery);\n    relBuilder.push(unionInputView);\n    relBuilder.union(true);\n    List<RexNode> exprList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    List<String> nameList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    for (int i = 0; i < relBuilder.peek().getRowType().getFieldCount(); i++) {\n      \r\n      RelDataTypeField field = unionInputQuery.getRowType().getFieldList().get(i);\n      exprList.add(\n          rexBuilder.ensureType(\n              field.getType(),\n              rexBuilder.makeInputRef(relBuilder.peek(), i),\n              true));\n      nameList.add(field.getName());\n    }\n    relBuilder.project(exprList, nameList);\n    return relBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewJoinRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"B"},{"authorDate":"2019-09-10 06:04:05","commitOrder":1,"curCode":"  @Override protected RelNode createUnion(RelBuilder relBuilder, RexBuilder rexBuilder,\n      RelNode topProject, RelNode unionInputQuery, RelNode unionInputView) {\n    \r\n    relBuilder.push(unionInputQuery);\n    relBuilder.push(unionInputView);\n    relBuilder.union(true);\n    List<RexNode> exprList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    List<String> nameList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    for (int i = 0; i < relBuilder.peek().getRowType().getFieldCount(); i++) {\n      \r\n      RelDataTypeField field = unionInputQuery.getRowType().getFieldList().get(i);\n      exprList.add(\n          rexBuilder.ensureType(\n              field.getType(),\n              rexBuilder.makeInputRef(relBuilder.peek(), i),\n              true));\n      nameList.add(field.getName());\n    }\n    relBuilder.project(exprList, nameList);\n    \r\n    Aggregate aggregate = (Aggregate) unionInputQuery;\n    final ImmutableBitSet groupSet = ImmutableBitSet.range(aggregate.getGroupCount());\n    final List<AggCall> aggregateCalls = new ArrayList<>();\n    for (int i = 0; i < aggregate.getAggCallList().size(); i++) {\n      AggregateCall aggCall = aggregate.getAggCallList().get(i);\n      if (aggCall.isDistinct()) {\n        \r\n        return null;\n      }\n      SqlAggFunction rollupAgg =\n          getRollup(aggCall.getAggregation());\n      if (rollupAgg == null) {\n        \r\n        return null;\n      }\n      final RexInputRef operand =\n          rexBuilder.makeInputRef(relBuilder.peek(),\n              aggregate.getGroupCount() + i);\n      aggregateCalls.add(\n          \r\n          relBuilder.aggregateCall(rollupAgg, operand)\n              .distinct(aggCall.isDistinct())\n              .approximate(aggCall.isApproximate())\n              .as(aggCall.name));\n    }\n    RelNode prevNode = relBuilder.peek();\n    RelNode result = relBuilder\n        .aggregate(relBuilder.groupKey(groupSet), aggregateCalls)\n        .build();\n    if (prevNode == result && groupSet.cardinality() != result.getRowType().getFieldCount()) {\n      \r\n      result = relBuilder\n          .push(result)\n          .project(relBuilder.fields(groupSet))\n          .build();\n    }\n    if (topProject != null) {\n      \r\n      return topProject.copy(topProject.getTraitSet(), ImmutableList.of(result));\n    }\n    \r\n    return result;\n  }\n","date":"2020-03-05 12:57:25","endLine":392,"groupId":"11411","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createUnion","params":"(RelBuilderrelBuilder@RexBuilderrexBuilder@RelNodetopProject@RelNodeunionInputQuery@RelNodeunionInputView)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/de/48ccd992fb9ad6757078e1bb987767a64e039f.src","preCode":"  @Override protected RelNode createUnion(RelBuilder relBuilder, RexBuilder rexBuilder,\n      RelNode topProject, RelNode unionInputQuery, RelNode unionInputView) {\n    \r\n    relBuilder.push(unionInputQuery);\n    relBuilder.push(unionInputView);\n    relBuilder.union(true);\n    List<RexNode> exprList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    List<String> nameList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    for (int i = 0; i < relBuilder.peek().getRowType().getFieldCount(); i++) {\n      \r\n      RelDataTypeField field = unionInputQuery.getRowType().getFieldList().get(i);\n      exprList.add(\n          rexBuilder.ensureType(\n              field.getType(),\n              rexBuilder.makeInputRef(relBuilder.peek(), i),\n              true));\n      nameList.add(field.getName());\n    }\n    relBuilder.project(exprList, nameList);\n    \r\n    Aggregate aggregate = (Aggregate) unionInputQuery;\n    final ImmutableBitSet groupSet = ImmutableBitSet.range(aggregate.getGroupCount());\n    final List<AggCall> aggregateCalls = new ArrayList<>();\n    for (int i = 0; i < aggregate.getAggCallList().size(); i++) {\n      AggregateCall aggCall = aggregate.getAggCallList().get(i);\n      if (aggCall.isDistinct()) {\n        \r\n        return null;\n      }\n      SqlAggFunction rollupAgg =\n          getRollup(aggCall.getAggregation());\n      if (rollupAgg == null) {\n        \r\n        return null;\n      }\n      final RexInputRef operand =\n          rexBuilder.makeInputRef(relBuilder.peek(),\n              aggregate.getGroupCount() + i);\n      aggregateCalls.add(\n          \r\n          relBuilder.aggregateCall(rollupAgg, operand)\n              .distinct(aggCall.isDistinct())\n              .approximate(aggCall.isApproximate())\n              .as(aggCall.name));\n    }\n    RelNode prevNode = relBuilder.peek();\n    RelNode result = relBuilder\n        .aggregate(relBuilder.groupKey(groupSet), aggregateCalls)\n        .build();\n    if (prevNode == result && groupSet.cardinality() != result.getRowType().getFieldCount()) {\n      \r\n      result = relBuilder\n          .push(result)\n          .project(relBuilder.fields(groupSet))\n          .build();\n    }\n    if (topProject != null) {\n      \r\n      return topProject.copy(topProject.getTraitSet(), ImmutableList.of(result));\n    }\n    \r\n    return result;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewAggregateRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"B"}],"commitId":"5dea67890a1916771e9a335e45969f2a4d4f7d3c","commitMessage":"@@@[CALCITE-3825] Split AbstractMaterializedViewRule into multiple classes\n\nClose apache/calcite#1831\n","date":"2020-03-05 12:57:25","modifiedFileCount":"2","status":"B","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  @Override protected @Nullable RelNode createUnion(RelBuilder relBuilder, RexBuilder rexBuilder,\n      @Nullable RelNode topProject, RelNode unionInputQuery, RelNode unionInputView) {\n    relBuilder.push(unionInputQuery);\n    relBuilder.push(unionInputView);\n    relBuilder.union(true);\n    List<RexNode> exprList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    List<String> nameList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    for (int i = 0; i < relBuilder.peek().getRowType().getFieldCount(); i++) {\n      \r\n      RelDataTypeField field = unionInputQuery.getRowType().getFieldList().get(i);\n      exprList.add(\n          rexBuilder.ensureType(\n              field.getType(),\n              rexBuilder.makeInputRef(relBuilder.peek(), i),\n              true));\n      nameList.add(field.getName());\n    }\n    relBuilder.project(exprList, nameList);\n    return relBuilder.build();\n  }\n","date":"2020-11-30 06:45:33","endLine":242,"groupId":"11318","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"createUnion","params":"(RelBuilderrelBuilder@RexBuilderrexBuilder@@NullableRelNodetopProject@RelNodeunionInputQuery@RelNodeunionInputView)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/d83099adda16a787a173c83d1d010d8077f8ff.src","preCode":"  @Override protected RelNode createUnion(RelBuilder relBuilder, RexBuilder rexBuilder,\n      RelNode topProject, RelNode unionInputQuery, RelNode unionInputView) {\n    relBuilder.push(unionInputQuery);\n    relBuilder.push(unionInputView);\n    relBuilder.union(true);\n    List<RexNode> exprList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    List<String> nameList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    for (int i = 0; i < relBuilder.peek().getRowType().getFieldCount(); i++) {\n      \r\n      RelDataTypeField field = unionInputQuery.getRowType().getFieldList().get(i);\n      exprList.add(\n          rexBuilder.ensureType(\n              field.getType(),\n              rexBuilder.makeInputRef(relBuilder.peek(), i),\n              true));\n      nameList.add(field.getName());\n    }\n    relBuilder.project(exprList, nameList);\n    return relBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewJoinRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  @Override protected @Nullable RelNode createUnion(RelBuilder relBuilder, RexBuilder rexBuilder,\n      @Nullable RelNode topProject, RelNode unionInputQuery, RelNode unionInputView) {\n    \r\n    relBuilder.push(unionInputQuery);\n    relBuilder.push(unionInputView);\n    relBuilder.union(true);\n    List<RexNode> exprList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    List<String> nameList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    for (int i = 0; i < relBuilder.peek().getRowType().getFieldCount(); i++) {\n      \r\n      RelDataTypeField field = unionInputQuery.getRowType().getFieldList().get(i);\n      exprList.add(\n          rexBuilder.ensureType(\n              field.getType(),\n              rexBuilder.makeInputRef(relBuilder.peek(), i),\n              true));\n      nameList.add(field.getName());\n    }\n    relBuilder.project(exprList, nameList);\n    \r\n    Aggregate aggregate = (Aggregate) unionInputQuery;\n    final ImmutableBitSet groupSet = ImmutableBitSet.range(aggregate.getGroupCount());\n    final List<AggCall> aggregateCalls = new ArrayList<>();\n    for (int i = 0; i < aggregate.getAggCallList().size(); i++) {\n      AggregateCall aggCall = aggregate.getAggCallList().get(i);\n      if (aggCall.isDistinct()) {\n        \r\n        return null;\n      }\n      SqlAggFunction rollupAgg =\n          getRollup(aggCall.getAggregation());\n      if (rollupAgg == null) {\n        \r\n        return null;\n      }\n      final RexInputRef operand =\n          rexBuilder.makeInputRef(relBuilder.peek(),\n              aggregate.getGroupCount() + i);\n      aggregateCalls.add(\n          relBuilder.aggregateCall(rollupAgg, operand)\n              .distinct(aggCall.isDistinct())\n              .approximate(aggCall.isApproximate())\n              .as(aggCall.name));\n    }\n    RelNode prevNode = relBuilder.peek();\n    RelNode result = relBuilder\n        .aggregate(relBuilder.groupKey(groupSet), aggregateCalls)\n        .build();\n    if (prevNode == result && groupSet.cardinality() != result.getRowType().getFieldCount()) {\n      \r\n      result = relBuilder\n          .push(result)\n          .project(relBuilder.fields(groupSet))\n          .build();\n    }\n    if (topProject != null) {\n      \r\n      return topProject.copy(topProject.getTraitSet(), ImmutableList.of(result));\n    }\n    \r\n    return result;\n  }\n","date":"2020-11-30 06:45:33","endLine":371,"groupId":"11411","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createUnion","params":"(RelBuilderrelBuilder@RexBuilderrexBuilder@@NullableRelNodetopProject@RelNodeunionInputQuery@RelNodeunionInputView)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/34/ae63927160934747d90d9559c4fb0728d09f55.src","preCode":"  @Override protected RelNode createUnion(RelBuilder relBuilder, RexBuilder rexBuilder,\n      RelNode topProject, RelNode unionInputQuery, RelNode unionInputView) {\n    \r\n    relBuilder.push(unionInputQuery);\n    relBuilder.push(unionInputView);\n    relBuilder.union(true);\n    List<RexNode> exprList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    List<String> nameList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    for (int i = 0; i < relBuilder.peek().getRowType().getFieldCount(); i++) {\n      \r\n      RelDataTypeField field = unionInputQuery.getRowType().getFieldList().get(i);\n      exprList.add(\n          rexBuilder.ensureType(\n              field.getType(),\n              rexBuilder.makeInputRef(relBuilder.peek(), i),\n              true));\n      nameList.add(field.getName());\n    }\n    relBuilder.project(exprList, nameList);\n    \r\n    Aggregate aggregate = (Aggregate) unionInputQuery;\n    final ImmutableBitSet groupSet = ImmutableBitSet.range(aggregate.getGroupCount());\n    final List<AggCall> aggregateCalls = new ArrayList<>();\n    for (int i = 0; i < aggregate.getAggCallList().size(); i++) {\n      AggregateCall aggCall = aggregate.getAggCallList().get(i);\n      if (aggCall.isDistinct()) {\n        \r\n        return null;\n      }\n      SqlAggFunction rollupAgg =\n          getRollup(aggCall.getAggregation());\n      if (rollupAgg == null) {\n        \r\n        return null;\n      }\n      final RexInputRef operand =\n          rexBuilder.makeInputRef(relBuilder.peek(),\n              aggregate.getGroupCount() + i);\n      aggregateCalls.add(\n          relBuilder.aggregateCall(rollupAgg, operand)\n              .distinct(aggCall.isDistinct())\n              .approximate(aggCall.isApproximate())\n              .as(aggCall.name));\n    }\n    RelNode prevNode = relBuilder.peek();\n    RelNode result = relBuilder\n        .aggregate(relBuilder.groupKey(groupSet), aggregateCalls)\n        .build();\n    if (prevNode == result && groupSet.cardinality() != result.getRowType().getFieldCount()) {\n      \r\n      result = relBuilder\n          .push(result)\n          .project(relBuilder.fields(groupSet))\n          .build();\n    }\n    if (topProject != null) {\n      \r\n      return topProject.copy(topProject.getTraitSet(), ImmutableList.of(result));\n    }\n    \r\n    return result;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewAggregateRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-10-20 17:01:44","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override protected @Nullable RelNode createUnion(RelBuilder relBuilder, RexBuilder rexBuilder,\n      @Nullable RelNode topProject, RelNode unionInputQuery, RelNode unionInputView) {\n    relBuilder.push(unionInputQuery);\n    relBuilder.push(unionInputView);\n    relBuilder.union(true);\n    List<RexNode> exprList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    List<String> nameList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    for (int i = 0; i < relBuilder.peek().getRowType().getFieldCount(); i++) {\n      \r\n      RelDataTypeField field = unionInputQuery.getRowType().getFieldList().get(i);\n      exprList.add(\n          rexBuilder.ensureType(\n              field.getType(),\n              rexBuilder.makeInputRef(relBuilder.peek(), i),\n              true));\n      nameList.add(field.getName());\n    }\n    relBuilder.project(exprList, nameList);\n    return relBuilder.build();\n  }\n","date":"2020-11-30 06:45:33","endLine":242,"groupId":"102036","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"createUnion","params":"(RelBuilderrelBuilder@RexBuilderrexBuilder@@NullableRelNodetopProject@RelNodeunionInputQuery@RelNodeunionInputView)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/d83099adda16a787a173c83d1d010d8077f8ff.src","preCode":"  @Override protected @Nullable RelNode createUnion(RelBuilder relBuilder, RexBuilder rexBuilder,\n      @Nullable RelNode topProject, RelNode unionInputQuery, RelNode unionInputView) {\n    relBuilder.push(unionInputQuery);\n    relBuilder.push(unionInputView);\n    relBuilder.union(true);\n    List<RexNode> exprList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    List<String> nameList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    for (int i = 0; i < relBuilder.peek().getRowType().getFieldCount(); i++) {\n      \r\n      RelDataTypeField field = unionInputQuery.getRowType().getFieldList().get(i);\n      exprList.add(\n          rexBuilder.ensureType(\n              field.getType(),\n              rexBuilder.makeInputRef(relBuilder.peek(), i),\n              true));\n      nameList.add(field.getName());\n    }\n    relBuilder.project(exprList, nameList);\n    return relBuilder.build();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewJoinRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"N"},{"authorDate":"2020-10-20 17:01:44","commitOrder":3,"curCode":"  @Override protected @Nullable RelNode createUnion(RelBuilder relBuilder, RexBuilder rexBuilder,\n      @Nullable RelNode topProject, RelNode unionInputQuery, RelNode unionInputView) {\n    \r\n    relBuilder.push(unionInputQuery);\n    relBuilder.push(unionInputView);\n    relBuilder.union(true);\n    List<RexNode> exprList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    List<String> nameList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    for (int i = 0; i < relBuilder.peek().getRowType().getFieldCount(); i++) {\n      \r\n      RelDataTypeField field = unionInputQuery.getRowType().getFieldList().get(i);\n      exprList.add(\n          rexBuilder.ensureType(\n              field.getType(),\n              rexBuilder.makeInputRef(relBuilder.peek(), i),\n              true));\n      nameList.add(field.getName());\n    }\n    relBuilder.project(exprList, nameList);\n    \r\n    Aggregate aggregate = (Aggregate) unionInputQuery;\n    final ImmutableBitSet groupSet = ImmutableBitSet.range(aggregate.getGroupCount());\n    final List<AggCall> aggregateCalls = new ArrayList<>();\n    for (int i = 0; i < aggregate.getAggCallList().size(); i++) {\n      AggregateCall aggCall = aggregate.getAggCallList().get(i);\n      if (aggCall.isDistinct()) {\n        \r\n        return null;\n      }\n      SqlAggFunction rollupAgg = aggCall.getAggregation().getRollup();\n      if (rollupAgg == null) {\n        \r\n        return null;\n      }\n      final RexInputRef operand =\n          rexBuilder.makeInputRef(relBuilder.peek(),\n              aggregate.getGroupCount() + i);\n      aggregateCalls.add(\n          relBuilder.aggregateCall(rollupAgg, operand)\n              .distinct(aggCall.isDistinct())\n              .approximate(aggCall.isApproximate())\n              .as(aggCall.name));\n    }\n    RelNode prevNode = relBuilder.peek();\n    RelNode result = relBuilder\n        .aggregate(relBuilder.groupKey(groupSet), aggregateCalls)\n        .build();\n    if (prevNode == result && groupSet.cardinality() != result.getRowType().getFieldCount()) {\n      \r\n      result = relBuilder\n          .push(result)\n          .project(relBuilder.fields(groupSet))\n          .build();\n    }\n    if (topProject != null) {\n      \r\n      return topProject.copy(topProject.getTraitSet(), ImmutableList.of(result));\n    }\n    \r\n    return result;\n  }\n","date":"2021-03-12 17:43:05","endLine":370,"groupId":"102036","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"createUnion","params":"(RelBuilderrelBuilder@RexBuilderrexBuilder@@NullableRelNodetopProject@RelNodeunionInputQuery@RelNodeunionInputView)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a4/43dbca42343ad5d33a76b777f4c97a66718893.src","preCode":"  @Override protected @Nullable RelNode createUnion(RelBuilder relBuilder, RexBuilder rexBuilder,\n      @Nullable RelNode topProject, RelNode unionInputQuery, RelNode unionInputView) {\n    \r\n    relBuilder.push(unionInputQuery);\n    relBuilder.push(unionInputView);\n    relBuilder.union(true);\n    List<RexNode> exprList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    List<String> nameList = new ArrayList<>(relBuilder.peek().getRowType().getFieldCount());\n    for (int i = 0; i < relBuilder.peek().getRowType().getFieldCount(); i++) {\n      \r\n      RelDataTypeField field = unionInputQuery.getRowType().getFieldList().get(i);\n      exprList.add(\n          rexBuilder.ensureType(\n              field.getType(),\n              rexBuilder.makeInputRef(relBuilder.peek(), i),\n              true));\n      nameList.add(field.getName());\n    }\n    relBuilder.project(exprList, nameList);\n    \r\n    Aggregate aggregate = (Aggregate) unionInputQuery;\n    final ImmutableBitSet groupSet = ImmutableBitSet.range(aggregate.getGroupCount());\n    final List<AggCall> aggregateCalls = new ArrayList<>();\n    for (int i = 0; i < aggregate.getAggCallList().size(); i++) {\n      AggregateCall aggCall = aggregate.getAggCallList().get(i);\n      if (aggCall.isDistinct()) {\n        \r\n        return null;\n      }\n      SqlAggFunction rollupAgg =\n          getRollup(aggCall.getAggregation());\n      if (rollupAgg == null) {\n        \r\n        return null;\n      }\n      final RexInputRef operand =\n          rexBuilder.makeInputRef(relBuilder.peek(),\n              aggregate.getGroupCount() + i);\n      aggregateCalls.add(\n          relBuilder.aggregateCall(rollupAgg, operand)\n              .distinct(aggCall.isDistinct())\n              .approximate(aggCall.isApproximate())\n              .as(aggCall.name));\n    }\n    RelNode prevNode = relBuilder.peek();\n    RelNode result = relBuilder\n        .aggregate(relBuilder.groupKey(groupSet), aggregateCalls)\n        .build();\n    if (prevNode == result && groupSet.cardinality() != result.getRowType().getFieldCount()) {\n      \r\n      result = relBuilder\n          .push(result)\n          .project(relBuilder.fields(groupSet))\n          .build();\n    }\n    if (topProject != null) {\n      \r\n      return topProject.copy(topProject.getTraitSet(), ImmutableList.of(result));\n    }\n    \r\n    return result;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewAggregateRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"}],"commitId":"963ef2798990c06c835c28945ff811ec3cbfa7a6","commitMessage":"@@@[CALCITE-4342] More aggregate functions should be marked as splittable and ignore distinct optionality (Liya Fan)\n","date":"2021-03-12 17:43:05","modifiedFileCount":"12","status":"M","submitter":"liyafan82"}]
