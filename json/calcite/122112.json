[{"authorTime":"2014-12-30 09:40:39","codes":[{"authorDate":"2017-12-18 21:30:55","commitOrder":3,"curCode":"    public RelNode convert(RelNode rel) {\n      final Filter filter = (Filter) rel;\n\n      return new JdbcFilter(\n          rel.getCluster(),\n          rel.getTraitSet().replace(out),\n          convert(filter.getInput(),\n              filter.getInput().getTraitSet().replace(out)),\n          filter.getCondition());\n    }\n","date":"2018-02-17 02:18:01","endLine":411,"groupId":"331","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/44/f9c0945610ad4553272a2a685191fdcbd999fd.src","preCode":"    public RelNode convert(RelNode rel) {\n      final Filter filter = (Filter) rel;\n\n      return new JdbcFilter(\n          rel.getCluster(),\n          rel.getTraitSet().replace(out),\n          convert(filter.getInput(),\n              filter.getInput().getTraitSet().replace(out)),\n          filter.getCondition());\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"B"},{"authorDate":"2014-12-30 09:40:39","commitOrder":3,"curCode":"  public RelNode convert(RelNode rel) {\n    final LogicalFilter filter = (LogicalFilter) rel;\n    return new EnumerableFilter(rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(filter.getInput(),\n            filter.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        filter.getCondition());\n  }\n","date":"2015-01-22 07:57:37","endLine":43,"groupId":"331","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/51/fcdd4bc5c0c67ed570ef6e04bbfbf2ce07bb9a.src","preCode":"  public RelNode convert(RelNode rel) {\n    final LogicalFilter filter = (LogicalFilter) rel;\n    return new EnumerableFilter(rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(filter.getInput(),\n            filter.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        filter.getCondition());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"NB"}],"commitId":"facd83d311098dd3f35294ba969a19cbf6d54467","commitMessage":"@@@[CALCITE-2128] Add SQL dialect for Jethro Data (Jonathan Doron)\n\nBefore creating a JethroDataSqlDialect.  SqlDialectFactoryImpl issues a\n\"show functions extended\" command to Jethro.  storing the results in a\ncache for next time.  and passes the list of supported functions to the\ndialect.\n\nClose apache/calcite#602\n","date":"2018-02-17 02:18:01","modifiedFileCount":"9","status":"M","submitter":"msydoron"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-07-09 05:31:40","commitOrder":4,"curCode":"    @Override public RelNode convert(RelNode rel) {\n      final Filter filter = (Filter) rel;\n\n      return new JdbcFilter(\n          rel.getCluster(),\n          rel.getTraitSet().replace(out),\n          convert(filter.getInput(),\n              filter.getInput().getTraitSet().replace(out)),\n          filter.getCondition());\n    }\n","date":"2020-07-29 02:27:24","endLine":618,"groupId":"331","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f7/f8ce8e35c33d66f8a46c2f411ebf9eefa5077b.src","preCode":"    public RelNode convert(RelNode rel) {\n      final Filter filter = (Filter) rel;\n\n      return new JdbcFilter(\n          rel.getCluster(),\n          rel.getTraitSet().replace(out),\n          convert(filter.getInput(),\n              filter.getInput().getTraitSet().replace(out)),\n          filter.getCondition());\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"M"},{"authorDate":"2020-07-09 05:31:40","commitOrder":4,"curCode":"  @Override public RelNode convert(RelNode rel) {\n    final LogicalFilter filter = (LogicalFilter) rel;\n    return new EnumerableFilter(rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(filter.getInput(),\n            filter.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        filter.getCondition());\n  }\n","date":"2020-07-29 02:27:24","endLine":51,"groupId":"331","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4f/1df086ab8093cef8627705ed50e31b931a582f.src","preCode":"  public RelNode convert(RelNode rel) {\n    final LogicalFilter filter = (LogicalFilter) rel;\n    return new EnumerableFilter(rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(filter.getInput(),\n            filter.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        filter.getCondition());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"998cd83ebe2fcd7ff3ee565299fed6e199269715","commitMessage":"@@@[CALCITE-3923] Refactor how planner rules are parameterized\n\nCreate operands using a builder interface.  OperandBuilder.  and\ndeprecate methods RelOptRule.operand etc.\n\nThe change is backwards compatible.  in the sense that\nexisting rule constructors are deprecated but still work.\nFrom now on.  to create rules.  call RelOptRule.Config.toRule()\n(which calls the rule's (Config) constructor).\n\nSub-classes of ConverterRule are a little different.  They\ndon't need their own sub-class of Config.  You just need to\ncall Config.withRuleFactory to specify the constructor of the\nsub-class of ConverterRule.\n\nMove rule instances into holder classes such as CoreRules. \nMaterializedViewRules. Deprecate existing rule INSTANCE fields\n(to be removed in 1.25). Deprecate previous rule constructors\n(to be removed in 2.0).\n\nDescribe how to write rules in howto and tutorial.\n\nRemove rule instances marked 'deprecated.  to be removed before\n1.25'.\n\nClose apache/calcite#2024\n","date":"2020-07-29 02:27:24","modifiedFileCount":"191","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"    @Override public @Nullable RelNode convert(RelNode rel) {\n      final Filter filter = (Filter) rel;\n\n      return new JdbcFilter(\n          rel.getCluster(),\n          rel.getTraitSet().replace(out),\n          convert(filter.getInput(),\n              filter.getInput().getTraitSet().replace(out)),\n          filter.getCondition());\n    }\n","date":"2020-11-30 06:45:33","endLine":627,"groupId":"331","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6a/ed23c58e84f4cbbb3c9821b817c1b4ade0fea9.src","preCode":"    @Override public RelNode convert(RelNode rel) {\n      final Filter filter = (Filter) rel;\n\n      return new JdbcFilter(\n          rel.getCluster(),\n          rel.getTraitSet().replace(out),\n          convert(filter.getInput(),\n              filter.getInput().getTraitSet().replace(out)),\n          filter.getCondition());\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":618,"status":"M"},{"authorDate":"2020-07-09 05:31:40","commitOrder":5,"curCode":"  @Override public RelNode convert(RelNode rel) {\n    final LogicalFilter filter = (LogicalFilter) rel;\n    return new EnumerableFilter(rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(filter.getInput(),\n            filter.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        filter.getCondition());\n  }\n","date":"2020-07-29 02:27:24","endLine":51,"groupId":"331","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4f/1df086ab8093cef8627705ed50e31b931a582f.src","preCode":"  @Override public RelNode convert(RelNode rel) {\n    final LogicalFilter filter = (LogicalFilter) rel;\n    return new EnumerableFilter(rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(filter.getInput(),\n            filter.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        filter.getCondition());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2021-01-25 21:44:11","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"    @Override public @Nullable RelNode convert(RelNode rel) {\n      final Filter filter = (Filter) rel;\n\n      return new JdbcFilter(\n          rel.getCluster(),\n          rel.getTraitSet().replace(out),\n          convert(filter.getInput(),\n              filter.getInput().getTraitSet().replace(out)),\n          filter.getCondition());\n    }\n","date":"2020-11-30 06:45:33","endLine":627,"groupId":"122112","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6a/ed23c58e84f4cbbb3c9821b817c1b4ade0fea9.src","preCode":"    @Override public @Nullable RelNode convert(RelNode rel) {\n      final Filter filter = (Filter) rel;\n\n      return new JdbcFilter(\n          rel.getCluster(),\n          rel.getTraitSet().replace(out),\n          convert(filter.getInput(),\n              filter.getInput().getTraitSet().replace(out)),\n          filter.getCondition());\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":618,"status":"N"},{"authorDate":"2021-01-25 21:44:11","commitOrder":6,"curCode":"  @Override public RelNode convert(RelNode rel) {\n    final Filter filter = (Filter) rel;\n    return new EnumerableFilter(rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(filter.getInput(),\n            filter.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        filter.getCondition());\n  }\n","date":"2021-02-01 13:35:11","endLine":52,"groupId":"122112","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/76/0d2f104dd5201d1ccc02cf32abe1f910210d34.src","preCode":"  @Override public RelNode convert(RelNode rel) {\n    final LogicalFilter filter = (LogicalFilter) rel;\n    return new EnumerableFilter(rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(filter.getInput(),\n            filter.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        filter.getCondition());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"1bf6b08a81f471f979e1b52174f225f03ff77a2e","commitMessage":"@@@[CALCITE-4461] Do not use `Logical` nodes inside Enumerable rules (Vladimir Ozerov)\n","date":"2021-02-01 13:35:11","modifiedFileCount":"21","status":"M","submitter":"devozerov"}]
