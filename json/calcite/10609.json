[{"authorTime":"2019-08-21 20:49:48","codes":[{"authorDate":"2018-07-06 04:21:59","commitOrder":4,"curCode":"  @Test public void testMergeJoin() {\n    assertThat(\n        EnumerableDefaults.mergeJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Joe\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, false, false).toList().toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" Emp(30, Joe), Dept(30, Research),\"\n            + \" Emp(30, Joe), Dept(30, Development),\"\n            + \" Emp(30, Greg), Dept(30, Research),\"\n            + \" Emp(30, Greg), Dept(30, Development)]\"));\n  }\n","date":"2018-07-09 01:16:26","endLine":97,"groupId":"9273","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/aa/b9520d0c0269f82e341f3c4f0ddb77275ed701.src","preCode":"  @Test public void testMergeJoin() {\n    assertThat(\n        EnumerableDefaults.mergeJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Joe\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, false, false).toList().toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" Emp(30, Joe), Dept(30, Research),\"\n            + \" Emp(30, Joe), Dept(30, Development),\"\n            + \" Emp(30, Greg), Dept(30, Research),\"\n            + \" Emp(30, Greg), Dept(30, Development)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/EnumerablesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"NB"},{"authorDate":"2019-08-21 20:49:48","commitOrder":4,"curCode":"  @Test public void testRightHashJoinWithNonEquiConditions() {\n    assertThat(\n        EnumerableDefaults.hashJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, null, true, false,\n            (v0, v1) -> v0.deptno < 30\n        )\n            .toList()\n            .toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" null, Dept(15, Marketing),\"\n            + \" null, Dept(30, Research),\"\n            + \" null, Dept(30, Development)]\"));\n  }\n","date":"2019-08-30 14:54:12","endLine":338,"groupId":"9273","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRightHashJoinWithNonEquiConditions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8c/7f42785c39abb25e6c17054ee79306765b831f.src","preCode":"  @Test public void testRightHashJoinWithNonEquiConditions() {\n    assertThat(\n        EnumerableDefaults.hashJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, null, true, false,\n            (v0, v1) -> v0.deptno < 30\n        )\n            .toList()\n            .toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" null, Dept(15, Marketing),\"\n            + \" null, Dept(30, Research),\"\n            + \" null, Dept(30, Development)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/EnumerablesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"B"}],"commitId":"6cec81178e6739d9b1f3474dc5dbd7488dda2464","commitMessage":"@@@[CALCITE-2973]. [CALCITE-3284] Allow joins(hash. semi. anti) that have equi conditions to be executed using a hash join algorithm\n","date":"2019-08-30 14:54:12","modifiedFileCount":"7","status":"M","submitter":"Lai Zhou"},{"authorTime":"2019-08-21 20:49:48","codes":[{"authorDate":"2019-11-15 13:54:05","commitOrder":5,"curCode":"  @Test public void testMergeJoin() {\n    assertThat(\n        EnumerableDefaults.mergeJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Joe\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (e, d) -> true,\n            (v0, v1) -> v0 + \", \" + v1, false, false).toList().toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" Emp(30, Joe), Dept(30, Research),\"\n            + \" Emp(30, Joe), Dept(30, Development),\"\n            + \" Emp(30, Greg), Dept(30, Research),\"\n            + \" Emp(30, Greg), Dept(30, Development)]\"));\n  }\n","date":"2019-12-05 06:19:57","endLine":124,"groupId":"9273","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/50/46cd5e372a24feb50796305bc41b2e8b591bee.src","preCode":"  @Test public void testMergeJoin() {\n    assertThat(\n        EnumerableDefaults.mergeJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Joe\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, false, false).toList().toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" Emp(30, Joe), Dept(30, Research),\"\n            + \" Emp(30, Joe), Dept(30, Development),\"\n            + \" Emp(30, Greg), Dept(30, Research),\"\n            + \" Emp(30, Greg), Dept(30, Development)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/EnumerablesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2019-08-21 20:49:48","commitOrder":5,"curCode":"  @Test public void testRightHashJoinWithNonEquiConditions() {\n    assertThat(\n        EnumerableDefaults.hashJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, null, true, false,\n            (v0, v1) -> v0.deptno < 30\n        )\n            .toList()\n            .toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" null, Dept(15, Marketing),\"\n            + \" null, Dept(30, Research),\"\n            + \" null, Dept(30, Development)]\"));\n  }\n","date":"2019-08-30 14:54:12","endLine":338,"groupId":"9273","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRightHashJoinWithNonEquiConditions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8c/7f42785c39abb25e6c17054ee79306765b831f.src","preCode":"  @Test public void testRightHashJoinWithNonEquiConditions() {\n    assertThat(\n        EnumerableDefaults.hashJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, null, true, false,\n            (v0, v1) -> v0.deptno < 30\n        )\n            .toList()\n            .toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" null, Dept(15, Marketing),\"\n            + \" null, Dept(30, Research),\"\n            + \" null, Dept(30, Development)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/EnumerablesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"N"}],"commitId":"a0931b784c60683eb6845b3087d79f33160fc868","commitMessage":"@@@[CALCITE-3285] EnumerableMergeJoin should support non-equi join condions (Jin Xing)\n\nClose #1576\n","date":"2019-12-05 06:19:57","modifiedFileCount":"7","status":"M","submitter":"jinxing"},{"authorTime":"2019-08-21 20:49:48","codes":[{"authorDate":"2020-01-10 16:39:45","commitOrder":6,"curCode":"  @Test public void testMergeJoin() {\n    assertThat(\n        EnumerableDefaults.mergeJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Joe\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, false, false).toList().toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" Emp(30, Joe), Dept(30, Research),\"\n            + \" Emp(30, Joe), Dept(30, Development),\"\n            + \" Emp(30, Greg), Dept(30, Research),\"\n            + \" Emp(30, Greg), Dept(30, Development)]\"));\n  }\n","date":"2020-01-10 16:39:45","endLine":123,"groupId":"9273","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dc/1748c021759358f2e53b409fff8dda6463df13.src","preCode":"  @Test public void testMergeJoin() {\n    assertThat(\n        EnumerableDefaults.mergeJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Joe\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (e, d) -> true,\n            (v0, v1) -> v0 + \", \" + v1, false, false).toList().toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" Emp(30, Joe), Dept(30, Research),\"\n            + \" Emp(30, Joe), Dept(30, Development),\"\n            + \" Emp(30, Greg), Dept(30, Research),\"\n            + \" Emp(30, Greg), Dept(30, Development)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/EnumerablesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2019-08-21 20:49:48","commitOrder":6,"curCode":"  @Test public void testRightHashJoinWithNonEquiConditions() {\n    assertThat(\n        EnumerableDefaults.hashJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, null, true, false,\n            (v0, v1) -> v0.deptno < 30\n        )\n            .toList()\n            .toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" null, Dept(15, Marketing),\"\n            + \" null, Dept(30, Research),\"\n            + \" null, Dept(30, Development)]\"));\n  }\n","date":"2019-08-30 14:54:12","endLine":338,"groupId":"9273","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRightHashJoinWithNonEquiConditions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8c/7f42785c39abb25e6c17054ee79306765b831f.src","preCode":"  @Test public void testRightHashJoinWithNonEquiConditions() {\n    assertThat(\n        EnumerableDefaults.hashJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, null, true, false,\n            (v0, v1) -> v0.deptno < 30\n        )\n            .toList()\n            .toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" null, Dept(15, Marketing),\"\n            + \" null, Dept(30, Research),\"\n            + \" null, Dept(30, Development)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/EnumerablesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"N"}],"commitId":"820f6ab4965d79946e4144db8e33aeef98c3d2ff","commitMessage":"@@@Revert \"[CALCITE-3285] EnumerableMergeJoin should support non-equi join condions (Jin Xing)\"\n\nThis reverts commit a0931b784c60683eb6845b3087d79f33160fc868.\n","date":"2020-01-10 16:39:45","modifiedFileCount":"7","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testMergeJoin() {\n    assertThat(\n        EnumerableDefaults.mergeJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Joe\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, false, false).toList().toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" Emp(30, Joe), Dept(30, Research),\"\n            + \" Emp(30, Joe), Dept(30, Development),\"\n            + \" Emp(30, Greg), Dept(30, Research),\"\n            + \" Emp(30, Greg), Dept(30, Development)]\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":123,"groupId":"9273","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/79/cf69871394ea21e6f173abd80d6d24cf781e51.src","preCode":"  @Test public void testMergeJoin() {\n    assertThat(\n        EnumerableDefaults.mergeJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Joe\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, false, false).toList().toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" Emp(30, Joe), Dept(30, Research),\"\n            + \" Emp(30, Joe), Dept(30, Development),\"\n            + \" Emp(30, Greg), Dept(30, Research),\"\n            + \" Emp(30, Greg), Dept(30, Development)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/EnumerablesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testRightHashJoinWithNonEquiConditions() {\n    assertThat(\n        EnumerableDefaults.hashJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, null, true, false,\n            (v0, v1) -> v0.deptno < 30)\n            .toList()\n            .toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" null, Dept(15, Marketing),\"\n            + \" null, Dept(30, Research),\"\n            + \" null, Dept(30, Development)]\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":515,"groupId":"9273","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRightHashJoinWithNonEquiConditions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/79/cf69871394ea21e6f173abd80d6d24cf781e51.src","preCode":"  @Test public void testRightHashJoinWithNonEquiConditions() {\n    assertThat(\n        EnumerableDefaults.hashJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, null, true, false,\n            (v0, v1) -> v0.deptno < 30)\n            .toList()\n            .toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" null, Dept(15, Marketing),\"\n            + \" null, Dept(30, Research),\"\n            + \" null, Dept(30, Development)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/EnumerablesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-03-27 23:21:12","commitOrder":8,"curCode":"  @Test void testMergeJoin() {\n    assertThat(\n        EnumerableDefaults.mergeJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Joe\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, JoinType.INNER, null).toList().toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" Emp(30, Joe), Dept(30, Research),\"\n            + \" Emp(30, Joe), Dept(30, Development),\"\n            + \" Emp(30, Greg), Dept(30, Research),\"\n            + \" Emp(30, Greg), Dept(30, Development)]\"));\n  }\n","date":"2020-04-10 17:18:24","endLine":123,"groupId":"10609","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b0/1c579f29460ffe1df6222e4fa2481318a53ffc.src","preCode":"  @Test void testMergeJoin() {\n    assertThat(\n        EnumerableDefaults.mergeJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Joe\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, false, false).toList().toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" Emp(30, Joe), Dept(30, Research),\"\n            + \" Emp(30, Joe), Dept(30, Development),\"\n            + \" Emp(30, Greg), Dept(30, Research),\"\n            + \" Emp(30, Greg), Dept(30, Development)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/EnumerablesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":8,"curCode":"  @Test void testRightHashJoinWithNonEquiConditions() {\n    assertThat(\n        EnumerableDefaults.hashJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, null, true, false,\n            (v0, v1) -> v0.deptno < 30)\n            .toList()\n            .toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" null, Dept(15, Marketing),\"\n            + \" null, Dept(30, Research),\"\n            + \" null, Dept(30, Development)]\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":515,"groupId":"10609","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRightHashJoinWithNonEquiConditions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/79/cf69871394ea21e6f173abd80d6d24cf781e51.src","preCode":"  @Test void testRightHashJoinWithNonEquiConditions() {\n    assertThat(\n        EnumerableDefaults.hashJoin(\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Emp(10, \"Fred\"),\n                    new Emp(20, \"Theodore\"),\n                    new Emp(20, \"Sebastian\"),\n                    new Emp(30, \"Greg\"))),\n            Linq4j.asEnumerable(\n                Arrays.asList(\n                    new Dept(15, \"Marketing\"),\n                    new Dept(20, \"Sales\"),\n                    new Dept(30, \"Research\"),\n                    new Dept(30, \"Development\"))),\n            e -> e.deptno,\n            d -> d.deptno,\n            (v0, v1) -> v0 + \", \" + v1, null, true, false,\n            (v0, v1) -> v0.deptno < 30)\n            .toList()\n            .toString(),\n        equalTo(\"[Emp(20, Theodore), Dept(20, Sales),\"\n            + \" Emp(20, Sebastian), Dept(20, Sales),\"\n            + \" null, Dept(15, Marketing),\"\n            + \" null, Dept(30, Research),\"\n            + \" null, Dept(30, Development)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/EnumerablesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"N"}],"commitId":"f93fc1db4ed9fbdae01022f29e8178dc58fd68f9","commitMessage":"@@@[CALCITE-3833] Support SemiJoin in EnumerableMergeJoin\n","date":"2020-04-10 17:18:24","modifiedFileCount":"7","status":"M","submitter":"rubenada"}]
