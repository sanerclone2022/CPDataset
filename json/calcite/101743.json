[{"authorTime":"2019-12-24 15:48:25","codes":[{"authorDate":"2019-12-24 15:48:25","commitOrder":1,"curCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    return true;\n  }\n","date":"2020-05-09 20:23:46","endLine":60,"groupId":"15440","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e3/a5001618708e48d88f017843f343d42f125bc1.src","preCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlTumbleTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"},{"authorDate":"2019-12-24 15:48:25","commitOrder":1,"curCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n    if (!SqlTypeUtil.isInterval(type3)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    return true;\n  }\n","date":"2020-05-09 20:23:46","endLine":65,"groupId":"15440","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d3/2b9093d3ea6bf8a54b0ac495d49883a4c09b39.src","preCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n    if (!SqlTypeUtil.isInterval(type3)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlHopTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"}],"commitId":"40e588de5f999034e5030b12cdbc90f4073808fe","commitMessage":"@@@[CALCITE-3737] HOP Table Function (Rui Wang)\n","date":"2020-05-09 20:23:46","modifiedFileCount":"8","status":"B","submitter":"amaliujia"},{"authorTime":"2020-05-16 12:15:17","codes":[{"authorDate":"2020-05-16 12:15:17","commitOrder":2,"curCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    if (callBinding.getOperandCount() > 3) {\n      final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n      if (!SqlTypeUtil.isInterval(type3)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n    }\n    return true;\n  }\n","date":"2020-07-16 14:09:25","endLine":68,"groupId":"15440","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/75/f746d0e1a047c42f3e300fc56456f0d175f167.src","preCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlTumbleTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2020-05-16 12:15:17","commitOrder":2,"curCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n    if (!SqlTypeUtil.isInterval(type3)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    if (callBinding.getOperandCount() > 4) {\n      final RelDataType type4 = validator.getValidatedNodeType(callBinding.operand(4));\n      if (!SqlTypeUtil.isInterval(type4)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n    }\n    return true;\n  }\n","date":"2020-07-16 14:09:25","endLine":69,"groupId":"15440","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f5/936ae8a5028f508122137498c41aa3f0082d4b.src","preCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n    if (!SqlTypeUtil.isInterval(type3)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlHopTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"9accb166b50417763a34a1d5664ab23ae12716fd","commitMessage":"@@@[CALCITE-4000] Support OFFSET parameter in TUMBLE/HOP table functions (Rui Wang)\n","date":"2020-07-16 14:09:25","modifiedFileCount":"7","status":"M","submitter":"amaliujia"},{"authorTime":"2020-09-22 20:08:53","codes":[{"authorDate":"2020-09-22 20:08:53","commitOrder":3,"curCode":"    @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n        boolean throwOnFailure) {\n      \r\n      \r\n      if (!checkTableAndDescriptorOperands(callBinding, 1)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      if (!checkTimeColumnDescriptorOperand(callBinding, 1)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      if (!checkIntervalOperands(callBinding, 2)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      return true;\n    }\n","date":"2020-09-28 01:45:06","endLine":59,"groupId":"101743","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/25/a857414e191b13fadf62e6e108172ef12ca0c8.src","preCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    if (callBinding.getOperandCount() > 3) {\n      final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n      if (!SqlTypeUtil.isInterval(type3)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlTumbleTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2020-09-22 20:08:53","commitOrder":3,"curCode":"    @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n        boolean throwOnFailure) {\n      if (!checkTableAndDescriptorOperands(callBinding, 1)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      if (!checkTimeColumnDescriptorOperand(callBinding, 1)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      if (!checkIntervalOperands(callBinding, 2)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      return true;\n    }\n","date":"2020-09-28 01:45:06","endLine":58,"groupId":"101743","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8c/616b0f5673a94542b0cfc12dcb1a8788701ba2.src","preCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n    if (!SqlTypeUtil.isInterval(type3)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    if (callBinding.getOperandCount() > 4) {\n      final RelDataType type4 = validator.getValidatedNodeType(callBinding.operand(4));\n      if (!SqlTypeUtil.isInterval(type4)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlHopTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"d701495640df77992b43093422e9331de103d9fd","commitMessage":"@@@[CALCITE-4176] Key descriptor can be optional in SESSION table function\n\nFix style\n\nFix style\n\nAdding tests to check time column for TUMBLE/HOP table function\n\nFix style\n","date":"2020-09-28 01:45:06","modifiedFileCount":"5","status":"M","submitter":"davonliu"}]
