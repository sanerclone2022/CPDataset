[{"authorTime":"2019-10-31 00:48:40","codes":[{"authorDate":"2019-10-31 00:48:40","commitOrder":1,"curCode":"  @Test public void testProjectExceptWithName() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .projectExcept(\n                builder.field(\"MGR\"),\n                builder.field(\"JOB\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0], ENAME=[$1], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2019-12-12 19:58:12","endLine":2061,"groupId":"7896","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectExceptWithName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fb/0bd60e0a3d024f22ee50c15b750cd3e3ea1e2a.src","preCode":"  @Test public void testProjectExceptWithName() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .projectExcept(\n                builder.field(\"MGR\"),\n                builder.field(\"JOB\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0], ENAME=[$1], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2049,"status":"B"},{"authorDate":"2019-10-31 00:48:40","commitOrder":1,"curCode":"  @Test public void testProjectExceptWithImplicitAliasAndName() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .projectExcept(\n                builder.field(\"EMP\", \"MGR\"),\n                builder.field(\"EMP\", \"JOB\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0], ENAME=[$1], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2019-12-12 19:58:12","endLine":2096,"groupId":"7896","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProjectExceptWithImplicitAliasAndName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fb/0bd60e0a3d024f22ee50c15b750cd3e3ea1e2a.src","preCode":"  @Test public void testProjectExceptWithImplicitAliasAndName() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .projectExcept(\n                builder.field(\"EMP\", \"MGR\"),\n                builder.field(\"EMP\", \"JOB\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0], ENAME=[$1], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2084,"status":"B"}],"commitId":"073abbe3028395c210dc98241adf80dd553dab83","commitMessage":"@@@[CALCITE-3462] Add projectExcept method in RelBuilder for projecting out expressions\n\n1. Add RelBuilder.projectExcept method (dual of projectPlus).\n2. Add unit tests using fields by ordinal.  name.  table alias and name.\n3. Add the new method in the site's documentation.\n\nClose apache/calcite#1554\n","date":"2019-12-12 19:58:12","modifiedFileCount":"2","status":"B","submitter":"Stamatis Zampetakis"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testProjectExceptWithName() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .projectExcept(\n                builder.field(\"MGR\"),\n                builder.field(\"JOB\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0], ENAME=[$1], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":2351,"groupId":"101270","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectExceptWithName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testProjectExceptWithName() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .projectExcept(\n                builder.field(\"MGR\"),\n                builder.field(\"JOB\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0], ENAME=[$1], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2339,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testProjectExceptWithImplicitAliasAndName() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .projectExcept(\n                builder.field(\"EMP\", \"MGR\"),\n                builder.field(\"EMP\", \"JOB\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0], ENAME=[$1], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":2386,"groupId":"101270","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProjectExceptWithImplicitAliasAndName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testProjectExceptWithImplicitAliasAndName() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .projectExcept(\n                builder.field(\"EMP\", \"MGR\"),\n                builder.field(\"EMP\", \"JOB\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0], ENAME=[$1], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2374,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
