[{"authorTime":"2018-10-17 09:47:44","codes":[{"authorDate":"2018-10-04 06:09:22","commitOrder":2,"curCode":"  @Test public void testSum0BecomesCoalesce() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.aggregateCall(SqlStdOperatorTable.SUM0, false, false, null,\n                \"s\", builder.field(3)))\n        .build();\n    final String expectedMysql = \"SELECT COALESCE(SUM(`MGR`), 0) AS `s`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, SqlDialect.DatabaseProduct.MYSQL.getDialect()),\n        isLinux(expectedMysql));\n    final String expectedPostgresql = \"SELECT COALESCE(SUM(\\\"MGR\\\"), 0) AS \\\"s\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\";\n    assertThat(toSql(root, SqlDialect.DatabaseProduct.POSTGRESQL.getDialect()),\n        isLinux(expectedPostgresql));\n  }\n","date":"2018-11-01 03:01:27","endLine":288,"groupId":"11850","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSum0BecomesCoalesce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/70/bf317f1e8758ff4cc0aec0deb0194375597867.src","preCode":"  @Test public void testSum0BecomesCoalesce() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.aggregateCall(SqlStdOperatorTable.SUM0, false, false, null,\n                \"s\", builder.field(3)))\n        .build();\n    final String expectedMysql = \"SELECT COALESCE(SUM(`MGR`), 0) AS `s`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, SqlDialect.DatabaseProduct.MYSQL.getDialect()),\n        isLinux(expectedMysql));\n    final String expectedPostgresql = \"SELECT COALESCE(SUM(\\\"MGR\\\"), 0) AS \\\"s\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\";\n    assertThat(toSql(root, SqlDialect.DatabaseProduct.POSTGRESQL.getDialect()),\n        isLinux(expectedPostgresql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"B"},{"authorDate":"2018-10-17 09:47:44","commitOrder":2,"curCode":"  @Test public void testNestedAggregatesMySqlTable() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.count(false, \"c\", builder.field(3)))\n        .build();\n    final SqlDialect dialect = SqlDialect.DatabaseProduct.MYSQL.getDialect();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, dialect), isLinux(expectedSql));\n  }\n","date":"2018-10-25 14:04:46","endLine":299,"groupId":"9133","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedAggregatesMySqlTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7e/5115842871c6c3b4273e514149109fdf78a071.src","preCode":"  @Test public void testNestedAggregatesMySqlTable() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.count(false, \"c\", builder.field(3)))\n        .build();\n    final SqlDialect dialect = SqlDialect.DatabaseProduct.MYSQL.getDialect();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, dialect), isLinux(expectedSql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"NB"}],"commitId":"332ffb44783142bd75ffd429e72bfba305aa3bf1","commitMessage":"@@@[CALCITE-1174] When generating SQL.  translate SUM0(x) to COALESCE(SUM(x).  0)\n\nDon't require that '(' and ')' are formally part of a list; it the\ncaller may not know the full context within the parse tree.\n\nAdd some tests for RelToSql applied to empty GROUP BY.\n","date":"2018-11-01 03:01:27","modifiedFileCount":"3","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-10-17 09:47:44","codes":[{"authorDate":"2018-11-04 10:59:11","commitOrder":3,"curCode":"  @Test public void testSum0BecomesCoalesce() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.aggregateCall(SqlStdOperatorTable.SUM0, false, null, \"s\",\n                builder.field(3)))\n        .build();\n    final String expectedMysql = \"SELECT COALESCE(SUM(`MGR`), 0) AS `s`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, SqlDialect.DatabaseProduct.MYSQL.getDialect()),\n        isLinux(expectedMysql));\n    final String expectedPostgresql = \"SELECT COALESCE(SUM(\\\"MGR\\\"), 0) AS \\\"s\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\";\n    assertThat(toSql(root, SqlDialect.DatabaseProduct.POSTGRESQL.getDialect()),\n        isLinux(expectedPostgresql));\n  }\n","date":"2018-11-08 08:33:06","endLine":288,"groupId":"11850","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSum0BecomesCoalesce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/94/b98b70f9b96fcd80a04eab4cc3ec7c7988c72e.src","preCode":"  @Test public void testSum0BecomesCoalesce() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.aggregateCall(SqlStdOperatorTable.SUM0, false, false, null,\n                \"s\", builder.field(3)))\n        .build();\n    final String expectedMysql = \"SELECT COALESCE(SUM(`MGR`), 0) AS `s`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, SqlDialect.DatabaseProduct.MYSQL.getDialect()),\n        isLinux(expectedMysql));\n    final String expectedPostgresql = \"SELECT COALESCE(SUM(\\\"MGR\\\"), 0) AS \\\"s\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\";\n    assertThat(toSql(root, SqlDialect.DatabaseProduct.POSTGRESQL.getDialect()),\n        isLinux(expectedPostgresql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"},{"authorDate":"2018-10-17 09:47:44","commitOrder":3,"curCode":"  @Test public void testNestedAggregatesMySqlTable() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.count(false, \"c\", builder.field(3)))\n        .build();\n    final SqlDialect dialect = SqlDialect.DatabaseProduct.MYSQL.getDialect();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, dialect), isLinux(expectedSql));\n  }\n","date":"2018-10-25 14:04:46","endLine":299,"groupId":"9133","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedAggregatesMySqlTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7e/5115842871c6c3b4273e514149109fdf78a071.src","preCode":"  @Test public void testNestedAggregatesMySqlTable() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.count(false, \"c\", builder.field(3)))\n        .build();\n    final SqlDialect dialect = SqlDialect.DatabaseProduct.MYSQL.getDialect();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, dialect), isLinux(expectedSql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"N"}],"commitId":"4cc46130f71d21e4f5b76f6e645380cd83d2c921","commitMessage":"@@@[CALCITE-2654] In RelBuilder.  add a fluent API for building complex aggregate calls\n\nTo interface AggCall in RelBuilder.  add methods distinct(boolean). \nfilter(RexNode).  approximate(boolean).  alias(String). And simplify the\nRelBuilder.aggregateCall method to just two arguments:\naggregateCall(op.  operands). Thus you only specify the arguments that\nare of interest. Similar changes to count.  countStar.  min.  max.  sum. \navg.\n","date":"2018-11-08 08:33:06","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-10-17 09:47:44","codes":[{"authorDate":"2018-09-27 17:55:02","commitOrder":4,"curCode":"  @Test public void testSum0BecomesCoalesce() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.aggregateCall(SqlStdOperatorTable.SUM0, builder.field(3))\n                .as(\"s\"))\n        .build();\n    final String expectedMysql = \"SELECT COALESCE(SUM(`MGR`), 0) AS `s`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, SqlDialect.DatabaseProduct.MYSQL.getDialect()),\n        isLinux(expectedMysql));\n    final String expectedPostgresql = \"SELECT COALESCE(SUM(\\\"MGR\\\"), 0) AS \\\"s\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\";\n    assertThat(toSql(root, SqlDialect.DatabaseProduct.POSTGRESQL.getDialect()),\n        isLinux(expectedPostgresql));\n  }\n","date":"2018-11-09 02:00:28","endLine":288,"groupId":"14635","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSum0BecomesCoalesce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7a/5181ed199fce0ed45c328453117c2c486a7c3b.src","preCode":"  @Test public void testSum0BecomesCoalesce() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.aggregateCall(SqlStdOperatorTable.SUM0, false, null, \"s\",\n                builder.field(3)))\n        .build();\n    final String expectedMysql = \"SELECT COALESCE(SUM(`MGR`), 0) AS `s`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, SqlDialect.DatabaseProduct.MYSQL.getDialect()),\n        isLinux(expectedMysql));\n    final String expectedPostgresql = \"SELECT COALESCE(SUM(\\\"MGR\\\"), 0) AS \\\"s\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\";\n    assertThat(toSql(root, SqlDialect.DatabaseProduct.POSTGRESQL.getDialect()),\n        isLinux(expectedPostgresql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"},{"authorDate":"2018-10-17 09:47:44","commitOrder":4,"curCode":"  @Test public void testNestedAggregatesMySqlTable() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.count(false, \"c\", builder.field(3)))\n        .build();\n    final SqlDialect dialect = SqlDialect.DatabaseProduct.MYSQL.getDialect();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, dialect), isLinux(expectedSql));\n  }\n","date":"2018-10-25 14:04:46","endLine":299,"groupId":"9133","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedAggregatesMySqlTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7e/5115842871c6c3b4273e514149109fdf78a071.src","preCode":"  @Test public void testNestedAggregatesMySqlTable() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.count(false, \"c\", builder.field(3)))\n        .build();\n    final SqlDialect dialect = SqlDialect.DatabaseProduct.MYSQL.getDialect();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, dialect), isLinux(expectedSql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"N"}],"commitId":"7bc9f14032b7cf0761c0b2eefdb6bb588047ec8e","commitMessage":"@@@[CALCITE-2224] Support WITHIN GROUP clause for aggregate functions (Hongze Zhang)\n\nClose apache/calcite#871\n","date":"2018-11-09 02:00:28","modifiedFileCount":"60","status":"M","submitter":"hongzezhang"},{"authorTime":"2020-02-21 10:29:14","codes":[{"authorDate":"2020-02-21 10:29:14","commitOrder":5,"curCode":"  @Test public void testSum0BecomesCoalesce() {\n    final Function<RelBuilder, RelNode> fn = b -> b.scan(\"EMP\")\n        .aggregate(b.groupKey(),\n            b.aggregateCall(SqlStdOperatorTable.SUM0, b.field(3))\n                .as(\"s\"))\n        .build();\n    final String expectedMysql = \"SELECT COALESCE(SUM(`MGR`), 0) AS `s`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    final String expectedPostgresql = \"SELECT COALESCE(SUM(\\\"MGR\\\"), 0) AS \\\"s\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\";\n    relFn(fn)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withMysql()\n        .ok(expectedMysql);\n  }\n","date":"2020-02-22 01:55:43","endLine":612,"groupId":"6148","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSum0BecomesCoalesce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/8abea1fd2182ece1feb8d73e94b8b494b4d043.src","preCode":"  @Test public void testSum0BecomesCoalesce() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.aggregateCall(SqlStdOperatorTable.SUM0, builder.field(3))\n                .as(\"s\"))\n        .build();\n    final String expectedMysql = \"SELECT COALESCE(SUM(`MGR`), 0) AS `s`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, SqlDialect.DatabaseProduct.MYSQL.getDialect()),\n        isLinux(expectedMysql));\n    final String expectedPostgresql = \"SELECT COALESCE(SUM(\\\"MGR\\\"), 0) AS \\\"s\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\";\n    assertThat(toSql(root, SqlDialect.DatabaseProduct.POSTGRESQL.getDialect()),\n        isLinux(expectedPostgresql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":597,"status":"M"},{"authorDate":"2020-02-21 10:29:14","commitOrder":5,"curCode":"  @Test public void testNestedAggregatesMySqlTable() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .aggregate(b.groupKey(),\n            b.count(false, \"c\", b.field(3)))\n        .build();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    relFn(relFn).withMysql().ok(expectedSql);\n  }\n","date":"2020-02-22 01:55:43","endLine":745,"groupId":"6148","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedAggregatesMySqlTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/8abea1fd2182ece1feb8d73e94b8b494b4d043.src","preCode":"  @Test public void testNestedAggregatesMySqlTable() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.count(false, \"c\", builder.field(3)))\n        .build();\n    final SqlDialect dialect = SqlDialect.DatabaseProduct.MYSQL.getDialect();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, dialect), isLinux(expectedSql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":736,"status":"M"}],"commitId":"6d974f1b23bdca566d01cb7cbb1ec46d7ef5e84c","commitMessage":"@@@Refactor RelToSqlConverterTest\n\nMake test cases that use RelBuilder fluent.  like test cases that use SQL.\n","date":"2020-02-22 01:55:43","modifiedFileCount":"2","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testSum0BecomesCoalesce() {\n    final Function<RelBuilder, RelNode> fn = b -> b.scan(\"EMP\")\n        .aggregate(b.groupKey(),\n            b.aggregateCall(SqlStdOperatorTable.SUM0, b.field(3))\n                .as(\"s\"))\n        .build();\n    final String expectedMysql = \"SELECT COALESCE(SUM(`MGR`), 0) AS `s`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    final String expectedPostgresql = \"SELECT COALESCE(SUM(\\\"MGR\\\"), 0) AS \\\"s\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\";\n    relFn(fn)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withMysql()\n        .ok(expectedMysql);\n  }\n","date":"2020-04-06 04:57:49","endLine":614,"groupId":"6148","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSum0BecomesCoalesce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testSum0BecomesCoalesce() {\n    final Function<RelBuilder, RelNode> fn = b -> b.scan(\"EMP\")\n        .aggregate(b.groupKey(),\n            b.aggregateCall(SqlStdOperatorTable.SUM0, b.field(3))\n                .as(\"s\"))\n        .build();\n    final String expectedMysql = \"SELECT COALESCE(SUM(`MGR`), 0) AS `s`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    final String expectedPostgresql = \"SELECT COALESCE(SUM(\\\"MGR\\\"), 0) AS \\\"s\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\";\n    relFn(fn)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withMysql()\n        .ok(expectedMysql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":599,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testNestedAggregatesMySqlTable() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .aggregate(b.groupKey(),\n            b.count(false, \"c\", b.field(3)))\n        .build();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    relFn(relFn).withMysql().ok(expectedSql);\n  }\n","date":"2020-04-06 04:57:49","endLine":861,"groupId":"6148","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedAggregatesMySqlTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testNestedAggregatesMySqlTable() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .aggregate(b.groupKey(),\n            b.count(false, \"c\", b.field(3)))\n        .build();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    relFn(relFn).withMysql().ok(expectedSql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":852,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-12-29 05:17:34","commitOrder":7,"curCode":"  @Test void testSum0BecomesCoalesce() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .aggregate(b.groupKey(),\n            b.aggregateCall(SqlStdOperatorTable.SUM0, b.field(3))\n                .as(\"s\"))\n        .build();\n    final String expectedMysql = \"SELECT COALESCE(SUM(`MGR`), 0) AS `s`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    final String expectedPostgresql = \"SELECT COALESCE(SUM(\\\"MGR\\\"), 0) AS \\\"s\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\";\n    relFn(relFn)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withMysql()\n        .ok(expectedMysql);\n  }\n","date":"2021-01-06 05:04:15","endLine":725,"groupId":"101529","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSum0BecomesCoalesce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/13/ec1a360cf90bc58656dd7a69d7010f2f1239ca.src","preCode":"  @Test void testSum0BecomesCoalesce() {\n    final Function<RelBuilder, RelNode> fn = b -> b.scan(\"EMP\")\n        .aggregate(b.groupKey(),\n            b.aggregateCall(SqlStdOperatorTable.SUM0, b.field(3))\n                .as(\"s\"))\n        .build();\n    final String expectedMysql = \"SELECT COALESCE(SUM(`MGR`), 0) AS `s`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    final String expectedPostgresql = \"SELECT COALESCE(SUM(\\\"MGR\\\"), 0) AS \\\"s\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\";\n    relFn(fn)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withMysql()\n        .ok(expectedMysql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":709,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testNestedAggregatesMySqlTable() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .aggregate(b.groupKey(),\n            b.count(false, \"c\", b.field(3)))\n        .build();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    relFn(relFn).withMysql().ok(expectedSql);\n  }\n","date":"2020-04-06 04:57:49","endLine":861,"groupId":"101529","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedAggregatesMySqlTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test void testNestedAggregatesMySqlTable() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .aggregate(b.groupKey(),\n            b.count(false, \"c\", b.field(3)))\n        .build();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    relFn(relFn).withMysql().ok(expectedSql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":852,"status":"N"}],"commitId":"28d1c097e28dbc17f62ac1311755673d65337217","commitMessage":"@@@Cosmetic changes\n\nCode and comment formatting in RelToSqlConverterTest.\n","date":"2021-01-06 05:04:15","modifiedFileCount":"1","status":"M","submitter":"Julian Hyde"}]
