[{"authorTime":"2020-11-11 16:23:05","codes":[{"authorDate":"2020-09-10 07:48:24","commitOrder":3,"curCode":"  @Test void testVisitSqlInsertWithSqlShuttle() throws Exception {\n    final String sql = \"insert into emps select * from emps\";\n    final SqlNode sqlNode = getSqlParser(sql).parseStmt();\n    final SqlNode sqlNodeVisited = sqlNode.accept(new SqlShuttle() {\n      @Override public SqlNode visit(SqlIdentifier identifier) {\n        return new SqlIdentifier(identifier.names,\n            identifier.getParserPosition());\n      }\n    });\n    assertNotSame(sqlNodeVisited, sqlNode);\n    assertThat(sqlNodeVisited.getKind(), is(SqlKind.INSERT));\n  }\n","date":"2020-09-18 10:35:30","endLine":5971,"groupId":"13210","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testVisitSqlInsertWithSqlShuttle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6c/d1a9613e189238221e85788dafc7e38ba16391.src","preCode":"  @Test void testVisitSqlInsertWithSqlShuttle() throws Exception {\n    final String sql = \"insert into emps select * from emps\";\n    final SqlNode sqlNode = getSqlParser(sql).parseStmt();\n    final SqlNode sqlNodeVisited = sqlNode.accept(new SqlShuttle() {\n      @Override public SqlNode visit(SqlIdentifier identifier) {\n        return new SqlIdentifier(identifier.names,\n            identifier.getParserPosition());\n      }\n    });\n    assertNotSame(sqlNodeVisited, sqlNode);\n    assertThat(sqlNodeVisited.getKind(), is(SqlKind.INSERT));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5960,"status":"NB"},{"authorDate":"2020-11-11 16:23:05","commitOrder":3,"curCode":"  @Test void testVisitSqlMatchRecognizeWithSqlShuttle() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from emp \\n\"\n        + \"match_recognize (\\n\"\n        + \"  pattern (strt down+ up+)\\n\"\n        + \"  define\\n\"\n        + \"    down as down.sal < PREV(down.sal),\\n\"\n        + \"    up as up.sal > PREV(up.sal)\\n\"\n        + \") mr\";\n    final SqlNode sqlNode = getSqlParser(sql).parseStmt();\n    final SqlNode sqlNodeVisited = sqlNode.accept(new SqlShuttle() {\n      @Override public SqlNode visit(SqlIdentifier identifier) {\n        return new SqlIdentifier(identifier.names,\n            identifier.getParserPosition());\n      }\n    });\n    assertNotSame(sqlNodeVisited, sqlNode);\n  }\n","date":"2020-11-12 18:07:05","endLine":6206,"groupId":"13210","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testVisitSqlMatchRecognizeWithSqlShuttle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f2/0dcb12b883ad877d2f606818ee1533d5f2bfbb.src","preCode":"  @Test void testVisitSqlMatchRecognizeWithSqlShuttle() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from emp \\n\"\n        + \"match_recognize (\\n\"\n        + \"  pattern (strt down+ up+)\\n\"\n        + \"  define\\n\"\n        + \"    down as down.sal < PREV(down.sal),\\n\"\n        + \"    up as up.sal > PREV(up.sal)\\n\"\n        + \") mr\";\n    final SqlNode sqlNode = getSqlParser(sql).parseStmt();\n    final SqlNode sqlNodeVisited = sqlNode.accept(new SqlShuttle() {\n      @Override public SqlNode visit(SqlIdentifier identifier) {\n        return new SqlIdentifier(identifier.names,\n            identifier.getParserPosition());\n      }\n    });\n    assertNotSame(sqlNodeVisited, sqlNode);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6189,"status":"B"}],"commitId":"0ce7685477d33374ddf0fe7f32b5a2d04040b47c","commitMessage":"@@@[CALCITE-4390] SqlMatchRecognize returns wrong operand list (Dawid\nWysakowicz)\n","date":"2020-11-12 18:07:05","modifiedFileCount":"2","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-11-18 14:25:13","codes":[{"authorDate":"2020-11-18 14:25:13","commitOrder":4,"curCode":"  @Test void testVisitSqlInsertWithSqlShuttle() throws Exception {\n    final String sql = \"insert into emps select * from emps\";\n    final SqlNode sqlNode = getSqlParser(sql).parseStmt();\n    final SqlNode sqlNodeVisited = sqlNode.accept(new SqlShuttle() {\n      @Override public SqlNode visit(SqlIdentifier identifier) {\n        \r\n        return identifier.clone(identifier.getParserPosition());\n      }\n    });\n    assertNotSame(sqlNodeVisited, sqlNode);\n    assertThat(sqlNodeVisited.getKind(), is(SqlKind.INSERT));\n  }\n","date":"2020-11-18 19:35:05","endLine":6159,"groupId":"10874","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testVisitSqlInsertWithSqlShuttle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/37/182a3e207c92e71fdf550d2d11dd33b3f481b1.src","preCode":"  @Test void testVisitSqlInsertWithSqlShuttle() throws Exception {\n    final String sql = \"insert into emps select * from emps\";\n    final SqlNode sqlNode = getSqlParser(sql).parseStmt();\n    final SqlNode sqlNodeVisited = sqlNode.accept(new SqlShuttle() {\n      @Override public SqlNode visit(SqlIdentifier identifier) {\n        return new SqlIdentifier(identifier.names,\n            identifier.getParserPosition());\n      }\n    });\n    assertNotSame(sqlNodeVisited, sqlNode);\n    assertThat(sqlNodeVisited.getKind(), is(SqlKind.INSERT));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6148,"status":"M"},{"authorDate":"2020-11-18 14:25:13","commitOrder":4,"curCode":"  @Test void testVisitSqlMatchRecognizeWithSqlShuttle() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from emp \\n\"\n        + \"match_recognize (\\n\"\n        + \"  pattern (strt down+ up+)\\n\"\n        + \"  define\\n\"\n        + \"    down as down.sal < PREV(down.sal),\\n\"\n        + \"    up as up.sal > PREV(up.sal)\\n\"\n        + \") mr\";\n    final SqlNode sqlNode = getSqlParser(sql).parseStmt();\n    final SqlNode sqlNodeVisited = sqlNode.accept(new SqlShuttle() {\n      @Override public SqlNode visit(SqlIdentifier identifier) {\n        \r\n        return identifier.clone(identifier.getParserPosition());\n      }\n    });\n    assertNotSame(sqlNodeVisited, sqlNode);\n  }\n","date":"2020-11-18 19:35:05","endLine":6206,"groupId":"10874","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testVisitSqlMatchRecognizeWithSqlShuttle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/37/182a3e207c92e71fdf550d2d11dd33b3f481b1.src","preCode":"  @Test void testVisitSqlMatchRecognizeWithSqlShuttle() throws Exception {\n    final String sql = \"select *\\n\"\n        + \"from emp \\n\"\n        + \"match_recognize (\\n\"\n        + \"  pattern (strt down+ up+)\\n\"\n        + \"  define\\n\"\n        + \"    down as down.sal < PREV(down.sal),\\n\"\n        + \"    up as up.sal > PREV(up.sal)\\n\"\n        + \") mr\";\n    final SqlNode sqlNode = getSqlParser(sql).parseStmt();\n    final SqlNode sqlNodeVisited = sqlNode.accept(new SqlShuttle() {\n      @Override public SqlNode visit(SqlIdentifier identifier) {\n        return new SqlIdentifier(identifier.names,\n            identifier.getParserPosition());\n      }\n    });\n    assertNotSame(sqlNodeVisited, sqlNode);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6189,"status":"M"}],"commitId":"61771ccdb9148f6d2e0bb3e36a4e54d614321eb8","commitMessage":"@@@[CALCITE-4406] SqlTableRef OPERATOR should create a SqlTableRef as the call\n","date":"2020-11-18 19:35:05","modifiedFileCount":"3","status":"M","submitter":"yuzhao.cyz"}]
