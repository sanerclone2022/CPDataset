[{"authorTime":"2020-10-12 07:22:07","codes":[{"authorDate":"2020-09-17 05:42:37","commitOrder":8,"curCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal(1)), gt(aRef, literal(1))),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal(1)), ge(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(lt(aRef, literal(1)), eq(aRef, literal(1)), ge(aRef, literal(1))),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal(1)), trueLiteral),\n            eq(bRef, literal(1)));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal(1)), eq(aRef, literal(10)));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(1)), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(10)), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal(10)), ge(bRef, literal(1)), lt(aRef, literal(10))),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal(10)), gt(bRef, literal(1)), gt(aRef, literal(10))),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal(1))), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), le(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal(5)))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(1)))),\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(5)))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal(5)), gt(bRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n  }\n","date":"2020-09-28 23:30:05","endLine":1233,"groupId":"7663","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8d/15644592da26a07c77aae4d4f9dce60876ce01.src","preCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal(1)), gt(aRef, literal(1))),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal(1)), ge(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(lt(aRef, literal(1)), eq(aRef, literal(1)), ge(aRef, literal(1))),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal(1)), trueLiteral),\n            eq(bRef, literal(1)));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal(1)), eq(aRef, literal(10)));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(1)), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(10)), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal(10)), ge(bRef, literal(1)), lt(aRef, literal(10))),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal(10)), gt(bRef, literal(1)), gt(aRef, literal(10))),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal(1))), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), le(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal(5)))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(1)))),\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(5)))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal(5)), gt(bRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1045,"status":"NB"},{"authorDate":"2020-10-12 07:22:07","commitOrder":8,"curCode":"  @Test void testSimplifyRange7() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = and(\n        isNotNull(aRef),\n        gt(aRef, literal(3)),\n        lt(aRef, literal(10)));\n    final String simplified = \"SEARCH($0, Sarg[(3..10)])\";\n    final String expanded = \"AND(>($0, 3), <($0, 10))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","date":"2020-10-15 09:15:13","endLine":1671,"groupId":"1813","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyRange7","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/2550aae581862267f104ef2721f8be8cd8c0ce.src","preCode":"  @Test void testSimplifyRange7() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = and(\n        isNotNull(aRef),\n        gt(aRef, literal(3)),\n        lt(aRef, literal(10)));\n    final String simplified = \"SEARCH($0, Sarg[(3..10)])\";\n    final String expanded = \"AND(>($0, 3), <($0, 10))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1660,"status":"B"}],"commitId":"ee5c78444558117c71cc7058a79bc920a52cad59","commitMessage":"@@@[CALCITE-4325] RexSimplify incorrectly simplifies complex expressions that contain Sarg and IS NULL\n\nImprove how class Sarg handles IS NULL and IS NOT NULL\nconditions. They are now handled symmetrically.  using fields\nnullCount and notNullCount.  whereas previously we used\ncontainsNull.  which could handle IS NULL only in certain\ncircumstances and IS NOT NULL not at all.\n\nIn CalciteAssert.  correct rounding floating point rounding\nerrors before comparing SQL column values. For example. \n'236.55000000000007' becomes '236.55'. This fixes some\nintermittent Druid test failures.\n","date":"2020-10-15 09:15:13","modifiedFileCount":"5","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-10-12 07:22:07","codes":[{"authorDate":"2020-11-05 15:01:59","commitOrder":9,"curCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal(1)), gt(aRef, literal(1))),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal(1)), ge(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(lt(aRef, literal(1)), eq(aRef, literal(1)), ge(aRef, literal(1))),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal(1)), trueLiteral),\n            eq(bRef, literal(1)));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal(1)), eq(aRef, literal(10)));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(1)), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(10)), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal(10)), ge(bRef, literal(1)), lt(aRef, literal(10))),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal(10)), gt(bRef, literal(1)), gt(aRef, literal(10))),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal(1))), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(?0.a, 5)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(?0.a, 1)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), le(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal(5)))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(1)))),\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(5)))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal(5)), gt(bRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n  }\n","date":"2020-11-12 17:39:03","endLine":1236,"groupId":"7663","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/8d0a2609bc72f85d32f075ad25570149cd1bd8.src","preCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal(1)), gt(aRef, literal(1))),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal(1)), ge(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(lt(aRef, literal(1)), eq(aRef, literal(1)), ge(aRef, literal(1))),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal(1)), trueLiteral),\n            eq(bRef, literal(1)));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal(1)), eq(aRef, literal(10)));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(1)), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(10)), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal(10)), ge(bRef, literal(1)), lt(aRef, literal(10))),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal(10)), gt(bRef, literal(1)), gt(aRef, literal(10))),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal(1))), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), le(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal(5)))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(1)))),\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(5)))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal(5)), gt(bRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1048,"status":"M"},{"authorDate":"2020-10-12 07:22:07","commitOrder":9,"curCode":"  @Test void testSimplifyRange7() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = and(\n        isNotNull(aRef),\n        gt(aRef, literal(3)),\n        lt(aRef, literal(10)));\n    final String simplified = \"SEARCH($0, Sarg[(3..10)])\";\n    final String expanded = \"AND(>($0, 3), <($0, 10))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","date":"2020-10-15 09:15:13","endLine":1671,"groupId":"1813","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyRange7","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/2550aae581862267f104ef2721f8be8cd8c0ce.src","preCode":"  @Test void testSimplifyRange7() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = and(\n        isNotNull(aRef),\n        gt(aRef, literal(3)),\n        lt(aRef, literal(10)));\n    final String simplified = \"SEARCH($0, Sarg[(3..10)])\";\n    final String expanded = \"AND(>($0, 3), <($0, 10))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1660,"status":"N"}],"commitId":"5e9943aa1f51a97068fc37d53dea1d447570becc","commitMessage":"@@@[CALCITE-4364] `a IN (1.  2) AND a = 1` should be simplified to `a = 1`\n","date":"2020-11-12 17:39:03","modifiedFileCount":"8","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-12-24 05:32:41","codes":[{"authorDate":"2020-11-05 15:01:59","commitOrder":10,"curCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal(1)), gt(aRef, literal(1))),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal(1)), ge(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(lt(aRef, literal(1)), eq(aRef, literal(1)), ge(aRef, literal(1))),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal(1)), trueLiteral),\n            eq(bRef, literal(1)));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal(1)), eq(aRef, literal(10)));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(1)), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(10)), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal(10)), ge(bRef, literal(1)), lt(aRef, literal(10))),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal(10)), gt(bRef, literal(1)), gt(aRef, literal(10))),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal(1))), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(?0.a, 5)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(?0.a, 1)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), le(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal(5)))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(1)))),\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(5)))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal(5)), gt(bRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n  }\n","date":"2020-11-12 17:39:03","endLine":1236,"groupId":"10687","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/8d0a2609bc72f85d32f075ad25570149cd1bd8.src","preCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal(1)), gt(aRef, literal(1))),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal(1)), ge(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(lt(aRef, literal(1)), eq(aRef, literal(1)), ge(aRef, literal(1))),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal(1)), trueLiteral),\n            eq(bRef, literal(1)));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal(1)), eq(aRef, literal(10)));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(1)), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(10)), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal(10)), ge(bRef, literal(1)), lt(aRef, literal(10))),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal(10)), gt(bRef, literal(1)), gt(aRef, literal(10))),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal(1))), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(?0.a, 5)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(?0.a, 1)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), le(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal(5)))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(1)))),\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(5)))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal(5)), gt(bRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1048,"status":"N"},{"authorDate":"2020-12-24 05:32:41","commitOrder":10,"curCode":"  @Test void testSimplifyRange7() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = and(\n        isNotNull(aRef),\n        gt(aRef, literal(3)),\n        lt(aRef, literal(10)));\n    final String simplified = \"SEARCH($0, Sarg[(3..10); NULL AS FALSE])\";\n    final String expanded = \"AND(IS NOT NULL($0), AND(>($0, 3), <($0, 10)))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","date":"2021-03-03 04:28:27","endLine":1691,"groupId":"10687","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyRange7","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/8a748d0cead45d1ae0e14d213cb2ee4e907113.src","preCode":"  @Test void testSimplifyRange7() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = and(\n        isNotNull(aRef),\n        gt(aRef, literal(3)),\n        lt(aRef, literal(10)));\n    final String simplified = \"SEARCH($0, Sarg[(3..10)])\";\n    final String expanded = \"AND(>($0, 3), <($0, 10))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1680,"status":"M"}],"commitId":"00d1086c7003115a9ed9dcc874051f515b7b5aae","commitMessage":"@@@[CALCITE-4446] Implement three-valued logic for SEARCH operator\n\nClose apache/calcite#2357\n","date":"2021-03-03 04:28:27","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"}]
