[{"authorTime":"2017-07-07 06:19:58","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testOne() {\n    DirectedGraph<String, DefaultEdge> g = DefaultDirectedGraph.create();\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\");\n    g.addEdge(\"B\", \"C\");\n    g.addEdge(\"D\", \"C\");\n    g.addEdge(\"C\", \"D\");\n    g.addEdge(\"E\", \"F\");\n    g.addEdge(\"C\", \"C\");\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\");\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(\"There is no path from A to E\", shortestPath(g, \"A\", \"E\"));\n    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(\"Node X is not in the graph\", shortestPath(g, \"X\", \"A\"));\n    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n  }\n","date":"2014-11-14 09:39:34","endLine":60,"groupId":"6079","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6f/f7d35422fbee4040bc9886a7847aab16846d04.src","preCode":"  @Test public void testOne() {\n    DirectedGraph<String, DefaultEdge> g = DefaultDirectedGraph.create();\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\");\n    g.addEdge(\"B\", \"C\");\n    g.addEdge(\"D\", \"C\");\n    g.addEdge(\"C\", \"D\");\n    g.addEdge(\"E\", \"F\");\n    g.addEdge(\"C\", \"C\");\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\");\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(\"There is no path from A to E\", shortestPath(g, \"A\", \"E\"));\n    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(\"Node X is not in the graph\", shortestPath(g, \"X\", \"A\"));\n    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"NB"},{"authorDate":"2017-07-07 06:19:58","commitOrder":2,"curCode":"  @Test public void testAttributed() {\n    AttributedDirectedGraph<String, DefaultEdge> g =\n        AttributedDirectedGraph.create(new DefaultAttributedEdgeFactory());\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\", 1);\n    g.addEdge(\"B\", \"C\", 1);\n    g.addEdge(\"D\", \"C\", 1);\n    g.addEdge(\"C\", \"D\", 1);\n    g.addEdge(\"E\", \"F\", 1);\n    g.addEdge(\"C\", \"C\", 1);\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\", 1);\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(\"There is no path from A to E\", shortestPath(g, \"A\", \"E\"));\n    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(\"Node X is not in the graph\", shortestPath(g, \"X\", \"A\"));\n    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n    assertThat(g.addVertex(\"B\"), is(false));\n\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 1), nullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 2), notNullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(2));\n  }\n","date":"2018-10-30 07:51:43","endLine":346,"groupId":"492","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAttributed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/87/c06008779efa2647fdfbcbf5c8a7abe8166d50.src","preCode":"  @Test public void testAttributed() {\n    AttributedDirectedGraph<String, DefaultEdge> g =\n        AttributedDirectedGraph.create(new DefaultAttributedEdgeFactory());\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\", 1);\n    g.addEdge(\"B\", \"C\", 1);\n    g.addEdge(\"D\", \"C\", 1);\n    g.addEdge(\"C\", \"D\", 1);\n    g.addEdge(\"E\", \"F\", 1);\n    g.addEdge(\"C\", \"C\", 1);\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\", 1);\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(\"There is no path from A to E\", shortestPath(g, \"A\", \"E\"));\n    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(\"Node X is not in the graph\", shortestPath(g, \"X\", \"A\"));\n    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n    assertThat(g.addVertex(\"B\"), is(false));\n\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 1), nullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 2), notNullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(2));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"B"}],"commitId":"b47413a1d648455c43dbe8d51df926ebd68b3a36","commitMessage":"@@@[CALCITE-1870] Lattice suggester\n\nDon't add a query graph if it is cyclic.\n\nMore concise descriptions of join graphs.  and add FoodMart test case.\nAdd a test based on TPC-DS.\n\nMake FoodMartQueryTest a top-level class.  and add a test that runs\nthrough all of its queries and suggests lattices.\n\nAPI changes to Lattice. Rename class Lattice.Node to LatticeNode.  add\nsub-class LatticeRootNode that is immutable and has state that was\npreviously in Lattice. LatticeSuggester makes heavy use of LatticeNode.\nMove column unique name into Column.  and remove the\nLattice.uniqueColumnNames field.\n\nDirectedGraph.toString sorts lists of vertices and edges.\n\nAdd materialized views to documentation menu;\ntweak SQL formatting.\n\nIn HepPlanner.  rename noDAG to noDag.\n\nSqlImplementor: Translate simple RexNode to SQL without requiring RelBuilder;\nSqlImplementor.Context is now static.  but not all derived classes are.\n\nFix a typo in UdfTest.\n","date":"2018-10-30 07:51:43","modifiedFileCount":"19","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-12-03 06:13:11","codes":[{"authorDate":"2019-12-03 06:13:11","commitOrder":3,"curCode":"  @Test public void testOne() {\n    DirectedGraph<String, DefaultEdge> g = DefaultDirectedGraph.create();\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\");\n    g.addEdge(\"B\", \"C\");\n    g.addEdge(\"D\", \"C\");\n    g.addEdge(\"C\", \"D\");\n    g.addEdge(\"E\", \"F\");\n    g.addEdge(\"C\", \"C\");\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\");\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n  }\n","date":"2019-12-04 03:17:33","endLine":73,"groupId":"6079","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e8/46e646869ad7d417d4dd526b6357227d39a798.src","preCode":"  @Test public void testOne() {\n    DirectedGraph<String, DefaultEdge> g = DefaultDirectedGraph.create();\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\");\n    g.addEdge(\"B\", \"C\");\n    g.addEdge(\"D\", \"C\");\n    g.addEdge(\"C\", \"D\");\n    g.addEdge(\"E\", \"F\");\n    g.addEdge(\"C\", \"C\");\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\");\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(\"There is no path from A to E\", shortestPath(g, \"A\", \"E\"));\n    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(\"Node X is not in the graph\", shortestPath(g, \"X\", \"A\"));\n    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2019-12-03 06:13:11","commitOrder":3,"curCode":"  @Test public void testAttributed() {\n    AttributedDirectedGraph<String, DefaultEdge> g =\n        AttributedDirectedGraph.create(new DefaultAttributedEdgeFactory());\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\", 1);\n    g.addEdge(\"B\", \"C\", 1);\n    g.addEdge(\"D\", \"C\", 1);\n    g.addEdge(\"C\", \"D\", 1);\n    g.addEdge(\"E\", \"F\", 1);\n    g.addEdge(\"C\", \"C\", 1);\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\", 1);\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n    assertThat(g.addVertex(\"B\"), is(false));\n\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 1), nullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 2), notNullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(2));\n  }\n","date":"2019-12-04 03:17:33","endLine":346,"groupId":"2981","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAttributed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e8/46e646869ad7d417d4dd526b6357227d39a798.src","preCode":"  @Test public void testAttributed() {\n    AttributedDirectedGraph<String, DefaultEdge> g =\n        AttributedDirectedGraph.create(new DefaultAttributedEdgeFactory());\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\", 1);\n    g.addEdge(\"B\", \"C\", 1);\n    g.addEdge(\"D\", \"C\", 1);\n    g.addEdge(\"C\", \"D\", 1);\n    g.addEdge(\"E\", \"F\", 1);\n    g.addEdge(\"C\", \"C\", 1);\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\", 1);\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(\"There is no path from A to E\", shortestPath(g, \"A\", \"E\"));\n    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(\"Node X is not in the graph\", shortestPath(g, \"X\", \"A\"));\n    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n    assertThat(g.addVertex(\"B\"), is(false));\n\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 1), nullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 2), notNullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(2));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"M"}],"commitId":"963ab743866ee5f934f65d9c8b3ef2bcb27911bc","commitMessage":"@@@[CALCITE-2457] JUnit 4 -> 5: less trivial changes\n","date":"2019-12-04 03:17:33","modifiedFileCount":"17","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testOne() {\n    DirectedGraph<String, DefaultEdge> g = DefaultDirectedGraph.create();\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\");\n    g.addEdge(\"B\", \"C\");\n    g.addEdge(\"D\", \"C\");\n    g.addEdge(\"C\", \"D\");\n    g.addEdge(\"E\", \"F\");\n    g.addEdge(\"C\", \"C\");\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\");\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n  }\n","date":"2020-04-06 04:57:49","endLine":70,"groupId":"6079","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b1/d612ccf80c979a78de80939cba95c9a5f0bceb.src","preCode":"  @Test public void testOne() {\n    DirectedGraph<String, DefaultEdge> g = DefaultDirectedGraph.create();\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\");\n    g.addEdge(\"B\", \"C\");\n    g.addEdge(\"D\", \"C\");\n    g.addEdge(\"C\", \"D\");\n    g.addEdge(\"E\", \"F\");\n    g.addEdge(\"C\", \"C\");\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\");\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testAttributed() {\n    AttributedDirectedGraph<String, DefaultEdge> g =\n        AttributedDirectedGraph.create(new DefaultAttributedEdgeFactory());\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\", 1);\n    g.addEdge(\"B\", \"C\", 1);\n    g.addEdge(\"D\", \"C\", 1);\n    g.addEdge(\"C\", \"D\", 1);\n    g.addEdge(\"E\", \"F\", 1);\n    g.addEdge(\"C\", \"C\", 1);\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\", 1);\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n    assertThat(g.addVertex(\"B\"), is(false));\n\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 1), nullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 2), notNullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(2));\n  }\n","date":"2020-04-06 04:57:49","endLine":343,"groupId":"2981","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAttributed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b1/d612ccf80c979a78de80939cba95c9a5f0bceb.src","preCode":"  @Test public void testAttributed() {\n    AttributedDirectedGraph<String, DefaultEdge> g =\n        AttributedDirectedGraph.create(new DefaultAttributedEdgeFactory());\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\", 1);\n    g.addEdge(\"B\", \"C\", 1);\n    g.addEdge(\"D\", \"C\", 1);\n    g.addEdge(\"C\", \"D\", 1);\n    g.addEdge(\"E\", \"F\", 1);\n    g.addEdge(\"C\", \"C\", 1);\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\", 1);\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n    assertThat(g.addVertex(\"B\"), is(false));\n\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 1), nullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 2), notNullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(2));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-06-30 11:01:15","codes":[{"authorDate":"2020-06-30 11:01:15","commitOrder":5,"curCode":"  @Test void testOne() {\n    DirectedGraph<String, DefaultEdge> g = DefaultDirectedGraph.create();\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\");\n    g.addEdge(\"B\", \"C\");\n    g.addEdge(\"D\", \"C\");\n    g.addEdge(\"C\", \"D\");\n    g.addEdge(\"E\", \"F\");\n    g.addEdge(\"C\", \"C\");\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\");\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n    assertEquals(\"[D]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n    assertEquals(\"[[A, B, D], [A, B, C, D]]\", paths(g, \"A\", \"D\").toString());\n  }\n","date":"2020-06-30 14:50:40","endLine":70,"groupId":"101616","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c9/8330e8cdd7df7285263ef2a106be12d8b8be2d.src","preCode":"  @Test void testOne() {\n    DirectedGraph<String, DefaultEdge> g = DefaultDirectedGraph.create();\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\");\n    g.addEdge(\"B\", \"C\");\n    g.addEdge(\"D\", \"C\");\n    g.addEdge(\"C\", \"D\");\n    g.addEdge(\"E\", \"F\");\n    g.addEdge(\"C\", \"C\");\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\");\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2020-06-30 11:01:15","commitOrder":5,"curCode":"  @Test void testAttributed() {\n    AttributedDirectedGraph<String, DefaultEdge> g =\n        AttributedDirectedGraph.create(new DefaultAttributedEdgeFactory());\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\", 1);\n    g.addEdge(\"B\", \"C\", 1);\n    g.addEdge(\"D\", \"C\", 1);\n    g.addEdge(\"C\", \"D\", 1);\n    g.addEdge(\"E\", \"F\", 1);\n    g.addEdge(\"C\", \"C\", 1);\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\", 1);\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n    assertEquals(\"[D]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n    assertEquals(\"[[A, B, D], [A, B, C, D]]\", paths(g, \"A\", \"D\").toString());\n    assertThat(g.addVertex(\"B\"), is(false));\n\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 1), nullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 2), notNullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(2));\n  }\n","date":"2020-06-30 14:50:40","endLine":376,"groupId":"101616","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAttributed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c9/8330e8cdd7df7285263ef2a106be12d8b8be2d.src","preCode":"  @Test void testAttributed() {\n    AttributedDirectedGraph<String, DefaultEdge> g =\n        AttributedDirectedGraph.create(new DefaultAttributedEdgeFactory());\n    g.addVertex(\"A\");\n    g.addVertex(\"B\");\n    g.addVertex(\"C\");\n    g.addVertex(\"D\");\n    g.addVertex(\"E\");\n    g.addVertex(\"F\");\n    g.addEdge(\"A\", \"B\", 1);\n    g.addEdge(\"B\", \"C\", 1);\n    g.addEdge(\"D\", \"C\", 1);\n    g.addEdge(\"C\", \"D\", 1);\n    g.addEdge(\"E\", \"F\", 1);\n    g.addEdge(\"C\", \"C\", 1);\n    assertEquals(\"[A, B, C, D]\", shortestPath(g, \"A\", \"D\").toString());\n    g.addEdge(\"B\", \"D\", 1);\n    assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n    assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n    assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n    assertThat(g.addVertex(\"B\"), is(false));\n\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 1), nullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(1));\n    assertThat(g.addEdge(\"A\", \"B\", 2), notNullValue());\n    assertThat(Iterables.size(g.getEdges(\"A\", \"B\")), is(2));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"}],"commitId":"bd121aa3a6d3b0314785a4c9141028b2ef252ebf","commitMessage":"@@@[CALCITE-4049] Improve the implementation of the shortest-path algorithm\n","date":"2020-06-30 14:50:40","modifiedFileCount":"5","status":"M","submitter":"liyafan82"}]
