[{"authorTime":"2015-08-25 09:24:59","codes":[{"authorDate":"2015-08-15 02:49:23","commitOrder":3,"curCode":"  @Test public void testProjectToWindowRuleForMultipleWindows() {\n    HepProgram preProgram =  new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" count(*) over(partition by empno order by sal) as count1,\\n\"\n        + \" count(*) over(partition by deptno order by sal) as count2,\\n\"\n        + \" sum(deptno) over(partition by empno order by sal) as sum1,\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","date":"2015-09-02 07:17:16","endLine":159,"groupId":"16125","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectToWindowRuleForMultipleWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/8bf739cc4d3649191d06b2053c72f6cb0b56df.src","preCode":"  @Test public void testProjectToWindowRuleForMultipleWindows() {\n    HepProgram preProgram =  new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" count(*) over(partition by empno order by sal) as count1,\\n\"\n        + \" count(*) over(partition by deptno order by sal) as count2,\\n\"\n        + \" sum(deptno) over(partition by empno order by sal) as sum1,\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"NB"},{"authorDate":"2015-08-25 09:24:59","commitOrder":3,"curCode":"  @Test public void testExpressionInWindowFunction() {\n    HepProgram preProgram =  new HepProgramBuilder().build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","date":"2015-09-04 07:08:46","endLine":1652,"groupId":"16125","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionInWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bd/ea4af9f66cd896309bee30241294b034f0b6c9.src","preCode":"  @Test public void testExpressionInWindowFunction() {\n    HepProgram preProgram =  new HepProgramBuilder().build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1638,"status":"B"}],"commitId":"c1fb82996b702397a2506970a31f3a6b4c7a956a","commitMessage":"@@@[CALCITE-841] Redundant windows when window function arguments are expressions (Hsuan-Yi Chu)\n\nIn ProjectToWindowRule.  RexOver will be put in the same cohort if the\nfollowing conditions are satisfied:\n(1). They have the same RexWindow\n(2). They are not dependent on each other\n\nClose apache/incubator-calcite#124\n","date":"2015-09-04 07:08:46","modifiedFileCount":"2","status":"M","submitter":"Hsuan-Yi Chu"},{"authorTime":"2016-12-01 03:57:20","codes":[{"authorDate":"2015-08-15 02:49:23","commitOrder":4,"curCode":"  @Test public void testProjectToWindowRuleForMultipleWindows() {\n    HepProgram preProgram =  new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" count(*) over(partition by empno order by sal) as count1,\\n\"\n        + \" count(*) over(partition by deptno order by sal) as count2,\\n\"\n        + \" sum(deptno) over(partition by empno order by sal) as sum1,\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","date":"2015-09-02 07:17:16","endLine":159,"groupId":"16125","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectToWindowRuleForMultipleWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/8bf739cc4d3649191d06b2053c72f6cb0b56df.src","preCode":"  @Test public void testProjectToWindowRuleForMultipleWindows() {\n    HepProgram preProgram =  new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" count(*) over(partition by empno order by sal) as count1,\\n\"\n        + \" count(*) over(partition by deptno order by sal) as count2,\\n\"\n        + \" sum(deptno) over(partition by empno order by sal) as sum1,\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"},{"authorDate":"2016-12-01 03:57:20","commitOrder":4,"curCode":"  @Test public void testExpressionInWindowFunction() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2016-12-02 12:10:18","endLine":2294,"groupId":"16125","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionInWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/30/97d479c6cbbe9ffc55c5ba5e22fa9c1d3e0628.src","preCode":"  @Test public void testExpressionInWindowFunction() {\n    HepProgram preProgram =  new HepProgramBuilder().build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2280,"status":"M"}],"commitId":"bac9ee7cb7e76d6307e34091b5a132e3d068dfd7","commitMessage":"@@@Test case for [CALCITE-1493].  and clean up test infrastructure\n\nAlso.  fix a minor performance issue when tracing is disabled.\n","date":"2016-12-02 12:10:18","modifiedFileCount":"7","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-12-01 03:57:20","codes":[{"authorDate":"2019-10-14 20:53:23","commitOrder":5,"curCode":"  @Test public void testProjectToWindowRuleForMultipleWindows() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" count(*) over(partition by empno order by sal) as count1,\\n\"\n        + \" count(*) over(partition by deptno order by sal) as count2,\\n\"\n        + \" sum(deptno) over(partition by empno order by sal) as sum1,\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2019-10-15 09:37:32","endLine":383,"groupId":"16125","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectToWindowRuleForMultipleWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/51/b671b65dfc7e5613e63058680b48e9da669c6b.src","preCode":"  @Test public void testProjectToWindowRuleForMultipleWindows() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" count(*) over(partition by empno order by sal) as count1,\\n\"\n        + \" count(*) over(partition by deptno order by sal) as count2,\\n\"\n        + \" sum(deptno) over(partition by empno order by sal) as sum1,\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"},{"authorDate":"2016-12-01 03:57:20","commitOrder":5,"curCode":"  @Test public void testExpressionInWindowFunction() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2016-12-02 12:10:18","endLine":2294,"groupId":"16125","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionInWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/30/97d479c6cbbe9ffc55c5ba5e22fa9c1d3e0628.src","preCode":"  @Test public void testExpressionInWindowFunction() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2280,"status":"N"}],"commitId":"8da131c08afe67861ced49bc6180a20f66be52fb","commitMessage":"@@@[CALCITE-3410] Simplify RelOptRulesTest and HepPlannerTest by making test methods fluent\n\n* Add method 'Sql.withTester'\n* In RelOptTestBase.  deprecate checkPlanning method\n","date":"2019-10-15 09:37:32","modifiedFileCount":"3","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testProjectToWindowRuleForMultipleWindows() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" count(*) over(partition by empno order by sal) as count1,\\n\"\n        + \" count(*) over(partition by deptno order by sal) as count2,\\n\"\n        + \" sum(deptno) over(partition by empno order by sal) as sum1,\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-04-06 04:57:49","endLine":407,"groupId":"16125","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectToWindowRuleForMultipleWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/c56354833d8acfcc210ae25313c78e9332a2ba.src","preCode":"  @Test public void testProjectToWindowRuleForMultipleWindows() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" count(*) over(partition by empno order by sal) as count1,\\n\"\n        + \" count(*) over(partition by deptno order by sal) as count2,\\n\"\n        + \" sum(deptno) over(partition by empno order by sal) as sum1,\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testExpressionInWindowFunction() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-04-06 04:57:49","endLine":4301,"groupId":"16125","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionInWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/c56354833d8acfcc210ae25313c78e9332a2ba.src","preCode":"  @Test public void testExpressionInWindowFunction() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4287,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 04:45:12","codes":[{"authorDate":"2020-07-09 04:45:12","commitOrder":7,"curCode":"  @Test void testProjectToWindowRuleForMultipleWindows() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW);\n\n    final String sql = \"select\\n\"\n        + \" count(*) over(partition by empno order by sal) as count1,\\n\"\n        + \" count(*) over(partition by deptno order by sal) as count2,\\n\"\n        + \" sum(deptno) over(partition by empno order by sal) as sum1,\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-07-12 06:58:28","endLine":357,"groupId":"3760","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectToWindowRuleForMultipleWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/d77aee9e74f65d9e26a1ffa96400062e1eb119.src","preCode":"  @Test void testProjectToWindowRuleForMultipleWindows() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" count(*) over(partition by empno order by sal) as count1,\\n\"\n        + \" count(*) over(partition by deptno order by sal) as count2,\\n\"\n        + \" sum(deptno) over(partition by empno order by sal) as sum1,\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"M"},{"authorDate":"2020-07-09 04:45:12","commitOrder":7,"curCode":"  @Test void testExpressionInWindowFunction() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-07-12 06:58:28","endLine":4444,"groupId":"3760","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionInWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/d77aee9e74f65d9e26a1ffa96400062e1eb119.src","preCode":"  @Test void testExpressionInWindowFunction() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4430,"status":"M"}],"commitId":"23b26b6287315cc2cd236e705bb651077488fc5c","commitMessage":"@@@In preparation for [CALCITE-3923] and [CALCITE-4079].  deprecate fields and methods that will be removed between 1.24 and 1.25\n\nAlso.  in RelNode.  change some methods from 'to removed before 2.0'\nto 'to be removed before 1.25'. The methods are sDistinct(). \nisKey(ImmutableBitSet).  getQuery().  getRows().  getVariablesStopped(). \ncomputeSelfCost().  isValid(boolean).  getCollationList().  getChildExps().\n","date":"2020-07-12 06:58:28","modifiedFileCount":"137","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 04:45:12","codes":[{"authorDate":"2020-08-05 16:20:39","commitOrder":8,"curCode":"  @Test void testProjectToWindowRuleForMultipleWindows() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW);\n\n    final String sql = \"select\\n\"\n        + \" count(*) over(partition by empno order by sal) as count1,\\n\"\n        + \" count(*) over(partition by deptno order by sal) as count2,\\n\"\n        + \" sum(deptno) over(partition by empno order by sal) as sum1,\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql).with(hepPlanner)\n        .check();\n  }\n","date":"2020-08-08 06:49:00","endLine":335,"groupId":"10964","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectToWindowRuleForMultipleWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c7/a464a80ae93f49d699fc44643f1fd0e5bacd57.src","preCode":"  @Test void testProjectToWindowRuleForMultipleWindows() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW);\n\n    final String sql = \"select\\n\"\n        + \" count(*) over(partition by empno order by sal) as count1,\\n\"\n        + \" count(*) over(partition by deptno order by sal) as count2,\\n\"\n        + \" sum(deptno) over(partition by empno order by sal) as sum1,\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"},{"authorDate":"2020-07-09 04:45:12","commitOrder":8,"curCode":"  @Test void testExpressionInWindowFunction() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-07-12 06:58:28","endLine":4444,"groupId":"10964","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionInWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/d77aee9e74f65d9e26a1ffa96400062e1eb119.src","preCode":"  @Test void testExpressionInWindowFunction() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4430,"status":"N"}],"commitId":"3f75e5ee4c9393842d5df61d1f32eb4255a77dde","commitMessage":"@@@Refactor RelOptRulesTest\n\nIn tests that use programs that are simple lists of rules. \nuse the `withRule` and `withPreRule` methods rather than\ncreating explicit programs. It makes tests more concise.\n","date":"2020-08-08 06:49:00","modifiedFileCount":"2","status":"M","submitter":"Julian Hyde"}]
