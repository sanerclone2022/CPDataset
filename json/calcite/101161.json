[{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testTrimFails() {\n    wholeExpr(\"trim(123 FROM 'beard')\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*Cannot apply 'TRIM' to arguments of type.*\");\n    expr(\"trim(123 FROM 'beard')\")\n        .columnType(\"VARCHAR(5) NOT NULL\");\n    wholeExpr(\"trim('a' FROM 123)\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*Cannot apply 'TRIM' to arguments of type.*\");\n    expr(\"trim('a' FROM 123)\")\n        .columnType(\"VARCHAR NOT NULL\");\n    wholeExpr(\"trim('a' FROM _UTF16'b')\")\n        .fails(\"(?s).*not comparable to each other.*\");\n  }\n","date":"2019-09-24 02:59:18","endLine":861,"groupId":"5278","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrimFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testTrimFails() {\n    wholeExpr(\"trim(123 FROM 'beard')\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*Cannot apply 'TRIM' to arguments of type.*\");\n    expr(\"trim(123 FROM 'beard')\")\n        .columnType(\"VARCHAR(5) NOT NULL\");\n    wholeExpr(\"trim('a' FROM 123)\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*Cannot apply 'TRIM' to arguments of type.*\");\n    expr(\"trim('a' FROM 123)\")\n        .columnType(\"VARCHAR NOT NULL\");\n    wholeExpr(\"trim('a' FROM _UTF16'b')\")\n        .fails(\"(?s).*not comparable to each other.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":848,"status":"B"},{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testOverlay() {\n    expr(\"overlay('ABCdef' placing 'abc' from 1)\").ok();\n    expr(\"overlay('ABCdef' placing 'abc' from 1 for 3)\").ok();\n    wholeExpr(\"overlay('ABCdef' placing 'abc' from '1' for 3)\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*OVERLAY\\\\(<STRING> PLACING <STRING> FROM <INTEGER>\\\\).*\");\n    expr(\"overlay('ABCdef' placing 'abc' from '1' for 3)\")\n        .columnType(\"VARCHAR(9) NOT NULL\");\n    expr(\"overlay('ABCdef' placing 'abc' from 1 for 3)\")\n        .columnType(\"VARCHAR(9) NOT NULL\");\n    expr(\"overlay('ABCdef' placing 'abc' from 6 for 3)\")\n        .columnType(\"VARCHAR(9) NOT NULL\");\n    expr(\"overlay('ABCdef' placing cast(null as char(5)) from 1)\")\n        .columnType(\"VARCHAR(11)\");\n\n    if (TODO) {\n      sql(\"overlay('ABCdef' placing 'abc' collate latin1$sv from 1 for 3)\")\n          .collation(\"ISO-8859-1$sv\", SqlCollation.Coercibility.EXPLICIT);\n    }\n  }\n","date":"2019-09-24 02:59:18","endLine":918,"groupId":"5278","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testOverlay() {\n    expr(\"overlay('ABCdef' placing 'abc' from 1)\").ok();\n    expr(\"overlay('ABCdef' placing 'abc' from 1 for 3)\").ok();\n    wholeExpr(\"overlay('ABCdef' placing 'abc' from '1' for 3)\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*OVERLAY\\\\(<STRING> PLACING <STRING> FROM <INTEGER>\\\\).*\");\n    expr(\"overlay('ABCdef' placing 'abc' from '1' for 3)\")\n        .columnType(\"VARCHAR(9) NOT NULL\");\n    expr(\"overlay('ABCdef' placing 'abc' from 1 for 3)\")\n        .columnType(\"VARCHAR(9) NOT NULL\");\n    expr(\"overlay('ABCdef' placing 'abc' from 6 for 3)\")\n        .columnType(\"VARCHAR(9) NOT NULL\");\n    expr(\"overlay('ABCdef' placing cast(null as char(5)) from 1)\")\n        .columnType(\"VARCHAR(11)\");\n\n    if (TODO) {\n      sql(\"overlay('ABCdef' placing 'abc' collate latin1$sv from 1 for 3)\")\n          .collation(\"ISO-8859-1$sv\", SqlCollation.Coercibility.EXPLICIT);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":899,"status":"MB"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testTrimFails() {\n    wholeExpr(\"trim(123 FROM 'beard')\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*Cannot apply 'TRIM' to arguments of type.*\");\n    expr(\"trim(123 FROM 'beard')\")\n        .columnType(\"VARCHAR(5) NOT NULL\");\n    wholeExpr(\"trim('a' FROM 123)\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*Cannot apply 'TRIM' to arguments of type.*\");\n    expr(\"trim('a' FROM 123)\")\n        .columnType(\"VARCHAR NOT NULL\");\n    wholeExpr(\"trim('a' FROM _UTF16'b')\")\n        .fails(\"(?s).*not comparable to each other.*\");\n  }\n","date":"2020-04-06 04:57:49","endLine":861,"groupId":"101161","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrimFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testTrimFails() {\n    wholeExpr(\"trim(123 FROM 'beard')\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*Cannot apply 'TRIM' to arguments of type.*\");\n    expr(\"trim(123 FROM 'beard')\")\n        .columnType(\"VARCHAR(5) NOT NULL\");\n    wholeExpr(\"trim('a' FROM 123)\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*Cannot apply 'TRIM' to arguments of type.*\");\n    expr(\"trim('a' FROM 123)\")\n        .columnType(\"VARCHAR NOT NULL\");\n    wholeExpr(\"trim('a' FROM _UTF16'b')\")\n        .fails(\"(?s).*not comparable to each other.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":848,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testOverlay() {\n    expr(\"overlay('ABCdef' placing 'abc' from 1)\").ok();\n    expr(\"overlay('ABCdef' placing 'abc' from 1 for 3)\").ok();\n    wholeExpr(\"overlay('ABCdef' placing 'abc' from '1' for 3)\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*OVERLAY\\\\(<STRING> PLACING <STRING> FROM <INTEGER>\\\\).*\");\n    expr(\"overlay('ABCdef' placing 'abc' from '1' for 3)\")\n        .columnType(\"VARCHAR(9) NOT NULL\");\n    expr(\"overlay('ABCdef' placing 'abc' from 1 for 3)\")\n        .columnType(\"VARCHAR(9) NOT NULL\");\n    expr(\"overlay('ABCdef' placing 'abc' from 6 for 3)\")\n        .columnType(\"VARCHAR(9) NOT NULL\");\n    expr(\"overlay('ABCdef' placing cast(null as char(5)) from 1)\")\n        .columnType(\"VARCHAR(11)\");\n\n    if (TODO) {\n      sql(\"overlay('ABCdef' placing 'abc' collate latin1$sv from 1 for 3)\")\n          .collation(\"ISO-8859-1$sv\", SqlCollation.Coercibility.EXPLICIT);\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":918,"groupId":"101161","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testOverlay() {\n    expr(\"overlay('ABCdef' placing 'abc' from 1)\").ok();\n    expr(\"overlay('ABCdef' placing 'abc' from 1 for 3)\").ok();\n    wholeExpr(\"overlay('ABCdef' placing 'abc' from '1' for 3)\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*OVERLAY\\\\(<STRING> PLACING <STRING> FROM <INTEGER>\\\\).*\");\n    expr(\"overlay('ABCdef' placing 'abc' from '1' for 3)\")\n        .columnType(\"VARCHAR(9) NOT NULL\");\n    expr(\"overlay('ABCdef' placing 'abc' from 1 for 3)\")\n        .columnType(\"VARCHAR(9) NOT NULL\");\n    expr(\"overlay('ABCdef' placing 'abc' from 6 for 3)\")\n        .columnType(\"VARCHAR(9) NOT NULL\");\n    expr(\"overlay('ABCdef' placing cast(null as char(5)) from 1)\")\n        .columnType(\"VARCHAR(11)\");\n\n    if (TODO) {\n      sql(\"overlay('ABCdef' placing 'abc' collate latin1$sv from 1 for 3)\")\n          .collation(\"ISO-8859-1$sv\", SqlCollation.Coercibility.EXPLICIT);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":899,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
