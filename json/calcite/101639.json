[{"authorTime":"2020-09-02 21:01:14","codes":[{"authorDate":"2020-09-02 21:01:14","commitOrder":1,"curCode":"  private static Object[] convertColumns(ResultSet resultSet, ResultSetMetaData metaData,\n      int columnCount) {\n    final List<Object> list = new ArrayList<>(columnCount);\n    try {\n      for (int i = 0; i < columnCount; i++) {\n        if (metaData.getColumnType(i + 1) == Types.TIMESTAMP) {\n          long v = resultSet.getLong(i + 1);\n          if (v == 0 && resultSet.wasNull()) {\n            list.add(null);\n          } else {\n            list.add(v);\n          }\n        } else {\n          list.add(resultSet.getObject(i + 1));\n        }\n      }\n      return list.toArray();\n    } catch (SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-10-09 03:55:07","endLine":118,"groupId":"7775","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"convertColumns","params":"(ResultSetresultSet@ResultSetMetaDatametaData@intcolumnCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/870cad13c9b6d8e9192b1d9bcafbc39542290b.src","preCode":"  private static Object[] convertColumns(ResultSet resultSet, ResultSetMetaData metaData,\n      int columnCount) {\n    final List<Object> list = new ArrayList<>(columnCount);\n    try {\n      for (int i = 0; i < columnCount; i++) {\n        if (metaData.getColumnType(i + 1) == Types.TIMESTAMP) {\n          long v = resultSet.getLong(i + 1);\n          if (v == 0 && resultSet.wasNull()) {\n            list.add(null);\n          } else {\n            list.add(v);\n          }\n        } else {\n          list.add(resultSet.getObject(i + 1));\n        }\n      }\n      return list.toArray();\n    } catch (SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"},{"authorDate":"2020-09-02 21:01:14","commitOrder":1,"curCode":"  private static Object[] convertPrimitiveColumns(Primitive[] primitives,\n      ResultSet resultSet, int columnCount) {\n    final List<Object> list = new ArrayList<>(columnCount);\n    try {\n      for (int i = 0; i < columnCount; i++) {\n        list.add(primitives[i].jdbcGet(resultSet, i + 1));\n      }\n      return list.toArray();\n    } catch (SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-10-09 03:55:07","endLine":443,"groupId":"7775","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"convertPrimitiveColumns","params":"(Primitive[]primitives@ResultSetresultSet@intcolumnCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/870cad13c9b6d8e9192b1d9bcafbc39542290b.src","preCode":"  private static Object[] convertPrimitiveColumns(Primitive[] primitives,\n      ResultSet resultSet, int columnCount) {\n    final List<Object> list = new ArrayList<>(columnCount);\n    try {\n      for (int i = 0; i < columnCount; i++) {\n        list.add(primitives[i].jdbcGet(resultSet, i + 1));\n      }\n      return list.toArray();\n    } catch (SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"B"}],"commitId":"4c3ebf8a4dc04221fc13a53cf09b6da478e08aae","commitMessage":"@@@Refactor ResultSetEnumerable to avoid nested lambdas\n\nThis reduces the likelihood of javac issues.\n\nSee https://github.com/policeman-tools/forbidden-apis/issues/173\n","date":"2020-10-09 03:55:07","modifiedFileCount":"1","status":"B","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  private static @Nullable Object[] convertColumns(ResultSet resultSet, ResultSetMetaData metaData,\n      int columnCount) {\n    final List<@Nullable Object> list = new ArrayList<>(columnCount);\n    try {\n      for (int i = 0; i < columnCount; i++) {\n        if (metaData.getColumnType(i + 1) == Types.TIMESTAMP) {\n          long v = resultSet.getLong(i + 1);\n          if (v == 0 && resultSet.wasNull()) {\n            list.add(null);\n          } else {\n            list.add(v);\n          }\n        } else {\n          list.add(resultSet.getObject(i + 1));\n        }\n      }\n      return list.toArray();\n    } catch (SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":121,"groupId":"101639","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"convertColumns","params":"(ResultSetresultSet@ResultSetMetaDatametaData@intcolumnCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/84/defdd5e323d112d1abd81a824df5f9b6919b24.src","preCode":"  private static Object[] convertColumns(ResultSet resultSet, ResultSetMetaData metaData,\n      int columnCount) {\n    final List<Object> list = new ArrayList<>(columnCount);\n    try {\n      for (int i = 0; i < columnCount; i++) {\n        if (metaData.getColumnType(i + 1) == Types.TIMESTAMP) {\n          long v = resultSet.getLong(i + 1);\n          if (v == 0 && resultSet.wasNull()) {\n            list.add(null);\n          } else {\n            list.add(v);\n          }\n        } else {\n          list.add(resultSet.getObject(i + 1));\n        }\n      }\n      return list.toArray();\n    } catch (SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  private static @Nullable Object[] convertPrimitiveColumns(Primitive[] primitives,\n      ResultSet resultSet, int columnCount) {\n    final List<@Nullable Object> list = new ArrayList<>(columnCount);\n    try {\n      for (int i = 0; i < columnCount; i++) {\n        list.add(primitives[i].jdbcGet(resultSet, i + 1));\n      }\n      return list.toArray();\n    } catch (SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":454,"groupId":"101639","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"convertPrimitiveColumns","params":"(Primitive[]primitives@ResultSetresultSet@intcolumnCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/84/defdd5e323d112d1abd81a824df5f9b6919b24.src","preCode":"  private static Object[] convertPrimitiveColumns(Primitive[] primitives,\n      ResultSet resultSet, int columnCount) {\n    final List<Object> list = new ArrayList<>(columnCount);\n    try {\n      for (int i = 0; i < columnCount; i++) {\n        list.add(primitives[i].jdbcGet(resultSet, i + 1));\n      }\n      return list.toArray();\n    } catch (SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
