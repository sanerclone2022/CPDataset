[{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testCaseExpression() {\n    \r\n    expr(\"case \\t col1 when 1 then 'one' end\")\n        .ok(\"(CASE WHEN (`COL1` = 1) THEN 'one' ELSE NULL END)\");\n\n    \r\n    expr(\"case when nbr is false then 'one' end\")\n        .ok(\"(CASE WHEN (`NBR` IS FALSE) THEN 'one' ELSE NULL END)\");\n\n    \r\n    expr(\"case col1 when \\n1.2 then 'one' when 2 then 'two' else 'three' end\")\n        .ok(\"(CASE WHEN (`COL1` = 1.2) THEN 'one' WHEN (`COL1` = 2) THEN 'two' ELSE 'three' END)\");\n\n    \r\n    expr(\"case (select * from emp) when 1 then 2 end\")\n        .ok(\"(CASE WHEN ((SELECT *\\n\"\n            + \"FROM `EMP`) = 1) THEN 2 ELSE NULL END)\");\n    expr(\"case 1 when (select * from emp) then 2 end\")\n        .ok(\"(CASE WHEN (1 = (SELECT *\\n\"\n            + \"FROM `EMP`)) THEN 2 ELSE NULL END)\");\n    expr(\"case 1 when 2 then (select * from emp) end\")\n        .ok(\"(CASE WHEN (1 = 2) THEN (SELECT *\\n\"\n            + \"FROM `EMP`) ELSE NULL END)\");\n    expr(\"case 1 when 2 then 3 else (select * from emp) end\")\n        .ok(\"(CASE WHEN (1 = 2) THEN 3 ELSE (SELECT *\\n\"\n            + \"FROM `EMP`) END)\");\n    expr(\"case x when 2, 4 then 3 else 4 end\")\n        .ok(\"(CASE WHEN (`X` IN (2, 4)) THEN 3 ELSE 4 END)\");\n    \r\n    sql(\"case x when 2, 4 then 3 when ^then^ 5 else 4 end\")\n        .fails(\"(?s)Encountered \\\"then\\\" at .*\");\n    \r\n    sql(\"case when b1, b2 ^when^ 2, 4 then 3 else 4 end\")\n        .fails(\"(?s)Encountered \\\"when\\\" at .*\");\n  }\n","date":"2019-09-24 02:59:18","endLine":4032,"groupId":"8592","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCaseExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testCaseExpression() {\n    \r\n    expr(\"case \\t col1 when 1 then 'one' end\")\n        .ok(\"(CASE WHEN (`COL1` = 1) THEN 'one' ELSE NULL END)\");\n\n    \r\n    expr(\"case when nbr is false then 'one' end\")\n        .ok(\"(CASE WHEN (`NBR` IS FALSE) THEN 'one' ELSE NULL END)\");\n\n    \r\n    expr(\"case col1 when \\n1.2 then 'one' when 2 then 'two' else 'three' end\")\n        .ok(\"(CASE WHEN (`COL1` = 1.2) THEN 'one' WHEN (`COL1` = 2) THEN 'two' ELSE 'three' END)\");\n\n    \r\n    expr(\"case (select * from emp) when 1 then 2 end\")\n        .ok(\"(CASE WHEN ((SELECT *\\n\"\n            + \"FROM `EMP`) = 1) THEN 2 ELSE NULL END)\");\n    expr(\"case 1 when (select * from emp) then 2 end\")\n        .ok(\"(CASE WHEN (1 = (SELECT *\\n\"\n            + \"FROM `EMP`)) THEN 2 ELSE NULL END)\");\n    expr(\"case 1 when 2 then (select * from emp) end\")\n        .ok(\"(CASE WHEN (1 = 2) THEN (SELECT *\\n\"\n            + \"FROM `EMP`) ELSE NULL END)\");\n    expr(\"case 1 when 2 then 3 else (select * from emp) end\")\n        .ok(\"(CASE WHEN (1 = 2) THEN 3 ELSE (SELECT *\\n\"\n            + \"FROM `EMP`) END)\");\n    expr(\"case x when 2, 4 then 3 else 4 end\")\n        .ok(\"(CASE WHEN (`X` IN (2, 4)) THEN 3 ELSE 4 END)\");\n    \r\n    sql(\"case x when 2, 4 then 3 when ^then^ 5 else 4 end\")\n        .fails(\"(?s)Encountered \\\"then\\\" at .*\");\n    \r\n    sql(\"case when b1, b2 ^when^ 2, 4 then 3 else 4 end\")\n        .fails(\"(?s)Encountered \\\"when\\\" at .*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3998,"status":"MB"},{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testIntervalCompare() {\n    expr(\"interval '1' hour = interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR = INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour <> interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR <> INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour < interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR < INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour <= interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR <= INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour > interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR > INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour >= interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR >= INTERVAL '1' SECOND)\");\n  }\n","date":"2019-09-24 02:59:18","endLine":6916,"groupId":"8592","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntervalCompare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testIntervalCompare() {\n    expr(\"interval '1' hour = interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR = INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour <> interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR <> INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour < interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR < INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour <= interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR <= INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour > interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR > INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour >= interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR >= INTERVAL '1' SECOND)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6903,"status":"B"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":4,"curCode":"  @Test public void testCaseExpression() {\n    \r\n    expr(\"case \\t col1 when 1 then 'one' end\")\n        .ok(\"(CASE WHEN (`COL1` = 1) THEN 'one' ELSE NULL END)\");\n\n    \r\n    expr(\"case when nbr is false then 'one' end\")\n        .ok(\"(CASE WHEN (`NBR` IS FALSE) THEN 'one' ELSE NULL END)\");\n\n    \r\n    expr(\"case col1 when \\n1.2 then 'one' when 2 then 'two' else 'three' end\")\n        .ok(\"(CASE WHEN (`COL1` = 1.2) THEN 'one' WHEN (`COL1` = 2) THEN 'two' ELSE 'three' END)\");\n\n    \r\n    expr(\"case (select * from emp) when 1 then 2 end\")\n        .ok(\"(CASE WHEN ((SELECT *\\n\"\n            + \"FROM `EMP`) = 1) THEN 2 ELSE NULL END)\");\n    expr(\"case 1 when (select * from emp) then 2 end\")\n        .ok(\"(CASE WHEN (1 = (SELECT *\\n\"\n            + \"FROM `EMP`)) THEN 2 ELSE NULL END)\");\n    expr(\"case 1 when 2 then (select * from emp) end\")\n        .ok(\"(CASE WHEN (1 = 2) THEN (SELECT *\\n\"\n            + \"FROM `EMP`) ELSE NULL END)\");\n    expr(\"case 1 when 2 then 3 else (select * from emp) end\")\n        .ok(\"(CASE WHEN (1 = 2) THEN 3 ELSE (SELECT *\\n\"\n            + \"FROM `EMP`) END)\");\n    expr(\"case x when 2, 4 then 3 else 4 end\")\n        .ok(\"(CASE WHEN (`X` IN (2, 4)) THEN 3 ELSE 4 END)\");\n    \r\n    sql(\"case x when 2, 4 then 3 when ^then^ 5 else 4 end\")\n        .fails(\"(?s)Encountered \\\"then\\\" at .*\");\n    \r\n    sql(\"case when b1, b2 ^when^ 2, 4 then 3 else 4 end\")\n        .fails(\"(?s)Encountered \\\"when\\\" at .*\");\n  }\n","date":"2019-09-24 02:59:18","endLine":4032,"groupId":"10856","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCaseExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testCaseExpression() {\n    \r\n    expr(\"case \\t col1 when 1 then 'one' end\")\n        .ok(\"(CASE WHEN (`COL1` = 1) THEN 'one' ELSE NULL END)\");\n\n    \r\n    expr(\"case when nbr is false then 'one' end\")\n        .ok(\"(CASE WHEN (`NBR` IS FALSE) THEN 'one' ELSE NULL END)\");\n\n    \r\n    expr(\"case col1 when \\n1.2 then 'one' when 2 then 'two' else 'three' end\")\n        .ok(\"(CASE WHEN (`COL1` = 1.2) THEN 'one' WHEN (`COL1` = 2) THEN 'two' ELSE 'three' END)\");\n\n    \r\n    expr(\"case (select * from emp) when 1 then 2 end\")\n        .ok(\"(CASE WHEN ((SELECT *\\n\"\n            + \"FROM `EMP`) = 1) THEN 2 ELSE NULL END)\");\n    expr(\"case 1 when (select * from emp) then 2 end\")\n        .ok(\"(CASE WHEN (1 = (SELECT *\\n\"\n            + \"FROM `EMP`)) THEN 2 ELSE NULL END)\");\n    expr(\"case 1 when 2 then (select * from emp) end\")\n        .ok(\"(CASE WHEN (1 = 2) THEN (SELECT *\\n\"\n            + \"FROM `EMP`) ELSE NULL END)\");\n    expr(\"case 1 when 2 then 3 else (select * from emp) end\")\n        .ok(\"(CASE WHEN (1 = 2) THEN 3 ELSE (SELECT *\\n\"\n            + \"FROM `EMP`) END)\");\n    expr(\"case x when 2, 4 then 3 else 4 end\")\n        .ok(\"(CASE WHEN (`X` IN (2, 4)) THEN 3 ELSE 4 END)\");\n    \r\n    sql(\"case x when 2, 4 then 3 when ^then^ 5 else 4 end\")\n        .fails(\"(?s)Encountered \\\"then\\\" at .*\");\n    \r\n    sql(\"case when b1, b2 ^when^ 2, 4 then 3 else 4 end\")\n        .fails(\"(?s)Encountered \\\"when\\\" at .*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3998,"status":"N"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testIntervalCompare() {\n    expr(\"interval '1' hour = interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR = INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour <> interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR <> INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour < interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR < INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour <= interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR <= INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour > interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR > INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour >= interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR >= INTERVAL '1' SECOND)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":7040,"groupId":"10856","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntervalCompare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testIntervalCompare() {\n    expr(\"interval '1' hour = interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR = INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour <> interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR <> INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour < interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR < INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour <= interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR <= INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour > interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR > INTERVAL '1' SECOND)\");\n    expr(\"interval '1' hour >= interval '1' second\")\n        .ok(\"(INTERVAL '1' HOUR >= INTERVAL '1' SECOND)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7027,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
