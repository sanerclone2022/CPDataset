[{"authorTime":"2020-01-07 01:06:39","codes":[{"authorDate":"2020-01-07 01:06:39","commitOrder":1,"curCode":"  @Test public void testSimplify() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType intNullableType =\n        typeFactory.createTypeWithNullability(intType, true);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .add(\"i\", intNullableType)\n        .add(\"j\", intType)\n        .add(\"k\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n    final RexNode iRef = rexBuilder.makeFieldAccess(range, 8);\n    final RexNode jRef = rexBuilder.makeFieldAccess(range, 9);\n    final RexNode kRef = rexBuilder.makeFieldAccess(range, 10);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n\n    \r\n    checkSimplify(and(aRef, bRef, aRef), \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, trueLiteral),\n        \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, falseLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(cRef), not(aRef)),\n        \"AND(?0.b, NOT(?0.a), NOT(?0.c))\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(trueLiteral)),\n        \"false\");\n\n    \r\n    checkSimplify(\n        and(aRef, and(and(bRef, not(cRef), dRef, not(eRef)), not(eRef))),\n        \"AND(?0.a, ?0.b, ?0.d, NOT(?0.c), NOT(?0.e))\");\n\n    \r\n    checkSimplify(and(aRef, bRef, not(or(cRef, or(dRef, eRef)))),\n        \"AND(?0.a, ?0.b, NOT(?0.c), NOT(?0.d), NOT(?0.e))\");\n\n    checkSimplify(and(aRef, bRef, not(or(not(cRef), dRef, not(eRef)))),\n        \"AND(?0.a, ?0.b, ?0.c, ?0.e, NOT(?0.d))\");\n\n    \r\n    checkSimplify(or(aRef, bRef, aRef), \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, falseLiteral),\n        \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, trueLiteral), \"true\");\n\n    \r\n    checkSimplify(case_(eq(bRef, cRef), dRef, falseLiteral, aRef, eRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.e, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(\n        case_(eq(bRef, cRef), dRef, trueLiteral, aRef, eq(cRef, dRef), eRef, cRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.a, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(case_(trueLiteral, aRef, eq(cRef, dRef), eRef, cRef), \"?0.a\");\n\n    \r\n    checkSimplify(\n        case_(aRef, literal1, bRef, literal1, cRef, literal1, dRef, literal1, literal1), \"1\");\n\n    \r\n    checkSimplify3(\n        case_(aRef, trueLiteral, bRef, trueLiteral, cRef, falseLiteral, nullBool),\n        \"OR(?0.a, ?0.b, AND(null, NOT(?0.a), NOT(?0.b), NOT(?0.c)))\",\n        \"OR(?0.a, ?0.b)\",\n        \"OR(?0.a, ?0.b, NOT(?0.c))\");\n\n    \r\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral,\n            falseLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)))\");\n\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral, eRef,\n            falseLiteral, trueLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)), AND(NOT(?0.b), NOT(?0.c), NOT(?0.e)))\");\n\n    checkSimplify(\n        case_(eq(falseLiteral, falseLiteral), falseLiteral,\n              eq(falseLiteral, falseLiteral), trueLiteral,\n              trueLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, aRef),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, aRef),\n        \"true\");\n\n    \r\n    checkSimplify2(and(le(hRef, literal1), gt(hRef, literal1)),\n        \"AND(<=(?0.h, 1), >(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify2(and(le(hRef, literal1), ge(hRef, literal1)),\n        \"AND(<=(?0.h, 1), >=(?0.h, 1))\",\n        \"=(?0.h, 1)\");\n\n    checkSimplify2(and(lt(hRef, literal1), eq(hRef, literal1), ge(hRef, literal1)),\n        \"AND(<(?0.h, 1), =(?0.h, 1), >=(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify(and(lt(hRef, literal1), or(falseLiteral, falseLiteral)),\n        \"false\");\n    checkSimplify(and(lt(hRef, literal1), or(falseLiteral, gt(jRef, kRef))),\n        \"AND(<(?0.h, 1), >(?0.j, ?0.k))\");\n    checkSimplify(or(lt(hRef, literal1), and(trueLiteral, trueLiteral)),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal1),\n            and(trueLiteral, or(trueLiteral, falseLiteral))),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal1),\n            and(trueLiteral, and(trueLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n    checkSimplify(\n        or(lt(hRef, literal1),\n            and(trueLiteral, or(falseLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n\n    \r\n    checkSimplify(eq(literal1, literal1), \"true\");\n    checkSimplify(eq(hRef, hRef), \"true\");\n    checkSimplify3(eq(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(eq(iRef, hRef));\n\n    \r\n    checkSimplify(le(literal1, literal1), \"true\");\n    checkSimplify(le(hRef, hRef), \"true\");\n    checkSimplify3(le(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(le(iRef, hRef));\n\n    \r\n    checkSimplify(ge(literal1, literal1), \"true\");\n    checkSimplify(ge(hRef, hRef), \"true\");\n    checkSimplify3(ge(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(ge(iRef, hRef));\n\n    \r\n    checkSimplify(ne(literal1, literal1), \"false\");\n    checkSimplify(ne(hRef, hRef), \"false\");\n    checkSimplify3(ne(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(ne(iRef, hRef));\n\n    \r\n    checkSimplify(lt(literal1, literal1), \"false\");\n    checkSimplify(lt(hRef, hRef), \"false\");\n    checkSimplify3(lt(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(lt(iRef, hRef));\n\n    \r\n    checkSimplify(gt(literal1, literal1), \"false\");\n    checkSimplify(gt(hRef, hRef), \"false\");\n    checkSimplify3(gt(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(gt(iRef, hRef));\n\n    \r\n    checkSimplify(isNull(not(vBool())), \"IS NULL(?0.bool0)\");\n    checkSimplify(isNull(not(vBoolNotNull())), \"false\");\n\n    \r\n    checkSimplify(isNotNull(not(vBool())), \"IS NOT NULL(?0.bool0)\");\n    checkSimplify(isNotNull(not(vBoolNotNull())), \"true\");\n\n    \r\n    checkSimplify(isNull(nullBool), \"true\");\n    \r\n    checkSimplify(isNull(plus(vInt(0), vInt(1))),\n        \"OR(IS NULL(?0.int0), IS NULL(?0.int1))\");\n    checkSimplify(isNull(plus(vInt(0), vIntNotNull(1))), \"IS NULL(?0.int0)\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vIntNotNull(1))), \"false\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vInt(1))), \"IS NULL(?0.int1)\");\n\n    \r\n    checkSimplify(isNotNull(plus(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(plus(vInt(0), vIntNotNull(1))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vIntNotNull(1))), \"true\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vInt(1))),\n        \"IS NOT NULL(?0.int1)\");\n  }\n","date":"2020-01-08 01:04:52","endLine":1041,"groupId":"2722","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/a0c7274b2dc54806568765cd1d67427092fee2.src","preCode":"  @Test public void testSimplify() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType intNullableType =\n        typeFactory.createTypeWithNullability(intType, true);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .add(\"i\", intNullableType)\n        .add(\"j\", intType)\n        .add(\"k\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n    final RexNode iRef = rexBuilder.makeFieldAccess(range, 8);\n    final RexNode jRef = rexBuilder.makeFieldAccess(range, 9);\n    final RexNode kRef = rexBuilder.makeFieldAccess(range, 10);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n\n    \r\n    checkSimplify(and(aRef, bRef, aRef), \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, trueLiteral),\n        \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, falseLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(cRef), not(aRef)),\n        \"AND(?0.b, NOT(?0.a), NOT(?0.c))\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(trueLiteral)),\n        \"false\");\n\n    \r\n    checkSimplify(\n        and(aRef, and(and(bRef, not(cRef), dRef, not(eRef)), not(eRef))),\n        \"AND(?0.a, ?0.b, ?0.d, NOT(?0.c), NOT(?0.e))\");\n\n    \r\n    checkSimplify(and(aRef, bRef, not(or(cRef, or(dRef, eRef)))),\n        \"AND(?0.a, ?0.b, NOT(?0.c), NOT(?0.d), NOT(?0.e))\");\n\n    checkSimplify(and(aRef, bRef, not(or(not(cRef), dRef, not(eRef)))),\n        \"AND(?0.a, ?0.b, ?0.c, ?0.e, NOT(?0.d))\");\n\n    \r\n    checkSimplify(or(aRef, bRef, aRef), \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, falseLiteral),\n        \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, trueLiteral), \"true\");\n\n    \r\n    checkSimplify(case_(eq(bRef, cRef), dRef, falseLiteral, aRef, eRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.e, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(\n        case_(eq(bRef, cRef), dRef, trueLiteral, aRef, eq(cRef, dRef), eRef, cRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.a, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(case_(trueLiteral, aRef, eq(cRef, dRef), eRef, cRef), \"?0.a\");\n\n    \r\n    checkSimplify(\n        case_(aRef, literal1, bRef, literal1, cRef, literal1, dRef, literal1, literal1), \"1\");\n\n    \r\n    checkSimplify3(\n        case_(aRef, trueLiteral, bRef, trueLiteral, cRef, falseLiteral, nullBool),\n        \"OR(?0.a, ?0.b, AND(null, NOT(?0.a), NOT(?0.b), NOT(?0.c)))\",\n        \"OR(?0.a, ?0.b)\",\n        \"OR(?0.a, ?0.b, NOT(?0.c))\");\n\n    \r\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral,\n            falseLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)))\");\n\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral, eRef,\n            falseLiteral, trueLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)), AND(NOT(?0.b), NOT(?0.c), NOT(?0.e)))\");\n\n    checkSimplify(\n        case_(eq(falseLiteral, falseLiteral), falseLiteral,\n              eq(falseLiteral, falseLiteral), trueLiteral,\n              trueLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, aRef),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, aRef),\n        \"true\");\n\n    \r\n    checkSimplify2(and(le(hRef, literal1), gt(hRef, literal1)),\n        \"AND(<=(?0.h, 1), >(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify2(and(le(hRef, literal1), ge(hRef, literal1)),\n        \"AND(<=(?0.h, 1), >=(?0.h, 1))\",\n        \"=(?0.h, 1)\");\n\n    checkSimplify2(and(lt(hRef, literal1), eq(hRef, literal1), ge(hRef, literal1)),\n        \"AND(<(?0.h, 1), =(?0.h, 1), >=(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify(and(lt(hRef, literal1), or(falseLiteral, falseLiteral)),\n        \"false\");\n    checkSimplify(and(lt(hRef, literal1), or(falseLiteral, gt(jRef, kRef))),\n        \"AND(<(?0.h, 1), >(?0.j, ?0.k))\");\n    checkSimplify(or(lt(hRef, literal1), and(trueLiteral, trueLiteral)),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal1),\n            and(trueLiteral, or(trueLiteral, falseLiteral))),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal1),\n            and(trueLiteral, and(trueLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n    checkSimplify(\n        or(lt(hRef, literal1),\n            and(trueLiteral, or(falseLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n\n    \r\n    checkSimplify(eq(literal1, literal1), \"true\");\n    checkSimplify(eq(hRef, hRef), \"true\");\n    checkSimplify3(eq(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(eq(iRef, hRef));\n\n    \r\n    checkSimplify(le(literal1, literal1), \"true\");\n    checkSimplify(le(hRef, hRef), \"true\");\n    checkSimplify3(le(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(le(iRef, hRef));\n\n    \r\n    checkSimplify(ge(literal1, literal1), \"true\");\n    checkSimplify(ge(hRef, hRef), \"true\");\n    checkSimplify3(ge(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(ge(iRef, hRef));\n\n    \r\n    checkSimplify(ne(literal1, literal1), \"false\");\n    checkSimplify(ne(hRef, hRef), \"false\");\n    checkSimplify3(ne(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(ne(iRef, hRef));\n\n    \r\n    checkSimplify(lt(literal1, literal1), \"false\");\n    checkSimplify(lt(hRef, hRef), \"false\");\n    checkSimplify3(lt(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(lt(iRef, hRef));\n\n    \r\n    checkSimplify(gt(literal1, literal1), \"false\");\n    checkSimplify(gt(hRef, hRef), \"false\");\n    checkSimplify3(gt(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(gt(iRef, hRef));\n\n    \r\n    checkSimplify(isNull(not(vBool())), \"IS NULL(?0.bool0)\");\n    checkSimplify(isNull(not(vBoolNotNull())), \"false\");\n\n    \r\n    checkSimplify(isNotNull(not(vBool())), \"IS NOT NULL(?0.bool0)\");\n    checkSimplify(isNotNull(not(vBoolNotNull())), \"true\");\n\n    \r\n    checkSimplify(isNull(nullBool), \"true\");\n    \r\n    checkSimplify(isNull(plus(vInt(0), vInt(1))),\n        \"OR(IS NULL(?0.int0), IS NULL(?0.int1))\");\n    checkSimplify(isNull(plus(vInt(0), vIntNotNull(1))), \"IS NULL(?0.int0)\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vIntNotNull(1))), \"false\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vInt(1))), \"IS NULL(?0.int1)\");\n\n    \r\n    checkSimplify(isNotNull(plus(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(plus(vInt(0), vIntNotNull(1))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vIntNotNull(1))), \"true\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vInt(1))),\n        \"IS NOT NULL(?0.int1)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":823,"status":"B"},{"authorDate":"2020-01-07 01:06:39","commitOrder":1,"curCode":"  @Test public void checkSimplifyDynamicParam() {\n    checkSimplify(isNotNull(lt(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(lt(vInt(0), vIntNotNull(2))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vIntNotNull(2), vIntNotNull(3))), \"true\");\n    checkSimplify(isNotNull(lt(vInt(0), literal(BigDecimal.ONE))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vInt(0), null_(tInt()))), \"false\");\n  }\n","date":"2020-01-08 01:04:52","endLine":1817,"groupId":"15504","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkSimplifyDynamicParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/a0c7274b2dc54806568765cd1d67427092fee2.src","preCode":"  @Test public void checkSimplifyDynamicParam() {\n    checkSimplify(isNotNull(lt(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(lt(vInt(0), vIntNotNull(2))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vIntNotNull(2), vIntNotNull(3))), \"true\");\n    checkSimplify(isNotNull(lt(vInt(0), literal(BigDecimal.ONE))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vInt(0), null_(tInt()))), \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1808,"status":"B"}],"commitId":"763ec429c951acd5fa251c5d4a2b7780fbf648d4","commitMessage":"@@@[CALCITE-3712] Optimize lossless casts in RexSimplify: CAST(CAST(intExpr as BIGINT) as INT) => intExpr\n","date":"2020-01-08 01:04:52","modifiedFileCount":"4","status":"B","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSimplify() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType intNullableType =\n        typeFactory.createTypeWithNullability(intType, true);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .add(\"i\", intNullableType)\n        .add(\"j\", intType)\n        .add(\"k\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n    final RexNode iRef = rexBuilder.makeFieldAccess(range, 8);\n    final RexNode jRef = rexBuilder.makeFieldAccess(range, 9);\n    final RexNode kRef = rexBuilder.makeFieldAccess(range, 10);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n\n    \r\n    checkSimplify(and(aRef, bRef, aRef), \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, trueLiteral),\n        \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, falseLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(cRef), not(aRef)),\n        \"AND(?0.b, NOT(?0.a), NOT(?0.c))\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(trueLiteral)),\n        \"false\");\n\n    \r\n    checkSimplify(\n        and(aRef, and(and(bRef, not(cRef), dRef, not(eRef)), not(eRef))),\n        \"AND(?0.a, ?0.b, ?0.d, NOT(?0.c), NOT(?0.e))\");\n\n    \r\n    checkSimplify(and(aRef, bRef, not(or(cRef, or(dRef, eRef)))),\n        \"AND(?0.a, ?0.b, NOT(?0.c), NOT(?0.d), NOT(?0.e))\");\n\n    checkSimplify(and(aRef, bRef, not(or(not(cRef), dRef, not(eRef)))),\n        \"AND(?0.a, ?0.b, ?0.c, ?0.e, NOT(?0.d))\");\n\n    \r\n    checkSimplify(or(aRef, bRef, aRef), \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, falseLiteral),\n        \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, trueLiteral), \"true\");\n\n    \r\n    checkSimplify(case_(eq(bRef, cRef), dRef, falseLiteral, aRef, eRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.e, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(\n        case_(eq(bRef, cRef), dRef, trueLiteral, aRef, eq(cRef, dRef), eRef, cRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.a, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(case_(trueLiteral, aRef, eq(cRef, dRef), eRef, cRef), \"?0.a\");\n\n    \r\n    checkSimplify(\n        case_(aRef, literal1, bRef, literal1, cRef, literal1, dRef, literal1, literal1), \"1\");\n\n    \r\n    checkSimplify3(\n        case_(aRef, trueLiteral, bRef, trueLiteral, cRef, falseLiteral, nullBool),\n        \"OR(?0.a, ?0.b, AND(null, NOT(?0.a), NOT(?0.b), NOT(?0.c)))\",\n        \"OR(?0.a, ?0.b)\",\n        \"OR(?0.a, ?0.b, NOT(?0.c))\");\n\n    \r\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral,\n            falseLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)))\");\n\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral, eRef,\n            falseLiteral, trueLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)), AND(NOT(?0.b), NOT(?0.c), NOT(?0.e)))\");\n\n    checkSimplify(\n        case_(eq(falseLiteral, falseLiteral), falseLiteral,\n              eq(falseLiteral, falseLiteral), trueLiteral,\n              trueLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, aRef),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, aRef),\n        \"true\");\n\n    \r\n    checkSimplify2(and(le(hRef, literal1), gt(hRef, literal1)),\n        \"AND(<=(?0.h, 1), >(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify2(and(le(hRef, literal1), ge(hRef, literal1)),\n        \"AND(<=(?0.h, 1), >=(?0.h, 1))\",\n        \"=(?0.h, 1)\");\n\n    checkSimplify2(and(lt(hRef, literal1), eq(hRef, literal1), ge(hRef, literal1)),\n        \"AND(<(?0.h, 1), =(?0.h, 1), >=(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify(and(lt(hRef, literal1), or(falseLiteral, falseLiteral)),\n        \"false\");\n    checkSimplify(and(lt(hRef, literal1), or(falseLiteral, gt(jRef, kRef))),\n        \"AND(<(?0.h, 1), >(?0.j, ?0.k))\");\n    checkSimplify(or(lt(hRef, literal1), and(trueLiteral, trueLiteral)),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal1),\n            and(trueLiteral, or(trueLiteral, falseLiteral))),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal1),\n            and(trueLiteral, and(trueLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n    checkSimplify(\n        or(lt(hRef, literal1),\n            and(trueLiteral, or(falseLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n\n    \r\n    checkSimplify(eq(literal1, literal1), \"true\");\n    checkSimplify(eq(hRef, hRef), \"true\");\n    checkSimplify3(eq(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(eq(iRef, hRef));\n\n    \r\n    checkSimplify(le(literal1, literal1), \"true\");\n    checkSimplify(le(hRef, hRef), \"true\");\n    checkSimplify3(le(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(le(iRef, hRef));\n\n    \r\n    checkSimplify(ge(literal1, literal1), \"true\");\n    checkSimplify(ge(hRef, hRef), \"true\");\n    checkSimplify3(ge(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(ge(iRef, hRef));\n\n    \r\n    checkSimplify(ne(literal1, literal1), \"false\");\n    checkSimplify(ne(hRef, hRef), \"false\");\n    checkSimplify3(ne(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(ne(iRef, hRef));\n\n    \r\n    checkSimplify(lt(literal1, literal1), \"false\");\n    checkSimplify(lt(hRef, hRef), \"false\");\n    checkSimplify3(lt(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(lt(iRef, hRef));\n\n    \r\n    checkSimplify(gt(literal1, literal1), \"false\");\n    checkSimplify(gt(hRef, hRef), \"false\");\n    checkSimplify3(gt(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(gt(iRef, hRef));\n\n    \r\n    checkSimplify(isNull(not(vBool())), \"IS NULL(?0.bool0)\");\n    checkSimplify(isNull(not(vBoolNotNull())), \"false\");\n\n    \r\n    checkSimplify(isNotNull(not(vBool())), \"IS NOT NULL(?0.bool0)\");\n    checkSimplify(isNotNull(not(vBoolNotNull())), \"true\");\n\n    \r\n    checkSimplify(isNull(nullBool), \"true\");\n    \r\n    checkSimplify(isNull(plus(vInt(0), vInt(1))),\n        \"OR(IS NULL(?0.int0), IS NULL(?0.int1))\");\n    checkSimplify(isNull(plus(vInt(0), vIntNotNull(1))), \"IS NULL(?0.int0)\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vIntNotNull(1))), \"false\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vInt(1))), \"IS NULL(?0.int1)\");\n\n    \r\n    checkSimplify(isNotNull(plus(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(plus(vInt(0), vIntNotNull(1))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vIntNotNull(1))), \"true\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vInt(1))),\n        \"IS NOT NULL(?0.int1)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1041,"groupId":"2722","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test public void testSimplify() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType intNullableType =\n        typeFactory.createTypeWithNullability(intType, true);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .add(\"i\", intNullableType)\n        .add(\"j\", intType)\n        .add(\"k\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n    final RexNode iRef = rexBuilder.makeFieldAccess(range, 8);\n    final RexNode jRef = rexBuilder.makeFieldAccess(range, 9);\n    final RexNode kRef = rexBuilder.makeFieldAccess(range, 10);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n\n    \r\n    checkSimplify(and(aRef, bRef, aRef), \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, trueLiteral),\n        \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, falseLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(cRef), not(aRef)),\n        \"AND(?0.b, NOT(?0.a), NOT(?0.c))\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(trueLiteral)),\n        \"false\");\n\n    \r\n    checkSimplify(\n        and(aRef, and(and(bRef, not(cRef), dRef, not(eRef)), not(eRef))),\n        \"AND(?0.a, ?0.b, ?0.d, NOT(?0.c), NOT(?0.e))\");\n\n    \r\n    checkSimplify(and(aRef, bRef, not(or(cRef, or(dRef, eRef)))),\n        \"AND(?0.a, ?0.b, NOT(?0.c), NOT(?0.d), NOT(?0.e))\");\n\n    checkSimplify(and(aRef, bRef, not(or(not(cRef), dRef, not(eRef)))),\n        \"AND(?0.a, ?0.b, ?0.c, ?0.e, NOT(?0.d))\");\n\n    \r\n    checkSimplify(or(aRef, bRef, aRef), \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, falseLiteral),\n        \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, trueLiteral), \"true\");\n\n    \r\n    checkSimplify(case_(eq(bRef, cRef), dRef, falseLiteral, aRef, eRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.e, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(\n        case_(eq(bRef, cRef), dRef, trueLiteral, aRef, eq(cRef, dRef), eRef, cRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.a, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(case_(trueLiteral, aRef, eq(cRef, dRef), eRef, cRef), \"?0.a\");\n\n    \r\n    checkSimplify(\n        case_(aRef, literal1, bRef, literal1, cRef, literal1, dRef, literal1, literal1), \"1\");\n\n    \r\n    checkSimplify3(\n        case_(aRef, trueLiteral, bRef, trueLiteral, cRef, falseLiteral, nullBool),\n        \"OR(?0.a, ?0.b, AND(null, NOT(?0.a), NOT(?0.b), NOT(?0.c)))\",\n        \"OR(?0.a, ?0.b)\",\n        \"OR(?0.a, ?0.b, NOT(?0.c))\");\n\n    \r\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral,\n            falseLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)))\");\n\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral, eRef,\n            falseLiteral, trueLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)), AND(NOT(?0.b), NOT(?0.c), NOT(?0.e)))\");\n\n    checkSimplify(\n        case_(eq(falseLiteral, falseLiteral), falseLiteral,\n              eq(falseLiteral, falseLiteral), trueLiteral,\n              trueLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, aRef),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, aRef),\n        \"true\");\n\n    \r\n    checkSimplify2(and(le(hRef, literal1), gt(hRef, literal1)),\n        \"AND(<=(?0.h, 1), >(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify2(and(le(hRef, literal1), ge(hRef, literal1)),\n        \"AND(<=(?0.h, 1), >=(?0.h, 1))\",\n        \"=(?0.h, 1)\");\n\n    checkSimplify2(and(lt(hRef, literal1), eq(hRef, literal1), ge(hRef, literal1)),\n        \"AND(<(?0.h, 1), =(?0.h, 1), >=(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify(and(lt(hRef, literal1), or(falseLiteral, falseLiteral)),\n        \"false\");\n    checkSimplify(and(lt(hRef, literal1), or(falseLiteral, gt(jRef, kRef))),\n        \"AND(<(?0.h, 1), >(?0.j, ?0.k))\");\n    checkSimplify(or(lt(hRef, literal1), and(trueLiteral, trueLiteral)),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal1),\n            and(trueLiteral, or(trueLiteral, falseLiteral))),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal1),\n            and(trueLiteral, and(trueLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n    checkSimplify(\n        or(lt(hRef, literal1),\n            and(trueLiteral, or(falseLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n\n    \r\n    checkSimplify(eq(literal1, literal1), \"true\");\n    checkSimplify(eq(hRef, hRef), \"true\");\n    checkSimplify3(eq(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(eq(iRef, hRef));\n\n    \r\n    checkSimplify(le(literal1, literal1), \"true\");\n    checkSimplify(le(hRef, hRef), \"true\");\n    checkSimplify3(le(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(le(iRef, hRef));\n\n    \r\n    checkSimplify(ge(literal1, literal1), \"true\");\n    checkSimplify(ge(hRef, hRef), \"true\");\n    checkSimplify3(ge(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(ge(iRef, hRef));\n\n    \r\n    checkSimplify(ne(literal1, literal1), \"false\");\n    checkSimplify(ne(hRef, hRef), \"false\");\n    checkSimplify3(ne(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(ne(iRef, hRef));\n\n    \r\n    checkSimplify(lt(literal1, literal1), \"false\");\n    checkSimplify(lt(hRef, hRef), \"false\");\n    checkSimplify3(lt(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(lt(iRef, hRef));\n\n    \r\n    checkSimplify(gt(literal1, literal1), \"false\");\n    checkSimplify(gt(hRef, hRef), \"false\");\n    checkSimplify3(gt(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(gt(iRef, hRef));\n\n    \r\n    checkSimplify(isNull(not(vBool())), \"IS NULL(?0.bool0)\");\n    checkSimplify(isNull(not(vBoolNotNull())), \"false\");\n\n    \r\n    checkSimplify(isNotNull(not(vBool())), \"IS NOT NULL(?0.bool0)\");\n    checkSimplify(isNotNull(not(vBoolNotNull())), \"true\");\n\n    \r\n    checkSimplify(isNull(nullBool), \"true\");\n    \r\n    checkSimplify(isNull(plus(vInt(0), vInt(1))),\n        \"OR(IS NULL(?0.int0), IS NULL(?0.int1))\");\n    checkSimplify(isNull(plus(vInt(0), vIntNotNull(1))), \"IS NULL(?0.int0)\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vIntNotNull(1))), \"false\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vInt(1))), \"IS NULL(?0.int1)\");\n\n    \r\n    checkSimplify(isNotNull(plus(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(plus(vInt(0), vIntNotNull(1))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vIntNotNull(1))), \"true\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vInt(1))),\n        \"IS NOT NULL(?0.int1)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":823,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void checkSimplifyDynamicParam() {\n    checkSimplify(isNotNull(lt(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(lt(vInt(0), vIntNotNull(2))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vIntNotNull(2), vIntNotNull(3))), \"true\");\n    checkSimplify(isNotNull(lt(vInt(0), literal(BigDecimal.ONE))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vInt(0), null_(tInt()))), \"false\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1817,"groupId":"15504","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkSimplifyDynamicParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test public void checkSimplifyDynamicParam() {\n    checkSimplify(isNotNull(lt(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(lt(vInt(0), vIntNotNull(2))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vIntNotNull(2), vIntNotNull(3))), \"true\");\n    checkSimplify(isNotNull(lt(vInt(0), literal(BigDecimal.ONE))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vInt(0), null_(tInt()))), \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1808,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-08-11 09:40:15","commitOrder":3,"curCode":"  @Test void testSimplify() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType intNullableType =\n        typeFactory.createTypeWithNullability(intType, true);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .add(\"i\", intNullableType)\n        .add(\"j\", intType)\n        .add(\"k\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n    final RexNode iRef = rexBuilder.makeFieldAccess(range, 8);\n    final RexNode jRef = rexBuilder.makeFieldAccess(range, 9);\n    final RexNode kRef = rexBuilder.makeFieldAccess(range, 10);\n\n    \r\n    checkSimplify(and(aRef, bRef, aRef), \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, trueLiteral),\n        \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, falseLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(cRef), not(aRef)),\n        \"AND(?0.b, NOT(?0.a), NOT(?0.c))\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(trueLiteral)),\n        \"false\");\n\n    \r\n    checkSimplify(\n        and(aRef, and(and(bRef, not(cRef), dRef, not(eRef)), not(eRef))),\n        \"AND(?0.a, ?0.b, ?0.d, NOT(?0.c), NOT(?0.e))\");\n\n    \r\n    checkSimplify(and(aRef, bRef, not(or(cRef, or(dRef, eRef)))),\n        \"AND(?0.a, ?0.b, NOT(?0.c), NOT(?0.d), NOT(?0.e))\");\n\n    checkSimplify(and(aRef, bRef, not(or(not(cRef), dRef, not(eRef)))),\n        \"AND(?0.a, ?0.b, ?0.c, ?0.e, NOT(?0.d))\");\n\n    \r\n    checkSimplify(or(aRef, bRef, aRef), \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, falseLiteral),\n        \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, trueLiteral), \"true\");\n\n    \r\n    checkSimplify(case_(eq(bRef, cRef), dRef, falseLiteral, aRef, eRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.e, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(\n        case_(eq(bRef, cRef), dRef, trueLiteral, aRef, eq(cRef, dRef), eRef, cRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.a, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(case_(trueLiteral, aRef, eq(cRef, dRef), eRef, cRef), \"?0.a\");\n\n    \r\n    checkSimplify(\n        case_(aRef, literal(1), bRef, literal(1), cRef, literal(1), dRef,\n            literal(1), literal(1)), \"1\");\n\n    \r\n    checkSimplify3(\n        case_(aRef, trueLiteral, bRef, trueLiteral, cRef, falseLiteral, nullBool),\n        \"OR(?0.a, ?0.b, AND(null, NOT(?0.a), NOT(?0.b), NOT(?0.c)))\",\n        \"OR(?0.a, ?0.b)\",\n        \"OR(?0.a, ?0.b, NOT(?0.c))\");\n\n    \r\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral,\n            falseLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)))\");\n\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral, eRef,\n            falseLiteral, trueLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)), AND(NOT(?0.b), NOT(?0.c), NOT(?0.e)))\");\n\n    checkSimplify(\n        case_(eq(falseLiteral, falseLiteral), falseLiteral,\n              eq(falseLiteral, falseLiteral), trueLiteral,\n              trueLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, aRef),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, aRef),\n        \"true\");\n\n    \r\n    checkSimplify2(and(le(hRef, literal(1)), gt(hRef, literal(1))),\n        \"AND(<=(?0.h, 1), >(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify2(and(le(hRef, literal(1)), ge(hRef, literal(1))),\n        \"AND(<=(?0.h, 1), >=(?0.h, 1))\",\n        \"=(?0.h, 1)\");\n\n    checkSimplify2(and(lt(hRef, literal(1)), eq(hRef, literal(1)), ge(hRef, literal(1))),\n        \"AND(<(?0.h, 1), =(?0.h, 1), >=(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify(and(lt(hRef, literal(1)), or(falseLiteral, falseLiteral)),\n        \"false\");\n    checkSimplify(and(lt(hRef, literal(1)), or(falseLiteral, gt(jRef, kRef))),\n        \"AND(<(?0.h, 1), >(?0.j, ?0.k))\");\n    checkSimplify(or(lt(hRef, literal(1)), and(trueLiteral, trueLiteral)),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, or(trueLiteral, falseLiteral))),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, and(trueLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, or(falseLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n\n    \r\n    checkSimplify(eq(literal(1), literal(1)), \"true\");\n    checkSimplify(eq(hRef, hRef), \"true\");\n    checkSimplify3(eq(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(eq(iRef, hRef));\n\n    \r\n    checkSimplify(le(literal(1), literal(1)), \"true\");\n    checkSimplify(le(hRef, hRef), \"true\");\n    checkSimplify3(le(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(le(iRef, hRef));\n\n    \r\n    checkSimplify(ge(literal(1), literal(1)), \"true\");\n    checkSimplify(ge(hRef, hRef), \"true\");\n    checkSimplify3(ge(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(ge(iRef, hRef));\n\n    \r\n    checkSimplify(ne(literal(1), literal(1)), \"false\");\n    checkSimplify(ne(hRef, hRef), \"false\");\n    checkSimplify3(ne(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(ne(iRef, hRef));\n\n    \r\n    checkSimplify(lt(literal(1), literal(1)), \"false\");\n    checkSimplify(lt(hRef, hRef), \"false\");\n    checkSimplify3(lt(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(lt(iRef, hRef));\n\n    \r\n    checkSimplify(gt(literal(1), literal(1)), \"false\");\n    checkSimplify(gt(hRef, hRef), \"false\");\n    checkSimplify3(gt(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(gt(iRef, hRef));\n\n    \r\n    checkSimplify(isNull(not(vBool())), \"IS NULL(?0.bool0)\");\n    checkSimplify(isNull(not(vBoolNotNull())), \"false\");\n\n    \r\n    checkSimplify(isNotNull(not(vBool())), \"IS NOT NULL(?0.bool0)\");\n    checkSimplify(isNotNull(not(vBoolNotNull())), \"true\");\n\n    \r\n    checkSimplify(isNull(nullBool), \"true\");\n    \r\n    checkSimplify(isNull(plus(vInt(0), vInt(1))),\n        \"OR(IS NULL(?0.int0), IS NULL(?0.int1))\");\n    checkSimplify(isNull(plus(vInt(0), vIntNotNull(1))), \"IS NULL(?0.int0)\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vIntNotNull(1))), \"false\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vInt(1))), \"IS NULL(?0.int1)\");\n\n    \r\n    checkSimplify(isNotNull(plus(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(plus(vInt(0), vIntNotNull(1))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vIntNotNull(1))), \"true\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vInt(1))),\n        \"IS NOT NULL(?0.int1)\");\n  }\n","date":"2020-08-21 04:50:33","endLine":1019,"groupId":"5414","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/85/82007de9eb7b2a96e2e80ce45bab2a34a63707.src","preCode":"  @Test void testSimplify() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType intNullableType =\n        typeFactory.createTypeWithNullability(intType, true);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .add(\"i\", intNullableType)\n        .add(\"j\", intType)\n        .add(\"k\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n    final RexNode iRef = rexBuilder.makeFieldAccess(range, 8);\n    final RexNode jRef = rexBuilder.makeFieldAccess(range, 9);\n    final RexNode kRef = rexBuilder.makeFieldAccess(range, 10);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n\n    \r\n    checkSimplify(and(aRef, bRef, aRef), \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, trueLiteral),\n        \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, falseLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(cRef), not(aRef)),\n        \"AND(?0.b, NOT(?0.a), NOT(?0.c))\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(trueLiteral)),\n        \"false\");\n\n    \r\n    checkSimplify(\n        and(aRef, and(and(bRef, not(cRef), dRef, not(eRef)), not(eRef))),\n        \"AND(?0.a, ?0.b, ?0.d, NOT(?0.c), NOT(?0.e))\");\n\n    \r\n    checkSimplify(and(aRef, bRef, not(or(cRef, or(dRef, eRef)))),\n        \"AND(?0.a, ?0.b, NOT(?0.c), NOT(?0.d), NOT(?0.e))\");\n\n    checkSimplify(and(aRef, bRef, not(or(not(cRef), dRef, not(eRef)))),\n        \"AND(?0.a, ?0.b, ?0.c, ?0.e, NOT(?0.d))\");\n\n    \r\n    checkSimplify(or(aRef, bRef, aRef), \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, falseLiteral),\n        \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, trueLiteral), \"true\");\n\n    \r\n    checkSimplify(case_(eq(bRef, cRef), dRef, falseLiteral, aRef, eRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.e, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(\n        case_(eq(bRef, cRef), dRef, trueLiteral, aRef, eq(cRef, dRef), eRef, cRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.a, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(case_(trueLiteral, aRef, eq(cRef, dRef), eRef, cRef), \"?0.a\");\n\n    \r\n    checkSimplify(\n        case_(aRef, literal1, bRef, literal1, cRef, literal1, dRef, literal1, literal1), \"1\");\n\n    \r\n    checkSimplify3(\n        case_(aRef, trueLiteral, bRef, trueLiteral, cRef, falseLiteral, nullBool),\n        \"OR(?0.a, ?0.b, AND(null, NOT(?0.a), NOT(?0.b), NOT(?0.c)))\",\n        \"OR(?0.a, ?0.b)\",\n        \"OR(?0.a, ?0.b, NOT(?0.c))\");\n\n    \r\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral,\n            falseLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)))\");\n\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral, eRef,\n            falseLiteral, trueLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)), AND(NOT(?0.b), NOT(?0.c), NOT(?0.e)))\");\n\n    checkSimplify(\n        case_(eq(falseLiteral, falseLiteral), falseLiteral,\n              eq(falseLiteral, falseLiteral), trueLiteral,\n              trueLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, aRef),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, aRef),\n        \"true\");\n\n    \r\n    checkSimplify2(and(le(hRef, literal1), gt(hRef, literal1)),\n        \"AND(<=(?0.h, 1), >(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify2(and(le(hRef, literal1), ge(hRef, literal1)),\n        \"AND(<=(?0.h, 1), >=(?0.h, 1))\",\n        \"=(?0.h, 1)\");\n\n    checkSimplify2(and(lt(hRef, literal1), eq(hRef, literal1), ge(hRef, literal1)),\n        \"AND(<(?0.h, 1), =(?0.h, 1), >=(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify(and(lt(hRef, literal1), or(falseLiteral, falseLiteral)),\n        \"false\");\n    checkSimplify(and(lt(hRef, literal1), or(falseLiteral, gt(jRef, kRef))),\n        \"AND(<(?0.h, 1), >(?0.j, ?0.k))\");\n    checkSimplify(or(lt(hRef, literal1), and(trueLiteral, trueLiteral)),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal1),\n            and(trueLiteral, or(trueLiteral, falseLiteral))),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal1),\n            and(trueLiteral, and(trueLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n    checkSimplify(\n        or(lt(hRef, literal1),\n            and(trueLiteral, or(falseLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n\n    \r\n    checkSimplify(eq(literal1, literal1), \"true\");\n    checkSimplify(eq(hRef, hRef), \"true\");\n    checkSimplify3(eq(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(eq(iRef, hRef));\n\n    \r\n    checkSimplify(le(literal1, literal1), \"true\");\n    checkSimplify(le(hRef, hRef), \"true\");\n    checkSimplify3(le(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(le(iRef, hRef));\n\n    \r\n    checkSimplify(ge(literal1, literal1), \"true\");\n    checkSimplify(ge(hRef, hRef), \"true\");\n    checkSimplify3(ge(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(ge(iRef, hRef));\n\n    \r\n    checkSimplify(ne(literal1, literal1), \"false\");\n    checkSimplify(ne(hRef, hRef), \"false\");\n    checkSimplify3(ne(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(ne(iRef, hRef));\n\n    \r\n    checkSimplify(lt(literal1, literal1), \"false\");\n    checkSimplify(lt(hRef, hRef), \"false\");\n    checkSimplify3(lt(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(lt(iRef, hRef));\n\n    \r\n    checkSimplify(gt(literal1, literal1), \"false\");\n    checkSimplify(gt(hRef, hRef), \"false\");\n    checkSimplify3(gt(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(gt(iRef, hRef));\n\n    \r\n    checkSimplify(isNull(not(vBool())), \"IS NULL(?0.bool0)\");\n    checkSimplify(isNull(not(vBoolNotNull())), \"false\");\n\n    \r\n    checkSimplify(isNotNull(not(vBool())), \"IS NOT NULL(?0.bool0)\");\n    checkSimplify(isNotNull(not(vBoolNotNull())), \"true\");\n\n    \r\n    checkSimplify(isNull(nullBool), \"true\");\n    \r\n    checkSimplify(isNull(plus(vInt(0), vInt(1))),\n        \"OR(IS NULL(?0.int0), IS NULL(?0.int1))\");\n    checkSimplify(isNull(plus(vInt(0), vIntNotNull(1))), \"IS NULL(?0.int0)\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vIntNotNull(1))), \"false\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vInt(1))), \"IS NULL(?0.int1)\");\n\n    \r\n    checkSimplify(isNotNull(plus(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(plus(vInt(0), vIntNotNull(1))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vIntNotNull(1))), \"true\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vInt(1))),\n        \"IS NOT NULL(?0.int1)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":801,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void checkSimplifyDynamicParam() {\n    checkSimplify(isNotNull(lt(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(lt(vInt(0), vIntNotNull(2))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vIntNotNull(2), vIntNotNull(3))), \"true\");\n    checkSimplify(isNotNull(lt(vInt(0), literal(BigDecimal.ONE))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vInt(0), null_(tInt()))), \"false\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1817,"groupId":"15504","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkSimplifyDynamicParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test void checkSimplifyDynamicParam() {\n    checkSimplify(isNotNull(lt(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(lt(vInt(0), vIntNotNull(2))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vIntNotNull(2), vIntNotNull(3))), \"true\");\n    checkSimplify(isNotNull(lt(vInt(0), literal(BigDecimal.ONE))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vInt(0), null_(tInt()))), \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1808,"status":"N"}],"commitId":"dc7bcc550caa5232b51200640c208769fb22787c","commitMessage":"@@@Refactor\n\nIn RexProgramTest.  construct literals when needed.  rather than caching in variables.\n\nThe word 'comparison' is mis-spelled in a few places.\n\nDeprecate RelReferentialConstraint.getNumColumns().\n\nChange TableFunctionScanFactory argument from RexNode to RexCall.\n","date":"2020-08-21 04:50:33","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-10-25 08:23:16","commitOrder":4,"curCode":"  @Test void testSimplify() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType intNullableType =\n        typeFactory.createTypeWithNullability(intType, true);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .add(\"i\", intNullableType)\n        .add(\"j\", intType)\n        .add(\"k\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n    final RexNode iRef = rexBuilder.makeFieldAccess(range, 8);\n    final RexNode jRef = rexBuilder.makeFieldAccess(range, 9);\n    final RexNode kRef = rexBuilder.makeFieldAccess(range, 10);\n\n    \r\n    checkSimplify(and(aRef, bRef, aRef), \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, trueLiteral),\n        \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, falseLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(cRef), not(aRef)),\n        \"AND(?0.b, NOT(?0.a), NOT(?0.c))\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(trueLiteral)),\n        \"false\");\n\n    \r\n    checkSimplify(\n        and(aRef, and(and(bRef, not(cRef), dRef, not(eRef)), not(eRef))),\n        \"AND(?0.a, ?0.b, ?0.d, NOT(?0.c), NOT(?0.e))\");\n\n    \r\n    checkSimplify(and(aRef, bRef, not(or(cRef, or(dRef, eRef)))),\n        \"AND(?0.a, ?0.b, NOT(?0.c), NOT(?0.d), NOT(?0.e))\");\n\n    checkSimplify(and(aRef, bRef, not(or(not(cRef), dRef, not(eRef)))),\n        \"AND(?0.a, ?0.b, ?0.c, ?0.e, NOT(?0.d))\");\n\n    \r\n    checkSimplify(or(aRef, bRef, aRef), \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, falseLiteral),\n        \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, trueLiteral), \"true\");\n\n    \r\n    checkSimplify(case_(eq(bRef, cRef), dRef, falseLiteral, aRef, eRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.e, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(\n        case_(eq(bRef, cRef), dRef, trueLiteral, aRef, eq(cRef, dRef), eRef, cRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.a, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(case_(trueLiteral, aRef, eq(cRef, dRef), eRef, cRef), \"?0.a\");\n\n    \r\n    checkSimplify(\n        case_(aRef, literal(1), bRef, literal(1), cRef, literal(1), dRef,\n            literal(1), literal(1)), \"1\");\n\n    \r\n    checkSimplify3(\n        case_(aRef, trueLiteral, bRef, trueLiteral, cRef, falseLiteral, nullBool),\n        \"OR(?0.a, ?0.b, AND(null, NOT(?0.a), NOT(?0.b), NOT(?0.c)))\",\n        \"OR(?0.a, ?0.b)\",\n        \"OR(?0.a, ?0.b, NOT(?0.c))\");\n\n    \r\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral,\n            falseLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)))\");\n\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral, eRef,\n            falseLiteral, trueLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)), AND(NOT(?0.b), NOT(?0.c), NOT(?0.e)))\");\n\n    checkSimplify(\n        case_(eq(falseLiteral, falseLiteral), falseLiteral,\n              eq(falseLiteral, falseLiteral), trueLiteral,\n              trueLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, aRef),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, aRef),\n        \"true\");\n\n    \r\n    checkSimplify2(and(le(hRef, literal(1)), gt(hRef, literal(1))),\n        \"AND(<=(?0.h, 1), >(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify2(and(le(hRef, literal(1)), ge(hRef, literal(1))),\n        \"AND(<=(?0.h, 1), >=(?0.h, 1))\",\n        \"=(?0.h, 1)\");\n\n    checkSimplify2(and(lt(hRef, literal(1)), eq(hRef, literal(1)), ge(hRef, literal(1))),\n        \"AND(<(?0.h, 1), =(?0.h, 1), >=(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify(and(lt(hRef, literal(1)), or(falseLiteral, falseLiteral)),\n        \"false\");\n    checkSimplify(and(lt(hRef, literal(1)), or(falseLiteral, gt(jRef, kRef))),\n        \"AND(<(?0.h, 1), >(?0.j, ?0.k))\");\n    checkSimplify(or(lt(hRef, literal(1)), and(trueLiteral, trueLiteral)),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, or(trueLiteral, falseLiteral))),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, and(trueLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, or(falseLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n\n    \r\n    checkSimplify(eq(literal(1), literal(1)), \"true\");\n    checkSimplify(eq(hRef, hRef), \"true\");\n    checkSimplify3(eq(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(eq(iRef, hRef));\n\n    \r\n    checkSimplify(le(literal(1), literal(1)), \"true\");\n    checkSimplify(le(hRef, hRef), \"true\");\n    checkSimplify3(le(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(le(iRef, hRef));\n\n    \r\n    checkSimplify(ge(literal(1), literal(1)), \"true\");\n    checkSimplify(ge(hRef, hRef), \"true\");\n    checkSimplify3(ge(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(ge(iRef, hRef));\n\n    \r\n    checkSimplify(ne(literal(1), literal(1)), \"false\");\n    checkSimplify(ne(hRef, hRef), \"false\");\n    checkSimplify3(ne(iRef, iRef), \"AND(null, SEARCH(?0.i, Sarg[NULL]))\",\n        \"false\", \"SEARCH(?0.i, Sarg[NULL])\");\n    checkSimplifyUnchanged(ne(iRef, hRef));\n\n    \r\n    checkSimplify(lt(literal(1), literal(1)), \"false\");\n    checkSimplify(lt(hRef, hRef), \"false\");\n    checkSimplify3(lt(iRef, iRef), \"AND(null, SEARCH(?0.i, Sarg[NULL]))\",\n        \"false\", \"SEARCH(?0.i, Sarg[NULL])\");\n    checkSimplifyUnchanged(lt(iRef, hRef));\n\n    \r\n    checkSimplify(gt(literal(1), literal(1)), \"false\");\n    checkSimplify(gt(hRef, hRef), \"false\");\n    checkSimplify3(gt(iRef, iRef), \"AND(null, SEARCH(?0.i, Sarg[NULL]))\",\n        \"false\", \"SEARCH(?0.i, Sarg[NULL])\");\n    checkSimplifyUnchanged(gt(iRef, hRef));\n\n    \r\n    checkSimplify(isNull(not(vBool())), \"IS NULL(?0.bool0)\");\n    checkSimplify(isNull(not(vBoolNotNull())), \"false\");\n\n    \r\n    checkSimplify(isNotNull(not(vBool())), \"IS NOT NULL(?0.bool0)\");\n    checkSimplify(isNotNull(not(vBoolNotNull())), \"true\");\n\n    \r\n    checkSimplify(isNull(nullBool), \"true\");\n    \r\n    checkSimplify(isNull(plus(vInt(0), vInt(1))),\n        \"OR(IS NULL(?0.int0), IS NULL(?0.int1))\");\n    checkSimplify(isNull(plus(vInt(0), vIntNotNull(1))), \"IS NULL(?0.int0)\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vIntNotNull(1))), \"false\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vInt(1))), \"IS NULL(?0.int1)\");\n\n    \r\n    checkSimplify(isNotNull(plus(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(plus(vInt(0), vIntNotNull(1))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vIntNotNull(1))), \"true\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vInt(1))),\n        \"IS NOT NULL(?0.int1)\");\n  }\n","date":"2020-11-01 16:13:27","endLine":1030,"groupId":"5414","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ba/2f91b245fb471dc13e7588d58a42e03df7d9f3.src","preCode":"  @Test void testSimplify() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType intNullableType =\n        typeFactory.createTypeWithNullability(intType, true);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .add(\"i\", intNullableType)\n        .add(\"j\", intType)\n        .add(\"k\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n    final RexNode iRef = rexBuilder.makeFieldAccess(range, 8);\n    final RexNode jRef = rexBuilder.makeFieldAccess(range, 9);\n    final RexNode kRef = rexBuilder.makeFieldAccess(range, 10);\n\n    \r\n    checkSimplify(and(aRef, bRef, aRef), \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, trueLiteral),\n        \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, falseLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(cRef), not(aRef)),\n        \"AND(?0.b, NOT(?0.a), NOT(?0.c))\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(trueLiteral)),\n        \"false\");\n\n    \r\n    checkSimplify(\n        and(aRef, and(and(bRef, not(cRef), dRef, not(eRef)), not(eRef))),\n        \"AND(?0.a, ?0.b, ?0.d, NOT(?0.c), NOT(?0.e))\");\n\n    \r\n    checkSimplify(and(aRef, bRef, not(or(cRef, or(dRef, eRef)))),\n        \"AND(?0.a, ?0.b, NOT(?0.c), NOT(?0.d), NOT(?0.e))\");\n\n    checkSimplify(and(aRef, bRef, not(or(not(cRef), dRef, not(eRef)))),\n        \"AND(?0.a, ?0.b, ?0.c, ?0.e, NOT(?0.d))\");\n\n    \r\n    checkSimplify(or(aRef, bRef, aRef), \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, falseLiteral),\n        \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, trueLiteral), \"true\");\n\n    \r\n    checkSimplify(case_(eq(bRef, cRef), dRef, falseLiteral, aRef, eRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.e, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(\n        case_(eq(bRef, cRef), dRef, trueLiteral, aRef, eq(cRef, dRef), eRef, cRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.a, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(case_(trueLiteral, aRef, eq(cRef, dRef), eRef, cRef), \"?0.a\");\n\n    \r\n    checkSimplify(\n        case_(aRef, literal(1), bRef, literal(1), cRef, literal(1), dRef,\n            literal(1), literal(1)), \"1\");\n\n    \r\n    checkSimplify3(\n        case_(aRef, trueLiteral, bRef, trueLiteral, cRef, falseLiteral, nullBool),\n        \"OR(?0.a, ?0.b, AND(null, NOT(?0.a), NOT(?0.b), NOT(?0.c)))\",\n        \"OR(?0.a, ?0.b)\",\n        \"OR(?0.a, ?0.b, NOT(?0.c))\");\n\n    \r\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral,\n            falseLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)))\");\n\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral, eRef,\n            falseLiteral, trueLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)), AND(NOT(?0.b), NOT(?0.c), NOT(?0.e)))\");\n\n    checkSimplify(\n        case_(eq(falseLiteral, falseLiteral), falseLiteral,\n              eq(falseLiteral, falseLiteral), trueLiteral,\n              trueLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, aRef),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, aRef),\n        \"true\");\n\n    \r\n    checkSimplify2(and(le(hRef, literal(1)), gt(hRef, literal(1))),\n        \"AND(<=(?0.h, 1), >(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify2(and(le(hRef, literal(1)), ge(hRef, literal(1))),\n        \"AND(<=(?0.h, 1), >=(?0.h, 1))\",\n        \"=(?0.h, 1)\");\n\n    checkSimplify2(and(lt(hRef, literal(1)), eq(hRef, literal(1)), ge(hRef, literal(1))),\n        \"AND(<(?0.h, 1), =(?0.h, 1), >=(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify(and(lt(hRef, literal(1)), or(falseLiteral, falseLiteral)),\n        \"false\");\n    checkSimplify(and(lt(hRef, literal(1)), or(falseLiteral, gt(jRef, kRef))),\n        \"AND(<(?0.h, 1), >(?0.j, ?0.k))\");\n    checkSimplify(or(lt(hRef, literal(1)), and(trueLiteral, trueLiteral)),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, or(trueLiteral, falseLiteral))),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, and(trueLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, or(falseLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n\n    \r\n    checkSimplify(eq(literal(1), literal(1)), \"true\");\n    checkSimplify(eq(hRef, hRef), \"true\");\n    checkSimplify3(eq(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(eq(iRef, hRef));\n\n    \r\n    checkSimplify(le(literal(1), literal(1)), \"true\");\n    checkSimplify(le(hRef, hRef), \"true\");\n    checkSimplify3(le(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(le(iRef, hRef));\n\n    \r\n    checkSimplify(ge(literal(1), literal(1)), \"true\");\n    checkSimplify(ge(hRef, hRef), \"true\");\n    checkSimplify3(ge(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(ge(iRef, hRef));\n\n    \r\n    checkSimplify(ne(literal(1), literal(1)), \"false\");\n    checkSimplify(ne(hRef, hRef), \"false\");\n    checkSimplify3(ne(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(ne(iRef, hRef));\n\n    \r\n    checkSimplify(lt(literal(1), literal(1)), \"false\");\n    checkSimplify(lt(hRef, hRef), \"false\");\n    checkSimplify3(lt(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(lt(iRef, hRef));\n\n    \r\n    checkSimplify(gt(literal(1), literal(1)), \"false\");\n    checkSimplify(gt(hRef, hRef), \"false\");\n    checkSimplify3(gt(iRef, iRef), \"AND(null, IS NULL(?0.i))\", \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(gt(iRef, hRef));\n\n    \r\n    checkSimplify(isNull(not(vBool())), \"IS NULL(?0.bool0)\");\n    checkSimplify(isNull(not(vBoolNotNull())), \"false\");\n\n    \r\n    checkSimplify(isNotNull(not(vBool())), \"IS NOT NULL(?0.bool0)\");\n    checkSimplify(isNotNull(not(vBoolNotNull())), \"true\");\n\n    \r\n    checkSimplify(isNull(nullBool), \"true\");\n    \r\n    checkSimplify(isNull(plus(vInt(0), vInt(1))),\n        \"OR(IS NULL(?0.int0), IS NULL(?0.int1))\");\n    checkSimplify(isNull(plus(vInt(0), vIntNotNull(1))), \"IS NULL(?0.int0)\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vIntNotNull(1))), \"false\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vInt(1))), \"IS NULL(?0.int1)\");\n\n    \r\n    checkSimplify(isNotNull(plus(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(plus(vInt(0), vIntNotNull(1))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vIntNotNull(1))), \"true\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vInt(1))),\n        \"IS NOT NULL(?0.int1)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":809,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void checkSimplifyDynamicParam() {\n    checkSimplify(isNotNull(lt(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(lt(vInt(0), vIntNotNull(2))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vIntNotNull(2), vIntNotNull(3))), \"true\");\n    checkSimplify(isNotNull(lt(vInt(0), literal(BigDecimal.ONE))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vInt(0), null_(tInt()))), \"false\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1817,"groupId":"15504","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkSimplifyDynamicParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test void checkSimplifyDynamicParam() {\n    checkSimplify(isNotNull(lt(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(lt(vInt(0), vIntNotNull(2))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vIntNotNull(2), vIntNotNull(3))), \"true\");\n    checkSimplify(isNotNull(lt(vInt(0), literal(BigDecimal.ONE))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vInt(0), null_(tInt()))), \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1808,"status":"N"}],"commitId":"d03ce47536ddb2aaec6d445b3ea48464081a7ed0","commitMessage":"@@@[CALCITE-4352] RexSimplify incorrectly drops IS NULL and IS NOT NULL from SEARCH expressions\n\nImprove Sarg.toString() for IS NULL.  IS NOT NULL.  TRUE. \nFALSE.\n\nSimplify NOT SEARCH(x.  sarg) to SEARCH(x.  sarg2) where sarg2\nis the complement of sarg.\n\nImprove return type of SEARCH; result is NOT NULL if argument\nis NOT NULL of it Sarg allows IS NULL.\n\nClose apache/calcite#2233\n","date":"2020-11-01 16:13:27","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-11-05 15:01:59","commitOrder":5,"curCode":"  @Test void testSimplify() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType intNullableType =\n        typeFactory.createTypeWithNullability(intType, true);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .add(\"i\", intNullableType)\n        .add(\"j\", intType)\n        .add(\"k\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n    final RexNode iRef = rexBuilder.makeFieldAccess(range, 8);\n    final RexNode jRef = rexBuilder.makeFieldAccess(range, 9);\n    final RexNode kRef = rexBuilder.makeFieldAccess(range, 10);\n\n    \r\n    checkSimplify(and(aRef, bRef, aRef), \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, trueLiteral),\n        \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, falseLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(cRef), not(aRef)),\n        \"AND(?0.b, NOT(?0.a), NOT(?0.c))\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(trueLiteral)),\n        \"false\");\n\n    \r\n    checkSimplify(\n        and(aRef, and(and(bRef, not(cRef), dRef, not(eRef)), not(eRef))),\n        \"AND(?0.a, ?0.b, ?0.d, NOT(?0.c), NOT(?0.e))\");\n\n    \r\n    checkSimplify(and(aRef, bRef, not(or(cRef, or(dRef, eRef)))),\n        \"AND(?0.a, ?0.b, NOT(?0.c), NOT(?0.d), NOT(?0.e))\");\n\n    checkSimplify(and(aRef, bRef, not(or(not(cRef), dRef, not(eRef)))),\n        \"AND(?0.a, ?0.b, ?0.c, ?0.e, NOT(?0.d))\");\n\n    \r\n    checkSimplify(or(aRef, bRef, aRef), \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, falseLiteral),\n        \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, trueLiteral), \"true\");\n\n    \r\n    checkSimplify(case_(eq(bRef, cRef), dRef, falseLiteral, aRef, eRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.e, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(\n        case_(eq(bRef, cRef), dRef, trueLiteral, aRef, eq(cRef, dRef), eRef, cRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.a, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(case_(trueLiteral, aRef, eq(cRef, dRef), eRef, cRef), \"?0.a\");\n\n    \r\n    checkSimplify(\n        case_(aRef, literal(1), bRef, literal(1), cRef, literal(1), dRef,\n            literal(1), literal(1)), \"1\");\n\n    \r\n    checkSimplify3(\n        case_(aRef, trueLiteral, bRef, trueLiteral, cRef, falseLiteral, nullBool),\n        \"OR(?0.a, ?0.b, AND(null, NOT(?0.a), NOT(?0.b), NOT(?0.c)))\",\n        \"OR(?0.a, ?0.b)\",\n        \"OR(?0.a, ?0.b, NOT(?0.c))\");\n\n    \r\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral,\n            falseLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)))\");\n\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral, eRef,\n            falseLiteral, trueLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)), AND(NOT(?0.b), NOT(?0.c), NOT(?0.e)))\");\n\n    checkSimplify(\n        case_(eq(falseLiteral, falseLiteral), falseLiteral,\n              eq(falseLiteral, falseLiteral), trueLiteral,\n              trueLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, aRef),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, aRef),\n        \"true\");\n\n    \r\n    checkSimplify2(and(le(hRef, literal(1)), gt(hRef, literal(1))),\n        \"AND(<=(?0.h, 1), >(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify(and(le(hRef, literal(1)), ge(hRef, literal(1))), \"=(?0.h, 1)\");\n\n    checkSimplify2(and(lt(hRef, literal(1)), eq(hRef, literal(1)), ge(hRef, literal(1))),\n        \"AND(<(?0.h, 1), =(?0.h, 1), >=(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify(and(lt(hRef, literal(1)), or(falseLiteral, falseLiteral)),\n        \"false\");\n    checkSimplify(and(lt(hRef, literal(1)), or(falseLiteral, gt(jRef, kRef))),\n        \"AND(<(?0.h, 1), >(?0.j, ?0.k))\");\n    checkSimplify(or(lt(hRef, literal(1)), and(trueLiteral, trueLiteral)),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, or(trueLiteral, falseLiteral))),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, and(trueLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, or(falseLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n\n    \r\n    checkSimplify(eq(literal(1), literal(1)), \"true\");\n    checkSimplify(eq(hRef, hRef), \"true\");\n    checkSimplify3(eq(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(eq(iRef, hRef));\n\n    \r\n    checkSimplify(le(literal(1), literal(1)), \"true\");\n    checkSimplify(le(hRef, hRef), \"true\");\n    checkSimplify3(le(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(le(iRef, hRef));\n\n    \r\n    checkSimplify(ge(literal(1), literal(1)), \"true\");\n    checkSimplify(ge(hRef, hRef), \"true\");\n    checkSimplify3(ge(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(ge(iRef, hRef));\n\n    \r\n    checkSimplify(ne(literal(1), literal(1)), \"false\");\n    checkSimplify(ne(hRef, hRef), \"false\");\n    checkSimplify3(ne(iRef, iRef), \"AND(null, IS NULL(?0.i))\",\n        \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(ne(iRef, hRef));\n\n    \r\n    checkSimplify(lt(literal(1), literal(1)), \"false\");\n    checkSimplify(lt(hRef, hRef), \"false\");\n    checkSimplify3(lt(iRef, iRef), \"AND(null, IS NULL(?0.i))\",\n        \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(lt(iRef, hRef));\n\n    \r\n    checkSimplify(gt(literal(1), literal(1)), \"false\");\n    checkSimplify(gt(hRef, hRef), \"false\");\n    checkSimplify3(gt(iRef, iRef), \"AND(null, IS NULL(?0.i))\",\n        \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(gt(iRef, hRef));\n\n    \r\n    checkSimplify(isNull(not(vBool())), \"IS NULL(?0.bool0)\");\n    checkSimplify(isNull(not(vBoolNotNull())), \"false\");\n\n    \r\n    checkSimplify(isNotNull(not(vBool())), \"IS NOT NULL(?0.bool0)\");\n    checkSimplify(isNotNull(not(vBoolNotNull())), \"true\");\n\n    \r\n    checkSimplify(isNull(nullBool), \"true\");\n    \r\n    checkSimplify(isNull(plus(vInt(0), vInt(1))),\n        \"OR(IS NULL(?0.int0), IS NULL(?0.int1))\");\n    checkSimplify(isNull(plus(vInt(0), vIntNotNull(1))), \"IS NULL(?0.int0)\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vIntNotNull(1))), \"false\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vInt(1))), \"IS NULL(?0.int1)\");\n\n    \r\n    checkSimplify(isNotNull(plus(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(plus(vInt(0), vIntNotNull(1))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vIntNotNull(1))), \"true\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vInt(1))),\n        \"IS NOT NULL(?0.int1)\");\n  }\n","date":"2020-11-12 17:39:03","endLine":1028,"groupId":"15939","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/8d0a2609bc72f85d32f075ad25570149cd1bd8.src","preCode":"  @Test void testSimplify() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType intNullableType =\n        typeFactory.createTypeWithNullability(intType, true);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .add(\"i\", intNullableType)\n        .add(\"j\", intType)\n        .add(\"k\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n    final RexNode iRef = rexBuilder.makeFieldAccess(range, 8);\n    final RexNode jRef = rexBuilder.makeFieldAccess(range, 9);\n    final RexNode kRef = rexBuilder.makeFieldAccess(range, 10);\n\n    \r\n    checkSimplify(and(aRef, bRef, aRef), \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, trueLiteral),\n        \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, falseLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(cRef), not(aRef)),\n        \"AND(?0.b, NOT(?0.a), NOT(?0.c))\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(trueLiteral)),\n        \"false\");\n\n    \r\n    checkSimplify(\n        and(aRef, and(and(bRef, not(cRef), dRef, not(eRef)), not(eRef))),\n        \"AND(?0.a, ?0.b, ?0.d, NOT(?0.c), NOT(?0.e))\");\n\n    \r\n    checkSimplify(and(aRef, bRef, not(or(cRef, or(dRef, eRef)))),\n        \"AND(?0.a, ?0.b, NOT(?0.c), NOT(?0.d), NOT(?0.e))\");\n\n    checkSimplify(and(aRef, bRef, not(or(not(cRef), dRef, not(eRef)))),\n        \"AND(?0.a, ?0.b, ?0.c, ?0.e, NOT(?0.d))\");\n\n    \r\n    checkSimplify(or(aRef, bRef, aRef), \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, falseLiteral),\n        \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, trueLiteral), \"true\");\n\n    \r\n    checkSimplify(case_(eq(bRef, cRef), dRef, falseLiteral, aRef, eRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.e, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(\n        case_(eq(bRef, cRef), dRef, trueLiteral, aRef, eq(cRef, dRef), eRef, cRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.a, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(case_(trueLiteral, aRef, eq(cRef, dRef), eRef, cRef), \"?0.a\");\n\n    \r\n    checkSimplify(\n        case_(aRef, literal(1), bRef, literal(1), cRef, literal(1), dRef,\n            literal(1), literal(1)), \"1\");\n\n    \r\n    checkSimplify3(\n        case_(aRef, trueLiteral, bRef, trueLiteral, cRef, falseLiteral, nullBool),\n        \"OR(?0.a, ?0.b, AND(null, NOT(?0.a), NOT(?0.b), NOT(?0.c)))\",\n        \"OR(?0.a, ?0.b)\",\n        \"OR(?0.a, ?0.b, NOT(?0.c))\");\n\n    \r\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral,\n            falseLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)))\");\n\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral, eRef,\n            falseLiteral, trueLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)), AND(NOT(?0.b), NOT(?0.c), NOT(?0.e)))\");\n\n    checkSimplify(\n        case_(eq(falseLiteral, falseLiteral), falseLiteral,\n              eq(falseLiteral, falseLiteral), trueLiteral,\n              trueLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, aRef),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, aRef),\n        \"true\");\n\n    \r\n    checkSimplify2(and(le(hRef, literal(1)), gt(hRef, literal(1))),\n        \"AND(<=(?0.h, 1), >(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify2(and(le(hRef, literal(1)), ge(hRef, literal(1))),\n        \"AND(<=(?0.h, 1), >=(?0.h, 1))\",\n        \"=(?0.h, 1)\");\n\n    checkSimplify2(and(lt(hRef, literal(1)), eq(hRef, literal(1)), ge(hRef, literal(1))),\n        \"AND(<(?0.h, 1), =(?0.h, 1), >=(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify(and(lt(hRef, literal(1)), or(falseLiteral, falseLiteral)),\n        \"false\");\n    checkSimplify(and(lt(hRef, literal(1)), or(falseLiteral, gt(jRef, kRef))),\n        \"AND(<(?0.h, 1), >(?0.j, ?0.k))\");\n    checkSimplify(or(lt(hRef, literal(1)), and(trueLiteral, trueLiteral)),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, or(trueLiteral, falseLiteral))),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, and(trueLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, or(falseLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n\n    \r\n    checkSimplify(eq(literal(1), literal(1)), \"true\");\n    checkSimplify(eq(hRef, hRef), \"true\");\n    checkSimplify3(eq(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(eq(iRef, hRef));\n\n    \r\n    checkSimplify(le(literal(1), literal(1)), \"true\");\n    checkSimplify(le(hRef, hRef), \"true\");\n    checkSimplify3(le(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(le(iRef, hRef));\n\n    \r\n    checkSimplify(ge(literal(1), literal(1)), \"true\");\n    checkSimplify(ge(hRef, hRef), \"true\");\n    checkSimplify3(ge(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(ge(iRef, hRef));\n\n    \r\n    checkSimplify(ne(literal(1), literal(1)), \"false\");\n    checkSimplify(ne(hRef, hRef), \"false\");\n    checkSimplify3(ne(iRef, iRef), \"AND(null, SEARCH(?0.i, Sarg[NULL]))\",\n        \"false\", \"SEARCH(?0.i, Sarg[NULL])\");\n    checkSimplifyUnchanged(ne(iRef, hRef));\n\n    \r\n    checkSimplify(lt(literal(1), literal(1)), \"false\");\n    checkSimplify(lt(hRef, hRef), \"false\");\n    checkSimplify3(lt(iRef, iRef), \"AND(null, SEARCH(?0.i, Sarg[NULL]))\",\n        \"false\", \"SEARCH(?0.i, Sarg[NULL])\");\n    checkSimplifyUnchanged(lt(iRef, hRef));\n\n    \r\n    checkSimplify(gt(literal(1), literal(1)), \"false\");\n    checkSimplify(gt(hRef, hRef), \"false\");\n    checkSimplify3(gt(iRef, iRef), \"AND(null, SEARCH(?0.i, Sarg[NULL]))\",\n        \"false\", \"SEARCH(?0.i, Sarg[NULL])\");\n    checkSimplifyUnchanged(gt(iRef, hRef));\n\n    \r\n    checkSimplify(isNull(not(vBool())), \"IS NULL(?0.bool0)\");\n    checkSimplify(isNull(not(vBoolNotNull())), \"false\");\n\n    \r\n    checkSimplify(isNotNull(not(vBool())), \"IS NOT NULL(?0.bool0)\");\n    checkSimplify(isNotNull(not(vBoolNotNull())), \"true\");\n\n    \r\n    checkSimplify(isNull(nullBool), \"true\");\n    \r\n    checkSimplify(isNull(plus(vInt(0), vInt(1))),\n        \"OR(IS NULL(?0.int0), IS NULL(?0.int1))\");\n    checkSimplify(isNull(plus(vInt(0), vIntNotNull(1))), \"IS NULL(?0.int0)\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vIntNotNull(1))), \"false\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vInt(1))), \"IS NULL(?0.int1)\");\n\n    \r\n    checkSimplify(isNotNull(plus(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(plus(vInt(0), vIntNotNull(1))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vIntNotNull(1))), \"true\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vInt(1))),\n        \"IS NOT NULL(?0.int1)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":809,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void checkSimplifyDynamicParam() {\n    checkSimplify(isNotNull(lt(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(lt(vInt(0), vIntNotNull(2))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vIntNotNull(2), vIntNotNull(3))), \"true\");\n    checkSimplify(isNotNull(lt(vInt(0), literal(BigDecimal.ONE))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vInt(0), null_(tInt()))), \"false\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1817,"groupId":"15504","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"checkSimplifyDynamicParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test void checkSimplifyDynamicParam() {\n    checkSimplify(isNotNull(lt(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(lt(vInt(0), vIntNotNull(2))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vIntNotNull(2), vIntNotNull(3))), \"true\");\n    checkSimplify(isNotNull(lt(vInt(0), literal(BigDecimal.ONE))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vInt(0), null_(tInt()))), \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1808,"status":"N"}],"commitId":"5e9943aa1f51a97068fc37d53dea1d447570becc","commitMessage":"@@@[CALCITE-4364] `a IN (1.  2) AND a = 1` should be simplified to `a = 1`\n","date":"2020-11-12 17:39:03","modifiedFileCount":"8","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-12-24 05:32:41","commitOrder":6,"curCode":"  @Test void testSimplify() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType intNullableType =\n        typeFactory.createTypeWithNullability(intType, true);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .add(\"i\", intNullableType)\n        .add(\"j\", intType)\n        .add(\"k\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n    final RexNode iRef = rexBuilder.makeFieldAccess(range, 8);\n    final RexNode jRef = rexBuilder.makeFieldAccess(range, 9);\n    final RexNode kRef = rexBuilder.makeFieldAccess(range, 10);\n\n    \r\n    checkSimplify(and(aRef, bRef, aRef), \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, trueLiteral),\n        \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, falseLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(cRef), not(aRef)),\n        \"AND(?0.b, NOT(?0.a), NOT(?0.c))\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(trueLiteral)),\n        \"false\");\n\n    \r\n    checkSimplify(\n        and(aRef, and(and(bRef, not(cRef), dRef, not(eRef)), not(eRef))),\n        \"AND(?0.a, ?0.b, ?0.d, NOT(?0.c), NOT(?0.e))\");\n\n    \r\n    checkSimplify(and(aRef, bRef, not(or(cRef, or(dRef, eRef)))),\n        \"AND(?0.a, ?0.b, NOT(?0.c), NOT(?0.d), NOT(?0.e))\");\n\n    checkSimplify(and(aRef, bRef, not(or(not(cRef), dRef, not(eRef)))),\n        \"AND(?0.a, ?0.b, ?0.c, ?0.e, NOT(?0.d))\");\n\n    \r\n    checkSimplify(or(aRef, bRef, aRef), \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, falseLiteral),\n        \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, trueLiteral), \"true\");\n\n    \r\n    checkSimplify(case_(eq(bRef, cRef), dRef, falseLiteral, aRef, eRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.e, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(\n        case_(eq(bRef, cRef), dRef, trueLiteral, aRef, eq(cRef, dRef), eRef, cRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.a, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(case_(trueLiteral, aRef, eq(cRef, dRef), eRef, cRef), \"?0.a\");\n\n    \r\n    checkSimplify(\n        case_(aRef, literal(1), bRef, literal(1), cRef, literal(1), dRef,\n            literal(1), literal(1)), \"1\");\n\n    \r\n    checkSimplify3(\n        case_(aRef, trueLiteral, bRef, trueLiteral, cRef, falseLiteral, nullBool),\n        \"OR(?0.a, ?0.b, AND(null, NOT(?0.a), NOT(?0.b), NOT(?0.c)))\",\n        \"OR(?0.a, ?0.b)\",\n        \"OR(?0.a, ?0.b, NOT(?0.c))\");\n\n    \r\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral,\n            falseLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)))\");\n\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral, eRef,\n            falseLiteral, trueLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)), AND(NOT(?0.b), NOT(?0.c), NOT(?0.e)))\");\n\n    checkSimplify(\n        case_(eq(falseLiteral, falseLiteral), falseLiteral,\n              eq(falseLiteral, falseLiteral), trueLiteral,\n              trueLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, aRef),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, aRef),\n        \"true\");\n\n    \r\n    checkSimplify3(and(le(hRef, literal(1)), gt(hRef, literal(1))),\n        \"<>(?0.h, ?0.h)\",\n        \"false\",\n        \"false\");\n\n    checkSimplify(and(le(hRef, literal(1)), ge(hRef, literal(1))), \"=(?0.h, 1)\");\n\n    checkSimplify3(and(lt(hRef, literal(1)), eq(hRef, literal(1)), ge(hRef, literal(1))),\n        \"<>(?0.h, ?0.h)\",\n        \"false\",\n        \"false\");\n\n    checkSimplify(and(lt(hRef, literal(1)), or(falseLiteral, falseLiteral)),\n        \"false\");\n    checkSimplify(and(lt(hRef, literal(1)), or(falseLiteral, gt(jRef, kRef))),\n        \"AND(<(?0.h, 1), >(?0.j, ?0.k))\");\n    checkSimplify(or(lt(hRef, literal(1)), and(trueLiteral, trueLiteral)),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, or(trueLiteral, falseLiteral))),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, and(trueLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, or(falseLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n\n    \r\n    checkSimplify(eq(literal(1), literal(1)), \"true\");\n    checkSimplify(eq(hRef, hRef), \"true\");\n    checkSimplify3(eq(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(eq(iRef, hRef));\n\n    \r\n    checkSimplify(le(literal(1), literal(1)), \"true\");\n    checkSimplify(le(hRef, hRef), \"true\");\n    checkSimplify3(le(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(le(iRef, hRef));\n\n    \r\n    checkSimplify(ge(literal(1), literal(1)), \"true\");\n    checkSimplify(ge(hRef, hRef), \"true\");\n    checkSimplify3(ge(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(ge(iRef, hRef));\n\n    \r\n    checkSimplify(ne(literal(1), literal(1)), \"false\");\n    checkSimplify(ne(hRef, hRef), \"false\");\n    checkSimplify3(ne(iRef, iRef), \"AND(null, IS NULL(?0.i))\",\n        \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(ne(iRef, hRef));\n\n    \r\n    checkSimplify(lt(literal(1), literal(1)), \"false\");\n    checkSimplify(lt(hRef, hRef), \"false\");\n    checkSimplify3(lt(iRef, iRef), \"AND(null, IS NULL(?0.i))\",\n        \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(lt(iRef, hRef));\n\n    \r\n    checkSimplify(gt(literal(1), literal(1)), \"false\");\n    checkSimplify(gt(hRef, hRef), \"false\");\n    checkSimplify3(gt(iRef, iRef), \"AND(null, IS NULL(?0.i))\",\n        \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(gt(iRef, hRef));\n\n    \r\n    checkSimplify(isNull(not(vBool())), \"IS NULL(?0.bool0)\");\n    checkSimplify(isNull(not(vBoolNotNull())), \"false\");\n\n    \r\n    checkSimplify(isNotNull(not(vBool())), \"IS NOT NULL(?0.bool0)\");\n    checkSimplify(isNotNull(not(vBoolNotNull())), \"true\");\n\n    \r\n    checkSimplify(isNull(nullBool), \"true\");\n    \r\n    checkSimplify(isNull(plus(vInt(0), vInt(1))),\n        \"OR(IS NULL(?0.int0), IS NULL(?0.int1))\");\n    checkSimplify(isNull(plus(vInt(0), vIntNotNull(1))), \"IS NULL(?0.int0)\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vIntNotNull(1))), \"false\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vInt(1))), \"IS NULL(?0.int1)\");\n\n    \r\n    checkSimplify(isNotNull(plus(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(plus(vInt(0), vIntNotNull(1))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vIntNotNull(1))), \"true\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vInt(1))),\n        \"IS NOT NULL(?0.int1)\");\n  }\n","date":"2021-03-03 04:28:27","endLine":1030,"groupId":"10682","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/8a748d0cead45d1ae0e14d213cb2ee4e907113.src","preCode":"  @Test void testSimplify() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType intNullableType =\n        typeFactory.createTypeWithNullability(intType, true);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .add(\"i\", intNullableType)\n        .add(\"j\", intType)\n        .add(\"k\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n    final RexNode iRef = rexBuilder.makeFieldAccess(range, 8);\n    final RexNode jRef = rexBuilder.makeFieldAccess(range, 9);\n    final RexNode kRef = rexBuilder.makeFieldAccess(range, 10);\n\n    \r\n    checkSimplify(and(aRef, bRef, aRef), \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, trueLiteral),\n        \"AND(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(and(aRef, bRef, falseLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(cRef), not(aRef)),\n        \"AND(?0.b, NOT(?0.a), NOT(?0.c))\");\n\n    \r\n    checkSimplify(and(not(aRef), bRef, not(trueLiteral)),\n        \"false\");\n\n    \r\n    checkSimplify(\n        and(aRef, and(and(bRef, not(cRef), dRef, not(eRef)), not(eRef))),\n        \"AND(?0.a, ?0.b, ?0.d, NOT(?0.c), NOT(?0.e))\");\n\n    \r\n    checkSimplify(and(aRef, bRef, not(or(cRef, or(dRef, eRef)))),\n        \"AND(?0.a, ?0.b, NOT(?0.c), NOT(?0.d), NOT(?0.e))\");\n\n    checkSimplify(and(aRef, bRef, not(or(not(cRef), dRef, not(eRef)))),\n        \"AND(?0.a, ?0.b, ?0.c, ?0.e, NOT(?0.d))\");\n\n    \r\n    checkSimplify(or(aRef, bRef, aRef), \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, falseLiteral),\n        \"OR(?0.a, ?0.b)\");\n\n    \r\n    checkSimplify(or(aRef, bRef, trueLiteral), \"true\");\n\n    \r\n    checkSimplify(case_(eq(bRef, cRef), dRef, falseLiteral, aRef, eRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.e, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(\n        case_(eq(bRef, cRef), dRef, trueLiteral, aRef, eq(cRef, dRef), eRef, cRef),\n        \"OR(AND(=(?0.b, ?0.c), ?0.d), AND(?0.a, <>(?0.b, ?0.c)))\");\n\n    \r\n    checkSimplify(case_(trueLiteral, aRef, eq(cRef, dRef), eRef, cRef), \"?0.a\");\n\n    \r\n    checkSimplify(\n        case_(aRef, literal(1), bRef, literal(1), cRef, literal(1), dRef,\n            literal(1), literal(1)), \"1\");\n\n    \r\n    checkSimplify3(\n        case_(aRef, trueLiteral, bRef, trueLiteral, cRef, falseLiteral, nullBool),\n        \"OR(?0.a, ?0.b, AND(null, NOT(?0.a), NOT(?0.b), NOT(?0.c)))\",\n        \"OR(?0.a, ?0.b)\",\n        \"OR(?0.a, ?0.b, NOT(?0.c))\");\n\n    \r\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral,\n            falseLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)))\");\n\n    checkSimplify(\n        case_(aRef, trueLiteral, bRef,\n            falseLiteral, cRef,\n            falseLiteral, dRef, trueLiteral, eRef,\n            falseLiteral, trueLiteral),\n        \"OR(?0.a, AND(?0.d, NOT(?0.b), NOT(?0.c)), AND(NOT(?0.b), NOT(?0.c), NOT(?0.e)))\");\n\n    checkSimplify(\n        case_(eq(falseLiteral, falseLiteral), falseLiteral,\n              eq(falseLiteral, falseLiteral), trueLiteral,\n              trueLiteral),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, aRef),\n        \"false\");\n\n    \r\n    checkSimplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, aRef),\n        \"true\");\n\n    \r\n    checkSimplify2(and(le(hRef, literal(1)), gt(hRef, literal(1))),\n        \"AND(<=(?0.h, 1), >(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify(and(le(hRef, literal(1)), ge(hRef, literal(1))), \"=(?0.h, 1)\");\n\n    checkSimplify2(and(lt(hRef, literal(1)), eq(hRef, literal(1)), ge(hRef, literal(1))),\n        \"AND(<(?0.h, 1), =(?0.h, 1), >=(?0.h, 1))\",\n        \"false\");\n\n    checkSimplify(and(lt(hRef, literal(1)), or(falseLiteral, falseLiteral)),\n        \"false\");\n    checkSimplify(and(lt(hRef, literal(1)), or(falseLiteral, gt(jRef, kRef))),\n        \"AND(<(?0.h, 1), >(?0.j, ?0.k))\");\n    checkSimplify(or(lt(hRef, literal(1)), and(trueLiteral, trueLiteral)),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, or(trueLiteral, falseLiteral))),\n        \"true\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, and(trueLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n    checkSimplify(\n        or(lt(hRef, literal(1)),\n            and(trueLiteral, or(falseLiteral, falseLiteral))),\n        \"<(?0.h, 1)\");\n\n    \r\n    checkSimplify(eq(literal(1), literal(1)), \"true\");\n    checkSimplify(eq(hRef, hRef), \"true\");\n    checkSimplify3(eq(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(eq(iRef, hRef));\n\n    \r\n    checkSimplify(le(literal(1), literal(1)), \"true\");\n    checkSimplify(le(hRef, hRef), \"true\");\n    checkSimplify3(le(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(le(iRef, hRef));\n\n    \r\n    checkSimplify(ge(literal(1), literal(1)), \"true\");\n    checkSimplify(ge(hRef, hRef), \"true\");\n    checkSimplify3(ge(iRef, iRef), \"OR(null, IS NOT NULL(?0.i))\", \"IS NOT NULL(?0.i)\", \"true\");\n    checkSimplifyUnchanged(ge(iRef, hRef));\n\n    \r\n    checkSimplify(ne(literal(1), literal(1)), \"false\");\n    checkSimplify(ne(hRef, hRef), \"false\");\n    checkSimplify3(ne(iRef, iRef), \"AND(null, IS NULL(?0.i))\",\n        \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(ne(iRef, hRef));\n\n    \r\n    checkSimplify(lt(literal(1), literal(1)), \"false\");\n    checkSimplify(lt(hRef, hRef), \"false\");\n    checkSimplify3(lt(iRef, iRef), \"AND(null, IS NULL(?0.i))\",\n        \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(lt(iRef, hRef));\n\n    \r\n    checkSimplify(gt(literal(1), literal(1)), \"false\");\n    checkSimplify(gt(hRef, hRef), \"false\");\n    checkSimplify3(gt(iRef, iRef), \"AND(null, IS NULL(?0.i))\",\n        \"false\", \"IS NULL(?0.i)\");\n    checkSimplifyUnchanged(gt(iRef, hRef));\n\n    \r\n    checkSimplify(isNull(not(vBool())), \"IS NULL(?0.bool0)\");\n    checkSimplify(isNull(not(vBoolNotNull())), \"false\");\n\n    \r\n    checkSimplify(isNotNull(not(vBool())), \"IS NOT NULL(?0.bool0)\");\n    checkSimplify(isNotNull(not(vBoolNotNull())), \"true\");\n\n    \r\n    checkSimplify(isNull(nullBool), \"true\");\n    \r\n    checkSimplify(isNull(plus(vInt(0), vInt(1))),\n        \"OR(IS NULL(?0.int0), IS NULL(?0.int1))\");\n    checkSimplify(isNull(plus(vInt(0), vIntNotNull(1))), \"IS NULL(?0.int0)\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vIntNotNull(1))), \"false\");\n    checkSimplify(isNull(plus(vIntNotNull(0), vInt(1))), \"IS NULL(?0.int1)\");\n\n    \r\n    checkSimplify(isNotNull(plus(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(plus(vInt(0), vIntNotNull(1))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vIntNotNull(1))), \"true\");\n    checkSimplify(isNotNull(plus(vIntNotNull(0), vInt(1))),\n        \"IS NOT NULL(?0.int1)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":809,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void checkSimplifyDynamicParam() {\n    checkSimplify(isNotNull(lt(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(lt(vInt(0), vIntNotNull(2))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vIntNotNull(2), vIntNotNull(3))), \"true\");\n    checkSimplify(isNotNull(lt(vInt(0), literal(BigDecimal.ONE))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vInt(0), null_(tInt()))), \"false\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1817,"groupId":"10682","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"checkSimplifyDynamicParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test void checkSimplifyDynamicParam() {\n    checkSimplify(isNotNull(lt(vInt(0), vInt(1))),\n        \"AND(IS NOT NULL(?0.int0), IS NOT NULL(?0.int1))\");\n    checkSimplify(isNotNull(lt(vInt(0), vIntNotNull(2))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vIntNotNull(2), vIntNotNull(3))), \"true\");\n    checkSimplify(isNotNull(lt(vInt(0), literal(BigDecimal.ONE))),\n        \"IS NOT NULL(?0.int0)\");\n    checkSimplify(isNotNull(lt(vInt(0), null_(tInt()))), \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1808,"status":"N"}],"commitId":"00d1086c7003115a9ed9dcc874051f515b7b5aae","commitMessage":"@@@[CALCITE-4446] Implement three-valued logic for SEARCH operator\n\nClose apache/calcite#2357\n","date":"2021-03-03 04:28:27","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"}]
