[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testPrefixMinusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_MINUS);\n    tester.checkFails(\n        \"'a' + ^- 'b'^ + 'c'\",\n        \"(?s)Cannot apply '-' to arguments of type '-<CHAR\\\\(1\\\\)>'.*\",\n        false);\n    tester.checkScalarExact(\"-1\", \"-1\");\n    tester.checkScalarExact(\n        \"-1.23\",\n        \"DECIMAL(3, 2) NOT NULL\",\n        \"-1.23\");\n    tester.checkScalarApprox(\"-1.0e0\", \"DOUBLE NOT NULL\", -1, 0);\n    tester.checkNull(\"-cast(null as integer)\");\n    tester.checkNull(\"-cast(null as tinyint)\");\n  }\n","date":"2014-11-14 09:39:34","endLine":2912,"groupId":"10053","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrefixMinusOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testPrefixMinusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_MINUS);\n    tester.checkFails(\n        \"'a' + ^- 'b'^ + 'c'\",\n        \"(?s)Cannot apply '-' to arguments of type '-<CHAR\\\\(1\\\\)>'.*\",\n        false);\n    tester.checkScalarExact(\"-1\", \"-1\");\n    tester.checkScalarExact(\n        \"-1.23\",\n        \"DECIMAL(3, 2) NOT NULL\",\n        \"-1.23\");\n    tester.checkScalarApprox(\"-1.0e0\", \"DOUBLE NOT NULL\", -1, 0);\n    tester.checkNull(\"-cast(null as integer)\");\n    tester.checkNull(\"-cast(null as tinyint)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2898,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testPrefixPlusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_PLUS, VM_EXPAND);\n    tester.checkScalarExact(\"+1\", \"1\");\n    tester.checkScalarExact(\"+1.23\", \"DECIMAL(3, 2) NOT NULL\", \"1.23\");\n    tester.checkScalarApprox(\"+1.0e0\", \"DOUBLE NOT NULL\", 1, 0);\n    tester.checkNull(\"+cast(null as integer)\");\n    tester.checkNull(\"+cast(null as tinyint)\");\n  }\n","date":"2014-11-14 09:39:34","endLine":2938,"groupId":"6257","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrefixPlusOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testPrefixPlusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_PLUS, VM_EXPAND);\n    tester.checkScalarExact(\"+1\", \"1\");\n    tester.checkScalarExact(\"+1.23\", \"DECIMAL(3, 2) NOT NULL\", \"1.23\");\n    tester.checkScalarApprox(\"+1.0e0\", \"DOUBLE NOT NULL\", 1, 0);\n    tester.checkNull(\"+cast(null as integer)\");\n    tester.checkNull(\"+cast(null as tinyint)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2931,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2018-05-30 12:16:57","commitOrder":2,"curCode":"  @Test public void testPrefixMinusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_MINUS);\n    strictTester.checkFails(\n        \"'a' + ^- 'b'^ + 'c'\",\n        \"(?s)Cannot apply '-' to arguments of type '-<CHAR\\\\(1\\\\)>'.*\",\n        false);\n    tester.checkType(\"'a' + - 'b' + 'c'\", \"DECIMAL(19, 19) NOT NULL\");\n    tester.checkScalarExact(\"-1\", \"-1\");\n    tester.checkScalarExact(\n        \"-1.23\",\n        \"DECIMAL(3, 2) NOT NULL\",\n        \"-1.23\");\n    tester.checkScalarApprox(\"-1.0e0\", \"DOUBLE NOT NULL\", -1, 0);\n    tester.checkNull(\"-cast(null as integer)\");\n    tester.checkNull(\"-cast(null as tinyint)\");\n  }\n","date":"2019-08-29 17:01:46","endLine":3704,"groupId":"10053","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrefixMinusOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/fce4b116dff8e30a5e69172941e134c36f92d1.src","preCode":"  @Test public void testPrefixMinusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_MINUS);\n    tester.checkFails(\n        \"'a' + ^- 'b'^ + 'c'\",\n        \"(?s)Cannot apply '-' to arguments of type '-<CHAR\\\\(1\\\\)>'.*\",\n        false);\n    tester.checkScalarExact(\"-1\", \"-1\");\n    tester.checkScalarExact(\n        \"-1.23\",\n        \"DECIMAL(3, 2) NOT NULL\",\n        \"-1.23\");\n    tester.checkScalarApprox(\"-1.0e0\", \"DOUBLE NOT NULL\", -1, 0);\n    tester.checkNull(\"-cast(null as integer)\");\n    tester.checkNull(\"-cast(null as tinyint)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3689,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testPrefixPlusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_PLUS, VM_EXPAND);\n    tester.checkScalarExact(\"+1\", \"1\");\n    tester.checkScalarExact(\"+1.23\", \"DECIMAL(3, 2) NOT NULL\", \"1.23\");\n    tester.checkScalarApprox(\"+1.0e0\", \"DOUBLE NOT NULL\", 1, 0);\n    tester.checkNull(\"+cast(null as integer)\");\n    tester.checkNull(\"+cast(null as tinyint)\");\n  }\n","date":"2014-11-14 09:39:34","endLine":2938,"groupId":"6257","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrefixPlusOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testPrefixPlusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_PLUS, VM_EXPAND);\n    tester.checkScalarExact(\"+1\", \"1\");\n    tester.checkScalarExact(\"+1.23\", \"DECIMAL(3, 2) NOT NULL\", \"1.23\");\n    tester.checkScalarApprox(\"+1.0e0\", \"DOUBLE NOT NULL\", 1, 0);\n    tester.checkNull(\"+cast(null as integer)\");\n    tester.checkNull(\"+cast(null as tinyint)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2931,"status":"N"}],"commitId":"01477c42ded991aaa7b14cf72a6e4ea1a20edf5e","commitMessage":"@@@[CALCITE-2302] Implicit type cast support\n\nChanges:\n* Support full implicit type coercion for SQL contexts:\nSet operation.  binary arithmetic exprs.  binary equality\nexprs.  binary comparison exprs.  case when(COALESCE). \nIN operation.  builtin functions.  user defined function(UDF);\n* The SqlValidator now takes a component named `TypeCoercion`\nresponsible for the coercion work.  you can turn off the coercion with\n`SqlValidator#setEnableTypeCoercion(false)`;\n* We follow PostgreSQL and SQL-SERVER conversion style for two integers division. \ni.e. `'9'/2` returns INTEGER 4.\n","date":"2019-08-29 17:01:46","modifiedFileCount":"50","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testPrefixMinusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_MINUS);\n    strictTester.checkFails(\n        \"'a' + ^- 'b'^ + 'c'\",\n        \"(?s)Cannot apply '-' to arguments of type '-<CHAR\\\\(1\\\\)>'.*\",\n        false);\n    tester.checkType(\"'a' + - 'b' + 'c'\", \"DECIMAL(19, 19) NOT NULL\");\n    tester.checkScalarExact(\"-1\", \"-1\");\n    tester.checkScalarExact(\n        \"-1.23\",\n        \"DECIMAL(3, 2) NOT NULL\",\n        \"-1.23\");\n    tester.checkScalarApprox(\"-1.0e0\", \"DOUBLE NOT NULL\", -1, 0);\n    tester.checkNull(\"-cast(null as integer)\");\n    tester.checkNull(\"-cast(null as tinyint)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":3760,"groupId":"10053","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrefixMinusOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testPrefixMinusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_MINUS);\n    strictTester.checkFails(\n        \"'a' + ^- 'b'^ + 'c'\",\n        \"(?s)Cannot apply '-' to arguments of type '-<CHAR\\\\(1\\\\)>'.*\",\n        false);\n    tester.checkType(\"'a' + - 'b' + 'c'\", \"DECIMAL(19, 19) NOT NULL\");\n    tester.checkScalarExact(\"-1\", \"-1\");\n    tester.checkScalarExact(\n        \"-1.23\",\n        \"DECIMAL(3, 2) NOT NULL\",\n        \"-1.23\");\n    tester.checkScalarApprox(\"-1.0e0\", \"DOUBLE NOT NULL\", -1, 0);\n    tester.checkNull(\"-cast(null as integer)\");\n    tester.checkNull(\"-cast(null as tinyint)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3745,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testPrefixPlusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_PLUS, VM_EXPAND);\n    tester.checkScalarExact(\"+1\", \"1\");\n    tester.checkScalarExact(\"+1.23\", \"DECIMAL(3, 2) NOT NULL\", \"1.23\");\n    tester.checkScalarApprox(\"+1.0e0\", \"DOUBLE NOT NULL\", 1, 0);\n    tester.checkNull(\"+cast(null as integer)\");\n    tester.checkNull(\"+cast(null as tinyint)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":3786,"groupId":"6257","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrefixPlusOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testPrefixPlusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_PLUS, VM_EXPAND);\n    tester.checkScalarExact(\"+1\", \"1\");\n    tester.checkScalarExact(\"+1.23\", \"DECIMAL(3, 2) NOT NULL\", \"1.23\");\n    tester.checkScalarApprox(\"+1.0e0\", \"DOUBLE NOT NULL\", 1, 0);\n    tester.checkNull(\"+cast(null as integer)\");\n    tester.checkNull(\"+cast(null as tinyint)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3779,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-09-21 11:07:54","commitOrder":4,"curCode":"  @Test void testPrefixMinusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_MINUS);\n    strictTester.checkFails(\n        \"'a' + ^- 'b'^ + 'c'\",\n        \"(?s)Cannot apply '-' to arguments of type '-<CHAR\\\\(1\\\\)>'.*\",\n        false);\n    tester.checkType(\"'a' + - 'b' + 'c'\", \"DECIMAL(19, 9) NOT NULL\");\n    tester.checkScalarExact(\"-1\", \"-1\");\n    tester.checkScalarExact(\n        \"-1.23\",\n        \"DECIMAL(3, 2) NOT NULL\",\n        \"-1.23\");\n    tester.checkScalarApprox(\"-1.0e0\", \"DOUBLE NOT NULL\", -1, 0);\n    tester.checkNull(\"-cast(null as integer)\");\n    tester.checkNull(\"-cast(null as tinyint)\");\n  }\n","date":"2020-10-14 18:19:27","endLine":3771,"groupId":"10763","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrefixMinusOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cc/f4e0c6311ddc2475032bdc0c7480703d4232ef.src","preCode":"  @Test void testPrefixMinusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_MINUS);\n    strictTester.checkFails(\n        \"'a' + ^- 'b'^ + 'c'\",\n        \"(?s)Cannot apply '-' to arguments of type '-<CHAR\\\\(1\\\\)>'.*\",\n        false);\n    tester.checkType(\"'a' + - 'b' + 'c'\", \"DECIMAL(19, 19) NOT NULL\");\n    tester.checkScalarExact(\"-1\", \"-1\");\n    tester.checkScalarExact(\n        \"-1.23\",\n        \"DECIMAL(3, 2) NOT NULL\",\n        \"-1.23\");\n    tester.checkScalarApprox(\"-1.0e0\", \"DOUBLE NOT NULL\", -1, 0);\n    tester.checkNull(\"-cast(null as integer)\");\n    tester.checkNull(\"-cast(null as tinyint)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3756,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testPrefixPlusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_PLUS, VM_EXPAND);\n    tester.checkScalarExact(\"+1\", \"1\");\n    tester.checkScalarExact(\"+1.23\", \"DECIMAL(3, 2) NOT NULL\", \"1.23\");\n    tester.checkScalarApprox(\"+1.0e0\", \"DOUBLE NOT NULL\", 1, 0);\n    tester.checkNull(\"+cast(null as integer)\");\n    tester.checkNull(\"+cast(null as tinyint)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":3786,"groupId":"10763","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrefixPlusOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test void testPrefixPlusOperator() {\n    tester.setFor(SqlStdOperatorTable.UNARY_PLUS, VM_EXPAND);\n    tester.checkScalarExact(\"+1\", \"1\");\n    tester.checkScalarExact(\"+1.23\", \"DECIMAL(3, 2) NOT NULL\", \"1.23\");\n    tester.checkScalarApprox(\"+1.0e0\", \"DOUBLE NOT NULL\", 1, 0);\n    tester.checkNull(\"+cast(null as integer)\");\n    tester.checkNull(\"+cast(null as tinyint)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3779,"status":"N"}],"commitId":"16b22b105dfcb3d95cc7af8eb54105f231d18cc9","commitMessage":"@@@[CALCITE-4240] SqlTypeUtil#getMaxPrecisionScaleDecimal returns a decimal that with same precision and scale (Jiatao Tao)\n\nThe SqlTypeUtil#getMaxPrecisionScaleDecimal now returns decimal type with max\nprecision and scale half of that.\n\nPreviously it returns DECIMAL(19.  19) which is invalid.\n\nclose apache/calcite#2161\n","date":"2020-10-14 18:19:27","modifiedFileCount":"7","status":"M","submitter":"Jiatao Tao"}]
