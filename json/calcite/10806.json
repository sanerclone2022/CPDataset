[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testCeilFunc() {\n    tester.setFor(SqlStdOperatorTable.CEIL, VM_FENNEL);\n    if (!enable) {\n      return;\n    }\n    tester.checkScalarApprox(\"ceil(10.1e0)\", \"DOUBLE NOT NULL\", 11, 0);\n    tester.checkScalarApprox(\n        \"ceil(cast(-11.2e0 as real))\",\n        \"REAL NOT NULL\",\n        -11,\n        0);\n    tester.checkScalarExact(\"ceil(100)\", \"INTEGER NOT NULL\", \"100\");\n    tester.checkScalarExact(\n        \"ceil(1.3)\", \"DECIMAL(2, 0) NOT NULL\", \"2\");\n    tester.checkScalarExact(\n        \"ceil(-1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"-1\");\n    tester.checkNull(\"ceiling(cast(null as decimal(2,0)))\");\n    tester.checkNull(\"ceiling(cast(null as double))\");\n  }\n","date":"2014-11-14 09:39:34","endLine":4243,"groupId":"16008","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCeilFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCeilFunc() {\n    tester.setFor(SqlStdOperatorTable.CEIL, VM_FENNEL);\n    if (!enable) {\n      return;\n    }\n    tester.checkScalarApprox(\"ceil(10.1e0)\", \"DOUBLE NOT NULL\", 11, 0);\n    tester.checkScalarApprox(\n        \"ceil(cast(-11.2e0 as real))\",\n        \"REAL NOT NULL\",\n        -11,\n        0);\n    tester.checkScalarExact(\"ceil(100)\", \"INTEGER NOT NULL\", \"100\");\n    tester.checkScalarExact(\n        \"ceil(1.3)\", \"DECIMAL(2, 0) NOT NULL\", \"2\");\n    tester.checkScalarExact(\n        \"ceil(-1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"-1\");\n    tester.checkNull(\"ceiling(cast(null as decimal(2,0)))\");\n    tester.checkNull(\"ceiling(cast(null as double))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4225,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testFloorFunc() {\n    tester.setFor(SqlStdOperatorTable.FLOOR, VM_FENNEL);\n    if (!enable) {\n      return;\n    }\n    tester.checkScalarApprox(\"floor(2.5e0)\", \"DOUBLE NOT NULL\", 2, 0);\n    tester.checkScalarApprox(\n        \"floor(cast(-1.2e0 as real))\",\n        \"REAL NOT NULL\",\n        -2,\n        0);\n    tester.checkScalarExact(\"floor(100)\", \"INTEGER NOT NULL\", \"100\");\n    tester.checkScalarExact(\n        \"floor(1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"1\");\n    tester.checkScalarExact(\n        \"floor(-1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"-2\");\n    tester.checkNull(\"floor(cast(null as decimal(2,0)))\");\n    tester.checkNull(\"floor(cast(null as real))\");\n  }\n","date":"2014-11-14 09:39:34","endLine":4287,"groupId":"16008","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloorFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testFloorFunc() {\n    tester.setFor(SqlStdOperatorTable.FLOOR, VM_FENNEL);\n    if (!enable) {\n      return;\n    }\n    tester.checkScalarApprox(\"floor(2.5e0)\", \"DOUBLE NOT NULL\", 2, 0);\n    tester.checkScalarApprox(\n        \"floor(cast(-1.2e0 as real))\",\n        \"REAL NOT NULL\",\n        -2,\n        0);\n    tester.checkScalarExact(\"floor(100)\", \"INTEGER NOT NULL\", \"100\");\n    tester.checkScalarExact(\n        \"floor(1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"1\");\n    tester.checkScalarExact(\n        \"floor(-1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"-2\");\n    tester.checkNull(\"floor(cast(null as decimal(2,0)))\");\n    tester.checkNull(\"floor(cast(null as real))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4269,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2015-02-22 10:10:32","codes":[{"authorDate":"2015-02-22 10:10:32","commitOrder":2,"curCode":"  @Test public void testCeilFunc() {\n    tester.setFor(SqlStdOperatorTable.CEIL, VM_FENNEL);\n    tester.checkScalarApprox(\"ceil(10.1e0)\", \"DOUBLE NOT NULL\", 11, 0);\n    tester.checkScalarApprox(\"ceil(cast(-11.2e0 as real))\", \"REAL NOT NULL\",\n        -11, 0);\n    tester.checkScalarExact(\"ceil(100)\", \"INTEGER NOT NULL\", \"100\");\n    tester.checkScalarExact(\n        \"ceil(1.3)\", \"DECIMAL(2, 0) NOT NULL\", \"2\");\n    tester.checkScalarExact(\n        \"ceil(-1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"-1\");\n    tester.checkNull(\"ceiling(cast(null as decimal(2,0)))\");\n    tester.checkNull(\"ceiling(cast(null as double))\");\n  }\n","date":"2015-03-08 07:33:21","endLine":4337,"groupId":"16008","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCeilFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8b/0c0c1853b655d88f580f0e45827d9f382fb3c7.src","preCode":"  @Test public void testCeilFunc() {\n    tester.setFor(SqlStdOperatorTable.CEIL, VM_FENNEL);\n    if (!enable) {\n      return;\n    }\n    tester.checkScalarApprox(\"ceil(10.1e0)\", \"DOUBLE NOT NULL\", 11, 0);\n    tester.checkScalarApprox(\n        \"ceil(cast(-11.2e0 as real))\",\n        \"REAL NOT NULL\",\n        -11,\n        0);\n    tester.checkScalarExact(\"ceil(100)\", \"INTEGER NOT NULL\", \"100\");\n    tester.checkScalarExact(\n        \"ceil(1.3)\", \"DECIMAL(2, 0) NOT NULL\", \"2\");\n    tester.checkScalarExact(\n        \"ceil(-1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"-1\");\n    tester.checkNull(\"ceiling(cast(null as decimal(2,0)))\");\n    tester.checkNull(\"ceiling(cast(null as double))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4325,"status":"M"},{"authorDate":"2015-02-22 10:10:32","commitOrder":2,"curCode":"  @Test public void testFloorFunc() {\n    tester.setFor(SqlStdOperatorTable.FLOOR, VM_FENNEL);\n    tester.checkScalarApprox(\"floor(2.5e0)\", \"DOUBLE NOT NULL\", 2, 0);\n    tester.checkScalarApprox(\"floor(cast(-1.2e0 as real))\", \"REAL NOT NULL\", -2,\n        0);\n    tester.checkScalarExact(\"floor(100)\", \"INTEGER NOT NULL\", \"100\");\n    tester.checkScalarExact(\n        \"floor(1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"1\");\n    tester.checkScalarExact(\n        \"floor(-1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"-2\");\n    tester.checkNull(\"floor(cast(null as decimal(2,0)))\");\n    tester.checkNull(\"floor(cast(null as real))\");\n  }\n","date":"2015-03-08 07:33:21","endLine":4375,"groupId":"16008","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloorFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8b/0c0c1853b655d88f580f0e45827d9f382fb3c7.src","preCode":"  @Test public void testFloorFunc() {\n    tester.setFor(SqlStdOperatorTable.FLOOR, VM_FENNEL);\n    if (!enable) {\n      return;\n    }\n    tester.checkScalarApprox(\"floor(2.5e0)\", \"DOUBLE NOT NULL\", 2, 0);\n    tester.checkScalarApprox(\n        \"floor(cast(-1.2e0 as real))\",\n        \"REAL NOT NULL\",\n        -2,\n        0);\n    tester.checkScalarExact(\"floor(100)\", \"INTEGER NOT NULL\", \"100\");\n    tester.checkScalarExact(\n        \"floor(1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"1\");\n    tester.checkScalarExact(\n        \"floor(-1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"-2\");\n    tester.checkNull(\"floor(cast(null as decimal(2,0)))\");\n    tester.checkNull(\"floor(cast(null as real))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4363,"status":"M"}],"commitId":"0ecd8702ab95fd59b7ef2182720d12b2167ae968","commitMessage":"@@@[CALCITE-602] Streaming queries\n\nValidate and implement streaming queries: streaming scan.  project.  filter.  aggregate.  sort.\n\nImplement CEIL and FLOOR functions for date-time and numeric values.\n\nAdd CompositeSingleOperandTypeChecker.  and make CompositeOperandTypeChecker work for multiple operands.\n","date":"2015-03-08 07:33:21","modifiedFileCount":"46","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testCeilFunc() {\n    tester.setFor(SqlStdOperatorTable.CEIL, VM_FENNEL);\n    tester.checkScalarApprox(\"ceil(10.1e0)\", \"DOUBLE NOT NULL\", 11, 0);\n    tester.checkScalarApprox(\"ceil(cast(-11.2e0 as real))\", \"REAL NOT NULL\",\n        -11, 0);\n    tester.checkScalarExact(\"ceil(100)\", \"INTEGER NOT NULL\", \"100\");\n    tester.checkScalarExact(\n        \"ceil(1.3)\", \"DECIMAL(2, 0) NOT NULL\", \"2\");\n    tester.checkScalarExact(\n        \"ceil(-1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"-1\");\n    tester.checkNull(\"ceiling(cast(null as decimal(2,0)))\");\n    tester.checkNull(\"ceiling(cast(null as double))\");\n  }\n","date":"2020-04-06 04:57:49","endLine":7953,"groupId":"10806","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCeilFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testCeilFunc() {\n    tester.setFor(SqlStdOperatorTable.CEIL, VM_FENNEL);\n    tester.checkScalarApprox(\"ceil(10.1e0)\", \"DOUBLE NOT NULL\", 11, 0);\n    tester.checkScalarApprox(\"ceil(cast(-11.2e0 as real))\", \"REAL NOT NULL\",\n        -11, 0);\n    tester.checkScalarExact(\"ceil(100)\", \"INTEGER NOT NULL\", \"100\");\n    tester.checkScalarExact(\n        \"ceil(1.3)\", \"DECIMAL(2, 0) NOT NULL\", \"2\");\n    tester.checkScalarExact(\n        \"ceil(-1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"-1\");\n    tester.checkNull(\"ceiling(cast(null as decimal(2,0)))\");\n    tester.checkNull(\"ceiling(cast(null as double))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7941,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testFloorFunc() {\n    tester.setFor(SqlStdOperatorTable.FLOOR, VM_FENNEL);\n    tester.checkScalarApprox(\"floor(2.5e0)\", \"DOUBLE NOT NULL\", 2, 0);\n    tester.checkScalarApprox(\"floor(cast(-1.2e0 as real))\", \"REAL NOT NULL\", -2,\n        0);\n    tester.checkScalarExact(\"floor(100)\", \"INTEGER NOT NULL\", \"100\");\n    tester.checkScalarExact(\n        \"floor(1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"1\");\n    tester.checkScalarExact(\n        \"floor(-1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"-2\");\n    tester.checkNull(\"floor(cast(null as decimal(2,0)))\");\n    tester.checkNull(\"floor(cast(null as real))\");\n  }\n","date":"2020-04-06 04:57:49","endLine":7991,"groupId":"10806","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloorFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testFloorFunc() {\n    tester.setFor(SqlStdOperatorTable.FLOOR, VM_FENNEL);\n    tester.checkScalarApprox(\"floor(2.5e0)\", \"DOUBLE NOT NULL\", 2, 0);\n    tester.checkScalarApprox(\"floor(cast(-1.2e0 as real))\", \"REAL NOT NULL\", -2,\n        0);\n    tester.checkScalarExact(\"floor(100)\", \"INTEGER NOT NULL\", \"100\");\n    tester.checkScalarExact(\n        \"floor(1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"1\");\n    tester.checkScalarExact(\n        \"floor(-1.7)\", \"DECIMAL(2, 0) NOT NULL\", \"-2\");\n    tester.checkNull(\"floor(cast(null as decimal(2,0)))\");\n    tester.checkNull(\"floor(cast(null as real))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7979,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
