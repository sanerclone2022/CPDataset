[{"authorTime":"2016-06-04 05:05:31","codes":[{"authorDate":"2016-06-04 05:05:31","commitOrder":1,"curCode":"  public void testEnsureTypeWithAny() {\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RexBuilder builder = new RexBuilder(typeFactory);\n\n    RexNode node =  new RexLiteral(\n            Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN);\n    RexNode ensuredNode = builder.ensureType(\n            typeFactory.createSqlType(SqlTypeName.ANY), node, true);\n\n    assertEquals(node, ensuredNode);\n  }\n","date":"2016-06-07 02:14:18","endLine":48,"groupId":"16087","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEnsureTypeWithAny","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/28/671fc5e3faaf1daf7f7cb9910b5171dfcd9433.src","preCode":"  public void testEnsureTypeWithAny() {\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RexBuilder builder = new RexBuilder(typeFactory);\n\n    RexNode node =  new RexLiteral(\n            Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN);\n    RexNode ensuredNode = builder.ensureType(\n            typeFactory.createSqlType(SqlTypeName.ANY), node, true);\n\n    assertEquals(node, ensuredNode);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"},{"authorDate":"2016-06-04 05:05:31","commitOrder":1,"curCode":"  public void testEnsureTypeWithItself() {\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RexBuilder builder = new RexBuilder(typeFactory);\n\n    RexNode node =  new RexLiteral(\n            Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN);\n    RexNode ensuredNode = builder.ensureType(\n            typeFactory.createSqlType(SqlTypeName.BOOLEAN), node, true);\n\n    assertEquals(node, ensuredNode);\n  }\n","date":"2016-06-07 02:14:18","endLine":64,"groupId":"16087","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnsureTypeWithItself","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/28/671fc5e3faaf1daf7f7cb9910b5171dfcd9433.src","preCode":"  public void testEnsureTypeWithItself() {\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RexBuilder builder = new RexBuilder(typeFactory);\n\n    RexNode node =  new RexLiteral(\n            Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN);\n    RexNode ensuredNode = builder.ensureType(\n            typeFactory.createSqlType(SqlTypeName.BOOLEAN), node, true);\n\n    assertEquals(node, ensuredNode);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"}],"commitId":"a4ccb80a91b4592f902e3f34355aa391d6cb4066","commitMessage":"@@@[CALCITE-1252] Handle ANY type in RexBuilder.ensureType and TypeFactory.leastRestrictive (Mehand Baid.  Minji Kim)\n\nClose apache/calcite#243\n","date":"2016-06-07 02:14:18","modifiedFileCount":"3","status":"B","submitter":"Minji Kim"},{"authorTime":"2019-12-04 02:44:13","codes":[{"authorDate":"2019-12-04 02:44:13","commitOrder":2,"curCode":"  @Test public void testEnsureTypeWithAny() {\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RexBuilder builder = new RexBuilder(typeFactory);\n\n    RexNode node =  new RexLiteral(\n            Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN);\n    RexNode ensuredNode = builder.ensureType(\n            typeFactory.createSqlType(SqlTypeName.ANY), node, true);\n\n    assertEquals(node, ensuredNode);\n  }\n","date":"2019-12-14 23:57:27","endLine":100,"groupId":"16087","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEnsureTypeWithAny","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/54/0240a601dbba31e3658396ab51acbfc1c6b567.src","preCode":"  public void testEnsureTypeWithAny() {\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RexBuilder builder = new RexBuilder(typeFactory);\n\n    RexNode node =  new RexLiteral(\n            Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN);\n    RexNode ensuredNode = builder.ensureType(\n            typeFactory.createSqlType(SqlTypeName.ANY), node, true);\n\n    assertEquals(node, ensuredNode);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2019-12-04 02:44:13","commitOrder":2,"curCode":"  @Test public void testEnsureTypeWithItself() {\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RexBuilder builder = new RexBuilder(typeFactory);\n\n    RexNode node =  new RexLiteral(\n            Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN);\n    RexNode ensuredNode = builder.ensureType(\n            typeFactory.createSqlType(SqlTypeName.BOOLEAN), node, true);\n\n    assertEquals(node, ensuredNode);\n  }\n","date":"2019-12-14 23:57:27","endLine":115,"groupId":"16087","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnsureTypeWithItself","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/54/0240a601dbba31e3658396ab51acbfc1c6b567.src","preCode":"  public void testEnsureTypeWithItself() {\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RexBuilder builder = new RexBuilder(typeFactory);\n\n    RexNode node =  new RexLiteral(\n            Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN);\n    RexNode ensuredNode = builder.ensureType(\n            typeFactory.createSqlType(SqlTypeName.BOOLEAN), node, true);\n\n    assertEquals(node, ensuredNode);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"571731b80a58eb095ebac7123285c375e7afff90","commitMessage":"@@@[CALCITE-3559] Update formatting: remove \"// End\" trailers.  move @Test from their own lines\n","date":"2019-12-14 23:57:27","modifiedFileCount":"1961","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testEnsureTypeWithAny() {\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RexBuilder builder = new RexBuilder(typeFactory);\n\n    RexNode node =  new RexLiteral(\n            Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN);\n    RexNode ensuredNode = builder.ensureType(\n            typeFactory.createSqlType(SqlTypeName.ANY), node, true);\n\n    assertEquals(node, ensuredNode);\n  }\n","date":"2020-04-06 04:57:49","endLine":98,"groupId":"10709","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEnsureTypeWithAny","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8c/8275535d464dbb0ef1603cd21a505c1bdbd9c5.src","preCode":"  @Test public void testEnsureTypeWithAny() {\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RexBuilder builder = new RexBuilder(typeFactory);\n\n    RexNode node =  new RexLiteral(\n            Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN);\n    RexNode ensuredNode = builder.ensureType(\n            typeFactory.createSqlType(SqlTypeName.ANY), node, true);\n\n    assertEquals(node, ensuredNode);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testEnsureTypeWithItself() {\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RexBuilder builder = new RexBuilder(typeFactory);\n\n    RexNode node =  new RexLiteral(\n            Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN);\n    RexNode ensuredNode = builder.ensureType(\n            typeFactory.createSqlType(SqlTypeName.BOOLEAN), node, true);\n\n    assertEquals(node, ensuredNode);\n  }\n","date":"2020-04-06 04:57:49","endLine":113,"groupId":"10709","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnsureTypeWithItself","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8c/8275535d464dbb0ef1603cd21a505c1bdbd9c5.src","preCode":"  @Test public void testEnsureTypeWithItself() {\n    final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RexBuilder builder = new RexBuilder(typeFactory);\n\n    RexNode node =  new RexLiteral(\n            Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN);\n    RexNode ensuredNode = builder.ensureType(\n            typeFactory.createSqlType(SqlTypeName.BOOLEAN), node, true);\n\n    assertEquals(node, ensuredNode);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
