[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testSortPlan() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            RemoveSortRule.INSTANCE,\n            JavaRules.ENUMERABLE_PROJECT_RULE,\n            JavaRules.ENUMERABLE_SORT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\n        \"select * from \\\"emps\\\" \"\n            + \"order by \\\"emps\\\".\\\"deptno\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.convert(validate);\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    assertThat(toString(transform), equalTo(\n        \"EnumerableSortRel(sort0=[$1], dir0=[ASC])\\n\"\n        + \"  EnumerableProjectRel(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n        + \"    EnumerableTableAccessRel(table=[[hr, emps]])\\n\"));\n  }\n","date":"2014-11-14 09:39:34","endLine":298,"groupId":"12412","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSortPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ef/d16e3bc08b0bd5db7f408c909ea0257d2122aa.src","preCode":"  @Test public void testSortPlan() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            RemoveSortRule.INSTANCE,\n            JavaRules.ENUMERABLE_PROJECT_RULE,\n            JavaRules.ENUMERABLE_SORT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\n        \"select * from \\\"emps\\\" \"\n            + \"order by \\\"emps\\\".\\\"deptno\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.convert(validate);\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    assertThat(toString(transform), equalTo(\n        \"EnumerableSortRel(sort0=[$1], dir0=[ASC])\\n\"\n        + \"  EnumerableProjectRel(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n        + \"    EnumerableTableAccessRel(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testPlanTransformTwice() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            MergeFilterRule.INSTANCE,\n            JavaRules.ENUMERABLE_FILTER_RULE,\n            JavaRules.ENUMERABLE_PROJECT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\"select * from \\\"emps\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.convert(validate);\n    RelTraitSet traitSet = planner.getEmptyTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    RelNode transform2 = planner.transform(0, traitSet, transform);\n    assertThat(toString(transform2), equalTo(\n        \"EnumerableProjectRel(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n        + \"  EnumerableTableAccessRel(table=[[hr, emps]])\\n\"));\n  }\n","date":"2014-11-14 09:39:34","endLine":400,"groupId":"11637","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPlanTransformTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ef/d16e3bc08b0bd5db7f408c909ea0257d2122aa.src","preCode":"  @Test public void testPlanTransformTwice() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            MergeFilterRule.INSTANCE,\n            JavaRules.ENUMERABLE_FILTER_RULE,\n            JavaRules.ENUMERABLE_PROJECT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\"select * from \\\"emps\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.convert(validate);\n    RelTraitSet traitSet = planner.getEmptyTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    RelNode transform2 = planner.transform(0, traitSet, transform);\n    assertThat(toString(transform2), equalTo(\n        \"EnumerableProjectRel(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n        + \"  EnumerableTableAccessRel(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Test public void testSortPlan() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            SortRemoveRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\n        \"select * from \\\"emps\\\" \"\n            + \"order by \\\"emps\\\".\\\"deptno\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.convert(validate);\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    assertThat(toString(transform), equalTo(\n        \"EnumerableSort(sort0=[$1], dir0=[ASC])\\n\"\n            + \"  EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"    EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2014-11-14 10:22:06","endLine":326,"groupId":"12412","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSortPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/202f8082780b2f01c7022a346113e884c0c732.src","preCode":"  @Test public void testSortPlan() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            RemoveSortRule.INSTANCE,\n            JavaRules.ENUMERABLE_PROJECT_RULE,\n            JavaRules.ENUMERABLE_SORT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\n        \"select * from \\\"emps\\\" \"\n            + \"order by \\\"emps\\\".\\\"deptno\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.convert(validate);\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    assertThat(toString(transform), equalTo(\n        \"EnumerableSortRel(sort0=[$1], dir0=[ASC])\\n\"\n        + \"  EnumerableProjectRel(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n        + \"    EnumerableTableAccessRel(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"},{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Test public void testPlanTransformTwice() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            FilterMergeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_FILTER_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\"select * from \\\"emps\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.convert(validate);\n    RelTraitSet traitSet = planner.getEmptyTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    RelNode transform2 = planner.transform(0, traitSet, transform);\n    assertThat(toString(transform2), equalTo(\n        \"EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"  EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2014-11-14 10:22:06","endLine":428,"groupId":"11637","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPlanTransformTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/202f8082780b2f01c7022a346113e884c0c732.src","preCode":"  @Test public void testPlanTransformTwice() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            MergeFilterRule.INSTANCE,\n            JavaRules.ENUMERABLE_FILTER_RULE,\n            JavaRules.ENUMERABLE_PROJECT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\"select * from \\\"emps\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.convert(validate);\n    RelTraitSet traitSet = planner.getEmptyTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    RelNode transform2 = planner.transform(0, traitSet, transform);\n    assertThat(toString(transform2), equalTo(\n        \"EnumerableProjectRel(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n        + \"  EnumerableTableAccessRel(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"}],"commitId":"a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55","commitMessage":"@@@[CALCITE-306] Standardize code style for \"import package.*;\"\n\nRename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].\n\nMake many inner classes of EnumerableRules (e.g. EnumerableFilter.  EnumerableFilterRule) top-level classes.\n\nApply a consistent formatting convention for string literals split over multiple lines.\n\nRename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.\n\nChange occurrences of \"optiq\" and \"eigenbase\" in java code to \"calcite\".\n","date":"2014-11-14 10:22:06","modifiedFileCount":"1156","status":"M","submitter":"Julian Hyde"},{"authorTime":"2015-09-11 10:27:49","codes":[{"authorDate":"2015-09-11 10:27:49","commitOrder":3,"curCode":"  @Test public void testSortPlan() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            SortRemoveRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\n        \"select * from \\\"emps\\\" \"\n            + \"order by \\\"emps\\\".\\\"deptno\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    assertThat(toString(transform),\n        equalTo(\"EnumerableSort(sort0=[$1], dir0=[ASC])\\n\"\n            + \"  EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"    EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2016-01-10 16:51:24","endLine":363,"groupId":"6314","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSortPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fa/e8cb9c44f03dfb56fb3288ee677e1dcf600f2a.src","preCode":"  @Test public void testSortPlan() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            SortRemoveRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\n        \"select * from \\\"emps\\\" \"\n            + \"order by \\\"emps\\\".\\\"deptno\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.convert(validate);\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    assertThat(toString(transform),\n        equalTo(\"EnumerableSort(sort0=[$1], dir0=[ASC])\\n\"\n            + \"  EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"    EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"M"},{"authorDate":"2015-09-11 10:27:49","commitOrder":3,"curCode":"  @Test public void testPlanTransformTwice() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            FilterMergeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_FILTER_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\"select * from \\\"emps\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = planner.getEmptyTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    RelNode transform2 = planner.transform(0, traitSet, transform);\n    assertThat(toString(transform2),\n        equalTo(\n            \"EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"  EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2016-01-10 16:51:24","endLine":520,"groupId":"11637","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPlanTransformTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fa/e8cb9c44f03dfb56fb3288ee677e1dcf600f2a.src","preCode":"  @Test public void testPlanTransformTwice() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            FilterMergeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_FILTER_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\"select * from \\\"emps\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.convert(validate);\n    RelTraitSet traitSet = planner.getEmptyTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    RelNode transform2 = planner.transform(0, traitSet, transform);\n    assertThat(toString(transform2),\n        equalTo(\n            \"EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"  EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":502,"status":"M"}],"commitId":"4ae0298688d402484be7c76610e46c6f610a8bc6","commitMessage":"@@@Deprecate some Util methods.  and upgrade last modules to JDK 1.7\n","date":"2016-01-10 16:51:24","modifiedFileCount":"6","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-01-04 02:58:55","codes":[{"authorDate":"2015-09-11 10:27:49","commitOrder":4,"curCode":"  @Test public void testSortPlan() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            SortRemoveRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\n        \"select * from \\\"emps\\\" \"\n            + \"order by \\\"emps\\\".\\\"deptno\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    assertThat(toString(transform),\n        equalTo(\"EnumerableSort(sort0=[$1], dir0=[ASC])\\n\"\n            + \"  EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"    EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2016-01-10 16:51:24","endLine":363,"groupId":"6314","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSortPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fa/e8cb9c44f03dfb56fb3288ee677e1dcf600f2a.src","preCode":"  @Test public void testSortPlan() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            SortRemoveRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\n        \"select * from \\\"emps\\\" \"\n            + \"order by \\\"emps\\\".\\\"deptno\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    assertThat(toString(transform),\n        equalTo(\"EnumerableSort(sort0=[$1], dir0=[ASC])\\n\"\n            + \"  EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"    EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"N"},{"authorDate":"2019-01-04 02:58:55","commitOrder":4,"curCode":"  @Test public void testPlanTransformTwice() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            FilterMergeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_FILTER_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\"select * from \\\"emps\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    RelNode transform2 = planner.transform(0, traitSet, transform);\n    assertThat(toString(transform2),\n        equalTo(\n            \"EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"  EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2019-01-04 03:21:44","endLine":577,"groupId":"11637","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPlanTransformTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7b/d85b6c07b2bdaa72d19a89d46868aeb6f8a602.src","preCode":"  @Test public void testPlanTransformTwice() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            FilterMergeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_FILTER_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\"select * from \\\"emps\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = planner.getEmptyTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    RelNode transform2 = planner.transform(0, traitSet, transform);\n    assertThat(toString(transform2),\n        equalTo(\n            \"EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"  EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"M"}],"commitId":"b54f6de9d7f87e9853fc9ec01b586555a089b913","commitMessage":"@@@[CALCITE-2768] PlannerTest ignores top-level order by clause (~RootRel.collation)\n","date":"2019-01-04 03:21:44","modifiedFileCount":"2","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-02-07 17:06:16","codes":[{"authorDate":"2020-02-07 17:06:16","commitOrder":5,"curCode":"  @Test public void testSortPlan() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            SortRemoveRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\n        \"select * from \\\"emps\\\" \"\n            + \"order by \\\"emps\\\".\\\"deptno\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    assertThat(toString(transform),\n        equalTo(\"EnumerableSort(sort0=[$1], dir0=[ASC])\\n\"\n            + \"  EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"    EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2020-02-14 10:24:24","endLine":572,"groupId":"6314","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSortPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5d/edb3162d1dca61baa746a07f0a95890cfe9982.src","preCode":"  @Test public void testSortPlan() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            SortRemoveRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\n        \"select * from \\\"emps\\\" \"\n            + \"order by \\\"emps\\\".\\\"deptno\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    assertThat(toString(transform),\n        equalTo(\"EnumerableSort(sort0=[$1], dir0=[ASC])\\n\"\n            + \"  EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"    EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"M"},{"authorDate":"2020-02-07 17:06:16","commitOrder":5,"curCode":"  @Test public void testPlanTransformTwice() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            FilterMergeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE,\n            EnumerableRules.ENUMERABLE_FILTER_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\"select * from \\\"emps\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    RelNode transform2 = planner.transform(0, traitSet, transform);\n    assertThat(toString(transform2),\n        equalTo(\n            \"EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"  EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2020-02-14 10:24:24","endLine":803,"groupId":"11637","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testPlanTransformTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5d/edb3162d1dca61baa746a07f0a95890cfe9982.src","preCode":"  @Test public void testPlanTransformTwice() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            FilterMergeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_FILTER_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\"select * from \\\"emps\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    RelNode transform2 = planner.transform(0, traitSet, transform);\n    assertThat(toString(transform2),\n        equalTo(\n            \"EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"  EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":784,"status":"M"}],"commitId":"6a322f9fff51362744b326246e49590f850449bb","commitMessage":"@@@[CALCITE-3769] Deprecate TableScanRule\n\n* Deprecate TableScanRule and always invoke RelOptTable#toRel for\nRelBuilder#scan\n* RelOptTableImpl#toRel does not translate to EnumerableTableScan\nanymore.  the EnumerableTableScan conversion logic has been moved to\nEnumerableTableScanRule\n* Remove the BindableTableScanRule from the default prepare ruleset.  we\nonly add it where we really need that\n* Fix the plan change\n","date":"2020-02-14 10:24:24","modifiedFileCount":"21","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testSortPlan() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            SortRemoveRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\n        \"select * from \\\"emps\\\" \"\n            + \"order by \\\"emps\\\".\\\"deptno\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    assertThat(toString(transform),\n        equalTo(\"EnumerableSort(sort0=[$1], dir0=[ASC])\\n\"\n            + \"  EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"    EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":572,"groupId":"6314","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSortPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/ce8a05eee1dbae94fa526e1af77f6e77e09e4d.src","preCode":"  @Test public void testSortPlan() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            SortRemoveRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\n        \"select * from \\\"emps\\\" \"\n            + \"order by \\\"emps\\\".\\\"deptno\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    assertThat(toString(transform),\n        equalTo(\"EnumerableSort(sort0=[$1], dir0=[ASC])\\n\"\n            + \"  EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"    EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testPlanTransformTwice() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            FilterMergeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE,\n            EnumerableRules.ENUMERABLE_FILTER_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\"select * from \\\"emps\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    RelNode transform2 = planner.transform(0, traitSet, transform);\n    assertThat(toString(transform2),\n        equalTo(\n            \"EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"  EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":803,"groupId":"11637","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testPlanTransformTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/ce8a05eee1dbae94fa526e1af77f6e77e09e4d.src","preCode":"  @Test public void testPlanTransformTwice() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            FilterMergeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE,\n            EnumerableRules.ENUMERABLE_FILTER_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\"select * from \\\"emps\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    RelNode transform2 = planner.transform(0, traitSet, transform);\n    assertThat(toString(transform2),\n        equalTo(\n            \"EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"  EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":784,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 04:45:12","codes":[{"authorDate":"2020-07-09 04:45:12","commitOrder":7,"curCode":"  @Test void testSortPlan() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            CoreRules.SORT_REMOVE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\n        \"select * from \\\"emps\\\" \"\n            + \"order by \\\"emps\\\".\\\"deptno\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    assertThat(toString(transform),\n        equalTo(\"EnumerableSort(sort0=[$1], dir0=[ASC])\\n\"\n            + \"  EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"    EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2020-07-12 06:58:28","endLine":566,"groupId":"10656","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testSortPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5e/bef0bb4c9f352cd2282c282a04ef3461124a77.src","preCode":"  @Test void testSortPlan() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            SortRemoveRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\n        \"select * from \\\"emps\\\" \"\n            + \"order by \\\"emps\\\".\\\"deptno\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    assertThat(toString(transform),\n        equalTo(\"EnumerableSort(sort0=[$1], dir0=[ASC])\\n\"\n            + \"  EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"    EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":546,"status":"M"},{"authorDate":"2020-07-09 04:45:12","commitOrder":7,"curCode":"  @Test void testPlanTransformTwice() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            CoreRules.FILTER_MERGE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE,\n            EnumerableRules.ENUMERABLE_FILTER_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\"select * from \\\"emps\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    RelNode transform2 = planner.transform(0, traitSet, transform);\n    assertThat(toString(transform2),\n        equalTo(\n            \"EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"  EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2020-07-12 06:58:28","endLine":797,"groupId":"10656","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testPlanTransformTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5e/bef0bb4c9f352cd2282c282a04ef3461124a77.src","preCode":"  @Test void testPlanTransformTwice() throws Exception {\n    RuleSet ruleSet =\n        RuleSets.ofList(\n            FilterMergeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE,\n            EnumerableRules.ENUMERABLE_FILTER_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE);\n    Planner planner = getPlanner(null, Programs.of(ruleSet));\n    SqlNode parse = planner.parse(\"select * from \\\"emps\\\"\");\n    SqlNode validate = planner.validate(parse);\n    RelNode convert = planner.rel(validate).project();\n    RelTraitSet traitSet = convert.getTraitSet()\n        .replace(EnumerableConvention.INSTANCE);\n    RelNode transform = planner.transform(0, traitSet, convert);\n    RelNode transform2 = planner.transform(0, traitSet, transform);\n    assertThat(toString(transform2),\n        equalTo(\n            \"EnumerableProject(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\\n\"\n            + \"  EnumerableTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":778,"status":"M"}],"commitId":"23b26b6287315cc2cd236e705bb651077488fc5c","commitMessage":"@@@In preparation for [CALCITE-3923] and [CALCITE-4079].  deprecate fields and methods that will be removed between 1.24 and 1.25\n\nAlso.  in RelNode.  change some methods from 'to removed before 2.0'\nto 'to be removed before 1.25'. The methods are sDistinct(). \nisKey(ImmutableBitSet).  getQuery().  getRows().  getVariablesStopped(). \ncomputeSelfCost().  isValid(boolean).  getCollationList().  getChildExps().\n","date":"2020-07-12 06:58:28","modifiedFileCount":"137","status":"M","submitter":"Julian Hyde"}]
