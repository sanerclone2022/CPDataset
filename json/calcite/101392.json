[{"authorTime":"2016-10-18 10:10:16","codes":[{"authorDate":"2016-10-18 10:10:16","commitOrder":1,"curCode":"  @Test public void testEqWithAny() {\n    \r\n    assertThat(SqlFunctions.eqAny(\"hello\", \"hello\"), is(true));\n\n    \r\n    assertThat(SqlFunctions.eqAny(1, 1L), is(true));\n    assertThat(SqlFunctions.eqAny(1, 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(1L, 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1L), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), new BigDecimal(1.0D)),\n        is(true));\n\n    \r\n    assertThat(SqlFunctions.eqAny(\"2\", 2), is(false));\n  }\n","date":"2016-10-27 07:56:22","endLine":633,"groupId":"16001","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEqWithAny","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fa/12f0c637211f0040ec2629459060973c726710.src","preCode":"  @Test public void testEqWithAny() {\n    \r\n    assertThat(SqlFunctions.eqAny(\"hello\", \"hello\"), is(true));\n\n    \r\n    assertThat(SqlFunctions.eqAny(1, 1L), is(true));\n    assertThat(SqlFunctions.eqAny(1, 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(1L, 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1L), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), new BigDecimal(1.0D)),\n        is(true));\n\n    \r\n    assertThat(SqlFunctions.eqAny(\"2\", 2), is(false));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":617,"status":"B"},{"authorDate":"2016-10-18 10:10:16","commitOrder":1,"curCode":"  @Test public void testLtWithAny() {\n    \r\n    assertThat(SqlFunctions.ltAny(\"apple\", \"banana\"), is(true));\n\n    \r\n    assertThat(SqlFunctions.ltAny(1, 2L), is(true));\n    assertThat(SqlFunctions.ltAny(1, 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(1L, 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2L), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), new BigDecimal(2.0D)),\n        is(true));\n\n    \r\n    \r\n    try {\n      assertThat(SqlFunctions.ltAny(\"1\", 2L), is(false));\n      fail(\"'lt' on non-numeric different type is not possible\");\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(),\n          is(\"Invalid types for comparison: class java.lang.String < \"\n              + \"class java.lang.Long\"));\n    }\n  }\n","date":"2016-10-27 07:56:22","endLine":677,"groupId":"16001","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLtWithAny","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fa/12f0c637211f0040ec2629459060973c726710.src","preCode":"  @Test public void testLtWithAny() {\n    \r\n    assertThat(SqlFunctions.ltAny(\"apple\", \"banana\"), is(true));\n\n    \r\n    assertThat(SqlFunctions.ltAny(1, 2L), is(true));\n    assertThat(SqlFunctions.ltAny(1, 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(1L, 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2L), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), new BigDecimal(2.0D)),\n        is(true));\n\n    \r\n    \r\n    try {\n      assertThat(SqlFunctions.ltAny(\"1\", 2L), is(false));\n      fail(\"'lt' on non-numeric different type is not possible\");\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(),\n          is(\"Invalid types for comparison: class java.lang.String < \"\n              + \"class java.lang.Long\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"B"}],"commitId":"80240720ec7de7b68dec8741d2322d9cd7f989ed","commitMessage":"@@@[CALCITE-1453] Support ANY type with binary comparison and arithmetic operators (Jungtaek Lim)\n\nANY type is represented as Object. There's not enough overloaded\nbackup methods for comparison and arithmetic operators so if one or\nboth parameters have ANY type.  Calcite cannot find the matched method.\n\nThis patch adds overloaded methods for comparison and arithmetic\noperators whose parameters are (Object.  Object). And if either\nparameter is ANY.  it boxes primitive type parameter so that it can be\nmatched to Object.  Object.\n\nNewly added overloaded methods are smart that they can handle\ndifferent Number types for parameters. However.  the implementation has\nsome downsides:\n1. requires converting to BigDecimal\n2. the result of arithmetic is also BigDecimal\n\nClose apache/calcite#311\n","date":"2016-10-27 07:56:22","modifiedFileCount":"5","status":"B","submitter":"Jungtaek Lim"},{"authorTime":"2018-11-10 00:39:20","codes":[{"authorDate":"2016-10-18 10:10:16","commitOrder":2,"curCode":"  @Test public void testEqWithAny() {\n    \r\n    assertThat(SqlFunctions.eqAny(\"hello\", \"hello\"), is(true));\n\n    \r\n    assertThat(SqlFunctions.eqAny(1, 1L), is(true));\n    assertThat(SqlFunctions.eqAny(1, 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(1L, 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1L), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), new BigDecimal(1.0D)),\n        is(true));\n\n    \r\n    assertThat(SqlFunctions.eqAny(\"2\", 2), is(false));\n  }\n","date":"2016-10-27 07:56:22","endLine":633,"groupId":"16001","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEqWithAny","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fa/12f0c637211f0040ec2629459060973c726710.src","preCode":"  @Test public void testEqWithAny() {\n    \r\n    assertThat(SqlFunctions.eqAny(\"hello\", \"hello\"), is(true));\n\n    \r\n    assertThat(SqlFunctions.eqAny(1, 1L), is(true));\n    assertThat(SqlFunctions.eqAny(1, 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(1L, 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1L), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), new BigDecimal(1.0D)),\n        is(true));\n\n    \r\n    assertThat(SqlFunctions.eqAny(\"2\", 2), is(false));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":617,"status":"N"},{"authorDate":"2018-11-10 00:39:20","commitOrder":2,"curCode":"  @Test public void testLtWithAny() {\n    \r\n    assertThat(SqlFunctions.ltAny(\"apple\", \"banana\"), is(true));\n\n    \r\n    assertThat(SqlFunctions.ltAny(1, 2L), is(true));\n    assertThat(SqlFunctions.ltAny(1, 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(1L, 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2L), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), new BigDecimal(2.0D)),\n        is(true));\n\n    \r\n    \r\n    try {\n      assertThat(SqlFunctions.ltAny(\"1\", 2L), is(false));\n      fail(\"'lt' on non-numeric different type is not possible\");\n    } catch (CalciteException e) {\n      assertThat(e.getMessage(),\n          is(\"Invalid types for comparison: class java.lang.String < \"\n              + \"class java.lang.Long\"));\n    }\n  }\n","date":"2018-11-10 00:39:58","endLine":539,"groupId":"16001","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLtWithAny","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/55/d8811d8f29bdbc927aa7dd7b688f28f24f552f.src","preCode":"  @Test public void testLtWithAny() {\n    \r\n    assertThat(SqlFunctions.ltAny(\"apple\", \"banana\"), is(true));\n\n    \r\n    assertThat(SqlFunctions.ltAny(1, 2L), is(true));\n    assertThat(SqlFunctions.ltAny(1, 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(1L, 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2L), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), new BigDecimal(2.0D)),\n        is(true));\n\n    \r\n    \r\n    try {\n      assertThat(SqlFunctions.ltAny(\"1\", 2L), is(false));\n      fail(\"'lt' on non-numeric different type is not possible\");\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(),\n          is(\"Invalid types for comparison: class java.lang.String < \"\n              + \"class java.lang.Long\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"M"}],"commitId":"8e557d26cffceaf7d7f98d8f8bafd9fbe3bc2447","commitMessage":"@@@[CALCITE-2266] Implement SQL:2016 JSON functions: JSON_EXISTS.  JSON_VALUE.  JSON_QUERY.  JSON_OBJECT.  JSON_OBJECTAGG.  JSON_ARRAY.  JSON_ARRAYAGG.  IS JSON predicate (Hongze Zhang)\n\nClose apache/calcite#785\n","date":"2018-11-10 00:39:58","modifiedFileCount":"18","status":"M","submitter":"Michael Mior"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testEqWithAny() {\n    \r\n    assertThat(SqlFunctions.eqAny(\"hello\", \"hello\"), is(true));\n\n    \r\n    assertThat(SqlFunctions.eqAny(1, 1L), is(true));\n    assertThat(SqlFunctions.eqAny(1, 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(1L, 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1L), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), new BigDecimal(1.0D)),\n        is(true));\n\n    \r\n    assertThat(SqlFunctions.eqAny(\"2\", 2), is(false));\n  }\n","date":"2020-04-06 04:57:49","endLine":628,"groupId":"101392","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEqWithAny","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/75/779b1e03c3474d16a7ae04eb78bfc01c01ecac.src","preCode":"  @Test public void testEqWithAny() {\n    \r\n    assertThat(SqlFunctions.eqAny(\"hello\", \"hello\"), is(true));\n\n    \r\n    assertThat(SqlFunctions.eqAny(1, 1L), is(true));\n    assertThat(SqlFunctions.eqAny(1, 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(1L, 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1L), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), 1.0D), is(true));\n    assertThat(SqlFunctions.eqAny(new BigDecimal(1L), new BigDecimal(1.0D)),\n        is(true));\n\n    \r\n    assertThat(SqlFunctions.eqAny(\"2\", 2), is(false));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":612,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testLtWithAny() {\n    \r\n    assertThat(SqlFunctions.ltAny(\"apple\", \"banana\"), is(true));\n\n    \r\n    assertThat(SqlFunctions.ltAny(1, 2L), is(true));\n    assertThat(SqlFunctions.ltAny(1, 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(1L, 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2L), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), new BigDecimal(2.0D)),\n        is(true));\n\n    \r\n    \r\n    try {\n      assertThat(SqlFunctions.ltAny(\"1\", 2L), is(false));\n      fail(\"'lt' on non-numeric different type is not possible\");\n    } catch (CalciteException e) {\n      assertThat(e.getMessage(),\n          is(\"Invalid types for comparison: class java.lang.String < \"\n              + \"class java.lang.Long\"));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":672,"groupId":"101392","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLtWithAny","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/75/779b1e03c3474d16a7ae04eb78bfc01c01ecac.src","preCode":"  @Test public void testLtWithAny() {\n    \r\n    assertThat(SqlFunctions.ltAny(\"apple\", \"banana\"), is(true));\n\n    \r\n    assertThat(SqlFunctions.ltAny(1, 2L), is(true));\n    assertThat(SqlFunctions.ltAny(1, 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(1L, 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2L), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), 2.0D), is(true));\n    assertThat(SqlFunctions.ltAny(new BigDecimal(1L), new BigDecimal(2.0D)),\n        is(true));\n\n    \r\n    \r\n    try {\n      assertThat(SqlFunctions.ltAny(\"1\", 2L), is(false));\n      fail(\"'lt' on non-numeric different type is not possible\");\n    } catch (CalciteException e) {\n      assertThat(e.getMessage(),\n          is(\"Invalid types for comparison: class java.lang.String < \"\n              + \"class java.lang.Long\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":648,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
