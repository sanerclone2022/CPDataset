[{"authorTime":"2018-11-14 06:00:17","codes":[{"authorDate":"2018-11-14 06:00:17","commitOrder":1,"curCode":"  @Test public void testTableReferencesJoinUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    final RexBuilder rexBuilder = node.getCluster().getRexBuilder();\n    \r\n    final LogicalJoin join =\n        LogicalJoin.create(nodeWithUnknown, node, rexBuilder.makeLiteral(true),\n            ImmutableSet.of(), JoinRelType.INNER);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(join);\n    assertNull(tableReferences);\n  }\n","date":"2018-11-14 06:45:06","endLine":2094,"groupId":"3061","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableReferencesJoinUnknownNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4e/e58814b634aefb2855b54ec5165678ea390f99.src","preCode":"  @Test public void testTableReferencesJoinUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    final RexBuilder rexBuilder = node.getCluster().getRexBuilder();\n    \r\n    final LogicalJoin join =\n        LogicalJoin.create(nodeWithUnknown, node, rexBuilder.makeLiteral(true),\n            ImmutableSet.of(), JoinRelType.INNER);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(join);\n    assertNull(tableReferences);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2081,"status":"B"},{"authorDate":"2018-11-14 06:00:17","commitOrder":1,"curCode":"  @Test public void testTableReferencesUnionUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    \r\n    final LogicalUnion union =\n        LogicalUnion.create(ImmutableList.of(nodeWithUnknown, node),\n            true);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(union);\n    assertNull(tableReferences);\n  }\n","date":"2018-11-14 06:45:06","endLine":2127,"groupId":"13281","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableReferencesUnionUnknownNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4e/e58814b634aefb2855b54ec5165678ea390f99.src","preCode":"  @Test public void testTableReferencesUnionUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    \r\n    final LogicalUnion union =\n        LogicalUnion.create(ImmutableList.of(nodeWithUnknown, node),\n            true);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(union);\n    assertNull(tableReferences);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2115,"status":"B"}],"commitId":"fcc8bf7f44f92efb3c9a1e1f51ffc1a09cab27b9","commitMessage":"@@@[CALCITE-2669] RelMdTableReferences should check whether references inferred from input are null for Union/Join operators\n","date":"2018-11-14 06:45:06","modifiedFileCount":"2","status":"B","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2019-10-16 19:22:37","codes":[{"authorDate":"2019-10-16 19:22:37","commitOrder":2,"curCode":"  @Test public void testTableReferencesJoinUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    final RexBuilder rexBuilder = node.getCluster().getRexBuilder();\n    \r\n    final LogicalJoin join =\n        LogicalJoin.create(nodeWithUnknown, node, rexBuilder.makeLiteral(true),\n            ImmutableSet.of(), JoinRelType.INNER);\n    final RelMetadataQuery mq = node.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(join);\n    assertNull(tableReferences);\n  }\n","date":"2019-10-18 06:51:31","endLine":2122,"groupId":"3061","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableReferencesJoinUnknownNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testTableReferencesJoinUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    final RexBuilder rexBuilder = node.getCluster().getRexBuilder();\n    \r\n    final LogicalJoin join =\n        LogicalJoin.create(nodeWithUnknown, node, rexBuilder.makeLiteral(true),\n            ImmutableSet.of(), JoinRelType.INNER);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(join);\n    assertNull(tableReferences);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2109,"status":"M"},{"authorDate":"2019-10-16 19:22:37","commitOrder":2,"curCode":"  @Test public void testTableReferencesUnionUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    \r\n    final LogicalUnion union =\n        LogicalUnion.create(ImmutableList.of(nodeWithUnknown, node),\n            true);\n    final RelMetadataQuery mq = node.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(union);\n    assertNull(tableReferences);\n  }\n","date":"2019-10-18 06:51:31","endLine":2155,"groupId":"13281","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableReferencesUnionUnknownNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testTableReferencesUnionUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    \r\n    final LogicalUnion union =\n        LogicalUnion.create(ImmutableList.of(nodeWithUnknown, node),\n            true);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(union);\n    assertNull(tableReferences);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2143,"status":"M"}],"commitId":"ebc16afa935888578b5befc870c1997f307a6cb5","commitMessage":"@@@[CALCITE-3421] Reuse RelMetadataQuery in test suites\n\nClose #1513\n","date":"2019-10-18 06:51:31","modifiedFileCount":"5","status":"M","submitter":"dz"},{"authorTime":"2019-10-16 19:22:37","codes":[{"authorDate":"2020-01-14 11:52:33","commitOrder":3,"curCode":"  @Test public void testTableReferencesJoinUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    final RexBuilder rexBuilder = node.getCluster().getRexBuilder();\n    \r\n    final LogicalJoin join =\n        LogicalJoin.create(nodeWithUnknown, node, ImmutableList.of(),\n            rexBuilder.makeLiteral(true), ImmutableSet.of(), JoinRelType.INNER);\n    final RelMetadataQuery mq = node.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(join);\n    assertNull(tableReferences);\n  }\n","date":"2020-01-15 08:01:28","endLine":2617,"groupId":"11534","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableReferencesJoinUnknownNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2b/84ae2bc90102538d9e3b671ee0c62c5cde6377.src","preCode":"  @Test public void testTableReferencesJoinUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    final RexBuilder rexBuilder = node.getCluster().getRexBuilder();\n    \r\n    final LogicalJoin join =\n        LogicalJoin.create(nodeWithUnknown, node, rexBuilder.makeLiteral(true),\n            ImmutableSet.of(), JoinRelType.INNER);\n    final RelMetadataQuery mq = node.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(join);\n    assertNull(tableReferences);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2604,"status":"M"},{"authorDate":"2019-10-16 19:22:37","commitOrder":3,"curCode":"  @Test public void testTableReferencesUnionUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    \r\n    final LogicalUnion union =\n        LogicalUnion.create(ImmutableList.of(nodeWithUnknown, node),\n            true);\n    final RelMetadataQuery mq = node.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(union);\n    assertNull(tableReferences);\n  }\n","date":"2019-10-18 06:51:31","endLine":2155,"groupId":"13281","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableReferencesUnionUnknownNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testTableReferencesUnionUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    \r\n    final LogicalUnion union =\n        LogicalUnion.create(ImmutableList.of(nodeWithUnknown, node),\n            true);\n    final RelMetadataQuery mq = node.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(union);\n    assertNull(tableReferences);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2143,"status":"N"}],"commitId":"6257609c6be438ba9103666ea41e3191d851abd0","commitMessage":"@@@[CALCITE-3730] Add hints to RelBuilder\n\n* Add #hints to RelBuilder\n* Add hints to RelNode factories\n* In logical RelNode classes that implement Hintable.  add hints to #create method\n","date":"2020-01-15 08:01:28","modifiedFileCount":"39","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testTableReferencesJoinUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    final RexBuilder rexBuilder = node.getCluster().getRexBuilder();\n    \r\n    final LogicalJoin join =\n        LogicalJoin.create(nodeWithUnknown, node, ImmutableList.of(),\n            rexBuilder.makeLiteral(true), ImmutableSet.of(), JoinRelType.INNER);\n    final RelMetadataQuery mq = node.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(join);\n    assertNull(tableReferences);\n  }\n","date":"2020-04-06 04:57:49","endLine":2619,"groupId":"101144","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableReferencesJoinUnknownNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testTableReferencesJoinUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    final RexBuilder rexBuilder = node.getCluster().getRexBuilder();\n    \r\n    final LogicalJoin join =\n        LogicalJoin.create(nodeWithUnknown, node, ImmutableList.of(),\n            rexBuilder.makeLiteral(true), ImmutableSet.of(), JoinRelType.INNER);\n    final RelMetadataQuery mq = node.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(join);\n    assertNull(tableReferences);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2606,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testTableReferencesUnionUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    \r\n    final LogicalUnion union =\n        LogicalUnion.create(ImmutableList.of(nodeWithUnknown, node),\n            true);\n    final RelMetadataQuery mq = node.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(union);\n    assertNull(tableReferences);\n  }\n","date":"2020-04-06 04:57:49","endLine":2652,"groupId":"101144","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableReferencesUnionUnknownNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testTableReferencesUnionUnknownNode() {\n    final String sql = \"select * from emp limit 10\";\n    final RelNode node = convertSql(sql);\n    final RelNode nodeWithUnknown = new DummyRelNode(\n        node.getCluster(), node.getTraitSet(), node);\n    \r\n    final LogicalUnion union =\n        LogicalUnion.create(ImmutableList.of(nodeWithUnknown, node),\n            true);\n    final RelMetadataQuery mq = node.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = mq.getTableReferences(union);\n    assertNull(tableReferences);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2640,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
