[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"    public void implementReset(AggContext info, AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      reset.currentBlock().add(Expressions.statement(Expressions.assign(\n          acc.get(0), Expressions.constant(false))));\n      reset.currentBlock().add(Expressions.statement(Expressions.assign(\n          acc.get(1), getDefaultValue(acc.get(1).getType()))));\n    }\n","date":"2014-11-14 09:39:34","endLine":897,"groupId":"2431","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"implementReset","params":"(AggContextinfo@AggResetContextreset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/b78c3bb6792fb45f7c847be5dfab79c526c594.src","preCode":"    public void implementReset(AggContext info, AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      reset.currentBlock().add(Expressions.statement(Expressions.assign(\n          acc.get(0), Expressions.constant(false))));\n      reset.currentBlock().add(Expressions.statement(Expressions.assign(\n          acc.get(1), getDefaultValue(acc.get(1).getType()))));\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":891,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"    protected void implementNotNullReset(AggContext info,\n        AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      if (!afi.isStatic) {\n        reset.currentBlock().add(Expressions.statement(Expressions.assign(\n            acc.get(1), Expressions.new_(afi.declaringClass)\n        )));\n      }\n      reset.currentBlock().add(Expressions.statement(Expressions.assign(\n          acc.get(0), Expressions.call(\n              afi.isStatic ? null : acc.get(1), afi.initMethod))));\n    }\n","date":"2014-11-14 09:39:34","endLine":947,"groupId":"816","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"implementNotNullReset","params":"(AggContextinfo@AggResetContextreset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/b78c3bb6792fb45f7c847be5dfab79c526c594.src","preCode":"    protected void implementNotNullReset(AggContext info,\n        AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      if (!afi.isStatic) {\n        reset.currentBlock().add(Expressions.statement(Expressions.assign(\n            acc.get(1), Expressions.new_(afi.declaringClass)\n        )));\n      }\n      reset.currentBlock().add(Expressions.statement(Expressions.assign(\n          acc.get(0), Expressions.call(\n              afi.isStatic ? null : acc.get(1), afi.initMethod))));\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":936,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"    public void implementReset(AggContext info, AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      reset.currentBlock().add(Expressions.statement(Expressions.assign(\n          acc.get(0), Expressions.constant(false))));\n      reset.currentBlock().add(Expressions.statement(Expressions.assign(\n          acc.get(1), getDefaultValue(acc.get(1).getType()))));\n    }\n","date":"2014-11-14 09:39:34","endLine":897,"groupId":"2431","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"implementReset","params":"(AggContextinfo@AggResetContextreset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/b78c3bb6792fb45f7c847be5dfab79c526c594.src","preCode":"    public void implementReset(AggContext info, AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      reset.currentBlock().add(Expressions.statement(Expressions.assign(\n          acc.get(0), Expressions.constant(false))));\n      reset.currentBlock().add(Expressions.statement(Expressions.assign(\n          acc.get(1), getDefaultValue(acc.get(1).getType()))));\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":891,"status":"N"},{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"    @Override protected void implementNotNullReset(AggContext info,\n        AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      if (!afi.isStatic) {\n        reset.currentBlock().add(Expressions.statement(Expressions.assign(\n            acc.get(1), Expressions.new_(afi.declaringClass)\n        )));\n      }\n      reset.currentBlock().add(Expressions.statement(Expressions.assign(\n          acc.get(0), Expressions.call(\n              afi.isStatic ? null : acc.get(1), afi.initMethod))));\n    }\n","date":"2014-11-14 10:22:06","endLine":1059,"groupId":"816","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"implementNotNullReset","params":"(AggContextinfo@AggResetContextreset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9b/129e5db9713ae681a80fc8004d1a2ce9f598ea.src","preCode":"    protected void implementNotNullReset(AggContext info,\n        AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      if (!afi.isStatic) {\n        reset.currentBlock().add(Expressions.statement(Expressions.assign(\n            acc.get(1), Expressions.new_(afi.declaringClass)\n        )));\n      }\n      reset.currentBlock().add(Expressions.statement(Expressions.assign(\n          acc.get(0), Expressions.call(\n              afi.isStatic ? null : acc.get(1), afi.initMethod))));\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1048,"status":"M"}],"commitId":"a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55","commitMessage":"@@@[CALCITE-306] Standardize code style for \"import package.*;\"\n\nRename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].\n\nMake many inner classes of EnumerableRules (e.g. EnumerableFilter.  EnumerableFilterRule) top-level classes.\n\nApply a consistent formatting convention for string literals split over multiple lines.\n\nRename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.\n\nChange occurrences of \"optiq\" and \"eigenbase\" in java code to \"calcite\".\n","date":"2014-11-14 10:22:06","modifiedFileCount":"1156","status":"M","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"    @Override public void implementReset(AggContext info, AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      reset.currentBlock().add(\n          Expressions.statement(\n              Expressions.assign(acc.get(0), Expressions.constant(false))));\n      reset.currentBlock().add(\n          Expressions.statement(\n              Expressions.assign(acc.get(1),\n                  getDefaultValue(acc.get(1).getType()))));\n    }\n","date":"2020-10-07 05:42:47","endLine":1101,"groupId":"2431","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"implementReset","params":"(AggContextinfo@AggResetContextreset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/62/03bdb010ef905f4d3b2fc0215f3ec092a7f304.src","preCode":"    public void implementReset(AggContext info, AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      reset.currentBlock().add(\n          Expressions.statement(\n              Expressions.assign(acc.get(0), Expressions.constant(false))));\n      reset.currentBlock().add(\n          Expressions.statement(\n              Expressions.assign(acc.get(1),\n                  getDefaultValue(acc.get(1).getType()))));\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1092,"status":"M"},{"authorDate":"2014-11-14 10:11:34","commitOrder":3,"curCode":"    @Override protected void implementNotNullReset(AggContext info,\n        AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      if (!afi.isStatic) {\n        reset.currentBlock().add(Expressions.statement(Expressions.assign(\n            acc.get(1), Expressions.new_(afi.declaringClass)\n        )));\n      }\n      reset.currentBlock().add(Expressions.statement(Expressions.assign(\n          acc.get(0), Expressions.call(\n              afi.isStatic ? null : acc.get(1), afi.initMethod))));\n    }\n","date":"2014-11-14 10:22:06","endLine":1059,"groupId":"816","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"implementNotNullReset","params":"(AggContextinfo@AggResetContextreset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9b/129e5db9713ae681a80fc8004d1a2ce9f598ea.src","preCode":"    @Override protected void implementNotNullReset(AggContext info,\n        AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      if (!afi.isStatic) {\n        reset.currentBlock().add(Expressions.statement(Expressions.assign(\n            acc.get(1), Expressions.new_(afi.declaringClass)\n        )));\n      }\n      reset.currentBlock().add(Expressions.statement(Expressions.assign(\n          acc.get(0), Expressions.call(\n              afi.isStatic ? null : acc.get(1), afi.initMethod))));\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1048,"status":"N"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2021-03-30 01:42:19","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":4,"curCode":"    @Override public void implementReset(AggContext info, AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      reset.currentBlock().add(\n          Expressions.statement(\n              Expressions.assign(acc.get(0), Expressions.constant(false))));\n      reset.currentBlock().add(\n          Expressions.statement(\n              Expressions.assign(acc.get(1),\n                  getDefaultValue(acc.get(1).getType()))));\n    }\n","date":"2020-10-07 05:42:47","endLine":1101,"groupId":"122121","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"implementReset","params":"(AggContextinfo@AggResetContextreset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/62/03bdb010ef905f4d3b2fc0215f3ec092a7f304.src","preCode":"    @Override public void implementReset(AggContext info, AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      reset.currentBlock().add(\n          Expressions.statement(\n              Expressions.assign(acc.get(0), Expressions.constant(false))));\n      reset.currentBlock().add(\n          Expressions.statement(\n              Expressions.assign(acc.get(1),\n                  getDefaultValue(acc.get(1).getType()))));\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1092,"status":"N"},{"authorDate":"2021-03-30 01:42:19","commitOrder":4,"curCode":"    @Override protected void implementNotNullReset(AggContext info,\n        AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      if (!afi.isStatic) {\n        reset.currentBlock().add(\n            Expressions.statement(\n                Expressions.assign(acc.get(1), makeNew(afi))));\n      }\n      reset.currentBlock().add(\n          Expressions.statement(\n              Expressions.assign(acc.get(0),\n                  Expressions.call(afi.isStatic\n                      ? null\n                      : acc.get(1), afi.initMethod))));\n    }\n","date":"2021-04-19 16:25:06","endLine":1390,"groupId":"122121","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"implementNotNullReset","params":"(AggContextinfo@AggResetContextreset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bb/89f1f94a093e701e6d7c6d93487e0dcaacc245.src","preCode":"    @Override protected void implementNotNullReset(AggContext info,\n        AggResetContext reset) {\n      List<Expression> acc = reset.accumulator();\n      if (!afi.isStatic) {\n        reset.currentBlock().add(\n            Expressions.statement(\n                Expressions.assign(acc.get(1),\n                    Expressions.new_(afi.declaringClass))));\n      }\n      reset.currentBlock().add(\n          Expressions.statement(\n              Expressions.assign(acc.get(0),\n                  Expressions.call(afi.isStatic\n                      ? null\n                      : acc.get(1), afi.initMethod))));\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1376,"status":"M"}],"commitId":"b2e9e6cba1e2ce28368d1281f527a9e53f4628ca","commitMessage":"@@@[CALCITE-4564] Initialization context for non-static user-defined functions (UDFs)\n\nWhen Interpreter or code generated by RexToLixTranslator calls\na UDF.  invoke its constructor only once. There will therefore\nbe one instance of the UDF for the whole execution.  and that\ninstance can be used to store state. Typical state will be\npreparation work (e.g. compiling a regular expression) to make\neach invocation faster.\n\nAdd 'interface FunctionContext' (marked as experimental). If\na UDF has a public constructor with FunctionContext as a\nparameter.  this will be called in preference to the default\nconstructor.\n\nIn InterpreterTest.  allow more than one query to be executed\nper test method.\n\nClose apache/calcite#2395\n","date":"2021-04-19 16:25:06","modifiedFileCount":"24","status":"M","submitter":"Julian Hyde"}]
