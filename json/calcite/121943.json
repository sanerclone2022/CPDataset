[{"authorTime":"2016-01-19 08:22:06","codes":[{"authorDate":"2016-01-19 08:22:06","commitOrder":1,"curCode":"  public Double getMaxRowCount(Intersect rel, RelMetadataQuery mq) {\n    \r\n    Double rowCount = null;\n    for (RelNode input : rel.getInputs()) {\n      Double partialRowCount = mq.getMaxRowCount(input);\n      if (rowCount == null\n          || partialRowCount != null && partialRowCount < rowCount) {\n        rowCount = partialRowCount;\n      }\n    }\n    return rowCount;\n  }\n","date":"2016-02-25 05:37:49","endLine":76,"groupId":"9963","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getMaxRowCount","params":"(Intersectrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dd/811a7bfba217c5970eda7b913968197e2df08a.src","preCode":"  public Double getMaxRowCount(Intersect rel, RelMetadataQuery mq) {\n    \r\n    Double rowCount = null;\n    for (RelNode input : rel.getInputs()) {\n      Double partialRowCount = mq.getMaxRowCount(input);\n      if (rowCount == null\n          || partialRowCount != null && partialRowCount < rowCount) {\n        rowCount = partialRowCount;\n      }\n    }\n    return rowCount;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdMaxRowCount.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2016-01-19 08:22:06","commitOrder":1,"curCode":"  public Double getRowCount(Minus rel, RelMetadataQuery mq) {\n    Double rowCount = null;\n    for (RelNode input : rel.getInputs()) {\n      Double partialRowCount = mq.getRowCount(input);\n      if (rowCount == null\n          || partialRowCount != null && partialRowCount < rowCount) {\n        rowCount = partialRowCount;\n      }\n    }\n    return rowCount;\n  }\n","date":"2016-02-25 05:37:49","endLine":120,"groupId":"9963","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getRowCount","params":"(Minusrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c9/113a14c38c091dbfa8ef3be4b09989ae6f5667.src","preCode":"  public Double getRowCount(Minus rel, RelMetadataQuery mq) {\n    Double rowCount = null;\n    for (RelNode input : rel.getInputs()) {\n      Double partialRowCount = mq.getRowCount(input);\n      if (rowCount == null\n          || partialRowCount != null && partialRowCount < rowCount) {\n        rowCount = partialRowCount;\n      }\n    }\n    return rowCount;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"}],"commitId":"d14040c52f8b0bc351443cff1584e8b587378698","commitMessage":"@@@[CALCITE-604] Tune metadata by generating a dispatcher at runtime\n\nCurrently we dispatch to metadata providers using reflection. With\nthis change.  we generate a dispatcher class and compile using Janino.\n\nCache results within a metadata call. This should yield a performance\nimprovement when.  say.  a Join requires many kinds of metadata\n(rowCount.  averageRowSize.  selectivity) and they all rely on the\nrowCount of the input.  and that rowCount is expensive to compute.\n","date":"2016-02-25 05:37:49","modifiedFileCount":"34","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  public @Nullable Double getMaxRowCount(Intersect rel, RelMetadataQuery mq) {\n    \r\n    Double rowCount = null;\n    for (RelNode input : rel.getInputs()) {\n      Double partialRowCount = mq.getMaxRowCount(input);\n      if (rowCount == null\n          || partialRowCount != null && partialRowCount < rowCount) {\n        rowCount = partialRowCount;\n      }\n    }\n    return rowCount;\n  }\n","date":"2020-11-30 06:45:33","endLine":83,"groupId":"121943","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getMaxRowCount","params":"(Intersectrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/31/c632b5830cd59d95463147e4a428f3c28e7112.src","preCode":"  public Double getMaxRowCount(Intersect rel, RelMetadataQuery mq) {\n    \r\n    Double rowCount = null;\n    for (RelNode input : rel.getInputs()) {\n      Double partialRowCount = mq.getMaxRowCount(input);\n      if (rowCount == null\n          || partialRowCount != null && partialRowCount < rowCount) {\n        rowCount = partialRowCount;\n      }\n    }\n    return rowCount;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdMaxRowCount.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  public @Nullable Double getRowCount(Minus rel, RelMetadataQuery mq) {\n    Double rowCount = null;\n    for (RelNode input : rel.getInputs()) {\n      Double partialRowCount = mq.getRowCount(input);\n      if (rowCount == null\n          || partialRowCount != null && partialRowCount < rowCount) {\n        rowCount = partialRowCount;\n      }\n    }\n    return rowCount;\n  }\n","date":"2020-11-30 06:45:33","endLine":131,"groupId":"121943","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getRowCount","params":"(Minusrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/52/8fa8d5f2034169756cadc53de59c604fb9bbd1.src","preCode":"  public Double getRowCount(Minus rel, RelMetadataQuery mq) {\n    Double rowCount = null;\n    for (RelNode input : rel.getInputs()) {\n      Double partialRowCount = mq.getRowCount(input);\n      if (rowCount == null\n          || partialRowCount != null && partialRowCount < rowCount) {\n        rowCount = partialRowCount;\n      }\n    }\n    return rowCount;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
