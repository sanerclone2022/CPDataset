[{"authorTime":"2014-12-30 01:44:38","codes":[{"authorDate":"2014-12-30 01:44:38","commitOrder":1,"curCode":"  @Test public void testCaseSensitiveSubQueryOracle() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(CalciteAssert.Config.REGULAR)\n            .with(ImmutableMap.of(\"lex\", \"ORACLE\"));\n\n    with.query(\"select DID from (select DEPTID as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select DEPTID as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X\")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n  }\n","date":"2015-01-03 12:34:18","endLine":5968,"groupId":"14514","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCaseSensitiveSubQueryOracle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/6fb6d051fb2065f9d0b145bca9d808f06a9aad.src","preCode":"  @Test public void testCaseSensitiveSubQueryOracle() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(CalciteAssert.Config.REGULAR)\n            .with(ImmutableMap.of(\"lex\", \"ORACLE\"));\n\n    with.query(\"select DID from (select DEPTID as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select DEPTID as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X\")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5955,"status":"B"},{"authorDate":"2014-12-30 01:44:38","commitOrder":1,"curCode":"  @Test public void testUnquotedCaseSensitiveSubQueryMySql() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(CalciteAssert.Config.REGULAR)\n            .with(ImmutableMap.of(\"lex\", \"MYSQL\"));\n\n    with.query(\"select DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n  }\n","date":"2015-01-03 12:34:18","endLine":5995,"groupId":"14514","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnquotedCaseSensitiveSubQueryMySql","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/6fb6d051fb2065f9d0b145bca9d808f06a9aad.src","preCode":"  @Test public void testUnquotedCaseSensitiveSubQueryMySql() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(CalciteAssert.Config.REGULAR)\n            .with(ImmutableMap.of(\"lex\", \"MYSQL\"));\n\n    with.query(\"select DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5970,"status":"B"}],"commitId":"1390832aa69d262f09af70e9dc0b77403d7f1059","commitMessage":"@@@Add more unit tests for [CALCITE-550] (Jinfeng Ni)\n\nClose apache/incubator-calcite#39\n","date":"2015-01-03 12:34:18","modifiedFileCount":"1","status":"B","submitter":"Jinfeng Ni"},{"authorTime":"2015-01-07 08:17:15","codes":[{"authorDate":"2015-01-07 08:17:15","commitOrder":2,"curCode":"  @Test public void testCaseSensitiveSubQueryOracle() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(\"lex\", \"ORACLE\");\n\n    with.query(\"select DID from (select DEPTID as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select DEPTID as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X\")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n  }\n","date":"2015-01-07 08:17:15","endLine":5922,"groupId":"12437","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCaseSensitiveSubQueryOracle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/eb/aceec7bfa3a4c2bc774c6d0b6b4610fd04b77c.src","preCode":"  @Test public void testCaseSensitiveSubQueryOracle() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(CalciteAssert.Config.REGULAR)\n            .with(ImmutableMap.of(\"lex\", \"ORACLE\"));\n\n    with.query(\"select DID from (select DEPTID as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select DEPTID as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X\")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5910,"status":"M"},{"authorDate":"2015-01-07 08:17:15","commitOrder":2,"curCode":"  @Test public void testUnquotedCaseSensitiveSubQueryMySql() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(\"lex\", \"MYSQL\");\n\n    with.query(\"select DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n  }\n","date":"2015-01-07 08:17:15","endLine":5948,"groupId":"14514","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnquotedCaseSensitiveSubQueryMySql","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/eb/aceec7bfa3a4c2bc774c6d0b6b4610fd04b77c.src","preCode":"  @Test public void testUnquotedCaseSensitiveSubQueryMySql() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(CalciteAssert.Config.REGULAR)\n            .with(ImmutableMap.of(\"lex\", \"MYSQL\"));\n\n    with.query(\"select DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5924,"status":"M"}],"commitId":"3fccc08ef23d33efbc692b389cc1049ee7939533","commitMessage":"@@@[CALCITE-489] Teach CalciteAssert to respect multiple settings\n","date":"2015-01-07 08:17:15","modifiedFileCount":"12","status":"M","submitter":"Julian Hyde"},{"authorTime":"2015-01-18 17:57:20","codes":[{"authorDate":"2015-01-18 17:57:20","commitOrder":3,"curCode":"  @Test public void testCaseSensitiveSubQueryOracle() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(Lex.ORACLE);\n\n    with.query(\"select DID from (select DEPTID as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select DEPTID as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X\")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n  }\n","date":"2015-01-18 17:57:20","endLine":5968,"groupId":"7441","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCaseSensitiveSubQueryOracle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5a/89d9a87a8caa3571ba217835dd1feec9a632f2.src","preCode":"  @Test public void testCaseSensitiveSubQueryOracle() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(\"lex\", \"ORACLE\");\n\n    with.query(\"select DID from (select DEPTID as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select DEPTID as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X\")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5956,"status":"M"},{"authorDate":"2015-01-18 17:57:20","commitOrder":3,"curCode":"  @Test public void testUnquotedCaseSensitiveSubQueryMySql() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(Lex.MYSQL);\n\n    with.query(\"select DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n  }\n","date":"2015-01-18 17:57:20","endLine":5994,"groupId":"14514","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnquotedCaseSensitiveSubQueryMySql","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5a/89d9a87a8caa3571ba217835dd1feec9a632f2.src","preCode":"  @Test public void testUnquotedCaseSensitiveSubQueryMySql() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(\"lex\", \"MYSQL\");\n\n    with.query(\"select DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM \\n \"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5970,"status":"M"}],"commitId":"986f994349a92ba2644f7384cefaccd165735832","commitMessage":"@@@[CALCITE-489] Teach CalciteAssert to respect multiple settings.  use lex=JAVA in README.md for brevity\n\nFixes #42\n","date":"2015-01-18 17:57:20","modifiedFileCount":"11","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testCaseSensitiveSubQueryOracle() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(Lex.ORACLE);\n\n    with.query(\"select DID from (select DEPTID as did FROM\\n\"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select DEPTID as did FROM\\n\"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X\")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n  }\n","date":"2020-04-06 04:57:49","endLine":6767,"groupId":"101313","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCaseSensitiveSubQueryOracle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/0b7f58f4442fcb05f8815355eeabe565385b9a.src","preCode":"  @Test public void testCaseSensitiveSubQueryOracle() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(Lex.ORACLE);\n\n    with.query(\"select DID from (select DEPTID as did FROM\\n\"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select DEPTID as did FROM\\n\"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X\")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6755,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testUnquotedCaseSensitiveSubQueryMySql() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(Lex.MYSQL);\n\n    with.query(\"select DID from (select deptid as did FROM\\n\"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select deptid as did FROM\\n\"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID from (select deptid as did FROM\\n\"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM\\n\"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM\\n\"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n  }\n","date":"2020-04-06 04:57:49","endLine":6793,"groupId":"101313","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnquotedCaseSensitiveSubQueryMySql","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/0b7f58f4442fcb05f8815355eeabe565385b9a.src","preCode":"  @Test public void testUnquotedCaseSensitiveSubQueryMySql() {\n    final CalciteAssert.AssertThat with =\n        CalciteAssert.that()\n            .with(Lex.MYSQL);\n\n    with.query(\"select DID from (select deptid as did FROM\\n\"\n        + \"     ( values (1), (2) ) as T1(deptid) ) \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select x.DID from (select deptid as did FROM\\n\"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID from (select deptid as did FROM\\n\"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X \")\n        .returnsUnordered(\"DID=1\", \"DID=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM\\n\"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n\n    with.query(\"select X.DID2 from (select deptid as did FROM\\n\"\n        + \"     ( values (1), (2) ) as T1(deptid) ) X (DID2)\")\n        .returnsUnordered(\"DID2=1\", \"DID2=2\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6769,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
