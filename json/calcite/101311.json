[{"authorTime":"2015-03-20 00:56:09","codes":[{"authorDate":"2015-03-04 06:51:09","commitOrder":6,"curCode":"  @Test public void testExplicitImplicitSchemaSameName() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n\n    aSchema.setCacheEnabled(true);\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n  }\n","date":"2015-11-06 15:18:24","endLine":6461,"groupId":"1239","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExplicitImplicitSchemaSameName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/65/d024c25e80b9ba896096425a6cca8d07be65ae.src","preCode":"  @Test public void testExplicitImplicitSchemaSameName() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n\n    aSchema.setCacheEnabled(true);\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6439,"status":"B"},{"authorDate":"2015-03-20 00:56:09","commitOrder":6,"curCode":"  @Test public void testSchemaCaching() throws Exception {\n    final Connection connection =\n        CalciteAssert.that(CalciteAssert.Config.JDBC_FOODMART).connect();\n    final CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    final SchemaPlus rootSchema = calciteConnection.getRootSchema();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return aSubSchemaMap;\n      }\n    });\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    \r\n    assertThat(aSchema.contentsHaveChangedSince(-1, 1), equalTo(false));\n    assertThat(aSchema.contentsHaveChangedSince(1, 1), equalTo(false));\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    aSubSchemaMap.put(\"b1\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n    assertThat(aSchema.getSubSchema(\"b1\"), nullValue());\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n    assertThat(aSchema.getSubSchema(\"b1\"), notNullValue());\n\n    \r\n    aSubSchemaMap.put(\"b2\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n\n    \r\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n    aSchema.add(\"b3\", new AbstractSchema()); \r\n    aSubSchemaMap.put(\"b4\", new AbstractSchema()); \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(3));\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(4));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final Map<String, Schema> a2SubSchemaMap = new HashMap<>();\n    final boolean[] changed = {false};\n    final SchemaPlus a2Schema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return a2SubSchemaMap;\n      }\n      @Override public boolean contentsHaveChangedSince(long lastCheck,\n          long now) {\n        return changed[0];\n      }\n    });\n    a2Schema.setCacheEnabled(true);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n\n    \r\n    a2SubSchemaMap.put(\"b3\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n    Thread.sleep(1);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n    changed[0] = true;\n    assertThat(a2Schema.getSubSchemaNames().size(), is(1));\n    changed[0] = false;\n\n    \r\n    a2SubSchemaMap.put(\"b4\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(1));\n    a2Schema.setCacheEnabled(false);\n    a2Schema.setCacheEnabled(true);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(2));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final TableInRootSchemaTest.SimpleTable table =\n        new TableInRootSchemaTest.SimpleTable();\n    a2Schema.add(\"table1\", table);\n    a2Schema.add(\"TABLE1\", table);\n    a2Schema.add(\"tabLe1\", table);\n    a2Schema.add(\"tabLe2\", table);\n    assertThat(a2Schema.getTableNames().size(), equalTo(4));\n    final CalciteSchema a2CalciteSchema = CalciteSchema.from(a2Schema);\n    assertThat(a2CalciteSchema.getTable(\"table1\", true), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"table1\", false), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", true), nullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", false), notNullValue());\n    final TableMacro function =\n        ViewTable.viewMacro(a2Schema, \"values 1\", null, null);\n    Util.discard(function);\n\n    connection.close();\n  }\n","date":"2015-05-13 05:18:10","endLine":6233,"groupId":"1943","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8f/73fbdcf60429d7f6f42fe513c97c22d9687fbf.src","preCode":"  @Test public void testSchemaCaching() throws Exception {\n    final Connection connection =\n        CalciteAssert.that(CalciteAssert.Config.JDBC_FOODMART).connect();\n    final CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    final SchemaPlus rootSchema = calciteConnection.getRootSchema();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return aSubSchemaMap;\n      }\n    });\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    \r\n    assertThat(aSchema.contentsHaveChangedSince(-1, 1), equalTo(false));\n    assertThat(aSchema.contentsHaveChangedSince(1, 1), equalTo(false));\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    aSubSchemaMap.put(\"b1\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n    assertThat(aSchema.getSubSchema(\"b1\"), nullValue());\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n    assertThat(aSchema.getSubSchema(\"b1\"), notNullValue());\n\n    \r\n    aSubSchemaMap.put(\"b2\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n\n    \r\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n    aSchema.add(\"b3\", new AbstractSchema()); \r\n    aSubSchemaMap.put(\"b4\", new AbstractSchema()); \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(3));\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(4));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final Map<String, Schema> a2SubSchemaMap = new HashMap<>();\n    final boolean[] changed = {false};\n    final SchemaPlus a2Schema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return a2SubSchemaMap;\n      }\n      @Override public boolean contentsHaveChangedSince(long lastCheck,\n          long now) {\n        return changed[0];\n      }\n    });\n    a2Schema.setCacheEnabled(true);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n\n    \r\n    a2SubSchemaMap.put(\"b3\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n    Thread.sleep(1);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n    changed[0] = true;\n    assertThat(a2Schema.getSubSchemaNames().size(), is(1));\n    changed[0] = false;\n\n    \r\n    a2SubSchemaMap.put(\"b4\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(1));\n    a2Schema.setCacheEnabled(false);\n    a2Schema.setCacheEnabled(true);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(2));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final TableInRootSchemaTest.SimpleTable table =\n        new TableInRootSchemaTest.SimpleTable();\n    a2Schema.add(\"table1\", table);\n    a2Schema.add(\"TABLE1\", table);\n    a2Schema.add(\"tabLe1\", table);\n    a2Schema.add(\"tabLe2\", table);\n    assertThat(a2Schema.getTableNames().size(), equalTo(4));\n    final CalciteSchema a2CalciteSchema = CalciteSchema.from(a2Schema);\n    assertThat(a2CalciteSchema.getTable(\"table1\", true), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"table1\", false), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", true), nullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", false), notNullValue());\n    final TableMacro function =\n        ViewTable.viewMacro(a2Schema, \"values 1\", null, null);\n    Util.discard(function);\n\n    connection.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6132,"status":"NB"}],"commitId":"ac8d04ed95589f29571b7de3c220876c3ebc3a00","commitMessage":"@@@[CALCITE-911] Add a variant of CalciteSchema that does not cache sub-objects\n\nClose apache/calcite#142\n","date":"2015-11-06 15:18:24","modifiedFileCount":"13","status":"M","submitter":"Jinfeng Ni"},{"authorTime":"2016-08-02 05:46:56","codes":[{"authorDate":"2015-03-04 06:51:09","commitOrder":7,"curCode":"  @Test public void testExplicitImplicitSchemaSameName() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n\n    aSchema.setCacheEnabled(true);\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n  }\n","date":"2015-11-06 15:18:24","endLine":6461,"groupId":"1239","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExplicitImplicitSchemaSameName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/65/d024c25e80b9ba896096425a6cca8d07be65ae.src","preCode":"  @Test public void testExplicitImplicitSchemaSameName() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n\n    aSchema.setCacheEnabled(true);\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6439,"status":"N"},{"authorDate":"2016-08-02 05:46:56","commitOrder":7,"curCode":"  @Test public void testSchemaCaching() throws Exception {\n    final Connection connection =\n        CalciteAssert.that(CalciteAssert.Config.JDBC_FOODMART).connect();\n    final CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    final SchemaPlus rootSchema = calciteConnection.getRootSchema();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return aSubSchemaMap;\n      }\n    });\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    \r\n    assertThat(aSchema.contentsHaveChangedSince(-1, 1), equalTo(false));\n    assertThat(aSchema.contentsHaveChangedSince(1, 1), equalTo(false));\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    aSubSchemaMap.put(\"b1\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n    assertThat(aSchema.getSubSchema(\"b1\"), nullValue());\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n    assertThat(aSchema.getSubSchema(\"b1\"), notNullValue());\n\n    \r\n    aSubSchemaMap.put(\"b2\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n\n    \r\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n    aSchema.add(\"b3\", new AbstractSchema()); \r\n    aSubSchemaMap.put(\"b4\", new AbstractSchema()); \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(3));\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(4));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final Map<String, Schema> a2SubSchemaMap = new HashMap<>();\n    final boolean[] changed = {false};\n    final SchemaPlus a2Schema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return a2SubSchemaMap;\n      }\n      @Override public boolean contentsHaveChangedSince(long lastCheck,\n          long now) {\n        return changed[0];\n      }\n    });\n    a2Schema.setCacheEnabled(true);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n\n    \r\n    a2SubSchemaMap.put(\"b3\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n    Thread.sleep(1);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n    changed[0] = true;\n    assertThat(a2Schema.getSubSchemaNames().size(), is(1));\n    changed[0] = false;\n\n    \r\n    a2SubSchemaMap.put(\"b4\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(1));\n    a2Schema.setCacheEnabled(false);\n    a2Schema.setCacheEnabled(true);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(2));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final TableInRootSchemaTest.SimpleTable table =\n        new TableInRootSchemaTest.SimpleTable();\n    a2Schema.add(\"table1\", table);\n    a2Schema.add(\"TABLE1\", table);\n    a2Schema.add(\"tabLe1\", table);\n    a2Schema.add(\"tabLe2\", table);\n    assertThat(a2Schema.getTableNames().size(), equalTo(4));\n    final CalciteSchema a2CalciteSchema = CalciteSchema.from(a2Schema);\n    assertThat(a2CalciteSchema.getTable(\"table1\", true), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"table1\", false), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", true), nullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", false), notNullValue());\n    final TableMacro function =\n        ViewTable.viewMacro(a2Schema, \"values 1\", null, null, null);\n    Util.discard(function);\n\n    connection.close();\n  }\n","date":"2016-08-03 16:05:00","endLine":6209,"groupId":"1943","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/94/586d29b42a2ae9a4191ede6a18fb4033097f96.src","preCode":"  @Test public void testSchemaCaching() throws Exception {\n    final Connection connection =\n        CalciteAssert.that(CalciteAssert.Config.JDBC_FOODMART).connect();\n    final CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    final SchemaPlus rootSchema = calciteConnection.getRootSchema();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return aSubSchemaMap;\n      }\n    });\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    \r\n    assertThat(aSchema.contentsHaveChangedSince(-1, 1), equalTo(false));\n    assertThat(aSchema.contentsHaveChangedSince(1, 1), equalTo(false));\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    aSubSchemaMap.put(\"b1\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n    assertThat(aSchema.getSubSchema(\"b1\"), nullValue());\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n    assertThat(aSchema.getSubSchema(\"b1\"), notNullValue());\n\n    \r\n    aSubSchemaMap.put(\"b2\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n\n    \r\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n    aSchema.add(\"b3\", new AbstractSchema()); \r\n    aSubSchemaMap.put(\"b4\", new AbstractSchema()); \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(3));\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(4));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final Map<String, Schema> a2SubSchemaMap = new HashMap<>();\n    final boolean[] changed = {false};\n    final SchemaPlus a2Schema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return a2SubSchemaMap;\n      }\n      @Override public boolean contentsHaveChangedSince(long lastCheck,\n          long now) {\n        return changed[0];\n      }\n    });\n    a2Schema.setCacheEnabled(true);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n\n    \r\n    a2SubSchemaMap.put(\"b3\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n    Thread.sleep(1);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n    changed[0] = true;\n    assertThat(a2Schema.getSubSchemaNames().size(), is(1));\n    changed[0] = false;\n\n    \r\n    a2SubSchemaMap.put(\"b4\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(1));\n    a2Schema.setCacheEnabled(false);\n    a2Schema.setCacheEnabled(true);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(2));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final TableInRootSchemaTest.SimpleTable table =\n        new TableInRootSchemaTest.SimpleTable();\n    a2Schema.add(\"table1\", table);\n    a2Schema.add(\"TABLE1\", table);\n    a2Schema.add(\"tabLe1\", table);\n    a2Schema.add(\"tabLe2\", table);\n    assertThat(a2Schema.getTableNames().size(), equalTo(4));\n    final CalciteSchema a2CalciteSchema = CalciteSchema.from(a2Schema);\n    assertThat(a2CalciteSchema.getTable(\"table1\", true), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"table1\", false), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", true), nullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", false), notNullValue());\n    final TableMacro function =\n        ViewTable.viewMacro(a2Schema, \"values 1\", null, null);\n    Util.discard(function);\n\n    connection.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6108,"status":"M"}],"commitId":"7936185e55e3243c9fec6bb6461a934d2539e32f","commitMessage":"@@@[CALCITE-1336] Add fully-qualified view name to view expander (Julien Le Dem)\n\nClose apache/calcite#263\n","date":"2016-08-03 16:05:00","modifiedFileCount":"16","status":"M","submitter":"Julien Le Dem"},{"authorTime":"2017-08-31 04:13:48","codes":[{"authorDate":"2015-03-04 06:51:09","commitOrder":8,"curCode":"  @Test public void testExplicitImplicitSchemaSameName() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n\n    aSchema.setCacheEnabled(true);\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n  }\n","date":"2015-11-06 15:18:24","endLine":6461,"groupId":"1239","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExplicitImplicitSchemaSameName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/65/d024c25e80b9ba896096425a6cca8d07be65ae.src","preCode":"  @Test public void testExplicitImplicitSchemaSameName() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n\n    aSchema.setCacheEnabled(true);\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6439,"status":"N"},{"authorDate":"2017-08-31 04:13:48","commitOrder":8,"curCode":"  @Test public void testSchemaCaching() throws Exception {\n    final Connection connection =\n        CalciteAssert.that(CalciteAssert.Config.JDBC_FOODMART).connect();\n    final CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    final SchemaPlus rootSchema = calciteConnection.getRootSchema();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return aSubSchemaMap;\n      }\n    });\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    aSubSchemaMap.put(\"b1\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n    assertThat(aSchema.getSubSchema(\"b1\"), nullValue());\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n    assertThat(aSchema.getSubSchema(\"b1\"), notNullValue());\n\n    \r\n    aSubSchemaMap.put(\"b2\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n\n    \r\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n    aSchema.add(\"b3\", new AbstractSchema()); \r\n    aSubSchemaMap.put(\"b4\", new AbstractSchema()); \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(3));\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(4));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final Map<String, Schema> a2SubSchemaMap = new HashMap<>();\n    final SchemaPlus a2Schema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return a2SubSchemaMap;\n      }\n    });\n    a2Schema.setCacheEnabled(true);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n\n    \r\n    a2SubSchemaMap.put(\"b3\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n    Thread.sleep(1);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n\n    \r\n    a2Schema.setCacheEnabled(false);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(1));\n    a2SubSchemaMap.put(\"b4\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(2));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final TableInRootSchemaTest.SimpleTable table =\n        new TableInRootSchemaTest.SimpleTable();\n    a2Schema.add(\"table1\", table);\n    a2Schema.add(\"TABLE1\", table);\n    a2Schema.add(\"tabLe1\", table);\n    a2Schema.add(\"tabLe2\", table);\n    assertThat(a2Schema.getTableNames().size(), equalTo(4));\n    final CalciteSchema a2CalciteSchema = CalciteSchema.from(a2Schema);\n    assertThat(a2CalciteSchema.getTable(\"table1\", true), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"table1\", false), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", true), nullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", false), notNullValue());\n    final TableMacro function =\n        ViewTable.viewMacro(a2Schema, \"values 1\", null, null, null);\n    Util.discard(function);\n\n    connection.close();\n  }\n","date":"2017-08-31 04:13:48","endLine":6265,"groupId":"1939","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/22/82037fee2f47cf47d86ff307c2f4c8fc8bd5ea.src","preCode":"  @Test public void testSchemaCaching() throws Exception {\n    final Connection connection =\n        CalciteAssert.that(CalciteAssert.Config.JDBC_FOODMART).connect();\n    final CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    final SchemaPlus rootSchema = calciteConnection.getRootSchema();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return aSubSchemaMap;\n      }\n    });\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    \r\n    assertThat(aSchema.contentsHaveChangedSince(-1, 1), equalTo(false));\n    assertThat(aSchema.contentsHaveChangedSince(1, 1), equalTo(false));\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    aSubSchemaMap.put(\"b1\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n    assertThat(aSchema.getSubSchema(\"b1\"), nullValue());\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n    assertThat(aSchema.getSubSchema(\"b1\"), notNullValue());\n\n    \r\n    aSubSchemaMap.put(\"b2\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n\n    \r\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n    aSchema.add(\"b3\", new AbstractSchema()); \r\n    aSubSchemaMap.put(\"b4\", new AbstractSchema()); \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(3));\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(4));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final Map<String, Schema> a2SubSchemaMap = new HashMap<>();\n    final boolean[] changed = {false};\n    final SchemaPlus a2Schema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return a2SubSchemaMap;\n      }\n      @Override public boolean contentsHaveChangedSince(long lastCheck,\n          long now) {\n        return changed[0];\n      }\n    });\n    a2Schema.setCacheEnabled(true);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n\n    \r\n    a2SubSchemaMap.put(\"b3\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n    Thread.sleep(1);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n    changed[0] = true;\n    assertThat(a2Schema.getSubSchemaNames().size(), is(1));\n    changed[0] = false;\n\n    \r\n    a2SubSchemaMap.put(\"b4\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(1));\n    a2Schema.setCacheEnabled(false);\n    a2Schema.setCacheEnabled(true);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(2));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final TableInRootSchemaTest.SimpleTable table =\n        new TableInRootSchemaTest.SimpleTable();\n    a2Schema.add(\"table1\", table);\n    a2Schema.add(\"TABLE1\", table);\n    a2Schema.add(\"tabLe1\", table);\n    a2Schema.add(\"tabLe2\", table);\n    assertThat(a2Schema.getTableNames().size(), equalTo(4));\n    final CalciteSchema a2CalciteSchema = CalciteSchema.from(a2Schema);\n    assertThat(a2CalciteSchema.getTable(\"table1\", true), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"table1\", false), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", true), nullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", false), notNullValue());\n    final TableMacro function =\n        ViewTable.viewMacro(a2Schema, \"values 1\", null, null, null);\n    Util.discard(function);\n\n    connection.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6178,"status":"M"}],"commitId":"35209136c5b21b83b1d2a3d4180a121f58e3c2f6","commitMessage":"@@@[CALCITE-1941] Refine interface Schema#snapshot()\n","date":"2017-08-31 04:13:48","modifiedFileCount":"14","status":"M","submitter":"maryannxue"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":9,"curCode":"  @Test void testExplicitImplicitSchemaSameName() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n\n    aSchema.setCacheEnabled(true);\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n  }\n","date":"2020-04-06 04:57:49","endLine":6601,"groupId":"101311","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testExplicitImplicitSchemaSameName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/0b7f58f4442fcb05f8815355eeabe565385b9a.src","preCode":"  @Test public void testExplicitImplicitSchemaSameName() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n\n    aSchema.setCacheEnabled(true);\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6579,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":9,"curCode":"  @Test void testSchemaCaching() throws Exception {\n    final Connection connection =\n        CalciteAssert.that(CalciteAssert.Config.JDBC_FOODMART).connect();\n    final CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    final SchemaPlus rootSchema = calciteConnection.getRootSchema();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return aSubSchemaMap;\n      }\n    });\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    aSubSchemaMap.put(\"b1\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n    assertThat(aSchema.getSubSchema(\"b1\"), nullValue());\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n    assertThat(aSchema.getSubSchema(\"b1\"), notNullValue());\n\n    \r\n    aSubSchemaMap.put(\"b2\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n\n    \r\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n    aSchema.add(\"b3\", new AbstractSchema()); \r\n    aSubSchemaMap.put(\"b4\", new AbstractSchema()); \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(3));\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(4));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final Map<String, Schema> a2SubSchemaMap = new HashMap<>();\n    final SchemaPlus a2Schema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return a2SubSchemaMap;\n      }\n    });\n    a2Schema.setCacheEnabled(true);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n\n    \r\n    a2SubSchemaMap.put(\"b3\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n    Thread.sleep(1);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n\n    \r\n    a2Schema.setCacheEnabled(false);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(1));\n    a2SubSchemaMap.put(\"b4\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(2));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final TableInRootSchemaTest.SimpleTable table =\n        new TableInRootSchemaTest.SimpleTable();\n    a2Schema.add(\"table1\", table);\n    a2Schema.add(\"TABLE1\", table);\n    a2Schema.add(\"tabLe1\", table);\n    a2Schema.add(\"tabLe2\", table);\n    assertThat(a2Schema.getTableNames().size(), equalTo(4));\n    final CalciteSchema a2CalciteSchema = CalciteSchema.from(a2Schema);\n    assertThat(a2CalciteSchema.getTable(\"table1\", true), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"table1\", false), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", true), nullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", false), notNullValue());\n    final TableMacro function =\n        ViewTable.viewMacro(a2Schema, \"values 1\", null, null, null);\n    Util.discard(function);\n\n    connection.close();\n  }\n","date":"2020-04-06 04:57:49","endLine":6753,"groupId":"101311","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/0b7f58f4442fcb05f8815355eeabe565385b9a.src","preCode":"  @Test public void testSchemaCaching() throws Exception {\n    final Connection connection =\n        CalciteAssert.that(CalciteAssert.Config.JDBC_FOODMART).connect();\n    final CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    final SchemaPlus rootSchema = calciteConnection.getRootSchema();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return aSubSchemaMap;\n      }\n    });\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n\n    \r\n    aSubSchemaMap.put(\"b1\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(0));\n    assertThat(aSchema.getSubSchema(\"b1\"), nullValue());\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n    assertThat(aSchema.getSubSchema(\"b1\"), notNullValue());\n\n    \r\n    aSubSchemaMap.put(\"b2\", new AbstractSchema());\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n\n    \r\n    aSchema.setCacheEnabled(true);\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n    aSchema.add(\"b3\", new AbstractSchema()); \r\n    aSubSchemaMap.put(\"b4\", new AbstractSchema()); \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(3));\n    aSchema.setCacheEnabled(false);\n    assertThat(aSchema.getSubSchemaNames().size(), is(4));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final Map<String, Schema> a2SubSchemaMap = new HashMap<>();\n    final SchemaPlus a2Schema = rootSchema.add(\"a\", new AbstractSchema() {\n      @Override protected Map<String, Schema> getSubSchemaMap() {\n        return a2SubSchemaMap;\n      }\n    });\n    a2Schema.setCacheEnabled(true);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n\n    \r\n    a2SubSchemaMap.put(\"b3\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n    Thread.sleep(1);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(0));\n\n    \r\n    a2Schema.setCacheEnabled(false);\n    assertThat(a2Schema.getSubSchemaNames().size(), is(1));\n    a2SubSchemaMap.put(\"b4\", new AbstractSchema());\n    assertThat(a2Schema.getSubSchemaNames().size(), is(2));\n    for (String name : aSchema.getSubSchemaNames()) {\n      assertThat(aSchema.getSubSchema(name), notNullValue());\n    }\n\n    \r\n    final TableInRootSchemaTest.SimpleTable table =\n        new TableInRootSchemaTest.SimpleTable();\n    a2Schema.add(\"table1\", table);\n    a2Schema.add(\"TABLE1\", table);\n    a2Schema.add(\"tabLe1\", table);\n    a2Schema.add(\"tabLe2\", table);\n    assertThat(a2Schema.getTableNames().size(), equalTo(4));\n    final CalciteSchema a2CalciteSchema = CalciteSchema.from(a2Schema);\n    assertThat(a2CalciteSchema.getTable(\"table1\", true), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"table1\", false), notNullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", true), nullValue());\n    assertThat(a2CalciteSchema.getTable(\"taBle1\", false), notNullValue());\n    final TableMacro function =\n        ViewTable.viewMacro(a2Schema, \"values 1\", null, null, null);\n    Util.discard(function);\n\n    connection.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6666,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
