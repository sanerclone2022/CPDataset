[{"authorTime":"2018-12-26 06:50:58","codes":[{"authorDate":"2018-12-26 06:50:58","commitOrder":1,"curCode":"  @Test public void convertAutomaton() {\n    final Pattern.PatternBuilder builder = Pattern.builder();\n    final Pattern pattern = builder.symbol(\"A\")\n        .repeat(1, 2)\n        .build();\n    final Automaton automaton = pattern.toAutomaton();\n\n    final DeterministicAutomaton da =\n        new DeterministicAutomaton(automaton);\n\n    assertThat(da.startState,\n        is(\n            new DeterministicAutomaton.MultiState(new Automaton.State(0),\n                new Automaton.State(2))));\n\n    \r\n    \r\n    \r\n    assertThat(da.getTransitions().size(), is(2));\n    assertThat(da.getEndStates().size(), is(2));\n  }\n","date":"2019-08-12 16:43:42","endLine":46,"groupId":"9313","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"convertAutomaton","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/02b95fb91ab60235e50e225418b9f0a87aab9c.src","preCode":"  @Test public void convertAutomaton() {\n    final Pattern.PatternBuilder builder = Pattern.builder();\n    final Pattern pattern = builder.symbol(\"A\")\n        .repeat(1, 2)\n        .build();\n    final Automaton automaton = pattern.toAutomaton();\n\n    final DeterministicAutomaton da =\n        new DeterministicAutomaton(automaton);\n\n    assertThat(da.startState,\n        is(\n            new DeterministicAutomaton.MultiState(new Automaton.State(0),\n                new Automaton.State(2))));\n\n    \r\n    \r\n    \r\n    assertThat(da.getTransitions().size(), is(2));\n    assertThat(da.getEndStates().size(), is(2));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/DeterministicAutomatonTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":26,"status":"B"},{"authorDate":"2018-12-26 06:50:58","commitOrder":1,"curCode":"  @Test public void convertAutomaton2() {\n    final Pattern.PatternBuilder builder = Pattern.builder();\n    final Pattern pattern = builder\n        .symbol(\"A\")\n        .symbol(\"B\")\n        .or()\n        .build();\n    final Automaton automaton = pattern.toAutomaton();\n\n    final DeterministicAutomaton da =\n        new DeterministicAutomaton(automaton);\n\n    \r\n    \r\n    \r\n    \r\n    assertThat(da.getTransitions().size(), is(2));\n    assertThat(da.getEndStates().size(), is(1));\n  }\n","date":"2019-08-12 16:43:42","endLine":66,"groupId":"3040","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"convertAutomaton2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/02b95fb91ab60235e50e225418b9f0a87aab9c.src","preCode":"  @Test public void convertAutomaton2() {\n    final Pattern.PatternBuilder builder = Pattern.builder();\n    final Pattern pattern = builder\n        .symbol(\"A\")\n        .symbol(\"B\")\n        .or()\n        .build();\n    final Automaton automaton = pattern.toAutomaton();\n\n    final DeterministicAutomaton da =\n        new DeterministicAutomaton(automaton);\n\n    \r\n    \r\n    \r\n    \r\n    assertThat(da.getTransitions().size(), is(2));\n    assertThat(da.getEndStates().size(), is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/DeterministicAutomatonTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"5ec3a2a503dcf26fe1b3cad8a5a9467264213dcf","commitMessage":"@@@[CALCITE-1935] Implement MATCH_RECOGNIZE.  part 3: get it working (Julian Feinauer)\n\nAdd support for OR (\"|\") and OPTIONAL (\"?\") patterns.\n\nTranslate eps-NFA to DFA.  and implement Matcher based on DFA.\n\nFixed a Bug in RexImpTable to make the minimal example work.\n\nClose apache/calcite#1343\n","date":"2019-08-12 16:43:42","modifiedFileCount":"25","status":"B","submitter":"Julian Feinauer"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void convertAutomaton() {\n    final Pattern.PatternBuilder builder = Pattern.builder();\n    final Pattern pattern = builder.symbol(\"A\")\n        .repeat(1, 2)\n        .build();\n    final Automaton automaton = pattern.toAutomaton();\n\n    final DeterministicAutomaton da =\n        new DeterministicAutomaton(automaton);\n\n    assertThat(da.startState,\n        is(\n            new DeterministicAutomaton.MultiState(new Automaton.State(0),\n                new Automaton.State(2))));\n\n    \r\n    \r\n    \r\n    assertThat(da.getTransitions().size(), is(2));\n    assertThat(da.getEndStates().size(), is(2));\n  }\n","date":"2020-04-06 04:57:49","endLine":46,"groupId":"10644","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"convertAutomaton","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d7/4929f60936e15464a69d0690742d5501a2dc35.src","preCode":"  @Test public void convertAutomaton() {\n    final Pattern.PatternBuilder builder = Pattern.builder();\n    final Pattern pattern = builder.symbol(\"A\")\n        .repeat(1, 2)\n        .build();\n    final Automaton automaton = pattern.toAutomaton();\n\n    final DeterministicAutomaton da =\n        new DeterministicAutomaton(automaton);\n\n    assertThat(da.startState,\n        is(\n            new DeterministicAutomaton.MultiState(new Automaton.State(0),\n                new Automaton.State(2))));\n\n    \r\n    \r\n    \r\n    assertThat(da.getTransitions().size(), is(2));\n    assertThat(da.getEndStates().size(), is(2));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/DeterministicAutomatonTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":26,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void convertAutomaton2() {\n    final Pattern.PatternBuilder builder = Pattern.builder();\n    final Pattern pattern = builder\n        .symbol(\"A\")\n        .symbol(\"B\")\n        .or()\n        .build();\n    final Automaton automaton = pattern.toAutomaton();\n\n    final DeterministicAutomaton da =\n        new DeterministicAutomaton(automaton);\n\n    \r\n    \r\n    \r\n    \r\n    assertThat(da.getTransitions().size(), is(2));\n    assertThat(da.getEndStates().size(), is(1));\n  }\n","date":"2020-04-06 04:57:49","endLine":66,"groupId":"10644","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"convertAutomaton2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d7/4929f60936e15464a69d0690742d5501a2dc35.src","preCode":"  @Test public void convertAutomaton2() {\n    final Pattern.PatternBuilder builder = Pattern.builder();\n    final Pattern pattern = builder\n        .symbol(\"A\")\n        .symbol(\"B\")\n        .or()\n        .build();\n    final Automaton automaton = pattern.toAutomaton();\n\n    final DeterministicAutomaton da =\n        new DeterministicAutomaton(automaton);\n\n    \r\n    \r\n    \r\n    \r\n    assertThat(da.getTransitions().size(), is(2));\n    assertThat(da.getEndStates().size(), is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/DeterministicAutomatonTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
