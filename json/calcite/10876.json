[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testIllegalUnicodeEscape() {\n    checkExpFails(\n        \"U&'abc' UESCAPE '!!'\",\n        \".*must be exactly one character.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE ''\",\n        \".*must be exactly one character.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE '0'\",\n        \".*hex digit.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE 'a'\",\n        \".*hex digit.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE 'F'\",\n        \".*hex digit.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE ' '\",\n        \".*whitespace.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE '+'\",\n        \".*plus sign.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE '\\\"'\",\n        \".*double quote.*\");\n    checkExpFails(\n        \"'abc' UESCAPE ^'!'^\",\n        \".*without Unicode literal introducer.*\");\n    checkExpFails(\n        \"^U&'\\\\0A'^\",\n        \".*is not exactly four hex digits.*\");\n    checkExpFails(\n        \"^U&'\\\\wxyz'^\",\n        \".*is not exactly four hex digits.*\");\n  }\n","date":"2014-11-14 09:39:34","endLine":5520,"groupId":"6548","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIllegalUnicodeEscape","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/e977745bb2356d254a45d8c8d3748b6dec754f.src","preCode":"  @Test public void testIllegalUnicodeEscape() {\n    checkExpFails(\n        \"U&'abc' UESCAPE '!!'\",\n        \".*must be exactly one character.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE ''\",\n        \".*must be exactly one character.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE '0'\",\n        \".*hex digit.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE 'a'\",\n        \".*hex digit.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE 'F'\",\n        \".*hex digit.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE ' '\",\n        \".*whitespace.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE '+'\",\n        \".*plus sign.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE '\\\"'\",\n        \".*double quote.*\");\n    checkExpFails(\n        \"'abc' UESCAPE ^'!'^\",\n        \".*without Unicode literal introducer.*\");\n    checkExpFails(\n        \"^U&'\\\\0A'^\",\n        \".*is not exactly four hex digits.*\");\n    checkExpFails(\n        \"^U&'\\\\wxyz'^\",\n        \".*is not exactly four hex digits.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5486,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testCharsetMismatch() {\n    checkWholeExpFails(\n        \"''=_UTF16''\",\n        \"Cannot apply .* to the two different charsets ISO-8859-1 and UTF-16LE\");\n    checkWholeExpFails(\n        \"''<>_UTF16''\",\n        \"(?s).*Cannot apply .* to the two different charsets.*\");\n    checkWholeExpFails(\n        \"''>_UTF16''\",\n        \"(?s).*Cannot apply .* to the two different charsets.*\");\n    checkWholeExpFails(\n        \"''<_UTF16''\",\n        \"(?s).*Cannot apply .* to the two different charsets.*\");\n    checkWholeExpFails(\n        \"''<=_UTF16''\",\n        \"(?s).*Cannot apply .* to the two different charsets.*\");\n    checkWholeExpFails(\n        \"''>=_UTF16''\",\n        \"(?s).*Cannot apply .* to the two different charsets.*\");\n    checkWholeExpFails(\"''||_UTF16''\", ANY);\n    checkWholeExpFails(\"'a'||'b'||_UTF16'c'\", ANY);\n  }\n","date":"2014-11-14 09:39:34","endLine":634,"groupId":"6548","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCharsetMismatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/99443f0f8e3b70c5add71a8c451bf22a3a1e3b.src","preCode":"  @Test public void testCharsetMismatch() {\n    checkWholeExpFails(\n        \"''=_UTF16''\",\n        \"Cannot apply .* to the two different charsets ISO-8859-1 and UTF-16LE\");\n    checkWholeExpFails(\n        \"''<>_UTF16''\",\n        \"(?s).*Cannot apply .* to the two different charsets.*\");\n    checkWholeExpFails(\n        \"''>_UTF16''\",\n        \"(?s).*Cannot apply .* to the two different charsets.*\");\n    checkWholeExpFails(\n        \"''<_UTF16''\",\n        \"(?s).*Cannot apply .* to the two different charsets.*\");\n    checkWholeExpFails(\n        \"''<=_UTF16''\",\n        \"(?s).*Cannot apply .* to the two different charsets.*\");\n    checkWholeExpFails(\n        \"''>=_UTF16''\",\n        \"(?s).*Cannot apply .* to the two different charsets.*\");\n    checkWholeExpFails(\"''||_UTF16''\", ANY);\n    checkWholeExpFails(\"'a'||'b'||_UTF16'c'\", ANY);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":2,"curCode":"  @Test public void testIllegalUnicodeEscape() {\n    expr(\"U&'abc' UESCAPE '!!'\")\n        .fails(\".*must be exactly one character.*\");\n    expr(\"U&'abc' UESCAPE ''\")\n        .fails(\".*must be exactly one character.*\");\n    expr(\"U&'abc' UESCAPE '0'\")\n        .fails(\".*hex digit.*\");\n    expr(\"U&'abc' UESCAPE 'a'\")\n        .fails(\".*hex digit.*\");\n    expr(\"U&'abc' UESCAPE 'F'\")\n        .fails(\".*hex digit.*\");\n    expr(\"U&'abc' UESCAPE ' '\")\n        .fails(\".*whitespace.*\");\n    expr(\"U&'abc' UESCAPE '+'\")\n        .fails(\".*plus sign.*\");\n    expr(\"U&'abc' UESCAPE '\\\"'\")\n        .fails(\".*double quote.*\");\n    expr(\"'abc' UESCAPE ^'!'^\")\n        .fails(\".*without Unicode literal introducer.*\");\n    expr(\"^U&'\\\\0A'^\")\n        .fails(\".*is not exactly four hex digits.*\");\n    expr(\"^U&'\\\\wxyz'^\")\n        .fails(\".*is not exactly four hex digits.*\");\n  }\n","date":"2019-09-24 02:59:18","endLine":7333,"groupId":"15302","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIllegalUnicodeEscape","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testIllegalUnicodeEscape() {\n    checkExpFails(\n        \"U&'abc' UESCAPE '!!'\",\n        \".*must be exactly one character.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE ''\",\n        \".*must be exactly one character.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE '0'\",\n        \".*hex digit.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE 'a'\",\n        \".*hex digit.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE 'F'\",\n        \".*hex digit.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE ' '\",\n        \".*whitespace.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE '+'\",\n        \".*plus sign.*\");\n    checkExpFails(\n        \"U&'abc' UESCAPE '\\\"'\",\n        \".*double quote.*\");\n    checkExpFails(\n        \"'abc' UESCAPE ^'!'^\",\n        \".*without Unicode literal introducer.*\");\n    checkExpFails(\n        \"^U&'\\\\0A'^\",\n        \".*is not exactly four hex digits.*\");\n    checkExpFails(\n        \"^U&'\\\\wxyz'^\",\n        \".*is not exactly four hex digits.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7310,"status":"M"},{"authorDate":"2019-09-07 07:51:19","commitOrder":2,"curCode":"  @Test public void testCharsetMismatch() {\n    wholeExpr(\"''=_UTF16''\")\n        .fails(\"Cannot apply .* to the two different charsets ISO-8859-1 and \"\n            + \"UTF-16LE\");\n    wholeExpr(\"''<>_UTF16''\")\n        .fails(\"(?s).*Cannot apply .* to the two different charsets.*\");\n    wholeExpr(\"''>_UTF16''\")\n        .fails(\"(?s).*Cannot apply .* to the two different charsets.*\");\n    wholeExpr(\"''<_UTF16''\")\n        .fails(\"(?s).*Cannot apply .* to the two different charsets.*\");\n    wholeExpr(\"''<=_UTF16''\")\n        .fails(\"(?s).*Cannot apply .* to the two different charsets.*\");\n    wholeExpr(\"''>=_UTF16''\")\n        .fails(\"(?s).*Cannot apply .* to the two different charsets.*\");\n    wholeExpr(\"''||_UTF16''\")\n        .fails(ANY);\n    wholeExpr(\"'a'||'b'||_UTF16'c'\")\n        .fails(ANY);\n  }\n","date":"2019-09-24 02:59:18","endLine":748,"groupId":"15302","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCharsetMismatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testCharsetMismatch() {\n    checkWholeExpFails(\n        \"''=_UTF16''\",\n        \"Cannot apply .* to the two different charsets ISO-8859-1 and UTF-16LE\");\n    checkWholeExpFails(\n        \"''<>_UTF16''\",\n        \"(?s).*Cannot apply .* to the two different charsets.*\");\n    checkWholeExpFails(\n        \"''>_UTF16''\",\n        \"(?s).*Cannot apply .* to the two different charsets.*\");\n    checkWholeExpFails(\n        \"''<_UTF16''\",\n        \"(?s).*Cannot apply .* to the two different charsets.*\");\n    checkWholeExpFails(\n        \"''<=_UTF16''\",\n        \"(?s).*Cannot apply .* to the two different charsets.*\");\n    checkWholeExpFails(\n        \"''>=_UTF16''\",\n        \"(?s).*Cannot apply .* to the two different charsets.*\");\n    checkWholeExpFails(\"''||_UTF16''\", ANY);\n    checkWholeExpFails(\"'a'||'b'||_UTF16'c'\", ANY);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":730,"status":"M"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testIllegalUnicodeEscape() {\n    expr(\"U&'abc' UESCAPE '!!'\")\n        .fails(\".*must be exactly one character.*\");\n    expr(\"U&'abc' UESCAPE ''\")\n        .fails(\".*must be exactly one character.*\");\n    expr(\"U&'abc' UESCAPE '0'\")\n        .fails(\".*hex digit.*\");\n    expr(\"U&'abc' UESCAPE 'a'\")\n        .fails(\".*hex digit.*\");\n    expr(\"U&'abc' UESCAPE 'F'\")\n        .fails(\".*hex digit.*\");\n    expr(\"U&'abc' UESCAPE ' '\")\n        .fails(\".*whitespace.*\");\n    expr(\"U&'abc' UESCAPE '+'\")\n        .fails(\".*plus sign.*\");\n    expr(\"U&'abc' UESCAPE '\\\"'\")\n        .fails(\".*double quote.*\");\n    expr(\"'abc' UESCAPE ^'!'^\")\n        .fails(\".*without Unicode literal introducer.*\");\n    expr(\"^U&'\\\\0A'^\")\n        .fails(\".*is not exactly four hex digits.*\");\n    expr(\"^U&'\\\\wxyz'^\")\n        .fails(\".*is not exactly four hex digits.*\");\n  }\n","date":"2020-04-06 04:57:49","endLine":7457,"groupId":"10876","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIllegalUnicodeEscape","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testIllegalUnicodeEscape() {\n    expr(\"U&'abc' UESCAPE '!!'\")\n        .fails(\".*must be exactly one character.*\");\n    expr(\"U&'abc' UESCAPE ''\")\n        .fails(\".*must be exactly one character.*\");\n    expr(\"U&'abc' UESCAPE '0'\")\n        .fails(\".*hex digit.*\");\n    expr(\"U&'abc' UESCAPE 'a'\")\n        .fails(\".*hex digit.*\");\n    expr(\"U&'abc' UESCAPE 'F'\")\n        .fails(\".*hex digit.*\");\n    expr(\"U&'abc' UESCAPE ' '\")\n        .fails(\".*whitespace.*\");\n    expr(\"U&'abc' UESCAPE '+'\")\n        .fails(\".*plus sign.*\");\n    expr(\"U&'abc' UESCAPE '\\\"'\")\n        .fails(\".*double quote.*\");\n    expr(\"'abc' UESCAPE ^'!'^\")\n        .fails(\".*without Unicode literal introducer.*\");\n    expr(\"^U&'\\\\0A'^\")\n        .fails(\".*is not exactly four hex digits.*\");\n    expr(\"^U&'\\\\wxyz'^\")\n        .fails(\".*is not exactly four hex digits.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7434,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testCharsetMismatch() {\n    wholeExpr(\"''=_UTF16''\")\n        .fails(\"Cannot apply .* to the two different charsets ISO-8859-1 and \"\n            + \"UTF-16LE\");\n    wholeExpr(\"''<>_UTF16''\")\n        .fails(\"(?s).*Cannot apply .* to the two different charsets.*\");\n    wholeExpr(\"''>_UTF16''\")\n        .fails(\"(?s).*Cannot apply .* to the two different charsets.*\");\n    wholeExpr(\"''<_UTF16''\")\n        .fails(\"(?s).*Cannot apply .* to the two different charsets.*\");\n    wholeExpr(\"''<=_UTF16''\")\n        .fails(\"(?s).*Cannot apply .* to the two different charsets.*\");\n    wholeExpr(\"''>=_UTF16''\")\n        .fails(\"(?s).*Cannot apply .* to the two different charsets.*\");\n    wholeExpr(\"''||_UTF16''\")\n        .fails(ANY);\n    wholeExpr(\"'a'||'b'||_UTF16'c'\")\n        .fails(ANY);\n  }\n","date":"2020-04-06 04:57:49","endLine":748,"groupId":"10876","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCharsetMismatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testCharsetMismatch() {\n    wholeExpr(\"''=_UTF16''\")\n        .fails(\"Cannot apply .* to the two different charsets ISO-8859-1 and \"\n            + \"UTF-16LE\");\n    wholeExpr(\"''<>_UTF16''\")\n        .fails(\"(?s).*Cannot apply .* to the two different charsets.*\");\n    wholeExpr(\"''>_UTF16''\")\n        .fails(\"(?s).*Cannot apply .* to the two different charsets.*\");\n    wholeExpr(\"''<_UTF16''\")\n        .fails(\"(?s).*Cannot apply .* to the two different charsets.*\");\n    wholeExpr(\"''<=_UTF16''\")\n        .fails(\"(?s).*Cannot apply .* to the two different charsets.*\");\n    wholeExpr(\"''>=_UTF16''\")\n        .fails(\"(?s).*Cannot apply .* to the two different charsets.*\");\n    wholeExpr(\"''||_UTF16''\")\n        .fails(ANY);\n    wholeExpr(\"'a'||'b'||_UTF16'c'\")\n        .fails(ANY);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":730,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
