[{"authorTime":"2015-05-28 16:57:36","codes":[{"authorDate":"2015-05-28 16:57:36","commitOrder":1,"curCode":"  @Test public void testLocalPreparedStatementFetch() throws Exception {\n    Connection conn = makeConnection();\n    assertThat(conn.isClosed(), is(false));\n    String sql = \"select * from \\\"foo\\\".\\\"bar\\\"\";\n    PreparedStatement preparedStatement = conn.prepareStatement(sql);\n    assertThat(conn.isClosed(), is(false));\n    boolean status = preparedStatement.execute();\n    assertThat(status, is(true));\n    ResultSet resultSet = preparedStatement.getResultSet();\n    assertThat(resultSet, notNullValue());\n    int count = 0;\n    while (resultSet.next()) {\n      assertThat(resultSet.getObject(1), notNullValue());\n      count += 1;\n    }\n    assertThat(count, is(101));\n  }\n","date":"2015-10-16 15:58:24","endLine":540,"groupId":"2870","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalPreparedStatementFetch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d4/3e5d20615f6fbf812f5b0a3e93a6fe032fe9d9.src","preCode":"  @Test public void testLocalPreparedStatementFetch() throws Exception {\n    Connection conn = makeConnection();\n    assertThat(conn.isClosed(), is(false));\n    String sql = \"select * from \\\"foo\\\".\\\"bar\\\"\";\n    PreparedStatement preparedStatement = conn.prepareStatement(sql);\n    assertThat(conn.isClosed(), is(false));\n    boolean status = preparedStatement.execute();\n    assertThat(status, is(true));\n    ResultSet resultSet = preparedStatement.getResultSet();\n    assertThat(resultSet, notNullValue());\n    int count = 0;\n    while (resultSet.next()) {\n      assertThat(resultSet.getObject(1), notNullValue());\n      count += 1;\n    }\n    assertThat(count, is(101));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":524,"status":"B"},{"authorDate":"2015-05-28 16:57:36","commitOrder":1,"curCode":"  @Test public void testRemotePreparedStatementFetch() throws Exception {\n    final Connection connection = DriverManager.getConnection(\n        \"jdbc:avatica:remote:factory=\" + LocalServiceMoreFactory.class.getName());\n    assertThat(connection.isClosed(), is(false));\n\n    String sql = \"select * from \\\"foo\\\".\\\"bar\\\"\";\n    PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    assertThat(preparedStatement.isClosed(), is(false));\n\n    boolean status = preparedStatement.execute();\n    assertThat(status, is(true));\n    ResultSet resultSet = preparedStatement.getResultSet();\n    assertThat(resultSet, notNullValue());\n\n    int count = 0;\n    while (resultSet.next()) {\n      assertThat(resultSet.getObject(1), notNullValue());\n      count += 1;\n    }\n    assertThat(count, is(101));\n  }\n","date":"2015-10-16 15:58:24","endLine":577,"groupId":"2870","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemotePreparedStatementFetch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d4/3e5d20615f6fbf812f5b0a3e93a6fe032fe9d9.src","preCode":"  @Test public void testRemotePreparedStatementFetch() throws Exception {\n    final Connection connection = DriverManager.getConnection(\n        \"jdbc:avatica:remote:factory=\" + LocalServiceMoreFactory.class.getName());\n    assertThat(connection.isClosed(), is(false));\n\n    String sql = \"select * from \\\"foo\\\".\\\"bar\\\"\";\n    PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    assertThat(preparedStatement.isClosed(), is(false));\n\n    boolean status = preparedStatement.execute();\n    assertThat(status, is(true));\n    ResultSet resultSet = preparedStatement.getResultSet();\n    assertThat(resultSet, notNullValue());\n\n    int count = 0;\n    while (resultSet.next()) {\n      assertThat(resultSet.getObject(1), notNullValue());\n      count += 1;\n    }\n    assertThat(count, is(101));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":557,"status":"B"}],"commitId":"cee8e8448c314753dacda8f880fac2bcab701f08","commitMessage":"@@@[CALCITE-705] DML in Avatica.  and split Execute out from Fetch request (Yeong Wei)\n\nAdd support for DML statements (INSERT.  UPDATE.  DELETE). \nStatement.executeUpdate returns int update count.\n\nAdd new 'Execute' request that binds parameters. This used to occur\nimplicitly during first Fetch; Fetch no longer takes parameters.\n\nAdd statement type. If signature is null then defaults to\nMeta.StatementType.SELECT.\n\nAdd testRemoteStatementInsert for JSON and PROTOBUF serialization test.\n\nIn JsonHandlerTest.  replace testFetchRequestWithNumberParameter\nwith testExecuteRequestWithNumberParameter.\n\nCosmetic fix-ups by Julian Hyde.\n\nClose apache/incubator-calcite#145\nClose apache/incubator-calcite#154\n","date":"2015-10-16 15:58:24","modifiedFileCount":"30","status":"B","submitter":"YeongWei"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testLocalPreparedStatementFetch() throws Exception {\n    Connection conn = makeConnection();\n    assertThat(conn.isClosed(), is(false));\n    String sql = \"select * from \\\"foo\\\".\\\"bar\\\"\";\n    PreparedStatement preparedStatement = conn.prepareStatement(sql);\n    assertThat(conn.isClosed(), is(false));\n    boolean status = preparedStatement.execute();\n    assertThat(status, is(true));\n    ResultSet resultSet = preparedStatement.getResultSet();\n    assertThat(resultSet, notNullValue());\n    int count = 0;\n    while (resultSet.next()) {\n      assertThat(resultSet.getObject(1), notNullValue());\n      count += 1;\n    }\n    assertThat(count, is(101));\n  }\n","date":"2020-04-06 04:57:49","endLine":574,"groupId":"10678","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalPreparedStatementFetch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/46/9f7b82fa165ba21387f1308443e84237ce242d.src","preCode":"  @Test public void testLocalPreparedStatementFetch() throws Exception {\n    Connection conn = makeConnection();\n    assertThat(conn.isClosed(), is(false));\n    String sql = \"select * from \\\"foo\\\".\\\"bar\\\"\";\n    PreparedStatement preparedStatement = conn.prepareStatement(sql);\n    assertThat(conn.isClosed(), is(false));\n    boolean status = preparedStatement.execute();\n    assertThat(status, is(true));\n    ResultSet resultSet = preparedStatement.getResultSet();\n    assertThat(resultSet, notNullValue());\n    int count = 0;\n    while (resultSet.next()) {\n      assertThat(resultSet.getObject(1), notNullValue());\n      count += 1;\n    }\n    assertThat(count, is(101));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":558,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testRemotePreparedStatementFetch() throws Exception {\n    final Connection connection = DriverManager.getConnection(\n        \"jdbc:avatica:remote:factory=\" + LocalServiceMoreFactory.class.getName());\n    assertThat(connection.isClosed(), is(false));\n\n    String sql = \"select * from \\\"foo\\\".\\\"bar\\\"\";\n    PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    assertThat(preparedStatement.isClosed(), is(false));\n\n    boolean status = preparedStatement.execute();\n    assertThat(status, is(true));\n    ResultSet resultSet = preparedStatement.getResultSet();\n    assertThat(resultSet, notNullValue());\n\n    int count = 0;\n    while (resultSet.next()) {\n      assertThat(resultSet.getObject(1), notNullValue());\n      count += 1;\n    }\n    assertThat(count, is(101));\n  }\n","date":"2020-04-06 04:57:49","endLine":611,"groupId":"10678","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemotePreparedStatementFetch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/46/9f7b82fa165ba21387f1308443e84237ce242d.src","preCode":"  @Test public void testRemotePreparedStatementFetch() throws Exception {\n    final Connection connection = DriverManager.getConnection(\n        \"jdbc:avatica:remote:factory=\" + LocalServiceMoreFactory.class.getName());\n    assertThat(connection.isClosed(), is(false));\n\n    String sql = \"select * from \\\"foo\\\".\\\"bar\\\"\";\n    PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    assertThat(preparedStatement.isClosed(), is(false));\n\n    boolean status = preparedStatement.execute();\n    assertThat(status, is(true));\n    ResultSet resultSet = preparedStatement.getResultSet();\n    assertThat(resultSet, notNullValue());\n\n    int count = 0;\n    while (resultSet.next()) {\n      assertThat(resultSet.getObject(1), notNullValue());\n      count += 1;\n    }\n    assertThat(count, is(101));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
