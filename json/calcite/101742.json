[{"authorTime":"2020-02-09 14:35:35","codes":[{"authorDate":"2019-12-24 15:48:25","commitOrder":2,"curCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    return true;\n  }\n","date":"2020-05-09 20:23:46","endLine":60,"groupId":"15440","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e3/a5001618708e48d88f017843f343d42f125bc1.src","preCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlTumbleTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"NB"},{"authorDate":"2020-02-09 14:35:35","commitOrder":2,"curCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final SqlNode operand2 = callBinding.operand(2);\n    if (operand2.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand2).getOperandList());\n    final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n    if (!SqlTypeUtil.isInterval(type3)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    return true;\n  }\n","date":"2020-05-09 20:23:46","endLine":65,"groupId":"15440","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fe/f50cc0398656691fb944af7832b76ac53d0501.src","preCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final SqlNode operand2 = callBinding.operand(2);\n    if (operand2.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand2).getOperandList());\n    final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n    if (!SqlTypeUtil.isInterval(type3)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSessionTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"}],"commitId":"890eb61efcccc486e2192110cefe4cac5aa6f150","commitMessage":"@@@[CALCITE-3780] SESSION Table function (Rui Wang)\n","date":"2020-05-09 20:23:46","modifiedFileCount":"9","status":"M","submitter":"amaliujia"},{"authorTime":"2020-02-09 14:35:35","codes":[{"authorDate":"2020-05-16 12:15:17","commitOrder":3,"curCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    if (callBinding.getOperandCount() > 3) {\n      final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n      if (!SqlTypeUtil.isInterval(type3)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n    }\n    return true;\n  }\n","date":"2020-07-16 14:09:25","endLine":68,"groupId":"15440","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/75/f746d0e1a047c42f3e300fc56456f0d175f167.src","preCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlTumbleTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2020-02-09 14:35:35","commitOrder":3,"curCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final SqlNode operand2 = callBinding.operand(2);\n    if (operand2.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand2).getOperandList());\n    final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n    if (!SqlTypeUtil.isInterval(type3)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    return true;\n  }\n","date":"2020-05-09 20:23:46","endLine":65,"groupId":"15440","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fe/f50cc0398656691fb944af7832b76ac53d0501.src","preCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final SqlNode operand2 = callBinding.operand(2);\n    if (operand2.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand2).getOperandList());\n    final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n    if (!SqlTypeUtil.isInterval(type3)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSessionTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"}],"commitId":"9accb166b50417763a34a1d5664ab23ae12716fd","commitMessage":"@@@[CALCITE-4000] Support OFFSET parameter in TUMBLE/HOP table functions (Rui Wang)\n","date":"2020-07-16 14:09:25","modifiedFileCount":"7","status":"M","submitter":"amaliujia"},{"authorTime":"2020-08-17 13:44:41","codes":[{"authorDate":"2020-05-16 12:15:17","commitOrder":4,"curCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    if (callBinding.getOperandCount() > 3) {\n      final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n      if (!SqlTypeUtil.isInterval(type3)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n    }\n    return true;\n  }\n","date":"2020-07-16 14:09:25","endLine":68,"groupId":"15440","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/75/f746d0e1a047c42f3e300fc56456f0d175f167.src","preCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    if (callBinding.getOperandCount() > 3) {\n      final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n      if (!SqlTypeUtil.isInterval(type3)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlTumbleTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"},{"authorDate":"2020-08-17 13:44:41","commitOrder":4,"curCode":"    @Override public boolean checkOperandTypes(\n        SqlCallBinding callBinding, boolean throwOnFailure) {\n      final SqlValidator validator = callBinding.getValidator();\n      if (!validateTableWithFollowingDescriptors(callBinding, 2)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n      if (!SqlTypeUtil.isInterval(type3)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      return true;\n    }\n","date":"2020-08-18 16:52:00","endLine":68,"groupId":"15440","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/61/a2ba6311e3190ce914534b9f2e3c79bc23f092.src","preCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final SqlNode operand2 = callBinding.operand(2);\n    if (operand2.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand2).getOperandList());\n    final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n    if (!SqlTypeUtil.isInterval(type3)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSessionTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"e84f635020a6c3653b4f1456d64edb86efb2fea8","commitMessage":"@@@[CALCITE-4171] Support named parameters for table window functions\n\n* Changes SqlArgumentAssignmentOperator to allow non-scala query as operand\n* In SqlCallBinding.  matches the permuted operand by name with name matcher\n* Refactor SqlWindowTableFunction and its sub-class to reuse same logic\n* Do not patch up the SqlWindowTableFunction with DEFAULTs when sql validation\n","date":"2020-08-18 16:52:00","modifiedFileCount":"11","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-08-19 06:46:23","codes":[{"authorDate":"2020-05-16 12:15:17","commitOrder":5,"curCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    if (callBinding.getOperandCount() > 3) {\n      final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n      if (!SqlTypeUtil.isInterval(type3)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n    }\n    return true;\n  }\n","date":"2020-07-16 14:09:25","endLine":68,"groupId":"15440","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/75/f746d0e1a047c42f3e300fc56456f0d175f167.src","preCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    if (callBinding.getOperandCount() > 3) {\n      final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n      if (!SqlTypeUtil.isInterval(type3)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlTumbleTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"},{"authorDate":"2020-08-19 06:46:23","commitOrder":5,"curCode":"    @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n        boolean throwOnFailure) {\n      final SqlValidator validator = callBinding.getValidator();\n      if (!checkTableAndDescriptorOperands(callBinding, 2)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n      if (!SqlTypeUtil.isInterval(type3)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      return true;\n    }\n","date":"2020-08-21 09:42:44","endLine":59,"groupId":"15440","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f8/2560f7aedadee49fb8ab59db961517dde8c696.src","preCode":"    @Override public boolean checkOperandTypes(\n        SqlCallBinding callBinding, boolean throwOnFailure) {\n      final SqlValidator validator = callBinding.getValidator();\n      if (!validateTableWithFollowingDescriptors(callBinding, 2)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n      if (!SqlTypeUtil.isInterval(type3)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      return true;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSessionTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"39cf82b8bf94b9240fe4592706d8eeb2952712f0","commitMessage":"@@@[CALCITE-2082] Do not store types or type factories inside operators\n\nRationale: A SqlOperator has a lifetime that spans several\nstatements; but a type factory is only for one statement.  and\neach type belongs to that factory. We want to share\nSqlOperator instances across statements and connections. \ntherefore we need to create them before there is a type\nfactory.\n\nIn particular:\n* Remove (deprecate) method\n  `List<RelDataType> SqlOperator.getParamTypes()`;\n* Remove `RelDataTypeFactory` argument from\n  `SqlUserDefinedAggFunction` constructor.  and remove its\n  `typeFactory` field.\n* Add `interface SqlOperandMetadata extends\n  SqlOperatorTypeChecker`.  which has new methods\n  `List<RelDataType>> paramTypes(RelDataTypeFactory)`\n  and `List<String> paramNames()`.\n\nThe `SqlOperandMetadata` interface will typically be\nimplemented only for user-defined functions. Unlike SQL\nbuilt-in functions.  UDFs have a fixed set of parameters\n(although some of them may be optional).  and the parameters\nhave names.\n\nIn `interface SqlOperandTypeChecker`.  add method `boolean\nisFixedParameters()`. Will typically return true for UDFs. \nfalse for built-in functions. Returns false for table window\nfunctions (e.g. HOP).  even though these have named parameters\n(which tends to make them look a bit like UDFs).\n\nFollowing [CALCITE-4171].  change `instanceof SqlWindowTableFunction`\nto `checker.isFixedParameters()`.  because it is less specific.\n\nAdd `SqlKind` argument to UDF constructors; we will populate it\nusing Java annotations in [CALCITE-1861].\n","date":"2020-08-21 09:42:44","modifiedFileCount":"21","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-22 20:08:53","codes":[{"authorDate":"2020-09-22 20:08:53","commitOrder":6,"curCode":"    @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n        boolean throwOnFailure) {\n      \r\n      \r\n      if (!checkTableAndDescriptorOperands(callBinding, 1)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      if (!checkTimeColumnDescriptorOperand(callBinding, 1)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      if (!checkIntervalOperands(callBinding, 2)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      return true;\n    }\n","date":"2020-09-28 01:45:06","endLine":59,"groupId":"101742","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/25/a857414e191b13fadf62e6e108172ef12ca0c8.src","preCode":"  @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    \r\n    \r\n    final SqlNode operand0 = callBinding.operand(0);\n    final SqlValidator validator = callBinding.getValidator();\n    final RelDataType type = validator.getValidatedNodeType(operand0);\n    if (type.getSqlTypeName() != SqlTypeName.ROW) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    final SqlNode operand1 = callBinding.operand(1);\n    if (operand1.getKind() != SqlKind.DESCRIPTOR) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    validateColumnNames(validator, type.getFieldNames(), ((SqlCall) operand1).getOperandList());\n    final RelDataType type2 = validator.getValidatedNodeType(callBinding.operand(2));\n    if (!SqlTypeUtil.isInterval(type2)) {\n      return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n    }\n    if (callBinding.getOperandCount() > 3) {\n      final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n      if (!SqlTypeUtil.isInterval(type3)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlTumbleTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2020-09-22 20:08:53","commitOrder":6,"curCode":"    @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n        boolean throwOnFailure) {\n      if (!checkTableAndDescriptorOperands(callBinding, 1)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      if (!checkTimeColumnDescriptorOperand(callBinding, 1)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n\n      final SqlValidator validator = callBinding.getValidator();\n      final SqlNode operand2 = callBinding.operand(2);\n      final RelDataType type2 = validator.getValidatedNodeType(operand2);\n      if (operand2.getKind() == SqlKind.DESCRIPTOR) {\n        final SqlNode operand0 = callBinding.operand(0);\n        final RelDataType type = validator.getValidatedNodeType(operand0);\n        validateColumnNames(\n            validator, type.getFieldNames(), ((SqlCall) operand2).getOperandList());\n      } else if (!SqlTypeUtil.isInterval(type2)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      if (callBinding.getOperandCount() > 3) {\n        final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n        if (!SqlTypeUtil.isInterval(type3)) {\n          return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n        }\n      }\n      return true;\n    }\n","date":"2020-09-28 01:45:06","endLine":76,"groupId":"101742","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c0/31dea217f66ea9d867c3b0b75f4cf3c596ae96.src","preCode":"    @Override public boolean checkOperandTypes(SqlCallBinding callBinding,\n        boolean throwOnFailure) {\n      final SqlValidator validator = callBinding.getValidator();\n      if (!checkTableAndDescriptorOperands(callBinding, 2)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      final RelDataType type3 = validator.getValidatedNodeType(callBinding.operand(3));\n      if (!SqlTypeUtil.isInterval(type3)) {\n        return throwValidationSignatureErrorOrReturnFalse(callBinding, throwOnFailure);\n      }\n      return true;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSessionTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"d701495640df77992b43093422e9331de103d9fd","commitMessage":"@@@[CALCITE-4176] Key descriptor can be optional in SESSION table function\n\nFix style\n\nFix style\n\nAdding tests to check time column for TUMBLE/HOP table function\n\nFix style\n","date":"2020-09-28 01:45:06","modifiedFileCount":"5","status":"M","submitter":"davonliu"}]
