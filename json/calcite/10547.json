[{"authorTime":"2016-02-19 03:49:20","codes":[{"authorDate":"2016-11-03 13:30:04","commitOrder":2,"curCode":"    private String translateBinary2(String op, RexNode left, RexNode right) {\n      switch (right.getKind()) {\n      case LITERAL:\n        break;\n      default:\n        return null;\n      }\n\n      final RexLiteral rightLiteral = (RexLiteral) right;\n      switch (left.getKind()) {\n      case INPUT_REF:\n        final RexInputRef left1 = (RexInputRef) left;\n        String name = fieldNames.get(left1.getIndex());\n        return translateOp2(op, name, rightLiteral);\n      case CAST:\n        \r\n        return translateBinary2(op, ((RexCall) left).operands.get(0), right);\n      case OTHER_FUNCTION:\n        String item = left.accept(new GeodeRules.RexToGeodeTranslator(this.fieldNames));\n        return (item == null) ? null : item + \" \" + op + \" \" + quoteCharLiteral(rightLiteral);\n      default:\n        return null;\n      }\n    }\n","date":"2018-02-17 02:18:02","endLine":212,"groupId":"15834","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"translateBinary2","params":"(Stringop@RexNodeleft@RexNoderight)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e4/e5ac9751d7cca1704277f1bff61eadde01da35.src","preCode":"    private String translateBinary2(String op, RexNode left, RexNode right) {\n      switch (right.getKind()) {\n      case LITERAL:\n        break;\n      default:\n        return null;\n      }\n\n      final RexLiteral rightLiteral = (RexLiteral) right;\n      switch (left.getKind()) {\n      case INPUT_REF:\n        final RexInputRef left1 = (RexInputRef) left;\n        String name = fieldNames.get(left1.getIndex());\n        return translateOp2(op, name, rightLiteral);\n      case CAST:\n        \r\n        return translateBinary2(op, ((RexCall) left).operands.get(0), right);\n      case OTHER_FUNCTION:\n        String item = left.accept(new GeodeRules.RexToGeodeTranslator(this.fieldNames));\n        return (item == null) ? null : item + \" \" + op + \" \" + quoteCharLiteral(rightLiteral);\n      default:\n        return null;\n      }\n    }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeFilter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"B"},{"authorDate":"2016-02-19 03:49:20","commitOrder":2,"curCode":"    private String translateBinary2(String op, RexNode left, RexNode right) {\n      switch (right.getKind()) {\n      case LITERAL:\n        break;\n      default:\n        return null;\n      }\n      final RexLiteral rightLiteral = (RexLiteral) right;\n      switch (left.getKind()) {\n      case INPUT_REF:\n        final RexInputRef left1 = (RexInputRef) left;\n        String name = fieldNames.get(left1.getIndex());\n        return translateOp2(op, name, rightLiteral);\n      case CAST:\n        \r\n        return translateBinary2(op, ((RexCall) left).operands.get(0), right);\n      default:\n        return null;\n      }\n    }\n","date":"2016-02-19 13:16:50","endLine":255,"groupId":"15834","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"translateBinary2","params":"(Stringop@RexNodeleft@RexNoderight)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/eb3ad506addf6398ff2c5995115f34f74912eb.src","preCode":"    private String translateBinary2(String op, RexNode left, RexNode right) {\n      switch (right.getKind()) {\n      case LITERAL:\n        break;\n      default:\n        return null;\n      }\n      final RexLiteral rightLiteral = (RexLiteral) right;\n      switch (left.getKind()) {\n      case INPUT_REF:\n        final RexInputRef left1 = (RexInputRef) left;\n        String name = fieldNames.get(left1.getIndex());\n        return translateOp2(op, name, rightLiteral);\n      case CAST:\n        \r\n        return translateBinary2(op, ((RexCall) left).operands.get(0), right);\n      default:\n        return null;\n      }\n    }\n","realPath":"cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraFilter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"NB"}],"commitId":"707f4de9cafc474d0daf807b1e4c339f6eb42d7e","commitMessage":"@@@[CALCITE-2059] Apache Geode Adapter (Christian Tzolov)\n\n- Downgrade Geode from 1.4.0 to 1.3.0 - Geode server allows connections\n  only from clients with same or lower version\n- Add links to presentations and tutorials\n\nClose apache/calcite#581\n","date":"2018-02-17 02:18:02","modifiedFileCount":"0","status":"M","submitter":"Christian Tzolov"},{"authorTime":"2016-02-19 03:49:20","codes":[{"authorDate":"2019-10-01 08:53:56","commitOrder":3,"curCode":"    private String translateBinary2(String op, RexNode left, RexNode right) {\n      switch (right.getKind()) {\n      case LITERAL:\n        break;\n      default:\n        return null;\n      }\n\n      final RexLiteral rightLiteral = (RexLiteral) right;\n      switch (left.getKind()) {\n      case INPUT_REF:\n        final RexInputRef left1 = (RexInputRef) left;\n        String name = fieldNames.get(left1.getIndex());\n        return translateOp2(op, name, rightLiteral);\n      case CAST:\n        \r\n        return translateBinary2(op, ((RexCall) left).operands.get(0), right);\n      case ITEM:\n        String item = left.accept(new GeodeRules.RexToGeodeTranslator(this.fieldNames));\n        return (item == null) ? null : item + \" \" + op + \" \" + quoteCharLiteral(rightLiteral);\n      default:\n        return null;\n      }\n    }\n","date":"2019-10-28 14:28:09","endLine":376,"groupId":"10547","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"translateBinary2","params":"(Stringop@RexNodeleft@RexNoderight)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/21/de0ca5471bc7597b8da83b0adbc2ac31a40f98.src","preCode":"    private String translateBinary2(String op, RexNode left, RexNode right) {\n      switch (right.getKind()) {\n      case LITERAL:\n        break;\n      default:\n        return null;\n      }\n\n      final RexLiteral rightLiteral = (RexLiteral) right;\n      switch (left.getKind()) {\n      case INPUT_REF:\n        final RexInputRef left1 = (RexInputRef) left;\n        String name = fieldNames.get(left1.getIndex());\n        return translateOp2(op, name, rightLiteral);\n      case CAST:\n        \r\n        return translateBinary2(op, ((RexCall) left).operands.get(0), right);\n      case OTHER_FUNCTION:\n        String item = left.accept(new GeodeRules.RexToGeodeTranslator(this.fieldNames));\n        return (item == null) ? null : item + \" \" + op + \" \" + quoteCharLiteral(rightLiteral);\n      default:\n        return null;\n      }\n    }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeFilter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"M"},{"authorDate":"2016-02-19 03:49:20","commitOrder":3,"curCode":"    private String translateBinary2(String op, RexNode left, RexNode right) {\n      switch (right.getKind()) {\n      case LITERAL:\n        break;\n      default:\n        return null;\n      }\n      final RexLiteral rightLiteral = (RexLiteral) right;\n      switch (left.getKind()) {\n      case INPUT_REF:\n        final RexInputRef left1 = (RexInputRef) left;\n        String name = fieldNames.get(left1.getIndex());\n        return translateOp2(op, name, rightLiteral);\n      case CAST:\n        \r\n        return translateBinary2(op, ((RexCall) left).operands.get(0), right);\n      default:\n        return null;\n      }\n    }\n","date":"2016-02-19 13:16:50","endLine":255,"groupId":"10547","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"translateBinary2","params":"(Stringop@RexNodeleft@RexNoderight)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/eb3ad506addf6398ff2c5995115f34f74912eb.src","preCode":"    private String translateBinary2(String op, RexNode left, RexNode right) {\n      switch (right.getKind()) {\n      case LITERAL:\n        break;\n      default:\n        return null;\n      }\n      final RexLiteral rightLiteral = (RexLiteral) right;\n      switch (left.getKind()) {\n      case INPUT_REF:\n        final RexInputRef left1 = (RexInputRef) left;\n        String name = fieldNames.get(left1.getIndex());\n        return translateOp2(op, name, rightLiteral);\n      case CAST:\n        \r\n        return translateBinary2(op, ((RexCall) left).operands.get(0), right);\n      default:\n        return null;\n      }\n    }\n","realPath":"cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraFilter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"N"}],"commitId":"a02155a70a1fe98c8930a0060dc043902ebbd88f","commitMessage":"@@@[CALCITE-3390] Add ITEM expression to SqlKind and include it in the policy map for Strong (Aman Sinha)\n\n* Use ITEM in selected places where OTHER_FUNCTION was used\n* Add unit test\n\nclose apache/calcite#1492\n","date":"2019-10-28 14:28:09","modifiedFileCount":"10","status":"M","submitter":"Aman Sinha"}]
