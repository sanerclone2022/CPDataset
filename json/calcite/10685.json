[{"authorTime":"2020-01-07 01:06:39","codes":[{"authorDate":"2020-01-07 01:06:39","commitOrder":1,"curCode":"  @Test public void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(new BigDecimal(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal1), gt(aRef, literal1)),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal1), ge(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(and(lt(aRef, literal1), eq(aRef, literal1), ge(aRef, literal1)),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal1), trueLiteral),\n            eq(bRef, literal1));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal1), eq(aRef, literal10));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal1), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal10), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal10), ge(bRef, literal1), lt(aRef, literal10)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal10), gt(bRef, literal1), gt(aRef, literal10)),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal1)), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(<(1, ?0.a), <(?0.a, 5))\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), le(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal5))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal1))),\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal5))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal5), gt(bRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n  }\n","date":"2020-01-08 01:04:52","endLine":1251,"groupId":"14132","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/a0c7274b2dc54806568765cd1d67427092fee2.src","preCode":"  @Test public void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(new BigDecimal(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal1), gt(aRef, literal1)),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal1), ge(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(and(lt(aRef, literal1), eq(aRef, literal1), ge(aRef, literal1)),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal1), trueLiteral),\n            eq(bRef, literal1));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal1), eq(aRef, literal10));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal1), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal10), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal10), ge(bRef, literal1), lt(aRef, literal10)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal10), gt(bRef, literal1), gt(aRef, literal10)),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal1)), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(<(1, ?0.a), <(?0.a, 5))\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), le(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal5))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal1))),\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal5))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal5), gt(bRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1061,"status":"B"},{"authorDate":"2020-01-07 01:06:39","commitOrder":1,"curCode":"  @Test public void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            and(eq(aRef, literal10),\n                eq(aRef, literal1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal1),\n            or(eq(aRef, literal1),\n                eq(aRef, literal10))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal1),\n                eq(aRef, literal10)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal10),\n            gt(aRef, literal1)),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal1),\n            gt(aRef, literal10)),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","date":"2020-01-08 01:04:52","endLine":1370,"groupId":"15738","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyAndPush","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/a0c7274b2dc54806568765cd1d67427092fee2.src","preCode":"  @Test public void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            and(eq(aRef, literal10),\n                eq(aRef, literal1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal1),\n            or(eq(aRef, literal1),\n                eq(aRef, literal10))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal1),\n                eq(aRef, literal10)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal10),\n            gt(aRef, literal1)),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal1),\n            gt(aRef, literal10)),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1301,"status":"B"}],"commitId":"763ec429c951acd5fa251c5d4a2b7780fbf648d4","commitMessage":"@@@[CALCITE-3712] Optimize lossless casts in RexSimplify: CAST(CAST(intExpr as BIGINT) as INT) => intExpr\n","date":"2020-01-08 01:04:52","modifiedFileCount":"4","status":"B","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-01-07 01:06:39","codes":[{"authorDate":"2019-12-29 18:33:23","commitOrder":2,"curCode":"  @Test public void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(new BigDecimal(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal1), gt(aRef, literal1)),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal1), ge(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(and(lt(aRef, literal1), eq(aRef, literal1), ge(aRef, literal1)),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal1), trueLiteral),\n            eq(bRef, literal1));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toStringRaw(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal1), eq(aRef, literal10));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal1), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal10), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal10), ge(bRef, literal1), lt(aRef, literal10)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal10), gt(bRef, literal1), gt(aRef, literal10)),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal1)), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(<(1, ?0.a), <(?0.a, 5))\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), le(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal5))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal1))),\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal5))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal5), gt(bRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n  }\n","date":"2020-01-10 14:59:48","endLine":1251,"groupId":"11935","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6f/4f77ec55c0dc925737ec068b00fddc9ec8f2ad.src","preCode":"  @Test public void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(new BigDecimal(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal1), gt(aRef, literal1)),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal1), ge(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(and(lt(aRef, literal1), eq(aRef, literal1), ge(aRef, literal1)),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal1), trueLiteral),\n            eq(bRef, literal1));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal1), eq(aRef, literal10));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal1), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal10), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal10), ge(bRef, literal1), lt(aRef, literal10)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal10), gt(bRef, literal1), gt(aRef, literal10)),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal1)), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(<(1, ?0.a), <(?0.a, 5))\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), le(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal5))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal1))),\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal5))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal5), gt(bRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1061,"status":"M"},{"authorDate":"2020-01-07 01:06:39","commitOrder":2,"curCode":"  @Test public void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            and(eq(aRef, literal10),\n                eq(aRef, literal1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal1),\n            or(eq(aRef, literal1),\n                eq(aRef, literal10))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal1),\n                eq(aRef, literal10)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal10),\n            gt(aRef, literal1)),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal1),\n            gt(aRef, literal10)),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","date":"2020-01-08 01:04:52","endLine":1370,"groupId":"15738","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyAndPush","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/a0c7274b2dc54806568765cd1d67427092fee2.src","preCode":"  @Test public void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            and(eq(aRef, literal10),\n                eq(aRef, literal1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal1),\n            or(eq(aRef, literal1),\n                eq(aRef, literal10))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal1),\n                eq(aRef, literal10)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal10),\n            gt(aRef, literal1)),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal1),\n            gt(aRef, literal10)),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1301,"status":"N"}],"commitId":"3acb30875525e029be96726a357ee9950cce3310","commitMessage":"@@@[CALCITE-2450] Reorder RexCall predicates to a canonical form\n\n$0=$1 and $1=$0 have the same semantics.  so it is worth normalizing them\nto reduce the planning time.\n","date":"2020-01-10 14:59:48","modifiedFileCount":"17","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(new BigDecimal(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal1), gt(aRef, literal1)),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal1), ge(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(and(lt(aRef, literal1), eq(aRef, literal1), ge(aRef, literal1)),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal1), trueLiteral),\n            eq(bRef, literal1));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toStringRaw(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal1), eq(aRef, literal10));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal1), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal10), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal10), ge(bRef, literal1), lt(aRef, literal10)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal10), gt(bRef, literal1), gt(aRef, literal10)),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal1)), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(<(1, ?0.a), <(?0.a, 5))\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), le(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal5))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal1))),\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal5))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal5), gt(bRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1251,"groupId":"11935","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test public void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(new BigDecimal(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal1), gt(aRef, literal1)),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal1), ge(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(and(lt(aRef, literal1), eq(aRef, literal1), ge(aRef, literal1)),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal1), trueLiteral),\n            eq(bRef, literal1));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toStringRaw(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal1), eq(aRef, literal10));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal1), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal10), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal10), ge(bRef, literal1), lt(aRef, literal10)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal10), gt(bRef, literal1), gt(aRef, literal10)),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal1)), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(<(1, ?0.a), <(?0.a, 5))\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), le(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal5))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal1))),\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal5))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal5), gt(bRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1061,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            and(eq(aRef, literal10),\n                eq(aRef, literal1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal1),\n            or(eq(aRef, literal1),\n                eq(aRef, literal10))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal1),\n                eq(aRef, literal10)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal10),\n            gt(aRef, literal1)),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal1),\n            gt(aRef, literal10)),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1370,"groupId":"15738","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyAndPush","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test public void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            and(eq(aRef, literal10),\n                eq(aRef, literal1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal1),\n            or(eq(aRef, literal1),\n                eq(aRef, literal10))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal1),\n                eq(aRef, literal10)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal10),\n            gt(aRef, literal1)),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal1),\n            gt(aRef, literal10)),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1301,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-06-09 21:16:22","commitOrder":4,"curCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(new BigDecimal(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal1), gt(aRef, literal1)),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal1), ge(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(and(lt(aRef, literal1), eq(aRef, literal1), ge(aRef, literal1)),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal1), trueLiteral),\n            eq(bRef, literal1));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal1), eq(aRef, literal10));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal1), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal10), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal10), ge(bRef, literal1), lt(aRef, literal10)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal10), gt(bRef, literal1), gt(aRef, literal10)),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal1)), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(<(1, ?0.a), <(?0.a, 5))\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), le(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal5))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal1))),\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal5))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal5), gt(bRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n  }\n","date":"2020-06-16 11:11:13","endLine":1251,"groupId":"14132","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/d14c877a3d7ae2f99e4ff686fd7c5ec98fb7bd.src","preCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(new BigDecimal(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal1), gt(aRef, literal1)),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal1), ge(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(and(lt(aRef, literal1), eq(aRef, literal1), ge(aRef, literal1)),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal1), trueLiteral),\n            eq(bRef, literal1));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toStringRaw(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal1), eq(aRef, literal10));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal1), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal10), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal10), ge(bRef, literal1), lt(aRef, literal10)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal10), gt(bRef, literal1), gt(aRef, literal10)),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal1)), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(<(1, ?0.a), <(?0.a, 5))\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), le(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal5))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal1))),\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal5))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal5), gt(bRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1061,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            and(eq(aRef, literal10),\n                eq(aRef, literal1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal1),\n            or(eq(aRef, literal1),\n                eq(aRef, literal10))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal1),\n                eq(aRef, literal10)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal10),\n            gt(aRef, literal1)),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal1),\n            gt(aRef, literal10)),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1370,"groupId":"15738","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyAndPush","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            and(eq(aRef, literal10),\n                eq(aRef, literal1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal1),\n            or(eq(aRef, literal1),\n                eq(aRef, literal10))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal1),\n                eq(aRef, literal10)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal10),\n            gt(aRef, literal1)),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal1),\n            gt(aRef, literal10)),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1301,"status":"N"}],"commitId":"69f25863f5f4197c17927a39a82cbf1cffd12b80","commitMessage":"@@@[CALCITE-3786] Add Digest interface to enable efficient hashCode(equals) for RexNode and RelNode\n\n* Add class Digest used to identify the node;\n* There is a pre-computed hashcode to speedup #hashCode and #equals;\n* Change RexCall to use object#equals instead of pure string digest\ncomparison;\n* We only support RexInputRef normalization which is the most common\ncase;\n* Remove RexNode#toStringRaw because it makes the thing complicated. \nRexNode can always be normalized(default true).\n","date":"2020-06-16 11:11:13","modifiedFileCount":"51","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-08-11 09:40:15","codes":[{"authorDate":"2020-08-11 09:40:15","commitOrder":5,"curCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal(1)), gt(aRef, literal(1))),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal(1)), ge(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(lt(aRef, literal(1)), eq(aRef, literal(1)), ge(aRef, literal(1))),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal(1)), trueLiteral),\n            eq(bRef, literal(1)));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal(1)), eq(aRef, literal(10)));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(1)), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(10)), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal(10)), ge(bRef, literal(1)), lt(aRef, literal(10))),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal(10)), gt(bRef, literal(1)), gt(aRef, literal(10))),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal(1))), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"AND(<(1, ?0.a), <(?0.a, 5))\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), le(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal(5)))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(1)))),\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(5)))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal(5)), gt(bRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n  }\n","date":"2020-08-21 04:50:33","endLine":1227,"groupId":"7663","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/85/82007de9eb7b2a96e2e80ce45bab2a34a63707.src","preCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(new BigDecimal(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal1), gt(aRef, literal1)),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal1), ge(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(and(lt(aRef, literal1), eq(aRef, literal1), ge(aRef, literal1)),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal1), trueLiteral),\n            eq(bRef, literal1));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal1), eq(aRef, literal10));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal1), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal1), eq(bRef, literal10), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal10), ge(bRef, literal1), lt(aRef, literal10)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal10), gt(bRef, literal1), gt(aRef, literal10)),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal1)), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal1, aRef), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(<(1, ?0.a), <(?0.a, 5))\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(literal5, aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal1, aRef), gt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.EMPTY,\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), le(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal5))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal1), lt(aRef, literal10), lt(aRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal1))),\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal1),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), gt(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal10), ge(aRef, literal5))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal5),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal5), gt(bRef, literal5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal5), le(bRef, literal5))),\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1039,"status":"M"},{"authorDate":"2020-08-11 09:40:15","commitOrder":5,"curCode":"  @Test void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(1))),\n            eq(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal(1)),\n                eq(aRef, literal(1))),\n            and(eq(aRef, literal(10)),\n                eq(aRef, literal(1)))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal(1)),\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(10)))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(10))),\n            eq(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal(10)),\n            gt(aRef, literal(1))),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)),\n            gt(aRef, literal(10))),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","date":"2020-08-21 04:50:33","endLine":1343,"groupId":"7666","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyAndPush","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/85/82007de9eb7b2a96e2e80ce45bab2a34a63707.src","preCode":"  @Test void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n    final RexLiteral literal5 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(5));\n    final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal1),\n                eq(aRef, literal1)),\n            and(eq(aRef, literal10),\n                eq(aRef, literal1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal1),\n            or(eq(aRef, literal1),\n                eq(aRef, literal10))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal1),\n                eq(aRef, literal10)),\n            eq(aRef, literal1)),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal10),\n            gt(aRef, literal1)),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal1),\n            gt(aRef, literal10)),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1277,"status":"M"}],"commitId":"dc7bcc550caa5232b51200640c208769fb22787c","commitMessage":"@@@Refactor\n\nIn RexProgramTest.  construct literals when needed.  rather than caching in variables.\n\nThe word 'comparison' is mis-spelled in a few places.\n\nDeprecate RelReferentialConstraint.getNumColumns().\n\nChange TableFunctionScanFactory argument from RexNode to RexCall.\n","date":"2020-08-21 04:50:33","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-08-11 09:40:15","codes":[{"authorDate":"2020-08-13 15:59:15","commitOrder":6,"curCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal(1)), gt(aRef, literal(1))),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal(1)), ge(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(lt(aRef, literal(1)), eq(aRef, literal(1)), ge(aRef, literal(1))),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal(1)), trueLiteral),\n            eq(bRef, literal(1)));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal(1)), eq(aRef, literal(10)));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(1)), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(10)), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal(10)), ge(bRef, literal(1)), lt(aRef, literal(10))),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal(10)), gt(bRef, literal(1)), gt(aRef, literal(10))),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal(1))), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1\\u20255)])\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1\\u20255)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), le(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal(5)))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(1)))),\n        \"SEARCH(?0.a, Sarg[(1\\u20255)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(5)))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal(5)), gt(bRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n  }\n","date":"2020-09-05 00:58:49","endLine":1231,"groupId":"7663","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1b/836f2e9c52bf3f80f0c453746a87bfa8fd46a2.src","preCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal(1)), gt(aRef, literal(1))),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal(1)), ge(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(lt(aRef, literal(1)), eq(aRef, literal(1)), ge(aRef, literal(1))),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal(1)), trueLiteral),\n            eq(bRef, literal(1)));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal(1)), eq(aRef, literal(10)));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(1)), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(10)), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal(10)), ge(bRef, literal(1)), lt(aRef, literal(10))),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal(10)), gt(bRef, literal(1)), gt(aRef, literal(10))),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal(1))), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"AND(<(1, ?0.a), <(?0.a, 5))\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), le(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal(5)))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(1)))),\n        \"AND(>(?0.a, 1), <(?0.a, 5))\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(5)))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal(5)), gt(bRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1043,"status":"M"},{"authorDate":"2020-08-11 09:40:15","commitOrder":6,"curCode":"  @Test void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(1))),\n            eq(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal(1)),\n                eq(aRef, literal(1))),\n            and(eq(aRef, literal(10)),\n                eq(aRef, literal(1)))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal(1)),\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(10)))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(10))),\n            eq(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal(10)),\n            gt(aRef, literal(1))),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)),\n            gt(aRef, literal(10))),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","date":"2020-08-21 04:50:33","endLine":1343,"groupId":"7666","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyAndPush","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/85/82007de9eb7b2a96e2e80ce45bab2a34a63707.src","preCode":"  @Test void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(1))),\n            eq(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal(1)),\n                eq(aRef, literal(1))),\n            and(eq(aRef, literal(10)),\n                eq(aRef, literal(1)))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal(1)),\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(10)))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(10))),\n            eq(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal(10)),\n            gt(aRef, literal(1))),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)),\n            gt(aRef, literal(10))),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1277,"status":"N"}],"commitId":"850f0f4a04fc2399b8fd1c1fed532cd8e1e39514","commitMessage":"@@@[CALCITE-4173] Add internal SEARCH operator and Sarg literal that represents a set of values or ranges\n\nObsolete use of IN in RexCall; in Druid.  replace some uses\nwith DRUID_IN operator.\n\nCreate Sarg instances during RexSimplify of AND.  OR. Also\nduring simplify.  strengthen Sarg.containsNull from true to\nfalse if predicates prove that NULL values are impossible.\n\nIn JDBC adapter we handle SEARCH natively.  but in Geode. \nMongoDB and Spark adapters.  expand SEARCH before translating\nto target query language. Later.  it may be better to handle\nSEARCH explicitly. For instance.  it will be easier to recognize\nexpressions that can be translated to Geode's 'IN SET'\nconstruct.\n\nClose apache/calcite#2124\n","date":"2020-09-05 00:58:49","modifiedFileCount":"44","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-08-11 09:40:15","codes":[{"authorDate":"2020-09-17 05:42:37","commitOrder":7,"curCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal(1)), gt(aRef, literal(1))),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal(1)), ge(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(lt(aRef, literal(1)), eq(aRef, literal(1)), ge(aRef, literal(1))),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal(1)), trueLiteral),\n            eq(bRef, literal(1)));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal(1)), eq(aRef, literal(10)));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(1)), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(10)), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal(10)), ge(bRef, literal(1)), lt(aRef, literal(10))),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal(10)), gt(bRef, literal(1)), gt(aRef, literal(10))),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal(1))), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), le(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal(5)))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(1)))),\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(5)))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal(5)), gt(bRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n  }\n","date":"2020-09-28 23:30:05","endLine":1233,"groupId":"7663","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8d/15644592da26a07c77aae4d4f9dce60876ce01.src","preCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal(1)), gt(aRef, literal(1))),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal(1)), ge(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(lt(aRef, literal(1)), eq(aRef, literal(1)), ge(aRef, literal(1))),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal(1)), trueLiteral),\n            eq(bRef, literal(1)));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal(1)), eq(aRef, literal(10)));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(1)), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(10)), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal(10)), ge(bRef, literal(1)), lt(aRef, literal(10))),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal(10)), gt(bRef, literal(1)), gt(aRef, literal(10))),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal(1))), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1\\u20255)])\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1\\u20255)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), le(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal(5)))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(1)))),\n        \"SEARCH(?0.a, Sarg[(1\\u20255)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(5)))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal(5)), gt(bRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1045,"status":"M"},{"authorDate":"2020-08-11 09:40:15","commitOrder":7,"curCode":"  @Test void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(1))),\n            eq(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal(1)),\n                eq(aRef, literal(1))),\n            and(eq(aRef, literal(10)),\n                eq(aRef, literal(1)))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal(1)),\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(10)))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(10))),\n            eq(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal(10)),\n            gt(aRef, literal(1))),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)),\n            gt(aRef, literal(10))),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","date":"2020-08-21 04:50:33","endLine":1343,"groupId":"7666","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyAndPush","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/85/82007de9eb7b2a96e2e80ce45bab2a34a63707.src","preCode":"  @Test void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(1))),\n            eq(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal(1)),\n                eq(aRef, literal(1))),\n            and(eq(aRef, literal(10)),\n                eq(aRef, literal(1)))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal(1)),\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(10)))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(10))),\n            eq(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal(10)),\n            gt(aRef, literal(1))),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)),\n            gt(aRef, literal(10))),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1277,"status":"N"}],"commitId":"84ac41900bc41fc38bc5238b3bb53f765b70349b","commitMessage":"@@@[CALCITE-4259] Support JDK 15 and Guava version 29.0-jre\n\nCalcite still supports JDK 8 and higher.  and Guava 19.0 and higher.\n\nUpgrade io.airlift.tpch-0.1 to io.prestosql.tpch-1.0.\n\nIn guava-29.  RangeSet.toString() changed format. Change\nCalcite's formatting of Sargs to match.  and add wrappers so\nthat tests pass on all versions of Guava.\n\nRemove log4j; disable checking for warnings in\nSqlHintsConverterTest. Danny Chen has agreed to re-enable\nshortly.\n\nSwitch CI from JDK 14 to 15\n\nThrow if SQL strings in RelOptRulesTest have trailing spaces;\nthe spaces make reference logs brittle.\n\nSimplify description of which JDKs we support.\n\nClose apache/calcite#2153\n","date":"2020-09-28 23:30:05","modifiedFileCount":"17","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-08-11 09:40:15","codes":[{"authorDate":"2020-11-05 15:01:59","commitOrder":8,"curCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal(1)), gt(aRef, literal(1))),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal(1)), ge(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(lt(aRef, literal(1)), eq(aRef, literal(1)), ge(aRef, literal(1))),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal(1)), trueLiteral),\n            eq(bRef, literal(1)));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal(1)), eq(aRef, literal(10)));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(1)), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(10)), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal(10)), ge(bRef, literal(1)), lt(aRef, literal(10))),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal(10)), gt(bRef, literal(1)), gt(aRef, literal(10))),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal(1))), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(?0.a, 5)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(?0.a, 1)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), le(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal(5)))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(1)))),\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(5)))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal(5)), gt(bRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n  }\n","date":"2020-11-12 17:39:03","endLine":1236,"groupId":"10685","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/8d0a2609bc72f85d32f075ad25570149cd1bd8.src","preCode":"  @Test void testSimplifyFilter() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n\n    \r\n    checkSimplifyFilter(and(le(aRef, literal(1)), gt(aRef, literal(1))),\n        \"false\");\n\n    checkSimplifyFilter(and(le(aRef, literal(1)), ge(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(lt(aRef, literal(1)), eq(aRef, literal(1)), ge(aRef, literal(1))),\n        \"false\");\n\n    \r\n    final ImmutableList<RexNode> args =\n        ImmutableList.of(eq(eq(aRef, literal(1)), trueLiteral),\n            eq(bRef, literal(1)));\n    checkSimplifyFilter(and(args),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    assertThat(simplify\n            .simplifyFilterPredicates(args)\n            .toString(),\n        equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"));\n\n    \r\n    final ImmutableList<RexNode> args2 =\n        ImmutableList.of(eq(aRef, literal(1)), eq(aRef, literal(10)));\n    checkSimplifyFilter(and(args2), \"false\");\n\n    assertThat(simplify\n            .simplifyFilterPredicates(args2),\n        nullValue());\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(1)), eq(aRef, bRef)),\n        \"AND(=(?0.a, 1), =(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(and(eq(aRef, literal(1)), eq(bRef, literal(10)), eq(aRef, bRef)),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, literal(10)), ge(bRef, literal(1)), lt(aRef, literal(10))),\n        \"false\");\n\n    \r\n    checkSimplifyFilter(\n        or(gt(aRef, literal(10)), gt(bRef, literal(1)), gt(aRef, literal(10))),\n        \"OR(>(?0.a, 10), >(?0.b, 1))\");\n\n    \r\n    checkSimplifyFilter(\n        case_(cRef, trueLiteral, dRef, trueLiteral, eRef, falseLiteral, fRef,\n            falseLiteral, nullBool),\n        \"OR(?0.c, ?0.d)\");\n\n    \r\n    checkSimplifyFilter(and(gt(aRef, nullBool), ge(bRef, literal(1))), \"false\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \"<(5, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(lt(literal(1), aRef), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(literal(5), aRef)),\n        RelOptPredicateList.EMPTY,\n        \">(1, ?0.a)\");\n\n    \r\n    checkSimplifyFilter(\n        and(gt(literal(1), aRef), gt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"false\");\n\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.EMPTY,\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), le(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(ge(aRef, literal(5)))),\n        \"=(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)), lt(aRef, literal(10)), lt(aRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(1)))),\n        \"SEARCH(?0.a, Sarg[(1..5)])\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(lt(aRef, literal(1)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), gt(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(lt(bRef, literal(10)), ge(aRef, literal(5)))),\n        \">(?0.a, 5)\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(gt(aRef, literal(5)),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n\n    \r\n    \r\n    \r\n    checkSimplifyFilter(or(gt(aRef, literal(5)), gt(bRef, literal(5))),\n        RelOptPredicateList.of(rexBuilder,\n            ImmutableList.of(le(aRef, literal(5)), le(bRef, literal(5)))),\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1048,"status":"M"},{"authorDate":"2020-08-11 09:40:15","commitOrder":8,"curCode":"  @Test void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(1))),\n            eq(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal(1)),\n                eq(aRef, literal(1))),\n            and(eq(aRef, literal(10)),\n                eq(aRef, literal(1)))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal(1)),\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(10)))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(10))),\n            eq(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal(10)),\n            gt(aRef, literal(1))),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)),\n            gt(aRef, literal(10))),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","date":"2020-08-21 04:50:33","endLine":1343,"groupId":"10685","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyAndPush","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/85/82007de9eb7b2a96e2e80ce45bab2a34a63707.src","preCode":"  @Test void testSimplifyAndPush() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n\n    checkSimplifyFilter(\n        or(\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(1))),\n            eq(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        or(\n            and(eq(aRef, literal(1)),\n                eq(aRef, literal(1))),\n            and(eq(aRef, literal(10)),\n                eq(aRef, literal(1)))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(\n            eq(aRef, literal(1)),\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(10)))),\n        \"=(?0.a, 1)\");\n    checkSimplifyFilter(\n        and(\n            or(eq(aRef, literal(1)),\n                eq(aRef, literal(10))),\n            eq(aRef, literal(1))),\n        \"=(?0.a, 1)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal(10)),\n            gt(aRef, literal(1))),\n        \">(?0.a, 10)\");\n\n    checkSimplifyFilter(\n        and(gt(aRef, literal(1)),\n            gt(aRef, literal(10))),\n        \">(?0.a, 10)\");\n\n    \r\n    checkSimplify3(\n        and(nullBool,\n            not(or(nullBool, vBool()))),\n        \"AND(null, NOT(?0.bool0))\",\n        \"false\",\n        \"NOT(?0.bool0)\");\n\n    \r\n    \r\n    checkSimplify2(\n        and(vBool(1), vBool(2),\n            vBool(3), not(vBool(1)),\n            not(vBool(2)), not(vBool())),\n        \"AND(?0.bool3, null, IS NULL(?0.bool1),\"\n            + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\n        \"false\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1277,"status":"N"}],"commitId":"5e9943aa1f51a97068fc37d53dea1d447570becc","commitMessage":"@@@[CALCITE-4364] `a IN (1.  2) AND a = 1` should be simplified to `a = 1`\n","date":"2020-11-12 17:39:03","modifiedFileCount":"8","status":"M","submitter":"yuzhao.cyz"}]
