[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2020-01-05 22:44:53","commitOrder":2,"curCode":"  @Test public void testCbrtFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.CBRT);\n    tester.checkType(\"cbrt(1)\", \"DOUBLE NOT NULL\");\n    tester.checkType(\"cbrt(cast(1 as float))\", \"DOUBLE NOT NULL\");\n    tester.checkType(\n        \"cbrt(case when false then 1 else null end)\", \"DOUBLE\");\n    strictTester.checkFails(\n        \"^cbrt('abc')^\",\n        \"Cannot apply 'CBRT' to arguments of type 'CBRT\\\\(<CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CBRT\\\\(<NUMERIC>\\\\)'\",\n        false);\n    tester.checkType(\"cbrt('abc')\", \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(8)\",\n        \"2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(-8)\",\n        \"-2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(cast(1 as decimal(1, 0)))\",\n        \"1.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkNull(\"cbrt(cast(null as integer))\");\n    tester.checkNull(\"cbrt(cast(null as double))\");\n  }\n","date":"2020-01-07 11:56:46","endLine":5669,"groupId":"10079","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbrtFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6a/5bdc0b20c4907084119b574db3e773a76cbd2f.src","preCode":"  @Test public void testCbrtFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.CBRT);\n    tester.checkType(\"cbrt(1)\", \"DOUBLE NOT NULL\");\n    tester.checkType(\"cbrt(cast(1 as float))\", \"DOUBLE NOT NULL\");\n    tester.checkType(\n        \"cbrt(case when false then 1 else null end)\", \"DOUBLE\");\n    strictTester.checkFails(\n        \"^cbrt('abc')^\",\n        \"Cannot apply 'CBRT' to arguments of type 'CBRT\\\\(<CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CBRT\\\\(<NUMERIC>\\\\)'\",\n        false);\n    tester.checkType(\"cbrt('abc')\", \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(8)\",\n        \"2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(-8)\",\n        \"-2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(cast(1 as decimal(1, 0)))\",\n        \"1.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkNull(\"cbrt(cast(null as integer))\");\n    tester.checkNull(\"cbrt(cast(null as double))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5643,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testCeilFuncInterval() {\n    if (!enable) {\n      return;\n    }\n    tester.checkScalar(\n        \"ceil(interval '3:4:5' hour to second)\",\n        \"+4:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"ceil(interval '-6.3' second)\",\n        \"-6.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"ceil(interval '5-1' year to month)\",\n        \"+6-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"ceil(interval '-5-1' year to month)\",\n        \"-5-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkNull(\n        \"ceil(cast(null as interval year))\");\n  }\n","date":"2014-11-14 09:39:34","endLine":4267,"groupId":"1330","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCeilFuncInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCeilFuncInterval() {\n    if (!enable) {\n      return;\n    }\n    tester.checkScalar(\n        \"ceil(interval '3:4:5' hour to second)\",\n        \"+4:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"ceil(interval '-6.3' second)\",\n        \"-6.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"ceil(interval '5-1' year to month)\",\n        \"+6-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"ceil(interval '-5-1' year to month)\",\n        \"-5-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkNull(\n        \"ceil(cast(null as interval year))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4245,"status":"NB"}],"commitId":"4558236b2882f5b11a47fa1da289d5d11b219d5b","commitMessage":"@@@[CALCITE-3684] Implement CBRT function (Qianjin Xu)\n\nclose apache/calcite#1723\n","date":"2020-01-07 11:56:46","modifiedFileCount":"6","status":"M","submitter":"XuQianJin-Stars"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testCbrtFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.CBRT);\n    tester.checkType(\"cbrt(1)\", \"DOUBLE NOT NULL\");\n    tester.checkType(\"cbrt(cast(1 as float))\", \"DOUBLE NOT NULL\");\n    tester.checkType(\n        \"cbrt(case when false then 1 else null end)\", \"DOUBLE\");\n    strictTester.checkFails(\n        \"^cbrt('abc')^\",\n        \"Cannot apply 'CBRT' to arguments of type 'CBRT\\\\(<CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CBRT\\\\(<NUMERIC>\\\\)'\",\n        false);\n    tester.checkType(\"cbrt('abc')\", \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(8)\",\n        \"2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(-8)\",\n        \"-2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(cast(1 as decimal(1, 0)))\",\n        \"1.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkNull(\"cbrt(cast(null as integer))\");\n    tester.checkNull(\"cbrt(cast(null as double))\");\n  }\n","date":"2020-04-06 04:57:49","endLine":5782,"groupId":"10808","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbrtFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testCbrtFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.CBRT);\n    tester.checkType(\"cbrt(1)\", \"DOUBLE NOT NULL\");\n    tester.checkType(\"cbrt(cast(1 as float))\", \"DOUBLE NOT NULL\");\n    tester.checkType(\n        \"cbrt(case when false then 1 else null end)\", \"DOUBLE\");\n    strictTester.checkFails(\n        \"^cbrt('abc')^\",\n        \"Cannot apply 'CBRT' to arguments of type 'CBRT\\\\(<CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CBRT\\\\(<NUMERIC>\\\\)'\",\n        false);\n    tester.checkType(\"cbrt('abc')\", \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(8)\",\n        \"2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(-8)\",\n        \"-2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(cast(1 as decimal(1, 0)))\",\n        \"1.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkNull(\"cbrt(cast(null as integer))\");\n    tester.checkNull(\"cbrt(cast(null as double))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5756,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testCeilFuncInterval() {\n    if (!enable) {\n      return;\n    }\n    tester.checkScalar(\n        \"ceil(interval '3:4:5' hour to second)\",\n        \"+4:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"ceil(interval '-6.3' second)\",\n        \"-6.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"ceil(interval '5-1' year to month)\",\n        \"+6-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"ceil(interval '-5-1' year to month)\",\n        \"-5-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkNull(\n        \"ceil(cast(null as interval year))\");\n  }\n","date":"2020-04-06 04:57:49","endLine":7977,"groupId":"10808","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCeilFuncInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testCeilFuncInterval() {\n    if (!enable) {\n      return;\n    }\n    tester.checkScalar(\n        \"ceil(interval '3:4:5' hour to second)\",\n        \"+4:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"ceil(interval '-6.3' second)\",\n        \"-6.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"ceil(interval '5-1' year to month)\",\n        \"+6-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"ceil(interval '-5-1' year to month)\",\n        \"-5-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkNull(\n        \"ceil(cast(null as interval year))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7955,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
