[{"authorTime":"2019-08-04 05:28:46","codes":[{"authorDate":"2019-06-08 11:57:30","commitOrder":2,"curCode":"  @Test public void testMatchedOperandsDifferent() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n    RelOptCluster cluster = newCluster(planner);\n\n    \r\n    planner.addRule(new PhysLeafRule());\n\n    \r\n    planner.addRule(new AssertOperandsDifferentRule());\n\n    \r\n    NoneLeafRel leftRel = new NoneLeafRel(cluster, \"a\");\n    RelNode leftPhy = planner\n        .changeTraits(leftRel, cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    PhysLeafRel rightPhy =\n        new PhysLeafRel(cluster, PHYS_CALLING_CONVENTION_2, \"b\");\n\n    PhysBiRel parent =\n        new PhysBiRel(cluster, cluster.traitSetOf(PHYS_CALLING_CONVENTION),\n            leftPhy, rightPhy);\n    planner.setRoot(parent);\n\n    \r\n    planner.ensureRegistered(leftPhy, rightPhy);\n\n    planner.chooseDelegate().findBestExp();\n  }\n","date":"2019-07-24 14:08:48","endLine":159,"groupId":"5279","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchedOperandsDifferent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/78/1d4b2b51d69388fa1ae3847a4a0d905734d22f.src","preCode":"  @Test public void testMatchedOperandsDifferent() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n    RelOptCluster cluster = newCluster(planner);\n\n    \r\n    planner.addRule(new PhysLeafRule());\n\n    \r\n    planner.addRule(new AssertOperandsDifferentRule());\n\n    \r\n    NoneLeafRel leftRel = new NoneLeafRel(cluster, \"a\");\n    RelNode leftPhy = planner\n        .changeTraits(leftRel, cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    PhysLeafRel rightPhy =\n        new PhysLeafRel(cluster, PHYS_CALLING_CONVENTION_2, \"b\");\n\n    PhysBiRel parent =\n        new PhysBiRel(cluster, cluster.traitSetOf(PHYS_CALLING_CONVENTION),\n            leftPhy, rightPhy);\n    planner.setRoot(parent);\n\n    \r\n    planner.ensureRegistered(leftPhy, rightPhy);\n\n    planner.chooseDelegate().findBestExp();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"NB"},{"authorDate":"2019-08-04 05:28:46","commitOrder":2,"curCode":"  @Test public void testMultiInputsParentOpMatching() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n    RelOptCluster cluster = newCluster(planner);\n\n    \r\n    planner.addRule(new PhysLeafRule());\n\n    \r\n    \r\n    planner.addRule(new ThreeInputsUnionRule());\n\n    \r\n    NoneLeafRel leftRel = new NoneLeafRel(cluster, \"b\");\n    RelNode leftPhy = planner\n        .changeTraits(leftRel, cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    PhysLeafRel rightPhy =\n        new PhysLeafRel(cluster, PHYS_CALLING_CONVENTION, \"b\");\n\n    planner.setRoot(\n        new EnumerableUnion(cluster,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION),\n            Arrays.asList(leftPhy, rightPhy), false));\n\n    planner.chooseDelegate().findBestExp();\n  }\n","date":"2019-08-07 15:03:48","endLine":205,"groupId":"9427","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiInputsParentOpMatching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/47/d9e50a4083e599b1e96055b3889a5ad62966c5.src","preCode":"  @Test public void testMultiInputsParentOpMatching() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n    RelOptCluster cluster = newCluster(planner);\n\n    \r\n    planner.addRule(new PhysLeafRule());\n\n    \r\n    \r\n    planner.addRule(new ThreeInputsUnionRule());\n\n    \r\n    NoneLeafRel leftRel = new NoneLeafRel(cluster, \"b\");\n    RelNode leftPhy = planner\n        .changeTraits(leftRel, cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    PhysLeafRel rightPhy =\n        new PhysLeafRel(cluster, PHYS_CALLING_CONVENTION, \"b\");\n\n    planner.setRoot(\n        new EnumerableUnion(cluster,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION),\n            Arrays.asList(leftPhy, rightPhy), false));\n\n    planner.chooseDelegate().findBestExp();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"}],"commitId":"979a825fab0757c506363f5df6ed7997674e8726","commitMessage":"@@@[CALCITE-3227] IndexOutOfBound when checking candidate parent match's input ordinal in VolcanoRuleCall\n","date":"2019-08-07 15:03:48","modifiedFileCount":"2","status":"M","submitter":"Botong Huang"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testMatchedOperandsDifferent() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n    RelOptCluster cluster = newCluster(planner);\n\n    \r\n    planner.addRule(new PhysLeafRule());\n\n    \r\n    planner.addRule(new AssertOperandsDifferentRule());\n\n    \r\n    NoneLeafRel leftRel = new NoneLeafRel(cluster, \"a\");\n    RelNode leftPhy = planner\n        .changeTraits(leftRel, cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    PhysLeafRel rightPhy =\n        new PhysLeafRel(cluster, PHYS_CALLING_CONVENTION_2, \"b\");\n\n    PhysBiRel parent =\n        new PhysBiRel(cluster, cluster.traitSetOf(PHYS_CALLING_CONVENTION),\n            leftPhy, rightPhy);\n    planner.setRoot(parent);\n\n    \r\n    planner.ensureRegistered(leftPhy, rightPhy);\n\n    planner.chooseDelegate().findBestExp();\n  }\n","date":"2020-04-06 04:57:49","endLine":158,"groupId":"5279","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchedOperandsDifferent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/ae0cd2afad01213a0363723d9e4e922e7406d9.src","preCode":"  @Test public void testMatchedOperandsDifferent() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n    RelOptCluster cluster = newCluster(planner);\n\n    \r\n    planner.addRule(new PhysLeafRule());\n\n    \r\n    planner.addRule(new AssertOperandsDifferentRule());\n\n    \r\n    NoneLeafRel leftRel = new NoneLeafRel(cluster, \"a\");\n    RelNode leftPhy = planner\n        .changeTraits(leftRel, cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    PhysLeafRel rightPhy =\n        new PhysLeafRel(cluster, PHYS_CALLING_CONVENTION_2, \"b\");\n\n    PhysBiRel parent =\n        new PhysBiRel(cluster, cluster.traitSetOf(PHYS_CALLING_CONVENTION),\n            leftPhy, rightPhy);\n    planner.setRoot(parent);\n\n    \r\n    planner.ensureRegistered(leftPhy, rightPhy);\n\n    planner.chooseDelegate().findBestExp();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testMultiInputsParentOpMatching() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n    RelOptCluster cluster = newCluster(planner);\n\n    \r\n    planner.addRule(new PhysLeafRule());\n\n    \r\n    \r\n    planner.addRule(new ThreeInputsUnionRule());\n\n    \r\n    NoneLeafRel leftRel = new NoneLeafRel(cluster, \"b\");\n    RelNode leftPhy = planner\n        .changeTraits(leftRel, cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    PhysLeafRel rightPhy =\n        new PhysLeafRel(cluster, PHYS_CALLING_CONVENTION, \"b\");\n\n    planner.setRoot(\n        new EnumerableUnion(cluster,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION),\n            Arrays.asList(leftPhy, rightPhy), false));\n\n    planner.chooseDelegate().findBestExp();\n  }\n","date":"2020-04-06 04:57:49","endLine":203,"groupId":"9427","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiInputsParentOpMatching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/ae0cd2afad01213a0363723d9e4e922e7406d9.src","preCode":"  @Test public void testMultiInputsParentOpMatching() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n    RelOptCluster cluster = newCluster(planner);\n\n    \r\n    planner.addRule(new PhysLeafRule());\n\n    \r\n    \r\n    planner.addRule(new ThreeInputsUnionRule());\n\n    \r\n    NoneLeafRel leftRel = new NoneLeafRel(cluster, \"b\");\n    RelNode leftPhy = planner\n        .changeTraits(leftRel, cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    PhysLeafRel rightPhy =\n        new PhysLeafRel(cluster, PHYS_CALLING_CONVENTION, \"b\");\n\n    planner.setRoot(\n        new EnumerableUnion(cluster,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION),\n            Arrays.asList(leftPhy, rightPhy), false));\n\n    planner.chooseDelegate().findBestExp();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-07-09 05:31:40","commitOrder":4,"curCode":"  @Test void testMatchedOperandsDifferent() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n    RelOptCluster cluster = newCluster(planner);\n\n    \r\n    planner.addRule(PhysLeafRule.INSTANCE);\n\n    \r\n    planner.addRule(AssertOperandsDifferentRule.INSTANCE);\n\n    \r\n    NoneLeafRel leftRel = new NoneLeafRel(cluster, \"a\");\n    RelNode leftPhy = planner\n        .changeTraits(leftRel, cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    PhysLeafRel rightPhy =\n        new PhysLeafRel(cluster, PHYS_CALLING_CONVENTION_2, \"b\");\n\n    PhysBiRel parent =\n        new PhysBiRel(cluster, cluster.traitSetOf(PHYS_CALLING_CONVENTION),\n            leftPhy, rightPhy);\n    planner.setRoot(parent);\n\n    \r\n    planner.ensureRegistered(leftPhy, rightPhy);\n\n    planner.chooseDelegate().findBestExp();\n  }\n","date":"2020-07-29 02:27:24","endLine":163,"groupId":"101434","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchedOperandsDifferent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/17/093226350298484f1667b1c8fea7ddee78c549.src","preCode":"  @Test void testMatchedOperandsDifferent() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n    RelOptCluster cluster = newCluster(planner);\n\n    \r\n    planner.addRule(new PhysLeafRule());\n\n    \r\n    planner.addRule(new AssertOperandsDifferentRule());\n\n    \r\n    NoneLeafRel leftRel = new NoneLeafRel(cluster, \"a\");\n    RelNode leftPhy = planner\n        .changeTraits(leftRel, cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    PhysLeafRel rightPhy =\n        new PhysLeafRel(cluster, PHYS_CALLING_CONVENTION_2, \"b\");\n\n    PhysBiRel parent =\n        new PhysBiRel(cluster, cluster.traitSetOf(PHYS_CALLING_CONVENTION),\n            leftPhy, rightPhy);\n    planner.setRoot(parent);\n\n    \r\n    planner.ensureRegistered(leftPhy, rightPhy);\n\n    planner.chooseDelegate().findBestExp();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2020-07-09 05:31:40","commitOrder":4,"curCode":"  @Test void testMultiInputsParentOpMatching() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n    RelOptCluster cluster = newCluster(planner);\n\n    \r\n    planner.addRule(PhysLeafRule.INSTANCE);\n\n    \r\n    \r\n    planner.addRule(ThreeInputsUnionRule.INSTANCE);\n\n    \r\n    NoneLeafRel leftRel = new NoneLeafRel(cluster, \"b\");\n    RelNode leftPhy = planner\n        .changeTraits(leftRel, cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    PhysLeafRel rightPhy =\n        new PhysLeafRel(cluster, PHYS_CALLING_CONVENTION, \"b\");\n\n    planner.setRoot(\n        new EnumerableUnion(cluster,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION),\n            Arrays.asList(leftPhy, rightPhy), false));\n\n    planner.chooseDelegate().findBestExp();\n  }\n","date":"2020-07-29 02:27:24","endLine":220,"groupId":"101434","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiInputsParentOpMatching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/17/093226350298484f1667b1c8fea7ddee78c549.src","preCode":"  @Test void testMultiInputsParentOpMatching() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n    RelOptCluster cluster = newCluster(planner);\n\n    \r\n    planner.addRule(new PhysLeafRule());\n\n    \r\n    \r\n    planner.addRule(new ThreeInputsUnionRule());\n\n    \r\n    NoneLeafRel leftRel = new NoneLeafRel(cluster, \"b\");\n    RelNode leftPhy = planner\n        .changeTraits(leftRel, cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    PhysLeafRel rightPhy =\n        new PhysLeafRel(cluster, PHYS_CALLING_CONVENTION, \"b\");\n\n    planner.setRoot(\n        new EnumerableUnion(cluster,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION),\n            Arrays.asList(leftPhy, rightPhy), false));\n\n    planner.chooseDelegate().findBestExp();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"998cd83ebe2fcd7ff3ee565299fed6e199269715","commitMessage":"@@@[CALCITE-3923] Refactor how planner rules are parameterized\n\nCreate operands using a builder interface.  OperandBuilder.  and\ndeprecate methods RelOptRule.operand etc.\n\nThe change is backwards compatible.  in the sense that\nexisting rule constructors are deprecated but still work.\nFrom now on.  to create rules.  call RelOptRule.Config.toRule()\n(which calls the rule's (Config) constructor).\n\nSub-classes of ConverterRule are a little different.  They\ndon't need their own sub-class of Config.  You just need to\ncall Config.withRuleFactory to specify the constructor of the\nsub-class of ConverterRule.\n\nMove rule instances into holder classes such as CoreRules. \nMaterializedViewRules. Deprecate existing rule INSTANCE fields\n(to be removed in 1.25). Deprecate previous rule constructors\n(to be removed in 2.0).\n\nDescribe how to write rules in howto and tutorial.\n\nRemove rule instances marked 'deprecated.  to be removed before\n1.25'.\n\nClose apache/calcite#2024\n","date":"2020-07-29 02:27:24","modifiedFileCount":"191","status":"M","submitter":"Julian Hyde"}]
