[{"authorTime":"2016-07-31 03:56:19","codes":[{"authorDate":"2016-08-24 06:57:16","commitOrder":2,"curCode":"    Fixture2() {\n      exYear = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), dt));\n      exMonth = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), dt));\n      exDay = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), dt));\n      exYearTs = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonthTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDayTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n    }\n","date":"2016-09-15 12:46:04","endLine":169,"groupId":"5613","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"Fixture2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/df43fce9e514dfed7d8b0867f3dacc4495f791.src","preCode":"    Fixture2() {\n      exYear = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), dt));\n      exMonth = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), dt));\n      exDay = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), dt));\n      exYearTs = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonthTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDayTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n    }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"B"},{"authorDate":"2016-07-31 03:56:19","commitOrder":2,"curCode":"    Fixture2() {\n      exYear = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), dt));\n      exMonth = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), dt));\n      exDay = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), dt));\n      exYearTs = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonthTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDayTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n    }\n","date":"2016-09-07 02:39:10","endLine":214,"groupId":"5613","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"Fixture2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6e/f898e247dcdc9ad305bca9879d0c1c6568b673.src","preCode":"    Fixture2() {\n      exYear = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), dt));\n      exMonth = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), dt));\n      exDay = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), dt));\n      exYearTs = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonthTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDayTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n    }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"NB"}],"commitId":"962eac566cb19a95d8581a1b10fc120657069b1c","commitMessage":"@@@[CALCITE-1357] Recognize Druid Timeseries and TopN queries in DruidQuery\n\n[CALCITE-1358] Push filters on time dimension to Druid\n\nClose apache/calcite#280\n","date":"2016-09-15 12:46:04","modifiedFileCount":"14","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2017-09-14 20:53:41","codes":[{"authorDate":"2017-09-14 20:53:41","commitOrder":3,"curCode":"    Fixture2() {\n      exYear = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonth = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDay = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n    }\n","date":"2017-10-03 02:13:43","endLine":203,"groupId":"5797","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"Fixture2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/93a53f3f3e97e5f26366196e244cc48172e1fd.src","preCode":"    Fixture2() {\n      exYear = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), dt));\n      exMonth = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), dt));\n      exDay = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), dt));\n      exYearTs = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonthTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDayTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n    }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2017-09-14 20:53:41","commitOrder":3,"curCode":"    Fixture2() {\n      exYear = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonth = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDay = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n    }\n","date":"2017-10-03 02:13:43","endLine":225,"groupId":"5797","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"Fixture2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/d746d416c526637cb1a2c519f1260219e01d2f.src","preCode":"    Fixture2() {\n      exYear = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), dt));\n      exMonth = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), dt));\n      exDay = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT_DATE,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), dt));\n      exYearTs = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonthTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDayTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n    }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"}],"commitId":"796a28f9a9d49a16971135074f315d536eb929cf","commitMessage":"@@@[CALCITE-1987] Implement EXTRACT for JDBC (Pavel Gubin)\n\nRemove EXTRACT_DATE function (it's all just EXTRACTi now). \nand revise Druid adapter.\n\nClose apache/calcite#539\n","date":"2017-10-03 02:13:43","modifiedFileCount":"8","status":"M","submitter":"pavelgubin"},{"authorTime":"2018-01-08 02:52:51","codes":[{"authorDate":"2017-09-14 20:53:41","commitOrder":4,"curCode":"    Fixture2() {\n      exYear = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonth = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDay = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n    }\n","date":"2017-10-03 02:13:43","endLine":203,"groupId":"5797","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"Fixture2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/93a53f3f3e97e5f26366196e244cc48172e1fd.src","preCode":"    Fixture2() {\n      exYear = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonth = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDay = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n    }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"N"},{"authorDate":"2018-01-08 02:52:51","commitOrder":4,"curCode":"    Fixture2() {\n      exYearTs = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonthTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDayTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n      exYearD = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), d));\n      exMonthD = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), d));\n      exDayD = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), d));\n    }\n","date":"2018-01-09 05:34:48","endLine":353,"groupId":"5797","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"Fixture2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f2/47fbbf1251458ab4437e76a9619ba7d7828ce2.src","preCode":"    Fixture2() {\n      exYear = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonth = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDay = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n    }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"}],"commitId":"2918b8fe55c58e0bafd38accfface242f1847c54","commitMessage":"@@@[CALCITE-2122] In DateRangeRules.  make either TIMESTAMP or DATE literal.  according to target type (Nishant Bangarwa)\n\nClose apache/calcite#599\n","date":"2018-01-09 05:34:48","modifiedFileCount":"6","status":"M","submitter":"Nishant"},{"authorTime":"2018-01-11 04:54:26","codes":[{"authorDate":"2017-09-14 20:53:41","commitOrder":5,"curCode":"    Fixture2() {\n      exYear = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonth = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDay = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n    }\n","date":"2017-10-03 02:13:43","endLine":203,"groupId":"5797","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"Fixture2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/93a53f3f3e97e5f26366196e244cc48172e1fd.src","preCode":"    Fixture2() {\n      exYear = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonth = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDay = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n    }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"N"},{"authorDate":"2018-01-11 04:54:26","commitOrder":5,"curCode":"    Fixture2() {\n      exYearTs = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonthTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDayTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n      exYearD = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), d));\n      exMonthD = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), d));\n      exDayD = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), d));\n\n      floorYear = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.FLOOR,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.YEAR)));\n      floorMonth = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.FLOOR,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.MONTH)));\n      floorDay = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.FLOOR,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.DAY)));\n      floorHour = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.FLOOR,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.HOUR)));\n      floorMinute = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.FLOOR,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.MINUTE)));\n\n      ceilYear = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.CEIL,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.YEAR)));\n      ceilMonth = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.CEIL,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.MONTH)));\n      ceilDay = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.CEIL,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.DAY)));\n      ceilHour = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.CEIL,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.HOUR)));\n      ceilMinute = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.CEIL,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.MINUTE)));\n    }\n","date":"2018-01-12 11:53:24","endLine":736,"groupId":"5797","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"Fixture2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f0/439aba565b3e6275cd74db3ba741367f9c3012.src","preCode":"    Fixture2() {\n      exYearTs = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonthTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDayTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n      exYearD = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), d));\n      exMonthD = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), d));\n      exDayD = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), d));\n    }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":697,"status":"M"}],"commitId":"fa19580ecfe404b75fcb6c9c174cfe9da73d2db8","commitMessage":"@@@[CALCITE-2090] Convert FLOOR and CEIL into time ranges (Nishant Bangarwa)\n\nAdd test for multiple operands.\n\nAllow RexLiteral.getValueAs(Calendar) on TIMESTAMP_WITH_LOCAL_TIME_ZONE\nliterals.\n\nClose apache/calcite#603\n","date":"2018-01-12 11:53:24","modifiedFileCount":"4","status":"M","submitter":"Nishant"},{"authorTime":"2018-07-06 04:21:59","codes":[{"authorDate":"2017-09-14 20:53:41","commitOrder":6,"curCode":"    Fixture2() {\n      exYear = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonth = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDay = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n    }\n","date":"2017-10-03 02:13:43","endLine":203,"groupId":"10449","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"Fixture2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/93a53f3f3e97e5f26366196e244cc48172e1fd.src","preCode":"    Fixture2() {\n      exYear = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonth = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDay = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n    }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"N"},{"authorDate":"2018-07-06 04:21:59","commitOrder":6,"curCode":"    Fixture2() {\n      exYearTs = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonthTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDayTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n      exYearD = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), d));\n      exMonthD = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), d));\n      exDayD = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), d));\n\n      floorYear = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.FLOOR,\n          ImmutableList.of(ts, rexBuilder.makeFlag(TimeUnitRange.YEAR)));\n      floorMonth = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.FLOOR,\n          ImmutableList.of(ts, rexBuilder.makeFlag(TimeUnitRange.MONTH)));\n      floorDay = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.FLOOR,\n          ImmutableList.of(ts, rexBuilder.makeFlag(TimeUnitRange.DAY)));\n      floorHour = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.FLOOR,\n          ImmutableList.of(ts, rexBuilder.makeFlag(TimeUnitRange.HOUR)));\n      floorMinute = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.FLOOR,\n          ImmutableList.of(ts, rexBuilder.makeFlag(TimeUnitRange.MINUTE)));\n\n      ceilYear = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.CEIL,\n          ImmutableList.of(ts, rexBuilder.makeFlag(TimeUnitRange.YEAR)));\n      ceilMonth = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.CEIL,\n          ImmutableList.of(ts, rexBuilder.makeFlag(TimeUnitRange.MONTH)));\n      ceilDay = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.CEIL,\n          ImmutableList.of(ts, rexBuilder.makeFlag(TimeUnitRange.DAY)));\n      ceilHour = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.CEIL,\n          ImmutableList.of(ts, rexBuilder.makeFlag(TimeUnitRange.HOUR)));\n      ceilMinute = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.CEIL,\n          ImmutableList.of(ts, rexBuilder.makeFlag(TimeUnitRange.MINUTE)));\n    }\n","date":"2018-07-09 01:16:26","endLine":768,"groupId":"10449","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"Fixture2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/88/312fe8f9416f916ff8e89d1ebed2224a75c4c3.src","preCode":"    Fixture2() {\n      exYearTs = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), ts));\n      exMonthTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), ts));\n      exDayTs = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), ts));\n      exYearD = rexBuilder.makeCall(SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), d));\n      exMonthD = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.MONTH), d));\n      exDayD = rexBuilder.makeCall(intRelDataType,\n          SqlStdOperatorTable.EXTRACT,\n          ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.DAY), d));\n\n      floorYear = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.FLOOR,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.YEAR)));\n      floorMonth = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.FLOOR,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.MONTH)));\n      floorDay = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.FLOOR,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.DAY)));\n      floorHour = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.FLOOR,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.HOUR)));\n      floorMinute = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.FLOOR,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.MINUTE)));\n\n      ceilYear = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.CEIL,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.YEAR)));\n      ceilMonth = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.CEIL,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.MONTH)));\n      ceilDay = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.CEIL,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.DAY)));\n      ceilHour = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.CEIL,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.HOUR)));\n      ceilMinute = rexBuilder.makeCall(intRelDataType, SqlStdOperatorTable.CEIL,\n          ImmutableList.<RexNode>of(ts, rexBuilder.makeFlag(TimeUnitRange.MINUTE)));\n    }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":729,"status":"M"}],"commitId":"d59b639d27da704f00eff616324a2c04aa06f84c","commitMessage":"@@@[CALCITE-2259] Allow Java 8 syntax\n\nIn summary: use lambdas where possible.  switch from Guava function\ntypes to Java function types or lambdas.  but continue to use Guava\ncomponents (such as immutable collections and cache) that have no\nequivalent in the Java runtime.\n\n1. Change single-abstract-method (SAM) classes to lambdas. Preserve\nformatting wherever possible.\n\n2. Change AssertQuery.returns argument type from Guava Function to Java\nConsumer. If you are using a lambda and see 'returns is deprecated'. \nremove the 'return null;' line.  and the lambda will become a Consumer\n(whose return is void).\n\n3. Change RelOptRuleOperand and RelOptRule.operand methods to take Java\nPredicate rather than Guava Predicate.\n\n4. Change the argument of Hook.add and .addThread from Guava Function to\nJava Consumer.\n\n5. Change 'list.toArray(new T[list.size()])' to 'list.toArray(new T[0])'\nbecause the latter is simpler.  and just as efficient on recent Java\nversions.\n\n6. Resource references; change \"try (Closeable ignore = foo())\" to \"try\n  (foo())\".  especially uses of TryThreadLocal and Hook.Closeable.\n\n7. Convert linq4j Function1 to java Function.  Function2 to java BiFunction\n\n8. Fix occurrences of Intellij's \"Explicit type can be replaced with\n<>\" inspection. (Occurs for \"List<String> list = new\nArrayList<String>();\".)\n\n9. Change Guava Preconditions.checkNotNull to Java\nObjects.requireNonNull. (Kevin Risden)\n\n10. Break out anonymous classes and fix dependency problems.\n\n11. Use CacheLoader.of(Function) where possible.\n\n12. Replace sub-classes of ThreadLocal with ThreadLocal.withInitial().\n\n13. Replace Guava collection methods with calls to Java collection types. \nfor example replace Lists.newArrayList() with new ArrayList<>(). \nMaps.newHashSet() with new HashSet<>().  similarly Sets.\n\n14. Replace Guava Joiner with String.join.\n\n15. Replace Collections.emptyList() with ImmutableList.of() in a few\nplaces.\n\nFor backwards compatibility.  we preserved (and deprecated) the old\nmethods that used Guava types. In a few cases where new and old have\nthe same signature (after erasure).  we could not add a method with the\nsame name.  so we gave the new method a \"J\" suffix. Examples include\nHook.property and .propertyJ.  RelOptRule.operand and .operandJ.\n\nIn test code.  we have not slavishly ensured backwards compatibility.\n\nWe do not intend to remove uses of Guava's immutable collections.\n\nWe have ignored Intellij's \"Pseudo functional style code\" inspection\nmost of the time.  but in a few cases have converted Lists.transform(). \nIterables.transform().  and Iterables.filter() into Java streams. Use\nthe Util.toImmutableList() collector if the result is to be an\nimmutable list. Use Util.transform() rather than Lists.transform()\nif you have a Java function rather than a Guava function or lambda.\n\nNot covered in this change (might be done in future):\n* Convert Collections.sort(list) to list.sort.\n* Review uses of 'for (Map.Entry<K.  V> e : map.entrySet())' and see\n  whether it makes sense to convert to 'map.forEach((k.  v) ->\n  ...)'. Intellij inspection is called 'Replace with Map.forEach'.\n\nBreaking changes:\n* LatticeStatisticProvider.Factory.  result of RexUtil.notFun().  and\n  arguments to Mappings.target() are Function (was Guava.  now Java)\n* Argument to SqlSpecialOperator.TokenSequence.parser() is Predicate\n  (was Guava.  now Java)\n* AggregateNode.AccumulatorFactory extends Supplier (was Guava.  now Java)\n","date":"2018-07-09 01:16:26","modifiedFileCount":"514","status":"M","submitter":"Julian Hyde"}]
