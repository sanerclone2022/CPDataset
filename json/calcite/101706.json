[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public static TableFunction create(final Method method) {\n    if (!Modifier.isStatic(method.getModifiers())) {\n      Class clazz = method.getDeclaringClass();\n      if (!classHasPublicZeroArgsConstructor(clazz)) {\n        throw RESOURCE.requireDefaultConstructor(clazz.getName()).ex();\n      }\n    }\n    final Class<?> returnType = method.getReturnType();\n    if (!QueryableTable.class.isAssignableFrom(returnType)) {\n      return null;\n    }\n    CallImplementor implementor = createImplementor(method);\n    return new TableFunctionImpl(method, implementor);\n  }\n","date":"2014-11-14 09:39:34","endLine":76,"groupId":"7572","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(finalMethodmethod)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f2/5d9d299ace9140531a92e52c4658e6963f1f67.src","preCode":"  public static TableFunction create(final Method method) {\n    if (!Modifier.isStatic(method.getModifiers())) {\n      Class clazz = method.getDeclaringClass();\n      if (!classHasPublicZeroArgsConstructor(clazz)) {\n        throw RESOURCE.requireDefaultConstructor(clazz.getName()).ex();\n      }\n    }\n    final Class<?> returnType = method.getReturnType();\n    if (!QueryableTable.class.isAssignableFrom(returnType)) {\n      return null;\n    }\n    CallImplementor implementor = createImplementor(method);\n    return new TableFunctionImpl(method, implementor);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public static TableMacro create(final Method method) {\n    Class clazz = method.getDeclaringClass();\n    if (!Modifier.isStatic(method.getModifiers())) {\n      if (!classHasPublicZeroArgsConstructor(clazz)) {\n        throw RESOURCE.requireDefaultConstructor(clazz.getName()).ex();\n      }\n    }\n    final Class<?> returnType = method.getReturnType();\n    if (!TranslatableTable.class.isAssignableFrom(returnType)) {\n      return null;\n    }\n    return new TableMacroImpl(method);\n  }\n","date":"2014-11-14 09:39:34","endLine":63,"groupId":"771","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(finalMethodmethod)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/47/282323abd982eb26b5e8fa0a61116446d43d35.src","preCode":"  public static TableMacro create(final Method method) {\n    Class clazz = method.getDeclaringClass();\n    if (!Modifier.isStatic(method.getModifiers())) {\n      if (!classHasPublicZeroArgsConstructor(clazz)) {\n        throw RESOURCE.requireDefaultConstructor(clazz.getName()).ex();\n      }\n    }\n    final Class<?> returnType = method.getReturnType();\n    if (!TranslatableTable.class.isAssignableFrom(returnType)) {\n      return null;\n    }\n    return new TableMacroImpl(method);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableMacroImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2015-10-11 23:44:26","commitOrder":2,"curCode":"  public static TableFunction create(final Method method) {\n    if (!Modifier.isStatic(method.getModifiers())) {\n      Class clazz = method.getDeclaringClass();\n      if (!classHasPublicZeroArgsConstructor(clazz)) {\n        throw RESOURCE.requireDefaultConstructor(clazz.getName()).ex();\n      }\n    }\n    final Class<?> returnType = method.getReturnType();\n    if (!QueryableTable.class.isAssignableFrom(returnType)\n        && !ScannableTable.class.isAssignableFrom(returnType)) {\n      return null;\n    }\n    CallImplementor implementor = createImplementor(method);\n    return new TableFunctionImpl(method, implementor);\n  }\n","date":"2015-10-14 01:17:59","endLine":92,"groupId":"7572","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(finalMethodmethod)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1e/f3dfd6f612ce1bf142e3a947aa5fc95e33a674.src","preCode":"  public static TableFunction create(final Method method) {\n    if (!Modifier.isStatic(method.getModifiers())) {\n      Class clazz = method.getDeclaringClass();\n      if (!classHasPublicZeroArgsConstructor(clazz)) {\n        throw RESOURCE.requireDefaultConstructor(clazz.getName()).ex();\n      }\n    }\n    final Class<?> returnType = method.getReturnType();\n    if (!QueryableTable.class.isAssignableFrom(returnType)) {\n      return null;\n    }\n    CallImplementor implementor = createImplementor(method);\n    return new TableFunctionImpl(method, implementor);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  public static TableMacro create(final Method method) {\n    Class clazz = method.getDeclaringClass();\n    if (!Modifier.isStatic(method.getModifiers())) {\n      if (!classHasPublicZeroArgsConstructor(clazz)) {\n        throw RESOURCE.requireDefaultConstructor(clazz.getName()).ex();\n      }\n    }\n    final Class<?> returnType = method.getReturnType();\n    if (!TranslatableTable.class.isAssignableFrom(returnType)) {\n      return null;\n    }\n    return new TableMacroImpl(method);\n  }\n","date":"2014-11-14 09:39:34","endLine":63,"groupId":"771","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(finalMethodmethod)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/47/282323abd982eb26b5e8fa0a61116446d43d35.src","preCode":"  public static TableMacro create(final Method method) {\n    Class clazz = method.getDeclaringClass();\n    if (!Modifier.isStatic(method.getModifiers())) {\n      if (!classHasPublicZeroArgsConstructor(clazz)) {\n        throw RESOURCE.requireDefaultConstructor(clazz.getName()).ex();\n      }\n    }\n    final Class<?> returnType = method.getReturnType();\n    if (!TranslatableTable.class.isAssignableFrom(returnType)) {\n      return null;\n    }\n    return new TableMacroImpl(method);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableMacroImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"5eb395c9ff5f60a409332b1a32536629d2d3f92e","commitMessage":"@@@[CALCITE-916] Support table function that implements ScannableTable\n\nAdd a new model.  example/function.  to contain examples of user-defined functions.\n\nAdd example table function \"MAZE\" that generates a maze.\n\nWhen defining table functions in a model file.  allow them to have a method name\nother than \"eval\".\n","date":"2015-10-14 01:17:59","modifiedFileCount":"6","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  public static @Nullable TableFunction create(final Method method) {\n    if (!Modifier.isStatic(method.getModifiers())) {\n      Class clazz = method.getDeclaringClass();\n      if (!classHasPublicZeroArgsConstructor(clazz)) {\n        throw RESOURCE.requireDefaultConstructor(clazz.getName()).ex();\n      }\n    }\n    final Class<?> returnType = method.getReturnType();\n    if (!QueryableTable.class.isAssignableFrom(returnType)\n        && !ScannableTable.class.isAssignableFrom(returnType)) {\n      return null;\n    }\n    CallImplementor implementor = createImplementor(method);\n    return new TableFunctionImpl(method, implementor);\n  }\n","date":"2020-11-30 06:45:33","endLine":97,"groupId":"101706","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(finalMethodmethod)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/36/d4edf17f3469a287498152f3a28b6260a0f65f.src","preCode":"  public static TableFunction create(final Method method) {\n    if (!Modifier.isStatic(method.getModifiers())) {\n      Class clazz = method.getDeclaringClass();\n      if (!classHasPublicZeroArgsConstructor(clazz)) {\n        throw RESOURCE.requireDefaultConstructor(clazz.getName()).ex();\n      }\n    }\n    final Class<?> returnType = method.getReturnType();\n    if (!QueryableTable.class.isAssignableFrom(returnType)\n        && !ScannableTable.class.isAssignableFrom(returnType)) {\n      return null;\n    }\n    CallImplementor implementor = createImplementor(method);\n    return new TableFunctionImpl(method, implementor);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  public static @Nullable TableMacro create(final Method method) {\n    Class clazz = method.getDeclaringClass();\n    if (!Modifier.isStatic(method.getModifiers())) {\n      if (!classHasPublicZeroArgsConstructor(clazz)) {\n        throw RESOURCE.requireDefaultConstructor(clazz.getName()).ex();\n      }\n    }\n    final Class<?> returnType = method.getReturnType();\n    if (!TranslatableTable.class.isAssignableFrom(returnType)) {\n      return null;\n    }\n    return new TableMacroImpl(method);\n  }\n","date":"2020-11-30 06:45:33","endLine":70,"groupId":"101706","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"create","params":"(finalMethodmethod)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0b/67897a582b26f177f547f6d16227b929df6562.src","preCode":"  public static TableMacro create(final Method method) {\n    Class clazz = method.getDeclaringClass();\n    if (!Modifier.isStatic(method.getModifiers())) {\n      if (!classHasPublicZeroArgsConstructor(clazz)) {\n        throw RESOURCE.requireDefaultConstructor(clazz.getName()).ex();\n      }\n    }\n    final Class<?> returnType = method.getReturnType();\n    if (!TranslatableTable.class.isAssignableFrom(returnType)) {\n      return null;\n    }\n    return new TableMacroImpl(method);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableMacroImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
