[{"authorTime":"2019-10-14 15:32:10","codes":[{"authorDate":"2019-10-14 15:32:10","commitOrder":1,"curCode":"  @Test public void testIntersectAll() {\n    final Employee[] emps2 = {\n        new Employee(150, \"Theodore\", 10),\n        emps[3],\n        emps[3],\n        emps[3]\n    };\n    assertThat(\n        Linq4j.asEnumerable(emps2)\n            .intersect(Linq4j.asEnumerable(emps), true)\n            .count(),\n        is(1));\n  }\n","date":"2019-11-08 02:11:07","endLine":873,"groupId":"3799","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntersectAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/59/50a544fbb0cc465385af3b27656f48551d4562.src","preCode":"  @Test public void testIntersectAll() {\n    final Employee[] emps2 = {\n        new Employee(150, \"Theodore\", 10),\n        emps[3],\n        emps[3],\n        emps[3]\n    };\n    assertThat(\n        Linq4j.asEnumerable(emps2)\n            .intersect(Linq4j.asEnumerable(emps), true)\n            .count(),\n        is(1));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":861,"status":"B"},{"authorDate":"2019-10-14 15:32:10","commitOrder":1,"curCode":"  @Test public void testExceptAll() {\n    final Employee[] emps2 = {\n        new Employee(150, \"Theodore\", 10),\n        new Employee(150, \"Theodore\", 10),\n        emps[0],\n        emps[1]\n    };\n    assertThat(\n        Linq4j.asEnumerable(emps2)\n            .except(Linq4j.asEnumerable(emps), true)\n            .count(),\n        is(2));\n  }\n","date":"2019-11-08 02:11:07","endLine":899,"groupId":"10758","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/59/50a544fbb0cc465385af3b27656f48551d4562.src","preCode":"  @Test public void testExceptAll() {\n    final Employee[] emps2 = {\n        new Employee(150, \"Theodore\", 10),\n        new Employee(150, \"Theodore\", 10),\n        emps[0],\n        emps[1]\n    };\n    assertThat(\n        Linq4j.asEnumerable(emps2)\n            .except(Linq4j.asEnumerable(emps), true)\n            .count(),\n        is(2));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":887,"status":"B"}],"commitId":"be5238492285ca061d4ddd82262448d3a6cedc5d","commitMessage":"@@@[CALCITE-3408] Add support for enumerable intersect/minus all (Wang Yanlin)\n\nClose #1503\n","date":"2019-11-08 02:11:07","modifiedFileCount":"15","status":"B","submitter":"yanlin-Lynn"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testIntersectAll() {\n    final Employee[] emps2 = {\n        new Employee(150, \"Theodore\", 10),\n        emps[3],\n        emps[3],\n        emps[3]\n    };\n    assertThat(\n        Linq4j.asEnumerable(emps2)\n            .intersect(Linq4j.asEnumerable(emps), true)\n            .count(),\n        is(1));\n  }\n","date":"2020-04-06 04:57:49","endLine":872,"groupId":"1042","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testIntersectAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/176b0c20dace781059f888f45af815a228f4c7.src","preCode":"  @Test public void testIntersectAll() {\n    final Employee[] emps2 = {\n        new Employee(150, \"Theodore\", 10),\n        emps[3],\n        emps[3],\n        emps[3]\n    };\n    assertThat(\n        Linq4j.asEnumerable(emps2)\n            .intersect(Linq4j.asEnumerable(emps), true)\n            .count(),\n        is(1));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":860,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testExceptAll() {\n    final Employee[] emps2 = {\n        new Employee(150, \"Theodore\", 10),\n        new Employee(150, \"Theodore\", 10),\n        emps[0],\n        emps[1]\n    };\n    assertThat(\n        Linq4j.asEnumerable(emps2)\n            .except(Linq4j.asEnumerable(emps), true)\n            .count(),\n        is(2));\n  }\n","date":"2020-04-06 04:57:49","endLine":898,"groupId":"1042","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testExceptAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/176b0c20dace781059f888f45af815a228f4c7.src","preCode":"  @Test public void testExceptAll() {\n    final Employee[] emps2 = {\n        new Employee(150, \"Theodore\", 10),\n        new Employee(150, \"Theodore\", 10),\n        emps[0],\n        emps[1]\n    };\n    assertThat(\n        Linq4j.asEnumerable(emps2)\n            .except(Linq4j.asEnumerable(emps), true)\n            .count(),\n        is(2));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":886,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
