[{"authorTime":"2015-08-20 07:25:30","codes":[{"authorDate":"2015-08-20 07:25:30","commitOrder":1,"curCode":"  @Override public boolean isAlwaysTrue() {\n    \r\n    \r\n    switch (getKind()) {\n    case IS_NOT_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysFalse();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case CAST:\n      return operands.get(0).isAlwaysTrue();\n    default:\n      return false;\n    }\n  }\n","date":"2016-01-10 16:51:24","endLine":131,"groupId":"15916","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"isAlwaysTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7c/f825530a3aefd90bae3995299907aff34be758.src","preCode":"  @Override public boolean isAlwaysTrue() {\n    \r\n    \r\n    switch (getKind()) {\n    case IS_NOT_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysFalse();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case CAST:\n      return operands.get(0).isAlwaysTrue();\n    default:\n      return false;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexCall.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"},{"authorDate":"2015-08-20 07:25:30","commitOrder":1,"curCode":"  @Override public boolean isAlwaysFalse() {\n    switch (getKind()) {\n    case IS_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case NOT:\n      return operands.get(0).isAlwaysTrue();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysFalse();\n    default:\n      return false;\n    }\n  }\n","date":"2016-01-10 16:51:24","endLine":147,"groupId":"15917","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"isAlwaysFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7c/f825530a3aefd90bae3995299907aff34be758.src","preCode":"  @Override public boolean isAlwaysFalse() {\n    switch (getKind()) {\n    case IS_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case NOT:\n      return operands.get(0).isAlwaysTrue();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysFalse();\n    default:\n      return false;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexCall.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"}],"commitId":"7837e64c3294aa776ca38cba3f756550af3494ab","commitMessage":"@@@Simplify RexProgram.  in particular \"(NOT CASE ... END) IS TRUE\".  which occurs in NOT IN\n","date":"2016-01-10 16:51:24","modifiedFileCount":"12","status":"B","submitter":"Julian Hyde"},{"authorTime":"2018-08-08 02:49:27","codes":[{"authorDate":"2018-08-08 02:49:27","commitOrder":2,"curCode":"  @Override public boolean isAlwaysTrue() {\n    \r\n    \r\n    switch (getKind()) {\n    case IS_NOT_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysFalse();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysTrue();\n    default:\n      return false;\n    }\n  }\n","date":"2018-10-04 23:20:16","endLine":135,"groupId":"1177","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"isAlwaysTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/c4ac2952060a75eca0fc9168f910612b5fa40a.src","preCode":"  @Override public boolean isAlwaysTrue() {\n    \r\n    \r\n    switch (getKind()) {\n    case IS_NOT_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysFalse();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case CAST:\n      return operands.get(0).isAlwaysTrue();\n    default:\n      return false;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexCall.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2018-08-08 02:49:27","commitOrder":2,"curCode":"  @Override public boolean isAlwaysFalse() {\n    switch (getKind()) {\n    case IS_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysTrue();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysFalse();\n    default:\n      return false;\n    }\n  }\n","date":"2018-10-04 23:20:16","endLine":152,"groupId":"1177","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"isAlwaysFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/c4ac2952060a75eca0fc9168f910612b5fa40a.src","preCode":"  @Override public boolean isAlwaysFalse() {\n    switch (getKind()) {\n    case IS_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case NOT:\n      return operands.get(0).isAlwaysTrue();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysFalse();\n    default:\n      return false;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexCall.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"be1769bcc260e0b84380d16bd3cbda834e071209","commitMessage":"@@@[CALCITE-2438] Fix wrong results for IS NOT FALSE(false) (zhiwei.pzw) (Zoltan Haindrich)\n\ncloses #778\ncloses #875\n","date":"2018-10-04 23:20:16","modifiedFileCount":"3","status":"M","submitter":"zhiwei.pzw"},{"authorTime":"2020-10-25 08:23:16","codes":[{"authorDate":"2020-10-25 08:23:16","commitOrder":3,"curCode":"  @Override public boolean isAlwaysTrue() {\n    \r\n    \r\n    switch (getKind()) {\n    case IS_NOT_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysFalse();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysTrue();\n    case SEARCH:\n      final Sarg sarg = ((RexLiteral) operands.get(1)).getValueAs(Sarg.class);\n      return sarg.isAll()\n          && (sarg.containsNull || !operands.get(0).getType().isNullable());\n    default:\n      return false;\n    }\n  }\n","date":"2020-11-01 16:13:27","endLine":207,"groupId":"1177","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"isAlwaysTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/73/795c00d30630f1a8fb750d2470fcabb5d86ede.src","preCode":"  @Override public boolean isAlwaysTrue() {\n    \r\n    \r\n    switch (getKind()) {\n    case IS_NOT_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysFalse();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysTrue();\n    default:\n      return false;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexCall.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2020-10-25 08:23:16","commitOrder":3,"curCode":"  @Override public boolean isAlwaysFalse() {\n    switch (getKind()) {\n    case IS_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysTrue();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysFalse();\n    case SEARCH:\n      final Sarg sarg = ((RexLiteral) operands.get(1)).getValueAs(Sarg.class);\n      return sarg.isNone()\n          && (!sarg.containsNull || !operands.get(0).getType().isNullable());\n    default:\n      return false;\n    }\n  }\n","date":"2020-11-01 16:13:27","endLine":228,"groupId":"1177","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"isAlwaysFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/73/795c00d30630f1a8fb750d2470fcabb5d86ede.src","preCode":"  @Override public boolean isAlwaysFalse() {\n    switch (getKind()) {\n    case IS_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysTrue();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysFalse();\n    default:\n      return false;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexCall.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"}],"commitId":"d03ce47536ddb2aaec6d445b3ea48464081a7ed0","commitMessage":"@@@[CALCITE-4352] RexSimplify incorrectly drops IS NULL and IS NOT NULL from SEARCH expressions\n\nImprove Sarg.toString() for IS NULL.  IS NOT NULL.  TRUE. \nFALSE.\n\nSimplify NOT SEARCH(x.  sarg) to SEARCH(x.  sarg2) where sarg2\nis the complement of sarg.\n\nImprove return type of SEARCH; result is NOT NULL if argument\nis NOT NULL of it Sarg allows IS NULL.\n\nClose apache/calcite#2233\n","date":"2020-11-01 16:13:27","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  @Override public boolean isAlwaysTrue() {\n    \r\n    \r\n    switch (getKind()) {\n    case IS_NOT_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysFalse();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysTrue();\n    case SEARCH:\n      final Sarg sarg = ((RexLiteral) operands.get(1)).getValueAs(Sarg.class);\n      return requireNonNull(sarg, \"sarg\").isAll()\n          && (sarg.containsNull || !operands.get(0).getType().isNullable());\n    default:\n      return false;\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":221,"groupId":"1177","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"isAlwaysTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/43/dfb18da8e67811af9a68a298a526fe30c11984.src","preCode":"  @Override public boolean isAlwaysTrue() {\n    \r\n    \r\n    switch (getKind()) {\n    case IS_NOT_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysFalse();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysTrue();\n    case SEARCH:\n      final Sarg sarg = ((RexLiteral) operands.get(1)).getValueAs(Sarg.class);\n      return sarg.isAll()\n          && (sarg.containsNull || !operands.get(0).getType().isNullable());\n    default:\n      return false;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexCall.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  @Override public boolean isAlwaysFalse() {\n    switch (getKind()) {\n    case IS_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysTrue();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysFalse();\n    case SEARCH:\n      final Sarg sarg = ((RexLiteral) operands.get(1)).getValueAs(Sarg.class);\n      return requireNonNull(sarg, \"sarg\").isNone()\n          && (!sarg.containsNull || !operands.get(0).getType().isNullable());\n    default:\n      return false;\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":242,"groupId":"1177","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"isAlwaysFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/43/dfb18da8e67811af9a68a298a526fe30c11984.src","preCode":"  @Override public boolean isAlwaysFalse() {\n    switch (getKind()) {\n    case IS_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysTrue();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysFalse();\n    case SEARCH:\n      final Sarg sarg = ((RexLiteral) operands.get(1)).getValueAs(Sarg.class);\n      return sarg.isNone()\n          && (!sarg.containsNull || !operands.get(0).getType().isNullable());\n    default:\n      return false;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexCall.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-12-24 05:32:41","codes":[{"authorDate":"2020-12-24 05:32:41","commitOrder":5,"curCode":"  @Override public boolean isAlwaysTrue() {\n    \r\n    \r\n    switch (getKind()) {\n    case IS_NOT_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysFalse();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysTrue();\n    case SEARCH:\n      final Sarg sarg = ((RexLiteral) operands.get(1)).getValueAs(Sarg.class);\n      return requireNonNull(sarg, \"sarg\").isAll()\n          && (sarg.nullAs == RexUnknownAs.TRUE\n              || !operands.get(0).getType().isNullable());\n    default:\n      return false;\n    }\n  }\n","date":"2021-03-03 04:28:27","endLine":222,"groupId":"101738","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"isAlwaysTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/25/26d7df5df8e1106bbf3a8adfdb9906eeba107d.src","preCode":"  @Override public boolean isAlwaysTrue() {\n    \r\n    \r\n    switch (getKind()) {\n    case IS_NOT_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysFalse();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysTrue();\n    case SEARCH:\n      final Sarg sarg = ((RexLiteral) operands.get(1)).getValueAs(Sarg.class);\n      return requireNonNull(sarg, \"sarg\").isAll()\n          && (sarg.containsNull || !operands.get(0).getType().isNullable());\n    default:\n      return false;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexCall.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2020-12-24 05:32:41","commitOrder":5,"curCode":"  @Override public boolean isAlwaysFalse() {\n    switch (getKind()) {\n    case IS_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysTrue();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysFalse();\n    case SEARCH:\n      final Sarg sarg = ((RexLiteral) operands.get(1)).getValueAs(Sarg.class);\n      return requireNonNull(sarg, \"sarg\").isNone()\n          && (sarg.nullAs == RexUnknownAs.FALSE\n              || !operands.get(0).getType().isNullable());\n    default:\n      return false;\n    }\n  }\n","date":"2021-03-03 04:28:27","endLine":244,"groupId":"101738","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"isAlwaysFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/25/26d7df5df8e1106bbf3a8adfdb9906eeba107d.src","preCode":"  @Override public boolean isAlwaysFalse() {\n    switch (getKind()) {\n    case IS_NULL:\n      return !operands.get(0).getType().isNullable();\n    case IS_NOT_TRUE:\n    case IS_FALSE:\n    case NOT:\n      return operands.get(0).isAlwaysTrue();\n    case IS_NOT_FALSE:\n    case IS_TRUE:\n    case CAST:\n      return operands.get(0).isAlwaysFalse();\n    case SEARCH:\n      final Sarg sarg = ((RexLiteral) operands.get(1)).getValueAs(Sarg.class);\n      return requireNonNull(sarg, \"sarg\").isNone()\n          && (!sarg.containsNull || !operands.get(0).getType().isNullable());\n    default:\n      return false;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexCall.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"}],"commitId":"00d1086c7003115a9ed9dcc874051f515b7b5aae","commitMessage":"@@@[CALCITE-4446] Implement three-valued logic for SEARCH operator\n\nClose apache/calcite#2357\n","date":"2021-03-03 04:28:27","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"}]
