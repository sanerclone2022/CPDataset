[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public void testGetDate() throws Exception {\n    OptiqAssert.that()\n      .with(OptiqAssert.Config.JDBC_FOODMART)\n      .doWithConnection(\n          new Function<OptiqConnection, Object>() {\n            public Object apply(OptiqConnection conn) {\n              try {\n                Statement stmt = conn.createStatement();\n                ResultSet rs = stmt.executeQuery(\n                    \"select min(\\\"date\\\") mindate from \\\"foodmart\\\".\\\"currency\\\"\");\n                assertTrue(rs.next());\n                assertEquals(\n                    Date.valueOf(\"1997-01-01\"),\n                    rs.getDate(1));\n                assertFalse(rs.next());\n                return null;\n              } catch (SQLException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n  }\n","date":"2014-11-14 09:39:34","endLine":5549,"groupId":"16538","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/07/a80a852c13070ba5bd528e6632fbe305eb1033.src","preCode":"  public void testGetDate() throws Exception {\n    OptiqAssert.that()\n      .with(OptiqAssert.Config.JDBC_FOODMART)\n      .doWithConnection(\n          new Function<OptiqConnection, Object>() {\n            public Object apply(OptiqConnection conn) {\n              try {\n                Statement stmt = conn.createStatement();\n                ResultSet rs = stmt.executeQuery(\n                    \"select min(\\\"date\\\") mindate from \\\"foodmart\\\".\\\"currency\\\"\");\n                assertTrue(rs.next());\n                assertEquals(\n                    Date.valueOf(\"1997-01-01\"),\n                    rs.getDate(1));\n                assertFalse(rs.next());\n                return null;\n              } catch (SQLException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5528,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public void testGetTimestampObject() throws Exception {\n    OptiqAssert.that()\n      .with(OptiqAssert.Config.JDBC_FOODMART)\n      .doWithConnection(\n          new Function<OptiqConnection, Object>() {\n            public Object apply(OptiqConnection conn) {\n              try {\n                Statement stmt = conn.createStatement();\n                ResultSet rs = stmt.executeQuery(\n                    \"select \\\"hire_date\\\" from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\" = 1\");\n                assertTrue(rs.next());\n                assertEquals(\n                    Timestamp.valueOf(\"1994-12-01 00:00:00\"),\n                    rs.getTimestamp(1));\n                assertFalse(rs.next());\n                return null;\n              } catch (SQLException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n  }\n","date":"2014-11-14 09:39:34","endLine":5582,"groupId":"11320","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTimestampObject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/07/a80a852c13070ba5bd528e6632fbe305eb1033.src","preCode":"  public void testGetTimestampObject() throws Exception {\n    OptiqAssert.that()\n      .with(OptiqAssert.Config.JDBC_FOODMART)\n      .doWithConnection(\n          new Function<OptiqConnection, Object>() {\n            public Object apply(OptiqConnection conn) {\n              try {\n                Statement stmt = conn.createStatement();\n                ResultSet rs = stmt.executeQuery(\n                    \"select \\\"hire_date\\\" from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\" = 1\");\n                assertTrue(rs.next());\n                assertEquals(\n                    Timestamp.valueOf(\"1994-12-01 00:00:00\"),\n                    rs.getTimestamp(1));\n                assertFalse(rs.next());\n                return null;\n              } catch (SQLException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5561,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  public void testGetDate() throws Exception {\n    CalciteAssert.that()\n      .with(CalciteAssert.Config.JDBC_FOODMART)\n      .doWithConnection(\n          new Function<CalciteConnection, Object>() {\n            public Object apply(CalciteConnection conn) {\n              try {\n                Statement stmt = conn.createStatement();\n                ResultSet rs = stmt.executeQuery(\n                    \"select min(\\\"date\\\") mindate from \\\"foodmart\\\".\\\"currency\\\"\");\n                assertTrue(rs.next());\n                assertEquals(\n                    Date.valueOf(\"1997-01-01\"),\n                    rs.getDate(1));\n                assertFalse(rs.next());\n                return null;\n              } catch (SQLException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n  }\n","date":"2014-11-14 10:22:06","endLine":5390,"groupId":"16538","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/29/1dff15ca3e8c94607d5cca33d7c97daddb9b8c.src","preCode":"  public void testGetDate() throws Exception {\n    OptiqAssert.that()\n      .with(OptiqAssert.Config.JDBC_FOODMART)\n      .doWithConnection(\n          new Function<OptiqConnection, Object>() {\n            public Object apply(OptiqConnection conn) {\n              try {\n                Statement stmt = conn.createStatement();\n                ResultSet rs = stmt.executeQuery(\n                    \"select min(\\\"date\\\") mindate from \\\"foodmart\\\".\\\"currency\\\"\");\n                assertTrue(rs.next());\n                assertEquals(\n                    Date.valueOf(\"1997-01-01\"),\n                    rs.getDate(1));\n                assertFalse(rs.next());\n                return null;\n              } catch (SQLException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5369,"status":"M"},{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  public void testGetTimestampObject() throws Exception {\n    CalciteAssert.that()\n      .with(CalciteAssert.Config.JDBC_FOODMART)\n      .doWithConnection(\n          new Function<CalciteConnection, Object>() {\n            public Object apply(CalciteConnection conn) {\n              try {\n                Statement stmt = conn.createStatement();\n                ResultSet rs = stmt.executeQuery(\n                    \"select \\\"hire_date\\\" from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\" = 1\");\n                assertTrue(rs.next());\n                assertEquals(\n                    Timestamp.valueOf(\"1994-12-01 00:00:00\"),\n                    rs.getTimestamp(1));\n                assertFalse(rs.next());\n                return null;\n              } catch (SQLException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n  }\n","date":"2014-11-14 10:22:06","endLine":5423,"groupId":"11320","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTimestampObject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/29/1dff15ca3e8c94607d5cca33d7c97daddb9b8c.src","preCode":"  public void testGetTimestampObject() throws Exception {\n    OptiqAssert.that()\n      .with(OptiqAssert.Config.JDBC_FOODMART)\n      .doWithConnection(\n          new Function<OptiqConnection, Object>() {\n            public Object apply(OptiqConnection conn) {\n              try {\n                Statement stmt = conn.createStatement();\n                ResultSet rs = stmt.executeQuery(\n                    \"select \\\"hire_date\\\" from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\" = 1\");\n                assertTrue(rs.next());\n                assertEquals(\n                    Timestamp.valueOf(\"1994-12-01 00:00:00\"),\n                    rs.getTimestamp(1));\n                assertFalse(rs.next());\n                return null;\n              } catch (SQLException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5402,"status":"M"}],"commitId":"a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55","commitMessage":"@@@[CALCITE-306] Standardize code style for \"import package.*;\"\n\nRename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].\n\nMake many inner classes of EnumerableRules (e.g. EnumerableFilter.  EnumerableFilterRule) top-level classes.\n\nApply a consistent formatting convention for string literals split over multiple lines.\n\nRename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.\n\nChange occurrences of \"optiq\" and \"eigenbase\" in java code to \"calcite\".\n","date":"2014-11-14 10:22:06","modifiedFileCount":"1156","status":"M","submitter":"Julian Hyde"},{"authorTime":"2017-08-24 09:14:13","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":3,"curCode":"  public void testGetDate() throws Exception {\n    CalciteAssert.that()\n      .with(CalciteAssert.Config.JDBC_FOODMART)\n      .doWithConnection(\n          new Function<CalciteConnection, Object>() {\n            public Object apply(CalciteConnection conn) {\n              try {\n                Statement stmt = conn.createStatement();\n                ResultSet rs = stmt.executeQuery(\n                    \"select min(\\\"date\\\") mindate from \\\"foodmart\\\".\\\"currency\\\"\");\n                assertTrue(rs.next());\n                assertEquals(\n                    Date.valueOf(\"1997-01-01\"),\n                    rs.getDate(1));\n                assertFalse(rs.next());\n                return null;\n              } catch (SQLException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n  }\n","date":"2014-11-14 10:22:06","endLine":5390,"groupId":"16538","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/29/1dff15ca3e8c94607d5cca33d7c97daddb9b8c.src","preCode":"  public void testGetDate() throws Exception {\n    CalciteAssert.that()\n      .with(CalciteAssert.Config.JDBC_FOODMART)\n      .doWithConnection(\n          new Function<CalciteConnection, Object>() {\n            public Object apply(CalciteConnection conn) {\n              try {\n                Statement stmt = conn.createStatement();\n                ResultSet rs = stmt.executeQuery(\n                    \"select min(\\\"date\\\") mindate from \\\"foodmart\\\".\\\"currency\\\"\");\n                assertTrue(rs.next());\n                assertEquals(\n                    Date.valueOf(\"1997-01-01\"),\n                    rs.getDate(1));\n                assertFalse(rs.next());\n                return null;\n              } catch (SQLException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5369,"status":"N"},{"authorDate":"2017-08-24 09:14:13","commitOrder":3,"curCode":"  @Test public void testGetTimestampObject() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(\n            new Function<CalciteConnection, Object>() {\n              public Object apply(CalciteConnection conn) {\n                try {\n                  Statement stmt = conn.createStatement();\n                  ResultSet rs = stmt.executeQuery(\n                      \"select \\\"hire_date\\\" from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\" = 1\");\n                  assertTrue(rs.next());\n                  assertEquals(\n                      Timestamp.valueOf(\"1994-12-01 00:00:00\"),\n                      rs.getTimestamp(1));\n                  assertFalse(rs.next());\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","date":"2017-08-24 09:14:41","endLine":5708,"groupId":"11320","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTimestampObject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/08/7d6564c211a5ab7ae6966c29115e46bd08d23b.src","preCode":"  public void testGetTimestampObject() throws Exception {\n    CalciteAssert.that()\n      .with(CalciteAssert.Config.JDBC_FOODMART)\n      .doWithConnection(\n          new Function<CalciteConnection, Object>() {\n            public Object apply(CalciteConnection conn) {\n              try {\n                Statement stmt = conn.createStatement();\n                ResultSet rs = stmt.executeQuery(\n                    \"select \\\"hire_date\\\" from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\" = 1\");\n                assertTrue(rs.next());\n                assertEquals(\n                    Timestamp.valueOf(\"1994-12-01 00:00:00\"),\n                    rs.getTimestamp(1));\n                assertFalse(rs.next());\n                return null;\n              } catch (SQLException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5687,"status":"M"}],"commitId":"9ab47c0000732ec99c3162954e1eb74eaa30cddf","commitMessage":"@@@[CALCITE-1963] Upgrade checkstyle.  and fix code to comply\n\nUpgrade maven-checkstyle-plugin from 2.12.1 (checkstyle 5.7) to\n2.17 (checkstyle 6.11.2).\n\nEnsure compliance with the new version: lots of cosmetic changes. \nespecially whitespace.  no functionality changes.\n\nI would have liked to set Indentation.forceStrictCondition=true.  to\nensure that parameter and argument lists are indented correctly. But it\ngenerates lots of false-negatives in nested expressions.  so we can't\ndo it at this point.\n","date":"2017-08-24 09:14:41","modifiedFileCount":"240","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-07-06 04:21:59","codes":[{"authorDate":"2018-07-06 04:21:59","commitOrder":4,"curCode":"  public void testGetDate() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(connection -> {\n          try {\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"select min(\\\"date\\\") mindate from \\\"foodmart\\\".\\\"currency\\\"\");\n            assertTrue(rs.next());\n            assertEquals(\n                Date.valueOf(\"1997-01-01\"),\n                rs.getDate(1));\n            assertFalse(rs.next());\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        });\n  }\n","date":"2018-07-09 01:16:26","endLine":5835,"groupId":"12208","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6d/5126142e145242463d3fe7fa816d26e527271c.src","preCode":"  public void testGetDate() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(\n            new Function<CalciteConnection, Object>() {\n              public Object apply(CalciteConnection conn) {\n                try {\n                  Statement stmt = conn.createStatement();\n                  ResultSet rs = stmt.executeQuery(\n                      \"select min(\\\"date\\\") mindate from \\\"foodmart\\\".\\\"currency\\\"\");\n                  assertTrue(rs.next());\n                  assertEquals(\n                      Date.valueOf(\"1997-01-01\"),\n                      rs.getDate(1));\n                  assertFalse(rs.next());\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5818,"status":"M"},{"authorDate":"2018-07-06 04:21:59","commitOrder":4,"curCode":"  @Test public void testGetTimestampObject() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(connection -> {\n          try {\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"select \\\"hire_date\\\" from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\" = 1\");\n            assertTrue(rs.next());\n            assertEquals(\n                Timestamp.valueOf(\"1994-12-01 00:00:00\"),\n                rs.getTimestamp(1));\n            assertFalse(rs.next());\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        });\n  }\n","date":"2018-07-09 01:16:26","endLine":5862,"groupId":"6853","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTimestampObject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6d/5126142e145242463d3fe7fa816d26e527271c.src","preCode":"  @Test public void testGetTimestampObject() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(\n            new Function<CalciteConnection, Object>() {\n              public Object apply(CalciteConnection conn) {\n                try {\n                  Statement stmt = conn.createStatement();\n                  ResultSet rs = stmt.executeQuery(\n                      \"select \\\"hire_date\\\" from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\" = 1\");\n                  assertTrue(rs.next());\n                  assertEquals(\n                      Timestamp.valueOf(\"1994-12-01 00:00:00\"),\n                      rs.getTimestamp(1));\n                  assertFalse(rs.next());\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5845,"status":"M"}],"commitId":"d59b639d27da704f00eff616324a2c04aa06f84c","commitMessage":"@@@[CALCITE-2259] Allow Java 8 syntax\n\nIn summary: use lambdas where possible.  switch from Guava function\ntypes to Java function types or lambdas.  but continue to use Guava\ncomponents (such as immutable collections and cache) that have no\nequivalent in the Java runtime.\n\n1. Change single-abstract-method (SAM) classes to lambdas. Preserve\nformatting wherever possible.\n\n2. Change AssertQuery.returns argument type from Guava Function to Java\nConsumer. If you are using a lambda and see 'returns is deprecated'. \nremove the 'return null;' line.  and the lambda will become a Consumer\n(whose return is void).\n\n3. Change RelOptRuleOperand and RelOptRule.operand methods to take Java\nPredicate rather than Guava Predicate.\n\n4. Change the argument of Hook.add and .addThread from Guava Function to\nJava Consumer.\n\n5. Change 'list.toArray(new T[list.size()])' to 'list.toArray(new T[0])'\nbecause the latter is simpler.  and just as efficient on recent Java\nversions.\n\n6. Resource references; change \"try (Closeable ignore = foo())\" to \"try\n  (foo())\".  especially uses of TryThreadLocal and Hook.Closeable.\n\n7. Convert linq4j Function1 to java Function.  Function2 to java BiFunction\n\n8. Fix occurrences of Intellij's \"Explicit type can be replaced with\n<>\" inspection. (Occurs for \"List<String> list = new\nArrayList<String>();\".)\n\n9. Change Guava Preconditions.checkNotNull to Java\nObjects.requireNonNull. (Kevin Risden)\n\n10. Break out anonymous classes and fix dependency problems.\n\n11. Use CacheLoader.of(Function) where possible.\n\n12. Replace sub-classes of ThreadLocal with ThreadLocal.withInitial().\n\n13. Replace Guava collection methods with calls to Java collection types. \nfor example replace Lists.newArrayList() with new ArrayList<>(). \nMaps.newHashSet() with new HashSet<>().  similarly Sets.\n\n14. Replace Guava Joiner with String.join.\n\n15. Replace Collections.emptyList() with ImmutableList.of() in a few\nplaces.\n\nFor backwards compatibility.  we preserved (and deprecated) the old\nmethods that used Guava types. In a few cases where new and old have\nthe same signature (after erasure).  we could not add a method with the\nsame name.  so we gave the new method a \"J\" suffix. Examples include\nHook.property and .propertyJ.  RelOptRule.operand and .operandJ.\n\nIn test code.  we have not slavishly ensured backwards compatibility.\n\nWe do not intend to remove uses of Guava's immutable collections.\n\nWe have ignored Intellij's \"Pseudo functional style code\" inspection\nmost of the time.  but in a few cases have converted Lists.transform(). \nIterables.transform().  and Iterables.filter() into Java streams. Use\nthe Util.toImmutableList() collector if the result is to be an\nimmutable list. Use Util.transform() rather than Lists.transform()\nif you have a Java function rather than a Guava function or lambda.\n\nNot covered in this change (might be done in future):\n* Convert Collections.sort(list) to list.sort.\n* Review uses of 'for (Map.Entry<K.  V> e : map.entrySet())' and see\n  whether it makes sense to convert to 'map.forEach((k.  v) ->\n  ...)'. Intellij inspection is called 'Replace with Map.forEach'.\n\nBreaking changes:\n* LatticeStatisticProvider.Factory.  result of RexUtil.notFun().  and\n  arguments to Mappings.target() are Function (was Guava.  now Java)\n* Argument to SqlSpecialOperator.TokenSequence.parser() is Predicate\n  (was Guava.  now Java)\n* AggregateNode.AccumulatorFactory extends Supplier (was Guava.  now Java)\n","date":"2018-07-09 01:16:26","modifiedFileCount":"514","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-02-14 04:35:36","codes":[{"authorDate":"2019-02-14 04:35:36","commitOrder":5,"curCode":"  public void testGetDate() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(connection -> {\n          try {\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"select min(\\\"date\\\") mindate from \\\"foodmart\\\".\\\"currency\\\"\");\n            assertTrue(rs.next());\n            assertEquals(\n                Date.valueOf(\"1997-01-01\"),\n                rs.getDate(1));\n            assertFalse(rs.next());\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2019-02-27 15:04:26","endLine":5828,"groupId":"12208","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fd/ab4d3b8320a0a20d9bcdcd5ea668ebc9957f86.src","preCode":"  public void testGetDate() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(connection -> {\n          try {\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"select min(\\\"date\\\") mindate from \\\"foodmart\\\".\\\"currency\\\"\");\n            assertTrue(rs.next());\n            assertEquals(\n                Date.valueOf(\"1997-01-01\"),\n                rs.getDate(1));\n            assertFalse(rs.next());\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5811,"status":"M"},{"authorDate":"2019-02-14 04:35:36","commitOrder":5,"curCode":"  @Test public void testGetTimestampObject() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(connection -> {\n          try {\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"select \\\"hire_date\\\" from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\" = 1\");\n            assertTrue(rs.next());\n            assertEquals(\n                Timestamp.valueOf(\"1994-12-01 00:00:00\"),\n                rs.getTimestamp(1));\n            assertFalse(rs.next());\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2019-02-27 15:04:26","endLine":5855,"groupId":"6853","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTimestampObject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fd/ab4d3b8320a0a20d9bcdcd5ea668ebc9957f86.src","preCode":"  @Test public void testGetTimestampObject() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(connection -> {\n          try {\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"select \\\"hire_date\\\" from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\" = 1\");\n            assertTrue(rs.next());\n            assertEquals(\n                Timestamp.valueOf(\"1994-12-01 00:00:00\"),\n                rs.getTimestamp(1));\n            assertFalse(rs.next());\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5838,"status":"M"}],"commitId":"ebafff1ede5921901b322872693bf1dbdf09fc8d","commitMessage":"@@@[CALCITE-2878] Avoid use of new RuntimeException(e) in tests\n\nnew RuntimeException(e) adds very little info in tests.  and it makes stacktraces harder to read.\nSo it makes sense to just sneaky-throw in those cases.  especially for test purposes.\n","date":"2019-02-27 15:04:26","modifiedFileCount":"38","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2019-02-14 04:35:36","codes":[{"authorDate":"2019-12-04 02:44:13","commitOrder":6,"curCode":"  @Test public void testGetDate() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(connection -> {\n          try {\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"select min(\\\"date\\\") mindate from \\\"foodmart\\\".\\\"currency\\\"\");\n            assertTrue(rs.next());\n            assertEquals(\n                Date.valueOf(\"1997-01-01\"),\n                rs.getDate(1));\n            assertFalse(rs.next());\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2019-12-14 23:57:27","endLine":6021,"groupId":"12208","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/eb/fc5e955f6506517b927739d96f129d1fbf182d.src","preCode":"  public void testGetDate() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(connection -> {\n          try {\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"select min(\\\"date\\\") mindate from \\\"foodmart\\\".\\\"currency\\\"\");\n            assertTrue(rs.next());\n            assertEquals(\n                Date.valueOf(\"1997-01-01\"),\n                rs.getDate(1));\n            assertFalse(rs.next());\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6004,"status":"M"},{"authorDate":"2019-02-14 04:35:36","commitOrder":6,"curCode":"  @Test public void testGetTimestampObject() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(connection -> {\n          try {\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"select \\\"hire_date\\\" from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\" = 1\");\n            assertTrue(rs.next());\n            assertEquals(\n                Timestamp.valueOf(\"1994-12-01 00:00:00\"),\n                rs.getTimestamp(1));\n            assertFalse(rs.next());\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2019-02-27 15:04:26","endLine":5855,"groupId":"6853","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTimestampObject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fd/ab4d3b8320a0a20d9bcdcd5ea668ebc9957f86.src","preCode":"  @Test public void testGetTimestampObject() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(connection -> {\n          try {\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"select \\\"hire_date\\\" from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\" = 1\");\n            assertTrue(rs.next());\n            assertEquals(\n                Timestamp.valueOf(\"1994-12-01 00:00:00\"),\n                rs.getTimestamp(1));\n            assertFalse(rs.next());\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5838,"status":"N"}],"commitId":"571731b80a58eb095ebac7123285c375e7afff90","commitMessage":"@@@[CALCITE-3559] Update formatting: remove \"// End\" trailers.  move @Test from their own lines\n","date":"2019-12-14 23:57:27","modifiedFileCount":"1961","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testGetDate() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(connection -> {\n          try {\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"select min(\\\"date\\\") mindate from \\\"foodmart\\\".\\\"currency\\\"\");\n            assertTrue(rs.next());\n            assertEquals(\n                Date.valueOf(\"1997-01-01\"),\n                rs.getDate(1));\n            assertFalse(rs.next());\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2020-04-06 04:57:49","endLine":6131,"groupId":"101302","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/0b7f58f4442fcb05f8815355eeabe565385b9a.src","preCode":"  @Test public void testGetDate() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(connection -> {\n          try {\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"select min(\\\"date\\\") mindate from \\\"foodmart\\\".\\\"currency\\\"\");\n            assertTrue(rs.next());\n            assertEquals(\n                Date.valueOf(\"1997-01-01\"),\n                rs.getDate(1));\n            assertFalse(rs.next());\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6114,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testGetTimestampObject() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(connection -> {\n          try {\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"select \\\"hire_date\\\" from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\" = 1\");\n            assertTrue(rs.next());\n            assertEquals(\n                Timestamp.valueOf(\"1994-12-01 00:00:00\"),\n                rs.getTimestamp(1));\n            assertFalse(rs.next());\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2020-04-06 04:57:49","endLine":6158,"groupId":"101302","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTimestampObject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/0b7f58f4442fcb05f8815355eeabe565385b9a.src","preCode":"  @Test public void testGetTimestampObject() throws Exception {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .doWithConnection(connection -> {\n          try {\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"select \\\"hire_date\\\" from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\" = 1\");\n            assertTrue(rs.next());\n            assertEquals(\n                Timestamp.valueOf(\"1994-12-01 00:00:00\"),\n                rs.getTimestamp(1));\n            assertFalse(rs.next());\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6141,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
