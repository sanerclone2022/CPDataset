[{"authorTime":"2017-02-21 19:44:11","codes":[{"authorDate":"2017-03-13 19:11:19","commitOrder":2,"curCode":"  private SqlNode navigationInMeasure(SqlNode node) {\n    Set<String> prefix = node.accept(new PatternValidator(true));\n    Util.discard(prefix);\n    List<SqlNode> ops = ((SqlCall) node).getOperandList();\n\n    SqlOperator defaultOp = SqlStdOperatorTable.FINAL;\n    if (!isRunningOrFinal(ops.get(0).getKind())\n        || ops.get(0).getKind() == SqlKind.RUNNING) {\n      SqlNode newNode = defaultOp.createCall(SqlParserPos.ZERO, ops.get(0));\n      node = SqlStdOperatorTable.AS.createCall(SqlParserPos.ZERO, newNode, ops.get(1));\n    }\n    return node;\n  }\n","date":"2017-04-02 11:43:28","endLine":4562,"groupId":"11916","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"navigationInMeasure","params":"(SqlNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ff/7c38be41ef9670424a71ac696a2fa81524e226.src","preCode":"  private SqlNode navigationInMeasure(SqlNode node) {\n    Set<String> prefix = node.accept(new PatternValidator(true));\n    Util.discard(prefix);\n    List<SqlNode> ops = ((SqlCall) node).getOperandList();\n\n    SqlOperator defaultOp = SqlStdOperatorTable.FINAL;\n    if (!isRunningOrFinal(ops.get(0).getKind())\n        || ops.get(0).getKind() == SqlKind.RUNNING) {\n      SqlNode newNode = defaultOp.createCall(SqlParserPos.ZERO, ops.get(0));\n      node = SqlStdOperatorTable.AS.createCall(SqlParserPos.ZERO, newNode, ops.get(1));\n    }\n    return node;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4550,"status":"B"},{"authorDate":"2017-02-21 19:44:11","commitOrder":2,"curCode":"  private SqlNode navigationInDefine(SqlNode node, String alpha) {\n    Set<String> prefix = node.accept(new PatternValidator(false));\n    Util.discard(prefix);\n    node = new NavigationExpander().go(node);\n    node = new NavigationReplacer(alpha).go(node);\n    return node;\n  }\n","date":"2017-03-05 05:02:44","endLine":4366,"groupId":"1581","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"navigationInDefine","params":"(SqlNodenode@Stringalpha)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5a/e0def2073d433cf6d6aae2c0310f7c8c19e1a1.src","preCode":"  private SqlNode navigationInDefine(SqlNode node, String alpha) {\n    Set<String> prefix = node.accept(new PatternValidator(false));\n    Util.discard(prefix);\n    node = new NavigationExpander().go(node);\n    node = new NavigationReplacer(alpha).go(node);\n    return node;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4360,"status":"NB"}],"commitId":"4d20d62d4d752ce4de29a002ec313a758a7cee6e","commitMessage":"@@@[CALCITE-1642] Support MEASURES clause in MATCH_RECOGNIZE (Zhiqiang-He)\n\nClose apache/calcite#400\n","date":"2017-04-02 11:43:28","modifiedFileCount":"15","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2017-02-21 19:44:11","codes":[{"authorDate":"2017-05-19 14:52:34","commitOrder":3,"curCode":"  private SqlNode navigationInMeasure(SqlNode node, boolean allRows) {\n    final Set<String> prefix = node.accept(new PatternValidator(true));\n    Util.discard(prefix);\n    final List<SqlNode> ops = ((SqlCall) node).getOperandList();\n\n    final SqlOperator defaultOp =\n        allRows ? SqlStdOperatorTable.RUNNING : SqlStdOperatorTable.FINAL;\n    final SqlNode op0 = ops.get(0);\n    if (!isRunningOrFinal(op0.getKind())\n        || !allRows && op0.getKind() == SqlKind.RUNNING) {\n      SqlNode newNode = defaultOp.createCall(SqlParserPos.ZERO, op0);\n      node = SqlStdOperatorTable.AS.createCall(SqlParserPos.ZERO, newNode, ops.get(1));\n    }\n    return node;\n  }\n","date":"2017-05-24 02:28:41","endLine":4609,"groupId":"3548","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"navigationInMeasure","params":"(SqlNodenode@booleanallRows)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b8/cddb064ef7bb11b3f4352d75a01b7efe553be7.src","preCode":"  private SqlNode navigationInMeasure(SqlNode node) {\n    Set<String> prefix = node.accept(new PatternValidator(true));\n    Util.discard(prefix);\n    List<SqlNode> ops = ((SqlCall) node).getOperandList();\n\n    SqlOperator defaultOp = SqlStdOperatorTable.FINAL;\n    if (!isRunningOrFinal(ops.get(0).getKind())\n        || ops.get(0).getKind() == SqlKind.RUNNING) {\n      SqlNode newNode = defaultOp.createCall(SqlParserPos.ZERO, ops.get(0));\n      node = SqlStdOperatorTable.AS.createCall(SqlParserPos.ZERO, newNode, ops.get(1));\n    }\n    return node;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4595,"status":"M"},{"authorDate":"2017-02-21 19:44:11","commitOrder":3,"curCode":"  private SqlNode navigationInDefine(SqlNode node, String alpha) {\n    Set<String> prefix = node.accept(new PatternValidator(false));\n    Util.discard(prefix);\n    node = new NavigationExpander().go(node);\n    node = new NavigationReplacer(alpha).go(node);\n    return node;\n  }\n","date":"2017-03-05 05:02:44","endLine":4366,"groupId":"1581","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"navigationInDefine","params":"(SqlNodenode@Stringalpha)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5a/e0def2073d433cf6d6aae2c0310f7c8c19e1a1.src","preCode":"  private SqlNode navigationInDefine(SqlNode node, String alpha) {\n    Set<String> prefix = node.accept(new PatternValidator(false));\n    Util.discard(prefix);\n    node = new NavigationExpander().go(node);\n    node = new NavigationReplacer(alpha).go(node);\n    return node;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4360,"status":"N"}],"commitId":"e117c10cef192ca4ab10ffec2132b7dbd34319fa","commitMessage":"@@@[CALCITE-1645] In MATCH_RECOGNIZE clause.  support ONE ROW PER MATCH and ALL ROWS PER MATCH (Zhiqiang-He)\n\nClose apache/calcite#452\n","date":"2017-05-24 02:28:41","modifiedFileCount":"9","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2017-02-21 19:44:11","codes":[{"authorDate":"2017-08-15 17:19:00","commitOrder":4,"curCode":"  private SqlNode navigationInMeasure(SqlNode node, boolean allRows) {\n    final Set<String> prefix = node.accept(new PatternValidator(true));\n    Util.discard(prefix);\n    final List<SqlNode> ops = ((SqlCall) node).getOperandList();\n\n    final SqlOperator defaultOp =\n        allRows ? SqlStdOperatorTable.RUNNING : SqlStdOperatorTable.FINAL;\n    final SqlNode op0 = ops.get(0);\n    if (!isRunningOrFinal(op0.getKind())\n        || !allRows && op0.getKind() == SqlKind.RUNNING) {\n      SqlNode newNode = defaultOp.createCall(SqlParserPos.ZERO, op0);\n      node = SqlStdOperatorTable.AS.createCall(SqlParserPos.ZERO, newNode, ops.get(1));\n    }\n\n    node = new NavigationExpander().go(node);\n    return node;\n  }\n","date":"2017-08-30 01:11:17","endLine":4954,"groupId":"101857","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"navigationInMeasure","params":"(SqlNodenode@booleanallRows)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/68/106a9906a56771936ddc1eeebdcd0d355c036d.src","preCode":"  private SqlNode navigationInMeasure(SqlNode node, boolean allRows) {\n    final Set<String> prefix = node.accept(new PatternValidator(true));\n    Util.discard(prefix);\n    final List<SqlNode> ops = ((SqlCall) node).getOperandList();\n\n    final SqlOperator defaultOp =\n        allRows ? SqlStdOperatorTable.RUNNING : SqlStdOperatorTable.FINAL;\n    final SqlNode op0 = ops.get(0);\n    if (!isRunningOrFinal(op0.getKind())\n        || !allRows && op0.getKind() == SqlKind.RUNNING) {\n      SqlNode newNode = defaultOp.createCall(SqlParserPos.ZERO, op0);\n      node = SqlStdOperatorTable.AS.createCall(SqlParserPos.ZERO, newNode, ops.get(1));\n    }\n    return node;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4938,"status":"M"},{"authorDate":"2017-02-21 19:44:11","commitOrder":4,"curCode":"  private SqlNode navigationInDefine(SqlNode node, String alpha) {\n    Set<String> prefix = node.accept(new PatternValidator(false));\n    Util.discard(prefix);\n    node = new NavigationExpander().go(node);\n    node = new NavigationReplacer(alpha).go(node);\n    return node;\n  }\n","date":"2017-03-05 05:02:44","endLine":4366,"groupId":"101857","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"navigationInDefine","params":"(SqlNodenode@Stringalpha)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5a/e0def2073d433cf6d6aae2c0310f7c8c19e1a1.src","preCode":"  private SqlNode navigationInDefine(SqlNode node, String alpha) {\n    Set<String> prefix = node.accept(new PatternValidator(false));\n    Util.discard(prefix);\n    node = new NavigationExpander().go(node);\n    node = new NavigationReplacer(alpha).go(node);\n    return node;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4360,"status":"N"}],"commitId":"d3a7c0d794cb9d0079fb37999dcd0dd6992f2041","commitMessage":"@@@[CALCITE-1943] Add back NavigationExpander and NavigationReplacer in SqlValidatorImpl (Dian Fu)\n\nIt will replace clauses such as A.price with PREV(A.price.  0) and\nmakes the implementation of RexVisitor.visitPatternFieldRef(RexPatternFieldRef)\nmore unified.  Otherwise.  it is difficult to implement this method. If\nit returns the specified field.  then the navigation such as\nPREV(A.price.  1) becomes impossible; if not.  then comparisons such as\nA.price > PREV(A.price.  1) becomes meaningless.\n\nClose apache/calcite#516\n","date":"2017-08-30 01:11:17","modifiedFileCount":"3","status":"M","submitter":"Dian Fu"}]
