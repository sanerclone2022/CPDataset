[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"    public Query simplify(String hintToken) {\n      TokenType clause = TokenType.SELECT;\n      TokenType foundInClause = null;\n      Query foundInSubquery = null;\n      TokenType majorClause = null;\n      if (hintToken != null) {\n        for (Token token : tokenList) {\n          switch (token.type) {\n          case ID:\n            if (token.s.equals(hintToken)) {\n              foundInClause = clause;\n            }\n            break;\n          case SELECT:\n          case FROM:\n          case WHERE:\n          case GROUP:\n          case HAVING:\n          case ORDER:\n            majorClause = token.type;\n            \r\n          case JOIN:\n          case USING:\n          case ON:\n            clause = token.type;\n            break;\n          case COMMA:\n            if (majorClause == TokenType.FROM) {\n              \r\n              clause = TokenType.FROM;\n            }\n            break;\n          case QUERY:\n            if (((Query) token).contains(hintToken)) {\n              foundInClause = clause;\n              foundInSubquery = (Query) token;\n            }\n            break;\n          }\n        }\n      } else {\n        foundInClause = TokenType.QUERY;\n      }\n      if (foundInClause != null) {\n        switch (foundInClause) {\n        case SELECT:\n          purgeSelectListExcept(hintToken);\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case FROM:\n        case JOIN:\n\n          \r\n          purgeSelect();\n          purgeFromExcept(hintToken);\n          purgeWhere();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case ON:\n        case USING:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case WHERE:\n          purgeSelect();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case GROUP:\n        case HAVING:\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case ORDER:\n          purgeWhere();\n          break;\n        case QUERY:\n\n          \r\n          \r\n          \r\n          purgeSelectExprsKeepAliases();\n          purgeWhere();\n          purgeGroupByHaving();\n          break;\n        }\n      }\n\n      \r\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case QUERY: {\n          Query query = (Query) token;\n          query.simplify(\n              (query == foundInSubquery) ? hintToken : null);\n          break;\n        }\n        }\n      }\n      return this;\n    }\n","date":"2014-11-14 09:39:34","endLine":585,"groupId":"776","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"simplify","params":"(StringhintToken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/186dc035965ec685f6fca20e14a7c1039465c9.src","preCode":"    public Query simplify(String hintToken) {\n      TokenType clause = TokenType.SELECT;\n      TokenType foundInClause = null;\n      Query foundInSubquery = null;\n      TokenType majorClause = null;\n      if (hintToken != null) {\n        for (Token token : tokenList) {\n          switch (token.type) {\n          case ID:\n            if (token.s.equals(hintToken)) {\n              foundInClause = clause;\n            }\n            break;\n          case SELECT:\n          case FROM:\n          case WHERE:\n          case GROUP:\n          case HAVING:\n          case ORDER:\n            majorClause = token.type;\n            \r\n          case JOIN:\n          case USING:\n          case ON:\n            clause = token.type;\n            break;\n          case COMMA:\n            if (majorClause == TokenType.FROM) {\n              \r\n              clause = TokenType.FROM;\n            }\n            break;\n          case QUERY:\n            if (((Query) token).contains(hintToken)) {\n              foundInClause = clause;\n              foundInSubquery = (Query) token;\n            }\n            break;\n          }\n        }\n      } else {\n        foundInClause = TokenType.QUERY;\n      }\n      if (foundInClause != null) {\n        switch (foundInClause) {\n        case SELECT:\n          purgeSelectListExcept(hintToken);\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case FROM:\n        case JOIN:\n\n          \r\n          purgeSelect();\n          purgeFromExcept(hintToken);\n          purgeWhere();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case ON:\n        case USING:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case WHERE:\n          purgeSelect();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case GROUP:\n        case HAVING:\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case ORDER:\n          purgeWhere();\n          break;\n        case QUERY:\n\n          \r\n          \r\n          \r\n          purgeSelectExprsKeepAliases();\n          purgeWhere();\n          purgeGroupByHaving();\n          break;\n        }\n      }\n\n      \r\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case QUERY: {\n          Query query = (Query) token;\n          query.simplify(\n              (query == foundInSubquery) ? hintToken : null);\n          break;\n        }\n        }\n      }\n      return this;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"    private boolean contains(String hintToken) {\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case ID:\n          if (token.s.equals(hintToken)) {\n            return true;\n          }\n          break;\n        case QUERY:\n          if (((Query) token).contains(hintToken)) {\n            return true;\n          }\n          break;\n        }\n      }\n      return false;\n    }\n","date":"2014-11-14 09:39:34","endLine":781,"groupId":"2903","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"contains","params":"(StringhintToken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/186dc035965ec685f6fca20e14a7c1039465c9.src","preCode":"    private boolean contains(String hintToken) {\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case ID:\n          if (token.s.equals(hintToken)) {\n            return true;\n          }\n          break;\n        case QUERY:\n          if (((Query) token).contains(hintToken)) {\n            return true;\n          }\n          break;\n        }\n      }\n      return false;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":765,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2016-12-01 07:21:51","commitOrder":2,"curCode":"    public Query simplify(String hintToken) {\n      TokenType clause = TokenType.SELECT;\n      TokenType foundInClause = null;\n      Query foundInSubQuery = null;\n      TokenType majorClause = null;\n      if (hintToken != null) {\n        for (Token token : tokenList) {\n          switch (token.type) {\n          case ID:\n            if (token.s.equals(hintToken)) {\n              foundInClause = clause;\n            }\n            break;\n          case SELECT:\n          case FROM:\n          case WHERE:\n          case GROUP:\n          case HAVING:\n          case ORDER:\n            majorClause = token.type;\n            \r\n          case JOIN:\n          case USING:\n          case ON:\n            clause = token.type;\n            break;\n          case COMMA:\n            if (majorClause == TokenType.FROM) {\n              \r\n              clause = TokenType.FROM;\n            }\n            break;\n          case QUERY:\n            if (((Query) token).contains(hintToken)) {\n              foundInClause = clause;\n              foundInSubQuery = (Query) token;\n            }\n            break;\n          }\n        }\n      } else {\n        foundInClause = TokenType.QUERY;\n      }\n      if (foundInClause != null) {\n        switch (foundInClause) {\n        case SELECT:\n          purgeSelectListExcept(hintToken);\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case FROM:\n        case JOIN:\n\n          \r\n          purgeSelect();\n          purgeFromExcept(hintToken);\n          purgeWhere();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case ON:\n        case USING:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case WHERE:\n          purgeSelect();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case GROUP:\n        case HAVING:\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case ORDER:\n          purgeWhere();\n          break;\n        case QUERY:\n\n          \r\n          \r\n          \r\n          purgeSelectExprsKeepAliases();\n          purgeWhere();\n          purgeGroupByHaving();\n          break;\n        }\n      }\n\n      \r\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case QUERY: {\n          Query query = (Query) token;\n          query.simplify(\n              (query == foundInSubQuery) ? hintToken : null);\n          break;\n        }\n        }\n      }\n      return this;\n    }\n","date":"2016-12-14 12:07:08","endLine":590,"groupId":"776","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"simplify","params":"(StringhintToken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/85/dfa100efd89f6630d4f059560bf1e862407c74.src","preCode":"    public Query simplify(String hintToken) {\n      TokenType clause = TokenType.SELECT;\n      TokenType foundInClause = null;\n      Query foundInSubquery = null;\n      TokenType majorClause = null;\n      if (hintToken != null) {\n        for (Token token : tokenList) {\n          switch (token.type) {\n          case ID:\n            if (token.s.equals(hintToken)) {\n              foundInClause = clause;\n            }\n            break;\n          case SELECT:\n          case FROM:\n          case WHERE:\n          case GROUP:\n          case HAVING:\n          case ORDER:\n            majorClause = token.type;\n            \r\n          case JOIN:\n          case USING:\n          case ON:\n            clause = token.type;\n            break;\n          case COMMA:\n            if (majorClause == TokenType.FROM) {\n              \r\n              clause = TokenType.FROM;\n            }\n            break;\n          case QUERY:\n            if (((Query) token).contains(hintToken)) {\n              foundInClause = clause;\n              foundInSubquery = (Query) token;\n            }\n            break;\n          }\n        }\n      } else {\n        foundInClause = TokenType.QUERY;\n      }\n      if (foundInClause != null) {\n        switch (foundInClause) {\n        case SELECT:\n          purgeSelectListExcept(hintToken);\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case FROM:\n        case JOIN:\n\n          \r\n          purgeSelect();\n          purgeFromExcept(hintToken);\n          purgeWhere();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case ON:\n        case USING:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case WHERE:\n          purgeSelect();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case GROUP:\n        case HAVING:\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case ORDER:\n          purgeWhere();\n          break;\n        case QUERY:\n\n          \r\n          \r\n          \r\n          purgeSelectExprsKeepAliases();\n          purgeWhere();\n          purgeGroupByHaving();\n          break;\n        }\n      }\n\n      \r\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case QUERY: {\n          Query query = (Query) token;\n          query.simplify(\n              (query == foundInSubquery) ? hintToken : null);\n          break;\n        }\n        }\n      }\n      return this;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":479,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"    private boolean contains(String hintToken) {\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case ID:\n          if (token.s.equals(hintToken)) {\n            return true;\n          }\n          break;\n        case QUERY:\n          if (((Query) token).contains(hintToken)) {\n            return true;\n          }\n          break;\n        }\n      }\n      return false;\n    }\n","date":"2014-11-14 09:39:34","endLine":781,"groupId":"2903","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"contains","params":"(StringhintToken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/186dc035965ec685f6fca20e14a7c1039465c9.src","preCode":"    private boolean contains(String hintToken) {\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case ID:\n          if (token.s.equals(hintToken)) {\n            return true;\n          }\n          break;\n        case QUERY:\n          if (((Query) token).contains(hintToken)) {\n            return true;\n          }\n          break;\n        }\n      }\n      return false;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":765,"status":"N"}],"commitId":"e38d51e8f4e61e32213aaeb39790e58069f718a4","commitMessage":"@@@[CALCITE-1519] Standardize on \"sub-query\" rather than \"subquery\" in class names and comments\n\nThere are lots of backward-compatible changes (e.g. leaving the old\nname but deprecated) but the following changes are breaking (albeit\nto APIs not widely used):\n* public interface SubqueryConverter becomes SubQueryConverter\n* public enum RelOptUtil.SubqueryType becomes SubQueryType\n* public void SqlPrettyWriter.setSubqueryStyle() becomes setSubQueryStyle\n* public void SqlToRelConverter.setSubqueryConverter() becomes setSubQueryConverter\n* public boolean SqlToRelConverter.canConvertSubquery() becomes canConvertSubQuery\n* public boolean SqlToRelConverter.convertSubquery() becomes convertSubQuery\n* public SqlToRelConverter.Config.getInSubqueryThreshold() becomes getInSubQueryThreshold\n","date":"2016-12-14 12:07:08","modifiedFileCount":"30","status":"M","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2018-08-19 23:20:00","commitOrder":3,"curCode":"    public Query simplify(String hintToken) {\n      TokenType clause = TokenType.SELECT;\n      TokenType foundInClause = null;\n      Query foundInSubQuery = null;\n      TokenType majorClause = null;\n      if (hintToken != null) {\n        for (Token token : tokenList) {\n          switch (token.type) {\n          case ID:\n            if (token.s.equals(hintToken)) {\n              foundInClause = clause;\n            }\n            break;\n          case SELECT:\n          case FROM:\n          case WHERE:\n          case GROUP:\n          case HAVING:\n          case ORDER:\n            majorClause = token.type;\n            \r\n          case JOIN:\n          case USING:\n          case ON:\n            clause = token.type;\n            break;\n          case COMMA:\n            if (majorClause == TokenType.FROM) {\n              \r\n              clause = TokenType.FROM;\n            }\n            break;\n          case QUERY:\n            if (((Query) token).contains(hintToken)) {\n              foundInClause = clause;\n              foundInSubQuery = (Query) token;\n            }\n            break;\n          }\n        }\n      } else {\n        foundInClause = TokenType.QUERY;\n      }\n      if (foundInClause != null) {\n        switch (foundInClause) {\n        case SELECT:\n          purgeSelectListExcept(hintToken);\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case FROM:\n        case JOIN:\n\n          \r\n          purgeSelect();\n          purgeFromExcept(hintToken);\n          purgeWhere();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case ON:\n        case USING:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case WHERE:\n          purgeSelect();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case GROUP:\n        case HAVING:\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case ORDER:\n          purgeWhere();\n          break;\n        case QUERY:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeWhere();\n          purgeGroupByHaving();\n          break;\n        }\n      }\n\n      \r\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case QUERY: {\n          Query query = (Query) token;\n          query.simplify(\n              (query == foundInSubQuery) ? hintToken : null);\n          break;\n        }\n        }\n      }\n      return this;\n    }\n","date":"2018-09-05 20:24:24","endLine":630,"groupId":"776","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"simplify","params":"(StringhintToken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/c7c5f05dcf143e657248be3d75fe6686ebd092.src","preCode":"    public Query simplify(String hintToken) {\n      TokenType clause = TokenType.SELECT;\n      TokenType foundInClause = null;\n      Query foundInSubQuery = null;\n      TokenType majorClause = null;\n      if (hintToken != null) {\n        for (Token token : tokenList) {\n          switch (token.type) {\n          case ID:\n            if (token.s.equals(hintToken)) {\n              foundInClause = clause;\n            }\n            break;\n          case SELECT:\n          case FROM:\n          case WHERE:\n          case GROUP:\n          case HAVING:\n          case ORDER:\n            majorClause = token.type;\n            \r\n          case JOIN:\n          case USING:\n          case ON:\n            clause = token.type;\n            break;\n          case COMMA:\n            if (majorClause == TokenType.FROM) {\n              \r\n              clause = TokenType.FROM;\n            }\n            break;\n          case QUERY:\n            if (((Query) token).contains(hintToken)) {\n              foundInClause = clause;\n              foundInSubQuery = (Query) token;\n            }\n            break;\n          }\n        }\n      } else {\n        foundInClause = TokenType.QUERY;\n      }\n      if (foundInClause != null) {\n        switch (foundInClause) {\n        case SELECT:\n          purgeSelectListExcept(hintToken);\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case FROM:\n        case JOIN:\n\n          \r\n          purgeSelect();\n          purgeFromExcept(hintToken);\n          purgeWhere();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case ON:\n        case USING:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case WHERE:\n          purgeSelect();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case GROUP:\n        case HAVING:\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case ORDER:\n          purgeWhere();\n          break;\n        case QUERY:\n\n          \r\n          \r\n          \r\n          purgeSelectExprsKeepAliases();\n          purgeWhere();\n          purgeGroupByHaving();\n          break;\n        }\n      }\n\n      \r\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case QUERY: {\n          Query query = (Query) token;\n          query.simplify(\n              (query == foundInSubQuery) ? hintToken : null);\n          break;\n        }\n        }\n      }\n      return this;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":517,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":3,"curCode":"    private boolean contains(String hintToken) {\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case ID:\n          if (token.s.equals(hintToken)) {\n            return true;\n          }\n          break;\n        case QUERY:\n          if (((Query) token).contains(hintToken)) {\n            return true;\n          }\n          break;\n        }\n      }\n      return false;\n    }\n","date":"2014-11-14 09:39:34","endLine":781,"groupId":"2903","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"contains","params":"(StringhintToken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/186dc035965ec685f6fca20e14a7c1039465c9.src","preCode":"    private boolean contains(String hintToken) {\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case ID:\n          if (token.s.equals(hintToken)) {\n            return true;\n          }\n          break;\n        case QUERY:\n          if (((Query) token).contains(hintToken)) {\n            return true;\n          }\n          break;\n        }\n      }\n      return false;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":765,"status":"N"}],"commitId":"77b8c4dbf4f42c8cbbbb0e41ef9d49f0c2d9ba39","commitMessage":"@@@[CALCITE-2476] SqlAdvisor: produce hints when sub-query with * is present in query\n\nsimplifySql produced 0 AS \"*\".  and it caused the SQL to fail validation.\nThe fix is to disable transformation of expressions to \"0 as ...\".  so it keeps select * as is.\n","date":"2018-09-05 20:24:24","modifiedFileCount":"2","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2019-11-04 16:59:01","codes":[{"authorDate":"2019-11-04 16:59:01","commitOrder":4,"curCode":"    public Query simplify(String hintToken) {\n      TokenType clause = TokenType.SELECT;\n      TokenType foundInClause = null;\n      Query foundInSubQuery = null;\n      TokenType majorClause = null;\n      if (hintToken != null) {\n        for (Token token : tokenList) {\n          switch (token.type) {\n          case ID:\n            if (hintToken.equals(token.s)) {\n              foundInClause = clause;\n            }\n            break;\n          case SELECT:\n          case FROM:\n          case WHERE:\n          case GROUP:\n          case HAVING:\n          case ORDER:\n            majorClause = token.type;\n            \r\n          case JOIN:\n          case USING:\n          case ON:\n            clause = token.type;\n            break;\n          case COMMA:\n            if (majorClause == TokenType.FROM) {\n              \r\n              clause = TokenType.FROM;\n            }\n            break;\n          case QUERY:\n            if (((Query) token).contains(hintToken)) {\n              foundInClause = clause;\n              foundInSubQuery = (Query) token;\n            }\n            break;\n          }\n        }\n      } else {\n        foundInClause = TokenType.QUERY;\n      }\n      if (foundInClause != null) {\n        switch (foundInClause) {\n        case SELECT:\n          purgeSelectListExcept(hintToken);\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case FROM:\n        case JOIN:\n\n          \r\n          purgeSelect();\n          purgeFromExcept(hintToken);\n          purgeWhere();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case ON:\n        case USING:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case WHERE:\n          purgeSelect();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case GROUP:\n        case HAVING:\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case ORDER:\n          purgeWhere();\n          break;\n        case QUERY:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeWhere();\n          purgeGroupByHaving();\n          break;\n        }\n      }\n\n      \r\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case QUERY: {\n          Query query = (Query) token;\n          query.simplify(\n              (query == foundInSubQuery) ? hintToken : null);\n          break;\n        }\n        }\n      }\n      return this;\n    }\n","date":"2019-11-10 03:06:37","endLine":628,"groupId":"776","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"simplify","params":"(StringhintToken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2e/29d6de1a7f19669f04b1fcb9a29dcd232958fc.src","preCode":"    public Query simplify(String hintToken) {\n      TokenType clause = TokenType.SELECT;\n      TokenType foundInClause = null;\n      Query foundInSubQuery = null;\n      TokenType majorClause = null;\n      if (hintToken != null) {\n        for (Token token : tokenList) {\n          switch (token.type) {\n          case ID:\n            if (token.s.equals(hintToken)) {\n              foundInClause = clause;\n            }\n            break;\n          case SELECT:\n          case FROM:\n          case WHERE:\n          case GROUP:\n          case HAVING:\n          case ORDER:\n            majorClause = token.type;\n            \r\n          case JOIN:\n          case USING:\n          case ON:\n            clause = token.type;\n            break;\n          case COMMA:\n            if (majorClause == TokenType.FROM) {\n              \r\n              clause = TokenType.FROM;\n            }\n            break;\n          case QUERY:\n            if (((Query) token).contains(hintToken)) {\n              foundInClause = clause;\n              foundInSubQuery = (Query) token;\n            }\n            break;\n          }\n        }\n      } else {\n        foundInClause = TokenType.QUERY;\n      }\n      if (foundInClause != null) {\n        switch (foundInClause) {\n        case SELECT:\n          purgeSelectListExcept(hintToken);\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case FROM:\n        case JOIN:\n\n          \r\n          purgeSelect();\n          purgeFromExcept(hintToken);\n          purgeWhere();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case ON:\n        case USING:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case WHERE:\n          purgeSelect();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case GROUP:\n        case HAVING:\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case ORDER:\n          purgeWhere();\n          break;\n        case QUERY:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeWhere();\n          purgeGroupByHaving();\n          break;\n        }\n      }\n\n      \r\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case QUERY: {\n          Query query = (Query) token;\n          query.simplify(\n              (query == foundInSubQuery) ? hintToken : null);\n          break;\n        }\n        }\n      }\n      return this;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"M"},{"authorDate":"2019-11-04 16:59:01","commitOrder":4,"curCode":"    private boolean contains(String hintToken) {\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case ID:\n          if (hintToken.equals(token.s)) {\n            return true;\n          }\n          break;\n        case QUERY:\n          if (((Query) token).contains(hintToken)) {\n            return true;\n          }\n          break;\n        }\n      }\n      return false;\n    }\n","date":"2019-11-10 03:06:37","endLine":830,"groupId":"16042","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"contains","params":"(StringhintToken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2e/29d6de1a7f19669f04b1fcb9a29dcd232958fc.src","preCode":"    private boolean contains(String hintToken) {\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case ID:\n          if (token.s.equals(hintToken)) {\n            return true;\n          }\n          break;\n        case QUERY:\n          if (((Query) token).contains(hintToken)) {\n            return true;\n          }\n          break;\n        }\n      }\n      return false;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":814,"status":"M"}],"commitId":"4d1c3e54fc4172c7ff00db3326823c42f237cf04","commitMessage":"@@@[CALCITE-3474] NullPointerException in SqlSimpleParser toke.s.equals() (Xiucheng Qu)\n\nClose #1558\n","date":"2019-11-10 03:06:37","modifiedFileCount":"2","status":"M","submitter":"quxiucheng"},{"authorTime":"2020-09-30 01:31:14","codes":[{"authorDate":"2020-09-30 01:31:14","commitOrder":5,"curCode":"    public Query simplify(String hintToken) {\n      TokenType clause = TokenType.SELECT;\n      TokenType foundInClause = null;\n      Query foundInSubQuery = null;\n      TokenType majorClause = null;\n      if (hintToken != null) {\n        for (Token token : tokenList) {\n          switch (token.type) {\n          case ID:\n            if (hintToken.equals(token.s)) {\n              foundInClause = clause;\n            }\n            break;\n          case SELECT:\n          case FROM:\n          case WHERE:\n          case GROUP:\n          case HAVING:\n          case ORDER:\n            majorClause = token.type;\n            \r\n          case JOIN:\n          case USING:\n          case ON:\n            clause = token.type;\n            break;\n          case COMMA:\n            if (majorClause == TokenType.FROM) {\n              \r\n              clause = TokenType.FROM;\n            }\n            break;\n          case QUERY:\n            if (((Query) token).contains(hintToken)) {\n              foundInClause = clause;\n              foundInSubQuery = (Query) token;\n            }\n            break;\n          default:\n            break;\n          }\n        }\n      } else {\n        foundInClause = TokenType.QUERY;\n      }\n      if (foundInClause != null) {\n        switch (foundInClause) {\n        case SELECT:\n          purgeSelectListExcept(hintToken);\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case FROM:\n        case JOIN:\n\n          \r\n          purgeSelect();\n          purgeFromExcept(hintToken);\n          purgeWhere();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case ON:\n        case USING:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case WHERE:\n          purgeSelect();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case GROUP:\n        case HAVING:\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case ORDER:\n          purgeWhere();\n          break;\n        case QUERY:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeWhere();\n          purgeGroupByHaving();\n          break;\n        default:\n          break;\n        }\n      }\n\n      \r\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case QUERY: {\n          Query query = (Query) token;\n          query.simplify(\n              (query == foundInSubQuery) ? hintToken : null);\n          break;\n        }\n        default:\n          break;\n        }\n      }\n      return this;\n    }\n","date":"2020-10-07 05:43:06","endLine":633,"groupId":"776","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"simplify","params":"(StringhintToken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ab/64f4a7e205ccc1cb3ce3eb73d932461330e044.src","preCode":"    public Query simplify(String hintToken) {\n      TokenType clause = TokenType.SELECT;\n      TokenType foundInClause = null;\n      Query foundInSubQuery = null;\n      TokenType majorClause = null;\n      if (hintToken != null) {\n        for (Token token : tokenList) {\n          switch (token.type) {\n          case ID:\n            if (hintToken.equals(token.s)) {\n              foundInClause = clause;\n            }\n            break;\n          case SELECT:\n          case FROM:\n          case WHERE:\n          case GROUP:\n          case HAVING:\n          case ORDER:\n            majorClause = token.type;\n            \r\n          case JOIN:\n          case USING:\n          case ON:\n            clause = token.type;\n            break;\n          case COMMA:\n            if (majorClause == TokenType.FROM) {\n              \r\n              clause = TokenType.FROM;\n            }\n            break;\n          case QUERY:\n            if (((Query) token).contains(hintToken)) {\n              foundInClause = clause;\n              foundInSubQuery = (Query) token;\n            }\n            break;\n          }\n        }\n      } else {\n        foundInClause = TokenType.QUERY;\n      }\n      if (foundInClause != null) {\n        switch (foundInClause) {\n        case SELECT:\n          purgeSelectListExcept(hintToken);\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case FROM:\n        case JOIN:\n\n          \r\n          purgeSelect();\n          purgeFromExcept(hintToken);\n          purgeWhere();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case ON:\n        case USING:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case WHERE:\n          purgeSelect();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case GROUP:\n        case HAVING:\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case ORDER:\n          purgeWhere();\n          break;\n        case QUERY:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeWhere();\n          purgeGroupByHaving();\n          break;\n        }\n      }\n\n      \r\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case QUERY: {\n          Query query = (Query) token;\n          query.simplify(\n              (query == foundInSubQuery) ? hintToken : null);\n          break;\n        }\n        }\n      }\n      return this;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":514,"status":"M"},{"authorDate":"2020-09-30 01:31:14","commitOrder":5,"curCode":"    private boolean contains(String hintToken) {\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case ID:\n          if (hintToken.equals(token.s)) {\n            return true;\n          }\n          break;\n        case QUERY:\n          if (((Query) token).contains(hintToken)) {\n            return true;\n          }\n          break;\n        default:\n          break;\n        }\n      }\n      return false;\n    }\n","date":"2020-10-07 05:43:06","endLine":843,"groupId":"16042","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"contains","params":"(StringhintToken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ab/64f4a7e205ccc1cb3ce3eb73d932461330e044.src","preCode":"    private boolean contains(String hintToken) {\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case ID:\n          if (hintToken.equals(token.s)) {\n            return true;\n          }\n          break;\n        case QUERY:\n          if (((Query) token).contains(hintToken)) {\n            return true;\n          }\n          break;\n        }\n      }\n      return false;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":825,"status":"M"}],"commitId":"1b94f37e888cf2d186362473529e6c147afe0f6e","commitMessage":"@@@[CALCITE-4314] Add missing default branches to switch statement\n\nNote: the changes are mechanical.\nThe intention is to keep the previous behavior and prevent adding new\nnon exchaustive switch statements in the future.\n\nSee https://errorprone.info/bugpattern/MissingCasesInEnumSwitch\n","date":"2020-10-07 05:43:06","modifiedFileCount":"98","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-09-30 01:31:14","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"    public Query simplify(@Nullable String hintToken) {\n      TokenType clause = TokenType.SELECT;\n      TokenType foundInClause = null;\n      Query foundInSubQuery = null;\n      TokenType majorClause = null;\n      if (hintToken != null) {\n        for (Token token : tokenList) {\n          switch (token.type) {\n          case ID:\n            if (hintToken.equals(token.s)) {\n              foundInClause = clause;\n            }\n            break;\n          case SELECT:\n          case FROM:\n          case WHERE:\n          case GROUP:\n          case HAVING:\n          case ORDER:\n            majorClause = token.type;\n            \r\n          case JOIN:\n          case USING:\n          case ON:\n            clause = token.type;\n            break;\n          case COMMA:\n            if (majorClause == TokenType.FROM) {\n              \r\n              clause = TokenType.FROM;\n            }\n            break;\n          case QUERY:\n            if (((Query) token).contains(hintToken)) {\n              foundInClause = clause;\n              foundInSubQuery = (Query) token;\n            }\n            break;\n          default:\n            break;\n          }\n        }\n      } else {\n        foundInClause = TokenType.QUERY;\n      }\n      if (foundInClause != null) {\n        switch (foundInClause) {\n        case SELECT:\n          purgeSelectListExcept(hintToken);\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case FROM:\n        case JOIN:\n\n          \r\n          purgeSelect();\n          purgeFromExcept(hintToken);\n          purgeWhere();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case ON:\n        case USING:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case WHERE:\n          purgeSelect();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case GROUP:\n        case HAVING:\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case ORDER:\n          purgeWhere();\n          break;\n        case QUERY:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeWhere();\n          purgeGroupByHaving();\n          break;\n        default:\n          break;\n        }\n      }\n\n      \r\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case QUERY: {\n          Query query = (Query) token;\n          query.simplify(\n              (query == foundInSubQuery) ? hintToken : null);\n          break;\n        }\n        default:\n          break;\n        }\n      }\n      return this;\n    }\n","date":"2020-11-30 06:45:33","endLine":637,"groupId":"101860","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"simplify","params":"(@NullableStringhintToken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fe/10e2a54e1f88e3fac0b812c83c3b5fd5be9561.src","preCode":"    public Query simplify(String hintToken) {\n      TokenType clause = TokenType.SELECT;\n      TokenType foundInClause = null;\n      Query foundInSubQuery = null;\n      TokenType majorClause = null;\n      if (hintToken != null) {\n        for (Token token : tokenList) {\n          switch (token.type) {\n          case ID:\n            if (hintToken.equals(token.s)) {\n              foundInClause = clause;\n            }\n            break;\n          case SELECT:\n          case FROM:\n          case WHERE:\n          case GROUP:\n          case HAVING:\n          case ORDER:\n            majorClause = token.type;\n            \r\n          case JOIN:\n          case USING:\n          case ON:\n            clause = token.type;\n            break;\n          case COMMA:\n            if (majorClause == TokenType.FROM) {\n              \r\n              clause = TokenType.FROM;\n            }\n            break;\n          case QUERY:\n            if (((Query) token).contains(hintToken)) {\n              foundInClause = clause;\n              foundInSubQuery = (Query) token;\n            }\n            break;\n          default:\n            break;\n          }\n        }\n      } else {\n        foundInClause = TokenType.QUERY;\n      }\n      if (foundInClause != null) {\n        switch (foundInClause) {\n        case SELECT:\n          purgeSelectListExcept(hintToken);\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case FROM:\n        case JOIN:\n\n          \r\n          purgeSelect();\n          purgeFromExcept(hintToken);\n          purgeWhere();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case ON:\n        case USING:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case WHERE:\n          purgeSelect();\n          purgeGroupByHaving();\n          purgeOrderBy();\n          break;\n        case GROUP:\n        case HAVING:\n          purgeSelect();\n          purgeWhere();\n          purgeOrderBy();\n          break;\n        case ORDER:\n          purgeWhere();\n          break;\n        case QUERY:\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          purgeWhere();\n          purgeGroupByHaving();\n          break;\n        default:\n          break;\n        }\n      }\n\n      \r\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case QUERY: {\n          Query query = (Query) token;\n          query.simplify(\n              (query == foundInSubQuery) ? hintToken : null);\n          break;\n        }\n        default:\n          break;\n        }\n      }\n      return this;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"M"},{"authorDate":"2020-09-30 01:31:14","commitOrder":6,"curCode":"    private boolean contains(String hintToken) {\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case ID:\n          if (hintToken.equals(token.s)) {\n            return true;\n          }\n          break;\n        case QUERY:\n          if (((Query) token).contains(hintToken)) {\n            return true;\n          }\n          break;\n        default:\n          break;\n        }\n      }\n      return false;\n    }\n","date":"2020-10-07 05:43:06","endLine":843,"groupId":"101860","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"contains","params":"(StringhintToken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ab/64f4a7e205ccc1cb3ce3eb73d932461330e044.src","preCode":"    private boolean contains(String hintToken) {\n      for (Token token : tokenList) {\n        switch (token.type) {\n        case ID:\n          if (hintToken.equals(token.s)) {\n            return true;\n          }\n          break;\n        case QUERY:\n          if (((Query) token).contains(hintToken)) {\n            return true;\n          }\n          break;\n        default:\n          break;\n        }\n      }\n      return false;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":825,"status":"N"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
