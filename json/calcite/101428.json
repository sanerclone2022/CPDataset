[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testTransformSingleGood() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n\n    planner.addRule(new PhysLeafRule());\n    planner.addRule(new GoodSingleRule());\n\n    RelOptCluster cluster = newCluster(planner);\n    NoneLeafRel leafRel =\n        new NoneLeafRel(\n            cluster,\n            \"a\");\n    NoneSingleRel singleRel =\n        new NoneSingleRel(\n            cluster,\n            leafRel);\n    RelNode convertedRel =\n        planner.changeTraits(\n            singleRel,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    planner.setRoot(convertedRel);\n    RelNode result = planner.chooseDelegate().findBestExp();\n    assertTrue(result instanceof PhysSingleRel);\n  }\n","date":"2014-11-14 09:39:34","endLine":120,"groupId":"1216","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransformSingleGood","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/5fdb5631379c9c0478824be899cab8577c644a.src","preCode":"  @Test public void testTransformSingleGood() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n\n    planner.addRule(new PhysLeafRule());\n    planner.addRule(new GoodSingleRule());\n\n    RelOptCluster cluster = newCluster(planner);\n    NoneLeafRel leafRel =\n        new NoneLeafRel(\n            cluster,\n            \"a\");\n    NoneSingleRel singleRel =\n        new NoneSingleRel(\n            cluster,\n            leafRel);\n    RelNode convertedRel =\n        planner.changeTraits(\n            singleRel,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    planner.setRoot(convertedRel);\n    RelNode result = planner.chooseDelegate().findBestExp();\n    assertTrue(result instanceof PhysSingleRel);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testTransformSingleReformed() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n\n    planner.addRule(new PhysLeafRule());\n    planner.addRule(new ReformedSingleRule());\n\n    RelOptCluster cluster = newCluster(planner);\n    NoneLeafRel leafRel =\n        new NoneLeafRel(\n            cluster,\n            \"a\");\n    NoneSingleRel singleRel =\n        new NoneSingleRel(\n            cluster,\n            leafRel);\n    RelNode convertedRel =\n        planner.changeTraits(\n            singleRel,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    planner.setRoot(convertedRel);\n    RelNode result = planner.chooseDelegate().findBestExp();\n    assertTrue(result instanceof PhysSingleRel);\n  }\n","date":"2014-11-14 09:39:34","endLine":197,"groupId":"1216","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformSingleReformed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/5fdb5631379c9c0478824be899cab8577c644a.src","preCode":"  @Test public void testTransformSingleReformed() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n\n    planner.addRule(new PhysLeafRule());\n    planner.addRule(new ReformedSingleRule());\n\n    RelOptCluster cluster = newCluster(planner);\n    NoneLeafRel leafRel =\n        new NoneLeafRel(\n            cluster,\n            \"a\");\n    NoneSingleRel singleRel =\n        new NoneSingleRel(\n            cluster,\n            leafRel);\n    RelNode convertedRel =\n        planner.changeTraits(\n            singleRel,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    planner.setRoot(convertedRel);\n    RelNode result = planner.chooseDelegate().findBestExp();\n    assertTrue(result instanceof PhysSingleRel);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testTransformSingleGood() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n\n    planner.addRule(new PhysLeafRule());\n    planner.addRule(new GoodSingleRule());\n\n    RelOptCluster cluster = newCluster(planner);\n    NoneLeafRel leafRel =\n        new NoneLeafRel(\n            cluster,\n            \"a\");\n    NoneSingleRel singleRel =\n        new NoneSingleRel(\n            cluster,\n            leafRel);\n    RelNode convertedRel =\n        planner.changeTraits(\n            singleRel,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    planner.setRoot(convertedRel);\n    RelNode result = planner.chooseDelegate().findBestExp();\n    assertTrue(result instanceof PhysSingleRel);\n  }\n","date":"2020-04-06 04:57:49","endLine":125,"groupId":"1216","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransformSingleGood","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/ae0cd2afad01213a0363723d9e4e922e7406d9.src","preCode":"  @Test public void testTransformSingleGood() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n\n    planner.addRule(new PhysLeafRule());\n    planner.addRule(new GoodSingleRule());\n\n    RelOptCluster cluster = newCluster(planner);\n    NoneLeafRel leafRel =\n        new NoneLeafRel(\n            cluster,\n            \"a\");\n    NoneSingleRel singleRel =\n        new NoneSingleRel(\n            cluster,\n            leafRel);\n    RelNode convertedRel =\n        planner.changeTraits(\n            singleRel,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    planner.setRoot(convertedRel);\n    RelNode result = planner.chooseDelegate().findBestExp();\n    assertTrue(result instanceof PhysSingleRel);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testTransformSingleReformed() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n\n    planner.addRule(new PhysLeafRule());\n    planner.addRule(new ReformedSingleRule());\n\n    RelOptCluster cluster = newCluster(planner);\n    NoneLeafRel leafRel =\n        new NoneLeafRel(\n            cluster,\n            \"a\");\n    NoneSingleRel singleRel =\n        new NoneSingleRel(\n            cluster,\n            leafRel);\n    RelNode convertedRel =\n        planner.changeTraits(\n            singleRel,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    planner.setRoot(convertedRel);\n    RelNode result = planner.chooseDelegate().findBestExp();\n    assertTrue(result instanceof PhysSingleRel);\n  }\n","date":"2020-04-06 04:57:49","endLine":284,"groupId":"1216","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformSingleReformed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/ae0cd2afad01213a0363723d9e4e922e7406d9.src","preCode":"  @Test public void testTransformSingleReformed() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n\n    planner.addRule(new PhysLeafRule());\n    planner.addRule(new ReformedSingleRule());\n\n    RelOptCluster cluster = newCluster(planner);\n    NoneLeafRel leafRel =\n        new NoneLeafRel(\n            cluster,\n            \"a\");\n    NoneSingleRel singleRel =\n        new NoneSingleRel(\n            cluster,\n            leafRel);\n    RelNode convertedRel =\n        planner.changeTraits(\n            singleRel,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    planner.setRoot(convertedRel);\n    RelNode result = planner.chooseDelegate().findBestExp();\n    assertTrue(result instanceof PhysSingleRel);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-07-09 05:31:40","commitOrder":3,"curCode":"  @Test void testTransformSingleGood() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n\n    planner.addRule(PhysLeafRule.INSTANCE);\n    planner.addRule(GoodSingleRule.INSTANCE);\n\n    RelOptCluster cluster = newCluster(planner);\n    NoneLeafRel leafRel =\n        new NoneLeafRel(\n            cluster,\n            \"a\");\n    NoneSingleRel singleRel =\n        new NoneSingleRel(\n            cluster,\n            leafRel);\n    RelNode convertedRel =\n        planner.changeTraits(\n            singleRel,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    planner.setRoot(convertedRel);\n    RelNode result = planner.chooseDelegate().findBestExp();\n    assertTrue(result instanceof PhysSingleRel);\n  }\n","date":"2020-07-29 02:27:24","endLine":130,"groupId":"101428","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransformSingleGood","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/17/093226350298484f1667b1c8fea7ddee78c549.src","preCode":"  @Test void testTransformSingleGood() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n\n    planner.addRule(new PhysLeafRule());\n    planner.addRule(new GoodSingleRule());\n\n    RelOptCluster cluster = newCluster(planner);\n    NoneLeafRel leafRel =\n        new NoneLeafRel(\n            cluster,\n            \"a\");\n    NoneSingleRel singleRel =\n        new NoneSingleRel(\n            cluster,\n            leafRel);\n    RelNode convertedRel =\n        planner.changeTraits(\n            singleRel,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    planner.setRoot(convertedRel);\n    RelNode result = planner.chooseDelegate().findBestExp();\n    assertTrue(result instanceof PhysSingleRel);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-07-09 05:31:40","commitOrder":3,"curCode":"  @Test void testTransformSingleReformed() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n\n    planner.addRule(PhysLeafRule.INSTANCE);\n    planner.addRule(ReformedSingleRule.INSTANCE);\n\n    RelOptCluster cluster = newCluster(planner);\n    NoneLeafRel leafRel =\n        new NoneLeafRel(\n            cluster,\n            \"a\");\n    NoneSingleRel singleRel =\n        new NoneSingleRel(\n            cluster,\n            leafRel);\n    RelNode convertedRel =\n        planner.changeTraits(\n            singleRel,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    planner.setRoot(convertedRel);\n    RelNode result = planner.chooseDelegate().findBestExp();\n    assertTrue(result instanceof PhysSingleRel);\n  }\n","date":"2020-07-29 02:27:24","endLine":331,"groupId":"101428","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformSingleReformed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/17/093226350298484f1667b1c8fea7ddee78c549.src","preCode":"  @Test void testTransformSingleReformed() {\n    VolcanoPlanner planner = new VolcanoPlanner();\n    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n\n    planner.addRule(new PhysLeafRule());\n    planner.addRule(new ReformedSingleRule());\n\n    RelOptCluster cluster = newCluster(planner);\n    NoneLeafRel leafRel =\n        new NoneLeafRel(\n            cluster,\n            \"a\");\n    NoneSingleRel singleRel =\n        new NoneSingleRel(\n            cluster,\n            leafRel);\n    RelNode convertedRel =\n        planner.changeTraits(\n            singleRel,\n            cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n    planner.setRoot(convertedRel);\n    RelNode result = planner.chooseDelegate().findBestExp();\n    assertTrue(result instanceof PhysSingleRel);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"}],"commitId":"998cd83ebe2fcd7ff3ee565299fed6e199269715","commitMessage":"@@@[CALCITE-3923] Refactor how planner rules are parameterized\n\nCreate operands using a builder interface.  OperandBuilder.  and\ndeprecate methods RelOptRule.operand etc.\n\nThe change is backwards compatible.  in the sense that\nexisting rule constructors are deprecated but still work.\nFrom now on.  to create rules.  call RelOptRule.Config.toRule()\n(which calls the rule's (Config) constructor).\n\nSub-classes of ConverterRule are a little different.  They\ndon't need their own sub-class of Config.  You just need to\ncall Config.withRuleFactory to specify the constructor of the\nsub-class of ConverterRule.\n\nMove rule instances into holder classes such as CoreRules. \nMaterializedViewRules. Deprecate existing rule INSTANCE fields\n(to be removed in 1.25). Deprecate previous rule constructors\n(to be removed in 2.0).\n\nDescribe how to write rules in howto and tutorial.\n\nRemove rule instances marked 'deprecated.  to be removed before\n1.25'.\n\nClose apache/calcite#2024\n","date":"2020-07-29 02:27:24","modifiedFileCount":"191","status":"M","submitter":"Julian Hyde"}]
