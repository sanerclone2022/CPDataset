[{"authorTime":"2020-07-18 13:15:17","codes":[{"authorDate":"2020-07-18 13:15:17","commitOrder":1,"curCode":"  protected boolean deepEquals0(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (obj == null || getClass() != obj.getClass()) {\n      return false;\n    }\n    Filter o = (Filter) obj;\n    return traitSet.equals(o.traitSet)\n        && input.deepEquals(o.input)\n        && condition.equals(o.condition)\n        && getRowType().equalsSansFieldNames(o.getRowType());\n  }\n","date":"2020-07-26 22:11:35","endLine":172,"groupId":"329","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deepEquals0","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/73/94ddfac425ec569e3da8e12a4cc599f9f8481c.src","preCode":"  protected boolean deepEquals0(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (obj == null || getClass() != obj.getClass()) {\n      return false;\n    }\n    Filter o = (Filter) obj;\n    return traitSet.equals(o.traitSet)\n        && input.deepEquals(o.input)\n        && condition.equals(o.condition)\n        && getRowType().equalsSansFieldNames(o.getRowType());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/Filter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"B"},{"authorDate":"2020-07-18 13:15:17","commitOrder":1,"curCode":"  protected boolean deepEquals0(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (obj == null || getClass() != obj.getClass()) {\n      return false;\n    }\n    Join o = (Join) obj;\n    return traitSet.equals(o.traitSet)\n        && left.deepEquals(o.left)\n        && right.deepEquals(o.right)\n        && condition.equals(o.condition)\n        && joinType == o.joinType\n        && hints.equals(o.hints)\n        && getRowType().equalsSansFieldNames(o.getRowType());\n  }\n","date":"2020-07-26 22:11:35","endLine":254,"groupId":"580","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deepEquals0","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c6/86b375f676c5b10911c46500b4a158c7cd13fd.src","preCode":"  protected boolean deepEquals0(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (obj == null || getClass() != obj.getClass()) {\n      return false;\n    }\n    Join o = (Join) obj;\n    return traitSet.equals(o.traitSet)\n        && left.deepEquals(o.left)\n        && right.deepEquals(o.right)\n        && condition.equals(o.condition)\n        && joinType == o.joinType\n        && hints.equals(o.hints)\n        && getRowType().equalsSansFieldNames(o.getRowType());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/Join.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"B"}],"commitId":"b7e245495f5824d5f15143b1b519142876542bf3","commitMessage":"@@@[CALCITE-4129] Support deep equality check for RelNode\n\nCurrently the only way to check rel node tree deep equality is transforming\ninto String by RelOptUtil.toString(rel) with\nSqlExplainLevel.EXPPLAN_ATTRIBUTES.  which is inefficient. One example is\nRexSubQuery. It has to do it this way.  because the rel being reference by\nRexSubQuery is possibly not yet registered to VolcanoPlanner.  and the digest\nequals checks the input RelNode by identity (not content). That is OK for\nRelSubset and HepRelVertex.  if the RelNode is already registered in planner. \nbut not for plain RelNode that is outside of planner. Due to this.  we have to\nimplement another set of deep equals logic in our system.\n\nWith this patch.  deepEquals and deepHashCode now support deep equality check.\n\nClose #2074\n","date":"2020-07-26 22:11:35","modifiedFileCount":"12","status":"B","submitter":"Haisheng Yuan"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  protected boolean deepEquals0(@Nullable Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (obj == null || getClass() != obj.getClass()) {\n      return false;\n    }\n    Filter o = (Filter) obj;\n    return traitSet.equals(o.traitSet)\n        && input.deepEquals(o.input)\n        && condition.equals(o.condition)\n        && getRowType().equalsSansFieldNames(o.getRowType());\n  }\n","date":"2020-11-30 06:45:33","endLine":177,"groupId":"102105","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deepEquals0","params":"(@NullableObjectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3d/c32d60521ae2ab284bc7c1d91f2d5ac3962d74.src","preCode":"  protected boolean deepEquals0(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (obj == null || getClass() != obj.getClass()) {\n      return false;\n    }\n    Filter o = (Filter) obj;\n    return traitSet.equals(o.traitSet)\n        && input.deepEquals(o.input)\n        && condition.equals(o.condition)\n        && getRowType().equalsSansFieldNames(o.getRowType());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/Filter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  protected boolean deepEquals0(@Nullable Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (obj == null || getClass() != obj.getClass()) {\n      return false;\n    }\n    Join o = (Join) obj;\n    return traitSet.equals(o.traitSet)\n        && left.deepEquals(o.left)\n        && right.deepEquals(o.right)\n        && condition.equals(o.condition)\n        && joinType == o.joinType\n        && hints.equals(o.hints)\n        && getRowType().equalsSansFieldNames(o.getRowType());\n  }\n","date":"2020-11-30 06:45:33","endLine":241,"groupId":"102105","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deepEquals0","params":"(@NullableObjectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ff/62e900deb76758b492ac8ce9831db4226f3bf6.src","preCode":"  protected boolean deepEquals0(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (obj == null || getClass() != obj.getClass()) {\n      return false;\n    }\n    Join o = (Join) obj;\n    return traitSet.equals(o.traitSet)\n        && left.deepEquals(o.left)\n        && right.deepEquals(o.right)\n        && condition.equals(o.condition)\n        && joinType == o.joinType\n        && hints.equals(o.hints)\n        && getRowType().equalsSansFieldNames(o.getRowType());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/Join.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
