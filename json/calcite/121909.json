[{"authorTime":"2014-12-12 15:20:09","codes":[{"authorDate":"2014-12-12 15:20:09","commitOrder":1,"curCode":"  public LogicalCorrelate(RelInput input) {\n    this(\n        input.getCluster(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlationId\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", SemiJoinType.class));\n  }\n","date":"2014-12-12 15:21:49","endLine":82,"groupId":"10517","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"LogicalCorrelate","params":"(RelInputinput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e5/d3bd741f8fdd53ec8f15fca54e0ed3d58a1359.src","preCode":"  public LogicalCorrelate(RelInput input) {\n    this(\n        input.getCluster(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlationId\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", SemiJoinType.class));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2014-12-12 15:20:09","commitOrder":1,"curCode":"  public Correlate(RelInput input) {\n    this(\n        input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlationId\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", SemiJoinType.class));\n  }\n","date":"2014-12-12 15:21:49","endLine":102,"groupId":"10517","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"Correlate","params":"(RelInputinput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/37/edda96b475bf596e8d127d153c44c729416f6e.src","preCode":"  public Correlate(RelInput input) {\n    this(\n        input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlationId\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", SemiJoinType.class));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/Correlate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"}],"commitId":"696da1685f6c86b6e90abfbe369ea861deeb72d5","commitMessage":"@@@[CALCITE-483][CALCITE-489] Update Correlate mechanics and implement EnumerableCorrelate (aka nested loops join)\n\nNotable changes:\n * Correlation variable is produced by Correlate relation for its left input\n * In the right input.  correlation is referred as RexFieldAccess(RexCorrelVariable)\n * De-correlation is still performed by default.  however it can be disabled by forceDecorrelate=false connection property\n\nfixes #20\n","date":"2014-12-12 15:21:49","modifiedFileCount":"42","status":"B","submitter":"Vladimir Sitnikov"},{"authorTime":"2014-12-12 15:20:09","codes":[{"authorDate":"2014-12-14 15:49:02","commitOrder":2,"curCode":"  public LogicalCorrelate(RelInput input) {\n    this(input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlationId\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", SemiJoinType.class));\n  }\n","date":"2015-02-08 16:45:51","endLine":91,"groupId":"10517","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"LogicalCorrelate","params":"(RelInputinput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fd/403e059be9e88001672d3aaa5490f59baff462.src","preCode":"  public LogicalCorrelate(RelInput input) {\n    this(\n        input.getCluster(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlationId\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", SemiJoinType.class));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2014-12-12 15:20:09","commitOrder":2,"curCode":"  public Correlate(RelInput input) {\n    this(\n        input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlationId\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", SemiJoinType.class));\n  }\n","date":"2014-12-12 15:21:49","endLine":102,"groupId":"10517","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"Correlate","params":"(RelInputinput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/37/edda96b475bf596e8d127d153c44c729416f6e.src","preCode":"  public Correlate(RelInput input) {\n    this(\n        input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlationId\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", SemiJoinType.class));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/Correlate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"}],"commitId":"2709896eb176c14605b1ddc4be57d916ebeb0fe8","commitMessage":"@@@[CALCITE-88] Add collation as a trait and a kind of RelNode metadata\n\n[CALCITE-526] Add EnumerableMergeJoin.  which exploits sorted inputs\n\n[CALCITE-71] Provide a way to declare that tables are sorted\n\n[CALCITE-576] Make RelCollation trait and AbstractRelNode.getCollationList consistent\n\n[CALCITE-581] Add LogicalSort relational expression.  and make Sort abstract\n\n[CALCITE-254] Propagate RelCollation on aliased columns in JoinRule\n\n[CALCITE-569] ArrayIndexOutOfBoundsException when deducing collation\n\nMore efficient algorithm to check for cycles in the tree of equivalence sets.\n\nFilterJoinRule now propagates traits.\n\nOrd.zip returns random-access list.\n\nReplace references to \"Bug#upgrade\" with \"Deprecated // to be removed before ...\"\n\nAdd composite traits (RelCompositeTrait); subsets only ever have a simple trait.  but other RelNodes can have multiple traits.  and appear in each subset that those traits. Each composite trait is canonized within its trait definition.  and each of the component traits.\n\nRename RelTraitSet.subsumes and RelTrait.subsumes to satisfies.\n","date":"2015-02-08 16:45:51","modifiedFileCount":"128","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-04-12 15:11:30","codes":[{"authorDate":"2019-04-12 15:11:30","commitOrder":3,"curCode":"  public LogicalCorrelate(RelInput input) {\n    this(input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlationId\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", JoinRelType.class));\n  }\n","date":"2019-05-30 11:27:53","endLine":95,"groupId":"10517","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"LogicalCorrelate","params":"(RelInputinput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6c/1ebb561a1b573373679af30430e3056d41da71.src","preCode":"  public LogicalCorrelate(RelInput input) {\n    this(input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlationId\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", SemiJoinType.class));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2019-04-12 15:11:30","commitOrder":3,"curCode":"  public Correlate(RelInput input) {\n    this(\n        input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlationId\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", JoinRelType.class));\n  }\n","date":"2019-05-30 11:27:53","endLine":124,"groupId":"10517","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"Correlate","params":"(RelInputinput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cc/d952301f51b0286f375aa1088ca278adb97e0c.src","preCode":"  public Correlate(RelInput input) {\n    this(\n        input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlationId\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", SemiJoinType.class));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/Correlate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"48093937ae4db179884d1111fa9d12e978e57e1f","commitMessage":"@@@[CALCITE-2696] Improve design of join-like relational expressions\n\n**Diff**\n- Deprecate SemiJoin.  EnumerableSemiJoin.  SemiJoinType. \nEnumerableSemiJoinRule.  JoinToCorrelateRule#SEMI\n- Add SEMI and ANTI join type to JoinRelType.  add method\nprojectsRight() and isOuterJoin()\n- Correlate use JoinRelType instead of SemiJoinType\n- Rename EnumerableThetaJoin to EnumerableNestedLoopJoin\n- Rename EnumerableJoin to EnumerableHashJoin\n- EnumerableJoinRule converts semi join to EnumerableHashJoin\n(EnumerableSemiJoin's functionality is merged into this rule)\n- Add method isSemiJoin() in Join.java to decide if this join is a semi join\n(comes from SemiJoinRule during decorrelateation). \nthe return value true means the join is a semi join equivalent to\nSemiJoin before this patch.\n- Cache the JoinInfo in Join and use it to get leftKeys and rightKeys. \nmerge SemiJoin#computeSelfCost logic into Join#computeSelfCost\n- For RelBuilder.  removes SemiJoinFactory.  method #semiJoin\nnow returns a LogicalJoin with JoinRelType#SEMI\n- Rename EnumerableDefaults#join to EnumerableDefaults#hashJoin\n- Rename EnumerableDefaults#thetaJoin to EnumerableDefaults#nestedLoopJoin\n\n**Rules tweak**\n- JoinAddRedundantSemiJoinRule now creates LogicalJoin with JoinRelType#SEMI\ninstead of SemiJoin\n- JoinToCorrelateRule deprecates SEMI instance and change the matches\ncondition to !join.getJoinType().generatesNullsOnLeft() which also\nallowed ANTI compared before this patch.\n- SemiJoinRule matches SEMI join specifically.\n\n**Metadata tweak**\n- RelMdAllPredicates.  RelMdExpressionLineage: Add full rowType to\ngetAllPredicates(Join) cause semi join only outputs one side\n- RelMdColumnUniqueness.  RelMdSelectivity.  RelMdDistinctRowCount. \nRelMdSize.  RelMdUniqueKeys: merge semi join logic to join\n\n**Test cases change**\n- MaterializationTest#testJoinMaterialization11 now can materialize\nsuccessfully.  cause i allow logical SemiJoin node to match.  the original\nmatches SemiJoin as SemiJoin.class.isAssignableFrom().  which i think is\nwrong cause this will only matches subClasses of SemiJoin which is only\nEnumerableSemiJoin before this patch.\n- SortRemoveRuleTest#removeSortOverEnumerableCorrelate.  because\nCALCITE-2018.  the final EnumerableSort's cost was cached by the previous\nEnumerableSort with logical children.  so i remove the EnumerableSortRule\nand the best plan is correct\n\nclose apache/calcite#1157\n","date":"2019-05-30 11:27:53","modifiedFileCount":"81","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2019-09-01 21:10:57","codes":[{"authorDate":"2019-09-01 21:10:57","commitOrder":4,"curCode":"  public LogicalCorrelate(RelInput input) {\n    this(input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlation\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", JoinRelType.class));\n  }\n","date":"2019-09-13 01:30:28","endLine":86,"groupId":"12345","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"LogicalCorrelate","params":"(RelInputinput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/67d6dfd19d34ee65a1701b5c23e1f0abedbaeb.src","preCode":"  public LogicalCorrelate(RelInput input) {\n    this(input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlationId\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", JoinRelType.class));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2019-09-01 21:10:57","commitOrder":4,"curCode":"  public Correlate(RelInput input) {\n    this(\n        input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlation\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", JoinRelType.class));\n  }\n","date":"2019-09-13 01:30:28","endLine":114,"groupId":"12345","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"Correlate","params":"(RelInputinput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/76/f3d119be0fbb60d04de26602cf9068aa1b886d.src","preCode":"  public Correlate(RelInput input) {\n    this(\n        input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlationId\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", JoinRelType.class));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/Correlate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"507d383a0f8db339691bb126d66c58875fd47ef8","commitMessage":"@@@[CALCITE-3316] Exception while deserializing LogicalCorrelate from json string (Wang Yanlin)\n","date":"2019-09-13 01:30:28","modifiedFileCount":"3","status":"M","submitter":"yanzhi"},{"authorTime":"2020-09-29 22:16:29","codes":[{"authorDate":"2019-09-01 21:10:57","commitOrder":5,"curCode":"  public LogicalCorrelate(RelInput input) {\n    this(input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlation\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", JoinRelType.class));\n  }\n","date":"2019-09-13 01:30:28","endLine":86,"groupId":"12345","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"LogicalCorrelate","params":"(RelInputinput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/67d6dfd19d34ee65a1701b5c23e1f0abedbaeb.src","preCode":"  public LogicalCorrelate(RelInput input) {\n    this(input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlation\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", JoinRelType.class));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"},{"authorDate":"2020-09-29 22:16:29","commitOrder":5,"curCode":"  protected Correlate(RelInput input) {\n    this(\n        input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlation\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", JoinRelType.class));\n  }\n","date":"2020-10-07 05:42:57","endLine":114,"groupId":"12345","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"Correlate","params":"(RelInputinput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f8/b76c9945b3ff2c2cefa10699c1c426c57b0fa3.src","preCode":"  public Correlate(RelInput input) {\n    this(\n        input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlation\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", JoinRelType.class));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/Correlate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"d84bb710aed90adbaeae3c65ed3c95c5f68ce749","commitMessage":"@@@[CALCITE-4314] Make abstract class constructors protected rather than public\n\nSee https://errorprone.info/bugpattern/UnusedNestedClass\n","date":"2020-10-07 05:42:57","modifiedFileCount":"45","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"  public LogicalCorrelate(RelInput input) {\n    this(input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId(\n            (Integer) requireNonNull(input.get(\"correlation\"), \"correlation\")),\n        input.getBitSet(\"requiredColumns\"),\n        requireNonNull(input.getEnum(\"joinType\", JoinRelType.class), \"joinType\"));\n  }\n","date":"2020-11-30 06:45:33","endLine":89,"groupId":"121909","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"LogicalCorrelate","params":"(RelInputinput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8a/4a3f193d9258ea927707365c6cdbfeca5fedf1.src","preCode":"  public LogicalCorrelate(RelInput input) {\n    this(input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlation\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", JoinRelType.class));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"  protected Correlate(RelInput input) {\n    this(\n        input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId(\n            requireNonNull((Integer) input.get(\"correlation\"), \"correlation\")),\n        input.getBitSet(\"requiredColumns\"),\n        requireNonNull(input.getEnum(\"joinType\", JoinRelType.class), \"joinType\"));\n  }\n","date":"2020-11-30 06:45:33","endLine":118,"groupId":"121909","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"Correlate","params":"(RelInputinput)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0a/e300421b87abe829705059b77d0a1c0b3015de.src","preCode":"  protected Correlate(RelInput input) {\n    this(\n        input.getCluster(), input.getTraitSet(), input.getInputs().get(0),\n        input.getInputs().get(1),\n        new CorrelationId((Integer) input.get(\"correlation\")),\n        input.getBitSet(\"requiredColumns\"),\n        input.getEnum(\"joinType\", JoinRelType.class));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/Correlate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
