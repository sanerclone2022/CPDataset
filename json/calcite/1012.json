[{"authorTime":"2018-02-23 07:14:02","codes":[{"authorDate":"2018-02-23 07:14:02","commitOrder":2,"curCode":"  @Test public void testSubQueryAny() {\n    final String sql = \"select x\\n\"\n        + \"from \" + VALUES1 + \"\\n\"\n        + \"where x <= any (\\n\"\n        + \"  select x\\n\"\n        + \"  from \" + VALUES2 + \"\\n\"\n        + \")\";\n\n    final String plan = \"PLAN=todo\\n\\n\";\n\n    final String expectedResult = \"X=1\\n\"\n        + \"X=2\";\n\n    sql(sql).returnsUnordered(expectedResult)\n        .explainContains(plan);\n  }\n","date":"2018-02-23 10:18:37","endLine":758,"groupId":"8016","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubQueryAny","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f4/3f90e6001fb0dbac01dedec11ad3473dd77d69.src","preCode":"  @Test public void testSubQueryAny() {\n    final String sql = \"select x\\n\"\n        + \"from \" + VALUES1 + \"\\n\"\n        + \"where x <= any (\\n\"\n        + \"  select x\\n\"\n        + \"  from \" + VALUES2 + \"\\n\"\n        + \")\";\n\n    final String plan = \"PLAN=todo\\n\\n\";\n\n    final String expectedResult = \"X=1\\n\"\n        + \"X=2\";\n\n    sql(sql).returnsUnordered(expectedResult)\n        .explainContains(plan);\n  }\n","realPath":"spark/src/test/java/org/apache/calcite/test/SparkAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":743,"status":"MB"},{"authorDate":"2018-02-23 07:14:02","commitOrder":2,"curCode":"  @Test public void testSubQueryAll() {\n    final String sql = \"select x\\n\"\n        + \"from \" + VALUES1 + \"\\n\"\n        + \"where x <= all (\\n\"\n        + \"  select x\\n\"\n        + \"  from \" + VALUES2 + \"\\n\"\n        + \")\";\n\n    final String plan = \"PLAN=todo\\n\\n\";\n\n    final String expectedResult = \"X=2\";\n\n    sql(sql).returnsUnordered(expectedResult)\n        .explainContains(plan);\n  }\n","date":"2018-02-23 10:18:37","endLine":775,"groupId":"172","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubQueryAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f4/3f90e6001fb0dbac01dedec11ad3473dd77d69.src","preCode":"  @Test public void testSubQueryAll() {\n    final String sql = \"select x\\n\"\n        + \"from \" + VALUES1 + \"\\n\"\n        + \"where x <= all (\\n\"\n        + \"  select x\\n\"\n        + \"  from \" + VALUES2 + \"\\n\"\n        + \")\";\n\n    final String plan = \"PLAN=todo\\n\\n\";\n\n    final String expectedResult = \"X=2\";\n\n    sql(sql).returnsUnordered(expectedResult)\n        .explainContains(plan);\n  }\n","realPath":"spark/src/test/java/org/apache/calcite/test/SparkAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":761,"status":"MB"}],"commitId":"9ee4edacccc04f060e777afddbee3bc4e7d351a0","commitMessage":"@@@[CALCITE-2185] Increase coverage of unit tests for SparkAdapter (Alessandro Solimando)\n\nClose apache/calcite#629\n","date":"2018-02-23 10:18:37","modifiedFileCount":"1","status":"M","submitter":"Alessandro Solimando"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testSubQueryAny() {\n    final String sql = \"select x\\n\"\n        + \"from \" + VALUES1 + \"\\n\"\n        + \"where x <= any (\\n\"\n        + \"  select x\\n\"\n        + \"  from \" + VALUES2 + \"\\n\"\n        + \")\";\n\n    final String plan = \"PLAN=todo\\n\\n\";\n\n    final String expectedResult = \"X=1\\n\"\n        + \"X=2\";\n\n    sql(sql).returnsUnordered(expectedResult)\n        .explainContains(plan);\n  }\n","date":"2020-04-06 04:57:49","endLine":756,"groupId":"1012","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubQueryAny","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ad/4ba2f28744b8b149144e33a04624e7b3eb66a5.src","preCode":"  @Test public void testSubQueryAny() {\n    final String sql = \"select x\\n\"\n        + \"from \" + VALUES1 + \"\\n\"\n        + \"where x <= any (\\n\"\n        + \"  select x\\n\"\n        + \"  from \" + VALUES2 + \"\\n\"\n        + \")\";\n\n    final String plan = \"PLAN=todo\\n\\n\";\n\n    final String expectedResult = \"X=1\\n\"\n        + \"X=2\";\n\n    sql(sql).returnsUnordered(expectedResult)\n        .explainContains(plan);\n  }\n","realPath":"spark/src/test/java/org/apache/calcite/test/SparkAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":741,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testSubQueryAll() {\n    final String sql = \"select x\\n\"\n        + \"from \" + VALUES1 + \"\\n\"\n        + \"where x <= all (\\n\"\n        + \"  select x\\n\"\n        + \"  from \" + VALUES2 + \"\\n\"\n        + \")\";\n\n    final String plan = \"PLAN=todo\\n\\n\";\n\n    final String expectedResult = \"X=2\";\n\n    sql(sql).returnsUnordered(expectedResult)\n        .explainContains(plan);\n  }\n","date":"2020-04-06 04:57:49","endLine":773,"groupId":"1012","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubQueryAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ad/4ba2f28744b8b149144e33a04624e7b3eb66a5.src","preCode":"  @Test public void testSubQueryAll() {\n    final String sql = \"select x\\n\"\n        + \"from \" + VALUES1 + \"\\n\"\n        + \"where x <= all (\\n\"\n        + \"  select x\\n\"\n        + \"  from \" + VALUES2 + \"\\n\"\n        + \")\";\n\n    final String plan = \"PLAN=todo\\n\\n\";\n\n    final String expectedResult = \"X=2\";\n\n    sql(sql).returnsUnordered(expectedResult)\n        .explainContains(plan);\n  }\n","realPath":"spark/src/test/java/org/apache/calcite/test/SparkAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":759,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
