[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public static <TSource> Enumerable<TSource> distinct(\n      Enumerable<TSource> enumerable, EqualityComparer<TSource> comparer) {\n    if (comparer == Functions.identityComparer()) {\n      return distinct(enumerable);\n    }\n    final Set<Wrapped<TSource>> set = new HashSet<Wrapped<TSource>>();\n    Function1<TSource, Wrapped<TSource>> wrapper = wrapperFor(comparer);\n    Function1<Wrapped<TSource>, TSource> unwrapper = unwrapper();\n    enumerable.select(wrapper).into(set);\n    return Linq4j.asEnumerable(set).select(unwrapper);\n  }\n","date":"2014-11-14 09:39:34","endLine":406,"groupId":"415","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"distinct","params":"(Enumerable<TSource>enumerable@EqualityComparer<TSource>comparer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f1/b889d184a9a89ff62ad19696c394ea9b6a65ad.src","preCode":"  public static <TSource> Enumerable<TSource> distinct(\n      Enumerable<TSource> enumerable, EqualityComparer<TSource> comparer) {\n    if (comparer == Functions.identityComparer()) {\n      return distinct(enumerable);\n    }\n    final Set<Wrapped<TSource>> set = new HashSet<Wrapped<TSource>>();\n    Function1<TSource, Wrapped<TSource>> wrapper = wrapperFor(comparer);\n    Function1<Wrapped<TSource>, TSource> unwrapper = unwrapper();\n    enumerable.select(wrapper).into(set);\n    return Linq4j.asEnumerable(set).select(unwrapper);\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public static <TSource> Enumerable<TSource> union(Enumerable<TSource> source0,\n      Enumerable<TSource> source1, final EqualityComparer<TSource> comparer) {\n    if (comparer == Functions.identityComparer()) {\n      return union(source0, source1);\n    }\n    Set<Wrapped<TSource>> set = new HashSet<Wrapped<TSource>>();\n    Function1<TSource, Wrapped<TSource>> wrapper = wrapperFor(comparer);\n    Function1<Wrapped<TSource>, TSource> unwrapper = unwrapper();\n    source0.select(wrapper).into(set);\n    source1.select(wrapper).into(set);\n    return Linq4j.asEnumerable(set).select(unwrapper);\n  }\n","date":"2014-11-14 09:39:34","endLine":1997,"groupId":"5311","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"union","params":"(Enumerable<TSource>source0@Enumerable<TSource>source1@finalEqualityComparer<TSource>comparer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f1/b889d184a9a89ff62ad19696c394ea9b6a65ad.src","preCode":"  public static <TSource> Enumerable<TSource> union(Enumerable<TSource> source0,\n      Enumerable<TSource> source1, final EqualityComparer<TSource> comparer) {\n    if (comparer == Functions.identityComparer()) {\n      return union(source0, source1);\n    }\n    Set<Wrapped<TSource>> set = new HashSet<Wrapped<TSource>>();\n    Function1<TSource, Wrapped<TSource>> wrapper = wrapperFor(comparer);\n    Function1<Wrapped<TSource>, TSource> unwrapper = unwrapper();\n    source0.select(wrapper).into(set);\n    source1.select(wrapper).into(set);\n    return Linq4j.asEnumerable(set).select(unwrapper);\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1986,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2015-09-14 18:31:53","codes":[{"authorDate":"2015-09-14 18:31:53","commitOrder":2,"curCode":"  public static <TSource> Enumerable<TSource> distinct(\n      Enumerable<TSource> enumerable, EqualityComparer<TSource> comparer) {\n    if (comparer == Functions.identityComparer()) {\n      return distinct(enumerable);\n    }\n    final Set<Wrapped<TSource>> set = new HashSet<>();\n    Function1<TSource, Wrapped<TSource>> wrapper = wrapperFor(comparer);\n    Function1<Wrapped<TSource>, TSource> unwrapper = unwrapper();\n    enumerable.select(wrapper).into(set);\n    return Linq4j.asEnumerable(set).select(unwrapper);\n  }\n","date":"2015-09-18 13:45:02","endLine":466,"groupId":"12117","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"distinct","params":"(Enumerable<TSource>enumerable@EqualityComparer<TSource>comparer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/70/24a86b3721a1168018b474118f32f628259ea1.src","preCode":"  public static <TSource> Enumerable<TSource> distinct(\n      Enumerable<TSource> enumerable, EqualityComparer<TSource> comparer) {\n    if (comparer == Functions.identityComparer()) {\n      return distinct(enumerable);\n    }\n    final Set<Wrapped<TSource>> set = new HashSet<Wrapped<TSource>>();\n    Function1<TSource, Wrapped<TSource>> wrapper = wrapperFor(comparer);\n    Function1<Wrapped<TSource>, TSource> unwrapper = unwrapper();\n    enumerable.select(wrapper).into(set);\n    return Linq4j.asEnumerable(set).select(unwrapper);\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":456,"status":"M"},{"authorDate":"2015-09-14 18:31:53","commitOrder":2,"curCode":"  public static <TSource> Enumerable<TSource> union(Enumerable<TSource> source0,\n      Enumerable<TSource> source1, final EqualityComparer<TSource> comparer) {\n    if (comparer == Functions.identityComparer()) {\n      return union(source0, source1);\n    }\n    Set<Wrapped<TSource>> set = new HashSet<>();\n    Function1<TSource, Wrapped<TSource>> wrapper = wrapperFor(comparer);\n    Function1<Wrapped<TSource>, TSource> unwrapper = unwrapper();\n    source0.select(wrapper).into(set);\n    source1.select(wrapper).into(set);\n    return Linq4j.asEnumerable(set).select(unwrapper);\n  }\n","date":"2015-09-18 13:45:02","endLine":2649,"groupId":"12117","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"union","params":"(Enumerable<TSource>source0@Enumerable<TSource>source1@finalEqualityComparer<TSource>comparer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/70/24a86b3721a1168018b474118f32f628259ea1.src","preCode":"  public static <TSource> Enumerable<TSource> union(Enumerable<TSource> source0,\n      Enumerable<TSource> source1, final EqualityComparer<TSource> comparer) {\n    if (comparer == Functions.identityComparer()) {\n      return union(source0, source1);\n    }\n    Set<Wrapped<TSource>> set = new HashSet<Wrapped<TSource>>();\n    Function1<TSource, Wrapped<TSource>> wrapper = wrapperFor(comparer);\n    Function1<Wrapped<TSource>, TSource> unwrapper = unwrapper();\n    source0.select(wrapper).into(set);\n    source1.select(wrapper).into(set);\n    return Linq4j.asEnumerable(set).select(unwrapper);\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2638,"status":"M"}],"commitId":"02cfd7fdacb2f43ed06f2ebb32cf3205ca26df95","commitMessage":"@@@Linq4j: Implement EnumerableDefaults methods (MiNG)\n\nMethods are:\n* \"defaultIfEmpty\"\n* \"elementAt\" and \"elementAtOrDefault\"\n* \"last\" and \"lastOrDefault\"\n* \"selectMany\"\n* \"sequenceEqual\"\n* \"groupBy\" and \"groupByK\"\n* \"groupJoin\"\n* \"toMap\"\n* \"zip\"\n\nFix up.  removing unnecessary @Override annotations and type\nparameters.  and some problems on JDK 1.7. (Julian Hyde)\n\nClose apache/incubator-calcite#132\n","date":"2015-09-18 13:45:02","modifiedFileCount":"10","status":"M","submitter":"MiNG"}]
