[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    BinaryExpression that = (BinaryExpression) o;\n\n    if (!expression0.equals(that.expression0)) {\n      return false;\n    }\n    if (!expression1.equals(that.expression1)) {\n      return false;\n    }\n    if (primitive != that.primitive) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 09:39:34","endLine":197,"groupId":"14900","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d6/14d21b26cf59dbcb0f0b5fd1c0db6bd894df4a.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    BinaryExpression that = (BinaryExpression) o;\n\n    if (!expression0.equals(that.expression0)) {\n      return false;\n    }\n    if (!expression1.equals(that.expression1)) {\n      return false;\n    }\n    if (primitive != that.primitive) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    TernaryExpression that = (TernaryExpression) o;\n\n    if (!expression0.equals(that.expression0)) {\n      return false;\n    }\n    if (!expression1.equals(that.expression1)) {\n      return false;\n    }\n    if (!expression2.equals(that.expression2)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 09:39:34","endLine":85,"groupId":"14900","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/92/8bb4044a8a7c9bc32891532a5f54534cae6fa6.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    TernaryExpression that = (TernaryExpression) o;\n\n    if (!expression0.equals(that.expression0)) {\n      return false;\n    }\n    if (!expression1.equals(that.expression1)) {\n      return false;\n    }\n    if (!expression2.equals(that.expression2)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    BinaryExpression that = (BinaryExpression) o;\n\n    if (!expression0.equals(that.expression0)) {\n      return false;\n    }\n    if (!expression1.equals(that.expression1)) {\n      return false;\n    }\n    if (primitive != that.primitive) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 10:22:06","endLine":191,"groupId":"14900","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ca/b48ef4d0a16d58a60f754b931879dea6f271bf.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    BinaryExpression that = (BinaryExpression) o;\n\n    if (!expression0.equals(that.expression0)) {\n      return false;\n    }\n    if (!expression1.equals(that.expression1)) {\n      return false;\n    }\n    if (primitive != that.primitive) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    TernaryExpression that = (TernaryExpression) o;\n\n    if (!expression0.equals(that.expression0)) {\n      return false;\n    }\n    if (!expression1.equals(that.expression1)) {\n      return false;\n    }\n    if (!expression2.equals(that.expression2)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 10:22:06","endLine":83,"groupId":"14900","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/26/cf857ad6ce2c2289f0f160d8456ebba8c93642.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    TernaryExpression that = (TernaryExpression) o;\n\n    if (!expression0.equals(that.expression0)) {\n      return false;\n    }\n    if (!expression1.equals(that.expression1)) {\n      return false;\n    }\n    if (!expression2.equals(that.expression2)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55","commitMessage":"@@@[CALCITE-306] Standardize code style for \"import package.*;\"\n\nRename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].\n\nMake many inner classes of EnumerableRules (e.g. EnumerableFilter.  EnumerableFilterRule) top-level classes.\n\nApply a consistent formatting convention for string literals split over multiple lines.\n\nRename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.\n\nChange occurrences of \"optiq\" and \"eigenbase\" in java code to \"calcite\".\n","date":"2014-11-14 10:22:06","modifiedFileCount":"1156","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public boolean equals(@Nullable Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    BinaryExpression that = (BinaryExpression) o;\n\n    if (!expression0.equals(that.expression0)) {\n      return false;\n    }\n    if (!expression1.equals(that.expression1)) {\n      return false;\n    }\n    if (primitive != that.primitive) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2020-11-30 06:45:33","endLine":306,"groupId":"10140","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(@NullableObjecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9f/ba3ec5e73afb176a2a35dcfa4b36c56fb475d0.src","preCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    BinaryExpression that = (BinaryExpression) o;\n\n    if (!expression0.equals(that.expression0)) {\n      return false;\n    }\n    if (!expression1.equals(that.expression1)) {\n      return false;\n    }\n    if (primitive != that.primitive) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public boolean equals(@Nullable Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    TernaryExpression that = (TernaryExpression) o;\n\n    if (!expression0.equals(that.expression0)) {\n      return false;\n    }\n    if (!expression1.equals(that.expression1)) {\n      return false;\n    }\n    if (!expression2.equals(that.expression2)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2020-11-30 06:45:33","endLine":90,"groupId":"10140","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"equals","params":"(@NullableObjecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/10/ae031c728a2c7872cab0de2234d5d0586cc8df.src","preCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    TernaryExpression that = (TernaryExpression) o;\n\n    if (!expression0.equals(that.expression0)) {\n      return false;\n    }\n    if (!expression1.equals(that.expression1)) {\n      return false;\n    }\n    if (!expression2.equals(that.expression2)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
