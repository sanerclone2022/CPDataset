[{"authorTime":"2018-09-20 12:02:19","codes":[{"authorDate":"2018-09-19 10:53:24","commitOrder":2,"curCode":"  ElasticsearchAggregate(RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode input,\n      boolean indicator,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls) throws InvalidRelException  {\n    super(cluster, traitSet, input, indicator, groupSet, groupSets, aggCalls);\n\n    if (getConvention() != input.getConvention()) {\n      String message = String.format(Locale.ROOT, \"%s != %s\", getConvention(),\n          input.getConvention());\n      throw new AssertionError(message);\n    }\n\n    assert getConvention() == input.getConvention();\n    assert getConvention() == ElasticsearchRel.CONVENTION;\n    assert this.groupSets.size() == 1 : \"Grouping sets not supported\";\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\"distinct aggregation not supported\");\n      }\n\n      SqlKind kind = aggCall.getAggregation().getKind();\n      if (!SUPPORTED_AGGREGATIONS.contains(kind)) {\n        final String message = String.format(Locale.ROOT,\n            \"Aggregation %s not supported (use one of %s)\", kind, SUPPORTED_AGGREGATIONS);\n        throw new InvalidRelException(message);\n      }\n    }\n\n    if (getGroupType() != Group.SIMPLE) {\n      final String message = String.format(Locale.ROOT, \"Only %s grouping is supported. \"\n              + \"Yours is %s\", Group.SIMPLE, getGroupType());\n      throw new InvalidRelException(message);\n    }\n\n  }\n","date":"2018-09-19 10:53:24","endLine":88,"groupId":"1916","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"ElasticsearchAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodeinput@booleanindicator@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/27aca243510035d5144dbae825dd1f425d17e7.src","preCode":"  ElasticsearchAggregate(RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode input,\n      boolean indicator,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls) throws InvalidRelException  {\n    super(cluster, traitSet, input, indicator, groupSet, groupSets, aggCalls);\n\n    if (getConvention() != input.getConvention()) {\n      String message = String.format(Locale.ROOT, \"%s != %s\", getConvention(),\n          input.getConvention());\n      throw new AssertionError(message);\n    }\n\n    assert getConvention() == input.getConvention();\n    assert getConvention() == ElasticsearchRel.CONVENTION;\n    assert this.groupSets.size() == 1 : \"Grouping sets not supported\";\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\"distinct aggregation not supported\");\n      }\n\n      SqlKind kind = aggCall.getAggregation().getKind();\n      if (!SUPPORTED_AGGREGATIONS.contains(kind)) {\n        final String message = String.format(Locale.ROOT,\n            \"Aggregation %s not supported (use one of %s)\", kind, SUPPORTED_AGGREGATIONS);\n        throw new InvalidRelException(message);\n      }\n    }\n\n    if (getGroupType() != Group.SIMPLE) {\n      final String message = String.format(Locale.ROOT, \"Only %s grouping is supported. \"\n              + \"Yours is %s\", Group.SIMPLE, getGroupType());\n      throw new InvalidRelException(message);\n    }\n\n  }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchAggregate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"NB"},{"authorDate":"2018-09-20 12:02:19","commitOrder":2,"curCode":"    Object value() {\n      if (!values().containsKey(\"value\")) {\n        String message = String.format(Locale.ROOT, \"'value' field not present in \"\n            + \"%s aggregation\", getName());\n\n        throw new IllegalStateException(message);\n      }\n\n      return values().get(\"value\");\n    }\n","date":"2018-09-21 03:09:33","endLine":516,"groupId":"12446","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"value","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a0/5d2a43f2a08fd5aab139e76b3183af256c05c2.src","preCode":"    Object value() {\n      if (!values().containsKey(\"value\")) {\n        String message = String.format(Locale.ROOT, \"'value' field not present in \"\n            + \"%s aggregation\", getName());\n\n        throw new IllegalStateException(message);\n      }\n\n      return values().get(\"value\");\n    }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchJson.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"B"}],"commitId":"40503ff658b7a02d43841f9df7cc655dcbe5de79","commitMessage":"@@@[CALCITE-2578] Support ANY_VALUE Aggregate Function in ElasticSearch adapter\n\nAllow queries of type `SELECT foo.  ANY_VALUE(bar) FROM elastic GROUP BY foo` in Elastic. They're\nimplemented as Terms aggregations with size 1.\n\nIntermediate JSON operations in stored in implementor are now valid JSONs. Before they were missing leading and\ntrailing curly brackets ({ and }) and manually concatenated in ElasticsearchTable.\n\nCloses apache/calcite#848\n","date":"2018-09-21 03:09:33","modifiedFileCount":"6","status":"M","submitter":"Andrei Sereda"},{"authorTime":"2018-09-20 12:02:19","codes":[{"authorDate":"2019-01-18 07:21:14","commitOrder":3,"curCode":"  ElasticsearchAggregate(RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode input,\n      boolean indicator,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls) throws InvalidRelException  {\n    super(cluster, traitSet, input, indicator, groupSet, groupSets, aggCalls);\n\n    if (getConvention() != input.getConvention()) {\n      String message = String.format(Locale.ROOT, \"%s != %s\", getConvention(),\n          input.getConvention());\n      throw new AssertionError(message);\n    }\n\n    assert getConvention() == input.getConvention();\n    assert getConvention() == ElasticsearchRel.CONVENTION;\n    assert this.groupSets.size() == 1 : \"Grouping sets not supported\";\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct() && !aggCall.isApproximate()) {\n        final String message = String.format(Locale.ROOT, \"Only approximate distinct \"\n            + \"aggregations are supported in Elastic (cardinality aggregation). Use %s function\",\n            SqlStdOperatorTable.APPROX_COUNT_DISTINCT.getName());\n        throw new InvalidRelException(message);\n      }\n\n      final SqlKind kind = aggCall.getAggregation().getKind();\n      if (!SUPPORTED_AGGREGATIONS.contains(kind)) {\n        final String message = String.format(Locale.ROOT,\n            \"Aggregation %s not supported (use one of %s)\", kind, SUPPORTED_AGGREGATIONS);\n        throw new InvalidRelException(message);\n      }\n    }\n\n    if (getGroupType() != Group.SIMPLE) {\n      final String message = String.format(Locale.ROOT, \"Only %s grouping is supported. \"\n              + \"Yours is %s\", Group.SIMPLE, getGroupType());\n      throw new InvalidRelException(message);\n    }\n\n  }\n","date":"2019-01-23 10:53:44","endLine":96,"groupId":"8213","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"ElasticsearchAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodeinput@booleanindicator@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8c/a139744e17244e8523dc2aa9bdf02cf786a693.src","preCode":"  ElasticsearchAggregate(RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode input,\n      boolean indicator,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls) throws InvalidRelException  {\n    super(cluster, traitSet, input, indicator, groupSet, groupSets, aggCalls);\n\n    if (getConvention() != input.getConvention()) {\n      String message = String.format(Locale.ROOT, \"%s != %s\", getConvention(),\n          input.getConvention());\n      throw new AssertionError(message);\n    }\n\n    assert getConvention() == input.getConvention();\n    assert getConvention() == ElasticsearchRel.CONVENTION;\n    assert this.groupSets.size() == 1 : \"Grouping sets not supported\";\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\"distinct aggregation not supported\");\n      }\n\n      SqlKind kind = aggCall.getAggregation().getKind();\n      if (!SUPPORTED_AGGREGATIONS.contains(kind)) {\n        final String message = String.format(Locale.ROOT,\n            \"Aggregation %s not supported (use one of %s)\", kind, SUPPORTED_AGGREGATIONS);\n        throw new InvalidRelException(message);\n      }\n    }\n\n    if (getGroupType() != Group.SIMPLE) {\n      final String message = String.format(Locale.ROOT, \"Only %s grouping is supported. \"\n              + \"Yours is %s\", Group.SIMPLE, getGroupType());\n      throw new InvalidRelException(message);\n    }\n\n  }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchAggregate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2018-09-20 12:02:19","commitOrder":3,"curCode":"    Object value() {\n      if (!values().containsKey(\"value\")) {\n        String message = String.format(Locale.ROOT, \"'value' field not present in \"\n            + \"%s aggregation\", getName());\n\n        throw new IllegalStateException(message);\n      }\n\n      return values().get(\"value\");\n    }\n","date":"2018-09-21 03:09:33","endLine":516,"groupId":"12446","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"value","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a0/5d2a43f2a08fd5aab139e76b3183af256c05c2.src","preCode":"    Object value() {\n      if (!values().containsKey(\"value\")) {\n        String message = String.format(Locale.ROOT, \"'value' field not present in \"\n            + \"%s aggregation\", getName());\n\n        throw new IllegalStateException(message);\n      }\n\n      return values().get(\"value\");\n    }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchJson.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"N"}],"commitId":"fc10982bc856a01c23928de15441822de2d3ffde","commitMessage":"@@@[CALCITE-2797] Support APPROX_COUNT_DISTINCT aggregate function in ElasticSearch adapter\n\nConvert approximate count (on distinct values) `APPROX_COUNT_DISTINCT` into elastic\n[cardinality](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-cardinality-aggregation.html)\nsingle-value metrics aggregation.\n\nRemove AggregateExpandDistinctAggregatesRule from elastic planner so `APPROX_COUNT_DISTINCT` function\ncan be correctly identified.\n","date":"2019-01-23 10:53:44","modifiedFileCount":"5","status":"M","submitter":"Andrei Sereda"},{"authorTime":"2018-09-20 12:02:19","codes":[{"authorDate":"2019-06-01 11:36:14","commitOrder":4,"curCode":"  ElasticsearchAggregate(RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode input,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls) throws InvalidRelException  {\n    super(cluster, traitSet, input, groupSet, groupSets, aggCalls);\n\n    if (getConvention() != input.getConvention()) {\n      String message = String.format(Locale.ROOT, \"%s != %s\", getConvention(),\n          input.getConvention());\n      throw new AssertionError(message);\n    }\n\n    assert getConvention() == input.getConvention();\n    assert getConvention() == ElasticsearchRel.CONVENTION;\n    assert this.groupSets.size() == 1 : \"Grouping sets not supported\";\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct() && !aggCall.isApproximate()) {\n        final String message = String.format(Locale.ROOT, \"Only approximate distinct \"\n            + \"aggregations are supported in Elastic (cardinality aggregation). Use %s function\",\n            SqlStdOperatorTable.APPROX_COUNT_DISTINCT.getName());\n        throw new InvalidRelException(message);\n      }\n\n      final SqlKind kind = aggCall.getAggregation().getKind();\n      if (!SUPPORTED_AGGREGATIONS.contains(kind)) {\n        final String message = String.format(Locale.ROOT,\n            \"Aggregation %s not supported (use one of %s)\", kind, SUPPORTED_AGGREGATIONS);\n        throw new InvalidRelException(message);\n      }\n    }\n\n    if (getGroupType() != Group.SIMPLE) {\n      final String message = String.format(Locale.ROOT, \"Only %s grouping is supported. \"\n              + \"Yours is %s\", Group.SIMPLE, getGroupType());\n      throw new InvalidRelException(message);\n    }\n  }\n","date":"2019-06-02 07:22:34","endLine":94,"groupId":"8213","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"ElasticsearchAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodeinput@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1f/0a6467a7c31ab74c6ee57689bfb3a7de59cf8e.src","preCode":"  ElasticsearchAggregate(RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode input,\n      boolean indicator,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls) throws InvalidRelException  {\n    super(cluster, traitSet, input, indicator, groupSet, groupSets, aggCalls);\n\n    if (getConvention() != input.getConvention()) {\n      String message = String.format(Locale.ROOT, \"%s != %s\", getConvention(),\n          input.getConvention());\n      throw new AssertionError(message);\n    }\n\n    assert getConvention() == input.getConvention();\n    assert getConvention() == ElasticsearchRel.CONVENTION;\n    assert this.groupSets.size() == 1 : \"Grouping sets not supported\";\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct() && !aggCall.isApproximate()) {\n        final String message = String.format(Locale.ROOT, \"Only approximate distinct \"\n            + \"aggregations are supported in Elastic (cardinality aggregation). Use %s function\",\n            SqlStdOperatorTable.APPROX_COUNT_DISTINCT.getName());\n        throw new InvalidRelException(message);\n      }\n\n      final SqlKind kind = aggCall.getAggregation().getKind();\n      if (!SUPPORTED_AGGREGATIONS.contains(kind)) {\n        final String message = String.format(Locale.ROOT,\n            \"Aggregation %s not supported (use one of %s)\", kind, SUPPORTED_AGGREGATIONS);\n        throw new InvalidRelException(message);\n      }\n    }\n\n    if (getGroupType() != Group.SIMPLE) {\n      final String message = String.format(Locale.ROOT, \"Only %s grouping is supported. \"\n              + \"Yours is %s\", Group.SIMPLE, getGroupType());\n      throw new InvalidRelException(message);\n    }\n\n  }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchAggregate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2018-09-20 12:02:19","commitOrder":4,"curCode":"    Object value() {\n      if (!values().containsKey(\"value\")) {\n        String message = String.format(Locale.ROOT, \"'value' field not present in \"\n            + \"%s aggregation\", getName());\n\n        throw new IllegalStateException(message);\n      }\n\n      return values().get(\"value\");\n    }\n","date":"2018-09-21 03:09:33","endLine":516,"groupId":"12446","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"value","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a0/5d2a43f2a08fd5aab139e76b3183af256c05c2.src","preCode":"    Object value() {\n      if (!values().containsKey(\"value\")) {\n        String message = String.format(Locale.ROOT, \"'value' field not present in \"\n            + \"%s aggregation\", getName());\n\n        throw new IllegalStateException(message);\n      }\n\n      return values().get(\"value\");\n    }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchJson.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"N"}],"commitId":"b0e83c469ff57257c1ea621ff943ca76f626a9b7","commitMessage":"@@@Following [CALCITE-2944] remove internal uses of Aggregate.indicator\n\nThese were generating deprecation warnings.\n","date":"2019-06-02 07:22:34","modifiedFileCount":"31","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-09-20 12:02:19","codes":[{"authorDate":"2020-01-13 11:31:19","commitOrder":5,"curCode":"  ElasticsearchAggregate(RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode input,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls) throws InvalidRelException  {\n    super(cluster, traitSet, ImmutableList.of(), input, groupSet, groupSets, aggCalls);\n\n    if (getConvention() != input.getConvention()) {\n      String message = String.format(Locale.ROOT, \"%s != %s\", getConvention(),\n          input.getConvention());\n      throw new AssertionError(message);\n    }\n\n    assert getConvention() == input.getConvention();\n    assert getConvention() == ElasticsearchRel.CONVENTION;\n    assert this.groupSets.size() == 1 : \"Grouping sets not supported\";\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct() && !aggCall.isApproximate()) {\n        final String message = String.format(Locale.ROOT, \"Only approximate distinct \"\n            + \"aggregations are supported in Elastic (cardinality aggregation). Use %s function\",\n            SqlStdOperatorTable.APPROX_COUNT_DISTINCT.getName());\n        throw new InvalidRelException(message);\n      }\n\n      final SqlKind kind = aggCall.getAggregation().getKind();\n      if (!SUPPORTED_AGGREGATIONS.contains(kind)) {\n        final String message = String.format(Locale.ROOT,\n            \"Aggregation %s not supported (use one of %s)\", kind, SUPPORTED_AGGREGATIONS);\n        throw new InvalidRelException(message);\n      }\n    }\n\n    if (getGroupType() != Group.SIMPLE) {\n      final String message = String.format(Locale.ROOT, \"Only %s grouping is supported. \"\n              + \"Yours is %s\", Group.SIMPLE, getGroupType());\n      throw new InvalidRelException(message);\n    }\n  }\n","date":"2020-01-13 12:31:07","endLine":95,"groupId":"10532","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"ElasticsearchAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodeinput@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/07/9a74d79a7ad5cdc84b55658f0b07dd73b1a8b1.src","preCode":"  ElasticsearchAggregate(RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode input,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls) throws InvalidRelException  {\n    super(cluster, traitSet, input, groupSet, groupSets, aggCalls);\n\n    if (getConvention() != input.getConvention()) {\n      String message = String.format(Locale.ROOT, \"%s != %s\", getConvention(),\n          input.getConvention());\n      throw new AssertionError(message);\n    }\n\n    assert getConvention() == input.getConvention();\n    assert getConvention() == ElasticsearchRel.CONVENTION;\n    assert this.groupSets.size() == 1 : \"Grouping sets not supported\";\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct() && !aggCall.isApproximate()) {\n        final String message = String.format(Locale.ROOT, \"Only approximate distinct \"\n            + \"aggregations are supported in Elastic (cardinality aggregation). Use %s function\",\n            SqlStdOperatorTable.APPROX_COUNT_DISTINCT.getName());\n        throw new InvalidRelException(message);\n      }\n\n      final SqlKind kind = aggCall.getAggregation().getKind();\n      if (!SUPPORTED_AGGREGATIONS.contains(kind)) {\n        final String message = String.format(Locale.ROOT,\n            \"Aggregation %s not supported (use one of %s)\", kind, SUPPORTED_AGGREGATIONS);\n        throw new InvalidRelException(message);\n      }\n    }\n\n    if (getGroupType() != Group.SIMPLE) {\n      final String message = String.format(Locale.ROOT, \"Only %s grouping is supported. \"\n              + \"Yours is %s\", Group.SIMPLE, getGroupType());\n      throw new InvalidRelException(message);\n    }\n  }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchAggregate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2018-09-20 12:02:19","commitOrder":5,"curCode":"    Object value() {\n      if (!values().containsKey(\"value\")) {\n        String message = String.format(Locale.ROOT, \"'value' field not present in \"\n            + \"%s aggregation\", getName());\n\n        throw new IllegalStateException(message);\n      }\n\n      return values().get(\"value\");\n    }\n","date":"2018-09-21 03:09:33","endLine":516,"groupId":"10532","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"value","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a0/5d2a43f2a08fd5aab139e76b3183af256c05c2.src","preCode":"    Object value() {\n      if (!values().containsKey(\"value\")) {\n        String message = String.format(Locale.ROOT, \"'value' field not present in \"\n            + \"%s aggregation\", getName());\n\n        throw new IllegalStateException(message);\n      }\n\n      return values().get(\"value\");\n    }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchJson.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"N"}],"commitId":"5cfd8c31cea1bf5411e503b15714cab5fc1c0d0a","commitMessage":"@@@[CALCITE-3723] Following the change to add hints to RelNode.  deprecate the old constructors\n\nConstructors for `Project`.  `TableScan`.  `Calc`.  `Aggregate` and `Join`\nintroduce new parameter named \"hints\" which is a breaking change.\n","date":"2020-01-13 12:31:07","modifiedFileCount":"46","status":"M","submitter":"yuzhao.cyz"}]
