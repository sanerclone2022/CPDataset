[{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testOrderOffsetFetch() {\n    sql(\"select a from foo order by b, c offset 1 row fetch first 2 row only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    \r\n    sql(\"select a from foo order by b, c offset 1 rows fetch first 2 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    \r\n    sql(\"select a from foo order by b, c offset 1 rows fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    \r\n    \r\n    sql(\"select a from foo order by b, c offset 1 fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    sql(\"select a from foo order by b, c fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    sql(\"select a from foo fetch next 4 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"FETCH NEXT 4 ROWS ONLY\");\n    \r\n    sql(\"select a from foo offset 1 row\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"OFFSET 1 ROWS\");\n    \r\n    sql(\"select a from foo offset 1 row fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    sql(\"select a from foo offset ? row fetch next ? rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"OFFSET ? ROWS\\n\"\n            + \"FETCH NEXT ? ROWS ONLY\");\n    \r\n    sql(\"select a from foo offset 1 fetch next 3 ^only^\")\n        .fails(\"(?s).*Encountered \\\"only\\\" at .*\");\n    \r\n    sql(\"select a from foo fetch next 3 rows only ^offset^ 1\")\n        .fails(\"(?s).*Encountered \\\"offset\\\" at .*\");\n  }\n","date":"2019-09-24 02:59:18","endLine":2831,"groupId":"9465","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrderOffsetFetch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testOrderOffsetFetch() {\n    sql(\"select a from foo order by b, c offset 1 row fetch first 2 row only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    \r\n    sql(\"select a from foo order by b, c offset 1 rows fetch first 2 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    \r\n    sql(\"select a from foo order by b, c offset 1 rows fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    \r\n    \r\n    sql(\"select a from foo order by b, c offset 1 fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    sql(\"select a from foo order by b, c fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    sql(\"select a from foo fetch next 4 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"FETCH NEXT 4 ROWS ONLY\");\n    \r\n    sql(\"select a from foo offset 1 row\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"OFFSET 1 ROWS\");\n    \r\n    sql(\"select a from foo offset 1 row fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    sql(\"select a from foo offset ? row fetch next ? rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"OFFSET ? ROWS\\n\"\n            + \"FETCH NEXT ? ROWS ONLY\");\n    \r\n    sql(\"select a from foo offset 1 fetch next 3 ^only^\")\n        .fails(\"(?s).*Encountered \\\"only\\\" at .*\");\n    \r\n    sql(\"select a from foo fetch next 3 rows only ^offset^ 1\")\n        .fails(\"(?s).*Encountered \\\"offset\\\" at .*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2767,"status":"MB"},{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testLimit() {\n    sql(\"select a from foo order by b, c limit 2 offset 1\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    sql(\"select a from foo order by b, c limit 2\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    sql(\"select a from foo order by b, c offset 1\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\");\n  }\n","date":"2019-09-24 02:59:18","endLine":2855,"groupId":"16367","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testLimit() {\n    sql(\"select a from foo order by b, c limit 2 offset 1\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    sql(\"select a from foo order by b, c limit 2\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    sql(\"select a from foo order by b, c offset 1\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2838,"status":"B"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testOrderOffsetFetch() {\n    sql(\"select a from foo order by b, c offset 1 row fetch first 2 row only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    \r\n    sql(\"select a from foo order by b, c offset 1 rows fetch first 2 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    \r\n    sql(\"select a from foo order by b, c offset 1 rows fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    \r\n    \r\n    sql(\"select a from foo order by b, c offset 1 fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    sql(\"select a from foo order by b, c fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    sql(\"select a from foo fetch next 4 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"FETCH NEXT 4 ROWS ONLY\");\n    \r\n    sql(\"select a from foo offset 1 row\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"OFFSET 1 ROWS\");\n    \r\n    sql(\"select a from foo offset 1 row fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    sql(\"select a from foo offset ? row fetch next ? rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"OFFSET ? ROWS\\n\"\n            + \"FETCH NEXT ? ROWS ONLY\");\n    \r\n    sql(\"select a from foo offset 1 fetch next 3 ^only^\")\n        .fails(\"(?s).*Encountered \\\"only\\\" at .*\");\n    \r\n    sql(\"select a from foo fetch next 3 rows only ^offset^ 1\")\n        .fails(\"(?s).*Encountered \\\"offset\\\" at .*\");\n  }\n","date":"2020-04-06 04:57:49","endLine":2843,"groupId":"10851","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrderOffsetFetch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testOrderOffsetFetch() {\n    sql(\"select a from foo order by b, c offset 1 row fetch first 2 row only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    \r\n    sql(\"select a from foo order by b, c offset 1 rows fetch first 2 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    \r\n    sql(\"select a from foo order by b, c offset 1 rows fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    \r\n    \r\n    sql(\"select a from foo order by b, c offset 1 fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    sql(\"select a from foo order by b, c fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    sql(\"select a from foo fetch next 4 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"FETCH NEXT 4 ROWS ONLY\");\n    \r\n    sql(\"select a from foo offset 1 row\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"OFFSET 1 ROWS\");\n    \r\n    sql(\"select a from foo offset 1 row fetch next 3 rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 3 ROWS ONLY\");\n    \r\n    sql(\"select a from foo offset ? row fetch next ? rows only\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"OFFSET ? ROWS\\n\"\n            + \"FETCH NEXT ? ROWS ONLY\");\n    \r\n    sql(\"select a from foo offset 1 fetch next 3 ^only^\")\n        .fails(\"(?s).*Encountered \\\"only\\\" at .*\");\n    \r\n    sql(\"select a from foo fetch next 3 rows only ^offset^ 1\")\n        .fails(\"(?s).*Encountered \\\"offset\\\" at .*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2779,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testLimit() {\n    sql(\"select a from foo order by b, c limit 2 offset 1\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    sql(\"select a from foo order by b, c limit 2\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    sql(\"select a from foo order by b, c offset 1\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\");\n  }\n","date":"2020-04-06 04:57:49","endLine":2867,"groupId":"10851","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testLimit() {\n    sql(\"select a from foo order by b, c limit 2 offset 1\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    sql(\"select a from foo order by b, c limit 2\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"FETCH NEXT 2 ROWS ONLY\");\n    sql(\"select a from foo order by b, c offset 1\")\n        .ok(\"SELECT `A`\\n\"\n            + \"FROM `FOO`\\n\"\n            + \"ORDER BY `B`, `C`\\n\"\n            + \"OFFSET 1 ROWS\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2850,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
