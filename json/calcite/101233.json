[{"authorTime":"2018-05-30 12:16:57","codes":[{"authorDate":"2018-05-30 12:16:57","commitOrder":2,"curCode":"  @Test public void testUserDefinedFunction() throws Exception {\n    final String sql = \"select \\\"adhoc\\\".my_plus(\\\"deptno\\\", 100) as p\\n\"\n        + \"from \\\"adhoc\\\".EMPLOYEES\";\n    final AtomicInteger c = Smalls.MyPlusFunction.INSTANCE_COUNT.get();\n    final int before = c.get();\n    withUdf().query(sql).returnsUnordered(\"P=110\",\n        \"P=120\",\n        \"P=110\",\n        \"P=110\");\n    final int after = c.get();\n    assertThat(after, is(before + 4));\n  }\n","date":"2019-08-29 17:01:46","endLine":199,"groupId":"12323","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserDefinedFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f5/e868131bc4b69ca95a9e79377fa4de13c4e3ea.src","preCode":"  @Test public void testUserDefinedFunction() throws Exception {\n    final String sql = \"select \\\"adhoc\\\".my_plus(\\\"deptno\\\", 100) as p\\n\"\n        + \"from \\\"adhoc\\\".EMPLOYEES\";\n    final AtomicInteger c = Smalls.MyPlusFunction.INSTANCE_COUNT.get();\n    final int before = c.get();\n    withUdf().query(sql).returnsUnordered(\"P=110\",\n        \"P=120\",\n        \"P=110\",\n        \"P=110\");\n    final int after = c.get();\n    assertThat(after, is(before + 4));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"MB"},{"authorDate":"2018-05-30 12:16:57","commitOrder":2,"curCode":"  @Test public void testUserDefinedFunctionWithNull() throws Exception {\n    final String sql = \"select \\\"adhoc\\\".my_det_plus(\\\"deptno\\\", 1 + null) as p\\n\"\n        + \"from \\\"adhoc\\\".EMPLOYEES where 1 > 0 or nullif(null, 1) is null\";\n    final AtomicInteger c = Smalls.MyDeterministicPlusFunction.INSTANCE_COUNT.get();\n    final int before = c.get();\n    withUdf()\n        .query(sql)\n        .returnsUnordered(\"P=null\",\n            \"P=null\",\n            \"P=null\",\n            \"P=null\");\n    final int after = c.get();\n    assertThat(after, is(before + 1));\n  }\n","date":"2019-08-29 17:01:46","endLine":241,"groupId":"12323","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUserDefinedFunctionWithNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f5/e868131bc4b69ca95a9e79377fa4de13c4e3ea.src","preCode":"  @Test public void testUserDefinedFunctionWithNull() throws Exception {\n    final String sql = \"select \\\"adhoc\\\".my_det_plus(\\\"deptno\\\", 1 + null) as p\\n\"\n        + \"from \\\"adhoc\\\".EMPLOYEES where 1 > 0 or nullif(null, 1) is null\";\n    final AtomicInteger c = Smalls.MyDeterministicPlusFunction.INSTANCE_COUNT.get();\n    final int before = c.get();\n    withUdf()\n        .query(sql)\n        .returnsUnordered(\"P=null\",\n            \"P=null\",\n            \"P=null\",\n            \"P=null\");\n    final int after = c.get();\n    assertThat(after, is(before + 1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"B"}],"commitId":"01477c42ded991aaa7b14cf72a6e4ea1a20edf5e","commitMessage":"@@@[CALCITE-2302] Implicit type cast support\n\nChanges:\n* Support full implicit type coercion for SQL contexts:\nSet operation.  binary arithmetic exprs.  binary equality\nexprs.  binary comparison exprs.  case when(COALESCE). \nIN operation.  builtin functions.  user defined function(UDF);\n* The SqlValidator now takes a component named `TypeCoercion`\nresponsible for the coercion work.  you can turn off the coercion with\n`SqlValidator#setEnableTypeCoercion(false)`;\n* We follow PostgreSQL and SQL-SERVER conversion style for two integers division. \ni.e. `'9'/2` returns INTEGER 4.\n","date":"2019-08-29 17:01:46","modifiedFileCount":"50","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testUserDefinedFunction() throws Exception {\n    final String sql = \"select \\\"adhoc\\\".my_plus(\\\"deptno\\\", 100) as p\\n\"\n        + \"from \\\"adhoc\\\".EMPLOYEES\";\n    final AtomicInteger c = Smalls.MyPlusFunction.INSTANCE_COUNT.get();\n    final int before = c.get();\n    withUdf().query(sql).returnsUnordered(\"P=110\",\n        \"P=120\",\n        \"P=110\",\n        \"P=110\");\n    final int after = c.get();\n    assertThat(after, is(before + 4));\n  }\n","date":"2020-04-06 04:57:49","endLine":199,"groupId":"12323","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserDefinedFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/7e85d86a3434aff5736ae15c676405cb52adc6.src","preCode":"  @Test public void testUserDefinedFunction() throws Exception {\n    final String sql = \"select \\\"adhoc\\\".my_plus(\\\"deptno\\\", 100) as p\\n\"\n        + \"from \\\"adhoc\\\".EMPLOYEES\";\n    final AtomicInteger c = Smalls.MyPlusFunction.INSTANCE_COUNT.get();\n    final int before = c.get();\n    withUdf().query(sql).returnsUnordered(\"P=110\",\n        \"P=120\",\n        \"P=110\",\n        \"P=110\");\n    final int after = c.get();\n    assertThat(after, is(before + 4));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testUserDefinedFunctionWithNull() throws Exception {\n    final String sql = \"select \\\"adhoc\\\".my_det_plus(\\\"deptno\\\", 1 + null) as p\\n\"\n        + \"from \\\"adhoc\\\".EMPLOYEES where 1 > 0 or nullif(null, 1) is null\";\n    final AtomicInteger c = Smalls.MyDeterministicPlusFunction.INSTANCE_COUNT.get();\n    final int before = c.get();\n    withUdf()\n        .query(sql)\n        .returnsUnordered(\"P=null\",\n            \"P=null\",\n            \"P=null\",\n            \"P=null\");\n    final int after = c.get();\n    assertThat(after, is(before + 1));\n  }\n","date":"2020-04-06 04:57:49","endLine":241,"groupId":"12323","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUserDefinedFunctionWithNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/7e85d86a3434aff5736ae15c676405cb52adc6.src","preCode":"  @Test public void testUserDefinedFunctionWithNull() throws Exception {\n    final String sql = \"select \\\"adhoc\\\".my_det_plus(\\\"deptno\\\", 1 + null) as p\\n\"\n        + \"from \\\"adhoc\\\".EMPLOYEES where 1 > 0 or nullif(null, 1) is null\";\n    final AtomicInteger c = Smalls.MyDeterministicPlusFunction.INSTANCE_COUNT.get();\n    final int before = c.get();\n    withUdf()\n        .query(sql)\n        .returnsUnordered(\"P=null\",\n            \"P=null\",\n            \"P=null\",\n            \"P=null\");\n    final int after = c.get();\n    assertThat(after, is(before + 1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2021-03-30 01:42:19","codes":[{"authorDate":"2021-03-30 01:42:19","commitOrder":4,"curCode":"  @Test void testUserDefinedFunction() {\n    final String sql = \"select \\\"adhoc\\\".my_plus(\\\"deptno\\\", 100) as p\\n\"\n        + \"from \\\"adhoc\\\".EMPLOYEES\";\n    final AtomicInteger c = Smalls.MyPlusFunction.INSTANCE_COUNT.get();\n    final int before = c.get();\n    withUdf().query(sql).returnsUnordered(\"P=110\",\n        \"P=120\",\n        \"P=110\",\n        \"P=110\");\n    final int after = c.get();\n    assertThat(after, is(before + 4));\n  }\n","date":"2021-04-19 16:25:06","endLine":199,"groupId":"101233","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testUserDefinedFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9f/ee555821113576cfb5641acd7de92438453a7f.src","preCode":"  @Test void testUserDefinedFunction() throws Exception {\n    final String sql = \"select \\\"adhoc\\\".my_plus(\\\"deptno\\\", 100) as p\\n\"\n        + \"from \\\"adhoc\\\".EMPLOYEES\";\n    final AtomicInteger c = Smalls.MyPlusFunction.INSTANCE_COUNT.get();\n    final int before = c.get();\n    withUdf().query(sql).returnsUnordered(\"P=110\",\n        \"P=120\",\n        \"P=110\",\n        \"P=110\");\n    final int after = c.get();\n    assertThat(after, is(before + 4));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2021-03-30 01:42:19","commitOrder":4,"curCode":"  @Test void testUserDefinedFunctionWithNull() {\n    final String sql = \"select \\\"adhoc\\\".my_det_plus(\\\"deptno\\\", 1 + null) as p\\n\"\n        + \"from \\\"adhoc\\\".EMPLOYEES where 1 > 0 or nullif(null, 1) is null\";\n    final AtomicInteger c = Smalls.MyDeterministicPlusFunction.INSTANCE_COUNT.get();\n    final int before = c.get();\n    withUdf()\n        .query(sql)\n        .returnsUnordered(\"P=null\",\n            \"P=null\",\n            \"P=null\",\n            \"P=null\");\n    final int after = c.get();\n    assertThat(after, is(before + 1));\n  }\n","date":"2021-04-19 16:25:06","endLine":241,"groupId":"101233","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testUserDefinedFunctionWithNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9f/ee555821113576cfb5641acd7de92438453a7f.src","preCode":"  @Test void testUserDefinedFunctionWithNull() throws Exception {\n    final String sql = \"select \\\"adhoc\\\".my_det_plus(\\\"deptno\\\", 1 + null) as p\\n\"\n        + \"from \\\"adhoc\\\".EMPLOYEES where 1 > 0 or nullif(null, 1) is null\";\n    final AtomicInteger c = Smalls.MyDeterministicPlusFunction.INSTANCE_COUNT.get();\n    final int before = c.get();\n    withUdf()\n        .query(sql)\n        .returnsUnordered(\"P=null\",\n            \"P=null\",\n            \"P=null\",\n            \"P=null\");\n    final int after = c.get();\n    assertThat(after, is(before + 1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"b2e9e6cba1e2ce28368d1281f527a9e53f4628ca","commitMessage":"@@@[CALCITE-4564] Initialization context for non-static user-defined functions (UDFs)\n\nWhen Interpreter or code generated by RexToLixTranslator calls\na UDF.  invoke its constructor only once. There will therefore\nbe one instance of the UDF for the whole execution.  and that\ninstance can be used to store state. Typical state will be\npreparation work (e.g. compiling a regular expression) to make\neach invocation faster.\n\nAdd 'interface FunctionContext' (marked as experimental). If\na UDF has a public constructor with FunctionContext as a\nparameter.  this will be called in preference to the default\nconstructor.\n\nIn InterpreterTest.  allow more than one query to be executed\nper test method.\n\nClose apache/calcite#2395\n","date":"2021-04-19 16:25:06","modifiedFileCount":"24","status":"M","submitter":"Julian Hyde"}]
