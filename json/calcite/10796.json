[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testLocalTimestampFunc() {\n    tester.setFor(SqlStdOperatorTable.LOCALTIMESTAMP);\n    tester.checkScalar(\n        \"LOCALTIMESTAMP\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkFails(\n        \"^LOCALTIMESTAMP()^\",\n        \"No match found for function signature LOCALTIMESTAMP\\\\(\\\\)\",\n        false);\n    tester.checkFails(\n        \"LOCALTIMESTAMP(^4000000000^)\", LITERAL_OUT_OF_RANGE_MESSAGE, false);\n    tester.checkScalar(\n        \"LOCALTIMESTAMP(1)\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(1) NOT NULL\");\n\n    \r\n    \r\n    final Pair<String, Hook.Closeable> pair = currentTimeString(\n        LOCAL_TZ);\n    tester.checkScalar(\n        \"CAST(LOCALTIMESTAMP AS VARCHAR(30))\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"LOCALTIMESTAMP\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIMESTAMP(0) NOT NULL\");\n    pair.right.close();\n  }\n","date":"2014-11-14 09:39:34","endLine":3808,"groupId":"6044","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalTimestampFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testLocalTimestampFunc() {\n    tester.setFor(SqlStdOperatorTable.LOCALTIMESTAMP);\n    tester.checkScalar(\n        \"LOCALTIMESTAMP\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkFails(\n        \"^LOCALTIMESTAMP()^\",\n        \"No match found for function signature LOCALTIMESTAMP\\\\(\\\\)\",\n        false);\n    tester.checkFails(\n        \"LOCALTIMESTAMP(^4000000000^)\", LITERAL_OUT_OF_RANGE_MESSAGE, false);\n    tester.checkScalar(\n        \"LOCALTIMESTAMP(1)\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(1) NOT NULL\");\n\n    \r\n    \r\n    final Pair<String, Hook.Closeable> pair = currentTimeString(\n        LOCAL_TZ);\n    tester.checkScalar(\n        \"CAST(LOCALTIMESTAMP AS VARCHAR(30))\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"LOCALTIMESTAMP\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIMESTAMP(0) NOT NULL\");\n    pair.right.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3780,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testCurrentTimestampFunc() {\n    tester.setFor(SqlStdOperatorTable.CURRENT_TIMESTAMP);\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkFails(\n        \"^CURRENT_TIMESTAMP()^\",\n        \"No match found for function signature CURRENT_TIMESTAMP\\\\(\\\\)\",\n        false);\n    tester.checkFails(\n        \"CURRENT_TIMESTAMP(^4000000000^)\", LITERAL_OUT_OF_RANGE_MESSAGE, false);\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP(1)\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(1) NOT NULL\");\n\n    final Pair<String, Hook.Closeable> pair = currentTimeString(\n        CURRENT_TZ);\n    tester.checkScalar(\n        \"CAST(CURRENT_TIMESTAMP AS VARCHAR(30))\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIMESTAMP(0) NOT NULL\");\n    pair.right.close();\n  }\n","date":"2014-11-14 09:39:34","endLine":3860,"groupId":"6044","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCurrentTimestampFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCurrentTimestampFunc() {\n    tester.setFor(SqlStdOperatorTable.CURRENT_TIMESTAMP);\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkFails(\n        \"^CURRENT_TIMESTAMP()^\",\n        \"No match found for function signature CURRENT_TIMESTAMP\\\\(\\\\)\",\n        false);\n    tester.checkFails(\n        \"CURRENT_TIMESTAMP(^4000000000^)\", LITERAL_OUT_OF_RANGE_MESSAGE, false);\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP(1)\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(1) NOT NULL\");\n\n    final Pair<String, Hook.Closeable> pair = currentTimeString(\n        CURRENT_TZ);\n    tester.checkScalar(\n        \"CAST(CURRENT_TIMESTAMP AS VARCHAR(30))\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIMESTAMP(0) NOT NULL\");\n    pair.right.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3834,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-12-12 05:52:21","codes":[{"authorDate":"2014-12-12 05:52:21","commitOrder":2,"curCode":"  @Test public void testLocalTimestampFunc() {\n    tester.setFor(SqlStdOperatorTable.LOCALTIMESTAMP);\n    tester.checkScalar(\n        \"LOCALTIMESTAMP\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkFails(\n        \"^LOCALTIMESTAMP()^\",\n        \"No match found for function signature LOCALTIMESTAMP\\\\(\\\\)\",\n        false);\n    tester.checkFails(\n        \"^LOCALTIMESTAMP(4000000000)^\", LITERAL_OUT_OF_RANGE_MESSAGE, false);\n    tester.checkFails(\n        \"^LOCALTIMESTAMP(9223372036854775807)^\", LITERAL_OUT_OF_RANGE_MESSAGE,\n        false);\n    tester.checkScalar(\n        \"LOCALTIMESTAMP(1)\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(1) NOT NULL\");\n\n    \r\n    \r\n    final Pair<String, Hook.Closeable> pair = currentTimeString(\n        LOCAL_TZ);\n    tester.checkScalar(\n        \"CAST(LOCALTIMESTAMP AS VARCHAR(30))\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"LOCALTIMESTAMP\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIMESTAMP(0) NOT NULL\");\n    pair.right.close();\n  }\n","date":"2014-12-12 05:54:47","endLine":3847,"groupId":"16498","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalTimestampFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6e/160c7c9ddf634866513e62620bdf6436ec2496.src","preCode":"  @Test public void testLocalTimestampFunc() {\n    tester.setFor(SqlStdOperatorTable.LOCALTIMESTAMP);\n    tester.checkScalar(\n        \"LOCALTIMESTAMP\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkFails(\n        \"^LOCALTIMESTAMP()^\",\n        \"No match found for function signature LOCALTIMESTAMP\\\\(\\\\)\",\n        false);\n    tester.checkFails(\n        \"LOCALTIMESTAMP(^4000000000^)\", LITERAL_OUT_OF_RANGE_MESSAGE, false);\n    tester.checkScalar(\n        \"LOCALTIMESTAMP(1)\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(1) NOT NULL\");\n\n    \r\n    \r\n    final Pair<String, Hook.Closeable> pair = currentTimeString(\n        LOCAL_TZ);\n    tester.checkScalar(\n        \"CAST(LOCALTIMESTAMP AS VARCHAR(30))\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"LOCALTIMESTAMP\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIMESTAMP(0) NOT NULL\");\n    pair.right.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3816,"status":"M"},{"authorDate":"2014-12-12 05:52:21","commitOrder":2,"curCode":"  @Test public void testCurrentTimestampFunc() {\n    tester.setFor(SqlStdOperatorTable.CURRENT_TIMESTAMP);\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkFails(\n        \"^CURRENT_TIMESTAMP()^\",\n        \"No match found for function signature CURRENT_TIMESTAMP\\\\(\\\\)\",\n        false);\n    tester.checkFails(\n        \"^CURRENT_TIMESTAMP(4000000000)^\", LITERAL_OUT_OF_RANGE_MESSAGE, false);\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP(1)\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(1) NOT NULL\");\n\n    final Pair<String, Hook.Closeable> pair = currentTimeString(\n        CURRENT_TZ);\n    tester.checkScalar(\n        \"CAST(CURRENT_TIMESTAMP AS VARCHAR(30))\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIMESTAMP(0) NOT NULL\");\n    pair.right.close();\n  }\n","date":"2014-12-12 05:54:47","endLine":3899,"groupId":"16498","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCurrentTimestampFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6e/160c7c9ddf634866513e62620bdf6436ec2496.src","preCode":"  @Test public void testCurrentTimestampFunc() {\n    tester.setFor(SqlStdOperatorTable.CURRENT_TIMESTAMP);\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkFails(\n        \"^CURRENT_TIMESTAMP()^\",\n        \"No match found for function signature CURRENT_TIMESTAMP\\\\(\\\\)\",\n        false);\n    tester.checkFails(\n        \"CURRENT_TIMESTAMP(^4000000000^)\", LITERAL_OUT_OF_RANGE_MESSAGE, false);\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP(1)\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(1) NOT NULL\");\n\n    final Pair<String, Hook.Closeable> pair = currentTimeString(\n        CURRENT_TZ);\n    tester.checkScalar(\n        \"CAST(CURRENT_TIMESTAMP AS VARCHAR(30))\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIMESTAMP(0) NOT NULL\");\n    pair.right.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3873,"status":"M"}],"commitId":"e5a08c4caa9b1a74cd88d41b3757b462c9c39ffe","commitMessage":"@@@Add a test that calls all functions with arguments of all types that they claim to accept\n\nClean up various problems that it discovered. Log [CALCITE-525] \"Exception-handling in built-in functions\" for the remaining issues.\n\nClose apache/incubator-calcite#28\n","date":"2014-12-12 05:54:47","modifiedFileCount":"8","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-07-19 02:18:57","codes":[{"authorDate":"2019-07-19 02:18:57","commitOrder":3,"curCode":"  private void testLocalTimestampFunc(Pair<String, Hook.Closeable> pair) {\n    tester.setFor(SqlStdOperatorTable.LOCALTIMESTAMP);\n    tester.checkScalar(\n        \"LOCALTIMESTAMP\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkFails(\n        \"^LOCALTIMESTAMP()^\",\n        \"No match found for function signature LOCALTIMESTAMP\\\\(\\\\)\",\n        false);\n    tester.checkFails(\n        \"^LOCALTIMESTAMP(4000000000)^\", LITERAL_OUT_OF_RANGE_MESSAGE, false);\n    tester.checkFails(\n        \"^LOCALTIMESTAMP(9223372036854775807)^\", LITERAL_OUT_OF_RANGE_MESSAGE,\n        false);\n    tester.checkScalar(\n        \"LOCALTIMESTAMP(1)\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(1) NOT NULL\");\n\n    \r\n    \r\n    tester.checkScalar(\n        \"CAST(LOCALTIMESTAMP AS VARCHAR(30))\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"LOCALTIMESTAMP\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIMESTAMP(0) NOT NULL\");\n    pair.right.close();\n  }\n","date":"2019-11-27 14:34:16","endLine":6016,"groupId":"10796","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalTimestampFunc","params":"(Pair<String@Hook.Closeable>pair)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/36/32339ca441133de6483ccef9e5d788a7111e90.src","preCode":"  @Test public void testLocalTimestampFunc() {\n    tester.setFor(SqlStdOperatorTable.LOCALTIMESTAMP);\n    tester.checkScalar(\n        \"LOCALTIMESTAMP\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkFails(\n        \"^LOCALTIMESTAMP()^\",\n        \"No match found for function signature LOCALTIMESTAMP\\\\(\\\\)\",\n        false);\n    tester.checkFails(\n        \"^LOCALTIMESTAMP(4000000000)^\", LITERAL_OUT_OF_RANGE_MESSAGE, false);\n    tester.checkFails(\n        \"^LOCALTIMESTAMP(9223372036854775807)^\", LITERAL_OUT_OF_RANGE_MESSAGE,\n        false);\n    tester.checkScalar(\n        \"LOCALTIMESTAMP(1)\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(1) NOT NULL\");\n\n    \r\n    \r\n    final Pair<String, Hook.Closeable> pair = currentTimeString(\n        LOCAL_TZ);\n    tester.checkScalar(\n        \"CAST(LOCALTIMESTAMP AS VARCHAR(30))\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"LOCALTIMESTAMP\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIMESTAMP(0) NOT NULL\");\n    pair.right.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5987,"status":"M"},{"authorDate":"2019-07-19 02:18:57","commitOrder":3,"curCode":"  private void testCurrentTimestampFunc(Pair<String, Hook.Closeable> pair) {\n    tester.setFor(SqlStdOperatorTable.CURRENT_TIMESTAMP);\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkFails(\n        \"^CURRENT_TIMESTAMP()^\",\n        \"No match found for function signature CURRENT_TIMESTAMP\\\\(\\\\)\",\n        false);\n    tester.checkFails(\n        \"^CURRENT_TIMESTAMP(4000000000)^\", LITERAL_OUT_OF_RANGE_MESSAGE, false);\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP(1)\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(1) NOT NULL\");\n\n    tester.checkScalar(\n        \"CAST(CURRENT_TIMESTAMP AS VARCHAR(30))\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIMESTAMP(0) NOT NULL\");\n    pair.right.close();\n  }\n","date":"2019-11-27 14:34:16","endLine":6083,"groupId":"10796","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCurrentTimestampFunc","params":"(Pair<String@Hook.Closeable>pair)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/36/32339ca441133de6483ccef9e5d788a7111e90.src","preCode":"  @Test public void testCurrentTimestampFunc() {\n    tester.setFor(SqlStdOperatorTable.CURRENT_TIMESTAMP);\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkFails(\n        \"^CURRENT_TIMESTAMP()^\",\n        \"No match found for function signature CURRENT_TIMESTAMP\\\\(\\\\)\",\n        false);\n    tester.checkFails(\n        \"^CURRENT_TIMESTAMP(4000000000)^\", LITERAL_OUT_OF_RANGE_MESSAGE, false);\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP(1)\", TIMESTAMP_PATTERN,\n        \"TIMESTAMP(1) NOT NULL\");\n\n    final Pair<String, Hook.Closeable> pair = currentTimeString(\n        CURRENT_TZ);\n    tester.checkScalar(\n        \"CAST(CURRENT_TIMESTAMP AS VARCHAR(30))\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"CURRENT_TIMESTAMP\",\n        Pattern.compile(pair.left + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIMESTAMP(0) NOT NULL\");\n    pair.right.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6059,"status":"M"}],"commitId":"eb71946c843b3dc9618a2c128dcaa9bf52afe9c7","commitMessage":"@@@[CALCITE-3141] Slow tests are not run in continuous integration\n\n1. Replace @Category(SlowTests.class) with @Tag(\"slow\").\n2. Replace junit4 APIs with junit5 APIs when @Tag annotation is used since mixed usages do not work well together.\n3. Use exclusively the @Tag(\"slow\") annotation for tagging slow tests.\n4. Remove usages of calcite.test.slow system property for annotating slow tests.\n5. Replace @Ignore(\"slow\") with @Tag(\"slow\") enabling a few more slow tests.\n6. Add testSlow task in Gradle for running slow tests.\n7. Exclude slow test execution from normal Gradle build and test.\n8. Add GitHub Action for running slow tests on demand (by adding\n'slow-tests-needed' label) in a PR and on every push to the master.\n9. Update site instructions for running slow tests.\n10. Silence logger in SqlOperatorBaseTest since it generates huge logs.\n11. Remove execution of slow test from Travis.\n12. Refactor FoodmartTest based on the needs of the new @ParameterizedTest API.\n13. Add header and description in main.yml file.\n","date":"2019-11-27 14:34:16","modifiedFileCount":"13","status":"M","submitter":"Stamatis Zampetakis"}]
