[{"authorTime":"2020-09-14 05:19:35","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testJoinWithLikeConditionRel2Sql() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .scan(\"DEPT\")\n        .join(JoinRelType.LEFT,\n            b.and(\n                b.call(SqlStdOperatorTable.EQUALS,\n                    b.field(2, 0, \"DEPTNO\"),\n                    b.field(2, 1, \"DEPTNO\")),\n                b.call(SqlStdOperatorTable.LIKE,\n                    b.field(2, 1, \"DNAME\"),\n                    b.literal(\"ACCOUNTING\"))))\n        .build();\n    final String expectedSql = \"SELECT *\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\\n\"\n        + \"LEFT JOIN \\\"scott\\\".\\\"DEPT\\\" \"\n        + \"ON \\\"EMP\\\".\\\"DEPTNO\\\" = \\\"DEPT\\\".\\\"DEPTNO\\\" \"\n        + \"AND \\\"DEPT\\\".\\\"DNAME\\\" LIKE 'ACCOUNTING'\";\n    relFn(relFn).ok(expectedSql);\n  }\n","date":"2020-04-06 04:57:49","endLine":901,"groupId":"10770","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinWithLikeConditionRel2Sql","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test void testJoinWithLikeConditionRel2Sql() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .scan(\"DEPT\")\n        .join(JoinRelType.LEFT,\n            b.and(\n                b.call(SqlStdOperatorTable.EQUALS,\n                    b.field(2, 0, \"DEPTNO\"),\n                    b.field(2, 1, \"DEPTNO\")),\n                b.call(SqlStdOperatorTable.LIKE,\n                    b.field(2, 1, \"DNAME\"),\n                    b.literal(\"ACCOUNTING\"))))\n        .build();\n    final String expectedSql = \"SELECT *\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\\n\"\n        + \"LEFT JOIN \\\"scott\\\".\\\"DEPT\\\" \"\n        + \"ON \\\"EMP\\\".\\\"DEPTNO\\\" = \\\"DEPT\\\".\\\"DEPTNO\\\" \"\n        + \"AND \\\"DEPT\\\".\\\"DNAME\\\" LIKE 'ACCOUNTING'\";\n    relFn(relFn).ok(expectedSql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":882,"status":"NB"},{"authorDate":"2020-09-14 05:19:35","commitOrder":4,"curCode":"  @Test void testJoinOnNotLike() {\n    final Function<RelBuilder, RelNode> relFn = b ->\n        b.scan(\"EMP\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.LEFT,\n                b.and(\n                    b.equals(b.field(2, 0, \"DEPTNO\"),\n                        b.field(2, 1, \"DEPTNO\")),\n                    b.not(\n                        b.call(SqlStdOperatorTable.LIKE,\n                            b.field(2, 1, \"DNAME\"),\n                            b.literal(\"ACCOUNTING\")))))\n            .build();\n    final String expectedSql = \"SELECT *\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\\n\"\n        + \"LEFT JOIN \\\"scott\\\".\\\"DEPT\\\" \"\n        + \"ON \\\"EMP\\\".\\\"DEPTNO\\\" = \\\"DEPT\\\".\\\"DEPTNO\\\" \"\n        + \"AND \\\"DEPT\\\".\\\"DNAME\\\" NOT LIKE 'ACCOUNTING'\";\n    relFn(relFn).ok(expectedSql);\n  }\n","date":"2020-09-18 10:48:27","endLine":2457,"groupId":"13024","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinOnNotLike","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e3/b4350b53238200d9c5364e1fb2c90dea43ca96.src","preCode":"  @Test void testJoinOnNotLike() {\n    final Function<RelBuilder, RelNode> relFn = b ->\n        b.scan(\"EMP\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.LEFT,\n                b.and(\n                    b.equals(b.field(2, 0, \"DEPTNO\"),\n                        b.field(2, 1, \"DEPTNO\")),\n                    b.not(\n                        b.call(SqlStdOperatorTable.LIKE,\n                            b.field(2, 1, \"DNAME\"),\n                            b.literal(\"ACCOUNTING\")))))\n            .build();\n    final String expectedSql = \"SELECT *\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\\n\"\n        + \"LEFT JOIN \\\"scott\\\".\\\"DEPT\\\" \"\n        + \"ON \\\"EMP\\\".\\\"DEPTNO\\\" = \\\"DEPT\\\".\\\"DEPTNO\\\" \"\n        + \"AND \\\"DEPT\\\".\\\"DNAME\\\" NOT LIKE 'ACCOUNTING'\";\n    relFn(relFn).ok(expectedSql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2438,"status":"B"}],"commitId":"6a3a7e49f99f2bfb4b32222af00536bccbe19c53","commitMessage":"@@@[CALCITE-4249] JDBC adapter cannot translate NOT LIKE in join condition\n\nFix bug translating Sarg to SQL.  and add a test case for it.\n(The test case only demonstrates the bug on [CALCITE-4262]\nbranch.  where SqlToRelCovnerter uses RelBuilder.filter rather\nthan LogicalFilter.create.  and therefore introduces a Sarg.)\n","date":"2020-09-18 10:48:27","modifiedFileCount":"3","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-14 05:19:35","codes":[{"authorDate":"2021-09-17 17:38:52","commitOrder":5,"curCode":"  @Test void testJoinWithLikeConditionRel2Sql() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .scan(\"DEPT\")\n        .join(JoinRelType.LEFT,\n            b.and(\n                b.equals(b.field(2, 0, \"DEPTNO\"),\n                    b.field(2, 1, \"DEPTNO\")),\n                b.call(SqlStdOperatorTable.LIKE,\n                    b.field(2, 1, \"DNAME\"),\n                    b.literal(\"ACCOUNTING\"))))\n        .build();\n    final String expectedSql = \"SELECT *\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\\n\"\n        + \"LEFT JOIN \\\"scott\\\".\\\"DEPT\\\" \"\n        + \"ON \\\"EMP\\\".\\\"DEPTNO\\\" = \\\"DEPT\\\".\\\"DEPTNO\\\" \"\n        + \"AND \\\"DEPT\\\".\\\"DNAME\\\" LIKE 'ACCOUNTING'\";\n    relFn(relFn).ok(expectedSql);\n  }\n","date":"2021-09-18 03:08:56","endLine":1321,"groupId":"101532","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinWithLikeConditionRel2Sql","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/40/d3c7517e6aebfcf1f9eb5871e8af048b7daef7.src","preCode":"  @Test void testJoinWithLikeConditionRel2Sql() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .scan(\"DEPT\")\n        .join(JoinRelType.LEFT,\n            b.and(\n                b.call(SqlStdOperatorTable.EQUALS,\n                    b.field(2, 0, \"DEPTNO\"),\n                    b.field(2, 1, \"DEPTNO\")),\n                b.call(SqlStdOperatorTable.LIKE,\n                    b.field(2, 1, \"DNAME\"),\n                    b.literal(\"ACCOUNTING\"))))\n        .build();\n    final String expectedSql = \"SELECT *\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\\n\"\n        + \"LEFT JOIN \\\"scott\\\".\\\"DEPT\\\" \"\n        + \"ON \\\"EMP\\\".\\\"DEPTNO\\\" = \\\"DEPT\\\".\\\"DEPTNO\\\" \"\n        + \"AND \\\"DEPT\\\".\\\"DNAME\\\" LIKE 'ACCOUNTING'\";\n    relFn(relFn).ok(expectedSql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1303,"status":"M"},{"authorDate":"2020-09-14 05:19:35","commitOrder":5,"curCode":"  @Test void testJoinOnNotLike() {\n    final Function<RelBuilder, RelNode> relFn = b ->\n        b.scan(\"EMP\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.LEFT,\n                b.and(\n                    b.equals(b.field(2, 0, \"DEPTNO\"),\n                        b.field(2, 1, \"DEPTNO\")),\n                    b.not(\n                        b.call(SqlStdOperatorTable.LIKE,\n                            b.field(2, 1, \"DNAME\"),\n                            b.literal(\"ACCOUNTING\")))))\n            .build();\n    final String expectedSql = \"SELECT *\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\\n\"\n        + \"LEFT JOIN \\\"scott\\\".\\\"DEPT\\\" \"\n        + \"ON \\\"EMP\\\".\\\"DEPTNO\\\" = \\\"DEPT\\\".\\\"DEPTNO\\\" \"\n        + \"AND \\\"DEPT\\\".\\\"DNAME\\\" NOT LIKE 'ACCOUNTING'\";\n    relFn(relFn).ok(expectedSql);\n  }\n","date":"2020-09-18 10:48:27","endLine":2457,"groupId":"101532","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinOnNotLike","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e3/b4350b53238200d9c5364e1fb2c90dea43ca96.src","preCode":"  @Test void testJoinOnNotLike() {\n    final Function<RelBuilder, RelNode> relFn = b ->\n        b.scan(\"EMP\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.LEFT,\n                b.and(\n                    b.equals(b.field(2, 0, \"DEPTNO\"),\n                        b.field(2, 1, \"DEPTNO\")),\n                    b.not(\n                        b.call(SqlStdOperatorTable.LIKE,\n                            b.field(2, 1, \"DNAME\"),\n                            b.literal(\"ACCOUNTING\")))))\n            .build();\n    final String expectedSql = \"SELECT *\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\\n\"\n        + \"LEFT JOIN \\\"scott\\\".\\\"DEPT\\\" \"\n        + \"ON \\\"EMP\\\".\\\"DEPTNO\\\" = \\\"DEPT\\\".\\\"DEPTNO\\\" \"\n        + \"AND \\\"DEPT\\\".\\\"DNAME\\\" NOT LIKE 'ACCOUNTING'\";\n    relFn(relFn).ok(expectedSql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2438,"status":"N"}],"commitId":"4d82c5346292b32a1301214376366c2e8c5a892e","commitMessage":"@@@Add RelBuilder.lessThan.  and use RelBuilder shorthands\n","date":"2021-09-18 03:08:56","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"}]
