[{"authorTime":"2016-01-25 10:05:20","codes":[{"authorDate":"2016-01-25 10:05:20","commitOrder":1,"curCode":"  @Test public void testGreatestFunc() {\n    tester.setFor(OracleSqlOperatorTable.GREATEST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"greatest('on', 'earth')\", \"on   \", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"greatest('show', 'on', 'earth')\", \"show \",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"greatest(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"greatest(false, true)\", true, \"BOOLEAN NOT NULL\");\n  }\n","date":"2016-03-05 07:25:57","endLine":4103,"groupId":"9127","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGreatestFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/81/bfeeda3371fb763923bed987af8cd64dc4ced1.src","preCode":"  @Test public void testGreatestFunc() {\n    tester.setFor(OracleSqlOperatorTable.GREATEST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"greatest('on', 'earth')\", \"on   \", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"greatest('show', 'on', 'earth')\", \"show \",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"greatest(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"greatest(false, true)\", true, \"BOOLEAN NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4095,"status":"B"},{"authorDate":"2016-01-25 10:05:20","commitOrder":1,"curCode":"  @Test public void testLeastFunc() {\n    tester.setFor(OracleSqlOperatorTable.LEAST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"least('on', 'earth')\", \"earth\", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"least(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"least(false, true)\", false, \"BOOLEAN NOT NULL\");\n  }\n","date":"2016-03-05 07:25:57","endLine":4113,"groupId":"2817","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeastFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/81/bfeeda3371fb763923bed987af8cd64dc4ced1.src","preCode":"  @Test public void testLeastFunc() {\n    tester.setFor(OracleSqlOperatorTable.LEAST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"least('on', 'earth')\", \"earth\", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"least(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"least(false, true)\", false, \"BOOLEAN NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4105,"status":"B"}],"commitId":"707e72d5c2a03f4ec5994b58109d7421ed938d9f","commitMessage":"@@@[CALCITE-1066] Add Oracle function table.  and functions DECODE.  NVL.  LTRIM.  RTRIM.  GREATEST.  LEAST\n","date":"2016-03-05 07:25:57","modifiedFileCount":"23","status":"B","submitter":"Julian Hyde"},{"authorTime":"2018-05-25 17:18:29","codes":[{"authorDate":"2018-05-25 17:18:29","commitOrder":2,"curCode":"  @Test public void testGreatestFunc() {\n    tester.setFor(OracleSqlOperatorTable.GREATEST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"greatest('on', 'earth')\", \"on   \", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"greatest('show', 'on', 'earth')\", \"show \",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"greatest(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"greatest(false, true)\", true, \"BOOLEAN NOT NULL\");\n\n    final SqlTester tester2 = oracleTester(SqlConformanceEnum.ORACLE_12);\n    tester2.checkString(\"greatest('on', 'earth')\", \"on\", \"VARCHAR(5) NOT NULL\");\n    tester2.checkString(\"greatest('show', 'on', 'earth')\", \"show\",\n        \"VARCHAR(5) NOT NULL\");\n  }\n","date":"2018-06-09 01:36:05","endLine":5115,"groupId":"9127","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGreatestFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0a/1926df36b9fc815013c7d567a5d6cb86d1c2da.src","preCode":"  @Test public void testGreatestFunc() {\n    tester.setFor(OracleSqlOperatorTable.GREATEST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"greatest('on', 'earth')\", \"on   \", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"greatest('show', 'on', 'earth')\", \"show \",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"greatest(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"greatest(false, true)\", true, \"BOOLEAN NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5102,"status":"M"},{"authorDate":"2018-05-25 17:18:29","commitOrder":2,"curCode":"  @Test public void testLeastFunc() {\n    tester.setFor(OracleSqlOperatorTable.LEAST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"least('on', 'earth')\", \"earth\", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"least(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"least(false, true)\", false, \"BOOLEAN NOT NULL\");\n\n    final SqlTester tester2 = oracleTester(SqlConformanceEnum.ORACLE_12);\n    tester2.checkString(\"least('on', 'earth')\", \"earth\", \"VARCHAR(5) NOT NULL\");\n    tester2.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"VARCHAR(5) NOT NULL\");\n  }\n","date":"2018-06-09 01:36:05","endLine":5130,"groupId":"2817","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeastFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0a/1926df36b9fc815013c7d567a5d6cb86d1c2da.src","preCode":"  @Test public void testLeastFunc() {\n    tester.setFor(OracleSqlOperatorTable.LEAST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"least('on', 'earth')\", \"earth\", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"least(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"least(false, true)\", false, \"BOOLEAN NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5117,"status":"M"}],"commitId":"18bfc278839bfbc7c3bde15116e6edab790707a6","commitMessage":"@@@[CALCITE-2321] A union of CHAR columns of different lengths can now (based on a conformance setting) yield a VARCHAR column (Hequn Cheng)\n\nThe previous behavior was to return a CHAR column whose length is the\nlongest of the inputs. This remains the default behavior.  and the\nbehavior in strict SQL standard mode. The new SqlConformance method is\nshouldConvertRaggedUnionTypesToVarying(). Also added\nRelDataTypeSystem.shouldConvertRaggedUnionTypesToVarying().\n\nClose apache/calcite#699\n","date":"2018-06-09 01:36:05","modifiedFileCount":"12","status":"M","submitter":"hequn8128"},{"authorTime":"2019-04-25 12:00:28","codes":[{"authorDate":"2019-04-25 12:00:28","commitOrder":3,"curCode":"  @Test public void testGreatestFunc() {\n    tester.setFor(SqlLibraryOperators.GREATEST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"greatest('on', 'earth')\", \"on   \", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"greatest('show', 'on', 'earth')\", \"show \",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"greatest(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"greatest(false, true)\", true, \"BOOLEAN NOT NULL\");\n\n    final SqlTester tester2 = oracleTester(SqlConformanceEnum.ORACLE_12);\n    tester2.checkString(\"greatest('on', 'earth')\", \"on\", \"VARCHAR(5) NOT NULL\");\n    tester2.checkString(\"greatest('show', 'on', 'earth')\", \"show\",\n        \"VARCHAR(5) NOT NULL\");\n  }\n","date":"2019-05-12 14:03:15","endLine":5918,"groupId":"9127","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGreatestFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ef/4ba2766b4628eaf4eee148c6b7d5e0875dc64d.src","preCode":"  @Test public void testGreatestFunc() {\n    tester.setFor(OracleSqlOperatorTable.GREATEST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"greatest('on', 'earth')\", \"on   \", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"greatest('show', 'on', 'earth')\", \"show \",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"greatest(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"greatest(false, true)\", true, \"BOOLEAN NOT NULL\");\n\n    final SqlTester tester2 = oracleTester(SqlConformanceEnum.ORACLE_12);\n    tester2.checkString(\"greatest('on', 'earth')\", \"on\", \"VARCHAR(5) NOT NULL\");\n    tester2.checkString(\"greatest('show', 'on', 'earth')\", \"show\",\n        \"VARCHAR(5) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5905,"status":"M"},{"authorDate":"2019-04-25 12:00:28","commitOrder":3,"curCode":"  @Test public void testLeastFunc() {\n    tester.setFor(SqlLibraryOperators.LEAST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"least('on', 'earth')\", \"earth\", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"least(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"least(false, true)\", false, \"BOOLEAN NOT NULL\");\n\n    final SqlTester tester2 = oracleTester(SqlConformanceEnum.ORACLE_12);\n    tester2.checkString(\"least('on', 'earth')\", \"earth\", \"VARCHAR(5) NOT NULL\");\n    tester2.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"VARCHAR(5) NOT NULL\");\n  }\n","date":"2019-05-12 14:03:15","endLine":5933,"groupId":"2817","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeastFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ef/4ba2766b4628eaf4eee148c6b7d5e0875dc64d.src","preCode":"  @Test public void testLeastFunc() {\n    tester.setFor(OracleSqlOperatorTable.LEAST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"least('on', 'earth')\", \"earth\", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"least(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"least(false, true)\", false, \"BOOLEAN NOT NULL\");\n\n    final SqlTester tester2 = oracleTester(SqlConformanceEnum.ORACLE_12);\n    tester2.checkString(\"least('on', 'earth')\", \"earth\", \"VARCHAR(5) NOT NULL\");\n    tester2.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"VARCHAR(5) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5920,"status":"M"}],"commitId":"9a4eab5240d96379431d14a1ac33bfebaf6fbb28","commitMessage":"@@@[CALCITE-3017] Re-organize how we represent built-in operators that are not in the standard operator table\n\nAdd enum SqlLibrary.  with values STANDARD.  SPATIAL.  ORACLE.  MYSQL etc.. \nand SqlLibraryOperatorTableFactory.  that can create operator tables for\nany combination of libraries.\n\nFurther changes by Julian Hyde:\n * Adopt the term \"library\" (earlier revisions had \"dialect\" and \"flavor\");\n * Change SqlDialectOperatorTableFactory into a cache (previously it\n   pre-built one table per library);\n * Make it responsible for standard and spatial libraries in addition to\n   database-specific ones;\n * Move operators from SqlLibraryOperatorTableFactory into a dedicated\n   holder class.  SqlLibraryOperators;\n * Deprecate OracleSqlOperatorTable.  and move its operator definitions.\n\nClose apache/calcite#1203\n","date":"2019-05-12 14:03:15","modifiedFileCount":"12","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testGreatestFunc() {\n    tester.setFor(SqlLibraryOperators.GREATEST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"greatest('on', 'earth')\", \"on   \", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"greatest('show', 'on', 'earth')\", \"show \",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"greatest(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"greatest(false, true)\", true, \"BOOLEAN NOT NULL\");\n\n    final SqlTester tester2 = oracleTester(SqlConformanceEnum.ORACLE_12);\n    tester2.checkString(\"greatest('on', 'earth')\", \"on\", \"VARCHAR(5) NOT NULL\");\n    tester2.checkString(\"greatest('show', 'on', 'earth')\", \"show\",\n        \"VARCHAR(5) NOT NULL\");\n  }\n","date":"2020-04-06 04:57:49","endLine":6716,"groupId":"9127","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGreatestFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testGreatestFunc() {\n    tester.setFor(SqlLibraryOperators.GREATEST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"greatest('on', 'earth')\", \"on   \", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"greatest('show', 'on', 'earth')\", \"show \",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"greatest(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"greatest(false, true)\", true, \"BOOLEAN NOT NULL\");\n\n    final SqlTester tester2 = oracleTester(SqlConformanceEnum.ORACLE_12);\n    tester2.checkString(\"greatest('on', 'earth')\", \"on\", \"VARCHAR(5) NOT NULL\");\n    tester2.checkString(\"greatest('show', 'on', 'earth')\", \"show\",\n        \"VARCHAR(5) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6703,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testLeastFunc() {\n    tester.setFor(SqlLibraryOperators.LEAST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"least('on', 'earth')\", \"earth\", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"least(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"least(false, true)\", false, \"BOOLEAN NOT NULL\");\n\n    final SqlTester tester2 = oracleTester(SqlConformanceEnum.ORACLE_12);\n    tester2.checkString(\"least('on', 'earth')\", \"earth\", \"VARCHAR(5) NOT NULL\");\n    tester2.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"VARCHAR(5) NOT NULL\");\n  }\n","date":"2020-04-06 04:57:49","endLine":6731,"groupId":"2817","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeastFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testLeastFunc() {\n    tester.setFor(SqlLibraryOperators.LEAST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"least('on', 'earth')\", \"earth\", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"least(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"least(false, true)\", false, \"BOOLEAN NOT NULL\");\n\n    final SqlTester tester2 = oracleTester(SqlConformanceEnum.ORACLE_12);\n    tester2.checkString(\"least('on', 'earth')\", \"earth\", \"VARCHAR(5) NOT NULL\");\n    tester2.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"VARCHAR(5) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6718,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-10-16 02:25:38","codes":[{"authorDate":"2020-10-16 02:25:38","commitOrder":5,"curCode":"  @Test void testGreatestFunc() {\n    tester.setFor(SqlLibraryOperators.GREATEST);\n    final SqlTester tester1 = libraryTester(SqlLibrary.ORACLE);\n    tester1.checkString(\"greatest('on', 'earth')\", \"on   \", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"greatest('show', 'on', 'earth')\", \"show \",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"greatest(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"greatest(false, true)\", true, \"BOOLEAN NOT NULL\");\n\n    final SqlTester tester2 = oracleTester(SqlConformanceEnum.ORACLE_12);\n    tester2.checkString(\"greatest('on', 'earth')\", \"on\", \"VARCHAR(5) NOT NULL\");\n    tester2.checkString(\"greatest('show', 'on', 'earth')\", \"show\",\n        \"VARCHAR(5) NOT NULL\");\n  }\n","date":"2020-10-16 05:53:42","endLine":6785,"groupId":"10797","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testGreatestFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8a/fc160fd0c4c37d2aae419f116574fb95161fd9.src","preCode":"  @Test void testGreatestFunc() {\n    tester.setFor(SqlLibraryOperators.GREATEST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"greatest('on', 'earth')\", \"on   \", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"greatest('show', 'on', 'earth')\", \"show \",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"greatest(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"greatest(false, true)\", true, \"BOOLEAN NOT NULL\");\n\n    final SqlTester tester2 = oracleTester(SqlConformanceEnum.ORACLE_12);\n    tester2.checkString(\"greatest('on', 'earth')\", \"on\", \"VARCHAR(5) NOT NULL\");\n    tester2.checkString(\"greatest('show', 'on', 'earth')\", \"show\",\n        \"VARCHAR(5) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6772,"status":"M"},{"authorDate":"2020-10-16 02:25:38","commitOrder":5,"curCode":"  @Test void testLeastFunc() {\n    tester.setFor(SqlLibraryOperators.LEAST);\n    final SqlTester tester1 = libraryTester(SqlLibrary.ORACLE);\n    tester1.checkString(\"least('on', 'earth')\", \"earth\", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"least(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"least(false, true)\", false, \"BOOLEAN NOT NULL\");\n\n    final SqlTester tester2 = oracleTester(SqlConformanceEnum.ORACLE_12);\n    tester2.checkString(\"least('on', 'earth')\", \"earth\", \"VARCHAR(5) NOT NULL\");\n    tester2.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"VARCHAR(5) NOT NULL\");\n  }\n","date":"2020-10-16 05:53:42","endLine":6800,"groupId":"10797","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeastFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8a/fc160fd0c4c37d2aae419f116574fb95161fd9.src","preCode":"  @Test void testLeastFunc() {\n    tester.setFor(SqlLibraryOperators.LEAST);\n    final SqlTester tester1 = oracleTester();\n    tester1.checkString(\"least('on', 'earth')\", \"earth\", \"CHAR(5) NOT NULL\");\n    tester1.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"CHAR(5) NOT NULL\");\n    tester1.checkScalar(\"least(12, CAST(NULL AS INTEGER), 3)\", null, \"INTEGER\");\n    tester1.checkScalar(\"least(false, true)\", false, \"BOOLEAN NOT NULL\");\n\n    final SqlTester tester2 = oracleTester(SqlConformanceEnum.ORACLE_12);\n    tester2.checkString(\"least('on', 'earth')\", \"earth\", \"VARCHAR(5) NOT NULL\");\n    tester2.checkString(\"least('show', 'on', 'earth')\", \"earth\",\n        \"VARCHAR(5) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6787,"status":"M"}],"commitId":"8e3036609d3896acf0368a5744ae58933adac59d","commitMessage":"@@@Refactor SqlToRelTestBase to allow custom Context in tests\n\nIn particular.  allows a RelOptRulesTest to use a custom\noperator table.\n","date":"2020-10-16 05:53:42","modifiedFileCount":"6","status":"M","submitter":"Julian Hyde"}]
