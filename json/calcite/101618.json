[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testPairAdjacents() {\n    List<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n    List<String> result = new ArrayList<String>();\n    for (Pair<String, String> pair : Pair.adjacents(strings)) {\n      result.add(pair.toString());\n    }\n    assertThat(result.toString(), equalTo(\"[<a, b>, <b, c>]\"));\n\n    \r\n    assertThat(Pair.adjacents(ImmutableList.of()).iterator().hasNext(),\n        is(false));\n\n    \r\n    assertThat(Pair.adjacents(ImmutableList.of(\"a\")).iterator().hasNext(),\n        is(false));\n\n    \r\n    \r\n    assertThat(Iterables.size(Pair.adjacents(Collections.nCopies(100, null))),\n        equalTo(99));\n  }\n","date":"2014-11-14 09:39:34","endLine":773,"groupId":"11696","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPairAdjacents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/bcf00b20c160eb6cf88dba6e1c55077cd2af9e.src","preCode":"  @Test public void testPairAdjacents() {\n    List<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n    List<String> result = new ArrayList<String>();\n    for (Pair<String, String> pair : Pair.adjacents(strings)) {\n      result.add(pair.toString());\n    }\n    assertThat(result.toString(), equalTo(\"[<a, b>, <b, c>]\"));\n\n    \r\n    assertThat(Pair.adjacents(ImmutableList.of()).iterator().hasNext(),\n        is(false));\n\n    \r\n    assertThat(Pair.adjacents(ImmutableList.of(\"a\")).iterator().hasNext(),\n        is(false));\n\n    \r\n    \r\n    assertThat(Iterables.size(Pair.adjacents(Collections.nCopies(100, null))),\n        equalTo(99));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/UtilTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":753,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testPairFirstAnd() {\n    List<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n    List<String> result = new ArrayList<String>();\n    for (Pair<String, String> pair : Pair.firstAnd(strings)) {\n      result.add(pair.toString());\n    }\n    assertThat(result.toString(), equalTo(\"[<a, b>, <a, c>]\"));\n\n    \r\n    assertThat(Pair.firstAnd(ImmutableList.of()).iterator().hasNext(),\n        is(false));\n\n    \r\n    assertThat(Pair.firstAnd(ImmutableList.of(\"a\")).iterator().hasNext(),\n        is(false));\n\n    \r\n    \r\n    assertThat(Iterables.size(Pair.firstAnd(Collections.nCopies(100, null))),\n        equalTo(99));\n  }\n","date":"2014-11-14 09:39:34","endLine":798,"groupId":"11696","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPairFirstAnd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/bcf00b20c160eb6cf88dba6e1c55077cd2af9e.src","preCode":"  @Test public void testPairFirstAnd() {\n    List<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n    List<String> result = new ArrayList<String>();\n    for (Pair<String, String> pair : Pair.firstAnd(strings)) {\n      result.add(pair.toString());\n    }\n    assertThat(result.toString(), equalTo(\"[<a, b>, <a, c>]\"));\n\n    \r\n    assertThat(Pair.firstAnd(ImmutableList.of()).iterator().hasNext(),\n        is(false));\n\n    \r\n    assertThat(Pair.firstAnd(ImmutableList.of(\"a\")).iterator().hasNext(),\n        is(false));\n\n    \r\n    \r\n    assertThat(Iterables.size(Pair.firstAnd(Collections.nCopies(100, null))),\n        equalTo(99));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/UtilTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":778,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2016-05-05 06:25:00","codes":[{"authorDate":"2016-05-05 06:25:00","commitOrder":2,"curCode":"  @Test public void testPairAdjacents() {\n    List<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n    List<String> result = new ArrayList<>();\n    for (Pair<String, String> pair : Pair.adjacents(strings)) {\n      result.add(pair.toString());\n    }\n    assertThat(result.toString(), equalTo(\"[<a, b>, <b, c>]\"));\n\n    \r\n    assertThat(Pair.adjacents(ImmutableList.of()).iterator().hasNext(),\n        is(false));\n\n    \r\n    assertThat(Pair.adjacents(ImmutableList.of(\"a\")).iterator().hasNext(),\n        is(false));\n\n    \r\n    \r\n    assertThat(Iterables.size(Pair.adjacents(Collections.nCopies(100, null))),\n        equalTo(99));\n  }\n","date":"2016-05-06 13:07:12","endLine":929,"groupId":"11696","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPairAdjacents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9a/fa6b682cdeea61a8af5021507de0cddb342513.src","preCode":"  @Test public void testPairAdjacents() {\n    List<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n    List<String> result = new ArrayList<String>();\n    for (Pair<String, String> pair : Pair.adjacents(strings)) {\n      result.add(pair.toString());\n    }\n    assertThat(result.toString(), equalTo(\"[<a, b>, <b, c>]\"));\n\n    \r\n    assertThat(Pair.adjacents(ImmutableList.of()).iterator().hasNext(),\n        is(false));\n\n    \r\n    assertThat(Pair.adjacents(ImmutableList.of(\"a\")).iterator().hasNext(),\n        is(false));\n\n    \r\n    \r\n    assertThat(Iterables.size(Pair.adjacents(Collections.nCopies(100, null))),\n        equalTo(99));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/UtilTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":909,"status":"M"},{"authorDate":"2016-05-05 06:25:00","commitOrder":2,"curCode":"  @Test public void testPairFirstAnd() {\n    List<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n    List<String> result = new ArrayList<>();\n    for (Pair<String, String> pair : Pair.firstAnd(strings)) {\n      result.add(pair.toString());\n    }\n    assertThat(result.toString(), equalTo(\"[<a, b>, <a, c>]\"));\n\n    \r\n    assertThat(Pair.firstAnd(ImmutableList.of()).iterator().hasNext(),\n        is(false));\n\n    \r\n    assertThat(Pair.firstAnd(ImmutableList.of(\"a\")).iterator().hasNext(),\n        is(false));\n\n    \r\n    \r\n    assertThat(Iterables.size(Pair.firstAnd(Collections.nCopies(100, null))),\n        equalTo(99));\n  }\n","date":"2016-05-06 13:07:12","endLine":954,"groupId":"11696","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPairFirstAnd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9a/fa6b682cdeea61a8af5021507de0cddb342513.src","preCode":"  @Test public void testPairFirstAnd() {\n    List<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n    List<String> result = new ArrayList<String>();\n    for (Pair<String, String> pair : Pair.firstAnd(strings)) {\n      result.add(pair.toString());\n    }\n    assertThat(result.toString(), equalTo(\"[<a, b>, <a, c>]\"));\n\n    \r\n    assertThat(Pair.firstAnd(ImmutableList.of()).iterator().hasNext(),\n        is(false));\n\n    \r\n    assertThat(Pair.firstAnd(ImmutableList.of(\"a\")).iterator().hasNext(),\n        is(false));\n\n    \r\n    \r\n    assertThat(Iterables.size(Pair.firstAnd(Collections.nCopies(100, null))),\n        equalTo(99));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/UtilTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":934,"status":"M"}],"commitId":"354e8240d49de42bd6972d985fea692e4785e8b0","commitMessage":"@@@[CALCITE-855] UNNEST with multiple arguments\n\nChange a few FlatList contructor methods to return ComparableList.\n","date":"2016-05-06 13:07:12","modifiedFileCount":"15","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testPairAdjacents() {\n    List<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n    List<String> result = new ArrayList<>();\n    for (Pair<String, String> pair : Pair.adjacents(strings)) {\n      result.add(pair.toString());\n    }\n    assertThat(result.toString(), equalTo(\"[<a, b>, <b, c>]\"));\n\n    \r\n    assertThat(Pair.adjacents(ImmutableList.of()).iterator().hasNext(),\n        is(false));\n\n    \r\n    assertThat(Pair.adjacents(ImmutableList.of(\"a\")).iterator().hasNext(),\n        is(false));\n\n    \r\n    \r\n    assertThat(Iterables.size(Pair.adjacents(Collections.nCopies(100, null))),\n        equalTo(99));\n  }\n","date":"2020-04-06 04:57:49","endLine":999,"groupId":"101618","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPairAdjacents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d9/52fa7b0745fb802cadd23bc7e7ec1c1e082924.src","preCode":"  @Test public void testPairAdjacents() {\n    List<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n    List<String> result = new ArrayList<>();\n    for (Pair<String, String> pair : Pair.adjacents(strings)) {\n      result.add(pair.toString());\n    }\n    assertThat(result.toString(), equalTo(\"[<a, b>, <b, c>]\"));\n\n    \r\n    assertThat(Pair.adjacents(ImmutableList.of()).iterator().hasNext(),\n        is(false));\n\n    \r\n    assertThat(Pair.adjacents(ImmutableList.of(\"a\")).iterator().hasNext(),\n        is(false));\n\n    \r\n    \r\n    assertThat(Iterables.size(Pair.adjacents(Collections.nCopies(100, null))),\n        equalTo(99));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/UtilTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":979,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testPairFirstAnd() {\n    List<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n    List<String> result = new ArrayList<>();\n    for (Pair<String, String> pair : Pair.firstAnd(strings)) {\n      result.add(pair.toString());\n    }\n    assertThat(result.toString(), equalTo(\"[<a, b>, <a, c>]\"));\n\n    \r\n    assertThat(Pair.firstAnd(ImmutableList.of()).iterator().hasNext(),\n        is(false));\n\n    \r\n    assertThat(Pair.firstAnd(ImmutableList.of(\"a\")).iterator().hasNext(),\n        is(false));\n\n    \r\n    \r\n    assertThat(Iterables.size(Pair.firstAnd(Collections.nCopies(100, null))),\n        equalTo(99));\n  }\n","date":"2020-04-06 04:57:49","endLine":1024,"groupId":"101618","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPairFirstAnd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d9/52fa7b0745fb802cadd23bc7e7ec1c1e082924.src","preCode":"  @Test public void testPairFirstAnd() {\n    List<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n    List<String> result = new ArrayList<>();\n    for (Pair<String, String> pair : Pair.firstAnd(strings)) {\n      result.add(pair.toString());\n    }\n    assertThat(result.toString(), equalTo(\"[<a, b>, <a, c>]\"));\n\n    \r\n    assertThat(Pair.firstAnd(ImmutableList.of()).iterator().hasNext(),\n        is(false));\n\n    \r\n    assertThat(Pair.firstAnd(ImmutableList.of(\"a\")).iterator().hasNext(),\n        is(false));\n\n    \r\n    \r\n    assertThat(Iterables.size(Pair.firstAnd(Collections.nCopies(100, null))),\n        equalTo(99));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/UtilTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1004,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
