[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testInOperator() {\n    tester.setFor(SqlStdOperatorTable.IN, VM_EXPAND);\n    tester.checkBoolean(\"1 in (0, 1, 2)\", true);\n    tester.checkBoolean(\"3 in (0, 1, 2)\", false);\n    tester.checkBoolean(\"cast(null as integer) in (0, 1, 2)\", null);\n    tester.checkBoolean(\n        \"cast(null as integer) in (0, cast(null as integer), 2)\",\n        null);\n    if (Bug.FRG327_FIXED) {\n      tester.checkBoolean(\n          \"cast(null as integer) in (0, null, 2)\",\n          null);\n      tester.checkBoolean(\"1 in (0, null, 2)\", null);\n    }\n\n    if (!enable) {\n      return;\n    }\n    \r\n    tester.checkBoolean(\"false and true in (false, false)\", false);\n\n    if (!Bug.TODO_FIXED) {\n      return;\n    }\n    tester.checkFails(\n        \"'foo' in (^)^\",\n        \"(?s).*Encountered \\\"\\\\)\\\" at .*\",\n        false);\n  }\n","date":"2014-11-14 09:39:34","endLine":2160,"groupId":"9286","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testInOperator() {\n    tester.setFor(SqlStdOperatorTable.IN, VM_EXPAND);\n    tester.checkBoolean(\"1 in (0, 1, 2)\", true);\n    tester.checkBoolean(\"3 in (0, 1, 2)\", false);\n    tester.checkBoolean(\"cast(null as integer) in (0, 1, 2)\", null);\n    tester.checkBoolean(\n        \"cast(null as integer) in (0, cast(null as integer), 2)\",\n        null);\n    if (Bug.FRG327_FIXED) {\n      tester.checkBoolean(\n          \"cast(null as integer) in (0, null, 2)\",\n          null);\n      tester.checkBoolean(\"1 in (0, null, 2)\", null);\n    }\n\n    if (!enable) {\n      return;\n    }\n    \r\n    tester.checkBoolean(\"false and true in (false, false)\", false);\n\n    if (!Bug.TODO_FIXED) {\n      return;\n    }\n    tester.checkFails(\n        \"'foo' in (^)^\",\n        \"(?s).*Encountered \\\"\\\\)\\\" at .*\",\n        false);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2132,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testNotInOperator() {\n    tester.setFor(SqlStdOperatorTable.NOT_IN, VM_EXPAND);\n    tester.checkBoolean(\"1 not in (0, 1, 2)\", false);\n    tester.checkBoolean(\"3 not in (0, 1, 2)\", true);\n    if (!enable) {\n      return;\n    }\n    tester.checkBoolean(\n        \"cast(null as integer) not in (0, 1, 2)\",\n        null);\n    tester.checkBoolean(\n        \"cast(null as integer) not in (0, cast(null as integer), 2)\",\n        null);\n    if (Bug.FRG327_FIXED) {\n      tester.checkBoolean(\n          \"cast(null as integer) not in (0, null, 2)\",\n          null);\n      tester.checkBoolean(\"1 not in (0, null, 2)\", null);\n    }\n\n    \r\n    tester.checkBoolean(\"true and false not in (true, true)\", true);\n\n    if (!Bug.TODO_FIXED) {\n      return;\n    }\n    tester.checkFails(\n        \"'foo' not in (^)^\",\n        \"(?s).*Encountered \\\"\\\\)\\\" at .*\",\n        false);\n  }\n","date":"2014-11-14 09:39:34","endLine":2192,"groupId":"7858","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotInOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testNotInOperator() {\n    tester.setFor(SqlStdOperatorTable.NOT_IN, VM_EXPAND);\n    tester.checkBoolean(\"1 not in (0, 1, 2)\", false);\n    tester.checkBoolean(\"3 not in (0, 1, 2)\", true);\n    if (!enable) {\n      return;\n    }\n    tester.checkBoolean(\n        \"cast(null as integer) not in (0, 1, 2)\",\n        null);\n    tester.checkBoolean(\n        \"cast(null as integer) not in (0, cast(null as integer), 2)\",\n        null);\n    if (Bug.FRG327_FIXED) {\n      tester.checkBoolean(\n          \"cast(null as integer) not in (0, null, 2)\",\n          null);\n      tester.checkBoolean(\"1 not in (0, null, 2)\", null);\n    }\n\n    \r\n    tester.checkBoolean(\"true and false not in (true, true)\", true);\n\n    if (!Bug.TODO_FIXED) {\n      return;\n    }\n    tester.checkFails(\n        \"'foo' not in (^)^\",\n        \"(?s).*Encountered \\\"\\\\)\\\" at .*\",\n        false);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2162,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testInOperator() {\n    tester.setFor(SqlStdOperatorTable.IN, VM_EXPAND);\n    tester.checkBoolean(\"1 in (0, 1, 2)\", true);\n    tester.checkBoolean(\"3 in (0, 1, 2)\", false);\n    tester.checkBoolean(\"cast(null as integer) in (0, 1, 2)\", null);\n    tester.checkBoolean(\n        \"cast(null as integer) in (0, cast(null as integer), 2)\",\n        null);\n    if (Bug.FRG327_FIXED) {\n      tester.checkBoolean(\n          \"cast(null as integer) in (0, null, 2)\",\n          null);\n      tester.checkBoolean(\"1 in (0, null, 2)\", null);\n    }\n\n    if (!enable) {\n      return;\n    }\n    \r\n    tester.checkBoolean(\"false and true in (false, false)\", false);\n\n    if (!Bug.TODO_FIXED) {\n      return;\n    }\n    tester.checkFails(\n        \"'foo' in (^)^\",\n        \"(?s).*Encountered \\\"\\\\)\\\" at .*\",\n        false);\n  }\n","date":"2020-04-06 04:57:49","endLine":2637,"groupId":"10751","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testInOperator() {\n    tester.setFor(SqlStdOperatorTable.IN, VM_EXPAND);\n    tester.checkBoolean(\"1 in (0, 1, 2)\", true);\n    tester.checkBoolean(\"3 in (0, 1, 2)\", false);\n    tester.checkBoolean(\"cast(null as integer) in (0, 1, 2)\", null);\n    tester.checkBoolean(\n        \"cast(null as integer) in (0, cast(null as integer), 2)\",\n        null);\n    if (Bug.FRG327_FIXED) {\n      tester.checkBoolean(\n          \"cast(null as integer) in (0, null, 2)\",\n          null);\n      tester.checkBoolean(\"1 in (0, null, 2)\", null);\n    }\n\n    if (!enable) {\n      return;\n    }\n    \r\n    tester.checkBoolean(\"false and true in (false, false)\", false);\n\n    if (!Bug.TODO_FIXED) {\n      return;\n    }\n    tester.checkFails(\n        \"'foo' in (^)^\",\n        \"(?s).*Encountered \\\"\\\\)\\\" at .*\",\n        false);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2609,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testNotInOperator() {\n    tester.setFor(SqlStdOperatorTable.NOT_IN, VM_EXPAND);\n    tester.checkBoolean(\"1 not in (0, 1, 2)\", false);\n    tester.checkBoolean(\"3 not in (0, 1, 2)\", true);\n    if (!enable) {\n      return;\n    }\n    tester.checkBoolean(\n        \"cast(null as integer) not in (0, 1, 2)\",\n        null);\n    tester.checkBoolean(\n        \"cast(null as integer) not in (0, cast(null as integer), 2)\",\n        null);\n    if (Bug.FRG327_FIXED) {\n      tester.checkBoolean(\n          \"cast(null as integer) not in (0, null, 2)\",\n          null);\n      tester.checkBoolean(\"1 not in (0, null, 2)\", null);\n    }\n\n    \r\n    tester.checkBoolean(\"true and false not in (true, true)\", true);\n\n    if (!Bug.TODO_FIXED) {\n      return;\n    }\n    tester.checkFails(\n        \"'foo' not in (^)^\",\n        \"(?s).*Encountered \\\"\\\\)\\\" at .*\",\n        false);\n  }\n","date":"2020-04-06 04:57:49","endLine":2669,"groupId":"10751","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotInOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testNotInOperator() {\n    tester.setFor(SqlStdOperatorTable.NOT_IN, VM_EXPAND);\n    tester.checkBoolean(\"1 not in (0, 1, 2)\", false);\n    tester.checkBoolean(\"3 not in (0, 1, 2)\", true);\n    if (!enable) {\n      return;\n    }\n    tester.checkBoolean(\n        \"cast(null as integer) not in (0, 1, 2)\",\n        null);\n    tester.checkBoolean(\n        \"cast(null as integer) not in (0, cast(null as integer), 2)\",\n        null);\n    if (Bug.FRG327_FIXED) {\n      tester.checkBoolean(\n          \"cast(null as integer) not in (0, null, 2)\",\n          null);\n      tester.checkBoolean(\"1 not in (0, null, 2)\", null);\n    }\n\n    \r\n    tester.checkBoolean(\"true and false not in (true, true)\", true);\n\n    if (!Bug.TODO_FIXED) {\n      return;\n    }\n    tester.checkFails(\n        \"'foo' not in (^)^\",\n        \"(?s).*Encountered \\\"\\\\)\\\" at .*\",\n        false);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2639,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
