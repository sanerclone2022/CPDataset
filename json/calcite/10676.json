[{"authorTime":"2015-03-23 13:56:06","codes":[{"authorDate":"2015-03-23 13:56:06","commitOrder":1,"curCode":"  @Test public void testTableB5() {\n    SqlType[] columns = {\n      SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n      SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n      SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n      SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n      SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n      SqlType.ARRAY, SqlType.BLOB, SqlType.CLOB, SqlType.STRUCT, SqlType.REF,\n      SqlType.DATALINK, SqlType.JAVA_OBJECT, SqlType.ROWID, SqlType.NCHAR,\n      SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB, SqlType.SQLXML\n    };\n    Class[] rows = {\n      String.class, BigDecimal.class, Boolean.class, Byte.class, Short.class,\n      Integer.class, Long.class, Float.class, Double.class, byte[].class,\n      BigInteger.class, java.sql.Date.class, Time.class, Timestamp.class,\n      Array.class, Blob.class, Clob.class, Struct.class, Ref.class,\n      URL.class, Class.class, RowId.class, NClob.class, SQLXML.class,\n      Calendar.class, java.util.Date.class\n    };\n    for (Class row : rows) {\n      final String s = row == Date.class ? row.getName() : row.getSimpleName();\n      out.print(pad(s));\n      for (SqlType column : columns) {\n        out.print(SqlType.canSet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","date":"2015-03-23 17:16:28","endLine":349,"groupId":"3782","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableB5","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/05/f54b72c1f8ec5b1549534adff653e648eccb82.src","preCode":"  @Test public void testTableB5() {\n    SqlType[] columns = {\n      SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n      SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n      SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n      SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n      SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n      SqlType.ARRAY, SqlType.BLOB, SqlType.CLOB, SqlType.STRUCT, SqlType.REF,\n      SqlType.DATALINK, SqlType.JAVA_OBJECT, SqlType.ROWID, SqlType.NCHAR,\n      SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB, SqlType.SQLXML\n    };\n    Class[] rows = {\n      String.class, BigDecimal.class, Boolean.class, Byte.class, Short.class,\n      Integer.class, Long.class, Float.class, Double.class, byte[].class,\n      BigInteger.class, java.sql.Date.class, Time.class, Timestamp.class,\n      Array.class, Blob.class, Clob.class, Struct.class, Ref.class,\n      URL.class, Class.class, RowId.class, NClob.class, SQLXML.class,\n      Calendar.class, java.util.Date.class\n    };\n    for (Class row : rows) {\n      final String s = row == Date.class ? row.getName() : row.getSimpleName();\n      out.print(pad(s));\n      for (SqlType column : columns) {\n        out.print(SqlType.canSet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"B"},{"authorDate":"2015-03-23 13:56:06","commitOrder":1,"curCode":"  @Test public void testTableB6() {\n    SqlType[] columns = {\n      SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n      SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n      SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n      SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n      SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n      SqlType.CLOB, SqlType.BLOB, SqlType.ARRAY, SqlType.REF,\n      SqlType.DATALINK, SqlType.STRUCT, SqlType.JAVA_OBJECT, SqlType.ROWID,\n      SqlType.NCHAR, SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB,\n      SqlType.SQLXML\n    };\n    final PrintStream out =\n        CalcitePrepareImpl.DEBUG ? System.out\n            : new PrintStream(new ByteArrayOutputStream());\n    for (SqlType.Method row : SqlType.Method.values()) {\n      out.print(pad(row.methodName));\n      for (SqlType column : columns) {\n        out.print(SqlType.canGet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","date":"2015-03-23 17:16:28","endLine":382,"groupId":"12196","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableB6","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/05/f54b72c1f8ec5b1549534adff653e648eccb82.src","preCode":"  @Test public void testTableB6() {\n    SqlType[] columns = {\n      SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n      SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n      SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n      SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n      SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n      SqlType.CLOB, SqlType.BLOB, SqlType.ARRAY, SqlType.REF,\n      SqlType.DATALINK, SqlType.STRUCT, SqlType.JAVA_OBJECT, SqlType.ROWID,\n      SqlType.NCHAR, SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB,\n      SqlType.SQLXML\n    };\n    final PrintStream out =\n        CalcitePrepareImpl.DEBUG ? System.out\n            : new PrintStream(new ByteArrayOutputStream());\n    for (SqlType.Method row : SqlType.Method.values()) {\n      out.print(pad(row.methodName));\n      for (SqlType column : columns) {\n        out.print(SqlType.canGet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"B"}],"commitId":"76a0665c071fe127a514e4425e875bfe2a9d0e1f","commitMessage":"@@@[CALCITE-638] SQL standard REAL is 4 bytes.  FLOAT is 8 bytes\n\nAdd tests for [CALCITE-630] Flesh out AvaticaParameter#setObject\n\nMove class SqlType to top-level.  and add metadata about conversions allowed by JDBC spec\n","date":"2015-03-23 17:16:28","modifiedFileCount":"10","status":"B","submitter":"Julian Hyde"},{"authorTime":"2017-03-03 16:05:23","codes":[{"authorDate":"2015-03-23 13:56:06","commitOrder":2,"curCode":"  @Test public void testTableB5() {\n    SqlType[] columns = {\n      SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n      SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n      SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n      SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n      SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n      SqlType.ARRAY, SqlType.BLOB, SqlType.CLOB, SqlType.STRUCT, SqlType.REF,\n      SqlType.DATALINK, SqlType.JAVA_OBJECT, SqlType.ROWID, SqlType.NCHAR,\n      SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB, SqlType.SQLXML\n    };\n    Class[] rows = {\n      String.class, BigDecimal.class, Boolean.class, Byte.class, Short.class,\n      Integer.class, Long.class, Float.class, Double.class, byte[].class,\n      BigInteger.class, java.sql.Date.class, Time.class, Timestamp.class,\n      Array.class, Blob.class, Clob.class, Struct.class, Ref.class,\n      URL.class, Class.class, RowId.class, NClob.class, SQLXML.class,\n      Calendar.class, java.util.Date.class\n    };\n    for (Class row : rows) {\n      final String s = row == Date.class ? row.getName() : row.getSimpleName();\n      out.print(pad(s));\n      for (SqlType column : columns) {\n        out.print(SqlType.canSet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","date":"2015-03-23 17:16:28","endLine":349,"groupId":"3782","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableB5","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/05/f54b72c1f8ec5b1549534adff653e648eccb82.src","preCode":"  @Test public void testTableB5() {\n    SqlType[] columns = {\n      SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n      SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n      SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n      SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n      SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n      SqlType.ARRAY, SqlType.BLOB, SqlType.CLOB, SqlType.STRUCT, SqlType.REF,\n      SqlType.DATALINK, SqlType.JAVA_OBJECT, SqlType.ROWID, SqlType.NCHAR,\n      SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB, SqlType.SQLXML\n    };\n    Class[] rows = {\n      String.class, BigDecimal.class, Boolean.class, Byte.class, Short.class,\n      Integer.class, Long.class, Float.class, Double.class, byte[].class,\n      BigInteger.class, java.sql.Date.class, Time.class, Timestamp.class,\n      Array.class, Blob.class, Clob.class, Struct.class, Ref.class,\n      URL.class, Class.class, RowId.class, NClob.class, SQLXML.class,\n      Calendar.class, java.util.Date.class\n    };\n    for (Class row : rows) {\n      final String s = row == Date.class ? row.getName() : row.getSimpleName();\n      out.print(pad(s));\n      for (SqlType column : columns) {\n        out.print(SqlType.canSet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"N"},{"authorDate":"2017-03-03 16:05:23","commitOrder":2,"curCode":"  @Test public void testTableB6() {\n    SqlType[] columns = {\n      SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n      SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n      SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n      SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n      SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n      SqlType.CLOB, SqlType.BLOB, SqlType.ARRAY, SqlType.REF,\n      SqlType.DATALINK, SqlType.STRUCT, SqlType.JAVA_OBJECT, SqlType.ROWID,\n      SqlType.NCHAR, SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB,\n      SqlType.SQLXML\n    };\n    final PrintWriter out =\n        CalcitePrepareImpl.DEBUG\n            ? Util.printWriter(System.out)\n            : new PrintWriter(new StringWriter());\n    for (SqlType.Method row : SqlType.Method.values()) {\n      out.print(pad(row.methodName));\n      for (SqlType column : columns) {\n        out.print(SqlType.canGet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","date":"2017-03-04 03:04:28","endLine":446,"groupId":"13089","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableB6","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e0/8e3c01ec4ab068bc1d34a3f6e3e20be59902f3.src","preCode":"  @Test public void testTableB6() {\n    SqlType[] columns = {\n      SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n      SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n      SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n      SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n      SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n      SqlType.CLOB, SqlType.BLOB, SqlType.ARRAY, SqlType.REF,\n      SqlType.DATALINK, SqlType.STRUCT, SqlType.JAVA_OBJECT, SqlType.ROWID,\n      SqlType.NCHAR, SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB,\n      SqlType.SQLXML\n    };\n    final PrintStream out =\n        CalcitePrepareImpl.DEBUG ? System.out\n            : new PrintStream(new ByteArrayOutputStream());\n    for (SqlType.Method row : SqlType.Method.values()) {\n      out.print(pad(row.methodName));\n      for (SqlType column : columns) {\n        out.print(SqlType.canGet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"M"}],"commitId":"75152c5b7fd62f60c6cdfb86605af8b34a129898","commitMessage":"@@@[CALCITE-1667] Forbid calls to JDK APIs that use the default locale.  time zone or character set\n\nUse the \"forbidden-apis\" maven plugin to detect calls to such APIs.\nEliminate calls to such APIs.\n","date":"2017-03-04 03:04:28","modifiedFileCount":"79","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-02-22 18:30:45","codes":[{"authorDate":"2015-03-23 13:56:06","commitOrder":3,"curCode":"  @Test public void testTableB5() {\n    SqlType[] columns = {\n      SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n      SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n      SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n      SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n      SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n      SqlType.ARRAY, SqlType.BLOB, SqlType.CLOB, SqlType.STRUCT, SqlType.REF,\n      SqlType.DATALINK, SqlType.JAVA_OBJECT, SqlType.ROWID, SqlType.NCHAR,\n      SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB, SqlType.SQLXML\n    };\n    Class[] rows = {\n      String.class, BigDecimal.class, Boolean.class, Byte.class, Short.class,\n      Integer.class, Long.class, Float.class, Double.class, byte[].class,\n      BigInteger.class, java.sql.Date.class, Time.class, Timestamp.class,\n      Array.class, Blob.class, Clob.class, Struct.class, Ref.class,\n      URL.class, Class.class, RowId.class, NClob.class, SQLXML.class,\n      Calendar.class, java.util.Date.class\n    };\n    for (Class row : rows) {\n      final String s = row == Date.class ? row.getName() : row.getSimpleName();\n      out.print(pad(s));\n      for (SqlType column : columns) {\n        out.print(SqlType.canSet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","date":"2015-03-23 17:16:28","endLine":349,"groupId":"3782","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableB5","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/05/f54b72c1f8ec5b1549534adff653e648eccb82.src","preCode":"  @Test public void testTableB5() {\n    SqlType[] columns = {\n      SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n      SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n      SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n      SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n      SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n      SqlType.ARRAY, SqlType.BLOB, SqlType.CLOB, SqlType.STRUCT, SqlType.REF,\n      SqlType.DATALINK, SqlType.JAVA_OBJECT, SqlType.ROWID, SqlType.NCHAR,\n      SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB, SqlType.SQLXML\n    };\n    Class[] rows = {\n      String.class, BigDecimal.class, Boolean.class, Byte.class, Short.class,\n      Integer.class, Long.class, Float.class, Double.class, byte[].class,\n      BigInteger.class, java.sql.Date.class, Time.class, Timestamp.class,\n      Array.class, Blob.class, Clob.class, Struct.class, Ref.class,\n      URL.class, Class.class, RowId.class, NClob.class, SQLXML.class,\n      Calendar.class, java.util.Date.class\n    };\n    for (Class row : rows) {\n      final String s = row == Date.class ? row.getName() : row.getSimpleName();\n      out.print(pad(s));\n      for (SqlType column : columns) {\n        out.print(SqlType.canSet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"N"},{"authorDate":"2019-02-22 18:30:45","commitOrder":3,"curCode":"  @Test public void testTableB6() {\n    SqlType[] columns = {\n        SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n        SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n        SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n        SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n        SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n        SqlType.CLOB, SqlType.BLOB, SqlType.ARRAY, SqlType.REF,\n        SqlType.DATALINK, SqlType.STRUCT, SqlType.JAVA_OBJECT, SqlType.ROWID,\n        SqlType.NCHAR, SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB,\n        SqlType.SQLXML\n    };\n    final PrintWriter out =\n        CalciteSystemProperty.DEBUG.value()\n            ? Util.printWriter(System.out)\n            : new PrintWriter(new StringWriter());\n    for (SqlType.Method row : SqlType.Method.values()) {\n      out.print(pad(row.methodName));\n      for (SqlType column : columns) {\n        out.print(SqlType.canGet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","date":"2019-02-28 18:05:41","endLine":443,"groupId":"13078","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableB6","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/92/90dac5d68ebb0e87c1d6e542551d86616926cd.src","preCode":"  @Test public void testTableB6() {\n    SqlType[] columns = {\n        SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n        SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n        SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n        SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n        SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n        SqlType.CLOB, SqlType.BLOB, SqlType.ARRAY, SqlType.REF,\n        SqlType.DATALINK, SqlType.STRUCT, SqlType.JAVA_OBJECT, SqlType.ROWID,\n        SqlType.NCHAR, SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB,\n        SqlType.SQLXML\n    };\n    final PrintWriter out =\n        CalcitePrepareImpl.DEBUG\n            ? Util.printWriter(System.out)\n            : new PrintWriter(new StringWriter());\n    for (SqlType.Method row : SqlType.Method.values()) {\n      out.print(pad(row.methodName));\n      for (SqlType column : columns) {\n        out.print(SqlType.canGet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":420,"status":"M"}],"commitId":"280642a02a4bcfd1fb9cbe8c5ab672d3619860e7","commitMessage":"@@@[CALCITE-2859] Centralize Calcite system properties\n\n1. Move all system properties with \"calcite\" namespace under a common class.\n2. Improve the documentation (javadoc) of existing properties.\n3. Add review comments regarding a few properties.\n4. Deprecate SaffronProperties and move them all under CalciteSystemProperty.\n","date":"2019-02-28 18:05:41","modifiedFileCount":"58","status":"M","submitter":"Stamatis Zampetakis"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testTableB5() {\n    SqlType[] columns = {\n        SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n        SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n        SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n        SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n        SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n        SqlType.ARRAY, SqlType.BLOB, SqlType.CLOB, SqlType.STRUCT, SqlType.REF,\n        SqlType.DATALINK, SqlType.JAVA_OBJECT, SqlType.ROWID, SqlType.NCHAR,\n        SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB, SqlType.SQLXML\n    };\n    Class[] rows = {\n        String.class, BigDecimal.class, Boolean.class, Byte.class, Short.class,\n        Integer.class, Long.class, Float.class, Double.class, byte[].class,\n        BigInteger.class, java.sql.Date.class, Time.class, Timestamp.class,\n        Array.class, Blob.class, Clob.class, Struct.class, Ref.class,\n        URL.class, Class.class, RowId.class, NClob.class, SQLXML.class,\n        Calendar.class, java.util.Date.class\n    };\n    for (Class row : rows) {\n      final String s = row == Date.class ? row.getName() : row.getSimpleName();\n      out.print(pad(s));\n      for (SqlType column : columns) {\n        out.print(SqlType.canSet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":410,"groupId":"10676","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableB5","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/46/9f7b82fa165ba21387f1308443e84237ce242d.src","preCode":"  @Test public void testTableB5() {\n    SqlType[] columns = {\n        SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n        SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n        SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n        SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n        SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n        SqlType.ARRAY, SqlType.BLOB, SqlType.CLOB, SqlType.STRUCT, SqlType.REF,\n        SqlType.DATALINK, SqlType.JAVA_OBJECT, SqlType.ROWID, SqlType.NCHAR,\n        SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB, SqlType.SQLXML\n    };\n    Class[] rows = {\n        String.class, BigDecimal.class, Boolean.class, Byte.class, Short.class,\n        Integer.class, Long.class, Float.class, Double.class, byte[].class,\n        BigInteger.class, java.sql.Date.class, Time.class, Timestamp.class,\n        Array.class, Blob.class, Clob.class, Struct.class, Ref.class,\n        URL.class, Class.class, RowId.class, NClob.class, SQLXML.class,\n        Calendar.class, java.util.Date.class\n    };\n    for (Class row : rows) {\n      final String s = row == Date.class ? row.getName() : row.getSimpleName();\n      out.print(pad(s));\n      for (SqlType column : columns) {\n        out.print(SqlType.canSet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testTableB6() {\n    SqlType[] columns = {\n        SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n        SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n        SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n        SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n        SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n        SqlType.CLOB, SqlType.BLOB, SqlType.ARRAY, SqlType.REF,\n        SqlType.DATALINK, SqlType.STRUCT, SqlType.JAVA_OBJECT, SqlType.ROWID,\n        SqlType.NCHAR, SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB,\n        SqlType.SQLXML\n    };\n    final PrintWriter out =\n        CalciteSystemProperty.DEBUG.value()\n            ? Util.printWriter(System.out)\n            : new PrintWriter(new StringWriter());\n    for (SqlType.Method row : SqlType.Method.values()) {\n      out.print(pad(row.methodName));\n      for (SqlType column : columns) {\n        out.print(SqlType.canGet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":444,"groupId":"10676","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableB6","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/46/9f7b82fa165ba21387f1308443e84237ce242d.src","preCode":"  @Test public void testTableB6() {\n    SqlType[] columns = {\n        SqlType.TINYINT, SqlType.SMALLINT, SqlType.INTEGER, SqlType.BIGINT,\n        SqlType.REAL, SqlType.FLOAT, SqlType.DOUBLE, SqlType.DECIMAL,\n        SqlType.NUMERIC, SqlType.BIT, SqlType.BOOLEAN, SqlType.CHAR,\n        SqlType.VARCHAR, SqlType.LONGVARCHAR, SqlType.BINARY, SqlType.VARBINARY,\n        SqlType.LONGVARBINARY, SqlType.DATE, SqlType.TIME, SqlType.TIMESTAMP,\n        SqlType.CLOB, SqlType.BLOB, SqlType.ARRAY, SqlType.REF,\n        SqlType.DATALINK, SqlType.STRUCT, SqlType.JAVA_OBJECT, SqlType.ROWID,\n        SqlType.NCHAR, SqlType.NVARCHAR, SqlType.LONGNVARCHAR, SqlType.NCLOB,\n        SqlType.SQLXML\n    };\n    final PrintWriter out =\n        CalciteSystemProperty.DEBUG.value()\n            ? Util.printWriter(System.out)\n            : new PrintWriter(new StringWriter());\n    for (SqlType.Method row : SqlType.Method.values()) {\n      out.print(pad(row.methodName));\n      for (SqlType column : columns) {\n        out.print(SqlType.canGet(row, column) ? \"x \" : \". \");\n      }\n      out.println();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
