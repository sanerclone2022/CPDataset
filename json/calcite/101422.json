[{"authorTime":"2017-07-07 06:19:58","codes":[{"authorDate":"2017-07-07 06:19:58","commitOrder":1,"curCode":"  @Test public void testExpression() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true);\n\n    final String q0 = \"select\\n\"\n        + \"  \\\"fname\\\" || ' ' || \\\"lname\\\" as \\\"full_name\\\",\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\"\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    final String l0 = \"customer:[COUNT(), AVG($f2)]\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n    assertThat(Iterables.getOnlyElement(t.s.latticeMap.keySet()),\n        is(l0));\n    final Lattice lattice = Iterables.getOnlyElement(t.s.latticeMap.values());\n    final List<Lattice.DerivedColumn> derivedColumns = lattice.columns.stream()\n        .filter(c -> c instanceof Lattice.DerivedColumn)\n        .map(c -> (Lattice.DerivedColumn) c)\n        .collect(Collectors.toList());\n    assertThat(derivedColumns.size(), is(2));\n    final List<String> tables = ImmutableList.of(\"customer\");\n    assertThat(derivedColumns.get(0).tables, is(tables));\n    assertThat(derivedColumns.get(1).tables, is(tables));\n  }\n","date":"2018-10-30 07:51:43","endLine":501,"groupId":"10318","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/43/f756260700e59993f66424bb1040803a2aafe4.src","preCode":"  @Test public void testExpression() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true);\n\n    final String q0 = \"select\\n\"\n        + \"  \\\"fname\\\" || ' ' || \\\"lname\\\" as \\\"full_name\\\",\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\"\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    final String l0 = \"customer:[COUNT(), AVG($f2)]\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n    assertThat(Iterables.getOnlyElement(t.s.latticeMap.keySet()),\n        is(l0));\n    final Lattice lattice = Iterables.getOnlyElement(t.s.latticeMap.values());\n    final List<Lattice.DerivedColumn> derivedColumns = lattice.columns.stream()\n        .filter(c -> c instanceof Lattice.DerivedColumn)\n        .map(c -> (Lattice.DerivedColumn) c)\n        .collect(Collectors.toList());\n    assertThat(derivedColumns.size(), is(2));\n    final List<String> tables = ImmutableList.of(\"customer\");\n    assertThat(derivedColumns.get(0).tables, is(tables));\n    assertThat(derivedColumns.get(1).tables, is(tables));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/materialize/LatticeSuggesterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":478,"status":"B"},{"authorDate":"2017-07-07 06:19:58","commitOrder":1,"curCode":"  @Test public void testExpressionInJoin() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true);\n\n    final String q0 = \"select\\n\"\n        + \"  \\\"fname\\\" || ' ' || \\\"lname\\\" as \\\"full_name\\\",\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\" join \\\"sales_fact_1997\\\" using (\\\"customer_id\\\")\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    final String l0 = \"sales_fact_1997 (customer:customer_id)\"\n        + \":[COUNT(), AVG($f2)]\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n    assertThat(Iterables.getOnlyElement(t.s.latticeMap.keySet()),\n        is(l0));\n    final Lattice lattice = Iterables.getOnlyElement(t.s.latticeMap.values());\n    final List<Lattice.DerivedColumn> derivedColumns = lattice.columns.stream()\n        .filter(c -> c instanceof Lattice.DerivedColumn)\n        .map(c -> (Lattice.DerivedColumn) c)\n        .collect(Collectors.toList());\n    assertThat(derivedColumns.size(), is(2));\n    final List<String> tables = ImmutableList.of(\"customer\");\n    assertThat(derivedColumns.get(0).tables, is(tables));\n    assertThat(derivedColumns.get(1).tables, is(tables));\n  }\n","date":"2018-10-30 07:51:43","endLine":527,"groupId":"10318","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionInJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/43/f756260700e59993f66424bb1040803a2aafe4.src","preCode":"  @Test public void testExpressionInJoin() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true);\n\n    final String q0 = \"select\\n\"\n        + \"  \\\"fname\\\" || ' ' || \\\"lname\\\" as \\\"full_name\\\",\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\" join \\\"sales_fact_1997\\\" using (\\\"customer_id\\\")\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    final String l0 = \"sales_fact_1997 (customer:customer_id)\"\n        + \":[COUNT(), AVG($f2)]\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n    assertThat(Iterables.getOnlyElement(t.s.latticeMap.keySet()),\n        is(l0));\n    final Lattice lattice = Iterables.getOnlyElement(t.s.latticeMap.values());\n    final List<Lattice.DerivedColumn> derivedColumns = lattice.columns.stream()\n        .filter(c -> c instanceof Lattice.DerivedColumn)\n        .map(c -> (Lattice.DerivedColumn) c)\n        .collect(Collectors.toList());\n    assertThat(derivedColumns.size(), is(2));\n    final List<String> tables = ImmutableList.of(\"customer\");\n    assertThat(derivedColumns.get(0).tables, is(tables));\n    assertThat(derivedColumns.get(1).tables, is(tables));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/materialize/LatticeSuggesterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":503,"status":"B"}],"commitId":"b47413a1d648455c43dbe8d51df926ebd68b3a36","commitMessage":"@@@[CALCITE-1870] Lattice suggester\n\nDon't add a query graph if it is cyclic.\n\nMore concise descriptions of join graphs.  and add FoodMart test case.\nAdd a test based on TPC-DS.\n\nMake FoodMartQueryTest a top-level class.  and add a test that runs\nthrough all of its queries and suggests lattices.\n\nAPI changes to Lattice. Rename class Lattice.Node to LatticeNode.  add\nsub-class LatticeRootNode that is immutable and has state that was\npreviously in Lattice. LatticeSuggester makes heavy use of LatticeNode.\nMove column unique name into Column.  and remove the\nLattice.uniqueColumnNames field.\n\nDirectedGraph.toString sorts lists of vertices and edges.\n\nAdd materialized views to documentation menu;\ntweak SQL formatting.\n\nIn HepPlanner.  rename noDAG to noDag.\n\nSqlImplementor: Translate simple RexNode to SQL without requiring RelBuilder;\nSqlImplementor.Context is now static.  but not all derived classes are.\n\nFix a typo in UdfTest.\n","date":"2018-10-30 07:51:43","modifiedFileCount":"19","status":"B","submitter":"Julian Hyde"},{"authorTime":"2017-07-07 06:19:58","codes":[{"authorDate":"2019-06-18 00:44:49","commitOrder":2,"curCode":"  @Test public void testExpression() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true);\n\n    final String q0 = \"select\\n\"\n        + \"  \\\"fname\\\" || ' ' || \\\"lname\\\" as \\\"full_name\\\",\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\"\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    final String l0 = \"customer:[COUNT(), AVG($f2)]\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n    assertThat(Iterables.getOnlyElement(t.s.latticeMap.keySet()),\n        is(l0));\n    final Lattice lattice = Iterables.getOnlyElement(t.s.latticeMap.values());\n    final List<Lattice.DerivedColumn> derivedColumns = lattice.columns.stream()\n        .filter(c -> c instanceof Lattice.DerivedColumn)\n        .map(c -> (Lattice.DerivedColumn) c)\n        .collect(Collectors.toList());\n    assertThat(derivedColumns.size(), is(2));\n    final List<String> tables = ImmutableList.of(\"customer\");\n    checkDerivedColumn(lattice, tables, derivedColumns, 0, \"$f2\", true);\n    checkDerivedColumn(lattice, tables, derivedColumns, 1, \"full_name\", false);\n  }\n","date":"2019-08-04 04:30:59","endLine":504,"groupId":"10318","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/22/e4ab812b7147664cc08c827ae7dccf22b694fc.src","preCode":"  @Test public void testExpression() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true);\n\n    final String q0 = \"select\\n\"\n        + \"  \\\"fname\\\" || ' ' || \\\"lname\\\" as \\\"full_name\\\",\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\"\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    final String l0 = \"customer:[COUNT(), AVG($f2)]\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n    assertThat(Iterables.getOnlyElement(t.s.latticeMap.keySet()),\n        is(l0));\n    final Lattice lattice = Iterables.getOnlyElement(t.s.latticeMap.values());\n    final List<Lattice.DerivedColumn> derivedColumns = lattice.columns.stream()\n        .filter(c -> c instanceof Lattice.DerivedColumn)\n        .map(c -> (Lattice.DerivedColumn) c)\n        .collect(Collectors.toList());\n    assertThat(derivedColumns.size(), is(2));\n    final List<String> tables = ImmutableList.of(\"customer\");\n    assertThat(derivedColumns.get(0).tables, is(tables));\n    assertThat(derivedColumns.get(1).tables, is(tables));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/materialize/LatticeSuggesterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":481,"status":"M"},{"authorDate":"2017-07-07 06:19:58","commitOrder":2,"curCode":"  @Test public void testExpressionInJoin() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true);\n\n    final String q0 = \"select\\n\"\n        + \"  \\\"fname\\\" || ' ' || \\\"lname\\\" as \\\"full_name\\\",\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\" join \\\"sales_fact_1997\\\" using (\\\"customer_id\\\")\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    final String l0 = \"sales_fact_1997 (customer:customer_id)\"\n        + \":[COUNT(), AVG($f2)]\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n    assertThat(Iterables.getOnlyElement(t.s.latticeMap.keySet()),\n        is(l0));\n    final Lattice lattice = Iterables.getOnlyElement(t.s.latticeMap.values());\n    final List<Lattice.DerivedColumn> derivedColumns = lattice.columns.stream()\n        .filter(c -> c instanceof Lattice.DerivedColumn)\n        .map(c -> (Lattice.DerivedColumn) c)\n        .collect(Collectors.toList());\n    assertThat(derivedColumns.size(), is(2));\n    final List<String> tables = ImmutableList.of(\"customer\");\n    assertThat(derivedColumns.get(0).tables, is(tables));\n    assertThat(derivedColumns.get(1).tables, is(tables));\n  }\n","date":"2018-10-30 07:51:43","endLine":527,"groupId":"10318","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionInJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/43/f756260700e59993f66424bb1040803a2aafe4.src","preCode":"  @Test public void testExpressionInJoin() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true);\n\n    final String q0 = \"select\\n\"\n        + \"  \\\"fname\\\" || ' ' || \\\"lname\\\" as \\\"full_name\\\",\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\" join \\\"sales_fact_1997\\\" using (\\\"customer_id\\\")\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    final String l0 = \"sales_fact_1997 (customer:customer_id)\"\n        + \":[COUNT(), AVG($f2)]\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n    assertThat(Iterables.getOnlyElement(t.s.latticeMap.keySet()),\n        is(l0));\n    final Lattice lattice = Iterables.getOnlyElement(t.s.latticeMap.values());\n    final List<Lattice.DerivedColumn> derivedColumns = lattice.columns.stream()\n        .filter(c -> c instanceof Lattice.DerivedColumn)\n        .map(c -> (Lattice.DerivedColumn) c)\n        .collect(Collectors.toList());\n    assertThat(derivedColumns.size(), is(2));\n    final List<String> tables = ImmutableList.of(\"customer\");\n    assertThat(derivedColumns.get(0).tables, is(tables));\n    assertThat(derivedColumns.get(1).tables, is(tables));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/materialize/LatticeSuggesterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":503,"status":"N"}],"commitId":"3ab722b5cccf3357f5c6fddf796ccf612d978cc2","commitMessage":"@@@[CALCITE-3131] In LatticeSuggester.  record whether columns are used as \"dimensions\" or \"measures\"\n","date":"2019-08-04 04:30:59","modifiedFileCount":"3","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testExpression() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true);\n\n    final String q0 = \"select\\n\"\n        + \"  \\\"fname\\\" || ' ' || \\\"lname\\\" as \\\"full_name\\\",\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\"\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    final String l0 = \"customer:[COUNT(), AVG($f2)]\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n    assertThat(Iterables.getOnlyElement(t.s.latticeMap.keySet()),\n        is(l0));\n    final Lattice lattice = Iterables.getOnlyElement(t.s.latticeMap.values());\n    final List<Lattice.DerivedColumn> derivedColumns = lattice.columns.stream()\n        .filter(c -> c instanceof Lattice.DerivedColumn)\n        .map(c -> (Lattice.DerivedColumn) c)\n        .collect(Collectors.toList());\n    assertThat(derivedColumns.size(), is(2));\n    final List<String> tables = ImmutableList.of(\"customer\");\n    checkDerivedColumn(lattice, tables, derivedColumns, 0, \"$f2\", true);\n    checkDerivedColumn(lattice, tables, derivedColumns, 1, \"full_name\", false);\n  }\n","date":"2020-04-06 04:57:49","endLine":514,"groupId":"101422","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/3cc8e5ae752cd3b53de4d9ae6709226dc852a5.src","preCode":"  @Test public void testExpression() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true);\n\n    final String q0 = \"select\\n\"\n        + \"  \\\"fname\\\" || ' ' || \\\"lname\\\" as \\\"full_name\\\",\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\"\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    final String l0 = \"customer:[COUNT(), AVG($f2)]\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n    assertThat(Iterables.getOnlyElement(t.s.latticeMap.keySet()),\n        is(l0));\n    final Lattice lattice = Iterables.getOnlyElement(t.s.latticeMap.values());\n    final List<Lattice.DerivedColumn> derivedColumns = lattice.columns.stream()\n        .filter(c -> c instanceof Lattice.DerivedColumn)\n        .map(c -> (Lattice.DerivedColumn) c)\n        .collect(Collectors.toList());\n    assertThat(derivedColumns.size(), is(2));\n    final List<String> tables = ImmutableList.of(\"customer\");\n    checkDerivedColumn(lattice, tables, derivedColumns, 0, \"$f2\", true);\n    checkDerivedColumn(lattice, tables, derivedColumns, 1, \"full_name\", false);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/materialize/LatticeSuggesterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":491,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testExpressionInJoin() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true);\n\n    final String q0 = \"select\\n\"\n        + \"  \\\"fname\\\" || ' ' || \\\"lname\\\" as \\\"full_name\\\",\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\" join \\\"sales_fact_1997\\\" using (\\\"customer_id\\\")\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    final String l0 = \"sales_fact_1997 (customer:customer_id)\"\n        + \":[COUNT(), AVG($f2)]\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n    assertThat(Iterables.getOnlyElement(t.s.latticeMap.keySet()),\n        is(l0));\n    final Lattice lattice = Iterables.getOnlyElement(t.s.latticeMap.values());\n    final List<Lattice.DerivedColumn> derivedColumns = lattice.columns.stream()\n        .filter(c -> c instanceof Lattice.DerivedColumn)\n        .map(c -> (Lattice.DerivedColumn) c)\n        .collect(Collectors.toList());\n    assertThat(derivedColumns.size(), is(2));\n    final List<String> tables = ImmutableList.of(\"customer\");\n    assertThat(derivedColumns.get(0).tables, is(tables));\n    assertThat(derivedColumns.get(1).tables, is(tables));\n  }\n","date":"2020-04-06 04:57:49","endLine":598,"groupId":"101422","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionInJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/3cc8e5ae752cd3b53de4d9ae6709226dc852a5.src","preCode":"  @Test public void testExpressionInJoin() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true);\n\n    final String q0 = \"select\\n\"\n        + \"  \\\"fname\\\" || ' ' || \\\"lname\\\" as \\\"full_name\\\",\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\" join \\\"sales_fact_1997\\\" using (\\\"customer_id\\\")\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    final String l0 = \"sales_fact_1997 (customer:customer_id)\"\n        + \":[COUNT(), AVG($f2)]\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n    assertThat(Iterables.getOnlyElement(t.s.latticeMap.keySet()),\n        is(l0));\n    final Lattice lattice = Iterables.getOnlyElement(t.s.latticeMap.values());\n    final List<Lattice.DerivedColumn> derivedColumns = lattice.columns.stream()\n        .filter(c -> c instanceof Lattice.DerivedColumn)\n        .map(c -> (Lattice.DerivedColumn) c)\n        .collect(Collectors.toList());\n    assertThat(derivedColumns.size(), is(2));\n    final List<String> tables = ImmutableList.of(\"customer\");\n    assertThat(derivedColumns.get(0).tables, is(tables));\n    assertThat(derivedColumns.get(1).tables, is(tables));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/materialize/LatticeSuggesterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":574,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
