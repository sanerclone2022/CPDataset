[{"authorTime":"2015-07-16 12:48:51","codes":[{"authorDate":"2015-07-16 12:48:51","commitOrder":2,"curCode":"  @Test public void testSimpleGreaterCond() {\n    final Fixture f = new Fixture();\n    final RexNode node1 = f.gt(f.i, f.literal(10));\n    final RexNode node2 = f.gt(f.i, f.literal(30));\n    final RexNode node3 = f.ge(f.i, f.literal(30));\n    final RexNode node4 = f.ge(f.i, f.literal(10));\n    final RexNode node5 = f.eq(f.i, f.literal(30));\n    final RexNode node6 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(node2, node1);\n    f.checkNotImplies(node1, node2);\n    f.checkNotImplies(node1, node3);\n    f.checkImplies(node3, node1);\n    f.checkImplies(node5, node1);\n    f.checkNotImplies(node1, node5);\n    f.checkNotImplies(node1, node6);\n    f.checkNotImplies(node4, node6);\n    \r\n    \r\n    \r\n  }\n","date":"2015-07-17 06:03:20","endLine":82,"groupId":"1776","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleGreaterCond","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/0798ed889c6a965e042ed4b36ce226c97cb586.src","preCode":"  @Test public void testSimpleGreaterCond() {\n    final Fixture f = new Fixture();\n    final RexNode node1 = f.gt(f.i, f.literal(10));\n    final RexNode node2 = f.gt(f.i, f.literal(30));\n    final RexNode node3 = f.ge(f.i, f.literal(30));\n    final RexNode node4 = f.ge(f.i, f.literal(10));\n    final RexNode node5 = f.eq(f.i, f.literal(30));\n    final RexNode node6 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(node2, node1);\n    f.checkNotImplies(node1, node2);\n    f.checkNotImplies(node1, node3);\n    f.checkImplies(node3, node1);\n    f.checkImplies(node5, node1);\n    f.checkNotImplies(node1, node5);\n    f.checkNotImplies(node1, node6);\n    f.checkNotImplies(node4, node6);\n    \r\n    \r\n    \r\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexImplicationCheckerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"MB"},{"authorDate":"2015-07-16 12:48:51","commitOrder":2,"curCode":"  @Test public void testSimpleShort() {\n    final Fixture f = new Fixture();\n    final RexNode node1 = f.ge(f.sh, f.shortLiteral((short) 10));\n    final RexNode node2 = f.ge(f.sh, f.shortLiteral((short) 11));\n\n    f.checkImplies(node2, node1);\n    f.checkNotImplies(node1, node2);\n  }\n","date":"2015-07-17 06:03:20","endLine":156,"groupId":"4830","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleShort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/0798ed889c6a965e042ed4b36ce226c97cb586.src","preCode":"  @Test public void testSimpleShort() {\n    final Fixture f = new Fixture();\n    final RexNode node1 = f.ge(f.sh, f.shortLiteral((short) 10));\n    final RexNode node2 = f.ge(f.sh, f.shortLiteral((short) 11));\n\n    f.checkImplies(node2, node1);\n    f.checkNotImplies(node1, node2);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexImplicationCheckerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"MB"}],"commitId":"5a365609c0d050e5e832449bdadad1e309f0f204","commitMessage":"@@@Fix up previous commit; add some tests for constant reduction\n","date":"2015-07-17 06:03:20","modifiedFileCount":"13","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-11-21 04:48:39","codes":[{"authorDate":"2016-11-21 04:48:39","commitOrder":3,"curCode":"  @Test public void testSimpleGreaterCond() {\n    final Fixture f = new Fixture();\n    final RexNode iGt10 = f.gt(f.i, f.literal(10));\n    final RexNode iGt30 = f.gt(f.i, f.literal(30));\n    final RexNode iGe30 = f.ge(f.i, f.literal(30));\n    final RexNode iGe10 = f.ge(f.i, f.literal(10));\n    final RexNode iEq30 = f.eq(f.i, f.literal(30));\n    final RexNode iNe10 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(iGt30, iGt10);\n    f.checkNotImplies(iGt10, iGt30);\n    f.checkNotImplies(iGt10, iGe30);\n    f.checkImplies(iGe30, iGt10);\n    f.checkImplies(iEq30, iGt10);\n    f.checkNotImplies(iGt10, iEq30);\n    f.checkNotImplies(iGt10, iNe10);\n    f.checkNotImplies(iGe10, iNe10);\n    \r\n    f.checkImplies(iGt10, iGt10);\n    f.checkImplies(iGe30, iGe30);\n  }\n","date":"2016-11-21 06:38:52","endLine":82,"groupId":"10339","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleGreaterCond","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/44/6401992fc7051f3808a4082b1169020392fba4.src","preCode":"  @Test public void testSimpleGreaterCond() {\n    final Fixture f = new Fixture();\n    final RexNode node1 = f.gt(f.i, f.literal(10));\n    final RexNode node2 = f.gt(f.i, f.literal(30));\n    final RexNode node3 = f.ge(f.i, f.literal(30));\n    final RexNode node4 = f.ge(f.i, f.literal(10));\n    final RexNode node5 = f.eq(f.i, f.literal(30));\n    final RexNode node6 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(node2, node1);\n    f.checkNotImplies(node1, node2);\n    f.checkNotImplies(node1, node3);\n    f.checkImplies(node3, node1);\n    f.checkImplies(node5, node1);\n    f.checkNotImplies(node1, node5);\n    f.checkNotImplies(node1, node6);\n    f.checkNotImplies(node4, node6);\n    \r\n    \r\n    \r\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexImplicationCheckerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2016-11-21 04:48:39","commitOrder":3,"curCode":"  @Test public void testSimpleShort() {\n    final Fixture f = new Fixture();\n    final RexNode xGe10 = f.ge(f.sh, f.shortLiteral((short) 10));\n    final RexNode xGe11 = f.ge(f.sh, f.shortLiteral((short) 11));\n\n    f.checkImplies(xGe11, xGe10);\n    f.checkNotImplies(xGe10, xGe11);\n  }\n","date":"2016-11-21 06:38:52","endLine":159,"groupId":"5275","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleShort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/44/6401992fc7051f3808a4082b1169020392fba4.src","preCode":"  @Test public void testSimpleShort() {\n    final Fixture f = new Fixture();\n    final RexNode node1 = f.ge(f.sh, f.shortLiteral((short) 10));\n    final RexNode node2 = f.ge(f.sh, f.shortLiteral((short) 11));\n\n    f.checkImplies(node2, node1);\n    f.checkNotImplies(node1, node2);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexImplicationCheckerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"dccbb55ae4ef904c4242fba57e173b6536a32ed5","commitMessage":"@@@[CALCITE-1497] Infer IS NOT NULL.  and project predicates\n","date":"2016-11-21 06:38:52","modifiedFileCount":"4","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testSimpleGreaterCond() {\n    final Fixture f = new Fixture();\n    final RexNode iGt10 = f.gt(f.i, f.literal(10));\n    final RexNode iGt30 = f.gt(f.i, f.literal(30));\n    final RexNode iGe30 = f.ge(f.i, f.literal(30));\n    final RexNode iGe10 = f.ge(f.i, f.literal(10));\n    final RexNode iEq30 = f.eq(f.i, f.literal(30));\n    final RexNode iNe10 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(iGt30, iGt10);\n    f.checkNotImplies(iGt10, iGt30);\n    f.checkNotImplies(iGt10, iGe30);\n    f.checkImplies(iGe30, iGt10);\n    f.checkImplies(iEq30, iGt10);\n    f.checkNotImplies(iGt10, iEq30);\n    f.checkNotImplies(iGt10, iNe10);\n    f.checkNotImplies(iGe10, iNe10);\n    \r\n    f.checkImplies(iGt10, iGt10);\n    f.checkImplies(iGe30, iGe30);\n  }\n","date":"2020-04-06 04:57:49","endLine":88,"groupId":"101083","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleGreaterCond","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/42/41444dfdd43805caece994cd16a03e6a7e4912.src","preCode":"  @Test public void testSimpleGreaterCond() {\n    final Fixture f = new Fixture();\n    final RexNode iGt10 = f.gt(f.i, f.literal(10));\n    final RexNode iGt30 = f.gt(f.i, f.literal(30));\n    final RexNode iGe30 = f.ge(f.i, f.literal(30));\n    final RexNode iGe10 = f.ge(f.i, f.literal(10));\n    final RexNode iEq30 = f.eq(f.i, f.literal(30));\n    final RexNode iNe10 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(iGt30, iGt10);\n    f.checkNotImplies(iGt10, iGt30);\n    f.checkNotImplies(iGt10, iGe30);\n    f.checkImplies(iGe30, iGt10);\n    f.checkImplies(iEq30, iGt10);\n    f.checkNotImplies(iGt10, iEq30);\n    f.checkNotImplies(iGt10, iNe10);\n    f.checkNotImplies(iGe10, iNe10);\n    \r\n    f.checkImplies(iGt10, iGt10);\n    f.checkImplies(iGe30, iGe30);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexImplicationCheckerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testSimpleShort() {\n    final Fixture f = new Fixture();\n    final RexNode xGe10 = f.ge(f.sh, f.shortLiteral((short) 10));\n    final RexNode xGe11 = f.ge(f.sh, f.shortLiteral((short) 11));\n\n    f.checkImplies(xGe11, xGe10);\n    f.checkNotImplies(xGe10, xGe11);\n  }\n","date":"2020-04-06 04:57:49","endLine":165,"groupId":"101083","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleShort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/42/41444dfdd43805caece994cd16a03e6a7e4912.src","preCode":"  @Test public void testSimpleShort() {\n    final Fixture f = new Fixture();\n    final RexNode xGe10 = f.ge(f.sh, f.shortLiteral((short) 10));\n    final RexNode xGe11 = f.ge(f.sh, f.shortLiteral((short) 11));\n\n    f.checkImplies(xGe11, xGe10);\n    f.checkNotImplies(xGe10, xGe11);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexImplicationCheckerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
