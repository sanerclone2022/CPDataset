[{"authorTime":"2018-01-11 04:54:26","codes":[{"authorDate":"2018-01-11 04:54:26","commitOrder":1,"curCode":"  @Test public void testUnboundYearExtractRewrite() {\n    final Fixture2 f = new Fixture2();\n    \r\n    checkDateRange(f,\n        f.and(f.le(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(11)),\n            f.eq(f.exDayTs, f.literal(2))),\n        is(\"AND(<($9, 2011-01-01 00:00:00), =(EXTRACT(FLAG(MONTH), $9), 11),\"\n            + \" =(EXTRACT(FLAG(DAY), $9), 2))\"));\n\n    \r\n    checkDateRange(f,\n        f.and(f.ge(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(11)),\n            f.eq(f.exDayTs, f.literal(2))),\n        \r\n        is(\"AND(>=($9, 2010-01-01 00:00:00), =(EXTRACT(FLAG(MONTH), $9), 11),\"\n            + \" =(EXTRACT(FLAG(DAY), $9), 2))\"));\n\n    \r\n    checkDateRange(f,\n        f.and(f.le(f.exYearTs, f.literal(2010)),\n            f.ge(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(5))),\n        is(\"AND(<($9, 2011-01-01 00:00:00), AND(>=($9, 2010-01-01 00:00:00),\"\n            + \" <($9, 2011-01-01 00:00:00)), AND(>=($9, 2010-05-01 00:00:00),\"\n            + \" <($9, 2010-06-01 00:00:00)))\"));\n  }\n","date":"2018-01-12 11:53:24","endLine":386,"groupId":"13164","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnboundYearExtractRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f0/439aba565b3e6275cd74db3ba741367f9c3012.src","preCode":"  @Test public void testUnboundYearExtractRewrite() {\n    final Fixture2 f = new Fixture2();\n    \r\n    checkDateRange(f,\n        f.and(f.le(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(11)),\n            f.eq(f.exDayTs, f.literal(2))),\n        is(\"AND(<($9, 2011-01-01 00:00:00), =(EXTRACT(FLAG(MONTH), $9), 11),\"\n            + \" =(EXTRACT(FLAG(DAY), $9), 2))\"));\n\n    \r\n    checkDateRange(f,\n        f.and(f.ge(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(11)),\n            f.eq(f.exDayTs, f.literal(2))),\n        \r\n        is(\"AND(>=($9, 2010-01-01 00:00:00), =(EXTRACT(FLAG(MONTH), $9), 11),\"\n            + \" =(EXTRACT(FLAG(DAY), $9), 2))\"));\n\n    \r\n    checkDateRange(f,\n        f.and(f.le(f.exYearTs, f.literal(2010)),\n            f.ge(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(5))),\n        is(\"AND(<($9, 2011-01-01 00:00:00), AND(>=($9, 2010-01-01 00:00:00),\"\n            + \" <($9, 2011-01-01 00:00:00)), AND(>=($9, 2010-05-01 00:00:00),\"\n            + \" <($9, 2010-06-01 00:00:00)))\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"B"},{"authorDate":"2018-01-11 04:54:26","commitOrder":1,"curCode":"  @Test public void testExtractRewriteMultipleOperands() {\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f,\n        f.and(f.eq(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(10)),\n            f.eq(f.exMonthD, f.literal(5))),\n        is(\"AND(AND(>=($9, 2010-01-01 00:00:00), <($9, 2011-01-01 00:00:00)),\"\n            + \" AND(>=($9, 2010-10-01 00:00:00), <($9, 2010-11-01 00:00:00)),\"\n            + \" =(EXTRACT(FLAG(MONTH), $8), 5))\"));\n\n    checkDateRange(f,\n        f.and(f.eq(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(10)),\n            f.eq(f.exYearD, f.literal(2011)),\n            f.eq(f.exMonthD, f.literal(5))),\n        is(\"AND(AND(>=($9, 2010-01-01 00:00:00), <($9, 2011-01-01 00:00:00)),\"\n            + \" AND(>=($9, 2010-10-01 00:00:00), <($9, 2010-11-01 00:00:00)),\"\n            + \" AND(>=($8, 2011-01-01), <($8, 2012-01-01)), AND(>=($8, 2011-05-01),\"\n            + \" <($8, 2011-06-01)))\"));\n  }\n","date":"2018-01-12 11:53:24","endLine":408,"groupId":"13163","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractRewriteMultipleOperands","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f0/439aba565b3e6275cd74db3ba741367f9c3012.src","preCode":"  @Test public void testExtractRewriteMultipleOperands() {\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f,\n        f.and(f.eq(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(10)),\n            f.eq(f.exMonthD, f.literal(5))),\n        is(\"AND(AND(>=($9, 2010-01-01 00:00:00), <($9, 2011-01-01 00:00:00)),\"\n            + \" AND(>=($9, 2010-10-01 00:00:00), <($9, 2010-11-01 00:00:00)),\"\n            + \" =(EXTRACT(FLAG(MONTH), $8), 5))\"));\n\n    checkDateRange(f,\n        f.and(f.eq(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(10)),\n            f.eq(f.exYearD, f.literal(2011)),\n            f.eq(f.exMonthD, f.literal(5))),\n        is(\"AND(AND(>=($9, 2010-01-01 00:00:00), <($9, 2011-01-01 00:00:00)),\"\n            + \" AND(>=($9, 2010-10-01 00:00:00), <($9, 2010-11-01 00:00:00)),\"\n            + \" AND(>=($8, 2011-01-01), <($8, 2012-01-01)), AND(>=($8, 2011-05-01),\"\n            + \" <($8, 2011-06-01)))\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"B"}],"commitId":"fa19580ecfe404b75fcb6c9c174cfe9da73d2db8","commitMessage":"@@@[CALCITE-2090] Convert FLOOR and CEIL into time ranges (Nishant Bangarwa)\n\nAdd test for multiple operands.\n\nAllow RexLiteral.getValueAs(Calendar) on TIMESTAMP_WITH_LOCAL_TIME_ZONE\nliterals.\n\nClose apache/calcite#603\n","date":"2018-01-12 11:53:24","modifiedFileCount":"4","status":"B","submitter":"Nishant"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testUnboundYearExtractRewrite() {\n    final Fixture2 f = new Fixture2();\n    \r\n    checkDateRange(f,\n        f.and(f.le(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(11)),\n            f.eq(f.exDayTs, f.literal(2))),\n        is(\"AND(<($9, 2011-01-01 00:00:00), =(EXTRACT(FLAG(MONTH), $9), 11),\"\n            + \" =(EXTRACT(FLAG(DAY), $9), 2))\"));\n\n    \r\n    checkDateRange(f,\n        f.and(f.ge(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(11)),\n            f.eq(f.exDayTs, f.literal(2))),\n        \r\n        is(\"AND(>=($9, 2010-01-01 00:00:00), =(EXTRACT(FLAG(MONTH), $9), 11),\"\n            + \" =(EXTRACT(FLAG(DAY), $9), 2))\"));\n\n    \r\n    checkDateRange(f,\n        f.and(f.le(f.exYearTs, f.literal(2010)),\n            f.ge(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(5))),\n        is(\"AND(<($9, 2011-01-01 00:00:00), AND(>=($9, 2010-01-01 00:00:00),\"\n            + \" <($9, 2011-01-01 00:00:00)), AND(>=($9, 2010-05-01 00:00:00),\"\n            + \" <($9, 2010-06-01 00:00:00)))\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":388,"groupId":"101502","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnboundYearExtractRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/29288bd53b9dc06551209ba551f2b4be514394.src","preCode":"  @Test public void testUnboundYearExtractRewrite() {\n    final Fixture2 f = new Fixture2();\n    \r\n    checkDateRange(f,\n        f.and(f.le(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(11)),\n            f.eq(f.exDayTs, f.literal(2))),\n        is(\"AND(<($9, 2011-01-01 00:00:00), =(EXTRACT(FLAG(MONTH), $9), 11),\"\n            + \" =(EXTRACT(FLAG(DAY), $9), 2))\"));\n\n    \r\n    checkDateRange(f,\n        f.and(f.ge(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(11)),\n            f.eq(f.exDayTs, f.literal(2))),\n        \r\n        is(\"AND(>=($9, 2010-01-01 00:00:00), =(EXTRACT(FLAG(MONTH), $9), 11),\"\n            + \" =(EXTRACT(FLAG(DAY), $9), 2))\"));\n\n    \r\n    checkDateRange(f,\n        f.and(f.le(f.exYearTs, f.literal(2010)),\n            f.ge(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(5))),\n        is(\"AND(<($9, 2011-01-01 00:00:00), AND(>=($9, 2010-01-01 00:00:00),\"\n            + \" <($9, 2011-01-01 00:00:00)), AND(>=($9, 2010-05-01 00:00:00),\"\n            + \" <($9, 2010-06-01 00:00:00)))\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testExtractRewriteMultipleOperands() {\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f,\n        f.and(f.eq(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(10)),\n            f.eq(f.exMonthD, f.literal(5))),\n        is(\"AND(AND(>=($9, 2010-01-01 00:00:00), <($9, 2011-01-01 00:00:00)),\"\n            + \" AND(>=($9, 2010-10-01 00:00:00), <($9, 2010-11-01 00:00:00)),\"\n            + \" =(EXTRACT(FLAG(MONTH), $8), 5))\"));\n\n    checkDateRange(f,\n        f.and(f.eq(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(10)),\n            f.eq(f.exYearD, f.literal(2011)),\n            f.eq(f.exMonthD, f.literal(5))),\n        is(\"AND(AND(>=($9, 2010-01-01 00:00:00), <($9, 2011-01-01 00:00:00)),\"\n            + \" AND(>=($9, 2010-10-01 00:00:00), <($9, 2010-11-01 00:00:00)),\"\n            + \" AND(>=($8, 2011-01-01), <($8, 2012-01-01)), AND(>=($8, 2011-05-01),\"\n            + \" <($8, 2011-06-01)))\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":410,"groupId":"101502","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractRewriteMultipleOperands","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/29288bd53b9dc06551209ba551f2b4be514394.src","preCode":"  @Test public void testExtractRewriteMultipleOperands() {\n    final Fixture2 f = new Fixture2();\n    checkDateRange(f,\n        f.and(f.eq(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(10)),\n            f.eq(f.exMonthD, f.literal(5))),\n        is(\"AND(AND(>=($9, 2010-01-01 00:00:00), <($9, 2011-01-01 00:00:00)),\"\n            + \" AND(>=($9, 2010-10-01 00:00:00), <($9, 2010-11-01 00:00:00)),\"\n            + \" =(EXTRACT(FLAG(MONTH), $8), 5))\"));\n\n    checkDateRange(f,\n        f.and(f.eq(f.exYearTs, f.literal(2010)),\n            f.eq(f.exMonthTs, f.literal(10)),\n            f.eq(f.exYearD, f.literal(2011)),\n            f.eq(f.exMonthD, f.literal(5))),\n        is(\"AND(AND(>=($9, 2010-01-01 00:00:00), <($9, 2011-01-01 00:00:00)),\"\n            + \" AND(>=($9, 2010-10-01 00:00:00), <($9, 2010-11-01 00:00:00)),\"\n            + \" AND(>=($8, 2011-01-01), <($8, 2012-01-01)), AND(>=($8, 2011-05-01),\"\n            + \" <($8, 2011-06-01)))\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/DateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":391,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
