[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public static <T> Queryable<T> skipWhileN(final Queryable<T> source,\n      final FunctionExpression<Predicate2<T, Integer>> predicate) {\n    return new BaseQueryable<T>(source.getProvider(), source.getElementType(),\n        source.getExpression()) {\n      public Enumerator<T> enumerator() {\n        return new EnumerableDefaults.SkipWhileEnumerator<T>(\n            source.enumerator(), predicate.getFunction());\n      }\n    };\n  }\n","date":"2014-11-14 09:39:34","endLine":900,"groupId":"16706","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"skipWhileN","params":"(finalQueryable<T>source@finalFunctionExpression<Predicate2<T@Integer>>predicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e8/d1d7498e8caad60b72e5eee8dd40582ae4ee77.src","preCode":"  public static <T> Queryable<T> skipWhileN(final Queryable<T> source,\n      final FunctionExpression<Predicate2<T, Integer>> predicate) {\n    return new BaseQueryable<T>(source.getProvider(), source.getElementType(),\n        source.getExpression()) {\n      public Enumerator<T> enumerator() {\n        return new EnumerableDefaults.SkipWhileEnumerator<T>(\n            source.enumerator(), predicate.getFunction());\n      }\n    };\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":891,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public static <T> Queryable<T> takeWhileN(final Queryable<T> source,\n      final FunctionExpression<Predicate2<T, Integer>> predicate) {\n    return new BaseQueryable<T>(source.getProvider(), source.getElementType(),\n        source.getExpression()) {\n      public Enumerator<T> enumerator() {\n        return new EnumerableDefaults.TakeWhileEnumerator<T>(\n            source.enumerator(), predicate.getFunction());\n      }\n    };\n  }\n","date":"2014-11-14 09:39:34","endLine":1034,"groupId":"16706","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"takeWhileN","params":"(finalQueryable<T>source@finalFunctionExpression<Predicate2<T@Integer>>predicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e8/d1d7498e8caad60b72e5eee8dd40582ae4ee77.src","preCode":"  public static <T> Queryable<T> takeWhileN(final Queryable<T> source,\n      final FunctionExpression<Predicate2<T, Integer>> predicate) {\n    return new BaseQueryable<T>(source.getProvider(), source.getElementType(),\n        source.getExpression()) {\n      public Enumerator<T> enumerator() {\n        return new EnumerableDefaults.TakeWhileEnumerator<T>(\n            source.enumerator(), predicate.getFunction());\n      }\n    };\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1025,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2018-09-16 20:24:07","codes":[{"authorDate":"2018-09-16 20:24:07","commitOrder":2,"curCode":"  public static <T> Queryable<T> skipWhileN(final Queryable<T> source,\n      final FunctionExpression<Predicate2<T, Integer>> predicate) {\n    return new BaseQueryable<T>(source.getProvider(), source.getElementType(),\n        source.getExpression()) {\n      public Enumerator<T> enumerator() {\n        return new EnumerableDefaults.SkipWhileEnumerator<>(\n            source.enumerator(), predicate.getFunction());\n      }\n    };\n  }\n","date":"2018-09-20 16:51:04","endLine":918,"groupId":"16706","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"skipWhileN","params":"(finalQueryable<T>source@finalFunctionExpression<Predicate2<T@Integer>>predicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/19/b1892f26437e45ebbbc52d8415220d73b686f4.src","preCode":"  public static <T> Queryable<T> skipWhileN(final Queryable<T> source,\n      final FunctionExpression<Predicate2<T, Integer>> predicate) {\n    return new BaseQueryable<T>(source.getProvider(), source.getElementType(),\n        source.getExpression()) {\n      public Enumerator<T> enumerator() {\n        return new EnumerableDefaults.SkipWhileEnumerator<T>(\n            source.enumerator(), predicate.getFunction());\n      }\n    };\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":909,"status":"M"},{"authorDate":"2018-09-16 20:24:07","commitOrder":2,"curCode":"  public static <T> Queryable<T> takeWhileN(final Queryable<T> source,\n      final FunctionExpression<Predicate2<T, Integer>> predicate) {\n    return new BaseQueryable<T>(source.getProvider(), source.getElementType(),\n        source.getExpression()) {\n      public Enumerator<T> enumerator() {\n        return new EnumerableDefaults.TakeWhileEnumerator<>(\n            source.enumerator(), predicate.getFunction());\n      }\n    };\n  }\n","date":"2018-09-20 16:51:04","endLine":1053,"groupId":"16706","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"takeWhileN","params":"(finalQueryable<T>source@finalFunctionExpression<Predicate2<T@Integer>>predicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/19/b1892f26437e45ebbbc52d8415220d73b686f4.src","preCode":"  public static <T> Queryable<T> takeWhileN(final Queryable<T> source,\n      final FunctionExpression<Predicate2<T, Integer>> predicate) {\n    return new BaseQueryable<T>(source.getProvider(), source.getElementType(),\n        source.getExpression()) {\n      public Enumerator<T> enumerator() {\n        return new EnumerableDefaults.TakeWhileEnumerator<T>(\n            source.enumerator(), predicate.getFunction());\n      }\n    };\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1044,"status":"M"}],"commitId":"295ab13e8338bdd0e0c29e051907371c9b2929aa","commitMessage":"@@@Apply small refactorings to Calcite codebase (Java 5.  Java 7.  Java 8)\n\nUse Objects.equals when possible\nReplace for with foreach in Mappings\nUse Java 7 diamond operator to reduce code verbosity\nCollapse identical catch blocks to multi-catch\nUse Double/Float/Long/Boolean hashCode from Java 8\nRemove unnecessary substring call arguments\nFix sqlTypeName -> SqlTypeName typo\nMake floorKey/ceilingKey non-static so their use in NameMap makes more sense\nNameMap uses COMPARATOR.floorKey(name) which is a bit weird when floorKey is static\nAdd @SafeVarargs to methods that are obviously safe\nReplace anonymous types with Java 8 lambdas\nUse Collection#removeIf when possible\nUse Integer.compare when possible\nSuppress AssertWithSideEffects warnings\nAdd missing check to Permutation#isValid\nPermutation#isValid had occurCount[target] != 0 check.  however the array was never updated.  so the check was useless.\nRemove duplicate keys from Strong#MAP\nReplace remove+add with set in ReduceExpressionsRule\nRemove redundant initializers\nMove dead code inside if (false) branch in org.apache.calcite.plan.volcano.RelSubset#add\nRevert removal of UtilTest#testHash\n\ncloses #834\n","date":"2018-09-20 16:51:04","modifiedFileCount":"130","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  public static <T> Queryable<T> skipWhileN(final Queryable<T> source,\n      final FunctionExpression<Predicate2<T, Integer>> predicate) {\n    return new BaseQueryable<T>(source.getProvider(), source.getElementType(),\n        source.getExpression()) {\n      @Override public Enumerator<T> enumerator() {\n        return new EnumerableDefaults.SkipWhileEnumerator<>(\n            source.enumerator(), predicate.getFunction());\n      }\n    };\n  }\n","date":"2020-10-07 05:42:47","endLine":918,"groupId":"10135","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"skipWhileN","params":"(finalQueryable<T>source@finalFunctionExpression<Predicate2<T@Integer>>predicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/f5a06942927cba1c52c95bb9d8af8653b05118.src","preCode":"  public static <T> Queryable<T> skipWhileN(final Queryable<T> source,\n      final FunctionExpression<Predicate2<T, Integer>> predicate) {\n    return new BaseQueryable<T>(source.getProvider(), source.getElementType(),\n        source.getExpression()) {\n      public Enumerator<T> enumerator() {\n        return new EnumerableDefaults.SkipWhileEnumerator<>(\n            source.enumerator(), predicate.getFunction());\n      }\n    };\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":909,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  public static <T> Queryable<T> takeWhileN(final Queryable<T> source,\n      final FunctionExpression<Predicate2<T, Integer>> predicate) {\n    return new BaseQueryable<T>(source.getProvider(), source.getElementType(),\n        source.getExpression()) {\n      @Override public Enumerator<T> enumerator() {\n        return new EnumerableDefaults.TakeWhileEnumerator<>(\n            source.enumerator(), predicate.getFunction());\n      }\n    };\n  }\n","date":"2020-10-07 05:42:47","endLine":1053,"groupId":"10135","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"takeWhileN","params":"(finalQueryable<T>source@finalFunctionExpression<Predicate2<T@Integer>>predicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/f5a06942927cba1c52c95bb9d8af8653b05118.src","preCode":"  public static <T> Queryable<T> takeWhileN(final Queryable<T> source,\n      final FunctionExpression<Predicate2<T, Integer>> predicate) {\n    return new BaseQueryable<T>(source.getProvider(), source.getElementType(),\n        source.getExpression()) {\n      public Enumerator<T> enumerator() {\n        return new EnumerableDefaults.TakeWhileEnumerator<>(\n            source.enumerator(), predicate.getFunction());\n      }\n    };\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1044,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
