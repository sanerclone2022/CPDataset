[{"authorTime":"2016-09-27 15:44:32","codes":[{"authorDate":"2016-09-27 15:44:32","commitOrder":1,"curCode":"  @Test public void testAccessNonExistKeyFromNestedMap() throws Exception {\n    Connection connection = setupConnectionWithNestedTable();\n\n    final Statement statement = connection.createStatement();\n\n    \r\n    final String sql = \"select \\\"ID\\\", \\\"MAPFIELD\\\",\"\n        + \" \\\"NESTEDMAPFIELD\\\", \\\"ARRAYFIELD\\\" \"\n        + \"from \\\"s\\\".\\\"nested\\\" \"\n        + \"where \\\"NESTEDMAPFIELD\\\"['b']['c'] = 4\";\n    final ResultSet resultSet = statement.executeQuery(sql);\n    final List<String> resultStrings = CalciteAssert.toList(resultSet);\n    assertThat(resultStrings.size(), is(0));\n  }\n","date":"2016-09-30 03:25:47","endLine":104,"groupId":"6212","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAccessNonExistKeyFromNestedMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/19aeb83275f45cd2a770c4293ac36b7c52cda0.src","preCode":"  @Test public void testAccessNonExistKeyFromNestedMap() throws Exception {\n    Connection connection = setupConnectionWithNestedTable();\n\n    final Statement statement = connection.createStatement();\n\n    \r\n    final String sql = \"select \\\"ID\\\", \\\"MAPFIELD\\\",\"\n        + \" \\\"NESTEDMAPFIELD\\\", \\\"ARRAYFIELD\\\" \"\n        + \"from \\\"s\\\".\\\"nested\\\" \"\n        + \"where \\\"NESTEDMAPFIELD\\\"['b']['c'] = 4\";\n    final ResultSet resultSet = statement.executeQuery(sql);\n    final List<String> resultStrings = CalciteAssert.toList(resultSet);\n    assertThat(resultStrings.size(), is(0));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/CollectionTypeTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2016-09-27 15:44:32","commitOrder":1,"curCode":"  @Test public void testAccessNonExistKeyFromNestedMapWithAnyType() throws Exception {\n    Connection connection = setupConnectionWithNestedTable();\n\n    final Statement statement = connection.createStatement();\n\n    \r\n    final String sql = \"select \\\"ID\\\", \\\"MAPFIELD\\\",\"\n        + \" \\\"NESTEDMAPFIELD\\\", \\\"ARRAYFIELD\\\" \"\n        + \"from \\\"s\\\".\\\"nested\\\" \"\n        + \"where CAST(\\\"NESTEDMAPFIELD\\\"['b']['c'] AS INTEGER) = 4\";\n    final ResultSet resultSet = statement.executeQuery(sql);\n    final List<String> resultStrings = CalciteAssert.toList(resultSet);\n    assertThat(resultStrings.size(), is(0));\n  }\n","date":"2016-09-30 03:25:47","endLine":219,"groupId":"6212","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessNonExistKeyFromNestedMapWithAnyType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/19aeb83275f45cd2a770c4293ac36b7c52cda0.src","preCode":"  @Test public void testAccessNonExistKeyFromNestedMapWithAnyType() throws Exception {\n    Connection connection = setupConnectionWithNestedTable();\n\n    final Statement statement = connection.createStatement();\n\n    \r\n    final String sql = \"select \\\"ID\\\", \\\"MAPFIELD\\\",\"\n        + \" \\\"NESTEDMAPFIELD\\\", \\\"ARRAYFIELD\\\" \"\n        + \"from \\\"s\\\".\\\"nested\\\" \"\n        + \"where CAST(\\\"NESTEDMAPFIELD\\\"['b']['c'] AS INTEGER) = 4\";\n    final ResultSet resultSet = statement.executeQuery(sql);\n    final List<String> resultStrings = CalciteAssert.toList(resultSet);\n    assertThat(resultStrings.size(), is(0));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/CollectionTypeTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"B"}],"commitId":"963876bbbf4e9da2d0ea7687b9ed10ca7e9172c4","commitMessage":"@@@[CALCITE-1386] ITEM operator ignores the value type of the collection.  assigns to Object variable (Jungtaek Lim)\n\n* Modify MethodImplementor to cast return value to desired return type\n  when necessary\n* Change ItemImplementor to use NullPolicy.ANY since ITEM can still\n  return null even though both operands are not null\n* Fix Types.castIfNecessary to handle RecordType as an exceptional\n  case (can't be converted to Class)\n* Change Csv tests to test its behavior\n* Address Array / Map type to be nullable\n* Address unit tests\n\nClose apache/calcite#283\n","date":"2016-09-30 03:25:47","modifiedFileCount":"9","status":"B","submitter":"Jungtaek Lim"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testAccessNonExistKeyFromNestedMap() throws Exception {\n    Connection connection = setupConnectionWithNestedTable();\n\n    final Statement statement = connection.createStatement();\n\n    \r\n    final String sql = \"select \\\"ID\\\", \\\"MAPFIELD\\\",\"\n        + \" \\\"NESTEDMAPFIELD\\\", \\\"ARRAYFIELD\\\" \"\n        + \"from \\\"s\\\".\\\"nested\\\" \"\n        + \"where \\\"NESTEDMAPFIELD\\\"['b']['c'] = 4\";\n    final ResultSet resultSet = statement.executeQuery(sql);\n    final List<String> resultStrings = CalciteAssert.toList(resultSet);\n    assertThat(resultStrings.size(), is(0));\n  }\n","date":"2020-04-06 04:57:49","endLine":107,"groupId":"101376","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAccessNonExistKeyFromNestedMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/5a69a31b8ac230d7825c76ad72c85f49331902.src","preCode":"  @Test public void testAccessNonExistKeyFromNestedMap() throws Exception {\n    Connection connection = setupConnectionWithNestedTable();\n\n    final Statement statement = connection.createStatement();\n\n    \r\n    final String sql = \"select \\\"ID\\\", \\\"MAPFIELD\\\",\"\n        + \" \\\"NESTEDMAPFIELD\\\", \\\"ARRAYFIELD\\\" \"\n        + \"from \\\"s\\\".\\\"nested\\\" \"\n        + \"where \\\"NESTEDMAPFIELD\\\"['b']['c'] = 4\";\n    final ResultSet resultSet = statement.executeQuery(sql);\n    final List<String> resultStrings = CalciteAssert.toList(resultSet);\n    assertThat(resultStrings.size(), is(0));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/CollectionTypeTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testAccessNonExistKeyFromNestedMapWithAnyType() throws Exception {\n    Connection connection = setupConnectionWithNestedTable();\n\n    final Statement statement = connection.createStatement();\n\n    \r\n    final String sql = \"select \\\"ID\\\", \\\"MAPFIELD\\\",\"\n        + \" \\\"NESTEDMAPFIELD\\\", \\\"ARRAYFIELD\\\" \"\n        + \"from \\\"s\\\".\\\"nested\\\" \"\n        + \"where CAST(\\\"NESTEDMAPFIELD\\\"['b']['c'] AS INTEGER) = 4\";\n    final ResultSet resultSet = statement.executeQuery(sql);\n    final List<String> resultStrings = CalciteAssert.toList(resultSet);\n    assertThat(resultStrings.size(), is(0));\n  }\n","date":"2020-04-06 04:57:49","endLine":248,"groupId":"101376","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessNonExistKeyFromNestedMapWithAnyType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/5a69a31b8ac230d7825c76ad72c85f49331902.src","preCode":"  @Test public void testAccessNonExistKeyFromNestedMapWithAnyType() throws Exception {\n    Connection connection = setupConnectionWithNestedTable();\n\n    final Statement statement = connection.createStatement();\n\n    \r\n    final String sql = \"select \\\"ID\\\", \\\"MAPFIELD\\\",\"\n        + \" \\\"NESTEDMAPFIELD\\\", \\\"ARRAYFIELD\\\" \"\n        + \"from \\\"s\\\".\\\"nested\\\" \"\n        + \"where CAST(\\\"NESTEDMAPFIELD\\\"['b']['c'] AS INTEGER) = 4\";\n    final ResultSet resultSet = statement.executeQuery(sql);\n    final List<String> resultStrings = CalciteAssert.toList(resultSet);\n    assertThat(resultStrings.size(), is(0));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/CollectionTypeTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
