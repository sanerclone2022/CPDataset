[{"authorTime":"2018-09-19 10:53:24","codes":[{"authorDate":"2016-01-28 06:43:50","commitOrder":6,"curCode":"    public RelNode convert(RelNode rel) {\n      final LogicalAggregate agg = (LogicalAggregate) rel;\n      final RelTraitSet traitSet =\n          agg.getTraitSet().replace(out);\n      try {\n        return new MongoAggregate(\n            rel.getCluster(),\n            traitSet,\n            convert(agg.getInput(), traitSet.simplify()),\n            agg.indicator,\n            agg.getGroupSet(),\n            agg.getGroupSets(),\n            agg.getAggCallList());\n      } catch (InvalidRelException e) {\n        LOGGER.warn(e.toString());\n        return null;\n      }\n    }\n","date":"2016-01-28 07:59:10","endLine":525,"groupId":"4287","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2f/4bbefd575e1a21f708f4434e99ef111c19c8cf.src","preCode":"    public RelNode convert(RelNode rel) {\n      final LogicalAggregate agg = (LogicalAggregate) rel;\n      final RelTraitSet traitSet =\n          agg.getTraitSet().replace(out);\n      try {\n        return new MongoAggregate(\n            rel.getCluster(),\n            traitSet,\n            convert(agg.getInput(), traitSet.simplify()),\n            agg.indicator,\n            agg.getGroupSet(),\n            agg.getGroupSets(),\n            agg.getAggCallList());\n      } catch (InvalidRelException e) {\n        LOGGER.warn(e.toString());\n        return null;\n      }\n    }\n","realPath":"mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":508,"status":"NB"},{"authorDate":"2018-09-19 10:53:24","commitOrder":6,"curCode":"    public RelNode convert(RelNode rel) {\n      final LogicalAggregate agg = (LogicalAggregate) rel;\n      final RelTraitSet traitSet = agg.getTraitSet().replace(out);\n      try {\n        return new ElasticsearchAggregate(\n            rel.getCluster(),\n            traitSet,\n            convert(agg.getInput(), traitSet.simplify()),\n            agg.indicator,\n            agg.getGroupSet(),\n            agg.getGroupSets(),\n            agg.getAggCallList());\n      } catch (InvalidRelException e) {\n        return null;\n      }\n    }\n","date":"2018-09-19 10:53:24","endLine":249,"groupId":"4287","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/42ddd0e211122e29b10b15089fa822340fec9e.src","preCode":"    public RelNode convert(RelNode rel) {\n      final LogicalAggregate agg = (LogicalAggregate) rel;\n      final RelTraitSet traitSet = agg.getTraitSet().replace(out);\n      try {\n        return new ElasticsearchAggregate(\n            rel.getCluster(),\n            traitSet,\n            convert(agg.getInput(), traitSet.simplify()),\n            agg.indicator,\n            agg.getGroupSet(),\n            agg.getGroupSets(),\n            agg.getAggCallList());\n      } catch (InvalidRelException e) {\n        return null;\n      }\n    }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"B"}],"commitId":"79af1c9ba735286653697deed3ff849b7c921fe4","commitMessage":"@@@[CALCITE-2528] Support Aggregates in ElasticSearch adapter (Andrei Sereda)\n\nAggregate functions (count/sum/min/max/avg) are pushed down to ES.\n\nAdd ElasticsearchAggregate relational expression to convert SQL into native Elastic aggregations (value_count.  min.  max etc.).\nEnhance ElasticsearchTable to prepare correct aggregate ES JSON query.\n\nCreate special classes to parse recursively elastic aggregation response or buckets (located in ElasticJson). They're inspired from existing Elastic high-level client source.\n\nFor tests.  make Json input more human friendly. Single quotes are accepted and fields can be unquoted (unless\nthey contain special characters). Also field with dots 'a.b.c' are automatically auto-expanded. This reduces JSON noise.\n\nFix single projections which previously returned map (see [CALCITE-2485])\n\nClose apache/calcite#801\nClose apache/calcite#822\n","date":"2018-09-19 10:53:24","modifiedFileCount":"20","status":"M","submitter":"Andrei Sereda"},{"authorTime":"2019-06-01 11:36:14","codes":[{"authorDate":"2019-06-01 11:36:14","commitOrder":7,"curCode":"    public RelNode convert(RelNode rel) {\n      final LogicalAggregate agg = (LogicalAggregate) rel;\n      final RelTraitSet traitSet =\n          agg.getTraitSet().replace(out);\n      try {\n        return new MongoAggregate(\n            rel.getCluster(),\n            traitSet,\n            convert(agg.getInput(), traitSet.simplify()),\n            agg.getGroupSet(),\n            agg.getGroupSets(),\n            agg.getAggCallList());\n      } catch (InvalidRelException e) {\n        LOGGER.warn(e.toString());\n        return null;\n      }\n    }\n","date":"2019-06-02 07:22:34","endLine":523,"groupId":"15727","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/55/84791730ff37430c98f3c003bf69f276e89c69.src","preCode":"    public RelNode convert(RelNode rel) {\n      final LogicalAggregate agg = (LogicalAggregate) rel;\n      final RelTraitSet traitSet =\n          agg.getTraitSet().replace(out);\n      try {\n        return new MongoAggregate(\n            rel.getCluster(),\n            traitSet,\n            convert(agg.getInput(), traitSet.simplify()),\n            agg.indicator,\n            agg.getGroupSet(),\n            agg.getGroupSets(),\n            agg.getAggCallList());\n      } catch (InvalidRelException e) {\n        LOGGER.warn(e.toString());\n        return null;\n      }\n    }\n","realPath":"mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"M"},{"authorDate":"2019-06-01 11:36:14","commitOrder":7,"curCode":"    public RelNode convert(RelNode rel) {\n      final LogicalAggregate agg = (LogicalAggregate) rel;\n      final RelTraitSet traitSet = agg.getTraitSet().replace(out);\n      try {\n        return new ElasticsearchAggregate(\n            rel.getCluster(),\n            traitSet,\n            convert(agg.getInput(), traitSet.simplify()),\n            agg.getGroupSet(),\n            agg.getGroupSets(),\n            agg.getAggCallList());\n      } catch (InvalidRelException e) {\n        return null;\n      }\n    }\n","date":"2019-06-02 07:22:34","endLine":278,"groupId":"15727","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5a/d76df119f95b710bbc22a4c74a19a57cf3cdf3.src","preCode":"    public RelNode convert(RelNode rel) {\n      final LogicalAggregate agg = (LogicalAggregate) rel;\n      final RelTraitSet traitSet = agg.getTraitSet().replace(out);\n      try {\n        return new ElasticsearchAggregate(\n            rel.getCluster(),\n            traitSet,\n            convert(agg.getInput(), traitSet.simplify()),\n            agg.indicator,\n            agg.getGroupSet(),\n            agg.getGroupSets(),\n            agg.getAggCallList());\n      } catch (InvalidRelException e) {\n        return null;\n      }\n    }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"}],"commitId":"b0e83c469ff57257c1ea621ff943ca76f626a9b7","commitMessage":"@@@Following [CALCITE-2944] remove internal uses of Aggregate.indicator\n\nThese were generating deprecation warnings.\n","date":"2019-06-02 07:22:34","modifiedFileCount":"31","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-07-09 05:31:40","commitOrder":8,"curCode":"    @Override public RelNode convert(RelNode rel) {\n      final LogicalAggregate agg = (LogicalAggregate) rel;\n      final RelTraitSet traitSet =\n          agg.getTraitSet().replace(out);\n      try {\n        return new MongoAggregate(\n            rel.getCluster(),\n            traitSet,\n            convert(agg.getInput(), traitSet.simplify()),\n            agg.getGroupSet(),\n            agg.getGroupSets(),\n            agg.getAggCallList());\n      } catch (InvalidRelException e) {\n        LOGGER.warn(e.toString());\n        return null;\n      }\n    }\n","date":"2020-07-29 02:27:24","endLine":521,"groupId":"12178","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/83/abe1ff5b33f4cb3b85c044b499eeb46678e736.src","preCode":"    public RelNode convert(RelNode rel) {\n      final LogicalAggregate agg = (LogicalAggregate) rel;\n      final RelTraitSet traitSet =\n          agg.getTraitSet().replace(out);\n      try {\n        return new MongoAggregate(\n            rel.getCluster(),\n            traitSet,\n            convert(agg.getInput(), traitSet.simplify()),\n            agg.getGroupSet(),\n            agg.getGroupSets(),\n            agg.getAggCallList());\n      } catch (InvalidRelException e) {\n        LOGGER.warn(e.toString());\n        return null;\n      }\n    }\n","realPath":"mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":505,"status":"M"},{"authorDate":"2020-07-09 05:31:40","commitOrder":8,"curCode":"    @Override public RelNode convert(RelNode rel) {\n      final LogicalAggregate agg = (LogicalAggregate) rel;\n      final RelTraitSet traitSet = agg.getTraitSet().replace(out);\n      try {\n        return new ElasticsearchAggregate(\n            rel.getCluster(),\n            traitSet,\n            convert(agg.getInput(), traitSet.simplify()),\n            agg.getGroupSet(),\n            agg.getGroupSets(),\n            agg.getAggCallList());\n      } catch (InvalidRelException e) {\n        return null;\n      }\n    }\n","date":"2020-07-29 02:27:24","endLine":272,"groupId":"12178","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a0/1f1d1725411934ead6435738ac794b58c9b0d8.src","preCode":"    public RelNode convert(RelNode rel) {\n      final LogicalAggregate agg = (LogicalAggregate) rel;\n      final RelTraitSet traitSet = agg.getTraitSet().replace(out);\n      try {\n        return new ElasticsearchAggregate(\n            rel.getCluster(),\n            traitSet,\n            convert(agg.getInput(), traitSet.simplify()),\n            agg.getGroupSet(),\n            agg.getGroupSets(),\n            agg.getAggCallList());\n      } catch (InvalidRelException e) {\n        return null;\n      }\n    }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"998cd83ebe2fcd7ff3ee565299fed6e199269715","commitMessage":"@@@[CALCITE-3923] Refactor how planner rules are parameterized\n\nCreate operands using a builder interface.  OperandBuilder.  and\ndeprecate methods RelOptRule.operand etc.\n\nThe change is backwards compatible.  in the sense that\nexisting rule constructors are deprecated but still work.\nFrom now on.  to create rules.  call RelOptRule.Config.toRule()\n(which calls the rule's (Config) constructor).\n\nSub-classes of ConverterRule are a little different.  They\ndon't need their own sub-class of Config.  You just need to\ncall Config.withRuleFactory to specify the constructor of the\nsub-class of ConverterRule.\n\nMove rule instances into holder classes such as CoreRules. \nMaterializedViewRules. Deprecate existing rule INSTANCE fields\n(to be removed in 1.25). Deprecate previous rule constructors\n(to be removed in 2.0).\n\nDescribe how to write rules in howto and tutorial.\n\nRemove rule instances marked 'deprecated.  to be removed before\n1.25'.\n\nClose apache/calcite#2024\n","date":"2020-07-29 02:27:24","modifiedFileCount":"191","status":"M","submitter":"Julian Hyde"}]
