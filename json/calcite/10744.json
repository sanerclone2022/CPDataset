[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testCastToBoolean() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkBoolean(\"cast('true' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('false' as boolean)\", Boolean.FALSE);\n    tester.checkBoolean(\"cast('  trUe' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('  fALse' as boolean)\", Boolean.FALSE);\n    tester.checkFails(\n        \"cast('unknown' as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n\n    tester.checkBoolean(\n        \"cast(cast('true' as varchar(10))  as boolean)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(cast('false' as varchar(10)) as boolean)\",\n        Boolean.FALSE);\n    tester.checkFails(\n        \"cast(cast('blah' as varchar(10)) as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","date":"2014-11-14 09:39:34","endLine":1302,"groupId":"6543","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastToBoolean","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCastToBoolean() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkBoolean(\"cast('true' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('false' as boolean)\", Boolean.FALSE);\n    tester.checkBoolean(\"cast('  trUe' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('  fALse' as boolean)\", Boolean.FALSE);\n    tester.checkFails(\n        \"cast('unknown' as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n\n    tester.checkBoolean(\n        \"cast(cast('true' as varchar(10))  as boolean)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(cast('false' as varchar(10)) as boolean)\",\n        Boolean.FALSE);\n    tester.checkFails(\n        \"cast(cast('blah' as varchar(10)) as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1281,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testOverlapsOperator() {\n    tester.setFor(SqlStdOperatorTable.OVERLAPS, VM_EXPAND);\n    if (Bug.FRG187_FIXED) {\n      tester.checkBoolean(\n          \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', interval '1' year)\",\n          Boolean.TRUE);\n      tester.checkBoolean(\n          \"(date '1-2-3', date '1-2-3') overlaps (date '4-5-6', interval '1' year)\",\n          Boolean.FALSE);\n      tester.checkBoolean(\n          \"(date '1-2-3', date '4-5-6') overlaps (date '2-2-3', date '3-4-5')\",\n          Boolean.TRUE);\n      tester.checkNull(\n          \"(cast(null as date), date '1-2-3') overlaps (date '1-2-3', interval '1' year)\");\n      tester.checkNull(\n          \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', cast(null as date))\");\n\n      tester.checkBoolean(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:3')\",\n          Boolean.TRUE);\n      tester.checkBoolean(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:2')\",\n          Boolean.FALSE);\n      tester.checkBoolean(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', interval '2' hour)\",\n          Boolean.TRUE);\n      tester.checkNull(\n          \"(time '1:2:3', cast(null as time)) overlaps (time '23:59:59', time '1:2:3')\");\n      tester.checkNull(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', cast(null as interval hour))\");\n\n      tester.checkBoolean(\n          \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n          Boolean.TRUE);\n      tester.checkBoolean(\n          \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '2-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n          Boolean.FALSE);\n      tester.checkNull(\n          \"(timestamp '1-2-3 4:5:6', cast(null as interval day) ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\");\n      tester.checkNull(\n          \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (cast(null as timestamp), interval '1 2:3:4.5' day to second)\");\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":2236,"groupId":"6883","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlapsOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testOverlapsOperator() {\n    tester.setFor(SqlStdOperatorTable.OVERLAPS, VM_EXPAND);\n    if (Bug.FRG187_FIXED) {\n      tester.checkBoolean(\n          \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', interval '1' year)\",\n          Boolean.TRUE);\n      tester.checkBoolean(\n          \"(date '1-2-3', date '1-2-3') overlaps (date '4-5-6', interval '1' year)\",\n          Boolean.FALSE);\n      tester.checkBoolean(\n          \"(date '1-2-3', date '4-5-6') overlaps (date '2-2-3', date '3-4-5')\",\n          Boolean.TRUE);\n      tester.checkNull(\n          \"(cast(null as date), date '1-2-3') overlaps (date '1-2-3', interval '1' year)\");\n      tester.checkNull(\n          \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', cast(null as date))\");\n\n      tester.checkBoolean(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:3')\",\n          Boolean.TRUE);\n      tester.checkBoolean(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:2')\",\n          Boolean.FALSE);\n      tester.checkBoolean(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', interval '2' hour)\",\n          Boolean.TRUE);\n      tester.checkNull(\n          \"(time '1:2:3', cast(null as time)) overlaps (time '23:59:59', time '1:2:3')\");\n      tester.checkNull(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', cast(null as interval hour))\");\n\n      tester.checkBoolean(\n          \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n          Boolean.TRUE);\n      tester.checkBoolean(\n          \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '2-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n          Boolean.FALSE);\n      tester.checkNull(\n          \"(timestamp '1-2-3 4:5:6', cast(null as interval day) ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\");\n      tester.checkNull(\n          \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (cast(null as timestamp), interval '1 2:3:4.5' day to second)\");\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2194,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2016-10-10 07:21:47","commitOrder":2,"curCode":"  @Test public void testCastToBoolean() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkBoolean(\"cast('true' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('false' as boolean)\", Boolean.FALSE);\n    tester.checkBoolean(\"cast('  trUe' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('  tr' || 'Ue' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('  fALse' as boolean)\", Boolean.FALSE);\n    tester.checkFails(\n        \"cast('unknown' as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n\n    tester.checkBoolean(\n        \"cast(cast('true' as varchar(10))  as boolean)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(cast('false' as varchar(10)) as boolean)\",\n        Boolean.FALSE);\n    tester.checkFails(\n        \"cast(cast('blah' as varchar(10)) as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","date":"2016-10-19 01:20:28","endLine":1442,"groupId":"1759","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastToBoolean","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/3acc604276705fd31d8ea3318bc881d0b976f7.src","preCode":"  @Test public void testCastToBoolean() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkBoolean(\"cast('true' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('false' as boolean)\", Boolean.FALSE);\n    tester.checkBoolean(\"cast('  trUe' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('  fALse' as boolean)\", Boolean.FALSE);\n    tester.checkFails(\n        \"cast('unknown' as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n\n    tester.checkBoolean(\n        \"cast(cast('true' as varchar(10))  as boolean)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(cast('false' as varchar(10)) as boolean)\",\n        Boolean.FALSE);\n    tester.checkFails(\n        \"cast(cast('blah' as varchar(10)) as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1420,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testOverlapsOperator() {\n    tester.setFor(SqlStdOperatorTable.OVERLAPS, VM_EXPAND);\n    if (Bug.FRG187_FIXED) {\n      tester.checkBoolean(\n          \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', interval '1' year)\",\n          Boolean.TRUE);\n      tester.checkBoolean(\n          \"(date '1-2-3', date '1-2-3') overlaps (date '4-5-6', interval '1' year)\",\n          Boolean.FALSE);\n      tester.checkBoolean(\n          \"(date '1-2-3', date '4-5-6') overlaps (date '2-2-3', date '3-4-5')\",\n          Boolean.TRUE);\n      tester.checkNull(\n          \"(cast(null as date), date '1-2-3') overlaps (date '1-2-3', interval '1' year)\");\n      tester.checkNull(\n          \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', cast(null as date))\");\n\n      tester.checkBoolean(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:3')\",\n          Boolean.TRUE);\n      tester.checkBoolean(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:2')\",\n          Boolean.FALSE);\n      tester.checkBoolean(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', interval '2' hour)\",\n          Boolean.TRUE);\n      tester.checkNull(\n          \"(time '1:2:3', cast(null as time)) overlaps (time '23:59:59', time '1:2:3')\");\n      tester.checkNull(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', cast(null as interval hour))\");\n\n      tester.checkBoolean(\n          \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n          Boolean.TRUE);\n      tester.checkBoolean(\n          \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '2-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n          Boolean.FALSE);\n      tester.checkNull(\n          \"(timestamp '1-2-3 4:5:6', cast(null as interval day) ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\");\n      tester.checkNull(\n          \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (cast(null as timestamp), interval '1 2:3:4.5' day to second)\");\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":2236,"groupId":"6883","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlapsOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testOverlapsOperator() {\n    tester.setFor(SqlStdOperatorTable.OVERLAPS, VM_EXPAND);\n    if (Bug.FRG187_FIXED) {\n      tester.checkBoolean(\n          \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', interval '1' year)\",\n          Boolean.TRUE);\n      tester.checkBoolean(\n          \"(date '1-2-3', date '1-2-3') overlaps (date '4-5-6', interval '1' year)\",\n          Boolean.FALSE);\n      tester.checkBoolean(\n          \"(date '1-2-3', date '4-5-6') overlaps (date '2-2-3', date '3-4-5')\",\n          Boolean.TRUE);\n      tester.checkNull(\n          \"(cast(null as date), date '1-2-3') overlaps (date '1-2-3', interval '1' year)\");\n      tester.checkNull(\n          \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', cast(null as date))\");\n\n      tester.checkBoolean(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:3')\",\n          Boolean.TRUE);\n      tester.checkBoolean(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:2')\",\n          Boolean.FALSE);\n      tester.checkBoolean(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', interval '2' hour)\",\n          Boolean.TRUE);\n      tester.checkNull(\n          \"(time '1:2:3', cast(null as time)) overlaps (time '23:59:59', time '1:2:3')\");\n      tester.checkNull(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', cast(null as interval hour))\");\n\n      tester.checkBoolean(\n          \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n          Boolean.TRUE);\n      tester.checkBoolean(\n          \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '2-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n          Boolean.FALSE);\n      tester.checkNull(\n          \"(timestamp '1-2-3 4:5:6', cast(null as interval day) ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\");\n      tester.checkNull(\n          \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (cast(null as timestamp), interval '1 2:3:4.5' day to second)\");\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2194,"status":"N"}],"commitId":"54556b82c0599012f2e7fefaae3a9868cb68f879","commitMessage":"@@@[CALCITE-1417] In RelBuilder.  simplify \"CAST(literal TO type)\" to a literal when possible\n\nThis allows us to simplify logic that the Druid adapter uses to push\ndown time ranges. For example.  CAST('2016-01-23' AS DATE) will already\nbe a DATE value.\n\nYou can turn off simplification (mainly for testing purposes) by\nsetting Hook.REL_BUILDER_SIMPLIFY. This the first time we have a\nallowed a Hook to act like a property.\n\nAdd a test case (disabled) for [CALCITE-1439].\n\nAllow QuidemTest to accept test script names as command-line\narguments.\n\nUse RexExecutor for constant reduction (although not necessarily the\nsame one that will be used later in planning).\n","date":"2016-10-19 01:20:28","modifiedFileCount":"13","status":"M","submitter":"Julian Hyde"},{"authorTime":"2017-04-20 05:46:05","codes":[{"authorDate":"2016-10-10 07:21:47","commitOrder":3,"curCode":"  @Test public void testCastToBoolean() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkBoolean(\"cast('true' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('false' as boolean)\", Boolean.FALSE);\n    tester.checkBoolean(\"cast('  trUe' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('  tr' || 'Ue' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('  fALse' as boolean)\", Boolean.FALSE);\n    tester.checkFails(\n        \"cast('unknown' as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n\n    tester.checkBoolean(\n        \"cast(cast('true' as varchar(10))  as boolean)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(cast('false' as varchar(10)) as boolean)\",\n        Boolean.FALSE);\n    tester.checkFails(\n        \"cast(cast('blah' as varchar(10)) as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","date":"2016-10-19 01:20:28","endLine":1442,"groupId":"1759","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastToBoolean","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/3acc604276705fd31d8ea3318bc881d0b976f7.src","preCode":"  @Test public void testCastToBoolean() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkBoolean(\"cast('true' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('false' as boolean)\", Boolean.FALSE);\n    tester.checkBoolean(\"cast('  trUe' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('  tr' || 'Ue' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('  fALse' as boolean)\", Boolean.FALSE);\n    tester.checkFails(\n        \"cast('unknown' as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n\n    tester.checkBoolean(\n        \"cast(cast('true' as varchar(10))  as boolean)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(cast('false' as varchar(10)) as boolean)\",\n        Boolean.FALSE);\n    tester.checkFails(\n        \"cast(cast('blah' as varchar(10)) as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1420,"status":"N"},{"authorDate":"2017-04-20 05:46:05","commitOrder":3,"curCode":"  @Test public void testOverlapsOperator() {\n    tester.setFor(SqlStdOperatorTable.OVERLAPS, VM_EXPAND);\n    tester.checkBoolean(\n        \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', interval '1' year)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"(date '1-2-3', date '1-2-3') overlaps (date '4-5-6', interval '1' year)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"(date '1-2-3', date '4-5-6') overlaps (date '2-2-3', date '3-4-5')\",\n        Boolean.TRUE);\n    tester.checkNull(\n        \"(cast(null as date), date '1-2-3') overlaps (date '1-2-3', interval '1' year)\");\n    tester.checkNull(\n        \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', cast(null as date))\");\n\n    tester.checkBoolean(\n        \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:3')\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:2')\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', interval '2' hour)\",\n        Boolean.FALSE);\n    tester.checkNull(\n        \"(time '1:2:3', cast(null as time)) overlaps (time '23:59:59', time '1:2:3')\");\n    tester.checkNull(\n        \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', cast(null as interval hour))\");\n\n    tester.checkBoolean(\n        \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '2-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n        Boolean.FALSE);\n    tester.checkNull(\n        \"(timestamp '1-2-3 4:5:6', cast(null as interval day) ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\");\n    tester.checkNull(\n        \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (cast(null as timestamp), interval '1 2:3:4.5' day to second)\");\n  }\n","date":"2017-04-27 05:21:11","endLine":2354,"groupId":"6883","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlapsOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ff/3c0e2d0a4685041f7d07c58cca274261989836.src","preCode":"  @Test public void testOverlapsOperator() {\n    tester.setFor(SqlStdOperatorTable.OVERLAPS, VM_EXPAND);\n    if (Bug.FRG187_FIXED) {\n      tester.checkBoolean(\n          \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', interval '1' year)\",\n          Boolean.TRUE);\n      tester.checkBoolean(\n          \"(date '1-2-3', date '1-2-3') overlaps (date '4-5-6', interval '1' year)\",\n          Boolean.FALSE);\n      tester.checkBoolean(\n          \"(date '1-2-3', date '4-5-6') overlaps (date '2-2-3', date '3-4-5')\",\n          Boolean.TRUE);\n      tester.checkNull(\n          \"(cast(null as date), date '1-2-3') overlaps (date '1-2-3', interval '1' year)\");\n      tester.checkNull(\n          \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', cast(null as date))\");\n\n      tester.checkBoolean(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:3')\",\n          Boolean.TRUE);\n      tester.checkBoolean(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:2')\",\n          Boolean.FALSE);\n      tester.checkBoolean(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', interval '2' hour)\",\n          Boolean.TRUE);\n      tester.checkNull(\n          \"(time '1:2:3', cast(null as time)) overlaps (time '23:59:59', time '1:2:3')\");\n      tester.checkNull(\n          \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', cast(null as interval hour))\");\n\n      tester.checkBoolean(\n          \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n          Boolean.TRUE);\n      tester.checkBoolean(\n          \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '2-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n          Boolean.FALSE);\n      tester.checkNull(\n          \"(timestamp '1-2-3 4:5:6', cast(null as interval day) ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\");\n      tester.checkNull(\n          \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (cast(null as timestamp), interval '1 2:3:4.5' day to second)\");\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2314,"status":"M"}],"commitId":"c94a080b3520a568e5452cc33ca3a443cf2f50ab","commitMessage":"@@@Fix OVERLAPS operator\n\nRefactor StandardConvertletTable.  creating methods to help create\ncalls to common operators.\n","date":"2017-04-27 05:21:11","modifiedFileCount":"3","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testCastToBoolean() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkBoolean(\"cast('true' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('false' as boolean)\", Boolean.FALSE);\n    tester.checkBoolean(\"cast('  trUe' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('  tr' || 'Ue' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('  fALse' as boolean)\", Boolean.FALSE);\n    tester.checkFails(\n        \"cast('unknown' as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n\n    tester.checkBoolean(\n        \"cast(cast('true' as varchar(10))  as boolean)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(cast('false' as varchar(10)) as boolean)\",\n        Boolean.FALSE);\n    tester.checkFails(\n        \"cast(cast('blah' as varchar(10)) as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","date":"2020-04-06 04:57:49","endLine":1584,"groupId":"10744","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastToBoolean","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testCastToBoolean() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkBoolean(\"cast('true' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('false' as boolean)\", Boolean.FALSE);\n    tester.checkBoolean(\"cast('  trUe' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('  tr' || 'Ue' as boolean)\", Boolean.TRUE);\n    tester.checkBoolean(\"cast('  fALse' as boolean)\", Boolean.FALSE);\n    tester.checkFails(\n        \"cast('unknown' as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n\n    tester.checkBoolean(\n        \"cast(cast('true' as varchar(10))  as boolean)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(cast('false' as varchar(10)) as boolean)\",\n        Boolean.FALSE);\n    tester.checkFails(\n        \"cast(cast('blah' as varchar(10)) as boolean)\", INVALID_CHAR_MESSAGE,\n        true);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1562,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testOverlapsOperator() {\n    tester.setFor(SqlStdOperatorTable.OVERLAPS, VM_EXPAND);\n    tester.checkBoolean(\n        \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', interval '1' year)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"(date '1-2-3', date '1-2-3') overlaps (date '4-5-6', interval '1' year)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"(date '1-2-3', date '4-5-6') overlaps (date '2-2-3', date '3-4-5')\",\n        Boolean.TRUE);\n    tester.checkNull(\n        \"(cast(null as date), date '1-2-3') overlaps (date '1-2-3', interval '1' year)\");\n    tester.checkNull(\n        \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', cast(null as date))\");\n\n    tester.checkBoolean(\n        \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:3')\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:2')\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', interval '2' hour)\",\n        Boolean.FALSE);\n    tester.checkNull(\n        \"(time '1:2:3', cast(null as time)) overlaps (time '23:59:59', time '1:2:3')\");\n    tester.checkNull(\n        \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', cast(null as interval hour))\");\n\n    tester.checkBoolean(\n        \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '2-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n        Boolean.FALSE);\n    tester.checkNull(\n        \"(timestamp '1-2-3 4:5:6', cast(null as interval day) ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\");\n    tester.checkNull(\n        \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (cast(null as timestamp), interval '1 2:3:4.5' day to second)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":2711,"groupId":"10744","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlapsOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testOverlapsOperator() {\n    tester.setFor(SqlStdOperatorTable.OVERLAPS, VM_EXPAND);\n    tester.checkBoolean(\n        \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', interval '1' year)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"(date '1-2-3', date '1-2-3') overlaps (date '4-5-6', interval '1' year)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"(date '1-2-3', date '4-5-6') overlaps (date '2-2-3', date '3-4-5')\",\n        Boolean.TRUE);\n    tester.checkNull(\n        \"(cast(null as date), date '1-2-3') overlaps (date '1-2-3', interval '1' year)\");\n    tester.checkNull(\n        \"(date '1-2-3', date '1-2-3') overlaps (date '1-2-3', cast(null as date))\");\n\n    tester.checkBoolean(\n        \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:3')\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', time '1:2:2')\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', interval '2' hour)\",\n        Boolean.FALSE);\n    tester.checkNull(\n        \"(time '1:2:3', cast(null as time)) overlaps (time '23:59:59', time '1:2:3')\");\n    tester.checkNull(\n        \"(time '1:2:3', interval '1' second) overlaps (time '23:59:59', cast(null as interval hour))\");\n\n    tester.checkBoolean(\n        \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (timestamp '2-2-3 4:5:6', interval '1 2:3:4.5' day to second)\",\n        Boolean.FALSE);\n    tester.checkNull(\n        \"(timestamp '1-2-3 4:5:6', cast(null as interval day) ) overlaps (timestamp '1-2-3 4:5:6', interval '1 2:3:4.5' day to second)\");\n    tester.checkNull(\n        \"(timestamp '1-2-3 4:5:6', timestamp '1-2-3 4:5:6' ) overlaps (cast(null as timestamp), interval '1 2:3:4.5' day to second)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2671,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
