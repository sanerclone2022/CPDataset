[{"authorTime":"2017-05-10 11:28:26","codes":[{"authorDate":"2017-04-14 20:58:21","commitOrder":3,"curCode":"  @Test public void testMatchRecognizePatternExpression() {\n    String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-04-25 09:26:09","endLine":638,"groupId":"10705","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognizePatternExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/03/57c6b03ccd302ede16475375714b729d3d5a3d.src","preCode":"  @Test public void testMatchRecognizePatternExpression() {\n    String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":618,"status":"NB"},{"authorDate":"2017-05-10 11:28:26","commitOrder":3,"curCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0)\"\n        + \" < PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0)\"\n        + \" > NEXT(PREV(\\\"UP\\\".\\\"net_weight\\\", 0), 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-05-16 10:33:38","endLine":1375,"groupId":"10705","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizeSubset1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/122d58b2d11db6622bcda68bf7c4777ae63219.src","preCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0)\"\n        + \" < PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0)\"\n        + \" > NEXT(PREV(\\\"UP\\\".\\\"net_weight\\\", 0), 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1352,"status":"B"}],"commitId":"7a56eb63dfbd3310d14c85270f667eb3f8fa6aa3","commitMessage":"@@@[CALCITE-1644] SUBSET sub-clause of MATCH_RECOGNIZE (Zhiqiang-He)\n\nClose apache/calcite#445\n","date":"2017-05-16 10:33:38","modifiedFileCount":"11","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2017-05-19 14:52:34","codes":[{"authorDate":"2017-05-19 14:52:34","commitOrder":4,"curCode":"  @Test public void testMatchRecognizePatternExpression() {\n    String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-05-24 02:28:41","endLine":671,"groupId":"10705","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognizePatternExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cc/fb46e7793076f00b67c96a5e27a4ed198c4878.src","preCode":"  @Test public void testMatchRecognizePatternExpression() {\n    String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":650,"status":"M"},{"authorDate":"2017-05-19 14:52:34","commitOrder":4,"curCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0)\"\n        + \" < PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0)\"\n        + \" > NEXT(PREV(\\\"UP\\\".\\\"net_weight\\\", 0), 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-05-24 02:28:41","endLine":1437,"groupId":"10705","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizeSubset1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cc/fb46e7793076f00b67c96a5e27a4ed198c4878.src","preCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0)\"\n        + \" < PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0)\"\n        + \" > NEXT(PREV(\\\"UP\\\".\\\"net_weight\\\", 0), 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1413,"status":"M"}],"commitId":"e117c10cef192ca4ab10ffec2132b7dbd34319fa","commitMessage":"@@@[CALCITE-1645] In MATCH_RECOGNIZE clause.  support ONE ROW PER MATCH and ALL ROWS PER MATCH (Zhiqiang-He)\n\nClose apache/calcite#452\n","date":"2017-05-24 02:28:41","modifiedFileCount":"9","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2017-05-19 14:52:34","codes":[{"authorDate":"2017-06-05 17:25:34","commitOrder":5,"curCode":"  @Test public void testMatchRecognizePatternExpression() {\n    String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    partition by \\\"product_class_id\\\", \\\"brand_name\\\" \\n\"\n        + \"    order by \\\"product_class_id\\\" asc, \\\"brand_name\\\" desc \\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"PARTITION BY \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n        + \"ORDER BY \\\"product_class_id\\\", \\\"brand_name\\\" DESC\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-06-09 07:08:22","endLine":771,"groupId":"2758","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognizePatternExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/16/417adb87655b377351de5a4f326e1ec630c2c7.src","preCode":"  @Test public void testMatchRecognizePatternExpression() {\n    String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"M"},{"authorDate":"2017-05-19 14:52:34","commitOrder":5,"curCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0)\"\n        + \" < PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0)\"\n        + \" > NEXT(PREV(\\\"UP\\\".\\\"net_weight\\\", 0), 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-05-24 02:28:41","endLine":1437,"groupId":"10705","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizeSubset1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cc/fb46e7793076f00b67c96a5e27a4ed198c4878.src","preCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0)\"\n        + \" < PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0)\"\n        + \" > NEXT(PREV(\\\"UP\\\".\\\"net_weight\\\", 0), 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1413,"status":"N"}],"commitId":"33873f64931470e868c1735e9eac86707a659d9e","commitMessage":"@@@[CALCITE-1646] PARTITION BY and ORDER BY sub-clauses of MATCH_RECOGNIZE (Zhiqiang-He)\n\nClose apache/calcite#468\n","date":"2017-06-09 07:08:22","modifiedFileCount":"10","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2017-07-08 15:34:11","codes":[{"authorDate":"2017-07-08 15:34:11","commitOrder":6,"curCode":"  @Test public void testMatchRecognizePatternExpression() {\n    String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    partition by \\\"product_class_id\\\", \\\"brand_name\\\" \\n\"\n        + \"    order by \\\"product_class_id\\\" asc, \\\"brand_name\\\" desc \\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"PARTITION BY \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n        + \"ORDER BY \\\"product_class_id\\\", \\\"brand_name\\\" DESC\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS \\\"DOWN\\\".\\\"net_weight\\\" < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS \\\"UP\\\".\\\"net_weight\\\" > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-07-09 01:03:23","endLine":813,"groupId":"2758","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognizePatternExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d1/a1b87038071db4c1fa0d4215de14a003278229.src","preCode":"  @Test public void testMatchRecognizePatternExpression() {\n    String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    partition by \\\"product_class_id\\\", \\\"brand_name\\\" \\n\"\n        + \"    order by \\\"product_class_id\\\" asc, \\\"brand_name\\\" desc \\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"PARTITION BY \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n        + \"ORDER BY \\\"product_class_id\\\", \\\"brand_name\\\" DESC\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":788,"status":"M"},{"authorDate":"2017-07-08 15:34:11","commitOrder":6,"curCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS \\\"DOWN\\\".\\\"net_weight\\\" < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS \\\"UP\\\".\\\"net_weight\\\" > \"\n        + \"NEXT(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-07-09 01:03:23","endLine":1583,"groupId":"10705","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizeSubset1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d1/a1b87038071db4c1fa0d4215de14a003278229.src","preCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0)\"\n        + \" < PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0)\"\n        + \" > NEXT(PREV(\\\"UP\\\".\\\"net_weight\\\", 0), 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1559,"status":"M"}],"commitId":"65d95e6792c002d70d826b049cf16a748fe3109d","commitMessage":"@@@[CALCITE-1871] Nesting LAST within PREV is not parsed correctly for MATCH_RECOGNIZE\n\nClose apache/calcite#494\n","date":"2017-07-09 01:03:23","modifiedFileCount":"3","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2017-08-15 17:19:00","codes":[{"authorDate":"2017-08-15 17:19:00","commitOrder":7,"curCode":"  @Test public void testMatchRecognizePatternExpression() {\n    String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    partition by \\\"product_class_id\\\", \\\"brand_name\\\" \\n\"\n        + \"    order by \\\"product_class_id\\\" asc, \\\"brand_name\\\" desc \\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"PARTITION BY \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n        + \"ORDER BY \\\"product_class_id\\\", \\\"brand_name\\\" DESC\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-08-30 01:11:17","endLine":1001,"groupId":"2758","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognizePatternExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b7/2edfc9de10dcc4d3e8ac90d6dfdc278900b007.src","preCode":"  @Test public void testMatchRecognizePatternExpression() {\n    String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    partition by \\\"product_class_id\\\", \\\"brand_name\\\" \\n\"\n        + \"    order by \\\"product_class_id\\\" asc, \\\"brand_name\\\" desc \\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"PARTITION BY \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n        + \"ORDER BY \\\"product_class_id\\\", \\\"brand_name\\\" DESC\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS \\\"DOWN\\\".\\\"net_weight\\\" < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS \\\"UP\\\".\\\"net_weight\\\" > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":976,"status":"M"},{"authorDate":"2017-08-15 17:19:00","commitOrder":7,"curCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"NEXT(PREV(\\\"UP\\\".\\\"net_weight\\\", 0), 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-08-30 01:11:17","endLine":1771,"groupId":"10705","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizeSubset1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b7/2edfc9de10dcc4d3e8ac90d6dfdc278900b007.src","preCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS \\\"DOWN\\\".\\\"net_weight\\\" < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS \\\"UP\\\".\\\"net_weight\\\" > \"\n        + \"NEXT(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1747,"status":"M"}],"commitId":"d3a7c0d794cb9d0079fb37999dcd0dd6992f2041","commitMessage":"@@@[CALCITE-1943] Add back NavigationExpander and NavigationReplacer in SqlValidatorImpl (Dian Fu)\n\nIt will replace clauses such as A.price with PREV(A.price.  0) and\nmakes the implementation of RexVisitor.visitPatternFieldRef(RexPatternFieldRef)\nmore unified.  Otherwise.  it is difficult to implement this method. If\nit returns the specified field.  then the navigation such as\nPREV(A.price.  1) becomes impossible; if not.  then comparisons such as\nA.price > PREV(A.price.  1) becomes meaningless.\n\nClose apache/calcite#516\n","date":"2017-08-30 01:11:17","modifiedFileCount":"3","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":8,"curCode":"  @Test void testMatchRecognizePatternExpression() {\n    String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    partition by \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n        + \"    order by \\\"product_class_id\\\" asc, \\\"brand_name\\\" desc\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"PARTITION BY \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n        + \"ORDER BY \\\"product_class_id\\\", \\\"brand_name\\\" DESC\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":3172,"groupId":"101574","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognizePatternExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testMatchRecognizePatternExpression() {\n    String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    partition by \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n        + \"    order by \\\"product_class_id\\\" asc, \\\"brand_name\\\" desc\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"PARTITION BY \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n        + \"ORDER BY \\\"product_class_id\\\", \\\"brand_name\\\" DESC\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3147,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":8,"curCode":"  @Test void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"NEXT(PREV(\\\"UP\\\".\\\"net_weight\\\", 0), 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":3945,"groupId":"101574","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizeSubset1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"NEXT(PREV(\\\"UP\\\".\\\"net_weight\\\", 0), 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3921,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
