[{"authorTime":"2016-11-23 23:31:17","codes":[{"authorDate":"2016-11-23 23:31:17","commitOrder":1,"curCode":"  @Test public void testOverRowsBetweenBoundPrecedingAndCurrent() {\n    CalciteAssert\n        .model(JdbcTest.FOODMART_MODEL)\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.POSTGRESQL)\n        .query(\"select \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" last_value(\\\"time_id\\\") over (partition by \\\"account_id\\\"\"\n            + \" order by \\\"time_id\\\" rows between 3 preceding and current row)\"\n            + \" as \\\"last_version\\\" from \\\"expense_fact\\\"\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(store_id=[$0], account_id=[$1], exp_date=[$2], \"\n            + \"time_id=[$3], category_id=[$4], currency_id=[$5], amount=[$6],\"\n            + \" last_version=[LAST_VALUE($3) OVER (PARTITION BY $1\"\n            + \" ORDER BY $3 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)])\\n\"\n            + \"    JdbcTableScan(table=[[foodmart, expense_fact]])\\n\")\n        .runs()\n        .planHasSql(\"SELECT \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" LAST_VALUE(\\\"time_id\\\") OVER (PARTITION BY \\\"account_id\\\"\"\n            + \" ORDER BY \\\"time_id\\\" ROWS BETWEEN 3 PRECEDING\"\n            + \" AND CURRENT ROW) AS \\\"last_version\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\");\n  }\n","date":"2016-11-29 00:45:43","endLine":455,"groupId":"7241","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOverRowsBetweenBoundPrecedingAndCurrent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f4/5a9b54a48c0a2e4f17b2f2db1c8fcb75b19245.src","preCode":"  @Test public void testOverRowsBetweenBoundPrecedingAndCurrent() {\n    CalciteAssert\n        .model(JdbcTest.FOODMART_MODEL)\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.POSTGRESQL)\n        .query(\"select \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" last_value(\\\"time_id\\\") over (partition by \\\"account_id\\\"\"\n            + \" order by \\\"time_id\\\" rows between 3 preceding and current row)\"\n            + \" as \\\"last_version\\\" from \\\"expense_fact\\\"\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(store_id=[$0], account_id=[$1], exp_date=[$2], \"\n            + \"time_id=[$3], category_id=[$4], currency_id=[$5], amount=[$6],\"\n            + \" last_version=[LAST_VALUE($3) OVER (PARTITION BY $1\"\n            + \" ORDER BY $3 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)])\\n\"\n            + \"    JdbcTableScan(table=[[foodmart, expense_fact]])\\n\")\n        .runs()\n        .planHasSql(\"SELECT \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" LAST_VALUE(\\\"time_id\\\") OVER (PARTITION BY \\\"account_id\\\"\"\n            + \" ORDER BY \\\"time_id\\\" ROWS BETWEEN 3 PRECEDING\"\n            + \" AND CURRENT ROW) AS \\\"last_version\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":433,"status":"B"},{"authorDate":"2016-11-23 23:31:17","commitOrder":1,"curCode":"  @Test public void testLastValueOver() {\n    CalciteAssert\n        .model(JdbcTest.FOODMART_MODEL)\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.POSTGRESQL)\n        .query(\"select \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" last_value(\\\"time_id\\\") over (partition by \\\"account_id\\\"\"\n            + \" order by \\\"time_id\\\") as \\\"last_version\\\"\"\n            + \" from \\\"expense_fact\\\"\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(store_id=[$0], account_id=[$1], exp_date=[$2],\"\n            + \" time_id=[$3], category_id=[$4], currency_id=[$5], amount=[$6],\"\n            + \" last_version=[LAST_VALUE($3) OVER (PARTITION BY $1 ORDER BY $3\"\n            + \" RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])\\n\"\n            + \"    JdbcTableScan(table=[[foodmart, expense_fact]])\\n\")\n        .runs()\n        .planHasSql(\"SELECT \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" LAST_VALUE(\\\"time_id\\\") OVER (PARTITION BY \\\"account_id\\\"\"\n            + \" ORDER BY \\\"time_id\\\" RANGE BETWEEN UNBOUNDED PRECEDING AND\"\n            + \" CURRENT ROW) AS \\\"last_version\\\"\"\n            + \"\\nFROM \\\"foodmart\\\".\\\"expense_fact\\\"\");\n  }\n","date":"2016-11-29 00:45:43","endLine":509,"groupId":"7241","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLastValueOver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f4/5a9b54a48c0a2e4f17b2f2db1c8fcb75b19245.src","preCode":"  @Test public void testLastValueOver() {\n    CalciteAssert\n        .model(JdbcTest.FOODMART_MODEL)\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.POSTGRESQL)\n        .query(\"select \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" last_value(\\\"time_id\\\") over (partition by \\\"account_id\\\"\"\n            + \" order by \\\"time_id\\\") as \\\"last_version\\\"\"\n            + \" from \\\"expense_fact\\\"\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(store_id=[$0], account_id=[$1], exp_date=[$2],\"\n            + \" time_id=[$3], category_id=[$4], currency_id=[$5], amount=[$6],\"\n            + \" last_version=[LAST_VALUE($3) OVER (PARTITION BY $1 ORDER BY $3\"\n            + \" RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])\\n\"\n            + \"    JdbcTableScan(table=[[foodmart, expense_fact]])\\n\")\n        .runs()\n        .planHasSql(\"SELECT \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" LAST_VALUE(\\\"time_id\\\") OVER (PARTITION BY \\\"account_id\\\"\"\n            + \" ORDER BY \\\"time_id\\\" RANGE BETWEEN UNBOUNDED PRECEDING AND\"\n            + \" CURRENT ROW) AS \\\"last_version\\\"\"\n            + \"\\nFROM \\\"foodmart\\\".\\\"expense_fact\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":487,"status":"B"}],"commitId":"e4fb4c4ed46febbbc2790f142e9e2b1d18b0ee18","commitMessage":"@@@[CALCITE-1506] Push OVER Clause to underlying SQL via JDBC adapter (Christian Tzolov)\n\nClose apache/calcite#329\n","date":"2016-11-29 00:45:43","modifiedFileCount":"2","status":"B","submitter":"Christian Tzolov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testOverRowsBetweenBoundPrecedingAndCurrent() {\n    CalciteAssert\n        .model(JdbcTest.FOODMART_MODEL)\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.POSTGRESQL)\n        .query(\"select \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" last_value(\\\"time_id\\\") over (partition by \\\"account_id\\\"\"\n            + \" order by \\\"time_id\\\" rows between 3 preceding and current row)\"\n            + \" as \\\"last_version\\\" from \\\"expense_fact\\\"\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(store_id=[$0], account_id=[$1], exp_date=[$2], \"\n            + \"time_id=[$3], category_id=[$4], currency_id=[$5], amount=[$6],\"\n            + \" last_version=[LAST_VALUE($3) OVER (PARTITION BY $1\"\n            + \" ORDER BY $3 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)])\\n\"\n            + \"    JdbcTableScan(table=[[foodmart, expense_fact]])\\n\")\n        .runs()\n        .planHasSql(\"SELECT \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" LAST_VALUE(\\\"time_id\\\") OVER (PARTITION BY \\\"account_id\\\"\"\n            + \" ORDER BY \\\"time_id\\\" ROWS BETWEEN 3 PRECEDING\"\n            + \" AND CURRENT ROW) AS \\\"last_version\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\");\n  }\n","date":"2020-04-06 04:57:49","endLine":632,"groupId":"101010","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOverRowsBetweenBoundPrecedingAndCurrent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/93/d9225e24795985dc38bb15e55325e153eec03d.src","preCode":"  @Test public void testOverRowsBetweenBoundPrecedingAndCurrent() {\n    CalciteAssert\n        .model(JdbcTest.FOODMART_MODEL)\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.POSTGRESQL)\n        .query(\"select \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" last_value(\\\"time_id\\\") over (partition by \\\"account_id\\\"\"\n            + \" order by \\\"time_id\\\" rows between 3 preceding and current row)\"\n            + \" as \\\"last_version\\\" from \\\"expense_fact\\\"\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(store_id=[$0], account_id=[$1], exp_date=[$2], \"\n            + \"time_id=[$3], category_id=[$4], currency_id=[$5], amount=[$6],\"\n            + \" last_version=[LAST_VALUE($3) OVER (PARTITION BY $1\"\n            + \" ORDER BY $3 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)])\\n\"\n            + \"    JdbcTableScan(table=[[foodmart, expense_fact]])\\n\")\n        .runs()\n        .planHasSql(\"SELECT \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" LAST_VALUE(\\\"time_id\\\") OVER (PARTITION BY \\\"account_id\\\"\"\n            + \" ORDER BY \\\"time_id\\\" ROWS BETWEEN 3 PRECEDING\"\n            + \" AND CURRENT ROW) AS \\\"last_version\\\"\\n\"\n            + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":610,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testLastValueOver() {\n    CalciteAssert\n        .model(JdbcTest.FOODMART_MODEL)\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.POSTGRESQL)\n        .query(\"select \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" last_value(\\\"time_id\\\") over (partition by \\\"account_id\\\"\"\n            + \" order by \\\"time_id\\\") as \\\"last_version\\\"\"\n            + \" from \\\"expense_fact\\\"\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(store_id=[$0], account_id=[$1], exp_date=[$2],\"\n            + \" time_id=[$3], category_id=[$4], currency_id=[$5], amount=[$6],\"\n            + \" last_version=[LAST_VALUE($3) OVER (PARTITION BY $1 ORDER BY $3\"\n            + \" RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])\\n\"\n            + \"    JdbcTableScan(table=[[foodmart, expense_fact]])\\n\")\n        .runs()\n        .planHasSql(\"SELECT \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" LAST_VALUE(\\\"time_id\\\") OVER (PARTITION BY \\\"account_id\\\"\"\n            + \" ORDER BY \\\"time_id\\\" RANGE BETWEEN UNBOUNDED PRECEDING AND\"\n            + \" CURRENT ROW) AS \\\"last_version\\\"\"\n            + \"\\nFROM \\\"foodmart\\\".\\\"expense_fact\\\"\");\n  }\n","date":"2020-04-06 04:57:49","endLine":686,"groupId":"101010","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLastValueOver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/93/d9225e24795985dc38bb15e55325e153eec03d.src","preCode":"  @Test public void testLastValueOver() {\n    CalciteAssert\n        .model(JdbcTest.FOODMART_MODEL)\n        .enable(CalciteAssert.DB == CalciteAssert.DatabaseInstance.POSTGRESQL)\n        .query(\"select \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" last_value(\\\"time_id\\\") over (partition by \\\"account_id\\\"\"\n            + \" order by \\\"time_id\\\") as \\\"last_version\\\"\"\n            + \" from \\\"expense_fact\\\"\")\n        .explainContains(\"PLAN=JdbcToEnumerableConverter\\n\"\n            + \"  JdbcProject(store_id=[$0], account_id=[$1], exp_date=[$2],\"\n            + \" time_id=[$3], category_id=[$4], currency_id=[$5], amount=[$6],\"\n            + \" last_version=[LAST_VALUE($3) OVER (PARTITION BY $1 ORDER BY $3\"\n            + \" RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])\\n\"\n            + \"    JdbcTableScan(table=[[foodmart, expense_fact]])\\n\")\n        .runs()\n        .planHasSql(\"SELECT \\\"store_id\\\", \\\"account_id\\\", \\\"exp_date\\\",\"\n            + \" \\\"time_id\\\", \\\"category_id\\\", \\\"currency_id\\\", \\\"amount\\\",\"\n            + \" LAST_VALUE(\\\"time_id\\\") OVER (PARTITION BY \\\"account_id\\\"\"\n            + \" ORDER BY \\\"time_id\\\" RANGE BETWEEN UNBOUNDED PRECEDING AND\"\n            + \" CURRENT ROW) AS \\\"last_version\\\"\"\n            + \"\\nFROM \\\"foodmart\\\".\\\"expense_fact\\\"\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
