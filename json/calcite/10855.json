[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testStringLiteral() {\n    checkExp(\"_latin1'hi'\", \"_LATIN1'hi'\");\n    checkExp(\n        \"N'is it a plane? no it''s superman!'\",\n        \"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    checkExp(\"n'lowercase n'\", \"_ISO-8859-1'lowercase n'\");\n    checkExp(\"'boring string'\", \"'boring string'\");\n    checkExp(\"_iSo-8859-1'bye'\", \"_ISO-8859-1'bye'\");\n    checkExp(\n        \"'three' \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"'three' -- comment \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"N'bye' \\t\\r\\f\\f\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n    checkExp(\n        \"_iso-8859-1'bye' \\n\\n--\\n-- this is a comment\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n\n    \r\n    checkExp(\"'foo\\rbar'\", \"'foo\\rbar'\");\n    checkExp(\"'foo\\nbar'\", \"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      checkExp(\"'foo\\r\\nbar'\", \"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":2113,"groupId":"12458","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/e977745bb2356d254a45d8c8d3748b6dec754f.src","preCode":"  @Test public void testStringLiteral() {\n    checkExp(\"_latin1'hi'\", \"_LATIN1'hi'\");\n    checkExp(\n        \"N'is it a plane? no it''s superman!'\",\n        \"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    checkExp(\"n'lowercase n'\", \"_ISO-8859-1'lowercase n'\");\n    checkExp(\"'boring string'\", \"'boring string'\");\n    checkExp(\"_iSo-8859-1'bye'\", \"_ISO-8859-1'bye'\");\n    checkExp(\n        \"'three' \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"'three' -- comment \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"N'bye' \\t\\r\\f\\f\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n    checkExp(\n        \"_iso-8859-1'bye' \\n\\n--\\n-- this is a comment\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n\n    \r\n    checkExp(\"'foo\\rbar'\", \"'foo\\rbar'\");\n    checkExp(\"'foo\\nbar'\", \"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      checkExp(\"'foo\\r\\nbar'\", \"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2080,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testTimeDate() {\n    \r\n    checkExp(\"CURRENT_TIME(3)\", \"CURRENT_TIME(3)\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_TIME\", \"`CURRENT_TIME`\");\n    checkExp(\"CURRENT_TIME(x+y)\", \"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIME(3)\", \"LOCALTIME(3)\");\n\n    \r\n    \r\n    checkExp(\"LOCALTIME\", \"`LOCALTIME`\");\n    checkExp(\"LOCALTIME(x+y)\", \"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIMESTAMP(3)\", \"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n    checkExp(\"LOCALTIMESTAMP\", \"`LOCALTIMESTAMP`\");\n    checkExp(\"LOCALTIMESTAMP(x+y)\", \"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"CURRENT_DATE(3)\", \"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_DATE\", \"`CURRENT_DATE`\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_TIMESTAMP(3)\", \"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_TIMESTAMP\", \"`CURRENT_TIMESTAMP`\");\n    checkExp(\"CURRENT_TIMESTAMP(x+y)\", \"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"DATE '2004-12-01'\", \"DATE '2004-12-01'\");\n    checkExp(\"TIME '12:01:01'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.000'\", \"TIME '12:01:01.000'\");\n    checkExp(\"TIME '12:01:01.001'\", \"TIME '12:01:01.001'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExpSame(\"TIMESTAMP '2004-12-01 12:01:01.1'\");\n\n    \r\n    checkFails(\"^DATE '12/21/99'^\", \"(?s).*Illegal DATE literal.*\");\n    checkFails(\"^TIME '1230:33'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\"^TIME '12:00:00 PM'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\n        \"^TIMESTAMP '12-21-99, 12:30:00'^\",\n        \"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","date":"2014-11-14 09:39:34","endLine":2336,"groupId":"2617","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/e977745bb2356d254a45d8c8d3748b6dec754f.src","preCode":"  @Test public void testTimeDate() {\n    \r\n    checkExp(\"CURRENT_TIME(3)\", \"CURRENT_TIME(3)\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_TIME\", \"`CURRENT_TIME`\");\n    checkExp(\"CURRENT_TIME(x+y)\", \"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIME(3)\", \"LOCALTIME(3)\");\n\n    \r\n    \r\n    checkExp(\"LOCALTIME\", \"`LOCALTIME`\");\n    checkExp(\"LOCALTIME(x+y)\", \"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIMESTAMP(3)\", \"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n    checkExp(\"LOCALTIMESTAMP\", \"`LOCALTIMESTAMP`\");\n    checkExp(\"LOCALTIMESTAMP(x+y)\", \"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"CURRENT_DATE(3)\", \"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_DATE\", \"`CURRENT_DATE`\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_TIMESTAMP(3)\", \"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_TIMESTAMP\", \"`CURRENT_TIMESTAMP`\");\n    checkExp(\"CURRENT_TIMESTAMP(x+y)\", \"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"DATE '2004-12-01'\", \"DATE '2004-12-01'\");\n    checkExp(\"TIME '12:01:01'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.000'\", \"TIME '12:01:01.000'\");\n    checkExp(\"TIME '12:01:01.001'\", \"TIME '12:01:01.001'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExpSame(\"TIMESTAMP '2004-12-01 12:01:01.1'\");\n\n    \r\n    checkFails(\"^DATE '12/21/99'^\", \"(?s).*Illegal DATE literal.*\");\n    checkFails(\"^TIME '1230:33'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\"^TIME '12:00:00 PM'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\n        \"^TIMESTAMP '12-21-99, 12:30:00'^\",\n        \"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2271,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2017-05-31 02:18:38","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testStringLiteral() {\n    checkExp(\"_latin1'hi'\", \"_LATIN1'hi'\");\n    checkExp(\n        \"N'is it a plane? no it''s superman!'\",\n        \"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    checkExp(\"n'lowercase n'\", \"_ISO-8859-1'lowercase n'\");\n    checkExp(\"'boring string'\", \"'boring string'\");\n    checkExp(\"_iSo-8859-1'bye'\", \"_ISO-8859-1'bye'\");\n    checkExp(\n        \"'three' \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"'three' -- comment \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"N'bye' \\t\\r\\f\\f\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n    checkExp(\n        \"_iso-8859-1'bye' \\n\\n--\\n-- this is a comment\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n\n    \r\n    checkExp(\"'foo\\rbar'\", \"'foo\\rbar'\");\n    checkExp(\"'foo\\nbar'\", \"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      checkExp(\"'foo\\r\\nbar'\", \"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":2113,"groupId":"12458","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/e977745bb2356d254a45d8c8d3748b6dec754f.src","preCode":"  @Test public void testStringLiteral() {\n    checkExp(\"_latin1'hi'\", \"_LATIN1'hi'\");\n    checkExp(\n        \"N'is it a plane? no it''s superman!'\",\n        \"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    checkExp(\"n'lowercase n'\", \"_ISO-8859-1'lowercase n'\");\n    checkExp(\"'boring string'\", \"'boring string'\");\n    checkExp(\"_iSo-8859-1'bye'\", \"_ISO-8859-1'bye'\");\n    checkExp(\n        \"'three' \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"'three' -- comment \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"N'bye' \\t\\r\\f\\f\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n    checkExp(\n        \"_iso-8859-1'bye' \\n\\n--\\n-- this is a comment\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n\n    \r\n    checkExp(\"'foo\\rbar'\", \"'foo\\rbar'\");\n    checkExp(\"'foo\\nbar'\", \"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      checkExp(\"'foo\\r\\nbar'\", \"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2080,"status":"N"},{"authorDate":"2017-05-31 02:18:38","commitOrder":2,"curCode":"  @Test public void testTimeDate() {\n    \r\n    checkExp(\"CURRENT_TIME(3)\", \"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIME\", \"`CURRENT_TIME`\");\n    checkExp(\"CURRENT_TIME(x+y)\", \"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIME(3)\", \"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIME\", \"`LOCALTIME`\");\n    checkExp(\"LOCALTIME(x+y)\", \"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIMESTAMP(3)\", \"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIMESTAMP\", \"`LOCALTIMESTAMP`\");\n    checkExp(\"LOCALTIMESTAMP(x+y)\", \"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"CURRENT_DATE(3)\", \"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_DATE\", \"`CURRENT_DATE`\");\n\n    \r\n    \r\n\n    \r\n    checkExp(\"CURRENT_TIMESTAMP(3)\", \"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIMESTAMP\", \"`CURRENT_TIMESTAMP`\");\n    checkExp(\"CURRENT_TIMESTAMP(x+y)\", \"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"DATE '2004-12-01'\", \"DATE '2004-12-01'\");\n\n    \r\n    checkExp(\"TIME '12:01:01'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.000'\", \"TIME '12:01:01.000'\");\n    checkExp(\"TIME '12:01:01.001'\", \"TIME '12:01:01.001'\");\n\n    \r\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n\n    \r\n    checkFails(\"^DATE '12/21/99'^\", \"(?s).*Illegal DATE literal.*\");\n    checkFails(\"^TIME '1230:33'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\"^TIME '12:00:00 PM'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\n        \"^TIMESTAMP '12-21-99, 12:30:00'^\",\n        \"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","date":"2017-05-31 23:17:27","endLine":3712,"groupId":"2617","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f4/baa8664a9df94e0e0dfac29e7e38feffe422f2.src","preCode":"  @Test public void testTimeDate() {\n    \r\n    checkExp(\"CURRENT_TIME(3)\", \"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIME\", \"`CURRENT_TIME`\");\n    checkExp(\"CURRENT_TIME(x+y)\", \"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIME(3)\", \"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIME\", \"`LOCALTIME`\");\n    checkExp(\"LOCALTIME(x+y)\", \"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIMESTAMP(3)\", \"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIMESTAMP\", \"`LOCALTIMESTAMP`\");\n    checkExp(\"LOCALTIMESTAMP(x+y)\", \"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"CURRENT_DATE(3)\", \"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_DATE\", \"`CURRENT_DATE`\");\n\n    \r\n    \r\n\n    \r\n    checkExp(\"CURRENT_TIMESTAMP(3)\", \"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIMESTAMP\", \"`CURRENT_TIMESTAMP`\");\n    checkExp(\"CURRENT_TIMESTAMP(x+y)\", \"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"DATE '2004-12-01'\", \"DATE '2004-12-01'\");\n    checkExp(\"TIME '12:01:01'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.000'\", \"TIME '12:01:01.000'\");\n    checkExp(\"TIME '12:01:01.001'\", \"TIME '12:01:01.001'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExpSame(\"TIMESTAMP '2004-12-01 12:01:01.1'\");\n\n    \r\n    checkFails(\"^DATE '12/21/99'^\", \"(?s).*Illegal DATE literal.*\");\n    checkFails(\"^TIME '1230:33'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\"^TIME '12:00:00 PM'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\n        \"^TIMESTAMP '12-21-99, 12:30:00'^\",\n        \"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3638,"status":"M"}],"commitId":"915c218b0fcbff26652071d267903d97875c7b9e","commitMessage":"@@@[CALCITE-1807] Upgrade to Avatica 1.10.0\n\nIncludes fix to [CALCITE-1664] CAST('<string>' as TIMESTAMP) adds part of sub-second fraction to the value\n\nReplace uses of DateTimeUtils.GMT_Zone with UTC_ZONE.\n","date":"2017-05-31 23:17:27","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"},{"authorTime":"2017-05-02 12:53:12","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":3,"curCode":"  @Test public void testStringLiteral() {\n    checkExp(\"_latin1'hi'\", \"_LATIN1'hi'\");\n    checkExp(\n        \"N'is it a plane? no it''s superman!'\",\n        \"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    checkExp(\"n'lowercase n'\", \"_ISO-8859-1'lowercase n'\");\n    checkExp(\"'boring string'\", \"'boring string'\");\n    checkExp(\"_iSo-8859-1'bye'\", \"_ISO-8859-1'bye'\");\n    checkExp(\n        \"'three' \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"'three' -- comment \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"N'bye' \\t\\r\\f\\f\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n    checkExp(\n        \"_iso-8859-1'bye' \\n\\n--\\n-- this is a comment\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n\n    \r\n    checkExp(\"'foo\\rbar'\", \"'foo\\rbar'\");\n    checkExp(\"'foo\\nbar'\", \"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      checkExp(\"'foo\\r\\nbar'\", \"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":2113,"groupId":"12458","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/e977745bb2356d254a45d8c8d3748b6dec754f.src","preCode":"  @Test public void testStringLiteral() {\n    checkExp(\"_latin1'hi'\", \"_LATIN1'hi'\");\n    checkExp(\n        \"N'is it a plane? no it''s superman!'\",\n        \"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    checkExp(\"n'lowercase n'\", \"_ISO-8859-1'lowercase n'\");\n    checkExp(\"'boring string'\", \"'boring string'\");\n    checkExp(\"_iSo-8859-1'bye'\", \"_ISO-8859-1'bye'\");\n    checkExp(\n        \"'three' \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"'three' -- comment \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"N'bye' \\t\\r\\f\\f\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n    checkExp(\n        \"_iso-8859-1'bye' \\n\\n--\\n-- this is a comment\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n\n    \r\n    checkExp(\"'foo\\rbar'\", \"'foo\\rbar'\");\n    checkExp(\"'foo\\nbar'\", \"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      checkExp(\"'foo\\r\\nbar'\", \"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2080,"status":"N"},{"authorDate":"2017-05-02 12:53:12","commitOrder":3,"curCode":"  @Test public void testTimeDate() {\n    \r\n    checkExp(\"CURRENT_TIME(3)\", \"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIME\", \"`CURRENT_TIME`\");\n    checkExp(\"CURRENT_TIME(x+y)\", \"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIME(3)\", \"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIME\", \"`LOCALTIME`\");\n    checkExp(\"LOCALTIME(x+y)\", \"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIMESTAMP(3)\", \"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIMESTAMP\", \"`LOCALTIMESTAMP`\");\n    checkExp(\"LOCALTIMESTAMP(x+y)\", \"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"CURRENT_DATE(3)\", \"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_DATE\", \"`CURRENT_DATE`\");\n\n    \r\n    \r\n\n    \r\n    checkExp(\"CURRENT_TIMESTAMP(3)\", \"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIMESTAMP\", \"`CURRENT_TIMESTAMP`\");\n    checkExp(\"CURRENT_TIMESTAMP(x+y)\", \"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"DATE '2004-12-01'\", \"DATE '2004-12-01'\");\n\n    \r\n    checkExp(\"TIME '12:01:01'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.000'\", \"TIME '12:01:01.000'\");\n    checkExp(\"TIME '12:01:01.001'\", \"TIME '12:01:01.001'\");\n    checkExp(\"TIME '12:01:01.01023456789'\", \"TIME '12:01:01.01023456789'\");\n\n    \r\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP  '2004-12-01 12:01:01.010234567890'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.010234567890'\");\n    checkExpSame(\"TIMESTAMP '2004-12-01 12:01:01.01023456789'\");\n\n    \r\n    checkFails(\"^DATE '12/21/99'^\", \"(?s).*Illegal DATE literal.*\");\n    checkFails(\"^TIME '1230:33'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\"^TIME '12:00:00 PM'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\n        \"^TIMESTAMP '12-21-99, 12:30:00'^\",\n        \"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","date":"2017-05-31 23:17:28","endLine":3717,"groupId":"2617","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/95/d70d371ae55e6ee060342191b2549c6431c2f4.src","preCode":"  @Test public void testTimeDate() {\n    \r\n    checkExp(\"CURRENT_TIME(3)\", \"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIME\", \"`CURRENT_TIME`\");\n    checkExp(\"CURRENT_TIME(x+y)\", \"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIME(3)\", \"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIME\", \"`LOCALTIME`\");\n    checkExp(\"LOCALTIME(x+y)\", \"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIMESTAMP(3)\", \"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIMESTAMP\", \"`LOCALTIMESTAMP`\");\n    checkExp(\"LOCALTIMESTAMP(x+y)\", \"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"CURRENT_DATE(3)\", \"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_DATE\", \"`CURRENT_DATE`\");\n\n    \r\n    \r\n\n    \r\n    checkExp(\"CURRENT_TIMESTAMP(3)\", \"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIMESTAMP\", \"`CURRENT_TIMESTAMP`\");\n    checkExp(\"CURRENT_TIMESTAMP(x+y)\", \"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"DATE '2004-12-01'\", \"DATE '2004-12-01'\");\n\n    \r\n    checkExp(\"TIME '12:01:01'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.000'\", \"TIME '12:01:01.000'\");\n    checkExp(\"TIME '12:01:01.001'\", \"TIME '12:01:01.001'\");\n\n    \r\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n\n    \r\n    checkFails(\"^DATE '12/21/99'^\", \"(?s).*Illegal DATE literal.*\");\n    checkFails(\"^TIME '1230:33'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\"^TIME '12:00:00 PM'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\n        \"^TIMESTAMP '12-21-99, 12:30:00'^\",\n        \"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3638,"status":"M"}],"commitId":"205af8134857ba312415b9a5b4a48020fe0ce888","commitMessage":"@@@[CALCITE-1690] Calcite timestamp literals cannot express precision above millisecond.  TIMESTAMP(3)\n","date":"2017-05-31 23:17:28","modifiedFileCount":"34","status":"M","submitter":"Julian Hyde"},{"authorTime":"2017-05-02 12:53:12","codes":[{"authorDate":"2018-11-10 14:46:24","commitOrder":4,"curCode":"  @Test public void testStringLiteral() {\n    checkExp(\"_latin1'hi'\", \"_LATIN1'hi'\");\n    checkExp(\n        \"N'is it a plane? no it''s superman!'\",\n        \"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    checkExp(\"n'lowercase n'\", \"_ISO-8859-1'lowercase n'\");\n    checkExp(\"'boring string'\", \"'boring string'\");\n    checkExp(\"_iSo-8859-1'bye'\", \"_ISO-8859-1'bye'\");\n    checkExp(\n        \"'three' \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"'three' -- comment \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"N'bye' \\t\\r\\f\\f\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n    checkExp(\n        \"_iso-8859-1'bye' \\n\\n--\\n-- this is a comment\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n    checkExp(\"_utf8'hi'\", \"_UTF8'hi'\");\n\n    \r\n    checkExp(\"'foo\\rbar'\", \"'foo\\rbar'\");\n    checkExp(\"'foo\\nbar'\", \"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      checkExp(\"'foo\\r\\nbar'\", \"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","date":"2018-12-04 02:56:03","endLine":3744,"groupId":"12458","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/49b2f8918d776f4d446031a7a1b91688a9b0f5.src","preCode":"  @Test public void testStringLiteral() {\n    checkExp(\"_latin1'hi'\", \"_LATIN1'hi'\");\n    checkExp(\n        \"N'is it a plane? no it''s superman!'\",\n        \"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    checkExp(\"n'lowercase n'\", \"_ISO-8859-1'lowercase n'\");\n    checkExp(\"'boring string'\", \"'boring string'\");\n    checkExp(\"_iSo-8859-1'bye'\", \"_ISO-8859-1'bye'\");\n    checkExp(\n        \"'three' \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"'three' -- comment \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"N'bye' \\t\\r\\f\\f\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n    checkExp(\n        \"_iso-8859-1'bye' \\n\\n--\\n-- this is a comment\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n\n    \r\n    checkExp(\"'foo\\rbar'\", \"'foo\\rbar'\");\n    checkExp(\"'foo\\nbar'\", \"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      checkExp(\"'foo\\r\\nbar'\", \"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3710,"status":"M"},{"authorDate":"2017-05-02 12:53:12","commitOrder":4,"curCode":"  @Test public void testTimeDate() {\n    \r\n    checkExp(\"CURRENT_TIME(3)\", \"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIME\", \"`CURRENT_TIME`\");\n    checkExp(\"CURRENT_TIME(x+y)\", \"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIME(3)\", \"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIME\", \"`LOCALTIME`\");\n    checkExp(\"LOCALTIME(x+y)\", \"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIMESTAMP(3)\", \"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIMESTAMP\", \"`LOCALTIMESTAMP`\");\n    checkExp(\"LOCALTIMESTAMP(x+y)\", \"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"CURRENT_DATE(3)\", \"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_DATE\", \"`CURRENT_DATE`\");\n\n    \r\n    \r\n\n    \r\n    checkExp(\"CURRENT_TIMESTAMP(3)\", \"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIMESTAMP\", \"`CURRENT_TIMESTAMP`\");\n    checkExp(\"CURRENT_TIMESTAMP(x+y)\", \"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"DATE '2004-12-01'\", \"DATE '2004-12-01'\");\n\n    \r\n    checkExp(\"TIME '12:01:01'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.000'\", \"TIME '12:01:01.000'\");\n    checkExp(\"TIME '12:01:01.001'\", \"TIME '12:01:01.001'\");\n    checkExp(\"TIME '12:01:01.01023456789'\", \"TIME '12:01:01.01023456789'\");\n\n    \r\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP  '2004-12-01 12:01:01.010234567890'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.010234567890'\");\n    checkExpSame(\"TIMESTAMP '2004-12-01 12:01:01.01023456789'\");\n\n    \r\n    checkFails(\"^DATE '12/21/99'^\", \"(?s).*Illegal DATE literal.*\");\n    checkFails(\"^TIME '1230:33'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\"^TIME '12:00:00 PM'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\n        \"^TIMESTAMP '12-21-99, 12:30:00'^\",\n        \"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","date":"2017-05-31 23:17:28","endLine":3717,"groupId":"2617","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/95/d70d371ae55e6ee060342191b2549c6431c2f4.src","preCode":"  @Test public void testTimeDate() {\n    \r\n    checkExp(\"CURRENT_TIME(3)\", \"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIME\", \"`CURRENT_TIME`\");\n    checkExp(\"CURRENT_TIME(x+y)\", \"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIME(3)\", \"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIME\", \"`LOCALTIME`\");\n    checkExp(\"LOCALTIME(x+y)\", \"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIMESTAMP(3)\", \"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIMESTAMP\", \"`LOCALTIMESTAMP`\");\n    checkExp(\"LOCALTIMESTAMP(x+y)\", \"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"CURRENT_DATE(3)\", \"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_DATE\", \"`CURRENT_DATE`\");\n\n    \r\n    \r\n\n    \r\n    checkExp(\"CURRENT_TIMESTAMP(3)\", \"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIMESTAMP\", \"`CURRENT_TIMESTAMP`\");\n    checkExp(\"CURRENT_TIMESTAMP(x+y)\", \"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"DATE '2004-12-01'\", \"DATE '2004-12-01'\");\n\n    \r\n    checkExp(\"TIME '12:01:01'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.000'\", \"TIME '12:01:01.000'\");\n    checkExp(\"TIME '12:01:01.001'\", \"TIME '12:01:01.001'\");\n    checkExp(\"TIME '12:01:01.01023456789'\", \"TIME '12:01:01.01023456789'\");\n\n    \r\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP  '2004-12-01 12:01:01.010234567890'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.010234567890'\");\n    checkExpSame(\"TIMESTAMP '2004-12-01 12:01:01.01023456789'\");\n\n    \r\n    checkFails(\"^DATE '12/21/99'^\", \"(?s).*Illegal DATE literal.*\");\n    checkFails(\"^TIME '1230:33'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\"^TIME '12:00:00 PM'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\n        \"^TIMESTAMP '12-21-99, 12:30:00'^\",\n        \"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3638,"status":"N"}],"commitId":"69750ff759a560b462960d81c446bdf912a1b39d","commitMessage":"@@@[CALCITE-2619] Reduce string literal creation cost by deferring and caching charset conversion (Ted Xu)\n\nClose apache/calcite#911\n","date":"2018-12-04 02:56:03","modifiedFileCount":"5","status":"M","submitter":"Ted Xu"},{"authorTime":"2019-05-10 18:29:53","codes":[{"authorDate":"2018-11-10 14:46:24","commitOrder":5,"curCode":"  @Test public void testStringLiteral() {\n    checkExp(\"_latin1'hi'\", \"_LATIN1'hi'\");\n    checkExp(\n        \"N'is it a plane? no it''s superman!'\",\n        \"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    checkExp(\"n'lowercase n'\", \"_ISO-8859-1'lowercase n'\");\n    checkExp(\"'boring string'\", \"'boring string'\");\n    checkExp(\"_iSo-8859-1'bye'\", \"_ISO-8859-1'bye'\");\n    checkExp(\n        \"'three' \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"'three' -- comment \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"N'bye' \\t\\r\\f\\f\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n    checkExp(\n        \"_iso-8859-1'bye' \\n\\n--\\n-- this is a comment\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n    checkExp(\"_utf8'hi'\", \"_UTF8'hi'\");\n\n    \r\n    checkExp(\"'foo\\rbar'\", \"'foo\\rbar'\");\n    checkExp(\"'foo\\nbar'\", \"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      checkExp(\"'foo\\r\\nbar'\", \"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","date":"2018-12-04 02:56:03","endLine":3744,"groupId":"12458","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/49b2f8918d776f4d446031a7a1b91688a9b0f5.src","preCode":"  @Test public void testStringLiteral() {\n    checkExp(\"_latin1'hi'\", \"_LATIN1'hi'\");\n    checkExp(\n        \"N'is it a plane? no it''s superman!'\",\n        \"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    checkExp(\"n'lowercase n'\", \"_ISO-8859-1'lowercase n'\");\n    checkExp(\"'boring string'\", \"'boring string'\");\n    checkExp(\"_iSo-8859-1'bye'\", \"_ISO-8859-1'bye'\");\n    checkExp(\n        \"'three' \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"'three' -- comment \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"N'bye' \\t\\r\\f\\f\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n    checkExp(\n        \"_iso-8859-1'bye' \\n\\n--\\n-- this is a comment\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n    checkExp(\"_utf8'hi'\", \"_UTF8'hi'\");\n\n    \r\n    checkExp(\"'foo\\rbar'\", \"'foo\\rbar'\");\n    checkExp(\"'foo\\nbar'\", \"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      checkExp(\"'foo\\r\\nbar'\", \"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3710,"status":"N"},{"authorDate":"2019-05-10 18:29:53","commitOrder":5,"curCode":"  @Test public void testTimeDate() {\n    \r\n    checkExp(\"CURRENT_TIME(3)\", \"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIME\", \"CURRENT_TIME\");\n    checkExp(\"CURRENT_TIME(x+y)\", \"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIME(3)\", \"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIME\", \"LOCALTIME\");\n    checkExp(\"LOCALTIME(x+y)\", \"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIMESTAMP(3)\", \"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIMESTAMP\", \"LOCALTIMESTAMP\");\n    checkExp(\"LOCALTIMESTAMP(x+y)\", \"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"CURRENT_DATE(3)\", \"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_DATE\", \"CURRENT_DATE\");\n\n    \r\n    \r\n\n    \r\n    checkExp(\"CURRENT_TIMESTAMP(3)\", \"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIMESTAMP\", \"CURRENT_TIMESTAMP\");\n    checkExp(\"CURRENT_TIMESTAMP(x+y)\", \"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"DATE '2004-12-01'\", \"DATE '2004-12-01'\");\n\n    \r\n    checkExp(\"TIME '12:01:01'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.000'\", \"TIME '12:01:01.000'\");\n    checkExp(\"TIME '12:01:01.001'\", \"TIME '12:01:01.001'\");\n    checkExp(\"TIME '12:01:01.01023456789'\", \"TIME '12:01:01.01023456789'\");\n\n    \r\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP  '2004-12-01 12:01:01.010234567890'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.010234567890'\");\n    checkExpSame(\"TIMESTAMP '2004-12-01 12:01:01.01023456789'\");\n\n    \r\n    checkFails(\"^DATE '12/21/99'^\", \"(?s).*Illegal DATE literal.*\");\n    checkFails(\"^TIME '1230:33'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\"^TIME '12:00:00 PM'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\n        \"^TIMESTAMP '12-21-99, 12:30:00'^\",\n        \"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","date":"2019-05-16 10:51:05","endLine":4193,"groupId":"12458","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cd/973c68208cae9b34f8e4ead7ccdf6aa7a4f285.src","preCode":"  @Test public void testTimeDate() {\n    \r\n    checkExp(\"CURRENT_TIME(3)\", \"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIME\", \"`CURRENT_TIME`\");\n    checkExp(\"CURRENT_TIME(x+y)\", \"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIME(3)\", \"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIME\", \"`LOCALTIME`\");\n    checkExp(\"LOCALTIME(x+y)\", \"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIMESTAMP(3)\", \"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIMESTAMP\", \"`LOCALTIMESTAMP`\");\n    checkExp(\"LOCALTIMESTAMP(x+y)\", \"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"CURRENT_DATE(3)\", \"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_DATE\", \"`CURRENT_DATE`\");\n\n    \r\n    \r\n\n    \r\n    checkExp(\"CURRENT_TIMESTAMP(3)\", \"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIMESTAMP\", \"`CURRENT_TIMESTAMP`\");\n    checkExp(\"CURRENT_TIMESTAMP(x+y)\", \"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"DATE '2004-12-01'\", \"DATE '2004-12-01'\");\n\n    \r\n    checkExp(\"TIME '12:01:01'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.000'\", \"TIME '12:01:01.000'\");\n    checkExp(\"TIME '12:01:01.001'\", \"TIME '12:01:01.001'\");\n    checkExp(\"TIME '12:01:01.01023456789'\", \"TIME '12:01:01.01023456789'\");\n\n    \r\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP  '2004-12-01 12:01:01.010234567890'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.010234567890'\");\n    checkExpSame(\"TIMESTAMP '2004-12-01 12:01:01.01023456789'\");\n\n    \r\n    checkFails(\"^DATE '12/21/99'^\", \"(?s).*Illegal DATE literal.*\");\n    checkFails(\"^TIME '1230:33'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\"^TIME '12:00:00 PM'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\n        \"^TIMESTAMP '12-21-99, 12:30:00'^\",\n        \"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4114,"status":"M"}],"commitId":"051058be8f7de31f59718962a88604dc2d1c9d36","commitMessage":"@@@[CALCITE-2282] Remove sql operator table from parser\n\nDifferentiate for unresolved functions and non-parameters function identifier unparsing;\nMerge logic in SqlIdeitifier and SqlUtil;\nFix Julian's comments address: Remove leftPrec and rightPrec from SqlCollation.\n\nClose apache/calcite#1205\n","date":"2019-05-16 10:51:05","modifiedFileCount":"16","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":6,"curCode":"  @Test public void testStringLiteral() {\n    expr(\"_latin1'hi'\")\n        .ok(\"_LATIN1'hi'\");\n    expr(\"N'is it a plane? no it''s superman!'\")\n        .ok(\"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    expr(\"n'lowercase n'\")\n        .ok(\"_ISO-8859-1'lowercase n'\");\n    expr(\"'boring string'\")\n        .ok(\"'boring string'\");\n    expr(\"_iSo-8859-1'bye'\")\n        .ok(\"_ISO-8859-1'bye'\");\n    expr(\"'three' \\n ' blind'\\n' mice'\")\n        .ok(\"'three'\\n' blind'\\n' mice'\");\n    expr(\"'three' -- comment \\n ' blind'\\n' mice'\")\n        .ok(\"'three'\\n' blind'\\n' mice'\");\n    expr(\"N'bye' \\t\\r\\f\\f\\n' bye'\")\n        .ok(\"_ISO-8859-1'bye'\\n' bye'\");\n    expr(\"_iso-8859-1'bye' \\n\\n--\\n-- this is a comment\\n' bye'\")\n        .ok(\"_ISO-8859-1'bye'\\n' bye'\");\n    expr(\"_utf8'hi'\")\n        .ok(\"_UTF8'hi'\");\n\n    \r\n    expr(\"'foo\\rbar'\")\n        .ok(\"'foo\\rbar'\");\n    expr(\"'foo\\nbar'\")\n        .ok(\"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      expr(\"'foo\\r\\nbar'\")\n          .ok(\"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","date":"2019-09-24 02:59:18","endLine":3957,"groupId":"12394","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testStringLiteral() {\n    checkExp(\"_latin1'hi'\", \"_LATIN1'hi'\");\n    checkExp(\n        \"N'is it a plane? no it''s superman!'\",\n        \"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    checkExp(\"n'lowercase n'\", \"_ISO-8859-1'lowercase n'\");\n    checkExp(\"'boring string'\", \"'boring string'\");\n    checkExp(\"_iSo-8859-1'bye'\", \"_ISO-8859-1'bye'\");\n    checkExp(\n        \"'three' \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"'three' -- comment \\n ' blind'\\n' mice'\",\n        \"'three'\\n' blind'\\n' mice'\");\n    checkExp(\n        \"N'bye' \\t\\r\\f\\f\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n    checkExp(\n        \"_iso-8859-1'bye' \\n\\n--\\n-- this is a comment\\n' bye'\",\n        \"_ISO-8859-1'bye'\\n' bye'\");\n    checkExp(\"_utf8'hi'\", \"_UTF8'hi'\");\n\n    \r\n    checkExp(\"'foo\\rbar'\", \"'foo\\rbar'\");\n    checkExp(\"'foo\\nbar'\", \"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      checkExp(\"'foo\\r\\nbar'\", \"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3920,"status":"M"},{"authorDate":"2019-09-07 07:51:19","commitOrder":6,"curCode":"  @Test public void testTimeDate() {\n    \r\n    expr(\"CURRENT_TIME(3)\")\n        .ok(\"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    expr(\"CURRENT_TIME\")\n        .ok(\"CURRENT_TIME\");\n    expr(\"CURRENT_TIME(x+y)\")\n        .ok(\"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    expr(\"LOCALTIME(3)\")\n        .ok(\"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    expr(\"LOCALTIME\")\n        .ok(\"LOCALTIME\");\n    expr(\"LOCALTIME(x+y)\")\n        .ok(\"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    expr(\"LOCALTIMESTAMP(3)\")\n        .ok(\"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    expr(\"LOCALTIMESTAMP\")\n        .ok(\"LOCALTIMESTAMP\");\n    expr(\"LOCALTIMESTAMP(x+y)\")\n        .ok(\"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    expr(\"CURRENT_DATE(3)\")\n        .ok(\"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    expr(\"CURRENT_DATE\")\n        .ok(\"CURRENT_DATE\");\n\n    \r\n    \r\n\n    \r\n    expr(\"CURRENT_TIMESTAMP(3)\")\n        .ok(\"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    expr(\"CURRENT_TIMESTAMP\")\n        .ok(\"CURRENT_TIMESTAMP\");\n    expr(\"CURRENT_TIMESTAMP(x+y)\")\n        .ok(\"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    expr(\"DATE '2004-12-01'\")\n        .ok(\"DATE '2004-12-01'\");\n\n    \r\n    expr(\"TIME '12:01:01'\")\n        .ok(\"TIME '12:01:01'\");\n    expr(\"TIME '12:01:01.'\")\n        .ok(\"TIME '12:01:01'\");\n    expr(\"TIME '12:01:01.000'\")\n        .ok(\"TIME '12:01:01.000'\");\n    expr(\"TIME '12:01:01.001'\")\n        .ok(\"TIME '12:01:01.001'\");\n    expr(\"TIME '12:01:01.01023456789'\")\n        .ok(\"TIME '12:01:01.01023456789'\");\n\n    \r\n    expr(\"TIMESTAMP '2004-12-01 12:01:01'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.1'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01'\");\n    expr(\"TIMESTAMP  '2004-12-01 12:01:01.010234567890'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01.010234567890'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.01023456789'\").same();\n\n    \r\n    sql(\"^DATE '12/21/99'^\")\n        .fails(\"(?s).*Illegal DATE literal.*\");\n    sql(\"^TIME '1230:33'^\")\n        .fails(\"(?s).*Illegal TIME literal.*\");\n    sql(\"^TIME '12:00:00 PM'^\")\n        .fails(\"(?s).*Illegal TIME literal.*\");\n    sql(\"^TIMESTAMP '12-21-99, 12:30:00'^\")\n        .fails(\"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","date":"2019-09-24 02:59:18","endLine":4216,"groupId":"12394","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testTimeDate() {\n    \r\n    checkExp(\"CURRENT_TIME(3)\", \"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIME\", \"CURRENT_TIME\");\n    checkExp(\"CURRENT_TIME(x+y)\", \"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIME(3)\", \"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIME\", \"LOCALTIME\");\n    checkExp(\"LOCALTIME(x+y)\", \"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    checkExp(\"LOCALTIMESTAMP(3)\", \"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"LOCALTIMESTAMP\", \"LOCALTIMESTAMP\");\n    checkExp(\"LOCALTIMESTAMP(x+y)\", \"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"CURRENT_DATE(3)\", \"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    checkExp(\"CURRENT_DATE\", \"CURRENT_DATE\");\n\n    \r\n    \r\n\n    \r\n    checkExp(\"CURRENT_TIMESTAMP(3)\", \"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    checkExp(\"CURRENT_TIMESTAMP\", \"CURRENT_TIMESTAMP\");\n    checkExp(\"CURRENT_TIMESTAMP(x+y)\", \"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    checkExp(\"DATE '2004-12-01'\", \"DATE '2004-12-01'\");\n\n    \r\n    checkExp(\"TIME '12:01:01'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.'\", \"TIME '12:01:01'\");\n    checkExp(\"TIME '12:01:01.000'\", \"TIME '12:01:01.000'\");\n    checkExp(\"TIME '12:01:01.001'\", \"TIME '12:01:01.001'\");\n    checkExp(\"TIME '12:01:01.01023456789'\", \"TIME '12:01:01.01023456789'\");\n\n    \r\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    checkExp(\n        \"TIMESTAMP '2004-12-01 12:01:01.'\",\n        \"TIMESTAMP '2004-12-01 12:01:01'\");\n    checkExp(\n        \"TIMESTAMP  '2004-12-01 12:01:01.010234567890'\",\n        \"TIMESTAMP '2004-12-01 12:01:01.010234567890'\");\n    checkExpSame(\"TIMESTAMP '2004-12-01 12:01:01.01023456789'\");\n\n    \r\n    checkFails(\"^DATE '12/21/99'^\", \"(?s).*Illegal DATE literal.*\");\n    checkFails(\"^TIME '1230:33'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\"^TIME '12:00:00 PM'^\", \"(?s).*Illegal TIME literal.*\");\n    checkFails(\n        \"^TIMESTAMP '12-21-99, 12:30:00'^\",\n        \"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4119,"status":"M"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testStringLiteral() {\n    expr(\"_latin1'hi'\")\n        .ok(\"_LATIN1'hi'\");\n    expr(\"N'is it a plane? no it''s superman!'\")\n        .ok(\"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    expr(\"n'lowercase n'\")\n        .ok(\"_ISO-8859-1'lowercase n'\");\n    expr(\"'boring string'\")\n        .ok(\"'boring string'\");\n    expr(\"_iSo-8859-1'bye'\")\n        .ok(\"_ISO-8859-1'bye'\");\n    expr(\"'three'\\n' blind'\\n' mice'\")\n        .ok(\"'three'\\n' blind'\\n' mice'\");\n    expr(\"'three' -- comment\\n' blind'\\n' mice'\")\n        .ok(\"'three'\\n' blind'\\n' mice'\");\n    expr(\"N'bye' \\t\\r\\f\\f\\n' bye'\")\n        .ok(\"_ISO-8859-1'bye'\\n' bye'\");\n    expr(\"_iso-8859-1'bye'\\n\\n--\\n-- this is a comment\\n' bye'\")\n        .ok(\"_ISO-8859-1'bye'\\n' bye'\");\n    expr(\"_utf8'hi'\")\n        .ok(\"_UTF8'hi'\");\n\n    \r\n    expr(\"'foo\\rbar'\")\n        .ok(\"'foo\\rbar'\");\n    expr(\"'foo\\nbar'\")\n        .ok(\"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      expr(\"'foo\\r\\nbar'\")\n          .ok(\"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":4036,"groupId":"10855","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testStringLiteral() {\n    expr(\"_latin1'hi'\")\n        .ok(\"_LATIN1'hi'\");\n    expr(\"N'is it a plane? no it''s superman!'\")\n        .ok(\"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    expr(\"n'lowercase n'\")\n        .ok(\"_ISO-8859-1'lowercase n'\");\n    expr(\"'boring string'\")\n        .ok(\"'boring string'\");\n    expr(\"_iSo-8859-1'bye'\")\n        .ok(\"_ISO-8859-1'bye'\");\n    expr(\"'three'\\n' blind'\\n' mice'\")\n        .ok(\"'three'\\n' blind'\\n' mice'\");\n    expr(\"'three' -- comment\\n' blind'\\n' mice'\")\n        .ok(\"'three'\\n' blind'\\n' mice'\");\n    expr(\"N'bye' \\t\\r\\f\\f\\n' bye'\")\n        .ok(\"_ISO-8859-1'bye'\\n' bye'\");\n    expr(\"_iso-8859-1'bye'\\n\\n--\\n-- this is a comment\\n' bye'\")\n        .ok(\"_ISO-8859-1'bye'\\n' bye'\");\n    expr(\"_utf8'hi'\")\n        .ok(\"_UTF8'hi'\");\n\n    \r\n    expr(\"'foo\\rbar'\")\n        .ok(\"'foo\\rbar'\");\n    expr(\"'foo\\nbar'\")\n        .ok(\"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      expr(\"'foo\\r\\nbar'\")\n          .ok(\"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3999,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testTimeDate() {\n    \r\n    expr(\"CURRENT_TIME(3)\")\n        .ok(\"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    expr(\"CURRENT_TIME\")\n        .ok(\"CURRENT_TIME\");\n    expr(\"CURRENT_TIME(x+y)\")\n        .ok(\"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    expr(\"LOCALTIME(3)\")\n        .ok(\"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    expr(\"LOCALTIME\")\n        .ok(\"LOCALTIME\");\n    expr(\"LOCALTIME(x+y)\")\n        .ok(\"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    expr(\"LOCALTIMESTAMP(3)\")\n        .ok(\"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    expr(\"LOCALTIMESTAMP\")\n        .ok(\"LOCALTIMESTAMP\");\n    expr(\"LOCALTIMESTAMP(x+y)\")\n        .ok(\"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    expr(\"CURRENT_DATE(3)\")\n        .ok(\"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    expr(\"CURRENT_DATE\")\n        .ok(\"CURRENT_DATE\");\n\n    \r\n    \r\n\n    \r\n    expr(\"CURRENT_TIMESTAMP(3)\")\n        .ok(\"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    expr(\"CURRENT_TIMESTAMP\")\n        .ok(\"CURRENT_TIMESTAMP\");\n    expr(\"CURRENT_TIMESTAMP(x+y)\")\n        .ok(\"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    expr(\"DATE '2004-12-01'\")\n        .ok(\"DATE '2004-12-01'\");\n\n    \r\n    expr(\"TIME '12:01:01'\")\n        .ok(\"TIME '12:01:01'\");\n    expr(\"TIME '12:01:01.'\")\n        .ok(\"TIME '12:01:01'\");\n    expr(\"TIME '12:01:01.000'\")\n        .ok(\"TIME '12:01:01.000'\");\n    expr(\"TIME '12:01:01.001'\")\n        .ok(\"TIME '12:01:01.001'\");\n    expr(\"TIME '12:01:01.01023456789'\")\n        .ok(\"TIME '12:01:01.01023456789'\");\n\n    \r\n    expr(\"TIMESTAMP '2004-12-01 12:01:01'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.1'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01'\");\n    expr(\"TIMESTAMP  '2004-12-01 12:01:01.010234567890'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01.010234567890'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.01023456789'\").same();\n\n    \r\n    sql(\"^DATE '12/21/99'^\")\n        .fails(\"(?s).*Illegal DATE literal.*\");\n    sql(\"^TIME '1230:33'^\")\n        .fails(\"(?s).*Illegal TIME literal.*\");\n    sql(\"^TIME '12:00:00 PM'^\")\n        .fails(\"(?s).*Illegal TIME literal.*\");\n    sql(\"^TIMESTAMP '12-21-99, 12:30:00'^\")\n        .fails(\"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","date":"2020-04-06 04:57:49","endLine":4295,"groupId":"10855","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testTimeDate() {\n    \r\n    expr(\"CURRENT_TIME(3)\")\n        .ok(\"CURRENT_TIME(3)\");\n\n    \r\n    \r\n\n    expr(\"CURRENT_TIME\")\n        .ok(\"CURRENT_TIME\");\n    expr(\"CURRENT_TIME(x+y)\")\n        .ok(\"CURRENT_TIME((`X` + `Y`))\");\n\n    \r\n    expr(\"LOCALTIME(3)\")\n        .ok(\"LOCALTIME(3)\");\n\n    \r\n    \r\n\n    expr(\"LOCALTIME\")\n        .ok(\"LOCALTIME\");\n    expr(\"LOCALTIME(x+y)\")\n        .ok(\"LOCALTIME((`X` + `Y`))\");\n\n    \r\n    expr(\"LOCALTIMESTAMP(3)\")\n        .ok(\"LOCALTIMESTAMP(3)\");\n\n    \r\n    \r\n\n    expr(\"LOCALTIMESTAMP\")\n        .ok(\"LOCALTIMESTAMP\");\n    expr(\"LOCALTIMESTAMP(x+y)\")\n        .ok(\"LOCALTIMESTAMP((`X` + `Y`))\");\n\n    \r\n    expr(\"CURRENT_DATE(3)\")\n        .ok(\"CURRENT_DATE(3)\");\n\n    \r\n    \r\n    expr(\"CURRENT_DATE\")\n        .ok(\"CURRENT_DATE\");\n\n    \r\n    \r\n\n    \r\n    expr(\"CURRENT_TIMESTAMP(3)\")\n        .ok(\"CURRENT_TIMESTAMP(3)\");\n\n    \r\n    \r\n\n    expr(\"CURRENT_TIMESTAMP\")\n        .ok(\"CURRENT_TIMESTAMP\");\n    expr(\"CURRENT_TIMESTAMP(x+y)\")\n        .ok(\"CURRENT_TIMESTAMP((`X` + `Y`))\");\n\n    \r\n    expr(\"DATE '2004-12-01'\")\n        .ok(\"DATE '2004-12-01'\");\n\n    \r\n    expr(\"TIME '12:01:01'\")\n        .ok(\"TIME '12:01:01'\");\n    expr(\"TIME '12:01:01.'\")\n        .ok(\"TIME '12:01:01'\");\n    expr(\"TIME '12:01:01.000'\")\n        .ok(\"TIME '12:01:01.000'\");\n    expr(\"TIME '12:01:01.001'\")\n        .ok(\"TIME '12:01:01.001'\");\n    expr(\"TIME '12:01:01.01023456789'\")\n        .ok(\"TIME '12:01:01.01023456789'\");\n\n    \r\n    expr(\"TIMESTAMP '2004-12-01 12:01:01'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.1'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01.1'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01'\");\n    expr(\"TIMESTAMP  '2004-12-01 12:01:01.010234567890'\")\n        .ok(\"TIMESTAMP '2004-12-01 12:01:01.010234567890'\");\n    expr(\"TIMESTAMP '2004-12-01 12:01:01.01023456789'\").same();\n\n    \r\n    sql(\"^DATE '12/21/99'^\")\n        .fails(\"(?s).*Illegal DATE literal.*\");\n    sql(\"^TIME '1230:33'^\")\n        .fails(\"(?s).*Illegal TIME literal.*\");\n    sql(\"^TIME '12:00:00 PM'^\")\n        .fails(\"(?s).*Illegal TIME literal.*\");\n    sql(\"^TIMESTAMP '12-21-99, 12:30:00'^\")\n        .fails(\"(?s).*Illegal TIMESTAMP literal.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4198,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
