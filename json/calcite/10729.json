[{"authorTime":"2019-04-14 18:40:21","codes":[{"authorDate":"2019-04-14 18:40:21","commitOrder":1,"curCode":"  @Test public void testCopyLocalRef() {\n    final RelDataTypeFactory sourceTypeFactory =\n        new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RelDataType type = sourceTypeFactory.createSqlType(SqlTypeName.VARCHAR, 65536);\n\n    final RelDataTypeFactory targetTypeFactory =\n        new MySqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RexBuilder builder = new RexBuilder(targetTypeFactory);\n\n    final RexLocalRef node = new RexLocalRef(0, type);\n    final RexNode copy = builder.copy(node);\n    assertTrue(copy instanceof RexLocalRef);\n\n    final RexLocalRef result = (RexLocalRef) copy;\n    assertThat(result.getIndex(), is(node.getIndex()));\n    assertThat(result.getType().getSqlTypeName(), is(SqlTypeName.VARCHAR));\n    assertThat(result.getType().getPrecision(), is(PRECISION));\n  }\n","date":"2019-04-27 21:50:19","endLine":674,"groupId":"12691","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCopyLocalRef","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/78/0469a9c3069dc118c1fc619ec1fbb2d568f368.src","preCode":"  @Test public void testCopyLocalRef() {\n    final RelDataTypeFactory sourceTypeFactory =\n        new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RelDataType type = sourceTypeFactory.createSqlType(SqlTypeName.VARCHAR, 65536);\n\n    final RelDataTypeFactory targetTypeFactory =\n        new MySqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RexBuilder builder = new RexBuilder(targetTypeFactory);\n\n    final RexLocalRef node = new RexLocalRef(0, type);\n    final RexNode copy = builder.copy(node);\n    assertTrue(copy instanceof RexLocalRef);\n\n    final RexLocalRef result = (RexLocalRef) copy;\n    assertThat(result.getIndex(), is(node.getIndex()));\n    assertThat(result.getType().getSqlTypeName(), is(SqlTypeName.VARCHAR));\n    assertThat(result.getType().getPrecision(), is(PRECISION));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":657,"status":"B"},{"authorDate":"2019-04-14 18:40:21","commitOrder":1,"curCode":"  @Test public void testCopyDynamicParam() {\n    final RelDataTypeFactory sourceTypeFactory =\n        new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RelDataType type = sourceTypeFactory.createSqlType(SqlTypeName.VARCHAR, 65536);\n\n    final RelDataTypeFactory targetTypeFactory =\n        new MySqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RexBuilder builder = new RexBuilder(targetTypeFactory);\n\n    final RexDynamicParam node = builder.makeDynamicParam(type, 0);\n    final RexNode copy = builder.copy(node);\n    assertTrue(copy instanceof RexDynamicParam);\n\n    final RexDynamicParam result = (RexDynamicParam) copy;\n    assertThat(result.getIndex(), is(node.getIndex()));\n    assertThat(result.getType().getSqlTypeName(), is(SqlTypeName.VARCHAR));\n    assertThat(result.getType().getPrecision(), is(PRECISION));\n  }\n","date":"2019-04-27 21:50:19","endLine":694,"groupId":"12695","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCopyDynamicParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/78/0469a9c3069dc118c1fc619ec1fbb2d568f368.src","preCode":"  @Test public void testCopyDynamicParam() {\n    final RelDataTypeFactory sourceTypeFactory =\n        new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RelDataType type = sourceTypeFactory.createSqlType(SqlTypeName.VARCHAR, 65536);\n\n    final RelDataTypeFactory targetTypeFactory =\n        new MySqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RexBuilder builder = new RexBuilder(targetTypeFactory);\n\n    final RexDynamicParam node = builder.makeDynamicParam(type, 0);\n    final RexNode copy = builder.copy(node);\n    assertTrue(copy instanceof RexDynamicParam);\n\n    final RexDynamicParam result = (RexDynamicParam) copy;\n    assertThat(result.getIndex(), is(node.getIndex()));\n    assertThat(result.getType().getSqlTypeName(), is(SqlTypeName.VARCHAR));\n    assertThat(result.getType().getPrecision(), is(PRECISION));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":677,"status":"B"}],"commitId":"a3f81bb7b088fd8c1d0c1df3b0f2b0cf122633de","commitMessage":"@@@[CALCITE-2998] RexCopier should support all rex types (Chunwei Lei.  Alexander Shilov)\n\nClose apache/calcite#1164\nClose apache/calcite#969\n","date":"2019-04-27 21:50:19","modifiedFileCount":"2","status":"B","submitter":"Chunwei Lei"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testCopyLocalRef() {\n    final RelDataTypeFactory sourceTypeFactory =\n        new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RelDataType type = sourceTypeFactory.createSqlType(SqlTypeName.VARCHAR, 65536);\n\n    final RelDataTypeFactory targetTypeFactory =\n        new MySqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RexBuilder builder = new RexBuilder(targetTypeFactory);\n\n    final RexLocalRef node = new RexLocalRef(0, type);\n    final RexNode copy = builder.copy(node);\n    assertTrue(copy instanceof RexLocalRef);\n\n    final RexLocalRef result = (RexLocalRef) copy;\n    assertThat(result.getIndex(), is(node.getIndex()));\n    assertThat(result.getType().getSqlTypeName(), is(SqlTypeName.VARCHAR));\n    assertThat(result.getType().getPrecision(), is(PRECISION));\n  }\n","date":"2020-04-06 04:57:49","endLine":685,"groupId":"10729","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCopyLocalRef","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8c/8275535d464dbb0ef1603cd21a505c1bdbd9c5.src","preCode":"  @Test public void testCopyLocalRef() {\n    final RelDataTypeFactory sourceTypeFactory =\n        new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RelDataType type = sourceTypeFactory.createSqlType(SqlTypeName.VARCHAR, 65536);\n\n    final RelDataTypeFactory targetTypeFactory =\n        new MySqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RexBuilder builder = new RexBuilder(targetTypeFactory);\n\n    final RexLocalRef node = new RexLocalRef(0, type);\n    final RexNode copy = builder.copy(node);\n    assertTrue(copy instanceof RexLocalRef);\n\n    final RexLocalRef result = (RexLocalRef) copy;\n    assertThat(result.getIndex(), is(node.getIndex()));\n    assertThat(result.getType().getSqlTypeName(), is(SqlTypeName.VARCHAR));\n    assertThat(result.getType().getPrecision(), is(PRECISION));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":668,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testCopyDynamicParam() {\n    final RelDataTypeFactory sourceTypeFactory =\n        new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RelDataType type = sourceTypeFactory.createSqlType(SqlTypeName.VARCHAR, 65536);\n\n    final RelDataTypeFactory targetTypeFactory =\n        new MySqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RexBuilder builder = new RexBuilder(targetTypeFactory);\n\n    final RexDynamicParam node = builder.makeDynamicParam(type, 0);\n    final RexNode copy = builder.copy(node);\n    assertTrue(copy instanceof RexDynamicParam);\n\n    final RexDynamicParam result = (RexDynamicParam) copy;\n    assertThat(result.getIndex(), is(node.getIndex()));\n    assertThat(result.getType().getSqlTypeName(), is(SqlTypeName.VARCHAR));\n    assertThat(result.getType().getPrecision(), is(PRECISION));\n  }\n","date":"2020-04-06 04:57:49","endLine":705,"groupId":"10729","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCopyDynamicParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8c/8275535d464dbb0ef1603cd21a505c1bdbd9c5.src","preCode":"  @Test public void testCopyDynamicParam() {\n    final RelDataTypeFactory sourceTypeFactory =\n        new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    RelDataType type = sourceTypeFactory.createSqlType(SqlTypeName.VARCHAR, 65536);\n\n    final RelDataTypeFactory targetTypeFactory =\n        new MySqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n    final RexBuilder builder = new RexBuilder(targetTypeFactory);\n\n    final RexDynamicParam node = builder.makeDynamicParam(type, 0);\n    final RexNode copy = builder.copy(node);\n    assertTrue(copy instanceof RexDynamicParam);\n\n    final RexDynamicParam result = (RexDynamicParam) copy;\n    assertThat(result.getIndex(), is(node.getIndex()));\n    assertThat(result.getType().getSqlTypeName(), is(SqlTypeName.VARCHAR));\n    assertThat(result.getType().getPrecision(), is(PRECISION));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":688,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
