[{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"    public RelNode convert(RelNode rel) {\n      final EnumerableProject project = (EnumerableProject) rel;\n\n      return new JdbcRules.JdbcProject(\n          rel.getCluster(),\n          rel.getTraitSet().replace(getOutConvention()),\n          convert(project.getInput(),\n              project.getInput().getTraitSet().replace(getOutConvention())),\n          project.getProjects(),\n          project.getRowType(),\n          Project.Flags.BOXED);\n    }\n","date":"2014-11-14 10:22:06","endLine":763,"groupId":"10665","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/202f8082780b2f01c7022a346113e884c0c732.src","preCode":"    public RelNode convert(RelNode rel) {\n      final EnumerableProject project = (EnumerableProject) rel;\n\n      return new JdbcRules.JdbcProject(\n          rel.getCluster(),\n          rel.getTraitSet().replace(getOutConvention()),\n          convert(project.getInput(),\n              project.getInput().getTraitSet().replace(getOutConvention())),\n          project.getProjects(),\n          project.getRowType(),\n          Project.Flags.BOXED);\n    }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":752,"status":"MB"},{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  public RelNode convert(RelNode rel) {\n    final LogicalProject project = (LogicalProject) rel;\n\n    if (EnumUtils.B\n        && RexMultisetUtil.containsMultiset(project.getProjects(), true)\n        || RexOver.containsOver(project.getProjects(), null)) {\n      return null;\n    }\n\n    return new EnumerableProject(\n        rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(\n            project.getInput(),\n            project.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        project.getProjects(),\n        project.getRowType(),\n        Project.Flags.BOXED);\n  }\n","date":"2014-11-14 10:22:06","endLine":56,"groupId":"7786","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/91/9856ca707876047498c936923839b5b5e4f90f.src","preCode":"  public RelNode convert(RelNode rel) {\n    final LogicalProject project = (LogicalProject) rel;\n\n    if (EnumUtils.B\n        && RexMultisetUtil.containsMultiset(project.getProjects(), true)\n        || RexOver.containsOver(project.getProjects(), null)) {\n      return null;\n    }\n\n    return new EnumerableProject(\n        rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(\n            project.getInput(),\n            project.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        project.getProjects(),\n        project.getRowType(),\n        Project.Flags.BOXED);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"}],"commitId":"a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55","commitMessage":"@@@[CALCITE-306] Standardize code style for \"import package.*;\"\n\nRename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].\n\nMake many inner classes of EnumerableRules (e.g. EnumerableFilter.  EnumerableFilterRule) top-level classes.\n\nApply a consistent formatting convention for string literals split over multiple lines.\n\nRename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.\n\nChange occurrences of \"optiq\" and \"eigenbase\" in java code to \"calcite\".\n","date":"2014-11-14 10:22:06","modifiedFileCount":"1156","status":"M","submitter":"Julian Hyde"},{"authorTime":"2014-12-30 09:40:39","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":3,"curCode":"    public RelNode convert(RelNode rel) {\n      final EnumerableProject project = (EnumerableProject) rel;\n\n      return new JdbcRules.JdbcProject(\n          rel.getCluster(),\n          rel.getTraitSet().replace(getOutConvention()),\n          convert(project.getInput(),\n              project.getInput().getTraitSet().replace(getOutConvention())),\n          project.getProjects(),\n          project.getRowType(),\n          Project.Flags.BOXED);\n    }\n","date":"2014-11-14 10:22:06","endLine":763,"groupId":"10665","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/202f8082780b2f01c7022a346113e884c0c732.src","preCode":"    public RelNode convert(RelNode rel) {\n      final EnumerableProject project = (EnumerableProject) rel;\n\n      return new JdbcRules.JdbcProject(\n          rel.getCluster(),\n          rel.getTraitSet().replace(getOutConvention()),\n          convert(project.getInput(),\n              project.getInput().getTraitSet().replace(getOutConvention())),\n          project.getProjects(),\n          project.getRowType(),\n          Project.Flags.BOXED);\n    }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":752,"status":"N"},{"authorDate":"2014-12-30 09:40:39","commitOrder":3,"curCode":"  public RelNode convert(RelNode rel) {\n    final LogicalProject project = (LogicalProject) rel;\n    return new EnumerableProject(rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(project.getInput(),\n            project.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        project.getProjects(),\n        project.getRowType(),\n        Project.Flags.BOXED);\n  }\n","date":"2015-01-22 07:57:37","endLine":46,"groupId":"7786","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/15/8365cdfaac80584b25429239639a8dd13c63d6.src","preCode":"  public RelNode convert(RelNode rel) {\n    final LogicalProject project = (LogicalProject) rel;\n\n    if (EnumUtils.B\n        && RexMultisetUtil.containsMultiset(project.getProjects(), true)\n        || RexOver.containsOver(project.getProjects(), null)) {\n      return null;\n    }\n\n    return new EnumerableProject(\n        rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(\n            project.getInput(),\n            project.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        project.getProjects(),\n        project.getRowType(),\n        Project.Flags.BOXED);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"66cfb120fca58e4c809748e2bcef4d3d5a7c6b82","commitMessage":"@@@[CALCITE-544] Implement Union in Interpreter;\n[CALCITE-562] Implement inner JOIN in interpreter and improve handling of scalar expressions\n\nAlso.  progress towards [CALCITE-558] Add BINDABLE convention and make it the default convention for query root.  but currently ENUMERABLE is still the default. You can enable BINDABLE by setting CalcitePrepareImpl.ENABLE_BINDABLE; there are 184 test failures.\n\nNew interface ArrayBindable extends Bindable. Unlike Bindable the return is guaranteed to be an Object[]. Enumerable convention expects generated code to return a Bindable.  which might return custom classes or arrays.  and if there is a single column.  the array is optimized to the raw column value. Bindable convention assumes that relational expressions implement ArrayBindable and return arrays of column values; the arrays are not optimized if there is only one column.\n\nNew interface Scalar represents a compiled way to execute a scalar expression (or expressions) and is easily built from a RexNode or AggregateCall.\n\nClose apache/incubator-calcite#43\n","date":"2015-01-22 07:57:37","modifiedFileCount":"53","status":"M","submitter":"Julian Hyde"},{"authorTime":"2015-01-31 08:23:19","codes":[{"authorDate":"2015-01-31 08:23:19","commitOrder":4,"curCode":"    public RelNode convert(RelNode rel) {\n      final EnumerableProject project = (EnumerableProject) rel;\n\n      return new JdbcRules.JdbcProject(\n          rel.getCluster(),\n          rel.getTraitSet().replace(getOutConvention()),\n          convert(project.getInput(),\n              project.getInput().getTraitSet().replace(getOutConvention())),\n          project.getProjects(),\n          project.getRowType());\n    }\n","date":"2015-02-07 04:10:34","endLine":793,"groupId":"10665","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/43/42c198995f43dd78e6a851b2e23e93a2af16ae.src","preCode":"    public RelNode convert(RelNode rel) {\n      final EnumerableProject project = (EnumerableProject) rel;\n\n      return new JdbcRules.JdbcProject(\n          rel.getCluster(),\n          rel.getTraitSet().replace(getOutConvention()),\n          convert(project.getInput(),\n              project.getInput().getTraitSet().replace(getOutConvention())),\n          project.getProjects(),\n          project.getRowType(),\n          Project.Flags.BOXED);\n    }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":783,"status":"M"},{"authorDate":"2015-01-31 08:23:19","commitOrder":4,"curCode":"  public RelNode convert(RelNode rel) {\n    final LogicalProject project = (LogicalProject) rel;\n    return new EnumerableProject(rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(project.getInput(),\n            project.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        project.getProjects(),\n        project.getRowType());\n  }\n","date":"2015-02-07 04:10:34","endLine":44,"groupId":"7786","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b7/dcc692b7c02f6378ef5263fcc4d7ac1d4edbe2.src","preCode":"  public RelNode convert(RelNode rel) {\n    final LogicalProject project = (LogicalProject) rel;\n    return new EnumerableProject(rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(project.getInput(),\n            project.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        project.getProjects(),\n        project.getRowType(),\n        Project.Flags.BOXED);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"5a6d32a2a0dcc48c25dda51d350b76c9c8bf6d10","commitMessage":"@@@[CALCITE-572] Remove Project.flags\n","date":"2015-02-07 04:10:34","modifiedFileCount":"18","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2015-07-10 06:36:03","codes":[{"authorDate":"2015-01-31 08:23:19","commitOrder":5,"curCode":"    public RelNode convert(RelNode rel) {\n      final EnumerableProject project = (EnumerableProject) rel;\n\n      return new JdbcRules.JdbcProject(\n          rel.getCluster(),\n          rel.getTraitSet().replace(getOutConvention()),\n          convert(project.getInput(),\n              project.getInput().getTraitSet().replace(getOutConvention())),\n          project.getProjects(),\n          project.getRowType());\n    }\n","date":"2015-02-07 04:10:34","endLine":793,"groupId":"10665","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/43/42c198995f43dd78e6a851b2e23e93a2af16ae.src","preCode":"    public RelNode convert(RelNode rel) {\n      final EnumerableProject project = (EnumerableProject) rel;\n\n      return new JdbcRules.JdbcProject(\n          rel.getCluster(),\n          rel.getTraitSet().replace(getOutConvention()),\n          convert(project.getInput(),\n              project.getInput().getTraitSet().replace(getOutConvention())),\n          project.getProjects(),\n          project.getRowType());\n    }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":783,"status":"N"},{"authorDate":"2015-07-10 06:36:03","commitOrder":5,"curCode":"  public RelNode convert(RelNode rel) {\n    final LogicalProject project = (LogicalProject) rel;\n    if (rel.getTraitSet().getTrait(RelCollationTraitDef.INSTANCE)\n        != RelCollations.PRESERVE) {\n      return EnumerableProject.create(\n          convert(project.getInput(),\n              project.getInput().getTraitSet()\n                  .replace(EnumerableConvention.INSTANCE)),\n          project.getProjects(),\n          project.getRowType());\n    }\n    \r\n    return new EnumerableProject(rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(project.getInput(),\n            project.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        project.getProjects(),\n        project.getRowType());\n  }\n","date":"2015-07-21 12:20:05","endLine":56,"groupId":"7786","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/45/9e0257483ac4abec9e4d05030e37680535e256.src","preCode":"  public RelNode convert(RelNode rel) {\n    final LogicalProject project = (LogicalProject) rel;\n    return new EnumerableProject(rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(project.getInput(),\n            project.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        project.getProjects(),\n        project.getRowType());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"9177063b5217ba01a7a34f85a0bf8e8753adeb20","commitMessage":"@@@Complete [CALCITE-783] by fixing some planner rules\n","date":"2015-07-21 12:20:05","modifiedFileCount":"12","status":"M","submitter":"Julian Hyde"},{"authorTime":"2015-08-13 16:00:09","codes":[{"authorDate":"2015-01-31 08:23:19","commitOrder":6,"curCode":"    public RelNode convert(RelNode rel) {\n      final EnumerableProject project = (EnumerableProject) rel;\n\n      return new JdbcRules.JdbcProject(\n          rel.getCluster(),\n          rel.getTraitSet().replace(getOutConvention()),\n          convert(project.getInput(),\n              project.getInput().getTraitSet().replace(getOutConvention())),\n          project.getProjects(),\n          project.getRowType());\n    }\n","date":"2015-02-07 04:10:34","endLine":793,"groupId":"10665","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/43/42c198995f43dd78e6a851b2e23e93a2af16ae.src","preCode":"    public RelNode convert(RelNode rel) {\n      final EnumerableProject project = (EnumerableProject) rel;\n\n      return new JdbcRules.JdbcProject(\n          rel.getCluster(),\n          rel.getTraitSet().replace(getOutConvention()),\n          convert(project.getInput(),\n              project.getInput().getTraitSet().replace(getOutConvention())),\n          project.getProjects(),\n          project.getRowType());\n    }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":783,"status":"N"},{"authorDate":"2015-08-13 16:00:09","commitOrder":6,"curCode":"  public RelNode convert(RelNode rel) {\n    final LogicalProject project = (LogicalProject) rel;\n    return EnumerableProject.create(\n        convert(project.getInput(),\n            project.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        project.getProjects(),\n        project.getRowType());\n  }\n","date":"2015-09-02 07:17:16","endLine":43,"groupId":"7786","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3f/998da4883d1adbf6b5143bbad82df3a2c64a62.src","preCode":"  public RelNode convert(RelNode rel) {\n    final LogicalProject project = (LogicalProject) rel;\n    if (rel.getTraitSet().getTrait(RelCollationTraitDef.INSTANCE)\n        != RelCollations.PRESERVE) {\n      return EnumerableProject.create(\n          convert(project.getInput(),\n              project.getInput().getTraitSet()\n                  .replace(EnumerableConvention.INSTANCE)),\n          project.getProjects(),\n          project.getRowType());\n    }\n    \r\n    return new EnumerableProject(rel.getCluster(),\n        rel.getTraitSet().replace(EnumerableConvention.INSTANCE),\n        convert(project.getInput(),\n            project.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        project.getProjects(),\n        project.getRowType());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"5a3970635030ddde27e4237da5d8c5c3419c34b5","commitMessage":"@@@[CALCITE-819] Add RelRoot.  a contract for the result of a relational expression\n\nRemove PRESERVE collation\n","date":"2015-09-02 07:17:16","modifiedFileCount":"36","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-07-09 05:31:40","commitOrder":7,"curCode":"    @Override public RelNode convert(RelNode rel) {\n      final EnumerableProject project = (EnumerableProject) rel;\n\n      return new JdbcRules.JdbcProject(\n          rel.getCluster(),\n          rel.getTraitSet().replace(getOutConvention()),\n          convert(project.getInput(),\n              project.getInput().getTraitSet().replace(getOutConvention())),\n          project.getProjects(),\n          project.getRowType());\n    }\n","date":"2020-07-29 02:27:24","endLine":1258,"groupId":"10665","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5d/787e4335f6bd196bd477a970de9367c8603242.src","preCode":"    public RelNode convert(RelNode rel) {\n      final EnumerableProject project = (EnumerableProject) rel;\n\n      return new JdbcRules.JdbcProject(\n          rel.getCluster(),\n          rel.getTraitSet().replace(getOutConvention()),\n          convert(project.getInput(),\n              project.getInput().getTraitSet().replace(getOutConvention())),\n          project.getProjects(),\n          project.getRowType());\n    }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1248,"status":"M"},{"authorDate":"2020-07-09 05:31:40","commitOrder":7,"curCode":"  @Override public RelNode convert(RelNode rel) {\n    final LogicalProject project = (LogicalProject) rel;\n    return EnumerableProject.create(\n        convert(project.getInput(),\n            project.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        project.getProjects(),\n        project.getRowType());\n  }\n","date":"2020-07-29 02:27:24","endLine":53,"groupId":"7786","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b5/da3cb33744c8a01f50411251e5e7c3dc35c300.src","preCode":"  public RelNode convert(RelNode rel) {\n    final LogicalProject project = (LogicalProject) rel;\n    return EnumerableProject.create(\n        convert(project.getInput(),\n            project.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        project.getProjects(),\n        project.getRowType());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"998cd83ebe2fcd7ff3ee565299fed6e199269715","commitMessage":"@@@[CALCITE-3923] Refactor how planner rules are parameterized\n\nCreate operands using a builder interface.  OperandBuilder.  and\ndeprecate methods RelOptRule.operand etc.\n\nThe change is backwards compatible.  in the sense that\nexisting rule constructors are deprecated but still work.\nFrom now on.  to create rules.  call RelOptRule.Config.toRule()\n(which calls the rule's (Config) constructor).\n\nSub-classes of ConverterRule are a little different.  They\ndon't need their own sub-class of Config.  You just need to\ncall Config.withRuleFactory to specify the constructor of the\nsub-class of ConverterRule.\n\nMove rule instances into holder classes such as CoreRules. \nMaterializedViewRules. Deprecate existing rule INSTANCE fields\n(to be removed in 1.25). Deprecate previous rule constructors\n(to be removed in 2.0).\n\nDescribe how to write rules in howto and tutorial.\n\nRemove rule instances marked 'deprecated.  to be removed before\n1.25'.\n\nClose apache/calcite#2024\n","date":"2020-07-29 02:27:24","modifiedFileCount":"191","status":"M","submitter":"Julian Hyde"},{"authorTime":"2021-01-25 21:44:11","codes":[{"authorDate":"2020-07-09 05:31:40","commitOrder":8,"curCode":"    @Override public RelNode convert(RelNode rel) {\n      final EnumerableProject project = (EnumerableProject) rel;\n\n      return new JdbcRules.JdbcProject(\n          rel.getCluster(),\n          rel.getTraitSet().replace(getOutConvention()),\n          convert(project.getInput(),\n              project.getInput().getTraitSet().replace(getOutConvention())),\n          project.getProjects(),\n          project.getRowType());\n    }\n","date":"2020-07-29 02:27:24","endLine":1258,"groupId":"10666","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5d/787e4335f6bd196bd477a970de9367c8603242.src","preCode":"    @Override public RelNode convert(RelNode rel) {\n      final EnumerableProject project = (EnumerableProject) rel;\n\n      return new JdbcRules.JdbcProject(\n          rel.getCluster(),\n          rel.getTraitSet().replace(getOutConvention()),\n          convert(project.getInput(),\n              project.getInput().getTraitSet().replace(getOutConvention())),\n          project.getProjects(),\n          project.getRowType());\n    }\n","realPath":"core/src/test/java/org/apache/calcite/tools/PlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1248,"status":"N"},{"authorDate":"2021-01-25 21:44:11","commitOrder":8,"curCode":"  @Override public RelNode convert(RelNode rel) {\n    final Project project = (Project) rel;\n    return EnumerableProject.create(\n        convert(project.getInput(),\n            project.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        project.getProjects(),\n        project.getRowType());\n  }\n","date":"2021-02-01 13:35:11","endLine":53,"groupId":"10666","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/24/9dca7c50368ed45240c430b6532f7d86b9a1e9.src","preCode":"  @Override public RelNode convert(RelNode rel) {\n    final LogicalProject project = (LogicalProject) rel;\n    return EnumerableProject.create(\n        convert(project.getInput(),\n            project.getInput().getTraitSet()\n                .replace(EnumerableConvention.INSTANCE)),\n        project.getProjects(),\n        project.getRowType());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"1bf6b08a81f471f979e1b52174f225f03ff77a2e","commitMessage":"@@@[CALCITE-4461] Do not use `Logical` nodes inside Enumerable rules (Vladimir Ozerov)\n","date":"2021-02-01 13:35:11","modifiedFileCount":"21","status":"M","submitter":"devozerov"}]
