[{"authorTime":"2018-07-06 04:21:59","codes":[{"authorDate":"2019-05-30 06:06:47","commitOrder":5,"curCode":"  @Override protected RelDataType deriveRowType() {\n    final List<RelDataType> inputRowTypes =\n            Lists.transform(getInputs(), RelNode::getRowType);\n    final RelDataType rowType =\n            getCluster().getTypeFactory().leastRestrictive(inputRowTypes);\n    if (rowType == null) {\n      throw new IllegalArgumentException(\"Cannot compute compatible row type \"\n              + \"for arguments: \"\n              + Util.sepList(inputRowTypes, \", \"));\n    }\n    return rowType;\n  }\n","date":"2019-05-30 06:43:34","endLine":117,"groupId":"11169","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deriveRowType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/37/e00ddb275d75794171aebef64f8496a356a73d.src","preCode":"  @Override protected RelDataType deriveRowType() {\n    final List<RelDataType> inputRowTypes =\n            Lists.transform(getInputs(), RelNode::getRowType);\n    final RelDataType rowType =\n            getCluster().getTypeFactory().leastRestrictive(inputRowTypes);\n    if (rowType == null) {\n      throw new IllegalArgumentException(\"Cannot compute compatible row type \"\n              + \"for arguments: \"\n              + Util.sepList(inputRowTypes, \", \"));\n    }\n    return rowType;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/RepeatUnion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2018-07-06 04:21:59","commitOrder":5,"curCode":"  @Override protected RelDataType deriveRowType() {\n    final List<RelDataType> inputRowTypes =\n        Lists.transform(inputs, RelNode::getRowType);\n    final RelDataType rowType =\n        getCluster().getTypeFactory().leastRestrictive(inputRowTypes);\n    if (rowType == null) {\n      throw new IllegalArgumentException(\"Cannot compute compatible row type \"\n          + \"for arguments to set op: \"\n          + Util.sepList(inputRowTypes, \", \"));\n    }\n    return rowType;\n  }\n","date":"2018-07-09 01:16:26","endLine":114,"groupId":"11169","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deriveRowType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ee/f57c397d0a6df88d3b0b9fce63f2cf012ae875.src","preCode":"  @Override protected RelDataType deriveRowType() {\n    final List<RelDataType> inputRowTypes =\n        Lists.transform(inputs, RelNode::getRowType);\n    final RelDataType rowType =\n        getCluster().getTypeFactory().leastRestrictive(inputRowTypes);\n    if (rowType == null) {\n      throw new IllegalArgumentException(\"Cannot compute compatible row type \"\n          + \"for arguments to set op: \"\n          + Util.sepList(inputRowTypes, \", \"));\n    }\n    return rowType;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/SetOp.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"NB"}],"commitId":"73e6d05fa65f16485caca80571d1fe4fda5c7468","commitMessage":"@@@[CALCITE-2812] Add algebraic operators to allow expressing recursive queries\n\n1. Add Spool.  and RepeatUnion operators with their Logical and Enumerable counterparts as well as appropriate converter rules.\n2. Add new interface allowing to express transient tables with a sample implementation.\n3. Add new methods in RelBuilder useful for building recursive queries.\n4. Update the website with examples for building recursive queries.\n5. Add HierarchySchema allowing to express interesting hierarchies through recursive queries.\n6. Add unit tests verifying the plan created by the builder and correctness of the new operators.\n\nClose apache/calcite#1020\n","date":"2019-05-30 06:43:34","modifiedFileCount":"8","status":"M","submitter":"rubenada"},{"authorTime":"2020-09-26 22:54:58","codes":[{"authorDate":"2020-09-26 22:54:58","commitOrder":6,"curCode":"  @Override protected RelDataType deriveRowType() {\n    final List<RelDataType> inputRowTypes =\n        Util.transform(getInputs(), RelNode::getRowType);\n    final RelDataType rowType =\n        getCluster().getTypeFactory().leastRestrictive(inputRowTypes);\n    if (rowType == null) {\n      throw new IllegalArgumentException(\"Cannot compute compatible row type \"\n          + \"for arguments: \"\n          + Util.sepList(inputRowTypes, \", \"));\n    }\n    return rowType;\n  }\n","date":"2020-09-30 16:54:11","endLine":109,"groupId":"102101","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"deriveRowType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f1/419d7cf5feb4ca4151be3d0f1b7f44369bf150.src","preCode":"  @Override protected RelDataType deriveRowType() {\n    final List<RelDataType> inputRowTypes =\n        Lists.transform(getInputs(), RelNode::getRowType);\n    final RelDataType rowType =\n        getCluster().getTypeFactory().leastRestrictive(inputRowTypes);\n    if (rowType == null) {\n      throw new IllegalArgumentException(\"Cannot compute compatible row type \"\n          + \"for arguments: \"\n          + Util.sepList(inputRowTypes, \", \"));\n    }\n    return rowType;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/RepeatUnion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-09-26 22:54:58","commitOrder":6,"curCode":"  @Override protected RelDataType deriveRowType() {\n    final List<RelDataType> inputRowTypes =\n        Util.transform(inputs, RelNode::getRowType);\n    final RelDataType rowType =\n        getCluster().getTypeFactory().leastRestrictive(inputRowTypes);\n    if (rowType == null) {\n      throw new IllegalArgumentException(\"Cannot compute compatible row type \"\n          + \"for arguments to set op: \"\n          + Util.sepList(inputRowTypes, \", \"));\n    }\n    return rowType;\n  }\n","date":"2020-09-30 16:54:11","endLine":113,"groupId":"102101","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"deriveRowType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/38/1277c9aa4e931beef4da8cef18ed455fdd52a5.src","preCode":"  @Override protected RelDataType deriveRowType() {\n    final List<RelDataType> inputRowTypes =\n        Lists.transform(inputs, RelNode::getRowType);\n    final RelDataType rowType =\n        getCluster().getTypeFactory().leastRestrictive(inputRowTypes);\n    if (rowType == null) {\n      throw new IllegalArgumentException(\"Cannot compute compatible row type \"\n          + \"for arguments to set op: \"\n          + Util.sepList(inputRowTypes, \", \"));\n    }\n    return rowType;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/SetOp.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"a79dde6383325bc34bc3d92ee32176c59579221a","commitMessage":"@@@[CALCITE-4280] Replace Guava's Lists.transform and Iterables.transform with Util.transform\n","date":"2020-09-30 16:54:11","modifiedFileCount":"57","status":"M","submitter":"Vladimir Sitnikov"}]
