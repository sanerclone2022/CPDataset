[{"authorTime":"2018-05-09 16:55:41","codes":[{"authorDate":"2019-07-10 08:22:35","commitOrder":2,"curCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case SMALLINT:\n      castSpec = \"_NUMBER(5)\";\n      break;\n    case INTEGER:\n      castSpec = \"_NUMBER(10)\";\n      break;\n    case BIGINT:\n      castSpec = \"_NUMBER(19)\";\n      break;\n    case DOUBLE:\n      castSpec = \"_DOUBLE PRECISION\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(new SqlIdentifier(castSpec, SqlParserPos.ZERO),\n        -1, -1, null, null, SqlParserPos.ZERO);\n  }\n","date":"2019-07-13 06:07:34","endLine":105,"groupId":"9388","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getCastSpec","params":"(RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/14/c72da4845906257081e34e3a50b7bfeffa71ac.src","preCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case SMALLINT:\n      castSpec = \"_NUMBER(5)\";\n      break;\n    case INTEGER:\n      castSpec = \"_NUMBER(10)\";\n      break;\n    case BIGINT:\n      castSpec = \"_NUMBER(19)\";\n      break;\n    case DOUBLE:\n      castSpec = \"_DOUBLE PRECISION\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(new SqlIdentifier(castSpec, SqlParserPos.ZERO),\n        -1, -1, null, null, SqlParserPos.ZERO);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/OracleSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"},{"authorDate":"2018-05-09 16:55:41","commitOrder":2,"curCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case TINYINT:\n      \r\n      castSpec = \"_smallint\";\n      break;\n    case DOUBLE:\n      \r\n      castSpec = \"_double precision\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(new SqlIdentifier(castSpec, SqlParserPos.ZERO),\n        -1, -1, null, null, SqlParserPos.ZERO);\n  }\n","date":"2018-05-12 01:26:33","endLine":66,"groupId":"9388","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getCastSpec","params":"(RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/61/028a9e2a0ced9fcc575433145ede11f201f313.src","preCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case TINYINT:\n      \r\n      castSpec = \"_smallint\";\n      break;\n    case DOUBLE:\n      \r\n      castSpec = \"_double precision\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(new SqlIdentifier(castSpec, SqlParserPos.ZERO),\n        -1, -1, null, null, SqlParserPos.ZERO);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/PostgresqlSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"NB"}],"commitId":"0732283cab7894ffdce6a22ebe5d31b28d389a4d","commitMessage":"@@@[CALCITE-3189] Multiple fixes for Oracle SQL dialect\n\nClose apache/calcite#1312\n","date":"2019-07-13 06:07:34","modifiedFileCount":"3","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2019-08-12 17:32:20","codes":[{"authorDate":"2019-08-12 17:32:20","commitOrder":3,"curCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case SMALLINT:\n      castSpec = \"_NUMBER(5)\";\n      break;\n    case INTEGER:\n      castSpec = \"_NUMBER(10)\";\n      break;\n    case BIGINT:\n      castSpec = \"_NUMBER(19)\";\n      break;\n    case DOUBLE:\n      castSpec = \"_DOUBLE PRECISION\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(\n        new SqlUserDefinedTypeNameSpec(castSpec, SqlParserPos.ZERO),\n        SqlParserPos.ZERO);\n  }\n","date":"2019-08-14 16:47:54","endLine":110,"groupId":"9388","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getCastSpec","params":"(RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/56e492bf7dd99cbc911b1ad6a6ab9e0b287ffe.src","preCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case SMALLINT:\n      castSpec = \"_NUMBER(5)\";\n      break;\n    case INTEGER:\n      castSpec = \"_NUMBER(10)\";\n      break;\n    case BIGINT:\n      castSpec = \"_NUMBER(19)\";\n      break;\n    case DOUBLE:\n      castSpec = \"_DOUBLE PRECISION\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(new SqlIdentifier(castSpec, SqlParserPos.ZERO),\n        -1, -1, null, null, SqlParserPos.ZERO);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/OracleSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2019-08-12 17:32:20","commitOrder":3,"curCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case TINYINT:\n      \r\n      castSpec = \"_smallint\";\n      break;\n    case DOUBLE:\n      \r\n      castSpec = \"_double precision\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(\n        new SqlUserDefinedTypeNameSpec(castSpec, SqlParserPos.ZERO),\n        SqlParserPos.ZERO);\n  }\n","date":"2019-08-14 16:47:54","endLine":93,"groupId":"9388","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getCastSpec","params":"(RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a8/39bb8233ef327b16a7a95d2bf12ab08b90b295.src","preCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case TINYINT:\n      \r\n      castSpec = \"_smallint\";\n      break;\n    case DOUBLE:\n      \r\n      castSpec = \"_double precision\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(new SqlIdentifier(castSpec, SqlParserPos.ZERO),\n        -1, -1, null, null, SqlParserPos.ZERO);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/PostgresqlSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"f25734a2d27f304a454a310e656ab83a5fa85890","commitMessage":"@@@[CALCITE-3238] Support Time Zone suffix of DateTime types for SqlDataTypeSpec\n","date":"2019-08-14 16:47:54","modifiedFileCount":"14","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2019-11-25 14:17:04","codes":[{"authorDate":"2019-11-25 14:17:04","commitOrder":4,"curCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case SMALLINT:\n      castSpec = \"NUMBER(5)\";\n      break;\n    case INTEGER:\n      castSpec = \"NUMBER(10)\";\n      break;\n    case BIGINT:\n      castSpec = \"NUMBER(19)\";\n      break;\n    case DOUBLE:\n      castSpec = \"DOUBLE PRECISION\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(\n        new SqlAlienSystemTypeNameSpec(castSpec, type.getSqlTypeName(), SqlParserPos.ZERO),\n        SqlParserPos.ZERO);\n  }\n","date":"2019-11-25 17:57:43","endLine":110,"groupId":"9388","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getCastSpec","params":"(RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/04/54b6b46d1d692998f4bc0bdbdaad0eaf166245.src","preCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case SMALLINT:\n      castSpec = \"_NUMBER(5)\";\n      break;\n    case INTEGER:\n      castSpec = \"_NUMBER(10)\";\n      break;\n    case BIGINT:\n      castSpec = \"_NUMBER(19)\";\n      break;\n    case DOUBLE:\n      castSpec = \"_DOUBLE PRECISION\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(\n        new SqlUserDefinedTypeNameSpec(castSpec, SqlParserPos.ZERO),\n        SqlParserPos.ZERO);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/OracleSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2019-11-25 14:17:04","commitOrder":4,"curCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case TINYINT:\n      \r\n      castSpec = \"smallint\";\n      break;\n    case DOUBLE:\n      \r\n      castSpec = \"double precision\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(\n        new SqlAlienSystemTypeNameSpec(castSpec, type.getSqlTypeName(), SqlParserPos.ZERO),\n        SqlParserPos.ZERO);\n  }\n","date":"2019-11-25 17:57:43","endLine":93,"groupId":"9388","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getCastSpec","params":"(RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4a/0bbef739ee2d99939a4aa99ead731cdaf203f2.src","preCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case TINYINT:\n      \r\n      castSpec = \"_smallint\";\n      break;\n    case DOUBLE:\n      \r\n      castSpec = \"_double precision\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(\n        new SqlUserDefinedTypeNameSpec(castSpec, SqlParserPos.ZERO),\n        SqlParserPos.ZERO);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/PostgresqlSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"07c1efbb2b42a0e27f9d01968d357d9c1e17cd51","commitMessage":"@@@[CALCITE-3534] Support parse(unparse) alien system non-standard data type\n\n* Add a new type name specification class SqlAlienSystemTypeNameSpec\n* Refactor SqlUserDefinedTypeNameSpec.  before this patch.  we use this\nclass for cases where the SqlAlienSystemTypeNameSpec should be used\n* Add more doc to SqlDataTypeSpec\n","date":"2019-11-25 17:57:43","modifiedFileCount":"7","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  @Override public @Nullable SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case SMALLINT:\n      castSpec = \"NUMBER(5)\";\n      break;\n    case INTEGER:\n      castSpec = \"NUMBER(10)\";\n      break;\n    case BIGINT:\n      castSpec = \"NUMBER(19)\";\n      break;\n    case DOUBLE:\n      castSpec = \"DOUBLE PRECISION\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(\n        new SqlAlienSystemTypeNameSpec(castSpec, type.getSqlTypeName(), SqlParserPos.ZERO),\n        SqlParserPos.ZERO);\n  }\n","date":"2020-11-30 06:45:33","endLine":112,"groupId":"101824","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getCastSpec","params":"(RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7d/e88dab2109f544d6b715402cc5046cdad121fe.src","preCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case SMALLINT:\n      castSpec = \"NUMBER(5)\";\n      break;\n    case INTEGER:\n      castSpec = \"NUMBER(10)\";\n      break;\n    case BIGINT:\n      castSpec = \"NUMBER(19)\";\n      break;\n    case DOUBLE:\n      castSpec = \"DOUBLE PRECISION\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(\n        new SqlAlienSystemTypeNameSpec(castSpec, type.getSqlTypeName(), SqlParserPos.ZERO),\n        SqlParserPos.ZERO);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/OracleSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  @Override public @Nullable SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case TINYINT:\n      \r\n      castSpec = \"smallint\";\n      break;\n    case DOUBLE:\n      \r\n      castSpec = \"double precision\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(\n        new SqlAlienSystemTypeNameSpec(castSpec, type.getSqlTypeName(), SqlParserPos.ZERO),\n        SqlParserPos.ZERO);\n  }\n","date":"2020-11-30 06:45:33","endLine":95,"groupId":"101824","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getCastSpec","params":"(RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/873737720abbc56c8e112487a5f4187dc52e1d.src","preCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    String castSpec;\n    switch (type.getSqlTypeName()) {\n    case TINYINT:\n      \r\n      castSpec = \"smallint\";\n      break;\n    case DOUBLE:\n      \r\n      castSpec = \"double precision\";\n      break;\n    default:\n      return super.getCastSpec(type);\n    }\n\n    return new SqlDataTypeSpec(\n        new SqlAlienSystemTypeNameSpec(castSpec, type.getSqlTypeName(), SqlParserPos.ZERO),\n        SqlParserPos.ZERO);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/PostgresqlSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
