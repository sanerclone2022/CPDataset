[{"authorTime":"2018-08-28 19:45:51","codes":[{"authorDate":"2019-07-26 18:41:29","commitOrder":4,"curCode":"  private void testCountWithApproxDistinct(boolean approx, String sql, String expectedExplain,\n                                           String expectedDruidQuery) {\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_DISTINCT_COUNT.camelName(), approx)\n        .query(sql)\n        .runs()\n        .explainContains(expectedExplain)\n        .queryContains(druidChecker(expectedDruidQuery));\n  }\n","date":"2019-07-26 18:41:29","endLine":2662,"groupId":"7656","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCountWithApproxDistinct","params":"(booleanapprox@Stringsql@StringexpectedExplain@StringexpectedDruidQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/02/b3ad0d5008a0228c8f3ee8b0550059f0beed2c.src","preCode":"  private void testCountWithApproxDistinct(boolean approx, String sql, String expectedExplain,\n                                           String expectedDruidQuery) {\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_DISTINCT_COUNT.camelName(), approx)\n        .query(sql)\n        .runs()\n        .explainContains(expectedExplain)\n        .queryContains(druidChecker(expectedDruidQuery));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapter2IT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2652,"status":"B"},{"authorDate":"2018-08-28 19:45:51","commitOrder":4,"curCode":"  private void testCountWithApproxDistinct(boolean approx, String sql, String expectedExplain,\n      String expectedDruidQuery) {\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_DISTINCT_COUNT, approx)\n        .query(sql)\n        .runs()\n        .explainContains(expectedExplain)\n        .queryContains(druidChecker(expectedDruidQuery));\n  }\n","date":"2018-08-29 18:21:24","endLine":2973,"groupId":"10420","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCountWithApproxDistinct","params":"(booleanapprox@Stringsql@StringexpectedExplain@StringexpectedDruidQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3a/572dd6ba0fc28314f7c4e000c350cff3eb9048.src","preCode":"  private void testCountWithApproxDistinct(boolean approx, String sql, String expectedExplain,\n      String expectedDruidQuery) {\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_DISTINCT_COUNT, approx)\n        .query(sql)\n        .runs()\n        .explainContains(expectedExplain)\n        .queryContains(druidChecker(expectedDruidQuery));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2963,"status":"NB"}],"commitId":"689a5bbb14614d3f8eef4a4f7e832c6c02029b3c","commitMessage":"@@@Update stale tests in DruidAdapter\n\n1. Adapt plans based on the improvements in the simplifier and elsewhere.\n2. Rename DruidAdapterIT2 to DruidAdapterIT to be run in integration tests.\n","date":"2019-07-26 18:41:29","modifiedFileCount":"1","status":"M","submitter":"Stamatis Zampetakis"},{"authorTime":"2019-08-31 11:11:39","codes":[{"authorDate":"2019-08-31 11:11:39","commitOrder":5,"curCode":"  private void testCountWithApproxDistinct(boolean approx, String sql, String expectedExplain,\n                                           String expectedDruidQuery) {\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_DISTINCT_COUNT.camelName(), approx)\n        .query(sql)\n        .runs()\n        .explainContains(expectedExplain)\n        .queryContains(new DruidChecker(expectedDruidQuery));\n  }\n","date":"2019-09-02 15:46:07","endLine":2646,"groupId":"10400","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCountWithApproxDistinct","params":"(booleanapprox@Stringsql@StringexpectedExplain@StringexpectedDruidQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3e/6ef8f6919ace14b6f7c152f9fe71cd49d6eac5.src","preCode":"  private void testCountWithApproxDistinct(boolean approx, String sql, String expectedExplain,\n                                           String expectedDruidQuery) {\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_DISTINCT_COUNT.camelName(), approx)\n        .query(sql)\n        .runs()\n        .explainContains(expectedExplain)\n        .queryContains(druidChecker(expectedDruidQuery));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapter2IT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2636,"status":"M"},{"authorDate":"2019-08-31 11:11:39","commitOrder":5,"curCode":"  private void testCountWithApproxDistinct(boolean approx, String sql, String expectedExplain,\n      String expectedDruidQuery) {\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_DISTINCT_COUNT, approx)\n        .query(sql)\n        .runs()\n        .explainContains(expectedExplain)\n        .queryContains(new DruidChecker(expectedDruidQuery));\n  }\n","date":"2019-09-02 15:46:07","endLine":2964,"groupId":"10400","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCountWithApproxDistinct","params":"(booleanapprox@Stringsql@StringexpectedExplain@StringexpectedDruidQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c7/b3fcca6ac021f35002e80042f0a396ddfa39ba.src","preCode":"  private void testCountWithApproxDistinct(boolean approx, String sql, String expectedExplain,\n      String expectedDruidQuery) {\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_DISTINCT_COUNT, approx)\n        .query(sql)\n        .runs()\n        .explainContains(expectedExplain)\n        .queryContains(druidChecker(expectedDruidQuery));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2954,"status":"M"}],"commitId":"48086a76578b96ac961c833075357710bd624d3e","commitMessage":"@@@[CALCITE-3315] Multiple failures in Druid IT tests due to implicit casts\n\n1. Update stale tests in DruidAdapterIT and DruidAdapter2IT following the implementation of implicit casts in CALCITE-2302.\n2. Refactor common druidChecker code in DruidAdapterIT and DruidAdapter2IT in a separate class.\n\nCo-authored-by: yuzhao.cyz <yuzhao.cyz@alibaba-inc.com>\n","date":"2019-09-02 15:46:07","modifiedFileCount":"2","status":"M","submitter":"Stamatis Zampetakis"}]
