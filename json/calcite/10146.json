[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    UnaryExpression that = (UnaryExpression) o;\n\n    if (!expression.equals(that.expression)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 09:39:34","endLine":77,"groupId":"912","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/24/49290c7b5ec9c39f5d6d847eb61c8cbb62048c.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    UnaryExpression that = (UnaryExpression) o;\n\n    if (!expression.equals(that.expression)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/UnaryExpression.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    TypeBinaryExpression that = (TypeBinaryExpression) o;\n\n    if (!expression.equals(that.expression)) {\n      return false;\n    }\n    if (type != null ? !type.equals(that.type) : that.type != null) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 09:39:34","endLine":74,"groupId":"912","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ea/c2ddf4fa247782cf67ff6ee1b1d1a4d00ae1f6.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    TypeBinaryExpression that = (TypeBinaryExpression) o;\n\n    if (!expression.equals(that.expression)) {\n      return false;\n    }\n    if (type != null ? !type.equals(that.type) : that.type != null) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/TypeBinaryExpression.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    UnaryExpression that = (UnaryExpression) o;\n\n    if (!expression.equals(that.expression)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 10:22:06","endLine":75,"groupId":"912","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ad/2d144a42f2476dfa3b56bb7c8b8e89070e5391.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    UnaryExpression that = (UnaryExpression) o;\n\n    if (!expression.equals(that.expression)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/UnaryExpression.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    TypeBinaryExpression that = (TypeBinaryExpression) o;\n\n    if (!expression.equals(that.expression)) {\n      return false;\n    }\n    if (type != null ? !type.equals(that.type) : that.type != null) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 10:22:06","endLine":72,"groupId":"912","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/52/6e1f339a1106638936582e6492619cc90c53cc.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    TypeBinaryExpression that = (TypeBinaryExpression) o;\n\n    if (!expression.equals(that.expression)) {\n      return false;\n    }\n    if (type != null ? !type.equals(that.type) : that.type != null) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/TypeBinaryExpression.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55","commitMessage":"@@@[CALCITE-306] Standardize code style for \"import package.*;\"\n\nRename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].\n\nMake many inner classes of EnumerableRules (e.g. EnumerableFilter.  EnumerableFilterRule) top-level classes.\n\nApply a consistent formatting convention for string literals split over multiple lines.\n\nRename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.\n\nChange occurrences of \"optiq\" and \"eigenbase\" in java code to \"calcite\".\n","date":"2014-11-14 10:22:06","modifiedFileCount":"1156","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public boolean equals(@Nullable Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    UnaryExpression that = (UnaryExpression) o;\n\n    if (!expression.equals(that.expression)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2020-11-30 06:45:33","endLine":84,"groupId":"10146","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"equals","params":"(@NullableObjecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4e/30d69f42726b785f61080f9d9d627c9fb5dda6.src","preCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    UnaryExpression that = (UnaryExpression) o;\n\n    if (!expression.equals(that.expression)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/UnaryExpression.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public boolean equals(@Nullable Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    TypeBinaryExpression that = (TypeBinaryExpression) o;\n\n    if (!expression.equals(that.expression)) {\n      return false;\n    }\n    if (type != null ? !type.equals(that.type) : that.type != null) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2020-11-30 06:45:33","endLine":80,"groupId":"10146","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"equals","params":"(@NullableObjecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c9/06a121697276d91007aadaa92395b6e68b43ca.src","preCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    TypeBinaryExpression that = (TypeBinaryExpression) o;\n\n    if (!expression.equals(that.expression)) {\n      return false;\n    }\n    if (type != null ? !type.equals(that.type) : that.type != null) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/TypeBinaryExpression.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
