[{"authorTime":"2015-10-28 13:04:05","codes":[{"authorDate":"2019-12-04 17:46:23","commitOrder":4,"curCode":"    public boolean checkSingleOperandType(\n        SqlCallBinding callBinding,\n        SqlNode node,\n        int iFormalOperand,\n        boolean throwOnFailure) {\n      assert 0 == iFormalOperand;\n      RelDataType type =\n          callBinding.getValidator().deriveType(\n              callBinding.getScope(),\n              node);\n      boolean validationError = false;\n      if (!type.isStruct()) {\n        validationError = true;\n      } else if (type.getFieldList().size() != 1) {\n        validationError = true;\n      } else {\n        SqlTypeName typeName =\n            type.getFieldList().get(0).getType().getSqlTypeName();\n        if (typeNamePredicate.test(typeName)) {\n          validationError = true;\n        }\n      }\n\n      if (validationError && throwOnFailure) {\n        throw callBinding.newValidationSignatureError();\n      }\n      return !validationError;\n    }\n","date":"2019-12-05 08:26:54","endLine":567,"groupId":"15515","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkSingleOperandType","params":"(SqlCallBindingcallBinding@SqlNodenode@intiFormalOperand@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/39/32baeb6cd686227d4cae047115ecb3b5f10c11.src","preCode":"    public boolean checkSingleOperandType(\n        SqlCallBinding callBinding,\n        SqlNode node,\n        int iFormalOperand,\n        boolean throwOnFailure) {\n      assert 0 == iFormalOperand;\n      RelDataType type =\n          callBinding.getValidator().deriveType(\n              callBinding.getScope(),\n              node);\n      boolean validationError = false;\n      if (!type.isStruct()) {\n        validationError = true;\n      } else if (type.getFieldList().size() != 1) {\n        validationError = true;\n      } else {\n        SqlTypeName typeName =\n            type.getFieldList().get(0).getType().getSqlTypeName();\n        if (typeNamePredicate.test(typeName)) {\n          validationError = true;\n        }\n      }\n\n      if (validationError && throwOnFailure) {\n        throw callBinding.newValidationSignatureError();\n      }\n      return !validationError;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"B"},{"authorDate":"2015-10-28 13:04:05","commitOrder":4,"curCode":"      new SqlSingleOperandTypeChecker() {\n        public boolean checkSingleOperandType(\n            SqlCallBinding callBinding,\n            SqlNode node,\n            int iFormalOperand,\n            boolean throwOnFailure) {\n          assert 0 == iFormalOperand;\n          RelDataType type =\n              callBinding.getValidator().deriveType(\n                  callBinding.getScope(),\n                  node);\n          boolean validationError = false;\n          if (!type.isStruct()) {\n            validationError = true;\n          } else if (type.getFieldList().size() != 1) {\n            validationError = true;\n          }\n\n          if (validationError && throwOnFailure) {\n            throw callBinding.newValidationSignatureError();\n          }\n          return !validationError;\n        }\n\n        public boolean checkOperandTypes(\n            SqlCallBinding callBinding,\n            boolean throwOnFailure) {\n          return checkSingleOperandType(\n              callBinding,\n              callBinding.operand(0),\n              0,\n              throwOnFailure);\n        }\n\n        public SqlOperandCountRange getOperandCountRange() {\n          return SqlOperandCountRanges.of(1);\n        }\n\n        public String getAllowedSignatures(SqlOperator op, String opName) {\n          return SqlUtil.getAliasedSignature(op, opName,\n              ImmutableList.of(\"RECORDTYPE(SINGLE FIELD)\"));\n        }\n\n        public boolean isOptional(int i) {\n          return false;\n        }\n\n        public Consistency getConsistency() {\n          return Consistency.NONE;\n        }\n      };\n","date":"2015-11-01 06:09:05","endLine":583,"groupId":"16491","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"RECORD_TO_SCALAR","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ea/fd7c6cabc0e4c2051990887a77fb96f150a1df.src","preCode":"      new SqlSingleOperandTypeChecker() {\n        public boolean checkSingleOperandType(\n            SqlCallBinding callBinding,\n            SqlNode node,\n            int iFormalOperand,\n            boolean throwOnFailure) {\n          assert 0 == iFormalOperand;\n          RelDataType type =\n              callBinding.getValidator().deriveType(\n                  callBinding.getScope(),\n                  node);\n          boolean validationError = false;\n          if (!type.isStruct()) {\n            validationError = true;\n          } else if (type.getFieldList().size() != 1) {\n            validationError = true;\n          }\n\n          if (validationError && throwOnFailure) {\n            throw callBinding.newValidationSignatureError();\n          }\n          return !validationError;\n        }\n\n        public boolean checkOperandTypes(\n            SqlCallBinding callBinding,\n            boolean throwOnFailure) {\n          return checkSingleOperandType(\n              callBinding,\n              callBinding.operand(0),\n              0,\n              throwOnFailure);\n        }\n\n        public SqlOperandCountRange getOperandCountRange() {\n          return SqlOperandCountRanges.of(1);\n        }\n\n        public String getAllowedSignatures(SqlOperator op, String opName) {\n          return SqlUtil.getAliasedSignature(op, opName,\n              ImmutableList.of(\"RECORDTYPE(SINGLE FIELD)\"));\n        }\n\n        public boolean isOptional(int i) {\n          return false;\n        }\n\n        public Consistency getConsistency() {\n          return Consistency.NONE;\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":533,"status":"NB"}],"commitId":"560d8951279fddb305626fd3d188b88fbf88b1f9","commitMessage":"@@@[CALCITE-3567] Unnest support Map wrapped with RecordType (Wang Yanlin)\n","date":"2019-12-05 08:26:54","modifiedFileCount":"2","status":"M","submitter":"yanlin-Lynn"},{"authorTime":"2020-09-28 02:45:26","codes":[{"authorDate":"2020-09-28 02:45:26","commitOrder":5,"curCode":"    public boolean checkSingleOperandType(\n        SqlCallBinding callBinding,\n        SqlNode node,\n        int iFormalOperand,\n        boolean throwOnFailure) {\n      assert 0 == iFormalOperand;\n      RelDataType type = SqlTypeUtil.deriveType(callBinding, node);\n      boolean validationError = false;\n      if (!type.isStruct()) {\n        validationError = true;\n      } else if (type.getFieldList().size() != 1) {\n        validationError = true;\n      } else {\n        SqlTypeName typeName =\n            type.getFieldList().get(0).getType().getSqlTypeName();\n        if (typeNamePredicate.test(typeName)) {\n          validationError = true;\n        }\n      }\n\n      if (validationError && throwOnFailure) {\n        throw callBinding.newValidationSignatureError();\n      }\n      return !validationError;\n    }\n","date":"2020-09-30 16:51:12","endLine":602,"groupId":"15515","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkSingleOperandType","params":"(SqlCallBindingcallBinding@SqlNodenode@intiFormalOperand@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ab/b6fb8786870ce27369bc9e2156ea0e6a50d2a3.src","preCode":"    public boolean checkSingleOperandType(\n        SqlCallBinding callBinding,\n        SqlNode node,\n        int iFormalOperand,\n        boolean throwOnFailure) {\n      assert 0 == iFormalOperand;\n      RelDataType type =\n          callBinding.getValidator().deriveType(\n              callBinding.getScope(),\n              node);\n      boolean validationError = false;\n      if (!type.isStruct()) {\n        validationError = true;\n      } else if (type.getFieldList().size() != 1) {\n        validationError = true;\n      } else {\n        SqlTypeName typeName =\n            type.getFieldList().get(0).getType().getSqlTypeName();\n        if (typeNamePredicate.test(typeName)) {\n          validationError = true;\n        }\n      }\n\n      if (validationError && throwOnFailure) {\n        throw callBinding.newValidationSignatureError();\n      }\n      return !validationError;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"M"},{"authorDate":"2020-09-28 02:45:26","commitOrder":5,"curCode":"      new SqlSingleOperandTypeChecker() {\n        public boolean checkSingleOperandType(\n            SqlCallBinding callBinding,\n            SqlNode node,\n            int iFormalOperand,\n            boolean throwOnFailure) {\n          assert 0 == iFormalOperand;\n          RelDataType type = SqlTypeUtil.deriveType(callBinding, node);\n          boolean validationError = false;\n          if (!type.isStruct()) {\n            validationError = true;\n          } else if (type.getFieldList().size() != 1) {\n            validationError = true;\n          }\n\n          if (validationError && throwOnFailure) {\n            throw callBinding.newValidationSignatureError();\n          }\n          return !validationError;\n        }\n\n        public boolean checkOperandTypes(\n            SqlCallBinding callBinding,\n            boolean throwOnFailure) {\n          return checkSingleOperandType(\n              callBinding,\n              callBinding.operand(0),\n              0,\n              throwOnFailure);\n        }\n\n        public SqlOperandCountRange getOperandCountRange() {\n          return SqlOperandCountRanges.of(1);\n        }\n\n        public String getAllowedSignatures(SqlOperator op, String opName) {\n          return SqlUtil.getAliasedSignature(op, opName,\n              ImmutableList.of(\"RECORDTYPE(SINGLE FIELD)\"));\n        }\n\n        public boolean isOptional(int i) {\n          return false;\n        }\n\n        public Consistency getConsistency() {\n          return Consistency.NONE;\n        }\n      };\n","date":"2020-09-30 16:51:12","endLine":703,"groupId":"16491","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"RECORD_TO_SCALAR","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ab/b6fb8786870ce27369bc9e2156ea0e6a50d2a3.src","preCode":"      new SqlSingleOperandTypeChecker() {\n        public boolean checkSingleOperandType(\n            SqlCallBinding callBinding,\n            SqlNode node,\n            int iFormalOperand,\n            boolean throwOnFailure) {\n          assert 0 == iFormalOperand;\n          RelDataType type =\n              callBinding.getValidator().deriveType(\n                  callBinding.getScope(),\n                  node);\n          boolean validationError = false;\n          if (!type.isStruct()) {\n            validationError = true;\n          } else if (type.getFieldList().size() != 1) {\n            validationError = true;\n          }\n\n          if (validationError && throwOnFailure) {\n            throw callBinding.newValidationSignatureError();\n          }\n          return !validationError;\n        }\n\n        public boolean checkOperandTypes(\n            SqlCallBinding callBinding,\n            boolean throwOnFailure) {\n          return checkSingleOperandType(\n              callBinding,\n              callBinding.operand(0),\n              0,\n              throwOnFailure);\n        }\n\n        public SqlOperandCountRange getOperandCountRange() {\n          return SqlOperandCountRanges.of(1);\n        }\n\n        public String getAllowedSignatures(SqlOperator op, String opName) {\n          return SqlUtil.getAliasedSignature(op, opName,\n              ImmutableList.of(\"RECORDTYPE(SINGLE FIELD)\"));\n        }\n\n        public boolean isOptional(int i) {\n          return false;\n        }\n\n        public Consistency getConsistency() {\n          return Consistency.NONE;\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":656,"status":"M"}],"commitId":"14d5e3b0dfdba70a24cb5486275a1c973efa347c","commitMessage":"@@@[CALCITE-4288] Create SqlTypeUtil#deriveType(SqlCallBinding) to make type computation simpler\n","date":"2020-09-30 16:51:12","modifiedFileCount":"16","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":6,"curCode":"    @Override public boolean checkSingleOperandType(\n        SqlCallBinding callBinding,\n        SqlNode node,\n        int iFormalOperand,\n        boolean throwOnFailure) {\n      assert 0 == iFormalOperand;\n      RelDataType type = SqlTypeUtil.deriveType(callBinding, node);\n      boolean validationError = false;\n      if (!type.isStruct()) {\n        validationError = true;\n      } else if (type.getFieldList().size() != 1) {\n        validationError = true;\n      } else {\n        SqlTypeName typeName =\n            type.getFieldList().get(0).getType().getSqlTypeName();\n        if (typeNamePredicate.test(typeName)) {\n          validationError = true;\n        }\n      }\n\n      if (validationError && throwOnFailure) {\n        throw callBinding.newValidationSignatureError();\n      }\n      return !validationError;\n    }\n","date":"2020-10-07 05:42:47","endLine":602,"groupId":"121820","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkSingleOperandType","params":"(SqlCallBindingcallBinding@SqlNodenode@intiFormalOperand@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e0/e1353147b05b070a5467e7ae67085b3c8e5cfa.src","preCode":"    public boolean checkSingleOperandType(\n        SqlCallBinding callBinding,\n        SqlNode node,\n        int iFormalOperand,\n        boolean throwOnFailure) {\n      assert 0 == iFormalOperand;\n      RelDataType type = SqlTypeUtil.deriveType(callBinding, node);\n      boolean validationError = false;\n      if (!type.isStruct()) {\n        validationError = true;\n      } else if (type.getFieldList().size() != 1) {\n        validationError = true;\n      } else {\n        SqlTypeName typeName =\n            type.getFieldList().get(0).getType().getSqlTypeName();\n        if (typeNamePredicate.test(typeName)) {\n          validationError = true;\n        }\n      }\n\n      if (validationError && throwOnFailure) {\n        throw callBinding.newValidationSignatureError();\n      }\n      return !validationError;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":6,"curCode":"      new SqlSingleOperandTypeChecker() {\n        @Override public boolean checkSingleOperandType(\n            SqlCallBinding callBinding,\n            SqlNode node,\n            int iFormalOperand,\n            boolean throwOnFailure) {\n          assert 0 == iFormalOperand;\n          RelDataType type = SqlTypeUtil.deriveType(callBinding, node);\n          boolean validationError = false;\n          if (!type.isStruct()) {\n            validationError = true;\n          } else if (type.getFieldList().size() != 1) {\n            validationError = true;\n          }\n\n          if (validationError && throwOnFailure) {\n            throw callBinding.newValidationSignatureError();\n          }\n          return !validationError;\n        }\n\n        @Override public boolean checkOperandTypes(\n            SqlCallBinding callBinding,\n            boolean throwOnFailure) {\n          return checkSingleOperandType(\n              callBinding,\n              callBinding.operand(0),\n              0,\n              throwOnFailure);\n        }\n\n        @Override public SqlOperandCountRange getOperandCountRange() {\n          return SqlOperandCountRanges.of(1);\n        }\n\n        @Override public String getAllowedSignatures(SqlOperator op, String opName) {\n          return SqlUtil.getAliasedSignature(op, opName,\n              ImmutableList.of(\"RECORDTYPE(SINGLE FIELD)\"));\n        }\n\n        @Override public boolean isOptional(int i) {\n          return false;\n        }\n\n        @Override public Consistency getConsistency() {\n          return Consistency.NONE;\n        }\n      };\n","date":"2020-10-07 05:42:47","endLine":703,"groupId":"121820","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"RECORD_TO_SCALAR","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e0/e1353147b05b070a5467e7ae67085b3c8e5cfa.src","preCode":"      new SqlSingleOperandTypeChecker() {\n        public boolean checkSingleOperandType(\n            SqlCallBinding callBinding,\n            SqlNode node,\n            int iFormalOperand,\n            boolean throwOnFailure) {\n          assert 0 == iFormalOperand;\n          RelDataType type = SqlTypeUtil.deriveType(callBinding, node);\n          boolean validationError = false;\n          if (!type.isStruct()) {\n            validationError = true;\n          } else if (type.getFieldList().size() != 1) {\n            validationError = true;\n          }\n\n          if (validationError && throwOnFailure) {\n            throw callBinding.newValidationSignatureError();\n          }\n          return !validationError;\n        }\n\n        public boolean checkOperandTypes(\n            SqlCallBinding callBinding,\n            boolean throwOnFailure) {\n          return checkSingleOperandType(\n              callBinding,\n              callBinding.operand(0),\n              0,\n              throwOnFailure);\n        }\n\n        public SqlOperandCountRange getOperandCountRange() {\n          return SqlOperandCountRanges.of(1);\n        }\n\n        public String getAllowedSignatures(SqlOperator op, String opName) {\n          return SqlUtil.getAliasedSignature(op, opName,\n              ImmutableList.of(\"RECORDTYPE(SINGLE FIELD)\"));\n        }\n\n        public boolean isOptional(int i) {\n          return false;\n        }\n\n        public Consistency getConsistency() {\n          return Consistency.NONE;\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":656,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
