[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testMinusOperator() {\n    tester.setFor(SqlStdOperatorTable.MINUS);\n    tester.checkScalarExact(\"-2-1\", \"-3\");\n    tester.checkScalarExact(\"-2-1-5\", \"-8\");\n    tester.checkScalarExact(\"2-1\", \"1\");\n    tester.checkScalarApprox(\n        \"cast(2.0 as double) -1\",\n        \"DOUBLE NOT NULL\",\n        1,\n        0);\n    tester.checkScalarApprox(\n        \"cast(1 as smallint)-cast(2.0 as real)\",\n        \"REAL NOT NULL\",\n        -1,\n        0);\n    tester.checkScalarApprox(\n        \"2.4-cast(2.0 as real)\",\n        \"DOUBLE NOT NULL\",\n        0.4,\n        0.00000001);\n    tester.checkScalarExact(\"1-2\", \"-1\");\n    tester.checkScalarExact(\n        \"10.0 - 5.0\",\n        \"DECIMAL(4, 1) NOT NULL\",\n        \"5.0\");\n    tester.checkScalarExact(\n        \"19.68 - 4.2\",\n        \"DECIMAL(5, 2) NOT NULL\",\n        \"15.48\");\n    tester.checkNull(\"1e1-cast(null as double)\");\n    tester.checkNull(\"cast(null as tinyint) - cast(null as smallint)\");\n\n    \r\n    if (Bug.FNL25_FIXED) {\n      \r\n      tester.checkFails(\n          \"cast(100 as tinyint) - cast(-100 as tinyint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-20000 as smallint) - cast(20000 as smallint)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(1.5e9 as integer) - cast(-1.5e9 as integer)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-5e18 as bigint) - cast(5e18 as bigint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(5e18 as decimal(19,0)) - cast(-5e18 as decimal(19,0))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-5e8 as decimal(19,10)) - cast(5e8 as decimal(19,10))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":2412,"groupId":"596","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMinusOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testMinusOperator() {\n    tester.setFor(SqlStdOperatorTable.MINUS);\n    tester.checkScalarExact(\"-2-1\", \"-3\");\n    tester.checkScalarExact(\"-2-1-5\", \"-8\");\n    tester.checkScalarExact(\"2-1\", \"1\");\n    tester.checkScalarApprox(\n        \"cast(2.0 as double) -1\",\n        \"DOUBLE NOT NULL\",\n        1,\n        0);\n    tester.checkScalarApprox(\n        \"cast(1 as smallint)-cast(2.0 as real)\",\n        \"REAL NOT NULL\",\n        -1,\n        0);\n    tester.checkScalarApprox(\n        \"2.4-cast(2.0 as real)\",\n        \"DOUBLE NOT NULL\",\n        0.4,\n        0.00000001);\n    tester.checkScalarExact(\"1-2\", \"-1\");\n    tester.checkScalarExact(\n        \"10.0 - 5.0\",\n        \"DECIMAL(4, 1) NOT NULL\",\n        \"5.0\");\n    tester.checkScalarExact(\n        \"19.68 - 4.2\",\n        \"DECIMAL(5, 2) NOT NULL\",\n        \"15.48\");\n    tester.checkNull(\"1e1-cast(null as double)\");\n    tester.checkNull(\"cast(null as tinyint) - cast(null as smallint)\");\n\n    \r\n    if (Bug.FNL25_FIXED) {\n      \r\n      tester.checkFails(\n          \"cast(100 as tinyint) - cast(-100 as tinyint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-20000 as smallint) - cast(20000 as smallint)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(1.5e9 as integer) - cast(-1.5e9 as integer)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-5e18 as bigint) - cast(5e18 as bigint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(5e18 as decimal(19,0)) - cast(-5e18 as decimal(19,0))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-5e8 as decimal(19,10)) - cast(5e8 as decimal(19,10))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2354,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testPlusOperator() {\n    tester.setFor(SqlStdOperatorTable.PLUS);\n    tester.checkScalarExact(\"1+2\", \"3\");\n    tester.checkScalarExact(\"-1+2\", \"1\");\n    tester.checkScalarExact(\"1+2+3\", \"6\");\n    tester.checkScalarApprox(\n        \"1+cast(2.0 as double)\",\n        \"DOUBLE NOT NULL\",\n        3,\n        0);\n    tester.checkScalarApprox(\n        \"1+cast(2.0 as double)+cast(6.0 as float)\",\n        \"DOUBLE NOT NULL\",\n        9,\n        0);\n    tester.checkScalarExact(\n        \"10.0 + 5.0\",\n        \"DECIMAL(4, 1) NOT NULL\",\n        \"15.0\");\n    tester.checkScalarExact(\n        \"19.68 + 4.2\",\n        \"DECIMAL(5, 2) NOT NULL\",\n        \"23.88\");\n    tester.checkScalarExact(\n        \"19.68 + 4.2 + 6\",\n        \"DECIMAL(13, 2) NOT NULL\",\n        \"29.88\");\n    tester.checkScalarApprox(\n        \"19.68 + cast(4.2 as float)\",\n        \"DOUBLE NOT NULL\",\n        23.88,\n        0.02);\n    tester.checkNull(\"cast(null as tinyint)+1\");\n    tester.checkNull(\"1e-2+cast(null as double)\");\n\n    if (Bug.FNL25_FIXED) {\n      \r\n      tester.checkFails(\n          \"cast(100 as tinyint) + cast(100 as tinyint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-20000 as smallint) + cast(-20000 as smallint)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(1.5e9 as integer) + cast(1.5e9 as integer)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(5e18 as bigint) + cast(5e18 as bigint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-5e18 as decimal(19,0)) + cast(-5e18 as decimal(19,0))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(5e8 as decimal(19,10)) + cast(5e8 as decimal(19,10))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":2746,"groupId":"7863","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPlusOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testPlusOperator() {\n    tester.setFor(SqlStdOperatorTable.PLUS);\n    tester.checkScalarExact(\"1+2\", \"3\");\n    tester.checkScalarExact(\"-1+2\", \"1\");\n    tester.checkScalarExact(\"1+2+3\", \"6\");\n    tester.checkScalarApprox(\n        \"1+cast(2.0 as double)\",\n        \"DOUBLE NOT NULL\",\n        3,\n        0);\n    tester.checkScalarApprox(\n        \"1+cast(2.0 as double)+cast(6.0 as float)\",\n        \"DOUBLE NOT NULL\",\n        9,\n        0);\n    tester.checkScalarExact(\n        \"10.0 + 5.0\",\n        \"DECIMAL(4, 1) NOT NULL\",\n        \"15.0\");\n    tester.checkScalarExact(\n        \"19.68 + 4.2\",\n        \"DECIMAL(5, 2) NOT NULL\",\n        \"23.88\");\n    tester.checkScalarExact(\n        \"19.68 + 4.2 + 6\",\n        \"DECIMAL(13, 2) NOT NULL\",\n        \"29.88\");\n    tester.checkScalarApprox(\n        \"19.68 + cast(4.2 as float)\",\n        \"DOUBLE NOT NULL\",\n        23.88,\n        0.02);\n    tester.checkNull(\"cast(null as tinyint)+1\");\n    tester.checkNull(\"1e-2+cast(null as double)\");\n\n    if (Bug.FNL25_FIXED) {\n      \r\n      tester.checkFails(\n          \"cast(100 as tinyint) + cast(100 as tinyint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-20000 as smallint) + cast(-20000 as smallint)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(1.5e9 as integer) + cast(1.5e9 as integer)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(5e18 as bigint) + cast(5e18 as bigint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-5e18 as decimal(19,0)) + cast(-5e18 as decimal(19,0))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(5e8 as decimal(19,10)) + cast(5e8 as decimal(19,10))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2686,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testMinusOperator() {\n    tester.setFor(SqlStdOperatorTable.MINUS);\n    tester.checkScalarExact(\"-2-1\", \"-3\");\n    tester.checkScalarExact(\"-2-1-5\", \"-8\");\n    tester.checkScalarExact(\"2-1\", \"1\");\n    tester.checkScalarApprox(\n        \"cast(2.0 as double) -1\",\n        \"DOUBLE NOT NULL\",\n        1,\n        0);\n    tester.checkScalarApprox(\n        \"cast(1 as smallint)-cast(2.0 as real)\",\n        \"REAL NOT NULL\",\n        -1,\n        0);\n    tester.checkScalarApprox(\n        \"2.4-cast(2.0 as real)\",\n        \"DOUBLE NOT NULL\",\n        0.4,\n        0.00000001);\n    tester.checkScalarExact(\"1-2\", \"-1\");\n    tester.checkScalarExact(\n        \"10.0 - 5.0\",\n        \"DECIMAL(4, 1) NOT NULL\",\n        \"5.0\");\n    tester.checkScalarExact(\n        \"19.68 - 4.2\",\n        \"DECIMAL(5, 2) NOT NULL\",\n        \"15.48\");\n    tester.checkNull(\"1e1-cast(null as double)\");\n    tester.checkNull(\"cast(null as tinyint) - cast(null as smallint)\");\n\n    \r\n    if (Bug.FNL25_FIXED) {\n      \r\n      tester.checkFails(\n          \"cast(100 as tinyint) - cast(-100 as tinyint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-20000 as smallint) - cast(20000 as smallint)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(1.5e9 as integer) - cast(-1.5e9 as integer)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-5e18 as bigint) - cast(5e18 as bigint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(5e18 as decimal(19,0)) - cast(-5e18 as decimal(19,0))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-5e8 as decimal(19,10)) - cast(5e8 as decimal(19,10))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":3046,"groupId":"10758","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMinusOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testMinusOperator() {\n    tester.setFor(SqlStdOperatorTable.MINUS);\n    tester.checkScalarExact(\"-2-1\", \"-3\");\n    tester.checkScalarExact(\"-2-1-5\", \"-8\");\n    tester.checkScalarExact(\"2-1\", \"1\");\n    tester.checkScalarApprox(\n        \"cast(2.0 as double) -1\",\n        \"DOUBLE NOT NULL\",\n        1,\n        0);\n    tester.checkScalarApprox(\n        \"cast(1 as smallint)-cast(2.0 as real)\",\n        \"REAL NOT NULL\",\n        -1,\n        0);\n    tester.checkScalarApprox(\n        \"2.4-cast(2.0 as real)\",\n        \"DOUBLE NOT NULL\",\n        0.4,\n        0.00000001);\n    tester.checkScalarExact(\"1-2\", \"-1\");\n    tester.checkScalarExact(\n        \"10.0 - 5.0\",\n        \"DECIMAL(4, 1) NOT NULL\",\n        \"5.0\");\n    tester.checkScalarExact(\n        \"19.68 - 4.2\",\n        \"DECIMAL(5, 2) NOT NULL\",\n        \"15.48\");\n    tester.checkNull(\"1e1-cast(null as double)\");\n    tester.checkNull(\"cast(null as tinyint) - cast(null as smallint)\");\n\n    \r\n    if (Bug.FNL25_FIXED) {\n      \r\n      tester.checkFails(\n          \"cast(100 as tinyint) - cast(-100 as tinyint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-20000 as smallint) - cast(20000 as smallint)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(1.5e9 as integer) - cast(-1.5e9 as integer)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-5e18 as bigint) - cast(5e18 as bigint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(5e18 as decimal(19,0)) - cast(-5e18 as decimal(19,0))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-5e8 as decimal(19,10)) - cast(5e8 as decimal(19,10))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2988,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testPlusOperator() {\n    tester.setFor(SqlStdOperatorTable.PLUS);\n    tester.checkScalarExact(\"1+2\", \"3\");\n    tester.checkScalarExact(\"-1+2\", \"1\");\n    tester.checkScalarExact(\"1+2+3\", \"6\");\n    tester.checkScalarApprox(\n        \"1+cast(2.0 as double)\",\n        \"DOUBLE NOT NULL\",\n        3,\n        0);\n    tester.checkScalarApprox(\n        \"1+cast(2.0 as double)+cast(6.0 as float)\",\n        \"DOUBLE NOT NULL\",\n        9,\n        0);\n    tester.checkScalarExact(\n        \"10.0 + 5.0\",\n        \"DECIMAL(4, 1) NOT NULL\",\n        \"15.0\");\n    tester.checkScalarExact(\n        \"19.68 + 4.2\",\n        \"DECIMAL(5, 2) NOT NULL\",\n        \"23.88\");\n    tester.checkScalarExact(\n        \"19.68 + 4.2 + 6\",\n        \"DECIMAL(13, 2) NOT NULL\",\n        \"29.88\");\n    tester.checkScalarApprox(\n        \"19.68 + cast(4.2 as float)\",\n        \"DOUBLE NOT NULL\",\n        23.88,\n        0.02);\n    tester.checkNull(\"cast(null as tinyint)+1\");\n    tester.checkNull(\"1e-2+cast(null as double)\");\n\n    if (Bug.FNL25_FIXED) {\n      \r\n      tester.checkFails(\n          \"cast(100 as tinyint) + cast(100 as tinyint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-20000 as smallint) + cast(-20000 as smallint)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(1.5e9 as integer) + cast(1.5e9 as integer)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(5e18 as bigint) + cast(5e18 as bigint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-5e18 as decimal(19,0)) + cast(-5e18 as decimal(19,0))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(5e8 as decimal(19,10)) + cast(5e8 as decimal(19,10))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":3450,"groupId":"10758","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPlusOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testPlusOperator() {\n    tester.setFor(SqlStdOperatorTable.PLUS);\n    tester.checkScalarExact(\"1+2\", \"3\");\n    tester.checkScalarExact(\"-1+2\", \"1\");\n    tester.checkScalarExact(\"1+2+3\", \"6\");\n    tester.checkScalarApprox(\n        \"1+cast(2.0 as double)\",\n        \"DOUBLE NOT NULL\",\n        3,\n        0);\n    tester.checkScalarApprox(\n        \"1+cast(2.0 as double)+cast(6.0 as float)\",\n        \"DOUBLE NOT NULL\",\n        9,\n        0);\n    tester.checkScalarExact(\n        \"10.0 + 5.0\",\n        \"DECIMAL(4, 1) NOT NULL\",\n        \"15.0\");\n    tester.checkScalarExact(\n        \"19.68 + 4.2\",\n        \"DECIMAL(5, 2) NOT NULL\",\n        \"23.88\");\n    tester.checkScalarExact(\n        \"19.68 + 4.2 + 6\",\n        \"DECIMAL(13, 2) NOT NULL\",\n        \"29.88\");\n    tester.checkScalarApprox(\n        \"19.68 + cast(4.2 as float)\",\n        \"DOUBLE NOT NULL\",\n        23.88,\n        0.02);\n    tester.checkNull(\"cast(null as tinyint)+1\");\n    tester.checkNull(\"1e-2+cast(null as double)\");\n\n    if (Bug.FNL25_FIXED) {\n      \r\n      tester.checkFails(\n          \"cast(100 as tinyint) + cast(100 as tinyint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-20000 as smallint) + cast(-20000 as smallint)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(1.5e9 as integer) + cast(1.5e9 as integer)\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(5e18 as bigint) + cast(5e18 as bigint)\", OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(-5e18 as decimal(19,0)) + cast(-5e18 as decimal(19,0))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast(5e8 as decimal(19,10)) + cast(5e8 as decimal(19,10))\",\n          OUT_OF_RANGE_MESSAGE,\n          true);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3390,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
