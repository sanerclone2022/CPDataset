[{"authorTime":"2017-05-10 11:28:26","codes":[{"authorDate":"2017-03-13 19:11:19","commitOrder":3,"curCode":"  @Test public void testMatchRecognize10() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern ( A B C | A C B | B A C | B C A | C A B | C B A)\\n\"\n        + \"    define\\n\"\n        + \"      A as A.price > PREV(A.price),\\n\"\n        + \"      B as B.price < prev(B.price),\\n\"\n        + \"      C as C.price > prev(C.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"PATTERN ((((((((`A` `B`) `C`) | ((`A` `C`) `B`)) | ((`B` `A`) `C`)) \"\n        + \"| ((`B` `C`) `A`)) | ((`C` `A`) `B`)) | ((`C` `B`) `A`)))\\n\"\n        + \"DEFINE \"\n        + \"`A` AS (`A`.`PRICE` > PREV(`A`.`PRICE`, 1)), \"\n        + \"`B` AS (`B`.`PRICE` < PREV(`B`.`PRICE`, 1)), \"\n        + \"`C` AS (`C`.`PRICE` > PREV(`C`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-04-02 11:43:28","endLine":7365,"groupId":"13890","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognize10","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/56/4ce5fc6613223749e9a6c0acb13d4e8de540f1.src","preCode":"  @Test public void testMatchRecognize10() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern ( A B C | A C B | B A C | B C A | C A B | C B A)\\n\"\n        + \"    define\\n\"\n        + \"      A as A.price > PREV(A.price),\\n\"\n        + \"      B as B.price < prev(B.price),\\n\"\n        + \"      C as C.price > prev(C.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"PATTERN ((((((((`A` `B`) `C`) | ((`A` `C`) `B`)) | ((`B` `A`) `C`)) \"\n        + \"| ((`B` `C`) `A`)) | ((`C` `A`) `B`)) | ((`C` `B`) `A`)))\\n\"\n        + \"DEFINE \"\n        + \"`A` AS (`A`.`PRICE` > PREV(`A`.`PRICE`, 1)), \"\n        + \"`B` AS (`B`.`PRICE` < PREV(`B`.`PRICE`, 1)), \"\n        + \"`C` AS (`C`.`PRICE` > PREV(`C`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7345,"status":"NB"},{"authorDate":"2017-05-10 11:28:26","commitOrder":3,"curCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"SUBSET (`STDN` = (`STRT`, `DOWN`))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-05-16 10:33:38","endLine":7780,"groupId":"10705","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizeSubset1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d6/e8d759409c7f5fa65b969c8931aad3cfe3d86e.src","preCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"SUBSET (`STDN` = (`STRT`, `DOWN`))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7761,"status":"B"}],"commitId":"7a56eb63dfbd3310d14c85270f667eb3f8fa6aa3","commitMessage":"@@@[CALCITE-1644] SUBSET sub-clause of MATCH_RECOGNIZE (Zhiqiang-He)\n\nClose apache/calcite#445\n","date":"2017-05-16 10:33:38","modifiedFileCount":"11","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testMatchRecognize10() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern ( A B C | A C B | B A C | B C A | C A B | C B A)\\n\"\n        + \"    define\\n\"\n        + \"      A as A.price > PREV(A.price),\\n\"\n        + \"      B as B.price < prev(B.price),\\n\"\n        + \"      C as C.price > prev(C.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"PATTERN ((((((((`A` `B`) `C`) | ((`A` `C`) `B`)) | ((`B` `A`) `C`)) \"\n        + \"| ((`B` `C`) `A`)) | ((`C` `A`) `B`)) | ((`C` `B`) `A`)))\\n\"\n        + \"DEFINE \"\n        + \"`A` AS (`A`.`PRICE` > PREV(`A`.`PRICE`, 1)), \"\n        + \"`B` AS (`B`.`PRICE` < PREV(`B`.`PRICE`, 1)), \"\n        + \"`C` AS (`C`.`PRICE` > PREV(`C`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":7750,"groupId":"10901","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognize10","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testMatchRecognize10() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern ( A B C | A C B | B A C | B C A | C A B | C B A)\\n\"\n        + \"    define\\n\"\n        + \"      A as A.price > PREV(A.price),\\n\"\n        + \"      B as B.price < prev(B.price),\\n\"\n        + \"      C as C.price > prev(C.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"PATTERN ((((((((`A` `B`) `C`) | ((`A` `C`) `B`)) | ((`B` `A`) `C`)) \"\n        + \"| ((`B` `C`) `A`)) | ((`C` `A`) `B`)) | ((`C` `B`) `A`)))\\n\"\n        + \"DEFINE \"\n        + \"`A` AS (`A`.`PRICE` > PREV(`A`.`PRICE`, 1)), \"\n        + \"`B` AS (`B`.`PRICE` < PREV(`B`.`PRICE`, 1)), \"\n        + \"`C` AS (`C`.`PRICE` > PREV(`C`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7730,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"SUBSET (`STDN` = (`STRT`, `DOWN`))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":8145,"groupId":"10901","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizeSubset1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"SUBSET (`STDN` = (`STRT`, `DOWN`))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8126,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
