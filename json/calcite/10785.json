[{"authorTime":"2020-01-07 13:38:09","codes":[{"authorDate":"2019-12-28 13:10:08","commitOrder":2,"curCode":"  @Test public void testExtractXml() {\n    SqlTester sqlTester = tester(SqlLibrary.ORACLE);\n\n    sqlTester.checkFails(\"\\\"EXTRACT\\\"('', '<','a')\",\n        \"Invalid input for EXTRACT xpath: '.*\", true);\n    sqlTester.checkFails(\"\\\"EXTRACT\\\"('', '<')\",\n        \"Invalid input for EXTRACT xpath: '.*\", true);\n    sqlTester.checkNull(\"\\\"EXTRACT\\\"('', NULL)\");\n    sqlTester.checkNull(\"\\\"EXTRACT\\\"(NULL,'')\");\n\n    sqlTester.checkString(\n        \"\\\"EXTRACT\\\"('<Article><Title>Article1</Title><Authors><Author>Foo</Author><Author>Bar\"\n            + \"</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"<Title>Article1</Title>\",\n        \"VARCHAR(2000)\");\n\n    sqlTester.checkString(\n        \"\\\"EXTRACT\\\"('<Article><Title>Article1</Title><Title>Article2</Title><Authors><Author>Foo\"\n            + \"</Author><Author>Bar</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"<Title>Article1</Title><Title>Article2</Title>\",\n        \"VARCHAR(2000)\");\n\n    sqlTester.checkString(\n        \"\\\"EXTRACT\\\"(\\n\"\n            + \"'<books xmlns=\\\"http://www.contoso\"\n            + \".com/books\\\"><book><title>Title</title><author>Author Name</author><price>5\"\n            + \".50</price></book></books>'\"\n            + \", '/books:books/books:book', 'books=\\\"http://www.contoso.com/books\\\"'\"\n            + \")\",\n        \"<book xmlns=\\\"http://www.contoso.com/books\\\"><title>Title</title><author>Author \"\n            + \"Name</author><price>5.50</price></book>\",\n        \"VARCHAR(2000)\");\n  }\n","date":"2020-01-07 11:15:36","endLine":5263,"groupId":"6022","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractXml","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5b/362b4ace81edb878ff4ce859c58b51cef59276.src","preCode":"  @Test public void testExtractXml() {\n    SqlTester sqlTester = tester(SqlLibrary.ORACLE);\n\n    sqlTester.checkFails(\"\\\"EXTRACT\\\"('', '<','a')\",\n        \"Invalid input for EXTRACT xpath: '.*\", true);\n    sqlTester.checkFails(\"\\\"EXTRACT\\\"('', '<')\",\n        \"Invalid input for EXTRACT xpath: '.*\", true);\n    sqlTester.checkNull(\"\\\"EXTRACT\\\"('', NULL)\");\n    sqlTester.checkNull(\"\\\"EXTRACT\\\"(NULL,'')\");\n\n    sqlTester.checkString(\n        \"\\\"EXTRACT\\\"('<Article><Title>Article1</Title><Authors><Author>Foo</Author><Author>Bar\"\n            + \"</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"<Title>Article1</Title>\",\n        \"VARCHAR(2000)\");\n\n    sqlTester.checkString(\n        \"\\\"EXTRACT\\\"('<Article><Title>Article1</Title><Title>Article2</Title><Authors><Author>Foo\"\n            + \"</Author><Author>Bar</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"<Title>Article1</Title><Title>Article2</Title>\",\n        \"VARCHAR(2000)\");\n\n    sqlTester.checkString(\n        \"\\\"EXTRACT\\\"(\\n\"\n            + \"'<books xmlns=\\\"http://www.contoso\"\n            + \".com/books\\\"><book><title>Title</title><author>Author Name</author><price>5\"\n            + \".50</price></book></books>'\"\n            + \", '/books:books/books:book', 'books=\\\"http://www.contoso.com/books\\\"'\"\n            + \")\",\n        \"<book xmlns=\\\"http://www.contoso.com/books\\\"><title>Title</title><author>Author \"\n            + \"Name</author><price>5.50</price></book>\",\n        \"VARCHAR(2000)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5229,"status":"NB"},{"authorDate":"2020-01-07 13:38:09","commitOrder":2,"curCode":"  @Test public void testExistsNode() {\n    SqlTester sqlTester = tester(SqlLibrary.ORACLE);\n\n    sqlTester.checkFails(\"EXISTSNODE('', '<','a')\",\n        \"Invalid input for EXISTSNODE xpath: '.*\", true);\n    sqlTester.checkFails(\"EXISTSNODE('', '<')\",\n        \"Invalid input for EXISTSNODE xpath: '.*\", true);\n    sqlTester.checkNull(\"EXISTSNODE('', NULL)\");\n    sqlTester.checkNull(\"EXISTSNODE(NULL,'')\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE('<Article><Title>Article1</Title><Authors><Author>Foo</Author><Author>Bar\"\n            + \"</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"1\",\n        \"INTEGER\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE('<Article><Title>Article1</Title><Authors><Author>Foo</Author><Author>Bar\"\n            + \"</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title/Books')\",\n        \"0\",\n        \"INTEGER\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE('<Article><Title>Article1</Title><Title>Article2</Title><Authors><Author>Foo\"\n            + \"</Author><Author>Bar</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"1\",\n        \"INTEGER\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE(\\n\"\n            + \"'<books xmlns=\\\"http://www.contoso\"\n            + \".com/books\\\"><book><title>Title</title><author>Author Name</author><price>5\"\n            + \".50</price></book></books>'\"\n            + \", '/books:books/books:book', 'books=\\\"http://www.contoso.com/books\\\"'\"\n            + \")\",\n        \"1\",\n        \"INTEGER\");\n    sqlTester.checkString(\n        \"EXISTSNODE(\\n\"\n            + \"'<books xmlns=\\\"http://www.contoso\"\n            + \".com/books\\\"><book><title>Title</title><author>Author Name</author><price>5\"\n            + \".50</price></book></books>'\"\n            + \", '/books:books/books:book/books:title2', 'books=\\\"http://www.contoso.com/books\\\"'\"\n            + \")\",\n        \"0\",\n        \"INTEGER\");\n  }\n","date":"2020-01-15 09:58:57","endLine":5315,"groupId":"4687","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExistsNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/be/438a99818896a3ae770f2372697fba194e67c9.src","preCode":"  @Test public void testExistsNode() {\n    SqlTester sqlTester = tester(SqlLibrary.ORACLE);\n\n    sqlTester.checkFails(\"EXISTSNODE('', '<','a')\",\n        \"Invalid input for EXISTSNODE xpath: '.*\", true);\n    sqlTester.checkFails(\"EXISTSNODE('', '<')\",\n        \"Invalid input for EXISTSNODE xpath: '.*\", true);\n    sqlTester.checkNull(\"EXISTSNODE('', NULL)\");\n    sqlTester.checkNull(\"EXISTSNODE(NULL,'')\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE('<Article><Title>Article1</Title><Authors><Author>Foo</Author><Author>Bar\"\n            + \"</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"1\",\n        \"INTEGER\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE('<Article><Title>Article1</Title><Authors><Author>Foo</Author><Author>Bar\"\n            + \"</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title/Books')\",\n        \"0\",\n        \"INTEGER\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE('<Article><Title>Article1</Title><Title>Article2</Title><Authors><Author>Foo\"\n            + \"</Author><Author>Bar</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"1\",\n        \"INTEGER\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE(\\n\"\n            + \"'<books xmlns=\\\"http://www.contoso\"\n            + \".com/books\\\"><book><title>Title</title><author>Author Name</author><price>5\"\n            + \".50</price></book></books>'\"\n            + \", '/books:books/books:book', 'books=\\\"http://www.contoso.com/books\\\"'\"\n            + \")\",\n        \"1\",\n        \"INTEGER\");\n    sqlTester.checkString(\n        \"EXISTSNODE(\\n\"\n            + \"'<books xmlns=\\\"http://www.contoso\"\n            + \".com/books\\\"><book><title>Title</title><author>Author Name</author><price>5\"\n            + \".50</price></book></books>'\"\n            + \", '/books:books/books:book/books:title2', 'books=\\\"http://www.contoso.com/books\\\"'\"\n            + \")\",\n        \"0\",\n        \"INTEGER\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5266,"status":"B"}],"commitId":"990ed290ccde1344c9277cf88c82df3118a96217","commitMessage":"@@@[CALCITE-3640] Oracle EXISTSNODE Function Support (ritesh-kapoor)\n\nclose apache/calcite#1727\n","date":"2020-01-15 09:58:57","modifiedFileCount":"7","status":"M","submitter":"Ritesh Kapoor"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testExtractXml() {\n    SqlTester sqlTester = tester(SqlLibrary.ORACLE);\n\n    sqlTester.checkFails(\"\\\"EXTRACT\\\"('', '<','a')\",\n        \"Invalid input for EXTRACT xpath: '.*\", true);\n    sqlTester.checkFails(\"\\\"EXTRACT\\\"('', '<')\",\n        \"Invalid input for EXTRACT xpath: '.*\", true);\n    sqlTester.checkNull(\"\\\"EXTRACT\\\"('', NULL)\");\n    sqlTester.checkNull(\"\\\"EXTRACT\\\"(NULL,'')\");\n\n    sqlTester.checkString(\n        \"\\\"EXTRACT\\\"('<Article><Title>Article1</Title><Authors><Author>Foo</Author><Author>Bar\"\n            + \"</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"<Title>Article1</Title>\",\n        \"VARCHAR(2000)\");\n\n    sqlTester.checkString(\n        \"\\\"EXTRACT\\\"('<Article><Title>Article1</Title><Title>Article2</Title><Authors><Author>Foo\"\n            + \"</Author><Author>Bar</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"<Title>Article1</Title><Title>Article2</Title>\",\n        \"VARCHAR(2000)\");\n\n    sqlTester.checkString(\n        \"\\\"EXTRACT\\\"(\\n\"\n            + \"'<books xmlns=\\\"http://www.contoso\"\n            + \".com/books\\\"><book><title>Title</title><author>Author Name</author><price>5\"\n            + \".50</price></book></books>'\"\n            + \", '/books:books/books:book', 'books=\\\"http://www.contoso.com/books\\\"'\"\n            + \")\",\n        \"<book xmlns=\\\"http://www.contoso.com/books\\\"><title>Title</title><author>Author \"\n            + \"Name</author><price>5.50</price></book>\",\n        \"VARCHAR(2000)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":5326,"groupId":"10785","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractXml","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testExtractXml() {\n    SqlTester sqlTester = tester(SqlLibrary.ORACLE);\n\n    sqlTester.checkFails(\"\\\"EXTRACT\\\"('', '<','a')\",\n        \"Invalid input for EXTRACT xpath: '.*\", true);\n    sqlTester.checkFails(\"\\\"EXTRACT\\\"('', '<')\",\n        \"Invalid input for EXTRACT xpath: '.*\", true);\n    sqlTester.checkNull(\"\\\"EXTRACT\\\"('', NULL)\");\n    sqlTester.checkNull(\"\\\"EXTRACT\\\"(NULL,'')\");\n\n    sqlTester.checkString(\n        \"\\\"EXTRACT\\\"('<Article><Title>Article1</Title><Authors><Author>Foo</Author><Author>Bar\"\n            + \"</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"<Title>Article1</Title>\",\n        \"VARCHAR(2000)\");\n\n    sqlTester.checkString(\n        \"\\\"EXTRACT\\\"('<Article><Title>Article1</Title><Title>Article2</Title><Authors><Author>Foo\"\n            + \"</Author><Author>Bar</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"<Title>Article1</Title><Title>Article2</Title>\",\n        \"VARCHAR(2000)\");\n\n    sqlTester.checkString(\n        \"\\\"EXTRACT\\\"(\\n\"\n            + \"'<books xmlns=\\\"http://www.contoso\"\n            + \".com/books\\\"><book><title>Title</title><author>Author Name</author><price>5\"\n            + \".50</price></book></books>'\"\n            + \", '/books:books/books:book', 'books=\\\"http://www.contoso.com/books\\\"'\"\n            + \")\",\n        \"<book xmlns=\\\"http://www.contoso.com/books\\\"><title>Title</title><author>Author \"\n            + \"Name</author><price>5.50</price></book>\",\n        \"VARCHAR(2000)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5292,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testExistsNode() {\n    SqlTester sqlTester = tester(SqlLibrary.ORACLE);\n\n    sqlTester.checkFails(\"EXISTSNODE('', '<','a')\",\n        \"Invalid input for EXISTSNODE xpath: '.*\", true);\n    sqlTester.checkFails(\"EXISTSNODE('', '<')\",\n        \"Invalid input for EXISTSNODE xpath: '.*\", true);\n    sqlTester.checkNull(\"EXISTSNODE('', NULL)\");\n    sqlTester.checkNull(\"EXISTSNODE(NULL,'')\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE('<Article><Title>Article1</Title><Authors><Author>Foo</Author><Author>Bar\"\n            + \"</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"1\",\n        \"INTEGER\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE('<Article><Title>Article1</Title><Authors><Author>Foo</Author><Author>Bar\"\n            + \"</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title/Books')\",\n        \"0\",\n        \"INTEGER\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE('<Article><Title>Article1</Title><Title>Article2</Title><Authors><Author>Foo\"\n            + \"</Author><Author>Bar</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"1\",\n        \"INTEGER\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE(\\n\"\n            + \"'<books xmlns=\\\"http://www.contoso\"\n            + \".com/books\\\"><book><title>Title</title><author>Author Name</author><price>5\"\n            + \".50</price></book></books>'\"\n            + \", '/books:books/books:book', 'books=\\\"http://www.contoso.com/books\\\"'\"\n            + \")\",\n        \"1\",\n        \"INTEGER\");\n    sqlTester.checkString(\n        \"EXISTSNODE(\\n\"\n            + \"'<books xmlns=\\\"http://www.contoso\"\n            + \".com/books\\\"><book><title>Title</title><author>Author Name</author><price>5\"\n            + \".50</price></book></books>'\"\n            + \", '/books:books/books:book/books:title2', 'books=\\\"http://www.contoso.com/books\\\"'\"\n            + \")\",\n        \"0\",\n        \"INTEGER\");\n  }\n","date":"2020-04-06 04:57:49","endLine":5377,"groupId":"10785","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExistsNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testExistsNode() {\n    SqlTester sqlTester = tester(SqlLibrary.ORACLE);\n\n    sqlTester.checkFails(\"EXISTSNODE('', '<','a')\",\n        \"Invalid input for EXISTSNODE xpath: '.*\", true);\n    sqlTester.checkFails(\"EXISTSNODE('', '<')\",\n        \"Invalid input for EXISTSNODE xpath: '.*\", true);\n    sqlTester.checkNull(\"EXISTSNODE('', NULL)\");\n    sqlTester.checkNull(\"EXISTSNODE(NULL,'')\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE('<Article><Title>Article1</Title><Authors><Author>Foo</Author><Author>Bar\"\n            + \"</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"1\",\n        \"INTEGER\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE('<Article><Title>Article1</Title><Authors><Author>Foo</Author><Author>Bar\"\n            + \"</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title/Books')\",\n        \"0\",\n        \"INTEGER\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE('<Article><Title>Article1</Title><Title>Article2</Title><Authors><Author>Foo\"\n            + \"</Author><Author>Bar</Author></Authors><Body>article text\"\n            + \".</Body></Article>', '/Article/Title')\",\n        \"1\",\n        \"INTEGER\");\n\n    sqlTester.checkString(\n        \"EXISTSNODE(\\n\"\n            + \"'<books xmlns=\\\"http://www.contoso\"\n            + \".com/books\\\"><book><title>Title</title><author>Author Name</author><price>5\"\n            + \".50</price></book></books>'\"\n            + \", '/books:books/books:book', 'books=\\\"http://www.contoso.com/books\\\"'\"\n            + \")\",\n        \"1\",\n        \"INTEGER\");\n    sqlTester.checkString(\n        \"EXISTSNODE(\\n\"\n            + \"'<books xmlns=\\\"http://www.contoso\"\n            + \".com/books\\\"><book><title>Title</title><author>Author Name</author><price>5\"\n            + \".50</price></book></books>'\"\n            + \", '/books:books/books:book/books:title2', 'books=\\\"http://www.contoso.com/books\\\"'\"\n            + \")\",\n        \"0\",\n        \"INTEGER\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5328,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
