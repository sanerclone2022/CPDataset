[{"authorTime":"2019-07-25 16:03:25","codes":[{"authorDate":"2020-01-05 22:44:53","commitOrder":4,"curCode":"  @Test public void testCbrtFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.CBRT);\n    tester.checkType(\"cbrt(1)\", \"DOUBLE NOT NULL\");\n    tester.checkType(\"cbrt(cast(1 as float))\", \"DOUBLE NOT NULL\");\n    tester.checkType(\n        \"cbrt(case when false then 1 else null end)\", \"DOUBLE\");\n    strictTester.checkFails(\n        \"^cbrt('abc')^\",\n        \"Cannot apply 'CBRT' to arguments of type 'CBRT\\\\(<CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CBRT\\\\(<NUMERIC>\\\\)'\",\n        false);\n    tester.checkType(\"cbrt('abc')\", \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(8)\",\n        \"2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(-8)\",\n        \"-2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(cast(1 as decimal(1, 0)))\",\n        \"1.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkNull(\"cbrt(cast(null as integer))\");\n    tester.checkNull(\"cbrt(cast(null as double))\");\n  }\n","date":"2020-01-07 11:56:46","endLine":5669,"groupId":"10079","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbrtFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6a/5bdc0b20c4907084119b574db3e773a76cbd2f.src","preCode":"  @Test public void testCbrtFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.CBRT);\n    tester.checkType(\"cbrt(1)\", \"DOUBLE NOT NULL\");\n    tester.checkType(\"cbrt(cast(1 as float))\", \"DOUBLE NOT NULL\");\n    tester.checkType(\n        \"cbrt(case when false then 1 else null end)\", \"DOUBLE\");\n    strictTester.checkFails(\n        \"^cbrt('abc')^\",\n        \"Cannot apply 'CBRT' to arguments of type 'CBRT\\\\(<CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CBRT\\\\(<NUMERIC>\\\\)'\",\n        false);\n    tester.checkType(\"cbrt('abc')\", \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(8)\",\n        \"2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(-8)\",\n        \"-2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(cast(1 as decimal(1, 0)))\",\n        \"1.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkNull(\"cbrt(cast(null as integer))\");\n    tester.checkNull(\"cbrt(cast(null as double))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5643,"status":"B"},{"authorDate":"2019-07-25 16:03:25","commitOrder":4,"curCode":"  @Test public void testExtractIntervalYearMonth() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    if (TODO) {\n      \r\n      \r\n\n      tester.checkScalar(\n          \"extract(epoch from interval '4-2' year to month)\",\n          \r\n          \r\n          \"131328000\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(second from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(millisecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(microsecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(nanosecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(minute from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(hour from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(day from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    \r\n    \r\n    tester.checkFails(\"^extract(doy from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(dow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(week from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(isodow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n\n    tester.checkScalar(\n        \"extract(month from interval '4-2' year to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from interval '4-2' year to month)\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from interval '4-2' year to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(decade from interval '426-3' year(3) to month)\",\n        \"42\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(century from interval '426-3' year(3) to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millennium from interval '2005-3' year(4) to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n  }\n","date":"2019-07-30 10:24:45","endLine":6822,"groupId":"1330","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractIntervalYearMonth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/3e9583a4fecec0682f9480c6b4ee1c6a752132.src","preCode":"  @Test public void testExtractIntervalYearMonth() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    if (TODO) {\n      \r\n      \r\n\n      tester.checkScalar(\n          \"extract(epoch from interval '4-2' year to month)\",\n          \r\n          \r\n          \"131328000\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(second from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(millisecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(microsecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(nanosecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(minute from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(hour from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(day from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    \r\n    \r\n    tester.checkFails(\"^extract(doy from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(dow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(week from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(isodow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n\n    tester.checkScalar(\n        \"extract(month from interval '4-2' year to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from interval '4-2' year to month)\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from interval '4-2' year to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(decade from interval '426-3' year(3) to month)\",\n        \"42\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(century from interval '426-3' year(3) to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millennium from interval '2005-3' year(4) to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6729,"status":"NB"}],"commitId":"4558236b2882f5b11a47fa1da289d5d11b219d5b","commitMessage":"@@@[CALCITE-3684] Implement CBRT function (Qianjin Xu)\n\nclose apache/calcite#1723\n","date":"2020-01-07 11:56:46","modifiedFileCount":"6","status":"M","submitter":"XuQianJin-Stars"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testCbrtFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.CBRT);\n    tester.checkType(\"cbrt(1)\", \"DOUBLE NOT NULL\");\n    tester.checkType(\"cbrt(cast(1 as float))\", \"DOUBLE NOT NULL\");\n    tester.checkType(\n        \"cbrt(case when false then 1 else null end)\", \"DOUBLE\");\n    strictTester.checkFails(\n        \"^cbrt('abc')^\",\n        \"Cannot apply 'CBRT' to arguments of type 'CBRT\\\\(<CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CBRT\\\\(<NUMERIC>\\\\)'\",\n        false);\n    tester.checkType(\"cbrt('abc')\", \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(8)\",\n        \"2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(-8)\",\n        \"-2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(cast(1 as decimal(1, 0)))\",\n        \"1.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkNull(\"cbrt(cast(null as integer))\");\n    tester.checkNull(\"cbrt(cast(null as double))\");\n  }\n","date":"2020-04-06 04:57:49","endLine":5782,"groupId":"10807","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbrtFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testCbrtFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.CBRT);\n    tester.checkType(\"cbrt(1)\", \"DOUBLE NOT NULL\");\n    tester.checkType(\"cbrt(cast(1 as float))\", \"DOUBLE NOT NULL\");\n    tester.checkType(\n        \"cbrt(case when false then 1 else null end)\", \"DOUBLE\");\n    strictTester.checkFails(\n        \"^cbrt('abc')^\",\n        \"Cannot apply 'CBRT' to arguments of type 'CBRT\\\\(<CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CBRT\\\\(<NUMERIC>\\\\)'\",\n        false);\n    tester.checkType(\"cbrt('abc')\", \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(8)\",\n        \"2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(-8)\",\n        \"-2.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkScalar(\n        \"cbrt(cast(1 as decimal(1, 0)))\",\n        \"1.0\",\n        \"DOUBLE NOT NULL\");\n    tester.checkNull(\"cbrt(cast(null as integer))\");\n    tester.checkNull(\"cbrt(cast(null as double))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5756,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testExtractIntervalYearMonth() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    if (TODO) {\n      \r\n      \r\n\n      tester.checkScalar(\n          \"extract(epoch from interval '4-2' year to month)\",\n          \r\n          \r\n          \"131328000\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(second from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(millisecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(microsecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(nanosecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(minute from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(hour from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(day from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    \r\n    \r\n    tester.checkFails(\"^extract(doy from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(dow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(week from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(isodow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n\n    tester.checkScalar(\n        \"extract(month from interval '4-2' year to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from interval '4-2' year to month)\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from interval '4-2' year to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(decade from interval '426-3' year(3) to month)\",\n        \"42\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(century from interval '426-3' year(3) to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millennium from interval '2005-3' year(4) to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n  }\n","date":"2020-04-06 04:57:49","endLine":7328,"groupId":"10807","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractIntervalYearMonth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testExtractIntervalYearMonth() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    if (TODO) {\n      \r\n      \r\n\n      tester.checkScalar(\n          \"extract(epoch from interval '4-2' year to month)\",\n          \r\n          \r\n          \"131328000\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(second from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(millisecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(microsecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(nanosecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(minute from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(hour from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(day from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    \r\n    \r\n    tester.checkFails(\"^extract(doy from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(dow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(week from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(isodow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n\n    tester.checkScalar(\n        \"extract(month from interval '4-2' year to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from interval '4-2' year to month)\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from interval '4-2' year to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(decade from interval '426-3' year(3) to month)\",\n        \"42\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(century from interval '426-3' year(3) to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millennium from interval '2005-3' year(4) to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7235,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
