[{"authorTime":"2016-02-05 10:57:21","codes":[{"authorDate":"2016-02-05 10:57:21","commitOrder":1,"curCode":"  @Test public void testDistributionHashEmpty() {\n    final RelNode rel = convertSql(\"select * from emp\");\n    final RelDistribution dist = RelDistributions.hash(ImmutableList.<Integer>of());\n    final LogicalExchange exchange = LogicalExchange.create(rel, dist);\n\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelDistribution d = mq.getDistribution(exchange);\n    assertThat(d, is(dist));\n  }\n","date":"2016-02-05 16:26:17","endLine":1346,"groupId":"8821","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDistributionHashEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/56/c458e353318a99e129820bb75061ff5b20aad1.src","preCode":"  @Test public void testDistributionHashEmpty() {\n    final RelNode rel = convertSql(\"select * from emp\");\n    final RelDistribution dist = RelDistributions.hash(ImmutableList.<Integer>of());\n    final LogicalExchange exchange = LogicalExchange.create(rel, dist);\n\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelDistribution d = mq.getDistribution(exchange);\n    assertThat(d, is(dist));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1338,"status":"B"},{"authorDate":"2016-02-05 10:57:21","commitOrder":1,"curCode":"  @Test public void testDistributionSingleton() {\n    final RelNode rel = convertSql(\"select * from emp\");\n    final RelDistribution dist = RelDistributions.SINGLETON;\n    final LogicalExchange exchange = LogicalExchange.create(rel, dist);\n\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelDistribution d = mq.getDistribution(exchange);\n    assertThat(d, is(dist));\n  }\n","date":"2016-02-05 16:26:17","endLine":1356,"groupId":"8821","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDistributionSingleton","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/56/c458e353318a99e129820bb75061ff5b20aad1.src","preCode":"  @Test public void testDistributionSingleton() {\n    final RelNode rel = convertSql(\"select * from emp\");\n    final RelDistribution dist = RelDistributions.SINGLETON;\n    final LogicalExchange exchange = LogicalExchange.create(rel, dist);\n\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelDistribution d = mq.getDistribution(exchange);\n    assertThat(d, is(dist));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1348,"status":"B"}],"commitId":"4dfd6dbb232718ca60b0a4885b6e37194cfdf3c7","commitMessage":"@@@[CALCITE-1076] Update RelMdDistribution to match other metadata APIs (Ted Xu)\n\nAdd RelMdDistribution to the list of standard metadata providers.\n\nAdd several tests for RelMdDistribution to RelMetadataTest.\n\nClose apache/calcite#194\n","date":"2016-02-05 16:26:17","modifiedFileCount":"4","status":"B","submitter":"??"},{"authorTime":"2019-10-16 19:22:37","codes":[{"authorDate":"2019-10-16 19:22:37","commitOrder":2,"curCode":"  @Test public void testDistributionHashEmpty() {\n    final RelNode rel = convertSql(\"select * from emp\");\n    final RelDistribution dist = RelDistributions.hash(ImmutableList.<Integer>of());\n    final LogicalExchange exchange = LogicalExchange.create(rel, dist);\n\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelDistribution d = mq.getDistribution(exchange);\n    assertThat(d, is(dist));\n  }\n","date":"2019-10-18 06:51:31","endLine":1617,"groupId":"8821","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDistributionHashEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testDistributionHashEmpty() {\n    final RelNode rel = convertSql(\"select * from emp\");\n    final RelDistribution dist = RelDistributions.hash(ImmutableList.<Integer>of());\n    final LogicalExchange exchange = LogicalExchange.create(rel, dist);\n\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelDistribution d = mq.getDistribution(exchange);\n    assertThat(d, is(dist));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1609,"status":"M"},{"authorDate":"2019-10-16 19:22:37","commitOrder":2,"curCode":"  @Test public void testDistributionSingleton() {\n    final RelNode rel = convertSql(\"select * from emp\");\n    final RelDistribution dist = RelDistributions.SINGLETON;\n    final LogicalExchange exchange = LogicalExchange.create(rel, dist);\n\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelDistribution d = mq.getDistribution(exchange);\n    assertThat(d, is(dist));\n  }\n","date":"2019-10-18 06:51:31","endLine":1627,"groupId":"8821","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDistributionSingleton","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testDistributionSingleton() {\n    final RelNode rel = convertSql(\"select * from emp\");\n    final RelDistribution dist = RelDistributions.SINGLETON;\n    final LogicalExchange exchange = LogicalExchange.create(rel, dist);\n\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelDistribution d = mq.getDistribution(exchange);\n    assertThat(d, is(dist));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1619,"status":"M"}],"commitId":"ebc16afa935888578b5befc870c1997f307a6cb5","commitMessage":"@@@[CALCITE-3421] Reuse RelMetadataQuery in test suites\n\nClose #1513\n","date":"2019-10-18 06:51:31","modifiedFileCount":"5","status":"M","submitter":"dz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testDistributionHashEmpty() {\n    final RelNode rel = convertSql(\"select * from emp\");\n    final RelDistribution dist = RelDistributions.hash(ImmutableList.<Integer>of());\n    final LogicalExchange exchange = LogicalExchange.create(rel, dist);\n\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelDistribution d = mq.getDistribution(exchange);\n    assertThat(d, is(dist));\n  }\n","date":"2020-04-06 04:57:49","endLine":2084,"groupId":"101138","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDistributionHashEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testDistributionHashEmpty() {\n    final RelNode rel = convertSql(\"select * from emp\");\n    final RelDistribution dist = RelDistributions.hash(ImmutableList.<Integer>of());\n    final LogicalExchange exchange = LogicalExchange.create(rel, dist);\n\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelDistribution d = mq.getDistribution(exchange);\n    assertThat(d, is(dist));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2076,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testDistributionSingleton() {\n    final RelNode rel = convertSql(\"select * from emp\");\n    final RelDistribution dist = RelDistributions.SINGLETON;\n    final LogicalExchange exchange = LogicalExchange.create(rel, dist);\n\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelDistribution d = mq.getDistribution(exchange);\n    assertThat(d, is(dist));\n  }\n","date":"2020-04-06 04:57:49","endLine":2094,"groupId":"101138","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDistributionSingleton","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testDistributionSingleton() {\n    final RelNode rel = convertSql(\"select * from emp\");\n    final RelDistribution dist = RelDistributions.SINGLETON;\n    final LogicalExchange exchange = LogicalExchange.create(rel, dist);\n\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelDistribution d = mq.getDistribution(exchange);\n    assertThat(d, is(dist));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2086,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
