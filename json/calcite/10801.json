[{"authorTime":"2018-06-12 05:23:22","codes":[{"authorDate":"2018-06-12 05:23:22","commitOrder":1,"curCode":"  @Test public void testMultisetUnionOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.MULTISET_UNION_DISTINCT,\n        VM_FENNEL,\n        VM_JAVA);\n    tester.checkBoolean(\"multiset[1,2] submultiset of (multiset[2] multiset union multiset[1])\",\n        Boolean.TRUE);\n    tester.checkScalar(\"cardinality(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8])\",\n        \"7\",\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\"cardinality(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8])\",\n        \"7\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 2, 3, 4, 5, 7, 8]\",\n        Boolean.TRUE);\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 2, 3, 4, 5, 7, 8]\",\n        Boolean.TRUE);\n    tester.checkScalar(\"cardinality(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\",\n        \"5\",\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\"cardinality(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\",\n        \"5\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\"\n            + \" submultiset of multiset['a', 'b', 'c', 'd', 'e']\",\n         Boolean.TRUE);\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\"\n            + \" submultiset of multiset['a', 'b', 'c', 'd', 'e']\",\n         Boolean.TRUE);\n    tester.checkScalar(\n        \"multiset[cast(null as double)] multiset union multiset[cast(null as double)]\",\n        \"[null, null]\",\n        \"DOUBLE MULTISET NOT NULL\");\n    tester.checkScalar(\n        \"multiset[cast(null as boolean)] multiset union multiset[cast(null as boolean)]\",\n        \"[null, null]\",\n        \"BOOLEAN MULTISET NOT NULL\");\n  }\n","date":"2018-06-13 09:52:07","endLine":5391,"groupId":"15238","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultisetUnionOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/16/948643f688eca7b3e733599c1f56916473a8dc.src","preCode":"  @Test public void testMultisetUnionOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.MULTISET_UNION_DISTINCT,\n        VM_FENNEL,\n        VM_JAVA);\n    tester.checkBoolean(\"multiset[1,2] submultiset of (multiset[2] multiset union multiset[1])\",\n        Boolean.TRUE);\n    tester.checkScalar(\"cardinality(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8])\",\n        \"7\",\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\"cardinality(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8])\",\n        \"7\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 2, 3, 4, 5, 7, 8]\",\n        Boolean.TRUE);\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 2, 3, 4, 5, 7, 8]\",\n        Boolean.TRUE);\n    tester.checkScalar(\"cardinality(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\",\n        \"5\",\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\"cardinality(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\",\n        \"5\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\"\n            + \" submultiset of multiset['a', 'b', 'c', 'd', 'e']\",\n         Boolean.TRUE);\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\"\n            + \" submultiset of multiset['a', 'b', 'c', 'd', 'e']\",\n         Boolean.TRUE);\n    tester.checkScalar(\n        \"multiset[cast(null as double)] multiset union multiset[cast(null as double)]\",\n        \"[null, null]\",\n        \"DOUBLE MULTISET NOT NULL\");\n    tester.checkScalar(\n        \"multiset[cast(null as boolean)] multiset union multiset[cast(null as boolean)]\",\n        \"[null, null]\",\n        \"BOOLEAN MULTISET NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5344,"status":"B"},{"authorDate":"2018-06-12 05:23:22","commitOrder":1,"curCode":"  @Test public void testMultisetUnionAllOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.MULTISET_UNION,\n        VM_FENNEL,\n        VM_JAVA);\n    tester.checkScalar(\"cardinality(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union all multiset[1, 4, 5, 7, 8])\",\n        \"10\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union all multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 2, 3, 4, 5, 7, 8]\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union all multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 1, 2, 2, 3, 4, 4, 5, 7, 8]\",\n        Boolean.TRUE);\n    tester.checkScalar(\"cardinality(multiset['a', 'b', 'c'] \"\n            + \"multiset union all multiset['c', 'd', 'e'])\",\n        \"6\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union all multiset['c', 'd', 'e']) \"\n            + \"submultiset of multiset['a', 'b', 'c', 'd', 'e']\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e']) \"\n            + \"submultiset of multiset['a', 'b', 'c', 'd', 'e', 'c']\",\n        Boolean.TRUE);\n    tester.checkScalar(\n        \"multiset[cast(null as double)] multiset union all multiset[cast(null as double)]\",\n        \"[null, null]\",\n        \"DOUBLE MULTISET NOT NULL\");\n    tester.checkScalar(\n        \"multiset[cast(null as boolean)] multiset union all multiset[cast(null as boolean)]\",\n        \"[null, null]\",\n        \"BOOLEAN MULTISET NOT NULL\");\n  }\n","date":"2018-06-13 09:52:07","endLine":5430,"groupId":"3629","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultisetUnionAllOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/16/948643f688eca7b3e733599c1f56916473a8dc.src","preCode":"  @Test public void testMultisetUnionAllOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.MULTISET_UNION,\n        VM_FENNEL,\n        VM_JAVA);\n    tester.checkScalar(\"cardinality(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union all multiset[1, 4, 5, 7, 8])\",\n        \"10\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union all multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 2, 3, 4, 5, 7, 8]\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union all multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 1, 2, 2, 3, 4, 4, 5, 7, 8]\",\n        Boolean.TRUE);\n    tester.checkScalar(\"cardinality(multiset['a', 'b', 'c'] \"\n            + \"multiset union all multiset['c', 'd', 'e'])\",\n        \"6\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union all multiset['c', 'd', 'e']) \"\n            + \"submultiset of multiset['a', 'b', 'c', 'd', 'e']\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e']) \"\n            + \"submultiset of multiset['a', 'b', 'c', 'd', 'e', 'c']\",\n        Boolean.TRUE);\n    tester.checkScalar(\n        \"multiset[cast(null as double)] multiset union all multiset[cast(null as double)]\",\n        \"[null, null]\",\n        \"DOUBLE MULTISET NOT NULL\");\n    tester.checkScalar(\n        \"multiset[cast(null as boolean)] multiset union all multiset[cast(null as boolean)]\",\n        \"[null, null]\",\n        \"BOOLEAN MULTISET NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5393,"status":"B"}],"commitId":"d35c11c73cc78cf379d7e886cbbfb62b91d75fad","commitMessage":"@@@[CALCITE-2355] Implement multiset operations (Sergey Nuyanzin)\n\nImplement multiset operations: IS A SET.  SUBMULTISET OF.  MEMBER OF. \nMULTISET EXCEPT/INTESECT/UNION [ALL | DISTINCT].  FUSION; add\nmultiset operations: IS NOT A SET.  IS EMPTY.  IS NOT EMPTY.  SUBMULTISET OF.\n\nFix behavior if neither ALL nor DISTINCT is specified for the case of\nMULTISET EXCEPT/INTERSECT/UNION.\n\nClose apache/calcite#727\n","date":"2018-06-13 09:52:07","modifiedFileCount":"9","status":"B","submitter":"snuyanzin"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testMultisetUnionOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.MULTISET_UNION_DISTINCT,\n        VM_FENNEL,\n        VM_JAVA);\n    tester.checkBoolean(\"multiset[1,2] submultiset of (multiset[2] multiset union multiset[1])\",\n        Boolean.TRUE);\n    tester.checkScalar(\"cardinality(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8])\",\n        \"7\",\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\"cardinality(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8])\",\n        \"7\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 2, 3, 4, 5, 7, 8]\",\n        Boolean.TRUE);\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 2, 3, 4, 5, 7, 8]\",\n        Boolean.TRUE);\n    tester.checkScalar(\"cardinality(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\",\n        \"5\",\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\"cardinality(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\",\n        \"5\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\"\n            + \" submultiset of multiset['a', 'b', 'c', 'd', 'e']\",\n        Boolean.TRUE);\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\"\n            + \" submultiset of multiset['a', 'b', 'c', 'd', 'e']\",\n        Boolean.TRUE);\n    tester.checkScalar(\n        \"multiset[cast(null as double)] multiset union multiset[cast(null as double)]\",\n        \"[null, null]\",\n        \"DOUBLE MULTISET NOT NULL\");\n    tester.checkScalar(\n        \"multiset[cast(null as boolean)] multiset union multiset[cast(null as boolean)]\",\n        \"[null, null]\",\n        \"BOOLEAN MULTISET NOT NULL\");\n  }\n","date":"2020-04-06 04:57:49","endLine":6892,"groupId":"10801","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultisetUnionOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testMultisetUnionOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.MULTISET_UNION_DISTINCT,\n        VM_FENNEL,\n        VM_JAVA);\n    tester.checkBoolean(\"multiset[1,2] submultiset of (multiset[2] multiset union multiset[1])\",\n        Boolean.TRUE);\n    tester.checkScalar(\"cardinality(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8])\",\n        \"7\",\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\"cardinality(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8])\",\n        \"7\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 2, 3, 4, 5, 7, 8]\",\n        Boolean.TRUE);\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union distinct multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 2, 3, 4, 5, 7, 8]\",\n        Boolean.TRUE);\n    tester.checkScalar(\"cardinality(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\",\n        \"5\",\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\"cardinality(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\",\n        \"5\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\"\n            + \" submultiset of multiset['a', 'b', 'c', 'd', 'e']\",\n        Boolean.TRUE);\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e'])\"\n            + \" submultiset of multiset['a', 'b', 'c', 'd', 'e']\",\n        Boolean.TRUE);\n    tester.checkScalar(\n        \"multiset[cast(null as double)] multiset union multiset[cast(null as double)]\",\n        \"[null, null]\",\n        \"DOUBLE MULTISET NOT NULL\");\n    tester.checkScalar(\n        \"multiset[cast(null as boolean)] multiset union multiset[cast(null as boolean)]\",\n        \"[null, null]\",\n        \"BOOLEAN MULTISET NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6845,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testMultisetUnionAllOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.MULTISET_UNION,\n        VM_FENNEL,\n        VM_JAVA);\n    tester.checkScalar(\"cardinality(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union all multiset[1, 4, 5, 7, 8])\",\n        \"10\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union all multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 2, 3, 4, 5, 7, 8]\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union all multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 1, 2, 2, 3, 4, 4, 5, 7, 8]\",\n        Boolean.TRUE);\n    tester.checkScalar(\"cardinality(multiset['a', 'b', 'c'] \"\n            + \"multiset union all multiset['c', 'd', 'e'])\",\n        \"6\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union all multiset['c', 'd', 'e']) \"\n            + \"submultiset of multiset['a', 'b', 'c', 'd', 'e']\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e']) \"\n            + \"submultiset of multiset['a', 'b', 'c', 'd', 'e', 'c']\",\n        Boolean.TRUE);\n    tester.checkScalar(\n        \"multiset[cast(null as double)] multiset union all multiset[cast(null as double)]\",\n        \"[null, null]\",\n        \"DOUBLE MULTISET NOT NULL\");\n    tester.checkScalar(\n        \"multiset[cast(null as boolean)] multiset union all multiset[cast(null as boolean)]\",\n        \"[null, null]\",\n        \"BOOLEAN MULTISET NOT NULL\");\n  }\n","date":"2020-04-06 04:57:49","endLine":6931,"groupId":"10801","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultisetUnionAllOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testMultisetUnionAllOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.MULTISET_UNION,\n        VM_FENNEL,\n        VM_JAVA);\n    tester.checkScalar(\"cardinality(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union all multiset[1, 4, 5, 7, 8])\",\n        \"10\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union all multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 2, 3, 4, 5, 7, 8]\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"(multiset[1, 2, 3, 4, 2] \"\n            + \"multiset union all multiset[1, 4, 5, 7, 8]) \"\n            + \"submultiset of multiset[1, 1, 2, 2, 3, 4, 4, 5, 7, 8]\",\n        Boolean.TRUE);\n    tester.checkScalar(\"cardinality(multiset['a', 'b', 'c'] \"\n            + \"multiset union all multiset['c', 'd', 'e'])\",\n        \"6\",\n        \"INTEGER NOT NULL\");\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union all multiset['c', 'd', 'e']) \"\n            + \"submultiset of multiset['a', 'b', 'c', 'd', 'e']\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"(multiset['a', 'b', 'c'] \"\n            + \"multiset union distinct multiset['c', 'd', 'e']) \"\n            + \"submultiset of multiset['a', 'b', 'c', 'd', 'e', 'c']\",\n        Boolean.TRUE);\n    tester.checkScalar(\n        \"multiset[cast(null as double)] multiset union all multiset[cast(null as double)]\",\n        \"[null, null]\",\n        \"DOUBLE MULTISET NOT NULL\");\n    tester.checkScalar(\n        \"multiset[cast(null as boolean)] multiset union all multiset[cast(null as boolean)]\",\n        \"[null, null]\",\n        \"BOOLEAN MULTISET NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6894,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
