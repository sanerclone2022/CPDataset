[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public static long getMinValue(RelDataType type) {\n    SqlTypeName typeName = type.getSqlTypeName();\n    switch (typeName) {\n    case TINYINT:\n      return Byte.MIN_VALUE;\n    case SMALLINT:\n      return Short.MIN_VALUE;\n    case INTEGER:\n      return Integer.MIN_VALUE;\n    case BIGINT:\n    case DECIMAL:\n      return NumberUtil.getMinUnscaled(type.getPrecision()).longValue();\n    default:\n      throw Util.newInternal(\"getMinValue(\" + typeName + \")\");\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":552,"groupId":"7295","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getMinValue","params":"(RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2a/fc8e17a1f7af635c8ba1fe68373ed888bf9021.src","preCode":"  public static long getMinValue(RelDataType type) {\n    SqlTypeName typeName = type.getSqlTypeName();\n    switch (typeName) {\n    case TINYINT:\n      return Byte.MIN_VALUE;\n    case SMALLINT:\n      return Short.MIN_VALUE;\n    case INTEGER:\n      return Integer.MIN_VALUE;\n    case BIGINT:\n    case DECIMAL:\n      return NumberUtil.getMinUnscaled(type.getPrecision()).longValue();\n    default:\n      throw Util.newInternal(\"getMinValue(\" + typeName + \")\");\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":537,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public static long getMaxValue(RelDataType type) {\n    SqlTypeName typeName = type.getSqlTypeName();\n    switch (typeName) {\n    case TINYINT:\n      return Byte.MAX_VALUE;\n    case SMALLINT:\n      return Short.MAX_VALUE;\n    case INTEGER:\n      return Integer.MAX_VALUE;\n    case BIGINT:\n    case DECIMAL:\n      return NumberUtil.getMaxUnscaled(type.getPrecision()).longValue();\n    default:\n      throw Util.newInternal(\"getMaxValue(\" + typeName + \")\");\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":574,"groupId":"7295","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getMaxValue","params":"(RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2a/fc8e17a1f7af635c8ba1fe68373ed888bf9021.src","preCode":"  public static long getMaxValue(RelDataType type) {\n    SqlTypeName typeName = type.getSqlTypeName();\n    switch (typeName) {\n    case TINYINT:\n      return Byte.MAX_VALUE;\n    case SMALLINT:\n      return Short.MAX_VALUE;\n    case INTEGER:\n      return Integer.MAX_VALUE;\n    case BIGINT:\n    case DECIMAL:\n      return NumberUtil.getMaxUnscaled(type.getPrecision()).longValue();\n    default:\n      throw Util.newInternal(\"getMaxValue(\" + typeName + \")\");\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2017-01-23 17:38:12","codes":[{"authorDate":"2017-01-23 17:38:12","commitOrder":2,"curCode":"  public static long getMinValue(RelDataType type) {\n    SqlTypeName typeName = type.getSqlTypeName();\n    switch (typeName) {\n    case TINYINT:\n      return Byte.MIN_VALUE;\n    case SMALLINT:\n      return Short.MIN_VALUE;\n    case INTEGER:\n      return Integer.MIN_VALUE;\n    case BIGINT:\n    case DECIMAL:\n      return NumberUtil.getMinUnscaled(type.getPrecision()).longValue();\n    default:\n      throw new AssertionError(\"getMinValue(\" + typeName + \")\");\n    }\n  }\n","date":"2017-01-26 03:00:12","endLine":582,"groupId":"101803","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getMinValue","params":"(RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e2/162e1d4179dbb3e2d666dcce673ebd9dc158bf.src","preCode":"  public static long getMinValue(RelDataType type) {\n    SqlTypeName typeName = type.getSqlTypeName();\n    switch (typeName) {\n    case TINYINT:\n      return Byte.MIN_VALUE;\n    case SMALLINT:\n      return Short.MIN_VALUE;\n    case INTEGER:\n      return Integer.MIN_VALUE;\n    case BIGINT:\n    case DECIMAL:\n      return NumberUtil.getMinUnscaled(type.getPrecision()).longValue();\n    default:\n      throw Util.newInternal(\"getMinValue(\" + typeName + \")\");\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":567,"status":"M"},{"authorDate":"2017-01-23 17:38:12","commitOrder":2,"curCode":"  public static long getMaxValue(RelDataType type) {\n    SqlTypeName typeName = type.getSqlTypeName();\n    switch (typeName) {\n    case TINYINT:\n      return Byte.MAX_VALUE;\n    case SMALLINT:\n      return Short.MAX_VALUE;\n    case INTEGER:\n      return Integer.MAX_VALUE;\n    case BIGINT:\n    case DECIMAL:\n      return NumberUtil.getMaxUnscaled(type.getPrecision()).longValue();\n    default:\n      throw new AssertionError(\"getMaxValue(\" + typeName + \")\");\n    }\n  }\n","date":"2017-01-26 03:00:12","endLine":604,"groupId":"101803","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getMaxValue","params":"(RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e2/162e1d4179dbb3e2d666dcce673ebd9dc158bf.src","preCode":"  public static long getMaxValue(RelDataType type) {\n    SqlTypeName typeName = type.getSqlTypeName();\n    switch (typeName) {\n    case TINYINT:\n      return Byte.MAX_VALUE;\n    case SMALLINT:\n      return Short.MAX_VALUE;\n    case INTEGER:\n      return Integer.MAX_VALUE;\n    case BIGINT:\n    case DECIMAL:\n      return NumberUtil.getMaxUnscaled(type.getPrecision()).longValue();\n    default:\n      throw Util.newInternal(\"getMaxValue(\" + typeName + \")\");\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"M"}],"commitId":"603648bc2466ab699fa6646ffc1ad717b8c11880","commitMessage":"@@@[CALCITE-1597] Obsolete Util.newInternal.  .pre.  .post.  .permAssert and Throwables.propagate\n\nReplace Util.newInternal with new AssertionError in some contexts. \nnew RuntimeException in others. Replace methods pre.  pos.  permAssert\nin Util with methods in Preconditions.\n\nRemove uses of Throwables.propagate and .propagateIfPossible because\nthey are deprecated as of Guava 20. Create method\nUtil.throwIfUnchecked because we can't use Guava's\nThrowables.throwIfUnchecked yet.\n","date":"2017-01-26 03:00:12","modifiedFileCount":"82","status":"M","submitter":"Julian Hyde"}]
