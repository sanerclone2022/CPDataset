[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public int intValue(boolean exact) {\n    switch (typeName) {\n    case DECIMAL:\n    case DOUBLE:\n      BigDecimal bd = (BigDecimal) value;\n      if (exact) {\n        try {\n          return bd.intValueExact();\n        } catch (ArithmeticException e) {\n          throw SqlUtil.newContextException(getParserPosition(),\n              RESOURCE.numberLiteralOutOfRange(bd.toString()));\n        }\n      } else {\n        return bd.intValue();\n      }\n    default:\n      throw Util.unexpected(typeName);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":425,"groupId":"14087","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"intValue","params":"(booleanexact)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/eb/1ce1e25f4afd48c713028dab6938612bdb9e70.src","preCode":"  public int intValue(boolean exact) {\n    switch (typeName) {\n    case DECIMAL:\n    case DOUBLE:\n      BigDecimal bd = (BigDecimal) value;\n      if (exact) {\n        try {\n          return bd.intValueExact();\n        } catch (ArithmeticException e) {\n          throw SqlUtil.newContextException(getParserPosition(),\n              RESOURCE.numberLiteralOutOfRange(bd.toString()));\n        }\n      } else {\n        return bd.intValue();\n      }\n    default:\n      throw Util.unexpected(typeName);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlLiteral.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public long longValue(boolean exact) {\n    switch (typeName) {\n    case DECIMAL:\n    case DOUBLE:\n      BigDecimal bd = (BigDecimal) value;\n      if (exact) {\n        try {\n          return bd.longValueExact();\n        } catch (ArithmeticException e) {\n          throw SqlUtil.newContextException(getParserPosition(),\n              RESOURCE.numberLiteralOutOfRange(bd.toString()));\n        }\n      } else {\n        return bd.longValue();\n      }\n    default:\n      throw Util.unexpected(typeName);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":453,"groupId":"14087","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"longValue","params":"(booleanexact)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/eb/1ce1e25f4afd48c713028dab6938612bdb9e70.src","preCode":"  public long longValue(boolean exact) {\n    switch (typeName) {\n    case DECIMAL:\n    case DOUBLE:\n      BigDecimal bd = (BigDecimal) value;\n      if (exact) {\n        try {\n          return bd.longValueExact();\n        } catch (ArithmeticException e) {\n          throw SqlUtil.newContextException(getParserPosition(),\n              RESOURCE.numberLiteralOutOfRange(bd.toString()));\n        }\n      } else {\n        return bd.longValue();\n      }\n    default:\n      throw Util.unexpected(typeName);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlLiteral.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":435,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  public int intValue(boolean exact) {\n    switch (typeName) {\n    case DECIMAL:\n    case DOUBLE:\n      BigDecimal bd = (BigDecimal) requireNonNull(value);\n      if (exact) {\n        try {\n          return bd.intValueExact();\n        } catch (ArithmeticException e) {\n          throw SqlUtil.newContextException(getParserPosition(),\n              RESOURCE.numberLiteralOutOfRange(bd.toString()));\n        }\n      } else {\n        return bd.intValue();\n      }\n    default:\n      throw Util.unexpected(typeName);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":671,"groupId":"14087","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"intValue","params":"(booleanexact)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4d/017599f0886d3f013fccd2a5969aa8c749ac50.src","preCode":"  public int intValue(boolean exact) {\n    switch (typeName) {\n    case DECIMAL:\n    case DOUBLE:\n      BigDecimal bd = (BigDecimal) value;\n      if (exact) {\n        try {\n          return bd.intValueExact();\n        } catch (ArithmeticException e) {\n          throw SqlUtil.newContextException(getParserPosition(),\n              RESOURCE.numberLiteralOutOfRange(bd.toString()));\n        }\n      } else {\n        return bd.intValue();\n      }\n    default:\n      throw Util.unexpected(typeName);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlLiteral.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  public long longValue(boolean exact) {\n    switch (typeName) {\n    case DECIMAL:\n    case DOUBLE:\n      BigDecimal bd = (BigDecimal) requireNonNull(value);\n      if (exact) {\n        try {\n          return bd.longValueExact();\n        } catch (ArithmeticException e) {\n          throw SqlUtil.newContextException(getParserPosition(),\n              RESOURCE.numberLiteralOutOfRange(bd.toString()));\n        }\n      } else {\n        return bd.longValue();\n      }\n    default:\n      throw Util.unexpected(typeName);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":699,"groupId":"14087","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"longValue","params":"(booleanexact)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4d/017599f0886d3f013fccd2a5969aa8c749ac50.src","preCode":"  public long longValue(boolean exact) {\n    switch (typeName) {\n    case DECIMAL:\n    case DOUBLE:\n      BigDecimal bd = (BigDecimal) value;\n      if (exact) {\n        try {\n          return bd.longValueExact();\n        } catch (ArithmeticException e) {\n          throw SqlUtil.newContextException(getParserPosition(),\n              RESOURCE.numberLiteralOutOfRange(bd.toString()));\n        }\n      } else {\n        return bd.longValue();\n      }\n    default:\n      throw Util.unexpected(typeName);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlLiteral.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":681,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-12-08 16:58:37","codes":[{"authorDate":"2020-12-08 16:58:37","commitOrder":3,"curCode":"  public int intValue(boolean exact) {\n    switch (typeName) {\n    case DECIMAL:\n    case DOUBLE:\n      BigDecimal bd = (BigDecimal) requireNonNull(value, \"value\");\n      if (exact) {\n        try {\n          return bd.intValueExact();\n        } catch (ArithmeticException e) {\n          throw SqlUtil.newContextException(getParserPosition(),\n              RESOURCE.numberLiteralOutOfRange(bd.toString()));\n        }\n      } else {\n        return bd.intValue();\n      }\n    default:\n      throw Util.unexpected(typeName);\n    }\n  }\n","date":"2021-01-26 02:49:44","endLine":671,"groupId":"101861","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"intValue","params":"(booleanexact)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/97/d14ff9323e7c94702e831334fb2404132537b2.src","preCode":"  public int intValue(boolean exact) {\n    switch (typeName) {\n    case DECIMAL:\n    case DOUBLE:\n      BigDecimal bd = (BigDecimal) requireNonNull(value);\n      if (exact) {\n        try {\n          return bd.intValueExact();\n        } catch (ArithmeticException e) {\n          throw SqlUtil.newContextException(getParserPosition(),\n              RESOURCE.numberLiteralOutOfRange(bd.toString()));\n        }\n      } else {\n        return bd.intValue();\n      }\n    default:\n      throw Util.unexpected(typeName);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlLiteral.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"M"},{"authorDate":"2020-12-08 16:58:37","commitOrder":3,"curCode":"  public long longValue(boolean exact) {\n    switch (typeName) {\n    case DECIMAL:\n    case DOUBLE:\n      BigDecimal bd = (BigDecimal) requireNonNull(value, \"value\");\n      if (exact) {\n        try {\n          return bd.longValueExact();\n        } catch (ArithmeticException e) {\n          throw SqlUtil.newContextException(getParserPosition(),\n              RESOURCE.numberLiteralOutOfRange(bd.toString()));\n        }\n      } else {\n        return bd.longValue();\n      }\n    default:\n      throw Util.unexpected(typeName);\n    }\n  }\n","date":"2021-01-26 02:49:44","endLine":699,"groupId":"101861","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"longValue","params":"(booleanexact)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/97/d14ff9323e7c94702e831334fb2404132537b2.src","preCode":"  public long longValue(boolean exact) {\n    switch (typeName) {\n    case DECIMAL:\n    case DOUBLE:\n      BigDecimal bd = (BigDecimal) requireNonNull(value);\n      if (exact) {\n        try {\n          return bd.longValueExact();\n        } catch (ArithmeticException e) {\n          throw SqlUtil.newContextException(getParserPosition(),\n              RESOURCE.numberLiteralOutOfRange(bd.toString()));\n        }\n      } else {\n        return bd.longValue();\n      }\n    default:\n      throw Util.unexpected(typeName);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlLiteral.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":681,"status":"M"}],"commitId":"12a484a5c364c36e9551e59f4dc33bfb219ecf07","commitMessage":"@@@[CALCITE-4431] Use requireNonNull(var.  \"var\") instead of requireNonNull(var) for better error messages\n\nThis makes it easier to understand the reason for the failure.  especially\nwhen multiple requireNonNull lines go side-by-side.\n\nThe added AutoStyle configuration ensures the label does not go out-of-sync\n","date":"2021-01-26 02:49:44","modifiedFileCount":"215","status":"M","submitter":"Vladimir Sitnikov"}]
