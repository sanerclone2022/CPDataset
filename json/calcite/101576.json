[{"authorTime":"2018-12-12 21:09:23","codes":[{"authorDate":"2017-08-15 17:19:00","commitOrder":5,"curCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"NEXT(PREV(\\\"UP\\\".\\\"net_weight\\\", 0), 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-08-30 01:11:17","endLine":1771,"groupId":"10705","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognizeSubset1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b7/2edfc9de10dcc4d3e8ac90d6dfdc278900b007.src","preCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"NEXT(PREV(\\\"UP\\\".\\\"net_weight\\\", 0), 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1747,"status":"NB"},{"authorDate":"2018-12-12 21:09:23","commitOrder":5,"curCode":"  @Test public void testMatchRecognizeIn() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    partition by \\\"product_class_id\\\", \\\"brand_name\\\" \\n\"\n        + \"    order by \\\"product_class_id\\\" asc, \\\"brand_name\\\" desc \\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" in (0, 1),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"PARTITION BY \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n        + \"ORDER BY \\\"product_class_id\\\", \\\"brand_name\\\" DESC\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) = \"\n        + \"0 OR PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) = 1, \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2019-04-13 06:06:33","endLine":3007,"groupId":"2758","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizeIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b8/2b52cdd977164ca96979a2dd3bdf8b1cc5525f.src","preCode":"  @Test public void testMatchRecognizeIn() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    partition by \\\"product_class_id\\\", \\\"brand_name\\\" \\n\"\n        + \"    order by \\\"product_class_id\\\" asc, \\\"brand_name\\\" desc \\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" in (0, 1),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"PARTITION BY \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n        + \"ORDER BY \\\"product_class_id\\\", \\\"brand_name\\\" DESC\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) = \"\n        + \"0 OR PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) = 1, \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2981,"status":"B"}],"commitId":"f2869e9ad3864caa4d1678fbefc50389b981f2e6","commitMessage":"@@@[CALCITE-2739] NPE is thrown if the DEFINE statement contains IN in MATCH_RECOGNIZE\n\nClose #970\n","date":"2019-04-13 06:06:33","modifiedFileCount":"3","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"NEXT(PREV(\\\"UP\\\".\\\"net_weight\\\", 0), 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":3945,"groupId":"101576","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognizeSubset1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testMatchRecognizeSubset1() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    after match skip to down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    subset stdn = (strt, down)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" < PREV(down.\\\"net_weight\\\"),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > NEXT(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO LAST \\\"DOWN\\\"\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"SUBSET \\\"STDN\\\" = (\\\"DOWN\\\", \\\"STRT\\\")\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) < \"\n        + \"PREV(\\\"DOWN\\\".\\\"net_weight\\\", 1), \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"NEXT(PREV(\\\"UP\\\".\\\"net_weight\\\", 0), 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3921,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testMatchRecognizeIn() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    partition by \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n        + \"    order by \\\"product_class_id\\\" asc, \\\"brand_name\\\" desc\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" in (0, 1),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"PARTITION BY \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n        + \"ORDER BY \\\"product_class_id\\\", \\\"brand_name\\\" DESC\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) = \"\n        + \"0 OR PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) = 1, \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":4174,"groupId":"101576","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizeIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testMatchRecognizeIn() {\n    final String sql = \"select *\\n\"\n        + \"  from \\\"product\\\" match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    partition by \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n        + \"    order by \\\"product_class_id\\\" asc, \\\"brand_name\\\" desc\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.\\\"net_weight\\\" in (0, 1),\\n\"\n        + \"      up as up.\\\"net_weight\\\" > prev(up.\\\"net_weight\\\")\\n\"\n        + \"  ) mr\";\n\n    final String expected = \"SELECT *\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\") MATCH_RECOGNIZE(\\n\"\n        + \"PARTITION BY \\\"product_class_id\\\", \\\"brand_name\\\"\\n\"\n        + \"ORDER BY \\\"product_class_id\\\", \\\"brand_name\\\" DESC\\n\"\n        + \"ONE ROW PER MATCH\\n\"\n        + \"AFTER MATCH SKIP TO NEXT ROW\\n\"\n        + \"PATTERN (\\\"STRT\\\" \\\"DOWN\\\" + \\\"UP\\\" +)\\n\"\n        + \"DEFINE \"\n        + \"\\\"DOWN\\\" AS PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) = \"\n        + \"0 OR PREV(\\\"DOWN\\\".\\\"net_weight\\\", 0) = 1, \"\n        + \"\\\"UP\\\" AS PREV(\\\"UP\\\".\\\"net_weight\\\", 0) > \"\n        + \"PREV(\\\"UP\\\".\\\"net_weight\\\", 1))\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4148,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
