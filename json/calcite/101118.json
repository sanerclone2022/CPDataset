[{"authorTime":"2019-10-25 22:40:36","codes":[{"authorDate":"2019-10-25 22:40:36","commitOrder":1,"curCode":"  @Test public void testCustomProviderWithRelMetadataFactory() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    \r\n    final RelOptPlanner planner = rel.getCluster().getPlanner();\n    rel.getCluster().setMetadataProvider(\n        new CachingRelMetadataProvider(\n            rel.getCluster().getMetadataProvider(), planner));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(6));\n\n    \r\n    long timestamp = planner.getRelMetadataTimestamp(rel);\n    assertThat(timestamp, equalTo(0L));\n    ((MockRelOptPlanner) planner).setRelMetadataTimestamp(timestamp + 1);\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n  }\n","date":"2019-10-30 10:10:44","endLine":1246,"groupId":"14976","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCustomProviderWithRelMetadataFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/d2de04e1f002bb086c95d3a32edb41ffb94f09.src","preCode":"  @Test public void testCustomProviderWithRelMetadataFactory() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    \r\n    final RelOptPlanner planner = rel.getCluster().getPlanner();\n    rel.getCluster().setMetadataProvider(\n        new CachingRelMetadataProvider(\n            rel.getCluster().getMetadataProvider(), planner));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(6));\n\n    \r\n    long timestamp = planner.getRelMetadataTimestamp(rel);\n    assertThat(timestamp, equalTo(0L));\n    ((MockRelOptPlanner) planner).setRelMetadataTimestamp(timestamp + 1);\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1183,"status":"B"},{"authorDate":"2019-10-25 22:40:36","commitOrder":1,"curCode":"  @Test public void testCustomProviderWithRelMetadataQuery() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          cluster.setMetadataQuery(MyRelMetadataQuery::new);\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    rel.getCluster().invalidateMetadataQuery();\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq1 = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n  }\n","date":"2019-10-30 10:10:44","endLine":1305,"groupId":"9016","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomProviderWithRelMetadataQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/d2de04e1f002bb086c95d3a32edb41ffb94f09.src","preCode":"  @Test public void testCustomProviderWithRelMetadataQuery() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          cluster.setMetadataQuery(MyRelMetadataQuery::new);\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    rel.getCluster().invalidateMetadataQuery();\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq1 = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1248,"status":"B"}],"commitId":"977ea0d96f1f8e4225b6e27f02d86d0ea5aebb9a","commitMessage":"@@@[CALCITE-3446] Make RelMetadataQuery extensible\n\n* Add interface RelOptCluster.setMetadataQuery to let user set the\ncustomized RelMetadataQuery instance\n* Add a base metadata query class named RelMetadataQueryBase.  it\nholds the common parts that a metadata query requires.  also add doc\nabout how to add a new RelMetadataQuery sub-class\n* In RelMetadataQuery.  make constructor RelMetadataQuery(boolean) and\nRelMetadataQuery(JaninoRelMetadataProvider.  RelMetadataQuery) private. \nadd a new constrcutor RelMetadataQuery() for sub-class\n* Add test cases in RelMetadataTest\n* Refactor out assertEquals within RelMetadataTest\n* Make RelMetadataQueryBase#THREAD_PROVIDERS default to be a empty\ninstance.  we always initialize it now in RelOptCluster\n","date":"2019-10-30 10:10:44","modifiedFileCount":"5","status":"B","submitter":"yuzhao.cyz"},{"authorTime":"2019-11-09 02:05:49","codes":[{"authorDate":"2019-10-25 22:40:36","commitOrder":2,"curCode":"  @Test public void testCustomProviderWithRelMetadataFactory() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    \r\n    final RelOptPlanner planner = rel.getCluster().getPlanner();\n    rel.getCluster().setMetadataProvider(\n        new CachingRelMetadataProvider(\n            rel.getCluster().getMetadataProvider(), planner));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(6));\n\n    \r\n    long timestamp = planner.getRelMetadataTimestamp(rel);\n    assertThat(timestamp, equalTo(0L));\n    ((MockRelOptPlanner) planner).setRelMetadataTimestamp(timestamp + 1);\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n  }\n","date":"2019-10-30 10:10:44","endLine":1246,"groupId":"14976","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCustomProviderWithRelMetadataFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/d2de04e1f002bb086c95d3a32edb41ffb94f09.src","preCode":"  @Test public void testCustomProviderWithRelMetadataFactory() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    \r\n    final RelOptPlanner planner = rel.getCluster().getPlanner();\n    rel.getCluster().setMetadataProvider(\n        new CachingRelMetadataProvider(\n            rel.getCluster().getMetadataProvider(), planner));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(6));\n\n    \r\n    long timestamp = planner.getRelMetadataTimestamp(rel);\n    assertThat(timestamp, equalTo(0L));\n    ((MockRelOptPlanner) planner).setRelMetadataTimestamp(timestamp + 1);\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1183,"status":"N"},{"authorDate":"2019-11-09 02:05:49","commitOrder":2,"curCode":"  @Test public void testCustomProviderWithRelMetadataQuery() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          cluster.setMetadataQuerySupplier(MyRelMetadataQuery::new);\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    rel.getCluster().invalidateMetadataQuery();\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq1 = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n  }\n","date":"2019-11-09 07:20:01","endLine":1327,"groupId":"9016","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomProviderWithRelMetadataQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/39/b5ea6806a71679c88d4a5b2784c38ddb3892aa.src","preCode":"  @Test public void testCustomProviderWithRelMetadataQuery() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          cluster.setMetadataQuery(MyRelMetadataQuery::new);\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    rel.getCluster().invalidateMetadataQuery();\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq1 = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1270,"status":"M"}],"commitId":"f90e5d7b48848191c1a70e6c0f78eece93433806","commitMessage":"@@@[CALCITE-3487] Should not hard code RelMetadataQuery class in VolcanoPlanner.isValid() (Xiening Dai)\n\nAdd a new method to get RelMetadataQuery supplier from RelOptCluster. And use\nthe supplier to create corresponding RelMetadataQuery object in isValid() call.\n\nAlso rename setMetadataQuery() to setMetadataQuerySupplier().\n\nClose #1569\n","date":"2019-11-09 07:20:01","modifiedFileCount":"4","status":"M","submitter":"Xiening Dai"},{"authorTime":"2020-02-13 15:03:17","codes":[{"authorDate":"2019-10-25 22:40:36","commitOrder":3,"curCode":"  @Test public void testCustomProviderWithRelMetadataFactory() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    \r\n    final RelOptPlanner planner = rel.getCluster().getPlanner();\n    rel.getCluster().setMetadataProvider(\n        new CachingRelMetadataProvider(\n            rel.getCluster().getMetadataProvider(), planner));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(6));\n\n    \r\n    long timestamp = planner.getRelMetadataTimestamp(rel);\n    assertThat(timestamp, equalTo(0L));\n    ((MockRelOptPlanner) planner).setRelMetadataTimestamp(timestamp + 1);\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n  }\n","date":"2019-10-30 10:10:44","endLine":1246,"groupId":"14976","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCustomProviderWithRelMetadataFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/d2de04e1f002bb086c95d3a32edb41ffb94f09.src","preCode":"  @Test public void testCustomProviderWithRelMetadataFactory() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    \r\n    final RelOptPlanner planner = rel.getCluster().getPlanner();\n    rel.getCluster().setMetadataProvider(\n        new CachingRelMetadataProvider(\n            rel.getCluster().getMetadataProvider(), planner));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(6));\n\n    \r\n    long timestamp = planner.getRelMetadataTimestamp(rel);\n    assertThat(timestamp, equalTo(0L));\n    ((MockRelOptPlanner) planner).setRelMetadataTimestamp(timestamp + 1);\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1183,"status":"N"},{"authorDate":"2020-02-13 15:03:17","commitOrder":3,"curCode":"  @Test public void testCustomProviderWithRelMetadataQuery() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          cluster.setMetadataQuerySupplier(MyRelMetadataQuery::new);\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq = (MyRelMetadataQuery) rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    rel.getCluster().invalidateMetadataQuery();\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq1 = (MyRelMetadataQuery) rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    \r\n    rel.getCluster().setMetadataQuerySupplier(RelMetadataQuery::instance);\n  }\n","date":"2020-02-14 09:11:28","endLine":1454,"groupId":"9016","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomProviderWithRelMetadataQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/65/cee7f874be92ef87430485848a8320be9cb36b.src","preCode":"  @Test public void testCustomProviderWithRelMetadataQuery() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          cluster.setMetadataQuerySupplier(MyRelMetadataQuery::new);\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    rel.getCluster().invalidateMetadataQuery();\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq1 = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1395,"status":"M"}],"commitId":"dfdb3354c5f4bca1fe5a53a1aecff6ca4bc1a0c2","commitMessage":"@@@[CALCITE-3792] Remove the generic type declaration of method\n\n* The type inference of Scala code 'val mq = cluster.getMetadataQuery'\nis failed if we have that generic type declaration for the Java method\n* After this change.  we need a explicit cast for RelMetadataQuery\nsub-class\n* Fix the RelMetadataTest to reset the RelMetadataQuery instance as\ndefault after a test\n* Also rename RelOptCluster#withHintStrategies to setHintStrategies\nbecause it does not really return a new copy\n","date":"2020-02-14 09:11:28","modifiedFileCount":"4","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testCustomProviderWithRelMetadataFactory() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    \r\n    final RelOptPlanner planner = rel.getCluster().getPlanner();\n    rel.getCluster().setMetadataProvider(\n        new CachingRelMetadataProvider(\n            rel.getCluster().getMetadataProvider(), planner));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(6));\n\n    \r\n    long timestamp = planner.getRelMetadataTimestamp(rel);\n    assertThat(timestamp, equalTo(0L));\n    ((MockRelOptPlanner) planner).setRelMetadataTimestamp(timestamp + 1);\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n  }\n","date":"2020-04-06 04:57:49","endLine":1393,"groupId":"14976","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCustomProviderWithRelMetadataFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testCustomProviderWithRelMetadataFactory() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    \r\n    final RelOptPlanner planner = rel.getCluster().getPlanner();\n    rel.getCluster().setMetadataProvider(\n        new CachingRelMetadataProvider(\n            rel.getCluster().getMetadataProvider(), planner));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(6));\n\n    \r\n    long timestamp = planner.getRelMetadataTimestamp(rel);\n    assertThat(timestamp, equalTo(0L));\n    ((MockRelOptPlanner) planner).setRelMetadataTimestamp(timestamp + 1);\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1330,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testCustomProviderWithRelMetadataQuery() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          cluster.setMetadataQuerySupplier(MyRelMetadataQuery::new);\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq = (MyRelMetadataQuery) rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    rel.getCluster().invalidateMetadataQuery();\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq1 = (MyRelMetadataQuery) rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    \r\n    rel.getCluster().setMetadataQuerySupplier(RelMetadataQuery::instance);\n  }\n","date":"2020-04-06 04:57:49","endLine":1454,"groupId":"9016","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomProviderWithRelMetadataQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testCustomProviderWithRelMetadataQuery() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          cluster.setMetadataQuerySupplier(MyRelMetadataQuery::new);\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq = (MyRelMetadataQuery) rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    rel.getCluster().invalidateMetadataQuery();\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq1 = (MyRelMetadataQuery) rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    \r\n    rel.getCluster().setMetadataQuerySupplier(RelMetadataQuery::instance);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1395,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2021-08-07 02:06:59","commitOrder":5,"curCode":"  @Test void testCustomProviderWithRelMetadataFactory() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    \r\n    final RelOptPlanner planner = rel.getCluster().getPlanner();\n    rel.getCluster().setMetadataProvider(\n        new org.apache.calcite.rel.metadata.CachingRelMetadataProvider(\n            rel.getCluster().getMetadataProvider(), planner));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(6));\n\n    \r\n    long timestamp = planner.getRelMetadataTimestamp(rel);\n    assertThat(timestamp, equalTo(0L));\n    ((MockRelOptPlanner) planner).setRelMetadataTimestamp(timestamp + 1);\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n  }\n","date":"2021-09-24 06:31:38","endLine":1664,"groupId":"101118","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testCustomProviderWithRelMetadataFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a4/97a34f5812c23eee65906aa912f3d8881c68a7.src","preCode":"  @Test void testCustomProviderWithRelMetadataFactory() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    \r\n    final RelOptPlanner planner = rel.getCluster().getPlanner();\n    rel.getCluster().setMetadataProvider(\n        new CachingRelMetadataProvider(\n            rel.getCluster().getMetadataProvider(), planner));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(6));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(6));\n\n    \r\n    long timestamp = planner.getRelMetadataTimestamp(rel);\n    assertThat(timestamp, equalTo(0L));\n    ((MockRelOptPlanner) planner).setRelMetadataTimestamp(timestamp + 1);\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(7));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1601,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testCustomProviderWithRelMetadataQuery() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          cluster.setMetadataQuerySupplier(MyRelMetadataQuery::new);\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq = (MyRelMetadataQuery) rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    rel.getCluster().invalidateMetadataQuery();\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq1 = (MyRelMetadataQuery) rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    \r\n    rel.getCluster().setMetadataQuerySupplier(RelMetadataQuery::instance);\n  }\n","date":"2020-04-06 04:57:49","endLine":1454,"groupId":"101118","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomProviderWithRelMetadataQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test void testCustomProviderWithRelMetadataQuery() {\n    final List<String> buf = new ArrayList<>();\n    ColTypeImpl.THREAD_LIST.set(buf);\n\n    final String sql = \"select deptno, count(*) from emp where deptno > 10 \"\n        + \"group by deptno having count(*) = 0\";\n    final RelRoot root = tester\n        .withClusterFactory(cluster -> {\n          \r\n          \r\n          final ImmutableList<RelMetadataProvider> list =\n              ImmutableList.of(ColTypeImpl.SOURCE, ColTypeImpl.SOURCE,\n                  cluster.getMetadataProvider());\n          cluster.setMetadataProvider(\n              ChainedRelMetadataProvider.of(list));\n          cluster.setMetadataQuerySupplier(MyRelMetadataQuery::new);\n          return cluster;\n        })\n        .convertSqlToRel(sql);\n    final RelNode rel = root.rel;\n\n    \r\n    assertThat(rel, instanceOf(LogicalFilter.class));\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq = (MyRelMetadataQuery) rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq, rel, 0), equalTo(\"DEPTNO-rel\"));\n    assertThat(colType(mq, rel, 1), equalTo(\"EXPR$1-rel\"));\n\n    \r\n    \r\n    final RelNode input = rel.getInput(0);\n    assertThat(input, instanceOf(LogicalAggregate.class));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n\n    \r\n    \r\n    assertThat(buf.toString(), equalTo(\"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(3));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 1), equalTo(\"EXPR$1-agg\"));\n    assertThat(buf.size(), equalTo(4));\n    assertThat(colType(mq, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(4));\n\n    \r\n    rel.getCluster().invalidateMetadataQuery();\n    assertThat(rel.getCluster().getMetadataQuery(), instanceOf(MyRelMetadataQuery.class));\n    final MyRelMetadataQuery mq1 = (MyRelMetadataQuery) rel.getCluster().getMetadataQuery();\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    assertThat(colType(mq1, input, 0), equalTo(\"DEPTNO-agg\"));\n    assertThat(buf.size(), equalTo(5));\n    \r\n    rel.getCluster().setMetadataQuerySupplier(RelMetadataQuery::instance);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1395,"status":"N"}],"commitId":"b51a2e14343df089ee0b6c3e8a20c00c51186421","commitMessage":"@@@[CALCITE-4544] Deprecate Metadata API backed by Java Reflection (James Starr)\n\nDeprecating:\n* RelOptPlanner.registerMetadataProviders - Used to support custom nodes\n  in reflection based rel metadata.  The generated code based rel\n  metadata has tight couple so this is not needed.\n* RelOptPlanner.getRelMetadataTimestamp - Used for cache invalidation in\n  reflection based rel metadata.  The generated code based rel\n  metadata has tight couple so this is not needed.\n* RelOptCluster.metadataFactory - Exposing an api for reflection based\n  rel metadata.\n* RelNode.metadata - An api for accessing reflection based rel metadata.\n* CachingRelMetadataProvider - Implements caching for reflection based\n  rel metadata.  Generated code base rel metadata use a Table in\n  RelMetadataQuery and tight coupling for caching.\n* RelMetadataProvider.apply - The primary entry point reflection based\n  rel metadata.\n* MetadataFactory - An api for reflection based rel metadata.\n* MockRelOptPlanner.setRelMetadataTimestamp - Used in testing reflection\n  based rel metadata.\n* ReflectiveRelMetadataProvider.{map.  metadataClass0 - Used in the\n  implementation reflection based rel metadata.\n* VolcanoRelMetadataProvider - Supports custom volcanno rels in\n  reflection based rel metadata.\n* HepRelMetadataProvider - Supports custom hep rels in reflection based\n  rel metadata.\n\nClose apache/calcite#2475\n","date":"2021-09-24 06:31:38","modifiedFileCount":"20","status":"M","submitter":"James Starr"}]
