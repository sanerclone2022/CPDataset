[{"authorTime":"2019-11-15 15:05:25","codes":[{"authorDate":"2018-03-04 13:26:26","commitOrder":2,"curCode":"  public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    SqlIntervalLiteral.IntervalValue interval =\n        (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    writer.keyword(\"INTERVAL\");\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(\"'\" + literal.getValue().toString() + \"'\");\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n  }\n","date":"2018-03-25 06:58:01","endLine":418,"groupId":"6708","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseSqlIntervalLiteral","params":"(SqlWriterwriter@SqlIntervalLiteralliteral@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c0/ebbb92b06269aaf1dd03ee4a5149b8deda4c7b.src","preCode":"  public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    SqlIntervalLiteral.IntervalValue interval =\n        (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    writer.keyword(\"INTERVAL\");\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(\"'\" + literal.getValue().toString() + \"'\");\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"NB"},{"authorDate":"2019-11-15 15:05:25","commitOrder":2,"curCode":"  @Override public void unparseSqlIntervalLiteral(\n          SqlWriter writer, SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    SqlIntervalLiteral.IntervalValue interval =\n            (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    writer.keyword(\"INTERVAL\");\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    Long intervalValueInLong;\n    try {\n      intervalValueInLong = Long.parseLong(literal.getValue().toString());\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Only INT64 is supported as the interval value for BigQuery.\");\n    }\n    writer.literal(intervalValueInLong.toString());\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n            RelDataTypeSystem.DEFAULT);\n  }\n","date":"2019-12-12 13:43:30","endLine":179,"groupId":"6708","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseSqlIntervalLiteral","params":"(SqlWriterwriter@SqlIntervalLiteralliteral@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e4/4be18de1893e8991dd050773083c47f44a371a.src","preCode":"  @Override public void unparseSqlIntervalLiteral(\n          SqlWriter writer, SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    SqlIntervalLiteral.IntervalValue interval =\n            (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    writer.keyword(\"INTERVAL\");\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    Long intervalValueInLong;\n    try {\n      intervalValueInLong = Long.parseLong(literal.getValue().toString());\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Only INT64 is supported as the interval value for BigQuery.\");\n    }\n    writer.literal(intervalValueInLong.toString());\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n            RelDataTypeSystem.DEFAULT);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"B"}],"commitId":"fd92642d8a0b08ed0b1b4ccefd0de58d6239dd03","commitMessage":"@@@[CALCITE-3381] Unparse to correct BigQuery ingterval syngax: INTERVAL int64 time_unit. Range time unit is not supported yet by BigQuery (amaliujia)\n\nBigQuery only allows interval syntax: INTERVAL int64 time_unit.\n\nclose apache/calcite#1588\n","date":"2019-12-12 13:43:30","modifiedFileCount":"2","status":"M","submitter":"amaliujia"},{"authorTime":"2020-07-21 04:33:06","codes":[{"authorDate":"2020-07-21 04:33:06","commitOrder":3,"curCode":"  public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    SqlIntervalLiteral.IntervalValue interval =\n        literal.getValueAs(SqlIntervalLiteral.IntervalValue.class);\n    writer.keyword(\"INTERVAL\");\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(\"'\" + literal.getValue().toString() + \"'\");\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n  }\n","date":"2020-07-29 03:09:43","endLine":537,"groupId":"6708","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseSqlIntervalLiteral","params":"(SqlWriterwriter@SqlIntervalLiteralliteral@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5d/edfc865172e39ee6d79987c97071595552e9ee.src","preCode":"  public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    SqlIntervalLiteral.IntervalValue interval =\n        (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    writer.keyword(\"INTERVAL\");\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(\"'\" + literal.getValue().toString() + \"'\");\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":526,"status":"M"},{"authorDate":"2020-07-21 04:33:06","commitOrder":3,"curCode":"  @Override public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    SqlIntervalLiteral.IntervalValue interval =\n        literal.getValueAs(SqlIntervalLiteral.IntervalValue.class);\n    writer.keyword(\"INTERVAL\");\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    Long intervalValueInLong;\n    try {\n      intervalValueInLong = Long.parseLong(literal.getValue().toString());\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Only INT64 is supported as the interval value for BigQuery.\");\n    }\n    writer.literal(intervalValueInLong.toString());\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n            RelDataTypeSystem.DEFAULT);\n  }\n","date":"2020-07-29 03:09:43","endLine":184,"groupId":"6708","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseSqlIntervalLiteral","params":"(SqlWriterwriter@SqlIntervalLiteralliteral@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/19/276b1b9541f246d08b9b6b3636cbda99667159.src","preCode":"  @Override public void unparseSqlIntervalLiteral(\n          SqlWriter writer, SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    SqlIntervalLiteral.IntervalValue interval =\n            (SqlIntervalLiteral.IntervalValue) literal.getValue();\n    writer.keyword(\"INTERVAL\");\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    Long intervalValueInLong;\n    try {\n      intervalValueInLong = Long.parseLong(literal.getValue().toString());\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Only INT64 is supported as the interval value for BigQuery.\");\n    }\n    writer.literal(intervalValueInLong.toString());\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n            RelDataTypeSystem.DEFAULT);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"03c76a7d2b896042ab417ddc36f1849f874ad3dd","commitMessage":"@@@[CALCITE-4134] Interval expressions\n","date":"2020-07-29 03:09:43","modifiedFileCount":"20","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    SqlIntervalLiteral.IntervalValue interval =\n        literal.getValueAs(SqlIntervalLiteral.IntervalValue.class);\n    writer.keyword(\"INTERVAL\");\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(\"'\" + interval.getIntervalLiteral() + \"'\");\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n  }\n","date":"2020-11-30 06:45:33","endLine":539,"groupId":"101759","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseSqlIntervalLiteral","params":"(SqlWriterwriter@SqlIntervalLiteralliteral@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/36/d2566e8b6dff1c432e75bf0f0dfc499451e4b8.src","preCode":"  public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    SqlIntervalLiteral.IntervalValue interval =\n        literal.getValueAs(SqlIntervalLiteral.IntervalValue.class);\n    writer.keyword(\"INTERVAL\");\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    writer.literal(\"'\" + literal.getValue().toString() + \"'\");\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n        RelDataTypeSystem.DEFAULT);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":528,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  @Override public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    SqlIntervalLiteral.IntervalValue interval =\n        literal.getValueAs(SqlIntervalLiteral.IntervalValue.class);\n    writer.keyword(\"INTERVAL\");\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    try {\n      Long.parseLong(interval.getIntervalLiteral());\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Only INT64 is supported as the interval value for BigQuery.\");\n    }\n    writer.literal(interval.getIntervalLiteral());\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n            RelDataTypeSystem.DEFAULT);\n  }\n","date":"2020-11-30 06:45:33","endLine":203,"groupId":"101759","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseSqlIntervalLiteral","params":"(SqlWriterwriter@SqlIntervalLiteralliteral@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/18/2075742a2772c4dd008b1dd0e1af996e9f348b.src","preCode":"  @Override public void unparseSqlIntervalLiteral(SqlWriter writer,\n      SqlIntervalLiteral literal, int leftPrec, int rightPrec) {\n    SqlIntervalLiteral.IntervalValue interval =\n        literal.getValueAs(SqlIntervalLiteral.IntervalValue.class);\n    writer.keyword(\"INTERVAL\");\n    if (interval.getSign() == -1) {\n      writer.print(\"-\");\n    }\n    Long intervalValueInLong;\n    try {\n      intervalValueInLong = Long.parseLong(literal.getValue().toString());\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Only INT64 is supported as the interval value for BigQuery.\");\n    }\n    writer.literal(intervalValueInLong.toString());\n    unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(),\n            RelDataTypeSystem.DEFAULT);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
