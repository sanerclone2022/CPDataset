[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testCastExactNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")\n          || type.equalsIgnoreCase(\"REAL\")) {\n        \r\n        continue;\n      }\n\n      \r\n      checkCastToScalarOkay(MAX_NUMERIC_STRINGS[i], type);\n      checkCastToScalarOkay(MIN_NUMERIC_STRINGS[i], type);\n\n      \r\n      if (type.equalsIgnoreCase(\"BIGINT\")) {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n        checkCastFails(\n            MIN_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      } else {\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n        checkCastFails(\n            MIN_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n      }\n\n      if (!enable) {\n        return;\n      }\n      \r\n      checkCastToScalarOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MAX_NUMERIC_STRINGS[i]);\n      checkCastToScalarOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MIN_NUMERIC_STRINGS[i]);\n\n      checkCastFails(\n          \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type, OUT_OF_RANGE_MESSAGE,\n          true);\n      checkCastFails(\n          \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          OUT_OF_RANGE_MESSAGE,\n          true);\n\n      \r\n      checkCastToString(MAX_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MAX_NUMERIC_STRINGS[i], type, null);\n\n      checkCastToString(MIN_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MIN_NUMERIC_STRINGS[i], type, null);\n\n      checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":597,"groupId":"220","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastExactNumericLimits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCastExactNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")\n          || type.equalsIgnoreCase(\"REAL\")) {\n        \r\n        continue;\n      }\n\n      \r\n      checkCastToScalarOkay(MAX_NUMERIC_STRINGS[i], type);\n      checkCastToScalarOkay(MIN_NUMERIC_STRINGS[i], type);\n\n      \r\n      if (type.equalsIgnoreCase(\"BIGINT\")) {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n        checkCastFails(\n            MIN_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      } else {\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n        checkCastFails(\n            MIN_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n      }\n\n      if (!enable) {\n        return;\n      }\n      \r\n      checkCastToScalarOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MAX_NUMERIC_STRINGS[i]);\n      checkCastToScalarOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MIN_NUMERIC_STRINGS[i]);\n\n      checkCastFails(\n          \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type, OUT_OF_RANGE_MESSAGE,\n          true);\n      checkCastFails(\n          \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          OUT_OF_RANGE_MESSAGE,\n          true);\n\n      \r\n      checkCastToString(MAX_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MAX_NUMERIC_STRINGS[i], type, null);\n\n      checkCastToString(MIN_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MIN_NUMERIC_STRINGS[i], type, null);\n\n      checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testCastApproxNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n      boolean isFloat;\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")) {\n        isFloat = false;\n      } else if (type.equalsIgnoreCase(\"REAL\")) {\n        isFloat = true;\n      } else {\n        \r\n        continue;\n      }\n\n      if (!enable) {\n        return;\n      }\n\n      \r\n      checkCastToApproxOkay(\n          MAX_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          MIN_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      if (isFloat) {\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n      } else {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      }\n\n      \r\n      checkCastToApproxOkay(MIN_OVERFLOW_NUMERIC_STRINGS[i], type, 0, 0);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      checkCastFails(\n          \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          OUT_OF_RANGE_MESSAGE,\n          true);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          0,\n          0);\n\n      \r\n\n      \r\n      checkCastToString(\n          MAX_NUMERIC_STRINGS[i], null,\n          isFloat ? null : \"1.79769313486231E308\");\n\n      \r\n      \r\n      \r\n      if (false ) { \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402824E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            \r\n            isFloat ? null : \"4.940656458412465E-324\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401299E-45\" : \"4.940656458412465E-324\");\n      } else if (false ) {\n        \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402823E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            isFloat ? null : null); \r\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401298E-45\" : null);\n      }\n\n      checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":990,"groupId":"5957","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastApproxNumericLimits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCastApproxNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n      boolean isFloat;\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")) {\n        isFloat = false;\n      } else if (type.equalsIgnoreCase(\"REAL\")) {\n        isFloat = true;\n      } else {\n        \r\n        continue;\n      }\n\n      if (!enable) {\n        return;\n      }\n\n      \r\n      checkCastToApproxOkay(\n          MAX_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          MIN_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      if (isFloat) {\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n      } else {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      }\n\n      \r\n      checkCastToApproxOkay(MIN_OVERFLOW_NUMERIC_STRINGS[i], type, 0, 0);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      checkCastFails(\n          \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          OUT_OF_RANGE_MESSAGE,\n          true);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          0,\n          0);\n\n      \r\n\n      \r\n      checkCastToString(\n          MAX_NUMERIC_STRINGS[i], null,\n          isFloat ? null : \"1.79769313486231E308\");\n\n      \r\n      \r\n      \r\n      if (false ) { \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402824E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            \r\n            isFloat ? null : \"4.940656458412465E-324\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401299E-45\" : \"4.940656458412465E-324\");\n      } else if (false ) {\n        \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402823E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            isFloat ? null : null); \r\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401298E-45\" : null);\n      }\n\n      checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":871,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2016-10-10 07:21:47","commitOrder":2,"curCode":"  @Test public void testCastExactNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")\n          || type.equalsIgnoreCase(\"REAL\")) {\n        \r\n        continue;\n      }\n\n      \r\n      checkCastToScalarOkay(MAX_NUMERIC_STRINGS[i], type);\n      checkCastToScalarOkay(MIN_NUMERIC_STRINGS[i], type);\n\n      \r\n      if (type.equalsIgnoreCase(\"BIGINT\")) {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n        checkCastFails(\n            MIN_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      } else {\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n        checkCastFails(\n            MIN_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n      }\n\n      \r\n      checkCastToScalarOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MAX_NUMERIC_STRINGS[i]);\n      checkCastToScalarOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MIN_NUMERIC_STRINGS[i]);\n\n      checkCastFails(\n          \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type, OUT_OF_RANGE_MESSAGE,\n          true);\n      checkCastFails(\n          \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          OUT_OF_RANGE_MESSAGE,\n          true);\n\n      \r\n      checkCastToString(MAX_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MAX_NUMERIC_STRINGS[i], type, null);\n\n      checkCastToString(MIN_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MIN_NUMERIC_STRINGS[i], type, null);\n\n      checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n    }\n  }\n","date":"2016-10-19 01:20:28","endLine":697,"groupId":"220","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastExactNumericLimits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/3acc604276705fd31d8ea3318bc881d0b976f7.src","preCode":"  @Test public void testCastExactNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")\n          || type.equalsIgnoreCase(\"REAL\")) {\n        \r\n        continue;\n      }\n\n      \r\n      checkCastToScalarOkay(MAX_NUMERIC_STRINGS[i], type);\n      checkCastToScalarOkay(MIN_NUMERIC_STRINGS[i], type);\n\n      \r\n      if (type.equalsIgnoreCase(\"BIGINT\")) {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n        checkCastFails(\n            MIN_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      } else {\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n        checkCastFails(\n            MIN_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n      }\n\n      if (!enable) {\n        return;\n      }\n      \r\n      checkCastToScalarOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MAX_NUMERIC_STRINGS[i]);\n      checkCastToScalarOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MIN_NUMERIC_STRINGS[i]);\n\n      checkCastFails(\n          \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type, OUT_OF_RANGE_MESSAGE,\n          true);\n      checkCastFails(\n          \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          OUT_OF_RANGE_MESSAGE,\n          true);\n\n      \r\n      checkCastToString(MAX_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MAX_NUMERIC_STRINGS[i], type, null);\n\n      checkCastToString(MIN_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MIN_NUMERIC_STRINGS[i], type, null);\n\n      checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":628,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testCastApproxNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n      boolean isFloat;\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")) {\n        isFloat = false;\n      } else if (type.equalsIgnoreCase(\"REAL\")) {\n        isFloat = true;\n      } else {\n        \r\n        continue;\n      }\n\n      if (!enable) {\n        return;\n      }\n\n      \r\n      checkCastToApproxOkay(\n          MAX_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          MIN_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      if (isFloat) {\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n      } else {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      }\n\n      \r\n      checkCastToApproxOkay(MIN_OVERFLOW_NUMERIC_STRINGS[i], type, 0, 0);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      checkCastFails(\n          \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          OUT_OF_RANGE_MESSAGE,\n          true);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          0,\n          0);\n\n      \r\n\n      \r\n      checkCastToString(\n          MAX_NUMERIC_STRINGS[i], null,\n          isFloat ? null : \"1.79769313486231E308\");\n\n      \r\n      \r\n      \r\n      if (false ) { \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402824E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            \r\n            isFloat ? null : \"4.940656458412465E-324\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401299E-45\" : \"4.940656458412465E-324\");\n      } else if (false ) {\n        \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402823E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            isFloat ? null : null); \r\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401298E-45\" : null);\n      }\n\n      checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":990,"groupId":"5957","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastApproxNumericLimits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCastApproxNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n      boolean isFloat;\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")) {\n        isFloat = false;\n      } else if (type.equalsIgnoreCase(\"REAL\")) {\n        isFloat = true;\n      } else {\n        \r\n        continue;\n      }\n\n      if (!enable) {\n        return;\n      }\n\n      \r\n      checkCastToApproxOkay(\n          MAX_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          MIN_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      if (isFloat) {\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n      } else {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      }\n\n      \r\n      checkCastToApproxOkay(MIN_OVERFLOW_NUMERIC_STRINGS[i], type, 0, 0);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      checkCastFails(\n          \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          OUT_OF_RANGE_MESSAGE,\n          true);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          0,\n          0);\n\n      \r\n\n      \r\n      checkCastToString(\n          MAX_NUMERIC_STRINGS[i], null,\n          isFloat ? null : \"1.79769313486231E308\");\n\n      \r\n      \r\n      \r\n      if (false ) { \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402824E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            \r\n            isFloat ? null : \"4.940656458412465E-324\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401299E-45\" : \"4.940656458412465E-324\");\n      } else if (false ) {\n        \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402823E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            isFloat ? null : null); \r\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401298E-45\" : null);\n      }\n\n      checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":871,"status":"N"}],"commitId":"54556b82c0599012f2e7fefaae3a9868cb68f879","commitMessage":"@@@[CALCITE-1417] In RelBuilder.  simplify \"CAST(literal TO type)\" to a literal when possible\n\nThis allows us to simplify logic that the Druid adapter uses to push\ndown time ranges. For example.  CAST('2016-01-23' AS DATE) will already\nbe a DATE value.\n\nYou can turn off simplification (mainly for testing purposes) by\nsetting Hook.REL_BUILDER_SIMPLIFY. This the first time we have a\nallowed a Hook to act like a property.\n\nAdd a test case (disabled) for [CALCITE-1439].\n\nAllow QuidemTest to accept test script names as command-line\narguments.\n\nUse RexExecutor for constant reduction (although not necessarily the\nsame one that will be used later in planning).\n","date":"2016-10-19 01:20:28","modifiedFileCount":"13","status":"M","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2018-09-12 20:34:34","commitOrder":3,"curCode":"  @Test public void testCastExactNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")\n          || type.equalsIgnoreCase(\"REAL\")) {\n        \r\n        continue;\n      }\n\n      \r\n      checkCastToScalarOkay(MAX_NUMERIC_STRINGS[i], type);\n      checkCastToScalarOkay(MIN_NUMERIC_STRINGS[i], type);\n\n      \r\n      if (type.equalsIgnoreCase(\"BIGINT\")) {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n        checkCastFails(\n            MIN_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      } else {\n        if (Bug.CALCITE_2539_FIXED) {\n          checkCastFails(\n              MAX_OVERFLOW_NUMERIC_STRINGS[i],\n              type, OUT_OF_RANGE_MESSAGE,\n              true);\n          checkCastFails(\n              MIN_OVERFLOW_NUMERIC_STRINGS[i],\n              type, OUT_OF_RANGE_MESSAGE,\n              true);\n        }\n      }\n\n      \r\n      checkCastToScalarOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MAX_NUMERIC_STRINGS[i]);\n      checkCastToScalarOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MIN_NUMERIC_STRINGS[i]);\n\n      if (Bug.CALCITE_2539_FIXED) {\n        checkCastFails(\n            \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n        checkCastFails(\n            \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n            type,\n            OUT_OF_RANGE_MESSAGE,\n            true);\n      }\n\n      \r\n      checkCastToString(MAX_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MAX_NUMERIC_STRINGS[i], type, null);\n\n      checkCastToString(MIN_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MIN_NUMERIC_STRINGS[i], type, null);\n\n      if (Bug.CALCITE_2539_FIXED) {\n        checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n      }\n    }\n  }\n","date":"2018-09-18 00:39:31","endLine":732,"groupId":"220","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastExactNumericLimits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/aa/c111c141879acf8ba6e58f1fdfe8909ea49bde.src","preCode":"  @Test public void testCastExactNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")\n          || type.equalsIgnoreCase(\"REAL\")) {\n        \r\n        continue;\n      }\n\n      \r\n      checkCastToScalarOkay(MAX_NUMERIC_STRINGS[i], type);\n      checkCastToScalarOkay(MIN_NUMERIC_STRINGS[i], type);\n\n      \r\n      if (type.equalsIgnoreCase(\"BIGINT\")) {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n        checkCastFails(\n            MIN_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      } else {\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n        checkCastFails(\n            MIN_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n      }\n\n      \r\n      checkCastToScalarOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MAX_NUMERIC_STRINGS[i]);\n      checkCastToScalarOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MIN_NUMERIC_STRINGS[i]);\n\n      checkCastFails(\n          \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type, OUT_OF_RANGE_MESSAGE,\n          true);\n      checkCastFails(\n          \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          OUT_OF_RANGE_MESSAGE,\n          true);\n\n      \r\n      checkCastToString(MAX_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MAX_NUMERIC_STRINGS[i], type, null);\n\n      checkCastToString(MIN_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MIN_NUMERIC_STRINGS[i], type, null);\n\n      checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":657,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":3,"curCode":"  @Test public void testCastApproxNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n      boolean isFloat;\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")) {\n        isFloat = false;\n      } else if (type.equalsIgnoreCase(\"REAL\")) {\n        isFloat = true;\n      } else {\n        \r\n        continue;\n      }\n\n      if (!enable) {\n        return;\n      }\n\n      \r\n      checkCastToApproxOkay(\n          MAX_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          MIN_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      if (isFloat) {\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n      } else {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      }\n\n      \r\n      checkCastToApproxOkay(MIN_OVERFLOW_NUMERIC_STRINGS[i], type, 0, 0);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      checkCastFails(\n          \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          OUT_OF_RANGE_MESSAGE,\n          true);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          0,\n          0);\n\n      \r\n\n      \r\n      checkCastToString(\n          MAX_NUMERIC_STRINGS[i], null,\n          isFloat ? null : \"1.79769313486231E308\");\n\n      \r\n      \r\n      \r\n      if (false ) { \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402824E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            \r\n            isFloat ? null : \"4.940656458412465E-324\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401299E-45\" : \"4.940656458412465E-324\");\n      } else if (false ) {\n        \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402823E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            isFloat ? null : null); \r\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401298E-45\" : null);\n      }\n\n      checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":990,"groupId":"5957","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastApproxNumericLimits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCastApproxNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n      boolean isFloat;\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")) {\n        isFloat = false;\n      } else if (type.equalsIgnoreCase(\"REAL\")) {\n        isFloat = true;\n      } else {\n        \r\n        continue;\n      }\n\n      if (!enable) {\n        return;\n      }\n\n      \r\n      checkCastToApproxOkay(\n          MAX_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          MIN_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      if (isFloat) {\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n      } else {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      }\n\n      \r\n      checkCastToApproxOkay(MIN_OVERFLOW_NUMERIC_STRINGS[i], type, 0, 0);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      checkCastFails(\n          \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          OUT_OF_RANGE_MESSAGE,\n          true);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          0,\n          0);\n\n      \r\n\n      \r\n      checkCastToString(\n          MAX_NUMERIC_STRINGS[i], null,\n          isFloat ? null : \"1.79769313486231E308\");\n\n      \r\n      \r\n      \r\n      if (false ) { \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402824E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            \r\n            isFloat ? null : \"4.940656458412465E-324\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401299E-45\" : \"4.940656458412465E-324\");\n      } else if (false ) {\n        \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402823E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            isFloat ? null : null); \r\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401298E-45\" : null);\n      }\n\n      checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":871,"status":"N"}],"commitId":"c69e1bcb13000adf9ae4bd433e2f8c75baba1501","commitMessage":"@@@[CALCITE-2535] Enable SqlTester.checkFails (previously it was a no-op) (Hongze Zhang)\n\nClose apache/calcite#823\n","date":"2018-09-18 00:39:31","modifiedFileCount":"9","status":"M","submitter":"hongzezhang"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testCastExactNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")\n          || type.equalsIgnoreCase(\"REAL\")) {\n        \r\n        continue;\n      }\n\n      \r\n      checkCastToScalarOkay(MAX_NUMERIC_STRINGS[i], type);\n      checkCastToScalarOkay(MIN_NUMERIC_STRINGS[i], type);\n\n      \r\n      if (type.equalsIgnoreCase(\"BIGINT\")) {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n        checkCastFails(\n            MIN_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      } else {\n        if (Bug.CALCITE_2539_FIXED) {\n          checkCastFails(\n              MAX_OVERFLOW_NUMERIC_STRINGS[i],\n              type, OUT_OF_RANGE_MESSAGE,\n              true);\n          checkCastFails(\n              MIN_OVERFLOW_NUMERIC_STRINGS[i],\n              type, OUT_OF_RANGE_MESSAGE,\n              true);\n        }\n      }\n\n      \r\n      checkCastToScalarOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MAX_NUMERIC_STRINGS[i]);\n      checkCastToScalarOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MIN_NUMERIC_STRINGS[i]);\n\n      if (Bug.CALCITE_2539_FIXED) {\n        checkCastFails(\n            \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n        checkCastFails(\n            \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n            type,\n            OUT_OF_RANGE_MESSAGE,\n            true);\n      }\n\n      \r\n      checkCastToString(MAX_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MAX_NUMERIC_STRINGS[i], type, null);\n\n      checkCastToString(MIN_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MIN_NUMERIC_STRINGS[i], type, null);\n\n      if (Bug.CALCITE_2539_FIXED) {\n        checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n      }\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":758,"groupId":"10739","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastExactNumericLimits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testCastExactNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")\n          || type.equalsIgnoreCase(\"REAL\")) {\n        \r\n        continue;\n      }\n\n      \r\n      checkCastToScalarOkay(MAX_NUMERIC_STRINGS[i], type);\n      checkCastToScalarOkay(MIN_NUMERIC_STRINGS[i], type);\n\n      \r\n      if (type.equalsIgnoreCase(\"BIGINT\")) {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n        checkCastFails(\n            MIN_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      } else {\n        if (Bug.CALCITE_2539_FIXED) {\n          checkCastFails(\n              MAX_OVERFLOW_NUMERIC_STRINGS[i],\n              type, OUT_OF_RANGE_MESSAGE,\n              true);\n          checkCastFails(\n              MIN_OVERFLOW_NUMERIC_STRINGS[i],\n              type, OUT_OF_RANGE_MESSAGE,\n              true);\n        }\n      }\n\n      \r\n      checkCastToScalarOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MAX_NUMERIC_STRINGS[i]);\n      checkCastToScalarOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          MIN_NUMERIC_STRINGS[i]);\n\n      if (Bug.CALCITE_2539_FIXED) {\n        checkCastFails(\n            \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n        checkCastFails(\n            \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n            type,\n            OUT_OF_RANGE_MESSAGE,\n            true);\n      }\n\n      \r\n      checkCastToString(MAX_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MAX_NUMERIC_STRINGS[i], type, null);\n\n      checkCastToString(MIN_NUMERIC_STRINGS[i], null, null);\n      checkCastToString(MIN_NUMERIC_STRINGS[i], type, null);\n\n      if (Bug.CALCITE_2539_FIXED) {\n        checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n      }\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":683,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testCastApproxNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n      boolean isFloat;\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")) {\n        isFloat = false;\n      } else if (type.equalsIgnoreCase(\"REAL\")) {\n        isFloat = true;\n      } else {\n        \r\n        continue;\n      }\n\n      if (!enable) {\n        return;\n      }\n\n      \r\n      checkCastToApproxOkay(\n          MAX_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          MIN_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      if (isFloat) {\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n      } else {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      }\n\n      \r\n      checkCastToApproxOkay(MIN_OVERFLOW_NUMERIC_STRINGS[i], type, 0, 0);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      checkCastFails(\n          \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          OUT_OF_RANGE_MESSAGE,\n          true);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          0,\n          0);\n\n      \r\n\n      \r\n      checkCastToString(\n          MAX_NUMERIC_STRINGS[i], null,\n          isFloat ? null : \"1.79769313486231E308\");\n\n      \r\n      \r\n      \r\n      if (false ) { \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402824E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            \r\n            isFloat ? null : \"4.940656458412465E-324\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401299E-45\" : \"4.940656458412465E-324\");\n      } else if (false ) {\n        \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402823E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            isFloat ? null : null); \r\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401298E-45\" : null);\n      }\n\n      checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":1215,"groupId":"10739","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastApproxNumericLimits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testCastApproxNumericLimits() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    for (int i = 0; i < NUMERIC_TYPE_NAMES.length; i++) {\n      String type = NUMERIC_TYPE_NAMES[i];\n      boolean isFloat;\n\n      if (type.equalsIgnoreCase(\"DOUBLE\")\n          || type.equalsIgnoreCase(\"FLOAT\")) {\n        isFloat = false;\n      } else if (type.equalsIgnoreCase(\"REAL\")) {\n        isFloat = true;\n      } else {\n        \r\n        continue;\n      }\n\n      if (!enable) {\n        return;\n      }\n\n      \r\n      checkCastToApproxOkay(\n          MAX_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          MIN_NUMERIC_STRINGS[i],\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      if (isFloat) {\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, OUT_OF_RANGE_MESSAGE,\n            true);\n      } else {\n        \r\n        checkCastFails(\n            MAX_OVERFLOW_NUMERIC_STRINGS[i],\n            type, LITERAL_OUT_OF_RANGE_MESSAGE,\n            false);\n      }\n\n      \r\n      checkCastToApproxOkay(MIN_OVERFLOW_NUMERIC_STRINGS[i], type, 0, 0);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MAX_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MAX_NUMERIC_STRINGS[i]),\n          isFloat ? 1E32 : 0);\n      checkCastToApproxOkay(\n          \"'\" + MIN_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          Double.parseDouble(MIN_NUMERIC_STRINGS[i]),\n          0);\n\n      checkCastFails(\n          \"'\" + MAX_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          OUT_OF_RANGE_MESSAGE,\n          true);\n\n      \r\n      checkCastToApproxOkay(\n          \"'\" + MIN_OVERFLOW_NUMERIC_STRINGS[i] + \"'\",\n          type,\n          0,\n          0);\n\n      \r\n\n      \r\n      checkCastToString(\n          MAX_NUMERIC_STRINGS[i], null,\n          isFloat ? null : \"1.79769313486231E308\");\n\n      \r\n      \r\n      \r\n      if (false ) { \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402824E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            \r\n            isFloat ? null : \"4.940656458412465E-324\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401299E-45\" : \"4.940656458412465E-324\");\n      } else if (false ) {\n        \r\n        checkCastToString(\n            MAX_NUMERIC_STRINGS[i],\n            type,\n            \r\n            isFloat ? \"3.402823E38\" : \"1.797693134862316E308\");\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            null,\n            isFloat ? null : null); \r\n        checkCastToString(\n            MIN_NUMERIC_STRINGS[i],\n            type,\n            isFloat ? \"1.401298E-45\" : null);\n      }\n\n      checkCastFails(\"'notnumeric'\", type, INVALID_CHAR_MESSAGE, true);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1096,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
