[{"authorTime":"2016-03-14 13:06:30","codes":[{"authorDate":"2016-03-14 13:06:30","commitOrder":1,"curCode":"  @Test public void testIsUserDefined() throws SQLException {\n    List<SqlFunctionCategory> cats = new ArrayList<>();\n    for (SqlFunctionCategory c : SqlFunctionCategory.values()) {\n      if (c.isUserDefined()) {\n        cats.add(c);\n      }\n    }\n    check(cats, USER_DEFINED_FUNCTION, USER_DEFINED_PROCEDURE,\n        USER_DEFINED_CONSTRUCTOR, USER_DEFINED_SPECIFIC_FUNCTION,\n        USER_DEFINED_TABLE_FUNCTION, USER_DEFINED_TABLE_SPECIFIC_FUNCTION);\n  }\n","date":"2016-06-15 09:02:58","endLine":87,"groupId":"2618","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsUserDefined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/60cd03792b943e40fa1615e0c029d4e9ca735e.src","preCode":"  @Test public void testIsUserDefined() throws SQLException {\n    List<SqlFunctionCategory> cats = new ArrayList<>();\n    for (SqlFunctionCategory c : SqlFunctionCategory.values()) {\n      if (c.isUserDefined()) {\n        cats.add(c);\n      }\n    }\n    check(cats, USER_DEFINED_FUNCTION, USER_DEFINED_PROCEDURE,\n        USER_DEFINED_CONSTRUCTOR, USER_DEFINED_SPECIFIC_FUNCTION,\n        USER_DEFINED_TABLE_FUNCTION, USER_DEFINED_TABLE_SPECIFIC_FUNCTION);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/prepare/LookupOperatorOverloadsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2016-03-14 13:06:30","commitOrder":1,"curCode":"  @Test public void testIsSpecific() throws SQLException {\n    List<SqlFunctionCategory> cats = new ArrayList<>();\n    for (SqlFunctionCategory c : SqlFunctionCategory.values()) {\n      if (c.isSpecific()) {\n        cats.add(c);\n      }\n    }\n    check(cats, USER_DEFINED_SPECIFIC_FUNCTION,\n        USER_DEFINED_TABLE_SPECIFIC_FUNCTION);\n  }\n","date":"2016-06-15 09:02:58","endLine":109,"groupId":"2621","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsSpecific","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/60cd03792b943e40fa1615e0c029d4e9ca735e.src","preCode":"  @Test public void testIsSpecific() throws SQLException {\n    List<SqlFunctionCategory> cats = new ArrayList<>();\n    for (SqlFunctionCategory c : SqlFunctionCategory.values()) {\n      if (c.isSpecific()) {\n        cats.add(c);\n      }\n    }\n    check(cats, USER_DEFINED_SPECIFIC_FUNCTION,\n        USER_DEFINED_TABLE_SPECIFIC_FUNCTION);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/prepare/LookupOperatorOverloadsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"0599cdde009d6e08f0cb973f914b526f9518dc47","commitMessage":"@@@[CALCITE-991] Create separate SqlFunctionCategory values for table functions and macros (Julien Le Dem.  Minji Kim)\n\nAdd a simple test for CalciteCatalogReader (Minji Kim).\n\nFix up (Julian Hyde).\n\nClose apache/calcite#168\n","date":"2016-06-15 09:02:58","modifiedFileCount":"13","status":"B","submitter":"Julien Le Dem"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testIsUserDefined() throws SQLException {\n    List<SqlFunctionCategory> cats = new ArrayList<>();\n    for (SqlFunctionCategory c : SqlFunctionCategory.values()) {\n      if (c.isUserDefined()) {\n        cats.add(c);\n      }\n    }\n    check(cats, USER_DEFINED_FUNCTION, USER_DEFINED_PROCEDURE,\n        USER_DEFINED_CONSTRUCTOR, USER_DEFINED_SPECIFIC_FUNCTION,\n        USER_DEFINED_TABLE_FUNCTION, USER_DEFINED_TABLE_SPECIFIC_FUNCTION);\n  }\n","date":"2020-04-06 04:57:49","endLine":91,"groupId":"101608","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testIsUserDefined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a8/ebf31fcb8d5617e3072621088bb3c876312ee1.src","preCode":"  @Test public void testIsUserDefined() throws SQLException {\n    List<SqlFunctionCategory> cats = new ArrayList<>();\n    for (SqlFunctionCategory c : SqlFunctionCategory.values()) {\n      if (c.isUserDefined()) {\n        cats.add(c);\n      }\n    }\n    check(cats, USER_DEFINED_FUNCTION, USER_DEFINED_PROCEDURE,\n        USER_DEFINED_CONSTRUCTOR, USER_DEFINED_SPECIFIC_FUNCTION,\n        USER_DEFINED_TABLE_FUNCTION, USER_DEFINED_TABLE_SPECIFIC_FUNCTION);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/prepare/LookupOperatorOverloadsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testIsSpecific() throws SQLException {\n    List<SqlFunctionCategory> cats = new ArrayList<>();\n    for (SqlFunctionCategory c : SqlFunctionCategory.values()) {\n      if (c.isSpecific()) {\n        cats.add(c);\n      }\n    }\n    check(cats, USER_DEFINED_SPECIFIC_FUNCTION,\n        USER_DEFINED_TABLE_SPECIFIC_FUNCTION);\n  }\n","date":"2020-04-06 04:57:49","endLine":113,"groupId":"101608","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testIsSpecific","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a8/ebf31fcb8d5617e3072621088bb3c876312ee1.src","preCode":"  @Test public void testIsSpecific() throws SQLException {\n    List<SqlFunctionCategory> cats = new ArrayList<>();\n    for (SqlFunctionCategory c : SqlFunctionCategory.values()) {\n      if (c.isSpecific()) {\n        cats.add(c);\n      }\n    }\n    check(cats, USER_DEFINED_SPECIFIC_FUNCTION,\n        USER_DEFINED_TABLE_SPECIFIC_FUNCTION);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/prepare/LookupOperatorOverloadsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
