[{"authorTime":"2020-03-08 13:35:38","codes":[{"authorDate":"2020-03-08 13:35:38","commitOrder":1,"curCode":"  @Test public void testFusionFunc() {\n    tester.setFor(SqlStdOperatorTable.FUSION, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"fusion(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    checkAggType(tester, \"fusion(MULTISET[1,2,3])\", \"INTEGER NOT NULL MULTISET NOT NULL\");\n    strictTester.checkFails(\"^fusion(12)^\",\n        \"Cannot apply 'FUSION' to arguments of type .*\", false);\n    final String[] values1 = {\"MULTISET[0]\", \"MULTISET[1]\", \"MULTISET[2]\", \"MULTISET[3]\"};\n    tester.checkAgg(\"fusion(x)\", values1, \"[0, 1, 2, 3]\", 0);\n    final String[] values2 = {\"MULTISET[0,1]\", \"MULTISET[1, 2]\"};\n    tester.checkAgg(\"fusion(x)\", values2, \"[0, 1, 1, 2]\", 0);\n  }\n","date":"2020-03-14 19:10:54","endLine":6955,"groupId":"6051","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFusionFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8a/d9f303e4a0f3210481b2be08578dc3740aff4d.src","preCode":"  @Test public void testFusionFunc() {\n    tester.setFor(SqlStdOperatorTable.FUSION, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"fusion(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    checkAggType(tester, \"fusion(MULTISET[1,2,3])\", \"INTEGER NOT NULL MULTISET NOT NULL\");\n    strictTester.checkFails(\"^fusion(12)^\",\n        \"Cannot apply 'FUSION' to arguments of type .*\", false);\n    final String[] values1 = {\"MULTISET[0]\", \"MULTISET[1]\", \"MULTISET[2]\", \"MULTISET[3]\"};\n    tester.checkAgg(\"fusion(x)\", values1, \"[0, 1, 2, 3]\", 0);\n    final String[] values2 = {\"MULTISET[0,1]\", \"MULTISET[1, 2]\"};\n    tester.checkAgg(\"fusion(x)\", values2, \"[0, 1, 1, 2]\", 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6945,"status":"B"},{"authorDate":"2020-03-08 13:35:38","commitOrder":1,"curCode":"  @Test public void testIntersectionFunc() {\n    tester.setFor(SqlStdOperatorTable.INTERSECTION, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"intersection(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    checkAggType(tester, \"intersection(MULTISET[1,2,3])\", \"INTEGER NOT NULL MULTISET NOT NULL\");\n    strictTester.checkFails(\"^intersection(12)^\",\n        \"Cannot apply 'INTERSECTION' to arguments of type .*\", false);\n    final String[] values1 = {\"MULTISET[0]\", \"MULTISET[1]\", \"MULTISET[2]\", \"MULTISET[3]\"};\n    tester.checkAgg(\"intersection(x)\", values1, \"[]\", 0);\n    final String[] values2 = {\"MULTISET[0, 1]\", \"MULTISET[1, 2]\"};\n    tester.checkAgg(\"intersection(x)\", values2, \"[1]\", 0);\n    final String[] values3 = {\"MULTISET[0, 1, 1]\", \"MULTISET[0, 1, 2]\"};\n    tester.checkAgg(\"intersection(x)\", values3, \"[0, 1, 1]\", 0);\n  }\n","date":"2020-03-14 19:10:54","endLine":6969,"groupId":"6051","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntersectionFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8a/d9f303e4a0f3210481b2be08578dc3740aff4d.src","preCode":"  @Test public void testIntersectionFunc() {\n    tester.setFor(SqlStdOperatorTable.INTERSECTION, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"intersection(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    checkAggType(tester, \"intersection(MULTISET[1,2,3])\", \"INTEGER NOT NULL MULTISET NOT NULL\");\n    strictTester.checkFails(\"^intersection(12)^\",\n        \"Cannot apply 'INTERSECTION' to arguments of type .*\", false);\n    final String[] values1 = {\"MULTISET[0]\", \"MULTISET[1]\", \"MULTISET[2]\", \"MULTISET[3]\"};\n    tester.checkAgg(\"intersection(x)\", values1, \"[]\", 0);\n    final String[] values2 = {\"MULTISET[0, 1]\", \"MULTISET[1, 2]\"};\n    tester.checkAgg(\"intersection(x)\", values2, \"[1]\", 0);\n    final String[] values3 = {\"MULTISET[0, 1, 1]\", \"MULTISET[0, 1, 2]\"};\n    tester.checkAgg(\"intersection(x)\", values3, \"[0, 1, 1]\", 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6957,"status":"B"}],"commitId":"f11115a2fe9e360f38910f112288581040e0ced5","commitMessage":"@@@[CALCITE-3815] Add missing SQL standard aggregate functions: EVERY.  SOME.  INTERSECTION\n","date":"2020-03-14 19:10:54","modifiedFileCount":"10","status":"B","submitter":"Hanumath Maduri"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testFusionFunc() {\n    tester.setFor(SqlStdOperatorTable.FUSION, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"fusion(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    checkAggType(tester, \"fusion(MULTISET[1,2,3])\", \"INTEGER NOT NULL MULTISET NOT NULL\");\n    strictTester.checkFails(\"^fusion(12)^\",\n        \"Cannot apply 'FUSION' to arguments of type .*\", false);\n    final String[] values1 = {\"MULTISET[0]\", \"MULTISET[1]\", \"MULTISET[2]\", \"MULTISET[3]\"};\n    tester.checkAgg(\"fusion(x)\", values1, \"[0, 1, 2, 3]\", 0);\n    final String[] values2 = {\"MULTISET[0,1]\", \"MULTISET[1, 2]\"};\n    tester.checkAgg(\"fusion(x)\", values2, \"[0, 1, 1, 2]\", 0);\n  }\n","date":"2020-04-06 04:57:49","endLine":7032,"groupId":"10805","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFusionFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testFusionFunc() {\n    tester.setFor(SqlStdOperatorTable.FUSION, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"fusion(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    checkAggType(tester, \"fusion(MULTISET[1,2,3])\", \"INTEGER NOT NULL MULTISET NOT NULL\");\n    strictTester.checkFails(\"^fusion(12)^\",\n        \"Cannot apply 'FUSION' to arguments of type .*\", false);\n    final String[] values1 = {\"MULTISET[0]\", \"MULTISET[1]\", \"MULTISET[2]\", \"MULTISET[3]\"};\n    tester.checkAgg(\"fusion(x)\", values1, \"[0, 1, 2, 3]\", 0);\n    final String[] values2 = {\"MULTISET[0,1]\", \"MULTISET[1, 2]\"};\n    tester.checkAgg(\"fusion(x)\", values2, \"[0, 1, 1, 2]\", 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7022,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testIntersectionFunc() {\n    tester.setFor(SqlStdOperatorTable.INTERSECTION, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"intersection(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    checkAggType(tester, \"intersection(MULTISET[1,2,3])\", \"INTEGER NOT NULL MULTISET NOT NULL\");\n    strictTester.checkFails(\"^intersection(12)^\",\n        \"Cannot apply 'INTERSECTION' to arguments of type .*\", false);\n    final String[] values1 = {\"MULTISET[0]\", \"MULTISET[1]\", \"MULTISET[2]\", \"MULTISET[3]\"};\n    tester.checkAgg(\"intersection(x)\", values1, \"[]\", 0);\n    final String[] values2 = {\"MULTISET[0, 1]\", \"MULTISET[1, 2]\"};\n    tester.checkAgg(\"intersection(x)\", values2, \"[1]\", 0);\n    final String[] values3 = {\"MULTISET[0, 1, 1]\", \"MULTISET[0, 1, 2]\"};\n    tester.checkAgg(\"intersection(x)\", values3, \"[0, 1, 1]\", 0);\n  }\n","date":"2020-04-06 04:57:49","endLine":7046,"groupId":"10805","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntersectionFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testIntersectionFunc() {\n    tester.setFor(SqlStdOperatorTable.INTERSECTION, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"intersection(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    checkAggType(tester, \"intersection(MULTISET[1,2,3])\", \"INTEGER NOT NULL MULTISET NOT NULL\");\n    strictTester.checkFails(\"^intersection(12)^\",\n        \"Cannot apply 'INTERSECTION' to arguments of type .*\", false);\n    final String[] values1 = {\"MULTISET[0]\", \"MULTISET[1]\", \"MULTISET[2]\", \"MULTISET[3]\"};\n    tester.checkAgg(\"intersection(x)\", values1, \"[]\", 0);\n    final String[] values2 = {\"MULTISET[0, 1]\", \"MULTISET[1, 2]\"};\n    tester.checkAgg(\"intersection(x)\", values2, \"[1]\", 0);\n    final String[] values3 = {\"MULTISET[0, 1, 1]\", \"MULTISET[0, 1, 2]\"};\n    tester.checkAgg(\"intersection(x)\", values3, \"[0, 1, 1]\", 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7034,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
