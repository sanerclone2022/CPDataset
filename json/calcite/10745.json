[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testGreaterThanOperator() {\n    tester.setFor(SqlStdOperatorTable.GREATER_THAN);\n    tester.checkBoolean(\"1>2\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(-1 as TINYINT)>cast(1 as TINYINT)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(1 as SMALLINT)>cast(1 as SMALLINT)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"2>1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>1.2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1.1>-1.2\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>1.1\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2>1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1e1>1.2e1\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(-1.1 as real) > cast(-1.2 as real)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\"1.1e2>1.1e2\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e0>1\", Boolean.TRUE);\n    tester.checkBoolean(\"cast(1.2e0 as real)>1\", Boolean.TRUE);\n    tester.checkBoolean(\"true>false\", Boolean.TRUE);\n    tester.checkBoolean(\"true>true\", Boolean.FALSE);\n    tester.checkBoolean(\"false>false\", Boolean.FALSE);\n    tester.checkBoolean(\"false>true\", Boolean.FALSE);\n    tester.checkNull(\"3.0>cast(null as double)\");\n\n    tester.checkBoolean(\n        \"DATE '2013-02-23' > DATE '1945-02-24'\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"DATE '2013-02-23' > CAST(NULL AS DATE)\", null);\n  }\n","date":"2014-11-14 09:39:34","endLine":1967,"groupId":"588","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGreaterThanOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testGreaterThanOperator() {\n    tester.setFor(SqlStdOperatorTable.GREATER_THAN);\n    tester.checkBoolean(\"1>2\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(-1 as TINYINT)>cast(1 as TINYINT)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(1 as SMALLINT)>cast(1 as SMALLINT)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"2>1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>1.2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1.1>-1.2\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>1.1\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2>1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1e1>1.2e1\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(-1.1 as real) > cast(-1.2 as real)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\"1.1e2>1.1e2\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e0>1\", Boolean.TRUE);\n    tester.checkBoolean(\"cast(1.2e0 as real)>1\", Boolean.TRUE);\n    tester.checkBoolean(\"true>false\", Boolean.TRUE);\n    tester.checkBoolean(\"true>true\", Boolean.FALSE);\n    tester.checkBoolean(\"false>false\", Boolean.FALSE);\n    tester.checkBoolean(\"false>true\", Boolean.FALSE);\n    tester.checkNull(\"3.0>cast(null as double)\");\n\n    tester.checkBoolean(\n        \"DATE '2013-02-23' > DATE '1945-02-24'\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"DATE '2013-02-23' > CAST(NULL AS DATE)\", null);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1936,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testGreaterThanOrEqualOperator() {\n    tester.setFor(SqlStdOperatorTable.GREATER_THAN_OR_EQUAL);\n    tester.checkBoolean(\"1>=2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1>=1\", Boolean.FALSE);\n    tester.checkBoolean(\"1>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"2>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>=1.2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1.1>=-1.2\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>=1.1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2e4>=1e5\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e4>=cast(1e5 as real)\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2>=cast(1e5 as double)\", Boolean.FALSE);\n    tester.checkBoolean(\"120000>=cast(1e5 as real)\", Boolean.TRUE);\n    tester.checkBoolean(\"true>=false\", Boolean.TRUE);\n    tester.checkBoolean(\"true>=true\", Boolean.TRUE);\n    tester.checkBoolean(\"false>=false\", Boolean.TRUE);\n    tester.checkBoolean(\"false>=true\", Boolean.FALSE);\n    tester.checkNull(\"cast(null as real)>=999\");\n  }\n","date":"2014-11-14 09:39:34","endLine":2099,"groupId":"11952","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGreaterThanOrEqualOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testGreaterThanOrEqualOperator() {\n    tester.setFor(SqlStdOperatorTable.GREATER_THAN_OR_EQUAL);\n    tester.checkBoolean(\"1>=2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1>=1\", Boolean.FALSE);\n    tester.checkBoolean(\"1>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"2>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>=1.2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1.1>=-1.2\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>=1.1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2e4>=1e5\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e4>=cast(1e5 as real)\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2>=cast(1e5 as double)\", Boolean.FALSE);\n    tester.checkBoolean(\"120000>=cast(1e5 as real)\", Boolean.TRUE);\n    tester.checkBoolean(\"true>=false\", Boolean.TRUE);\n    tester.checkBoolean(\"true>=true\", Boolean.TRUE);\n    tester.checkBoolean(\"false>=false\", Boolean.TRUE);\n    tester.checkBoolean(\"false>=true\", Boolean.FALSE);\n    tester.checkNull(\"cast(null as real)>=999\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2080,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2015-07-25 00:48:09","codes":[{"authorDate":"2015-07-25 00:48:09","commitOrder":2,"curCode":"  @Test public void testGreaterThanOperator() {\n    tester.setFor(SqlStdOperatorTable.GREATER_THAN);\n    tester.checkBoolean(\"1>2\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(-1 as TINYINT)>cast(1 as TINYINT)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(1 as SMALLINT)>cast(1 as SMALLINT)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"2>1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>1.2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1.1>-1.2\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>1.1\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2>1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1e1>1.2e1\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(-1.1 as real) > cast(-1.2 as real)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\"1.1e2>1.1e2\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e0>1\", Boolean.TRUE);\n    tester.checkBoolean(\"cast(1.2e0 as real)>1\", Boolean.TRUE);\n    tester.checkBoolean(\"true>false\", Boolean.TRUE);\n    tester.checkBoolean(\"true>true\", Boolean.FALSE);\n    tester.checkBoolean(\"false>false\", Boolean.FALSE);\n    tester.checkBoolean(\"false>true\", Boolean.FALSE);\n    tester.checkNull(\"3.0>cast(null as double)\");\n\n    tester.checkBoolean(\n        \"DATE '2013-02-23' > DATE '1945-02-24'\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"DATE '2013-02-23' > CAST(NULL AS DATE)\", null);\n\n    tester.checkBoolean(\"x'0A000130'>x'0A0001B0'\", Boolean.FALSE);\n  }\n","date":"2015-07-25 00:48:09","endLine":1996,"groupId":"588","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGreaterThanOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/82/041ccf13d47d60eed17ed20e4ae7a9c8a07a4b.src","preCode":"  @Test public void testGreaterThanOperator() {\n    tester.setFor(SqlStdOperatorTable.GREATER_THAN);\n    tester.checkBoolean(\"1>2\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(-1 as TINYINT)>cast(1 as TINYINT)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(1 as SMALLINT)>cast(1 as SMALLINT)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"2>1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>1.2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1.1>-1.2\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>1.1\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2>1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1e1>1.2e1\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(-1.1 as real) > cast(-1.2 as real)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\"1.1e2>1.1e2\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e0>1\", Boolean.TRUE);\n    tester.checkBoolean(\"cast(1.2e0 as real)>1\", Boolean.TRUE);\n    tester.checkBoolean(\"true>false\", Boolean.TRUE);\n    tester.checkBoolean(\"true>true\", Boolean.FALSE);\n    tester.checkBoolean(\"false>false\", Boolean.FALSE);\n    tester.checkBoolean(\"false>true\", Boolean.FALSE);\n    tester.checkNull(\"3.0>cast(null as double)\");\n\n    tester.checkBoolean(\n        \"DATE '2013-02-23' > DATE '1945-02-24'\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"DATE '2013-02-23' > CAST(NULL AS DATE)\", null);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1963,"status":"M"},{"authorDate":"2015-07-25 00:48:09","commitOrder":2,"curCode":"  @Test public void testGreaterThanOrEqualOperator() {\n    tester.setFor(SqlStdOperatorTable.GREATER_THAN_OR_EQUAL);\n    tester.checkBoolean(\"1>=2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1>=1\", Boolean.FALSE);\n    tester.checkBoolean(\"1>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"2>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>=1.2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1.1>=-1.2\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>=1.1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2e4>=1e5\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e4>=cast(1e5 as real)\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2>=cast(1e5 as double)\", Boolean.FALSE);\n    tester.checkBoolean(\"120000>=cast(1e5 as real)\", Boolean.TRUE);\n    tester.checkBoolean(\"true>=false\", Boolean.TRUE);\n    tester.checkBoolean(\"true>=true\", Boolean.TRUE);\n    tester.checkBoolean(\"false>=false\", Boolean.TRUE);\n    tester.checkBoolean(\"false>=true\", Boolean.FALSE);\n    tester.checkNull(\"cast(null as real)>=999\");\n    tester.checkBoolean(\"x'0A000130'>=x'0A0001B0'\", Boolean.FALSE);\n    tester.checkBoolean(\"x'0A0001B0'>=x'0A0001B0'\", Boolean.TRUE);\n  }\n","date":"2015-07-25 00:48:09","endLine":2130,"groupId":"11952","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGreaterThanOrEqualOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/82/041ccf13d47d60eed17ed20e4ae7a9c8a07a4b.src","preCode":"  @Test public void testGreaterThanOrEqualOperator() {\n    tester.setFor(SqlStdOperatorTable.GREATER_THAN_OR_EQUAL);\n    tester.checkBoolean(\"1>=2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1>=1\", Boolean.FALSE);\n    tester.checkBoolean(\"1>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"2>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>=1.2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1.1>=-1.2\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>=1.1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2e4>=1e5\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e4>=cast(1e5 as real)\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2>=cast(1e5 as double)\", Boolean.FALSE);\n    tester.checkBoolean(\"120000>=cast(1e5 as real)\", Boolean.TRUE);\n    tester.checkBoolean(\"true>=false\", Boolean.TRUE);\n    tester.checkBoolean(\"true>=true\", Boolean.TRUE);\n    tester.checkBoolean(\"false>=false\", Boolean.TRUE);\n    tester.checkBoolean(\"false>=true\", Boolean.FALSE);\n    tester.checkNull(\"cast(null as real)>=999\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2109,"status":"M"}],"commitId":"26a08774516c49eba39ccb7690295f87560a43fc","commitMessage":"@@@[CALCITE-717] Compare BINARY and VARBINARY on unsigned byte values (Low Chin Wei)\n","date":"2015-07-25 00:48:09","modifiedFileCount":"3","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testGreaterThanOperator() {\n    tester.setFor(SqlStdOperatorTable.GREATER_THAN);\n    tester.checkBoolean(\"1>2\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(-1 as TINYINT)>cast(1 as TINYINT)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(1 as SMALLINT)>cast(1 as SMALLINT)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"2>1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>1.2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1.1>-1.2\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>1.1\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2>1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1e1>1.2e1\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(-1.1 as real) > cast(-1.2 as real)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\"1.1e2>1.1e2\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e0>1\", Boolean.TRUE);\n    tester.checkBoolean(\"cast(1.2e0 as real)>1\", Boolean.TRUE);\n    tester.checkBoolean(\"true>false\", Boolean.TRUE);\n    tester.checkBoolean(\"true>true\", Boolean.FALSE);\n    tester.checkBoolean(\"false>false\", Boolean.FALSE);\n    tester.checkBoolean(\"false>true\", Boolean.FALSE);\n    tester.checkNull(\"3.0>cast(null as double)\");\n\n    tester.checkBoolean(\n        \"DATE '2013-02-23' > DATE '1945-02-24'\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"DATE '2013-02-23' > CAST(NULL AS DATE)\", null);\n\n    tester.checkBoolean(\"x'0A000130'>x'0A0001B0'\", Boolean.FALSE);\n  }\n","date":"2020-04-06 04:57:49","endLine":2442,"groupId":"10745","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGreaterThanOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testGreaterThanOperator() {\n    tester.setFor(SqlStdOperatorTable.GREATER_THAN);\n    tester.checkBoolean(\"1>2\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(-1 as TINYINT)>cast(1 as TINYINT)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(1 as SMALLINT)>cast(1 as SMALLINT)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"2>1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>1.2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1.1>-1.2\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>1.1\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2>1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1e1>1.2e1\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"cast(-1.1 as real) > cast(-1.2 as real)\",\n        Boolean.TRUE);\n    tester.checkBoolean(\"1.1e2>1.1e2\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e0>1\", Boolean.TRUE);\n    tester.checkBoolean(\"cast(1.2e0 as real)>1\", Boolean.TRUE);\n    tester.checkBoolean(\"true>false\", Boolean.TRUE);\n    tester.checkBoolean(\"true>true\", Boolean.FALSE);\n    tester.checkBoolean(\"false>false\", Boolean.FALSE);\n    tester.checkBoolean(\"false>true\", Boolean.FALSE);\n    tester.checkNull(\"3.0>cast(null as double)\");\n\n    tester.checkBoolean(\n        \"DATE '2013-02-23' > DATE '1945-02-24'\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"DATE '2013-02-23' > CAST(NULL AS DATE)\", null);\n\n    tester.checkBoolean(\"x'0A000130'>x'0A0001B0'\", Boolean.FALSE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2409,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testGreaterThanOrEqualOperator() {\n    tester.setFor(SqlStdOperatorTable.GREATER_THAN_OR_EQUAL);\n    tester.checkBoolean(\"1>=2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1>=1\", Boolean.FALSE);\n    tester.checkBoolean(\"1>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"2>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>=1.2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1.1>=-1.2\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>=1.1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2e4>=1e5\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e4>=cast(1e5 as real)\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2>=cast(1e5 as double)\", Boolean.FALSE);\n    tester.checkBoolean(\"120000>=cast(1e5 as real)\", Boolean.TRUE);\n    tester.checkBoolean(\"true>=false\", Boolean.TRUE);\n    tester.checkBoolean(\"true>=true\", Boolean.TRUE);\n    tester.checkBoolean(\"false>=false\", Boolean.TRUE);\n    tester.checkBoolean(\"false>=true\", Boolean.FALSE);\n    tester.checkNull(\"cast(null as real)>=999\");\n    tester.checkBoolean(\"x'0A000130'>=x'0A0001B0'\", Boolean.FALSE);\n    tester.checkBoolean(\"x'0A0001B0'>=x'0A0001B0'\", Boolean.TRUE);\n  }\n","date":"2020-04-06 04:57:49","endLine":2576,"groupId":"10745","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGreaterThanOrEqualOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testGreaterThanOrEqualOperator() {\n    tester.setFor(SqlStdOperatorTable.GREATER_THAN_OR_EQUAL);\n    tester.checkBoolean(\"1>=2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1>=1\", Boolean.FALSE);\n    tester.checkBoolean(\"1>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"2>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>=1.2\", Boolean.FALSE);\n    tester.checkBoolean(\"-1.1>=-1.2\", Boolean.TRUE);\n    tester.checkBoolean(\"1.1>=1.1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2>=1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2e4>=1e5\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e4>=cast(1e5 as real)\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2>=cast(1e5 as double)\", Boolean.FALSE);\n    tester.checkBoolean(\"120000>=cast(1e5 as real)\", Boolean.TRUE);\n    tester.checkBoolean(\"true>=false\", Boolean.TRUE);\n    tester.checkBoolean(\"true>=true\", Boolean.TRUE);\n    tester.checkBoolean(\"false>=false\", Boolean.TRUE);\n    tester.checkBoolean(\"false>=true\", Boolean.FALSE);\n    tester.checkNull(\"cast(null as real)>=999\");\n    tester.checkBoolean(\"x'0A000130'>=x'0A0001B0'\", Boolean.FALSE);\n    tester.checkBoolean(\"x'0A0001B0'>=x'0A0001B0'\", Boolean.TRUE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2555,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
