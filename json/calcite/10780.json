[{"authorTime":"2019-04-17 16:41:10","codes":[{"authorDate":"2019-04-17 16:41:10","commitOrder":1,"curCode":"  @Test public void testLeftFunc() {\n    Stream.of(SqlLibrary.MYSQL, SqlLibrary.POSTGRESQL)\n        .map(this::tester)\n        .forEach(t -> {\n          t.setFor(SqlLibraryOperators.LEFT);\n          t.checkString(\"left('abcd', 3)\", \"abc\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"left('abcd', 0)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"left('abcd', 5)\", \"abcd\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"left('abcd', -2)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkNull(\"left(cast(null as varchar(1)), -2)\");\n          t.checkNull(\"left('abcd', cast(null as Integer))\");\n\n          \r\n          t.checkString(\"left(x'ABCdef', 1)\", \"ab\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"left(x'ABCdef', 0)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"left(x'ABCdef', 4)\", \"abcdef\",\n              \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"left(x'ABCdef', -2)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkNull(\"left(cast(null as binary(1)), -2)\");\n          t.checkNull(\"left(x'ABCdef', cast(null as Integer))\");\n        });\n  }\n","date":"2019-06-03 23:52:44","endLine":4375,"groupId":"6010","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeftFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9a/112bf8bc75a69ea2ac3fb7655ef628e945e0ff.src","preCode":"  @Test public void testLeftFunc() {\n    Stream.of(SqlLibrary.MYSQL, SqlLibrary.POSTGRESQL)\n        .map(this::tester)\n        .forEach(t -> {\n          t.setFor(SqlLibraryOperators.LEFT);\n          t.checkString(\"left('abcd', 3)\", \"abc\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"left('abcd', 0)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"left('abcd', 5)\", \"abcd\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"left('abcd', -2)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkNull(\"left(cast(null as varchar(1)), -2)\");\n          t.checkNull(\"left('abcd', cast(null as Integer))\");\n\n          \r\n          t.checkString(\"left(x'ABCdef', 1)\", \"ab\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"left(x'ABCdef', 0)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"left(x'ABCdef', 4)\", \"abcdef\",\n              \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"left(x'ABCdef', -2)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkNull(\"left(cast(null as binary(1)), -2)\");\n          t.checkNull(\"left(x'ABCdef', cast(null as Integer))\");\n        });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4354,"status":"B"},{"authorDate":"2019-04-17 16:41:10","commitOrder":1,"curCode":"  @Test public void testRightFunc() {\n    Stream.of(SqlLibrary.MYSQL, SqlLibrary.POSTGRESQL)\n        .map(this::tester)\n        .forEach(t -> {\n          t.setFor(SqlLibraryOperators.RIGHT);\n          t.checkString(\"right('abcd', 3)\", \"bcd\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"right('abcd', 0)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"right('abcd', 5)\", \"abcd\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"right('abcd', -2)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkNull(\"right(cast(null as varchar(1)), -2)\");\n          t.checkNull(\"right('abcd', cast(null as Integer))\");\n\n          \r\n          t.checkString(\"right(x'ABCdef', 1)\", \"ef\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"right(x'ABCdef', 0)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"right(x'ABCdef', 4)\", \"abcdef\",\n              \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"right(x'ABCdef', -2)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkNull(\"right(cast(null as binary(1)), -2)\");\n          t.checkNull(\"right(x'ABCdef', cast(null as Integer))\");\n        });\n  }\n","date":"2019-06-03 23:52:44","endLine":4398,"groupId":"6010","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRightFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9a/112bf8bc75a69ea2ac3fb7655ef628e945e0ff.src","preCode":"  @Test public void testRightFunc() {\n    Stream.of(SqlLibrary.MYSQL, SqlLibrary.POSTGRESQL)\n        .map(this::tester)\n        .forEach(t -> {\n          t.setFor(SqlLibraryOperators.RIGHT);\n          t.checkString(\"right('abcd', 3)\", \"bcd\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"right('abcd', 0)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"right('abcd', 5)\", \"abcd\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"right('abcd', -2)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkNull(\"right(cast(null as varchar(1)), -2)\");\n          t.checkNull(\"right('abcd', cast(null as Integer))\");\n\n          \r\n          t.checkString(\"right(x'ABCdef', 1)\", \"ef\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"right(x'ABCdef', 0)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"right(x'ABCdef', 4)\", \"abcdef\",\n              \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"right(x'ABCdef', -2)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkNull(\"right(cast(null as binary(1)), -2)\");\n          t.checkNull(\"right(x'ABCdef', cast(null as Integer))\");\n        });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4377,"status":"B"}],"commitId":"7f33215ffaf9c0b8f4bef082913c910c77bf4427","commitMessage":"@@@[CALCITE-3005] Implement string functions: LEFT.  RIGHT (xuqianjin)\n\nClose apache/calcite#1168\n","date":"2019-06-03 23:52:44","modifiedFileCount":"8","status":"B","submitter":"XuQianJin-Stars"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testLeftFunc() {\n    Stream.of(SqlLibrary.MYSQL, SqlLibrary.POSTGRESQL)\n        .map(this::tester)\n        .forEach(t -> {\n          t.setFor(SqlLibraryOperators.LEFT);\n          t.checkString(\"left('abcd', 3)\", \"abc\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"left('abcd', 0)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"left('abcd', 5)\", \"abcd\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"left('abcd', -2)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkNull(\"left(cast(null as varchar(1)), -2)\");\n          t.checkNull(\"left('abcd', cast(null as Integer))\");\n\n          \r\n          t.checkString(\"left(x'ABCdef', 1)\", \"ab\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"left(x'ABCdef', 0)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"left(x'ABCdef', 4)\", \"abcdef\",\n              \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"left(x'ABCdef', -2)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkNull(\"left(cast(null as binary(1)), -2)\");\n          t.checkNull(\"left(x'ABCdef', cast(null as Integer))\");\n        });\n  }\n","date":"2020-04-06 04:57:49","endLine":4582,"groupId":"10780","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeftFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testLeftFunc() {\n    Stream.of(SqlLibrary.MYSQL, SqlLibrary.POSTGRESQL)\n        .map(this::tester)\n        .forEach(t -> {\n          t.setFor(SqlLibraryOperators.LEFT);\n          t.checkString(\"left('abcd', 3)\", \"abc\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"left('abcd', 0)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"left('abcd', 5)\", \"abcd\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"left('abcd', -2)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkNull(\"left(cast(null as varchar(1)), -2)\");\n          t.checkNull(\"left('abcd', cast(null as Integer))\");\n\n          \r\n          t.checkString(\"left(x'ABCdef', 1)\", \"ab\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"left(x'ABCdef', 0)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"left(x'ABCdef', 4)\", \"abcdef\",\n              \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"left(x'ABCdef', -2)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkNull(\"left(cast(null as binary(1)), -2)\");\n          t.checkNull(\"left(x'ABCdef', cast(null as Integer))\");\n        });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4561,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testRightFunc() {\n    Stream.of(SqlLibrary.MYSQL, SqlLibrary.POSTGRESQL)\n        .map(this::tester)\n        .forEach(t -> {\n          t.setFor(SqlLibraryOperators.RIGHT);\n          t.checkString(\"right('abcd', 3)\", \"bcd\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"right('abcd', 0)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"right('abcd', 5)\", \"abcd\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"right('abcd', -2)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkNull(\"right(cast(null as varchar(1)), -2)\");\n          t.checkNull(\"right('abcd', cast(null as Integer))\");\n\n          \r\n          t.checkString(\"right(x'ABCdef', 1)\", \"ef\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"right(x'ABCdef', 0)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"right(x'ABCdef', 4)\", \"abcdef\",\n              \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"right(x'ABCdef', -2)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkNull(\"right(cast(null as binary(1)), -2)\");\n          t.checkNull(\"right(x'ABCdef', cast(null as Integer))\");\n        });\n  }\n","date":"2020-04-06 04:57:49","endLine":4605,"groupId":"10780","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRightFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testRightFunc() {\n    Stream.of(SqlLibrary.MYSQL, SqlLibrary.POSTGRESQL)\n        .map(this::tester)\n        .forEach(t -> {\n          t.setFor(SqlLibraryOperators.RIGHT);\n          t.checkString(\"right('abcd', 3)\", \"bcd\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"right('abcd', 0)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"right('abcd', 5)\", \"abcd\", \"VARCHAR(4) NOT NULL\");\n          t.checkString(\"right('abcd', -2)\", \"\", \"VARCHAR(4) NOT NULL\");\n          t.checkNull(\"right(cast(null as varchar(1)), -2)\");\n          t.checkNull(\"right('abcd', cast(null as Integer))\");\n\n          \r\n          t.checkString(\"right(x'ABCdef', 1)\", \"ef\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"right(x'ABCdef', 0)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"right(x'ABCdef', 4)\", \"abcdef\",\n              \"VARBINARY(3) NOT NULL\");\n          t.checkString(\"right(x'ABCdef', -2)\", \"\", \"VARBINARY(3) NOT NULL\");\n          t.checkNull(\"right(cast(null as binary(1)), -2)\");\n          t.checkNull(\"right(x'ABCdef', cast(null as Integer))\");\n        });\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4584,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
