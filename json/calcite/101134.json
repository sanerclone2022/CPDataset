[{"authorTime":"2017-03-10 20:53:51","codes":[{"authorDate":"2017-03-10 20:53:51","commitOrder":1,"curCode":"  @Test public void testAllPredicatesAggregate1() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp where empno = 5)subq\\n\"\n        + \"group by a\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","date":"2017-04-27 02:56:37","endLine":1851,"groupId":"16645","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAllPredicatesAggregate1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/c230aa1837e272d15599363543c58e2d8b0a29.src","preCode":"  @Test public void testAllPredicatesAggregate1() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp where empno = 5)subq\\n\"\n        + \"group by a\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1835,"status":"B"},{"authorDate":"2017-03-10 20:53:51","commitOrder":1,"curCode":"  @Test public void testAllPredicatesAggregate2() {\n    final String sql = \"select * from (select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp)subq\\n\"\n        + \"group by a) \\n\"\n        + \"where a = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","date":"2017-04-27 02:56:37","endLine":1870,"groupId":"16645","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllPredicatesAggregate2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/c230aa1837e272d15599363543c58e2d8b0a29.src","preCode":"  @Test public void testAllPredicatesAggregate2() {\n    final String sql = \"select * from (select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp)subq\\n\"\n        + \"group by a) \\n\"\n        + \"where a = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1853,"status":"B"}],"commitId":"41b05d784fd2e0ae81b09d013ef8a746036ca446","commitMessage":"@@@[CALCITE-1682] New metadata providers for expression column origin and all predicates in plan\n\nIncludes:\n* RelNode type metadata provider\n* Ranges containment-based simplification in conjunctive predicates\n","date":"2017-04-27 02:56:37","modifiedFileCount":"16","status":"B","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2017-03-29 14:36:43","codes":[{"authorDate":"2017-03-29 14:36:43","commitOrder":2,"curCode":"  @Test public void testAllPredicatesAggregate1() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp where empno = 5)subq\\n\"\n        + \"group by a\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","date":"2017-04-27 02:56:37","endLine":1851,"groupId":"16645","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAllPredicatesAggregate1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/25b30757dc28f5c50a8e650fb49838c96dc902.src","preCode":"  @Test public void testAllPredicatesAggregate1() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp where empno = 5)subq\\n\"\n        + \"group by a\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1835,"status":"MB"},{"authorDate":"2017-03-29 14:36:43","commitOrder":2,"curCode":"  @Test public void testAllPredicatesAggregate2() {\n    final String sql = \"select * from (select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp)subq\\n\"\n        + \"group by a) \\n\"\n        + \"where a = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","date":"2017-04-27 02:56:37","endLine":1870,"groupId":"16645","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllPredicatesAggregate2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/25b30757dc28f5c50a8e650fb49838c96dc902.src","preCode":"  @Test public void testAllPredicatesAggregate2() {\n    final String sql = \"select * from (select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp)subq\\n\"\n        + \"group by a) \\n\"\n        + \"where a = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1853,"status":"MB"}],"commitId":"84b49f5b48842708e9f4d912b4f9564745d74bc6","commitMessage":"@@@[CALCITE-1731] Materialized view rewriting for join and aggregate operators\n","date":"2017-04-27 02:56:37","modifiedFileCount":"16","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2019-10-16 19:22:37","codes":[{"authorDate":"2019-10-16 19:22:37","commitOrder":3,"curCode":"  @Test public void testAllPredicatesAggregate1() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp where empno = 5)subq\\n\"\n        + \"group by a\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","date":"2019-10-18 06:51:31","endLine":2005,"groupId":"16645","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAllPredicatesAggregate1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testAllPredicatesAggregate1() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp where empno = 5)subq\\n\"\n        + \"group by a\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1989,"status":"M"},{"authorDate":"2019-10-16 19:22:37","commitOrder":3,"curCode":"  @Test public void testAllPredicatesAggregate2() {\n    final String sql = \"select * from (select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp)subq\\n\"\n        + \"group by a) \\n\"\n        + \"where a = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","date":"2019-10-18 06:51:31","endLine":2024,"groupId":"16645","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllPredicatesAggregate2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testAllPredicatesAggregate2() {\n    final String sql = \"select * from (select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp)subq\\n\"\n        + \"group by a) \\n\"\n        + \"where a = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2007,"status":"M"}],"commitId":"ebc16afa935888578b5befc870c1997f307a6cb5","commitMessage":"@@@[CALCITE-3421] Reuse RelMetadataQuery in test suites\n\nClose #1513\n","date":"2019-10-18 06:51:31","modifiedFileCount":"5","status":"M","submitter":"dz"},{"authorTime":"2019-10-16 19:22:37","codes":[{"authorDate":"2019-10-25 22:40:36","commitOrder":4,"curCode":"  @Test public void testAllPredicatesAggregate1() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp where empno = 5)subq\\n\"\n        + \"group by a\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","date":"2019-10-30 10:10:44","endLine":2322,"groupId":"16645","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAllPredicatesAggregate1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/d2de04e1f002bb086c95d3a32edb41ffb94f09.src","preCode":"  @Test public void testAllPredicatesAggregate1() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp where empno = 5)subq\\n\"\n        + \"group by a\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2306,"status":"M"},{"authorDate":"2019-10-16 19:22:37","commitOrder":4,"curCode":"  @Test public void testAllPredicatesAggregate2() {\n    final String sql = \"select * from (select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp)subq\\n\"\n        + \"group by a) \\n\"\n        + \"where a = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","date":"2019-10-18 06:51:31","endLine":2024,"groupId":"16645","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllPredicatesAggregate2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testAllPredicatesAggregate2() {\n    final String sql = \"select * from (select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp)subq\\n\"\n        + \"group by a) \\n\"\n        + \"where a = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2007,"status":"N"}],"commitId":"977ea0d96f1f8e4225b6e27f02d86d0ea5aebb9a","commitMessage":"@@@[CALCITE-3446] Make RelMetadataQuery extensible\n\n* Add interface RelOptCluster.setMetadataQuery to let user set the\ncustomized RelMetadataQuery instance\n* Add a base metadata query class named RelMetadataQueryBase.  it\nholds the common parts that a metadata query requires.  also add doc\nabout how to add a new RelMetadataQuery sub-class\n* In RelMetadataQuery.  make constructor RelMetadataQuery(boolean) and\nRelMetadataQuery(JaninoRelMetadataProvider.  RelMetadataQuery) private. \nadd a new constrcutor RelMetadataQuery() for sub-class\n* Add test cases in RelMetadataTest\n* Refactor out assertEquals within RelMetadataTest\n* Make RelMetadataQueryBase#THREAD_PROVIDERS default to be a empty\ninstance.  we always initialize it now in RelOptCluster\n","date":"2019-10-30 10:10:44","modifiedFileCount":"5","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testAllPredicatesAggregate1() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp where empno = 5)subq\\n\"\n        + \"group by a\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":2474,"groupId":"101134","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testAllPredicatesAggregate1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testAllPredicatesAggregate1() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp where empno = 5)subq\\n\"\n        + \"group by a\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2458,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testAllPredicatesAggregate2() {\n    final String sql = \"select * from (select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp)subq\\n\"\n        + \"group by a)\\n\"\n        + \"where a = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":2493,"groupId":"101134","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllPredicatesAggregate2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testAllPredicatesAggregate2() {\n    final String sql = \"select * from (select a, max(b) from (\\n\"\n        + \"  select empno as a, sal as b from emp)subq\\n\"\n        + \"group by a)\\n\"\n        + \"where a = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    final RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    final RexLiteral constant = (RexLiteral) call.getOperands().get(1);\n    assertThat(constant.toString(), is(\"5\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2476,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
