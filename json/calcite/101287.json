[{"authorTime":"2018-01-24 09:12:41","codes":[{"authorDate":"2018-01-24 09:12:41","commitOrder":1,"curCode":"  @Test public void testExtractFromInterval() {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .query(\"select extract(month from interval '2-3' year to month) as c \\n\"\n            + \"from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\"=1\")\n        \r\n        .enable(CalciteAssert.DB != CalciteAssert.DatabaseInstance.MYSQL\n            && CalciteAssert.DB != CalciteAssert.DatabaseInstance.H2)\n        .returns(\"C=3\\n\");\n  }\n","date":"2018-01-26 08:40:51","endLine":1565,"groupId":"16035","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractFromInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b8/bffceb7c86e21d00425b13e3f004a88c9ac9de.src","preCode":"  @Test public void testExtractFromInterval() {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .query(\"select extract(month from interval '2-3' year to month) as c \\n\"\n            + \"from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\"=1\")\n        \r\n        .enable(CalciteAssert.DB != CalciteAssert.DatabaseInstance.MYSQL\n            && CalciteAssert.DB != CalciteAssert.DatabaseInstance.H2)\n        .returns(\"C=3\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1556,"status":"B"},{"authorDate":"2018-01-24 09:12:41","commitOrder":1,"curCode":"  @Test public void testFloorDate() {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .query(\"select floor(timestamp '2011-9-14 19:27:23' to month) as c \\n\"\n            + \"from \\\"foodmart\\\".\\\"employee\\\" limit 1\")\n        \r\n        \r\n        .enable(CalciteAssert.DB != CalciteAssert.DatabaseInstance.MYSQL\n            && CalciteAssert.DB != CalciteAssert.DatabaseInstance.H2)\n        .returns(\"C=2011-09-01 00:00:00\\n\");\n  }\n","date":"2018-01-26 08:40:51","endLine":1601,"groupId":"16035","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloorDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b8/bffceb7c86e21d00425b13e3f004a88c9ac9de.src","preCode":"  @Test public void testFloorDate() {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .query(\"select floor(timestamp '2011-9-14 19:27:23' to month) as c \\n\"\n            + \"from \\\"foodmart\\\".\\\"employee\\\" limit 1\")\n        \r\n        \r\n        .enable(CalciteAssert.DB != CalciteAssert.DatabaseInstance.MYSQL\n            && CalciteAssert.DB != CalciteAssert.DatabaseInstance.H2)\n        .returns(\"C=2011-09-01 00:00:00\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1591,"status":"B"}],"commitId":"6e22245aee0b6d581bdfb5ff0b7aec0d9ff44088","commitMessage":"@@@[CALCITE-1265] In JDBC adapter.  push OFFSET and FETCH to data source\n\nIn SqlDialect.  add a method unparseOffsetFetch.  so each dialect has\ntotal control of the syntax it generates; supportsOffsetFetch is now\ndeprecated.  because its boolean return value allowed only two options.\n\nDisable some MySQL and H2 tests; all tests now pass for MySQL.  H2 and\nPostgreSQL.\n\nDisable a test broken by [CALCITE-1054].\n","date":"2018-01-26 08:40:51","modifiedFileCount":"9","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testExtractFromInterval() {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .query(\"select extract(month from interval '2-3' year to month) as c\\n\"\n            + \"from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\"=1\")\n        \r\n        .enable(CalciteAssert.DB != CalciteAssert.DatabaseInstance.MYSQL\n            && CalciteAssert.DB != CalciteAssert.DatabaseInstance.H2)\n        .returns(\"C=3\\n\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1554,"groupId":"101287","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractFromInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/0b7f58f4442fcb05f8815355eeabe565385b9a.src","preCode":"  @Test public void testExtractFromInterval() {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .query(\"select extract(month from interval '2-3' year to month) as c\\n\"\n            + \"from \\\"foodmart\\\".\\\"employee\\\" where \\\"employee_id\\\"=1\")\n        \r\n        .enable(CalciteAssert.DB != CalciteAssert.DatabaseInstance.MYSQL\n            && CalciteAssert.DB != CalciteAssert.DatabaseInstance.H2)\n        .returns(\"C=3\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1545,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testFloorDate() {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .query(\"select floor(timestamp '2011-9-14 19:27:23' to month) as c\\n\"\n            + \"from \\\"foodmart\\\".\\\"employee\\\" limit 1\")\n        \r\n        \r\n        .enable(CalciteAssert.DB != CalciteAssert.DatabaseInstance.MYSQL\n            && CalciteAssert.DB != CalciteAssert.DatabaseInstance.H2)\n        .returns(\"C=2011-09-01 00:00:00\\n\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1590,"groupId":"101287","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloorDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/0b7f58f4442fcb05f8815355eeabe565385b9a.src","preCode":"  @Test public void testFloorDate() {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.JDBC_FOODMART)\n        .query(\"select floor(timestamp '2011-9-14 19:27:23' to month) as c\\n\"\n            + \"from \\\"foodmart\\\".\\\"employee\\\" limit 1\")\n        \r\n        \r\n        .enable(CalciteAssert.DB != CalciteAssert.DatabaseInstance.MYSQL\n            && CalciteAssert.DB != CalciteAssert.DatabaseInstance.H2)\n        .returns(\"C=2011-09-01 00:00:00\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1580,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
