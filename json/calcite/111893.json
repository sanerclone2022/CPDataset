[{"authorTime":"2019-08-15 13:47:07","codes":[{"authorDate":"2015-03-27 19:35:28","commitOrder":3,"curCode":"  public static RexNode splitCorrelatedFilterCondition(\n      LogicalFilter filter,\n      List<RexInputRef> joinKeys,\n      List<RexNode> correlatedJoinKeys) {\n    final List<RexNode> nonEquiList = new ArrayList<>();\n\n    splitCorrelatedFilterCondition(\n        filter,\n        filter.getCondition(),\n        joinKeys,\n        correlatedJoinKeys,\n        nonEquiList);\n\n    \r\n    return RexUtil.composeConjunction(\n        filter.getCluster().getRexBuilder(), nonEquiList, true);\n  }\n","date":"2015-03-28 01:04:50","endLine":935,"groupId":"5359","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"splitCorrelatedFilterCondition","params":"(LogicalFilterfilter@List<RexInputRef>joinKeys@List<RexNode>correlatedJoinKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/68db91459891e462b3ba271a4476a1893233bd.src","preCode":"  public static RexNode splitCorrelatedFilterCondition(\n      LogicalFilter filter,\n      List<RexInputRef> joinKeys,\n      List<RexNode> correlatedJoinKeys) {\n    final List<RexNode> nonEquiList = new ArrayList<>();\n\n    splitCorrelatedFilterCondition(\n        filter,\n        filter.getCondition(),\n        joinKeys,\n        correlatedJoinKeys,\n        nonEquiList);\n\n    \r\n    return RexUtil.composeConjunction(\n        filter.getCluster().getRexBuilder(), nonEquiList, true);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RelOptUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":919,"status":"NB"},{"authorDate":"2019-08-15 13:47:07","commitOrder":3,"curCode":"  public static RexNode splitCorrelatedFilterCondition(\n      Filter filter,\n      List<RexNode> joinKeys,\n      List<RexNode> correlatedJoinKeys,\n      boolean extractCorrelatedFieldAccess) {\n    final List<RexNode> nonEquiList = new ArrayList<>();\n\n    splitCorrelatedFilterCondition(\n        filter,\n        filter.getCondition(),\n        joinKeys,\n        correlatedJoinKeys,\n        nonEquiList,\n        extractCorrelatedFieldAccess);\n\n    \r\n    return RexUtil.composeConjunction(\n        filter.getCluster().getRexBuilder(), nonEquiList, true);\n  }\n","date":"2019-08-21 01:58:52","endLine":1047,"groupId":"5359","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"splitCorrelatedFilterCondition","params":"(Filterfilter@List<RexNode>joinKeys@List<RexNode>correlatedJoinKeys@booleanextractCorrelatedFieldAccess)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/cb0f5f537a3f575d0ea78cceb3f8ccba5f175b.src","preCode":"  public static RexNode splitCorrelatedFilterCondition(\n      Filter filter,\n      List<RexNode> joinKeys,\n      List<RexNode> correlatedJoinKeys,\n      boolean extractCorrelatedFieldAccess) {\n    final List<RexNode> nonEquiList = new ArrayList<>();\n\n    splitCorrelatedFilterCondition(\n        filter,\n        filter.getCondition(),\n        joinKeys,\n        correlatedJoinKeys,\n        nonEquiList,\n        extractCorrelatedFieldAccess);\n\n    \r\n    return RexUtil.composeConjunction(\n        filter.getCluster().getRexBuilder(), nonEquiList, true);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RelOptUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1029,"status":"B"}],"commitId":"11116f6d03bca7cd97d151033c5d82f24394e229","commitMessage":"@@@[CALCITE-3111] Add RelBuilder.correlate method.  and allow custom implementations of Correlate in RelDecorrelator (Juhwan Kim)\n\nIn RelDecorrelator.  refactor all Logical rels into corresponding\nabstract rels.  and use given RelBuilder when creating a new rel.\nAdd abstract rel visitors in CorelMapBuilder.  and change access\nlevels to allow extending RelDecorrelator.\n\nClose apache/calcite#1334\n","date":"2019-08-21 01:58:52","modifiedFileCount":"6","status":"M","submitter":"Juhwan Kim"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  public static @Nullable RexNode splitCorrelatedFilterCondition(\n      LogicalFilter filter,\n      List<RexInputRef> joinKeys,\n      List<RexNode> correlatedJoinKeys) {\n    final List<RexNode> nonEquiList = new ArrayList<>();\n\n    splitCorrelatedFilterCondition(\n        filter,\n        filter.getCondition(),\n        joinKeys,\n        correlatedJoinKeys,\n        nonEquiList);\n\n    \r\n    return RexUtil.composeConjunction(\n        filter.getCluster().getRexBuilder(), nonEquiList, true);\n  }\n","date":"2020-11-30 06:45:33","endLine":1188,"groupId":"111893","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"splitCorrelatedFilterCondition","params":"(LogicalFilterfilter@List<RexInputRef>joinKeys@List<RexNode>correlatedJoinKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ea/7b2dc34645b49dbdbed7d9cba5c58fb1590c86.src","preCode":"  public static RexNode splitCorrelatedFilterCondition(\n      LogicalFilter filter,\n      List<RexInputRef> joinKeys,\n      List<RexNode> correlatedJoinKeys) {\n    final List<RexNode> nonEquiList = new ArrayList<>();\n\n    splitCorrelatedFilterCondition(\n        filter,\n        filter.getCondition(),\n        joinKeys,\n        correlatedJoinKeys,\n        nonEquiList);\n\n    \r\n    return RexUtil.composeConjunction(\n        filter.getCluster().getRexBuilder(), nonEquiList, true);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RelOptUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1172,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  public static @Nullable RexNode splitCorrelatedFilterCondition(\n      Filter filter,\n      List<RexNode> joinKeys,\n      List<RexNode> correlatedJoinKeys,\n      boolean extractCorrelatedFieldAccess) {\n    final List<RexNode> nonEquiList = new ArrayList<>();\n\n    splitCorrelatedFilterCondition(\n        filter,\n        filter.getCondition(),\n        joinKeys,\n        correlatedJoinKeys,\n        nonEquiList,\n        extractCorrelatedFieldAccess);\n\n    \r\n    return RexUtil.composeConjunction(\n        filter.getCluster().getRexBuilder(), nonEquiList, true);\n  }\n","date":"2020-11-30 06:45:33","endLine":1220,"groupId":"111893","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"splitCorrelatedFilterCondition","params":"(Filterfilter@List<RexNode>joinKeys@List<RexNode>correlatedJoinKeys@booleanextractCorrelatedFieldAccess)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ea/7b2dc34645b49dbdbed7d9cba5c58fb1590c86.src","preCode":"  public static RexNode splitCorrelatedFilterCondition(\n      Filter filter,\n      List<RexNode> joinKeys,\n      List<RexNode> correlatedJoinKeys,\n      boolean extractCorrelatedFieldAccess) {\n    final List<RexNode> nonEquiList = new ArrayList<>();\n\n    splitCorrelatedFilterCondition(\n        filter,\n        filter.getCondition(),\n        joinKeys,\n        correlatedJoinKeys,\n        nonEquiList,\n        extractCorrelatedFieldAccess);\n\n    \r\n    return RexUtil.composeConjunction(\n        filter.getCluster().getRexBuilder(), nonEquiList, true);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RelOptUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1202,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
