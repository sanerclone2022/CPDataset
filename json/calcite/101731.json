[{"authorTime":"2014-12-27 14:16:06","codes":[{"authorDate":"2014-12-27 14:16:06","commitOrder":1,"curCode":"  public static ImmutableList<RexNode> flattenAnd(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = Sets.newHashSet(); \r\n    for (RexNode node : nodes) {\n      if (node != null && digests.add(node.digest)) {\n        addAnd(builder, node);\n      }\n    }\n    return builder.build();\n  }\n","date":"2014-12-27 14:56:42","endLine":641,"groupId":"2650","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"flattenAnd","params":"(Iterable<?extendsRexNode>nodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8f/a85c0dbba6553b2c2476eb997009cc6ce71b04.src","preCode":"  public static ImmutableList<RexNode> flattenAnd(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = Sets.newHashSet(); \r\n    for (RexNode node : nodes) {\n      if (node != null && digests.add(node.digest)) {\n        addAnd(builder, node);\n      }\n    }\n    return builder.build();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":627,"status":"B"},{"authorDate":"2014-12-27 14:16:06","commitOrder":1,"curCode":"  public static ImmutableList<RexNode> flattenOr(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = Sets.newHashSet(); \r\n    for (RexNode node : nodes) {\n      if (digests.add(node.digest)) {\n        addOr(builder, node);\n      }\n    }\n    return builder.build();\n  }\n","date":"2014-12-27 14:56:42","endLine":695,"groupId":"2650","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"flattenOr","params":"(Iterable<?extendsRexNode>nodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8f/a85c0dbba6553b2c2476eb997009cc6ce71b04.src","preCode":"  public static ImmutableList<RexNode> flattenOr(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = Sets.newHashSet(); \r\n    for (RexNode node : nodes) {\n      if (digests.add(node.digest)) {\n        addOr(builder, node);\n      }\n    }\n    return builder.build();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":681,"status":"B"}],"commitId":"3a225ed4e13c3d727fe7ae5738d15748665047eb","commitMessage":"@@@Detect and merge duplicate predicates 'AND(x.  y.  x)' to 'AND(x.  y)' in more circumstances\n\nMake flattenAnd and flattenOr more efficient on empty lists.\n","date":"2014-12-27 14:56:42","modifiedFileCount":"5","status":"B","submitter":"julianhyde"},{"authorTime":"2016-08-02 11:16:06","codes":[{"authorDate":"2016-08-02 11:16:06","commitOrder":2,"curCode":"  public static ImmutableList<RexNode> flattenAnd(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = Sets.newHashSet(); \r\n    for (RexNode node : nodes) {\n      if (node != null && digests.add(node.toString())) {\n        addAnd(builder, node);\n      }\n    }\n    return builder.build();\n  }\n","date":"2016-08-25 00:25:46","endLine":822,"groupId":"2650","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"flattenAnd","params":"(Iterable<?extendsRexNode>nodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7b/08b585575e26312fd14aa9c36bbbdd9df9e8a8.src","preCode":"  public static ImmutableList<RexNode> flattenAnd(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = Sets.newHashSet(); \r\n    for (RexNode node : nodes) {\n      if (node != null && digests.add(node.digest)) {\n        addAnd(builder, node);\n      }\n    }\n    return builder.build();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":808,"status":"M"},{"authorDate":"2016-08-02 11:16:06","commitOrder":2,"curCode":"  public static ImmutableList<RexNode> flattenOr(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = Sets.newHashSet(); \r\n    for (RexNode node : nodes) {\n      if (digests.add(node.toString())) {\n        addOr(builder, node);\n      }\n    }\n    return builder.build();\n  }\n","date":"2016-08-25 00:25:46","endLine":876,"groupId":"2650","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"flattenOr","params":"(Iterable<?extendsRexNode>nodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7b/08b585575e26312fd14aa9c36bbbdd9df9e8a8.src","preCode":"  public static ImmutableList<RexNode> flattenOr(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = Sets.newHashSet(); \r\n    for (RexNode node : nodes) {\n      if (digests.add(node.digest)) {\n        addOr(builder, node);\n      }\n    }\n    return builder.build();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":862,"status":"M"}],"commitId":"0ce83391eeebed493aeb5acb414926bf43afdefc","commitMessage":"@@@[CALCITE-1337] Lazy evaluate RexCall digests (Ted Xu)\n\nAdd a stress test.  computing the digests of a deeply nested expression.\n\nClose apache/calcite#264\n","date":"2016-08-25 00:25:46","modifiedFileCount":"5","status":"M","submitter":"Ted Xu"},{"authorTime":"2016-08-31 03:03:07","codes":[{"authorDate":"2016-08-31 03:03:07","commitOrder":3,"curCode":"  public static ImmutableList<RexNode> flattenAnd(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = Sets.newHashSet(); \r\n    for (RexNode node : nodes) {\n      if (node != null) {\n        addAnd(builder, digests, node);\n      }\n    }\n    return builder.build();\n  }\n","date":"2016-09-07 02:38:58","endLine":845,"groupId":"2650","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"flattenAnd","params":"(Iterable<?extendsRexNode>nodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/b8985d092b28ecd746c2f47bed17a33b41a1bc.src","preCode":"  public static ImmutableList<RexNode> flattenAnd(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = Sets.newHashSet(); \r\n    for (RexNode node : nodes) {\n      if (node != null && digests.add(node.toString())) {\n        addAnd(builder, node);\n      }\n    }\n    return builder.build();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":831,"status":"M"},{"authorDate":"2016-08-31 03:03:07","commitOrder":3,"curCode":"  public static ImmutableList<RexNode> flattenOr(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = Sets.newHashSet(); \r\n    for (RexNode node : nodes) {\n      addOr(builder, digests, node);\n    }\n    return builder.build();\n  }\n","date":"2016-09-07 02:38:58","endLine":897,"groupId":"2650","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"flattenOr","params":"(Iterable<?extendsRexNode>nodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/b8985d092b28ecd746c2f47bed17a33b41a1bc.src","preCode":"  public static ImmutableList<RexNode> flattenOr(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = Sets.newHashSet(); \r\n    for (RexNode node : nodes) {\n      if (digests.add(node.toString())) {\n        addOr(builder, node);\n      }\n    }\n    return builder.build();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":885,"status":"M"}],"commitId":"8eca1c9f42d7ee63fa2007d9154b56ab7ab3d9f1","commitMessage":"@@@More improvements to RexUtil.simplify\n\nUse Ordering.sortedCopy rather than sorting lists in-place.\n\nFix a couple more manifestations of [CALCITE-1283].\n","date":"2016-09-07 02:38:58","modifiedFileCount":"12","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-07-06 04:21:59","codes":[{"authorDate":"2018-07-06 04:21:59","commitOrder":4,"curCode":"  public static ImmutableList<RexNode> flattenAnd(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = new HashSet<>(); \r\n    for (RexNode node : nodes) {\n      if (node != null) {\n        addAnd(builder, digests, node);\n      }\n    }\n    return builder.build();\n  }\n","date":"2018-07-09 01:16:26","endLine":1052,"groupId":"4940","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"flattenAnd","params":"(Iterable<?extendsRexNode>nodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/29/e63f191e161b457c3c912b9ad46f2c94c6f471.src","preCode":"  public static ImmutableList<RexNode> flattenAnd(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = Sets.newHashSet(); \r\n    for (RexNode node : nodes) {\n      if (node != null) {\n        addAnd(builder, digests, node);\n      }\n    }\n    return builder.build();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1038,"status":"M"},{"authorDate":"2018-07-06 04:21:59","commitOrder":4,"curCode":"  public static ImmutableList<RexNode> flattenOr(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = new HashSet<>(); \r\n    for (RexNode node : nodes) {\n      addOr(builder, digests, node);\n    }\n    return builder.build();\n  }\n","date":"2018-07-09 01:16:26","endLine":1114,"groupId":"4940","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"flattenOr","params":"(Iterable<?extendsRexNode>nodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/29/e63f191e161b457c3c912b9ad46f2c94c6f471.src","preCode":"  public static ImmutableList<RexNode> flattenOr(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = Sets.newHashSet(); \r\n    for (RexNode node : nodes) {\n      addOr(builder, digests, node);\n    }\n    return builder.build();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1102,"status":"M"}],"commitId":"d59b639d27da704f00eff616324a2c04aa06f84c","commitMessage":"@@@[CALCITE-2259] Allow Java 8 syntax\n\nIn summary: use lambdas where possible.  switch from Guava function\ntypes to Java function types or lambdas.  but continue to use Guava\ncomponents (such as immutable collections and cache) that have no\nequivalent in the Java runtime.\n\n1. Change single-abstract-method (SAM) classes to lambdas. Preserve\nformatting wherever possible.\n\n2. Change AssertQuery.returns argument type from Guava Function to Java\nConsumer. If you are using a lambda and see 'returns is deprecated'. \nremove the 'return null;' line.  and the lambda will become a Consumer\n(whose return is void).\n\n3. Change RelOptRuleOperand and RelOptRule.operand methods to take Java\nPredicate rather than Guava Predicate.\n\n4. Change the argument of Hook.add and .addThread from Guava Function to\nJava Consumer.\n\n5. Change 'list.toArray(new T[list.size()])' to 'list.toArray(new T[0])'\nbecause the latter is simpler.  and just as efficient on recent Java\nversions.\n\n6. Resource references; change \"try (Closeable ignore = foo())\" to \"try\n  (foo())\".  especially uses of TryThreadLocal and Hook.Closeable.\n\n7. Convert linq4j Function1 to java Function.  Function2 to java BiFunction\n\n8. Fix occurrences of Intellij's \"Explicit type can be replaced with\n<>\" inspection. (Occurs for \"List<String> list = new\nArrayList<String>();\".)\n\n9. Change Guava Preconditions.checkNotNull to Java\nObjects.requireNonNull. (Kevin Risden)\n\n10. Break out anonymous classes and fix dependency problems.\n\n11. Use CacheLoader.of(Function) where possible.\n\n12. Replace sub-classes of ThreadLocal with ThreadLocal.withInitial().\n\n13. Replace Guava collection methods with calls to Java collection types. \nfor example replace Lists.newArrayList() with new ArrayList<>(). \nMaps.newHashSet() with new HashSet<>().  similarly Sets.\n\n14. Replace Guava Joiner with String.join.\n\n15. Replace Collections.emptyList() with ImmutableList.of() in a few\nplaces.\n\nFor backwards compatibility.  we preserved (and deprecated) the old\nmethods that used Guava types. In a few cases where new and old have\nthe same signature (after erasure).  we could not add a method with the\nsame name.  so we gave the new method a \"J\" suffix. Examples include\nHook.property and .propertyJ.  RelOptRule.operand and .operandJ.\n\nIn test code.  we have not slavishly ensured backwards compatibility.\n\nWe do not intend to remove uses of Guava's immutable collections.\n\nWe have ignored Intellij's \"Pseudo functional style code\" inspection\nmost of the time.  but in a few cases have converted Lists.transform(). \nIterables.transform().  and Iterables.filter() into Java streams. Use\nthe Util.toImmutableList() collector if the result is to be an\nimmutable list. Use Util.transform() rather than Lists.transform()\nif you have a Java function rather than a Guava function or lambda.\n\nNot covered in this change (might be done in future):\n* Convert Collections.sort(list) to list.sort.\n* Review uses of 'for (Map.Entry<K.  V> e : map.entrySet())' and see\n  whether it makes sense to convert to 'map.forEach((k.  v) ->\n  ...)'. Intellij inspection is called 'Replace with Map.forEach'.\n\nBreaking changes:\n* LatticeStatisticProvider.Factory.  result of RexUtil.notFun().  and\n  arguments to Mappings.target() are Function (was Guava.  now Java)\n* Argument to SqlSpecialOperator.TokenSequence.parser() is Predicate\n  (was Guava.  now Java)\n* AggregateNode.AccumulatorFactory extends Supplier (was Guava.  now Java)\n","date":"2018-07-09 01:16:26","modifiedFileCount":"514","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-11-26 22:58:50","codes":[{"authorDate":"2018-11-26 22:58:50","commitOrder":5,"curCode":"  public static ImmutableList<RexNode> flattenAnd(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<RexNode> set = new HashSet<>(); \r\n    for (RexNode node : nodes) {\n      if (node != null) {\n        addAnd(builder, set, node);\n      }\n    }\n    return builder.build();\n  }\n","date":"2018-12-01 12:29:35","endLine":1064,"groupId":"13128","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"flattenAnd","params":"(Iterable<?extendsRexNode>nodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/56/eabb6395d7ff802db6371c4e1af786ef2d1ee9.src","preCode":"  public static ImmutableList<RexNode> flattenAnd(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = new HashSet<>(); \r\n    for (RexNode node : nodes) {\n      if (node != null) {\n        addAnd(builder, digests, node);\n      }\n    }\n    return builder.build();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1050,"status":"M"},{"authorDate":"2018-11-26 22:58:50","commitOrder":5,"curCode":"  public static ImmutableList<RexNode> flattenOr(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<RexNode> set = new HashSet<>(); \r\n    for (RexNode node : nodes) {\n      addOr(builder, set, node);\n    }\n    return builder.build();\n  }\n","date":"2018-12-01 12:29:35","endLine":1130,"groupId":"13128","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"flattenOr","params":"(Iterable<?extendsRexNode>nodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/56/eabb6395d7ff802db6371c4e1af786ef2d1ee9.src","preCode":"  public static ImmutableList<RexNode> flattenOr(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<String> digests = new HashSet<>(); \r\n    for (RexNode node : nodes) {\n      addOr(builder, digests, node);\n    }\n    return builder.build();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1118,"status":"M"}],"commitId":"847e76cde2894ea7540749f68669ce2d910c2fa9","commitMessage":"@@@[CALCITE-2632] Ensure that RexNode and its sub-classes implement hashCode and equals methods (Zoltan Haindrich)\n\nPreviously there was no default hashCode/equals implementations. To\nensure that they are working properly is crucial while working with\nbasic collections like sets/maps.\n\nFix ups (Julian Hyde):\n\n* Use Objects.equals(x.  y) in preference to x.equals(y) only when x or y\n may be null; and use x == y when objects are primitive.\n\n* When implementing Object.equals.  use the pattern\n\n  return this == obj\n    || obj instanceof Type\n    && a.equals(((Type) obj).a) ...\n\n  whenever possible.\n\n* In the many cases where RexNode.toString() is used as a key in\n  collections.  use the raw RexNode instead.\n\nClose apache/calcite#943\n","date":"2018-12-01 12:29:35","modifiedFileCount":"30","status":"M","submitter":"Zoltan Haindrich"},{"authorTime":"2018-11-26 22:58:50","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"  public static ImmutableList<RexNode> flattenAnd(\n      Iterable<? extends @Nullable RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<RexNode> set = new HashSet<>(); \r\n    for (RexNode node : nodes) {\n      if (node != null) {\n        addAnd(builder, set, node);\n      }\n    }\n    return builder.build();\n  }\n","date":"2020-11-30 06:45:33","endLine":1254,"groupId":"101731","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"flattenAnd","params":"(Iterable<?extends@NullableRexNode>nodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/3194f8e20c05da6c323d27209a60257d16afcd.src","preCode":"  public static ImmutableList<RexNode> flattenAnd(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<RexNode> set = new HashSet<>(); \r\n    for (RexNode node : nodes) {\n      if (node != null) {\n        addAnd(builder, set, node);\n      }\n    }\n    return builder.build();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1240,"status":"M"},{"authorDate":"2018-11-26 22:58:50","commitOrder":6,"curCode":"  public static ImmutableList<RexNode> flattenOr(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<RexNode> set = new HashSet<>(); \r\n    for (RexNode node : nodes) {\n      addOr(builder, set, node);\n    }\n    return builder.build();\n  }\n","date":"2018-12-01 12:29:35","endLine":1130,"groupId":"101731","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"flattenOr","params":"(Iterable<?extendsRexNode>nodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/56/eabb6395d7ff802db6371c4e1af786ef2d1ee9.src","preCode":"  public static ImmutableList<RexNode> flattenOr(\n      Iterable<? extends RexNode> nodes) {\n    if (nodes instanceof Collection && ((Collection) nodes).isEmpty()) {\n      \r\n      return ImmutableList.of();\n    }\n    final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();\n    final Set<RexNode> set = new HashSet<>(); \r\n    for (RexNode node : nodes) {\n      addOr(builder, set, node);\n    }\n    return builder.build();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1118,"status":"N"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
