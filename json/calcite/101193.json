[{"authorTime":"2020-06-22 18:28:37","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testCastAsCollectionType() {\n    sql(\"select cast(array[1,null,2] as int array) from (values (1))\")\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(array['1',null,'2'] as varchar(5) array) from (values (1))\")\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"intArrayType\\\" as int array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5ArrayType\\\" as varchar(5) array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"intArrayArrayType\\\" as int array array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5ArrayArrayType\\\" as varchar(5) array array) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"intMultisetType\\\" as int multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL MULTISET NOT NULL\");\n    sql(\"select cast(\\\"varchar5MultisetType\\\" as varchar(5) multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL MULTISET NOT NULL\");\n    sql(\"select cast(\\\"intMultisetArrayType\\\" as int multiset array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL MULTISET NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5MultisetArrayType\\\" as varchar(5) multiset array) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL MULTISET NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"rowArrayMultisetType\\\" as row(f0 int array multiset, \"\n        + \"f1 varchar(5) array) array multiset) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"RecordType(INTEGER NOT NULL ARRAY NOT NULL MULTISET NOT NULL F0, \"\n            + \"VARCHAR(5) NOT NULL ARRAY NOT NULL F1) NOT NULL \"\n            + \"ARRAY NOT NULL MULTISET NOT NULL\");\n    \r\n    sql(\"select cast(a as MyUDT array multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .fails(\"(?s).*class org\\\\.apache\\\\.calcite\\\\.sql\\\\.SqlIdentifier: MYUDT.*\");\n  }\n","date":"2020-04-06 04:57:49","endLine":7632,"groupId":"13555","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastAsCollectionType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test void testCastAsCollectionType() {\n    sql(\"select cast(array[1,null,2] as int array) from (values (1))\")\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(array['1',null,'2'] as varchar(5) array) from (values (1))\")\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"intArrayType\\\" as int array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5ArrayType\\\" as varchar(5) array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"intArrayArrayType\\\" as int array array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5ArrayArrayType\\\" as varchar(5) array array) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"intMultisetType\\\" as int multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL MULTISET NOT NULL\");\n    sql(\"select cast(\\\"varchar5MultisetType\\\" as varchar(5) multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL MULTISET NOT NULL\");\n    sql(\"select cast(\\\"intMultisetArrayType\\\" as int multiset array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL MULTISET NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5MultisetArrayType\\\" as varchar(5) multiset array) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL MULTISET NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"rowArrayMultisetType\\\" as row(f0 int array multiset, \"\n        + \"f1 varchar(5) array) array multiset) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"RecordType(INTEGER NOT NULL ARRAY NOT NULL MULTISET NOT NULL F0, \"\n            + \"VARCHAR(5) NOT NULL ARRAY NOT NULL F1) NOT NULL \"\n            + \"ARRAY NOT NULL MULTISET NOT NULL\");\n    \r\n    sql(\"select cast(a as MyUDT array multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .fails(\"(?s).*class org\\\\.apache\\\\.calcite\\\\.sql\\\\.SqlIdentifier: MYUDT.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7587,"status":"NB"},{"authorDate":"2020-06-22 18:28:37","commitOrder":3,"curCode":"  @Test void testAccessingNestedFieldsOfNullableRecord() {\n    sql(\"select ROW_COLUMN_ARRAY[0].NOT_NULL_FIELD from NULLABLEROWS.NR_T1\")\n        .withExtendedCatalog()\n        .type(\"RecordType(BIGINT EXPR$0) NOT NULL\");\n    sql(\"select ROW_COLUMN_ARRAY[0]['NOT_NULL_FIELD'] from NULLABLEROWS.NR_T1\")\n        .withExtendedCatalog()\n        .type(\"RecordType(BIGINT EXPR$0) NOT NULL\");\n\n    final MockSqlOperatorTable operatorTable =\n        new MockSqlOperatorTable(SqlStdOperatorTable.instance());\n    MockSqlOperatorTable.addRamp(operatorTable);\n    sql(\"select * FROM TABLE(ROW_FUNC()) AS T(a, b)\")\n        .withOperatorTable(operatorTable)\n        .type(\"RecordType(BIGINT A, BIGINT B) NOT NULL\");\n  }\n","date":"2020-07-15 17:08:39","endLine":11508,"groupId":"12406","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessingNestedFieldsOfNullableRecord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9a/0a51367257c1511a34108ae8dae31cbef80af4.src","preCode":"  @Test void testAccessingNestedFieldsOfNullableRecord() {\n    sql(\"select ROW_COLUMN_ARRAY[0].NOT_NULL_FIELD from NULLABLEROWS.NR_T1\")\n        .withExtendedCatalog()\n        .type(\"RecordType(BIGINT EXPR$0) NOT NULL\");\n    sql(\"select ROW_COLUMN_ARRAY[0]['NOT_NULL_FIELD'] from NULLABLEROWS.NR_T1\")\n        .withExtendedCatalog()\n        .type(\"RecordType(BIGINT EXPR$0) NOT NULL\");\n\n    final MockSqlOperatorTable operatorTable =\n        new MockSqlOperatorTable(SqlStdOperatorTable.instance());\n    MockSqlOperatorTable.addRamp(operatorTable);\n    sql(\"select * FROM TABLE(ROW_FUNC()) AS T(a, b)\")\n        .withOperatorTable(operatorTable)\n        .type(\"RecordType(BIGINT A, BIGINT B) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":11494,"status":"B"}],"commitId":"e2942feef4d52c577a46cc3f2b92fa462035bb20","commitMessage":"@@@[CALCITE-4085] Improve return type nullability for SqlDotOperator & SqlItemOperator (Dawid Wysakowicz)\n\nThis PR introduces a logic that makes the accesed field nullable if the\naccessed row is nullable.\n\nMake the AliasNamespace keep the original nullability & StructKing of\nthe aliased record.\n\nclose apache/calcite#2042\n","date":"2020-07-15 17:08:39","modifiedFileCount":"6","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2018-06-19 05:10:50","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testCastAsCollectionType() {\n    sql(\"select cast(array[1,null,2] as int array) from (values (1))\")\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(array['1',null,'2'] as varchar(5) array) from (values (1))\")\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"intArrayType\\\" as int array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5ArrayType\\\" as varchar(5) array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"intArrayArrayType\\\" as int array array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5ArrayArrayType\\\" as varchar(5) array array) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"intMultisetType\\\" as int multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL MULTISET NOT NULL\");\n    sql(\"select cast(\\\"varchar5MultisetType\\\" as varchar(5) multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL MULTISET NOT NULL\");\n    sql(\"select cast(\\\"intMultisetArrayType\\\" as int multiset array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL MULTISET NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5MultisetArrayType\\\" as varchar(5) multiset array) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL MULTISET NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"rowArrayMultisetType\\\" as row(f0 int array multiset, \"\n        + \"f1 varchar(5) array) array multiset) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"RecordType(INTEGER NOT NULL ARRAY NOT NULL MULTISET NOT NULL F0, \"\n            + \"VARCHAR(5) NOT NULL ARRAY NOT NULL F1) NOT NULL \"\n            + \"ARRAY NOT NULL MULTISET NOT NULL\");\n    \r\n    sql(\"select cast(a as MyUDT array multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .fails(\"(?s).*class org\\\\.apache\\\\.calcite\\\\.sql\\\\.SqlIdentifier: MYUDT.*\");\n  }\n","date":"2020-04-06 04:57:49","endLine":7632,"groupId":"13555","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastAsCollectionType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test void testCastAsCollectionType() {\n    sql(\"select cast(array[1,null,2] as int array) from (values (1))\")\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(array['1',null,'2'] as varchar(5) array) from (values (1))\")\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"intArrayType\\\" as int array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5ArrayType\\\" as varchar(5) array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"intArrayArrayType\\\" as int array array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5ArrayArrayType\\\" as varchar(5) array array) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"intMultisetType\\\" as int multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL MULTISET NOT NULL\");\n    sql(\"select cast(\\\"varchar5MultisetType\\\" as varchar(5) multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL MULTISET NOT NULL\");\n    sql(\"select cast(\\\"intMultisetArrayType\\\" as int multiset array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL MULTISET NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5MultisetArrayType\\\" as varchar(5) multiset array) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL MULTISET NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"rowArrayMultisetType\\\" as row(f0 int array multiset, \"\n        + \"f1 varchar(5) array) array multiset) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"RecordType(INTEGER NOT NULL ARRAY NOT NULL MULTISET NOT NULL F0, \"\n            + \"VARCHAR(5) NOT NULL ARRAY NOT NULL F1) NOT NULL \"\n            + \"ARRAY NOT NULL MULTISET NOT NULL\");\n    \r\n    sql(\"select cast(a as MyUDT array multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .fails(\"(?s).*class org\\\\.apache\\\\.calcite\\\\.sql\\\\.SqlIdentifier: MYUDT.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7587,"status":"N"},{"authorDate":"2018-06-19 05:10:50","commitOrder":4,"curCode":"  @Test void testAccessingNestedFieldsOfNullableRecord() {\n    sql(\"select ROW_COLUMN_ARRAY[0].NOT_NULL_FIELD from NULLABLEROWS.NR_T1\")\n        .withExtendedCatalog()\n        .type(\"RecordType(BIGINT EXPR$0) NOT NULL\");\n    sql(\"select ROW_COLUMN_ARRAY[0]['NOT_NULL_FIELD'] from NULLABLEROWS.NR_T1\")\n        .withExtendedCatalog()\n        .type(\"RecordType(BIGINT EXPR$0) NOT NULL\");\n\n    final MockSqlOperatorTable operatorTable =\n        new MockSqlOperatorTable(SqlStdOperatorTable.instance());\n    MockSqlOperatorTable.addRamp(operatorTable);\n    sql(\"select * FROM TABLE(ROW_FUNC()) AS T(a, b)\")\n        .withOperatorTable(operatorTable)\n        .type(\"RecordType(BIGINT NOT NULL A, BIGINT B) NOT NULL\");\n  }\n","date":"2020-07-29 03:09:43","endLine":11591,"groupId":"12406","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessingNestedFieldsOfNullableRecord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/32/cc67862325ef176ba28093347e9864507ec93f.src","preCode":"  @Test void testAccessingNestedFieldsOfNullableRecord() {\n    sql(\"select ROW_COLUMN_ARRAY[0].NOT_NULL_FIELD from NULLABLEROWS.NR_T1\")\n        .withExtendedCatalog()\n        .type(\"RecordType(BIGINT EXPR$0) NOT NULL\");\n    sql(\"select ROW_COLUMN_ARRAY[0]['NOT_NULL_FIELD'] from NULLABLEROWS.NR_T1\")\n        .withExtendedCatalog()\n        .type(\"RecordType(BIGINT EXPR$0) NOT NULL\");\n\n    final MockSqlOperatorTable operatorTable =\n        new MockSqlOperatorTable(SqlStdOperatorTable.instance());\n    MockSqlOperatorTable.addRamp(operatorTable);\n    sql(\"select * FROM TABLE(ROW_FUNC()) AS T(a, b)\")\n        .withOperatorTable(operatorTable)\n        .type(\"RecordType(BIGINT A, BIGINT B) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":11577,"status":"M"}],"commitId":"19edf52c76c6a1507721f5bd37f2a33497aa0c4c","commitMessage":"@@@[CALCITE-2569] UDFs that are table functions must implement SqlTableFunction and have CURSOR as their return type\n\nValidate that table functions are not used in contexts that require\nscalar functions.  such as the SELECT clause.\n\nChange operand type ANY to mean 'scalar expression of any type (but\nnot a cursor)'.  and add operand type IGNORE to mean skip validation -\nfor an operand that is not an expression. TABLE is one of the few\noperators that accepts a CURSOR operand.\n\nAdd SqlKind.INTERVAL_QUALIFIER.\n","date":"2020-07-29 03:09:43","modifiedFileCount":"32","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-06-19 05:10:50","codes":[{"authorDate":"2021-01-14 10:31:38","commitOrder":5,"curCode":"  @Test void testCastAsCollectionType() {\n    sql(\"select cast(array[1,null,2] as int array) from (values (1))\")\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(array['1',null,'2'] as varchar(5) array) from (values (1))\")\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"intArrayType\\\" as int array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5ArrayType\\\" as varchar(5) array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"intArrayArrayType\\\" as int array array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5ArrayArrayType\\\" as varchar(5) array array) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"intMultisetType\\\" as int multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL MULTISET NOT NULL\");\n    sql(\"select cast(\\\"varchar5MultisetType\\\" as varchar(5) multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL MULTISET NOT NULL\");\n    sql(\"select cast(\\\"intMultisetArrayType\\\" as int multiset array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL MULTISET NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5MultisetArrayType\\\" as varchar(5) multiset array) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL MULTISET NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"rowArrayMultisetType\\\" as row(f0 int array multiset, \"\n        + \"f1 varchar(5) array) array multiset) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"RecordType(INTEGER NOT NULL ARRAY NOT NULL MULTISET NOT NULL F0, \"\n            + \"VARCHAR(5) NOT NULL ARRAY NOT NULL F1) NOT NULL \"\n            + \"ARRAY NOT NULL MULTISET NOT NULL\");\n    \r\n    sql(\"select cast(a as ^MyUDT^ array multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .fails(\"Unknown identifier 'MYUDT'\");\n  }\n","date":"2021-02-22 14:50:08","endLine":8013,"groupId":"101193","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastAsCollectionType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/ab14106fbe207a58bf4f1cb90df2d32b266b8d.src","preCode":"  @Test void testCastAsCollectionType() {\n    sql(\"select cast(array[1,null,2] as int array) from (values (1))\")\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(array['1',null,'2'] as varchar(5) array) from (values (1))\")\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"intArrayType\\\" as int array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5ArrayType\\\" as varchar(5) array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"intArrayArrayType\\\" as int array array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL ARRAY NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5ArrayArrayType\\\" as varchar(5) array array) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL ARRAY NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"intMultisetType\\\" as int multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL MULTISET NOT NULL\");\n    sql(\"select cast(\\\"varchar5MultisetType\\\" as varchar(5) multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL MULTISET NOT NULL\");\n    sql(\"select cast(\\\"intMultisetArrayType\\\" as int multiset array) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"INTEGER NOT NULL MULTISET NOT NULL ARRAY NOT NULL\");\n    sql(\"select cast(\\\"varchar5MultisetArrayType\\\" as varchar(5) multiset array) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"VARCHAR(5) NOT NULL MULTISET NOT NULL ARRAY NOT NULL\");\n    \r\n    sql(\"select cast(\\\"rowArrayMultisetType\\\" as row(f0 int array multiset, \"\n        + \"f1 varchar(5) array) array multiset) \"\n        + \"from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .columnType(\"RecordType(INTEGER NOT NULL ARRAY NOT NULL MULTISET NOT NULL F0, \"\n            + \"VARCHAR(5) NOT NULL ARRAY NOT NULL F1) NOT NULL \"\n            + \"ARRAY NOT NULL MULTISET NOT NULL\");\n    \r\n    sql(\"select cast(a as MyUDT array multiset) from COMPLEXTYPES.CTC_T1\")\n        .withExtendedCatalog()\n        .fails(\"(?s).*class org\\\\.apache\\\\.calcite\\\\.sql\\\\.SqlIdentifier: MYUDT.*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7968,"status":"M"},{"authorDate":"2018-06-19 05:10:50","commitOrder":5,"curCode":"  @Test void testAccessingNestedFieldsOfNullableRecord() {\n    sql(\"select ROW_COLUMN_ARRAY[0].NOT_NULL_FIELD from NULLABLEROWS.NR_T1\")\n        .withExtendedCatalog()\n        .type(\"RecordType(BIGINT EXPR$0) NOT NULL\");\n    sql(\"select ROW_COLUMN_ARRAY[0]['NOT_NULL_FIELD'] from NULLABLEROWS.NR_T1\")\n        .withExtendedCatalog()\n        .type(\"RecordType(BIGINT EXPR$0) NOT NULL\");\n\n    final MockSqlOperatorTable operatorTable =\n        new MockSqlOperatorTable(SqlStdOperatorTable.instance());\n    MockSqlOperatorTable.addRamp(operatorTable);\n    sql(\"select * FROM TABLE(ROW_FUNC()) AS T(a, b)\")\n        .withOperatorTable(operatorTable)\n        .type(\"RecordType(BIGINT NOT NULL A, BIGINT B) NOT NULL\");\n  }\n","date":"2020-07-29 03:09:43","endLine":11591,"groupId":"101193","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAccessingNestedFieldsOfNullableRecord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/32/cc67862325ef176ba28093347e9864507ec93f.src","preCode":"  @Test void testAccessingNestedFieldsOfNullableRecord() {\n    sql(\"select ROW_COLUMN_ARRAY[0].NOT_NULL_FIELD from NULLABLEROWS.NR_T1\")\n        .withExtendedCatalog()\n        .type(\"RecordType(BIGINT EXPR$0) NOT NULL\");\n    sql(\"select ROW_COLUMN_ARRAY[0]['NOT_NULL_FIELD'] from NULLABLEROWS.NR_T1\")\n        .withExtendedCatalog()\n        .type(\"RecordType(BIGINT EXPR$0) NOT NULL\");\n\n    final MockSqlOperatorTable operatorTable =\n        new MockSqlOperatorTable(SqlStdOperatorTable.instance());\n    MockSqlOperatorTable.addRamp(operatorTable);\n    sql(\"select * FROM TABLE(ROW_FUNC()) AS T(a, b)\")\n        .withOperatorTable(operatorTable)\n        .type(\"RecordType(BIGINT NOT NULL A, BIGINT B) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":11577,"status":"N"}],"commitId":"207bc8a0d731fa40e84309dfea3f8189b383e117","commitMessage":"@@@[CALCITE-4265] Improve error message when CAST to unknown type (Louis\nKuang)\n\nIf SqlNode is an Identifier node whose type can not be derived.  throws\na validation error instead of an UnsupportedOperationException to improve\nerror message.\n\nclose apache/calcite#2326\n","date":"2021-02-22 14:50:08","modifiedFileCount":"2","status":"M","submitter":"Louis Kuang"}]
