[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2019-05-12 00:05:58","commitOrder":2,"curCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startList(\"\", \"\");\n    call.operand(0).unparse(writer, getLeftPrec(), getRightPrec());\n\n    if (this.negated) {\n      writer.print(\"!\");\n    }\n    writer.print(\"~\");\n    if (!this.caseSensitive) {\n      writer.print(\"*\");\n    }\n    writer.print(\" \");\n\n    call.operand(1).unparse(writer, getLeftPrec(), getRightPrec());\n    writer.endList(frame);\n  }\n","date":"2019-07-03 01:44:04","endLine":133,"groupId":"13477","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4b/d8853245ba859bb3c0996c95a84e7e5c5bb0f9.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startList(\"\", \"\");\n    call.operand(0).unparse(writer, getLeftPrec(), getRightPrec());\n\n    if (this.negated) {\n      writer.print(\"!\");\n    }\n    writer.print(\"~\");\n    if (!this.caseSensitive) {\n      writer.print(\"*\");\n    }\n    writer.print(\" \");\n\n    call.operand(1).unparse(writer, getLeftPrec(), getRightPrec());\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlPosixRegexOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startList(\"\", \"\");\n    call.operand(0).unparse(writer, getLeftPrec(), getRightPrec());\n    writer.sep(getName());\n\n    call.operand(1).unparse(writer, getLeftPrec(), getRightPrec());\n    if (call.operandCount() == 3) {\n      writer.sep(\"ESCAPE\");\n      call.operand(2).unparse(writer, getLeftPrec(), getRightPrec());\n    }\n    writer.endList(frame);\n  }\n","date":"2014-11-14 09:39:34","endLine":137,"groupId":"6849","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5d/e868af341c09bc13d6bb16f2370f5ee9a041b0.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startList(\"\", \"\");\n    call.operand(0).unparse(writer, getLeftPrec(), getRightPrec());\n    writer.sep(getName());\n\n    call.operand(1).unparse(writer, getLeftPrec(), getRightPrec());\n    if (call.operandCount() == 3) {\n      writer.sep(\"ESCAPE\");\n      call.operand(2).unparse(writer, getLeftPrec(), getRightPrec());\n    }\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"NB"}],"commitId":"adf4cc4dc5cdb9f5e49c85d10f46a2fdcd831ccf","commitMessage":"@@@[CALCITE-3063] Parse and process PostgreSQL posix regular expressions\n","date":"2019-07-03 01:44:04","modifiedFileCount":"8","status":"M","submitter":"Muhammad Gelbana"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  @Override public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startList(\"\", \"\");\n    call.operand(0).unparse(writer, getLeftPrec(), getRightPrec());\n\n    if (this.negated) {\n      writer.print(\"!\");\n    }\n    writer.print(\"~\");\n    if (!this.caseSensitive) {\n      writer.print(\"*\");\n    }\n    writer.print(\" \");\n\n    call.operand(1).unparse(writer, getLeftPrec(), getRightPrec());\n    writer.endList(frame);\n  }\n","date":"2020-10-07 05:42:47","endLine":133,"groupId":"13477","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2e/45a1c153a971323a46646d69c1c57243aebbab.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startList(\"\", \"\");\n    call.operand(0).unparse(writer, getLeftPrec(), getRightPrec());\n\n    if (this.negated) {\n      writer.print(\"!\");\n    }\n    writer.print(\"~\");\n    if (!this.caseSensitive) {\n      writer.print(\"*\");\n    }\n    writer.print(\" \");\n\n    call.operand(1).unparse(writer, getLeftPrec(), getRightPrec());\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlPosixRegexOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  @Override public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startList(\"\", \"\");\n    call.operand(0).unparse(writer, getLeftPrec(), getRightPrec());\n    writer.sep(getName());\n\n    call.operand(1).unparse(writer, getLeftPrec(), getRightPrec());\n    if (call.operandCount() == 3) {\n      writer.sep(\"ESCAPE\");\n      call.operand(2).unparse(writer, getLeftPrec(), getRightPrec());\n    }\n    writer.endList(frame);\n  }\n","date":"2020-10-07 05:42:47","endLine":146,"groupId":"6849","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/89/e889b1af8a000d9214909bd4ca50973a20319a.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startList(\"\", \"\");\n    call.operand(0).unparse(writer, getLeftPrec(), getRightPrec());\n    writer.sep(getName());\n\n    call.operand(1).unparse(writer, getLeftPrec(), getRightPrec());\n    if (call.operandCount() == 3) {\n      writer.sep(\"ESCAPE\");\n      call.operand(2).unparse(writer, getLeftPrec(), getRightPrec());\n    }\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-11-24 19:49:43","commitOrder":4,"curCode":"  @Override public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startList(\"\", \"\");\n    call.operand(0).unparse(writer, getLeftPrec(), getRightPrec());\n\n    writer.print(this.operatorString);\n    writer.print(\" \");\n\n    call.operand(1).unparse(writer, getLeftPrec(), getRightPrec());\n    writer.endList(frame);\n  }\n","date":"2020-12-03 16:20:58","endLine":121,"groupId":"101774","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fe/6c204b84463870fe680651591c8b392dc4fa10.src","preCode":"  @Override public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startList(\"\", \"\");\n    call.operand(0).unparse(writer, getLeftPrec(), getRightPrec());\n\n    if (this.negated) {\n      writer.print(\"!\");\n    }\n    writer.print(\"~\");\n    if (!this.caseSensitive) {\n      writer.print(\"*\");\n    }\n    writer.print(\" \");\n\n    call.operand(1).unparse(writer, getLeftPrec(), getRightPrec());\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlPosixRegexOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":4,"curCode":"  @Override public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startList(\"\", \"\");\n    call.operand(0).unparse(writer, getLeftPrec(), getRightPrec());\n    writer.sep(getName());\n\n    call.operand(1).unparse(writer, getLeftPrec(), getRightPrec());\n    if (call.operandCount() == 3) {\n      writer.sep(\"ESCAPE\");\n      call.operand(2).unparse(writer, getLeftPrec(), getRightPrec());\n    }\n    writer.endList(frame);\n  }\n","date":"2020-10-07 05:42:47","endLine":146,"groupId":"101774","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/89/e889b1af8a000d9214909bd4ca50973a20319a.src","preCode":"  @Override public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startList(\"\", \"\");\n    call.operand(0).unparse(writer, getLeftPrec(), getRightPrec());\n    writer.sep(getName());\n\n    call.operand(1).unparse(writer, getLeftPrec(), getRightPrec());\n    if (call.operandCount() == 3) {\n      writer.sep(\"ESCAPE\");\n      call.operand(2).unparse(writer, getLeftPrec(), getRightPrec());\n    }\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"N"}],"commitId":"d9b55b4300eb2959c4ed55e9b692ffb9f12dd1ef","commitMessage":"@@@[CALCITE-4419] Posix regex operators cannot be used within RelBuilder\n","date":"2020-12-03 16:20:58","modifiedFileCount":"6","status":"M","submitter":"rubenada"}]
