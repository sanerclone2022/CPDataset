[{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":2,"curCode":"  @Test public void testOver() {\n    expr(\"sum(sal) over ()\")\n        .ok(\"(SUM(`SAL`) OVER ())\");\n    expr(\"sum(sal) over (partition by x, y)\")\n        .ok(\"(SUM(`SAL`) OVER (PARTITION BY `X`, `Y`))\");\n    expr(\"sum(sal) over (order by x desc, y asc)\")\n        .ok(\"(SUM(`SAL`) OVER (ORDER BY `X` DESC, `Y`))\");\n    expr(\"sum(sal) over (rows 5 preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (ROWS 5 PRECEDING))\");\n    expr(\"sum(sal) over (range between interval '1' second preceding\\n\"\n        + \" and interval '1' second following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '1' SECOND PRECEDING \"\n            + \"AND INTERVAL '1' SECOND FOLLOWING))\");\n    expr(\"sum(sal) over (range between interval '1:03' hour preceding\\n\"\n        + \" and interval '2' minute following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '1:03' HOUR PRECEDING \"\n            + \"AND INTERVAL '2' MINUTE FOLLOWING))\");\n    expr(\"sum(sal) over (range between interval '5' day preceding\\n\"\n        + \" and current row)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '5' DAY PRECEDING \"\n            + \"AND CURRENT ROW))\");\n    expr(\"sum(sal) over (range interval '5' day preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE INTERVAL '5' DAY PRECEDING))\");\n    expr(\"sum(sal) over (range between unbounded preceding and current row)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN UNBOUNDED PRECEDING \"\n            + \"AND CURRENT ROW))\");\n    expr(\"sum(sal) over (range unbounded preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE UNBOUNDED PRECEDING))\");\n    expr(\"sum(sal) over (range between current row and unbounded preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN CURRENT ROW \"\n            + \"AND UNBOUNDED PRECEDING))\");\n    expr(\"sum(sal) over (range between current row and unbounded following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN CURRENT ROW \"\n            + \"AND UNBOUNDED FOLLOWING))\");\n    expr(\"sum(sal) over (range between 6 preceding\\n\"\n        + \" and interval '1:03' hour preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN 6 PRECEDING \"\n            + \"AND INTERVAL '1:03' HOUR PRECEDING))\");\n    expr(\"sum(sal) over (range between interval '1' second following\\n\"\n        + \" and interval '5' day following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '1' SECOND FOLLOWING \"\n            + \"AND INTERVAL '5' DAY FOLLOWING))\");\n  }\n","date":"2019-09-24 02:59:18","endLine":4568,"groupId":"4072","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testOver() {\n    expr(\"sum(sal) over ()\")\n        .ok(\"(SUM(`SAL`) OVER ())\");\n    expr(\"sum(sal) over (partition by x, y)\")\n        .ok(\"(SUM(`SAL`) OVER (PARTITION BY `X`, `Y`))\");\n    expr(\"sum(sal) over (order by x desc, y asc)\")\n        .ok(\"(SUM(`SAL`) OVER (ORDER BY `X` DESC, `Y`))\");\n    expr(\"sum(sal) over (rows 5 preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (ROWS 5 PRECEDING))\");\n    expr(\"sum(sal) over (range between interval '1' second preceding\\n\"\n        + \" and interval '1' second following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '1' SECOND PRECEDING \"\n            + \"AND INTERVAL '1' SECOND FOLLOWING))\");\n    expr(\"sum(sal) over (range between interval '1:03' hour preceding\\n\"\n        + \" and interval '2' minute following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '1:03' HOUR PRECEDING \"\n            + \"AND INTERVAL '2' MINUTE FOLLOWING))\");\n    expr(\"sum(sal) over (range between interval '5' day preceding\\n\"\n        + \" and current row)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '5' DAY PRECEDING \"\n            + \"AND CURRENT ROW))\");\n    expr(\"sum(sal) over (range interval '5' day preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE INTERVAL '5' DAY PRECEDING))\");\n    expr(\"sum(sal) over (range between unbounded preceding and current row)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN UNBOUNDED PRECEDING \"\n            + \"AND CURRENT ROW))\");\n    expr(\"sum(sal) over (range unbounded preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE UNBOUNDED PRECEDING))\");\n    expr(\"sum(sal) over (range between current row and unbounded preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN CURRENT ROW \"\n            + \"AND UNBOUNDED PRECEDING))\");\n    expr(\"sum(sal) over (range between current row and unbounded following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN CURRENT ROW \"\n            + \"AND UNBOUNDED FOLLOWING))\");\n    expr(\"sum(sal) over (range between 6 preceding\\n\"\n        + \" and interval '1:03' hour preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN 6 PRECEDING \"\n            + \"AND INTERVAL '1:03' HOUR PRECEDING))\");\n    expr(\"sum(sal) over (range between interval '1' second following\\n\"\n        + \" and interval '5' day following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '1' SECOND FOLLOWING \"\n            + \"AND INTERVAL '5' DAY FOLLOWING))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4526,"status":"MB"},{"authorDate":"2019-09-07 07:51:19","commitOrder":2,"curCode":"  @Test public void testCastAsRowType() {\n    expr(\"cast(a as row(f0 int, f1 varchar))\")\n        .ok(\"CAST(`A` AS ROW(`F0` INTEGER, `F1` VARCHAR))\");\n    expr(\"cast(a as row(f0 int not null, f1 varchar null))\")\n        .ok(\"CAST(`A` AS ROW(`F0` INTEGER, `F1` VARCHAR NULL))\");\n    \r\n    expr(\"cast(a as row(\"\n        + \"f0 row(ff0 int not null, ff1 varchar null) null, \"\n        + \"f1 timestamp not null))\")\n        .ok(\"CAST(`A` AS ROW(\"\n            + \"`F0` ROW(`FF0` INTEGER, `FF1` VARCHAR NULL) NULL, \"\n            + \"`F1` TIMESTAMP))\");\n    \r\n    expr(\"cast(a as row(f0 bigint not null, f1 decimal null) array)\")\n        .ok(\"CAST(`A` AS ROW(`F0` BIGINT, `F1` DECIMAL NULL) ARRAY)\");\n    expr(\"cast(a as row(f0 varchar not null, f1 timestamp null) multiset)\")\n        .ok(\"CAST(`A` AS ROW(`F0` VARCHAR, `F1` TIMESTAMP NULL) MULTISET)\");\n  }\n","date":"2019-09-24 02:59:18","endLine":4754,"groupId":"16532","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastAsRowType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testCastAsRowType() {\n    expr(\"cast(a as row(f0 int, f1 varchar))\")\n        .ok(\"CAST(`A` AS ROW(`F0` INTEGER, `F1` VARCHAR))\");\n    expr(\"cast(a as row(f0 int not null, f1 varchar null))\")\n        .ok(\"CAST(`A` AS ROW(`F0` INTEGER, `F1` VARCHAR NULL))\");\n    \r\n    expr(\"cast(a as row(\"\n        + \"f0 row(ff0 int not null, ff1 varchar null) null, \"\n        + \"f1 timestamp not null))\")\n        .ok(\"CAST(`A` AS ROW(\"\n            + \"`F0` ROW(`FF0` INTEGER, `FF1` VARCHAR NULL) NULL, \"\n            + \"`F1` TIMESTAMP))\");\n    \r\n    expr(\"cast(a as row(f0 bigint not null, f1 decimal null) array)\")\n        .ok(\"CAST(`A` AS ROW(`F0` BIGINT, `F1` DECIMAL NULL) ARRAY)\");\n    expr(\"cast(a as row(f0 varchar not null, f1 timestamp null) multiset)\")\n        .ok(\"CAST(`A` AS ROW(`F0` VARCHAR, `F1` TIMESTAMP NULL) MULTISET)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4737,"status":"B"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testOver() {\n    expr(\"sum(sal) over ()\")\n        .ok(\"(SUM(`SAL`) OVER ())\");\n    expr(\"sum(sal) over (partition by x, y)\")\n        .ok(\"(SUM(`SAL`) OVER (PARTITION BY `X`, `Y`))\");\n    expr(\"sum(sal) over (order by x desc, y asc)\")\n        .ok(\"(SUM(`SAL`) OVER (ORDER BY `X` DESC, `Y`))\");\n    expr(\"sum(sal) over (rows 5 preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (ROWS 5 PRECEDING))\");\n    expr(\"sum(sal) over (range between interval '1' second preceding\\n\"\n        + \" and interval '1' second following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '1' SECOND PRECEDING \"\n            + \"AND INTERVAL '1' SECOND FOLLOWING))\");\n    expr(\"sum(sal) over (range between interval '1:03' hour preceding\\n\"\n        + \" and interval '2' minute following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '1:03' HOUR PRECEDING \"\n            + \"AND INTERVAL '2' MINUTE FOLLOWING))\");\n    expr(\"sum(sal) over (range between interval '5' day preceding\\n\"\n        + \" and current row)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '5' DAY PRECEDING \"\n            + \"AND CURRENT ROW))\");\n    expr(\"sum(sal) over (range interval '5' day preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE INTERVAL '5' DAY PRECEDING))\");\n    expr(\"sum(sal) over (range between unbounded preceding and current row)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN UNBOUNDED PRECEDING \"\n            + \"AND CURRENT ROW))\");\n    expr(\"sum(sal) over (range unbounded preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE UNBOUNDED PRECEDING))\");\n    expr(\"sum(sal) over (range between current row and unbounded preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN CURRENT ROW \"\n            + \"AND UNBOUNDED PRECEDING))\");\n    expr(\"sum(sal) over (range between current row and unbounded following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN CURRENT ROW \"\n            + \"AND UNBOUNDED FOLLOWING))\");\n    expr(\"sum(sal) over (range between 6 preceding\\n\"\n        + \" and interval '1:03' hour preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN 6 PRECEDING \"\n            + \"AND INTERVAL '1:03' HOUR PRECEDING))\");\n    expr(\"sum(sal) over (range between interval '1' second following\\n\"\n        + \" and interval '5' day following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '1' SECOND FOLLOWING \"\n            + \"AND INTERVAL '5' DAY FOLLOWING))\");\n  }\n","date":"2020-04-06 04:57:49","endLine":4647,"groupId":"10857","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testOver() {\n    expr(\"sum(sal) over ()\")\n        .ok(\"(SUM(`SAL`) OVER ())\");\n    expr(\"sum(sal) over (partition by x, y)\")\n        .ok(\"(SUM(`SAL`) OVER (PARTITION BY `X`, `Y`))\");\n    expr(\"sum(sal) over (order by x desc, y asc)\")\n        .ok(\"(SUM(`SAL`) OVER (ORDER BY `X` DESC, `Y`))\");\n    expr(\"sum(sal) over (rows 5 preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (ROWS 5 PRECEDING))\");\n    expr(\"sum(sal) over (range between interval '1' second preceding\\n\"\n        + \" and interval '1' second following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '1' SECOND PRECEDING \"\n            + \"AND INTERVAL '1' SECOND FOLLOWING))\");\n    expr(\"sum(sal) over (range between interval '1:03' hour preceding\\n\"\n        + \" and interval '2' minute following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '1:03' HOUR PRECEDING \"\n            + \"AND INTERVAL '2' MINUTE FOLLOWING))\");\n    expr(\"sum(sal) over (range between interval '5' day preceding\\n\"\n        + \" and current row)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '5' DAY PRECEDING \"\n            + \"AND CURRENT ROW))\");\n    expr(\"sum(sal) over (range interval '5' day preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE INTERVAL '5' DAY PRECEDING))\");\n    expr(\"sum(sal) over (range between unbounded preceding and current row)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN UNBOUNDED PRECEDING \"\n            + \"AND CURRENT ROW))\");\n    expr(\"sum(sal) over (range unbounded preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE UNBOUNDED PRECEDING))\");\n    expr(\"sum(sal) over (range between current row and unbounded preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN CURRENT ROW \"\n            + \"AND UNBOUNDED PRECEDING))\");\n    expr(\"sum(sal) over (range between current row and unbounded following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN CURRENT ROW \"\n            + \"AND UNBOUNDED FOLLOWING))\");\n    expr(\"sum(sal) over (range between 6 preceding\\n\"\n        + \" and interval '1:03' hour preceding)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN 6 PRECEDING \"\n            + \"AND INTERVAL '1:03' HOUR PRECEDING))\");\n    expr(\"sum(sal) over (range between interval '1' second following\\n\"\n        + \" and interval '5' day following)\")\n        .ok(\"(SUM(`SAL`) OVER (RANGE BETWEEN INTERVAL '1' SECOND FOLLOWING \"\n            + \"AND INTERVAL '5' DAY FOLLOWING))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4605,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testCastAsRowType() {\n    expr(\"cast(a as row(f0 int, f1 varchar))\")\n        .ok(\"CAST(`A` AS ROW(`F0` INTEGER, `F1` VARCHAR))\");\n    expr(\"cast(a as row(f0 int not null, f1 varchar null))\")\n        .ok(\"CAST(`A` AS ROW(`F0` INTEGER, `F1` VARCHAR NULL))\");\n    \r\n    expr(\"cast(a as row(\"\n        + \"f0 row(ff0 int not null, ff1 varchar null) null, \"\n        + \"f1 timestamp not null))\")\n        .ok(\"CAST(`A` AS ROW(\"\n            + \"`F0` ROW(`FF0` INTEGER, `FF1` VARCHAR NULL) NULL, \"\n            + \"`F1` TIMESTAMP))\");\n    \r\n    expr(\"cast(a as row(f0 bigint not null, f1 decimal null) array)\")\n        .ok(\"CAST(`A` AS ROW(`F0` BIGINT, `F1` DECIMAL NULL) ARRAY)\");\n    expr(\"cast(a as row(f0 varchar not null, f1 timestamp null) multiset)\")\n        .ok(\"CAST(`A` AS ROW(`F0` VARCHAR, `F1` TIMESTAMP NULL) MULTISET)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":4833,"groupId":"10857","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastAsRowType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testCastAsRowType() {\n    expr(\"cast(a as row(f0 int, f1 varchar))\")\n        .ok(\"CAST(`A` AS ROW(`F0` INTEGER, `F1` VARCHAR))\");\n    expr(\"cast(a as row(f0 int not null, f1 varchar null))\")\n        .ok(\"CAST(`A` AS ROW(`F0` INTEGER, `F1` VARCHAR NULL))\");\n    \r\n    expr(\"cast(a as row(\"\n        + \"f0 row(ff0 int not null, ff1 varchar null) null, \"\n        + \"f1 timestamp not null))\")\n        .ok(\"CAST(`A` AS ROW(\"\n            + \"`F0` ROW(`FF0` INTEGER, `FF1` VARCHAR NULL) NULL, \"\n            + \"`F1` TIMESTAMP))\");\n    \r\n    expr(\"cast(a as row(f0 bigint not null, f1 decimal null) array)\")\n        .ok(\"CAST(`A` AS ROW(`F0` BIGINT, `F1` DECIMAL NULL) ARRAY)\");\n    expr(\"cast(a as row(f0 varchar not null, f1 timestamp null) multiset)\")\n        .ok(\"CAST(`A` AS ROW(`F0` VARCHAR, `F1` TIMESTAMP NULL) MULTISET)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4816,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
