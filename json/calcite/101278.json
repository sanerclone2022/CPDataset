[{"authorTime":"2020-09-22 06:05:06","codes":[{"authorDate":"2020-09-22 06:05:06","commitOrder":1,"curCode":"  @Test void testFilterIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                    b.literal(10)))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[SEARCH($7, Sarg[10, 20])])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","date":"2020-09-22 06:37:50","endLine":3238,"groupId":"534","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/bd8af6f4d9dcb5984bfe74a180b3f230b8297b.src","preCode":"  @Test void testFilterIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                    b.literal(10)))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[SEARCH($7, Sarg[10, 20])])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3225,"status":"B"},{"authorDate":"2020-09-22 06:05:06","commitOrder":1,"curCode":"  @Test void testFilterOrIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.or(\n                    b.call(SqlStdOperatorTable.GREATER_THAN, b.field(\"DEPTNO\"),\n                        b.literal(15)),\n                    b.in(b.field(\"JOB\"), b.literal(\"CLERK\")),\n                    b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                        b.literal(11), b.literal(10))))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[OR(SEARCH($7, Sarg[10, 11, (15���������+���������)]), \"\n        + \"SEARCH($2, Sarg['CLERK']:CHAR(5)))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","date":"2020-09-22 06:37:50","endLine":3258,"groupId":"534","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterOrIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/bd8af6f4d9dcb5984bfe74a180b3f230b8297b.src","preCode":"  @Test void testFilterOrIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.or(\n                    b.call(SqlStdOperatorTable.GREATER_THAN, b.field(\"DEPTNO\"),\n                        b.literal(15)),\n                    b.in(b.field(\"JOB\"), b.literal(\"CLERK\")),\n                    b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                        b.literal(11), b.literal(10))))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[OR(SEARCH($7, Sarg[10, 11, (15���������+���������)]), \"\n        + \"SEARCH($2, Sarg['CLERK']:CHAR(5)))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3240,"status":"B"}],"commitId":"2acf3426e5a9df85192d0dfb047a7c0cd7c335dd","commitMessage":"@@@[CALCITE-4271] RelBuilder.in should allow duplicate values\n","date":"2020-09-22 06:37:50","modifiedFileCount":"2","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-09-17 05:42:37","codes":[{"authorDate":"2020-09-22 06:05:06","commitOrder":2,"curCode":"  @Test void testFilterIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                    b.literal(10)))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[SEARCH($7, Sarg[10, 20])])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","date":"2020-09-22 06:37:50","endLine":3238,"groupId":"534","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/bd8af6f4d9dcb5984bfe74a180b3f230b8297b.src","preCode":"  @Test void testFilterIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                    b.literal(10)))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[SEARCH($7, Sarg[10, 20])])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3225,"status":"N"},{"authorDate":"2020-09-17 05:42:37","commitOrder":2,"curCode":"  @Test void testFilterOrIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.or(\n                    b.call(SqlStdOperatorTable.GREATER_THAN, b.field(\"DEPTNO\"),\n                        b.literal(15)),\n                    b.in(b.field(\"JOB\"), b.literal(\"CLERK\")),\n                    b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                        b.literal(11), b.literal(10))))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[OR(SEARCH($7, Sarg[10, 11, (15..+���������)]), \"\n        + \"SEARCH($2, Sarg['CLERK']:CHAR(5)))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","date":"2020-09-28 23:30:05","endLine":3258,"groupId":"534","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterOrIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9f/a4a947333e44c5ed819d20867f402af565b9e7.src","preCode":"  @Test void testFilterOrIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.or(\n                    b.call(SqlStdOperatorTable.GREATER_THAN, b.field(\"DEPTNO\"),\n                        b.literal(15)),\n                    b.in(b.field(\"JOB\"), b.literal(\"CLERK\")),\n                    b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                        b.literal(11), b.literal(10))))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[OR(SEARCH($7, Sarg[10, 11, (15���������+���������)]), \"\n        + \"SEARCH($2, Sarg['CLERK']:CHAR(5)))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3240,"status":"M"}],"commitId":"84ac41900bc41fc38bc5238b3bb53f765b70349b","commitMessage":"@@@[CALCITE-4259] Support JDK 15 and Guava version 29.0-jre\n\nCalcite still supports JDK 8 and higher.  and Guava 19.0 and higher.\n\nUpgrade io.airlift.tpch-0.1 to io.prestosql.tpch-1.0.\n\nIn guava-29.  RangeSet.toString() changed format. Change\nCalcite's formatting of Sargs to match.  and add wrappers so\nthat tests pass on all versions of Guava.\n\nRemove log4j; disable checking for warnings in\nSqlHintsConverterTest. Danny Chen has agreed to re-enable\nshortly.\n\nSwitch CI from JDK 14 to 15\n\nThrow if SQL strings in RelOptRulesTest have trailing spaces;\nthe spaces make reference logs brittle.\n\nSimplify description of which JDKs we support.\n\nClose apache/calcite#2153\n","date":"2020-09-28 23:30:05","modifiedFileCount":"17","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-11-05 15:01:59","codes":[{"authorDate":"2020-09-22 06:05:06","commitOrder":3,"curCode":"  @Test void testFilterIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                    b.literal(10)))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[SEARCH($7, Sarg[10, 20])])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","date":"2020-09-22 06:37:50","endLine":3238,"groupId":"534","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/bd8af6f4d9dcb5984bfe74a180b3f230b8297b.src","preCode":"  @Test void testFilterIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                    b.literal(10)))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[SEARCH($7, Sarg[10, 20])])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3225,"status":"N"},{"authorDate":"2020-11-05 15:01:59","commitOrder":3,"curCode":"  @Test void testFilterOrIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.or(\n                    b.call(SqlStdOperatorTable.GREATER_THAN, b.field(\"DEPTNO\"),\n                        b.literal(15)),\n                    b.in(b.field(\"JOB\"), b.literal(\"CLERK\")),\n                    b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                        b.literal(11), b.literal(10))))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[OR(SEARCH($7, Sarg[10, 11, (15..+���������)]), =($2, 'CLERK'))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","date":"2020-11-12 17:39:03","endLine":3356,"groupId":"534","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterOrIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e4/b185f0001e119255c86d14274a5f3bf2ea5eae.src","preCode":"  @Test void testFilterOrIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.or(\n                    b.call(SqlStdOperatorTable.GREATER_THAN, b.field(\"DEPTNO\"),\n                        b.literal(15)),\n                    b.in(b.field(\"JOB\"), b.literal(\"CLERK\")),\n                    b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                        b.literal(11), b.literal(10))))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[OR(SEARCH($7, Sarg[10, 11, (15..+���������)]), \"\n        + \"SEARCH($2, Sarg['CLERK']:CHAR(5)))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3339,"status":"M"}],"commitId":"5e9943aa1f51a97068fc37d53dea1d447570becc","commitMessage":"@@@[CALCITE-4364] `a IN (1.  2) AND a = 1` should be simplified to `a = 1`\n","date":"2020-11-12 17:39:03","modifiedFileCount":"8","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2021-04-16 11:50:50","codes":[{"authorDate":"2020-09-22 06:05:06","commitOrder":4,"curCode":"  @Test void testFilterIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                    b.literal(10)))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[SEARCH($7, Sarg[10, 20])])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","date":"2020-09-22 06:37:50","endLine":3238,"groupId":"534","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/bd8af6f4d9dcb5984bfe74a180b3f230b8297b.src","preCode":"  @Test void testFilterIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                    b.literal(10)))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[SEARCH($7, Sarg[10, 20])])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3225,"status":"N"},{"authorDate":"2021-04-16 11:50:50","commitOrder":4,"curCode":"  @Test void testFilterOrIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.or(\n                    b.call(SqlStdOperatorTable.GREATER_THAN, b.field(\"DEPTNO\"),\n                        b.literal(15)),\n                    b.in(b.field(\"JOB\"), b.literal(\"CLERK\")),\n                    b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                        b.literal(11), b.literal(10))))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[OR(SEARCH($7, Sarg[10, 11, (15..+���������)]), =($2, 'CLERK'))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    final String expectedWithoutSimplify = \"\"\n        + \"LogicalFilter(condition=[OR(>($7, 15), SEARCH($2, Sarg['CLERK']:CHAR(5)), SEARCH($7, \"\n        + \"Sarg[10, 11, 20]))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expectedWithoutSimplify));\n  }\n","date":"2021-04-20 16:50:25","endLine":3646,"groupId":"534","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterOrIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b2/995c6c5f04a3822f018e76cc8f4bfff6219356.src","preCode":"  @Test void testFilterOrIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.or(\n                    b.call(SqlStdOperatorTable.GREATER_THAN, b.field(\"DEPTNO\"),\n                        b.literal(15)),\n                    b.in(b.field(\"JOB\"), b.literal(\"CLERK\")),\n                    b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                        b.literal(11), b.literal(10))))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[OR(SEARCH($7, Sarg[10, 11, (15..+���������)]), =($2, 'CLERK'))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3625,"status":"M"}],"commitId":"126dc7692d8b3261fba20956093681688e44fe4a","commitMessage":"@@@[CALCITE-4583] Control simplification in `RelBuilder#filter` with `config.simplify()` (Jiatao Tao)\n\nClose apache/calcite#2398\n","date":"2021-04-20 16:50:25","modifiedFileCount":"2","status":"M","submitter":"Jiatao Tao"},{"authorTime":"2021-09-17 17:38:52","codes":[{"authorDate":"2020-09-22 06:05:06","commitOrder":5,"curCode":"  @Test void testFilterIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                    b.literal(10)))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[SEARCH($7, Sarg[10, 20])])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","date":"2020-09-22 06:37:50","endLine":3238,"groupId":"101278","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/bd8af6f4d9dcb5984bfe74a180b3f230b8297b.src","preCode":"  @Test void testFilterIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                    b.literal(10)))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[SEARCH($7, Sarg[10, 20])])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3225,"status":"N"},{"authorDate":"2021-09-17 17:38:52","commitOrder":5,"curCode":"  @Test void testFilterOrIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.or(\n                    b.greaterThan(b.field(\"DEPTNO\"), b.literal(15)),\n                    b.in(b.field(\"JOB\"), b.literal(\"CLERK\")),\n                    b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                        b.literal(11), b.literal(10))))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[OR(SEARCH($7, Sarg[10, 11, (15..+���������)]), =($2, 'CLERK'))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    final String expectedWithoutSimplify = \"\"\n        + \"LogicalFilter(condition=[OR(>($7, 15), SEARCH($2, Sarg['CLERK']:CHAR(5)), SEARCH($7, \"\n        + \"Sarg[10, 11, 20]))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expectedWithoutSimplify));\n  }\n","date":"2021-09-18 03:08:56","endLine":3707,"groupId":"101278","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testFilterOrIn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c0/95dbb7ba6f6c8e91ad0cde63c3b1b7581e906d.src","preCode":"  @Test void testFilterOrIn() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .filter(\n                b.or(\n                    b.call(SqlStdOperatorTable.GREATER_THAN, b.field(\"DEPTNO\"),\n                        b.literal(15)),\n                    b.in(b.field(\"JOB\"), b.literal(\"CLERK\")),\n                    b.in(b.field(\"DEPTNO\"), b.literal(10), b.literal(20),\n                        b.literal(11), b.literal(10))))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[OR(SEARCH($7, Sarg[10, 11, (15..+���������)]), =($2, 'CLERK'))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    final String expectedWithoutSimplify = \"\"\n        + \"LogicalFilter(condition=[OR(>($7, 15), SEARCH($2, Sarg['CLERK']:CHAR(5)), SEARCH($7, \"\n        + \"Sarg[10, 11, 20]))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withSimplify(false))),\n        hasTree(expectedWithoutSimplify));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3687,"status":"M"}],"commitId":"4d82c5346292b32a1301214376366c2e8c5a892e","commitMessage":"@@@Add RelBuilder.lessThan.  and use RelBuilder shorthands\n","date":"2021-09-18 03:08:56","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"}]
