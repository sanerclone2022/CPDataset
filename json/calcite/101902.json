[{"authorTime":"2015-10-16 17:32:22","codes":[{"authorDate":"2015-10-16 17:32:22","commitOrder":1,"curCode":"  private boolean isEquivalentOp(SqlKind fKind, SqlKind sKind) {\n    switch (sKind) {\n    case GREATER_THAN:\n    case GREATER_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.GREATER_THAN)\n          && !(fKind == SqlKind.GREATER_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    case LESS_THAN:\n    case LESS_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.LESS_THAN)\n          && !(fKind == SqlKind.LESS_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n    }\n\n    return true;\n  }\n","date":"2015-10-22 05:34:15","endLine":344,"groupId":"14239","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"isEquivalentOp","params":"(SqlKindfKind@SqlKindsKind)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/e82a40ebe3f405cb7645500cb848073205b4a2.src","preCode":"  private boolean isEquivalentOp(SqlKind fKind, SqlKind sKind) {\n    switch (sKind) {\n    case GREATER_THAN:\n    case GREATER_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.GREATER_THAN)\n          && !(fKind == SqlKind.GREATER_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    case LESS_THAN:\n    case LESS_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.LESS_THAN)\n          && !(fKind == SqlKind.LESS_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"B"},{"authorDate":"2015-10-16 17:32:22","commitOrder":1,"curCode":"  private boolean isOppositeOp(SqlKind fKind, SqlKind sKind) {\n    switch (sKind) {\n    case GREATER_THAN:\n    case GREATER_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.LESS_THAN)\n          && !(fKind == SqlKind.LESS_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    case LESS_THAN:\n    case LESS_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.GREATER_THAN)\n          && !(fKind == SqlKind.GREATER_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n    }\n    return true;\n  }\n","date":"2015-10-22 05:34:15","endLine":366,"groupId":"14239","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"isOppositeOp","params":"(SqlKindfKind@SqlKindsKind)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/e82a40ebe3f405cb7645500cb848073205b4a2.src","preCode":"  private boolean isOppositeOp(SqlKind fKind, SqlKind sKind) {\n    switch (sKind) {\n    case GREATER_THAN:\n    case GREATER_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.LESS_THAN)\n          && !(fKind == SqlKind.LESS_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    case LESS_THAN:\n    case LESS_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.GREATER_THAN)\n          && !(fKind == SqlKind.GREATER_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"B"}],"commitId":"9db3b023d003b44b005cff5013ffe1ef4f00f221","commitMessage":"@@@[CALCITE-925] Match materialized views when predicates contain strings and ranges (Amogh Margoor)\n\nAdding support for solving predicates specifying ranges in optimizing using Materialized Views.\n\nAdding Logs to RexImplicationChecker\n\nAdding support for Handling String for Partitions\n\nClose apache/incubator-calcite#156\n","date":"2015-10-22 05:34:15","modifiedFileCount":"3","status":"B","submitter":"Amogh Margoor"},{"authorTime":"2015-10-16 17:32:22","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  private boolean isEquivalentOp(@Nullable SqlKind fKind, SqlKind sKind) {\n    switch (sKind) {\n    case GREATER_THAN:\n    case GREATER_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.GREATER_THAN)\n          && !(fKind == SqlKind.GREATER_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    case LESS_THAN:\n    case LESS_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.LESS_THAN)\n          && !(fKind == SqlKind.LESS_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n    }\n\n    return true;\n  }\n","date":"2020-11-30 06:45:33","endLine":406,"groupId":"14239","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"isEquivalentOp","params":"(@NullableSqlKindfKind@SqlKindsKind)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/890a69d32240e62283acc79f7e08328dc20b83.src","preCode":"  private boolean isEquivalentOp(SqlKind fKind, SqlKind sKind) {\n    switch (sKind) {\n    case GREATER_THAN:\n    case GREATER_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.GREATER_THAN)\n          && !(fKind == SqlKind.GREATER_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    case LESS_THAN:\n    case LESS_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.LESS_THAN)\n          && !(fKind == SqlKind.LESS_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":385,"status":"M"},{"authorDate":"2015-10-16 17:32:22","commitOrder":2,"curCode":"  private boolean isOppositeOp(SqlKind fKind, SqlKind sKind) {\n    switch (sKind) {\n    case GREATER_THAN:\n    case GREATER_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.LESS_THAN)\n          && !(fKind == SqlKind.LESS_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    case LESS_THAN:\n    case LESS_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.GREATER_THAN)\n          && !(fKind == SqlKind.GREATER_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n    }\n    return true;\n  }\n","date":"2015-10-22 05:34:15","endLine":366,"groupId":"14239","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"isOppositeOp","params":"(SqlKindfKind@SqlKindsKind)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/e82a40ebe3f405cb7645500cb848073205b4a2.src","preCode":"  private boolean isOppositeOp(SqlKind fKind, SqlKind sKind) {\n    switch (sKind) {\n    case GREATER_THAN:\n    case GREATER_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.LESS_THAN)\n          && !(fKind == SqlKind.LESS_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    case LESS_THAN:\n    case LESS_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.GREATER_THAN)\n          && !(fKind == SqlKind.GREATER_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"N"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-12-02 05:40:39","codes":[{"authorDate":"2020-12-02 05:40:39","commitOrder":3,"curCode":"  private static boolean isEquivalentOp(@Nullable SqlKind fKind, SqlKind sKind) {\n    switch (sKind) {\n    case GREATER_THAN:\n    case GREATER_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.GREATER_THAN)\n          && !(fKind == SqlKind.GREATER_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    case LESS_THAN:\n    case LESS_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.LESS_THAN)\n          && !(fKind == SqlKind.LESS_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n    }\n\n    return true;\n  }\n","date":"2020-12-08 15:07:23","endLine":406,"groupId":"101902","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"isEquivalentOp","params":"(@NullableSqlKindfKind@SqlKindsKind)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0f/4ef300dae3d66ddfe94baeb0adec8fdc83f9a5.src","preCode":"  private boolean isEquivalentOp(@Nullable SqlKind fKind, SqlKind sKind) {\n    switch (sKind) {\n    case GREATER_THAN:\n    case GREATER_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.GREATER_THAN)\n          && !(fKind == SqlKind.GREATER_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    case LESS_THAN:\n    case LESS_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.LESS_THAN)\n          && !(fKind == SqlKind.LESS_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":385,"status":"M"},{"authorDate":"2020-12-02 05:40:39","commitOrder":3,"curCode":"  private static boolean isOppositeOp(SqlKind fKind, SqlKind sKind) {\n    switch (sKind) {\n    case GREATER_THAN:\n    case GREATER_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.LESS_THAN)\n          && !(fKind == SqlKind.LESS_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    case LESS_THAN:\n    case LESS_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.GREATER_THAN)\n          && !(fKind == SqlKind.GREATER_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n    }\n    return true;\n  }\n","date":"2020-12-08 15:07:23","endLine":428,"groupId":"101902","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"isOppositeOp","params":"(SqlKindfKind@SqlKindsKind)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0f/4ef300dae3d66ddfe94baeb0adec8fdc83f9a5.src","preCode":"  private boolean isOppositeOp(SqlKind fKind, SqlKind sKind) {\n    switch (sKind) {\n    case GREATER_THAN:\n    case GREATER_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.LESS_THAN)\n          && !(fKind == SqlKind.LESS_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    case LESS_THAN:\n    case LESS_THAN_OR_EQUAL:\n      if (!(fKind == SqlKind.GREATER_THAN)\n          && !(fKind == SqlKind.GREATER_THAN_OR_EQUAL)) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"}],"commitId":"404f968f6079360621896e6ee20ec12488a40bc2","commitMessage":"@@@[CALCITE-4422] Add MethodCanBeStatic check via ErrorProne\n\nprivate and final methods can be made static.  so it is clear they do not access instance fields\n","date":"2020-12-08 15:07:23","modifiedFileCount":"169","status":"M","submitter":"Vladimir Sitnikov"}]
