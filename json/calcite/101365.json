[{"authorTime":"2019-06-04 00:03:03","codes":[{"authorDate":"2019-06-04 00:03:03","commitOrder":1,"curCode":"  @Test public void innerBatchJoinTestSQL() {\n    tester(false, new JdbcTest.HrSchemaBig())\n        .query(\n            \"select count(e.name) from emps e join depts d on d.deptno = e.deptno\")\n        .withHook(Hook.PLANNER, (Consumer<RelOptPlanner>) planner -> {\n          planner.removeRule(EnumerableRules.ENUMERABLE_CORRELATE_RULE);\n          planner.addRule(EnumerableRules.ENUMERABLE_BATCH_NESTED_LOOP_JOIN_RULE);\n        })\n        .returnsUnordered(\"EXPR$0=46\");\n  }\n","date":"2019-08-23 15:15:57","endLine":100,"groupId":"13405","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"innerBatchJoinTestSQL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c7/057d201d44a3d19169c87d3abd32c058a2710b.src","preCode":"  @Test public void innerBatchJoinTestSQL() {\n    tester(false, new JdbcTest.HrSchemaBig())\n        .query(\n            \"select count(e.name) from emps e join depts d on d.deptno = e.deptno\")\n        .withHook(Hook.PLANNER, (Consumer<RelOptPlanner>) planner -> {\n          planner.removeRule(EnumerableRules.ENUMERABLE_CORRELATE_RULE);\n          planner.addRule(EnumerableRules.ENUMERABLE_BATCH_NESTED_LOOP_JOIN_RULE);\n        })\n        .returnsUnordered(\"EXPR$0=46\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/enumerable/EnumerableBatchNestedLoopJoinTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2019-06-04 00:03:03","commitOrder":1,"curCode":"  @Test public void innerBatchJoinAndTestSQL() {\n    tester(false, new JdbcTest.HrSchemaBig())\n        .query(\n            \"select count(e.name) from emps e join depts d on d.deptno = e.empid and d.deptno = e.deptno\")\n        .withHook(Hook.PLANNER, (Consumer<RelOptPlanner>) planner -> {\n          planner.removeRule(EnumerableRules.ENUMERABLE_CORRELATE_RULE);\n          planner.addRule(EnumerableRules.ENUMERABLE_BATCH_NESTED_LOOP_JOIN_RULE);\n        })\n        .returnsUnordered(\"EXPR$0=1\");\n  }\n","date":"2019-08-23 15:15:57","endLine":218,"groupId":"13405","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"innerBatchJoinAndTestSQL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c7/057d201d44a3d19169c87d3abd32c058a2710b.src","preCode":"  @Test public void innerBatchJoinAndTestSQL() {\n    tester(false, new JdbcTest.HrSchemaBig())\n        .query(\n            \"select count(e.name) from emps e join depts d on d.deptno = e.empid and d.deptno = e.deptno\")\n        .withHook(Hook.PLANNER, (Consumer<RelOptPlanner>) planner -> {\n          planner.removeRule(EnumerableRules.ENUMERABLE_CORRELATE_RULE);\n          planner.addRule(EnumerableRules.ENUMERABLE_BATCH_NESTED_LOOP_JOIN_RULE);\n        })\n        .returnsUnordered(\"EXPR$0=1\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/enumerable/EnumerableBatchNestedLoopJoinTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"B"}],"commitId":"a8f9e4ee02c4253e1cbc150cbe3af8791a7beda8","commitMessage":"@@@[CALCITE-2979] Add a block-based nested loop join algorithm (Khawla Mouhoubi)\n","date":"2019-08-23 15:15:57","modifiedFileCount":"6","status":"B","submitter":"Khawlamhb"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void innerBatchJoinTestSQL() {\n    tester(false, new JdbcTest.HrSchemaBig())\n        .query(\n            \"select count(e.name) from emps e join depts d on d.deptno = e.deptno\")\n        .withHook(Hook.PLANNER, (Consumer<RelOptPlanner>) planner -> {\n          planner.removeRule(EnumerableRules.ENUMERABLE_CORRELATE_RULE);\n          planner.addRule(EnumerableRules.ENUMERABLE_BATCH_NESTED_LOOP_JOIN_RULE);\n        })\n        .returnsUnordered(\"EXPR$0=46\");\n  }\n","date":"2020-04-06 04:57:49","endLine":100,"groupId":"101365","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"innerBatchJoinTestSQL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/0a43e422d298078d834a87b7ec779ff2e89078.src","preCode":"  @Test public void innerBatchJoinTestSQL() {\n    tester(false, new JdbcTest.HrSchemaBig())\n        .query(\n            \"select count(e.name) from emps e join depts d on d.deptno = e.deptno\")\n        .withHook(Hook.PLANNER, (Consumer<RelOptPlanner>) planner -> {\n          planner.removeRule(EnumerableRules.ENUMERABLE_CORRELATE_RULE);\n          planner.addRule(EnumerableRules.ENUMERABLE_BATCH_NESTED_LOOP_JOIN_RULE);\n        })\n        .returnsUnordered(\"EXPR$0=46\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/enumerable/EnumerableBatchNestedLoopJoinTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void innerBatchJoinAndTestSQL() {\n    tester(false, new JdbcTest.HrSchemaBig())\n        .query(\n            \"select count(e.name) from emps e join depts d on d.deptno = e.empid and d.deptno = e.deptno\")\n        .withHook(Hook.PLANNER, (Consumer<RelOptPlanner>) planner -> {\n          planner.removeRule(EnumerableRules.ENUMERABLE_CORRELATE_RULE);\n          planner.addRule(EnumerableRules.ENUMERABLE_BATCH_NESTED_LOOP_JOIN_RULE);\n        })\n        .returnsUnordered(\"EXPR$0=1\");\n  }\n","date":"2020-04-06 04:57:49","endLine":218,"groupId":"101365","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"innerBatchJoinAndTestSQL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/0a43e422d298078d834a87b7ec779ff2e89078.src","preCode":"  @Test public void innerBatchJoinAndTestSQL() {\n    tester(false, new JdbcTest.HrSchemaBig())\n        .query(\n            \"select count(e.name) from emps e join depts d on d.deptno = e.empid and d.deptno = e.deptno\")\n        .withHook(Hook.PLANNER, (Consumer<RelOptPlanner>) planner -> {\n          planner.removeRule(EnumerableRules.ENUMERABLE_CORRELATE_RULE);\n          planner.addRule(EnumerableRules.ENUMERABLE_BATCH_NESTED_LOOP_JOIN_RULE);\n        })\n        .returnsUnordered(\"EXPR$0=1\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/enumerable/EnumerableBatchNestedLoopJoinTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
