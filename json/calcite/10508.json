[{"authorTime":"2016-04-18 14:51:14","codes":[{"authorDate":"2016-04-18 14:51:14","commitOrder":2,"curCode":"  @Test public void testFileReaderDataBadFile() throws FileReaderException {\n    final Source source =\n        Sources.file(null, file(\"target/test-classes/tableNoTheadTbody.html\"));\n    FileReader t = new FileReader(source);\n    Iterator<Elements> i = t.iterator();\n    Elements row = i.next();\n    assertTrue(row.get(2).text().equals(\"R0C2\"));\n    row = i.next();\n    assertTrue(row.get(0).text().equals(\"R1C0\"));\n  }\n","date":"2017-02-23 13:09:48","endLine":159,"groupId":"16856","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFileReaderDataBadFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d1/8c1a9c5c47ea9717bd10956ba7107ded9bc5b1.src","preCode":"  @Test public void testFileReaderDataBadFile() throws FileReaderException {\n    final Source source =\n        Sources.file(null, file(\"target/test-classes/tableNoTheadTbody.html\"));\n    FileReader t = new FileReader(source);\n    Iterator<Elements> i = t.iterator();\n    Elements row = i.next();\n    assertTrue(row.get(2).text().equals(\"R0C2\"));\n    row = i.next();\n    assertTrue(row.get(0).text().equals(\"R1C0\"));\n  }\n","realPath":"file/src/test/java/org/apache/calcite/adapter/file/FileReaderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"MB"},{"authorDate":"2016-04-18 14:51:14","commitOrder":2,"curCode":"  @Test public void testFileReaderDataNoTh() throws FileReaderException {\n    final Source source =\n        Sources.file(null, file(\"target/test-classes/tableNoTH.html\"));\n    FileReader t = new FileReader(source);\n    Iterator<Elements> i = t.iterator();\n    Elements row = i.next();\n    assertTrue(row.get(2).text().equals(\"R0C2\"));\n  }\n","date":"2017-02-23 13:09:48","endLine":169,"groupId":"16856","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFileReaderDataNoTh","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d1/8c1a9c5c47ea9717bd10956ba7107ded9bc5b1.src","preCode":"  @Test public void testFileReaderDataNoTh() throws FileReaderException {\n    final Source source =\n        Sources.file(null, file(\"target/test-classes/tableNoTH.html\"));\n    FileReader t = new FileReader(source);\n    Iterator<Elements> i = t.iterator();\n    Elements row = i.next();\n    assertTrue(row.get(2).text().equals(\"R0C2\"));\n  }\n","realPath":"file/src/test/java/org/apache/calcite/adapter/file/FileReaderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"MB"}],"commitId":"24c25fc30315f308df13eb303177163e5a972949","commitMessage":"@@@Following [CALCITE-884] Add CSV.  JSON functionality to file adapter\n\nAdd interface Source.  as a common facade over File and URL;\nchange example CSV adapter to use Source rather than File.\n\nRelative paths in CSV and File adapter are now relative to the model. \nrather than relative to the current directory. This makes it easier to\nuse the same model.json file from tests and from sqlline.\n\nCreate table \"States_as_of\".  a snapshot the \"States\" wikipedia table\nat a particular date.  to ensure test stability.\n","date":"2017-02-23 13:09:48","modifiedFileCount":"21","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-11-14 22:54:29","codes":[{"authorDate":"2019-11-14 22:54:29","commitOrder":3,"curCode":"  @Test public void testFileReaderDataBadFile() throws FileReaderException {\n    final Source source = resource(\"tableNoTheadTbody.html\");\n    FileReader t = new FileReader(source);\n    Iterator<Elements> i = t.iterator();\n    Elements row = i.next();\n    assertTrue(row.get(2).text().equals(\"R0C2\"));\n    row = i.next();\n    assertTrue(row.get(0).text().equals(\"R1C0\"));\n  }\n","date":"2019-11-14 23:19:30","endLine":171,"groupId":"16856","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFileReaderDataBadFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/57/c754f5c0aa6f4d9cba73a32784342370ec4793.src","preCode":"  @Test public void testFileReaderDataBadFile() throws FileReaderException {\n    final Source source =\n        Sources.file(null, file(\"target/test-classes/tableNoTheadTbody.html\"));\n    FileReader t = new FileReader(source);\n    Iterator<Elements> i = t.iterator();\n    Elements row = i.next();\n    assertTrue(row.get(2).text().equals(\"R0C2\"));\n    row = i.next();\n    assertTrue(row.get(0).text().equals(\"R1C0\"));\n  }\n","realPath":"file/src/test/java/org/apache/calcite/adapter/file/FileReaderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2019-11-14 22:54:29","commitOrder":3,"curCode":"  @Test public void testFileReaderDataNoTh() throws FileReaderException {\n    final Source source = resource(\"tableNoTH.html\");\n    FileReader t = new FileReader(source);\n    Iterator<Elements> i = t.iterator();\n    Elements row = i.next();\n    assertTrue(row.get(2).text().equals(\"R0C2\"));\n  }\n","date":"2019-11-14 23:19:30","endLine":180,"groupId":"16856","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFileReaderDataNoTh","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/57/c754f5c0aa6f4d9cba73a32784342370ec4793.src","preCode":"  @Test public void testFileReaderDataNoTh() throws FileReaderException {\n    final Source source =\n        Sources.file(null, file(\"target/test-classes/tableNoTH.html\"));\n    FileReader t = new FileReader(source);\n    Iterator<Elements> i = t.iterator();\n    Elements row = i.next();\n    assertTrue(row.get(2).text().equals(\"R0C2\"));\n  }\n","realPath":"file/src/test/java/org/apache/calcite/adapter/file/FileReaderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"}],"commitId":"e6b2df13aa195b63798994019378aa19e8c6e096","commitMessage":"@@@Use Class#getResource in FileReaderTest instead of hard-coding file name\n","date":"2019-11-14 23:19:30","modifiedFileCount":"2","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testFileReaderDataBadFile() throws FileReaderException {\n    final Source source = resource(\"tableNoTheadTbody.html\");\n    FileReader t = new FileReader(source);\n    Iterator<Elements> i = t.iterator();\n    Elements row = i.next();\n    assertTrue(row.get(2).text().equals(\"R0C2\"));\n    row = i.next();\n    assertTrue(row.get(0).text().equals(\"R1C0\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":177,"groupId":"10508","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFileReaderDataBadFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/da/de44beb64420fa3300d71f47257fb269da381c.src","preCode":"  @Test public void testFileReaderDataBadFile() throws FileReaderException {\n    final Source source = resource(\"tableNoTheadTbody.html\");\n    FileReader t = new FileReader(source);\n    Iterator<Elements> i = t.iterator();\n    Elements row = i.next();\n    assertTrue(row.get(2).text().equals(\"R0C2\"));\n    row = i.next();\n    assertTrue(row.get(0).text().equals(\"R1C0\"));\n  }\n","realPath":"file/src/test/java/org/apache/calcite/adapter/file/FileReaderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testFileReaderDataNoTh() throws FileReaderException {\n    final Source source = resource(\"tableNoTH.html\");\n    FileReader t = new FileReader(source);\n    Iterator<Elements> i = t.iterator();\n    Elements row = i.next();\n    assertTrue(row.get(2).text().equals(\"R0C2\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":186,"groupId":"10508","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFileReaderDataNoTh","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/da/de44beb64420fa3300d71f47257fb269da381c.src","preCode":"  @Test public void testFileReaderDataNoTh() throws FileReaderException {\n    final Source source = resource(\"tableNoTH.html\");\n    FileReader t = new FileReader(source);\n    Iterator<Elements> i = t.iterator();\n    Elements row = i.next();\n    assertTrue(row.get(2).text().equals(\"R0C2\"));\n  }\n","realPath":"file/src/test/java/org/apache/calcite/adapter/file/FileReaderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
