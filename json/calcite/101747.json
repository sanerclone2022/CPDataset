[{"authorTime":"2020-05-31 03:22:42","codes":[{"authorDate":"2020-05-31 03:22:42","commitOrder":1,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    if (getReplace()) {\n      writer.keyword(\"CREATE OR REPLACE\");\n    } else {\n      writer.keyword(\"CREATE\");\n    }\n    writer.keyword(\"SCHEMA\");\n    if (ifNotExists) {\n      writer.keyword(\"IF NOT EXISTS\");\n    }\n    name.unparse(writer, leftPrec, rightPrec);\n  }\n","date":"2020-06-01 13:54:50","endLine":74,"groupId":"13307","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/7599807254f70b1e249f07ef593108ea98e24c.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    if (getReplace()) {\n      writer.keyword(\"CREATE OR REPLACE\");\n    } else {\n      writer.keyword(\"CREATE\");\n    }\n    writer.keyword(\"SCHEMA\");\n    if (ifNotExists) {\n      writer.keyword(\"IF NOT EXISTS\");\n    }\n    name.unparse(writer, leftPrec, rightPrec);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/ddl/SqlCreateSchema.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2020-05-31 03:22:42","commitOrder":1,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    if (getReplace()) {\n      writer.keyword(\"CREATE OR REPLACE\");\n    } else {\n      writer.keyword(\"CREATE\");\n    }\n    writer.keyword(\"FOREIGN SCHEMA\");\n    if (ifNotExists) {\n      writer.keyword(\"IF NOT EXISTS\");\n    }\n    name.unparse(writer, leftPrec, rightPrec);\n    if (library != null) {\n      writer.keyword(\"LIBRARY\");\n      library.unparse(writer, 0, 0);\n    }\n    if (type != null) {\n      writer.keyword(\"TYPE\");\n      type.unparse(writer, 0, 0);\n    }\n    if (optionList != null) {\n      writer.keyword(\"OPTIONS\");\n      SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n      int i = 0;\n      for (Pair<SqlIdentifier, SqlNode> c : options(optionList)) {\n        if (i++ > 0) {\n          writer.sep(\",\");\n        }\n        c.left.unparse(writer, 0, 0);\n        c.right.unparse(writer, 0, 0);\n      }\n      writer.endList(frame);\n    }\n  }\n","date":"2020-06-01 13:54:50","endLine":119,"groupId":"13307","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6f/4dd1ccf6f846ee165c289294ae4c2552d7fc80.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    if (getReplace()) {\n      writer.keyword(\"CREATE OR REPLACE\");\n    } else {\n      writer.keyword(\"CREATE\");\n    }\n    writer.keyword(\"FOREIGN SCHEMA\");\n    if (ifNotExists) {\n      writer.keyword(\"IF NOT EXISTS\");\n    }\n    name.unparse(writer, leftPrec, rightPrec);\n    if (library != null) {\n      writer.keyword(\"LIBRARY\");\n      library.unparse(writer, 0, 0);\n    }\n    if (type != null) {\n      writer.keyword(\"TYPE\");\n      type.unparse(writer, 0, 0);\n    }\n    if (optionList != null) {\n      writer.keyword(\"OPTIONS\");\n      SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n      int i = 0;\n      for (Pair<SqlIdentifier, SqlNode> c : options(optionList)) {\n        if (i++ > 0) {\n          writer.sep(\",\");\n        }\n        c.left.unparse(writer, 0, 0);\n        c.right.unparse(writer, 0, 0);\n      }\n      writer.endList(frame);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/ddl/SqlCreateForeignSchema.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"}],"commitId":"0275a1f5df47303c46338134d936f5d376bcf44a","commitMessage":"@@@In preparation for [CALCITE-3946].  move org.apache.calcite.sql.ddl package from server to core\n\nAdding DDL classes to core is not ideal. Core's SQL parser\ndoes not support DDL.  and so these classes will not be tested\nin core. Dialects' DDL features vary more widely than their\nquery features.  and we should keep those complexities out of\ncore and in babel.\n\nOther options were to make babel depend on server.  or to\ncopy-paste some code from server to babel.\n","date":"2020-06-01 13:54:50","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-05-31 06:22:44","codes":[{"authorDate":"2020-05-31 03:22:42","commitOrder":2,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    if (getReplace()) {\n      writer.keyword(\"CREATE OR REPLACE\");\n    } else {\n      writer.keyword(\"CREATE\");\n    }\n    writer.keyword(\"SCHEMA\");\n    if (ifNotExists) {\n      writer.keyword(\"IF NOT EXISTS\");\n    }\n    name.unparse(writer, leftPrec, rightPrec);\n  }\n","date":"2020-06-01 13:54:50","endLine":74,"groupId":"101747","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/7599807254f70b1e249f07ef593108ea98e24c.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    if (getReplace()) {\n      writer.keyword(\"CREATE OR REPLACE\");\n    } else {\n      writer.keyword(\"CREATE\");\n    }\n    writer.keyword(\"SCHEMA\");\n    if (ifNotExists) {\n      writer.keyword(\"IF NOT EXISTS\");\n    }\n    name.unparse(writer, leftPrec, rightPrec);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/ddl/SqlCreateSchema.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-05-31 06:22:44","commitOrder":2,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    if (getReplace()) {\n      writer.keyword(\"CREATE OR REPLACE\");\n    } else {\n      writer.keyword(\"CREATE\");\n    }\n    writer.keyword(\"FOREIGN SCHEMA\");\n    if (ifNotExists) {\n      writer.keyword(\"IF NOT EXISTS\");\n    }\n    name.unparse(writer, leftPrec, rightPrec);\n    if (library != null) {\n      writer.keyword(\"LIBRARY\");\n      library.unparse(writer, 0, 0);\n    }\n    if (type != null) {\n      writer.keyword(\"TYPE\");\n      type.unparse(writer, 0, 0);\n    }\n    if (optionList != null) {\n      writer.keyword(\"OPTIONS\");\n      SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n      int i = 0;\n      for (Pair<SqlIdentifier, SqlNode> c : options()) {\n        if (i++ > 0) {\n          writer.sep(\",\");\n        }\n        c.left.unparse(writer, 0, 0);\n        c.right.unparse(writer, 0, 0);\n      }\n      writer.endList(frame);\n    }\n  }\n","date":"2020-06-01 15:36:01","endLine":99,"groupId":"101747","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9c/6b667990b89b91879a7ecff8bac5b996caaca5.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    if (getReplace()) {\n      writer.keyword(\"CREATE OR REPLACE\");\n    } else {\n      writer.keyword(\"CREATE\");\n    }\n    writer.keyword(\"FOREIGN SCHEMA\");\n    if (ifNotExists) {\n      writer.keyword(\"IF NOT EXISTS\");\n    }\n    name.unparse(writer, leftPrec, rightPrec);\n    if (library != null) {\n      writer.keyword(\"LIBRARY\");\n      library.unparse(writer, 0, 0);\n    }\n    if (type != null) {\n      writer.keyword(\"TYPE\");\n      type.unparse(writer, 0, 0);\n    }\n    if (optionList != null) {\n      writer.keyword(\"OPTIONS\");\n      SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n      int i = 0;\n      for (Pair<SqlIdentifier, SqlNode> c : options(optionList)) {\n        if (i++ > 0) {\n          writer.sep(\",\");\n        }\n        c.left.unparse(writer, 0, 0);\n        c.right.unparse(writer, 0, 0);\n      }\n      writer.endList(frame);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/ddl/SqlCreateForeignSchema.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"c0f102d2013a8f4d2903ec259449f5bd668eec30","commitMessage":"@@@Refactor DDL execution code out of SqlNode sub-classes and into DdlExecutor\n\nIn the previous commit we moved DDL classes from server to\ncore.  but in this commit we move the execution logic back to\nserver.\n\nDdlExecutor is acquired via the parser factory. Not ideal.  but keeps\neverything working and can be improved later.\n\nRemove duplicate package-info files.  and suppress a checkstyle\ncomplaint that the org.apache.calcite.server package in the\nserver module should have a package-info. (It already has one\nin the core module.)\n","date":"2020-06-01 15:36:01","modifiedFileCount":"23","status":"M","submitter":"Julian Hyde"}]
