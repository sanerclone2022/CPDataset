[{"authorTime":"2016-12-22 09:49:23","codes":[{"authorDate":"2015-07-01 02:48:43","commitOrder":2,"curCode":"  @Test public void testAlias2() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .filter(\n                builder.equals(builder.field(\"e\", \"DEPTNO\"),\n                    builder.field(\"DEPT\", \"DEPTNO\")),\n                builder.equals(builder.field(\"m\", \"EMPNO\"),\n                    builder.field(\"e\", \"MGR\")))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[AND(=($7, $16), =($8, $3))])\\n\"\n        + \"  LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"    LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"      LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(str(root), is(expected));\n  }\n","date":"2015-09-02 07:17:14","endLine":505,"groupId":"13395","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAlias2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ca/fd61e2ebb5bb88094139cc4cbb9142e19da250.src","preCode":"  @Test public void testAlias2() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .filter(\n                builder.equals(builder.field(\"e\", \"DEPTNO\"),\n                    builder.field(\"DEPT\", \"DEPTNO\")),\n                builder.equals(builder.field(\"m\", \"EMPNO\"),\n                    builder.field(\"e\", \"MGR\")))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[AND(=($7, $16), =($8, $3))])\\n\"\n        + \"  LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"    LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"      LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(str(root), is(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":476,"status":"NB"},{"authorDate":"2016-12-22 09:49:23","commitOrder":2,"curCode":"  @Test public void testMultiLevelAlias() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(16),\n                builder.field(\"m\", \"EMPNO\"),\n                builder.field(\"e\", \"MGR\"))\n            .as(\"all\")\n            .filter(\n                builder.call(SqlStdOperatorTable.GREATER_THAN,\n                    builder.field(\"DEPT\", \"DEPTNO\"),\n                    builder.literal(100)))\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(\"all\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$0], EMPNO=[$2])\\n\"\n        + \"  LogicalFilter(condition=[>($0, 100)])\\n\"\n        + \"    LogicalProject(DEPTNO=[$16], DEPTNO0=[$16], EMPNO=[$8], MGR=[$3])\\n\"\n        + \"      LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"        LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"        LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"          LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"          LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(str(root), is(expected));\n  }\n","date":"2016-12-30 06:33:33","endLine":1193,"groupId":"2143","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiLevelAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/3dad43c02787c3019dafd2ab6d1a5b5db8d7b6.src","preCode":"  @Test public void testMultiLevelAlias() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(16),\n                builder.field(\"m\", \"EMPNO\"),\n                builder.field(\"e\", \"MGR\"))\n            .as(\"all\")\n            .filter(\n                builder.call(SqlStdOperatorTable.GREATER_THAN,\n                    builder.field(\"DEPT\", \"DEPTNO\"),\n                    builder.literal(100)))\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(\"all\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$0], EMPNO=[$2])\\n\"\n        + \"  LogicalFilter(condition=[>($0, 100)])\\n\"\n        + \"    LogicalProject(DEPTNO=[$16], DEPTNO0=[$16], EMPNO=[$8], MGR=[$3])\\n\"\n        + \"      LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"        LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"        LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"          LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"          LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(str(root), is(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1161,"status":"B"}],"commitId":"31d68f71b01f016625a1def800c283820c600840","commitMessage":"@@@[CALCITE-1551] Preserve alias in RelBuilder.project (Jess Balint)\n\nThis is accomplished by changing the structure of the Frame in\nRelBuilder to include alias and field information for all fields in the\nRelNode irrespective of their origin. Rel aliases also preserved on\ngroup keys through aggregate operations.\n\nIn PigRelBuilder.  we retain aggregate aliases.  because Pig Latin\nrelies upon them.\n\nClose apache/calcite#340\n","date":"2016-12-30 06:33:33","modifiedFileCount":"5","status":"M","submitter":"Jess Balint"},{"authorTime":"2018-03-01 10:10:35","codes":[{"authorDate":"2018-03-01 10:10:35","commitOrder":3,"curCode":"  @Test public void testAlias2() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .filter(\n                builder.equals(builder.field(\"e\", \"DEPTNO\"),\n                    builder.field(\"DEPT\", \"DEPTNO\")),\n                builder.equals(builder.field(\"m\", \"EMPNO\"),\n                    builder.field(\"e\", \"MGR\")))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[AND(=($7, $16), =($8, $3))])\\n\"\n        + \"  LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"    LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"      LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2018-03-12 15:16:13","endLine":1342,"groupId":"13395","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAlias2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/9019101c478fdb0d8c9c1f7978cbf45c487a35.src","preCode":"  @Test public void testAlias2() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .filter(\n                builder.equals(builder.field(\"e\", \"DEPTNO\"),\n                    builder.field(\"DEPT\", \"DEPTNO\")),\n                builder.equals(builder.field(\"m\", \"EMPNO\"),\n                    builder.field(\"e\", \"MGR\")))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[AND(=($7, $16), =($8, $3))])\\n\"\n        + \"  LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"    LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"      LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(str(root), is(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1313,"status":"M"},{"authorDate":"2018-03-01 10:10:35","commitOrder":3,"curCode":"  @Test public void testMultiLevelAlias() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(16),\n                builder.field(\"m\", \"EMPNO\"),\n                builder.field(\"e\", \"MGR\"))\n            .as(\"all\")\n            .filter(\n                builder.call(SqlStdOperatorTable.GREATER_THAN,\n                    builder.field(\"DEPT\", \"DEPTNO\"),\n                    builder.literal(100)))\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(\"all\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$0], EMPNO=[$2])\\n\"\n        + \"  LogicalFilter(condition=[>($0, 100)])\\n\"\n        + \"    LogicalProject(DEPTNO=[$16], DEPTNO0=[$16], EMPNO=[$8], MGR=[$3])\\n\"\n        + \"      LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"        LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"        LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"          LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"          LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2018-03-12 15:16:13","endLine":1472,"groupId":"2143","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiLevelAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/9019101c478fdb0d8c9c1f7978cbf45c487a35.src","preCode":"  @Test public void testMultiLevelAlias() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(16),\n                builder.field(\"m\", \"EMPNO\"),\n                builder.field(\"e\", \"MGR\"))\n            .as(\"all\")\n            .filter(\n                builder.call(SqlStdOperatorTable.GREATER_THAN,\n                    builder.field(\"DEPT\", \"DEPTNO\"),\n                    builder.literal(100)))\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(\"all\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$0], EMPNO=[$2])\\n\"\n        + \"  LogicalFilter(condition=[>($0, 100)])\\n\"\n        + \"    LogicalProject(DEPTNO=[$16], DEPTNO0=[$16], EMPNO=[$8], MGR=[$3])\\n\"\n        + \"      LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"        LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"        LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"          LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"          LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(str(root), is(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1440,"status":"M"}],"commitId":"fb8ebd31526cd2e203fa3526ca8de7a22ee0d139","commitMessage":"@@@[CALCITE-2197] Fix test failures on Windows due to line endings\n\nAdd several new matchers in Matchers: isLinux.  containsStringLinux. \nhasTree.  compose. Change tests that generate platform-specific strings\nto use them.\n","date":"2018-03-12 15:16:13","modifiedFileCount":"13","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testAlias2() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .filter(\n                builder.equals(builder.field(\"e\", \"DEPTNO\"),\n                    builder.field(\"DEPT\", \"DEPTNO\")),\n                builder.equals(builder.field(\"m\", \"EMPNO\"),\n                    builder.field(\"e\", \"MGR\")))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[AND(=($7, $16), =($8, $3))])\\n\"\n        + \"  LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"    LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"      LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":2094,"groupId":"13395","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAlias2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testAlias2() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .filter(\n                builder.equals(builder.field(\"e\", \"DEPTNO\"),\n                    builder.field(\"DEPT\", \"DEPTNO\")),\n                builder.equals(builder.field(\"m\", \"EMPNO\"),\n                    builder.field(\"e\", \"MGR\")))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[AND(=($7, $16), =($8, $3))])\\n\"\n        + \"  LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"    LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"      LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2065,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testMultiLevelAlias() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(16),\n                builder.field(\"m\", \"EMPNO\"),\n                builder.field(\"e\", \"MGR\"))\n            .as(\"all\")\n            .filter(\n                builder.call(SqlStdOperatorTable.GREATER_THAN,\n                    builder.field(\"DEPT\", \"DEPTNO\"),\n                    builder.literal(100)))\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(\"all\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$0], EMPNO=[$2])\\n\"\n        + \"  LogicalFilter(condition=[>($0, 100)])\\n\"\n        + \"    LogicalProject(DEPTNO=[$16], DEPTNO0=[$16], EMPNO=[$8], MGR=[$3])\\n\"\n        + \"      LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"        LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"        LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"          LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"          LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":2450,"groupId":"2143","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiLevelAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testMultiLevelAlias() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(16),\n                builder.field(\"m\", \"EMPNO\"),\n                builder.field(\"e\", \"MGR\"))\n            .as(\"all\")\n            .filter(\n                builder.call(SqlStdOperatorTable.GREATER_THAN,\n                    builder.field(\"DEPT\", \"DEPTNO\"),\n                    builder.literal(100)))\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(\"all\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$0], EMPNO=[$2])\\n\"\n        + \"  LogicalFilter(condition=[>($0, 100)])\\n\"\n        + \"    LogicalProject(DEPTNO=[$16], DEPTNO0=[$16], EMPNO=[$8], MGR=[$3])\\n\"\n        + \"      LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"        LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"        LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"          LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"          LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2418,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-06-09 21:16:22","commitOrder":5,"curCode":"  @Test void testAlias2() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .filter(\n                builder.equals(builder.field(\"e\", \"DEPTNO\"),\n                    builder.field(\"DEPT\", \"DEPTNO\")),\n                builder.equals(builder.field(\"m\", \"EMPNO\"),\n                    builder.field(\"e\", \"MGR\")))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[AND(=($7, $16), =($3, $8))])\\n\"\n        + \"  LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"    LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"      LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-06-16 11:11:13","endLine":2161,"groupId":"13395","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAlias2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d0/0228f54d4009d5ddb41f1534247b786d47dcfa.src","preCode":"  @Test void testAlias2() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .filter(\n                builder.equals(builder.field(\"e\", \"DEPTNO\"),\n                    builder.field(\"DEPT\", \"DEPTNO\")),\n                builder.equals(builder.field(\"m\", \"EMPNO\"),\n                    builder.field(\"e\", \"MGR\")))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[AND(=($7, $16), =($8, $3))])\\n\"\n        + \"  LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"    LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"      LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2132,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testMultiLevelAlias() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(16),\n                builder.field(\"m\", \"EMPNO\"),\n                builder.field(\"e\", \"MGR\"))\n            .as(\"all\")\n            .filter(\n                builder.call(SqlStdOperatorTable.GREATER_THAN,\n                    builder.field(\"DEPT\", \"DEPTNO\"),\n                    builder.literal(100)))\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(\"all\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$0], EMPNO=[$2])\\n\"\n        + \"  LogicalFilter(condition=[>($0, 100)])\\n\"\n        + \"    LogicalProject(DEPTNO=[$16], DEPTNO0=[$16], EMPNO=[$8], MGR=[$3])\\n\"\n        + \"      LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"        LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"        LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"          LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"          LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":2450,"groupId":"2143","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiLevelAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test void testMultiLevelAlias() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(16),\n                builder.field(\"m\", \"EMPNO\"),\n                builder.field(\"e\", \"MGR\"))\n            .as(\"all\")\n            .filter(\n                builder.call(SqlStdOperatorTable.GREATER_THAN,\n                    builder.field(\"DEPT\", \"DEPTNO\"),\n                    builder.literal(100)))\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(\"all\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$0], EMPNO=[$2])\\n\"\n        + \"  LogicalFilter(condition=[>($0, 100)])\\n\"\n        + \"    LogicalProject(DEPTNO=[$16], DEPTNO0=[$16], EMPNO=[$8], MGR=[$3])\\n\"\n        + \"      LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"        LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"        LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"          LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"          LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2418,"status":"N"}],"commitId":"69f25863f5f4197c17927a39a82cbf1cffd12b80","commitMessage":"@@@[CALCITE-3786] Add Digest interface to enable efficient hashCode(equals) for RexNode and RelNode\n\n* Add class Digest used to identify the node;\n* There is a pre-computed hashcode to speedup #hashCode and #equals;\n* Change RexCall to use object#equals instead of pure string digest\ncomparison;\n* We only support RexInputRef normalization which is the most common\ncase;\n* Remove RexNode#toStringRaw because it makes the thing complicated. \nRexNode can always be normalized(default true).\n","date":"2020-06-16 11:11:13","modifiedFileCount":"51","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-07-14 15:38:58","commitOrder":6,"curCode":"  @Test void testAlias2() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .filter(\n                builder.equals(builder.field(\"e\", \"DEPTNO\"),\n                    builder.field(\"DEPT\", \"DEPTNO\")),\n                builder.equals(builder.field(\"m\", \"EMPNO\"),\n                    builder.field(\"e\", \"MGR\")))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[AND(=($7, $16), =($8, $3))])\\n\"\n        + \"  LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"    LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"      LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-07-17 09:37:23","endLine":2161,"groupId":"13395","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testAlias2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dd/1463dd5c43d5cf527557d5e8224ed1d57b1475.src","preCode":"  @Test void testAlias2() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .filter(\n                builder.equals(builder.field(\"e\", \"DEPTNO\"),\n                    builder.field(\"DEPT\", \"DEPTNO\")),\n                builder.equals(builder.field(\"m\", \"EMPNO\"),\n                    builder.field(\"e\", \"MGR\")))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[AND(=($7, $16), =($3, $8))])\\n\"\n        + \"  LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"    LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"      LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2132,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testMultiLevelAlias() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(16),\n                builder.field(\"m\", \"EMPNO\"),\n                builder.field(\"e\", \"MGR\"))\n            .as(\"all\")\n            .filter(\n                builder.call(SqlStdOperatorTable.GREATER_THAN,\n                    builder.field(\"DEPT\", \"DEPTNO\"),\n                    builder.literal(100)))\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(\"all\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$0], EMPNO=[$2])\\n\"\n        + \"  LogicalFilter(condition=[>($0, 100)])\\n\"\n        + \"    LogicalProject(DEPTNO=[$16], DEPTNO0=[$16], EMPNO=[$8], MGR=[$3])\\n\"\n        + \"      LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"        LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"        LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"          LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"          LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":2450,"groupId":"2143","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiLevelAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test void testMultiLevelAlias() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(16),\n                builder.field(\"m\", \"EMPNO\"),\n                builder.field(\"e\", \"MGR\"))\n            .as(\"all\")\n            .filter(\n                builder.call(SqlStdOperatorTable.GREATER_THAN,\n                    builder.field(\"DEPT\", \"DEPTNO\"),\n                    builder.literal(100)))\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(\"all\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$0], EMPNO=[$2])\\n\"\n        + \"  LogicalFilter(condition=[>($0, 100)])\\n\"\n        + \"    LogicalProject(DEPTNO=[$16], DEPTNO0=[$16], EMPNO=[$8], MGR=[$3])\\n\"\n        + \"      LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"        LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"        LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"          LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"          LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2418,"status":"N"}],"commitId":"a4fa05458840cfdd93fb5cba16d102b06197539d","commitMessage":"@@@[CALCITE-4073] Add a new component RexNormalize for more effect rex nodes normalization (part1)\n\n* Add a new component named RexNormalize\n* By default.  we only normalize the RexCalls during planning phrase.  and\nthere is no way to normalize it when constructing the calls now\n* Recover the plan diffs\n* Changes the RexCall#equals to be semantic equivalent.  which i think is\nnot a good design.  we should promote to have a digest abstraction just\nlike RelNode\n","date":"2020-07-17 09:37:23","modifiedFileCount":"10","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2021-09-17 17:38:52","codes":[{"authorDate":"2020-07-14 15:38:58","commitOrder":7,"curCode":"  @Test void testAlias2() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .filter(\n                builder.equals(builder.field(\"e\", \"DEPTNO\"),\n                    builder.field(\"DEPT\", \"DEPTNO\")),\n                builder.equals(builder.field(\"m\", \"EMPNO\"),\n                    builder.field(\"e\", \"MGR\")))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[AND(=($7, $16), =($8, $3))])\\n\"\n        + \"  LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"    LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"      LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-07-17 09:37:23","endLine":2161,"groupId":"101267","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testAlias2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dd/1463dd5c43d5cf527557d5e8224ed1d57b1475.src","preCode":"  @Test void testAlias2() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .filter(\n                builder.equals(builder.field(\"e\", \"DEPTNO\"),\n                    builder.field(\"DEPT\", \"DEPTNO\")),\n                builder.equals(builder.field(\"m\", \"EMPNO\"),\n                    builder.field(\"e\", \"MGR\")))\n            .build();\n    final String expected = \"\"\n        + \"LogicalFilter(condition=[AND(=($7, $16), =($8, $3))])\\n\"\n        + \"  LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"    LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"      LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2132,"status":"N"},{"authorDate":"2021-09-17 17:38:52","commitOrder":7,"curCode":"  @Test void testMultiLevelAlias() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(16),\n                builder.field(\"m\", \"EMPNO\"),\n                builder.field(\"e\", \"MGR\"))\n            .as(\"all\")\n            .filter(\n                builder.greaterThan(builder.field(\"DEPT\", \"DEPTNO\"),\n                    builder.literal(100)))\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(\"all\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$0], EMPNO=[$2])\\n\"\n        + \"  LogicalFilter(condition=[>($0, 100)])\\n\"\n        + \"    LogicalProject(DEPTNO=[$16], DEPTNO0=[$16], EMPNO=[$8], MGR=[$3])\\n\"\n        + \"      LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"        LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"        LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"          LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"          LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2021-09-18 03:08:56","endLine":2859,"groupId":"101267","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testMultiLevelAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c0/95dbb7ba6f6c8e91ad0cde63c3b1b7581e906d.src","preCode":"  @Test void testMultiLevelAlias() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .scan(\"EMP\")\n            .as(\"m\")\n            .scan(\"DEPT\")\n            .join(JoinRelType.INNER)\n            .join(JoinRelType.INNER)\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(16),\n                builder.field(\"m\", \"EMPNO\"),\n                builder.field(\"e\", \"MGR\"))\n            .as(\"all\")\n            .filter(\n                builder.call(SqlStdOperatorTable.GREATER_THAN,\n                    builder.field(\"DEPT\", \"DEPTNO\"),\n                    builder.literal(100)))\n            .project(builder.field(\"DEPT\", \"DEPTNO\"),\n                builder.field(\"all\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$0], EMPNO=[$2])\\n\"\n        + \"  LogicalFilter(condition=[>($0, 100)])\\n\"\n        + \"    LogicalProject(DEPTNO=[$16], DEPTNO0=[$16], EMPNO=[$8], MGR=[$3])\\n\"\n        + \"      LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"        LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"        LogicalJoin(condition=[true], joinType=[inner])\\n\"\n        + \"          LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"          LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2828,"status":"M"}],"commitId":"4d82c5346292b32a1301214376366c2e8c5a892e","commitMessage":"@@@Add RelBuilder.lessThan.  and use RelBuilder shorthands\n","date":"2021-09-18 03:08:56","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"}]
