[{"authorTime":"2019-07-10 08:22:35","codes":[{"authorDate":"2019-07-10 08:22:35","commitOrder":1,"curCode":"  @Test public void testCastLongVarchar1() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(10485761))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgreSQL = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(256))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgreSQL);\n\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(512))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle);\n  }\n","date":"2019-07-13 06:07:34","endLine":464,"groupId":"10384","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastLongVarchar1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/4913709f09e3c0ef37b1bee67636dfb25238bc.src","preCode":"  @Test public void testCastLongVarchar1() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(10485761))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgreSQL = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(256))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgreSQL);\n\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(512))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"B"},{"authorDate":"2019-07-10 08:22:35","commitOrder":1,"curCode":"  @Test public void testCastLongVarchar2() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(175))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgreSQL = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgreSQL);\n\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle);\n  }\n","date":"2019-07-13 06:07:34","endLine":484,"groupId":"10384","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastLongVarchar2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/4913709f09e3c0ef37b1bee67636dfb25238bc.src","preCode":"  @Test public void testCastLongVarchar2() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(175))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgreSQL = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgreSQL);\n\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":470,"status":"B"}],"commitId":"0732283cab7894ffdce6a22ebe5d31b28d389a4d","commitMessage":"@@@[CALCITE-3189] Multiple fixes for Oracle SQL dialect\n\nClose apache/calcite#1312\n","date":"2019-07-13 06:07:34","modifiedFileCount":"3","status":"B","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testCastLongVarchar1() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(10485761))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgreSQL = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(256))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgreSQL);\n\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(512))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle);\n  }\n","date":"2020-04-06 04:57:49","endLine":574,"groupId":"10384","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastLongVarchar1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testCastLongVarchar1() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(10485761))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgreSQL = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(256))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgreSQL);\n\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(512))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":560,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testCastLongVarchar2() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(175))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgreSQL = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgreSQL);\n\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle);\n  }\n","date":"2020-04-06 04:57:49","endLine":594,"groupId":"10384","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastLongVarchar2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testCastLongVarchar2() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(175))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgreSQL = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgreSQL);\n\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":580,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2021-07-29 19:16:20","commitOrder":3,"curCode":"  @Test void testCastLongVarchar1() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(10485761))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgreSQL = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(256))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(512))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    final String expectedRedshift = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(65535))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgreSQL)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle)\n        .withRedshift()\n        .ok(expectedRedshift);\n  }\n","date":"2021-08-10 17:47:35","endLine":789,"groupId":"10384","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastLongVarchar1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/94/ef0c02829e8f36ca4a2b1f8a237079698047d3.src","preCode":"  @Test void testCastLongVarchar1() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(10485761))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgreSQL = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(256))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgreSQL);\n\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(512))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":773,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testCastLongVarchar2() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(175))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgreSQL = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgreSQL);\n\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle);\n  }\n","date":"2020-04-06 04:57:49","endLine":594,"groupId":"10384","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastLongVarchar2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test void testCastLongVarchar2() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(175))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgreSQL = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgreSQL);\n\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":580,"status":"N"}],"commitId":"48126d3d3834e28e84ae3fc4c65b86831b5d6aef","commitMessage":"@@@[CALCITE-4706] JDBC adapter generates casts exceeding Redshift's data types bounds\n\n1. Add Redshift type system ensuring precision/scale bounds are\nsatisfied when casting.\n2. Consider max precision for DECIMAL and CHAR data types in\nSqlDialect#getCastSpec.\n3. Consider max scale for DECIMAL data types in SqlDialect#getCastSpec.\n4. Extend RelToSqlConverterTest.Sql with custom type system to allow\nwritting tests with non-default type system (e.g..  simulate systems with\nlarge numeric precision).\n5. Set typesystem explicitly in SqlDialectFactoryImpl since it cannot\nbe derived from the metadata and the default is not appropriate.\n6. Add unit tests casting to DECIMAL.  CHAR.  VARCHAR.  with\nprecision/scale exceeding Redshift's bounds.\n\nClose apache/calcite#2470\n","date":"2021-08-10 17:47:35","modifiedFileCount":"6","status":"M","submitter":"Stamatis Zampetakis"},{"authorTime":"2021-08-12 14:23:53","codes":[{"authorDate":"2021-08-12 14:23:53","commitOrder":4,"curCode":"  @Test void testCastLongVarchar1() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(10485761))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgresql = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(256))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(512))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    final String expectedRedshift = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(65535))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgresql)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle)\n        .withRedshift()\n        .ok(expectedRedshift);\n  }\n","date":"2021-08-14 15:52:54","endLine":772,"groupId":"101526","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastLongVarchar1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/f75c93796391bbde612ea6420ab122a1868587.src","preCode":"  @Test void testCastLongVarchar1() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(10485761))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgreSQL = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(256))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(512))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    final String expectedRedshift = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(65535))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgreSQL)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle)\n        .withRedshift()\n        .ok(expectedRedshift);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":756,"status":"M"},{"authorDate":"2021-08-12 14:23:53","commitOrder":4,"curCode":"  @Test void testCastLongVarchar2() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(175))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgresql = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgresql);\n\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle);\n  }\n","date":"2021-08-14 15:52:54","endLine":792,"groupId":"101526","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastLongVarchar2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/f75c93796391bbde612ea6420ab122a1868587.src","preCode":"  @Test void testCastLongVarchar2() {\n    final String query = \"select cast(\\\"store_id\\\" as VARCHAR(175))\\n\"\n        + \" from \\\"expense_fact\\\"\";\n    final String expectedPostgreSQL = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withPostgresqlModifiedTypeSystem()\n        .ok(expectedPostgreSQL);\n\n    final String expectedOracle = \"SELECT CAST(\\\"store_id\\\" AS VARCHAR(175))\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"expense_fact\\\"\";\n    sql(query)\n        .withOracleModifiedTypeSystem()\n        .ok(expectedOracle);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":778,"status":"M"}],"commitId":"dff28d1ce49871a451c7ff3e740259441da7c72a","commitMessage":"@@@Cosmetic\n\nIn RelToSqlConverterTest. \nmerge methods that test the same query in several dialects;\nmerge '.withXxx().ok(expectedXxx)' into one line. \nand sort such lines alphabetically;\nnormalize 'expectedPostgreSQL' and 'expectedPostgreSql' to\n'expectedPostgresql'.  and so forth.\n","date":"2021-08-14 15:52:54","modifiedFileCount":"2","status":"M","submitter":"Julian Hyde"}]
