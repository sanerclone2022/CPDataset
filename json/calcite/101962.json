[{"authorTime":"2020-08-13 15:59:15","codes":[{"authorDate":"2015-11-16 15:54:04","commitOrder":3,"curCode":"  public String toString() {\n    Iterator<RelFieldCollation> it = fieldCollations.iterator();\n    if (! it.hasNext()) {\n      return \"[]\";\n    }\n    StringBuilder sb = new StringBuilder();\n    sb.append('[');\n    for (;;) {\n      RelFieldCollation e = it.next();\n      sb.append(e.getFieldIndex());\n      if (e.direction != RelFieldCollation.Direction.ASCENDING\n          || e.nullDirection != e.direction.defaultNullDirection()) {\n        sb.append(' ').append(e.shortString());\n      }\n      if (!it.hasNext()) {\n        return sb.append(']').toString();\n      }\n      sb.append(',').append(' ');\n    }\n  }\n","date":"2015-11-17 04:48:31","endLine":143,"groupId":"1773","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/4fcbc788ab9864b13cbfef0fc36174031735c7.src","preCode":"  public String toString() {\n    Iterator<RelFieldCollation> it = fieldCollations.iterator();\n    if (! it.hasNext()) {\n      return \"[]\";\n    }\n    StringBuilder sb = new StringBuilder();\n    sb.append('[');\n    for (;;) {\n      RelFieldCollation e = it.next();\n      sb.append(e.getFieldIndex());\n      if (e.direction != RelFieldCollation.Direction.ASCENDING\n          || e.nullDirection != e.direction.defaultNullDirection()) {\n        sb.append(' ').append(e.shortString());\n      }\n      if (!it.hasNext()) {\n        return sb.append(']').toString();\n      }\n      sb.append(',').append(' ');\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/RelCollationImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"NB"},{"authorDate":"2020-08-13 15:59:15","commitOrder":3,"curCode":"  public static <E> StringBuilder printIterable(StringBuilder sb,\n      Iterable<E> iterable) {\n    final Iterator<E> it = iterable.iterator();\n    if (!it.hasNext()) {\n      return sb.append(\"[]\");\n    }\n    sb.append('[');\n    for (;;) {\n      final E e = it.next();\n      sb.append(e);\n      if (!it.hasNext()) {\n        return sb.append(']');\n      }\n      sb.append(\", \");\n    }\n  }\n","date":"2020-09-05 00:58:49","endLine":826,"groupId":"4614","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"printIterable","params":"(StringBuildersb@Iterable<E>iterable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/0a18db2c494e1471b5e8569147eecc5c9c7688.src","preCode":"  public static <E> StringBuilder printIterable(StringBuilder sb,\n      Iterable<E> iterable) {\n    final Iterator<E> it = iterable.iterator();\n    if (!it.hasNext()) {\n      return sb.append(\"[]\");\n    }\n    sb.append('[');\n    for (;;) {\n      final E e = it.next();\n      sb.append(e);\n      if (!it.hasNext()) {\n        return sb.append(']');\n      }\n      sb.append(\", \");\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/util/Util.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":811,"status":"B"}],"commitId":"850f0f4a04fc2399b8fd1c1fed532cd8e1e39514","commitMessage":"@@@[CALCITE-4173] Add internal SEARCH operator and Sarg literal that represents a set of values or ranges\n\nObsolete use of IN in RexCall; in Druid.  replace some uses\nwith DRUID_IN operator.\n\nCreate Sarg instances during RexSimplify of AND.  OR. Also\nduring simplify.  strengthen Sarg.containsNull from true to\nfalse if predicates prove that NULL values are impossible.\n\nIn JDBC adapter we handle SEARCH natively.  but in Geode. \nMongoDB and Spark adapters.  expand SEARCH before translating\nto target query language. Later.  it may be better to handle\nSEARCH explicitly. For instance.  it will be easier to recognize\nexpressions that can be translated to Geode's 'IN SET'\nconstruct.\n\nClose apache/calcite#2124\n","date":"2020-09-05 00:58:49","modifiedFileCount":"44","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-08-13 15:59:15","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":4,"curCode":"  @Override public String toString() {\n    Iterator<RelFieldCollation> it = fieldCollations.iterator();\n    if (! it.hasNext()) {\n      return \"[]\";\n    }\n    StringBuilder sb = new StringBuilder();\n    sb.append('[');\n    for (;;) {\n      RelFieldCollation e = it.next();\n      sb.append(e.getFieldIndex());\n      if (e.direction != RelFieldCollation.Direction.ASCENDING\n          || e.nullDirection != e.direction.defaultNullDirection()) {\n        sb.append(' ').append(e.shortString());\n      }\n      if (!it.hasNext()) {\n        return sb.append(']').toString();\n      }\n      sb.append(',').append(' ');\n    }\n  }\n","date":"2020-10-07 05:42:47","endLine":172,"groupId":"101962","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/38/53f46b0d10786b2f90a6a0056aaa46023c1ce0.src","preCode":"  public String toString() {\n    Iterator<RelFieldCollation> it = fieldCollations.iterator();\n    if (! it.hasNext()) {\n      return \"[]\";\n    }\n    StringBuilder sb = new StringBuilder();\n    sb.append('[');\n    for (;;) {\n      RelFieldCollation e = it.next();\n      sb.append(e.getFieldIndex());\n      if (e.direction != RelFieldCollation.Direction.ASCENDING\n          || e.nullDirection != e.direction.defaultNullDirection()) {\n        sb.append(' ').append(e.shortString());\n      }\n      if (!it.hasNext()) {\n        return sb.append(']').toString();\n      }\n      sb.append(',').append(' ');\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/RelCollationImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"},{"authorDate":"2020-08-13 15:59:15","commitOrder":4,"curCode":"  public static <E> StringBuilder printIterable(StringBuilder sb,\n      Iterable<E> iterable) {\n    final Iterator<E> it = iterable.iterator();\n    if (!it.hasNext()) {\n      return sb.append(\"[]\");\n    }\n    sb.append('[');\n    for (;;) {\n      final E e = it.next();\n      sb.append(e);\n      if (!it.hasNext()) {\n        return sb.append(']');\n      }\n      sb.append(\", \");\n    }\n  }\n","date":"2020-09-05 00:58:49","endLine":826,"groupId":"101962","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"printIterable","params":"(StringBuildersb@Iterable<E>iterable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/0a18db2c494e1471b5e8569147eecc5c9c7688.src","preCode":"  public static <E> StringBuilder printIterable(StringBuilder sb,\n      Iterable<E> iterable) {\n    final Iterator<E> it = iterable.iterator();\n    if (!it.hasNext()) {\n      return sb.append(\"[]\");\n    }\n    sb.append('[');\n    for (;;) {\n      final E e = it.next();\n      sb.append(e);\n      if (!it.hasNext()) {\n        return sb.append(']');\n      }\n      sb.append(\", \");\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/util/Util.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":811,"status":"N"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
