[{"authorTime":"2018-02-01 11:50:44","codes":[{"authorDate":"2017-07-10 21:47:59","commitOrder":2,"curCode":"  @Test public void testDateAndTimestamp() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '1970-01-15')\")\n        .returns(\"EXPR$0=1209600000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '2002-08-11')\")\n        .returns(\"EXPR$0=1029024000000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '2003-04-11')\")\n        .returns(\"EXPR$0=1050019200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-11 00:00:00')\")\n        .returns(\"EXPR$0=1050019200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-11 00:00:06')\")\n        .returns(\"EXPR$0=1050019206000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-18 01:20:00')\")\n        .returns(\"EXPR$0=1050628800000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '00:20:00')\")\n        .returns(\"EXPR$0=1200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '00:20:10')\")\n        .returns(\"EXPR$0=1210000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '01:20:00')\")\n        .returns(\"EXPR$0=4800000\\n\");\n  }\n","date":"2017-07-14 04:46:56","endLine":830,"groupId":"13330","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDateAndTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/1de2828a1d9986c0a404adae20f343ae160a39.src","preCode":"  @Test public void testDateAndTimestamp() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '1970-01-15')\")\n        .returns(\"EXPR$0=1209600000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '2002-08-11')\")\n        .returns(\"EXPR$0=1029024000000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '2003-04-11')\")\n        .returns(\"EXPR$0=1050019200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-11 00:00:00')\")\n        .returns(\"EXPR$0=1050019200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-11 00:00:06')\")\n        .returns(\"EXPR$0=1050019206000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-18 01:20:00')\")\n        .returns(\"EXPR$0=1050628800000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '00:20:00')\")\n        .returns(\"EXPR$0=1200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '00:20:10')\")\n        .returns(\"EXPR$0=1210000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '01:20:00')\")\n        .returns(\"EXPR$0=4800000\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":810,"status":"NB"},{"authorDate":"2018-02-01 11:50:44","commitOrder":2,"curCode":"  public void testBigDecimalAndLong() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n  }\n","date":"2018-04-26 13:36:39","endLine":905,"groupId":"13330","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBigDecimalAndLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6d/c822a93ca4621757b44c0c3743722e026a7c9a.src","preCode":"  public void testBigDecimalAndLong() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":891,"status":"B"}],"commitId":"bd7e66a4487c3c6660903b2e107e6c81a5a63c82","commitMessage":"@@@[CALCITE-2053] Resolve Java user-defined functions that have Double and BigDecimal arguments (??)\n\nClose apache/calcite#619\n","date":"2018-04-26 13:36:39","modifiedFileCount":"3","status":"M","submitter":"hzyuqi1"},{"authorTime":"2019-12-04 02:44:13","codes":[{"authorDate":"2017-07-10 21:47:59","commitOrder":3,"curCode":"  @Test public void testDateAndTimestamp() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '1970-01-15')\")\n        .returns(\"EXPR$0=1209600000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '2002-08-11')\")\n        .returns(\"EXPR$0=1029024000000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '2003-04-11')\")\n        .returns(\"EXPR$0=1050019200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-11 00:00:00')\")\n        .returns(\"EXPR$0=1050019200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-11 00:00:06')\")\n        .returns(\"EXPR$0=1050019206000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-18 01:20:00')\")\n        .returns(\"EXPR$0=1050628800000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '00:20:00')\")\n        .returns(\"EXPR$0=1200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '00:20:10')\")\n        .returns(\"EXPR$0=1210000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '01:20:00')\")\n        .returns(\"EXPR$0=4800000\\n\");\n  }\n","date":"2017-07-14 04:46:56","endLine":830,"groupId":"13330","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDateAndTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/1de2828a1d9986c0a404adae20f343ae160a39.src","preCode":"  @Test public void testDateAndTimestamp() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '1970-01-15')\")\n        .returns(\"EXPR$0=1209600000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '2002-08-11')\")\n        .returns(\"EXPR$0=1029024000000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '2003-04-11')\")\n        .returns(\"EXPR$0=1050019200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-11 00:00:00')\")\n        .returns(\"EXPR$0=1050019200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-11 00:00:06')\")\n        .returns(\"EXPR$0=1050019206000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-18 01:20:00')\")\n        .returns(\"EXPR$0=1050628800000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '00:20:00')\")\n        .returns(\"EXPR$0=1200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '00:20:10')\")\n        .returns(\"EXPR$0=1210000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '01:20:00')\")\n        .returns(\"EXPR$0=4800000\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":810,"status":"N"},{"authorDate":"2019-12-04 02:44:13","commitOrder":3,"curCode":"  @Test public void testBigDecimalAndLong() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n  }\n","date":"2019-12-14 23:57:27","endLine":956,"groupId":"13330","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBigDecimalAndLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c5/d80c948c190a87d8c2172f1c7bec57902bfed7.src","preCode":"  public void testBigDecimalAndLong() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":942,"status":"M"}],"commitId":"571731b80a58eb095ebac7123285c375e7afff90","commitMessage":"@@@[CALCITE-3559] Update formatting: remove \"// End\" trailers.  move @Test from their own lines\n","date":"2019-12-14 23:57:27","modifiedFileCount":"1961","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testDateAndTimestamp() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '1970-01-15')\")\n        .returns(\"EXPR$0=1209600000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '2002-08-11')\")\n        .returns(\"EXPR$0=1029024000000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '2003-04-11')\")\n        .returns(\"EXPR$0=1050019200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-11 00:00:00')\")\n        .returns(\"EXPR$0=1050019200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-11 00:00:06')\")\n        .returns(\"EXPR$0=1050019206000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-18 01:20:00')\")\n        .returns(\"EXPR$0=1050628800000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '00:20:00')\")\n        .returns(\"EXPR$0=1200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '00:20:10')\")\n        .returns(\"EXPR$0=1210000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '01:20:00')\")\n        .returns(\"EXPR$0=4800000\\n\");\n  }\n","date":"2020-04-06 04:57:49","endLine":936,"groupId":"101240","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDateAndTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/7e85d86a3434aff5736ae15c676405cb52adc6.src","preCode":"  @Test public void testDateAndTimestamp() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '1970-01-15')\")\n        .returns(\"EXPR$0=1209600000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '2002-08-11')\")\n        .returns(\"EXPR$0=1029024000000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(DATE '2003-04-11')\")\n        .returns(\"EXPR$0=1050019200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-11 00:00:00')\")\n        .returns(\"EXPR$0=1050019200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-11 00:00:06')\")\n        .returns(\"EXPR$0=1050019206000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIMESTAMP '2003-04-18 01:20:00')\")\n        .returns(\"EXPR$0=1050628800000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '00:20:00')\")\n        .returns(\"EXPR$0=1200000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '00:20:10')\")\n        .returns(\"EXPR$0=1210000\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toLong\\\"(TIME '01:20:00')\")\n        .returns(\"EXPR$0=4800000\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":916,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testBigDecimalAndLong() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n  }\n","date":"2020-04-06 04:57:49","endLine":956,"groupId":"101240","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBigDecimalAndLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/7e85d86a3434aff5736ae15c676405cb52adc6.src","preCode":"  @Test public void testBigDecimalAndLong() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":942,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
