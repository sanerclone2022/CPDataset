[{"authorTime":"2019-07-09 13:54:32","codes":[{"authorDate":"2019-07-09 13:54:32","commitOrder":1,"curCode":"  default RelDataType deriveDecimalPlusType(RelDataTypeFactory typeFactory,\n                                            RelDataType type1, RelDataType type2) {\n    if (SqlTypeUtil.isExactNumeric(type1)\n            && SqlTypeUtil.isExactNumeric(type2)) {\n      if (SqlTypeUtil.isDecimal(type1)\n              || SqlTypeUtil.isDecimal(type2)) {\n        int p1 = type1.getPrecision();\n        int p2 = type2.getPrecision();\n        int s1 = type1.getScale();\n        int s2 = type2.getScale();\n        int scale = Math.max(s1, s2);\n        assert scale <= getMaxNumericScale();\n        int precision = Math.max(p1 - s1, p2 - s2) + scale + 1;\n        precision =\n                Math.min(\n                        precision,\n                        getMaxNumericPrecision());\n        assert precision > 0;\n\n        return typeFactory.createSqlType(\n                SqlTypeName.DECIMAL,\n                precision,\n                scale);\n      }\n    }\n    return null;\n  }\n","date":"2019-07-17 02:35:41","endLine":165,"groupId":"3655","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deriveDecimalPlusType","params":"(RelDataTypeFactorytypeFactory@RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/9ded51fa64a121fca1263f9a17fb5852841ee8.src","preCode":"  default RelDataType deriveDecimalPlusType(RelDataTypeFactory typeFactory,\n                                            RelDataType type1, RelDataType type2) {\n    if (SqlTypeUtil.isExactNumeric(type1)\n            && SqlTypeUtil.isExactNumeric(type2)) {\n      if (SqlTypeUtil.isDecimal(type1)\n              || SqlTypeUtil.isDecimal(type2)) {\n        int p1 = type1.getPrecision();\n        int p2 = type2.getPrecision();\n        int s1 = type1.getScale();\n        int s2 = type2.getScale();\n        int scale = Math.max(s1, s2);\n        assert scale <= getMaxNumericScale();\n        int precision = Math.max(p1 - s1, p2 - s2) + scale + 1;\n        precision =\n                Math.min(\n                        precision,\n                        getMaxNumericPrecision());\n        assert precision > 0;\n\n        return typeFactory.createSqlType(\n                SqlTypeName.DECIMAL,\n                precision,\n                scale);\n      }\n    }\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystem.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"B"},{"authorDate":"2019-07-09 13:54:32","commitOrder":1,"curCode":"  default RelDataType deriveDecimalMultiplyType(RelDataTypeFactory typeFactory,\n      RelDataType type1, RelDataType type2) {\n    if (SqlTypeUtil.isExactNumeric(type1)\n            && SqlTypeUtil.isExactNumeric(type2)) {\n      if (SqlTypeUtil.isDecimal(type1)\n              || SqlTypeUtil.isDecimal(type2)) {\n        int p1 = type1.getPrecision();\n        int p2 = type2.getPrecision();\n        int s1 = type1.getScale();\n        int s2 = type2.getScale();\n\n        int scale = s1 + s2;\n        scale = Math.min(scale, getMaxNumericScale());\n        int precision = p1 + p2;\n        precision =\n                Math.min(\n                        precision,\n                        getMaxNumericPrecision());\n\n        RelDataType ret;\n        ret = typeFactory.createSqlType(\n                        SqlTypeName.DECIMAL,\n                        precision,\n                        scale);\n\n        return ret;\n      }\n    }\n\n    return null;\n  }\n","date":"2019-07-17 02:35:41","endLine":244,"groupId":"3657","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deriveDecimalMultiplyType","params":"(RelDataTypeFactorytypeFactory@RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/9ded51fa64a121fca1263f9a17fb5852841ee8.src","preCode":"  default RelDataType deriveDecimalMultiplyType(RelDataTypeFactory typeFactory,\n      RelDataType type1, RelDataType type2) {\n    if (SqlTypeUtil.isExactNumeric(type1)\n            && SqlTypeUtil.isExactNumeric(type2)) {\n      if (SqlTypeUtil.isDecimal(type1)\n              || SqlTypeUtil.isDecimal(type2)) {\n        int p1 = type1.getPrecision();\n        int p2 = type2.getPrecision();\n        int s1 = type1.getScale();\n        int s2 = type2.getScale();\n\n        int scale = s1 + s2;\n        scale = Math.min(scale, getMaxNumericScale());\n        int precision = p1 + p2;\n        precision =\n                Math.min(\n                        precision,\n                        getMaxNumericPrecision());\n\n        RelDataType ret;\n        ret = typeFactory.createSqlType(\n                        SqlTypeName.DECIMAL,\n                        precision,\n                        scale);\n\n        return ret;\n      }\n    }\n\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystem.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"B"}],"commitId":"f7c0b0a18ab72338e0b3afcdfd087aab3572fddb","commitMessage":"@@@CALCITE-3187: Make decimal type inference overridable (Praveen Kumar)\n\nDecimal return type inference for addition and modulus is hardcoded.\n\nAdd new methods to RelDataTypeSystem to allow implementers to override\nbehavior if needed. Deprecate existing methods for multiply and divide\nin RelDataTypeFactory and move them over to RelDataTypeSystem for\nconsistency.\n\nClose apache/calcite#1311\n","date":"2019-07-17 02:35:41","modifiedFileCount":"5","status":"B","submitter":"Praveen"},{"authorTime":"2018-05-30 12:16:57","codes":[{"authorDate":"2018-05-30 12:16:57","commitOrder":2,"curCode":"  default RelDataType deriveDecimalPlusType(RelDataTypeFactory typeFactory,\n      RelDataType type1, RelDataType type2) {\n    if (SqlTypeUtil.isExactNumeric(type1)\n            && SqlTypeUtil.isExactNumeric(type2)) {\n      if (SqlTypeUtil.isDecimal(type1)\n              || SqlTypeUtil.isDecimal(type2)) {\n        \r\n        \r\n        type1 = RelDataTypeFactoryImpl.isJavaType(type1)\n            ? typeFactory.decimalOf(type1)\n            : type1;\n        type2 = RelDataTypeFactoryImpl.isJavaType(type2)\n            ? typeFactory.decimalOf(type2)\n            : type2;\n        int p1 = type1.getPrecision();\n        int p2 = type2.getPrecision();\n        int s1 = type1.getScale();\n        int s2 = type2.getScale();\n        int scale = Math.max(s1, s2);\n        assert scale <= getMaxNumericScale();\n        int precision = Math.max(p1 - s1, p2 - s2) + scale + 1;\n        precision =\n                Math.min(\n                        precision,\n                        getMaxNumericPrecision());\n        assert precision > 0;\n\n        return typeFactory.createSqlType(\n                SqlTypeName.DECIMAL,\n                precision,\n                scale);\n      }\n    }\n    return null;\n  }\n","date":"2019-08-29 17:01:46","endLine":168,"groupId":"3655","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deriveDecimalPlusType","params":"(RelDataTypeFactorytypeFactory@RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4e/b6be552a0b6fdf73b12a96f0f4c6233e919725.src","preCode":"  default RelDataType deriveDecimalPlusType(RelDataTypeFactory typeFactory,\n                                            RelDataType type1, RelDataType type2) {\n    if (SqlTypeUtil.isExactNumeric(type1)\n            && SqlTypeUtil.isExactNumeric(type2)) {\n      if (SqlTypeUtil.isDecimal(type1)\n              || SqlTypeUtil.isDecimal(type2)) {\n        int p1 = type1.getPrecision();\n        int p2 = type2.getPrecision();\n        int s1 = type1.getScale();\n        int s2 = type2.getScale();\n        int scale = Math.max(s1, s2);\n        assert scale <= getMaxNumericScale();\n        int precision = Math.max(p1 - s1, p2 - s2) + scale + 1;\n        precision =\n                Math.min(\n                        precision,\n                        getMaxNumericPrecision());\n        assert precision > 0;\n\n        return typeFactory.createSqlType(\n                SqlTypeName.DECIMAL,\n                precision,\n                scale);\n      }\n    }\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystem.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2018-05-30 12:16:57","commitOrder":2,"curCode":"  default RelDataType deriveDecimalMultiplyType(RelDataTypeFactory typeFactory,\n      RelDataType type1, RelDataType type2) {\n    if (SqlTypeUtil.isExactNumeric(type1)\n            && SqlTypeUtil.isExactNumeric(type2)) {\n      if (SqlTypeUtil.isDecimal(type1)\n              || SqlTypeUtil.isDecimal(type2)) {\n        \r\n        \r\n        type1 = RelDataTypeFactoryImpl.isJavaType(type1)\n            ? typeFactory.decimalOf(type1)\n            : type1;\n        type2 = RelDataTypeFactoryImpl.isJavaType(type2)\n            ? typeFactory.decimalOf(type2)\n            : type2;\n        int p1 = type1.getPrecision();\n        int p2 = type2.getPrecision();\n        int s1 = type1.getScale();\n        int s2 = type2.getScale();\n\n        int scale = s1 + s2;\n        scale = Math.min(scale, getMaxNumericScale());\n        int precision = p1 + p2;\n        precision =\n                Math.min(\n                        precision,\n                        getMaxNumericPrecision());\n\n        RelDataType ret;\n        ret = typeFactory.createSqlType(\n                        SqlTypeName.DECIMAL,\n                        precision,\n                        scale);\n\n        return ret;\n      }\n    }\n\n    return null;\n  }\n","date":"2019-08-29 17:01:46","endLine":255,"groupId":"3657","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deriveDecimalMultiplyType","params":"(RelDataTypeFactorytypeFactory@RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4e/b6be552a0b6fdf73b12a96f0f4c6233e919725.src","preCode":"  default RelDataType deriveDecimalMultiplyType(RelDataTypeFactory typeFactory,\n      RelDataType type1, RelDataType type2) {\n    if (SqlTypeUtil.isExactNumeric(type1)\n            && SqlTypeUtil.isExactNumeric(type2)) {\n      if (SqlTypeUtil.isDecimal(type1)\n              || SqlTypeUtil.isDecimal(type2)) {\n        int p1 = type1.getPrecision();\n        int p2 = type2.getPrecision();\n        int s1 = type1.getScale();\n        int s2 = type2.getScale();\n\n        int scale = s1 + s2;\n        scale = Math.min(scale, getMaxNumericScale());\n        int precision = p1 + p2;\n        precision =\n                Math.min(\n                        precision,\n                        getMaxNumericPrecision());\n\n        RelDataType ret;\n        ret = typeFactory.createSqlType(\n                        SqlTypeName.DECIMAL,\n                        precision,\n                        scale);\n\n        return ret;\n      }\n    }\n\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystem.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"}],"commitId":"01477c42ded991aaa7b14cf72a6e4ea1a20edf5e","commitMessage":"@@@[CALCITE-2302] Implicit type cast support\n\nChanges:\n* Support full implicit type coercion for SQL contexts:\nSet operation.  binary arithmetic exprs.  binary equality\nexprs.  binary comparison exprs.  case when(COALESCE). \nIN operation.  builtin functions.  user defined function(UDF);\n* The SqlValidator now takes a component named `TypeCoercion`\nresponsible for the coercion work.  you can turn off the coercion with\n`SqlValidator#setEnableTypeCoercion(false)`;\n* We follow PostgreSQL and SQL-SERVER conversion style for two integers division. \ni.e. `'9'/2` returns INTEGER 4.\n","date":"2019-08-29 17:01:46","modifiedFileCount":"50","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  default @Nullable RelDataType deriveDecimalPlusType(RelDataTypeFactory typeFactory,\n      RelDataType type1, RelDataType type2) {\n    if (SqlTypeUtil.isExactNumeric(type1)\n            && SqlTypeUtil.isExactNumeric(type2)) {\n      if (SqlTypeUtil.isDecimal(type1)\n              || SqlTypeUtil.isDecimal(type2)) {\n        \r\n        \r\n        type1 = RelDataTypeFactoryImpl.isJavaType(type1)\n            ? typeFactory.decimalOf(type1)\n            : type1;\n        type2 = RelDataTypeFactoryImpl.isJavaType(type2)\n            ? typeFactory.decimalOf(type2)\n            : type2;\n        int p1 = type1.getPrecision();\n        int p2 = type2.getPrecision();\n        int s1 = type1.getScale();\n        int s2 = type2.getScale();\n        int scale = Math.max(s1, s2);\n        assert scale <= getMaxNumericScale();\n        int precision = Math.max(p1 - s1, p2 - s2) + scale + 1;\n        precision =\n                Math.min(\n                        precision,\n                        getMaxNumericPrecision());\n        assert precision > 0;\n\n        return typeFactory.createSqlType(\n                SqlTypeName.DECIMAL,\n                precision,\n                scale);\n      }\n    }\n    return null;\n  }\n","date":"2020-11-30 06:45:33","endLine":184,"groupId":"101961","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"deriveDecimalPlusType","params":"(RelDataTypeFactorytypeFactory@RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/6095da7632e3d66349f47cf69e87f4c87a4591.src","preCode":"  default RelDataType deriveDecimalPlusType(RelDataTypeFactory typeFactory,\n      RelDataType type1, RelDataType type2) {\n    if (SqlTypeUtil.isExactNumeric(type1)\n            && SqlTypeUtil.isExactNumeric(type2)) {\n      if (SqlTypeUtil.isDecimal(type1)\n              || SqlTypeUtil.isDecimal(type2)) {\n        \r\n        \r\n        type1 = RelDataTypeFactoryImpl.isJavaType(type1)\n            ? typeFactory.decimalOf(type1)\n            : type1;\n        type2 = RelDataTypeFactoryImpl.isJavaType(type2)\n            ? typeFactory.decimalOf(type2)\n            : type2;\n        int p1 = type1.getPrecision();\n        int p2 = type2.getPrecision();\n        int s1 = type1.getScale();\n        int s2 = type2.getScale();\n        int scale = Math.max(s1, s2);\n        assert scale <= getMaxNumericScale();\n        int precision = Math.max(p1 - s1, p2 - s2) + scale + 1;\n        precision =\n                Math.min(\n                        precision,\n                        getMaxNumericPrecision());\n        assert precision > 0;\n\n        return typeFactory.createSqlType(\n                SqlTypeName.DECIMAL,\n                precision,\n                scale);\n      }\n    }\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystem.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  default @Nullable RelDataType deriveDecimalMultiplyType(RelDataTypeFactory typeFactory,\n      RelDataType type1, RelDataType type2) {\n    if (SqlTypeUtil.isExactNumeric(type1)\n            && SqlTypeUtil.isExactNumeric(type2)) {\n      if (SqlTypeUtil.isDecimal(type1)\n              || SqlTypeUtil.isDecimal(type2)) {\n        \r\n        \r\n        type1 = RelDataTypeFactoryImpl.isJavaType(type1)\n            ? typeFactory.decimalOf(type1)\n            : type1;\n        type2 = RelDataTypeFactoryImpl.isJavaType(type2)\n            ? typeFactory.decimalOf(type2)\n            : type2;\n        int p1 = type1.getPrecision();\n        int p2 = type2.getPrecision();\n        int s1 = type1.getScale();\n        int s2 = type2.getScale();\n\n        int scale = s1 + s2;\n        scale = Math.min(scale, getMaxNumericScale());\n        int precision = p1 + p2;\n        precision =\n                Math.min(\n                        precision,\n                        getMaxNumericPrecision());\n\n        RelDataType ret;\n        ret = typeFactory.createSqlType(\n                        SqlTypeName.DECIMAL,\n                        precision,\n                        scale);\n\n        return ret;\n      }\n    }\n\n    return null;\n  }\n","date":"2020-11-30 06:45:33","endLine":257,"groupId":"101961","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"deriveDecimalMultiplyType","params":"(RelDataTypeFactorytypeFactory@RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/6095da7632e3d66349f47cf69e87f4c87a4591.src","preCode":"  default RelDataType deriveDecimalMultiplyType(RelDataTypeFactory typeFactory,\n      RelDataType type1, RelDataType type2) {\n    if (SqlTypeUtil.isExactNumeric(type1)\n            && SqlTypeUtil.isExactNumeric(type2)) {\n      if (SqlTypeUtil.isDecimal(type1)\n              || SqlTypeUtil.isDecimal(type2)) {\n        \r\n        \r\n        type1 = RelDataTypeFactoryImpl.isJavaType(type1)\n            ? typeFactory.decimalOf(type1)\n            : type1;\n        type2 = RelDataTypeFactoryImpl.isJavaType(type2)\n            ? typeFactory.decimalOf(type2)\n            : type2;\n        int p1 = type1.getPrecision();\n        int p2 = type2.getPrecision();\n        int s1 = type1.getScale();\n        int s2 = type2.getScale();\n\n        int scale = s1 + s2;\n        scale = Math.min(scale, getMaxNumericScale());\n        int precision = p1 + p2;\n        precision =\n                Math.min(\n                        precision,\n                        getMaxNumericPrecision());\n\n        RelDataType ret;\n        ret = typeFactory.createSqlType(\n                        SqlTypeName.DECIMAL,\n                        precision,\n                        scale);\n\n        return ret;\n      }\n    }\n\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystem.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
