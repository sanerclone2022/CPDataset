[{"authorTime":"2016-01-19 08:22:06","codes":[{"authorDate":"2016-01-19 08:22:06","commitOrder":1,"curCode":"  public Double getRowCount(Sort rel, RelMetadataQuery mq) {\n    Double rowCount = mq.getRowCount(rel.getInput());\n    if (rowCount == null) {\n      return null;\n    }\n    final int offset = rel.offset == null ? 0 : RexLiteral.intValue(rel.offset);\n    rowCount = Math.max(rowCount - offset, 0D);\n\n    if (rel.fetch != null) {\n      final int limit = RexLiteral.intValue(rel.fetch);\n      if (limit < rowCount) {\n        return (double) limit;\n      }\n    }\n    return rowCount;\n  }\n","date":"2016-02-25 05:37:49","endLine":150,"groupId":"11789","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getRowCount","params":"(Sortrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c9/113a14c38c091dbfa8ef3be4b09989ae6f5667.src","preCode":"  public Double getRowCount(Sort rel, RelMetadataQuery mq) {\n    Double rowCount = mq.getRowCount(rel.getInput());\n    if (rowCount == null) {\n      return null;\n    }\n    final int offset = rel.offset == null ? 0 : RexLiteral.intValue(rel.offset);\n    rowCount = Math.max(rowCount - offset, 0D);\n\n    if (rel.fetch != null) {\n      final int limit = RexLiteral.intValue(rel.fetch);\n      if (limit < rowCount) {\n        return (double) limit;\n      }\n    }\n    return rowCount;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"},{"authorDate":"2016-01-19 08:22:06","commitOrder":1,"curCode":"  public Double getRowCount(EnumerableLimit rel, RelMetadataQuery mq) {\n    Double rowCount = mq.getRowCount(rel.getInput());\n    if (rowCount == null) {\n      return null;\n    }\n    final int offset = rel.offset == null ? 0 : RexLiteral.intValue(rel.offset);\n    rowCount = Math.max(rowCount - offset, 0D);\n\n    if (rel.fetch != null) {\n      final int limit = RexLiteral.intValue(rel.fetch);\n      if (limit < rowCount) {\n        return (double) limit;\n      }\n    }\n    return rowCount;\n  }\n","date":"2016-02-25 05:37:49","endLine":167,"groupId":"11789","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getRowCount","params":"(EnumerableLimitrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c9/113a14c38c091dbfa8ef3be4b09989ae6f5667.src","preCode":"  public Double getRowCount(EnumerableLimit rel, RelMetadataQuery mq) {\n    Double rowCount = mq.getRowCount(rel.getInput());\n    if (rowCount == null) {\n      return null;\n    }\n    final int offset = rel.offset == null ? 0 : RexLiteral.intValue(rel.offset);\n    rowCount = Math.max(rowCount - offset, 0D);\n\n    if (rel.fetch != null) {\n      final int limit = RexLiteral.intValue(rel.fetch);\n      if (limit < rowCount) {\n        return (double) limit;\n      }\n    }\n    return rowCount;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"B"}],"commitId":"d14040c52f8b0bc351443cff1584e8b587378698","commitMessage":"@@@[CALCITE-604] Tune metadata by generating a dispatcher at runtime\n\nCurrently we dispatch to metadata providers using reflection. With\nthis change.  we generate a dispatcher class and compile using Janino.\n\nCache results within a metadata call. This should yield a performance\nimprovement when.  say.  a Join requires many kinds of metadata\n(rowCount.  averageRowSize.  selectivity) and they all rely on the\nrowCount of the input.  and that rowCount is expensive to compute.\n","date":"2016-02-25 05:37:49","modifiedFileCount":"34","status":"B","submitter":"Julian Hyde"},{"authorTime":"2017-11-21 15:59:20","codes":[{"authorDate":"2017-11-21 15:59:20","commitOrder":2,"curCode":"  public Double getRowCount(Sort rel, RelMetadataQuery mq) {\n    Double rowCount = mq.getRowCount(rel.getInput());\n    if (rowCount == null) {\n      return null;\n    }\n    if (rel.offset instanceof RexDynamicParam) {\n      return rowCount;\n    }\n    final int offset = rel.offset == null ? 0 : RexLiteral.intValue(rel.offset);\n    rowCount = Math.max(rowCount - offset, 0D);\n\n    if (rel.fetch != null) {\n      if (rel.fetch instanceof RexDynamicParam) {\n        return rowCount;\n      }\n      final int limit = RexLiteral.intValue(rel.fetch);\n      if (limit < rowCount) {\n        return (double) limit;\n      }\n    }\n    return rowCount;\n  }\n","date":"2017-11-27 11:42:36","endLine":157,"groupId":"14654","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getRowCount","params":"(Sortrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b5/f035b1a7e4574acfd9c583e7cdf00bb8f9bd68.src","preCode":"  public Double getRowCount(Sort rel, RelMetadataQuery mq) {\n    Double rowCount = mq.getRowCount(rel.getInput());\n    if (rowCount == null) {\n      return null;\n    }\n    final int offset = rel.offset == null ? 0 : RexLiteral.intValue(rel.offset);\n    rowCount = Math.max(rowCount - offset, 0D);\n\n    if (rel.fetch != null) {\n      final int limit = RexLiteral.intValue(rel.fetch);\n      if (limit < rowCount) {\n        return (double) limit;\n      }\n    }\n    return rowCount;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2017-11-21 15:59:20","commitOrder":2,"curCode":"  public Double getRowCount(EnumerableLimit rel, RelMetadataQuery mq) {\n    Double rowCount = mq.getRowCount(rel.getInput());\n    if (rowCount == null) {\n      return null;\n    }\n    if (rel.offset instanceof RexDynamicParam) {\n      return rowCount;\n    }\n    final int offset = rel.offset == null ? 0 : RexLiteral.intValue(rel.offset);\n    rowCount = Math.max(rowCount - offset, 0D);\n\n    if (rel.fetch != null) {\n      if (rel.fetch instanceof RexDynamicParam) {\n        return rowCount;\n      }\n      final int limit = RexLiteral.intValue(rel.fetch);\n      if (limit < rowCount) {\n        return (double) limit;\n      }\n    }\n    return rowCount;\n  }\n","date":"2017-11-27 11:42:36","endLine":180,"groupId":"14654","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getRowCount","params":"(EnumerableLimitrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b5/f035b1a7e4574acfd9c583e7cdf00bb8f9bd68.src","preCode":"  public Double getRowCount(EnumerableLimit rel, RelMetadataQuery mq) {\n    Double rowCount = mq.getRowCount(rel.getInput());\n    if (rowCount == null) {\n      return null;\n    }\n    final int offset = rel.offset == null ? 0 : RexLiteral.intValue(rel.offset);\n    rowCount = Math.max(rowCount - offset, 0D);\n\n    if (rel.fetch != null) {\n      final int limit = RexLiteral.intValue(rel.fetch);\n      if (limit < rowCount) {\n        return (double) limit;\n      }\n    }\n    return rowCount;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"a5d520df76602d25ed66627f08f5e0db4d048a77","commitMessage":"@@@[CALCITE-2061] Dynamic parameters in OFFSET.  FETCH and LIMIT clauses (Enrico Olivelli)\n\nFix how dynamic parameters are un-parsed (Julian Hyde)\n\nClose apache/calcite#569\n","date":"2017-11-27 11:42:36","modifiedFileCount":"12","status":"M","submitter":"Enrico Olivelli"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  public @Nullable Double getRowCount(Sort rel, RelMetadataQuery mq) {\n    Double rowCount = mq.getRowCount(rel.getInput());\n    if (rowCount == null) {\n      return null;\n    }\n    if (rel.offset instanceof RexDynamicParam) {\n      return rowCount;\n    }\n    final int offset = rel.offset == null ? 0 : RexLiteral.intValue(rel.offset);\n    rowCount = Math.max(rowCount - offset, 0D);\n\n    if (rel.fetch != null) {\n      if (rel.fetch instanceof RexDynamicParam) {\n        return rowCount;\n      }\n      final int limit = RexLiteral.intValue(rel.fetch);\n      if (limit < rowCount) {\n        return (double) limit;\n      }\n    }\n    return rowCount;\n  }\n","date":"2020-11-30 06:45:33","endLine":167,"groupId":"111953","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"getRowCount","params":"(Sortrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/52/8fa8d5f2034169756cadc53de59c604fb9bbd1.src","preCode":"  public Double getRowCount(Sort rel, RelMetadataQuery mq) {\n    Double rowCount = mq.getRowCount(rel.getInput());\n    if (rowCount == null) {\n      return null;\n    }\n    if (rel.offset instanceof RexDynamicParam) {\n      return rowCount;\n    }\n    final int offset = rel.offset == null ? 0 : RexLiteral.intValue(rel.offset);\n    rowCount = Math.max(rowCount - offset, 0D);\n\n    if (rel.fetch != null) {\n      if (rel.fetch instanceof RexDynamicParam) {\n        return rowCount;\n      }\n      final int limit = RexLiteral.intValue(rel.fetch);\n      if (limit < rowCount) {\n        return (double) limit;\n      }\n    }\n    return rowCount;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  public @Nullable Double getRowCount(EnumerableLimit rel, RelMetadataQuery mq) {\n    Double rowCount = mq.getRowCount(rel.getInput());\n    if (rowCount == null) {\n      return null;\n    }\n    if (rel.offset instanceof RexDynamicParam) {\n      return rowCount;\n    }\n    final int offset = rel.offset == null ? 0 : RexLiteral.intValue(rel.offset);\n    rowCount = Math.max(rowCount - offset, 0D);\n\n    if (rel.fetch != null) {\n      if (rel.fetch instanceof RexDynamicParam) {\n        return rowCount;\n      }\n      final int limit = RexLiteral.intValue(rel.fetch);\n      if (limit < rowCount) {\n        return (double) limit;\n      }\n    }\n    return rowCount;\n  }\n","date":"2020-11-30 06:45:33","endLine":190,"groupId":"111953","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"getRowCount","params":"(EnumerableLimitrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/52/8fa8d5f2034169756cadc53de59c604fb9bbd1.src","preCode":"  public Double getRowCount(EnumerableLimit rel, RelMetadataQuery mq) {\n    Double rowCount = mq.getRowCount(rel.getInput());\n    if (rowCount == null) {\n      return null;\n    }\n    if (rel.offset instanceof RexDynamicParam) {\n      return rowCount;\n    }\n    final int offset = rel.offset == null ? 0 : RexLiteral.intValue(rel.offset);\n    rowCount = Math.max(rowCount - offset, 0D);\n\n    if (rel.fetch != null) {\n      if (rel.fetch instanceof RexDynamicParam) {\n        return rowCount;\n      }\n      final int limit = RexLiteral.intValue(rel.fetch);\n      if (limit < rowCount) {\n        return (double) limit;\n      }\n    }\n    return rowCount;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
