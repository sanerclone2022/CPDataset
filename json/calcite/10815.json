[{"authorTime":"2017-11-07 08:03:13","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testCountFunc() {\n    tester.setFor(SqlStdOperatorTable.COUNT, VM_EXPAND);\n    tester.checkType(\"count(*)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count('name')\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1.2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"COUNT(DISTINCT 'x')\", \"BIGINT NOT NULL\");\n    tester.checkFails(\n        \"^COUNT()^\",\n        \"Invalid number of arguments to function 'COUNT'. Was expecting 1 arguments\",\n        false);\n    tester.checkType(\"count(1, 2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1, 2, 'x', 'y')\", \"BIGINT NOT NULL\");\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"1\", \"0\"};\n    tester.checkAgg(\n        \"COUNT(x)\",\n        values,\n        3,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        2,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(DISTINCT x)\",\n        values,\n        2,\n        (double) 0);\n\n    \r\n    final String[] stringValues = {\n      \"'a'\", \"CAST(NULL AS VARCHAR(1))\", \"''\"\n    };\n    tester.checkAgg(\n        \"COUNT(*)\",\n        stringValues,\n        3,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(x)\",\n        stringValues,\n        2,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(DISTINCT x)\",\n        stringValues,\n        2,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(DISTINCT 123)\",\n        stringValues,\n        1,\n        (double) 0);\n  }\n","date":"2014-11-14 09:39:34","endLine":4397,"groupId":"16355","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCountFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCountFunc() {\n    tester.setFor(SqlStdOperatorTable.COUNT, VM_EXPAND);\n    tester.checkType(\"count(*)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count('name')\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1.2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"COUNT(DISTINCT 'x')\", \"BIGINT NOT NULL\");\n    tester.checkFails(\n        \"^COUNT()^\",\n        \"Invalid number of arguments to function 'COUNT'. Was expecting 1 arguments\",\n        false);\n    tester.checkType(\"count(1, 2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1, 2, 'x', 'y')\", \"BIGINT NOT NULL\");\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"1\", \"0\"};\n    tester.checkAgg(\n        \"COUNT(x)\",\n        values,\n        3,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        2,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(DISTINCT x)\",\n        values,\n        2,\n        (double) 0);\n\n    \r\n    final String[] stringValues = {\n      \"'a'\", \"CAST(NULL AS VARCHAR(1))\", \"''\"\n    };\n    tester.checkAgg(\n        \"COUNT(*)\",\n        stringValues,\n        3,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(x)\",\n        stringValues,\n        2,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(DISTINCT x)\",\n        stringValues,\n        2,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(DISTINCT 123)\",\n        stringValues,\n        1,\n        (double) 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4343,"status":"NB"},{"authorDate":"2017-11-07 08:03:13","commitOrder":2,"curCode":"  @Test public void testApproxCountDistinctFunc() {\n    tester.setFor(SqlStdOperatorTable.COUNT, VM_EXPAND);\n    tester.checkFails(\"approx_count_distinct(^*^)\", \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"approx_count_distinct('name')\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1.2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"APPROX_COUNT_DISTINCT(DISTINCT 'x')\", \"BIGINT NOT NULL\");\n    tester.checkFails(\"^APPROX_COUNT_DISTINCT()^\",\n        \"Invalid number of arguments to function 'APPROX_COUNT_DISTINCT'. \"\n            + \"Was expecting 1 arguments\",\n        false);\n    tester.checkType(\"approx_count_distinct(1, 2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1, 2, 'x', 'y')\",\n        \"BIGINT NOT NULL\");\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"1\", \"0\"};\n    \r\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(x)\",\n        values,\n        2,\n        (double) 0);\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        1,\n        (double) 0);\n    \r\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(DISTINCT x)\",\n        values,\n        2,\n        (double) 0);\n\n    \r\n    final String[] stringValues = {\n        \"'a'\", \"CAST(NULL AS VARCHAR(1))\", \"''\"\n    };\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(x)\", stringValues, 2, (double) 0);\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT x)\", stringValues, 2,\n        (double) 0);\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT 123)\", stringValues, 1,\n        (double) 0);\n  }\n","date":"2017-11-09 00:41:32","endLine":6249,"groupId":"6313","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testApproxCountDistinctFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8b/d922a8d0b1bf77a41c41b5b6424bc52b012dfb.src","preCode":"  @Test public void testApproxCountDistinctFunc() {\n    tester.setFor(SqlStdOperatorTable.COUNT, VM_EXPAND);\n    tester.checkFails(\"approx_count_distinct(^*^)\", \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"approx_count_distinct('name')\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1.2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"APPROX_COUNT_DISTINCT(DISTINCT 'x')\", \"BIGINT NOT NULL\");\n    tester.checkFails(\"^APPROX_COUNT_DISTINCT()^\",\n        \"Invalid number of arguments to function 'APPROX_COUNT_DISTINCT'. \"\n            + \"Was expecting 1 arguments\",\n        false);\n    tester.checkType(\"approx_count_distinct(1, 2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1, 2, 'x', 'y')\",\n        \"BIGINT NOT NULL\");\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"1\", \"0\"};\n    \r\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(x)\",\n        values,\n        2,\n        (double) 0);\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        1,\n        (double) 0);\n    \r\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(DISTINCT x)\",\n        values,\n        2,\n        (double) 0);\n\n    \r\n    final String[] stringValues = {\n        \"'a'\", \"CAST(NULL AS VARCHAR(1))\", \"''\"\n    };\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(x)\", stringValues, 2, (double) 0);\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT x)\", stringValues, 2,\n        (double) 0);\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT 123)\", stringValues, 1,\n        (double) 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6206,"status":"B"}],"commitId":"fe3529d9a6d4d826c6e77fc4c0d7d18bd681bb85","commitMessage":"@@@[CALCITE-2035] Allow approximate aggregate functions.  and add APPROX_COUNT_DISTINCT\n\nThere are changes to RelBuilder and AggregateCall APIs.  but extensions\nto SQL grammar will not happen until [CALCITE-1588].\n\nIn Druid adapter.  HyperLogLog will be used if the call is to\nAPPROX_COUNT_DISTINCT or if approximateDistinctCount=true in connection\nproperties.\n","date":"2017-11-09 00:41:32","modifiedFileCount":"29","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testCountFunc() {\n    tester.setFor(SqlStdOperatorTable.COUNT, VM_EXPAND);\n    tester.checkType(\"count(*)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count('name')\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1.2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"COUNT(DISTINCT 'x')\", \"BIGINT NOT NULL\");\n    tester.checkFails(\n        \"^COUNT()^\",\n        \"Invalid number of arguments to function 'COUNT'. Was expecting 1 arguments\",\n        false);\n    tester.checkType(\"count(1, 2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1, 2, 'x', 'y')\", \"BIGINT NOT NULL\");\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"1\", \"0\"};\n    tester.checkAgg(\n        \"COUNT(x)\",\n        values,\n        3,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        2,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(DISTINCT x)\",\n        values,\n        2,\n        (double) 0);\n\n    \r\n    final String[] stringValues = {\n        \"'a'\", \"CAST(NULL AS VARCHAR(1))\", \"''\"\n    };\n    tester.checkAgg(\"COUNT(*)\", stringValues, 3, (double) 0);\n    tester.checkAgg(\"COUNT(x)\", stringValues, 2, (double) 0);\n    tester.checkAgg(\"COUNT(DISTINCT x)\", stringValues, 2, (double) 0);\n    tester.checkAgg(\"COUNT(DISTINCT 123)\", stringValues, 1, (double) 0);\n  }\n","date":"2020-04-06 04:57:49","endLine":8398,"groupId":"16355","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCountFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testCountFunc() {\n    tester.setFor(SqlStdOperatorTable.COUNT, VM_EXPAND);\n    tester.checkType(\"count(*)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count('name')\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1.2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"COUNT(DISTINCT 'x')\", \"BIGINT NOT NULL\");\n    tester.checkFails(\n        \"^COUNT()^\",\n        \"Invalid number of arguments to function 'COUNT'. Was expecting 1 arguments\",\n        false);\n    tester.checkType(\"count(1, 2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1, 2, 'x', 'y')\", \"BIGINT NOT NULL\");\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"1\", \"0\"};\n    tester.checkAgg(\n        \"COUNT(x)\",\n        values,\n        3,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        2,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(DISTINCT x)\",\n        values,\n        2,\n        (double) 0);\n\n    \r\n    final String[] stringValues = {\n        \"'a'\", \"CAST(NULL AS VARCHAR(1))\", \"''\"\n    };\n    tester.checkAgg(\"COUNT(*)\", stringValues, 3, (double) 0);\n    tester.checkAgg(\"COUNT(x)\", stringValues, 2, (double) 0);\n    tester.checkAgg(\"COUNT(DISTINCT x)\", stringValues, 2, (double) 0);\n    tester.checkAgg(\"COUNT(DISTINCT 123)\", stringValues, 1, (double) 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8360,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testApproxCountDistinctFunc() {\n    tester.setFor(SqlStdOperatorTable.COUNT, VM_EXPAND);\n    tester.checkFails(\"approx_count_distinct(^*^)\", \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"approx_count_distinct('name')\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1.2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"APPROX_COUNT_DISTINCT(DISTINCT 'x')\", \"BIGINT NOT NULL\");\n    tester.checkFails(\"^APPROX_COUNT_DISTINCT()^\",\n        \"Invalid number of arguments to function 'APPROX_COUNT_DISTINCT'. \"\n            + \"Was expecting 1 arguments\",\n        false);\n    tester.checkType(\"approx_count_distinct(1, 2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1, 2, 'x', 'y')\",\n        \"BIGINT NOT NULL\");\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"1\", \"0\"};\n    \r\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(x)\",\n        values,\n        2,\n        (double) 0);\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        1,\n        (double) 0);\n    \r\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(DISTINCT x)\",\n        values,\n        2,\n        (double) 0);\n\n    \r\n    final String[] stringValues = {\n        \"'a'\", \"CAST(NULL AS VARCHAR(1))\", \"''\"\n    };\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(x)\", stringValues, 2, (double) 0);\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT x)\", stringValues, 2,\n        (double) 0);\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT 123)\", stringValues, 1,\n        (double) 0);\n  }\n","date":"2020-04-06 04:57:49","endLine":8443,"groupId":"6313","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testApproxCountDistinctFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testApproxCountDistinctFunc() {\n    tester.setFor(SqlStdOperatorTable.COUNT, VM_EXPAND);\n    tester.checkFails(\"approx_count_distinct(^*^)\", \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"approx_count_distinct('name')\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1.2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"APPROX_COUNT_DISTINCT(DISTINCT 'x')\", \"BIGINT NOT NULL\");\n    tester.checkFails(\"^APPROX_COUNT_DISTINCT()^\",\n        \"Invalid number of arguments to function 'APPROX_COUNT_DISTINCT'. \"\n            + \"Was expecting 1 arguments\",\n        false);\n    tester.checkType(\"approx_count_distinct(1, 2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1, 2, 'x', 'y')\",\n        \"BIGINT NOT NULL\");\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"1\", \"0\"};\n    \r\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(x)\",\n        values,\n        2,\n        (double) 0);\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        1,\n        (double) 0);\n    \r\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(DISTINCT x)\",\n        values,\n        2,\n        (double) 0);\n\n    \r\n    final String[] stringValues = {\n        \"'a'\", \"CAST(NULL AS VARCHAR(1))\", \"''\"\n    };\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(x)\", stringValues, 2, (double) 0);\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT x)\", stringValues, 2,\n        (double) 0);\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT 123)\", stringValues, 1,\n        (double) 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8400,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-10-20 13:55:40","codes":[{"authorDate":"2020-10-20 13:55:40","commitOrder":4,"curCode":"  @Test void testCountFunc() {\n    tester.setFor(SqlStdOperatorTable.COUNT, VM_EXPAND);\n    tester.checkType(\"count(*)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count('name')\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1.2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"COUNT(DISTINCT 'x')\", \"BIGINT NOT NULL\");\n    tester.checkFails(\n        \"^COUNT()^\",\n        \"Invalid number of arguments to function 'COUNT'. Was expecting 1 arguments\",\n        false);\n    tester.checkType(\"count(1, 2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1, 2, 'x', 'y')\", \"BIGINT NOT NULL\");\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"1\", \"0\"};\n    tester.checkAgg(\"COUNT(x)\", values, 3, 0d);\n    tester.checkAgg(\"COUNT(CASE x WHEN 0 THEN NULL ELSE -1 END)\", values, 2,\n        0d);\n    tester.checkAgg(\"COUNT(DISTINCT x)\", values, 2, 0d);\n\n    \r\n    final String[] stringValues = {\n        \"'a'\", \"CAST(NULL AS VARCHAR(1))\", \"''\"\n    };\n    tester.checkAgg(\"COUNT(*)\", stringValues, 3, 0d);\n    tester.checkAgg(\"COUNT(x)\", stringValues, 2, 0d);\n    tester.checkAgg(\"COUNT(DISTINCT x)\", stringValues, 2, 0d);\n    tester.checkAgg(\"COUNT(DISTINCT 123)\", stringValues, 1, 0d);\n  }\n","date":"2020-10-23 05:29:41","endLine":8585,"groupId":"10815","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCountFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/28de56457f65dd207ff08b2f37dc16482e3cb5.src","preCode":"  @Test void testCountFunc() {\n    tester.setFor(SqlStdOperatorTable.COUNT, VM_EXPAND);\n    tester.checkType(\"count(*)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count('name')\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1.2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"COUNT(DISTINCT 'x')\", \"BIGINT NOT NULL\");\n    tester.checkFails(\n        \"^COUNT()^\",\n        \"Invalid number of arguments to function 'COUNT'. Was expecting 1 arguments\",\n        false);\n    tester.checkType(\"count(1, 2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"count(1, 2, 'x', 'y')\", \"BIGINT NOT NULL\");\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"1\", \"0\"};\n    tester.checkAgg(\n        \"COUNT(x)\",\n        values,\n        3,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        2,\n        (double) 0);\n    tester.checkAgg(\n        \"COUNT(DISTINCT x)\",\n        values,\n        2,\n        (double) 0);\n\n    \r\n    final String[] stringValues = {\n        \"'a'\", \"CAST(NULL AS VARCHAR(1))\", \"''\"\n    };\n    tester.checkAgg(\"COUNT(*)\", stringValues, 3, (double) 0);\n    tester.checkAgg(\"COUNT(x)\", stringValues, 2, (double) 0);\n    tester.checkAgg(\"COUNT(DISTINCT x)\", stringValues, 2, (double) 0);\n    tester.checkAgg(\"COUNT(DISTINCT 123)\", stringValues, 1, (double) 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8558,"status":"M"},{"authorDate":"2020-10-20 13:55:40","commitOrder":4,"curCode":"  @Test void testApproxCountDistinctFunc() {\n    tester.setFor(SqlStdOperatorTable.COUNT, VM_EXPAND);\n    tester.checkFails(\"approx_count_distinct(^*^)\", \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"approx_count_distinct('name')\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1.2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"APPROX_COUNT_DISTINCT(DISTINCT 'x')\", \"BIGINT NOT NULL\");\n    tester.checkFails(\"^APPROX_COUNT_DISTINCT()^\",\n        \"Invalid number of arguments to function 'APPROX_COUNT_DISTINCT'. \"\n            + \"Was expecting 1 arguments\",\n        false);\n    tester.checkType(\"approx_count_distinct(1, 2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1, 2, 'x', 'y')\",\n        \"BIGINT NOT NULL\");\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"1\", \"0\"};\n    \r\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(x)\", values, 2, 0d);\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values, 1, 0d);\n    \r\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT x)\", values, 2, 0d);\n\n    \r\n    final String[] stringValues = {\n        \"'a'\", \"CAST(NULL AS VARCHAR(1))\", \"''\"\n    };\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(x)\", stringValues, 2, 0d);\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT x)\", stringValues, 2, 0d);\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT 123)\", stringValues, 1, 0d);\n  }\n","date":"2020-10-23 05:29:41","endLine":8618,"groupId":"10815","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testApproxCountDistinctFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/28de56457f65dd207ff08b2f37dc16482e3cb5.src","preCode":"  @Test void testApproxCountDistinctFunc() {\n    tester.setFor(SqlStdOperatorTable.COUNT, VM_EXPAND);\n    tester.checkFails(\"approx_count_distinct(^*^)\", \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"approx_count_distinct('name')\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1.2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"APPROX_COUNT_DISTINCT(DISTINCT 'x')\", \"BIGINT NOT NULL\");\n    tester.checkFails(\"^APPROX_COUNT_DISTINCT()^\",\n        \"Invalid number of arguments to function 'APPROX_COUNT_DISTINCT'. \"\n            + \"Was expecting 1 arguments\",\n        false);\n    tester.checkType(\"approx_count_distinct(1, 2)\", \"BIGINT NOT NULL\");\n    tester.checkType(\"approx_count_distinct(1, 2, 'x', 'y')\",\n        \"BIGINT NOT NULL\");\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"1\", \"0\"};\n    \r\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(x)\",\n        values,\n        2,\n        (double) 0);\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        1,\n        (double) 0);\n    \r\n    tester.checkAgg(\n        \"APPROX_COUNT_DISTINCT(DISTINCT x)\",\n        values,\n        2,\n        (double) 0);\n\n    \r\n    final String[] stringValues = {\n        \"'a'\", \"CAST(NULL AS VARCHAR(1))\", \"''\"\n    };\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(x)\", stringValues, 2, (double) 0);\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT x)\", stringValues, 2,\n        (double) 0);\n    tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT 123)\", stringValues, 1,\n        (double) 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8587,"status":"M"}],"commitId":"3038fb7e87c51740ef733fd4f9bde41b0c25e5b0","commitMessage":"@@@[CALCITE-4335] ARRAY_AGG.  ARRAY_CONCAT_AGG.  STRING_AGG aggregate functions for BigQuery\n","date":"2020-10-23 05:29:41","modifiedFileCount":"24","status":"M","submitter":"Julian Hyde"}]
