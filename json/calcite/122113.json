[{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"    @Override public RelNode convert(RelNode rel) {\n      final LogicalTableModify modify =\n          (LogicalTableModify) rel;\n      final ModifiableTable modifiableTable =\n          modify.getTable().unwrap(ModifiableTable.class);\n      if (modifiableTable == null\n          ) {\n        return null;\n      }\n      final RelTraitSet traitSet =\n          modify.getTraitSet().replace(out);\n      return new JdbcTableModify(\n          modify.getCluster(), traitSet,\n          modify.getTable(),\n          modify.getCatalogReader(),\n          convert(modify.getInput(), traitSet),\n          modify.getOperation(),\n          modify.getUpdateColumnList(),\n          modify.isFlattened());\n    }\n","date":"2014-11-14 10:22:06","endLine":847,"groupId":"13691","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f7/93a436f11f4263d34b8874428b28afd62587de.src","preCode":"    @Override public RelNode convert(RelNode rel) {\n      final LogicalTableModify modify =\n          (LogicalTableModify) rel;\n      final ModifiableTable modifiableTable =\n          modify.getTable().unwrap(ModifiableTable.class);\n      if (modifiableTable == null\n          ) {\n        return null;\n      }\n      final RelTraitSet traitSet =\n          modify.getTraitSet().replace(out);\n      return new JdbcTableModify(\n          modify.getCluster(), traitSet,\n          modify.getTable(),\n          modify.getCatalogReader(),\n          convert(modify.getInput(), traitSet),\n          modify.getOperation(),\n          modify.getUpdateColumnList(),\n          modify.isFlattened());\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":828,"status":"MB"},{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Override public RelNode convert(RelNode rel) {\n    final LogicalTableModify modify =\n        (LogicalTableModify) rel;\n    final ModifiableTable modifiableTable =\n        modify.getTable().unwrap(ModifiableTable.class);\n    if (modifiableTable == null) {\n      return null;\n    }\n    final RelTraitSet traitSet =\n        modify.getTraitSet().replace(EnumerableConvention.INSTANCE);\n    return new EnumerableTableModify(\n        modify.getCluster(), traitSet,\n        modify.getTable(),\n        modify.getCatalogReader(),\n        convert(modify.getInput(), traitSet),\n        modify.getOperation(),\n        modify.getUpdateColumnList(),\n        modify.isFlattened());\n  }\n","date":"2014-11-14 10:22:06","endLine":54,"groupId":"11584","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/11/c6f2c432f4f87a0bc0c6846964e951040de075.src","preCode":"  @Override public RelNode convert(RelNode rel) {\n    final LogicalTableModify modify =\n        (LogicalTableModify) rel;\n    final ModifiableTable modifiableTable =\n        modify.getTable().unwrap(ModifiableTable.class);\n    if (modifiableTable == null) {\n      return null;\n    }\n    final RelTraitSet traitSet =\n        modify.getTraitSet().replace(EnumerableConvention.INSTANCE);\n    return new EnumerableTableModify(\n        modify.getCluster(), traitSet,\n        modify.getTable(),\n        modify.getCatalogReader(),\n        convert(modify.getInput(), traitSet),\n        modify.getOperation(),\n        modify.getUpdateColumnList(),\n        modify.isFlattened());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"}],"commitId":"a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55","commitMessage":"@@@[CALCITE-306] Standardize code style for \"import package.*;\"\n\nRename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].\n\nMake many inner classes of EnumerableRules (e.g. EnumerableFilter.  EnumerableFilterRule) top-level classes.\n\nApply a consistent formatting convention for string literals split over multiple lines.\n\nRename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.\n\nChange occurrences of \"optiq\" and \"eigenbase\" in java code to \"calcite\".\n","date":"2014-11-14 10:22:06","modifiedFileCount":"1156","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-12-05 00:41:32","codes":[{"authorDate":"2016-12-05 00:41:32","commitOrder":3,"curCode":"    @Override public RelNode convert(RelNode rel) {\n      final LogicalTableModify modify =\n          (LogicalTableModify) rel;\n      final ModifiableTable modifiableTable =\n          modify.getTable().unwrap(ModifiableTable.class);\n      if (modifiableTable == null\n          ) {\n        return null;\n      }\n      final RelTraitSet traitSet =\n          modify.getTraitSet().replace(out);\n      return new JdbcTableModify(\n          modify.getCluster(), traitSet,\n          modify.getTable(),\n          modify.getCatalogReader(),\n          convert(modify.getInput(), traitSet),\n          modify.getOperation(),\n          modify.getUpdateColumnList(),\n          modify.getSourceExpressionList(),\n          modify.isFlattened());\n    }\n","date":"2016-12-08 00:34:46","endLine":734,"groupId":"13691","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/88/5ff0c2d348c57e350647e9cebb3c1cc3540584.src","preCode":"    @Override public RelNode convert(RelNode rel) {\n      final LogicalTableModify modify =\n          (LogicalTableModify) rel;\n      final ModifiableTable modifiableTable =\n          modify.getTable().unwrap(ModifiableTable.class);\n      if (modifiableTable == null\n          ) {\n        return null;\n      }\n      final RelTraitSet traitSet =\n          modify.getTraitSet().replace(out);\n      return new JdbcTableModify(\n          modify.getCluster(), traitSet,\n          modify.getTable(),\n          modify.getCatalogReader(),\n          convert(modify.getInput(), traitSet),\n          modify.getOperation(),\n          modify.getUpdateColumnList(),\n          modify.isFlattened());\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":714,"status":"M"},{"authorDate":"2016-12-05 00:41:32","commitOrder":3,"curCode":"  @Override public RelNode convert(RelNode rel) {\n    final LogicalTableModify modify =\n        (LogicalTableModify) rel;\n    final ModifiableTable modifiableTable =\n        modify.getTable().unwrap(ModifiableTable.class);\n    if (modifiableTable == null) {\n      return null;\n    }\n    final RelTraitSet traitSet =\n        modify.getTraitSet().replace(EnumerableConvention.INSTANCE);\n    return new EnumerableTableModify(\n        modify.getCluster(), traitSet,\n        modify.getTable(),\n        modify.getCatalogReader(),\n        convert(modify.getInput(), traitSet),\n        modify.getOperation(),\n        modify.getUpdateColumnList(),\n        modify.getSourceExpressionList(),\n        modify.isFlattened());\n  }\n","date":"2016-12-08 00:34:46","endLine":55,"groupId":"11584","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/32/1115f29e055834c8ba9bfc50a6ebc66bbbfb80.src","preCode":"  @Override public RelNode convert(RelNode rel) {\n    final LogicalTableModify modify =\n        (LogicalTableModify) rel;\n    final ModifiableTable modifiableTable =\n        modify.getTable().unwrap(ModifiableTable.class);\n    if (modifiableTable == null) {\n      return null;\n    }\n    final RelTraitSet traitSet =\n        modify.getTraitSet().replace(EnumerableConvention.INSTANCE);\n    return new EnumerableTableModify(\n        modify.getCluster(), traitSet,\n        modify.getTable(),\n        modify.getCatalogReader(),\n        convert(modify.getInput(), traitSet),\n        modify.getOperation(),\n        modify.getUpdateColumnList(),\n        modify.isFlattened());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"02752fe78f817ed317b8873d2f4c7b79bfe8b9b5","commitMessage":"@@@[CALCITE-1527] Support DML in the JDBC adapter (Christian Tzolov)\n\nExtend CalcisteAssert to verify DML statements;\nResolve the RowType for SqlNode UPDATE consistently with the INSERT and DELETE;\nAdd field sourceExpressionList field to TableModify;\nImplement DML for JDBC Adapter (i.e. DmlRel-To-Sql);\nMake sure the ResultSetEnumerable keeps the statment/connection open.\n\nUse same code path for INSERT ... VALUES and INSERT ... SELECT;\nfix pretty-printing of INSERT ... VALUES (Julian Hyde).\n","date":"2016-12-08 00:34:46","modifiedFileCount":"28","status":"M","submitter":"Christian Tzolov"},{"authorTime":"2016-12-05 00:41:32","codes":[{"authorDate":"2017-12-18 21:30:55","commitOrder":4,"curCode":"    @Override public RelNode convert(RelNode rel) {\n      final TableModify modify =\n          (TableModify) rel;\n      final ModifiableTable modifiableTable =\n          modify.getTable().unwrap(ModifiableTable.class);\n      if (modifiableTable == null) {\n        return null;\n      }\n      final RelTraitSet traitSet =\n          modify.getTraitSet().replace(out);\n      return new JdbcTableModify(\n          modify.getCluster(), traitSet,\n          modify.getTable(),\n          modify.getCatalogReader(),\n          convert(modify.getInput(), traitSet),\n          modify.getOperation(),\n          modify.getUpdateColumnList(),\n          modify.getSourceExpressionList(),\n          modify.isFlattened());\n    }\n","date":"2018-02-17 02:18:01","endLine":729,"groupId":"13691","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/44/f9c0945610ad4553272a2a685191fdcbd999fd.src","preCode":"    @Override public RelNode convert(RelNode rel) {\n      final LogicalTableModify modify =\n          (LogicalTableModify) rel;\n      final ModifiableTable modifiableTable =\n          modify.getTable().unwrap(ModifiableTable.class);\n      if (modifiableTable == null\n          ) {\n        return null;\n      }\n      final RelTraitSet traitSet =\n          modify.getTraitSet().replace(out);\n      return new JdbcTableModify(\n          modify.getCluster(), traitSet,\n          modify.getTable(),\n          modify.getCatalogReader(),\n          convert(modify.getInput(), traitSet),\n          modify.getOperation(),\n          modify.getUpdateColumnList(),\n          modify.getSourceExpressionList(),\n          modify.isFlattened());\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":710,"status":"M"},{"authorDate":"2016-12-05 00:41:32","commitOrder":4,"curCode":"  @Override public RelNode convert(RelNode rel) {\n    final LogicalTableModify modify =\n        (LogicalTableModify) rel;\n    final ModifiableTable modifiableTable =\n        modify.getTable().unwrap(ModifiableTable.class);\n    if (modifiableTable == null) {\n      return null;\n    }\n    final RelTraitSet traitSet =\n        modify.getTraitSet().replace(EnumerableConvention.INSTANCE);\n    return new EnumerableTableModify(\n        modify.getCluster(), traitSet,\n        modify.getTable(),\n        modify.getCatalogReader(),\n        convert(modify.getInput(), traitSet),\n        modify.getOperation(),\n        modify.getUpdateColumnList(),\n        modify.getSourceExpressionList(),\n        modify.isFlattened());\n  }\n","date":"2016-12-08 00:34:46","endLine":55,"groupId":"11584","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/32/1115f29e055834c8ba9bfc50a6ebc66bbbfb80.src","preCode":"  @Override public RelNode convert(RelNode rel) {\n    final LogicalTableModify modify =\n        (LogicalTableModify) rel;\n    final ModifiableTable modifiableTable =\n        modify.getTable().unwrap(ModifiableTable.class);\n    if (modifiableTable == null) {\n      return null;\n    }\n    final RelTraitSet traitSet =\n        modify.getTraitSet().replace(EnumerableConvention.INSTANCE);\n    return new EnumerableTableModify(\n        modify.getCluster(), traitSet,\n        modify.getTable(),\n        modify.getCatalogReader(),\n        convert(modify.getInput(), traitSet),\n        modify.getOperation(),\n        modify.getUpdateColumnList(),\n        modify.getSourceExpressionList(),\n        modify.isFlattened());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"N"}],"commitId":"facd83d311098dd3f35294ba969a19cbf6d54467","commitMessage":"@@@[CALCITE-2128] Add SQL dialect for Jethro Data (Jonathan Doron)\n\nBefore creating a JethroDataSqlDialect.  SqlDialectFactoryImpl issues a\n\"show functions extended\" command to Jethro.  storing the results in a\ncache for next time.  and passes the list of supported functions to the\ndialect.\n\nClose apache/calcite#602\n","date":"2018-02-17 02:18:01","modifiedFileCount":"9","status":"M","submitter":"msydoron"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"    @Override public @Nullable RelNode convert(RelNode rel) {\n      final TableModify modify =\n          (TableModify) rel;\n      final ModifiableTable modifiableTable =\n          modify.getTable().unwrap(ModifiableTable.class);\n      if (modifiableTable == null) {\n        return null;\n      }\n      final RelTraitSet traitSet =\n          modify.getTraitSet().replace(out);\n      return new JdbcTableModify(\n          modify.getCluster(), traitSet,\n          modify.getTable(),\n          modify.getCatalogReader(),\n          convert(modify.getInput(), traitSet),\n          modify.getOperation(),\n          modify.getUpdateColumnList(),\n          modify.getSourceExpressionList(),\n          modify.isFlattened());\n    }\n","date":"2020-11-30 06:45:33","endLine":1025,"groupId":"13691","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6a/ed23c58e84f4cbbb3c9821b817c1b4ade0fea9.src","preCode":"    @Override public RelNode convert(RelNode rel) {\n      final TableModify modify =\n          (TableModify) rel;\n      final ModifiableTable modifiableTable =\n          modify.getTable().unwrap(ModifiableTable.class);\n      if (modifiableTable == null) {\n        return null;\n      }\n      final RelTraitSet traitSet =\n          modify.getTraitSet().replace(out);\n      return new JdbcTableModify(\n          modify.getCluster(), traitSet,\n          modify.getTable(),\n          modify.getCatalogReader(),\n          convert(modify.getInput(), traitSet),\n          modify.getOperation(),\n          modify.getUpdateColumnList(),\n          modify.getSourceExpressionList(),\n          modify.isFlattened());\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1006,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  @Override public @Nullable RelNode convert(RelNode rel) {\n    final LogicalTableModify modify =\n        (LogicalTableModify) rel;\n    final ModifiableTable modifiableTable =\n        modify.getTable().unwrap(ModifiableTable.class);\n    if (modifiableTable == null) {\n      return null;\n    }\n    final RelTraitSet traitSet =\n        modify.getTraitSet().replace(EnumerableConvention.INSTANCE);\n    return new EnumerableTableModify(\n        modify.getCluster(), traitSet,\n        modify.getTable(),\n        modify.getCatalogReader(),\n        convert(modify.getInput(), traitSet),\n        modify.getOperation(),\n        modify.getUpdateColumnList(),\n        modify.getSourceExpressionList(),\n        modify.isFlattened());\n  }\n","date":"2020-11-30 06:45:33","endLine":64,"groupId":"11584","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/76/8d0a0e862737182b786dfff2fc19a5189654ef.src","preCode":"  @Override public RelNode convert(RelNode rel) {\n    final LogicalTableModify modify =\n        (LogicalTableModify) rel;\n    final ModifiableTable modifiableTable =\n        modify.getTable().unwrap(ModifiableTable.class);\n    if (modifiableTable == null) {\n      return null;\n    }\n    final RelTraitSet traitSet =\n        modify.getTraitSet().replace(EnumerableConvention.INSTANCE);\n    return new EnumerableTableModify(\n        modify.getCluster(), traitSet,\n        modify.getTable(),\n        modify.getCatalogReader(),\n        convert(modify.getInput(), traitSet),\n        modify.getOperation(),\n        modify.getUpdateColumnList(),\n        modify.getSourceExpressionList(),\n        modify.isFlattened());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2021-01-25 21:44:11","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"    @Override public @Nullable RelNode convert(RelNode rel) {\n      final TableModify modify =\n          (TableModify) rel;\n      final ModifiableTable modifiableTable =\n          modify.getTable().unwrap(ModifiableTable.class);\n      if (modifiableTable == null) {\n        return null;\n      }\n      final RelTraitSet traitSet =\n          modify.getTraitSet().replace(out);\n      return new JdbcTableModify(\n          modify.getCluster(), traitSet,\n          modify.getTable(),\n          modify.getCatalogReader(),\n          convert(modify.getInput(), traitSet),\n          modify.getOperation(),\n          modify.getUpdateColumnList(),\n          modify.getSourceExpressionList(),\n          modify.isFlattened());\n    }\n","date":"2020-11-30 06:45:33","endLine":1025,"groupId":"122113","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6a/ed23c58e84f4cbbb3c9821b817c1b4ade0fea9.src","preCode":"    @Override public @Nullable RelNode convert(RelNode rel) {\n      final TableModify modify =\n          (TableModify) rel;\n      final ModifiableTable modifiableTable =\n          modify.getTable().unwrap(ModifiableTable.class);\n      if (modifiableTable == null) {\n        return null;\n      }\n      final RelTraitSet traitSet =\n          modify.getTraitSet().replace(out);\n      return new JdbcTableModify(\n          modify.getCluster(), traitSet,\n          modify.getTable(),\n          modify.getCatalogReader(),\n          convert(modify.getInput(), traitSet),\n          modify.getOperation(),\n          modify.getUpdateColumnList(),\n          modify.getSourceExpressionList(),\n          modify.isFlattened());\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1006,"status":"N"},{"authorDate":"2021-01-25 21:44:11","commitOrder":6,"curCode":"  @Override public @Nullable RelNode convert(RelNode rel) {\n    final TableModify modify = (TableModify) rel;\n    final ModifiableTable modifiableTable =\n        modify.getTable().unwrap(ModifiableTable.class);\n    if (modifiableTable == null) {\n      return null;\n    }\n    final RelTraitSet traitSet =\n        modify.getTraitSet().replace(EnumerableConvention.INSTANCE);\n    return new EnumerableTableModify(\n        modify.getCluster(), traitSet,\n        modify.getTable(),\n        modify.getCatalogReader(),\n        convert(modify.getInput(), traitSet),\n        modify.getOperation(),\n        modify.getUpdateColumnList(),\n        modify.getSourceExpressionList(),\n        modify.isFlattened());\n  }\n","date":"2021-02-01 13:35:11","endLine":63,"groupId":"122113","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"convert","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4e/111fe2248ac9e42e717e89dcd1d1b2959f3e02.src","preCode":"  @Override public @Nullable RelNode convert(RelNode rel) {\n    final LogicalTableModify modify =\n        (LogicalTableModify) rel;\n    final ModifiableTable modifiableTable =\n        modify.getTable().unwrap(ModifiableTable.class);\n    if (modifiableTable == null) {\n      return null;\n    }\n    final RelTraitSet traitSet =\n        modify.getTraitSet().replace(EnumerableConvention.INSTANCE);\n    return new EnumerableTableModify(\n        modify.getCluster(), traitSet,\n        modify.getTable(),\n        modify.getCatalogReader(),\n        convert(modify.getInput(), traitSet),\n        modify.getOperation(),\n        modify.getUpdateColumnList(),\n        modify.getSourceExpressionList(),\n        modify.isFlattened());\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"1bf6b08a81f471f979e1b52174f225f03ff77a2e","commitMessage":"@@@[CALCITE-4461] Do not use `Logical` nodes inside Enumerable rules (Vladimir Ozerov)\n","date":"2021-02-01 13:35:11","modifiedFileCount":"21","status":"M","submitter":"devozerov"}]
