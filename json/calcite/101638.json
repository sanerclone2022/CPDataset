[{"authorTime":"2018-09-16 20:24:07","codes":[{"authorDate":"2018-09-16 20:24:07","commitOrder":3,"curCode":"  private static final Function1<ResultSet, Function0<Object>> AUTO_ROW_BUILDER_FACTORY =\n      resultSet -> {\n        final ResultSetMetaData metaData;\n        final int columnCount;\n        try {\n          metaData = resultSet.getMetaData();\n          columnCount = metaData.getColumnCount();\n        } catch (SQLException e) {\n          throw new RuntimeException(e);\n        }\n        if (columnCount == 1) {\n          return () -> {\n            try {\n              return resultSet.getObject(1);\n            } catch (SQLException e) {\n              throw new RuntimeException(e);\n            }\n          };\n        } else {\n          \r\n          return (Function0) () -> {\n            try {\n              final List<Object> list = new ArrayList<>();\n              for (int i = 0; i < columnCount; i++) {\n                if (metaData.getColumnType(i + 1) == Types.TIMESTAMP) {\n                  long v = resultSet.getLong(i + 1);\n                  if (v == 0 && resultSet.wasNull()) {\n                    list.add(null);\n                  } else {\n                    list.add(v);\n                  }\n                } else {\n                  list.add(resultSet.getObject(i + 1));\n                }\n              }\n              return list.toArray();\n            } catch (SQLException e) {\n              throw new RuntimeException(e);\n            }\n          };\n        }\n      };\n","date":"2018-09-20 16:51:04","endLine":94,"groupId":"7775","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"AUTO_ROW_BUILDER_FACTORY","params":"default","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/77/1772f1ea39d74eee6e9f889ae8d6500f129c7f.src","preCode":"  private static final Function1<ResultSet, Function0<Object>> AUTO_ROW_BUILDER_FACTORY =\n      resultSet -> {\n        final ResultSetMetaData metaData;\n        final int columnCount;\n        try {\n          metaData = resultSet.getMetaData();\n          columnCount = metaData.getColumnCount();\n        } catch (SQLException e) {\n          throw new RuntimeException(e);\n        }\n        if (columnCount == 1) {\n          return () -> {\n            try {\n              return resultSet.getObject(1);\n            } catch (SQLException e) {\n              throw new RuntimeException(e);\n            }\n          };\n        } else {\n          \r\n          return (Function0) () -> {\n            try {\n              final List<Object> list = new ArrayList<>();\n              for (int i = 0; i < columnCount; i++) {\n                if (metaData.getColumnType(i + 1) == Types.TIMESTAMP) {\n                  long v = resultSet.getLong(i + 1);\n                  if (v == 0 && resultSet.wasNull()) {\n                    list.add(null);\n                  } else {\n                    list.add(v);\n                  }\n                } else {\n                  list.add(resultSet.getObject(i + 1));\n                }\n              }\n              return list.toArray();\n            } catch (SQLException e) {\n              throw new RuntimeException(e);\n            }\n          };\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"MB"},{"authorDate":"2018-09-16 20:24:07","commitOrder":3,"curCode":"      primitiveRowBuilderFactory(final Primitive[] primitives) {\n    return resultSet -> {\n      final ResultSetMetaData metaData;\n      final int columnCount;\n      try {\n        metaData = resultSet.getMetaData();\n        columnCount = metaData.getColumnCount();\n      } catch (SQLException e) {\n        throw new RuntimeException(e);\n      }\n      assert columnCount == primitives.length;\n      if (columnCount == 1) {\n        return () -> {\n          try {\n            return resultSet.getObject(1);\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        };\n      }\n      \r\n      return (Function0) () -> {\n        try {\n          final List<Object> list = new ArrayList<>();\n          for (int i = 0; i < columnCount; i++) {\n            list.add(primitives[i].jdbcGet(resultSet, i + 1));\n          }\n          return list.toArray();\n        } catch (SQLException e) {\n          throw new RuntimeException(e);\n        }\n      };\n    };\n  }\n","date":"2018-09-20 16:51:04","endLine":256,"groupId":"7775","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"primitiveRowBuilderFactory","params":"(finalPrimitive[]primitives)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/77/1772f1ea39d74eee6e9f889ae8d6500f129c7f.src","preCode":"      primitiveRowBuilderFactory(final Primitive[] primitives) {\n    return resultSet -> {\n      final ResultSetMetaData metaData;\n      final int columnCount;\n      try {\n        metaData = resultSet.getMetaData();\n        columnCount = metaData.getColumnCount();\n      } catch (SQLException e) {\n        throw new RuntimeException(e);\n      }\n      assert columnCount == primitives.length;\n      if (columnCount == 1) {\n        return () -> {\n          try {\n            return resultSet.getObject(1);\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        };\n      }\n      \r\n      return (Function0) () -> {\n        try {\n          final List<Object> list = new ArrayList<>();\n          for (int i = 0; i < columnCount; i++) {\n            list.add(primitives[i].jdbcGet(resultSet, i + 1));\n          }\n          return list.toArray();\n        } catch (SQLException e) {\n          throw new RuntimeException(e);\n        }\n      };\n    };\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"MB"}],"commitId":"295ab13e8338bdd0e0c29e051907371c9b2929aa","commitMessage":"@@@Apply small refactorings to Calcite codebase (Java 5.  Java 7.  Java 8)\n\nUse Objects.equals when possible\nReplace for with foreach in Mappings\nUse Java 7 diamond operator to reduce code verbosity\nCollapse identical catch blocks to multi-catch\nUse Double/Float/Long/Boolean hashCode from Java 8\nRemove unnecessary substring call arguments\nFix sqlTypeName -> SqlTypeName typo\nMake floorKey/ceilingKey non-static so their use in NameMap makes more sense\nNameMap uses COMPARATOR.floorKey(name) which is a bit weird when floorKey is static\nAdd @SafeVarargs to methods that are obviously safe\nReplace anonymous types with Java 8 lambdas\nUse Collection#removeIf when possible\nUse Integer.compare when possible\nSuppress AssertWithSideEffects warnings\nAdd missing check to Permutation#isValid\nPermutation#isValid had occurCount[target] != 0 check.  however the array was never updated.  so the check was useless.\nRemove duplicate keys from Strong#MAP\nReplace remove+add with set in ReduceExpressionsRule\nRemove redundant initializers\nMove dead code inside if (false) branch in org.apache.calcite.plan.volcano.RelSubset#add\nRevert removal of UtilTest#testHash\n\ncloses #834\n","date":"2018-09-20 16:51:04","modifiedFileCount":"130","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-09-02 21:01:14","codes":[{"authorDate":"2020-09-02 21:01:14","commitOrder":4,"curCode":"  private static final Function1<ResultSet, Function0<Object>> AUTO_ROW_BUILDER_FACTORY =\n      resultSet -> {\n        final ResultSetMetaData metaData;\n        final int columnCount;\n        try {\n          metaData = resultSet.getMetaData();\n          columnCount = metaData.getColumnCount();\n        } catch (SQLException e) {\n          throw new RuntimeException(e);\n        }\n        if (columnCount == 1) {\n          return () -> {\n            try {\n              return resultSet.getObject(1);\n            } catch (SQLException e) {\n              throw new RuntimeException(e);\n            }\n          };\n        } else {\n          return () -> convertColumns(resultSet, metaData, columnCount);\n        }\n      };\n","date":"2020-10-09 03:55:07","endLine":96,"groupId":"7775","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"AUTO_ROW_BUILDER_FACTORY","params":"default","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/870cad13c9b6d8e9192b1d9bcafbc39542290b.src","preCode":"  private static final Function1<ResultSet, Function0<Object>> AUTO_ROW_BUILDER_FACTORY =\n      resultSet -> {\n        final ResultSetMetaData metaData;\n        final int columnCount;\n        try {\n          metaData = resultSet.getMetaData();\n          columnCount = metaData.getColumnCount();\n        } catch (SQLException e) {\n          throw new RuntimeException(e);\n        }\n        if (columnCount == 1) {\n          return () -> {\n            try {\n              return resultSet.getObject(1);\n            } catch (SQLException e) {\n              throw new RuntimeException(e);\n            }\n          };\n        } else {\n          \r\n          return (Function0) () -> {\n            try {\n              final List<Object> list = new ArrayList<>();\n              for (int i = 0; i < columnCount; i++) {\n                if (metaData.getColumnType(i + 1) == Types.TIMESTAMP) {\n                  long v = resultSet.getLong(i + 1);\n                  if (v == 0 && resultSet.wasNull()) {\n                    list.add(null);\n                  } else {\n                    list.add(v);\n                  }\n                } else {\n                  list.add(resultSet.getObject(i + 1));\n                }\n              }\n              return list.toArray();\n            } catch (SQLException e) {\n              throw new RuntimeException(e);\n            }\n          };\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2020-09-02 21:01:14","commitOrder":4,"curCode":"      primitiveRowBuilderFactory(final Primitive[] primitives) {\n    return resultSet -> {\n      final ResultSetMetaData metaData;\n      final int columnCount;\n      try {\n        metaData = resultSet.getMetaData();\n        columnCount = metaData.getColumnCount();\n      } catch (SQLException e) {\n        throw new RuntimeException(e);\n      }\n      assert columnCount == primitives.length;\n      if (columnCount == 1) {\n        return () -> {\n          try {\n            return resultSet.getObject(1);\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        };\n      }\n      return () -> convertPrimitiveColumns(primitives, resultSet, columnCount);\n    };\n  }\n","date":"2020-10-09 03:55:07","endLine":430,"groupId":"7775","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"primitiveRowBuilderFactory","params":"(finalPrimitive[]primitives)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/870cad13c9b6d8e9192b1d9bcafbc39542290b.src","preCode":"      primitiveRowBuilderFactory(final Primitive[] primitives) {\n    return resultSet -> {\n      final ResultSetMetaData metaData;\n      final int columnCount;\n      try {\n        metaData = resultSet.getMetaData();\n        columnCount = metaData.getColumnCount();\n      } catch (SQLException e) {\n        throw new RuntimeException(e);\n      }\n      assert columnCount == primitives.length;\n      if (columnCount == 1) {\n        return () -> {\n          try {\n            return resultSet.getObject(1);\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        };\n      }\n      \r\n      return (Function0) () -> {\n        try {\n          final List<Object> list = new ArrayList<>();\n          for (int i = 0; i < columnCount; i++) {\n            list.add(primitives[i].jdbcGet(resultSet, i + 1));\n          }\n          return list.toArray();\n        } catch (SQLException e) {\n          throw new RuntimeException(e);\n        }\n      };\n    };\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"}],"commitId":"4c3ebf8a4dc04221fc13a53cf09b6da478e08aae","commitMessage":"@@@Refactor ResultSetEnumerable to avoid nested lambdas\n\nThis reduces the likelihood of javac issues.\n\nSee https://github.com/policeman-tools/forbidden-apis/issues/173\n","date":"2020-10-09 03:55:07","modifiedFileCount":"1","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-09-02 21:01:14","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  private static final Function1<ResultSet, Function0<@Nullable Object>> AUTO_ROW_BUILDER_FACTORY =\n      resultSet -> {\n        final ResultSetMetaData metaData;\n        final int columnCount;\n        try {\n          metaData = resultSet.getMetaData();\n          columnCount = metaData.getColumnCount();\n        } catch (SQLException e) {\n          throw new RuntimeException(e);\n        }\n        if (columnCount == 1) {\n          return () -> {\n            try {\n              return resultSet.getObject(1);\n            } catch (SQLException e) {\n              throw new RuntimeException(e);\n            }\n          };\n        } else {\n          return () -> convertColumns(resultSet, metaData, columnCount);\n        }\n      };\n","date":"2020-11-30 06:45:33","endLine":99,"groupId":"101638","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"AUTO_ROW_BUILDER_FACTORY","params":"default","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/84/defdd5e323d112d1abd81a824df5f9b6919b24.src","preCode":"  private static final Function1<ResultSet, Function0<Object>> AUTO_ROW_BUILDER_FACTORY =\n      resultSet -> {\n        final ResultSetMetaData metaData;\n        final int columnCount;\n        try {\n          metaData = resultSet.getMetaData();\n          columnCount = metaData.getColumnCount();\n        } catch (SQLException e) {\n          throw new RuntimeException(e);\n        }\n        if (columnCount == 1) {\n          return () -> {\n            try {\n              return resultSet.getObject(1);\n            } catch (SQLException e) {\n              throw new RuntimeException(e);\n            }\n          };\n        } else {\n          return () -> convertColumns(resultSet, metaData, columnCount);\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2020-09-02 21:01:14","commitOrder":5,"curCode":"      primitiveRowBuilderFactory(final Primitive[] primitives) {\n    return resultSet -> {\n      final ResultSetMetaData metaData;\n      final int columnCount;\n      try {\n        metaData = resultSet.getMetaData();\n        columnCount = metaData.getColumnCount();\n      } catch (SQLException e) {\n        throw new RuntimeException(e);\n      }\n      assert columnCount == primitives.length;\n      if (columnCount == 1) {\n        return () -> {\n          try {\n            return resultSet.getObject(1);\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        };\n      }\n      return () -> convertPrimitiveColumns(primitives, resultSet, columnCount);\n    };\n  }\n","date":"2020-10-09 03:55:07","endLine":430,"groupId":"101638","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"primitiveRowBuilderFactory","params":"(finalPrimitive[]primitives)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/870cad13c9b6d8e9192b1d9bcafbc39542290b.src","preCode":"      primitiveRowBuilderFactory(final Primitive[] primitives) {\n    return resultSet -> {\n      final ResultSetMetaData metaData;\n      final int columnCount;\n      try {\n        metaData = resultSet.getMetaData();\n        columnCount = metaData.getColumnCount();\n      } catch (SQLException e) {\n        throw new RuntimeException(e);\n      }\n      assert columnCount == primitives.length;\n      if (columnCount == 1) {\n        return () -> {\n          try {\n            return resultSet.getObject(1);\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        };\n      }\n      return () -> convertPrimitiveColumns(primitives, resultSet, columnCount);\n    };\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"N"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
