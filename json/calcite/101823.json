[{"authorTime":"2018-01-30 21:13:12","codes":[{"authorDate":"2019-11-25 14:17:04","commitOrder":4,"curCode":"  @Override public SqlNode getCastSpec(final RelDataType type) {\n    if (type instanceof BasicSqlType) {\n      final SqlTypeName typeName = type.getSqlTypeName();\n      switch (typeName) {\n      \r\n      case TINYINT:\n      case SMALLINT:\n      case INTEGER:\n      case BIGINT:\n        return createSqlDataTypeSpecByName(\"INT64\", typeName);\n      \r\n      case FLOAT:\n      case DOUBLE:\n        return createSqlDataTypeSpecByName(\"FLOAT64\", typeName);\n      case DECIMAL:\n        return createSqlDataTypeSpecByName(\"NUMERIC\", typeName);\n      case BOOLEAN:\n        return createSqlDataTypeSpecByName(\"BOOL\", typeName);\n      case CHAR:\n      case VARCHAR:\n        return createSqlDataTypeSpecByName(\"STRING\", typeName);\n      case BINARY:\n      case VARBINARY:\n        return createSqlDataTypeSpecByName(\"BYTES\", typeName);\n      case DATE:\n        return createSqlDataTypeSpecByName(\"DATE\", typeName);\n      case TIME:\n        return createSqlDataTypeSpecByName(\"TIME\", typeName);\n      case TIMESTAMP:\n        return createSqlDataTypeSpecByName(\"TIMESTAMP\", typeName);\n      }\n    }\n    return super.getCastSpec(type);\n  }\n","date":"2019-11-25 17:57:43","endLine":194,"groupId":"16547","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getCastSpec","params":"(finalRelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/2a5dc3525f260de3c7c24eda83dc32c9415d80.src","preCode":"  @Override public SqlNode getCastSpec(final RelDataType type) {\n    if (type instanceof BasicSqlType) {\n      final SqlTypeName typeName = type.getSqlTypeName();\n      switch (typeName) {\n      \r\n      case TINYINT:\n      case SMALLINT:\n      case INTEGER:\n      case BIGINT:\n        return createSqlDataTypeSpecByName(\"INT64\", typeName);\n      \r\n      case FLOAT:\n      case DOUBLE:\n        return createSqlDataTypeSpecByName(\"FLOAT64\", typeName);\n      case DECIMAL:\n        return createSqlDataTypeSpecByName(\"NUMERIC\", typeName);\n      case BOOLEAN:\n        return createSqlDataTypeSpecByName(\"BOOL\", typeName);\n      case CHAR:\n      case VARCHAR:\n        return createSqlDataTypeSpecByName(\"STRING\", typeName);\n      case BINARY:\n      case VARBINARY:\n        return createSqlDataTypeSpecByName(\"BYTES\", typeName);\n      case DATE:\n        return createSqlDataTypeSpecByName(\"DATE\", typeName);\n      case TIME:\n        return createSqlDataTypeSpecByName(\"TIME\", typeName);\n      case TIMESTAMP:\n        return createSqlDataTypeSpecByName(\"TIMESTAMP\", typeName);\n      }\n    }\n    return super.getCastSpec(type);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"NB"},{"authorDate":"2018-01-30 21:13:12","commitOrder":4,"curCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    if (type instanceof BasicSqlType) {\n      SqlTypeName typeName = type.getSqlTypeName();\n      switch (typeName) {\n      case VARCHAR:\n        return createSqlDataTypeSpecByName(\"String\", typeName);\n      case TINYINT:\n        return createSqlDataTypeSpecByName(\"Int8\", typeName);\n      case SMALLINT:\n        return createSqlDataTypeSpecByName(\"Int16\", typeName);\n      case INTEGER:\n        return createSqlDataTypeSpecByName(\"Int32\", typeName);\n      case BIGINT:\n        return createSqlDataTypeSpecByName(\"Int64\", typeName);\n      case FLOAT:\n        return createSqlDataTypeSpecByName(\"Float32\", typeName);\n      case DOUBLE:\n        return createSqlDataTypeSpecByName(\"Float64\", typeName);\n      case DATE:\n        return createSqlDataTypeSpecByName(\"Date\", typeName);\n      case TIMESTAMP:\n      case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n        return createSqlDataTypeSpecByName(\"DateTime\", typeName);\n      }\n    }\n\n    return super.getCastSpec(type);\n  }\n","date":"2020-04-17 16:35:48","endLine":119,"groupId":"5012","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getCastSpec","params":"(RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a0/5799dc150c9c7b77770f2711e589b886f32719.src","preCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    if (type instanceof BasicSqlType) {\n      SqlTypeName typeName = type.getSqlTypeName();\n      switch (typeName) {\n      case VARCHAR:\n        return createSqlDataTypeSpecByName(\"String\", typeName);\n      case TINYINT:\n        return createSqlDataTypeSpecByName(\"Int8\", typeName);\n      case SMALLINT:\n        return createSqlDataTypeSpecByName(\"Int16\", typeName);\n      case INTEGER:\n        return createSqlDataTypeSpecByName(\"Int32\", typeName);\n      case BIGINT:\n        return createSqlDataTypeSpecByName(\"Int64\", typeName);\n      case FLOAT:\n        return createSqlDataTypeSpecByName(\"Float32\", typeName);\n      case DOUBLE:\n        return createSqlDataTypeSpecByName(\"Float64\", typeName);\n      case DATE:\n        return createSqlDataTypeSpecByName(\"Date\", typeName);\n      case TIMESTAMP:\n      case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n        return createSqlDataTypeSpecByName(\"DateTime\", typeName);\n      }\n    }\n\n    return super.getCastSpec(type);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/ClickHouseSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"}],"commitId":"39e58566c1ac02824d99ae9260d3315539efd57e","commitMessage":"@@@[CALCITE-2157] ClickHouse dialect implementation (Chris Baynes)\n\nclose apache/calcite#618\n","date":"2020-04-17 16:35:48","modifiedFileCount":"3","status":"M","submitter":"Chris Baynes"},{"authorTime":"2020-09-30 01:31:14","codes":[{"authorDate":"2020-09-30 01:31:14","commitOrder":5,"curCode":"  @Override public SqlNode getCastSpec(final RelDataType type) {\n    if (type instanceof BasicSqlType) {\n      final SqlTypeName typeName = type.getSqlTypeName();\n      switch (typeName) {\n      \r\n      case TINYINT:\n      case SMALLINT:\n      case INTEGER:\n      case BIGINT:\n        return createSqlDataTypeSpecByName(\"INT64\", typeName);\n      \r\n      case FLOAT:\n      case DOUBLE:\n        return createSqlDataTypeSpecByName(\"FLOAT64\", typeName);\n      case DECIMAL:\n        return createSqlDataTypeSpecByName(\"NUMERIC\", typeName);\n      case BOOLEAN:\n        return createSqlDataTypeSpecByName(\"BOOL\", typeName);\n      case CHAR:\n      case VARCHAR:\n        return createSqlDataTypeSpecByName(\"STRING\", typeName);\n      case BINARY:\n      case VARBINARY:\n        return createSqlDataTypeSpecByName(\"BYTES\", typeName);\n      case DATE:\n        return createSqlDataTypeSpecByName(\"DATE\", typeName);\n      case TIME:\n        return createSqlDataTypeSpecByName(\"TIME\", typeName);\n      case TIMESTAMP:\n        return createSqlDataTypeSpecByName(\"TIMESTAMP\", typeName);\n      default:\n        break;\n      }\n    }\n    return super.getCastSpec(type);\n  }\n","date":"2020-10-07 05:43:06","endLine":303,"groupId":"16547","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getCastSpec","params":"(finalRelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/125cbde56545a51b87b71d66e01267f8141d1e.src","preCode":"  @Override public SqlNode getCastSpec(final RelDataType type) {\n    if (type instanceof BasicSqlType) {\n      final SqlTypeName typeName = type.getSqlTypeName();\n      switch (typeName) {\n      \r\n      case TINYINT:\n      case SMALLINT:\n      case INTEGER:\n      case BIGINT:\n        return createSqlDataTypeSpecByName(\"INT64\", typeName);\n      \r\n      case FLOAT:\n      case DOUBLE:\n        return createSqlDataTypeSpecByName(\"FLOAT64\", typeName);\n      case DECIMAL:\n        return createSqlDataTypeSpecByName(\"NUMERIC\", typeName);\n      case BOOLEAN:\n        return createSqlDataTypeSpecByName(\"BOOL\", typeName);\n      case CHAR:\n      case VARCHAR:\n        return createSqlDataTypeSpecByName(\"STRING\", typeName);\n      case BINARY:\n      case VARBINARY:\n        return createSqlDataTypeSpecByName(\"BYTES\", typeName);\n      case DATE:\n        return createSqlDataTypeSpecByName(\"DATE\", typeName);\n      case TIME:\n        return createSqlDataTypeSpecByName(\"TIME\", typeName);\n      case TIMESTAMP:\n        return createSqlDataTypeSpecByName(\"TIMESTAMP\", typeName);\n      }\n    }\n    return super.getCastSpec(type);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"},{"authorDate":"2020-09-30 01:31:14","commitOrder":5,"curCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    if (type instanceof BasicSqlType) {\n      SqlTypeName typeName = type.getSqlTypeName();\n      switch (typeName) {\n      case VARCHAR:\n        return createSqlDataTypeSpecByName(\"String\", typeName);\n      case TINYINT:\n        return createSqlDataTypeSpecByName(\"Int8\", typeName);\n      case SMALLINT:\n        return createSqlDataTypeSpecByName(\"Int16\", typeName);\n      case INTEGER:\n        return createSqlDataTypeSpecByName(\"Int32\", typeName);\n      case BIGINT:\n        return createSqlDataTypeSpecByName(\"Int64\", typeName);\n      case FLOAT:\n        return createSqlDataTypeSpecByName(\"Float32\", typeName);\n      case DOUBLE:\n        return createSqlDataTypeSpecByName(\"Float64\", typeName);\n      case DATE:\n        return createSqlDataTypeSpecByName(\"Date\", typeName);\n      case TIMESTAMP:\n      case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n        return createSqlDataTypeSpecByName(\"DateTime\", typeName);\n      default:\n        break;\n      }\n    }\n\n    return super.getCastSpec(type);\n  }\n","date":"2020-10-07 05:43:06","endLine":102,"groupId":"5012","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getCastSpec","params":"(RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f4/e375f15509c8f245e8cf213a3e1627de000951.src","preCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    if (type instanceof BasicSqlType) {\n      SqlTypeName typeName = type.getSqlTypeName();\n      switch (typeName) {\n      case VARCHAR:\n        return createSqlDataTypeSpecByName(\"String\", typeName);\n      case TINYINT:\n        return createSqlDataTypeSpecByName(\"Int8\", typeName);\n      case SMALLINT:\n        return createSqlDataTypeSpecByName(\"Int16\", typeName);\n      case INTEGER:\n        return createSqlDataTypeSpecByName(\"Int32\", typeName);\n      case BIGINT:\n        return createSqlDataTypeSpecByName(\"Int64\", typeName);\n      case FLOAT:\n        return createSqlDataTypeSpecByName(\"Float32\", typeName);\n      case DOUBLE:\n        return createSqlDataTypeSpecByName(\"Float64\", typeName);\n      case DATE:\n        return createSqlDataTypeSpecByName(\"Date\", typeName);\n      case TIMESTAMP:\n      case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n        return createSqlDataTypeSpecByName(\"DateTime\", typeName);\n      }\n    }\n\n    return super.getCastSpec(type);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/ClickHouseSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"1b94f37e888cf2d186362473529e6c147afe0f6e","commitMessage":"@@@[CALCITE-4314] Add missing default branches to switch statement\n\nNote: the changes are mechanical.\nThe intention is to keep the previous behavior and prevent adding new\nnon exchaustive switch statements in the future.\n\nSee https://errorprone.info/bugpattern/MissingCasesInEnumSwitch\n","date":"2020-10-07 05:43:06","modifiedFileCount":"98","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"  @Override public @Nullable SqlNode getCastSpec(final RelDataType type) {\n    if (type instanceof BasicSqlType) {\n      final SqlTypeName typeName = type.getSqlTypeName();\n      switch (typeName) {\n      \r\n      case TINYINT:\n      case SMALLINT:\n      case INTEGER:\n      case BIGINT:\n        return createSqlDataTypeSpecByName(\"INT64\", typeName);\n      \r\n      case FLOAT:\n      case DOUBLE:\n        return createSqlDataTypeSpecByName(\"FLOAT64\", typeName);\n      case DECIMAL:\n        return createSqlDataTypeSpecByName(\"NUMERIC\", typeName);\n      case BOOLEAN:\n        return createSqlDataTypeSpecByName(\"BOOL\", typeName);\n      case CHAR:\n      case VARCHAR:\n        return createSqlDataTypeSpecByName(\"STRING\", typeName);\n      case BINARY:\n      case VARBINARY:\n        return createSqlDataTypeSpecByName(\"BYTES\", typeName);\n      case DATE:\n        return createSqlDataTypeSpecByName(\"DATE\", typeName);\n      case TIME:\n        return createSqlDataTypeSpecByName(\"TIME\", typeName);\n      case TIMESTAMP:\n        return createSqlDataTypeSpecByName(\"TIMESTAMP\", typeName);\n      default:\n        break;\n      }\n    }\n    return super.getCastSpec(type);\n  }\n","date":"2020-11-30 06:45:33","endLine":310,"groupId":"101823","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getCastSpec","params":"(finalRelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/18/2075742a2772c4dd008b1dd0e1af996e9f348b.src","preCode":"  @Override public SqlNode getCastSpec(final RelDataType type) {\n    if (type instanceof BasicSqlType) {\n      final SqlTypeName typeName = type.getSqlTypeName();\n      switch (typeName) {\n      \r\n      case TINYINT:\n      case SMALLINT:\n      case INTEGER:\n      case BIGINT:\n        return createSqlDataTypeSpecByName(\"INT64\", typeName);\n      \r\n      case FLOAT:\n      case DOUBLE:\n        return createSqlDataTypeSpecByName(\"FLOAT64\", typeName);\n      case DECIMAL:\n        return createSqlDataTypeSpecByName(\"NUMERIC\", typeName);\n      case BOOLEAN:\n        return createSqlDataTypeSpecByName(\"BOOL\", typeName);\n      case CHAR:\n      case VARCHAR:\n        return createSqlDataTypeSpecByName(\"STRING\", typeName);\n      case BINARY:\n      case VARBINARY:\n        return createSqlDataTypeSpecByName(\"BYTES\", typeName);\n      case DATE:\n        return createSqlDataTypeSpecByName(\"DATE\", typeName);\n      case TIME:\n        return createSqlDataTypeSpecByName(\"TIME\", typeName);\n      case TIMESTAMP:\n        return createSqlDataTypeSpecByName(\"TIMESTAMP\", typeName);\n      default:\n        break;\n      }\n    }\n    return super.getCastSpec(type);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"  @Override public @Nullable SqlNode getCastSpec(RelDataType type) {\n    if (type instanceof BasicSqlType) {\n      SqlTypeName typeName = type.getSqlTypeName();\n      switch (typeName) {\n      case VARCHAR:\n        return createSqlDataTypeSpecByName(\"String\", typeName);\n      case TINYINT:\n        return createSqlDataTypeSpecByName(\"Int8\", typeName);\n      case SMALLINT:\n        return createSqlDataTypeSpecByName(\"Int16\", typeName);\n      case INTEGER:\n        return createSqlDataTypeSpecByName(\"Int32\", typeName);\n      case BIGINT:\n        return createSqlDataTypeSpecByName(\"Int64\", typeName);\n      case FLOAT:\n        return createSqlDataTypeSpecByName(\"Float32\", typeName);\n      case DOUBLE:\n        return createSqlDataTypeSpecByName(\"Float64\", typeName);\n      case DATE:\n        return createSqlDataTypeSpecByName(\"Date\", typeName);\n      case TIMESTAMP:\n      case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n        return createSqlDataTypeSpecByName(\"DateTime\", typeName);\n      default:\n        break;\n      }\n    }\n\n    return super.getCastSpec(type);\n  }\n","date":"2020-11-30 06:45:33","endLine":104,"groupId":"101823","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getCastSpec","params":"(RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/17/0f819ec8656f0719201492784a8ee07dcd5a07.src","preCode":"  @Override public SqlNode getCastSpec(RelDataType type) {\n    if (type instanceof BasicSqlType) {\n      SqlTypeName typeName = type.getSqlTypeName();\n      switch (typeName) {\n      case VARCHAR:\n        return createSqlDataTypeSpecByName(\"String\", typeName);\n      case TINYINT:\n        return createSqlDataTypeSpecByName(\"Int8\", typeName);\n      case SMALLINT:\n        return createSqlDataTypeSpecByName(\"Int16\", typeName);\n      case INTEGER:\n        return createSqlDataTypeSpecByName(\"Int32\", typeName);\n      case BIGINT:\n        return createSqlDataTypeSpecByName(\"Int64\", typeName);\n      case FLOAT:\n        return createSqlDataTypeSpecByName(\"Float32\", typeName);\n      case DOUBLE:\n        return createSqlDataTypeSpecByName(\"Float64\", typeName);\n      case DATE:\n        return createSqlDataTypeSpecByName(\"Date\", typeName);\n      case TIMESTAMP:\n      case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n        return createSqlDataTypeSpecByName(\"DateTime\", typeName);\n      default:\n        break;\n      }\n    }\n\n    return super.getCastSpec(type);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/ClickHouseSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
