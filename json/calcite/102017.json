[{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-07-09 05:31:40","commitOrder":1,"curCode":"  private static void matchExchange(ExchangeRemoveConstantKeysRule rule,\n      RelOptRuleCall call) {\n    final Exchange exchange = call.rel(0);\n    final RelMetadataQuery mq = call.getMetadataQuery();\n    final RelNode input = exchange.getInput();\n    final RelOptPredicateList predicates = mq.getPulledUpPredicates(input);\n    if (predicates == null) {\n      return;\n    }\n\n    final Set<Integer> constants = new HashSet<>();\n    predicates.constantMap.keySet().forEach(key -> {\n      if (key instanceof RexInputRef) {\n        constants.add(((RexInputRef) key).getIndex());\n      }\n    });\n    if (constants.isEmpty()) {\n      return;\n    }\n\n    final List<Integer> distributionKeys = simplifyDistributionKeys(\n        exchange.getDistribution(), constants);\n\n    if (distributionKeys.size() != exchange.getDistribution().getKeys()\n        .size()) {\n      call.transformTo(call.builder()\n          .push(exchange.getInput())\n          .exchange(distributionKeys.isEmpty()\n              ? RelDistributions.SINGLETON\n              : RelDistributions.hash(distributionKeys))\n          .build());\n      call.getPlanner().prune(exchange);\n    }\n  }\n","date":"2020-07-29 02:27:24","endLine":110,"groupId":"2749","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"matchExchange","params":"(ExchangeRemoveConstantKeysRulerule@RelOptRuleCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/09/6162f787eebba982530732bfa06a2b1f00e5d7.src","preCode":"  private static void matchExchange(ExchangeRemoveConstantKeysRule rule,\n      RelOptRuleCall call) {\n    final Exchange exchange = call.rel(0);\n    final RelMetadataQuery mq = call.getMetadataQuery();\n    final RelNode input = exchange.getInput();\n    final RelOptPredicateList predicates = mq.getPulledUpPredicates(input);\n    if (predicates == null) {\n      return;\n    }\n\n    final Set<Integer> constants = new HashSet<>();\n    predicates.constantMap.keySet().forEach(key -> {\n      if (key instanceof RexInputRef) {\n        constants.add(((RexInputRef) key).getIndex());\n      }\n    });\n    if (constants.isEmpty()) {\n      return;\n    }\n\n    final List<Integer> distributionKeys = simplifyDistributionKeys(\n        exchange.getDistribution(), constants);\n\n    if (distributionKeys.size() != exchange.getDistribution().getKeys()\n        .size()) {\n      call.transformTo(call.builder()\n          .push(exchange.getInput())\n          .exchange(distributionKeys.isEmpty()\n              ? RelDistributions.SINGLETON\n              : RelDistributions.hash(distributionKeys))\n          .build());\n      call.getPlanner().prune(exchange);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/ExchangeRemoveConstantKeysRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2020-07-09 05:31:40","commitOrder":1,"curCode":"  private static void matchSortExchange(ExchangeRemoveConstantKeysRule rule,\n      RelOptRuleCall call) {\n    final SortExchange sortExchange = call.rel(0);\n    final RelMetadataQuery mq = call.getMetadataQuery();\n    final RelNode input = sortExchange.getInput();\n    final RelOptPredicateList predicates = mq.getPulledUpPredicates(input);\n    if (predicates == null) {\n      return;\n    }\n\n    final Set<Integer> constants = new HashSet<>();\n    predicates.constantMap.keySet().forEach(key -> {\n      if (key instanceof RexInputRef) {\n        constants.add(((RexInputRef) key).getIndex());\n      }\n    });\n\n    if (constants.isEmpty()) {\n      return;\n    }\n\n    List<Integer> distributionKeys = new ArrayList<>();\n    boolean distributionSimplified = false;\n    boolean hashDistribution = sortExchange.getDistribution().getType()\n        == RelDistribution.Type.HASH_DISTRIBUTED;\n    if (hashDistribution) {\n      distributionKeys = simplifyDistributionKeys(\n          sortExchange.getDistribution(), constants);\n      distributionSimplified =\n          distributionKeys.size() != sortExchange.getDistribution().getKeys()\n              .size();\n    }\n\n    final List<RelFieldCollation> fieldCollations = sortExchange\n        .getCollation().getFieldCollations().stream().filter(\n            fc -> !constants.contains(fc.getFieldIndex()))\n        .collect(Collectors.toList());\n\n    boolean collationSimplified =\n        fieldCollations.size() != sortExchange.getCollation()\n            .getFieldCollations().size();\n    if (distributionSimplified\n        || collationSimplified) {\n      RelDistribution distribution = distributionSimplified\n          ? (distributionKeys.isEmpty()\n          ? RelDistributions.SINGLETON\n          : RelDistributions.hash(distributionKeys))\n          : sortExchange.getDistribution();\n      RelCollation collation = collationSimplified\n          ? RelCollations.of(fieldCollations)\n          : sortExchange.getCollation();\n\n      call.transformTo(call.builder()\n          .push(sortExchange.getInput())\n          .sortExchange(distribution, collation)\n          .build());\n      call.getPlanner().prune(sortExchange);\n    }\n  }\n","date":"2020-07-29 02:27:24","endLine":170,"groupId":"2748","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"matchSortExchange","params":"(ExchangeRemoveConstantKeysRulerule@RelOptRuleCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/09/6162f787eebba982530732bfa06a2b1f00e5d7.src","preCode":"  private static void matchSortExchange(ExchangeRemoveConstantKeysRule rule,\n      RelOptRuleCall call) {\n    final SortExchange sortExchange = call.rel(0);\n    final RelMetadataQuery mq = call.getMetadataQuery();\n    final RelNode input = sortExchange.getInput();\n    final RelOptPredicateList predicates = mq.getPulledUpPredicates(input);\n    if (predicates == null) {\n      return;\n    }\n\n    final Set<Integer> constants = new HashSet<>();\n    predicates.constantMap.keySet().forEach(key -> {\n      if (key instanceof RexInputRef) {\n        constants.add(((RexInputRef) key).getIndex());\n      }\n    });\n\n    if (constants.isEmpty()) {\n      return;\n    }\n\n    List<Integer> distributionKeys = new ArrayList<>();\n    boolean distributionSimplified = false;\n    boolean hashDistribution = sortExchange.getDistribution().getType()\n        == RelDistribution.Type.HASH_DISTRIBUTED;\n    if (hashDistribution) {\n      distributionKeys = simplifyDistributionKeys(\n          sortExchange.getDistribution(), constants);\n      distributionSimplified =\n          distributionKeys.size() != sortExchange.getDistribution().getKeys()\n              .size();\n    }\n\n    final List<RelFieldCollation> fieldCollations = sortExchange\n        .getCollation().getFieldCollations().stream().filter(\n            fc -> !constants.contains(fc.getFieldIndex()))\n        .collect(Collectors.toList());\n\n    boolean collationSimplified =\n        fieldCollations.size() != sortExchange.getCollation()\n            .getFieldCollations().size();\n    if (distributionSimplified\n        || collationSimplified) {\n      RelDistribution distribution = distributionSimplified\n          ? (distributionKeys.isEmpty()\n          ? RelDistributions.SINGLETON\n          : RelDistributions.hash(distributionKeys))\n          : sortExchange.getDistribution();\n      RelCollation collation = collationSimplified\n          ? RelCollations.of(fieldCollations)\n          : sortExchange.getCollation();\n\n      call.transformTo(call.builder()\n          .push(sortExchange.getInput())\n          .sortExchange(distribution, collation)\n          .build());\n      call.getPlanner().prune(sortExchange);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/ExchangeRemoveConstantKeysRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"B"}],"commitId":"998cd83ebe2fcd7ff3ee565299fed6e199269715","commitMessage":"@@@[CALCITE-3923] Refactor how planner rules are parameterized\n\nCreate operands using a builder interface.  OperandBuilder.  and\ndeprecate methods RelOptRule.operand etc.\n\nThe change is backwards compatible.  in the sense that\nexisting rule constructors are deprecated but still work.\nFrom now on.  to create rules.  call RelOptRule.Config.toRule()\n(which calls the rule's (Config) constructor).\n\nSub-classes of ConverterRule are a little different.  They\ndon't need their own sub-class of Config.  You just need to\ncall Config.withRuleFactory to specify the constructor of the\nsub-class of ConverterRule.\n\nMove rule instances into holder classes such as CoreRules. \nMaterializedViewRules. Deprecate existing rule INSTANCE fields\n(to be removed in 1.25). Deprecate previous rule constructors\n(to be removed in 2.0).\n\nDescribe how to write rules in howto and tutorial.\n\nRemove rule instances marked 'deprecated.  to be removed before\n1.25'.\n\nClose apache/calcite#2024\n","date":"2020-07-29 02:27:24","modifiedFileCount":"191","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  private static void matchExchange(ExchangeRemoveConstantKeysRule rule,\n      RelOptRuleCall call) {\n    final Exchange exchange = call.rel(0);\n    final RelMetadataQuery mq = call.getMetadataQuery();\n    final RelNode input = exchange.getInput();\n    final RelOptPredicateList predicates = mq.getPulledUpPredicates(input);\n    if (RelOptPredicateList.isEmpty(predicates)) {\n      return;\n    }\n\n    final Set<Integer> constants = new HashSet<>();\n    predicates.constantMap.keySet().forEach(key -> {\n      if (key instanceof RexInputRef) {\n        constants.add(((RexInputRef) key).getIndex());\n      }\n    });\n    if (constants.isEmpty()) {\n      return;\n    }\n\n    final List<Integer> distributionKeys = simplifyDistributionKeys(\n        exchange.getDistribution(), constants);\n\n    if (distributionKeys.size() != exchange.getDistribution().getKeys()\n        .size()) {\n      call.transformTo(call.builder()\n          .push(exchange.getInput())\n          .exchange(distributionKeys.isEmpty()\n              ? RelDistributions.SINGLETON\n              : RelDistributions.hash(distributionKeys))\n          .build());\n      call.getPlanner().prune(exchange);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":110,"groupId":"102017","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"matchExchange","params":"(ExchangeRemoveConstantKeysRulerule@RelOptRuleCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f0/9c5c117a42fe8321e06d2769a7d8ac37c608e3.src","preCode":"  private static void matchExchange(ExchangeRemoveConstantKeysRule rule,\n      RelOptRuleCall call) {\n    final Exchange exchange = call.rel(0);\n    final RelMetadataQuery mq = call.getMetadataQuery();\n    final RelNode input = exchange.getInput();\n    final RelOptPredicateList predicates = mq.getPulledUpPredicates(input);\n    if (predicates == null) {\n      return;\n    }\n\n    final Set<Integer> constants = new HashSet<>();\n    predicates.constantMap.keySet().forEach(key -> {\n      if (key instanceof RexInputRef) {\n        constants.add(((RexInputRef) key).getIndex());\n      }\n    });\n    if (constants.isEmpty()) {\n      return;\n    }\n\n    final List<Integer> distributionKeys = simplifyDistributionKeys(\n        exchange.getDistribution(), constants);\n\n    if (distributionKeys.size() != exchange.getDistribution().getKeys()\n        .size()) {\n      call.transformTo(call.builder()\n          .push(exchange.getInput())\n          .exchange(distributionKeys.isEmpty()\n              ? RelDistributions.SINGLETON\n              : RelDistributions.hash(distributionKeys))\n          .build());\n      call.getPlanner().prune(exchange);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/ExchangeRemoveConstantKeysRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  private static void matchSortExchange(ExchangeRemoveConstantKeysRule rule,\n      RelOptRuleCall call) {\n    final SortExchange sortExchange = call.rel(0);\n    final RelMetadataQuery mq = call.getMetadataQuery();\n    final RelNode input = sortExchange.getInput();\n    final RelOptPredicateList predicates = mq.getPulledUpPredicates(input);\n    if (RelOptPredicateList.isEmpty(predicates)) {\n      return;\n    }\n\n    final Set<Integer> constants = new HashSet<>();\n    predicates.constantMap.keySet().forEach(key -> {\n      if (key instanceof RexInputRef) {\n        constants.add(((RexInputRef) key).getIndex());\n      }\n    });\n\n    if (constants.isEmpty()) {\n      return;\n    }\n\n    List<Integer> distributionKeys = new ArrayList<>();\n    boolean distributionSimplified = false;\n    boolean hashDistribution = sortExchange.getDistribution().getType()\n        == RelDistribution.Type.HASH_DISTRIBUTED;\n    if (hashDistribution) {\n      distributionKeys = simplifyDistributionKeys(\n          sortExchange.getDistribution(), constants);\n      distributionSimplified =\n          distributionKeys.size() != sortExchange.getDistribution().getKeys()\n              .size();\n    }\n\n    final List<RelFieldCollation> fieldCollations = sortExchange\n        .getCollation().getFieldCollations().stream().filter(\n            fc -> !constants.contains(fc.getFieldIndex()))\n        .collect(Collectors.toList());\n\n    boolean collationSimplified =\n        fieldCollations.size() != sortExchange.getCollation()\n            .getFieldCollations().size();\n    if (distributionSimplified\n        || collationSimplified) {\n      RelDistribution distribution = distributionSimplified\n          ? (distributionKeys.isEmpty()\n          ? RelDistributions.SINGLETON\n          : RelDistributions.hash(distributionKeys))\n          : sortExchange.getDistribution();\n      RelCollation collation = collationSimplified\n          ? RelCollations.of(fieldCollations)\n          : sortExchange.getCollation();\n\n      call.transformTo(call.builder()\n          .push(sortExchange.getInput())\n          .sortExchange(distribution, collation)\n          .build());\n      call.getPlanner().prune(sortExchange);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":170,"groupId":"102017","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"matchSortExchange","params":"(ExchangeRemoveConstantKeysRulerule@RelOptRuleCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f0/9c5c117a42fe8321e06d2769a7d8ac37c608e3.src","preCode":"  private static void matchSortExchange(ExchangeRemoveConstantKeysRule rule,\n      RelOptRuleCall call) {\n    final SortExchange sortExchange = call.rel(0);\n    final RelMetadataQuery mq = call.getMetadataQuery();\n    final RelNode input = sortExchange.getInput();\n    final RelOptPredicateList predicates = mq.getPulledUpPredicates(input);\n    if (predicates == null) {\n      return;\n    }\n\n    final Set<Integer> constants = new HashSet<>();\n    predicates.constantMap.keySet().forEach(key -> {\n      if (key instanceof RexInputRef) {\n        constants.add(((RexInputRef) key).getIndex());\n      }\n    });\n\n    if (constants.isEmpty()) {\n      return;\n    }\n\n    List<Integer> distributionKeys = new ArrayList<>();\n    boolean distributionSimplified = false;\n    boolean hashDistribution = sortExchange.getDistribution().getType()\n        == RelDistribution.Type.HASH_DISTRIBUTED;\n    if (hashDistribution) {\n      distributionKeys = simplifyDistributionKeys(\n          sortExchange.getDistribution(), constants);\n      distributionSimplified =\n          distributionKeys.size() != sortExchange.getDistribution().getKeys()\n              .size();\n    }\n\n    final List<RelFieldCollation> fieldCollations = sortExchange\n        .getCollation().getFieldCollations().stream().filter(\n            fc -> !constants.contains(fc.getFieldIndex()))\n        .collect(Collectors.toList());\n\n    boolean collationSimplified =\n        fieldCollations.size() != sortExchange.getCollation()\n            .getFieldCollations().size();\n    if (distributionSimplified\n        || collationSimplified) {\n      RelDistribution distribution = distributionSimplified\n          ? (distributionKeys.isEmpty()\n          ? RelDistributions.SINGLETON\n          : RelDistributions.hash(distributionKeys))\n          : sortExchange.getDistribution();\n      RelCollation collation = collationSimplified\n          ? RelCollations.of(fieldCollations)\n          : sortExchange.getCollation();\n\n      call.transformTo(call.builder()\n          .push(sortExchange.getInput())\n          .sortExchange(distribution, collation)\n          .build());\n      call.getPlanner().prune(sortExchange);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/ExchangeRemoveConstantKeysRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
