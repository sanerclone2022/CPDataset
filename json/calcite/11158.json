[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public Expression append(String name, BlockStatement block,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1, Expressions.statement(\n            ((GotoStatement) lastStatement).expression));\n      }\n    }\n    Expression result = null;\n    final Map<ParameterExpression, Expression> replacements =\n        new IdentityHashMap<ParameterExpression, Expression>();\n    final Visitor visitor = new SubstituteVariableVisitor(replacements);\n    for (int i = 0; i < block.statements.size(); i++) {\n      Statement statement = block.statements.get(i);\n      if (!replacements.isEmpty()) {\n        \r\n        statement = statement.accept(visitor);\n      }\n      if (statement instanceof DeclarationStatement) {\n        DeclarationStatement declaration = (DeclarationStatement) statement;\n        if (variables.contains(declaration.parameter.name)) {\n          Expression x = append(\n              newName(declaration.parameter.name, optimize),\n              declaration.initializer);\n          statement = null;\n          result = x;\n          if (declaration.parameter != x) {\n            \r\n            \r\n            replacements.put(declaration.parameter, x);\n          }\n        } else {\n          add(statement);\n        }\n      } else {\n        add(statement);\n      }\n      if (i == block.statements.size() - 1) {\n        if (statement instanceof DeclarationStatement) {\n          result = ((DeclarationStatement) statement).parameter;\n        } else if (statement instanceof GotoStatement) {\n          statements.remove(statements.size() - 1);\n          result = append_(name, ((GotoStatement) statement).expression,\n              optimize);\n          if (isSimpleExpression(result)) {\n            \r\n            \r\n          } else {\n            DeclarationStatement declare = Expressions.declare(Modifier.FINAL,\n                newName(name, optimize), result);\n            add(declare);\n            result = declare.parameter;\n          }\n        } else {\n          \r\n        }\n      }\n    }\n    return result;\n  }\n","date":"2014-11-14 09:39:34","endLine":157,"groupId":"2472","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"append","params":"(Stringname@BlockStatementblock@booleanoptimize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fb/dcc9bbbfe0ab12326bc9f685a86bc7afb04c85.src","preCode":"  public Expression append(String name, BlockStatement block,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1, Expressions.statement(\n            ((GotoStatement) lastStatement).expression));\n      }\n    }\n    Expression result = null;\n    final Map<ParameterExpression, Expression> replacements =\n        new IdentityHashMap<ParameterExpression, Expression>();\n    final Visitor visitor = new SubstituteVariableVisitor(replacements);\n    for (int i = 0; i < block.statements.size(); i++) {\n      Statement statement = block.statements.get(i);\n      if (!replacements.isEmpty()) {\n        \r\n        statement = statement.accept(visitor);\n      }\n      if (statement instanceof DeclarationStatement) {\n        DeclarationStatement declaration = (DeclarationStatement) statement;\n        if (variables.contains(declaration.parameter.name)) {\n          Expression x = append(\n              newName(declaration.parameter.name, optimize),\n              declaration.initializer);\n          statement = null;\n          result = x;\n          if (declaration.parameter != x) {\n            \r\n            \r\n            replacements.put(declaration.parameter, x);\n          }\n        } else {\n          add(statement);\n        }\n      } else {\n        add(statement);\n      }\n      if (i == block.statements.size() - 1) {\n        if (statement instanceof DeclarationStatement) {\n          result = ((DeclarationStatement) statement).parameter;\n        } else if (statement instanceof GotoStatement) {\n          statements.remove(statements.size() - 1);\n          result = append_(name, ((GotoStatement) statement).expression,\n              optimize);\n          if (isSimpleExpression(result)) {\n            \r\n            \r\n          } else {\n            DeclarationStatement declare = Expressions.declare(Modifier.FINAL,\n                newName(name, optimize), result);\n            add(declare);\n            result = declare.parameter;\n          }\n        } else {\n          \r\n        }\n      }\n    }\n    return result;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public Expression append(String name, Expression expression,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1, Expressions.statement(\n            ((GotoStatement) lastStatement).expression));\n      }\n    }\n    return append_(name, expression, optimize);\n  }\n","date":"2014-11-14 09:39:34","endLine":193,"groupId":"2471","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"append","params":"(Stringname@Expressionexpression@booleanoptimize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fb/dcc9bbbfe0ab12326bc9f685a86bc7afb04c85.src","preCode":"  public Expression append(String name, Expression expression,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1, Expressions.statement(\n            ((GotoStatement) lastStatement).expression));\n      }\n    }\n    return append_(name, expression, optimize);\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2016-12-06 11:53:41","commitOrder":2,"curCode":"  public Expression append(String name, BlockStatement block,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1,\n            Expressions.statement(((GotoStatement) lastStatement).expression));\n      }\n    }\n    Expression result = null;\n    final Map<ParameterExpression, Expression> replacements =\n        new IdentityHashMap<>();\n    final Shuttle shuttle = new SubstituteVariableVisitor(replacements);\n    for (int i = 0; i < block.statements.size(); i++) {\n      Statement statement = block.statements.get(i);\n      if (!replacements.isEmpty()) {\n        \r\n        statement = statement.accept(shuttle);\n      }\n      if (statement instanceof DeclarationStatement) {\n        DeclarationStatement declaration = (DeclarationStatement) statement;\n        if (variables.contains(declaration.parameter.name)) {\n          Expression x = append(\n              newName(declaration.parameter.name, optimize),\n              declaration.initializer);\n          statement = null;\n          result = x;\n          if (declaration.parameter != x) {\n            \r\n            \r\n            replacements.put(declaration.parameter, x);\n          }\n        } else {\n          add(statement);\n        }\n      } else {\n        add(statement);\n      }\n      if (i == block.statements.size() - 1) {\n        if (statement instanceof DeclarationStatement) {\n          result = ((DeclarationStatement) statement).parameter;\n        } else if (statement instanceof GotoStatement) {\n          statements.remove(statements.size() - 1);\n          result = append_(name, ((GotoStatement) statement).expression,\n              optimize);\n          if (isSimpleExpression(result)) {\n            \r\n            \r\n          } else {\n            DeclarationStatement declare = Expressions.declare(Modifier.FINAL,\n                newName(name, optimize), result);\n            add(declare);\n            result = declare.parameter;\n          }\n        } else {\n          \r\n        }\n      }\n    }\n    return result;\n  }\n","date":"2016-12-08 03:17:40","endLine":163,"groupId":"2472","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"append","params":"(Stringname@BlockStatementblock@booleanoptimize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ff/13d669a0304bd369c3195a7a5d10be4a22b263.src","preCode":"  public Expression append(String name, BlockStatement block,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1,\n            Expressions.statement(((GotoStatement) lastStatement).expression));\n      }\n    }\n    Expression result = null;\n    final Map<ParameterExpression, Expression> replacements =\n        new IdentityHashMap<ParameterExpression, Expression>();\n    final Visitor visitor = new SubstituteVariableVisitor(replacements);\n    for (int i = 0; i < block.statements.size(); i++) {\n      Statement statement = block.statements.get(i);\n      if (!replacements.isEmpty()) {\n        \r\n        statement = statement.accept(visitor);\n      }\n      if (statement instanceof DeclarationStatement) {\n        DeclarationStatement declaration = (DeclarationStatement) statement;\n        if (variables.contains(declaration.parameter.name)) {\n          Expression x = append(\n              newName(declaration.parameter.name, optimize),\n              declaration.initializer);\n          statement = null;\n          result = x;\n          if (declaration.parameter != x) {\n            \r\n            \r\n            replacements.put(declaration.parameter, x);\n          }\n        } else {\n          add(statement);\n        }\n      } else {\n        add(statement);\n      }\n      if (i == block.statements.size() - 1) {\n        if (statement instanceof DeclarationStatement) {\n          result = ((DeclarationStatement) statement).parameter;\n        } else if (statement instanceof GotoStatement) {\n          statements.remove(statements.size() - 1);\n          result = append_(name, ((GotoStatement) statement).expression,\n              optimize);\n          if (isSimpleExpression(result)) {\n            \r\n            \r\n          } else {\n            DeclarationStatement declare = Expressions.declare(Modifier.FINAL,\n                newName(name, optimize), result);\n            add(declare);\n            result = declare.parameter;\n          }\n        } else {\n          \r\n        }\n      }\n    }\n    return result;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  public Expression append(String name, Expression expression,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1, Expressions.statement(\n            ((GotoStatement) lastStatement).expression));\n      }\n    }\n    return append_(name, expression, optimize);\n  }\n","date":"2014-11-14 09:39:34","endLine":193,"groupId":"2471","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"append","params":"(Stringname@Expressionexpression@booleanoptimize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fb/dcc9bbbfe0ab12326bc9f685a86bc7afb04c85.src","preCode":"  public Expression append(String name, Expression expression,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1, Expressions.statement(\n            ((GotoStatement) lastStatement).expression));\n      }\n    }\n    return append_(name, expression, optimize);\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"N"}],"commitId":"267e2f3e1db71e678f80bb69015164c0d45bcfe4","commitMessage":"@@@[CALCITE-1530] Create a visitor to traverse linq4j expressions without mutating them.  and rename Visitor to Shuttle\n","date":"2016-12-08 03:17:40","modifiedFileCount":"46","status":"M","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2018-08-26 18:28:31","commitOrder":3,"curCode":"  public Expression append(String name, BlockStatement block,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1,\n            Expressions.statement(((GotoStatement) lastStatement).expression));\n      }\n    }\n    Expression result = null;\n    final Map<ParameterExpression, Expression> replacements =\n        new IdentityHashMap<>();\n    final Shuttle shuttle = new SubstituteVariableVisitor(replacements);\n    for (int i = 0; i < block.statements.size(); i++) {\n      Statement statement = block.statements.get(i);\n      if (!replacements.isEmpty()) {\n        \r\n        statement = statement.accept(shuttle);\n      }\n      if (statement instanceof DeclarationStatement) {\n        DeclarationStatement declaration = (DeclarationStatement) statement;\n        if (!variables.contains(declaration.parameter.name)) {\n          add(statement);\n        } else {\n          String newName = newName(declaration.parameter.name, optimize);\n          Expression x;\n          \r\n          if (declaration.initializer != null && isSafeForReuse(declaration)) {\n            x = append(newName, declaration.initializer);\n          } else {\n            ParameterExpression pe = Expressions.parameter(\n                declaration.parameter.type, newName);\n            DeclarationStatement newDeclaration = Expressions.declare(\n                declaration.modifiers, pe, declaration.initializer\n            );\n            x = pe;\n            add(newDeclaration);\n          }\n          statement = null;\n          result = x;\n          if (declaration.parameter != x) {\n            \r\n            \r\n            replacements.put(declaration.parameter, x);\n          }\n        }\n      } else {\n        add(statement);\n      }\n      if (i == block.statements.size() - 1) {\n        if (statement instanceof DeclarationStatement) {\n          result = ((DeclarationStatement) statement).parameter;\n        } else if (statement instanceof GotoStatement) {\n          statements.remove(statements.size() - 1);\n          result = append_(name, ((GotoStatement) statement).expression,\n              optimize);\n          if (isSimpleExpression(result)) {\n            \r\n            \r\n          } else {\n            DeclarationStatement declare = Expressions.declare(Modifier.FINAL,\n                newName(name, optimize), result);\n            add(declare);\n            result = declare.parameter;\n          }\n        } else {\n          \r\n        }\n      }\n    }\n    return result;\n  }\n","date":"2018-08-28 15:05:36","endLine":174,"groupId":"2471","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"append","params":"(Stringname@BlockStatementblock@booleanoptimize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e5/9bc65d31ae1bfaab8c9963d111e33267d4b088.src","preCode":"  public Expression append(String name, BlockStatement block,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1,\n            Expressions.statement(((GotoStatement) lastStatement).expression));\n      }\n    }\n    Expression result = null;\n    final Map<ParameterExpression, Expression> replacements =\n        new IdentityHashMap<>();\n    final Shuttle shuttle = new SubstituteVariableVisitor(replacements);\n    for (int i = 0; i < block.statements.size(); i++) {\n      Statement statement = block.statements.get(i);\n      if (!replacements.isEmpty()) {\n        \r\n        statement = statement.accept(shuttle);\n      }\n      if (statement instanceof DeclarationStatement) {\n        DeclarationStatement declaration = (DeclarationStatement) statement;\n        if (variables.contains(declaration.parameter.name)) {\n          Expression x = append(\n              newName(declaration.parameter.name, optimize),\n              declaration.initializer);\n          statement = null;\n          result = x;\n          if (declaration.parameter != x) {\n            \r\n            \r\n            replacements.put(declaration.parameter, x);\n          }\n        } else {\n          add(statement);\n        }\n      } else {\n        add(statement);\n      }\n      if (i == block.statements.size() - 1) {\n        if (statement instanceof DeclarationStatement) {\n          result = ((DeclarationStatement) statement).parameter;\n        } else if (statement instanceof GotoStatement) {\n          statements.remove(statements.size() - 1);\n          result = append_(name, ((GotoStatement) statement).expression,\n              optimize);\n          if (isSimpleExpression(result)) {\n            \r\n            \r\n          } else {\n            DeclarationStatement declare = Expressions.declare(Modifier.FINAL,\n                newName(name, optimize), result);\n            add(declare);\n            result = declare.parameter;\n          }\n        } else {\n          \r\n        }\n      }\n    }\n    return result;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":3,"curCode":"  public Expression append(String name, Expression expression,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1, Expressions.statement(\n            ((GotoStatement) lastStatement).expression));\n      }\n    }\n    return append_(name, expression, optimize);\n  }\n","date":"2014-11-14 09:39:34","endLine":193,"groupId":"2471","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"append","params":"(Stringname@Expressionexpression@booleanoptimize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fb/dcc9bbbfe0ab12326bc9f685a86bc7afb04c85.src","preCode":"  public Expression append(String name, Expression expression,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1, Expressions.statement(\n            ((GotoStatement) lastStatement).expression));\n      }\n    }\n    return append_(name, expression, optimize);\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"N"}],"commitId":"af3e35d64a7c29dfaa451c4ab4880424a8fe8cee","commitMessage":"@@@[CALCITE-2271] Join of two views with window aggregates produces incorrect results or NPE\n\nAvoid NPE in BlockBuilder.append when empty variable initializer is used\n\ncloses #673\n","date":"2018-08-28 15:05:36","modifiedFileCount":"6","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  public Expression append(String name, BlockStatement block,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1,\n            Expressions.statement(((GotoStatement) lastStatement).expression));\n      }\n    }\n    Expression result = null;\n    final Map<ParameterExpression, Expression> replacements =\n        new IdentityHashMap<>();\n    final Shuttle shuttle = new SubstituteVariableVisitor(replacements);\n    for (int i = 0; i < block.statements.size(); i++) {\n      Statement statement = block.statements.get(i);\n      if (!replacements.isEmpty()) {\n        \r\n        statement = statement.accept(shuttle);\n      }\n      if (statement instanceof DeclarationStatement) {\n        DeclarationStatement declaration = (DeclarationStatement) statement;\n        if (!variables.contains(declaration.parameter.name)) {\n          add(statement);\n        } else {\n          String newName = newName(declaration.parameter.name, optimize);\n          Expression x;\n          \r\n          if (declaration.initializer != null && isSafeForReuse(declaration)) {\n            x = append(newName, declaration.initializer);\n          } else {\n            ParameterExpression pe = Expressions.parameter(\n                declaration.parameter.type, newName);\n            DeclarationStatement newDeclaration = Expressions.declare(\n                declaration.modifiers, pe, declaration.initializer);\n            x = pe;\n            add(newDeclaration);\n          }\n          statement = null;\n          result = x;\n          if (declaration.parameter != x) {\n            \r\n            \r\n            replacements.put(declaration.parameter, x);\n          }\n        }\n      } else {\n        add(statement);\n      }\n      if (i == block.statements.size() - 1) {\n        if (statement instanceof DeclarationStatement) {\n          result = ((DeclarationStatement) statement).parameter;\n        } else if (statement instanceof GotoStatement) {\n          statements.remove(statements.size() - 1);\n          result = append_(name,\n              requireNonNull(((GotoStatement) statement).expression, \"expression\"),\n              optimize);\n          if (isSimpleExpression(result)) {\n            \r\n            \r\n          } else {\n            DeclarationStatement declare = Expressions.declare(Modifier.FINAL,\n                newName(name, optimize), result);\n            add(declare);\n            result = declare.parameter;\n          }\n        } else {\n          \r\n        }\n      }\n    }\n    return requireNonNull(result, () -> \"empty result when appending name=\" + name + \", \" + block);\n  }\n","date":"2020-11-30 06:45:33","endLine":179,"groupId":"2471","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"append","params":"(Stringname@BlockStatementblock@booleanoptimize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/9de9349506f5ba7b21ad1846c44a463a97e54d.src","preCode":"  public Expression append(String name, BlockStatement block,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1,\n            Expressions.statement(((GotoStatement) lastStatement).expression));\n      }\n    }\n    Expression result = null;\n    final Map<ParameterExpression, Expression> replacements =\n        new IdentityHashMap<>();\n    final Shuttle shuttle = new SubstituteVariableVisitor(replacements);\n    for (int i = 0; i < block.statements.size(); i++) {\n      Statement statement = block.statements.get(i);\n      if (!replacements.isEmpty()) {\n        \r\n        statement = statement.accept(shuttle);\n      }\n      if (statement instanceof DeclarationStatement) {\n        DeclarationStatement declaration = (DeclarationStatement) statement;\n        if (!variables.contains(declaration.parameter.name)) {\n          add(statement);\n        } else {\n          String newName = newName(declaration.parameter.name, optimize);\n          Expression x;\n          \r\n          if (declaration.initializer != null && isSafeForReuse(declaration)) {\n            x = append(newName, declaration.initializer);\n          } else {\n            ParameterExpression pe = Expressions.parameter(\n                declaration.parameter.type, newName);\n            DeclarationStatement newDeclaration = Expressions.declare(\n                declaration.modifiers, pe, declaration.initializer);\n            x = pe;\n            add(newDeclaration);\n          }\n          statement = null;\n          result = x;\n          if (declaration.parameter != x) {\n            \r\n            \r\n            replacements.put(declaration.parameter, x);\n          }\n        }\n      } else {\n        add(statement);\n      }\n      if (i == block.statements.size() - 1) {\n        if (statement instanceof DeclarationStatement) {\n          result = ((DeclarationStatement) statement).parameter;\n        } else if (statement instanceof GotoStatement) {\n          statements.remove(statements.size() - 1);\n          result = append_(name, ((GotoStatement) statement).expression,\n              optimize);\n          if (isSimpleExpression(result)) {\n            \r\n            \r\n          } else {\n            DeclarationStatement declare = Expressions.declare(Modifier.FINAL,\n                newName(name, optimize), result);\n            add(declare);\n            result = declare.parameter;\n          }\n        } else {\n          \r\n        }\n      }\n    }\n    return result;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":4,"curCode":"  public Expression append(String name, Expression expression,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1, Expressions.statement(\n            ((GotoStatement) lastStatement).expression));\n      }\n    }\n    return append_(name, expression, optimize);\n  }\n","date":"2014-11-14 09:39:34","endLine":193,"groupId":"2471","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"append","params":"(Stringname@Expressionexpression@booleanoptimize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fb/dcc9bbbfe0ab12326bc9f685a86bc7afb04c85.src","preCode":"  public Expression append(String name, Expression expression,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1, Expressions.statement(\n            ((GotoStatement) lastStatement).expression));\n      }\n    }\n    return append_(name, expression, optimize);\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"N"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2021-02-21 19:38:10","commitOrder":5,"curCode":"  public Expression append(String name, BlockStatement block,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1,\n            Expressions.statement(((GotoStatement) lastStatement).expression));\n      }\n    }\n    Expression result = null;\n    final IdentityHashMap<ParameterExpression, Expression> replacements =\n        new IdentityHashMap<>();\n    final Shuttle shuttle = new SubstituteVariableVisitor(replacements);\n    for (int i = 0; i < block.statements.size(); i++) {\n      Statement statement = block.statements.get(i);\n      if (!replacements.isEmpty()) {\n        \r\n        statement = statement.accept(shuttle);\n      }\n      if (statement instanceof DeclarationStatement) {\n        DeclarationStatement declaration = (DeclarationStatement) statement;\n        if (!variables.contains(declaration.parameter.name)) {\n          add(statement);\n        } else {\n          String newName = newName(declaration.parameter.name, optimize);\n          Expression x;\n          \r\n          if (declaration.initializer != null && isSafeForReuse(declaration)) {\n            x = append(newName, declaration.initializer);\n          } else {\n            ParameterExpression pe = Expressions.parameter(\n                declaration.parameter.type, newName);\n            DeclarationStatement newDeclaration = Expressions.declare(\n                declaration.modifiers, pe, declaration.initializer);\n            x = pe;\n            add(newDeclaration);\n          }\n          statement = null;\n          result = x;\n          if (declaration.parameter != x) {\n            \r\n            \r\n            replacements.put(declaration.parameter, x);\n          }\n        }\n      } else {\n        add(statement);\n      }\n      if (i == block.statements.size() - 1) {\n        if (statement instanceof DeclarationStatement) {\n          result = ((DeclarationStatement) statement).parameter;\n        } else if (statement instanceof GotoStatement) {\n          statements.remove(statements.size() - 1);\n          result = append_(name,\n              requireNonNull(((GotoStatement) statement).expression, \"expression\"),\n              optimize);\n          if (isSimpleExpression(result)) {\n            \r\n            \r\n          } else {\n            DeclarationStatement declare = Expressions.declare(Modifier.FINAL,\n                newName(name, optimize), result);\n            add(declare);\n            result = declare.parameter;\n          }\n        } else {\n          \r\n        }\n      }\n    }\n    return requireNonNull(result, () -> \"empty result when appending name=\" + name + \", \" + block);\n  }\n","date":"2021-02-23 21:05:03","endLine":179,"groupId":"11158","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"append","params":"(Stringname@BlockStatementblock@booleanoptimize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/91/786f2ff82ec05f6c99b0fbb417f82ecbf668b5.src","preCode":"  public Expression append(String name, BlockStatement block,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1,\n            Expressions.statement(((GotoStatement) lastStatement).expression));\n      }\n    }\n    Expression result = null;\n    final Map<ParameterExpression, Expression> replacements =\n        new IdentityHashMap<>();\n    final Shuttle shuttle = new SubstituteVariableVisitor(replacements);\n    for (int i = 0; i < block.statements.size(); i++) {\n      Statement statement = block.statements.get(i);\n      if (!replacements.isEmpty()) {\n        \r\n        statement = statement.accept(shuttle);\n      }\n      if (statement instanceof DeclarationStatement) {\n        DeclarationStatement declaration = (DeclarationStatement) statement;\n        if (!variables.contains(declaration.parameter.name)) {\n          add(statement);\n        } else {\n          String newName = newName(declaration.parameter.name, optimize);\n          Expression x;\n          \r\n          if (declaration.initializer != null && isSafeForReuse(declaration)) {\n            x = append(newName, declaration.initializer);\n          } else {\n            ParameterExpression pe = Expressions.parameter(\n                declaration.parameter.type, newName);\n            DeclarationStatement newDeclaration = Expressions.declare(\n                declaration.modifiers, pe, declaration.initializer);\n            x = pe;\n            add(newDeclaration);\n          }\n          statement = null;\n          result = x;\n          if (declaration.parameter != x) {\n            \r\n            \r\n            replacements.put(declaration.parameter, x);\n          }\n        }\n      } else {\n        add(statement);\n      }\n      if (i == block.statements.size() - 1) {\n        if (statement instanceof DeclarationStatement) {\n          result = ((DeclarationStatement) statement).parameter;\n        } else if (statement instanceof GotoStatement) {\n          statements.remove(statements.size() - 1);\n          result = append_(name,\n              requireNonNull(((GotoStatement) statement).expression, \"expression\"),\n              optimize);\n          if (isSimpleExpression(result)) {\n            \r\n            \r\n          } else {\n            DeclarationStatement declare = Expressions.declare(Modifier.FINAL,\n                newName(name, optimize), result);\n            add(declare);\n            result = declare.parameter;\n          }\n        } else {\n          \r\n        }\n      }\n    }\n    return requireNonNull(result, () -> \"empty result when appending name=\" + name + \", \" + block);\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":5,"curCode":"  public Expression append(String name, Expression expression,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1, Expressions.statement(\n            ((GotoStatement) lastStatement).expression));\n      }\n    }\n    return append_(name, expression, optimize);\n  }\n","date":"2014-11-14 09:39:34","endLine":193,"groupId":"11158","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"append","params":"(Stringname@Expressionexpression@booleanoptimize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fb/dcc9bbbfe0ab12326bc9f685a86bc7afb04c85.src","preCode":"  public Expression append(String name, Expression expression,\n      boolean optimize) {\n    if (statements.size() > 0) {\n      Statement lastStatement = statements.get(statements.size() - 1);\n      if (lastStatement instanceof GotoStatement) {\n        \r\n        statements.set(statements.size() - 1, Expressions.statement(\n            ((GotoStatement) lastStatement).expression));\n      }\n    }\n    return append_(name, expression, optimize);\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"N"}],"commitId":"03e356c656c2bc98b1a273352475033545e0928d","commitMessage":"@@@Cleanup code after errorprone upgrade: IdentityHashMapUsage.  JdkObsolete -> JavaUtilDate\n\nSee http://errorprone.info/bugpattern/IdentityHashMapUsage\n","date":"2021-02-23 21:05:03","modifiedFileCount":"20","status":"M","submitter":"Vladimir Sitnikov"}]
