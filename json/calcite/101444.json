[{"authorTime":"2019-02-21 06:55:51","codes":[{"authorDate":"2018-07-06 04:21:59","commitOrder":6,"curCode":"  @Test public void testReader() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalAggregate(group=[{0}], agg#0=[COUNT(DISTINCT $1)], agg#1=[COUNT()])\\n\"\n            + \"  LogicalFilter(condition=[=($1, 10)])\\n\"\n            + \"    LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2018-07-09 01:16:26","endLine":178,"groupId":"4861","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c4/1188823cb3c65932e7c19712f1551a88eaf440.src","preCode":"  @Test public void testReader() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalAggregate(group=[{0}], agg#0=[COUNT(DISTINCT $1)], agg#1=[COUNT()])\\n\"\n            + \"  LogicalFilter(condition=[=($1, 10)])\\n\"\n            + \"    LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"NB"},{"authorDate":"2019-02-21 06:55:51","commitOrder":6,"curCode":"  @Test public void testReader2() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX2);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalProject(field0=[$0],\"\n            + \" field1=[COUNT($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)],\"\n            + \" field2=[SUM($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING)])\\n\"\n            + \"  LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2019-02-26 00:37:03","endLine":448,"groupId":"8749","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReader2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a1/b3d82ab4695facb9efc875785571b7de6695d2.src","preCode":"  @Test public void testReader2() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX2);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalProject(field0=[$0],\"\n            + \" field1=[COUNT($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)],\"\n            + \" field2=[SUM($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING)])\\n\"\n            + \"  LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"B"}],"commitId":"e94c1574e234ae58b7daac327ea8ce69d2873f22","commitMessage":"@@@[CALCITE-2858] Improvements in JSON writer and reader for plans\n\nClose apache/calcite#1056\n","date":"2019-02-26 00:37:03","modifiedFileCount":"6","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2019-02-14 04:35:36","codes":[{"authorDate":"2019-02-14 04:35:36","commitOrder":7,"curCode":"  @Test public void testReader() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalAggregate(group=[{0}], agg#0=[COUNT(DISTINCT $1)], agg#1=[COUNT()])\\n\"\n            + \"  LogicalFilter(condition=[=($1, 10)])\\n\"\n            + \"    LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2019-02-27 15:04:26","endLine":421,"groupId":"8748","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/76/f7ba16f421ca3d02c3295447ae3e2aef5a5f0f.src","preCode":"  @Test public void testReader() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalAggregate(group=[{0}], agg#0=[COUNT(DISTINCT $1)], agg#1=[COUNT()])\\n\"\n            + \"  LogicalFilter(condition=[=($1, 10)])\\n\"\n            + \"    LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"M"},{"authorDate":"2019-02-14 04:35:36","commitOrder":7,"curCode":"  @Test public void testReader2() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX2);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalProject(field0=[$0],\"\n            + \" field1=[COUNT($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)],\"\n            + \" field2=[SUM($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING)])\\n\"\n            + \"  LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2019-02-27 15:04:26","endLine":449,"groupId":"8749","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReader2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/76/f7ba16f421ca3d02c3295447ae3e2aef5a5f0f.src","preCode":"  @Test public void testReader2() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX2);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalProject(field0=[$0],\"\n            + \" field1=[COUNT($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)],\"\n            + \" field2=[SUM($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING)])\\n\"\n            + \"  LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"}],"commitId":"ebafff1ede5921901b322872693bf1dbdf09fc8d","commitMessage":"@@@[CALCITE-2878] Avoid use of new RuntimeException(e) in tests\n\nnew RuntimeException(e) adds very little info in tests.  and it makes stacktraces harder to read.\nSo it makes sense to just sneaky-throw in those cases.  especially for test purposes.\n","date":"2019-02-27 15:04:26","modifiedFileCount":"38","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2019-02-14 04:35:36","codes":[{"authorDate":"2019-08-26 20:45:16","commitOrder":8,"curCode":"  @Test public void testReader() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalAggregate(group=[{0}], c=[COUNT(DISTINCT $1)], d=[COUNT()])\\n\"\n            + \"  LogicalFilter(condition=[=($1, 10)])\\n\"\n            + \"    LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2019-08-28 04:53:34","endLine":460,"groupId":"8748","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/69/0c37263178ba435ad8c15c51ed133c95dfed24.src","preCode":"  @Test public void testReader() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalAggregate(group=[{0}], agg#0=[COUNT(DISTINCT $1)], agg#1=[COUNT()])\\n\"\n            + \"  LogicalFilter(condition=[=($1, 10)])\\n\"\n            + \"    LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"M"},{"authorDate":"2019-02-14 04:35:36","commitOrder":8,"curCode":"  @Test public void testReader2() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX2);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalProject(field0=[$0],\"\n            + \" field1=[COUNT($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)],\"\n            + \" field2=[SUM($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING)])\\n\"\n            + \"  LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2019-02-27 15:04:26","endLine":449,"groupId":"8749","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReader2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/76/f7ba16f421ca3d02c3295447ae3e2aef5a5f0f.src","preCode":"  @Test public void testReader2() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX2);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalProject(field0=[$0],\"\n            + \" field1=[COUNT($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)],\"\n            + \" field2=[SUM($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING)])\\n\"\n            + \"  LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"N"}],"commitId":"97d68952d467540cddddbe8350f706028001dfbf","commitMessage":"@@@[CALCITE-3295] Add aggregate call name in serialized json string for relnode (Wang Yanlin)\n\nClose #1415\n","date":"2019-08-28 04:53:34","modifiedFileCount":"3","status":"M","submitter":"yanzhi"},{"authorTime":"2019-08-29 11:06:25","codes":[{"authorDate":"2019-08-26 20:45:16","commitOrder":9,"curCode":"  @Test public void testReader() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalAggregate(group=[{0}], c=[COUNT(DISTINCT $1)], d=[COUNT()])\\n\"\n            + \"  LogicalFilter(condition=[=($1, 10)])\\n\"\n            + \"    LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2019-08-28 04:53:34","endLine":460,"groupId":"8748","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/69/0c37263178ba435ad8c15c51ed133c95dfed24.src","preCode":"  @Test public void testReader() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalAggregate(group=[{0}], c=[COUNT(DISTINCT $1)], d=[COUNT()])\\n\"\n            + \"  LogicalFilter(condition=[=($1, 10)])\\n\"\n            + \"    LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"N"},{"authorDate":"2019-08-29 11:06:25","commitOrder":9,"curCode":"  @Test public void testReader2() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX2);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalProject(field0=[$0],\"\n            + \" field1=[COUNT($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST ROWS BETWEEN\"\n            + \" UNBOUNDED PRECEDING AND CURRENT ROW)],\"\n            + \" field2=[SUM($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST RANGE BETWEEN\"\n            + \" CURRENT ROW AND 1 FOLLOWING)])\\n\"\n            + \"  LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2019-11-04 12:58:07","endLine":502,"groupId":"8749","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testReader2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c0/324fad78c1c600f97c11b717cf558a51d9e431.src","preCode":"  @Test public void testReader2() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX2);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalProject(field0=[$0],\"\n            + \" field1=[COUNT($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)],\"\n            + \" field2=[SUM($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING)])\\n\"\n            + \"  LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":477,"status":"M"}],"commitId":"9dd4e124adb20b4d073afb6902ac4bb3bfc3ed09","commitMessage":"@@@[CALCITE-3254] Exception while deserializing with interval type or with empty partition/order key for RexOver (Wang Yanlin)\n\n Changes:\n  add check for INTERVAL_TYPES\n  add check for the empty case of partition key or order key when deserialize RexOver\n","date":"2019-11-04 12:58:07","modifiedFileCount":"2","status":"M","submitter":"yanzhi"},{"authorTime":"2020-03-26 09:32:45","codes":[{"authorDate":"2019-08-26 20:45:16","commitOrder":10,"curCode":"  @Test public void testReader() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalAggregate(group=[{0}], c=[COUNT(DISTINCT $1)], d=[COUNT()])\\n\"\n            + \"  LogicalFilter(condition=[=($1, 10)])\\n\"\n            + \"    LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2019-08-28 04:53:34","endLine":460,"groupId":"8748","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/69/0c37263178ba435ad8c15c51ed133c95dfed24.src","preCode":"  @Test public void testReader() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalAggregate(group=[{0}], c=[COUNT(DISTINCT $1)], d=[COUNT()])\\n\"\n            + \"  LogicalFilter(condition=[=($1, 10)])\\n\"\n            + \"    LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"N"},{"authorDate":"2020-03-26 09:32:45","commitOrder":10,"curCode":"  @Test public void testReader2() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX2);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalProject(field0=[$0],\"\n            + \" field1=[COUNT($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST \"\n            + \"ROWS UNBOUNDED PRECEDING)],\"\n            + \" field2=[SUM($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST \"\n            + \"RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING)])\\n\"\n            + \"  LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2020-04-06 04:53:38","endLine":537,"groupId":"8749","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testReader2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/37/2832fabe41ff6a42f08eeda4433ed9b0cfce81.src","preCode":"  @Test public void testReader2() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX2);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalProject(field0=[$0],\"\n            + \" field1=[COUNT($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST ROWS BETWEEN\"\n            + \" UNBOUNDED PRECEDING AND CURRENT ROW)],\"\n            + \" field2=[SUM($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST RANGE BETWEEN\"\n            + \" CURRENT ROW AND 1 FOLLOWING)])\\n\"\n            + \"  LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":512,"status":"M"}],"commitId":"ddda872b4922266c102f474042b4df27ba9a09be","commitMessage":"@@@[CALCITE-3877] In RexWindow.  make fields upperBound and lowerBound not-nullable\n\nWhere you would previously have supplied null to RexBuilder.makeOver. \nnow supply RexWindowBounds.UNBOUNDED_PRECEDING. \nRexWindowBounds.UNBOUNDED_FOLLOWING.  or RexWindowBounds.CURRENT_ROW.\n\nMove RexWindowBound.create into new class RexWindowBounds.  with methods\nand constants for the various types of bound.\n\nDon't keep SqlNode inside RexWindowBound objects.\n\nDuring validation.  don't mutate the lowerBound and upperBound fields in\nSqlWindow.\n\nNote that \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\" is not\nequivalent to \"ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\".\n\"RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\"\n(that is.  not bracket) is equivalent to\n\"ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\". \nbut we require RANGE.  to keep things canonical.\n\nClose apache/calcite#1896\n","date":"2020-04-06 04:53:38","modifiedFileCount":"22","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":11,"curCode":"  @Test void testReader() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalAggregate(group=[{0}], c=[COUNT(DISTINCT $1)], d=[COUNT()])\\n\"\n            + \"  LogicalFilter(condition=[=($1, 10)])\\n\"\n            + \"    LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":507,"groupId":"101444","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/9753fd8857c7f47fc20212946c9a27afb27294.src","preCode":"  @Test public void testReader() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalAggregate(group=[{0}], c=[COUNT(DISTINCT $1)], d=[COUNT()])\\n\"\n            + \"  LogicalFilter(condition=[=($1, 10)])\\n\"\n            + \"    LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":485,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":11,"curCode":"  @Test void testReader2() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX2);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalProject(field0=[$0],\"\n            + \" field1=[COUNT($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST \"\n            + \"ROWS UNBOUNDED PRECEDING)],\"\n            + \" field2=[SUM($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST \"\n            + \"RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING)])\\n\"\n            + \"  LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":537,"groupId":"101444","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testReader2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/9753fd8857c7f47fc20212946c9a27afb27294.src","preCode":"  @Test public void testReader2() {\n    String s =\n        Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n          SchemaPlus schema =\n              rootSchema.add(\"hr\",\n                  new ReflectiveSchema(new JdbcTest.HrSchema()));\n          final RelJsonReader reader =\n              new RelJsonReader(cluster, relOptSchema, schema);\n          RelNode node;\n          try {\n            node = reader.read(XX2);\n          } catch (IOException e) {\n            throw TestUtil.rethrow(e);\n          }\n          return RelOptUtil.dumpPlan(\"\", node, SqlExplainFormat.TEXT,\n              SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n        });\n\n    assertThat(s,\n        isLinux(\"LogicalProject(field0=[$0],\"\n            + \" field1=[COUNT($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST \"\n            + \"ROWS UNBOUNDED PRECEDING)],\"\n            + \" field2=[SUM($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST \"\n            + \"RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING)])\\n\"\n            + \"  LogicalTableScan(table=[[hr, emps]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":512,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
