[{"authorTime":"2015-03-04 06:51:09","codes":[{"authorDate":"2015-03-04 06:51:09","commitOrder":1,"curCode":"  @Test public void testExplicitImplicitSchemaSameName() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n\n    aSchema.setCacheEnabled(true);\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n  }\n","date":"2015-11-06 15:18:24","endLine":6461,"groupId":"1239","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExplicitImplicitSchemaSameName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/65/d024c25e80b9ba896096425a6cca8d07be65ae.src","preCode":"  @Test public void testExplicitImplicitSchemaSameName() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n\n    aSchema.setCacheEnabled(true);\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6439,"status":"B"},{"authorDate":"2015-03-04 06:51:09","commitOrder":1,"curCode":"  @Test public void testSimpleCalciteSchema() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"c\", new AbstractSchema());\n\n    assertThat(aSchema.getSubSchema(\"c\"), notNullValue());\n    assertThat(aSchema.getSubSchema(\"b\"), notNullValue());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n  }\n","date":"2015-11-06 15:18:24","endLine":6488,"groupId":"1939","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleCalciteSchema","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/65/d024c25e80b9ba896096425a6cca8d07be65ae.src","preCode":"  @Test public void testSimpleCalciteSchema() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"c\", new AbstractSchema());\n\n    assertThat(aSchema.getSubSchema(\"c\"), notNullValue());\n    assertThat(aSchema.getSubSchema(\"b\"), notNullValue());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6463,"status":"B"}],"commitId":"ac8d04ed95589f29571b7de3c220876c3ebc3a00","commitMessage":"@@@[CALCITE-911] Add a variant of CalciteSchema that does not cache sub-objects\n\nClose apache/calcite#142\n","date":"2015-11-06 15:18:24","modifiedFileCount":"13","status":"B","submitter":"Jinfeng Ni"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testExplicitImplicitSchemaSameName() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n\n    aSchema.setCacheEnabled(true);\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n  }\n","date":"2020-04-06 04:57:49","endLine":6601,"groupId":"101310","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExplicitImplicitSchemaSameName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/0b7f58f4442fcb05f8815355eeabe565385b9a.src","preCode":"  @Test public void testExplicitImplicitSchemaSameName() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n\n    aSchema.setCacheEnabled(true);\n\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6579,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSimpleCalciteSchema() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"c\", new AbstractSchema());\n\n    assertThat(aSchema.getSubSchema(\"c\"), notNullValue());\n    assertThat(aSchema.getSubSchema(\"b\"), notNullValue());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n  }\n","date":"2020-04-06 04:57:49","endLine":6628,"groupId":"101310","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleCalciteSchema","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/0b7f58f4442fcb05f8815355eeabe565385b9a.src","preCode":"  @Test public void testSimpleCalciteSchema() throws Exception {\n    final SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n\n    \r\n    final Map<String, Schema> aSubSchemaMap = new HashMap<>();\n    final SchemaPlus aSchema = rootSchema.add(\"a\",\n        new AbstractSchema() {\n          @Override protected Map<String, Schema> getSubSchemaMap() {\n            return aSubSchemaMap;\n          }\n        });\n\n    \r\n    aSchema.add(\"b\", new AbstractSchema());\n\n    \r\n    aSubSchemaMap.put(\"c\", new AbstractSchema());\n\n    assertThat(aSchema.getSubSchema(\"c\"), notNullValue());\n    assertThat(aSchema.getSubSchema(\"b\"), notNullValue());\n\n    \r\n    aSubSchemaMap.put(\"b\", new AbstractSchema());\n    \r\n    assertThat(aSchema.getSubSchemaNames().size(), is(2));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6603,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
