[{"authorTime":"2019-05-16 13:01:31","codes":[{"authorDate":"2019-04-25 12:00:28","commitOrder":3,"curCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SqlLibraryOperators.SUBSTR, writer, call);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"TRUNC\", true);\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","date":"2019-05-12 14:03:15","endLine":79,"groupId":"1257","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseCall","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ad/583196ce63190ef2a817cdc9c819f247eb7846.src","preCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SqlLibraryOperators.SUBSTR, writer, call);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"TRUNC\", true);\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/OracleSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"NB"},{"authorDate":"2019-05-16 13:01:31","commitOrder":3,"curCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SPARKSQL_SUBSTRING, writer, call);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"DATE_TRUNC\", false);\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","date":"2019-05-20 09:42:58","endLine":98,"groupId":"1257","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseCall","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/edb087a022530ebbe98c0a50dffb822d80f5a3.src","preCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SPARKSQL_SUBSTRING, writer, call);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"DATE_TRUNC\", false);\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/SparkSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"7fa13bf164f9354aed492b03f753c2b9b30b0164","commitMessage":"@@@[CALCITE-3072] Generate right SQL for FLOOR&SUBSTRING functions in SparkSqlDialect (DonnyZone)\n\nTimeUnit first in SparkSQL date_trunc;\nAdd test for floor with one operand.\n\nClose apache/calcite#1216\n","date":"2019-05-20 09:42:58","modifiedFileCount":"2","status":"M","submitter":"wellfengzhu"},{"authorTime":"2020-02-05 21:47:00","codes":[{"authorDate":"2019-04-25 12:00:28","commitOrder":4,"curCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SqlLibraryOperators.SUBSTR, writer, call);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"TRUNC\", true);\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","date":"2019-05-12 14:03:15","endLine":79,"groupId":"1257","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseCall","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ad/583196ce63190ef2a817cdc9c819f247eb7846.src","preCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SqlLibraryOperators.SUBSTR, writer, call);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"TRUNC\", true);\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/OracleSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"},{"authorDate":"2020-02-05 21:47:00","commitOrder":4,"curCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SPARKSQL_SUBSTRING, writer, call);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"DATE_TRUNC\", false);\n        break;\n      case TRIM:\n        unparseHiveTrim(writer, call, leftPrec, rightPrec);\n        break;\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","date":"2020-02-20 12:24:42","endLine":114,"groupId":"1257","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseCall","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/94/23e9c94002a796459b5a24fdb7590b40cd3fb5.src","preCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SPARKSQL_SUBSTRING, writer, call);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"DATE_TRUNC\", false);\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/SparkSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"5fa41609cb0fe310a0a11d86319d861423850a36","commitMessage":"@@@[CALCITE-3771] TRIM Support for HIVE/SPARK Dialect (Dhirenda Gautam)\n\nFix-up (by Danny):\n* Move all the common logic for Hive and Spark TRIM unparsing to\nRelToSqlConverterUtil\n* Refactor the tests to split Hive and Spark from BigQuery for some TRIM\ncases\n\nclose apache/calcite#1785\n","date":"2020-02-20 12:24:42","modifiedFileCount":"3","status":"M","submitter":"dhirenda.gautam"},{"authorTime":"2020-10-20 13:55:40","codes":[{"authorDate":"2020-10-20 13:55:40","commitOrder":5,"curCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SqlLibraryOperators.SUBSTR, writer, call, false);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"TRUNC\", true);\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","date":"2020-10-23 05:29:41","endLine":164,"groupId":"1257","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseCall","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/de/eb8a50fe775bf757987927ccd5297c4fff60af.src","preCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SqlLibraryOperators.SUBSTR, writer, call);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"TRUNC\", true);\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/OracleSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2020-10-20 13:55:40","commitOrder":5,"curCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SPARKSQL_SUBSTRING, writer, call, false);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"DATE_TRUNC\", false);\n        break;\n      case TRIM:\n        unparseHiveTrim(writer, call, leftPrec, rightPrec);\n        break;\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","date":"2020-10-23 05:29:41","endLine":114,"groupId":"1257","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseCall","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/27/2e907c7d699e8fb682283ceee257ad7af2501a.src","preCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SPARKSQL_SUBSTRING, writer, call);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"DATE_TRUNC\", false);\n        break;\n      case TRIM:\n        unparseHiveTrim(writer, call, leftPrec, rightPrec);\n        break;\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/SparkSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"3038fb7e87c51740ef733fd4f9bde41b0c25e5b0","commitMessage":"@@@[CALCITE-4335] ARRAY_AGG.  ARRAY_CONCAT_AGG.  STRING_AGG aggregate functions for BigQuery\n","date":"2020-10-23 05:29:41","modifiedFileCount":"24","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-10-20 13:55:40","codes":[{"authorDate":"2020-11-19 06:16:27","commitOrder":6,"curCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SqlLibraryOperators.ORACLE_SUBSTR, writer,\n          call, false);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"TRUNC\", true);\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","date":"2020-12-04 11:53:16","endLine":167,"groupId":"1257","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseCall","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9b/1f4e494576fdb707f2964c323ce5f44f3109bc.src","preCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SqlLibraryOperators.SUBSTR, writer, call, false);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"TRUNC\", true);\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/OracleSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2020-10-20 13:55:40","commitOrder":6,"curCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SPARKSQL_SUBSTRING, writer, call, false);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"DATE_TRUNC\", false);\n        break;\n      case TRIM:\n        unparseHiveTrim(writer, call, leftPrec, rightPrec);\n        break;\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","date":"2020-10-23 05:29:41","endLine":114,"groupId":"1257","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseCall","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/27/2e907c7d699e8fb682283ceee257ad7af2501a.src","preCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SPARKSQL_SUBSTRING, writer, call, false);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"DATE_TRUNC\", false);\n        break;\n      case TRIM:\n        unparseHiveTrim(writer, call, leftPrec, rightPrec);\n        break;\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/SparkSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"0327135376246eb58e1703fc13d555efaf389ada","commitMessage":"@@@[CALCITE-4408] Implement Oracle SUBSTR function (James Starr)\n\nAdd an operand type checker for the Oracle SUBSTR. Becauses\nsemantics are different to standard SUBSTRING.  implement by\ntranslating to SUBSTRING with a CASE expression to handle the\ndifferences.\n\nThe implementation assumes that SUBSTRING is consistent with\nBigQuery.  not ISO Standard SQL.  and may need rework when\n  [CALCITE-4427] Make SUBSTRING operator comply with ISO\n  standard SQL\nis fixed.\n\nRework so that it gives the right result for very negative\nstart; add tests for MySQL and PostgreSQL variants of SUBSTR\n(Julian Hyde).\n\nClose apache/calcite#2271\n","date":"2020-12-04 11:53:16","modifiedFileCount":"6","status":"M","submitter":"James Starr"},{"authorTime":"2020-10-20 13:55:40","codes":[{"authorDate":"2020-12-09 05:01:39","commitOrder":7,"curCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SqlLibraryOperators.SUBSTR_ORACLE, writer,\n          call, false);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"TRUNC\", true);\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","date":"2020-12-10 07:05:35","endLine":167,"groupId":"101832","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"unparseCall","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/8b284d855891c3d59705eb87bb7224c711a5b4.src","preCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SqlLibraryOperators.ORACLE_SUBSTR, writer,\n          call, false);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"TRUNC\", true);\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/OracleSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2020-10-20 13:55:40","commitOrder":7,"curCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SPARKSQL_SUBSTRING, writer, call, false);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"DATE_TRUNC\", false);\n        break;\n      case TRIM:\n        unparseHiveTrim(writer, call, leftPrec, rightPrec);\n        break;\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","date":"2020-10-23 05:29:41","endLine":114,"groupId":"101832","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseCall","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/27/2e907c7d699e8fb682283ceee257ad7af2501a.src","preCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      SqlUtil.unparseFunctionSyntax(SPARKSQL_SUBSTRING, writer, call, false);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        final SqlLiteral timeUnitNode = call.operand(1);\n        final TimeUnitRange timeUnit = timeUnitNode.getValueAs(TimeUnitRange.class);\n\n        SqlCall call2 = SqlFloorFunction.replaceTimeUnitOperand(call, timeUnit.name(),\n            timeUnitNode.getParserPosition());\n        SqlFloorFunction.unparseDatetimeFunction(writer, call2, \"DATE_TRUNC\", false);\n        break;\n      case TRIM:\n        unparseHiveTrim(writer, call, leftPrec, rightPrec);\n        break;\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/SparkSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"0ab1fe3118cc5adb8750a5c785e24fa4381afda1","commitMessage":"@@@[CALCITE-4427] Make SUBSTRING operator comply with ISO standard SQL\n\nIf you want the old behavior (which was consistent with\nBigQuery but not with ISO standard SQL).  set\nconformance=BIG_QUERY in your connection properties.\n\nIn SqlConformance.  add method semantics() that controls the\nsemantics of standard functions. The default is STANDARD. In\nBIG_QUERY semantics.  the SUBSTRING function treats negative\nstart values differently.\n\nAdd implementations of SUBSTR for BigQuery.  MySQL.  PostgreSQL\n(we already have Oracle). Each have slightly different\nbehavior.  consistent with their DBs of origin. PostgreSQL's\nSUBSTR is consistent with ISO standard SQL's SUBSTRING.\n\nUnlike SUBSTRING.  the behavior of your SUBSTR function\ndepends on which operator table you got it from. For example. \nif you specify fun=bigquery in your connection properties. \nyour SUBSTR function will be consistent with BigQuery.\n\nAdd function OCTET_LENGTH.  the BINARY equivalent of CHAR_LENGTH.\n","date":"2020-12-10 07:05:35","modifiedFileCount":"18","status":"M","submitter":"Julian Hyde"}]
