[{"authorTime":"2020-01-07 01:06:39","codes":[{"authorDate":"2020-01-07 01:06:39","commitOrder":1,"curCode":"  @Test public void testSimplifyAndNot() {\n    \r\n    checkSimplify(and(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"AND(>(?0.int1, 1), <=(?0.int2, 2))\");\n    \r\n    \r\n    \r\n    checkSimplify3(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"AND(OR(null, IS NOT NULL(?0.int1)), null, IS NULL(?0.int2))\",\n        \"false\",\n        \"IS NULL(?0.int2)\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"OR(AND(null, IS NULL(?0.int1)), null, IS NOT NULL(?0.int2))\",\n        \"IS NOT NULL(?0.int2)\",\n        \"true\");\n  }\n","date":"2020-01-08 01:04:52","endLine":2361,"groupId":"4311","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyAndNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/a0c7274b2dc54806568765cd1d67427092fee2.src","preCode":"  @Test public void testSimplifyAndNot() {\n    \r\n    checkSimplify(and(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"AND(>(?0.int1, 1), <=(?0.int2, 2))\");\n    \r\n    \r\n    \r\n    checkSimplify3(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"AND(OR(null, IS NOT NULL(?0.int1)), null, IS NULL(?0.int2))\",\n        \"false\",\n        \"IS NULL(?0.int2)\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"OR(AND(null, IS NULL(?0.int1)), null, IS NOT NULL(?0.int2))\",\n        \"IS NOT NULL(?0.int2)\",\n        \"true\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2342,"status":"B"},{"authorDate":"2020-01-07 01:06:39","commitOrder":1,"curCode":"  @Test public void testSimplifyOrNot() {\n    \r\n    checkSimplify(or(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"OR(>(?0.int1, 1), <=(?0.int2, 2))\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"OR(null, IS NOT NULL(?0.int1), AND(null, IS NULL(?0.int2)))\",\n        \"IS NOT NULL(?0.int1)\",\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"AND(null, IS NULL(?0.int1), OR(null, IS NOT NULL(?0.int2)))\",\n        \"false\",\n        \"IS NULL(?0.int1)\");\n  }\n","date":"2020-01-08 01:04:52","endLine":2383,"groupId":"6354","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyOrNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/a0c7274b2dc54806568765cd1d67427092fee2.src","preCode":"  @Test public void testSimplifyOrNot() {\n    \r\n    checkSimplify(or(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"OR(>(?0.int1, 1), <=(?0.int2, 2))\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"OR(null, IS NOT NULL(?0.int1), AND(null, IS NULL(?0.int2)))\",\n        \"IS NOT NULL(?0.int1)\",\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"AND(null, IS NULL(?0.int1), OR(null, IS NOT NULL(?0.int2)))\",\n        \"false\",\n        \"IS NULL(?0.int1)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2363,"status":"B"}],"commitId":"763ec429c951acd5fa251c5d4a2b7780fbf648d4","commitMessage":"@@@[CALCITE-3712] Optimize lossless casts in RexSimplify: CAST(CAST(intExpr as BIGINT) as INT) => intExpr\n","date":"2020-01-08 01:04:52","modifiedFileCount":"4","status":"B","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSimplifyAndNot() {\n    \r\n    checkSimplify(and(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"AND(>(?0.int1, 1), <=(?0.int2, 2))\");\n    \r\n    \r\n    \r\n    checkSimplify3(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"AND(OR(null, IS NOT NULL(?0.int1)), null, IS NULL(?0.int2))\",\n        \"false\",\n        \"IS NULL(?0.int2)\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"OR(AND(null, IS NULL(?0.int1)), null, IS NOT NULL(?0.int2))\",\n        \"IS NOT NULL(?0.int2)\",\n        \"true\");\n  }\n","date":"2020-04-06 04:57:49","endLine":2361,"groupId":"4311","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyAndNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test public void testSimplifyAndNot() {\n    \r\n    checkSimplify(and(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"AND(>(?0.int1, 1), <=(?0.int2, 2))\");\n    \r\n    \r\n    \r\n    checkSimplify3(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"AND(OR(null, IS NOT NULL(?0.int1)), null, IS NULL(?0.int2))\",\n        \"false\",\n        \"IS NULL(?0.int2)\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"OR(AND(null, IS NULL(?0.int1)), null, IS NOT NULL(?0.int2))\",\n        \"IS NOT NULL(?0.int2)\",\n        \"true\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2342,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSimplifyOrNot() {\n    \r\n    checkSimplify(or(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"OR(>(?0.int1, 1), <=(?0.int2, 2))\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"OR(null, IS NOT NULL(?0.int1), AND(null, IS NULL(?0.int2)))\",\n        \"IS NOT NULL(?0.int1)\",\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"AND(null, IS NULL(?0.int1), OR(null, IS NOT NULL(?0.int2)))\",\n        \"false\",\n        \"IS NULL(?0.int1)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":2383,"groupId":"6354","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyOrNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test public void testSimplifyOrNot() {\n    \r\n    checkSimplify(or(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"OR(>(?0.int1, 1), <=(?0.int2, 2))\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"OR(null, IS NOT NULL(?0.int1), AND(null, IS NULL(?0.int2)))\",\n        \"IS NOT NULL(?0.int1)\",\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"AND(null, IS NULL(?0.int1), OR(null, IS NOT NULL(?0.int2)))\",\n        \"false\",\n        \"IS NULL(?0.int1)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2363,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-10-25 08:23:16","codes":[{"authorDate":"2020-10-25 08:23:16","commitOrder":3,"curCode":"  @Test void testSimplifyAndNot() {\n    \r\n    checkSimplify(and(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"AND(>(?0.int1, 1), <=(?0.int2, 2))\");\n    \r\n    \r\n    \r\n    checkSimplify3(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"AND(OR(null, IS NOT NULL(?0.int1)), null,\"\n            + \" SEARCH(?0.int2, Sarg[NULL]))\",\n        \"false\",\n        \"SEARCH(?0.int2, Sarg[NULL])\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"OR(AND(null, SEARCH(?0.int1, Sarg[NULL])), null,\"\n            + \" IS NOT NULL(?0.int2))\",\n        \"IS NOT NULL(?0.int2)\",\n        \"true\");\n  }\n","date":"2020-11-01 16:13:27","endLine":2716,"groupId":"4311","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyAndNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ba/2f91b245fb471dc13e7588d58a42e03df7d9f3.src","preCode":"  @Test void testSimplifyAndNot() {\n    \r\n    checkSimplify(and(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"AND(>(?0.int1, 1), <=(?0.int2, 2))\");\n    \r\n    \r\n    \r\n    checkSimplify3(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"AND(OR(null, IS NOT NULL(?0.int1)), null, IS NULL(?0.int2))\",\n        \"false\",\n        \"IS NULL(?0.int2)\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"OR(AND(null, IS NULL(?0.int1)), null, IS NOT NULL(?0.int2))\",\n        \"IS NOT NULL(?0.int2)\",\n        \"true\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2695,"status":"M"},{"authorDate":"2020-10-25 08:23:16","commitOrder":3,"curCode":"  @Test void testSimplifyOrNot() {\n    \r\n    checkSimplify(or(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"OR(>(?0.int1, 1), <=(?0.int2, 2))\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"OR(null, IS NOT NULL(?0.int1),\"\n            + \" AND(null, SEARCH(?0.int2, Sarg[NULL])))\",\n        \"IS NOT NULL(?0.int1)\",\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"AND(null, SEARCH(?0.int1, Sarg[NULL]),\"\n            + \" OR(null, IS NOT NULL(?0.int2)))\",\n        \"false\",\n        \"SEARCH(?0.int1, Sarg[NULL])\");\n  }\n","date":"2020-11-01 16:13:27","endLine":2749,"groupId":"6354","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyOrNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ba/2f91b245fb471dc13e7588d58a42e03df7d9f3.src","preCode":"  @Test void testSimplifyOrNot() {\n    \r\n    checkSimplify(or(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"OR(>(?0.int1, 1), <=(?0.int2, 2))\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"OR(null, IS NOT NULL(?0.int1), AND(null, IS NULL(?0.int2)))\",\n        \"IS NOT NULL(?0.int1)\",\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"AND(null, IS NULL(?0.int1), OR(null, IS NOT NULL(?0.int2)))\",\n        \"false\",\n        \"IS NULL(?0.int1)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2727,"status":"M"}],"commitId":"d03ce47536ddb2aaec6d445b3ea48464081a7ed0","commitMessage":"@@@[CALCITE-4352] RexSimplify incorrectly drops IS NULL and IS NOT NULL from SEARCH expressions\n\nImprove Sarg.toString() for IS NULL.  IS NOT NULL.  TRUE. \nFALSE.\n\nSimplify NOT SEARCH(x.  sarg) to SEARCH(x.  sarg2) where sarg2\nis the complement of sarg.\n\nImprove return type of SEARCH; result is NOT NULL if argument\nis NOT NULL of it Sarg allows IS NULL.\n\nClose apache/calcite#2233\n","date":"2020-11-01 16:13:27","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-11-05 15:01:59","codes":[{"authorDate":"2020-11-05 15:01:59","commitOrder":4,"curCode":"  @Test void testSimplifyAndNot() {\n    \r\n    checkSimplify(and(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"AND(>(?0.int1, 1), <=(?0.int2, 2))\");\n    \r\n    \r\n    \r\n    checkSimplify3(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"AND(OR(null, IS NOT NULL(?0.int1)), null, IS NULL(?0.int2))\",\n        \"false\",\n        \"IS NULL(?0.int2)\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"OR(AND(null, IS NULL(?0.int1)), null, IS NOT NULL(?0.int2))\",\n        \"IS NOT NULL(?0.int2)\",\n        \"true\");\n  }\n","date":"2020-11-12 17:39:03","endLine":2768,"groupId":"10694","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyAndNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/8d0a2609bc72f85d32f075ad25570149cd1bd8.src","preCode":"  @Test void testSimplifyAndNot() {\n    \r\n    checkSimplify(and(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"AND(>(?0.int1, 1), <=(?0.int2, 2))\");\n    \r\n    \r\n    \r\n    checkSimplify3(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"AND(OR(null, IS NOT NULL(?0.int1)), null,\"\n            + \" SEARCH(?0.int2, Sarg[NULL]))\",\n        \"false\",\n        \"SEARCH(?0.int2, Sarg[NULL])\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(and(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"OR(AND(null, SEARCH(?0.int1, Sarg[NULL])), null,\"\n            + \" IS NOT NULL(?0.int2))\",\n        \"IS NOT NULL(?0.int2)\",\n        \"true\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2749,"status":"M"},{"authorDate":"2020-11-05 15:01:59","commitOrder":4,"curCode":"  @Test void testSimplifyOrNot() {\n    \r\n    checkSimplify(or(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"OR(>(?0.int1, 1), <=(?0.int2, 2))\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"OR(null, IS NOT NULL(?0.int1), AND(null, IS NULL(?0.int2)))\",\n        \"IS NOT NULL(?0.int1)\",\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"AND(null, IS NULL(?0.int1), OR(null, IS NOT NULL(?0.int2)))\",\n        \"false\",\n        \"IS NULL(?0.int1)\");\n  }\n","date":"2020-11-12 17:39:03","endLine":2799,"groupId":"10694","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyOrNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/8d0a2609bc72f85d32f075ad25570149cd1bd8.src","preCode":"  @Test void testSimplifyOrNot() {\n    \r\n    checkSimplify(or(gt(vInt(1), literal(1)), not(gt(vInt(2), literal(2)))),\n        \"OR(>(?0.int1, 1), <=(?0.int2, 2))\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2)))),\n        \"OR(null, IS NOT NULL(?0.int1),\"\n            + \" AND(null, SEARCH(?0.int2, Sarg[NULL])))\",\n        \"IS NOT NULL(?0.int1)\",\n        \"true\");\n\n    \r\n    \r\n    \r\n    checkSimplify3(not(or(eq(vInt(1), vInt(1)), not(ge(vInt(2), vInt(2))))),\n        \"AND(null, SEARCH(?0.int1, Sarg[NULL]),\"\n            + \" OR(null, IS NOT NULL(?0.int2)))\",\n        \"false\",\n        \"SEARCH(?0.int1, Sarg[NULL])\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2779,"status":"M"}],"commitId":"5e9943aa1f51a97068fc37d53dea1d447570becc","commitMessage":"@@@[CALCITE-4364] `a IN (1.  2) AND a = 1` should be simplified to `a = 1`\n","date":"2020-11-12 17:39:03","modifiedFileCount":"8","status":"M","submitter":"yuzhao.cyz"}]
