[{"authorTime":"2016-05-07 02:57:25","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Override public boolean equals(Object obj) {\n    return obj == this\n        || obj instanceof TileKey\n        && lattice == ((TileKey) obj).lattice\n        && dimensions.equals(((TileKey) obj).dimensions)\n        && measures.equals(((TileKey) obj).measures);\n  }\n","date":"2014-11-14 09:39:34","endLine":54,"groupId":"16710","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1b/a6136a40a4e9a3b1188c17a93b320080817a6b.src","preCode":"  @Override public boolean equals(Object obj) {\n    return obj == this\n        || obj instanceof TileKey\n        && lattice == ((TileKey) obj).lattice\n        && dimensions.equals(((TileKey) obj).dimensions)\n        && measures.equals(((TileKey) obj).measures);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/materialize/TileKey.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"NB"},{"authorDate":"2016-05-07 02:57:25","commitOrder":2,"curCode":"    @Override public boolean equals(Object obj) {\n      return obj == this\n          || obj instanceof Key\n          && kind == ((Key) obj).kind\n          && names.equals(((Key) obj).names)\n          && types.equals(((Key) obj).types);\n    }\n","date":"2016-09-16 08:02:42","endLine":678,"groupId":"6738","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/77/4a728d41f0efff55cd1ece6081aed8e7e7c045.src","preCode":"    @Override public boolean equals(Object obj) {\n      return obj == this\n          || obj instanceof Key\n          && kind == ((Key) obj).kind\n          && names.equals(((Key) obj).names)\n          && types.equals(((Key) obj).types);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":672,"status":"B"}],"commitId":"0938c7b6d767e3242874d87a30d9112512d9243a","commitMessage":"@@@Complete [CALCITE-1208] by giving \"resolve\" a call-back.  so it can make multiple matches\n\nChange parser to make 'SELECT t.*.c' illegal.\n\nAddress Jinfeng's review comments.\n\nAdd a test for converting a query with UNION in FROM clause.\n","date":"2016-09-16 08:02:42","modifiedFileCount":"32","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-11-02 00:19:40","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":3,"curCode":"  @Override public boolean equals(Object obj) {\n    return obj == this\n        || obj instanceof TileKey\n        && lattice == ((TileKey) obj).lattice\n        && dimensions.equals(((TileKey) obj).dimensions)\n        && measures.equals(((TileKey) obj).measures);\n  }\n","date":"2014-11-14 09:39:34","endLine":54,"groupId":"16710","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1b/a6136a40a4e9a3b1188c17a93b320080817a6b.src","preCode":"  @Override public boolean equals(Object obj) {\n    return obj == this\n        || obj instanceof TileKey\n        && lattice == ((TileKey) obj).lattice\n        && dimensions.equals(((TileKey) obj).dimensions)\n        && measures.equals(((TileKey) obj).measures);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/materialize/TileKey.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2018-11-02 00:19:40","commitOrder":3,"curCode":"    @Override public boolean equals(Object obj) {\n      return obj == this\n          || obj instanceof Key\n          && kind == ((Key) obj).kind\n          && names.equals(((Key) obj).names)\n          && types.equals(((Key) obj).types)\n          && nullable == ((Key) obj).nullable;\n    }\n","date":"2019-02-23 00:45:56","endLine":692,"groupId":"6738","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/26/d49804ccf5dd0b23fba057377f5580b2dc1065.src","preCode":"    @Override public boolean equals(Object obj) {\n      return obj == this\n          || obj instanceof Key\n          && kind == ((Key) obj).kind\n          && names.equals(((Key) obj).names)\n          && types.equals(((Key) obj).types);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":685,"status":"M"}],"commitId":"846494a0091b00357f3ccb67c8a4a7d9d226cd7d","commitMessage":"@@@[CALCITE-2464] Allow to set nullability for columns of structured types (Ruben Quesada Lopez)\n- Added nullability flag to struct types (previously they were always considered as non-nullable)\n- Struct types will be built as non-nullable by default to avoid regresssions.  but this\ncan be changed via RelDataTypeFactory#createTypeWithNullability\n- SqlCreateTable will generate nullable struct types.  unless they are defined as NOT NULL\n- New unit tests\n","date":"2019-02-23 00:45:56","modifiedFileCount":"7","status":"M","submitter":"rubenada"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  @Override public boolean equals(@Nullable Object obj) {\n    return obj == this\n        || obj instanceof TileKey\n        && lattice == ((TileKey) obj).lattice\n        && dimensions.equals(((TileKey) obj).dimensions)\n        && measures.equals(((TileKey) obj).measures);\n  }\n","date":"2020-11-30 06:45:33","endLine":56,"groupId":"101877","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"equals","params":"(@NullableObjectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6a/16ecb2244c1e9101404b34d222bcc67cd03baf.src","preCode":"  @Override public boolean equals(Object obj) {\n    return obj == this\n        || obj instanceof TileKey\n        && lattice == ((TileKey) obj).lattice\n        && dimensions.equals(((TileKey) obj).dimensions)\n        && measures.equals(((TileKey) obj).measures);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/materialize/TileKey.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"    @Override public boolean equals(@Nullable Object obj) {\n      return obj == this\n          || obj instanceof Key\n          && kind == ((Key) obj).kind\n          && names.equals(((Key) obj).names)\n          && types.equals(((Key) obj).types)\n          && nullable == ((Key) obj).nullable;\n    }\n","date":"2020-11-30 06:45:33","endLine":679,"groupId":"101877","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(@NullableObjectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/79/04ab7128048cacc6d6ee5bfa4e11c2ce752202.src","preCode":"    @Override public boolean equals(Object obj) {\n      return obj == this\n          || obj instanceof Key\n          && kind == ((Key) obj).kind\n          && names.equals(((Key) obj).names)\n          && types.equals(((Key) obj).types)\n          && nullable == ((Key) obj).nullable;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":672,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
