[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testLocalTimeFunc() {\n    tester.setFor(SqlStdOperatorTable.LOCALTIME);\n    tester.checkScalar(\"LOCALTIME\", TIME_PATTERN, \"TIME(0) NOT NULL\");\n    tester.checkFails(\n        \"^LOCALTIME()^\",\n        \"No match found for function signature LOCALTIME\\\\(\\\\)\",\n        false);\n    tester.checkScalar(\n        \"LOCALTIME(1)\", TIME_PATTERN,\n        \"TIME(1) NOT NULL\");\n\n    final Pair<String, Hook.Closeable> pair = currentTimeString(LOCAL_TZ);\n    tester.checkScalar(\n        \"CAST(LOCALTIME AS VARCHAR(30))\",\n        Pattern.compile(\n            pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"LOCALTIME\",\n        Pattern.compile(\n            pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIME(0) NOT NULL\");\n    pair.right.close();\n  }\n","date":"2014-11-14 09:39:34","endLine":3778,"groupId":"10267","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalTimeFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testLocalTimeFunc() {\n    tester.setFor(SqlStdOperatorTable.LOCALTIME);\n    tester.checkScalar(\"LOCALTIME\", TIME_PATTERN, \"TIME(0) NOT NULL\");\n    tester.checkFails(\n        \"^LOCALTIME()^\",\n        \"No match found for function signature LOCALTIME\\\\(\\\\)\",\n        false);\n    tester.checkScalar(\n        \"LOCALTIME(1)\", TIME_PATTERN,\n        \"TIME(1) NOT NULL\");\n\n    final Pair<String, Hook.Closeable> pair = currentTimeString(LOCAL_TZ);\n    tester.checkScalar(\n        \"CAST(LOCALTIME AS VARCHAR(30))\",\n        Pattern.compile(\n            pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"LOCALTIME\",\n        Pattern.compile(\n            pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIME(0) NOT NULL\");\n    pair.right.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3755,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testCurrentTimeFunc() {\n    tester.setFor(SqlStdOperatorTable.CURRENT_TIME);\n    tester.checkScalar(\n        \"CURRENT_TIME\", TIME_PATTERN,\n        \"TIME(0) NOT NULL\");\n    tester.checkFails(\n        \"^CURRENT_TIME()^\",\n        \"No match found for function signature CURRENT_TIME\\\\(\\\\)\",\n        false);\n    tester.checkScalar(\n        \"CURRENT_TIME(1)\", TIME_PATTERN, \"TIME(1) NOT NULL\");\n\n    final Pair<String, Hook.Closeable> pair = currentTimeString(CURRENT_TZ);\n    tester.checkScalar(\n        \"CAST(CURRENT_TIME AS VARCHAR(30))\",\n        Pattern.compile(pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"CURRENT_TIME\",\n        Pattern.compile(pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIME(0) NOT NULL\");\n    pair.right.close();\n  }\n","date":"2014-11-14 09:39:34","endLine":3832,"groupId":"10267","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCurrentTimeFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCurrentTimeFunc() {\n    tester.setFor(SqlStdOperatorTable.CURRENT_TIME);\n    tester.checkScalar(\n        \"CURRENT_TIME\", TIME_PATTERN,\n        \"TIME(0) NOT NULL\");\n    tester.checkFails(\n        \"^CURRENT_TIME()^\",\n        \"No match found for function signature CURRENT_TIME\\\\(\\\\)\",\n        false);\n    tester.checkScalar(\n        \"CURRENT_TIME(1)\", TIME_PATTERN, \"TIME(1) NOT NULL\");\n\n    final Pair<String, Hook.Closeable> pair = currentTimeString(CURRENT_TZ);\n    tester.checkScalar(\n        \"CAST(CURRENT_TIME AS VARCHAR(30))\",\n        Pattern.compile(pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"CURRENT_TIME\",\n        Pattern.compile(pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIME(0) NOT NULL\");\n    pair.right.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3810,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2019-07-19 02:18:57","codes":[{"authorDate":"2019-07-19 02:18:57","commitOrder":2,"curCode":"  private void testLocalTimeFunc(Pair<String, Hook.Closeable> pair) {\n    tester.setFor(SqlStdOperatorTable.LOCALTIME);\n    tester.checkScalar(\"LOCALTIME\", TIME_PATTERN, \"TIME(0) NOT NULL\");\n    tester.checkFails(\n        \"^LOCALTIME()^\",\n        \"No match found for function signature LOCALTIME\\\\(\\\\)\",\n        false);\n    tester.checkScalar(\n        \"LOCALTIME(1)\", TIME_PATTERN,\n        \"TIME(1) NOT NULL\");\n\n    tester.checkScalar(\n        \"CAST(LOCALTIME AS VARCHAR(30))\",\n        Pattern.compile(\n            pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"LOCALTIME\",\n        Pattern.compile(\n            pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIME(0) NOT NULL\");\n    pair.right.close();\n  }\n","date":"2019-11-27 14:34:16","endLine":5976,"groupId":"10795","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalTimeFunc","params":"(Pair<String@Hook.Closeable>pair)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/36/32339ca441133de6483ccef9e5d788a7111e90.src","preCode":"  @Test public void testLocalTimeFunc() {\n    tester.setFor(SqlStdOperatorTable.LOCALTIME);\n    tester.checkScalar(\"LOCALTIME\", TIME_PATTERN, \"TIME(0) NOT NULL\");\n    tester.checkFails(\n        \"^LOCALTIME()^\",\n        \"No match found for function signature LOCALTIME\\\\(\\\\)\",\n        false);\n    tester.checkScalar(\n        \"LOCALTIME(1)\", TIME_PATTERN,\n        \"TIME(1) NOT NULL\");\n\n    final Pair<String, Hook.Closeable> pair = currentTimeString(LOCAL_TZ);\n    tester.checkScalar(\n        \"CAST(LOCALTIME AS VARCHAR(30))\",\n        Pattern.compile(\n            pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"LOCALTIME\",\n        Pattern.compile(\n            pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIME(0) NOT NULL\");\n    pair.right.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5954,"status":"M"},{"authorDate":"2019-07-19 02:18:57","commitOrder":2,"curCode":"  private void testCurrentTimeFunc(Pair<String, Hook.Closeable> pair) {\n    tester.setFor(SqlStdOperatorTable.CURRENT_TIME);\n    tester.checkScalar(\n        \"CURRENT_TIME\", TIME_PATTERN,\n        \"TIME(0) NOT NULL\");\n    tester.checkFails(\n        \"^CURRENT_TIME()^\",\n        \"No match found for function signature CURRENT_TIME\\\\(\\\\)\",\n        false);\n    tester.checkScalar(\n        \"CURRENT_TIME(1)\", TIME_PATTERN, \"TIME(1) NOT NULL\");\n\n    tester.checkScalar(\n        \"CAST(CURRENT_TIME AS VARCHAR(30))\",\n        Pattern.compile(pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"CURRENT_TIME\",\n        Pattern.compile(pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIME(0) NOT NULL\");\n    pair.right.close();\n  }\n","date":"2019-11-27 14:34:16","endLine":6048,"groupId":"10795","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCurrentTimeFunc","params":"(Pair<String@Hook.Closeable>pair)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/36/32339ca441133de6483ccef9e5d788a7111e90.src","preCode":"  @Test public void testCurrentTimeFunc() {\n    tester.setFor(SqlStdOperatorTable.CURRENT_TIME);\n    tester.checkScalar(\n        \"CURRENT_TIME\", TIME_PATTERN,\n        \"TIME(0) NOT NULL\");\n    tester.checkFails(\n        \"^CURRENT_TIME()^\",\n        \"No match found for function signature CURRENT_TIME\\\\(\\\\)\",\n        false);\n    tester.checkScalar(\n        \"CURRENT_TIME(1)\", TIME_PATTERN, \"TIME(1) NOT NULL\");\n\n    final Pair<String, Hook.Closeable> pair = currentTimeString(CURRENT_TZ);\n    tester.checkScalar(\n        \"CAST(CURRENT_TIME AS VARCHAR(30))\",\n        Pattern.compile(pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"VARCHAR(30) NOT NULL\");\n    tester.checkScalar(\n        \"CURRENT_TIME\",\n        Pattern.compile(pair.left.substring(11) + \"[0-9][0-9]:[0-9][0-9]\"),\n        \"TIME(0) NOT NULL\");\n    pair.right.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6027,"status":"M"}],"commitId":"eb71946c843b3dc9618a2c128dcaa9bf52afe9c7","commitMessage":"@@@[CALCITE-3141] Slow tests are not run in continuous integration\n\n1. Replace @Category(SlowTests.class) with @Tag(\"slow\").\n2. Replace junit4 APIs with junit5 APIs when @Tag annotation is used since mixed usages do not work well together.\n3. Use exclusively the @Tag(\"slow\") annotation for tagging slow tests.\n4. Remove usages of calcite.test.slow system property for annotating slow tests.\n5. Replace @Ignore(\"slow\") with @Tag(\"slow\") enabling a few more slow tests.\n6. Add testSlow task in Gradle for running slow tests.\n7. Exclude slow test execution from normal Gradle build and test.\n8. Add GitHub Action for running slow tests on demand (by adding\n'slow-tests-needed' label) in a PR and on every push to the master.\n9. Update site instructions for running slow tests.\n10. Silence logger in SqlOperatorBaseTest since it generates huge logs.\n11. Remove execution of slow test from Travis.\n12. Refactor FoodmartTest based on the needs of the new @ParameterizedTest API.\n13. Add header and description in main.yml file.\n","date":"2019-11-27 14:34:16","modifiedFileCount":"13","status":"M","submitter":"Stamatis Zampetakis"}]
