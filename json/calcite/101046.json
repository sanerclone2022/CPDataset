[{"authorTime":"2020-04-21 18:54:31","codes":[{"authorDate":"2018-07-06 04:21:59","commitOrder":3,"curCode":"  public Frameworks.ConfigBuilder config() throws Exception {\n    final Holder<SchemaPlus> root = Holder.of(null);\n    CalciteAssert.model(TPCDS_MODEL)\n        .doWithConnection(connection -> {\n          root.set(connection.getRootSchema().getSubSchema(\"TPCDS\"));\n        });\n    return Frameworks.newConfigBuilder()\n        .parserConfig(SqlParser.Config.DEFAULT)\n        .defaultSchema(root.get())\n        .traitDefs((List<RelTraitDef>) null)\n        .programs(Programs.heuristicJoinOrder(Programs.RULE_SET, true, 2));\n  }\n","date":"2018-07-09 01:16:26","endLine":208,"groupId":"14817","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"config","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/c079f78ee2ae21088c619874c7a262db01a34c.src","preCode":"  public Frameworks.ConfigBuilder config() throws Exception {\n    final Holder<SchemaPlus> root = Holder.of(null);\n    CalciteAssert.model(TPCDS_MODEL)\n        .doWithConnection(connection -> {\n          root.set(connection.getRootSchema().getSubSchema(\"TPCDS\"));\n        });\n    return Frameworks.newConfigBuilder()\n        .parserConfig(SqlParser.Config.DEFAULT)\n        .defaultSchema(root.get())\n        .traitDefs((List<RelTraitDef>) null)\n        .programs(Programs.heuristicJoinOrder(Programs.RULE_SET, true, 2));\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/tpcds/TpcdsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"NB"},{"authorDate":"2020-04-21 18:54:31","commitOrder":3,"curCode":"  public static Frameworks.ConfigBuilder config() {\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    rootSchema.add(\"mv0\", new AbstractTable() {\n      @Override public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n        return typeFactory.builder()\n            .add(\"deptno\", SqlTypeName.INTEGER)\n            .add(\"count_sal\", SqlTypeName.BIGINT)\n            .build();\n      }\n    });\n    return Frameworks.newConfigBuilder()\n        .parserConfig(SqlParser.Config.DEFAULT)\n        .defaultSchema(\n            CalciteAssert.addSchema(rootSchema, CalciteAssert.SchemaSpec.SCOTT_WITH_TEMPORAL))\n        .traitDefs((List<RelTraitDef>) null);\n  }\n","date":"2020-05-01 20:00:28","endLine":69,"groupId":"3659","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"config","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/56/7d952605be21099aa9754141eb08826961764a.src","preCode":"  public static Frameworks.ConfigBuilder config() {\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    rootSchema.add(\"mv0\", new AbstractTable() {\n      @Override public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n        return typeFactory.builder()\n            .add(\"deptno\", SqlTypeName.INTEGER)\n            .add(\"count_sal\", SqlTypeName.BIGINT)\n            .build();\n      }\n    });\n    return Frameworks.newConfigBuilder()\n        .parserConfig(SqlParser.Config.DEFAULT)\n        .defaultSchema(\n            CalciteAssert.addSchema(rootSchema, CalciteAssert.SchemaSpec.SCOTT_WITH_TEMPORAL))\n        .traitDefs((List<RelTraitDef>) null);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/materialize/NormalizationTrimFieldTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"}],"commitId":"24dd26640db01114c6931d6615b90a63969ffc42","commitMessage":"@@@[CALCITE-3928] Trim unused fields before materialized view matching (dz)\n\nClose #1936\n","date":"2020-05-01 20:00:28","modifiedFileCount":"1","status":"M","submitter":"xzh"},{"authorTime":"2020-04-21 18:54:31","codes":[{"authorDate":"2021-02-02 12:46:46","commitOrder":4,"curCode":"  public Frameworks.ConfigBuilder config() throws Exception {\n    final Holder<@Nullable SchemaPlus> root = Holder.empty();\n    CalciteAssert.model(TPCDS_MODEL)\n        .doWithConnection(connection -> {\n          root.set(connection.getRootSchema().getSubSchema(\"TPCDS\"));\n        });\n    return Frameworks.newConfigBuilder()\n        .parserConfig(SqlParser.Config.DEFAULT)\n        .defaultSchema(root.get())\n        .traitDefs((List<RelTraitDef>) null)\n        .programs(Programs.heuristicJoinOrder(Programs.RULE_SET, true, 2));\n  }\n","date":"2021-02-12 05:40:07","endLine":315,"groupId":"101046","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"config","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/18/8d589f29c9d90a7970a1e1820a6d85adfeefe6.src","preCode":"  public Frameworks.ConfigBuilder config() throws Exception {\n    final Holder<SchemaPlus> root = Holder.of(null);\n    CalciteAssert.model(TPCDS_MODEL)\n        .doWithConnection(connection -> {\n          root.set(connection.getRootSchema().getSubSchema(\"TPCDS\"));\n        });\n    return Frameworks.newConfigBuilder()\n        .parserConfig(SqlParser.Config.DEFAULT)\n        .defaultSchema(root.get())\n        .traitDefs((List<RelTraitDef>) null)\n        .programs(Programs.heuristicJoinOrder(Programs.RULE_SET, true, 2));\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/tpcds/TpcdsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"},{"authorDate":"2020-04-21 18:54:31","commitOrder":4,"curCode":"  public static Frameworks.ConfigBuilder config() {\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    rootSchema.add(\"mv0\", new AbstractTable() {\n      @Override public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n        return typeFactory.builder()\n            .add(\"deptno\", SqlTypeName.INTEGER)\n            .add(\"count_sal\", SqlTypeName.BIGINT)\n            .build();\n      }\n    });\n    return Frameworks.newConfigBuilder()\n        .parserConfig(SqlParser.Config.DEFAULT)\n        .defaultSchema(\n            CalciteAssert.addSchema(rootSchema, CalciteAssert.SchemaSpec.SCOTT_WITH_TEMPORAL))\n        .traitDefs((List<RelTraitDef>) null);\n  }\n","date":"2020-05-01 20:00:28","endLine":69,"groupId":"101046","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"config","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/56/7d952605be21099aa9754141eb08826961764a.src","preCode":"  public static Frameworks.ConfigBuilder config() {\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    rootSchema.add(\"mv0\", new AbstractTable() {\n      @Override public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n        return typeFactory.builder()\n            .add(\"deptno\", SqlTypeName.INTEGER)\n            .add(\"count_sal\", SqlTypeName.BIGINT)\n            .build();\n      }\n    });\n    return Frameworks.newConfigBuilder()\n        .parserConfig(SqlParser.Config.DEFAULT)\n        .defaultSchema(\n            CalciteAssert.addSchema(rootSchema, CalciteAssert.SchemaSpec.SCOTT_WITH_TEMPORAL))\n        .traitDefs((List<RelTraitDef>) null);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/materialize/NormalizationTrimFieldTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"}],"commitId":"02020cb4db92513439d18328af3689a45f9f976d","commitMessage":"@@@Refactor: Add Holder.empty()\n","date":"2021-02-12 05:40:07","modifiedFileCount":"8","status":"M","submitter":"Julian Hyde"}]
