[{"authorTime":"2015-09-18 06:18:39","codes":[{"authorDate":"2015-08-25 09:24:59","commitOrder":2,"curCode":"  @Test public void testExpressionInWindowFunction() {\n    HepProgram preProgram =  new HepProgramBuilder().build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","date":"2015-09-04 07:08:46","endLine":1652,"groupId":"16125","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpressionInWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bd/ea4af9f66cd896309bee30241294b034f0b6c9.src","preCode":"  @Test public void testExpressionInWindowFunction() {\n    HepProgram preProgram =  new HepProgramBuilder().build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1638,"status":"NB"},{"authorDate":"2015-09-18 06:18:39","commitOrder":2,"curCode":"  @Test public void testWindowInParenthesis() {\n    HepProgram preProgram =  new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select count(*) over (w), count(*) over w\\n\"\n        + \"from emp\\n\"\n        + \"window w as (partition by empno order by empno)\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","date":"2015-09-18 11:47:57","endLine":1698,"groupId":"16125","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWindowInParenthesis","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/54/2cba23daa70c225d0fa50e5263fdfc8ae33a5f.src","preCode":"  @Test public void testWindowInParenthesis() {\n    HepProgram preProgram =  new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select count(*) over (w), count(*) over w\\n\"\n        + \"from emp\\n\"\n        + \"window w as (partition by empno order by empno)\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1685,"status":"B"}],"commitId":"aaac1d23a95d6b42c1866bd95db7d3bce2f2d788","commitMessage":"@@@[CALCITE-888] Overlay window loses PARTITION BY list (Hsuan-Yi Chu)\n\nClose apache/incubator-calcite#134\n","date":"2015-09-18 11:47:57","modifiedFileCount":"2","status":"M","submitter":"Hsuan-Yi Chu"},{"authorTime":"2016-12-01 03:57:20","codes":[{"authorDate":"2016-12-01 03:57:20","commitOrder":3,"curCode":"  @Test public void testExpressionInWindowFunction() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2016-12-02 12:10:18","endLine":2294,"groupId":"16125","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpressionInWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/30/97d479c6cbbe9ffc55c5ba5e22fa9c1d3e0628.src","preCode":"  @Test public void testExpressionInWindowFunction() {\n    HepProgram preProgram =  new HepProgramBuilder().build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2280,"status":"M"},{"authorDate":"2016-12-01 03:57:20","commitOrder":3,"curCode":"  @Test public void testWindowInParenthesis() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select count(*) over (w), count(*) over w\\n\"\n        + \"from emp\\n\"\n        + \"window w as (partition by empno order by empno)\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2016-12-02 12:10:18","endLine":2311,"groupId":"16125","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWindowInParenthesis","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/30/97d479c6cbbe9ffc55c5ba5e22fa9c1d3e0628.src","preCode":"  @Test public void testWindowInParenthesis() {\n    HepProgram preProgram =  new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select count(*) over (w), count(*) over w\\n\"\n        + \"from emp\\n\"\n        + \"window w as (partition by empno order by empno)\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2299,"status":"M"}],"commitId":"bac9ee7cb7e76d6307e34091b5a132e3d068dfd7","commitMessage":"@@@Test case for [CALCITE-1493].  and clean up test infrastructure\n\nAlso.  fix a minor performance issue when tracing is disabled.\n","date":"2016-12-02 12:10:18","modifiedFileCount":"7","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testExpressionInWindowFunction() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-04-06 04:57:49","endLine":4301,"groupId":"16125","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpressionInWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/c56354833d8acfcc210ae25313c78e9332a2ba.src","preCode":"  @Test public void testExpressionInWindowFunction() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4287,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testWindowInParenthesis() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select count(*) over (w), count(*) over w\\n\"\n        + \"from emp\\n\"\n        + \"window w as (partition by empno order by empno)\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-04-06 04:57:49","endLine":4318,"groupId":"16125","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWindowInParenthesis","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/c56354833d8acfcc210ae25313c78e9332a2ba.src","preCode":"  @Test public void testWindowInParenthesis() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select count(*) over (w), count(*) over w\\n\"\n        + \"from emp\\n\"\n        + \"window w as (partition by empno order by empno)\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4306,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 04:45:12","codes":[{"authorDate":"2020-07-09 04:45:12","commitOrder":5,"curCode":"  @Test void testExpressionInWindowFunction() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-07-12 06:58:28","endLine":4444,"groupId":"10966","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpressionInWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/d77aee9e74f65d9e26a1ffa96400062e1eb119.src","preCode":"  @Test void testExpressionInWindowFunction() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select\\n\"\n        + \" sum(deptno) over(partition by deptno order by sal) as sum1,\\n\"\n        + \"sum(deptno + sal) over(partition by deptno order by sal) as sum2\\n\"\n        + \"from emp\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4430,"status":"M"},{"authorDate":"2020-07-09 04:45:12","commitOrder":5,"curCode":"  @Test void testWindowInParenthesis() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW);\n\n    final String sql = \"select count(*) over (w), count(*) over w\\n\"\n        + \"from emp\\n\"\n        + \"window w as (partition by empno order by empno)\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-07-12 06:58:28","endLine":4461,"groupId":"10966","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testWindowInParenthesis","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/d77aee9e74f65d9e26a1ffa96400062e1eb119.src","preCode":"  @Test void testWindowInParenthesis() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ProjectToWindowRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ProjectToWindowRule.PROJECT);\n\n    final String sql = \"select count(*) over (w), count(*) over w\\n\"\n        + \"from emp\\n\"\n        + \"window w as (partition by empno order by empno)\";\n    sql(sql)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4449,"status":"M"}],"commitId":"23b26b6287315cc2cd236e705bb651077488fc5c","commitMessage":"@@@In preparation for [CALCITE-3923] and [CALCITE-4079].  deprecate fields and methods that will be removed between 1.24 and 1.25\n\nAlso.  in RelNode.  change some methods from 'to removed before 2.0'\nto 'to be removed before 1.25'. The methods are sDistinct(). \nisKey(ImmutableBitSet).  getQuery().  getRows().  getVariablesStopped(). \ncomputeSelfCost().  isValid(boolean).  getCollationList().  getChildExps().\n","date":"2020-07-12 06:58:28","modifiedFileCount":"137","status":"M","submitter":"Julian Hyde"}]
