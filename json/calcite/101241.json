[{"authorTime":"2015-10-23 05:44:54","codes":[{"authorDate":"2016-05-24 21:04:41","commitOrder":2,"curCode":"  @Test public void testScanInvalidSchema() {\n    \r\n    \r\n    \r\n    try {\n      final RelNode root =\n          RelBuilder.create(config().build())\n              .scan(\"ZZZ\", \"EMP\") \r\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (Exception e) {\n      assertThat(e.getMessage(), is(\"Table 'ZZZ.EMP' not found\"));\n    }\n  }\n","date":"2016-05-26 00:41:08","endLine":164,"groupId":"11069","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testScanInvalidSchema","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/ea995baf0b6d299ee6beda6f155c74646af432.src","preCode":"  @Test public void testScanInvalidSchema() {\n    \r\n    \r\n    \r\n    try {\n      final RelNode root =\n          RelBuilder.create(config().build())\n              .scan(\"ZZZ\", \"EMP\") \r\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (Exception e) {\n      assertThat(e.getMessage(), is(\"Table 'ZZZ.EMP' not found\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"B"},{"authorDate":"2015-10-23 05:44:54","commitOrder":2,"curCode":"  @Test public void testScanValidTableWrongCase() {\n    \r\n    \r\n    \r\n    try {\n      final RelNode root =\n          RelBuilder.create(config().build())\n              .scan(\"emp\") \r\n              .build();\n      fail(\"Expected error (table names are case-sensitive), but got \" + root);\n    } catch (Exception e) {\n      assertThat(e.getMessage(), is(\"Table 'emp' not found\"));\n    }\n  }\n","date":"2015-10-27 02:39:34","endLine":147,"groupId":"11069","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testScanValidTableWrongCase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7c/e40c8a2a90ec6c3540f8077a4018936bbc2ed8.src","preCode":"  @Test public void testScanValidTableWrongCase() {\n    \r\n    \r\n    \r\n    try {\n      final RelNode root =\n          RelBuilder.create(config().build())\n              .scan(\"emp\") \r\n              .build();\n      fail(\"Expected error (table names are case-sensitive), but got \" + root);\n    } catch (Exception e) {\n      assertThat(e.getMessage(), is(\"Table 'emp' not found\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"NB"}],"commitId":"b76affccec5756d7d1f6cf76cf4c2344a28fcfeb","commitMessage":"@@@[CALCITE-1245] Allow RelBuilder.scan to take qualified table name (Chris Baynes)\n\nClose apache/calcite#237\n","date":"2016-05-26 00:41:08","modifiedFileCount":"3","status":"M","submitter":"Chris Baynes"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testScanInvalidSchema() {\n    \r\n    \r\n    \r\n    try {\n      final RelNode root =\n          RelBuilder.create(config().build())\n              .scan(\"ZZZ\", \"EMP\") \r\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (Exception e) {\n      assertThat(e.getMessage(), is(\"Table 'ZZZ.EMP' not found\"));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":235,"groupId":"101241","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testScanInvalidSchema","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testScanInvalidSchema() {\n    \r\n    \r\n    \r\n    try {\n      final RelNode root =\n          RelBuilder.create(config().build())\n              .scan(\"ZZZ\", \"EMP\") \r\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (Exception e) {\n      assertThat(e.getMessage(), is(\"Table 'ZZZ.EMP' not found\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testScanValidTableWrongCase() {\n    \r\n    \r\n    \r\n    try {\n      final RelNode root =\n          RelBuilder.create(config().build())\n              .scan(\"emp\") \r\n              .build();\n      fail(\"Expected error (table names are case-sensitive), but got \" + root);\n    } catch (Exception e) {\n      assertThat(e.getMessage(), is(\"Table 'emp' not found\"));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":265,"groupId":"101241","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testScanValidTableWrongCase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testScanValidTableWrongCase() {\n    \r\n    \r\n    \r\n    try {\n      final RelNode root =\n          RelBuilder.create(config().build())\n              .scan(\"emp\") \r\n              .build();\n      fail(\"Expected error (table names are case-sensitive), but got \" + root);\n    } catch (Exception e) {\n      assertThat(e.getMessage(), is(\"Table 'emp' not found\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
