[{"authorTime":"2020-01-07 01:06:39","codes":[{"authorDate":"2020-01-07 01:06:39","commitOrder":1,"curCode":"  @Test public void testSimplifyCaseDiv1() {\n    \r\n    simplify = simplify.withParanoid(false);\n    RexNode caseNode = case_(\n        ne(vIntNotNull(), literal(0)),\n        eq(div(literal(3), vIntNotNull()), literal(11)),\n        falseLiteral);\n    checkSimplifyUnchanged(caseNode);\n  }\n","date":"2020-01-08 01:04:52","endLine":1704,"groupId":"11939","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyCaseDiv1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/a0c7274b2dc54806568765cd1d67427092fee2.src","preCode":"  @Test public void testSimplifyCaseDiv1() {\n    \r\n    simplify = simplify.withParanoid(false);\n    RexNode caseNode = case_(\n        ne(vIntNotNull(), literal(0)),\n        eq(div(literal(3), vIntNotNull()), literal(11)),\n        falseLiteral);\n    checkSimplifyUnchanged(caseNode);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1696,"status":"B"},{"authorDate":"2020-01-07 01:06:39","commitOrder":1,"curCode":"  @Test public void testSimplifyCaseDiv2() {\n    \r\n    simplify = simplify.withParanoid(false);\n    RexNode caseNode = case_(\n        eq(vIntNotNull(), literal(0)), trueLiteral,\n        gt(div(literal(3), vIntNotNull()), literal(1)), trueLiteral,\n        falseLiteral);\n    checkSimplifyUnchanged(caseNode);\n  }\n","date":"2020-01-08 01:04:52","endLine":1715,"groupId":"14159","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyCaseDiv2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/a0c7274b2dc54806568765cd1d67427092fee2.src","preCode":"  @Test public void testSimplifyCaseDiv2() {\n    \r\n    simplify = simplify.withParanoid(false);\n    RexNode caseNode = case_(\n        eq(vIntNotNull(), literal(0)), trueLiteral,\n        gt(div(literal(3), vIntNotNull()), literal(1)), trueLiteral,\n        falseLiteral);\n    checkSimplifyUnchanged(caseNode);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1707,"status":"B"}],"commitId":"763ec429c951acd5fa251c5d4a2b7780fbf648d4","commitMessage":"@@@[CALCITE-3712] Optimize lossless casts in RexSimplify: CAST(CAST(intExpr as BIGINT) as INT) => intExpr\n","date":"2020-01-08 01:04:52","modifiedFileCount":"4","status":"B","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSimplifyCaseDiv1() {\n    \r\n    simplify = simplify.withParanoid(false);\n    RexNode caseNode = case_(\n        ne(vIntNotNull(), literal(0)),\n        eq(div(literal(3), vIntNotNull()), literal(11)),\n        falseLiteral);\n    checkSimplifyUnchanged(caseNode);\n  }\n","date":"2020-04-06 04:57:49","endLine":1704,"groupId":"10693","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyCaseDiv1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test public void testSimplifyCaseDiv1() {\n    \r\n    simplify = simplify.withParanoid(false);\n    RexNode caseNode = case_(\n        ne(vIntNotNull(), literal(0)),\n        eq(div(literal(3), vIntNotNull()), literal(11)),\n        falseLiteral);\n    checkSimplifyUnchanged(caseNode);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1696,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSimplifyCaseDiv2() {\n    \r\n    simplify = simplify.withParanoid(false);\n    RexNode caseNode = case_(\n        eq(vIntNotNull(), literal(0)), trueLiteral,\n        gt(div(literal(3), vIntNotNull()), literal(1)), trueLiteral,\n        falseLiteral);\n    checkSimplifyUnchanged(caseNode);\n  }\n","date":"2020-04-06 04:57:49","endLine":1715,"groupId":"10693","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyCaseDiv2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test public void testSimplifyCaseDiv2() {\n    \r\n    simplify = simplify.withParanoid(false);\n    RexNode caseNode = case_(\n        eq(vIntNotNull(), literal(0)), trueLiteral,\n        gt(div(literal(3), vIntNotNull()), literal(1)), trueLiteral,\n        falseLiteral);\n    checkSimplifyUnchanged(caseNode);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1707,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
