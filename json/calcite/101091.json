[{"authorTime":"2020-01-07 13:38:09","codes":[{"authorDate":"2019-12-28 13:10:08","commitOrder":2,"curCode":"  @Test public void testExtractXml() {\n    assertExtractXml(null, \"\", null, nullValue());\n    assertExtractXml(\"\", null, null, nullValue());\n\n    String xpath = \"<\";\n    String namespace = \"a\";\n    String message =\n        \"Invalid input for EXTRACT xpath: '\" + xpath + \"', namespace: '\" + namespace + \"'\";\n    CalciteException expected = new CalciteException(message, null);\n    assertExtractXmlFailed(\"\", xpath, namespace, Matchers.expectThrowable(expected));\n  }\n","date":"2020-01-07 11:15:36","endLine":69,"groupId":"3668","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractXml","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7d/a17cd2cc4a52416db93813a99cd71e1ebe1b9f.src","preCode":"  @Test public void testExtractXml() {\n    assertExtractXml(null, \"\", null, nullValue());\n    assertExtractXml(\"\", null, null, nullValue());\n\n    String xpath = \"<\";\n    String namespace = \"a\";\n    String message =\n        \"Invalid input for EXTRACT xpath: '\" + xpath + \"', namespace: '\" + namespace + \"'\";\n    CalciteException expected = new CalciteException(message, null);\n    assertExtractXmlFailed(\"\", xpath, namespace, Matchers.expectThrowable(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlXmlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"NB"},{"authorDate":"2020-01-07 13:38:09","commitOrder":2,"curCode":"  @Test public void testExistsNode() {\n    assertExistsNode(null, \"\", null, nullValue());\n    assertExistsNode(\"\", null, null, nullValue());\n\n    String xpath = \"<\";\n    String namespace = \"a\";\n    String message =\n        \"Invalid input for EXISTSNODE xpath: '\" + xpath + \"', namespace: '\" + namespace + \"'\";\n    CalciteException expected = new CalciteException(message, null);\n    assertExistsNodeFailed(\"\", xpath, namespace, Matchers.expectThrowable(expected));\n  }\n","date":"2020-01-15 09:58:57","endLine":82,"groupId":"3668","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExistsNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/86/305d7605a7bf2859c039802f82cf68c1040808.src","preCode":"  @Test public void testExistsNode() {\n    assertExistsNode(null, \"\", null, nullValue());\n    assertExistsNode(\"\", null, null, nullValue());\n\n    String xpath = \"<\";\n    String namespace = \"a\";\n    String message =\n        \"Invalid input for EXISTSNODE xpath: '\" + xpath + \"', namespace: '\" + namespace + \"'\";\n    CalciteException expected = new CalciteException(message, null);\n    assertExistsNodeFailed(\"\", xpath, namespace, Matchers.expectThrowable(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlXmlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"}],"commitId":"990ed290ccde1344c9277cf88c82df3118a96217","commitMessage":"@@@[CALCITE-3640] Oracle EXISTSNODE Function Support (ritesh-kapoor)\n\nclose apache/calcite#1727\n","date":"2020-01-15 09:58:57","modifiedFileCount":"7","status":"M","submitter":"Ritesh Kapoor"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testExtractXml() {\n    assertExtractXml(null, \"\", null, nullValue());\n    assertExtractXml(\"\", null, null, nullValue());\n\n    String xpath = \"<\";\n    String namespace = \"a\";\n    String message =\n        \"Invalid input for EXTRACT xpath: '\" + xpath + \"', namespace: '\" + namespace + \"'\";\n    CalciteException expected = new CalciteException(message, null);\n    assertExtractXmlFailed(\"\", xpath, namespace, Matchers.expectThrowable(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":69,"groupId":"101091","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testExtractXml","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/14/57ef69084be37058a0f8accac10c151f622c5c.src","preCode":"  @Test public void testExtractXml() {\n    assertExtractXml(null, \"\", null, nullValue());\n    assertExtractXml(\"\", null, null, nullValue());\n\n    String xpath = \"<\";\n    String namespace = \"a\";\n    String message =\n        \"Invalid input for EXTRACT xpath: '\" + xpath + \"', namespace: '\" + namespace + \"'\";\n    CalciteException expected = new CalciteException(message, null);\n    assertExtractXmlFailed(\"\", xpath, namespace, Matchers.expectThrowable(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlXmlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testExistsNode() {\n    assertExistsNode(null, \"\", null, nullValue());\n    assertExistsNode(\"\", null, null, nullValue());\n\n    String xpath = \"<\";\n    String namespace = \"a\";\n    String message =\n        \"Invalid input for EXISTSNODE xpath: '\" + xpath + \"', namespace: '\" + namespace + \"'\";\n    CalciteException expected = new CalciteException(message, null);\n    assertExistsNodeFailed(\"\", xpath, namespace, Matchers.expectThrowable(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":82,"groupId":"101091","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testExistsNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/14/57ef69084be37058a0f8accac10c151f622c5c.src","preCode":"  @Test public void testExistsNode() {\n    assertExistsNode(null, \"\", null, nullValue());\n    assertExistsNode(\"\", null, null, nullValue());\n\n    String xpath = \"<\";\n    String namespace = \"a\";\n    String message =\n        \"Invalid input for EXISTSNODE xpath: '\" + xpath + \"', namespace: '\" + namespace + \"'\";\n    CalciteException expected = new CalciteException(message, null);\n    assertExistsNodeFailed(\"\", xpath, namespace, Matchers.expectThrowable(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlXmlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
