[{"authorTime":"2020-05-31 06:22:44","codes":[{"authorDate":"2020-05-31 06:22:44","commitOrder":1,"curCode":"  static void populate(SqlIdentifier name, SqlNode query,\n      CalcitePrepare.Context context) {\n    \r\n    \r\n    \r\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .defaultSchema(context.getRootSchema().plus())\n        .build();\n    final Planner planner = Frameworks.getPlanner(config);\n    try {\n      final StringBuilder buf = new StringBuilder();\n      final SqlWriterConfig writerConfig =\n          SqlPrettyWriter.config().withAlwaysUseParentheses(false);\n      final SqlPrettyWriter w = new SqlPrettyWriter(writerConfig, buf);\n      buf.append(\"INSERT INTO \");\n      name.unparse(w, 0, 0);\n      buf.append(' ');\n      query.unparse(w, 0, 0);\n      final String sql = buf.toString();\n      final SqlNode query1 = planner.parse(sql);\n      final SqlNode query2 = planner.validate(query1);\n      final RelRoot r = planner.rel(query2);\n      final PreparedStatement prepare = context.getRelRunner().prepare(r.rel);\n      int rowCount = prepare.executeUpdate();\n      Util.discard(rowCount);\n      prepare.close();\n    } catch (SqlParseException | ValidationException\n        | RelConversionException | SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-06-01 15:36:01","endLine":213,"groupId":"11678","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"populate","params":"(SqlIdentifiername@SqlNodequery@CalcitePrepare.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/78/f39b17b7ba3c1b858f218737b2586800fd220b.src","preCode":"  static void populate(SqlIdentifier name, SqlNode query,\n      CalcitePrepare.Context context) {\n    \r\n    \r\n    \r\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .defaultSchema(context.getRootSchema().plus())\n        .build();\n    final Planner planner = Frameworks.getPlanner(config);\n    try {\n      final StringBuilder buf = new StringBuilder();\n      final SqlWriterConfig writerConfig =\n          SqlPrettyWriter.config().withAlwaysUseParentheses(false);\n      final SqlPrettyWriter w = new SqlPrettyWriter(writerConfig, buf);\n      buf.append(\"INSERT INTO \");\n      name.unparse(w, 0, 0);\n      buf.append(' ');\n      query.unparse(w, 0, 0);\n      final String sql = buf.toString();\n      final SqlNode query1 = planner.parse(sql);\n      final SqlNode query2 = planner.validate(query1);\n      final RelRoot r = planner.rel(query2);\n      final PreparedStatement prepare = context.getRelRunner().prepare(r.rel);\n      int rowCount = prepare.executeUpdate();\n      Util.discard(rowCount);\n      prepare.close();\n    } catch (SqlParseException | ValidationException\n        | RelConversionException | SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"server/src/main/java/org/apache/calcite/server/ServerDdlExecutor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"B"},{"authorDate":"2020-05-31 06:22:44","commitOrder":1,"curCode":"  protected static void populate(SqlIdentifier name, SqlNode query,\n      CalcitePrepare.Context context) {\n    \r\n    \r\n    \r\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .defaultSchema(\n            Objects.requireNonNull(\n                Schemas.subSchema(context.getRootSchema(),\n                    context.getDefaultSchemaPath())).plus())\n        .build();\n    final Planner planner = Frameworks.getPlanner(config);\n    try {\n      final StringBuilder buf = new StringBuilder();\n      final SqlPrettyWriter w =\n          new SqlPrettyWriter(\n              SqlPrettyWriter.config()\n                  .withDialect(CalciteSqlDialect.DEFAULT)\n                  .withAlwaysUseParentheses(false),\n              buf);\n      buf.append(\"INSERT INTO \");\n      name.unparse(w, 0, 0);\n      buf.append(\" \");\n      query.unparse(w, 0, 0);\n      final String sql = buf.toString();\n      final SqlNode query1 = planner.parse(sql);\n      final SqlNode query2 = planner.validate(query1);\n      final RelRoot r = planner.rel(query2);\n      final PreparedStatement prepare = context.getRelRunner().prepare(r.rel);\n      int rowCount = prepare.executeUpdate();\n      Util.discard(rowCount);\n      prepare.close();\n    } catch (SqlParseException | ValidationException\n        | RelConversionException | SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-06-01 15:36:01","endLine":175,"groupId":"1309","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"populate","params":"(SqlIdentifiername@SqlNodequery@CalcitePrepare.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/71/70c6e3da09ed33c01b07f058c6a5e2066b5f14.src","preCode":"  protected static void populate(SqlIdentifier name, SqlNode query,\n      CalcitePrepare.Context context) {\n    \r\n    \r\n    \r\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .defaultSchema(\n            Objects.requireNonNull(\n                Schemas.subSchema(context.getRootSchema(),\n                    context.getDefaultSchemaPath())).plus())\n        .build();\n    final Planner planner = Frameworks.getPlanner(config);\n    try {\n      final StringBuilder buf = new StringBuilder();\n      final SqlPrettyWriter w =\n          new SqlPrettyWriter(\n              SqlPrettyWriter.config()\n                  .withDialect(CalciteSqlDialect.DEFAULT)\n                  .withAlwaysUseParentheses(false),\n              buf);\n      buf.append(\"INSERT INTO \");\n      name.unparse(w, 0, 0);\n      buf.append(\" \");\n      query.unparse(w, 0, 0);\n      final String sql = buf.toString();\n      final SqlNode query1 = planner.parse(sql);\n      final SqlNode query2 = planner.validate(query1);\n      final RelRoot r = planner.rel(query2);\n      final PreparedStatement prepare = context.getRelRunner().prepare(r.rel);\n      int rowCount = prepare.executeUpdate();\n      Util.discard(rowCount);\n      prepare.close();\n    } catch (SqlParseException | ValidationException\n        | RelConversionException | SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/ExtensionDdlExecutor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"B"}],"commitId":"c0f102d2013a8f4d2903ec259449f5bd668eec30","commitMessage":"@@@Refactor DDL execution code out of SqlNode sub-classes and into DdlExecutor\n\nIn the previous commit we moved DDL classes from server to\ncore.  but in this commit we move the execution logic back to\nserver.\n\nDdlExecutor is acquired via the parser factory. Not ideal.  but keeps\neverything working and can be improved later.\n\nRemove duplicate package-info files.  and suppress a checkstyle\ncomplaint that the org.apache.calcite.server package in the\nserver module should have a package-info. (It already has one\nin the core module.)\n","date":"2020-06-01 15:36:01","modifiedFileCount":"23","status":"B","submitter":"Julian Hyde"},{"authorTime":"2021-04-27 03:04:00","codes":[{"authorDate":"2021-04-27 03:04:00","commitOrder":2,"curCode":"  static void populate(SqlIdentifier name, SqlNode query,\n      CalcitePrepare.Context context) {\n    \r\n    \r\n    \r\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .defaultSchema(context.getRootSchema().plus())\n        .build();\n    final Planner planner = Frameworks.getPlanner(config);\n    try {\n      final StringBuilder buf = new StringBuilder();\n      final SqlWriterConfig writerConfig =\n          SqlPrettyWriter.config().withAlwaysUseParentheses(false);\n      final SqlPrettyWriter w = new SqlPrettyWriter(writerConfig, buf);\n      buf.append(\"INSERT INTO \");\n      name.unparse(w, 0, 0);\n      buf.append(' ');\n      query.unparse(w, 0, 0);\n      final String sql = buf.toString();\n      final SqlNode query1 = planner.parse(sql);\n      final SqlNode query2 = planner.validate(query1);\n      final RelRoot r = planner.rel(query2);\n      final PreparedStatement prepare =\n          context.getRelRunner().prepareStatement(r.rel);\n      int rowCount = prepare.executeUpdate();\n      Util.discard(rowCount);\n      prepare.close();\n    } catch (SqlParseException | ValidationException\n        | RelConversionException | SQLException e) {\n      throw Util.throwAsRuntime(e);\n    }\n  }\n","date":"2021-04-27 10:39:48","endLine":214,"groupId":"10238","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"populate","params":"(SqlIdentifiername@SqlNodequery@CalcitePrepare.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6a/0d1a01a980e2410f7fa3a5931a28d6f75ccc93.src","preCode":"  static void populate(SqlIdentifier name, SqlNode query,\n      CalcitePrepare.Context context) {\n    \r\n    \r\n    \r\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .defaultSchema(context.getRootSchema().plus())\n        .build();\n    final Planner planner = Frameworks.getPlanner(config);\n    try {\n      final StringBuilder buf = new StringBuilder();\n      final SqlWriterConfig writerConfig =\n          SqlPrettyWriter.config().withAlwaysUseParentheses(false);\n      final SqlPrettyWriter w = new SqlPrettyWriter(writerConfig, buf);\n      buf.append(\"INSERT INTO \");\n      name.unparse(w, 0, 0);\n      buf.append(' ');\n      query.unparse(w, 0, 0);\n      final String sql = buf.toString();\n      final SqlNode query1 = planner.parse(sql);\n      final SqlNode query2 = planner.validate(query1);\n      final RelRoot r = planner.rel(query2);\n      final PreparedStatement prepare = context.getRelRunner().prepare(r.rel);\n      int rowCount = prepare.executeUpdate();\n      Util.discard(rowCount);\n      prepare.close();\n    } catch (SqlParseException | ValidationException\n        | RelConversionException | SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"server/src/main/java/org/apache/calcite/server/ServerDdlExecutor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"},{"authorDate":"2021-04-27 03:04:00","commitOrder":2,"curCode":"  protected static void populate(SqlIdentifier name, SqlNode query,\n      CalcitePrepare.Context context) {\n    \r\n    \r\n    \r\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .defaultSchema(\n            Objects.requireNonNull(\n                Schemas.subSchema(context.getRootSchema(),\n                    context.getDefaultSchemaPath())).plus())\n        .build();\n    final Planner planner = Frameworks.getPlanner(config);\n    try {\n      final StringBuilder buf = new StringBuilder();\n      final SqlPrettyWriter w =\n          new SqlPrettyWriter(\n              SqlPrettyWriter.config()\n                  .withDialect(CalciteSqlDialect.DEFAULT)\n                  .withAlwaysUseParentheses(false),\n              buf);\n      buf.append(\"INSERT INTO \");\n      name.unparse(w, 0, 0);\n      buf.append(\" \");\n      query.unparse(w, 0, 0);\n      final String sql = buf.toString();\n      final SqlNode query1 = planner.parse(sql);\n      final SqlNode query2 = planner.validate(query1);\n      final RelRoot r = planner.rel(query2);\n      final PreparedStatement prepare =\n          context.getRelRunner().prepareStatement(r.rel);\n      int rowCount = prepare.executeUpdate();\n      Util.discard(rowCount);\n      prepare.close();\n    } catch (SqlParseException | ValidationException\n        | RelConversionException | SQLException e) {\n      throw Util.throwAsRuntime(e);\n    }\n  }\n","date":"2021-04-27 10:39:48","endLine":176,"groupId":"10238","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"populate","params":"(SqlIdentifiername@SqlNodequery@CalcitePrepare.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/22/a77076bc4210a03f0a476dde711398bea78e40.src","preCode":"  protected static void populate(SqlIdentifier name, SqlNode query,\n      CalcitePrepare.Context context) {\n    \r\n    \r\n    \r\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .defaultSchema(\n            Objects.requireNonNull(\n                Schemas.subSchema(context.getRootSchema(),\n                    context.getDefaultSchemaPath())).plus())\n        .build();\n    final Planner planner = Frameworks.getPlanner(config);\n    try {\n      final StringBuilder buf = new StringBuilder();\n      final SqlPrettyWriter w =\n          new SqlPrettyWriter(\n              SqlPrettyWriter.config()\n                  .withDialect(CalciteSqlDialect.DEFAULT)\n                  .withAlwaysUseParentheses(false),\n              buf);\n      buf.append(\"INSERT INTO \");\n      name.unparse(w, 0, 0);\n      buf.append(\" \");\n      query.unparse(w, 0, 0);\n      final String sql = buf.toString();\n      final SqlNode query1 = planner.parse(sql);\n      final SqlNode query2 = planner.validate(query1);\n      final RelRoot r = planner.rel(query2);\n      final PreparedStatement prepare = context.getRelRunner().prepare(r.rel);\n      int rowCount = prepare.executeUpdate();\n      Util.discard(rowCount);\n      prepare.close();\n    } catch (SqlParseException | ValidationException\n        | RelConversionException | SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/ExtensionDdlExecutor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"de847c38f3544f9c7282984f32dc1093bdb2fb60","commitMessage":"@@@[CALCITE-4591] RelRunner should throw SQLException if prepare fails\n","date":"2021-04-27 10:39:48","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"}]
