[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"    public Object getObject(Object dataSet, int ordinal) {\n      final long[] longs = (long[]) dataSet;\n      final int chunksPerWord = 64 / bitCount;\n      final int word = ordinal / chunksPerWord;\n      final long v = longs[word];\n      final int chunk = ordinal % chunksPerWord;\n      final int mask = (1 << bitCount) - 1;\n      final int signMask = 1 << (bitCount - 1);\n      final int shift = chunk * bitCount;\n      final long w = v >> shift;\n      long x = w & mask;\n      if (signed && (x & signMask) != 0) {\n        x = -x;\n      }\n      switch (primitive) {\n      case BOOLEAN:\n        return x != 0;\n      case BYTE:\n        return (byte) x;\n      case CHAR:\n        return (char) x;\n      case SHORT:\n        return (short) x;\n      case INT:\n        return (int) x;\n      case LONG:\n        return x;\n      default:\n        throw new AssertionError(primitive + \" unexpected\");\n      }\n    }\n","date":"2014-11-14 09:39:34","endLine":699,"groupId":"16602","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getObject","params":"(ObjectdataSet@intordinal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/7bb18a31d6c77a21b1c9c470f45d1be2649555.src","preCode":"    public Object getObject(Object dataSet, int ordinal) {\n      final long[] longs = (long[]) dataSet;\n      final int chunksPerWord = 64 / bitCount;\n      final int word = ordinal / chunksPerWord;\n      final long v = longs[word];\n      final int chunk = ordinal % chunksPerWord;\n      final int mask = (1 << bitCount) - 1;\n      final int signMask = 1 << (bitCount - 1);\n      final int shift = chunk * bitCount;\n      final long w = v >> shift;\n      long x = w & mask;\n      if (signed && (x & signMask) != 0) {\n        x = -x;\n      }\n      switch (primitive) {\n      case BOOLEAN:\n        return x != 0;\n      case BYTE:\n        return (byte) x;\n      case CHAR:\n        return (char) x;\n      case SHORT:\n        return (short) x;\n      case INT:\n        return (int) x;\n      case LONG:\n        return x;\n      default:\n        throw new AssertionError(primitive + \" unexpected\");\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"    public int getInt(Object dataSet, int ordinal) {\n      final long[] longs = (long[]) dataSet;\n      final int chunksPerWord = 64 / bitCount;\n      final int word = ordinal / chunksPerWord;\n      final long v = longs[word];\n      final int chunk = ordinal % chunksPerWord;\n      final int mask = (1 << bitCount) - 1;\n      final int signMask = 1 << (bitCount - 1);\n      final int shift = chunk * bitCount;\n      final long w = v >> shift;\n      long x = w & mask;\n      if (signed && (x & signMask) != 0) {\n        x = -x;\n      }\n      return (int) x;\n    }\n","date":"2014-11-14 09:39:34","endLine":716,"groupId":"16602","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getInt","params":"(ObjectdataSet@intordinal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/7bb18a31d6c77a21b1c9c470f45d1be2649555.src","preCode":"    public int getInt(Object dataSet, int ordinal) {\n      final long[] longs = (long[]) dataSet;\n      final int chunksPerWord = 64 / bitCount;\n      final int word = ordinal / chunksPerWord;\n      final long v = longs[word];\n      final int chunk = ordinal % chunksPerWord;\n      final int mask = (1 << bitCount) - 1;\n      final int signMask = 1 << (bitCount - 1);\n      final int shift = chunk * bitCount;\n      final long w = v >> shift;\n      long x = w & mask;\n      if (signed && (x & signMask) != 0) {\n        x = -x;\n      }\n      return (int) x;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":701,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":2,"curCode":"    @Override public Object getObject(Object dataSet, int ordinal) {\n      final long[] longs = (long[]) dataSet;\n      final int chunksPerWord = 64 / bitCount;\n      final int word = ordinal / chunksPerWord;\n      final long v = longs[word];\n      final int chunk = ordinal % chunksPerWord;\n      final int mask = (1 << bitCount) - 1;\n      final int signMask = 1 << (bitCount - 1);\n      final int shift = chunk * bitCount;\n      final long w = v >> shift;\n      long x = w & mask;\n      if (signed && (x & signMask) != 0) {\n        x = -x;\n      }\n      switch (primitive) {\n      case BOOLEAN:\n        return x != 0;\n      case BYTE:\n        return (byte) x;\n      case CHAR:\n        return (char) x;\n      case SHORT:\n        return (short) x;\n      case INT:\n        return (int) x;\n      case LONG:\n        return x;\n      default:\n        throw new AssertionError(primitive + \" unexpected\");\n      }\n    }\n","date":"2020-10-07 05:42:47","endLine":722,"groupId":"102117","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getObject","params":"(ObjectdataSet@intordinal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/045dbf632d62b8a858714a239cc52d3987d1b4.src","preCode":"    public Object getObject(Object dataSet, int ordinal) {\n      final long[] longs = (long[]) dataSet;\n      final int chunksPerWord = 64 / bitCount;\n      final int word = ordinal / chunksPerWord;\n      final long v = longs[word];\n      final int chunk = ordinal % chunksPerWord;\n      final int mask = (1 << bitCount) - 1;\n      final int signMask = 1 << (bitCount - 1);\n      final int shift = chunk * bitCount;\n      final long w = v >> shift;\n      long x = w & mask;\n      if (signed && (x & signMask) != 0) {\n        x = -x;\n      }\n      switch (primitive) {\n      case BOOLEAN:\n        return x != 0;\n      case BYTE:\n        return (byte) x;\n      case CHAR:\n        return (char) x;\n      case SHORT:\n        return (short) x;\n      case INT:\n        return (int) x;\n      case LONG:\n        return x;\n      default:\n        throw new AssertionError(primitive + \" unexpected\");\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":692,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":2,"curCode":"    @Override public int getInt(Object dataSet, int ordinal) {\n      final long[] longs = (long[]) dataSet;\n      final int chunksPerWord = 64 / bitCount;\n      final int word = ordinal / chunksPerWord;\n      final long v = longs[word];\n      final int chunk = ordinal % chunksPerWord;\n      final int mask = (1 << bitCount) - 1;\n      final int signMask = 1 << (bitCount - 1);\n      final int shift = chunk * bitCount;\n      final long w = v >> shift;\n      long x = w & mask;\n      if (signed && (x & signMask) != 0) {\n        x = -x;\n      }\n      return (int) x;\n    }\n","date":"2020-10-07 05:42:47","endLine":739,"groupId":"102117","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getInt","params":"(ObjectdataSet@intordinal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/045dbf632d62b8a858714a239cc52d3987d1b4.src","preCode":"    public int getInt(Object dataSet, int ordinal) {\n      final long[] longs = (long[]) dataSet;\n      final int chunksPerWord = 64 / bitCount;\n      final int word = ordinal / chunksPerWord;\n      final long v = longs[word];\n      final int chunk = ordinal % chunksPerWord;\n      final int mask = (1 << bitCount) - 1;\n      final int signMask = 1 << (bitCount - 1);\n      final int shift = chunk * bitCount;\n      final long w = v >> shift;\n      long x = w & mask;\n      if (signed && (x & signMask) != 0) {\n        x = -x;\n      }\n      return (int) x;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":724,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
