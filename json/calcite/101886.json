[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public void registerConverterRule(\n      RelOptPlanner planner,\n      ConverterRule converterRule) {\n    if (converterRule.isGuaranteed()) {\n      ConversionData conversionData = getConversionData(planner);\n\n      final Convention inConvention =\n          (Convention) converterRule.getInTrait();\n      final Convention outConvention =\n          (Convention) converterRule.getOutTrait();\n      conversionData.conversionGraph.addVertex(inConvention);\n      conversionData.conversionGraph.addVertex(outConvention);\n      conversionData.conversionGraph.addEdge(inConvention, outConvention);\n\n      conversionData.mapArcToConverterRule.put(\n          Pair.of(inConvention, outConvention), converterRule);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":96,"groupId":"788","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"registerConverterRule","params":"(RelOptPlannerplanner@ConverterRuleconverterRule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/51/4a2f5c9d4a4f3deb3e9c404e575fe08cd9a9f3.src","preCode":"  public void registerConverterRule(\n      RelOptPlanner planner,\n      ConverterRule converterRule) {\n    if (converterRule.isGuaranteed()) {\n      ConversionData conversionData = getConversionData(planner);\n\n      final Convention inConvention =\n          (Convention) converterRule.getInTrait();\n      final Convention outConvention =\n          (Convention) converterRule.getOutTrait();\n      conversionData.conversionGraph.addVertex(inConvention);\n      conversionData.conversionGraph.addVertex(outConvention);\n      conversionData.conversionGraph.addEdge(inConvention, outConvention);\n\n      conversionData.mapArcToConverterRule.put(\n          Pair.of(inConvention, outConvention), converterRule);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public void deregisterConverterRule(\n      RelOptPlanner planner,\n      ConverterRule converterRule) {\n    if (converterRule.isGuaranteed()) {\n      ConversionData conversionData = getConversionData(planner);\n\n      final Convention inConvention =\n          (Convention) converterRule.getInTrait();\n      final Convention outConvention =\n          (Convention) converterRule.getOutTrait();\n\n      final boolean removed =\n          conversionData.conversionGraph.removeEdge(\n              inConvention, outConvention);\n      assert removed;\n      conversionData.mapArcToConverterRule.remove(\n          Pair.of(inConvention, outConvention), converterRule);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":116,"groupId":"213","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deregisterConverterRule","params":"(RelOptPlannerplanner@ConverterRuleconverterRule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/51/4a2f5c9d4a4f3deb3e9c404e575fe08cd9a9f3.src","preCode":"  public void deregisterConverterRule(\n      RelOptPlanner planner,\n      ConverterRule converterRule) {\n    if (converterRule.isGuaranteed()) {\n      ConversionData conversionData = getConversionData(planner);\n\n      final Convention inConvention =\n          (Convention) converterRule.getInTrait();\n      final Convention outConvention =\n          (Convention) converterRule.getOutTrait();\n\n      final boolean removed =\n          conversionData.conversionGraph.removeEdge(\n              inConvention, outConvention);\n      assert removed;\n      conversionData.mapArcToConverterRule.remove(\n          Pair.of(inConvention, outConvention), converterRule);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":2,"curCode":"  @Override public void registerConverterRule(\n      RelOptPlanner planner,\n      ConverterRule converterRule) {\n    if (converterRule.isGuaranteed()) {\n      ConversionData conversionData = getConversionData(planner);\n\n      final Convention inConvention =\n          (Convention) converterRule.getInTrait();\n      final Convention outConvention =\n          (Convention) converterRule.getOutTrait();\n      conversionData.conversionGraph.addVertex(inConvention);\n      conversionData.conversionGraph.addVertex(outConvention);\n      conversionData.conversionGraph.addEdge(inConvention, outConvention);\n\n      conversionData.mapArcToConverterRule.put(\n          Pair.of(inConvention, outConvention), converterRule);\n    }\n  }\n","date":"2020-10-07 05:42:47","endLine":102,"groupId":"101886","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"registerConverterRule","params":"(RelOptPlannerplanner@ConverterRuleconverterRule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/21/8ca09a42cd1dc95fc3b707b2f89aea031c5160.src","preCode":"  public void registerConverterRule(\n      RelOptPlanner planner,\n      ConverterRule converterRule) {\n    if (converterRule.isGuaranteed()) {\n      ConversionData conversionData = getConversionData(planner);\n\n      final Convention inConvention =\n          (Convention) converterRule.getInTrait();\n      final Convention outConvention =\n          (Convention) converterRule.getOutTrait();\n      conversionData.conversionGraph.addVertex(inConvention);\n      conversionData.conversionGraph.addVertex(outConvention);\n      conversionData.conversionGraph.addEdge(inConvention, outConvention);\n\n      conversionData.mapArcToConverterRule.put(\n          Pair.of(inConvention, outConvention), converterRule);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":2,"curCode":"  @Override public void deregisterConverterRule(\n      RelOptPlanner planner,\n      ConverterRule converterRule) {\n    if (converterRule.isGuaranteed()) {\n      ConversionData conversionData = getConversionData(planner);\n\n      final Convention inConvention =\n          (Convention) converterRule.getInTrait();\n      final Convention outConvention =\n          (Convention) converterRule.getOutTrait();\n\n      final boolean removed =\n          conversionData.conversionGraph.removeEdge(\n              inConvention, outConvention);\n      assert removed;\n      conversionData.mapArcToConverterRule.remove(\n          Pair.of(inConvention, outConvention), converterRule);\n    }\n  }\n","date":"2020-10-07 05:42:47","endLine":122,"groupId":"101886","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deregisterConverterRule","params":"(RelOptPlannerplanner@ConverterRuleconverterRule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/21/8ca09a42cd1dc95fc3b707b2f89aea031c5160.src","preCode":"  public void deregisterConverterRule(\n      RelOptPlanner planner,\n      ConverterRule converterRule) {\n    if (converterRule.isGuaranteed()) {\n      ConversionData conversionData = getConversionData(planner);\n\n      final Convention inConvention =\n          (Convention) converterRule.getInTrait();\n      final Convention outConvention =\n          (Convention) converterRule.getOutTrait();\n\n      final boolean removed =\n          conversionData.conversionGraph.removeEdge(\n              inConvention, outConvention);\n      assert removed;\n      conversionData.mapArcToConverterRule.remove(\n          Pair.of(inConvention, outConvention), converterRule);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
