[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2017-03-08 03:44:23","commitOrder":2,"curCode":"  @Test public void testNotLikeOperator() {\n    tester.setFor(SqlStdOperatorTable.NOT_LIKE, VM_EXPAND);\n    tester.checkBoolean(\"'abc' not like '_b_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'ab\\ncd' not like 'ab%'\", Boolean.FALSE);\n    tester.checkBoolean(\"'123\\n\\n45\\n' not like '%'\", Boolean.FALSE);\n    tester.checkBoolean(\"'ab\\ncd\\nef' not like '%cd%'\", Boolean.FALSE);\n    tester.checkBoolean(\"'ab\\ncd\\nef' not like '%cde%'\", Boolean.TRUE);\n  }\n","date":"2017-03-10 05:10:10","endLine":3190,"groupId":"9760","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotLikeOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f8/efa3e871299401bc40d573a093958d40d4e6bc.src","preCode":"  @Test public void testNotLikeOperator() {\n    tester.setFor(SqlStdOperatorTable.NOT_LIKE, VM_EXPAND);\n    tester.checkBoolean(\"'abc' not like '_b_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'ab\\ncd' not like 'ab%'\", Boolean.FALSE);\n    tester.checkBoolean(\"'123\\n\\n45\\n' not like '%'\", Boolean.FALSE);\n    tester.checkBoolean(\"'ab\\ncd\\nef' not like '%cd%'\", Boolean.FALSE);\n    tester.checkBoolean(\"'ab\\ncd\\nef' not like '%cde%'\", Boolean.TRUE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3183,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testLikeEscape() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"'a_c' like 'a#_c' escape '#'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a#_c' escape '#'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a_c' like 'a\\\\_c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a\\\\_c' escape '\\\\'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a%c' like 'a\\\\%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a%cde' like 'a\\\\%c_e' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a\\\\%c' escape '\\\\'\", Boolean.FALSE);\n  }\n","date":"2014-11-14 09:39:34","endLine":2993,"groupId":"9760","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLikeEscape","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testLikeEscape() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"'a_c' like 'a#_c' escape '#'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a#_c' escape '#'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a_c' like 'a\\\\_c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a\\\\_c' escape '\\\\'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a%c' like 'a\\\\%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a%cde' like 'a\\\\%c_e' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a\\\\%c' escape '\\\\'\", Boolean.FALSE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2983,"status":"NB"}],"commitId":"58217cb2122b508016a1b8c4278a21a2e890b861","commitMessage":"@@@[CALCITE-1674] LIKE does not match value that contains newline (Mark Payne)\n\nUse (?s:.*) for regex that matches % wildcard for LIKE operators.\nThis allows the % character to match newlines.\n\nClose apache/calcite#390\n","date":"2017-03-10 05:10:10","modifiedFileCount":"2","status":"M","submitter":"Mark Payne"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testNotLikeOperator() {\n    tester.setFor(SqlStdOperatorTable.NOT_LIKE, VM_EXPAND);\n    tester.checkBoolean(\"'abc' not like '_b_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'ab\\ncd' not like 'ab%'\", Boolean.FALSE);\n    tester.checkBoolean(\"'123\\n\\n45\\n' not like '%'\", Boolean.FALSE);\n    tester.checkBoolean(\"'ab\\ncd\\nef' not like '%cd%'\", Boolean.FALSE);\n    tester.checkBoolean(\"'ab\\ncd\\nef' not like '%cde%'\", Boolean.TRUE);\n  }\n","date":"2020-04-06 04:57:49","endLine":3833,"groupId":"10764","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotLikeOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testNotLikeOperator() {\n    tester.setFor(SqlStdOperatorTable.NOT_LIKE, VM_EXPAND);\n    tester.checkBoolean(\"'abc' not like '_b_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'ab\\ncd' not like 'ab%'\", Boolean.FALSE);\n    tester.checkBoolean(\"'123\\n\\n45\\n' not like '%'\", Boolean.FALSE);\n    tester.checkBoolean(\"'ab\\ncd\\nef' not like '%cd%'\", Boolean.FALSE);\n    tester.checkBoolean(\"'ab\\ncd\\nef' not like '%cde%'\", Boolean.TRUE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3826,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testLikeEscape() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"'a_c' like 'a#_c' escape '#'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a#_c' escape '#'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a_c' like 'a\\\\_c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a\\\\_c' escape '\\\\'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a%c' like 'a\\\\%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a%cde' like 'a\\\\%c_e' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a\\\\%c' escape '\\\\'\", Boolean.FALSE);\n  }\n","date":"2020-04-06 04:57:49","endLine":3845,"groupId":"10764","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLikeEscape","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testLikeEscape() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"'a_c' like 'a#_c' escape '#'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a#_c' escape '#'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a_c' like 'a\\\\_c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a\\\\_c' escape '\\\\'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a%c' like 'a\\\\%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a%cde' like 'a\\\\%c_e' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a\\\\%c' escape '\\\\'\", Boolean.FALSE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3835,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
