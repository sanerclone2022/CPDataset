[{"authorTime":"2020-01-07 01:06:39","codes":[{"authorDate":"2020-01-07 01:06:39","commitOrder":1,"curCode":"  @Test public void testCnf() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexNode gRef = rexBuilder.makeFieldAccess(range, 6);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n\n    final RexLiteral sevenLiteral =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(7));\n    final RexNode hEqSeven = eq(hRef, sevenLiteral);\n\n    checkCnf(aRef, \"?0.a\");\n    checkCnf(trueLiteral, \"true\");\n    checkCnf(falseLiteral, \"false\");\n    checkCnf(nullBool, \"null:BOOLEAN\");\n    checkCnf(and(aRef, bRef), \"AND(?0.a, ?0.b)\");\n    checkCnf(and(aRef, bRef, cRef), \"AND(?0.a, ?0.b, ?0.c)\");\n\n    checkCnf(and(or(aRef, bRef), or(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.b), OR(?0.c, ?0.d))\");\n    checkCnf(or(and(aRef, bRef), and(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.c), OR(?0.a, ?0.d), OR(?0.b, ?0.c), OR(?0.b, ?0.d))\");\n    \r\n    checkCnf(or(and(aRef, bRef), or(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.c, ?0.d), OR(?0.b, ?0.c, ?0.d))\");\n\n    checkCnf(or(aRef, not(and(bRef, not(hEqSeven)))),\n        \"OR(?0.a, NOT(?0.b), =(?0.h, 7))\");\n\n    \r\n    checkCnf(not(or(aRef, not(bRef))), \"AND(NOT(?0.a), ?0.b)\");\n\n    \r\n    \r\n    checkCnf(not(or(and(aRef, trueLiteral), not(bRef), falseLiteral)),\n        \"AND(NOT(?0.a), ?0.b)\");\n\n    checkCnf(and(aRef, or(bRef, and(cRef, dRef))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d))\");\n\n    checkCnf(\n        and(aRef, or(bRef, and(cRef, or(dRef, and(eRef, or(fRef, gRef)))))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d, ?0.e), OR(?0.b, ?0.d, ?0.f, ?0.g))\");\n\n    checkCnf(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef,\n                        and(eRef,\n                            or(fRef,\n                                and(gRef, or(trueLiteral, falseLiteral)))))))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d, ?0.e), OR(?0.b, ?0.d, ?0.f, ?0.g))\");\n  }\n","date":"2020-01-08 01:04:52","endLine":599,"groupId":"3895","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCnf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/a0c7274b2dc54806568765cd1d67427092fee2.src","preCode":"  @Test public void testCnf() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexNode gRef = rexBuilder.makeFieldAccess(range, 6);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n\n    final RexLiteral sevenLiteral =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(7));\n    final RexNode hEqSeven = eq(hRef, sevenLiteral);\n\n    checkCnf(aRef, \"?0.a\");\n    checkCnf(trueLiteral, \"true\");\n    checkCnf(falseLiteral, \"false\");\n    checkCnf(nullBool, \"null:BOOLEAN\");\n    checkCnf(and(aRef, bRef), \"AND(?0.a, ?0.b)\");\n    checkCnf(and(aRef, bRef, cRef), \"AND(?0.a, ?0.b, ?0.c)\");\n\n    checkCnf(and(or(aRef, bRef), or(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.b), OR(?0.c, ?0.d))\");\n    checkCnf(or(and(aRef, bRef), and(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.c), OR(?0.a, ?0.d), OR(?0.b, ?0.c), OR(?0.b, ?0.d))\");\n    \r\n    checkCnf(or(and(aRef, bRef), or(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.c, ?0.d), OR(?0.b, ?0.c, ?0.d))\");\n\n    checkCnf(or(aRef, not(and(bRef, not(hEqSeven)))),\n        \"OR(?0.a, NOT(?0.b), =(?0.h, 7))\");\n\n    \r\n    checkCnf(not(or(aRef, not(bRef))), \"AND(NOT(?0.a), ?0.b)\");\n\n    \r\n    \r\n    checkCnf(not(or(and(aRef, trueLiteral), not(bRef), falseLiteral)),\n        \"AND(NOT(?0.a), ?0.b)\");\n\n    checkCnf(and(aRef, or(bRef, and(cRef, dRef))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d))\");\n\n    checkCnf(\n        and(aRef, or(bRef, and(cRef, or(dRef, and(eRef, or(fRef, gRef)))))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d, ?0.e), OR(?0.b, ?0.d, ?0.f, ?0.g))\");\n\n    checkCnf(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef,\n                        and(eRef,\n                            or(fRef,\n                                and(gRef, or(trueLiteral, falseLiteral)))))))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d, ?0.e), OR(?0.b, ?0.d, ?0.f, ?0.g))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":528,"status":"B"},{"authorDate":"2020-01-07 01:06:39","commitOrder":1,"curCode":"  @Test public void testPullFactors() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexNode gRef = rexBuilder.makeFieldAccess(range, 6);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n\n    final RexLiteral sevenLiteral =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(7));\n    final RexNode hEqSeven = eq(hRef, sevenLiteral);\n\n    \r\n    checkPullFactors(\n        or(and(aRef, bRef),\n            and(cRef, aRef, dRef, aRef)),\n        \"AND(?0.a, OR(?0.b, AND(?0.c, ?0.d)))\");\n\n    checkPullFactors(aRef, \"?0.a\");\n    checkPullFactors(trueLiteral, \"true\");\n    checkPullFactors(falseLiteral, \"false\");\n    checkPullFactors(nullBool, \"null:BOOLEAN\");\n    checkPullFactors(and(aRef, bRef), \"AND(?0.a, ?0.b)\");\n    checkPullFactors(and(aRef, bRef, cRef), \"AND(?0.a, ?0.b, ?0.c)\");\n\n    checkPullFactorsUnchanged(and(or(aRef, bRef), or(cRef, dRef)));\n    checkPullFactorsUnchanged(or(and(aRef, bRef), and(cRef, dRef)));\n    \r\n    checkPullFactors(or(and(aRef, bRef), or(cRef, dRef)),\n        \"OR(AND(?0.a, ?0.b), ?0.c, ?0.d)\");\n\n    checkPullFactorsUnchanged(or(aRef, not(and(bRef, not(hEqSeven)))));\n    checkPullFactorsUnchanged(not(or(aRef, not(bRef))));\n    checkPullFactorsUnchanged(\n        not(or(and(aRef, trueLiteral), not(bRef), falseLiteral)));\n    checkPullFactorsUnchanged(and(aRef, or(bRef, and(cRef, dRef))));\n\n    checkPullFactorsUnchanged(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef, and(eRef, or(fRef, gRef)))))));\n\n    checkPullFactorsUnchanged(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef,\n                        and(eRef,\n                            or(fRef,\n                               and(gRef, or(trueLiteral, falseLiteral)))))))));\n  }\n","date":"2020-01-08 01:04:52","endLine":821,"groupId":"3096","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPullFactors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/a0c7274b2dc54806568765cd1d67427092fee2.src","preCode":"  @Test public void testPullFactors() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexNode gRef = rexBuilder.makeFieldAccess(range, 6);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n\n    final RexLiteral sevenLiteral =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(7));\n    final RexNode hEqSeven = eq(hRef, sevenLiteral);\n\n    \r\n    checkPullFactors(\n        or(and(aRef, bRef),\n            and(cRef, aRef, dRef, aRef)),\n        \"AND(?0.a, OR(?0.b, AND(?0.c, ?0.d)))\");\n\n    checkPullFactors(aRef, \"?0.a\");\n    checkPullFactors(trueLiteral, \"true\");\n    checkPullFactors(falseLiteral, \"false\");\n    checkPullFactors(nullBool, \"null:BOOLEAN\");\n    checkPullFactors(and(aRef, bRef), \"AND(?0.a, ?0.b)\");\n    checkPullFactors(and(aRef, bRef, cRef), \"AND(?0.a, ?0.b, ?0.c)\");\n\n    checkPullFactorsUnchanged(and(or(aRef, bRef), or(cRef, dRef)));\n    checkPullFactorsUnchanged(or(and(aRef, bRef), and(cRef, dRef)));\n    \r\n    checkPullFactors(or(and(aRef, bRef), or(cRef, dRef)),\n        \"OR(AND(?0.a, ?0.b), ?0.c, ?0.d)\");\n\n    checkPullFactorsUnchanged(or(aRef, not(and(bRef, not(hEqSeven)))));\n    checkPullFactorsUnchanged(not(or(aRef, not(bRef))));\n    checkPullFactorsUnchanged(\n        not(or(and(aRef, trueLiteral), not(bRef), falseLiteral)));\n    checkPullFactorsUnchanged(and(aRef, or(bRef, and(cRef, dRef))));\n\n    checkPullFactorsUnchanged(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef, and(eRef, or(fRef, gRef)))))));\n\n    checkPullFactorsUnchanged(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef,\n                        and(eRef,\n                            or(fRef,\n                               and(gRef, or(trueLiteral, falseLiteral)))))))));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":753,"status":"B"}],"commitId":"763ec429c951acd5fa251c5d4a2b7780fbf648d4","commitMessage":"@@@[CALCITE-3712] Optimize lossless casts in RexSimplify: CAST(CAST(intExpr as BIGINT) as INT) => intExpr\n","date":"2020-01-08 01:04:52","modifiedFileCount":"4","status":"B","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testCnf() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexNode gRef = rexBuilder.makeFieldAccess(range, 6);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n\n    final RexLiteral sevenLiteral =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(7));\n    final RexNode hEqSeven = eq(hRef, sevenLiteral);\n\n    checkCnf(aRef, \"?0.a\");\n    checkCnf(trueLiteral, \"true\");\n    checkCnf(falseLiteral, \"false\");\n    checkCnf(nullBool, \"null:BOOLEAN\");\n    checkCnf(and(aRef, bRef), \"AND(?0.a, ?0.b)\");\n    checkCnf(and(aRef, bRef, cRef), \"AND(?0.a, ?0.b, ?0.c)\");\n\n    checkCnf(and(or(aRef, bRef), or(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.b), OR(?0.c, ?0.d))\");\n    checkCnf(or(and(aRef, bRef), and(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.c), OR(?0.a, ?0.d), OR(?0.b, ?0.c), OR(?0.b, ?0.d))\");\n    \r\n    checkCnf(or(and(aRef, bRef), or(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.c, ?0.d), OR(?0.b, ?0.c, ?0.d))\");\n\n    checkCnf(or(aRef, not(and(bRef, not(hEqSeven)))),\n        \"OR(?0.a, NOT(?0.b), =(?0.h, 7))\");\n\n    \r\n    checkCnf(not(or(aRef, not(bRef))), \"AND(NOT(?0.a), ?0.b)\");\n\n    \r\n    \r\n    checkCnf(not(or(and(aRef, trueLiteral), not(bRef), falseLiteral)),\n        \"AND(NOT(?0.a), ?0.b)\");\n\n    checkCnf(and(aRef, or(bRef, and(cRef, dRef))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d))\");\n\n    checkCnf(\n        and(aRef, or(bRef, and(cRef, or(dRef, and(eRef, or(fRef, gRef)))))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d, ?0.e), OR(?0.b, ?0.d, ?0.f, ?0.g))\");\n\n    checkCnf(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef,\n                        and(eRef,\n                            or(fRef,\n                                and(gRef, or(trueLiteral, falseLiteral)))))))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d, ?0.e), OR(?0.b, ?0.d, ?0.f, ?0.g))\");\n  }\n","date":"2020-04-06 04:57:49","endLine":599,"groupId":"3895","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCnf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test public void testCnf() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexNode gRef = rexBuilder.makeFieldAccess(range, 6);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n\n    final RexLiteral sevenLiteral =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(7));\n    final RexNode hEqSeven = eq(hRef, sevenLiteral);\n\n    checkCnf(aRef, \"?0.a\");\n    checkCnf(trueLiteral, \"true\");\n    checkCnf(falseLiteral, \"false\");\n    checkCnf(nullBool, \"null:BOOLEAN\");\n    checkCnf(and(aRef, bRef), \"AND(?0.a, ?0.b)\");\n    checkCnf(and(aRef, bRef, cRef), \"AND(?0.a, ?0.b, ?0.c)\");\n\n    checkCnf(and(or(aRef, bRef), or(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.b), OR(?0.c, ?0.d))\");\n    checkCnf(or(and(aRef, bRef), and(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.c), OR(?0.a, ?0.d), OR(?0.b, ?0.c), OR(?0.b, ?0.d))\");\n    \r\n    checkCnf(or(and(aRef, bRef), or(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.c, ?0.d), OR(?0.b, ?0.c, ?0.d))\");\n\n    checkCnf(or(aRef, not(and(bRef, not(hEqSeven)))),\n        \"OR(?0.a, NOT(?0.b), =(?0.h, 7))\");\n\n    \r\n    checkCnf(not(or(aRef, not(bRef))), \"AND(NOT(?0.a), ?0.b)\");\n\n    \r\n    \r\n    checkCnf(not(or(and(aRef, trueLiteral), not(bRef), falseLiteral)),\n        \"AND(NOT(?0.a), ?0.b)\");\n\n    checkCnf(and(aRef, or(bRef, and(cRef, dRef))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d))\");\n\n    checkCnf(\n        and(aRef, or(bRef, and(cRef, or(dRef, and(eRef, or(fRef, gRef)))))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d, ?0.e), OR(?0.b, ?0.d, ?0.f, ?0.g))\");\n\n    checkCnf(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef,\n                        and(eRef,\n                            or(fRef,\n                                and(gRef, or(trueLiteral, falseLiteral)))))))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d, ?0.e), OR(?0.b, ?0.d, ?0.f, ?0.g))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":528,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testPullFactors() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexNode gRef = rexBuilder.makeFieldAccess(range, 6);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n\n    final RexLiteral sevenLiteral =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(7));\n    final RexNode hEqSeven = eq(hRef, sevenLiteral);\n\n    \r\n    checkPullFactors(\n        or(and(aRef, bRef),\n            and(cRef, aRef, dRef, aRef)),\n        \"AND(?0.a, OR(?0.b, AND(?0.c, ?0.d)))\");\n\n    checkPullFactors(aRef, \"?0.a\");\n    checkPullFactors(trueLiteral, \"true\");\n    checkPullFactors(falseLiteral, \"false\");\n    checkPullFactors(nullBool, \"null:BOOLEAN\");\n    checkPullFactors(and(aRef, bRef), \"AND(?0.a, ?0.b)\");\n    checkPullFactors(and(aRef, bRef, cRef), \"AND(?0.a, ?0.b, ?0.c)\");\n\n    checkPullFactorsUnchanged(and(or(aRef, bRef), or(cRef, dRef)));\n    checkPullFactorsUnchanged(or(and(aRef, bRef), and(cRef, dRef)));\n    \r\n    checkPullFactors(or(and(aRef, bRef), or(cRef, dRef)),\n        \"OR(AND(?0.a, ?0.b), ?0.c, ?0.d)\");\n\n    checkPullFactorsUnchanged(or(aRef, not(and(bRef, not(hEqSeven)))));\n    checkPullFactorsUnchanged(not(or(aRef, not(bRef))));\n    checkPullFactorsUnchanged(\n        not(or(and(aRef, trueLiteral), not(bRef), falseLiteral)));\n    checkPullFactorsUnchanged(and(aRef, or(bRef, and(cRef, dRef))));\n\n    checkPullFactorsUnchanged(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef, and(eRef, or(fRef, gRef)))))));\n\n    checkPullFactorsUnchanged(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef,\n                        and(eRef,\n                            or(fRef,\n                               and(gRef, or(trueLiteral, falseLiteral)))))))));\n  }\n","date":"2020-04-06 04:57:49","endLine":821,"groupId":"3096","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPullFactors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test public void testPullFactors() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexNode gRef = rexBuilder.makeFieldAccess(range, 6);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n\n    final RexLiteral sevenLiteral =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(7));\n    final RexNode hEqSeven = eq(hRef, sevenLiteral);\n\n    \r\n    checkPullFactors(\n        or(and(aRef, bRef),\n            and(cRef, aRef, dRef, aRef)),\n        \"AND(?0.a, OR(?0.b, AND(?0.c, ?0.d)))\");\n\n    checkPullFactors(aRef, \"?0.a\");\n    checkPullFactors(trueLiteral, \"true\");\n    checkPullFactors(falseLiteral, \"false\");\n    checkPullFactors(nullBool, \"null:BOOLEAN\");\n    checkPullFactors(and(aRef, bRef), \"AND(?0.a, ?0.b)\");\n    checkPullFactors(and(aRef, bRef, cRef), \"AND(?0.a, ?0.b, ?0.c)\");\n\n    checkPullFactorsUnchanged(and(or(aRef, bRef), or(cRef, dRef)));\n    checkPullFactorsUnchanged(or(and(aRef, bRef), and(cRef, dRef)));\n    \r\n    checkPullFactors(or(and(aRef, bRef), or(cRef, dRef)),\n        \"OR(AND(?0.a, ?0.b), ?0.c, ?0.d)\");\n\n    checkPullFactorsUnchanged(or(aRef, not(and(bRef, not(hEqSeven)))));\n    checkPullFactorsUnchanged(not(or(aRef, not(bRef))));\n    checkPullFactorsUnchanged(\n        not(or(and(aRef, trueLiteral), not(bRef), falseLiteral)));\n    checkPullFactorsUnchanged(and(aRef, or(bRef, and(cRef, dRef))));\n\n    checkPullFactorsUnchanged(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef, and(eRef, or(fRef, gRef)))))));\n\n    checkPullFactorsUnchanged(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef,\n                        and(eRef,\n                            or(fRef,\n                               and(gRef, or(trueLiteral, falseLiteral)))))))));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":753,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-08-11 09:40:15","codes":[{"authorDate":"2020-08-11 09:40:15","commitOrder":3,"curCode":"  @Test void testCnf() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexNode gRef = rexBuilder.makeFieldAccess(range, 6);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n\n    final RexNode hEqSeven = eq(hRef, literal(7));\n\n    checkCnf(aRef, \"?0.a\");\n    checkCnf(trueLiteral, \"true\");\n    checkCnf(falseLiteral, \"false\");\n    checkCnf(nullBool, \"null:BOOLEAN\");\n    checkCnf(and(aRef, bRef), \"AND(?0.a, ?0.b)\");\n    checkCnf(and(aRef, bRef, cRef), \"AND(?0.a, ?0.b, ?0.c)\");\n\n    checkCnf(and(or(aRef, bRef), or(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.b), OR(?0.c, ?0.d))\");\n    checkCnf(or(and(aRef, bRef), and(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.c), OR(?0.a, ?0.d), OR(?0.b, ?0.c), OR(?0.b, ?0.d))\");\n    \r\n    checkCnf(or(and(aRef, bRef), or(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.c, ?0.d), OR(?0.b, ?0.c, ?0.d))\");\n\n    checkCnf(or(aRef, not(and(bRef, not(hEqSeven)))),\n        \"OR(?0.a, NOT(?0.b), =(?0.h, 7))\");\n\n    \r\n    checkCnf(not(or(aRef, not(bRef))), \"AND(NOT(?0.a), ?0.b)\");\n\n    \r\n    \r\n    checkCnf(not(or(and(aRef, trueLiteral), not(bRef), falseLiteral)),\n        \"AND(NOT(?0.a), ?0.b)\");\n\n    checkCnf(and(aRef, or(bRef, and(cRef, dRef))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d))\");\n\n    checkCnf(\n        and(aRef, or(bRef, and(cRef, or(dRef, and(eRef, or(fRef, gRef)))))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d, ?0.e), OR(?0.b, ?0.d, ?0.f, ?0.g))\");\n\n    checkCnf(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef,\n                        and(eRef,\n                            or(fRef,\n                                and(gRef, or(trueLiteral, falseLiteral)))))))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d, ?0.e), OR(?0.b, ?0.d, ?0.f, ?0.g))\");\n  }\n","date":"2020-08-21 04:50:33","endLine":594,"groupId":"10680","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCnf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/85/82007de9eb7b2a96e2e80ce45bab2a34a63707.src","preCode":"  @Test void testCnf() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexNode gRef = rexBuilder.makeFieldAccess(range, 6);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n\n    final RexLiteral sevenLiteral =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(7));\n    final RexNode hEqSeven = eq(hRef, sevenLiteral);\n\n    checkCnf(aRef, \"?0.a\");\n    checkCnf(trueLiteral, \"true\");\n    checkCnf(falseLiteral, \"false\");\n    checkCnf(nullBool, \"null:BOOLEAN\");\n    checkCnf(and(aRef, bRef), \"AND(?0.a, ?0.b)\");\n    checkCnf(and(aRef, bRef, cRef), \"AND(?0.a, ?0.b, ?0.c)\");\n\n    checkCnf(and(or(aRef, bRef), or(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.b), OR(?0.c, ?0.d))\");\n    checkCnf(or(and(aRef, bRef), and(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.c), OR(?0.a, ?0.d), OR(?0.b, ?0.c), OR(?0.b, ?0.d))\");\n    \r\n    checkCnf(or(and(aRef, bRef), or(cRef, dRef)),\n        \"AND(OR(?0.a, ?0.c, ?0.d), OR(?0.b, ?0.c, ?0.d))\");\n\n    checkCnf(or(aRef, not(and(bRef, not(hEqSeven)))),\n        \"OR(?0.a, NOT(?0.b), =(?0.h, 7))\");\n\n    \r\n    checkCnf(not(or(aRef, not(bRef))), \"AND(NOT(?0.a), ?0.b)\");\n\n    \r\n    \r\n    checkCnf(not(or(and(aRef, trueLiteral), not(bRef), falseLiteral)),\n        \"AND(NOT(?0.a), ?0.b)\");\n\n    checkCnf(and(aRef, or(bRef, and(cRef, dRef))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d))\");\n\n    checkCnf(\n        and(aRef, or(bRef, and(cRef, or(dRef, and(eRef, or(fRef, gRef)))))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d, ?0.e), OR(?0.b, ?0.d, ?0.f, ?0.g))\");\n\n    checkCnf(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef,\n                        and(eRef,\n                            or(fRef,\n                                and(gRef, or(trueLiteral, falseLiteral)))))))),\n        \"AND(?0.a, OR(?0.b, ?0.c), OR(?0.b, ?0.d, ?0.e), OR(?0.b, ?0.d, ?0.f, ?0.g))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"M"},{"authorDate":"2020-08-11 09:40:15","commitOrder":3,"curCode":"  @Test void testPullFactors() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexNode gRef = rexBuilder.makeFieldAccess(range, 6);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n\n    final RexNode hEqSeven = eq(hRef, literal(7));\n\n    \r\n    checkPullFactors(\n        or(and(aRef, bRef),\n            and(cRef, aRef, dRef, aRef)),\n        \"AND(?0.a, OR(?0.b, AND(?0.c, ?0.d)))\");\n\n    checkPullFactors(aRef, \"?0.a\");\n    checkPullFactors(trueLiteral, \"true\");\n    checkPullFactors(falseLiteral, \"false\");\n    checkPullFactors(nullBool, \"null:BOOLEAN\");\n    checkPullFactors(and(aRef, bRef), \"AND(?0.a, ?0.b)\");\n    checkPullFactors(and(aRef, bRef, cRef), \"AND(?0.a, ?0.b, ?0.c)\");\n\n    checkPullFactorsUnchanged(and(or(aRef, bRef), or(cRef, dRef)));\n    checkPullFactorsUnchanged(or(and(aRef, bRef), and(cRef, dRef)));\n    \r\n    checkPullFactors(or(and(aRef, bRef), or(cRef, dRef)),\n        \"OR(AND(?0.a, ?0.b), ?0.c, ?0.d)\");\n\n    checkPullFactorsUnchanged(or(aRef, not(and(bRef, not(hEqSeven)))));\n    checkPullFactorsUnchanged(not(or(aRef, not(bRef))));\n    checkPullFactorsUnchanged(\n        not(or(and(aRef, trueLiteral), not(bRef), falseLiteral)));\n    checkPullFactorsUnchanged(and(aRef, or(bRef, and(cRef, dRef))));\n\n    checkPullFactorsUnchanged(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef, and(eRef, or(fRef, gRef)))))));\n\n    checkPullFactorsUnchanged(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef,\n                        and(eRef,\n                            or(fRef,\n                               and(gRef, or(trueLiteral, falseLiteral)))))))));\n  }\n","date":"2020-08-21 04:50:33","endLine":799,"groupId":"10680","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPullFactors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/85/82007de9eb7b2a96e2e80ce45bab2a34a63707.src","preCode":"  @Test void testPullFactors() {\n    final RelDataType booleanType =\n        typeFactory.createSqlType(SqlTypeName.BOOLEAN);\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"a\", booleanType)\n        .add(\"b\", booleanType)\n        .add(\"c\", booleanType)\n        .add(\"d\", booleanType)\n        .add(\"e\", booleanType)\n        .add(\"f\", booleanType)\n        .add(\"g\", booleanType)\n        .add(\"h\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode cRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode dRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode eRef = rexBuilder.makeFieldAccess(range, 4);\n    final RexNode fRef = rexBuilder.makeFieldAccess(range, 5);\n    final RexNode gRef = rexBuilder.makeFieldAccess(range, 6);\n    final RexNode hRef = rexBuilder.makeFieldAccess(range, 7);\n\n    final RexLiteral sevenLiteral =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(7));\n    final RexNode hEqSeven = eq(hRef, sevenLiteral);\n\n    \r\n    checkPullFactors(\n        or(and(aRef, bRef),\n            and(cRef, aRef, dRef, aRef)),\n        \"AND(?0.a, OR(?0.b, AND(?0.c, ?0.d)))\");\n\n    checkPullFactors(aRef, \"?0.a\");\n    checkPullFactors(trueLiteral, \"true\");\n    checkPullFactors(falseLiteral, \"false\");\n    checkPullFactors(nullBool, \"null:BOOLEAN\");\n    checkPullFactors(and(aRef, bRef), \"AND(?0.a, ?0.b)\");\n    checkPullFactors(and(aRef, bRef, cRef), \"AND(?0.a, ?0.b, ?0.c)\");\n\n    checkPullFactorsUnchanged(and(or(aRef, bRef), or(cRef, dRef)));\n    checkPullFactorsUnchanged(or(and(aRef, bRef), and(cRef, dRef)));\n    \r\n    checkPullFactors(or(and(aRef, bRef), or(cRef, dRef)),\n        \"OR(AND(?0.a, ?0.b), ?0.c, ?0.d)\");\n\n    checkPullFactorsUnchanged(or(aRef, not(and(bRef, not(hEqSeven)))));\n    checkPullFactorsUnchanged(not(or(aRef, not(bRef))));\n    checkPullFactorsUnchanged(\n        not(or(and(aRef, trueLiteral), not(bRef), falseLiteral)));\n    checkPullFactorsUnchanged(and(aRef, or(bRef, and(cRef, dRef))));\n\n    checkPullFactorsUnchanged(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef, and(eRef, or(fRef, gRef)))))));\n\n    checkPullFactorsUnchanged(\n        and(aRef,\n            or(bRef,\n                and(cRef,\n                    or(dRef,\n                        and(eRef,\n                            or(fRef,\n                               and(gRef, or(trueLiteral, falseLiteral)))))))));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":733,"status":"M"}],"commitId":"dc7bcc550caa5232b51200640c208769fb22787c","commitMessage":"@@@Refactor\n\nIn RexProgramTest.  construct literals when needed.  rather than caching in variables.\n\nThe word 'comparison' is mis-spelled in a few places.\n\nDeprecate RelReferentialConstraint.getNumColumns().\n\nChange TableFunctionScanFactory argument from RexNode to RexCall.\n","date":"2020-08-21 04:50:33","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"}]
