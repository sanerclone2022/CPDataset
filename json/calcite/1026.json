[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testContains() {\n    Employee e = emps[1];\n    Employee employeeClone = new Employee(e.empno, e.name, e.deptno);\n    Employee employeeOther = badEmps[0];\n\n    assertEquals(e, employeeClone);\n    assertTrue(Linq4j.asEnumerable(emps).contains(e));\n    assertTrue(Linq4j.asEnumerable(emps).contains(employeeClone));\n    assertFalse(Linq4j.asEnumerable(emps).contains(employeeOther));\n\n  }\n","date":"2014-11-14 09:39:34","endLine":368,"groupId":"7160","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testContains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/ce9619e1e3572cbab9672c4293786811c1f2fc.src","preCode":"  @Test public void testContains() {\n    Employee e = emps[1];\n    Employee employeeClone = new Employee(e.empno, e.name, e.deptno);\n    Employee employeeOther = badEmps[0];\n\n    assertEquals(e, employeeClone);\n    assertTrue(Linq4j.asEnumerable(emps).contains(e));\n    assertTrue(Linq4j.asEnumerable(emps).contains(employeeClone));\n    assertFalse(Linq4j.asEnumerable(emps).contains(employeeOther));\n\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testContainsWithEqualityComparer() {\n    EqualityComparer<Employee> compareByEmpno =\n            new EqualityComparer<Employee>() {\n        public boolean equal(Employee e1, Employee e2) {\n          return e1 != null && e2 != null\n                  && e1.empno == e2.empno;\n        }\n\n        public int hashCode(Employee t) {\n          return t == null ? 0x789d : t.hashCode();\n        }\n      };\n\n    Employee e = emps[1];\n    Employee employeeClone = new Employee(e.empno, e.name, e.deptno);\n    Employee employeeOther = badEmps[0];\n\n    assertEquals(e, employeeClone);\n    assertTrue(Linq4j.asEnumerable(emps)\n            .contains(e, compareByEmpno));\n    assertTrue(Linq4j.asEnumerable(emps)\n            .contains(employeeClone, compareByEmpno));\n    assertFalse(Linq4j.asEnumerable(emps)\n            .contains(employeeOther, compareByEmpno));\n\n  }\n","date":"2014-11-14 09:39:34","endLine":395,"groupId":"7160","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainsWithEqualityComparer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/ce9619e1e3572cbab9672c4293786811c1f2fc.src","preCode":"  @Test public void testContainsWithEqualityComparer() {\n    EqualityComparer<Employee> compareByEmpno =\n            new EqualityComparer<Employee>() {\n        public boolean equal(Employee e1, Employee e2) {\n          return e1 != null && e2 != null\n                  && e1.empno == e2.empno;\n        }\n\n        public int hashCode(Employee t) {\n          return t == null ? 0x789d : t.hashCode();\n        }\n      };\n\n    Employee e = emps[1];\n    Employee employeeClone = new Employee(e.empno, e.name, e.deptno);\n    Employee employeeOther = badEmps[0];\n\n    assertEquals(e, employeeClone);\n    assertTrue(Linq4j.asEnumerable(emps)\n            .contains(e, compareByEmpno));\n    assertTrue(Linq4j.asEnumerable(emps)\n            .contains(employeeClone, compareByEmpno));\n    assertFalse(Linq4j.asEnumerable(emps)\n            .contains(employeeOther, compareByEmpno));\n\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testContains() {\n    Employee e = emps[1];\n    Employee employeeClone = new Employee(e.empno, e.name, e.deptno);\n    Employee employeeOther = badEmps[0];\n\n    assertEquals(e, employeeClone);\n    assertTrue(Linq4j.asEnumerable(emps).contains(e));\n    assertTrue(Linq4j.asEnumerable(emps).contains(employeeClone));\n    assertFalse(Linq4j.asEnumerable(emps).contains(employeeOther));\n\n  }\n","date":"2020-04-06 04:57:49","endLine":359,"groupId":"1026","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testContains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/176b0c20dace781059f888f45af815a228f4c7.src","preCode":"  @Test public void testContains() {\n    Employee e = emps[1];\n    Employee employeeClone = new Employee(e.empno, e.name, e.deptno);\n    Employee employeeOther = badEmps[0];\n\n    assertEquals(e, employeeClone);\n    assertTrue(Linq4j.asEnumerable(emps).contains(e));\n    assertTrue(Linq4j.asEnumerable(emps).contains(employeeClone));\n    assertFalse(Linq4j.asEnumerable(emps).contains(employeeOther));\n\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testContainsWithEqualityComparer() {\n    EqualityComparer<Employee> compareByEmpno =\n        new EqualityComparer<Employee>() {\n          public boolean equal(Employee e1, Employee e2) {\n            return e1 != null && e2 != null\n                && e1.empno == e2.empno;\n          }\n\n          public int hashCode(Employee t) {\n            return t == null ? 0x789d : t.hashCode();\n          }\n        };\n\n    Employee e = emps[1];\n    Employee employeeClone = new Employee(e.empno, e.name, e.deptno);\n    Employee employeeOther = badEmps[0];\n\n    assertEquals(e, employeeClone);\n    assertTrue(Linq4j.asEnumerable(emps)\n        .contains(e, compareByEmpno));\n    assertTrue(Linq4j.asEnumerable(emps)\n        .contains(employeeClone, compareByEmpno));\n    assertFalse(Linq4j.asEnumerable(emps)\n        .contains(employeeOther, compareByEmpno));\n\n  }\n","date":"2020-04-06 04:57:49","endLine":386,"groupId":"1026","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testContainsWithEqualityComparer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/176b0c20dace781059f888f45af815a228f4c7.src","preCode":"  @Test public void testContainsWithEqualityComparer() {\n    EqualityComparer<Employee> compareByEmpno =\n        new EqualityComparer<Employee>() {\n          public boolean equal(Employee e1, Employee e2) {\n            return e1 != null && e2 != null\n                && e1.empno == e2.empno;\n          }\n\n          public int hashCode(Employee t) {\n            return t == null ? 0x789d : t.hashCode();\n          }\n        };\n\n    Employee e = emps[1];\n    Employee employeeClone = new Employee(e.empno, e.name, e.deptno);\n    Employee employeeOther = badEmps[0];\n\n    assertEquals(e, employeeClone);\n    assertTrue(Linq4j.asEnumerable(emps)\n        .contains(e, compareByEmpno));\n    assertTrue(Linq4j.asEnumerable(emps)\n        .contains(employeeClone, compareByEmpno));\n    assertFalse(Linq4j.asEnumerable(emps)\n        .contains(employeeOther, compareByEmpno));\n\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
