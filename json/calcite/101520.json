[{"authorTime":"2019-04-12 15:11:30","codes":[{"authorDate":"2019-04-12 15:11:30","commitOrder":1,"curCode":"  @Test public void removeSortOverEnumerableHashJoin() throws Exception {\n    RuleSet prepareRules =\n        RuleSets.ofList(\n            SortProjectTransposeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_JOIN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE);\n    for (String joinType : Arrays.asList(\"left\", \"right\", \"full\", \"inner\")) {\n      String sql =\n          \"select e.\\\"deptno\\\" from \\\"hr\\\".\\\"emps\\\" e \"\n              + joinType + \" join \\\"hr\\\".\\\"depts\\\" d \"\n              + \" on e.\\\"deptno\\\" = d.\\\"deptno\\\" \"\n              + \"order by e.\\\"empid\\\" \";\n      RelNode actualPlan = transform(sql, prepareRules);\n      assertThat(\n          toString(actualPlan),\n          allOf(\n              containsString(\"EnumerableHashJoin\"),\n              not(containsString(\"EnumerableSort\"))));\n    }\n  }\n","date":"2019-05-30 11:27:53","endLine":109,"groupId":"4245","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"removeSortOverEnumerableHashJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d8/01da3a88c5391f06190d3a95a49f41f92c6f78.src","preCode":"  @Test public void removeSortOverEnumerableHashJoin() throws Exception {\n    RuleSet prepareRules =\n        RuleSets.ofList(\n            SortProjectTransposeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_JOIN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE);\n    for (String joinType : Arrays.asList(\"left\", \"right\", \"full\", \"inner\")) {\n      String sql =\n          \"select e.\\\"deptno\\\" from \\\"hr\\\".\\\"emps\\\" e \"\n              + joinType + \" join \\\"hr\\\".\\\"depts\\\" d \"\n              + \" on e.\\\"deptno\\\" = d.\\\"deptno\\\" \"\n              + \"order by e.\\\"empid\\\" \";\n      RelNode actualPlan = transform(sql, prepareRules);\n      assertThat(\n          toString(actualPlan),\n          allOf(\n              containsString(\"EnumerableHashJoin\"),\n              not(containsString(\"EnumerableSort\"))));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/SortRemoveRuleTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"},{"authorDate":"2019-04-12 15:11:30","commitOrder":1,"curCode":"  @Test public void removeSortOverEnumerableNestedLoopJoin() throws Exception {\n    RuleSet prepareRules =\n        RuleSets.ofList(\n            SortProjectTransposeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_JOIN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE);\n    \r\n    \r\n    for (String joinType : Arrays.asList(\"left\", \"right\", \"full\")) {\n      String sql =\n          \"select e.\\\"deptno\\\" from \\\"hr\\\".\\\"emps\\\" e \"\n              + joinType + \" join \\\"hr\\\".\\\"depts\\\" d \"\n              + \" on e.\\\"deptno\\\" > d.\\\"deptno\\\" \"\n              + \"order by e.\\\"empid\\\" \";\n      RelNode actualPlan = transform(sql, prepareRules);\n      assertThat(\n          toString(actualPlan),\n          allOf(\n              containsString(\"EnumerableNestedLoopJoin\"),\n              not(containsString(\"EnumerableSort\"))));\n    }\n  }\n","date":"2019-05-30 11:27:53","endLine":142,"groupId":"4245","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"removeSortOverEnumerableNestedLoopJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d8/01da3a88c5391f06190d3a95a49f41f92c6f78.src","preCode":"  @Test public void removeSortOverEnumerableNestedLoopJoin() throws Exception {\n    RuleSet prepareRules =\n        RuleSets.ofList(\n            SortProjectTransposeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_JOIN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE);\n    \r\n    \r\n    for (String joinType : Arrays.asList(\"left\", \"right\", \"full\")) {\n      String sql =\n          \"select e.\\\"deptno\\\" from \\\"hr\\\".\\\"emps\\\" e \"\n              + joinType + \" join \\\"hr\\\".\\\"depts\\\" d \"\n              + \" on e.\\\"deptno\\\" > d.\\\"deptno\\\" \"\n              + \"order by e.\\\"empid\\\" \";\n      RelNode actualPlan = transform(sql, prepareRules);\n      assertThat(\n          toString(actualPlan),\n          allOf(\n              containsString(\"EnumerableNestedLoopJoin\"),\n              not(containsString(\"EnumerableSort\"))));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/SortRemoveRuleTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"}],"commitId":"48093937ae4db179884d1111fa9d12e978e57e1f","commitMessage":"@@@[CALCITE-2696] Improve design of join-like relational expressions\n\n**Diff**\n- Deprecate SemiJoin.  EnumerableSemiJoin.  SemiJoinType. \nEnumerableSemiJoinRule.  JoinToCorrelateRule#SEMI\n- Add SEMI and ANTI join type to JoinRelType.  add method\nprojectsRight() and isOuterJoin()\n- Correlate use JoinRelType instead of SemiJoinType\n- Rename EnumerableThetaJoin to EnumerableNestedLoopJoin\n- Rename EnumerableJoin to EnumerableHashJoin\n- EnumerableJoinRule converts semi join to EnumerableHashJoin\n(EnumerableSemiJoin's functionality is merged into this rule)\n- Add method isSemiJoin() in Join.java to decide if this join is a semi join\n(comes from SemiJoinRule during decorrelateation). \nthe return value true means the join is a semi join equivalent to\nSemiJoin before this patch.\n- Cache the JoinInfo in Join and use it to get leftKeys and rightKeys. \nmerge SemiJoin#computeSelfCost logic into Join#computeSelfCost\n- For RelBuilder.  removes SemiJoinFactory.  method #semiJoin\nnow returns a LogicalJoin with JoinRelType#SEMI\n- Rename EnumerableDefaults#join to EnumerableDefaults#hashJoin\n- Rename EnumerableDefaults#thetaJoin to EnumerableDefaults#nestedLoopJoin\n\n**Rules tweak**\n- JoinAddRedundantSemiJoinRule now creates LogicalJoin with JoinRelType#SEMI\ninstead of SemiJoin\n- JoinToCorrelateRule deprecates SEMI instance and change the matches\ncondition to !join.getJoinType().generatesNullsOnLeft() which also\nallowed ANTI compared before this patch.\n- SemiJoinRule matches SEMI join specifically.\n\n**Metadata tweak**\n- RelMdAllPredicates.  RelMdExpressionLineage: Add full rowType to\ngetAllPredicates(Join) cause semi join only outputs one side\n- RelMdColumnUniqueness.  RelMdSelectivity.  RelMdDistinctRowCount. \nRelMdSize.  RelMdUniqueKeys: merge semi join logic to join\n\n**Test cases change**\n- MaterializationTest#testJoinMaterialization11 now can materialize\nsuccessfully.  cause i allow logical SemiJoin node to match.  the original\nmatches SemiJoin as SemiJoin.class.isAssignableFrom().  which i think is\nwrong cause this will only matches subClasses of SemiJoin which is only\nEnumerableSemiJoin before this patch.\n- SortRemoveRuleTest#removeSortOverEnumerableCorrelate.  because\nCALCITE-2018.  the final EnumerableSort's cost was cached by the previous\nEnumerableSort with logical children.  so i remove the EnumerableSortRule\nand the best plan is correct\n\nclose apache/calcite#1157\n","date":"2019-05-30 11:27:53","modifiedFileCount":"81","status":"B","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void removeSortOverEnumerableHashJoin() throws Exception {\n    RuleSet prepareRules =\n        RuleSets.ofList(\n            SortProjectTransposeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_JOIN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE);\n    for (String joinType : Arrays.asList(\"left\", \"right\", \"full\", \"inner\")) {\n      String sql =\n          \"select e.\\\"deptno\\\" from \\\"hr\\\".\\\"emps\\\" e \"\n              + joinType + \" join \\\"hr\\\".\\\"depts\\\" d \"\n              + \" on e.\\\"deptno\\\" = d.\\\"deptno\\\" \"\n              + \"order by e.\\\"empid\\\" \";\n      RelNode actualPlan = transform(sql, prepareRules);\n      assertThat(\n          toString(actualPlan),\n          allOf(\n              containsString(\"EnumerableHashJoin\"),\n              not(containsString(\"EnumerableSort\"))));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":109,"groupId":"4245","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"removeSortOverEnumerableHashJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/91/a038c70d959e74ee6ccebc3ba4daa1804a3dea.src","preCode":"  @Test public void removeSortOverEnumerableHashJoin() throws Exception {\n    RuleSet prepareRules =\n        RuleSets.ofList(\n            SortProjectTransposeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_JOIN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE);\n    for (String joinType : Arrays.asList(\"left\", \"right\", \"full\", \"inner\")) {\n      String sql =\n          \"select e.\\\"deptno\\\" from \\\"hr\\\".\\\"emps\\\" e \"\n              + joinType + \" join \\\"hr\\\".\\\"depts\\\" d \"\n              + \" on e.\\\"deptno\\\" = d.\\\"deptno\\\" \"\n              + \"order by e.\\\"empid\\\" \";\n      RelNode actualPlan = transform(sql, prepareRules);\n      assertThat(\n          toString(actualPlan),\n          allOf(\n              containsString(\"EnumerableHashJoin\"),\n              not(containsString(\"EnumerableSort\"))));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/SortRemoveRuleTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void removeSortOverEnumerableNestedLoopJoin() throws Exception {\n    RuleSet prepareRules =\n        RuleSets.ofList(\n            SortProjectTransposeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_JOIN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE);\n    \r\n    \r\n    for (String joinType : Arrays.asList(\"left\", \"right\", \"full\")) {\n      String sql =\n          \"select e.\\\"deptno\\\" from \\\"hr\\\".\\\"emps\\\" e \"\n              + joinType + \" join \\\"hr\\\".\\\"depts\\\" d \"\n              + \" on e.\\\"deptno\\\" > d.\\\"deptno\\\" \"\n              + \"order by e.\\\"empid\\\" \";\n      RelNode actualPlan = transform(sql, prepareRules);\n      assertThat(\n          toString(actualPlan),\n          allOf(\n              containsString(\"EnumerableNestedLoopJoin\"),\n              not(containsString(\"EnumerableSort\"))));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":142,"groupId":"4245","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"removeSortOverEnumerableNestedLoopJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/91/a038c70d959e74ee6ccebc3ba4daa1804a3dea.src","preCode":"  @Test public void removeSortOverEnumerableNestedLoopJoin() throws Exception {\n    RuleSet prepareRules =\n        RuleSets.ofList(\n            SortProjectTransposeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_JOIN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE);\n    \r\n    \r\n    for (String joinType : Arrays.asList(\"left\", \"right\", \"full\")) {\n      String sql =\n          \"select e.\\\"deptno\\\" from \\\"hr\\\".\\\"emps\\\" e \"\n              + joinType + \" join \\\"hr\\\".\\\"depts\\\" d \"\n              + \" on e.\\\"deptno\\\" > d.\\\"deptno\\\" \"\n              + \"order by e.\\\"empid\\\" \";\n      RelNode actualPlan = transform(sql, prepareRules);\n      assertThat(\n          toString(actualPlan),\n          allOf(\n              containsString(\"EnumerableNestedLoopJoin\"),\n              not(containsString(\"EnumerableSort\"))));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/SortRemoveRuleTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 04:45:12","codes":[{"authorDate":"2020-07-09 04:45:12","commitOrder":3,"curCode":"  @Test void removeSortOverEnumerableHashJoin() throws Exception {\n    RuleSet prepareRules =\n        RuleSets.ofList(\n            CoreRules.SORT_PROJECT_TRANSPOSE,\n            EnumerableRules.ENUMERABLE_JOIN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE);\n    for (String joinType : Arrays.asList(\"left\", \"right\", \"full\", \"inner\")) {\n      String sql =\n          \"select e.\\\"deptno\\\" from \\\"hr\\\".\\\"emps\\\" e \"\n              + joinType + \" join \\\"hr\\\".\\\"depts\\\" d \"\n              + \" on e.\\\"deptno\\\" = d.\\\"deptno\\\" \"\n              + \"order by e.\\\"empid\\\" \";\n      RelNode actualPlan = transform(sql, prepareRules);\n      assertThat(\n          toString(actualPlan),\n          allOf(\n              containsString(\"EnumerableHashJoin\"),\n              not(containsString(\"EnumerableSort\"))));\n    }\n  }\n","date":"2020-07-12 06:58:28","endLine":109,"groupId":"101520","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"removeSortOverEnumerableHashJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/5854d3b64e3af860fbc5b1ee81a2d8e111de9a.src","preCode":"  @Test void removeSortOverEnumerableHashJoin() throws Exception {\n    RuleSet prepareRules =\n        RuleSets.ofList(\n            SortProjectTransposeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_JOIN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE);\n    for (String joinType : Arrays.asList(\"left\", \"right\", \"full\", \"inner\")) {\n      String sql =\n          \"select e.\\\"deptno\\\" from \\\"hr\\\".\\\"emps\\\" e \"\n              + joinType + \" join \\\"hr\\\".\\\"depts\\\" d \"\n              + \" on e.\\\"deptno\\\" = d.\\\"deptno\\\" \"\n              + \"order by e.\\\"empid\\\" \";\n      RelNode actualPlan = transform(sql, prepareRules);\n      assertThat(\n          toString(actualPlan),\n          allOf(\n              containsString(\"EnumerableHashJoin\"),\n              not(containsString(\"EnumerableSort\"))));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/SortRemoveRuleTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-07-09 04:45:12","commitOrder":3,"curCode":"  @Test void removeSortOverEnumerableNestedLoopJoin() throws Exception {\n    RuleSet prepareRules =\n        RuleSets.ofList(\n            CoreRules.SORT_PROJECT_TRANSPOSE,\n            EnumerableRules.ENUMERABLE_JOIN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE);\n    \r\n    \r\n    for (String joinType : Arrays.asList(\"left\", \"right\", \"full\")) {\n      String sql =\n          \"select e.\\\"deptno\\\" from \\\"hr\\\".\\\"emps\\\" e \"\n              + joinType + \" join \\\"hr\\\".\\\"depts\\\" d \"\n              + \" on e.\\\"deptno\\\" > d.\\\"deptno\\\" \"\n              + \"order by e.\\\"empid\\\" \";\n      RelNode actualPlan = transform(sql, prepareRules);\n      assertThat(\n          toString(actualPlan),\n          allOf(\n              containsString(\"EnumerableNestedLoopJoin\"),\n              not(containsString(\"EnumerableSort\"))));\n    }\n  }\n","date":"2020-07-12 06:58:28","endLine":142,"groupId":"101520","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"removeSortOverEnumerableNestedLoopJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/5854d3b64e3af860fbc5b1ee81a2d8e111de9a.src","preCode":"  @Test void removeSortOverEnumerableNestedLoopJoin() throws Exception {\n    RuleSet prepareRules =\n        RuleSets.ofList(\n            SortProjectTransposeRule.INSTANCE,\n            EnumerableRules.ENUMERABLE_JOIN_RULE,\n            EnumerableRules.ENUMERABLE_PROJECT_RULE,\n            EnumerableRules.ENUMERABLE_SORT_RULE,\n            EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE);\n    \r\n    \r\n    for (String joinType : Arrays.asList(\"left\", \"right\", \"full\")) {\n      String sql =\n          \"select e.\\\"deptno\\\" from \\\"hr\\\".\\\"emps\\\" e \"\n              + joinType + \" join \\\"hr\\\".\\\"depts\\\" d \"\n              + \" on e.\\\"deptno\\\" > d.\\\"deptno\\\" \"\n              + \"order by e.\\\"empid\\\" \";\n      RelNode actualPlan = transform(sql, prepareRules);\n      assertThat(\n          toString(actualPlan),\n          allOf(\n              containsString(\"EnumerableNestedLoopJoin\"),\n              not(containsString(\"EnumerableSort\"))));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rules/SortRemoveRuleTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"23b26b6287315cc2cd236e705bb651077488fc5c","commitMessage":"@@@In preparation for [CALCITE-3923] and [CALCITE-4079].  deprecate fields and methods that will be removed between 1.24 and 1.25\n\nAlso.  in RelNode.  change some methods from 'to removed before 2.0'\nto 'to be removed before 1.25'. The methods are sDistinct(). \nisKey(ImmutableBitSet).  getQuery().  getRows().  getVariablesStopped(). \ncomputeSelfCost().  isValid(boolean).  getCollationList().  getChildExps().\n","date":"2020-07-12 06:58:28","modifiedFileCount":"137","status":"M","submitter":"Julian Hyde"}]
