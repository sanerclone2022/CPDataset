[{"authorTime":"2017-03-30 10:55:19","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"    public SqlNode visit(SqlLiteral literal) {\n      \r\n      \r\n      \r\n      if (literal == root && getConformance().isSortByOrdinal()) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > aliasList.size()) {\n              throw newValidationError(\n                  literal, RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return nthSelectItem(ordinal, literal.getParserPosition());\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","date":"2014-11-14 09:39:34","endLine":4087,"groupId":"177","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"visit","params":"(SqlLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/1ccf694b0fa39fe974ed5163c5f3d6b0ceb7c9.src","preCode":"    public SqlNode visit(SqlLiteral literal) {\n      \r\n      \r\n      \r\n      if (literal == root && getConformance().isSortByOrdinal()) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > aliasList.size()) {\n              throw newValidationError(\n                  literal, RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return nthSelectItem(ordinal, literal.getParserPosition());\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4063,"status":"NB"},{"authorDate":"2017-03-30 10:55:19","commitOrder":2,"curCode":"    public SqlNode visit(SqlLiteral literal) {\n      if (havingExpr || !validator.getConformance().isGroupByOrdinal()) {\n        return super.visit(literal);\n      }\n      boolean isOrdinalLiteral = literal == root;\n      switch (root.getKind()) {\n      case GROUPING_SETS:\n      case ROLLUP:\n      case CUBE:\n        if (root instanceof SqlBasicCall) {\n          List<SqlNode> operandList = ((SqlBasicCall) root).getOperandList();\n          for (SqlNode node : operandList) {\n            if (node.equals(literal)) {\n              isOrdinalLiteral = true;\n              break;\n            }\n          }\n        }\n        break;\n      }\n      if (isOrdinalLiteral) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > select.getSelectList().size()) {\n              throw validator.newValidationError(literal,\n                  RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return select.getSelectList().get(ordinal);\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","date":"2017-05-10 07:24:25","endLine":5367,"groupId":"2267","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"visit","params":"(SqlLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/49/9cdc9577fd9d555818621f025ff401ac59b55e.src","preCode":"    public SqlNode visit(SqlLiteral literal) {\n      if (havingExpr || !validator.getConformance().isGroupByOrdinal()) {\n        return super.visit(literal);\n      }\n      boolean isOrdinalLiteral = literal == root;\n      switch (root.getKind()) {\n      case GROUPING_SETS:\n      case ROLLUP:\n      case CUBE:\n        if (root instanceof SqlBasicCall) {\n          List<SqlNode> operandList = ((SqlBasicCall) root).getOperandList();\n          for (SqlNode node : operandList) {\n            if (node.equals(literal)) {\n              isOrdinalLiteral = true;\n              break;\n            }\n          }\n        }\n        break;\n      }\n      if (isOrdinalLiteral) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > select.getSelectList().size()) {\n              throw validator.newValidationError(literal,\n                  RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return select.getSelectList().get(ordinal);\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5327,"status":"B"}],"commitId":"e046be23d7364e16648ade5240ad948a04cc814b","commitMessage":"@@@[CALCITE-1306] Allow GROUP BY and HAVING to reference SELECT expressions by ordinal and alias (Rajeshbabu Chintaguntla)\n\nClose apache/calcite#413\n","date":"2017-05-10 07:24:25","modifiedFileCount":"9","status":"M","submitter":"Rajeshbabu Chintaguntla"},{"authorTime":"2017-07-06 02:08:52","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":3,"curCode":"    public SqlNode visit(SqlLiteral literal) {\n      \r\n      \r\n      \r\n      if (literal == root && getConformance().isSortByOrdinal()) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > aliasList.size()) {\n              throw newValidationError(\n                  literal, RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return nthSelectItem(ordinal, literal.getParserPosition());\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","date":"2014-11-14 09:39:34","endLine":4087,"groupId":"177","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"visit","params":"(SqlLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/1ccf694b0fa39fe974ed5163c5f3d6b0ceb7c9.src","preCode":"    public SqlNode visit(SqlLiteral literal) {\n      \r\n      \r\n      \r\n      if (literal == root && getConformance().isSortByOrdinal()) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > aliasList.size()) {\n              throw newValidationError(\n                  literal, RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return nthSelectItem(ordinal, literal.getParserPosition());\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4063,"status":"N"},{"authorDate":"2017-07-06 02:08:52","commitOrder":3,"curCode":"    public SqlNode visit(SqlLiteral literal) {\n      if (havingExpr || !validator.getConformance().isGroupByOrdinal()) {\n        return super.visit(literal);\n      }\n      boolean isOrdinalLiteral = literal == root;\n      switch (root.getKind()) {\n      case GROUPING_SETS:\n      case ROLLUP:\n      case CUBE:\n        if (root instanceof SqlBasicCall) {\n          List<SqlNode> operandList = ((SqlBasicCall) root).getOperandList();\n          for (SqlNode node : operandList) {\n            if (node.equals(literal)) {\n              isOrdinalLiteral = true;\n              break;\n            }\n          }\n        }\n        break;\n      }\n      if (isOrdinalLiteral) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > select.getSelectList().size()) {\n              throw validator.newValidationError(literal,\n                  RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return SqlUtil.stripAs(select.getSelectList().get(ordinal));\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","date":"2017-07-07 02:24:37","endLine":5425,"groupId":"2267","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"visit","params":"(SqlLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/2f379c472ef5fe0b207cfe13b7334954a5bf8b.src","preCode":"    public SqlNode visit(SqlLiteral literal) {\n      if (havingExpr || !validator.getConformance().isGroupByOrdinal()) {\n        return super.visit(literal);\n      }\n      boolean isOrdinalLiteral = literal == root;\n      switch (root.getKind()) {\n      case GROUPING_SETS:\n      case ROLLUP:\n      case CUBE:\n        if (root instanceof SqlBasicCall) {\n          List<SqlNode> operandList = ((SqlBasicCall) root).getOperandList();\n          for (SqlNode node : operandList) {\n            if (node.equals(literal)) {\n              isOrdinalLiteral = true;\n              break;\n            }\n          }\n        }\n        break;\n      }\n      if (isOrdinalLiteral) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > select.getSelectList().size()) {\n              throw validator.newValidationError(literal,\n                  RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return select.getSelectList().get(ordinal);\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5385,"status":"M"}],"commitId":"d4ab1e508b47e4e168296ad701742e879f05c571","commitMessage":"@@@[CALCITE-1873] In a \"GROUP BY ordinal\" query.  validator gives invalid \"Expression is not being grouped\" error if column has alias\n\nThe solution is to ignore column aliases when validating a \"GROUP BY\nordinal\" query. Otherwise.  you get an error like \"Expression 'EMP.EMPNO'\nis not being grouped\" (see test case).\n\nClose apache/calcite#490\n","date":"2017-07-07 02:24:37","modifiedFileCount":"2","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-04-09 10:56:51","codes":[{"authorDate":"2020-04-09 10:56:51","commitOrder":4,"curCode":"    public SqlNode visit(SqlLiteral literal) {\n      \r\n      \r\n      \r\n      if (literal == root && config.sqlConformance().isSortByOrdinal()) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > aliasList.size()) {\n              throw newValidationError(\n                  literal, RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return nthSelectItem(ordinal, literal.getParserPosition());\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","date":"2020-04-10 10:56:43","endLine":6082,"groupId":"177","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"visit","params":"(SqlLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/d167c03775fea3cd77b47aa3d8ea8bbf278247.src","preCode":"    public SqlNode visit(SqlLiteral literal) {\n      \r\n      \r\n      \r\n      if (literal == root && getConformance().isSortByOrdinal()) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > aliasList.size()) {\n              throw newValidationError(\n                  literal, RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return nthSelectItem(ordinal, literal.getParserPosition());\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6058,"status":"M"},{"authorDate":"2020-04-09 10:56:51","commitOrder":4,"curCode":"    public SqlNode visit(SqlLiteral literal) {\n      if (havingExpr || !validator.config().sqlConformance().isGroupByOrdinal()) {\n        return super.visit(literal);\n      }\n      boolean isOrdinalLiteral = literal == root;\n      switch (root.getKind()) {\n      case GROUPING_SETS:\n      case ROLLUP:\n      case CUBE:\n        if (root instanceof SqlBasicCall) {\n          List<SqlNode> operandList = ((SqlBasicCall) root).getOperandList();\n          for (SqlNode node : operandList) {\n            if (node.equals(literal)) {\n              isOrdinalLiteral = true;\n              break;\n            }\n          }\n        }\n        break;\n      }\n      if (isOrdinalLiteral) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > select.getSelectList().size()) {\n              throw validator.newValidationError(literal,\n                  RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return SqlUtil.stripAs(select.getSelectList().get(ordinal));\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","date":"2020-04-10 10:56:43","endLine":6265,"groupId":"2267","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"visit","params":"(SqlLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/d167c03775fea3cd77b47aa3d8ea8bbf278247.src","preCode":"    public SqlNode visit(SqlLiteral literal) {\n      if (havingExpr || !validator.getConformance().isGroupByOrdinal()) {\n        return super.visit(literal);\n      }\n      boolean isOrdinalLiteral = literal == root;\n      switch (root.getKind()) {\n      case GROUPING_SETS:\n      case ROLLUP:\n      case CUBE:\n        if (root instanceof SqlBasicCall) {\n          List<SqlNode> operandList = ((SqlBasicCall) root).getOperandList();\n          for (SqlNode node : operandList) {\n            if (node.equals(literal)) {\n              isOrdinalLiteral = true;\n              break;\n            }\n          }\n        }\n        break;\n      }\n      if (isOrdinalLiteral) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > select.getSelectList().size()) {\n              throw validator.newValidationError(literal,\n                  RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return SqlUtil.stripAs(select.getSelectList().get(ordinal));\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6225,"status":"M"}],"commitId":"4e9870078fcaa7da9e475c94f43309cc3244fa22","commitMessage":"@@@[CALCITE-3900] Add Config for SqlValidator\n\nThe SqlValidator now has 7 setXXX methods for all kinds of control flags. \nwhich is hard for code evolving.\n\nThere is also no way to config these things through the FrameworkConfig.\n\nAdd a SqlValidator.Config to solve these problems.\n","date":"2020-04-10 10:56:43","modifiedFileCount":"33","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":5,"curCode":"    @Override public SqlNode visit(SqlLiteral literal) {\n      \r\n      \r\n      \r\n      if (literal == root && config.sqlConformance().isSortByOrdinal()) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > aliasList.size()) {\n              throw newValidationError(\n                  literal, RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return nthSelectItem(ordinal, literal.getParserPosition());\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","date":"2020-10-07 05:42:47","endLine":6102,"groupId":"177","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"visit","params":"(SqlLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/e2f640194abdd8d51f339bd04507320c8175bc.src","preCode":"    public SqlNode visit(SqlLiteral literal) {\n      \r\n      \r\n      \r\n      if (literal == root && config.sqlConformance().isSortByOrdinal()) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > aliasList.size()) {\n              throw newValidationError(\n                  literal, RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return nthSelectItem(ordinal, literal.getParserPosition());\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6078,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":5,"curCode":"    @Override public SqlNode visit(SqlLiteral literal) {\n      if (havingExpr || !validator.config().sqlConformance().isGroupByOrdinal()) {\n        return super.visit(literal);\n      }\n      boolean isOrdinalLiteral = literal == root;\n      switch (root.getKind()) {\n      case GROUPING_SETS:\n      case ROLLUP:\n      case CUBE:\n        if (root instanceof SqlBasicCall) {\n          List<SqlNode> operandList = ((SqlBasicCall) root).getOperandList();\n          for (SqlNode node : operandList) {\n            if (node.equals(literal)) {\n              isOrdinalLiteral = true;\n              break;\n            }\n          }\n        }\n        break;\n      }\n      if (isOrdinalLiteral) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > select.getSelectList().size()) {\n              throw validator.newValidationError(literal,\n                  RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return SqlUtil.stripAs(select.getSelectList().get(ordinal));\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","date":"2020-10-07 05:42:47","endLine":6285,"groupId":"2267","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"visit","params":"(SqlLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/e2f640194abdd8d51f339bd04507320c8175bc.src","preCode":"    public SqlNode visit(SqlLiteral literal) {\n      if (havingExpr || !validator.config().sqlConformance().isGroupByOrdinal()) {\n        return super.visit(literal);\n      }\n      boolean isOrdinalLiteral = literal == root;\n      switch (root.getKind()) {\n      case GROUPING_SETS:\n      case ROLLUP:\n      case CUBE:\n        if (root instanceof SqlBasicCall) {\n          List<SqlNode> operandList = ((SqlBasicCall) root).getOperandList();\n          for (SqlNode node : operandList) {\n            if (node.equals(literal)) {\n              isOrdinalLiteral = true;\n              break;\n            }\n          }\n        }\n        break;\n      }\n      if (isOrdinalLiteral) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > select.getSelectList().size()) {\n              throw validator.newValidationError(literal,\n                  RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return SqlUtil.stripAs(select.getSelectList().get(ordinal));\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6245,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-09-30 01:31:14","codes":[{"authorDate":"2020-09-30 01:31:14","commitOrder":6,"curCode":"    @Override public SqlNode visit(SqlLiteral literal) {\n      \r\n      \r\n      \r\n      if (literal == root && config.sqlConformance().isSortByOrdinal()) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > aliasList.size()) {\n              throw newValidationError(\n                  literal, RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return nthSelectItem(ordinal, literal.getParserPosition());\n          }\n          break;\n        default:\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","date":"2020-10-07 05:43:06","endLine":6145,"groupId":"177","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"visit","params":"(SqlLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ba/35baf461f699f55223d34ebf43fdea7b1d4e54.src","preCode":"    @Override public SqlNode visit(SqlLiteral literal) {\n      \r\n      \r\n      \r\n      if (literal == root && config.sqlConformance().isSortByOrdinal()) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > aliasList.size()) {\n              throw newValidationError(\n                  literal, RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return nthSelectItem(ordinal, literal.getParserPosition());\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6119,"status":"M"},{"authorDate":"2020-09-30 01:31:14","commitOrder":6,"curCode":"    @Override public SqlNode visit(SqlLiteral literal) {\n      if (havingExpr || !validator.config().sqlConformance().isGroupByOrdinal()) {\n        return super.visit(literal);\n      }\n      boolean isOrdinalLiteral = literal == root;\n      switch (root.getKind()) {\n      case GROUPING_SETS:\n      case ROLLUP:\n      case CUBE:\n        if (root instanceof SqlBasicCall) {\n          List<SqlNode> operandList = ((SqlBasicCall) root).getOperandList();\n          for (SqlNode node : operandList) {\n            if (node.equals(literal)) {\n              isOrdinalLiteral = true;\n              break;\n            }\n          }\n        }\n        break;\n      default:\n        break;\n      }\n      if (isOrdinalLiteral) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > select.getSelectList().size()) {\n              throw validator.newValidationError(literal,\n                  RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return SqlUtil.stripAs(select.getSelectList().get(ordinal));\n          }\n          break;\n        default:\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","date":"2020-10-07 05:43:06","endLine":6332,"groupId":"13123","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"visit","params":"(SqlLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ba/35baf461f699f55223d34ebf43fdea7b1d4e54.src","preCode":"    @Override public SqlNode visit(SqlLiteral literal) {\n      if (havingExpr || !validator.config().sqlConformance().isGroupByOrdinal()) {\n        return super.visit(literal);\n      }\n      boolean isOrdinalLiteral = literal == root;\n      switch (root.getKind()) {\n      case GROUPING_SETS:\n      case ROLLUP:\n      case CUBE:\n        if (root instanceof SqlBasicCall) {\n          List<SqlNode> operandList = ((SqlBasicCall) root).getOperandList();\n          for (SqlNode node : operandList) {\n            if (node.equals(literal)) {\n              isOrdinalLiteral = true;\n              break;\n            }\n          }\n        }\n        break;\n      }\n      if (isOrdinalLiteral) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > select.getSelectList().size()) {\n              throw validator.newValidationError(literal,\n                  RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return SqlUtil.stripAs(select.getSelectList().get(ordinal));\n          }\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6288,"status":"M"}],"commitId":"1b94f37e888cf2d186362473529e6c147afe0f6e","commitMessage":"@@@[CALCITE-4314] Add missing default branches to switch statement\n\nNote: the changes are mechanical.\nThe intention is to keep the previous behavior and prevent adding new\nnon exchaustive switch statements in the future.\n\nSee https://errorprone.info/bugpattern/MissingCasesInEnumSwitch\n","date":"2020-10-07 05:43:06","modifiedFileCount":"98","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":7,"curCode":"    @Override public @Nullable SqlNode visit(SqlLiteral literal) {\n      \r\n      \r\n      \r\n      if (literal == root && config.sqlConformance().isSortByOrdinal()) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > aliasList.size()) {\n              throw newValidationError(\n                  literal, RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return nthSelectItem(ordinal, literal.getParserPosition());\n          }\n          break;\n        default:\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","date":"2020-11-30 06:45:33","endLine":6304,"groupId":"111858","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"visit","params":"(SqlLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/42/8f1d3a3f0cf3ef4a3ecc26bac058934422699c.src","preCode":"    @Override public SqlNode visit(SqlLiteral literal) {\n      \r\n      \r\n      \r\n      if (literal == root && config.sqlConformance().isSortByOrdinal()) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > aliasList.size()) {\n              throw newValidationError(\n                  literal, RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return nthSelectItem(ordinal, literal.getParserPosition());\n          }\n          break;\n        default:\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6278,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":7,"curCode":"    @Override public @Nullable SqlNode visit(SqlLiteral literal) {\n      if (havingExpr || !validator.config().sqlConformance().isGroupByOrdinal()) {\n        return super.visit(literal);\n      }\n      boolean isOrdinalLiteral = literal == root;\n      switch (root.getKind()) {\n      case GROUPING_SETS:\n      case ROLLUP:\n      case CUBE:\n        if (root instanceof SqlBasicCall) {\n          List<SqlNode> operandList = ((SqlBasicCall) root).getOperandList();\n          for (SqlNode node : operandList) {\n            if (node.equals(literal)) {\n              isOrdinalLiteral = true;\n              break;\n            }\n          }\n        }\n        break;\n      default:\n        break;\n      }\n      if (isOrdinalLiteral) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > SqlNonNullableAccessors.getSelectList(select).size()) {\n              throw validator.newValidationError(literal,\n                  RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return SqlUtil.stripAs(SqlNonNullableAccessors.getSelectList(select).get(ordinal));\n          }\n          break;\n        default:\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","date":"2020-11-30 06:45:33","endLine":6491,"groupId":"111858","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"visit","params":"(SqlLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/42/8f1d3a3f0cf3ef4a3ecc26bac058934422699c.src","preCode":"    @Override public SqlNode visit(SqlLiteral literal) {\n      if (havingExpr || !validator.config().sqlConformance().isGroupByOrdinal()) {\n        return super.visit(literal);\n      }\n      boolean isOrdinalLiteral = literal == root;\n      switch (root.getKind()) {\n      case GROUPING_SETS:\n      case ROLLUP:\n      case CUBE:\n        if (root instanceof SqlBasicCall) {\n          List<SqlNode> operandList = ((SqlBasicCall) root).getOperandList();\n          for (SqlNode node : operandList) {\n            if (node.equals(literal)) {\n              isOrdinalLiteral = true;\n              break;\n            }\n          }\n        }\n        break;\n      default:\n        break;\n      }\n      if (isOrdinalLiteral) {\n        switch (literal.getTypeName()) {\n        case DECIMAL:\n        case DOUBLE:\n          final int intValue = literal.intValue(false);\n          if (intValue >= 0) {\n            if (intValue < 1 || intValue > select.getSelectList().size()) {\n              throw validator.newValidationError(literal,\n                  RESOURCE.orderByOrdinalOutOfRange());\n            }\n\n            \r\n            int ordinal = intValue - 1;\n            return SqlUtil.stripAs(select.getSelectList().get(ordinal));\n          }\n          break;\n        default:\n          break;\n        }\n      }\n\n      return super.visit(literal);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6447,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
