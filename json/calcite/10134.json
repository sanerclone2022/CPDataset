[{"authorTime":"2020-06-19 17:00:52","codes":[{"authorDate":"2020-06-19 17:00:52","commitOrder":1,"curCode":"    private boolean advanceLeft(TSource left, TKey leftKey) {\n      lefts.clear();\n      lefts.add(left);\n      while (getLeftEnumerator().moveNext()) {\n        left = getLeftEnumerator().current();\n        TKey leftKey2 = outerKeySelector.apply(left);\n        if (leftKey2 == null) {\n          \r\n          \r\n          break;\n        }\n        int c = compare(leftKey, leftKey2);\n        if (c != 0) {\n          if (c > 0) {\n            throw new IllegalStateException(\n                \"mergeJoin assumes inputs sorted in ascending order, \" + \"however '\"\n                    + leftKey + \"' is greater than '\" + leftKey2 + \"'\");\n          }\n          return true;\n        }\n        lefts.add(left);\n      }\n      return false;\n    }\n","date":"2020-07-08 23:23:49","endLine":4238,"groupId":"10269","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"advanceLeft","params":"(TSourceleft@TKeyleftKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/9282c0eee4df6ce2ed749d51cb0c10014f05b1.src","preCode":"    private boolean advanceLeft(TSource left, TKey leftKey) {\n      lefts.clear();\n      lefts.add(left);\n      while (getLeftEnumerator().moveNext()) {\n        left = getLeftEnumerator().current();\n        TKey leftKey2 = outerKeySelector.apply(left);\n        if (leftKey2 == null) {\n          \r\n          \r\n          break;\n        }\n        int c = compare(leftKey, leftKey2);\n        if (c != 0) {\n          if (c > 0) {\n            throw new IllegalStateException(\n                \"mergeJoin assumes inputs sorted in ascending order, \" + \"however '\"\n                    + leftKey + \"' is greater than '\" + leftKey2 + \"'\");\n          }\n          return true;\n        }\n        lefts.add(left);\n      }\n      return false;\n    }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4215,"status":"B"},{"authorDate":"2020-06-19 17:00:52","commitOrder":1,"curCode":"    private boolean advanceRight(TInner right, TKey rightKey) {\n      rights.clear();\n      rights.add(right);\n      while (getRightEnumerator().moveNext()) {\n        right = getRightEnumerator().current();\n        TKey rightKey2 = innerKeySelector.apply(right);\n        if (rightKey2 == null) {\n          \r\n          \r\n          break;\n        }\n        int c = compare(rightKey, rightKey2);\n        if (c != 0) {\n          if (c > 0) {\n            throw new IllegalStateException(\n                \"mergeJoin assumes input sorted in ascending order, \" + \"however '\"\n                    + rightKey + \"' is greater than '\" + rightKey2 + \"'\");\n          }\n          return true;\n        }\n        rights.add(right);\n      }\n      return false;\n    }\n","date":"2020-07-08 23:23:49","endLine":4270,"groupId":"10269","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"advanceRight","params":"(TInnerright@TKeyrightKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/9282c0eee4df6ce2ed749d51cb0c10014f05b1.src","preCode":"    private boolean advanceRight(TInner right, TKey rightKey) {\n      rights.clear();\n      rights.add(right);\n      while (getRightEnumerator().moveNext()) {\n        right = getRightEnumerator().current();\n        TKey rightKey2 = innerKeySelector.apply(right);\n        if (rightKey2 == null) {\n          \r\n          \r\n          break;\n        }\n        int c = compare(rightKey, rightKey2);\n        if (c != 0) {\n          if (c > 0) {\n            throw new IllegalStateException(\n                \"mergeJoin assumes input sorted in ascending order, \" + \"however '\"\n                    + rightKey + \"' is greater than '\" + rightKey2 + \"'\");\n          }\n          return true;\n        }\n        rights.add(right);\n      }\n      return false;\n    }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4247,"status":"B"}],"commitId":"95e40f40023d687893cd17b4753cb3ea257853ed","commitMessage":"@@@[CALCITE-3834] Support AntiJoin in EnumerableMergeJoin\n","date":"2020-07-08 23:23:49","modifiedFileCount":"3","status":"B","submitter":"rubenada"},{"authorTime":"2020-06-19 17:00:52","codes":[{"authorDate":"2020-08-13 00:14:57","commitOrder":2,"curCode":"    private boolean advanceLeft(TSource left, TKey leftKey) {\n      lefts.clear();\n      lefts.add(left);\n      while (getLeftEnumerator().moveNext()) {\n        left = getLeftEnumerator().current();\n        TKey leftKey2 = outerKeySelector.apply(left);\n        if (leftKey2 == null && joinType != JoinType.LEFT) {\n          \r\n          \r\n          break;\n        }\n        int c = compare(leftKey, leftKey2);\n        if (c != 0) {\n          if (c > 0) {\n            throw new IllegalStateException(\n                \"mergeJoin assumes inputs sorted in ascending order, \" + \"however '\"\n                    + leftKey + \"' is greater than '\" + leftKey2 + \"'\");\n          }\n          return true;\n        }\n        lefts.add(left);\n      }\n      return false;\n    }\n","date":"2020-08-24 17:17:05","endLine":4245,"groupId":"10134","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"advanceLeft","params":"(TSourceleft@TKeyleftKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/51/2130d1b75b241c26d368512f4f0af26ea3f1df.src","preCode":"    private boolean advanceLeft(TSource left, TKey leftKey) {\n      lefts.clear();\n      lefts.add(left);\n      while (getLeftEnumerator().moveNext()) {\n        left = getLeftEnumerator().current();\n        TKey leftKey2 = outerKeySelector.apply(left);\n        if (leftKey2 == null) {\n          \r\n          \r\n          break;\n        }\n        int c = compare(leftKey, leftKey2);\n        if (c != 0) {\n          if (c > 0) {\n            throw new IllegalStateException(\n                \"mergeJoin assumes inputs sorted in ascending order, \" + \"however '\"\n                    + leftKey + \"' is greater than '\" + leftKey2 + \"'\");\n          }\n          return true;\n        }\n        lefts.add(left);\n      }\n      return false;\n    }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4222,"status":"M"},{"authorDate":"2020-06-19 17:00:52","commitOrder":2,"curCode":"    private boolean advanceRight(TInner right, TKey rightKey) {\n      rights.clear();\n      rights.add(right);\n      while (getRightEnumerator().moveNext()) {\n        right = getRightEnumerator().current();\n        TKey rightKey2 = innerKeySelector.apply(right);\n        if (rightKey2 == null) {\n          \r\n          \r\n          break;\n        }\n        int c = compare(rightKey, rightKey2);\n        if (c != 0) {\n          if (c > 0) {\n            throw new IllegalStateException(\n                \"mergeJoin assumes input sorted in ascending order, \" + \"however '\"\n                    + rightKey + \"' is greater than '\" + rightKey2 + \"'\");\n          }\n          return true;\n        }\n        rights.add(right);\n      }\n      return false;\n    }\n","date":"2020-07-08 23:23:49","endLine":4270,"groupId":"10134","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"advanceRight","params":"(TInnerright@TKeyrightKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/9282c0eee4df6ce2ed749d51cb0c10014f05b1.src","preCode":"    private boolean advanceRight(TInner right, TKey rightKey) {\n      rights.clear();\n      rights.add(right);\n      while (getRightEnumerator().moveNext()) {\n        right = getRightEnumerator().current();\n        TKey rightKey2 = innerKeySelector.apply(right);\n        if (rightKey2 == null) {\n          \r\n          \r\n          break;\n        }\n        int c = compare(rightKey, rightKey2);\n        if (c != 0) {\n          if (c > 0) {\n            throw new IllegalStateException(\n                \"mergeJoin assumes input sorted in ascending order, \" + \"however '\"\n                    + rightKey + \"' is greater than '\" + rightKey2 + \"'\");\n          }\n          return true;\n        }\n        rights.add(right);\n      }\n      return false;\n    }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4247,"status":"N"}],"commitId":"672ed7a1d0dbf87760d37e52b424f16bc8c43b4d","commitMessage":"@@@[CALCITE-4113] Support LEFT join in EnumerableMergeJoin\n","date":"2020-08-24 17:17:05","modifiedFileCount":"5","status":"M","submitter":"rubenada"}]
