[{"authorTime":"2015-02-22 10:10:32","codes":[{"authorDate":"2015-02-22 10:10:32","commitOrder":2,"curCode":"  @Override public void unparse(SqlWriter writer, SqlCall call, int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    if (call.operandCount() == 2) {\n      call.operand(0).unparse(writer, 0, 100);\n      writer.sep(\"TO\");\n      call.operand(1).unparse(writer, 100, 0);\n    } else {\n      call.operand(0).unparse(writer, 0, 0);\n    }\n    writer.endFunCall(frame);\n  }\n","date":"2015-03-08 07:33:21","endLine":69,"groupId":"9561","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e9/d147fa44434ab70d80deabaaa48e2eb2cf4cf3.src","preCode":"  @Override public void unparse(SqlWriter writer, SqlCall call, int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    if (call.operandCount() == 2) {\n      call.operand(0).unparse(writer, 0, 100);\n      writer.sep(\"TO\");\n      call.operand(1).unparse(writer, 100, 0);\n    } else {\n      call.operand(0).unparse(writer, 0, 0);\n    }\n    writer.endFunCall(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2015-02-22 10:10:32","commitOrder":2,"curCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    call.operand(0).unparse(writer, 0, 0);\n    writer.sep(\"FROM\");\n    call.operand(1).unparse(writer, 0, 0);\n    writer.endFunCall(frame);\n  }\n","date":"2015-03-08 07:33:21","endLine":66,"groupId":"16328","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1e/870c33f54c9669b5df7a3084365255b6fc7a16.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    call.operand(0).unparse(writer, 0, 0);\n    writer.sep(\"FROM\");\n    call.operand(1).unparse(writer, 0, 0);\n    writer.endFunCall(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlExtractFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"MB"}],"commitId":"0ecd8702ab95fd59b7ef2182720d12b2167ae968","commitMessage":"@@@[CALCITE-602] Streaming queries\n\nValidate and implement streaming queries: streaming scan.  project.  filter.  aggregate.  sort.\n\nImplement CEIL and FLOOR functions for date-time and numeric values.\n\nAdd CompositeSingleOperandTypeChecker.  and make CompositeOperandTypeChecker work for multiple operands.\n","date":"2015-03-08 07:33:21","modifiedFileCount":"46","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2015-02-22 10:10:32","commitOrder":3,"curCode":"  @Override public void unparse(SqlWriter writer, SqlCall call, int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    if (call.operandCount() == 2) {\n      call.operand(0).unparse(writer, 0, 100);\n      writer.sep(\"TO\");\n      call.operand(1).unparse(writer, 100, 0);\n    } else {\n      call.operand(0).unparse(writer, 0, 0);\n    }\n    writer.endFunCall(frame);\n  }\n","date":"2015-03-08 07:33:21","endLine":69,"groupId":"101781","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e9/d147fa44434ab70d80deabaaa48e2eb2cf4cf3.src","preCode":"  @Override public void unparse(SqlWriter writer, SqlCall call, int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    if (call.operandCount() == 2) {\n      call.operand(0).unparse(writer, 0, 100);\n      writer.sep(\"TO\");\n      call.operand(1).unparse(writer, 100, 0);\n    } else {\n      call.operand(0).unparse(writer, 0, 0);\n    }\n    writer.endFunCall(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"N"},{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  @Override public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    call.operand(0).unparse(writer, 0, 0);\n    writer.sep(\"FROM\");\n    call.operand(1).unparse(writer, 0, 0);\n    writer.endFunCall(frame);\n  }\n","date":"2020-10-07 05:42:47","endLine":65,"groupId":"101781","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/80f5d0e4c1d1ca9eecffb707899eb72090788f.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    call.operand(0).unparse(writer, 0, 0);\n    writer.sep(\"FROM\");\n    call.operand(1).unparse(writer, 0, 0);\n    writer.endFunCall(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlExtractFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
