[{"authorTime":"2019-10-28 08:41:07","codes":[{"authorDate":"2018-11-14 06:00:17","commitOrder":4,"curCode":"  public Set<RelTableRef> getTableReferences(Join rel, RelMetadataQuery mq) {\n    final RelNode leftInput = rel.getLeft();\n    final RelNode rightInput = rel.getRight();\n    final Set<RelTableRef> result = new HashSet<>();\n\n    \r\n    final Multimap<List<String>, RelTableRef> leftQualifiedNamesToRefs = HashMultimap.create();\n    final Set<RelTableRef> leftTableRefs = mq.getTableReferences(leftInput);\n    if (leftTableRefs == null) {\n      \r\n      return null;\n    }\n    for (RelTableRef leftRef : leftTableRefs) {\n      assert !result.contains(leftRef);\n      result.add(leftRef);\n      leftQualifiedNamesToRefs.put(leftRef.getQualifiedName(), leftRef);\n    }\n\n    \r\n    \r\n    final Set<RelTableRef> rightTableRefs = mq.getTableReferences(rightInput);\n    if (rightTableRefs == null) {\n      \r\n      return null;\n    }\n    for (RelTableRef rightRef : rightTableRefs) {\n      int shift = 0;\n      Collection<RelTableRef> lRefs = leftQualifiedNamesToRefs.get(rightRef.getQualifiedName());\n      if (lRefs != null) {\n        shift = lRefs.size();\n      }\n      RelTableRef shiftTableRef = RelTableRef.of(\n          rightRef.getTable(), shift + rightRef.getEntityNumber());\n      assert !result.contains(shiftTableRef);\n      result.add(shiftTableRef);\n    }\n\n    \r\n    return result;\n  }\n","date":"2018-11-14 06:45:06","endLine":143,"groupId":"16240","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getTableReferences","params":"(Joinrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6e/4f1536912daf70d77fb2dba75d5816edb8c9b6.src","preCode":"  public Set<RelTableRef> getTableReferences(Join rel, RelMetadataQuery mq) {\n    final RelNode leftInput = rel.getLeft();\n    final RelNode rightInput = rel.getRight();\n    final Set<RelTableRef> result = new HashSet<>();\n\n    \r\n    final Multimap<List<String>, RelTableRef> leftQualifiedNamesToRefs = HashMultimap.create();\n    final Set<RelTableRef> leftTableRefs = mq.getTableReferences(leftInput);\n    if (leftTableRefs == null) {\n      \r\n      return null;\n    }\n    for (RelTableRef leftRef : leftTableRefs) {\n      assert !result.contains(leftRef);\n      result.add(leftRef);\n      leftQualifiedNamesToRefs.put(leftRef.getQualifiedName(), leftRef);\n    }\n\n    \r\n    \r\n    final Set<RelTableRef> rightTableRefs = mq.getTableReferences(rightInput);\n    if (rightTableRefs == null) {\n      \r\n      return null;\n    }\n    for (RelTableRef rightRef : rightTableRefs) {\n      int shift = 0;\n      Collection<RelTableRef> lRefs = leftQualifiedNamesToRefs.get(rightRef.getQualifiedName());\n      if (lRefs != null) {\n        shift = lRefs.size();\n      }\n      RelTableRef shiftTableRef = RelTableRef.of(\n          rightRef.getTable(), shift + rightRef.getEntityNumber());\n      assert !result.contains(shiftTableRef);\n      result.add(shiftTableRef);\n    }\n\n    \r\n    return result;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"NB"},{"authorDate":"2019-10-28 08:41:07","commitOrder":4,"curCode":"  public Set<RelTableRef> getTableReferences(SetOp rel, RelMetadataQuery mq) {\n    final Set<RelTableRef> result = new HashSet<>();\n\n    \r\n    final Multimap<List<String>, RelTableRef> qualifiedNamesToRefs = HashMultimap.create();\n    for (RelNode input : rel.getInputs()) {\n      final Map<RelTableRef, RelTableRef> currentTablesMapping = new HashMap<>();\n      final Set<RelTableRef> inputTableRefs = mq.getTableReferences(input);\n      if (inputTableRefs == null) {\n        \r\n        return null;\n      }\n      for (RelTableRef tableRef : inputTableRefs) {\n        int shift = 0;\n        Collection<RelTableRef> lRefs = qualifiedNamesToRefs.get(\n            tableRef.getQualifiedName());\n        if (lRefs != null) {\n          shift = lRefs.size();\n        }\n        RelTableRef shiftTableRef = RelTableRef.of(\n            tableRef.getTable(), shift + tableRef.getEntityNumber());\n        assert !result.contains(shiftTableRef);\n        result.add(shiftTableRef);\n        currentTablesMapping.put(tableRef, shiftTableRef);\n      }\n      \r\n      for (RelTableRef newRef : currentTablesMapping.values()) {\n        qualifiedNamesToRefs.put(newRef.getQualifiedName(), newRef);\n      }\n    }\n\n    \r\n    return result;\n  }\n","date":"2019-11-25 09:52:44","endLine":187,"groupId":"16821","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getTableReferences","params":"(SetOprel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/c81e8a201548ae293ae5dd7619a11b88280d0c.src","preCode":"  public Set<RelTableRef> getTableReferences(SetOp rel, RelMetadataQuery mq) {\n    final Set<RelTableRef> result = new HashSet<>();\n\n    \r\n    final Multimap<List<String>, RelTableRef> qualifiedNamesToRefs = HashMultimap.create();\n    for (RelNode input : rel.getInputs()) {\n      final Map<RelTableRef, RelTableRef> currentTablesMapping = new HashMap<>();\n      final Set<RelTableRef> inputTableRefs = mq.getTableReferences(input);\n      if (inputTableRefs == null) {\n        \r\n        return null;\n      }\n      for (RelTableRef tableRef : inputTableRefs) {\n        int shift = 0;\n        Collection<RelTableRef> lRefs = qualifiedNamesToRefs.get(\n            tableRef.getQualifiedName());\n        if (lRefs != null) {\n          shift = lRefs.size();\n        }\n        RelTableRef shiftTableRef = RelTableRef.of(\n            tableRef.getTable(), shift + tableRef.getEntityNumber());\n        assert !result.contains(shiftTableRef);\n        result.add(shiftTableRef);\n        currentTablesMapping.put(tableRef, shiftTableRef);\n      }\n      \r\n      for (RelTableRef newRef : currentTablesMapping.values()) {\n        qualifiedNamesToRefs.put(newRef.getQualifiedName(), newRef);\n      }\n    }\n\n    \r\n    return result;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"}],"commitId":"a3c8a1b3c70f3aee0fbfe7de0997743d997877bd","commitMessage":"@@@[CALCITE-3454] Support Exchange.  SetOp and TableModify for builtin\nmetadata query (xy2953396112)\n\nclose apache/calcite#1552\n","date":"2019-11-25 09:52:44","modifiedFileCount":"18","status":"M","submitter":"dz"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  public @Nullable Set<RelTableRef> getTableReferences(Join rel, RelMetadataQuery mq) {\n    final RelNode leftInput = rel.getLeft();\n    final RelNode rightInput = rel.getRight();\n    final Set<RelTableRef> result = new HashSet<>();\n\n    \r\n    final Multimap<List<String>, RelTableRef> leftQualifiedNamesToRefs = HashMultimap.create();\n    final Set<RelTableRef> leftTableRefs = mq.getTableReferences(leftInput);\n    if (leftTableRefs == null) {\n      \r\n      return null;\n    }\n    for (RelTableRef leftRef : leftTableRefs) {\n      assert !result.contains(leftRef);\n      result.add(leftRef);\n      leftQualifiedNamesToRefs.put(leftRef.getQualifiedName(), leftRef);\n    }\n\n    \r\n    \r\n    final Set<RelTableRef> rightTableRefs = mq.getTableReferences(rightInput);\n    if (rightTableRefs == null) {\n      \r\n      return null;\n    }\n    for (RelTableRef rightRef : rightTableRefs) {\n      int shift = 0;\n      Collection<RelTableRef> lRefs = leftQualifiedNamesToRefs.get(rightRef.getQualifiedName());\n      if (lRefs != null) {\n        shift = lRefs.size();\n      }\n      RelTableRef shiftTableRef = RelTableRef.of(\n          rightRef.getTable(), shift + rightRef.getEntityNumber());\n      assert !result.contains(shiftTableRef);\n      result.add(shiftTableRef);\n    }\n\n    \r\n    return result;\n  }\n","date":"2020-11-30 06:45:33","endLine":153,"groupId":"111936","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getTableReferences","params":"(Joinrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3f/5718b856af5ae76de9abd19bbd572d8bfec6eb.src","preCode":"  public Set<RelTableRef> getTableReferences(Join rel, RelMetadataQuery mq) {\n    final RelNode leftInput = rel.getLeft();\n    final RelNode rightInput = rel.getRight();\n    final Set<RelTableRef> result = new HashSet<>();\n\n    \r\n    final Multimap<List<String>, RelTableRef> leftQualifiedNamesToRefs = HashMultimap.create();\n    final Set<RelTableRef> leftTableRefs = mq.getTableReferences(leftInput);\n    if (leftTableRefs == null) {\n      \r\n      return null;\n    }\n    for (RelTableRef leftRef : leftTableRefs) {\n      assert !result.contains(leftRef);\n      result.add(leftRef);\n      leftQualifiedNamesToRefs.put(leftRef.getQualifiedName(), leftRef);\n    }\n\n    \r\n    \r\n    final Set<RelTableRef> rightTableRefs = mq.getTableReferences(rightInput);\n    if (rightTableRefs == null) {\n      \r\n      return null;\n    }\n    for (RelTableRef rightRef : rightTableRefs) {\n      int shift = 0;\n      Collection<RelTableRef> lRefs = leftQualifiedNamesToRefs.get(rightRef.getQualifiedName());\n      if (lRefs != null) {\n        shift = lRefs.size();\n      }\n      RelTableRef shiftTableRef = RelTableRef.of(\n          rightRef.getTable(), shift + rightRef.getEntityNumber());\n      assert !result.contains(shiftTableRef);\n      result.add(shiftTableRef);\n    }\n\n    \r\n    return result;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  public @Nullable Set<RelTableRef> getTableReferences(SetOp rel, RelMetadataQuery mq) {\n    final Set<RelTableRef> result = new HashSet<>();\n\n    \r\n    final Multimap<List<String>, RelTableRef> qualifiedNamesToRefs = HashMultimap.create();\n    for (RelNode input : rel.getInputs()) {\n      final Map<RelTableRef, RelTableRef> currentTablesMapping = new HashMap<>();\n      final Set<RelTableRef> inputTableRefs = mq.getTableReferences(input);\n      if (inputTableRefs == null) {\n        \r\n        return null;\n      }\n      for (RelTableRef tableRef : inputTableRefs) {\n        int shift = 0;\n        Collection<RelTableRef> lRefs = qualifiedNamesToRefs.get(\n            tableRef.getQualifiedName());\n        if (lRefs != null) {\n          shift = lRefs.size();\n        }\n        RelTableRef shiftTableRef = RelTableRef.of(\n            tableRef.getTable(), shift + tableRef.getEntityNumber());\n        assert !result.contains(shiftTableRef);\n        result.add(shiftTableRef);\n        currentTablesMapping.put(tableRef, shiftTableRef);\n      }\n      \r\n      for (RelTableRef newRef : currentTablesMapping.values()) {\n        qualifiedNamesToRefs.put(newRef.getQualifiedName(), newRef);\n      }\n    }\n\n    \r\n    return result;\n  }\n","date":"2020-11-30 06:45:33","endLine":194,"groupId":"111936","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getTableReferences","params":"(SetOprel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3f/5718b856af5ae76de9abd19bbd572d8bfec6eb.src","preCode":"  public Set<RelTableRef> getTableReferences(SetOp rel, RelMetadataQuery mq) {\n    final Set<RelTableRef> result = new HashSet<>();\n\n    \r\n    final Multimap<List<String>, RelTableRef> qualifiedNamesToRefs = HashMultimap.create();\n    for (RelNode input : rel.getInputs()) {\n      final Map<RelTableRef, RelTableRef> currentTablesMapping = new HashMap<>();\n      final Set<RelTableRef> inputTableRefs = mq.getTableReferences(input);\n      if (inputTableRefs == null) {\n        \r\n        return null;\n      }\n      for (RelTableRef tableRef : inputTableRefs) {\n        int shift = 0;\n        Collection<RelTableRef> lRefs = qualifiedNamesToRefs.get(\n            tableRef.getQualifiedName());\n        if (lRefs != null) {\n          shift = lRefs.size();\n        }\n        RelTableRef shiftTableRef = RelTableRef.of(\n            tableRef.getTable(), shift + tableRef.getEntityNumber());\n        assert !result.contains(shiftTableRef);\n        result.add(shiftTableRef);\n        currentTablesMapping.put(tableRef, shiftTableRef);\n      }\n      \r\n      for (RelTableRef newRef : currentTablesMapping.values()) {\n        qualifiedNamesToRefs.put(newRef.getQualifiedName(), newRef);\n      }\n    }\n\n    \r\n    return result;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
