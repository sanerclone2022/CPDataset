[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testTakeWhileN() {\n    final Queryable<Department> queryableDepts =\n        Linq4j.asEnumerable(depts).asQueryable();\n    Predicate2<Department, Integer> function2 =\n        new Predicate2<Department, Integer>() {\n          int index = 0;\n          public boolean apply(Department v1, Integer v2) {\n            \r\n            assertEquals(\n                \"Invalid index passed to function\", index++, (int) v2);\n            return v2 < 2;\n          }\n        };\n\n    final List<Department> deptList =\n        QueryableDefaults.takeWhileN(\n            queryableDepts, Expressions.lambda(function2))\n            .toList();\n\n    assertEquals(2, deptList.size());\n    assertEquals(depts[0], deptList.get(0));\n    assertEquals(depts[1], deptList.get(1));\n  }\n","date":"2014-11-14 09:39:34","endLine":1236,"groupId":"2832","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTakeWhileN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/ce9619e1e3572cbab9672c4293786811c1f2fc.src","preCode":"  @Test public void testTakeWhileN() {\n    final Queryable<Department> queryableDepts =\n        Linq4j.asEnumerable(depts).asQueryable();\n    Predicate2<Department, Integer> function2 =\n        new Predicate2<Department, Integer>() {\n          int index = 0;\n          public boolean apply(Department v1, Integer v2) {\n            \r\n            assertEquals(\n                \"Invalid index passed to function\", index++, (int) v2);\n            return v2 < 2;\n          }\n        };\n\n    final List<Department> deptList =\n        QueryableDefaults.takeWhileN(\n            queryableDepts, Expressions.lambda(function2))\n            .toList();\n\n    assertEquals(2, deptList.size());\n    assertEquals(depts[0], deptList.get(0));\n    assertEquals(depts[1], deptList.get(1));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1214,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testTakeWhileNNoMatch() {\n    final Queryable<Department> queryableDepts =\n        Linq4j.asEnumerable(depts).asQueryable();\n    Predicate2<Department, Integer> function2 = Functions.falsePredicate2();\n    final List<Department> deptList =\n        QueryableDefaults.takeWhileN(\n            queryableDepts,\n            Expressions.lambda(function2))\n            .toList();\n\n    assertEquals(0, deptList.size());\n  }\n","date":"2014-11-14 09:39:34","endLine":1249,"groupId":"10708","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTakeWhileNNoMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/ce9619e1e3572cbab9672c4293786811c1f2fc.src","preCode":"  @Test public void testTakeWhileNNoMatch() {\n    final Queryable<Department> queryableDepts =\n        Linq4j.asEnumerable(depts).asQueryable();\n    Predicate2<Department, Integer> function2 = Functions.falsePredicate2();\n    final List<Department> deptList =\n        QueryableDefaults.takeWhileN(\n            queryableDepts,\n            Expressions.lambda(function2))\n            .toList();\n\n    assertEquals(0, deptList.size());\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1238,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2019-12-03 04:09:18","commitOrder":2,"curCode":"  @Test public void testTakeWhileN() {\n    final Queryable<Department> queryableDepts =\n        Linq4j.asEnumerable(depts).asQueryable();\n    Predicate2<Department, Integer> function2 =\n        new Predicate2<Department, Integer>() {\n          int index = 0;\n          public boolean apply(Department v1, Integer v2) {\n            \r\n            assertEquals(index++, (int) v2, \"Invalid index passed to function\");\n            return v2 < 2;\n          }\n        };\n\n    final List<Department> deptList =\n        QueryableDefaults.takeWhileN(\n            queryableDepts, Expressions.lambda(function2))\n            .toList();\n\n    assertEquals(2, deptList.size());\n    assertEquals(depts[0], deptList.get(0));\n    assertEquals(depts[1], deptList.get(1));\n  }\n","date":"2019-12-04 03:17:33","endLine":1380,"groupId":"10775","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTakeWhileN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3b/fbd24f6ac642f7e3b5b8aafc56ac587e179539.src","preCode":"  @Test public void testTakeWhileN() {\n    final Queryable<Department> queryableDepts =\n        Linq4j.asEnumerable(depts).asQueryable();\n    Predicate2<Department, Integer> function2 =\n        new Predicate2<Department, Integer>() {\n          int index = 0;\n          public boolean apply(Department v1, Integer v2) {\n            \r\n            assertEquals(\n                \"Invalid index passed to function\", index++, (int) v2);\n            return v2 < 2;\n          }\n        };\n\n    final List<Department> deptList =\n        QueryableDefaults.takeWhileN(\n            queryableDepts, Expressions.lambda(function2))\n            .toList();\n\n    assertEquals(2, deptList.size());\n    assertEquals(depts[0], deptList.get(0));\n    assertEquals(depts[1], deptList.get(1));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1359,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testTakeWhileNNoMatch() {\n    final Queryable<Department> queryableDepts =\n        Linq4j.asEnumerable(depts).asQueryable();\n    Predicate2<Department, Integer> function2 = Functions.falsePredicate2();\n    final List<Department> deptList =\n        QueryableDefaults.takeWhileN(\n            queryableDepts,\n            Expressions.lambda(function2))\n            .toList();\n\n    assertEquals(0, deptList.size());\n  }\n","date":"2014-11-14 09:39:34","endLine":1249,"groupId":"10708","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTakeWhileNNoMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/ce9619e1e3572cbab9672c4293786811c1f2fc.src","preCode":"  @Test public void testTakeWhileNNoMatch() {\n    final Queryable<Department> queryableDepts =\n        Linq4j.asEnumerable(depts).asQueryable();\n    Predicate2<Department, Integer> function2 = Functions.falsePredicate2();\n    final List<Department> deptList =\n        QueryableDefaults.takeWhileN(\n            queryableDepts,\n            Expressions.lambda(function2))\n            .toList();\n\n    assertEquals(0, deptList.size());\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1238,"status":"N"}],"commitId":"60d27ee3162acead99f2510e36d7591add78e5a6","commitMessage":"@@@[CALCITE-2457] JUnit 4 -> 5: trivial renames\n","date":"2019-12-04 03:17:33","modifiedFileCount":"177","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testTakeWhileN() {\n    final Queryable<Department> queryableDepts =\n        Linq4j.asEnumerable(depts).asQueryable();\n    Predicate2<Department, Integer> function2 =\n        new Predicate2<Department, Integer>() {\n          int index = 0;\n          public boolean apply(Department v1, Integer v2) {\n            \r\n            assertEquals(index++, (int) v2, \"Invalid index passed to function\");\n            return v2 < 2;\n          }\n        };\n\n    final List<Department> deptList =\n        QueryableDefaults.takeWhileN(\n            queryableDepts, Expressions.lambda(function2))\n            .toList();\n\n    assertEquals(2, deptList.size());\n    assertEquals(depts[0], deptList.get(0));\n    assertEquals(depts[1], deptList.get(1));\n  }\n","date":"2020-04-06 04:57:49","endLine":1411,"groupId":"1057","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testTakeWhileN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/176b0c20dace781059f888f45af815a228f4c7.src","preCode":"  @Test public void testTakeWhileN() {\n    final Queryable<Department> queryableDepts =\n        Linq4j.asEnumerable(depts).asQueryable();\n    Predicate2<Department, Integer> function2 =\n        new Predicate2<Department, Integer>() {\n          int index = 0;\n          public boolean apply(Department v1, Integer v2) {\n            \r\n            assertEquals(index++, (int) v2, \"Invalid index passed to function\");\n            return v2 < 2;\n          }\n        };\n\n    final List<Department> deptList =\n        QueryableDefaults.takeWhileN(\n            queryableDepts, Expressions.lambda(function2))\n            .toList();\n\n    assertEquals(2, deptList.size());\n    assertEquals(depts[0], deptList.get(0));\n    assertEquals(depts[1], deptList.get(1));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1390,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testTakeWhileNNoMatch() {\n    final Queryable<Department> queryableDepts =\n        Linq4j.asEnumerable(depts).asQueryable();\n    Predicate2<Department, Integer> function2 = Functions.falsePredicate2();\n    final List<Department> deptList =\n        QueryableDefaults.takeWhileN(\n            queryableDepts,\n            Expressions.lambda(function2))\n            .toList();\n\n    assertEquals(0, deptList.size());\n  }\n","date":"2020-04-06 04:57:49","endLine":1424,"groupId":"1057","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testTakeWhileNNoMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/176b0c20dace781059f888f45af815a228f4c7.src","preCode":"  @Test public void testTakeWhileNNoMatch() {\n    final Queryable<Department> queryableDepts =\n        Linq4j.asEnumerable(depts).asQueryable();\n    Predicate2<Department, Integer> function2 = Functions.falsePredicate2();\n    final List<Department> deptList =\n        QueryableDefaults.takeWhileN(\n            queryableDepts,\n            Expressions.lambda(function2))\n            .toList();\n\n    assertEquals(0, deptList.size());\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1413,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
