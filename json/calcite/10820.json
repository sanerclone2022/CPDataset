[{"authorTime":"2020-03-08 13:35:38","codes":[{"authorDate":"2020-03-08 13:35:38","commitOrder":1,"curCode":"  @Test public void testEveryFunc() {\n    tester.setFor(SqlStdOperatorTable.EVERY, VM_EXPAND);\n    tester.checkFails(\n        \"every(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"every(1 = 1)\", \"BOOLEAN\");\n    tester.checkType(\"every(1.2 = 1.2)\", \"BOOLEAN\");\n    tester.checkType(\"every(1.5 = 1.4)\", \"BOOLEAN\");\n    tester.checkFails(\n        \"^every()^\",\n        \"Invalid number of arguments to function 'EVERY'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^every(1, 2)^\",\n        \"Invalid number of arguments to function 'EVERY'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"every(x = 2)\",\n        values,\n        \"false\",\n        0d);\n  }\n","date":"2020-03-14 19:10:54","endLine":8919,"groupId":"16022","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEveryFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8a/d9f303e4a0f3210481b2be08578dc3740aff4d.src","preCode":"  @Test public void testEveryFunc() {\n    tester.setFor(SqlStdOperatorTable.EVERY, VM_EXPAND);\n    tester.checkFails(\n        \"every(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"every(1 = 1)\", \"BOOLEAN\");\n    tester.checkType(\"every(1.2 = 1.2)\", \"BOOLEAN\");\n    tester.checkType(\"every(1.5 = 1.4)\", \"BOOLEAN\");\n    tester.checkFails(\n        \"^every()^\",\n        \"Invalid number of arguments to function 'EVERY'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^every(1, 2)^\",\n        \"Invalid number of arguments to function 'EVERY'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"every(x = 2)\",\n        values,\n        \"false\",\n        0d);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8893,"status":"B"},{"authorDate":"2020-03-08 13:35:38","commitOrder":1,"curCode":"  @Test public void testSomeAggFunc() {\n    tester.setFor(SqlStdOperatorTable.SOME, VM_EXPAND);\n    tester.checkFails(\n        \"some(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"some(1 = 1)\", \"BOOLEAN\");\n    tester.checkType(\"some(1.2 = 1.2)\", \"BOOLEAN\");\n    tester.checkType(\"some(1.5 = 1.4)\", \"BOOLEAN\");\n    tester.checkFails(\n        \"^some()^\",\n        \"Invalid number of arguments to function 'SOME'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^some(1, 2)^\",\n        \"Invalid number of arguments to function 'SOME'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"some(x = 2)\",\n        values,\n        \"true\",\n        0d);\n  }\n","date":"2020-03-14 19:10:54","endLine":8947,"groupId":"16022","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSomeAggFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8a/d9f303e4a0f3210481b2be08578dc3740aff4d.src","preCode":"  @Test public void testSomeAggFunc() {\n    tester.setFor(SqlStdOperatorTable.SOME, VM_EXPAND);\n    tester.checkFails(\n        \"some(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"some(1 = 1)\", \"BOOLEAN\");\n    tester.checkType(\"some(1.2 = 1.2)\", \"BOOLEAN\");\n    tester.checkType(\"some(1.5 = 1.4)\", \"BOOLEAN\");\n    tester.checkFails(\n        \"^some()^\",\n        \"Invalid number of arguments to function 'SOME'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^some(1, 2)^\",\n        \"Invalid number of arguments to function 'SOME'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"some(x = 2)\",\n        values,\n        \"true\",\n        0d);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8921,"status":"B"}],"commitId":"f11115a2fe9e360f38910f112288581040e0ced5","commitMessage":"@@@[CALCITE-3815] Add missing SQL standard aggregate functions: EVERY.  SOME.  INTERSECTION\n","date":"2020-03-14 19:10:54","modifiedFileCount":"10","status":"B","submitter":"Hanumath Maduri"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testEveryFunc() {\n    tester.setFor(SqlStdOperatorTable.EVERY, VM_EXPAND);\n    tester.checkFails(\n        \"every(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"every(1 = 1)\", \"BOOLEAN\");\n    tester.checkType(\"every(1.2 = 1.2)\", \"BOOLEAN\");\n    tester.checkType(\"every(1.5 = 1.4)\", \"BOOLEAN\");\n    tester.checkFails(\n        \"^every()^\",\n        \"Invalid number of arguments to function 'EVERY'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^every(1, 2)^\",\n        \"Invalid number of arguments to function 'EVERY'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"every(x = 2)\",\n        values,\n        \"false\",\n        0d);\n  }\n","date":"2020-04-06 04:57:49","endLine":8996,"groupId":"16022","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEveryFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testEveryFunc() {\n    tester.setFor(SqlStdOperatorTable.EVERY, VM_EXPAND);\n    tester.checkFails(\n        \"every(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"every(1 = 1)\", \"BOOLEAN\");\n    tester.checkType(\"every(1.2 = 1.2)\", \"BOOLEAN\");\n    tester.checkType(\"every(1.5 = 1.4)\", \"BOOLEAN\");\n    tester.checkFails(\n        \"^every()^\",\n        \"Invalid number of arguments to function 'EVERY'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^every(1, 2)^\",\n        \"Invalid number of arguments to function 'EVERY'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"every(x = 2)\",\n        values,\n        \"false\",\n        0d);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8970,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSomeAggFunc() {\n    tester.setFor(SqlStdOperatorTable.SOME, VM_EXPAND);\n    tester.checkFails(\n        \"some(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"some(1 = 1)\", \"BOOLEAN\");\n    tester.checkType(\"some(1.2 = 1.2)\", \"BOOLEAN\");\n    tester.checkType(\"some(1.5 = 1.4)\", \"BOOLEAN\");\n    tester.checkFails(\n        \"^some()^\",\n        \"Invalid number of arguments to function 'SOME'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^some(1, 2)^\",\n        \"Invalid number of arguments to function 'SOME'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"some(x = 2)\",\n        values,\n        \"true\",\n        0d);\n  }\n","date":"2020-04-06 04:57:49","endLine":9024,"groupId":"16022","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSomeAggFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testSomeAggFunc() {\n    tester.setFor(SqlStdOperatorTable.SOME, VM_EXPAND);\n    tester.checkFails(\n        \"some(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"some(1 = 1)\", \"BOOLEAN\");\n    tester.checkType(\"some(1.2 = 1.2)\", \"BOOLEAN\");\n    tester.checkType(\"some(1.5 = 1.4)\", \"BOOLEAN\");\n    tester.checkFails(\n        \"^some()^\",\n        \"Invalid number of arguments to function 'SOME'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^some(1, 2)^\",\n        \"Invalid number of arguments to function 'SOME'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"some(x = 2)\",\n        values,\n        \"true\",\n        0d);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8998,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-10-20 13:55:40","codes":[{"authorDate":"2020-10-20 13:55:40","commitOrder":3,"curCode":"  @Test void testEveryFunc() {\n    tester.setFor(SqlStdOperatorTable.EVERY, VM_EXPAND);\n    tester.checkFails(\n        \"every(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"every(1 = 1)\", \"BOOLEAN\");\n    tester.checkType(\"every(1.2 = 1.2)\", \"BOOLEAN\");\n    tester.checkType(\"every(1.5 = 1.4)\", \"BOOLEAN\");\n    tester.checkFails(\n        \"^every()^\",\n        \"Invalid number of arguments to function 'EVERY'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^every(1, 2)^\",\n        \"Invalid number of arguments to function 'EVERY'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    tester.checkAgg(\n        \"every(x = 2)\",\n        values,\n        \"false\",\n        0d);\n  }\n","date":"2020-10-23 05:29:41","endLine":9168,"groupId":"10820","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEveryFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/28de56457f65dd207ff08b2f37dc16482e3cb5.src","preCode":"  @Test void testEveryFunc() {\n    tester.setFor(SqlStdOperatorTable.EVERY, VM_EXPAND);\n    tester.checkFails(\n        \"every(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"every(1 = 1)\", \"BOOLEAN\");\n    tester.checkType(\"every(1.2 = 1.2)\", \"BOOLEAN\");\n    tester.checkType(\"every(1.5 = 1.4)\", \"BOOLEAN\");\n    tester.checkFails(\n        \"^every()^\",\n        \"Invalid number of arguments to function 'EVERY'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^every(1, 2)^\",\n        \"Invalid number of arguments to function 'EVERY'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"every(x = 2)\",\n        values,\n        \"false\",\n        0d);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9145,"status":"M"},{"authorDate":"2020-10-20 13:55:40","commitOrder":3,"curCode":"  @Test void testSomeAggFunc() {\n    tester.setFor(SqlStdOperatorTable.SOME, VM_EXPAND);\n    tester.checkFails(\n        \"some(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"some(1 = 1)\", \"BOOLEAN\");\n    tester.checkType(\"some(1.2 = 1.2)\", \"BOOLEAN\");\n    tester.checkType(\"some(1.5 = 1.4)\", \"BOOLEAN\");\n    tester.checkFails(\n        \"^some()^\",\n        \"Invalid number of arguments to function 'SOME'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^some(1, 2)^\",\n        \"Invalid number of arguments to function 'SOME'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    tester.checkAgg(\n        \"some(x = 2)\",\n        values,\n        \"true\",\n        0d);\n  }\n","date":"2020-10-23 05:29:41","endLine":9193,"groupId":"10820","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSomeAggFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/28de56457f65dd207ff08b2f37dc16482e3cb5.src","preCode":"  @Test void testSomeAggFunc() {\n    tester.setFor(SqlStdOperatorTable.SOME, VM_EXPAND);\n    tester.checkFails(\n        \"some(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"some(1 = 1)\", \"BOOLEAN\");\n    tester.checkType(\"some(1.2 = 1.2)\", \"BOOLEAN\");\n    tester.checkType(\"some(1.5 = 1.4)\", \"BOOLEAN\");\n    tester.checkFails(\n        \"^some()^\",\n        \"Invalid number of arguments to function 'SOME'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^some(1, 2)^\",\n        \"Invalid number of arguments to function 'SOME'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"some(x = 2)\",\n        values,\n        \"true\",\n        0d);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9170,"status":"M"}],"commitId":"3038fb7e87c51740ef733fd4f9bde41b0c25e5b0","commitMessage":"@@@[CALCITE-4335] ARRAY_AGG.  ARRAY_CONCAT_AGG.  STRING_AGG aggregate functions for BigQuery\n","date":"2020-10-23 05:29:41","modifiedFileCount":"24","status":"M","submitter":"Julian Hyde"}]
