[{"authorTime":"2016-11-21 14:12:48","codes":[{"authorDate":"2018-04-26 12:12:04","commitOrder":2,"curCode":"  @Test public void testRow() {\n    check(\n        \"select t.r.\\\"EXPR$1\\\", t.r.\\\"EXPR$0\\\" from (select (1,2) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`, `T`.`R`.`EXPR$0`\\n\"\n            + \"FROM (SELECT (ROW(1, 2)) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5,6)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5, 6)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    \r\n    conformance = SqlConformanceEnum.DEFAULT;\n    final String selectRow = \"select ^row(t1a, t2a)^ from t1\";\n    final String expected = \"SELECT (ROW(`T1A`, `T2A`))\\n\"\n        + \"FROM `T1`\";\n    sql(selectRow).sansCarets().ok(expected);\n    conformance = SqlConformanceEnum.LENIENT;\n    sql(selectRow).sansCarets().ok(expected);\n\n    final String pattern = \"ROW expression encountered in illegal context\";\n    conformance = SqlConformanceEnum.MYSQL_5;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.STRICT_2003;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(selectRow).fails(pattern);\n\n    final String whereRow = \"select 1 from t2 where ^row (x, y)^ < row (a, b)\";\n    final String whereExpected = \"SELECT 1\\n\"\n        + \"FROM `T2`\\n\"\n        + \"WHERE ((ROW(`X`, `Y`)) < (ROW(`A`, `B`)))\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow).sansCarets().ok(whereExpected);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow).fails(pattern);\n\n    final String whereRow2 = \"select 1 from t2 where ^(x, y)^ < (a, b)\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n    if (this instanceof SqlUnParserTest) {\n      \r\n      \r\n      \r\n      return;\n    }\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n  }\n","date":"2018-05-09 08:41:28","endLine":1059,"groupId":"16453","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/9f7626682ebe0d17a72c8d34572bfc685fd111.src","preCode":"  @Test public void testRow() {\n    check(\n        \"select t.r.\\\"EXPR$1\\\", t.r.\\\"EXPR$0\\\" from (select (1,2) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`, `T`.`R`.`EXPR$0`\\n\"\n            + \"FROM (SELECT (ROW(1, 2)) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5,6)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5, 6)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    \r\n    conformance = SqlConformanceEnum.DEFAULT;\n    final String selectRow = \"select ^row(t1a, t2a)^ from t1\";\n    final String expected = \"SELECT (ROW(`T1A`, `T2A`))\\n\"\n        + \"FROM `T1`\";\n    sql(selectRow).sansCarets().ok(expected);\n    conformance = SqlConformanceEnum.LENIENT;\n    sql(selectRow).sansCarets().ok(expected);\n\n    final String pattern = \"ROW expression encountered in illegal context\";\n    conformance = SqlConformanceEnum.MYSQL_5;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.STRICT_2003;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(selectRow).fails(pattern);\n\n    final String whereRow = \"select 1 from t2 where ^row (x, y)^ < row (a, b)\";\n    final String whereExpected = \"SELECT 1\\n\"\n        + \"FROM `T2`\\n\"\n        + \"WHERE ((ROW(`X`, `Y`)) < (ROW(`A`, `B`)))\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow).sansCarets().ok(whereExpected);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow).fails(pattern);\n\n    final String whereRow2 = \"select 1 from t2 where ^(x, y)^ < (a, b)\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n    if (this instanceof SqlUnParserTest) {\n      \r\n      \r\n      \r\n      return;\n    }\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":999,"status":"B"},{"authorDate":"2016-11-21 14:12:48","commitOrder":2,"curCode":"  @Test public void testApply() {\n    final String pattern =\n        \"APPLY operator is not allowed under the current SQL conformance level\";\n    final String sql = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a)\";\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `DEPT`\\n\"\n        + \"CROSS JOIN LATERAL TABLE(`RAMP`(`DEPTNO`)) AS `T` (`A`)\";\n    sql(sql).ok(expected);\n\n    \r\n    conformance = SqlConformanceEnum.ORACLE_10;\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(sql).ok(expected);\n  }\n","date":"2016-11-29 16:37:17","endLine":2079,"groupId":"13051","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testApply","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/79/78872636a355952c4e33c757cb7342dd024af2.src","preCode":"  @Test public void testApply() {\n    final String pattern =\n        \"APPLY operator is not allowed under the current SQL conformance level\";\n    final String sql = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a)\";\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `DEPT`\\n\"\n        + \"CROSS JOIN LATERAL TABLE(`RAMP`(`DEPTNO`)) AS `T` (`A`)\";\n    sql(sql).ok(expected);\n\n    \r\n    conformance = SqlConformanceEnum.ORACLE_10;\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2060,"status":"NB"}],"commitId":"2a4f6c2c7509c94b5eeb89d3925c91828f8ef1e1","commitMessage":"@@@[CALCITE-2276] Allow explicit ROW value constructor in SELECT clause and elsewhere (Danny Chan)\n\nClose apache/calcite#679\n","date":"2018-05-09 08:41:28","modifiedFileCount":"4","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2016-11-21 14:12:48","codes":[{"authorDate":"2018-11-08 20:28:12","commitOrder":3,"curCode":"  @Test public void testRow() {\n    check(\n        \"select t.r.\\\"EXPR$1\\\", t.r.\\\"EXPR$0\\\" from (select (1,2) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`, `T`.`R`.`EXPR$0`\\n\"\n            + \"FROM (SELECT (ROW(1, 2)) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5,6)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5, 6)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    \r\n    conformance = SqlConformanceEnum.DEFAULT;\n    final String selectRow = \"select ^row(t1a, t2a)^ from t1\";\n    final String expected = \"SELECT (ROW(`T1A`, `T2A`))\\n\"\n        + \"FROM `T1`\";\n    sql(selectRow).sansCarets().ok(expected);\n    conformance = SqlConformanceEnum.LENIENT;\n    sql(selectRow).sansCarets().ok(expected);\n\n    final String pattern = \"ROW expression encountered in illegal context\";\n    conformance = SqlConformanceEnum.MYSQL_5;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.STRICT_2003;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(selectRow).fails(pattern);\n\n    final String whereRow = \"select 1 from t2 where ^row (x, y)^ < row (a, b)\";\n    final String whereExpected = \"SELECT 1\\n\"\n        + \"FROM `T2`\\n\"\n        + \"WHERE ((ROW(`X`, `Y`)) < (ROW(`A`, `B`)))\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow).sansCarets().ok(whereExpected);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow).fails(pattern);\n\n    final String whereRow2 = \"select 1 from t2 where ^(x, y)^ < (a, b)\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n\n    \r\n    \r\n    \r\n    assumeFalse(isUnparserTest());\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n  }\n","date":"2018-11-17 12:10:33","endLine":1068,"groupId":"16453","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6d/5d1dd37184e248d964b57f672f7be465019f01.src","preCode":"  @Test public void testRow() {\n    check(\n        \"select t.r.\\\"EXPR$1\\\", t.r.\\\"EXPR$0\\\" from (select (1,2) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`, `T`.`R`.`EXPR$0`\\n\"\n            + \"FROM (SELECT (ROW(1, 2)) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5,6)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5, 6)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    \r\n    conformance = SqlConformanceEnum.DEFAULT;\n    final String selectRow = \"select ^row(t1a, t2a)^ from t1\";\n    final String expected = \"SELECT (ROW(`T1A`, `T2A`))\\n\"\n        + \"FROM `T1`\";\n    sql(selectRow).sansCarets().ok(expected);\n    conformance = SqlConformanceEnum.LENIENT;\n    sql(selectRow).sansCarets().ok(expected);\n\n    final String pattern = \"ROW expression encountered in illegal context\";\n    conformance = SqlConformanceEnum.MYSQL_5;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.STRICT_2003;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(selectRow).fails(pattern);\n\n    final String whereRow = \"select 1 from t2 where ^row (x, y)^ < row (a, b)\";\n    final String whereExpected = \"SELECT 1\\n\"\n        + \"FROM `T2`\\n\"\n        + \"WHERE ((ROW(`X`, `Y`)) < (ROW(`A`, `B`)))\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow).sansCarets().ok(whereExpected);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow).fails(pattern);\n\n    final String whereRow2 = \"select 1 from t2 where ^(x, y)^ < (a, b)\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n    if (this instanceof SqlUnParserTest) {\n      \r\n      \r\n      \r\n      return;\n    }\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1009,"status":"M"},{"authorDate":"2016-11-21 14:12:48","commitOrder":3,"curCode":"  @Test public void testApply() {\n    final String pattern =\n        \"APPLY operator is not allowed under the current SQL conformance level\";\n    final String sql = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a)\";\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `DEPT`\\n\"\n        + \"CROSS JOIN LATERAL TABLE(`RAMP`(`DEPTNO`)) AS `T` (`A`)\";\n    sql(sql).ok(expected);\n\n    \r\n    conformance = SqlConformanceEnum.ORACLE_10;\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(sql).ok(expected);\n  }\n","date":"2016-11-29 16:37:17","endLine":2079,"groupId":"13051","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testApply","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/79/78872636a355952c4e33c757cb7342dd024af2.src","preCode":"  @Test public void testApply() {\n    final String pattern =\n        \"APPLY operator is not allowed under the current SQL conformance level\";\n    final String sql = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a)\";\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `DEPT`\\n\"\n        + \"CROSS JOIN LATERAL TABLE(`RAMP`(`DEPTNO`)) AS `T` (`A`)\";\n    sql(sql).ok(expected);\n\n    \r\n    conformance = SqlConformanceEnum.ORACLE_10;\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2060,"status":"N"}],"commitId":"bd956458f9dd321c3cc90daaf5c13f194b8feb03","commitMessage":"@@@[CALCITE-2663] Add CREATE and DROP FUNCTION (ambition119)\n\nSyntax is similar to Apache Hive's function syntax.\n\nClose apache/calcite#908\nClose apache/calcite#920\nClose apache/calcite#913\n","date":"2018-11-17 12:10:33","modifiedFileCount":"9","status":"M","submitter":"ambition119"},{"authorTime":"2019-06-28 16:01:44","codes":[{"authorDate":"2018-11-08 20:28:12","commitOrder":4,"curCode":"  @Test public void testRow() {\n    check(\n        \"select t.r.\\\"EXPR$1\\\", t.r.\\\"EXPR$0\\\" from (select (1,2) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`, `T`.`R`.`EXPR$0`\\n\"\n            + \"FROM (SELECT (ROW(1, 2)) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5,6)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5, 6)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    \r\n    conformance = SqlConformanceEnum.DEFAULT;\n    final String selectRow = \"select ^row(t1a, t2a)^ from t1\";\n    final String expected = \"SELECT (ROW(`T1A`, `T2A`))\\n\"\n        + \"FROM `T1`\";\n    sql(selectRow).sansCarets().ok(expected);\n    conformance = SqlConformanceEnum.LENIENT;\n    sql(selectRow).sansCarets().ok(expected);\n\n    final String pattern = \"ROW expression encountered in illegal context\";\n    conformance = SqlConformanceEnum.MYSQL_5;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.STRICT_2003;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(selectRow).fails(pattern);\n\n    final String whereRow = \"select 1 from t2 where ^row (x, y)^ < row (a, b)\";\n    final String whereExpected = \"SELECT 1\\n\"\n        + \"FROM `T2`\\n\"\n        + \"WHERE ((ROW(`X`, `Y`)) < (ROW(`A`, `B`)))\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow).sansCarets().ok(whereExpected);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow).fails(pattern);\n\n    final String whereRow2 = \"select 1 from t2 where ^(x, y)^ < (a, b)\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n\n    \r\n    \r\n    \r\n    assumeFalse(isUnparserTest());\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n  }\n","date":"2018-11-17 12:10:33","endLine":1068,"groupId":"16453","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6d/5d1dd37184e248d964b57f672f7be465019f01.src","preCode":"  @Test public void testRow() {\n    check(\n        \"select t.r.\\\"EXPR$1\\\", t.r.\\\"EXPR$0\\\" from (select (1,2) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`, `T`.`R`.`EXPR$0`\\n\"\n            + \"FROM (SELECT (ROW(1, 2)) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5,6)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5, 6)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    \r\n    conformance = SqlConformanceEnum.DEFAULT;\n    final String selectRow = \"select ^row(t1a, t2a)^ from t1\";\n    final String expected = \"SELECT (ROW(`T1A`, `T2A`))\\n\"\n        + \"FROM `T1`\";\n    sql(selectRow).sansCarets().ok(expected);\n    conformance = SqlConformanceEnum.LENIENT;\n    sql(selectRow).sansCarets().ok(expected);\n\n    final String pattern = \"ROW expression encountered in illegal context\";\n    conformance = SqlConformanceEnum.MYSQL_5;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.STRICT_2003;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(selectRow).fails(pattern);\n\n    final String whereRow = \"select 1 from t2 where ^row (x, y)^ < row (a, b)\";\n    final String whereExpected = \"SELECT 1\\n\"\n        + \"FROM `T2`\\n\"\n        + \"WHERE ((ROW(`X`, `Y`)) < (ROW(`A`, `B`)))\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow).sansCarets().ok(whereExpected);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow).fails(pattern);\n\n    final String whereRow2 = \"select 1 from t2 where ^(x, y)^ < (a, b)\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n\n    \r\n    \r\n    \r\n    assumeFalse(isUnparserTest());\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1009,"status":"N"},{"authorDate":"2019-06-28 16:01:44","commitOrder":4,"curCode":"  @Test public void testApply() {\n    final String pattern =\n        \"APPLY operator is not allowed under the current SQL conformance level\";\n    final String sql0 = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a^)^\";\n    final String sql1 = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a)\";\n    sql(sql0).fails(pattern);\n\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `DEPT`\\n\"\n        + \"CROSS JOIN LATERAL TABLE(`RAMP`(`DEPTNO`)) AS `T` (`A`)\";\n    sql(sql1).ok(expected);\n\n    \r\n    conformance = SqlConformanceEnum.ORACLE_10;\n    sql(sql0).fails(pattern);\n\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(sql1).ok(expected);\n  }\n","date":"2019-07-02 20:29:37","endLine":2470,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testApply","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d7/e18e009750141628c619491dda513ff134f0d8.src","preCode":"  @Test public void testApply() {\n    final String pattern =\n        \"APPLY operator is not allowed under the current SQL conformance level\";\n    final String sql = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a)\";\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `DEPT`\\n\"\n        + \"CROSS JOIN LATERAL TABLE(`RAMP`(`DEPTNO`)) AS `T` (`A`)\";\n    sql(sql).ok(expected);\n\n    \r\n    conformance = SqlConformanceEnum.ORACLE_10;\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2449,"status":"M"}],"commitId":"d9d79ba69056ff69ab69b4c871ca1d83b0bfff15","commitMessage":"@@@[CALCITE-3152] Unify throws in sql parser\n\nReplace generateParseException() and new ParseExecption to\nSqlUtil.newContextException.  this makes the error message more user\nfriendly.\n","date":"2019-07-02 20:29:37","modifiedFileCount":"2","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2019-07-03 10:20:25","codes":[{"authorDate":"2018-11-08 20:28:12","commitOrder":5,"curCode":"  @Test public void testRow() {\n    check(\n        \"select t.r.\\\"EXPR$1\\\", t.r.\\\"EXPR$0\\\" from (select (1,2) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`, `T`.`R`.`EXPR$0`\\n\"\n            + \"FROM (SELECT (ROW(1, 2)) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5,6)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5, 6)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    \r\n    conformance = SqlConformanceEnum.DEFAULT;\n    final String selectRow = \"select ^row(t1a, t2a)^ from t1\";\n    final String expected = \"SELECT (ROW(`T1A`, `T2A`))\\n\"\n        + \"FROM `T1`\";\n    sql(selectRow).sansCarets().ok(expected);\n    conformance = SqlConformanceEnum.LENIENT;\n    sql(selectRow).sansCarets().ok(expected);\n\n    final String pattern = \"ROW expression encountered in illegal context\";\n    conformance = SqlConformanceEnum.MYSQL_5;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.STRICT_2003;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(selectRow).fails(pattern);\n\n    final String whereRow = \"select 1 from t2 where ^row (x, y)^ < row (a, b)\";\n    final String whereExpected = \"SELECT 1\\n\"\n        + \"FROM `T2`\\n\"\n        + \"WHERE ((ROW(`X`, `Y`)) < (ROW(`A`, `B`)))\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow).sansCarets().ok(whereExpected);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow).fails(pattern);\n\n    final String whereRow2 = \"select 1 from t2 where ^(x, y)^ < (a, b)\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n\n    \r\n    \r\n    \r\n    assumeFalse(isUnparserTest());\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n  }\n","date":"2018-11-17 12:10:33","endLine":1068,"groupId":"16453","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6d/5d1dd37184e248d964b57f672f7be465019f01.src","preCode":"  @Test public void testRow() {\n    check(\n        \"select t.r.\\\"EXPR$1\\\", t.r.\\\"EXPR$0\\\" from (select (1,2) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`, `T`.`R`.`EXPR$0`\\n\"\n            + \"FROM (SELECT (ROW(1, 2)) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5,6)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5, 6)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    \r\n    conformance = SqlConformanceEnum.DEFAULT;\n    final String selectRow = \"select ^row(t1a, t2a)^ from t1\";\n    final String expected = \"SELECT (ROW(`T1A`, `T2A`))\\n\"\n        + \"FROM `T1`\";\n    sql(selectRow).sansCarets().ok(expected);\n    conformance = SqlConformanceEnum.LENIENT;\n    sql(selectRow).sansCarets().ok(expected);\n\n    final String pattern = \"ROW expression encountered in illegal context\";\n    conformance = SqlConformanceEnum.MYSQL_5;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.STRICT_2003;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(selectRow).fails(pattern);\n\n    final String whereRow = \"select 1 from t2 where ^row (x, y)^ < row (a, b)\";\n    final String whereExpected = \"SELECT 1\\n\"\n        + \"FROM `T2`\\n\"\n        + \"WHERE ((ROW(`X`, `Y`)) < (ROW(`A`, `B`)))\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow).sansCarets().ok(whereExpected);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow).fails(pattern);\n\n    final String whereRow2 = \"select 1 from t2 where ^(x, y)^ < (a, b)\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n\n    \r\n    \r\n    \r\n    assumeFalse(isUnparserTest());\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1009,"status":"N"},{"authorDate":"2019-07-03 10:20:25","commitOrder":5,"curCode":"  @Test public void testApply() {\n    final String pattern =\n        \"APPLY operator is not allowed under the current SQL conformance level\";\n    final String sql = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a^)^\";\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `DEPT`\\n\"\n        + \"CROSS JOIN LATERAL TABLE(`RAMP`(`DEPTNO`)) AS `T` (`A`)\";\n    sql(sql).sansCarets().ok(expected);\n\n    \r\n    conformance = SqlConformanceEnum.ORACLE_10;\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(sql).sansCarets().ok(expected);\n  }\n","date":"2019-07-03 12:11:03","endLine":2467,"groupId":"13051","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testApply","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/aa/161247dcae690dd1c971597e7c1965f7f1488e.src","preCode":"  @Test public void testApply() {\n    final String pattern =\n        \"APPLY operator is not allowed under the current SQL conformance level\";\n    final String sql0 = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a^)^\";\n    final String sql1 = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a)\";\n    sql(sql0).fails(pattern);\n\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `DEPT`\\n\"\n        + \"CROSS JOIN LATERAL TABLE(`RAMP`(`DEPTNO`)) AS `T` (`A`)\";\n    sql(sql1).ok(expected);\n\n    \r\n    conformance = SqlConformanceEnum.ORACLE_10;\n    sql(sql0).fails(pattern);\n\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(sql1).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2448,"status":"M"}],"commitId":"021fabe2a77264b388a3b681b78bc7e51fb2d978","commitMessage":"@@@[CALCITE-3168] Add test for invalid literal of sql parser\n\nThis patch also merge the redundant sql statements with\n`SqlParserTest.Sql#sansCarets`.\n","date":"2019-07-03 12:11:03","modifiedFileCount":"1","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2019-07-03 10:20:25","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":6,"curCode":"  @Test public void testRow() {\n    sql(\"select t.r.\\\"EXPR$1\\\", t.r.\\\"EXPR$0\\\" from (select (1,2) r from sales.depts) t\")\n        .ok(\"SELECT `T`.`R`.`EXPR$1`, `T`.`R`.`EXPR$0`\\n\"\n            + \"FROM (SELECT (ROW(1, 2)) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    sql(\"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n        + \"from (select ((1,2),(3,4,5)) r from sales.depts) t\")\n        .ok(\"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    sql(\"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n        + \"from (select ((1,2),(3,4,5,6)) r from sales.depts) t\")\n        .ok(\"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5, 6)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    \r\n    conformance = SqlConformanceEnum.DEFAULT;\n    final String selectRow = \"select ^row(t1a, t2a)^ from t1\";\n    final String expected = \"SELECT (ROW(`T1A`, `T2A`))\\n\"\n        + \"FROM `T1`\";\n    sql(selectRow).sansCarets().ok(expected);\n    conformance = SqlConformanceEnum.LENIENT;\n    sql(selectRow).sansCarets().ok(expected);\n\n    final String pattern = \"ROW expression encountered in illegal context\";\n    conformance = SqlConformanceEnum.MYSQL_5;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.STRICT_2003;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(selectRow).fails(pattern);\n\n    final String whereRow = \"select 1 from t2 where ^row (x, y)^ < row (a, b)\";\n    final String whereExpected = \"SELECT 1\\n\"\n        + \"FROM `T2`\\n\"\n        + \"WHERE ((ROW(`X`, `Y`)) < (ROW(`A`, `B`)))\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow).sansCarets().ok(whereExpected);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow).fails(pattern);\n\n    final String whereRow2 = \"select 1 from t2 where ^(x, y)^ < (a, b)\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n\n    \r\n    \r\n    \r\n    assumeFalse(isUnparserTest());\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n  }\n","date":"2019-09-24 02:59:18","endLine":1140,"groupId":"16453","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testRow() {\n    check(\n        \"select t.r.\\\"EXPR$1\\\", t.r.\\\"EXPR$0\\\" from (select (1,2) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`, `T`.`R`.`EXPR$0`\\n\"\n            + \"FROM (SELECT (ROW(1, 2)) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    check(\n        \"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n            + \"from (select ((1,2),(3,4,5,6)) r from sales.depts) t\",\n        \"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5, 6)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    \r\n    conformance = SqlConformanceEnum.DEFAULT;\n    final String selectRow = \"select ^row(t1a, t2a)^ from t1\";\n    final String expected = \"SELECT (ROW(`T1A`, `T2A`))\\n\"\n        + \"FROM `T1`\";\n    sql(selectRow).sansCarets().ok(expected);\n    conformance = SqlConformanceEnum.LENIENT;\n    sql(selectRow).sansCarets().ok(expected);\n\n    final String pattern = \"ROW expression encountered in illegal context\";\n    conformance = SqlConformanceEnum.MYSQL_5;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.STRICT_2003;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(selectRow).fails(pattern);\n\n    final String whereRow = \"select 1 from t2 where ^row (x, y)^ < row (a, b)\";\n    final String whereExpected = \"SELECT 1\\n\"\n        + \"FROM `T2`\\n\"\n        + \"WHERE ((ROW(`X`, `Y`)) < (ROW(`A`, `B`)))\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow).sansCarets().ok(whereExpected);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow).fails(pattern);\n\n    final String whereRow2 = \"select 1 from t2 where ^(x, y)^ < (a, b)\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n\n    \r\n    \r\n    \r\n    assumeFalse(isUnparserTest());\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1084,"status":"M"},{"authorDate":"2019-07-03 10:20:25","commitOrder":6,"curCode":"  @Test public void testApply() {\n    final String pattern =\n        \"APPLY operator is not allowed under the current SQL conformance level\";\n    final String sql = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a^)^\";\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `DEPT`\\n\"\n        + \"CROSS JOIN LATERAL TABLE(`RAMP`(`DEPTNO`)) AS `T` (`A`)\";\n    sql(sql).sansCarets().ok(expected);\n\n    \r\n    conformance = SqlConformanceEnum.ORACLE_10;\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(sql).sansCarets().ok(expected);\n  }\n","date":"2019-07-03 12:11:03","endLine":2467,"groupId":"13051","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testApply","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/aa/161247dcae690dd1c971597e7c1965f7f1488e.src","preCode":"  @Test public void testApply() {\n    final String pattern =\n        \"APPLY operator is not allowed under the current SQL conformance level\";\n    final String sql = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a^)^\";\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `DEPT`\\n\"\n        + \"CROSS JOIN LATERAL TABLE(`RAMP`(`DEPTNO`)) AS `T` (`A`)\";\n    sql(sql).sansCarets().ok(expected);\n\n    \r\n    conformance = SqlConformanceEnum.ORACLE_10;\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(sql).sansCarets().ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2448,"status":"N"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testRow() {\n    sql(\"select t.r.\\\"EXPR$1\\\", t.r.\\\"EXPR$0\\\" from (select (1,2) r from sales.depts) t\")\n        .ok(\"SELECT `T`.`R`.`EXPR$1`, `T`.`R`.`EXPR$0`\\n\"\n            + \"FROM (SELECT (ROW(1, 2)) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    sql(\"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n        + \"from (select ((1,2),(3,4,5)) r from sales.depts) t\")\n        .ok(\"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    sql(\"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n        + \"from (select ((1,2),(3,4,5,6)) r from sales.depts) t\")\n        .ok(\"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5, 6)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    \r\n    conformance = SqlConformanceEnum.DEFAULT;\n    final String selectRow = \"select ^row(t1a, t2a)^ from t1\";\n    final String expected = \"SELECT (ROW(`T1A`, `T2A`))\\n\"\n        + \"FROM `T1`\";\n    sql(selectRow).sansCarets().ok(expected);\n    conformance = SqlConformanceEnum.LENIENT;\n    sql(selectRow).sansCarets().ok(expected);\n\n    final String pattern = \"ROW expression encountered in illegal context\";\n    conformance = SqlConformanceEnum.MYSQL_5;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.STRICT_2003;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(selectRow).fails(pattern);\n\n    final String whereRow = \"select 1 from t2 where ^row (x, y)^ < row (a, b)\";\n    final String whereExpected = \"SELECT 1\\n\"\n        + \"FROM `T2`\\n\"\n        + \"WHERE ((ROW(`X`, `Y`)) < (ROW(`A`, `B`)))\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow).sansCarets().ok(whereExpected);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow).fails(pattern);\n\n    final String whereRow2 = \"select 1 from t2 where ^(x, y)^ < (a, b)\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n\n    \r\n    \r\n    \r\n    assumeFalse(isUnparserTest());\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n  }\n","date":"2020-04-06 04:57:49","endLine":1111,"groupId":"16453","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testRow() {\n    sql(\"select t.r.\\\"EXPR$1\\\", t.r.\\\"EXPR$0\\\" from (select (1,2) r from sales.depts) t\")\n        .ok(\"SELECT `T`.`R`.`EXPR$1`, `T`.`R`.`EXPR$0`\\n\"\n            + \"FROM (SELECT (ROW(1, 2)) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    sql(\"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n        + \"from (select ((1,2),(3,4,5)) r from sales.depts) t\")\n        .ok(\"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    sql(\"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n        + \"from (select ((1,2),(3,4,5,6)) r from sales.depts) t\")\n        .ok(\"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5, 6)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    \r\n    conformance = SqlConformanceEnum.DEFAULT;\n    final String selectRow = \"select ^row(t1a, t2a)^ from t1\";\n    final String expected = \"SELECT (ROW(`T1A`, `T2A`))\\n\"\n        + \"FROM `T1`\";\n    sql(selectRow).sansCarets().ok(expected);\n    conformance = SqlConformanceEnum.LENIENT;\n    sql(selectRow).sansCarets().ok(expected);\n\n    final String pattern = \"ROW expression encountered in illegal context\";\n    conformance = SqlConformanceEnum.MYSQL_5;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.STRICT_2003;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(selectRow).fails(pattern);\n\n    final String whereRow = \"select 1 from t2 where ^row (x, y)^ < row (a, b)\";\n    final String whereExpected = \"SELECT 1\\n\"\n        + \"FROM `T2`\\n\"\n        + \"WHERE ((ROW(`X`, `Y`)) < (ROW(`A`, `B`)))\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow).sansCarets().ok(whereExpected);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow).fails(pattern);\n\n    final String whereRow2 = \"select 1 from t2 where ^(x, y)^ < (a, b)\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n\n    \r\n    \r\n    \r\n    assumeFalse(isUnparserTest());\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1055,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testApply() {\n    final String pattern =\n        \"APPLY operator is not allowed under the current SQL conformance level\";\n    final String sql = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a^)^\";\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `DEPT`\\n\"\n        + \"CROSS JOIN LATERAL TABLE(`RAMP`(`DEPTNO`)) AS `T` (`A`)\";\n    sql(sql).sansCarets().ok(expected);\n\n    \r\n    conformance = SqlConformanceEnum.ORACLE_10;\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(sql).sansCarets().ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":2538,"groupId":"13051","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testApply","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testApply() {\n    final String pattern =\n        \"APPLY operator is not allowed under the current SQL conformance level\";\n    final String sql = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a^)^\";\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `DEPT`\\n\"\n        + \"CROSS JOIN LATERAL TABLE(`RAMP`(`DEPTNO`)) AS `T` (`A`)\";\n    sql(sql).sansCarets().ok(expected);\n\n    \r\n    conformance = SqlConformanceEnum.ORACLE_10;\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(sql).sansCarets().ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2519,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-10 07:48:24","codes":[{"authorDate":"2020-09-10 07:48:24","commitOrder":8,"curCode":"  @Test void testRow() {\n    sql(\"select t.r.\\\"EXPR$1\\\", t.r.\\\"EXPR$0\\\" from (select (1,2) r from sales.depts) t\")\n        .ok(\"SELECT `T`.`R`.`EXPR$1`, `T`.`R`.`EXPR$0`\\n\"\n            + \"FROM (SELECT (ROW(1, 2)) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    sql(\"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n        + \"from (select ((1,2),(3,4,5)) r from sales.depts) t\")\n        .ok(\"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    sql(\"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n        + \"from (select ((1,2),(3,4,5,6)) r from sales.depts) t\")\n        .ok(\"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5, 6)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    \r\n    conformance = SqlConformanceEnum.DEFAULT;\n    final String selectRow = \"select ^row(t1a, t2a)^ from t1\";\n    final String expected = \"SELECT (ROW(`T1A`, `T2A`))\\n\"\n        + \"FROM `T1`\";\n    sql(selectRow).ok(expected);\n    conformance = SqlConformanceEnum.LENIENT;\n    sql(selectRow).ok(expected);\n\n    final String pattern = \"ROW expression encountered in illegal context\";\n    conformance = SqlConformanceEnum.MYSQL_5;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.STRICT_2003;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(selectRow).fails(pattern);\n\n    final String whereRow = \"select 1 from t2 where ^row (x, y)^ < row (a, b)\";\n    final String whereExpected = \"SELECT 1\\n\"\n        + \"FROM `T2`\\n\"\n        + \"WHERE ((ROW(`X`, `Y`)) < (ROW(`A`, `B`)))\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow).ok(whereExpected);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow).fails(pattern);\n\n    final String whereRow2 = \"select 1 from t2 where ^(x, y)^ < (a, b)\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow2).ok(whereExpected);\n\n    \r\n    \r\n    \r\n    assumeFalse(isUnparserTest());\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow2).ok(whereExpected);\n  }\n","date":"2020-09-18 10:35:30","endLine":1137,"groupId":"10843","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testRow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6c/d1a9613e189238221e85788dafc7e38ba16391.src","preCode":"  @Test void testRow() {\n    sql(\"select t.r.\\\"EXPR$1\\\", t.r.\\\"EXPR$0\\\" from (select (1,2) r from sales.depts) t\")\n        .ok(\"SELECT `T`.`R`.`EXPR$1`, `T`.`R`.`EXPR$0`\\n\"\n            + \"FROM (SELECT (ROW(1, 2)) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    sql(\"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n        + \"from (select ((1,2),(3,4,5)) r from sales.depts) t\")\n        .ok(\"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    sql(\"select t.r.\\\"EXPR$1\\\".\\\"EXPR$2\\\" \"\n        + \"from (select ((1,2),(3,4,5,6)) r from sales.depts) t\")\n        .ok(\"SELECT `T`.`R`.`EXPR$1`.`EXPR$2`\\n\"\n            + \"FROM (SELECT (ROW((ROW(1, 2)), (ROW(3, 4, 5, 6)))) AS `R`\\n\"\n            + \"FROM `SALES`.`DEPTS`) AS `T`\");\n\n    \r\n    conformance = SqlConformanceEnum.DEFAULT;\n    final String selectRow = \"select ^row(t1a, t2a)^ from t1\";\n    final String expected = \"SELECT (ROW(`T1A`, `T2A`))\\n\"\n        + \"FROM `T1`\";\n    sql(selectRow).sansCarets().ok(expected);\n    conformance = SqlConformanceEnum.LENIENT;\n    sql(selectRow).sansCarets().ok(expected);\n\n    final String pattern = \"ROW expression encountered in illegal context\";\n    conformance = SqlConformanceEnum.MYSQL_5;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.STRICT_2003;\n    sql(selectRow).fails(pattern);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(selectRow).fails(pattern);\n\n    final String whereRow = \"select 1 from t2 where ^row (x, y)^ < row (a, b)\";\n    final String whereExpected = \"SELECT 1\\n\"\n        + \"FROM `T2`\\n\"\n        + \"WHERE ((ROW(`X`, `Y`)) < (ROW(`A`, `B`)))\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow).sansCarets().ok(whereExpected);\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow).fails(pattern);\n\n    final String whereRow2 = \"select 1 from t2 where ^(x, y)^ < (a, b)\";\n    conformance = SqlConformanceEnum.DEFAULT;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n\n    \r\n    \r\n    \r\n    assumeFalse(isUnparserTest());\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    sql(whereRow2).sansCarets().ok(whereExpected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1081,"status":"M"},{"authorDate":"2020-09-10 07:48:24","commitOrder":8,"curCode":"  @Test void testApply() {\n    final String pattern =\n        \"APPLY operator is not allowed under the current SQL conformance level\";\n    final String sql = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a^)^\";\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `DEPT`\\n\"\n        + \"CROSS JOIN LATERAL TABLE(`RAMP`(`DEPTNO`)) AS `T` (`A`)\";\n    sql(sql).ok(expected);\n\n    \r\n    conformance = SqlConformanceEnum.ORACLE_10;\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(sql).ok(expected);\n  }\n","date":"2020-09-18 10:35:30","endLine":2637,"groupId":"10843","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testApply","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6c/d1a9613e189238221e85788dafc7e38ba16391.src","preCode":"  @Test void testApply() {\n    final String pattern =\n        \"APPLY operator is not allowed under the current SQL conformance level\";\n    final String sql = \"select * from dept\\n\"\n        + \"cross apply table(ramp(deptno)) as t(a^)^\";\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.SQL_SERVER_2008;\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `DEPT`\\n\"\n        + \"CROSS JOIN LATERAL TABLE(`RAMP`(`DEPTNO`)) AS `T` (`A`)\";\n    sql(sql).sansCarets().ok(expected);\n\n    \r\n    conformance = SqlConformanceEnum.ORACLE_10;\n    sql(sql).fails(pattern);\n\n    conformance = SqlConformanceEnum.ORACLE_12;\n    sql(sql).sansCarets().ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2618,"status":"M"}],"commitId":"0c5bb1a345f39cab3eaa3b95a77c1e8831e667e1","commitMessage":"@@@Refactor SqlParserTest\n\nStore StringAndPos rather than the SQL string in a test. This\nmakes it easier to write positive and negative tests on same\nSQL string.  because we don't have to keep the carets (that\nindicate the error position) in the SQL string. If you want\nreal carets in a SQL string.  you can now write \"^^\". Remove\nthe sansCarets() method.  as it is no longer necessary.\n\nPass SqlDialect into negative and expression tests.\n\nAdd constants in SqlParserTest for common dialects.\n","date":"2020-09-18 10:35:30","modifiedFileCount":"4","status":"M","submitter":"Julian Hyde"}]
