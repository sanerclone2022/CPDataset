[{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":1,"curCode":"  @Test public void testExcept() {\n    sql(\"select * from a except select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"EXCEPT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a except all select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"EXCEPT ALL\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a except distinct select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"EXCEPT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n  }\n","date":"2019-09-24 02:59:18","endLine":2302,"groupId":"5566","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExcept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testExcept() {\n    sql(\"select * from a except select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"EXCEPT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a except all select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"EXCEPT ALL\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a except distinct select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"EXCEPT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2283,"status":"B"},{"authorDate":"2019-09-07 07:51:19","commitOrder":1,"curCode":"  @Test public void testIntersect() {\n    sql(\"select * from a intersect select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"INTERSECT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a intersect all select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"INTERSECT ALL\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a intersect distinct select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"INTERSECT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n  }\n","date":"2019-09-24 02:59:18","endLine":2362,"groupId":"5566","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntersect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testIntersect() {\n    sql(\"select * from a intersect select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"INTERSECT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a intersect all select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"INTERSECT ALL\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a intersect distinct select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"INTERSECT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2343,"status":"B"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testExcept() {\n    sql(\"select * from a except select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"EXCEPT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a except all select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"EXCEPT ALL\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a except distinct select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"EXCEPT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":2314,"groupId":"10850","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExcept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testExcept() {\n    sql(\"select * from a except select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"EXCEPT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a except all select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"EXCEPT ALL\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a except distinct select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"EXCEPT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2295,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testIntersect() {\n    sql(\"select * from a intersect select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"INTERSECT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a intersect all select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"INTERSECT ALL\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a intersect distinct select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"INTERSECT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":2374,"groupId":"10850","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntersect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testIntersect() {\n    sql(\"select * from a intersect select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"INTERSECT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a intersect all select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"INTERSECT ALL\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n    sql(\"select * from a intersect distinct select * from a\")\n        .ok(\"(SELECT *\\n\"\n            + \"FROM `A`\\n\"\n            + \"INTERSECT\\n\"\n            + \"SELECT *\\n\"\n            + \"FROM `A`)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2355,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
