[{"authorTime":"2019-08-15 02:34:15","codes":[{"authorDate":"2019-08-15 02:34:15","commitOrder":1,"curCode":"  @Test public void testConvertTimezoneFunction() {\n    checkWholeExpFails(\n        \"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', CAST('2000-01-01' AS TIMESTAMP))\",\n        \"No match found for function signature CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <TIMESTAMP>\\\\)\");\n    tester = tester.withOperatorTable(\n        SqlLibraryOperatorTableFactory.INSTANCE\n            .getOperatorTable(SqlLibrary.STANDARD, SqlLibrary.POSTGRESQL));\n    checkExpType(\n        \"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', CAST('2000-01-01' AS TIMESTAMP))\",\n        \"DATE NOT NULL\");\n    checkWholeExpFails(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles')\",\n        \"Invalid number of arguments to function 'CONVERT_TIMEZONE'. Was expecting 3 arguments\");\n    checkWholeExpFails(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', '2000-01-01')\",\n        \"Cannot apply 'CONVERT_TIMEZONE' to arguments of type 'CONVERT_TIMEZONE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(19\\\\)>, \"\n            + \"<CHAR\\\\(10\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <DATETIME>\\\\)'\");\n    checkWholeExpFails(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', \"\n            + \"'UTC', CAST('2000-01-01' AS TIMESTAMP))\",\n        \"Invalid number of arguments to function 'CONVERT_TIMEZONE'. Was expecting 3 arguments\");\n  }\n","date":"2019-08-21 01:58:52","endLine":1238,"groupId":"10074","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvertTimezoneFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/e0a66276ee3caa1f3dc88f0ae056fc977246fa.src","preCode":"  @Test public void testConvertTimezoneFunction() {\n    checkWholeExpFails(\n        \"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', CAST('2000-01-01' AS TIMESTAMP))\",\n        \"No match found for function signature CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <TIMESTAMP>\\\\)\");\n    tester = tester.withOperatorTable(\n        SqlLibraryOperatorTableFactory.INSTANCE\n            .getOperatorTable(SqlLibrary.STANDARD, SqlLibrary.POSTGRESQL));\n    checkExpType(\n        \"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', CAST('2000-01-01' AS TIMESTAMP))\",\n        \"DATE NOT NULL\");\n    checkWholeExpFails(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles')\",\n        \"Invalid number of arguments to function 'CONVERT_TIMEZONE'. Was expecting 3 arguments\");\n    checkWholeExpFails(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', '2000-01-01')\",\n        \"Cannot apply 'CONVERT_TIMEZONE' to arguments of type 'CONVERT_TIMEZONE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(19\\\\)>, \"\n            + \"<CHAR\\\\(10\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <DATETIME>\\\\)'\");\n    checkWholeExpFails(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', \"\n            + \"'UTC', CAST('2000-01-01' AS TIMESTAMP))\",\n        \"Invalid number of arguments to function 'CONVERT_TIMEZONE'. Was expecting 3 arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1220,"status":"B"},{"authorDate":"2019-08-15 02:34:15","commitOrder":1,"curCode":"  @Test public void testToDateFunction() {\n    checkWholeExpFails(\n        \"TO_DATE('2000-01-01', 'YYYY-MM-DD')\",\n        \"No match found for function signature TO_DATE\\\\(<CHARACTER>, <CHARACTER>\\\\)\");\n    tester = tester.withOperatorTable(\n        SqlLibraryOperatorTableFactory.INSTANCE\n            .getOperatorTable(SqlLibrary.STANDARD, SqlLibrary.POSTGRESQL));\n    checkExpType(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\",\n        \"DATE NOT NULL\");\n    checkWholeExpFails(\"TO_DATE('2000-01-01')\",\n        \"Invalid number of arguments to function 'TO_DATE'. Was expecting 2 arguments\");\n    checkWholeExpFails(\"TO_DATE(2000, 'YYYY')\",\n        \"Cannot apply 'TO_DATE' to arguments of type 'TO_DATE\\\\(<INTEGER>, <CHAR\\\\(4\\\\)>\\\\)'\\\\. \"\n            + \"Supported form\\\\(s\\\\): 'TO_DATE\\\\(<STRING>, <STRING>\\\\)'\");\n    checkWholeExpFails(\"TO_DATE('2000-01-01', 'YYYY-MM-DD', 'YYYY-MM-DD')\",\n        \"Invalid number of arguments to function 'TO_DATE'. Was expecting 2 arguments\");\n  }\n","date":"2019-08-21 01:58:52","endLine":1256,"groupId":"10074","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testToDateFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/e0a66276ee3caa1f3dc88f0ae056fc977246fa.src","preCode":"  @Test public void testToDateFunction() {\n    checkWholeExpFails(\n        \"TO_DATE('2000-01-01', 'YYYY-MM-DD')\",\n        \"No match found for function signature TO_DATE\\\\(<CHARACTER>, <CHARACTER>\\\\)\");\n    tester = tester.withOperatorTable(\n        SqlLibraryOperatorTableFactory.INSTANCE\n            .getOperatorTable(SqlLibrary.STANDARD, SqlLibrary.POSTGRESQL));\n    checkExpType(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\",\n        \"DATE NOT NULL\");\n    checkWholeExpFails(\"TO_DATE('2000-01-01')\",\n        \"Invalid number of arguments to function 'TO_DATE'. Was expecting 2 arguments\");\n    checkWholeExpFails(\"TO_DATE(2000, 'YYYY')\",\n        \"Cannot apply 'TO_DATE' to arguments of type 'TO_DATE\\\\(<INTEGER>, <CHAR\\\\(4\\\\)>\\\\)'\\\\. \"\n            + \"Supported form\\\\(s\\\\): 'TO_DATE\\\\(<STRING>, <STRING>\\\\)'\");\n    checkWholeExpFails(\"TO_DATE('2000-01-01', 'YYYY-MM-DD', 'YYYY-MM-DD')\",\n        \"Invalid number of arguments to function 'TO_DATE'. Was expecting 2 arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1240,"status":"B"}],"commitId":"e8b08c490ab4270945c35f31846cd36b5788cc23","commitMessage":"@@@[CALCITE-3252] Add CONVERT_TIMEZONE.  TO_DATE and TO_TIMESTAMP non-standard functions (Lindsey Meyer)\n\nCONVERT_TIMEZONE is for Redshift; TO_DATE and TO_TIMESTAMP are for\nPostgreSQL (including Redshift) and Oracle.\n\nClose apache/calcite#1380\n","date":"2019-08-21 01:58:52","modifiedFileCount":"5","status":"B","submitter":"Lindsey Meyer"},{"authorTime":"2018-05-30 12:16:57","codes":[{"authorDate":"2019-08-15 02:34:15","commitOrder":2,"curCode":"  @Test public void testConvertTimezoneFunction() {\n    checkWholeExpFails(\n        \"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', CAST('2000-01-01' AS TIMESTAMP))\",\n        \"No match found for function signature CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <TIMESTAMP>\\\\)\");\n    tester = tester.withOperatorTable(\n        SqlLibraryOperatorTableFactory.INSTANCE\n            .getOperatorTable(SqlLibrary.STANDARD, SqlLibrary.POSTGRESQL));\n    checkExpType(\n        \"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', CAST('2000-01-01' AS TIMESTAMP))\",\n        \"DATE NOT NULL\");\n    checkWholeExpFails(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles')\",\n        \"Invalid number of arguments to function 'CONVERT_TIMEZONE'. Was expecting 3 arguments\");\n    checkWholeExpFails(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', '2000-01-01')\",\n        \"Cannot apply 'CONVERT_TIMEZONE' to arguments of type 'CONVERT_TIMEZONE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(19\\\\)>, \"\n            + \"<CHAR\\\\(10\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <DATETIME>\\\\)'\");\n    checkWholeExpFails(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', \"\n            + \"'UTC', CAST('2000-01-01' AS TIMESTAMP))\",\n        \"Invalid number of arguments to function 'CONVERT_TIMEZONE'. Was expecting 3 arguments\");\n  }\n","date":"2019-08-21 01:58:52","endLine":1238,"groupId":"10074","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvertTimezoneFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/e0a66276ee3caa1f3dc88f0ae056fc977246fa.src","preCode":"  @Test public void testConvertTimezoneFunction() {\n    checkWholeExpFails(\n        \"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', CAST('2000-01-01' AS TIMESTAMP))\",\n        \"No match found for function signature CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <TIMESTAMP>\\\\)\");\n    tester = tester.withOperatorTable(\n        SqlLibraryOperatorTableFactory.INSTANCE\n            .getOperatorTable(SqlLibrary.STANDARD, SqlLibrary.POSTGRESQL));\n    checkExpType(\n        \"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', CAST('2000-01-01' AS TIMESTAMP))\",\n        \"DATE NOT NULL\");\n    checkWholeExpFails(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles')\",\n        \"Invalid number of arguments to function 'CONVERT_TIMEZONE'. Was expecting 3 arguments\");\n    checkWholeExpFails(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', '2000-01-01')\",\n        \"Cannot apply 'CONVERT_TIMEZONE' to arguments of type 'CONVERT_TIMEZONE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(19\\\\)>, \"\n            + \"<CHAR\\\\(10\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <DATETIME>\\\\)'\");\n    checkWholeExpFails(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', \"\n            + \"'UTC', CAST('2000-01-01' AS TIMESTAMP))\",\n        \"Invalid number of arguments to function 'CONVERT_TIMEZONE'. Was expecting 3 arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1220,"status":"N"},{"authorDate":"2018-05-30 12:16:57","commitOrder":2,"curCode":"  @Test public void testToDateFunction() {\n    checkWholeExpFails(\n        \"TO_DATE('2000-01-01', 'YYYY-MM-DD')\",\n        \"No match found for function signature TO_DATE\\\\(<CHARACTER>, <CHARACTER>\\\\)\");\n    tester = tester.withOperatorTable(\n        SqlLibraryOperatorTableFactory.INSTANCE\n            .getOperatorTable(SqlLibrary.STANDARD, SqlLibrary.POSTGRESQL));\n    checkExpType(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\",\n        \"DATE NOT NULL\");\n    checkWholeExpFails(\"TO_DATE('2000-01-01')\",\n        \"Invalid number of arguments to function 'TO_DATE'. Was expecting 2 arguments\");\n    checkExpType(\"TO_DATE(2000, 'YYYY')\", \"DATE NOT NULL\");\n    checkWholeExpFails(\"TO_DATE(2000, 'YYYY')\",\n        \"Cannot apply 'TO_DATE' to arguments of type \"\n            + \"'TO_DATE\\\\(<INTEGER>, <CHAR\\\\(4\\\\)>\\\\)'\\\\. \"\n            + \"Supported form\\\\(s\\\\): 'TO_DATE\\\\(<STRING>, <STRING>\\\\)'\",\n        false);\n    checkWholeExpFails(\"TO_DATE('2000-01-01', 'YYYY-MM-DD', 'YYYY-MM-DD')\",\n        \"Invalid number of arguments to function 'TO_DATE'. Was expecting 2 arguments\");\n  }\n","date":"2019-08-29 17:01:46","endLine":1339,"groupId":"10074","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testToDateFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/43/621a7d61dd840b7e1253728a5784565dc4f2c4.src","preCode":"  @Test public void testToDateFunction() {\n    checkWholeExpFails(\n        \"TO_DATE('2000-01-01', 'YYYY-MM-DD')\",\n        \"No match found for function signature TO_DATE\\\\(<CHARACTER>, <CHARACTER>\\\\)\");\n    tester = tester.withOperatorTable(\n        SqlLibraryOperatorTableFactory.INSTANCE\n            .getOperatorTable(SqlLibrary.STANDARD, SqlLibrary.POSTGRESQL));\n    checkExpType(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\",\n        \"DATE NOT NULL\");\n    checkWholeExpFails(\"TO_DATE('2000-01-01')\",\n        \"Invalid number of arguments to function 'TO_DATE'. Was expecting 2 arguments\");\n    checkWholeExpFails(\"TO_DATE(2000, 'YYYY')\",\n        \"Cannot apply 'TO_DATE' to arguments of type 'TO_DATE\\\\(<INTEGER>, <CHAR\\\\(4\\\\)>\\\\)'\\\\. \"\n            + \"Supported form\\\\(s\\\\): 'TO_DATE\\\\(<STRING>, <STRING>\\\\)'\");\n    checkWholeExpFails(\"TO_DATE('2000-01-01', 'YYYY-MM-DD', 'YYYY-MM-DD')\",\n        \"Invalid number of arguments to function 'TO_DATE'. Was expecting 2 arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1320,"status":"M"}],"commitId":"01477c42ded991aaa7b14cf72a6e4ea1a20edf5e","commitMessage":"@@@[CALCITE-2302] Implicit type cast support\n\nChanges:\n* Support full implicit type coercion for SQL contexts:\nSet operation.  binary arithmetic exprs.  binary equality\nexprs.  binary comparison exprs.  case when(COALESCE). \nIN operation.  builtin functions.  user defined function(UDF);\n* The SqlValidator now takes a component named `TypeCoercion`\nresponsible for the coercion work.  you can turn off the coercion with\n`SqlValidator#setEnableTypeCoercion(false)`;\n* We follow PostgreSQL and SQL-SERVER conversion style for two integers division. \ni.e. `'9'/2` returns INTEGER 4.\n","date":"2019-08-29 17:01:46","modifiedFileCount":"50","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testConvertTimezoneFunction() {\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles',\"\n        + \" CAST('2000-01-01' AS TIMESTAMP))\")\n        .fails(\"No match found for function signature \"\n            + \"CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <TIMESTAMP>\\\\)\");\n\n    final SqlOperatorTable postgresTable =\n        SqlLibraryOperatorTableFactory.INSTANCE.getOperatorTable(\n            SqlLibrary.STANDARD,\n            SqlLibrary.POSTGRESQL);\n    expr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles',\\n\"\n        + \"  CAST('2000-01-01' AS TIMESTAMP))\")\n        .withOperatorTable(postgresTable)\n        .columnType(\"DATE NOT NULL\");\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'CONVERT_TIMEZONE'. \"\n            + \"Was expecting 3 arguments\");\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', '2000-01-01')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Cannot apply 'CONVERT_TIMEZONE' to arguments of type \"\n            + \"'CONVERT_TIMEZONE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(19\\\\)>, \"\n            + \"<CHAR\\\\(10\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): \"\n            + \"'CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <DATETIME>\\\\)'\");\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', \"\n        + \"'UTC', CAST('2000-01-01' AS TIMESTAMP))\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'CONVERT_TIMEZONE'. \"\n            + \"Was expecting 3 arguments\");\n  }\n","date":"2019-09-24 02:59:18","endLine":1406,"groupId":"1810","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvertTimezoneFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testConvertTimezoneFunction() {\n    checkWholeExpFails(\n        \"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', CAST('2000-01-01' AS TIMESTAMP))\",\n        \"No match found for function signature CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <TIMESTAMP>\\\\)\");\n    tester = tester.withOperatorTable(\n        SqlLibraryOperatorTableFactory.INSTANCE\n            .getOperatorTable(SqlLibrary.STANDARD, SqlLibrary.POSTGRESQL));\n    checkExpType(\n        \"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', CAST('2000-01-01' AS TIMESTAMP))\",\n        \"DATE NOT NULL\");\n    checkWholeExpFails(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles')\",\n        \"Invalid number of arguments to function 'CONVERT_TIMEZONE'. Was expecting 3 arguments\");\n    checkWholeExpFails(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', '2000-01-01')\",\n        \"Cannot apply 'CONVERT_TIMEZONE' to arguments of type 'CONVERT_TIMEZONE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(19\\\\)>, \"\n            + \"<CHAR\\\\(10\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <DATETIME>\\\\)'\");\n    checkWholeExpFails(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', \"\n            + \"'UTC', CAST('2000-01-01' AS TIMESTAMP))\",\n        \"Invalid number of arguments to function 'CONVERT_TIMEZONE'. Was expecting 3 arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1377,"status":"M"},{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testToDateFunction() {\n    wholeExpr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\")\n        .fails(\"No match found for function signature \"\n            + \"TO_DATE\\\\(<CHARACTER>, <CHARACTER>\\\\)\");\n\n    final SqlOperatorTable postgresTable =\n        SqlLibraryOperatorTableFactory.INSTANCE.getOperatorTable(\n            SqlLibrary.STANDARD,\n            SqlLibrary.POSTGRESQL);\n    expr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\")\n        .withOperatorTable(postgresTable)\n        .columnType(\"DATE NOT NULL\");\n    wholeExpr(\"TO_DATE('2000-01-01')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'TO_DATE'. \"\n            + \"Was expecting 2 arguments\");\n    expr(\"TO_DATE(2000, 'YYYY')\")\n        .withOperatorTable(postgresTable)\n        .columnType(\"DATE NOT NULL\");\n    wholeExpr(\"TO_DATE(2000, 'YYYY')\")\n        .withOperatorTable(postgresTable)\n        .withTypeCoercion(false)\n        .fails(\"Cannot apply 'TO_DATE' to arguments of type \"\n            + \"'TO_DATE\\\\(<INTEGER>, <CHAR\\\\(4\\\\)>\\\\)'\\\\. \"\n            + \"Supported form\\\\(s\\\\): 'TO_DATE\\\\(<STRING>, <STRING>\\\\)'\");\n    wholeExpr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD', 'YYYY-MM-DD')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'TO_DATE'. \"\n            + \"Was expecting 2 arguments\");\n  }\n","date":"2019-09-24 02:59:18","endLine":1437,"groupId":"11903","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testToDateFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testToDateFunction() {\n    checkWholeExpFails(\n        \"TO_DATE('2000-01-01', 'YYYY-MM-DD')\",\n        \"No match found for function signature TO_DATE\\\\(<CHARACTER>, <CHARACTER>\\\\)\");\n    tester = tester.withOperatorTable(\n        SqlLibraryOperatorTableFactory.INSTANCE\n            .getOperatorTable(SqlLibrary.STANDARD, SqlLibrary.POSTGRESQL));\n    checkExpType(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\",\n        \"DATE NOT NULL\");\n    checkWholeExpFails(\"TO_DATE('2000-01-01')\",\n        \"Invalid number of arguments to function 'TO_DATE'. Was expecting 2 arguments\");\n    checkExpType(\"TO_DATE(2000, 'YYYY')\", \"DATE NOT NULL\");\n    checkWholeExpFails(\"TO_DATE(2000, 'YYYY')\",\n        \"Cannot apply 'TO_DATE' to arguments of type \"\n            + \"'TO_DATE\\\\(<INTEGER>, <CHAR\\\\(4\\\\)>\\\\)'\\\\. \"\n            + \"Supported form\\\\(s\\\\): 'TO_DATE\\\\(<STRING>, <STRING>\\\\)'\",\n        false);\n    checkWholeExpFails(\"TO_DATE('2000-01-01', 'YYYY-MM-DD', 'YYYY-MM-DD')\",\n        \"Invalid number of arguments to function 'TO_DATE'. Was expecting 2 arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1408,"status":"M"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testConvertTimezoneFunction() {\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles',\"\n        + \" CAST('2000-01-01' AS TIMESTAMP))\")\n        .fails(\"No match found for function signature \"\n            + \"CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <TIMESTAMP>\\\\)\");\n\n    final SqlOperatorTable postgresTable =\n        SqlLibraryOperatorTableFactory.INSTANCE.getOperatorTable(\n            SqlLibrary.STANDARD,\n            SqlLibrary.POSTGRESQL);\n    expr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles',\\n\"\n        + \"  CAST('2000-01-01' AS TIMESTAMP))\")\n        .withOperatorTable(postgresTable)\n        .columnType(\"DATE NOT NULL\");\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'CONVERT_TIMEZONE'. \"\n            + \"Was expecting 3 arguments\");\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', '2000-01-01')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Cannot apply 'CONVERT_TIMEZONE' to arguments of type \"\n            + \"'CONVERT_TIMEZONE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(19\\\\)>, \"\n            + \"<CHAR\\\\(10\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): \"\n            + \"'CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <DATETIME>\\\\)'\");\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', \"\n        + \"'UTC', CAST('2000-01-01' AS TIMESTAMP))\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'CONVERT_TIMEZONE'. \"\n            + \"Was expecting 3 arguments\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1406,"groupId":"1810","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvertTimezoneFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testConvertTimezoneFunction() {\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles',\"\n        + \" CAST('2000-01-01' AS TIMESTAMP))\")\n        .fails(\"No match found for function signature \"\n            + \"CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <TIMESTAMP>\\\\)\");\n\n    final SqlOperatorTable postgresTable =\n        SqlLibraryOperatorTableFactory.INSTANCE.getOperatorTable(\n            SqlLibrary.STANDARD,\n            SqlLibrary.POSTGRESQL);\n    expr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles',\\n\"\n        + \"  CAST('2000-01-01' AS TIMESTAMP))\")\n        .withOperatorTable(postgresTable)\n        .columnType(\"DATE NOT NULL\");\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'CONVERT_TIMEZONE'. \"\n            + \"Was expecting 3 arguments\");\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', '2000-01-01')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Cannot apply 'CONVERT_TIMEZONE' to arguments of type \"\n            + \"'CONVERT_TIMEZONE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(19\\\\)>, \"\n            + \"<CHAR\\\\(10\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): \"\n            + \"'CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <DATETIME>\\\\)'\");\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', \"\n        + \"'UTC', CAST('2000-01-01' AS TIMESTAMP))\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'CONVERT_TIMEZONE'. \"\n            + \"Was expecting 3 arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1377,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testToDateFunction() {\n    wholeExpr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\")\n        .fails(\"No match found for function signature \"\n            + \"TO_DATE\\\\(<CHARACTER>, <CHARACTER>\\\\)\");\n\n    final SqlOperatorTable postgresTable =\n        SqlLibraryOperatorTableFactory.INSTANCE.getOperatorTable(\n            SqlLibrary.STANDARD,\n            SqlLibrary.POSTGRESQL);\n    expr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\")\n        .withOperatorTable(postgresTable)\n        .columnType(\"DATE NOT NULL\");\n    wholeExpr(\"TO_DATE('2000-01-01')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'TO_DATE'. \"\n            + \"Was expecting 2 arguments\");\n    expr(\"TO_DATE(2000, 'YYYY')\")\n        .withOperatorTable(postgresTable)\n        .columnType(\"DATE NOT NULL\");\n    wholeExpr(\"TO_DATE(2000, 'YYYY')\")\n        .withOperatorTable(postgresTable)\n        .withTypeCoercion(false)\n        .fails(\"Cannot apply 'TO_DATE' to arguments of type \"\n            + \"'TO_DATE\\\\(<INTEGER>, <CHAR\\\\(4\\\\)>\\\\)'\\\\. \"\n            + \"Supported form\\\\(s\\\\): 'TO_DATE\\\\(<STRING>, <STRING>\\\\)'\");\n    wholeExpr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD', 'YYYY-MM-DD')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'TO_DATE'. \"\n            + \"Was expecting 2 arguments\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1437,"groupId":"11903","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testToDateFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testToDateFunction() {\n    wholeExpr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\")\n        .fails(\"No match found for function signature \"\n            + \"TO_DATE\\\\(<CHARACTER>, <CHARACTER>\\\\)\");\n\n    final SqlOperatorTable postgresTable =\n        SqlLibraryOperatorTableFactory.INSTANCE.getOperatorTable(\n            SqlLibrary.STANDARD,\n            SqlLibrary.POSTGRESQL);\n    expr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\")\n        .withOperatorTable(postgresTable)\n        .columnType(\"DATE NOT NULL\");\n    wholeExpr(\"TO_DATE('2000-01-01')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'TO_DATE'. \"\n            + \"Was expecting 2 arguments\");\n    expr(\"TO_DATE(2000, 'YYYY')\")\n        .withOperatorTable(postgresTable)\n        .columnType(\"DATE NOT NULL\");\n    wholeExpr(\"TO_DATE(2000, 'YYYY')\")\n        .withOperatorTable(postgresTable)\n        .withTypeCoercion(false)\n        .fails(\"Cannot apply 'TO_DATE' to arguments of type \"\n            + \"'TO_DATE\\\\(<INTEGER>, <CHAR\\\\(4\\\\)>\\\\)'\\\\. \"\n            + \"Supported form\\\\(s\\\\): 'TO_DATE\\\\(<STRING>, <STRING>\\\\)'\");\n    wholeExpr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD', 'YYYY-MM-DD')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'TO_DATE'. \"\n            + \"Was expecting 2 arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1408,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-10-16 02:25:38","codes":[{"authorDate":"2020-10-16 02:25:38","commitOrder":5,"curCode":"  @Test void testConvertTimezoneFunction() {\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles',\"\n        + \" CAST('2000-01-01' AS TIMESTAMP))\")\n        .fails(\"No match found for function signature \"\n            + \"CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <TIMESTAMP>\\\\)\");\n\n    final SqlOperatorTable opTable = operatorTableFor(SqlLibrary.POSTGRESQL);\n    expr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles',\\n\"\n        + \"  CAST('2000-01-01' AS TIMESTAMP))\")\n        .withOperatorTable(opTable)\n        .columnType(\"DATE NOT NULL\");\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles')\")\n        .withOperatorTable(opTable)\n        .fails(\"Invalid number of arguments to function 'CONVERT_TIMEZONE'. \"\n            + \"Was expecting 3 arguments\");\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', '2000-01-01')\")\n        .withOperatorTable(opTable)\n        .fails(\"Cannot apply 'CONVERT_TIMEZONE' to arguments of type \"\n            + \"'CONVERT_TIMEZONE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(19\\\\)>, \"\n            + \"<CHAR\\\\(10\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): \"\n            + \"'CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <DATETIME>\\\\)'\");\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', \"\n        + \"'UTC', CAST('2000-01-01' AS TIMESTAMP))\")\n        .withOperatorTable(opTable)\n        .fails(\"Invalid number of arguments to function 'CONVERT_TIMEZONE'. \"\n            + \"Was expecting 3 arguments\");\n  }\n","date":"2020-10-16 05:53:42","endLine":1437,"groupId":"101167","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvertTimezoneFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c3/1cb27400a41743313d7e9ba57b17cdadd44f0b.src","preCode":"  @Test void testConvertTimezoneFunction() {\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles',\"\n        + \" CAST('2000-01-01' AS TIMESTAMP))\")\n        .fails(\"No match found for function signature \"\n            + \"CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <TIMESTAMP>\\\\)\");\n\n    final SqlOperatorTable postgresTable =\n        SqlLibraryOperatorTableFactory.INSTANCE.getOperatorTable(\n            SqlLibrary.STANDARD,\n            SqlLibrary.POSTGRESQL);\n    expr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles',\\n\"\n        + \"  CAST('2000-01-01' AS TIMESTAMP))\")\n        .withOperatorTable(postgresTable)\n        .columnType(\"DATE NOT NULL\");\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'CONVERT_TIMEZONE'. \"\n            + \"Was expecting 3 arguments\");\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', '2000-01-01')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Cannot apply 'CONVERT_TIMEZONE' to arguments of type \"\n            + \"'CONVERT_TIMEZONE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(19\\\\)>, \"\n            + \"<CHAR\\\\(10\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): \"\n            + \"'CONVERT_TIMEZONE\\\\(<CHARACTER>, <CHARACTER>, <DATETIME>\\\\)'\");\n    wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', \"\n        + \"'UTC', CAST('2000-01-01' AS TIMESTAMP))\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'CONVERT_TIMEZONE'. \"\n            + \"Was expecting 3 arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1411,"status":"M"},{"authorDate":"2020-10-16 02:25:38","commitOrder":5,"curCode":"  @Test void testToDateFunction() {\n    wholeExpr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\")\n        .fails(\"No match found for function signature \"\n            + \"TO_DATE\\\\(<CHARACTER>, <CHARACTER>\\\\)\");\n\n    final SqlOperatorTable opTable = operatorTableFor(SqlLibrary.POSTGRESQL);\n    expr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\")\n        .withOperatorTable(opTable)\n        .columnType(\"DATE NOT NULL\");\n    wholeExpr(\"TO_DATE('2000-01-01')\")\n        .withOperatorTable(opTable)\n        .fails(\"Invalid number of arguments to function 'TO_DATE'. \"\n            + \"Was expecting 2 arguments\");\n    expr(\"TO_DATE(2000, 'YYYY')\")\n        .withOperatorTable(opTable)\n        .columnType(\"DATE NOT NULL\");\n    wholeExpr(\"TO_DATE(2000, 'YYYY')\")\n        .withOperatorTable(opTable)\n        .withTypeCoercion(false)\n        .fails(\"Cannot apply 'TO_DATE' to arguments of type \"\n            + \"'TO_DATE\\\\(<INTEGER>, <CHAR\\\\(4\\\\)>\\\\)'\\\\. \"\n            + \"Supported form\\\\(s\\\\): 'TO_DATE\\\\(<STRING>, <STRING>\\\\)'\");\n    wholeExpr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD', 'YYYY-MM-DD')\")\n        .withOperatorTable(opTable)\n        .fails(\"Invalid number of arguments to function 'TO_DATE'. \"\n            + \"Was expecting 2 arguments\");\n  }\n","date":"2020-10-16 05:53:42","endLine":1465,"groupId":"101167","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testToDateFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c3/1cb27400a41743313d7e9ba57b17cdadd44f0b.src","preCode":"  @Test void testToDateFunction() {\n    wholeExpr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\")\n        .fails(\"No match found for function signature \"\n            + \"TO_DATE\\\\(<CHARACTER>, <CHARACTER>\\\\)\");\n\n    final SqlOperatorTable postgresTable =\n        SqlLibraryOperatorTableFactory.INSTANCE.getOperatorTable(\n            SqlLibrary.STANDARD,\n            SqlLibrary.POSTGRESQL);\n    expr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\")\n        .withOperatorTable(postgresTable)\n        .columnType(\"DATE NOT NULL\");\n    wholeExpr(\"TO_DATE('2000-01-01')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'TO_DATE'. \"\n            + \"Was expecting 2 arguments\");\n    expr(\"TO_DATE(2000, 'YYYY')\")\n        .withOperatorTable(postgresTable)\n        .columnType(\"DATE NOT NULL\");\n    wholeExpr(\"TO_DATE(2000, 'YYYY')\")\n        .withOperatorTable(postgresTable)\n        .withTypeCoercion(false)\n        .fails(\"Cannot apply 'TO_DATE' to arguments of type \"\n            + \"'TO_DATE\\\\(<INTEGER>, <CHAR\\\\(4\\\\)>\\\\)'\\\\. \"\n            + \"Supported form\\\\(s\\\\): 'TO_DATE\\\\(<STRING>, <STRING>\\\\)'\");\n    wholeExpr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD', 'YYYY-MM-DD')\")\n        .withOperatorTable(postgresTable)\n        .fails(\"Invalid number of arguments to function 'TO_DATE'. \"\n            + \"Was expecting 2 arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1439,"status":"M"}],"commitId":"8e3036609d3896acf0368a5744ae58933adac59d","commitMessage":"@@@Refactor SqlToRelTestBase to allow custom Context in tests\n\nIn particular.  allows a RelOptRulesTest to use a custom\noperator table.\n","date":"2020-10-16 05:53:42","modifiedFileCount":"6","status":"M","submitter":"Julian Hyde"}]
