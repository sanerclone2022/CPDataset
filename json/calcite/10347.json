[{"authorTime":"2018-07-06 04:21:59","codes":[{"authorDate":"2019-07-26 18:41:29","commitOrder":4,"curCode":"  @Test public void testPushFieldEqualsLiteral() {\n    sql(\"?\")\n        .withRel(b -> {\n          \r\n          \r\n          \r\n          return b.scan(\"foodmart\", \"foodmart\")\n              .filter(\n                  b.call(SqlStdOperatorTable.EQUALS, b.field(\"product_id\"),\n                      b.literal(\"id\")))\n              .aggregate(b.groupKey(), b.countStar(\"c\"))\n              .build();\n        })\n        \r\n        \r\n        .returnsUnordered(\"c=0\")\n        .queryContains(druidChecker(\"'queryType':'timeseries'\"));\n  }\n","date":"2019-07-26 18:41:29","endLine":1744,"groupId":"881","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPushFieldEqualsLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/02/b3ad0d5008a0228c8f3ee8b0550059f0beed2c.src","preCode":"  @Test public void testPushFieldEqualsLiteral() {\n    sql(\"?\")\n        .withRel(b -> {\n          \r\n          \r\n          \r\n          return b.scan(\"foodmart\", \"foodmart\")\n              .filter(\n                  b.call(SqlStdOperatorTable.EQUALS, b.field(\"product_id\"),\n                      b.literal(\"id\")))\n              .aggregate(b.groupKey(), b.countStar(\"c\"))\n              .build();\n        })\n        \r\n        \r\n        .returnsUnordered(\"c=0\")\n        .queryContains(druidChecker(\"'queryType':'timeseries'\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapter2IT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1727,"status":"B"},{"authorDate":"2018-07-06 04:21:59","commitOrder":4,"curCode":"  @Test public void testPushFieldEqualsLiteral() {\n    sql(\"?\")\n        .withRel(b -> {\n          \r\n          \r\n          \r\n          return b.scan(\"foodmart\", \"foodmart\")\n              .filter(\n                  b.call(SqlStdOperatorTable.EQUALS, b.field(\"product_id\"),\n                      b.literal(\"id\")))\n              .aggregate(b.groupKey(), b.countStar(\"c\"))\n              .build();\n        })\n        \r\n        \r\n        .returnsUnordered(\"c=0\")\n        .queryContains(druidChecker(\"'queryType':'timeseries'\"));\n  }\n","date":"2018-07-09 01:16:26","endLine":2019,"groupId":"881","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPushFieldEqualsLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/07/4ad2a161bcc3f1622ad7af421f1c6547aefb76.src","preCode":"  @Test public void testPushFieldEqualsLiteral() {\n    sql(\"?\")\n        .withRel(b -> {\n          \r\n          \r\n          \r\n          return b.scan(\"foodmart\", \"foodmart\")\n              .filter(\n                  b.call(SqlStdOperatorTable.EQUALS, b.field(\"product_id\"),\n                      b.literal(\"id\")))\n              .aggregate(b.groupKey(), b.countStar(\"c\"))\n              .build();\n        })\n        \r\n        \r\n        .returnsUnordered(\"c=0\")\n        .queryContains(druidChecker(\"'queryType':'timeseries'\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2002,"status":"NB"}],"commitId":"689a5bbb14614d3f8eef4a4f7e832c6c02029b3c","commitMessage":"@@@Update stale tests in DruidAdapter\n\n1. Adapt plans based on the improvements in the simplifier and elsewhere.\n2. Rename DruidAdapterIT2 to DruidAdapterIT to be run in integration tests.\n","date":"2019-07-26 18:41:29","modifiedFileCount":"1","status":"M","submitter":"Stamatis Zampetakis"},{"authorTime":"2019-08-31 11:11:39","codes":[{"authorDate":"2019-08-31 11:11:39","commitOrder":5,"curCode":"  @Test public void testPushFieldEqualsLiteral() {\n    sql(\"?\")\n        .withRel(b -> {\n          \r\n          \r\n          \r\n          return b.scan(\"foodmart\", \"foodmart\")\n              .filter(\n                  b.call(SqlStdOperatorTable.EQUALS, b.field(\"product_id\"),\n                      b.literal(\"id\")))\n              .aggregate(b.groupKey(), b.countStar(\"c\"))\n              .build();\n        })\n        \r\n        \r\n        .returnsUnordered(\"c=0\")\n        .queryContains(new DruidChecker(\"'queryType':'timeseries'\"));\n  }\n","date":"2019-09-02 15:46:07","endLine":1728,"groupId":"881","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPushFieldEqualsLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3e/6ef8f6919ace14b6f7c152f9fe71cd49d6eac5.src","preCode":"  @Test public void testPushFieldEqualsLiteral() {\n    sql(\"?\")\n        .withRel(b -> {\n          \r\n          \r\n          \r\n          return b.scan(\"foodmart\", \"foodmart\")\n              .filter(\n                  b.call(SqlStdOperatorTable.EQUALS, b.field(\"product_id\"),\n                      b.literal(\"id\")))\n              .aggregate(b.groupKey(), b.countStar(\"c\"))\n              .build();\n        })\n        \r\n        \r\n        .returnsUnordered(\"c=0\")\n        .queryContains(druidChecker(\"'queryType':'timeseries'\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapter2IT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1711,"status":"M"},{"authorDate":"2019-08-31 11:11:39","commitOrder":5,"curCode":"  @Test public void testPushFieldEqualsLiteral() {\n    sql(\"?\")\n        .withRel(b -> {\n          \r\n          \r\n          \r\n          return b.scan(\"foodmart\", \"foodmart\")\n              .filter(\n                  b.call(SqlStdOperatorTable.EQUALS, b.field(\"product_id\"),\n                      b.literal(\"id\")))\n              .aggregate(b.groupKey(), b.countStar(\"c\"))\n              .build();\n        })\n        \r\n        \r\n        .returnsUnordered(\"c=0\")\n        .queryContains(new DruidChecker(\"'queryType':'timeseries'\"));\n  }\n","date":"2019-09-02 15:46:07","endLine":2010,"groupId":"881","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPushFieldEqualsLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c7/b3fcca6ac021f35002e80042f0a396ddfa39ba.src","preCode":"  @Test public void testPushFieldEqualsLiteral() {\n    sql(\"?\")\n        .withRel(b -> {\n          \r\n          \r\n          \r\n          return b.scan(\"foodmart\", \"foodmart\")\n              .filter(\n                  b.call(SqlStdOperatorTable.EQUALS, b.field(\"product_id\"),\n                      b.literal(\"id\")))\n              .aggregate(b.groupKey(), b.countStar(\"c\"))\n              .build();\n        })\n        \r\n        \r\n        .returnsUnordered(\"c=0\")\n        .queryContains(druidChecker(\"'queryType':'timeseries'\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1993,"status":"M"}],"commitId":"48086a76578b96ac961c833075357710bd624d3e","commitMessage":"@@@[CALCITE-3315] Multiple failures in Druid IT tests due to implicit casts\n\n1. Update stale tests in DruidAdapterIT and DruidAdapter2IT following the implementation of implicit casts in CALCITE-2302.\n2. Refactor common druidChecker code in DruidAdapterIT and DruidAdapter2IT in a separate class.\n\nCo-authored-by: yuzhao.cyz <yuzhao.cyz@alibaba-inc.com>\n","date":"2019-09-02 15:46:07","modifiedFileCount":"2","status":"M","submitter":"Stamatis Zampetakis"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testPushFieldEqualsLiteral() {\n    sql(\"?\")\n        .withRel(b -> {\n          \r\n          \r\n          \r\n          return b.scan(\"foodmart\", \"foodmart\")\n              .filter(\n                  b.call(SqlStdOperatorTable.EQUALS, b.field(\"product_id\"),\n                      b.literal(\"id\")))\n              .aggregate(b.groupKey(), b.countStar(\"c\"))\n              .build();\n        })\n        \r\n        \r\n        .returnsUnordered(\"c=0\")\n        .queryContains(new DruidChecker(\"'queryType':'timeseries'\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":1734,"groupId":"10347","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPushFieldEqualsLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/fa4337f27a4c651cca27b069aed6b60ee0e782.src","preCode":"  @Test public void testPushFieldEqualsLiteral() {\n    sql(\"?\")\n        .withRel(b -> {\n          \r\n          \r\n          \r\n          return b.scan(\"foodmart\", \"foodmart\")\n              .filter(\n                  b.call(SqlStdOperatorTable.EQUALS, b.field(\"product_id\"),\n                      b.literal(\"id\")))\n              .aggregate(b.groupKey(), b.countStar(\"c\"))\n              .build();\n        })\n        \r\n        \r\n        .returnsUnordered(\"c=0\")\n        .queryContains(new DruidChecker(\"'queryType':'timeseries'\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapter2IT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1717,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testPushFieldEqualsLiteral() {\n    sql(\"?\")\n        .withRel(b -> {\n          \r\n          \r\n          \r\n          return b.scan(\"foodmart\", \"foodmart\")\n              .filter(\n                  b.call(SqlStdOperatorTable.EQUALS, b.field(\"product_id\"),\n                      b.literal(\"id\")))\n              .aggregate(b.groupKey(), b.countStar(\"c\"))\n              .build();\n        })\n        \r\n        \r\n        .returnsUnordered(\"c=0\")\n        .queryContains(new DruidChecker(\"'queryType':'timeseries'\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":2016,"groupId":"10347","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPushFieldEqualsLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7a/4c255a8931d21fca61278e3f99936a6e0b3678.src","preCode":"  @Test public void testPushFieldEqualsLiteral() {\n    sql(\"?\")\n        .withRel(b -> {\n          \r\n          \r\n          \r\n          return b.scan(\"foodmart\", \"foodmart\")\n              .filter(\n                  b.call(SqlStdOperatorTable.EQUALS, b.field(\"product_id\"),\n                      b.literal(\"id\")))\n              .aggregate(b.groupKey(), b.countStar(\"c\"))\n              .build();\n        })\n        \r\n        \r\n        .returnsUnordered(\"c=0\")\n        .queryContains(new DruidChecker(\"'queryType':'timeseries'\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1999,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
