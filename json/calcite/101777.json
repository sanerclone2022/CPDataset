[{"authorTime":"2017-05-13 07:18:55","codes":[{"authorDate":"2017-11-06 15:09:02","commitOrder":5,"curCode":"  @Override public ReduceResult reduceExpr(int ordinal, TokenSequence list) {\n    SqlNode left = list.node(ordinal - 1);\n    SqlNode right = list.node(ordinal + 1);\n    return new ReduceResult(ordinal - 1,\n        ordinal + 2,\n        createCall(\n            SqlParserPos.sum(\n                Arrays.asList(left.getParserPosition(),\n                    right.getParserPosition(),\n                    list.pos(ordinal))),\n            left,\n            right));\n  }\n","date":"2017-11-16 14:45:49","endLine":67,"groupId":"836","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"reduceExpr","params":"(intordinal@TokenSequencelist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/45/e9bd9db34787ec0c8783921648bea9325c50c9.src","preCode":"  @Override public ReduceResult reduceExpr(int ordinal, TokenSequence list) {\n    SqlNode left = list.node(ordinal - 1);\n    SqlNode right = list.node(ordinal + 1);\n    return new ReduceResult(ordinal - 1,\n        ordinal + 2,\n        createCall(\n            SqlParserPos.sum(\n                Arrays.asList(left.getParserPosition(),\n                    right.getParserPosition(),\n                    list.pos(ordinal))),\n            left,\n            right));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlDotOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"},{"authorDate":"2017-05-13 07:18:55","commitOrder":5,"curCode":"  @Override public ReduceResult reduceExpr(int ordinal,\n      TokenSequence list) {\n    SqlNode left = list.node(ordinal - 1);\n    SqlNode right = list.node(ordinal + 1);\n    return new ReduceResult(ordinal - 1,\n        ordinal + 2,\n        createCall(\n            SqlParserPos.sum(\n                Arrays.asList(left.getParserPosition(),\n                    right.getParserPosition(),\n                    list.pos(ordinal))),\n            left,\n            right));\n  }\n","date":"2017-05-22 03:18:30","endLine":67,"groupId":"836","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"reduceExpr","params":"(intordinal@TokenSequencelist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/60/3057e2946a93f9559175224d682aaefe459cc7.src","preCode":"  @Override public ReduceResult reduceExpr(int ordinal,\n      TokenSequence list) {\n    SqlNode left = list.node(ordinal - 1);\n    SqlNode right = list.node(ordinal + 1);\n    return new ReduceResult(ordinal - 1,\n        ordinal + 2,\n        createCall(\n            SqlParserPos.sum(\n                Arrays.asList(left.getParserPosition(),\n                    right.getParserPosition(),\n                    list.pos(ordinal))),\n            left,\n            right));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"NB"}],"commitId":"a3dd90f1088966dc09caecf88779853ba34d290c","commitMessage":"@@@[CALCITE-2016] ITEM + DOT operator does not work for array (Shuyi Chen)\n\nAdd parser rules to support chaining ITEM and DOT operators for\ncomplex types.\n\nClose apache/calcite#557\n","date":"2017-11-16 14:45:49","modifiedFileCount":"7","status":"M","submitter":"Shuyi Chen"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"  @Override public ReduceResult reduceExpr(int ordinal, TokenSequence list) {\n    SqlNode left = list.node(ordinal - 1);\n    SqlNode right = list.node(ordinal + 1);\n    return new ReduceResult(ordinal - 1,\n        ordinal + 2,\n        createCall(\n            SqlParserPos.sum(\n                Arrays.asList(requireNonNull(left, \"left\").getParserPosition(),\n                    requireNonNull(right, \"right\").getParserPosition(),\n                    list.pos(ordinal))),\n            left,\n            right));\n  }\n","date":"2020-11-30 06:45:33","endLine":73,"groupId":"101777","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"reduceExpr","params":"(intordinal@TokenSequencelist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d5/4bcf52e10e2b6fc828910b37dbe70f5e24f423.src","preCode":"  @Override public ReduceResult reduceExpr(int ordinal, TokenSequence list) {\n    SqlNode left = list.node(ordinal - 1);\n    SqlNode right = list.node(ordinal + 1);\n    return new ReduceResult(ordinal - 1,\n        ordinal + 2,\n        createCall(\n            SqlParserPos.sum(\n                Arrays.asList(left.getParserPosition(),\n                    right.getParserPosition(),\n                    list.pos(ordinal))),\n            left,\n            right));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlDotOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"  @Override public ReduceResult reduceExpr(int ordinal,\n      TokenSequence list) {\n    SqlNode left = list.node(ordinal - 1);\n    SqlNode right = list.node(ordinal + 1);\n    return new ReduceResult(ordinal - 1,\n        ordinal + 2,\n        createCall(\n            SqlParserPos.sum(\n                Arrays.asList(requireNonNull(left, \"left\").getParserPosition(),\n                    requireNonNull(right, \"right\").getParserPosition(),\n                    list.pos(ordinal))),\n            left,\n            right));\n  }\n","date":"2020-11-30 06:45:33","endLine":75,"groupId":"101777","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"reduceExpr","params":"(intordinal@TokenSequencelist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3a/557f342ffd11763a25123b2cd93b4e68319225.src","preCode":"  @Override public ReduceResult reduceExpr(int ordinal,\n      TokenSequence list) {\n    SqlNode left = list.node(ordinal - 1);\n    SqlNode right = list.node(ordinal + 1);\n    return new ReduceResult(ordinal - 1,\n        ordinal + 2,\n        createCall(\n            SqlParserPos.sum(\n                Arrays.asList(left.getParserPosition(),\n                    right.getParserPosition(),\n                    list.pos(ordinal))),\n            left,\n            right));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
