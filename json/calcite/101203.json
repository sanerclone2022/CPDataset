[{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":1,"curCode":"  @Test public void testInsertBindSubsetFailNullability() {\n    final Sql s = sql(\"?\").withConformance(SqlConformanceEnum.PRAGMATIC_2003);\n\n    s.sql(\"insert into ^empnullables^ values (?)\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empnullables ^values (null, ?)^\")\n        .fails(\"Column 'EMPNO' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empnullables ^values (?, null)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n  }\n","date":"2019-09-24 02:59:18","endLine":9360,"groupId":"9416","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInsertBindSubsetFailNullability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testInsertBindSubsetFailNullability() {\n    final Sql s = sql(\"?\").withConformance(SqlConformanceEnum.PRAGMATIC_2003);\n\n    s.sql(\"insert into ^empnullables^ values (?)\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empnullables ^values (null, ?)^\")\n        .fails(\"Column 'EMPNO' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empnullables ^values (?, null)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9351,"status":"B"},{"authorDate":"2019-09-07 07:51:19","commitOrder":1,"curCode":"  @Test public void testInsertSubsetWithCustomInitializerExpressionFactory() {\n    final Sql s = sql(\"?\").withConformance(SqlConformanceEnum.PRAGMATIC_2003);\n\n    s.sql(\"insert into empdefaults values (101)\").ok();\n    s.sql(\"insert into empdefaults values (101, 'Coral')\").ok();\n    s.sql(\"insert into empdefaults ^values (null, 'Tod')^\")\n        .fails(\"Column 'EMPNO' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empdefaults ^values (78, null)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n  }\n","date":"2019-09-24 02:59:18","endLine":9590,"groupId":"9416","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInsertSubsetWithCustomInitializerExpressionFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testInsertSubsetWithCustomInitializerExpressionFactory() {\n    final Sql s = sql(\"?\").withConformance(SqlConformanceEnum.PRAGMATIC_2003);\n\n    s.sql(\"insert into empdefaults values (101)\").ok();\n    s.sql(\"insert into empdefaults values (101, 'Coral')\").ok();\n    s.sql(\"insert into empdefaults ^values (null, 'Tod')^\")\n        .fails(\"Column 'EMPNO' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empdefaults ^values (78, null)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9581,"status":"B"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testInsertBindSubsetFailNullability() {\n    final Sql s = sql(\"?\").withConformance(SqlConformanceEnum.PRAGMATIC_2003);\n\n    s.sql(\"insert into ^empnullables^ values (?)\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empnullables ^values (null, ?)^\")\n        .fails(\"Column 'EMPNO' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empnullables ^values (?, null)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n  }\n","date":"2020-04-06 04:57:49","endLine":9461,"groupId":"9416","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInsertBindSubsetFailNullability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testInsertBindSubsetFailNullability() {\n    final Sql s = sql(\"?\").withConformance(SqlConformanceEnum.PRAGMATIC_2003);\n\n    s.sql(\"insert into ^empnullables^ values (?)\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empnullables ^values (null, ?)^\")\n        .fails(\"Column 'EMPNO' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empnullables ^values (?, null)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9452,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testInsertSubsetWithCustomInitializerExpressionFactory() {\n    final Sql s = sql(\"?\").withConformance(SqlConformanceEnum.PRAGMATIC_2003);\n\n    s.sql(\"insert into empdefaults values (101)\").ok();\n    s.sql(\"insert into empdefaults values (101, 'Coral')\").ok();\n    s.sql(\"insert into empdefaults ^values (null, 'Tod')^\")\n        .fails(\"Column 'EMPNO' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empdefaults ^values (78, null)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n  }\n","date":"2020-04-06 04:57:49","endLine":9691,"groupId":"9416","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInsertSubsetWithCustomInitializerExpressionFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testInsertSubsetWithCustomInitializerExpressionFactory() {\n    final Sql s = sql(\"?\").withConformance(SqlConformanceEnum.PRAGMATIC_2003);\n\n    s.sql(\"insert into empdefaults values (101)\").ok();\n    s.sql(\"insert into empdefaults values (101, 'Coral')\").ok();\n    s.sql(\"insert into empdefaults ^values (null, 'Tod')^\")\n        .fails(\"Column 'EMPNO' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empdefaults ^values (78, null)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9682,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-06-20 08:27:05","commitOrder":3,"curCode":"  @Test void testInsertBindSubsetFailNullability() {\n    final Sql s = sql(\"?\").withConformance(SqlConformanceEnum.PRAGMATIC_2003);\n\n    s.sql(\"insert into ^emp^ values (?)\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n    s.sql(\"insert into emp ^values (null, ?)^\")\n        .fails(\"Column 'EMPNO' has no default value and does not allow NULLs\");\n    s.sql(\"insert into emp ^values (?, null)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n  }\n","date":"2020-06-23 01:50:24","endLine":9513,"groupId":"101203","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testInsertBindSubsetFailNullability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b1/41a3fd05bcc24b88b5f4599c03fb66f05d8db7.src","preCode":"  @Test void testInsertBindSubsetFailNullability() {\n    final Sql s = sql(\"?\").withConformance(SqlConformanceEnum.PRAGMATIC_2003);\n\n    s.sql(\"insert into ^empnullables^ values (?)\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empnullables ^values (null, ?)^\")\n        .fails(\"Column 'EMPNO' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empnullables ^values (?, null)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9504,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testInsertSubsetWithCustomInitializerExpressionFactory() {\n    final Sql s = sql(\"?\").withConformance(SqlConformanceEnum.PRAGMATIC_2003);\n\n    s.sql(\"insert into empdefaults values (101)\").ok();\n    s.sql(\"insert into empdefaults values (101, 'Coral')\").ok();\n    s.sql(\"insert into empdefaults ^values (null, 'Tod')^\")\n        .fails(\"Column 'EMPNO' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empdefaults ^values (78, null)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n  }\n","date":"2020-04-06 04:57:49","endLine":9691,"groupId":"101203","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testInsertSubsetWithCustomInitializerExpressionFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test void testInsertSubsetWithCustomInitializerExpressionFactory() {\n    final Sql s = sql(\"?\").withConformance(SqlConformanceEnum.PRAGMATIC_2003);\n\n    s.sql(\"insert into empdefaults values (101)\").ok();\n    s.sql(\"insert into empdefaults values (101, 'Coral')\").ok();\n    s.sql(\"insert into empdefaults ^values (null, 'Tod')^\")\n        .fails(\"Column 'EMPNO' has no default value and does not allow NULLs\");\n    s.sql(\"insert into empdefaults ^values (78, null)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9682,"status":"N"}],"commitId":"c823343ef5ce1ffbef07a8c90cca8ed2e15678d9","commitMessage":"@@@[CALCITE-4075] Mock table 'EMPNULLABLES' should allow nulls in all non-pk columns\n\nThe name of the table implies that all columns are nullable so to avoid confusion 'ENAME' is also made nullable.\n","date":"2020-06-23 01:50:24","modifiedFileCount":"2","status":"M","submitter":"Stamatis Zampetakis"}]
