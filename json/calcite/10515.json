[{"authorTime":"2018-11-05 23:57:50","codes":[{"authorDate":"2018-11-05 23:57:50","commitOrder":1,"curCode":"  @Test public void testSimpleStringParameterShouldWorkWithCalcite() throws Exception {\n    \r\n    ChinookAvaticaServer server = new ChinookAvaticaServer();\n    server.startWithCalcite();\n    Connection connection = DriverManager.getConnection(server.getURL());\n    \r\n    PreparedStatement pS =\n        connection.prepareStatement(\"select * from chinook.artist where name = ?\");\n    pS.setString(1, \"AC/DC\");\n    \r\n    ResultSet resultSet = pS.executeQuery();\n    server.stop();\n  }\n","date":"2018-11-19 08:15:42","endLine":43,"groupId":"3962","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleStringParameterShouldWorkWithCalcite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ac/391499f0555b277af55e5fcaf743e182a55be8.src","preCode":"  @Test public void testSimpleStringParameterShouldWorkWithCalcite() throws Exception {\n    \r\n    ChinookAvaticaServer server = new ChinookAvaticaServer();\n    server.startWithCalcite();\n    Connection connection = DriverManager.getConnection(server.getURL());\n    \r\n    PreparedStatement pS =\n        connection.prepareStatement(\"select * from chinook.artist where name = ?\");\n    pS.setString(1, \"AC/DC\");\n    \r\n    ResultSet resultSet = pS.executeQuery();\n    server.stop();\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/chinook/RemotePreparedStatementParametersTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"B"},{"authorDate":"2018-11-05 23:57:50","commitOrder":1,"curCode":"  @Test public void testParametersShouldWorkWithRaw() throws Exception {\n    \r\n    ChinookAvaticaServer server = new ChinookAvaticaServer();\n    server.startWithRaw();\n    Connection connection = DriverManager.getConnection(server.getURL());\n    \r\n    PreparedStatement pS =\n        connection.prepareStatement(\"select * from artist where name = ?\");\n    pS.setString(1, \"AC/DC\");\n    \r\n    ResultSet resultSet = pS.executeQuery();\n    server.stop();\n  }\n","date":"2018-11-19 08:15:42","endLine":73,"groupId":"3962","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParametersShouldWorkWithRaw","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ac/391499f0555b277af55e5fcaf743e182a55be8.src","preCode":"  @Test public void testParametersShouldWorkWithRaw() throws Exception {\n    \r\n    ChinookAvaticaServer server = new ChinookAvaticaServer();\n    server.startWithRaw();\n    Connection connection = DriverManager.getConnection(server.getURL());\n    \r\n    PreparedStatement pS =\n        connection.prepareStatement(\"select * from artist where name = ?\");\n    pS.setString(1, \"AC/DC\");\n    \r\n    ResultSet resultSet = pS.executeQuery();\n    server.stop();\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/chinook/RemotePreparedStatementParametersTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"}],"commitId":"53e15af6c5e8e782b2edcd7f5bf4f5f32225d110","commitMessage":"@@@[CALCITE-563] In JDBC adapter.  push bindable parameters down to the underlying JDBC data source (Vladimir Sitnikov.  Piotr Bojko)\n\nFix up.  moving JdbcPreparedStatementUtils methods into\nResultSetEnumerable.  and fixing some comments and typos. (Julian Hyde)\n\nClose apache/calcite#907\nClose apache/calcite#902\n","date":"2018-11-19 08:15:42","modifiedFileCount":"16","status":"B","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSimpleStringParameterShouldWorkWithCalcite() throws Exception {\n    \r\n    ChinookAvaticaServer server = new ChinookAvaticaServer();\n    server.startWithCalcite();\n    Connection connection = DriverManager.getConnection(server.getURL());\n    \r\n    PreparedStatement pS =\n        connection.prepareStatement(\"select * from chinook.artist where name = ?\");\n    pS.setString(1, \"AC/DC\");\n    \r\n    ResultSet resultSet = pS.executeQuery();\n    server.stop();\n  }\n","date":"2020-04-06 04:57:49","endLine":43,"groupId":"10515","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleStringParameterShouldWorkWithCalcite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/e36e4410dfb292aea8bb4a314b70557df34197.src","preCode":"  @Test public void testSimpleStringParameterShouldWorkWithCalcite() throws Exception {\n    \r\n    ChinookAvaticaServer server = new ChinookAvaticaServer();\n    server.startWithCalcite();\n    Connection connection = DriverManager.getConnection(server.getURL());\n    \r\n    PreparedStatement pS =\n        connection.prepareStatement(\"select * from chinook.artist where name = ?\");\n    pS.setString(1, \"AC/DC\");\n    \r\n    ResultSet resultSet = pS.executeQuery();\n    server.stop();\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/chinook/RemotePreparedStatementParametersTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testParametersShouldWorkWithRaw() throws Exception {\n    \r\n    ChinookAvaticaServer server = new ChinookAvaticaServer();\n    server.startWithRaw();\n    Connection connection = DriverManager.getConnection(server.getURL());\n    \r\n    PreparedStatement pS =\n        connection.prepareStatement(\"select * from artist where name = ?\");\n    pS.setString(1, \"AC/DC\");\n    \r\n    ResultSet resultSet = pS.executeQuery();\n    server.stop();\n  }\n","date":"2020-04-06 04:57:49","endLine":73,"groupId":"10515","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParametersShouldWorkWithRaw","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/e36e4410dfb292aea8bb4a314b70557df34197.src","preCode":"  @Test public void testParametersShouldWorkWithRaw() throws Exception {\n    \r\n    ChinookAvaticaServer server = new ChinookAvaticaServer();\n    server.startWithRaw();\n    Connection connection = DriverManager.getConnection(server.getURL());\n    \r\n    PreparedStatement pS =\n        connection.prepareStatement(\"select * from artist where name = ?\");\n    pS.setString(1, \"AC/DC\");\n    \r\n    ResultSet resultSet = pS.executeQuery();\n    server.stop();\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/chinook/RemotePreparedStatementParametersTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
