[{"authorTime":"2018-02-23 07:40:38","codes":[{"authorDate":"2018-02-23 07:40:38","commitOrder":1,"curCode":"  @Test public void testAllPredicatesCrossJoinMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, c.sal from (select * from emp limit 7) as a\\n\"\n        + \"cross join (select * from dept limit 1) as b\\n\"\n        + \"cross join (select * from emp where empno = 5 limit 2) as c) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, DEPT].#0, \"\n            + \"[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1]\"));\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    \r\n    assertThat(inputSet.pulledUpPredicates.toString(),\n        equalTo(\"[true, =([CATALOG, SALES, EMP].#1.$0, 5), true]\"));\n  }\n","date":"2018-02-23 07:40:38","endLine":2082,"groupId":"16655","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAllPredicatesCrossJoinMultiTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/0a1969d72bd3240534db8c31b1b003203d513f.src","preCode":"  @Test public void testAllPredicatesCrossJoinMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, c.sal from (select * from emp limit 7) as a\\n\"\n        + \"cross join (select * from dept limit 1) as b\\n\"\n        + \"cross join (select * from emp where empno = 5 limit 2) as c) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, DEPT].#0, \"\n            + \"[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1]\"));\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    \r\n    assertThat(inputSet.pulledUpPredicates.toString(),\n        equalTo(\"[true, =([CATALOG, SALES, EMP].#1.$0, 5), true]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2066,"status":"B"},{"authorDate":"2018-02-23 07:40:38","commitOrder":1,"curCode":"  @Test public void testAllPredicatesUnionMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, a.sal from (select * from emp) as a\\n\"\n        + \"union all select emp.deptno, emp.sal from emp\\n\"\n        + \"union all select emp.deptno, emp.sal from emp where empno = 5) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1, \"\n            + \"[CATALOG, SALES, EMP].#2]\"));\n    \r\n    \r\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    assertThat(inputSet.pulledUpPredicates.toString(),\n        equalTo(\"[=([CATALOG, SALES, EMP].#2.$0, 5)]\"));\n  }\n","date":"2018-02-23 07:40:38","endLine":2101,"groupId":"16655","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllPredicatesUnionMultiTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/0a1969d72bd3240534db8c31b1b003203d513f.src","preCode":"  @Test public void testAllPredicatesUnionMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, a.sal from (select * from emp) as a\\n\"\n        + \"union all select emp.deptno, emp.sal from emp\\n\"\n        + \"union all select emp.deptno, emp.sal from emp where empno = 5) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1, \"\n            + \"[CATALOG, SALES, EMP].#2]\"));\n    \r\n    \r\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    assertThat(inputSet.pulledUpPredicates.toString(),\n        equalTo(\"[=([CATALOG, SALES, EMP].#2.$0, 5)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2084,"status":"B"}],"commitId":"47c49c9c64e4ec9e6ff6d33f1c7917c7927e673a","commitMessage":"@@@[CALCITE-2189] RelMdAllPredicates fast bail out creates mismatch with RelMdTableReferences\n","date":"2018-02-23 07:40:38","modifiedFileCount":"2","status":"B","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2019-10-16 19:22:37","codes":[{"authorDate":"2019-10-16 19:22:37","commitOrder":2,"curCode":"  @Test public void testAllPredicatesCrossJoinMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, c.sal from (select * from emp limit 7) as a\\n\"\n        + \"cross join (select * from dept limit 1) as b\\n\"\n        + \"cross join (select * from emp where empno = 5 limit 2) as c) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, DEPT].#0, \"\n            + \"[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1]\"));\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    \r\n    assertThat(inputSet.pulledUpPredicates.toString(),\n        equalTo(\"[true, =([CATALOG, SALES, EMP].#1.$0, 5), true]\"));\n  }\n","date":"2019-10-18 06:51:31","endLine":2107,"groupId":"16655","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAllPredicatesCrossJoinMultiTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testAllPredicatesCrossJoinMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, c.sal from (select * from emp limit 7) as a\\n\"\n        + \"cross join (select * from dept limit 1) as b\\n\"\n        + \"cross join (select * from emp where empno = 5 limit 2) as c) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, DEPT].#0, \"\n            + \"[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1]\"));\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    \r\n    assertThat(inputSet.pulledUpPredicates.toString(),\n        equalTo(\"[true, =([CATALOG, SALES, EMP].#1.$0, 5), true]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2091,"status":"M"},{"authorDate":"2019-10-16 19:22:37","commitOrder":2,"curCode":"  @Test public void testAllPredicatesUnionMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, a.sal from (select * from emp) as a\\n\"\n        + \"union all select emp.deptno, emp.sal from emp\\n\"\n        + \"union all select emp.deptno, emp.sal from emp where empno = 5) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1, \"\n            + \"[CATALOG, SALES, EMP].#2]\"));\n    \r\n    \r\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    assertThat(inputSet.pulledUpPredicates.toString(),\n        equalTo(\"[=([CATALOG, SALES, EMP].#2.$0, 5)]\"));\n  }\n","date":"2019-10-18 06:51:31","endLine":2141,"groupId":"16655","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllPredicatesUnionMultiTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testAllPredicatesUnionMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, a.sal from (select * from emp) as a\\n\"\n        + \"union all select emp.deptno, emp.sal from emp\\n\"\n        + \"union all select emp.deptno, emp.sal from emp where empno = 5) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1, \"\n            + \"[CATALOG, SALES, EMP].#2]\"));\n    \r\n    \r\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    assertThat(inputSet.pulledUpPredicates.toString(),\n        equalTo(\"[=([CATALOG, SALES, EMP].#2.$0, 5)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2124,"status":"M"}],"commitId":"ebc16afa935888578b5befc870c1997f307a6cb5","commitMessage":"@@@[CALCITE-3421] Reuse RelMetadataQuery in test suites\n\nClose #1513\n","date":"2019-10-18 06:51:31","modifiedFileCount":"5","status":"M","submitter":"dz"},{"authorTime":"2019-12-29 18:33:23","codes":[{"authorDate":"2019-12-29 18:33:23","commitOrder":3,"curCode":"  @Test public void testAllPredicatesCrossJoinMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, c.sal from (select * from emp limit 7) as a\\n\"\n        + \"cross join (select * from dept limit 1) as b\\n\"\n        + \"cross join (select * from emp where empno = 5 limit 2) as c) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences,\n        sortsAs(\"[[CATALOG, SALES, DEPT].#0, \"\n            + \"[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1]\"));\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    \r\n    assertThat(inputSet.pulledUpPredicates,\n        sortsAs(\"[=([CATALOG, SALES, EMP].#1.$0, 5), true, true]\"));\n  }\n","date":"2020-01-10 14:59:48","endLine":2595,"groupId":"16655","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAllPredicatesCrossJoinMultiTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/0075a5ccdb198373d8c0f15d0ca54f5c8e566e.src","preCode":"  @Test public void testAllPredicatesCrossJoinMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, c.sal from (select * from emp limit 7) as a\\n\"\n        + \"cross join (select * from dept limit 1) as b\\n\"\n        + \"cross join (select * from emp where empno = 5 limit 2) as c) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, DEPT].#0, \"\n            + \"[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1]\"));\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    \r\n    assertThat(inputSet.pulledUpPredicates.toString(),\n        equalTo(\"[true, =([CATALOG, SALES, EMP].#1.$0, 5), true]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2579,"status":"M"},{"authorDate":"2019-12-29 18:33:23","commitOrder":3,"curCode":"  @Test public void testAllPredicatesUnionMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, a.sal from (select * from emp) as a\\n\"\n        + \"union all select emp.deptno, emp.sal from emp\\n\"\n        + \"union all select emp.deptno, emp.sal from emp where empno = 5) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences,\n        sortsAs(\"[[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1, \"\n            + \"[CATALOG, SALES, EMP].#2]\"));\n    \r\n    \r\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    assertThat(inputSet.pulledUpPredicates,\n        sortsAs(\"[=([CATALOG, SALES, EMP].#2.$0, 5)]\"));\n  }\n","date":"2020-01-10 14:59:48","endLine":2629,"groupId":"16655","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllPredicatesUnionMultiTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/0075a5ccdb198373d8c0f15d0ca54f5c8e566e.src","preCode":"  @Test public void testAllPredicatesUnionMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, a.sal from (select * from emp) as a\\n\"\n        + \"union all select emp.deptno, emp.sal from emp\\n\"\n        + \"union all select emp.deptno, emp.sal from emp where empno = 5) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1, \"\n            + \"[CATALOG, SALES, EMP].#2]\"));\n    \r\n    \r\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    assertThat(inputSet.pulledUpPredicates.toString(),\n        equalTo(\"[=([CATALOG, SALES, EMP].#2.$0, 5)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2612,"status":"M"}],"commitId":"3acb30875525e029be96726a357ee9950cce3310","commitMessage":"@@@[CALCITE-2450] Reorder RexCall predicates to a canonical form\n\n$0=$1 and $1=$0 have the same semantics.  so it is worth normalizing them\nto reduce the planning time.\n","date":"2020-01-10 14:59:48","modifiedFileCount":"17","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testAllPredicatesCrossJoinMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, c.sal from (select * from emp limit 7) as a\\n\"\n        + \"cross join (select * from dept limit 1) as b\\n\"\n        + \"cross join (select * from emp where empno = 5 limit 2) as c) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences,\n        sortsAs(\"[[CATALOG, SALES, DEPT].#0, \"\n            + \"[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1]\"));\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    \r\n    assertThat(inputSet.pulledUpPredicates,\n        sortsAs(\"[=([CATALOG, SALES, EMP].#1.$0, 5), true, true]\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":2604,"groupId":"101143","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAllPredicatesCrossJoinMultiTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testAllPredicatesCrossJoinMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, c.sal from (select * from emp limit 7) as a\\n\"\n        + \"cross join (select * from dept limit 1) as b\\n\"\n        + \"cross join (select * from emp where empno = 5 limit 2) as c) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences,\n        sortsAs(\"[[CATALOG, SALES, DEPT].#0, \"\n            + \"[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1]\"));\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    \r\n    assertThat(inputSet.pulledUpPredicates,\n        sortsAs(\"[=([CATALOG, SALES, EMP].#1.$0, 5), true, true]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2588,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testAllPredicatesUnionMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, a.sal from (select * from emp) as a\\n\"\n        + \"union all select emp.deptno, emp.sal from emp\\n\"\n        + \"union all select emp.deptno, emp.sal from emp where empno = 5) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences,\n        sortsAs(\"[[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1, \"\n            + \"[CATALOG, SALES, EMP].#2]\"));\n    \r\n    \r\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    assertThat(inputSet.pulledUpPredicates,\n        sortsAs(\"[=([CATALOG, SALES, EMP].#2.$0, 5)]\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":2638,"groupId":"101143","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllPredicatesUnionMultiTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testAllPredicatesUnionMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, a.sal from (select * from emp) as a\\n\"\n        + \"union all select emp.deptno, emp.sal from emp\\n\"\n        + \"union all select emp.deptno, emp.sal from emp where empno = 5) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences,\n        sortsAs(\"[[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1, \"\n            + \"[CATALOG, SALES, EMP].#2]\"));\n    \r\n    \r\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    assertThat(inputSet.pulledUpPredicates,\n        sortsAs(\"[=([CATALOG, SALES, EMP].#2.$0, 5)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2621,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
