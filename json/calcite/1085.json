[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testWrite() {\n    assertEquals(\n        \"1 + 2.0F + 3L + Long.valueOf(4L)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.add(\n                    Expressions.add(\n                        Expressions.constant(1),\n                        Expressions.constant(2F, Float.TYPE)),\n                    Expressions.constant(3L, Long.TYPE)),\n                Expressions.constant(4L, Long.class))));\n\n    assertEquals(\n        \"new java.math.BigDecimal(31415926L, 7)\",\n        Expressions.toString(\n            Expressions.constant(\n                BigDecimal.valueOf(314159260, 8))));\n\n    \r\n    assertEquals(\n        \"1 + (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    \r\n    assertEquals(\n        \"1 + 2 * 3\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.multiply(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    assertEquals(\n        \"1 * (2 + 3)\",\n        Expressions.toString(\n            Expressions.multiply(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    assertEquals(\n        \"(1 = 2) = 3\",\n        Expressions.toString(\n            Expressions.assign(\n                Expressions.assign(\n                    Expressions.constant(1), Expressions.constant(2)),\n                Expressions.constant(3))));\n\n    \r\n    assertEquals(\n        \"1 < 2 ? (3 < 4 ? 5 : 6) : 7 < 8 ? 9 : 10\",\n        Expressions.toString(\n            Expressions.condition(\n                Expressions.lessThan(\n                    Expressions.constant(1),\n                    Expressions.constant(2)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(3),\n                        Expressions.constant(4)),\n                    Expressions.constant(5),\n                    Expressions.constant(6)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(7),\n                        Expressions.constant(8)),\n                    Expressions.constant(9),\n                    Expressions.constant(10)))));\n\n    assertEquals(\n        \"0 + (double) (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(0),\n                Expressions.convert_(\n                    Expressions.add(\n                        Expressions.constant(2), Expressions.constant(3)),\n                    Double.TYPE))));\n\n    \r\n    assertEquals(\n        \"- - 5\",\n        Expressions.toString(\n            Expressions.negate(\n                Expressions.negate(\n                    Expressions.constant(5)))));\n\n    assertEquals(\n        \"a.empno\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Linq4jTest.Employee.class, \"a\"),\n                \"empno\")));\n\n    assertEquals(\n        \"a.length\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Object[].class, \"a\"),\n                \"length\")));\n\n    assertEquals(\n        \"java.util.Collections.EMPTY_LIST\",\n        Expressions.toString(\n            Expressions.field(\n                null, Collections.class, \"EMPTY_LIST\")));\n\n    final ParameterExpression paramX =\n        Expressions.parameter(String.class, \"x\");\n    assertEquals(\n        \"new net.hydromatic.linq4j.function.Function1() {\\n\"\n        + \"  public int apply(String x) {\\n\"\n        + \"    return x.length();\\n\"\n        + \"  }\\n\"\n        + \"  public Object apply(Object x) {\\n\"\n        + \"    return apply(\\n\"\n        + \"      (String) x);\\n\"\n        + \"  }\\n\"\n        + \"}\\n\",\n        Expressions.toString(\n            Expressions.lambda(\n                Function1.class,\n                Expressions.call(\n                    paramX, \"length\", Collections.<Expression>emptyList()),\n                Arrays.asList(paramX))));\n\n    \r\n    assertEquals(\n        \"new String[] {\\n\"\n        + \"  \\\"foo\\\",\\n\"\n        + \"  null,\\n\"\n        + \"  \\\"bar\\\\\\\"baz\\\"}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                Expressions.constant(\"foo\"),\n                Expressions.constant(null),\n                Expressions.constant(\"bar\\\"baz\"))));\n\n    \r\n    assertEquals(\n        \"new String[][] {\\n\"\n        + \"  new String[] {\\n\"\n        + \"    \\\"foo\\\",\\n\"\n        + \"    \\\"bar\\\"},\\n\"\n        + \"  null,\\n\"\n        + \"  new String[] {\\n\"\n        + \"    null}}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                2,\n                Expressions.constant(new String[] {\"foo\", \"bar\"}),\n                Expressions.constant(null),\n                Expressions.constant(new String[] {null}))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                1,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1][][]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                3,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    assertEquals(\n        \"(int) ((String) (Object) \\\"foo\\\").length()\",\n        Expressions.toString(\n            Expressions.convert_(\n                Expressions.call(\n                    Expressions.convert_(\n                        Expressions.convert_(\n                            Expressions.constant(\"foo\"),\n                            Object.class),\n                        String.class),\n                    \"length\",\n                    Collections.<Expression>emptyList()),\n                Integer.TYPE)));\n\n    \r\n    assertEquals(\n        \"Integer.valueOf(\\\"0123\\\")\",\n        Expressions.toString(\n            Expressions.call(\n                Integer.class,\n                \"valueOf\",\n                Collections.<Expression>singletonList(\n                    Expressions.constant(\"0123\")))));\n\n    \r\n    assertEquals(\n        \"!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.typeIs(\n                    Expressions.parameter(Object.class, \"o\"),\n                    String.class))));\n\n    \r\n    assertEquals(\n        \"!!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.not(\n                    Expressions.typeIs(\n                        Expressions.parameter(Object.class, \"o\"),\n                        String.class)))));\n  }\n","date":"2014-11-14 09:39:34","endLine":428,"groupId":"2082","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d8/68724b3e5849260cfe9ffd85697a287328efcf.src","preCode":"  @Test public void testWrite() {\n    assertEquals(\n        \"1 + 2.0F + 3L + Long.valueOf(4L)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.add(\n                    Expressions.add(\n                        Expressions.constant(1),\n                        Expressions.constant(2F, Float.TYPE)),\n                    Expressions.constant(3L, Long.TYPE)),\n                Expressions.constant(4L, Long.class))));\n\n    assertEquals(\n        \"new java.math.BigDecimal(31415926L, 7)\",\n        Expressions.toString(\n            Expressions.constant(\n                BigDecimal.valueOf(314159260, 8))));\n\n    \r\n    assertEquals(\n        \"1 + (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    \r\n    assertEquals(\n        \"1 + 2 * 3\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.multiply(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    assertEquals(\n        \"1 * (2 + 3)\",\n        Expressions.toString(\n            Expressions.multiply(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    assertEquals(\n        \"(1 = 2) = 3\",\n        Expressions.toString(\n            Expressions.assign(\n                Expressions.assign(\n                    Expressions.constant(1), Expressions.constant(2)),\n                Expressions.constant(3))));\n\n    \r\n    assertEquals(\n        \"1 < 2 ? (3 < 4 ? 5 : 6) : 7 < 8 ? 9 : 10\",\n        Expressions.toString(\n            Expressions.condition(\n                Expressions.lessThan(\n                    Expressions.constant(1),\n                    Expressions.constant(2)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(3),\n                        Expressions.constant(4)),\n                    Expressions.constant(5),\n                    Expressions.constant(6)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(7),\n                        Expressions.constant(8)),\n                    Expressions.constant(9),\n                    Expressions.constant(10)))));\n\n    assertEquals(\n        \"0 + (double) (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(0),\n                Expressions.convert_(\n                    Expressions.add(\n                        Expressions.constant(2), Expressions.constant(3)),\n                    Double.TYPE))));\n\n    \r\n    assertEquals(\n        \"- - 5\",\n        Expressions.toString(\n            Expressions.negate(\n                Expressions.negate(\n                    Expressions.constant(5)))));\n\n    assertEquals(\n        \"a.empno\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Linq4jTest.Employee.class, \"a\"),\n                \"empno\")));\n\n    assertEquals(\n        \"a.length\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Object[].class, \"a\"),\n                \"length\")));\n\n    assertEquals(\n        \"java.util.Collections.EMPTY_LIST\",\n        Expressions.toString(\n            Expressions.field(\n                null, Collections.class, \"EMPTY_LIST\")));\n\n    final ParameterExpression paramX =\n        Expressions.parameter(String.class, \"x\");\n    assertEquals(\n        \"new net.hydromatic.linq4j.function.Function1() {\\n\"\n        + \"  public int apply(String x) {\\n\"\n        + \"    return x.length();\\n\"\n        + \"  }\\n\"\n        + \"  public Object apply(Object x) {\\n\"\n        + \"    return apply(\\n\"\n        + \"      (String) x);\\n\"\n        + \"  }\\n\"\n        + \"}\\n\",\n        Expressions.toString(\n            Expressions.lambda(\n                Function1.class,\n                Expressions.call(\n                    paramX, \"length\", Collections.<Expression>emptyList()),\n                Arrays.asList(paramX))));\n\n    \r\n    assertEquals(\n        \"new String[] {\\n\"\n        + \"  \\\"foo\\\",\\n\"\n        + \"  null,\\n\"\n        + \"  \\\"bar\\\\\\\"baz\\\"}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                Expressions.constant(\"foo\"),\n                Expressions.constant(null),\n                Expressions.constant(\"bar\\\"baz\"))));\n\n    \r\n    assertEquals(\n        \"new String[][] {\\n\"\n        + \"  new String[] {\\n\"\n        + \"    \\\"foo\\\",\\n\"\n        + \"    \\\"bar\\\"},\\n\"\n        + \"  null,\\n\"\n        + \"  new String[] {\\n\"\n        + \"    null}}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                2,\n                Expressions.constant(new String[] {\"foo\", \"bar\"}),\n                Expressions.constant(null),\n                Expressions.constant(new String[] {null}))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                1,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1][][]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                3,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    assertEquals(\n        \"(int) ((String) (Object) \\\"foo\\\").length()\",\n        Expressions.toString(\n            Expressions.convert_(\n                Expressions.call(\n                    Expressions.convert_(\n                        Expressions.convert_(\n                            Expressions.constant(\"foo\"),\n                            Object.class),\n                        String.class),\n                    \"length\",\n                    Collections.<Expression>emptyList()),\n                Integer.TYPE)));\n\n    \r\n    assertEquals(\n        \"Integer.valueOf(\\\"0123\\\")\",\n        Expressions.toString(\n            Expressions.call(\n                Integer.class,\n                \"valueOf\",\n                Collections.<Expression>singletonList(\n                    Expressions.constant(\"0123\")))));\n\n    \r\n    assertEquals(\n        \"!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.typeIs(\n                    Expressions.parameter(Object.class, \"o\"),\n                    String.class))));\n\n    \r\n    assertEquals(\n        \"!!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.not(\n                    Expressions.typeIs(\n                        Expressions.parameter(Object.class, \"o\"),\n                        String.class)))));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testWriteArray() {\n    assertEquals(\n        \"1 + integers[2 + index]\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.arrayIndex(\n                    Expressions.variable(int[].class, \"integers\"),\n                    Expressions.add(\n                        Expressions.constant(2),\n                        Expressions.variable(int.class, \"index\"))))));\n  }\n","date":"2014-11-14 09:39:34","endLine":577,"groupId":"2082","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d8/68724b3e5849260cfe9ffd85697a287328efcf.src","preCode":"  @Test public void testWriteArray() {\n    assertEquals(\n        \"1 + integers[2 + index]\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.arrayIndex(\n                    Expressions.variable(int[].class, \"integers\"),\n                    Expressions.add(\n                        Expressions.constant(2),\n                        Expressions.variable(int.class, \"index\"))))));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Test public void testWrite() {\n    assertEquals(\n        \"1 + 2.0F + 3L + Long.valueOf(4L)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.add(\n                    Expressions.add(\n                        Expressions.constant(1),\n                        Expressions.constant(2F, Float.TYPE)),\n                    Expressions.constant(3L, Long.TYPE)),\n                Expressions.constant(4L, Long.class))));\n\n    assertEquals(\n        \"new java.math.BigDecimal(31415926L, 7)\",\n        Expressions.toString(\n            Expressions.constant(\n                BigDecimal.valueOf(314159260, 8))));\n\n    \r\n    assertEquals(\n        \"1 + (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    \r\n    assertEquals(\n        \"1 + 2 * 3\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.multiply(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    assertEquals(\n        \"1 * (2 + 3)\",\n        Expressions.toString(\n            Expressions.multiply(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    assertEquals(\n        \"(1 = 2) = 3\",\n        Expressions.toString(\n            Expressions.assign(\n                Expressions.assign(\n                    Expressions.constant(1), Expressions.constant(2)),\n                Expressions.constant(3))));\n\n    \r\n    assertEquals(\n        \"1 < 2 ? (3 < 4 ? 5 : 6) : 7 < 8 ? 9 : 10\",\n        Expressions.toString(\n            Expressions.condition(\n                Expressions.lessThan(\n                    Expressions.constant(1),\n                    Expressions.constant(2)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(3),\n                        Expressions.constant(4)),\n                    Expressions.constant(5),\n                    Expressions.constant(6)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(7),\n                        Expressions.constant(8)),\n                    Expressions.constant(9),\n                    Expressions.constant(10)))));\n\n    assertEquals(\n        \"0 + (double) (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(0),\n                Expressions.convert_(\n                    Expressions.add(\n                        Expressions.constant(2), Expressions.constant(3)),\n                    Double.TYPE))));\n\n    \r\n    assertEquals(\n        \"- - 5\",\n        Expressions.toString(\n            Expressions.negate(\n                Expressions.negate(\n                    Expressions.constant(5)))));\n\n    assertEquals(\n        \"a.empno\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Linq4jTest.Employee.class, \"a\"),\n                \"empno\")));\n\n    assertEquals(\n        \"a.length\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Object[].class, \"a\"),\n                \"length\")));\n\n    assertEquals(\n        \"java.util.Collections.EMPTY_LIST\",\n        Expressions.toString(\n            Expressions.field(\n                null, Collections.class, \"EMPTY_LIST\")));\n\n    final ParameterExpression paramX =\n        Expressions.parameter(String.class, \"x\");\n    assertEquals(\n        \"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n            + \"  public int apply(String x) {\\n\"\n            + \"    return x.length();\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Object x) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      (String) x);\\n\"\n            + \"  }\\n\"\n            + \"}\\n\",\n        Expressions.toString(\n            Expressions.lambda(\n                Function1.class,\n                Expressions.call(\n                    paramX, \"length\", Collections.<Expression>emptyList()),\n                Arrays.asList(paramX))));\n\n    \r\n    assertEquals(\n        \"new String[] {\\n\"\n            + \"  \\\"foo\\\",\\n\"\n            + \"  null,\\n\"\n            + \"  \\\"bar\\\\\\\"baz\\\"}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                Expressions.constant(\"foo\"),\n                Expressions.constant(null),\n                Expressions.constant(\"bar\\\"baz\"))));\n\n    \r\n    assertEquals(\n        \"new String[][] {\\n\"\n            + \"  new String[] {\\n\"\n            + \"    \\\"foo\\\",\\n\"\n            + \"    \\\"bar\\\"},\\n\"\n            + \"  null,\\n\"\n            + \"  new String[] {\\n\"\n            + \"    null}}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                2,\n                Expressions.constant(new String[] {\"foo\", \"bar\"}),\n                Expressions.constant(null),\n                Expressions.constant(new String[] {null}))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                1,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1][][]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                3,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    assertEquals(\n        \"(int) ((String) (Object) \\\"foo\\\").length()\",\n        Expressions.toString(\n            Expressions.convert_(\n                Expressions.call(\n                    Expressions.convert_(\n                        Expressions.convert_(\n                            Expressions.constant(\"foo\"),\n                            Object.class),\n                        String.class),\n                    \"length\",\n                    Collections.<Expression>emptyList()),\n                Integer.TYPE)));\n\n    \r\n    assertEquals(\n        \"Integer.valueOf(\\\"0123\\\")\",\n        Expressions.toString(\n            Expressions.call(\n                Integer.class,\n                \"valueOf\",\n                Collections.<Expression>singletonList(\n                    Expressions.constant(\"0123\")))));\n\n    \r\n    assertEquals(\n        \"!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.typeIs(\n                    Expressions.parameter(Object.class, \"o\"),\n                    String.class))));\n\n    \r\n    assertEquals(\n        \"!!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.not(\n                    Expressions.typeIs(\n                        Expressions.parameter(Object.class, \"o\"),\n                        String.class)))));\n  }\n","date":"2014-11-14 10:22:06","endLine":448,"groupId":"2082","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0b/e06c1df23530b23f03a757aa6723aa810b2db7.src","preCode":"  @Test public void testWrite() {\n    assertEquals(\n        \"1 + 2.0F + 3L + Long.valueOf(4L)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.add(\n                    Expressions.add(\n                        Expressions.constant(1),\n                        Expressions.constant(2F, Float.TYPE)),\n                    Expressions.constant(3L, Long.TYPE)),\n                Expressions.constant(4L, Long.class))));\n\n    assertEquals(\n        \"new java.math.BigDecimal(31415926L, 7)\",\n        Expressions.toString(\n            Expressions.constant(\n                BigDecimal.valueOf(314159260, 8))));\n\n    \r\n    assertEquals(\n        \"1 + (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    \r\n    assertEquals(\n        \"1 + 2 * 3\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.multiply(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    assertEquals(\n        \"1 * (2 + 3)\",\n        Expressions.toString(\n            Expressions.multiply(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    assertEquals(\n        \"(1 = 2) = 3\",\n        Expressions.toString(\n            Expressions.assign(\n                Expressions.assign(\n                    Expressions.constant(1), Expressions.constant(2)),\n                Expressions.constant(3))));\n\n    \r\n    assertEquals(\n        \"1 < 2 ? (3 < 4 ? 5 : 6) : 7 < 8 ? 9 : 10\",\n        Expressions.toString(\n            Expressions.condition(\n                Expressions.lessThan(\n                    Expressions.constant(1),\n                    Expressions.constant(2)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(3),\n                        Expressions.constant(4)),\n                    Expressions.constant(5),\n                    Expressions.constant(6)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(7),\n                        Expressions.constant(8)),\n                    Expressions.constant(9),\n                    Expressions.constant(10)))));\n\n    assertEquals(\n        \"0 + (double) (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(0),\n                Expressions.convert_(\n                    Expressions.add(\n                        Expressions.constant(2), Expressions.constant(3)),\n                    Double.TYPE))));\n\n    \r\n    assertEquals(\n        \"- - 5\",\n        Expressions.toString(\n            Expressions.negate(\n                Expressions.negate(\n                    Expressions.constant(5)))));\n\n    assertEquals(\n        \"a.empno\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Linq4jTest.Employee.class, \"a\"),\n                \"empno\")));\n\n    assertEquals(\n        \"a.length\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Object[].class, \"a\"),\n                \"length\")));\n\n    assertEquals(\n        \"java.util.Collections.EMPTY_LIST\",\n        Expressions.toString(\n            Expressions.field(\n                null, Collections.class, \"EMPTY_LIST\")));\n\n    final ParameterExpression paramX =\n        Expressions.parameter(String.class, \"x\");\n    assertEquals(\n        \"new net.hydromatic.linq4j.function.Function1() {\\n\"\n        + \"  public int apply(String x) {\\n\"\n        + \"    return x.length();\\n\"\n        + \"  }\\n\"\n        + \"  public Object apply(Object x) {\\n\"\n        + \"    return apply(\\n\"\n        + \"      (String) x);\\n\"\n        + \"  }\\n\"\n        + \"}\\n\",\n        Expressions.toString(\n            Expressions.lambda(\n                Function1.class,\n                Expressions.call(\n                    paramX, \"length\", Collections.<Expression>emptyList()),\n                Arrays.asList(paramX))));\n\n    \r\n    assertEquals(\n        \"new String[] {\\n\"\n        + \"  \\\"foo\\\",\\n\"\n        + \"  null,\\n\"\n        + \"  \\\"bar\\\\\\\"baz\\\"}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                Expressions.constant(\"foo\"),\n                Expressions.constant(null),\n                Expressions.constant(\"bar\\\"baz\"))));\n\n    \r\n    assertEquals(\n        \"new String[][] {\\n\"\n        + \"  new String[] {\\n\"\n        + \"    \\\"foo\\\",\\n\"\n        + \"    \\\"bar\\\"},\\n\"\n        + \"  null,\\n\"\n        + \"  new String[] {\\n\"\n        + \"    null}}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                2,\n                Expressions.constant(new String[] {\"foo\", \"bar\"}),\n                Expressions.constant(null),\n                Expressions.constant(new String[] {null}))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                1,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1][][]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                3,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    assertEquals(\n        \"(int) ((String) (Object) \\\"foo\\\").length()\",\n        Expressions.toString(\n            Expressions.convert_(\n                Expressions.call(\n                    Expressions.convert_(\n                        Expressions.convert_(\n                            Expressions.constant(\"foo\"),\n                            Object.class),\n                        String.class),\n                    \"length\",\n                    Collections.<Expression>emptyList()),\n                Integer.TYPE)));\n\n    \r\n    assertEquals(\n        \"Integer.valueOf(\\\"0123\\\")\",\n        Expressions.toString(\n            Expressions.call(\n                Integer.class,\n                \"valueOf\",\n                Collections.<Expression>singletonList(\n                    Expressions.constant(\"0123\")))));\n\n    \r\n    assertEquals(\n        \"!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.typeIs(\n                    Expressions.parameter(Object.class, \"o\"),\n                    String.class))));\n\n    \r\n    assertEquals(\n        \"!!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.not(\n                    Expressions.typeIs(\n                        Expressions.parameter(Object.class, \"o\"),\n                        String.class)))));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testWriteArray() {\n    assertEquals(\n        \"1 + integers[2 + index]\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.arrayIndex(\n                    Expressions.variable(int[].class, \"integers\"),\n                    Expressions.add(\n                        Expressions.constant(2),\n                        Expressions.variable(int.class, \"index\"))))));\n  }\n","date":"2014-11-14 09:39:34","endLine":577,"groupId":"2082","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d8/68724b3e5849260cfe9ffd85697a287328efcf.src","preCode":"  @Test public void testWriteArray() {\n    assertEquals(\n        \"1 + integers[2 + index]\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.arrayIndex(\n                    Expressions.variable(int[].class, \"integers\"),\n                    Expressions.add(\n                        Expressions.constant(2),\n                        Expressions.variable(int.class, \"index\"))))));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"N"}],"commitId":"a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55","commitMessage":"@@@[CALCITE-306] Standardize code style for \"import package.*;\"\n\nRename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].\n\nMake many inner classes of EnumerableRules (e.g. EnumerableFilter.  EnumerableFilterRule) top-level classes.\n\nApply a consistent formatting convention for string literals split over multiple lines.\n\nRename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.\n\nChange occurrences of \"optiq\" and \"eigenbase\" in java code to \"calcite\".\n","date":"2014-11-14 10:22:06","modifiedFileCount":"1156","status":"M","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2018-07-06 04:21:59","commitOrder":3,"curCode":"  @Test public void testWrite() {\n    assertEquals(\n        \"1 + 2.0F + 3L + Long.valueOf(4L)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.add(\n                    Expressions.add(\n                        Expressions.constant(1),\n                        Expressions.constant(2F, Float.TYPE)),\n                    Expressions.constant(3L, Long.TYPE)),\n                Expressions.constant(4L, Long.class))));\n\n    assertEquals(\n        \"new java.math.BigDecimal(31415926L, 7)\",\n        Expressions.toString(\n            Expressions.constant(\n                BigDecimal.valueOf(314159260, 8))));\n\n    \r\n    assertEquals(\n        \"1 + (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    \r\n    assertEquals(\n        \"1 + 2 * 3\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.multiply(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    assertEquals(\n        \"1 * (2 + 3)\",\n        Expressions.toString(\n            Expressions.multiply(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    assertEquals(\n        \"(1 = 2) = 3\",\n        Expressions.toString(\n            Expressions.assign(\n                Expressions.assign(\n                    Expressions.constant(1), Expressions.constant(2)),\n                Expressions.constant(3))));\n\n    \r\n    assertEquals(\n        \"1 < 2 ? (3 < 4 ? 5 : 6) : 7 < 8 ? 9 : 10\",\n        Expressions.toString(\n            Expressions.condition(\n                Expressions.lessThan(\n                    Expressions.constant(1),\n                    Expressions.constant(2)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(3),\n                        Expressions.constant(4)),\n                    Expressions.constant(5),\n                    Expressions.constant(6)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(7),\n                        Expressions.constant(8)),\n                    Expressions.constant(9),\n                    Expressions.constant(10)))));\n\n    assertEquals(\n        \"0 + (double) (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(0),\n                Expressions.convert_(\n                    Expressions.add(\n                        Expressions.constant(2), Expressions.constant(3)),\n                    Double.TYPE))));\n\n    \r\n    assertEquals(\n        \"- - 5\",\n        Expressions.toString(\n            Expressions.negate(\n                Expressions.negate(\n                    Expressions.constant(5)))));\n\n    assertEquals(\n        \"a.empno\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Linq4jTest.Employee.class, \"a\"),\n                \"empno\")));\n\n    assertEquals(\n        \"a.length\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Object[].class, \"a\"),\n                \"length\")));\n\n    assertEquals(\n        \"java.util.Collections.EMPTY_LIST\",\n        Expressions.toString(\n            Expressions.field(\n                null, Collections.class, \"EMPTY_LIST\")));\n\n    final ParameterExpression paramX =\n        Expressions.parameter(String.class, \"x\");\n    assertEquals(\n        \"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n            + \"  public int apply(String x) {\\n\"\n            + \"    return x.length();\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Object x) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      (String) x);\\n\"\n            + \"  }\\n\"\n            + \"}\\n\",\n        Expressions.toString(\n            Expressions.lambda(\n                Function1.class,\n                Expressions.call(\n                    paramX, \"length\", Collections.emptyList()),\n                Arrays.asList(paramX))));\n\n    \r\n    assertEquals(\n        \"new String[] {\\n\"\n            + \"  \\\"foo\\\",\\n\"\n            + \"  null,\\n\"\n            + \"  \\\"bar\\\\\\\"baz\\\"}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                Expressions.constant(\"foo\"),\n                Expressions.constant(null),\n                Expressions.constant(\"bar\\\"baz\"))));\n\n    \r\n    assertEquals(\n        \"new String[][] {\\n\"\n            + \"  new String[] {\\n\"\n            + \"    \\\"foo\\\",\\n\"\n            + \"    \\\"bar\\\"},\\n\"\n            + \"  null,\\n\"\n            + \"  new String[] {\\n\"\n            + \"    null}}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                2,\n                Expressions.constant(new String[] {\"foo\", \"bar\"}),\n                Expressions.constant(null),\n                Expressions.constant(new String[] {null}))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                1,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1][][]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                3,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    assertEquals(\n        \"(int) ((String) (Object) \\\"foo\\\").length()\",\n        Expressions.toString(\n            Expressions.convert_(\n                Expressions.call(\n                    Expressions.convert_(\n                        Expressions.convert_(\n                            Expressions.constant(\"foo\"),\n                            Object.class),\n                        String.class),\n                    \"length\",\n                    Collections.emptyList()),\n                Integer.TYPE)));\n\n    \r\n    assertEquals(\n        \"Integer.valueOf(\\\"0123\\\")\",\n        Expressions.toString(\n            Expressions.call(\n                Integer.class,\n                \"valueOf\",\n                Collections.<Expression>singletonList(\n                    Expressions.constant(\"0123\")))));\n\n    \r\n    assertEquals(\n        \"!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.typeIs(\n                    Expressions.parameter(Object.class, \"o\"),\n                    String.class))));\n\n    \r\n    assertEquals(\n        \"!!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.not(\n                    Expressions.typeIs(\n                        Expressions.parameter(Object.class, \"o\"),\n                        String.class)))));\n  }\n","date":"2018-07-09 01:16:26","endLine":455,"groupId":"2082","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f4/57906153786592843754a4551375308243e6e2.src","preCode":"  @Test public void testWrite() {\n    assertEquals(\n        \"1 + 2.0F + 3L + Long.valueOf(4L)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.add(\n                    Expressions.add(\n                        Expressions.constant(1),\n                        Expressions.constant(2F, Float.TYPE)),\n                    Expressions.constant(3L, Long.TYPE)),\n                Expressions.constant(4L, Long.class))));\n\n    assertEquals(\n        \"new java.math.BigDecimal(31415926L, 7)\",\n        Expressions.toString(\n            Expressions.constant(\n                BigDecimal.valueOf(314159260, 8))));\n\n    \r\n    assertEquals(\n        \"1 + (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    \r\n    assertEquals(\n        \"1 + 2 * 3\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.multiply(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    assertEquals(\n        \"1 * (2 + 3)\",\n        Expressions.toString(\n            Expressions.multiply(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    assertEquals(\n        \"(1 = 2) = 3\",\n        Expressions.toString(\n            Expressions.assign(\n                Expressions.assign(\n                    Expressions.constant(1), Expressions.constant(2)),\n                Expressions.constant(3))));\n\n    \r\n    assertEquals(\n        \"1 < 2 ? (3 < 4 ? 5 : 6) : 7 < 8 ? 9 : 10\",\n        Expressions.toString(\n            Expressions.condition(\n                Expressions.lessThan(\n                    Expressions.constant(1),\n                    Expressions.constant(2)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(3),\n                        Expressions.constant(4)),\n                    Expressions.constant(5),\n                    Expressions.constant(6)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(7),\n                        Expressions.constant(8)),\n                    Expressions.constant(9),\n                    Expressions.constant(10)))));\n\n    assertEquals(\n        \"0 + (double) (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(0),\n                Expressions.convert_(\n                    Expressions.add(\n                        Expressions.constant(2), Expressions.constant(3)),\n                    Double.TYPE))));\n\n    \r\n    assertEquals(\n        \"- - 5\",\n        Expressions.toString(\n            Expressions.negate(\n                Expressions.negate(\n                    Expressions.constant(5)))));\n\n    assertEquals(\n        \"a.empno\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Linq4jTest.Employee.class, \"a\"),\n                \"empno\")));\n\n    assertEquals(\n        \"a.length\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Object[].class, \"a\"),\n                \"length\")));\n\n    assertEquals(\n        \"java.util.Collections.EMPTY_LIST\",\n        Expressions.toString(\n            Expressions.field(\n                null, Collections.class, \"EMPTY_LIST\")));\n\n    final ParameterExpression paramX =\n        Expressions.parameter(String.class, \"x\");\n    assertEquals(\n        \"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n            + \"  public int apply(String x) {\\n\"\n            + \"    return x.length();\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Object x) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      (String) x);\\n\"\n            + \"  }\\n\"\n            + \"}\\n\",\n        Expressions.toString(\n            Expressions.lambda(\n                Function1.class,\n                Expressions.call(\n                    paramX, \"length\", Collections.<Expression>emptyList()),\n                Arrays.asList(paramX))));\n\n    \r\n    assertEquals(\n        \"new String[] {\\n\"\n            + \"  \\\"foo\\\",\\n\"\n            + \"  null,\\n\"\n            + \"  \\\"bar\\\\\\\"baz\\\"}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                Expressions.constant(\"foo\"),\n                Expressions.constant(null),\n                Expressions.constant(\"bar\\\"baz\"))));\n\n    \r\n    assertEquals(\n        \"new String[][] {\\n\"\n            + \"  new String[] {\\n\"\n            + \"    \\\"foo\\\",\\n\"\n            + \"    \\\"bar\\\"},\\n\"\n            + \"  null,\\n\"\n            + \"  new String[] {\\n\"\n            + \"    null}}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                2,\n                Expressions.constant(new String[] {\"foo\", \"bar\"}),\n                Expressions.constant(null),\n                Expressions.constant(new String[] {null}))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                1,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1][][]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                3,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    assertEquals(\n        \"(int) ((String) (Object) \\\"foo\\\").length()\",\n        Expressions.toString(\n            Expressions.convert_(\n                Expressions.call(\n                    Expressions.convert_(\n                        Expressions.convert_(\n                            Expressions.constant(\"foo\"),\n                            Object.class),\n                        String.class),\n                    \"length\",\n                    Collections.<Expression>emptyList()),\n                Integer.TYPE)));\n\n    \r\n    assertEquals(\n        \"Integer.valueOf(\\\"0123\\\")\",\n        Expressions.toString(\n            Expressions.call(\n                Integer.class,\n                \"valueOf\",\n                Collections.<Expression>singletonList(\n                    Expressions.constant(\"0123\")))));\n\n    \r\n    assertEquals(\n        \"!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.typeIs(\n                    Expressions.parameter(Object.class, \"o\"),\n                    String.class))));\n\n    \r\n    assertEquals(\n        \"!!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.not(\n                    Expressions.typeIs(\n                        Expressions.parameter(Object.class, \"o\"),\n                        String.class)))));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":3,"curCode":"  @Test public void testWriteArray() {\n    assertEquals(\n        \"1 + integers[2 + index]\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.arrayIndex(\n                    Expressions.variable(int[].class, \"integers\"),\n                    Expressions.add(\n                        Expressions.constant(2),\n                        Expressions.variable(int.class, \"index\"))))));\n  }\n","date":"2014-11-14 09:39:34","endLine":577,"groupId":"2082","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d8/68724b3e5849260cfe9ffd85697a287328efcf.src","preCode":"  @Test public void testWriteArray() {\n    assertEquals(\n        \"1 + integers[2 + index]\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.arrayIndex(\n                    Expressions.variable(int[].class, \"integers\"),\n                    Expressions.add(\n                        Expressions.constant(2),\n                        Expressions.variable(int.class, \"index\"))))));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"N"}],"commitId":"d59b639d27da704f00eff616324a2c04aa06f84c","commitMessage":"@@@[CALCITE-2259] Allow Java 8 syntax\n\nIn summary: use lambdas where possible.  switch from Guava function\ntypes to Java function types or lambdas.  but continue to use Guava\ncomponents (such as immutable collections and cache) that have no\nequivalent in the Java runtime.\n\n1. Change single-abstract-method (SAM) classes to lambdas. Preserve\nformatting wherever possible.\n\n2. Change AssertQuery.returns argument type from Guava Function to Java\nConsumer. If you are using a lambda and see 'returns is deprecated'. \nremove the 'return null;' line.  and the lambda will become a Consumer\n(whose return is void).\n\n3. Change RelOptRuleOperand and RelOptRule.operand methods to take Java\nPredicate rather than Guava Predicate.\n\n4. Change the argument of Hook.add and .addThread from Guava Function to\nJava Consumer.\n\n5. Change 'list.toArray(new T[list.size()])' to 'list.toArray(new T[0])'\nbecause the latter is simpler.  and just as efficient on recent Java\nversions.\n\n6. Resource references; change \"try (Closeable ignore = foo())\" to \"try\n  (foo())\".  especially uses of TryThreadLocal and Hook.Closeable.\n\n7. Convert linq4j Function1 to java Function.  Function2 to java BiFunction\n\n8. Fix occurrences of Intellij's \"Explicit type can be replaced with\n<>\" inspection. (Occurs for \"List<String> list = new\nArrayList<String>();\".)\n\n9. Change Guava Preconditions.checkNotNull to Java\nObjects.requireNonNull. (Kevin Risden)\n\n10. Break out anonymous classes and fix dependency problems.\n\n11. Use CacheLoader.of(Function) where possible.\n\n12. Replace sub-classes of ThreadLocal with ThreadLocal.withInitial().\n\n13. Replace Guava collection methods with calls to Java collection types. \nfor example replace Lists.newArrayList() with new ArrayList<>(). \nMaps.newHashSet() with new HashSet<>().  similarly Sets.\n\n14. Replace Guava Joiner with String.join.\n\n15. Replace Collections.emptyList() with ImmutableList.of() in a few\nplaces.\n\nFor backwards compatibility.  we preserved (and deprecated) the old\nmethods that used Guava types. In a few cases where new and old have\nthe same signature (after erasure).  we could not add a method with the\nsame name.  so we gave the new method a \"J\" suffix. Examples include\nHook.property and .propertyJ.  RelOptRule.operand and .operandJ.\n\nIn test code.  we have not slavishly ensured backwards compatibility.\n\nWe do not intend to remove uses of Guava's immutable collections.\n\nWe have ignored Intellij's \"Pseudo functional style code\" inspection\nmost of the time.  but in a few cases have converted Lists.transform(). \nIterables.transform().  and Iterables.filter() into Java streams. Use\nthe Util.toImmutableList() collector if the result is to be an\nimmutable list. Use Util.transform() rather than Lists.transform()\nif you have a Java function rather than a Guava function or lambda.\n\nNot covered in this change (might be done in future):\n* Convert Collections.sort(list) to list.sort.\n* Review uses of 'for (Map.Entry<K.  V> e : map.entrySet())' and see\n  whether it makes sense to convert to 'map.forEach((k.  v) ->\n  ...)'. Intellij inspection is called 'Replace with Map.forEach'.\n\nBreaking changes:\n* LatticeStatisticProvider.Factory.  result of RexUtil.notFun().  and\n  arguments to Mappings.target() are Function (was Guava.  now Java)\n* Argument to SqlSpecialOperator.TokenSequence.parser() is Predicate\n  (was Guava.  now Java)\n* AggregateNode.AccumulatorFactory extends Supplier (was Guava.  now Java)\n","date":"2018-07-09 01:16:26","modifiedFileCount":"514","status":"M","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2019-10-14 22:24:19","commitOrder":4,"curCode":"  @Test public void testWrite() {\n    assertEquals(\n        \"1 + 2.0F + 3L + Long.valueOf(4L)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.add(\n                    Expressions.add(\n                        Expressions.constant(1),\n                        Expressions.constant(2F, Float.TYPE)),\n                    Expressions.constant(3L, Long.TYPE)),\n                Expressions.constant(4L, Long.class))));\n\n    assertEquals(\n        \"java.math.BigDecimal.valueOf(31415926L, 7)\",\n        Expressions.toString(\n            Expressions.constant(\n                BigDecimal.valueOf(314159260, 8))));\n\n    \r\n    assertEquals(\n        \"1 + (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    \r\n    assertEquals(\n        \"1 + 2 * 3\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.multiply(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    assertEquals(\n        \"1 * (2 + 3)\",\n        Expressions.toString(\n            Expressions.multiply(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    assertEquals(\n        \"(1 = 2) = 3\",\n        Expressions.toString(\n            Expressions.assign(\n                Expressions.assign(\n                    Expressions.constant(1), Expressions.constant(2)),\n                Expressions.constant(3))));\n\n    \r\n    assertEquals(\n        \"1 < 2 ? (3 < 4 ? 5 : 6) : 7 < 8 ? 9 : 10\",\n        Expressions.toString(\n            Expressions.condition(\n                Expressions.lessThan(\n                    Expressions.constant(1),\n                    Expressions.constant(2)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(3),\n                        Expressions.constant(4)),\n                    Expressions.constant(5),\n                    Expressions.constant(6)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(7),\n                        Expressions.constant(8)),\n                    Expressions.constant(9),\n                    Expressions.constant(10)))));\n\n    assertEquals(\n        \"0 + (double) (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(0),\n                Expressions.convert_(\n                    Expressions.add(\n                        Expressions.constant(2), Expressions.constant(3)),\n                    Double.TYPE))));\n\n    \r\n    assertEquals(\n        \"- - 5\",\n        Expressions.toString(\n            Expressions.negate(\n                Expressions.negate(\n                    Expressions.constant(5)))));\n\n    assertEquals(\n        \"a.empno\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Linq4jTest.Employee.class, \"a\"),\n                \"empno\")));\n\n    assertEquals(\n        \"a.length\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Object[].class, \"a\"),\n                \"length\")));\n\n    assertEquals(\n        \"java.util.Collections.EMPTY_LIST\",\n        Expressions.toString(\n            Expressions.field(\n                null, Collections.class, \"EMPTY_LIST\")));\n\n    final ParameterExpression paramX =\n        Expressions.parameter(String.class, \"x\");\n    assertEquals(\n        \"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n            + \"  public int apply(String x) {\\n\"\n            + \"    return x.length();\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Object x) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      (String) x);\\n\"\n            + \"  }\\n\"\n            + \"}\\n\",\n        Expressions.toString(\n            Expressions.lambda(\n                Function1.class,\n                Expressions.call(\n                    paramX, \"length\", Collections.emptyList()),\n                Arrays.asList(paramX))));\n\n    \r\n    assertEquals(\n        \"new String[] {\\n\"\n            + \"  \\\"foo\\\",\\n\"\n            + \"  null,\\n\"\n            + \"  \\\"bar\\\\\\\"baz\\\"}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                Expressions.constant(\"foo\"),\n                Expressions.constant(null),\n                Expressions.constant(\"bar\\\"baz\"))));\n\n    \r\n    assertEquals(\n        \"new String[][] {\\n\"\n            + \"  new String[] {\\n\"\n            + \"    \\\"foo\\\",\\n\"\n            + \"    \\\"bar\\\"},\\n\"\n            + \"  null,\\n\"\n            + \"  new String[] {\\n\"\n            + \"    null}}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                2,\n                Expressions.constant(new String[] {\"foo\", \"bar\"}),\n                Expressions.constant(null),\n                Expressions.constant(new String[] {null}))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                1,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1][][]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                3,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    assertEquals(\n        \"(int) ((String) (Object) \\\"foo\\\").length()\",\n        Expressions.toString(\n            Expressions.convert_(\n                Expressions.call(\n                    Expressions.convert_(\n                        Expressions.convert_(\n                            Expressions.constant(\"foo\"),\n                            Object.class),\n                        String.class),\n                    \"length\",\n                    Collections.emptyList()),\n                Integer.TYPE)));\n\n    \r\n    assertEquals(\n        \"Integer.valueOf(\\\"0123\\\")\",\n        Expressions.toString(\n            Expressions.call(\n                Integer.class,\n                \"valueOf\",\n                Collections.<Expression>singletonList(\n                    Expressions.constant(\"0123\")))));\n\n    \r\n    assertEquals(\n        \"!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.typeIs(\n                    Expressions.parameter(Object.class, \"o\"),\n                    String.class))));\n\n    \r\n    assertEquals(\n        \"!!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.not(\n                    Expressions.typeIs(\n                        Expressions.parameter(Object.class, \"o\"),\n                        String.class)))));\n  }\n","date":"2019-10-15 12:25:16","endLine":674,"groupId":"2082","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9a/7c7b641ea6041c3344c97b837131654fab9555.src","preCode":"  @Test public void testWrite() {\n    assertEquals(\n        \"1 + 2.0F + 3L + Long.valueOf(4L)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.add(\n                    Expressions.add(\n                        Expressions.constant(1),\n                        Expressions.constant(2F, Float.TYPE)),\n                    Expressions.constant(3L, Long.TYPE)),\n                Expressions.constant(4L, Long.class))));\n\n    assertEquals(\n        \"new java.math.BigDecimal(31415926L, 7)\",\n        Expressions.toString(\n            Expressions.constant(\n                BigDecimal.valueOf(314159260, 8))));\n\n    \r\n    assertEquals(\n        \"1 + (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    \r\n    assertEquals(\n        \"1 + 2 * 3\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.multiply(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    assertEquals(\n        \"1 * (2 + 3)\",\n        Expressions.toString(\n            Expressions.multiply(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    assertEquals(\n        \"(1 = 2) = 3\",\n        Expressions.toString(\n            Expressions.assign(\n                Expressions.assign(\n                    Expressions.constant(1), Expressions.constant(2)),\n                Expressions.constant(3))));\n\n    \r\n    assertEquals(\n        \"1 < 2 ? (3 < 4 ? 5 : 6) : 7 < 8 ? 9 : 10\",\n        Expressions.toString(\n            Expressions.condition(\n                Expressions.lessThan(\n                    Expressions.constant(1),\n                    Expressions.constant(2)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(3),\n                        Expressions.constant(4)),\n                    Expressions.constant(5),\n                    Expressions.constant(6)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(7),\n                        Expressions.constant(8)),\n                    Expressions.constant(9),\n                    Expressions.constant(10)))));\n\n    assertEquals(\n        \"0 + (double) (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(0),\n                Expressions.convert_(\n                    Expressions.add(\n                        Expressions.constant(2), Expressions.constant(3)),\n                    Double.TYPE))));\n\n    \r\n    assertEquals(\n        \"- - 5\",\n        Expressions.toString(\n            Expressions.negate(\n                Expressions.negate(\n                    Expressions.constant(5)))));\n\n    assertEquals(\n        \"a.empno\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Linq4jTest.Employee.class, \"a\"),\n                \"empno\")));\n\n    assertEquals(\n        \"a.length\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Object[].class, \"a\"),\n                \"length\")));\n\n    assertEquals(\n        \"java.util.Collections.EMPTY_LIST\",\n        Expressions.toString(\n            Expressions.field(\n                null, Collections.class, \"EMPTY_LIST\")));\n\n    final ParameterExpression paramX =\n        Expressions.parameter(String.class, \"x\");\n    assertEquals(\n        \"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n            + \"  public int apply(String x) {\\n\"\n            + \"    return x.length();\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Object x) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      (String) x);\\n\"\n            + \"  }\\n\"\n            + \"}\\n\",\n        Expressions.toString(\n            Expressions.lambda(\n                Function1.class,\n                Expressions.call(\n                    paramX, \"length\", Collections.emptyList()),\n                Arrays.asList(paramX))));\n\n    \r\n    assertEquals(\n        \"new String[] {\\n\"\n            + \"  \\\"foo\\\",\\n\"\n            + \"  null,\\n\"\n            + \"  \\\"bar\\\\\\\"baz\\\"}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                Expressions.constant(\"foo\"),\n                Expressions.constant(null),\n                Expressions.constant(\"bar\\\"baz\"))));\n\n    \r\n    assertEquals(\n        \"new String[][] {\\n\"\n            + \"  new String[] {\\n\"\n            + \"    \\\"foo\\\",\\n\"\n            + \"    \\\"bar\\\"},\\n\"\n            + \"  null,\\n\"\n            + \"  new String[] {\\n\"\n            + \"    null}}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                2,\n                Expressions.constant(new String[] {\"foo\", \"bar\"}),\n                Expressions.constant(null),\n                Expressions.constant(new String[] {null}))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                1,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1][][]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                3,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    assertEquals(\n        \"(int) ((String) (Object) \\\"foo\\\").length()\",\n        Expressions.toString(\n            Expressions.convert_(\n                Expressions.call(\n                    Expressions.convert_(\n                        Expressions.convert_(\n                            Expressions.constant(\"foo\"),\n                            Object.class),\n                        String.class),\n                    \"length\",\n                    Collections.emptyList()),\n                Integer.TYPE)));\n\n    \r\n    assertEquals(\n        \"Integer.valueOf(\\\"0123\\\")\",\n        Expressions.toString(\n            Expressions.call(\n                Integer.class,\n                \"valueOf\",\n                Collections.<Expression>singletonList(\n                    Expressions.constant(\"0123\")))));\n\n    \r\n    assertEquals(\n        \"!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.typeIs(\n                    Expressions.parameter(Object.class, \"o\"),\n                    String.class))));\n\n    \r\n    assertEquals(\n        \"!!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.not(\n                    Expressions.typeIs(\n                        Expressions.parameter(Object.class, \"o\"),\n                        String.class)))));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":4,"curCode":"  @Test public void testWriteArray() {\n    assertEquals(\n        \"1 + integers[2 + index]\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.arrayIndex(\n                    Expressions.variable(int[].class, \"integers\"),\n                    Expressions.add(\n                        Expressions.constant(2),\n                        Expressions.variable(int.class, \"index\"))))));\n  }\n","date":"2014-11-14 09:39:34","endLine":577,"groupId":"2082","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d8/68724b3e5849260cfe9ffd85697a287328efcf.src","preCode":"  @Test public void testWriteArray() {\n    assertEquals(\n        \"1 + integers[2 + index]\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.arrayIndex(\n                    Expressions.variable(int[].class, \"integers\"),\n                    Expressions.add(\n                        Expressions.constant(2),\n                        Expressions.variable(int.class, \"index\"))))));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"N"}],"commitId":"2cde99f7c5627a488e0dbd33ff1acecb56f3aaa2","commitMessage":"@@@[CALCITE-3411] Incorrect code generated for BigDecimal ConstantExpression (DonnyZone)\n","date":"2019-10-15 12:25:16","modifiedFileCount":"2","status":"M","submitter":"wellfengzhu"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testWrite() {\n    assertEquals(\n        \"1 + 2.0F + 3L + Long.valueOf(4L)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.add(\n                    Expressions.add(\n                        Expressions.constant(1),\n                        Expressions.constant(2F, Float.TYPE)),\n                    Expressions.constant(3L, Long.TYPE)),\n                Expressions.constant(4L, Long.class))));\n\n    assertEquals(\n        \"java.math.BigDecimal.valueOf(31415926L, 7)\",\n        Expressions.toString(\n            Expressions.constant(\n                BigDecimal.valueOf(314159260, 8))));\n\n    \r\n    assertEquals(\n        \"1 + (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    \r\n    assertEquals(\n        \"1 + 2 * 3\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.multiply(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    assertEquals(\n        \"1 * (2 + 3)\",\n        Expressions.toString(\n            Expressions.multiply(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    assertEquals(\n        \"(1 = 2) = 3\",\n        Expressions.toString(\n            Expressions.assign(\n                Expressions.assign(\n                    Expressions.constant(1), Expressions.constant(2)),\n                Expressions.constant(3))));\n\n    \r\n    assertEquals(\n        \"1 < 2 ? (3 < 4 ? 5 : 6) : 7 < 8 ? 9 : 10\",\n        Expressions.toString(\n            Expressions.condition(\n                Expressions.lessThan(\n                    Expressions.constant(1),\n                    Expressions.constant(2)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(3),\n                        Expressions.constant(4)),\n                    Expressions.constant(5),\n                    Expressions.constant(6)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(7),\n                        Expressions.constant(8)),\n                    Expressions.constant(9),\n                    Expressions.constant(10)))));\n\n    assertEquals(\n        \"0 + (double) (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(0),\n                Expressions.convert_(\n                    Expressions.add(\n                        Expressions.constant(2), Expressions.constant(3)),\n                    Double.TYPE))));\n\n    \r\n    assertEquals(\n        \"- - 5\",\n        Expressions.toString(\n            Expressions.negate(\n                Expressions.negate(\n                    Expressions.constant(5)))));\n\n    assertEquals(\n        \"a.empno\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Linq4jTest.Employee.class, \"a\"),\n                \"empno\")));\n\n    assertEquals(\n        \"a.length\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Object[].class, \"a\"),\n                \"length\")));\n\n    assertEquals(\n        \"java.util.Collections.EMPTY_LIST\",\n        Expressions.toString(\n            Expressions.field(\n                null, Collections.class, \"EMPTY_LIST\")));\n\n    final ParameterExpression paramX =\n        Expressions.parameter(String.class, \"x\");\n    assertEquals(\n        \"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n            + \"  public int apply(String x) {\\n\"\n            + \"    return x.length();\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Object x) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      (String) x);\\n\"\n            + \"  }\\n\"\n            + \"}\\n\",\n        Expressions.toString(\n            Expressions.lambda(\n                Function1.class,\n                Expressions.call(\n                    paramX, \"length\", Collections.emptyList()),\n                Arrays.asList(paramX))));\n\n    \r\n    assertEquals(\n        \"new String[] {\\n\"\n            + \"  \\\"foo\\\",\\n\"\n            + \"  null,\\n\"\n            + \"  \\\"bar\\\\\\\"baz\\\"}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                Expressions.constant(\"foo\"),\n                Expressions.constant(null),\n                Expressions.constant(\"bar\\\"baz\"))));\n\n    \r\n    assertEquals(\n        \"new String[][] {\\n\"\n            + \"  new String[] {\\n\"\n            + \"    \\\"foo\\\",\\n\"\n            + \"    \\\"bar\\\"},\\n\"\n            + \"  null,\\n\"\n            + \"  new String[] {\\n\"\n            + \"    null}}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                2,\n                Expressions.constant(new String[] {\"foo\", \"bar\"}),\n                Expressions.constant(null),\n                Expressions.constant(new String[] {null}))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                1,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1][][]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                3,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    assertEquals(\n        \"(int) ((String) (Object) \\\"foo\\\").length()\",\n        Expressions.toString(\n            Expressions.convert_(\n                Expressions.call(\n                    Expressions.convert_(\n                        Expressions.convert_(\n                            Expressions.constant(\"foo\"),\n                            Object.class),\n                        String.class),\n                    \"length\",\n                    Collections.emptyList()),\n                Integer.TYPE)));\n\n    \r\n    assertEquals(\n        \"Integer.valueOf(\\\"0123\\\")\",\n        Expressions.toString(\n            Expressions.call(\n                Integer.class,\n                \"valueOf\",\n                Collections.<Expression>singletonList(\n                    Expressions.constant(\"0123\")))));\n\n    \r\n    assertEquals(\n        \"!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.typeIs(\n                    Expressions.parameter(Object.class, \"o\"),\n                    String.class))));\n\n    \r\n    assertEquals(\n        \"!!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.not(\n                    Expressions.typeIs(\n                        Expressions.parameter(Object.class, \"o\"),\n                        String.class)))));\n  }\n","date":"2020-04-06 04:57:49","endLine":756,"groupId":"1085","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/13/bc869ac710465a9aea6569422a3aee0ffba952.src","preCode":"  @Test public void testWrite() {\n    assertEquals(\n        \"1 + 2.0F + 3L + Long.valueOf(4L)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.add(\n                    Expressions.add(\n                        Expressions.constant(1),\n                        Expressions.constant(2F, Float.TYPE)),\n                    Expressions.constant(3L, Long.TYPE)),\n                Expressions.constant(4L, Long.class))));\n\n    assertEquals(\n        \"java.math.BigDecimal.valueOf(31415926L, 7)\",\n        Expressions.toString(\n            Expressions.constant(\n                BigDecimal.valueOf(314159260, 8))));\n\n    \r\n    assertEquals(\n        \"1 + (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    \r\n    assertEquals(\n        \"1 + 2 * 3\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.multiply(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    assertEquals(\n        \"1 * (2 + 3)\",\n        Expressions.toString(\n            Expressions.multiply(\n                Expressions.constant(1),\n                Expressions.add(\n                    Expressions.constant(2),\n                    Expressions.constant(3)))));\n\n    \r\n    assertEquals(\n        \"(1 = 2) = 3\",\n        Expressions.toString(\n            Expressions.assign(\n                Expressions.assign(\n                    Expressions.constant(1), Expressions.constant(2)),\n                Expressions.constant(3))));\n\n    \r\n    assertEquals(\n        \"1 < 2 ? (3 < 4 ? 5 : 6) : 7 < 8 ? 9 : 10\",\n        Expressions.toString(\n            Expressions.condition(\n                Expressions.lessThan(\n                    Expressions.constant(1),\n                    Expressions.constant(2)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(3),\n                        Expressions.constant(4)),\n                    Expressions.constant(5),\n                    Expressions.constant(6)),\n                Expressions.condition(\n                    Expressions.lessThan(\n                        Expressions.constant(7),\n                        Expressions.constant(8)),\n                    Expressions.constant(9),\n                    Expressions.constant(10)))));\n\n    assertEquals(\n        \"0 + (double) (2 + 3)\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(0),\n                Expressions.convert_(\n                    Expressions.add(\n                        Expressions.constant(2), Expressions.constant(3)),\n                    Double.TYPE))));\n\n    \r\n    assertEquals(\n        \"- - 5\",\n        Expressions.toString(\n            Expressions.negate(\n                Expressions.negate(\n                    Expressions.constant(5)))));\n\n    assertEquals(\n        \"a.empno\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Linq4jTest.Employee.class, \"a\"),\n                \"empno\")));\n\n    assertEquals(\n        \"a.length\",\n        Expressions.toString(\n            Expressions.field(\n                Expressions.parameter(Object[].class, \"a\"),\n                \"length\")));\n\n    assertEquals(\n        \"java.util.Collections.EMPTY_LIST\",\n        Expressions.toString(\n            Expressions.field(\n                null, Collections.class, \"EMPTY_LIST\")));\n\n    final ParameterExpression paramX =\n        Expressions.parameter(String.class, \"x\");\n    assertEquals(\n        \"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n            + \"  public int apply(String x) {\\n\"\n            + \"    return x.length();\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Object x) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      (String) x);\\n\"\n            + \"  }\\n\"\n            + \"}\\n\",\n        Expressions.toString(\n            Expressions.lambda(\n                Function1.class,\n                Expressions.call(\n                    paramX, \"length\", Collections.emptyList()),\n                Arrays.asList(paramX))));\n\n    \r\n    assertEquals(\n        \"new String[] {\\n\"\n            + \"  \\\"foo\\\",\\n\"\n            + \"  null,\\n\"\n            + \"  \\\"bar\\\\\\\"baz\\\"}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                Expressions.constant(\"foo\"),\n                Expressions.constant(null),\n                Expressions.constant(\"bar\\\"baz\"))));\n\n    \r\n    assertEquals(\n        \"new String[][] {\\n\"\n            + \"  new String[] {\\n\"\n            + \"    \\\"foo\\\",\\n\"\n            + \"    \\\"bar\\\"},\\n\"\n            + \"  null,\\n\"\n            + \"  new String[] {\\n\"\n            + \"    null}}\",\n        Expressions.toString(\n            Expressions.newArrayInit(\n                String.class,\n                2,\n                Expressions.constant(new String[] {\"foo\", \"bar\"}),\n                Expressions.constant(null),\n                Expressions.constant(new String[] {null}))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                1,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    \r\n    assertEquals(\n        \"new String[x + 1][][]\",\n        Expressions.toString(\n            Expressions.newArrayBounds(\n                String.class,\n                3,\n                Expressions.add(\n                    Expressions.parameter(0, int.class, \"x\"),\n                    Expressions.constant(1)))));\n\n    assertEquals(\n        \"(int) ((String) (Object) \\\"foo\\\").length()\",\n        Expressions.toString(\n            Expressions.convert_(\n                Expressions.call(\n                    Expressions.convert_(\n                        Expressions.convert_(\n                            Expressions.constant(\"foo\"),\n                            Object.class),\n                        String.class),\n                    \"length\",\n                    Collections.emptyList()),\n                Integer.TYPE)));\n\n    \r\n    assertEquals(\n        \"Integer.valueOf(\\\"0123\\\")\",\n        Expressions.toString(\n            Expressions.call(\n                Integer.class,\n                \"valueOf\",\n                Collections.<Expression>singletonList(\n                    Expressions.constant(\"0123\")))));\n\n    \r\n    assertEquals(\n        \"!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.typeIs(\n                    Expressions.parameter(Object.class, \"o\"),\n                    String.class))));\n\n    \r\n    assertEquals(\n        \"!!(o instanceof String)\",\n        Expressions.toString(\n            Expressions.not(\n                Expressions.not(\n                    Expressions.typeIs(\n                        Expressions.parameter(Object.class, \"o\"),\n                        String.class)))));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":527,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testWriteArray() {\n    assertEquals(\n        \"1 + integers[2 + index]\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.arrayIndex(\n                    Expressions.variable(int[].class, \"integers\"),\n                    Expressions.add(\n                        Expressions.constant(2),\n                        Expressions.variable(int.class, \"index\"))))));\n  }\n","date":"2020-04-06 04:57:49","endLine":905,"groupId":"1085","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testWriteArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/13/bc869ac710465a9aea6569422a3aee0ffba952.src","preCode":"  @Test public void testWriteArray() {\n    assertEquals(\n        \"1 + integers[2 + index]\",\n        Expressions.toString(\n            Expressions.add(\n                Expressions.constant(1),\n                Expressions.arrayIndex(\n                    Expressions.variable(int[].class, \"integers\"),\n                    Expressions.add(\n                        Expressions.constant(2),\n                        Expressions.variable(int.class, \"index\"))))));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":894,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
