[{"authorTime":"2017-04-14 20:58:21","codes":[{"authorDate":"2017-03-13 19:11:19","commitOrder":3,"curCode":"  @Test public void testMatchRecognize10() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern ( A B C | A C B | B A C | B C A | C A B | C B A)\\n\"\n        + \"    define\\n\"\n        + \"      A as A.price > PREV(A.price),\\n\"\n        + \"      B as B.price < prev(B.price),\\n\"\n        + \"      C as C.price > prev(C.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"PATTERN ((((((((`A` `B`) `C`) | ((`A` `C`) `B`)) | ((`B` `A`) `C`)) \"\n        + \"| ((`B` `C`) `A`)) | ((`C` `A`) `B`)) | ((`C` `B`) `A`)))\\n\"\n        + \"DEFINE \"\n        + \"`A` AS (`A`.`PRICE` > PREV(`A`.`PRICE`, 1)), \"\n        + \"`B` AS (`B`.`PRICE` < PREV(`B`.`PRICE`, 1)), \"\n        + \"`C` AS (`C`.`PRICE` > PREV(`C`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-04-02 11:43:28","endLine":7365,"groupId":"13890","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognize10","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/56/4ce5fc6613223749e9a6c0acb13d4e8de540f1.src","preCode":"  @Test public void testMatchRecognize10() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern ( A B C | A C B | B A C | B C A | C A B | C B A)\\n\"\n        + \"    define\\n\"\n        + \"      A as A.price > PREV(A.price),\\n\"\n        + \"      B as B.price < prev(B.price),\\n\"\n        + \"      C as C.price > prev(C.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"PATTERN ((((((((`A` `B`) `C`) | ((`A` `C`) `B`)) | ((`B` `A`) `C`)) \"\n        + \"| ((`B` `C`) `A`)) | ((`C` `A`) `B`)) | ((`C` `B`) `A`)))\\n\"\n        + \"DEFINE \"\n        + \"`A` AS (`A`.`PRICE` > PREV(`A`.`PRICE`, 1)), \"\n        + \"`B` AS (`B`.`PRICE` < PREV(`B`.`PRICE`, 1)), \"\n        + \"`C` AS (`C`.`PRICE` > PREV(`C`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7345,"status":"NB"},{"authorDate":"2017-04-14 20:58:21","commitOrder":3,"curCode":"  @Test public void testMatchRecognizePatternSkip3() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"     after match skip to FIRST down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO FIRST `DOWN`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-04-25 09:26:09","endLine":7700,"groupId":"10705","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizePatternSkip3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/05/089bf17c0006002614a627b1c1efb599477b99.src","preCode":"  @Test public void testMatchRecognizePatternSkip3() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"     after match skip to FIRST down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO FIRST `DOWN`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7681,"status":"B"}],"commitId":"c850e227db583a697c8cc46585b33274b63ed2d0","commitMessage":"@@@[CALCITE-1643] AFTER MATCH sub-clause of MATCH_RECOGNIZE clause (Zhiqiang-He)\n\nClose apache/calcite#429\n","date":"2017-04-25 09:26:09","modifiedFileCount":"10","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testMatchRecognize10() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern ( A B C | A C B | B A C | B C A | C A B | C B A)\\n\"\n        + \"    define\\n\"\n        + \"      A as A.price > PREV(A.price),\\n\"\n        + \"      B as B.price < prev(B.price),\\n\"\n        + \"      C as C.price > prev(C.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"PATTERN ((((((((`A` `B`) `C`) | ((`A` `C`) `B`)) | ((`B` `A`) `C`)) \"\n        + \"| ((`B` `C`) `A`)) | ((`C` `A`) `B`)) | ((`C` `B`) `A`)))\\n\"\n        + \"DEFINE \"\n        + \"`A` AS (`A`.`PRICE` > PREV(`A`.`PRICE`, 1)), \"\n        + \"`B` AS (`B`.`PRICE` < PREV(`B`.`PRICE`, 1)), \"\n        + \"`C` AS (`C`.`PRICE` > PREV(`C`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":7750,"groupId":"10897","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognize10","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testMatchRecognize10() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"    pattern ( A B C | A C B | B A C | B C A | C A B | C B A)\\n\"\n        + \"    define\\n\"\n        + \"      A as A.price > PREV(A.price),\\n\"\n        + \"      B as B.price < prev(B.price),\\n\"\n        + \"      C as C.price > prev(C.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"PATTERN ((((((((`A` `B`) `C`) | ((`A` `C`) `B`)) | ((`B` `A`) `C`)) \"\n        + \"| ((`B` `C`) `A`)) | ((`C` `A`) `B`)) | ((`C` `B`) `A`)))\\n\"\n        + \"DEFINE \"\n        + \"`A` AS (`A`.`PRICE` > PREV(`A`.`PRICE`, 1)), \"\n        + \"`B` AS (`B`.`PRICE` < PREV(`B`.`PRICE`, 1)), \"\n        + \"`C` AS (`C`.`PRICE` > PREV(`C`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7730,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testMatchRecognizePatternSkip3() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"     after match skip to FIRST down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO FIRST `DOWN`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":8057,"groupId":"10897","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizePatternSkip3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testMatchRecognizePatternSkip3() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"     after match skip to FIRST down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO FIRST `DOWN`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8038,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
