[{"authorTime":"2019-03-11 20:27:15","codes":[{"authorDate":"2019-03-11 20:27:15","commitOrder":1,"curCode":"  @Test public void testTableFunctionScan() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final SqlOperator dedupFunction =\n        new MockSqlOperatorTable.DedupFunction();\n    RelNode root = builder.scan(\"EMP\")\n        .scan(\"DEPT\")\n        .functionScan(dedupFunction, 2, builder.cursor(2, 0),\n            builder.cursor(2, 1))\n        .build();\n    final String expected = \"LogicalTableFunctionScan(\"\n        + \"invocation=[DEDUP(CURSOR($0), CURSOR($1))], \"\n        + \"rowType=[RecordType(VARCHAR(1024) NAME)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"  LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n\n    \r\n    try {\n      RelNode node = builder.build();\n      fail(\"expected error, got \" + node);\n    } catch (NoSuchElementException e) {\n      assertNull(e.getMessage());\n    }\n  }\n","date":"2019-03-30 10:11:21","endLine":332,"groupId":"8006","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableFunctionScan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/75/feb03d261a171becdd814243ae48e08383c3b1.src","preCode":"  @Test public void testTableFunctionScan() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final SqlOperator dedupFunction =\n        new MockSqlOperatorTable.DedupFunction();\n    RelNode root = builder.scan(\"EMP\")\n        .scan(\"DEPT\")\n        .functionScan(dedupFunction, 2, builder.cursor(2, 0),\n            builder.cursor(2, 1))\n        .build();\n    final String expected = \"LogicalTableFunctionScan(\"\n        + \"invocation=[DEDUP(CURSOR($0), CURSOR($1))], \"\n        + \"rowType=[RecordType(VARCHAR(1024) NAME)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"  LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n\n    \r\n    try {\n      RelNode node = builder.build();\n      fail(\"expected error, got \" + node);\n    } catch (NoSuchElementException e) {\n      assertNull(e.getMessage());\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"B"},{"authorDate":"2019-03-11 20:27:15","commitOrder":1,"curCode":"  @Test public void testTableFunctionScanZeroInputs() {\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final SqlOperator rampFunction = new MockSqlOperatorTable.RampFunction();\n    RelNode root = builder.functionScan(rampFunction, 0, builder.literal(3))\n        .build();\n    final String expected = \"LogicalTableFunctionScan(invocation=[RAMP(3)], \"\n        + \"rowType=[RecordType(INTEGER I)])\\n\";\n    assertThat(root, hasTree(expected));\n\n    \r\n    try {\n      RelNode node = builder.build();\n      fail(\"expected error, got \" + node);\n    } catch (NoSuchElementException e) {\n      assertNull(e.getMessage());\n    }\n  }\n","date":"2019-03-30 10:11:21","endLine":353,"groupId":"14222","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableFunctionScanZeroInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/75/feb03d261a171becdd814243ae48e08383c3b1.src","preCode":"  @Test public void testTableFunctionScanZeroInputs() {\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final SqlOperator rampFunction = new MockSqlOperatorTable.RampFunction();\n    RelNode root = builder.functionScan(rampFunction, 0, builder.literal(3))\n        .build();\n    final String expected = \"LogicalTableFunctionScan(invocation=[RAMP(3)], \"\n        + \"rowType=[RecordType(INTEGER I)])\\n\";\n    assertThat(root, hasTree(expected));\n\n    \r\n    try {\n      RelNode node = builder.build();\n      fail(\"expected error, got \" + node);\n    } catch (NoSuchElementException e) {\n      assertNull(e.getMessage());\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"B"}],"commitId":"a3c0abd920e65afd47abc2afffd645d6f851ad15","commitMessage":"@@@[CALCITE-1515] In RelBuilder.  add functionScan method to create TableFunctionScan (Chunwei Lei)\n\nAllow RelBuilder.functionScan() to have 0 relational inputs.  rework\nthe RexCall produced by the CURSOR function.  and add an overload of\nfunctionScan with \"(RexNode...)\" arguments. (Julian Hyde)\n\nClose apache/calcite#1102\n","date":"2019-03-30 10:11:21","modifiedFileCount":"5","status":"B","submitter":"Chunwei Lei"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testTableFunctionScan() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final SqlOperator dedupFunction =\n        new MockSqlOperatorTable.DedupFunction();\n    RelNode root = builder.scan(\"EMP\")\n        .scan(\"DEPT\")\n        .functionScan(dedupFunction, 2, builder.cursor(2, 0),\n            builder.cursor(2, 1))\n        .build();\n    final String expected = \"LogicalTableFunctionScan(\"\n        + \"invocation=[DEDUP(CURSOR($0), CURSOR($1))], \"\n        + \"rowType=[RecordType(VARCHAR(1024) NAME)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"  LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n\n    \r\n    try {\n      RelNode node = builder.build();\n      fail(\"expected error, got \" + node);\n    } catch (NoSuchElementException e) {\n      assertNull(e.getMessage());\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":355,"groupId":"101243","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableFunctionScan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testTableFunctionScan() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final SqlOperator dedupFunction =\n        new MockSqlOperatorTable.DedupFunction();\n    RelNode root = builder.scan(\"EMP\")\n        .scan(\"DEPT\")\n        .functionScan(dedupFunction, 2, builder.cursor(2, 0),\n            builder.cursor(2, 1))\n        .build();\n    final String expected = \"LogicalTableFunctionScan(\"\n        + \"invocation=[DEDUP(CURSOR($0), CURSOR($1))], \"\n        + \"rowType=[RecordType(VARCHAR(1024) NAME)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"\n        + \"  LogicalTableScan(table=[[scott, DEPT]])\\n\";\n    assertThat(root, hasTree(expected));\n\n    \r\n    try {\n      RelNode node = builder.build();\n      fail(\"expected error, got \" + node);\n    } catch (NoSuchElementException e) {\n      assertNull(e.getMessage());\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testTableFunctionScanZeroInputs() {\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final SqlOperator rampFunction = new MockSqlOperatorTable.RampFunction();\n    RelNode root = builder.functionScan(rampFunction, 0, builder.literal(3))\n        .build();\n    final String expected = \"LogicalTableFunctionScan(invocation=[RAMP(3)], \"\n        + \"rowType=[RecordType(INTEGER I)])\\n\";\n    assertThat(root, hasTree(expected));\n\n    \r\n    try {\n      RelNode node = builder.build();\n      fail(\"expected error, got \" + node);\n    } catch (NoSuchElementException e) {\n      assertNull(e.getMessage());\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":376,"groupId":"101243","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableFunctionScanZeroInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testTableFunctionScanZeroInputs() {\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final SqlOperator rampFunction = new MockSqlOperatorTable.RampFunction();\n    RelNode root = builder.functionScan(rampFunction, 0, builder.literal(3))\n        .build();\n    final String expected = \"LogicalTableFunctionScan(invocation=[RAMP(3)], \"\n        + \"rowType=[RecordType(INTEGER I)])\\n\";\n    assertThat(root, hasTree(expected));\n\n    \r\n    try {\n      RelNode node = builder.build();\n      fail(\"expected error, got \" + node);\n    } catch (NoSuchElementException e) {\n      assertNull(e.getMessage());\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
