[{"authorTime":"2015-09-22 06:39:25","codes":[{"authorDate":"2015-09-22 06:39:25","commitOrder":1,"curCode":"  @Test public void testReduceNestedCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n            + \"from emp\\n\"\n            + \"where case when (sal = 1000) then\\n\"\n            + \"(case when sal = 1000 then null else 1 end is null) else\\n\"\n            + \"(case when sal = 2000 then null else 1 end is null) end is true\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","date":"2015-09-29 03:07:15","endLine":162,"groupId":"5726","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceNestedCaseWhen","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/32/9bf760f80e6d7806b30a09eb3f87c43b5ed0dc.src","preCode":"  @Test public void testReduceNestedCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n            + \"from emp\\n\"\n            + \"where case when (sal = 1000) then\\n\"\n            + \"(case when sal = 1000 then null else 1 end is null) else\\n\"\n            + \"(case when sal = 2000 then null else 1 end is null) end is true\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"B"},{"authorDate":"2015-09-22 06:39:25","commitOrder":1,"curCode":"  @Test public void testReduceORCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n        + \"from emp\\n\"\n        + \"where case when sal = 1000 then null else 1 end is null\\n\"\n        + \"OR case when sal = 2000 then null else 1 end is null\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","date":"2015-09-29 03:07:15","endLine":178,"groupId":"5726","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceORCaseWhen","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/32/9bf760f80e6d7806b30a09eb3f87c43b5ed0dc.src","preCode":"  @Test public void testReduceORCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n        + \"from emp\\n\"\n        + \"where case when sal = 1000 then null else 1 end is null\\n\"\n        + \"OR case when sal = 2000 then null else 1 end is null\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"}],"commitId":"2fa63dda5809d519dc60aa36f464476bed961df3","commitMessage":"@@@[CALCITE-895] Simplify \"(CASE ... END) = constant\" inside AND or OR (Hsuan-Yi Chu)\n\nClose apache/incubator-calcite#135\n","date":"2015-09-29 03:07:15","modifiedFileCount":"2","status":"B","submitter":"Hsuan-Yi Chu"},{"authorTime":"2015-09-29 10:29:15","codes":[{"authorDate":"2015-09-22 06:39:25","commitOrder":2,"curCode":"  @Test public void testReduceNestedCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n            + \"from emp\\n\"\n            + \"where case when (sal = 1000) then\\n\"\n            + \"(case when sal = 1000 then null else 1 end is null) else\\n\"\n            + \"(case when sal = 2000 then null else 1 end is null) end is true\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","date":"2015-09-29 03:07:15","endLine":162,"groupId":"5726","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceNestedCaseWhen","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/32/9bf760f80e6d7806b30a09eb3f87c43b5ed0dc.src","preCode":"  @Test public void testReduceNestedCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n            + \"from emp\\n\"\n            + \"where case when (sal = 1000) then\\n\"\n            + \"(case when sal = 1000 then null else 1 end is null) else\\n\"\n            + \"(case when sal = 2000 then null else 1 end is null) end is true\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"N"},{"authorDate":"2015-09-29 10:29:15","commitOrder":2,"curCode":"  @Test public void testReduceOrCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n        + \"from emp\\n\"\n        + \"where case when sal = 1000 then null else 1 end is null\\n\"\n        + \"OR case when sal = 2000 then null else 1 end is null\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","date":"2015-09-30 02:43:57","endLine":178,"groupId":"5726","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceOrCaseWhen","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bd/f67fca3f08cc993ead7e7069d71429a83a73bc.src","preCode":"  @Test public void testReduceORCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n        + \"from emp\\n\"\n        + \"where case when sal = 1000 then null else 1 end is null\\n\"\n        + \"OR case when sal = 2000 then null else 1 end is null\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"9adf259763a9c52a6db8d4a19425722fbedcaa6c","commitMessage":"@@@[CALCITE-902] Match nullability when reducing expressions in a Project\n","date":"2015-09-30 02:43:57","modifiedFileCount":"3","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-10-14 20:53:23","codes":[{"authorDate":"2019-10-14 20:53:23","commitOrder":3,"curCode":"  @Test public void testReduceNestedCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n            + \"from emp\\n\"\n            + \"where case when (sal = 1000) then\\n\"\n            + \"(case when sal = 1000 then null else 1 end is null) else\\n\"\n            + \"(case when sal = 2000 then null else 1 end is null) end is true\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2019-10-15 09:37:32","endLine":264,"groupId":"5726","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceNestedCaseWhen","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/51/b671b65dfc7e5613e63058680b48e9da669c6b.src","preCode":"  @Test public void testReduceNestedCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n            + \"from emp\\n\"\n            + \"where case when (sal = 1000) then\\n\"\n            + \"(case when sal = 1000 then null else 1 end is null) else\\n\"\n            + \"(case when sal = 2000 then null else 1 end is null) end is true\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"},{"authorDate":"2019-10-14 20:53:23","commitOrder":3,"curCode":"  @Test public void testReduceOrCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n        + \"from emp\\n\"\n        + \"where case when sal = 1000 then null else 1 end is null\\n\"\n        + \"OR case when sal = 2000 then null else 1 end is null\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2019-10-15 09:37:32","endLine":339,"groupId":"5726","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceOrCaseWhen","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/51/b671b65dfc7e5613e63058680b48e9da669c6b.src","preCode":"  @Test public void testReduceOrCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n        + \"from emp\\n\"\n        + \"where case when sal = 1000 then null else 1 end is null\\n\"\n        + \"OR case when sal = 2000 then null else 1 end is null\";\n    checkPlanning(tester, preProgram, hepPlanner, sql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"8da131c08afe67861ced49bc6180a20f66be52fb","commitMessage":"@@@[CALCITE-3410] Simplify RelOptRulesTest and HepPlannerTest by making test methods fluent\n\n* Add method 'Sql.withTester'\n* In RelOptTestBase.  deprecate checkPlanning method\n","date":"2019-10-15 09:37:32","modifiedFileCount":"3","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testReduceNestedCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n            + \"from emp\\n\"\n            + \"where case when (sal = 1000) then\\n\"\n            + \"(case when sal = 1000 then null else 1 end is null) else\\n\"\n            + \"(case when sal = 2000 then null else 1 end is null) end is true\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-04-06 04:57:49","endLine":269,"groupId":"5726","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceNestedCaseWhen","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/c56354833d8acfcc210ae25313c78e9332a2ba.src","preCode":"  @Test public void testReduceNestedCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n            + \"from emp\\n\"\n            + \"where case when (sal = 1000) then\\n\"\n            + \"(case when sal = 1000 then null else 1 end is null) else\\n\"\n            + \"(case when sal = 2000 then null else 1 end is null) end is true\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testReduceOrCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n        + \"from emp\\n\"\n        + \"where case when sal = 1000 then null else 1 end is null\\n\"\n        + \"OR case when sal = 2000 then null else 1 end is null\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-04-06 04:57:49","endLine":363,"groupId":"5726","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceOrCaseWhen","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/c56354833d8acfcc210ae25313c78e9332a2ba.src","preCode":"  @Test public void testReduceOrCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n        + \"from emp\\n\"\n        + \"where case when sal = 1000 then null else 1 end is null\\n\"\n        + \"OR case when sal = 2000 then null else 1 end is null\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 04:45:12","codes":[{"authorDate":"2020-07-09 04:45:12","commitOrder":5,"curCode":"  @Test void testReduceNestedCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(CoreRules.FILTER_REDUCE_EXPRESSIONS);\n\n    final String sql = \"select sal\\n\"\n            + \"from emp\\n\"\n            + \"where case when (sal = 1000) then\\n\"\n            + \"(case when sal = 1000 then null else 1 end is null) else\\n\"\n            + \"(case when sal = 2000 then null else 1 end is null) end is true\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-07-12 06:58:28","endLine":219,"groupId":"4351","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceNestedCaseWhen","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/d77aee9e74f65d9e26a1ffa96400062e1eb119.src","preCode":"  @Test void testReduceNestedCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n            + \"from emp\\n\"\n            + \"where case when (sal = 1000) then\\n\"\n            + \"(case when sal = 1000 then null else 1 end is null) else\\n\"\n            + \"(case when sal = 2000 then null else 1 end is null) end is true\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"},{"authorDate":"2020-07-09 04:45:12","commitOrder":5,"curCode":"  @Test void testReduceOrCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(CoreRules.FILTER_REDUCE_EXPRESSIONS);\n\n    final String sql = \"select sal\\n\"\n        + \"from emp\\n\"\n        + \"where case when sal = 1000 then null else 1 end is null\\n\"\n        + \"OR case when sal = 2000 then null else 1 end is null\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-07-12 06:58:28","endLine":313,"groupId":"4351","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceOrCaseWhen","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/d77aee9e74f65d9e26a1ffa96400062e1eb119.src","preCode":"  @Test void testReduceOrCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(ReduceExpressionsRule.FILTER_INSTANCE);\n\n    final String sql = \"select sal\\n\"\n        + \"from emp\\n\"\n        + \"where case when sal = 1000 then null else 1 end is null\\n\"\n        + \"OR case when sal = 2000 then null else 1 end is null\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"23b26b6287315cc2cd236e705bb651077488fc5c","commitMessage":"@@@In preparation for [CALCITE-3923] and [CALCITE-4079].  deprecate fields and methods that will be removed between 1.24 and 1.25\n\nAlso.  in RelNode.  change some methods from 'to removed before 2.0'\nto 'to be removed before 1.25'. The methods are sDistinct(). \nisKey(ImmutableBitSet).  getQuery().  getRows().  getVariablesStopped(). \ncomputeSelfCost().  isValid(boolean).  getCollationList().  getChildExps().\n","date":"2020-07-12 06:58:28","modifiedFileCount":"137","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-08-05 16:20:39","codes":[{"authorDate":"2020-08-05 16:20:39","commitOrder":6,"curCode":"  @Test void testReduceNestedCaseWhen() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(CoreRules.FILTER_REDUCE_EXPRESSIONS);\n\n    final String sql = \"select sal\\n\"\n            + \"from emp\\n\"\n            + \"where case when (sal = 1000) then\\n\"\n            + \"(case when sal = 1000 then null else 1 end is null) else\\n\"\n            + \"(case when sal = 2000 then null else 1 end is null) end is true\";\n    sql(sql).with(hepPlanner)\n        .check();\n  }\n","date":"2020-08-08 06:49:00","endLine":207,"groupId":"10958","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceNestedCaseWhen","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c7/a464a80ae93f49d699fc44643f1fd0e5bacd57.src","preCode":"  @Test void testReduceNestedCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(CoreRules.FILTER_REDUCE_EXPRESSIONS);\n\n    final String sql = \"select sal\\n\"\n            + \"from emp\\n\"\n            + \"where case when (sal = 1000) then\\n\"\n            + \"(case when sal = 1000 then null else 1 end is null) else\\n\"\n            + \"(case when sal = 2000 then null else 1 end is null) end is true\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2020-08-05 16:20:39","commitOrder":6,"curCode":"  @Test void testReduceOrCaseWhen() {\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(CoreRules.FILTER_REDUCE_EXPRESSIONS);\n\n    final String sql = \"select sal\\n\"\n        + \"from emp\\n\"\n        + \"where case when sal = 1000 then null else 1 end is null\\n\"\n        + \"OR case when sal = 2000 then null else 1 end is null\";\n    sql(sql).with(hepPlanner)\n        .check();\n  }\n","date":"2020-08-08 06:49:00","endLine":295,"groupId":"10958","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceOrCaseWhen","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c7/a464a80ae93f49d699fc44643f1fd0e5bacd57.src","preCode":"  @Test void testReduceOrCaseWhen() {\n    HepProgram preProgram = new HepProgramBuilder()\n        .build();\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleClass(ReduceExpressionsRule.class);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n    hepPlanner.addRule(CoreRules.FILTER_REDUCE_EXPRESSIONS);\n\n    final String sql = \"select sal\\n\"\n        + \"from emp\\n\"\n        + \"where case when sal = 1000 then null else 1 end is null\\n\"\n        + \"OR case when sal = 2000 then null else 1 end is null\";\n    sql(sql).withPre(preProgram)\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"}],"commitId":"3f75e5ee4c9393842d5df61d1f32eb4255a77dde","commitMessage":"@@@Refactor RelOptRulesTest\n\nIn tests that use programs that are simple lists of rules. \nuse the `withRule` and `withPreRule` methods rather than\ncreating explicit programs. It makes tests more concise.\n","date":"2020-08-08 06:49:00","modifiedFileCount":"2","status":"M","submitter":"Julian Hyde"}]
