[{"authorTime":"2016-03-30 08:41:18","codes":[{"authorDate":"2016-06-14 00:58:22","commitOrder":2,"curCode":"  @Test public void testCastIntervalToInterval() {\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to minute)\",\n        \"+53:00\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval day to minute)\",\n        \"+2 05:00\",\n        \"INTERVAL DAY TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to second)\",\n        \"+53:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour)\",\n        \"+53\",\n        \"INTERVAL HOUR NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '-29:15' hour to minute as interval day to hour)\",\n        \"-1 05\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n  }\n","date":"2016-06-28 05:14:19","endLine":920,"groupId":"1330","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastIntervalToInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e8/1ed4ca2441054478c2f927aad5d9aa1fb40467.src","preCode":"  @Test public void testCastIntervalToInterval() {\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to minute)\",\n        \"+53:00\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval day to minute)\",\n        \"+2 05:00\",\n        \"INTERVAL DAY TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to second)\",\n        \"+53:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour)\",\n        \"+53\",\n        \"INTERVAL HOUR NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '-29:15' hour to minute as interval day to hour)\",\n        \"-1 05\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":899,"status":"B"},{"authorDate":"2016-03-30 08:41:18","commitOrder":2,"curCode":"  @Test public void testExtractDate() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    tester.checkScalar(\n        \"extract(epoch from date '2008-2-23')\",\n        \"1203724800\", \r\n                      \r\n        \"BIGINT NOT NULL\");\n\n    if (TODO) {\n      \r\n      \r\n      tester.checkScalar(\n          \"extract(second from date '2008-2-23')\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    tester.checkScalar(\n        \"extract(minute from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(hour from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(day from date '2008-2-23')\",\n        \"23\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(month from date '2008-2-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from date '2008-4-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    \r\n    tester.checkFails(\n        \"extract(doy from date '2008-2-23')\",\n        \"cannot translate call EXTRACT.*\",\n        true);\n\n    \r\n    tester.checkFails(\n        \"extract(dow from date '2008-2-23')\",\n        \"cannot translate call EXTRACT.*\",\n        true);\n\n    \r\n    tester.checkFails(\n        \"extract(week from date '2008-2-23')\",\n        \"cannot translate call EXTRACT.*\",\n        true);\n\n    tester.checkScalar(\n        \"extract(decade from date '2008-2-23')\",\n        \"200\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(century from date '2008-2-23')\",\n        \"20\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millennium from date '2008-2-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n  }\n","date":"2016-06-05 12:35:29","endLine":4622,"groupId":"9907","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/03/0e2f3893be66f7bf78ffd13248273eede1565b.src","preCode":"  @Test public void testExtractDate() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    tester.checkScalar(\n        \"extract(epoch from date '2008-2-23')\",\n        \"1203724800\", \r\n                      \r\n        \"BIGINT NOT NULL\");\n\n    if (TODO) {\n      \r\n      \r\n      tester.checkScalar(\n          \"extract(second from date '2008-2-23')\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    tester.checkScalar(\n        \"extract(minute from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(hour from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(day from date '2008-2-23')\",\n        \"23\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(month from date '2008-2-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from date '2008-4-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    \r\n    tester.checkFails(\n        \"extract(doy from date '2008-2-23')\",\n        \"cannot translate call EXTRACT.*\",\n        true);\n\n    \r\n    tester.checkFails(\n        \"extract(dow from date '2008-2-23')\",\n        \"cannot translate call EXTRACT.*\",\n        true);\n\n    \r\n    tester.checkFails(\n        \"extract(week from date '2008-2-23')\",\n        \"cannot translate call EXTRACT.*\",\n        true);\n\n    tester.checkScalar(\n        \"extract(decade from date '2008-2-23')\",\n        \"200\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(century from date '2008-2-23')\",\n        \"20\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millennium from date '2008-2-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4539,"status":"NB"}],"commitId":"5511253b5c46741dfed8e1ac8d4fa23025aeb3c5","commitMessage":"@@@[CALCITE-308] DATE + INTERVAL gives wrong result\n\nAll tests for operations on intervals now succeed.\n","date":"2016-06-28 05:14:19","modifiedFileCount":"17","status":"M","submitter":"Julian Hyde"},{"authorTime":"2017-01-28 14:28:37","codes":[{"authorDate":"2016-06-14 00:58:22","commitOrder":3,"curCode":"  @Test public void testCastIntervalToInterval() {\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to minute)\",\n        \"+53:00\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval day to minute)\",\n        \"+2 05:00\",\n        \"INTERVAL DAY TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to second)\",\n        \"+53:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour)\",\n        \"+53\",\n        \"INTERVAL HOUR NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '-29:15' hour to minute as interval day to hour)\",\n        \"-1 05\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n  }\n","date":"2016-06-28 05:14:19","endLine":920,"groupId":"1330","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastIntervalToInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e8/1ed4ca2441054478c2f927aad5d9aa1fb40467.src","preCode":"  @Test public void testCastIntervalToInterval() {\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to minute)\",\n        \"+53:00\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval day to minute)\",\n        \"+2 05:00\",\n        \"INTERVAL DAY TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to second)\",\n        \"+53:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour)\",\n        \"+53\",\n        \"INTERVAL HOUR NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '-29:15' hour to minute as interval day to hour)\",\n        \"-1 05\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":899,"status":"N"},{"authorDate":"2017-01-28 14:28:37","commitOrder":3,"curCode":"  @Test public void testExtractDate() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    tester.checkScalar(\n        \"extract(epoch from date '2008-2-23')\",\n        \"1203724800\", \r\n                      \r\n        \"BIGINT NOT NULL\");\n\n    if (TODO) {\n      \r\n      \r\n      tester.checkScalar(\n          \"extract(second from date '2008-2-23')\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    tester.checkScalar(\n        \"extract(minute from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(hour from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(day from date '2008-2-23')\",\n        \"23\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(month from date '2008-2-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from date '2008-4-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(doy from date '2008-2-23')\",\n        \"54\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-23')\",\n        \"7\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-24')\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from date '2008-2-23')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from timestamp '2008-2-23 01:23:45')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from cast(null as date))\",\n        null,\n        \"BIGINT\");\n\n    tester.checkScalar(\n        \"extract(decade from date '2008-2-23')\",\n        \"200\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(century from date '2008-2-23')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2001-01-01')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2000-12-31')\",\n        \"20\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '1852-06-07')\",\n        \"19\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '0001-02-01')\",\n        \"1\", \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(millennium from date '2000-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '1969-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2000-12-31')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2001-01-01')\",\n        \"3\", \"BIGINT NOT NULL\");\n  }\n","date":"2017-06-01 08:59:13","endLine":5461,"groupId":"1330","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/91/6cd3987f6c37ce17e3e7875ba8f1539b0da302.src","preCode":"  @Test public void testExtractDate() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    tester.checkScalar(\n        \"extract(epoch from date '2008-2-23')\",\n        \"1203724800\", \r\n                      \r\n        \"BIGINT NOT NULL\");\n\n    if (TODO) {\n      \r\n      \r\n      tester.checkScalar(\n          \"extract(second from date '2008-2-23')\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    tester.checkScalar(\n        \"extract(minute from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(hour from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(day from date '2008-2-23')\",\n        \"23\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(month from date '2008-2-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from date '2008-4-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    \r\n    tester.checkFails(\n        \"extract(doy from date '2008-2-23')\",\n        \"cannot translate call EXTRACT.*\",\n        true);\n\n    \r\n    tester.checkFails(\n        \"extract(dow from date '2008-2-23')\",\n        \"cannot translate call EXTRACT.*\",\n        true);\n\n    \r\n    tester.checkFails(\n        \"extract(week from date '2008-2-23')\",\n        \"cannot translate call EXTRACT.*\",\n        true);\n\n    tester.checkScalar(\n        \"extract(decade from date '2008-2-23')\",\n        \"200\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(century from date '2008-2-23')\",\n        \"20\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millennium from date '2008-2-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5356,"status":"M"}],"commitId":"6cb4d45b02b03a71f4fe1ce52844f750e3ec1fd8","commitMessage":"@@@[CALCITE-1613] Implement EXTRACT for time unit DOW.  DOY; and fix CENTURY\n\nRemove the functions and tests that were moved over to Avatica in\n[CALCITE-1608].\n\nLeave functions and tests that were added in [CALCITE-1639] and have not\nyet been moved to Avatica.\n","date":"2017-06-01 08:59:13","modifiedFileCount":"3","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-06-12 06:09:00","codes":[{"authorDate":"2016-06-14 00:58:22","commitOrder":4,"curCode":"  @Test public void testCastIntervalToInterval() {\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to minute)\",\n        \"+53:00\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval day to minute)\",\n        \"+2 05:00\",\n        \"INTERVAL DAY TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to second)\",\n        \"+53:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour)\",\n        \"+53\",\n        \"INTERVAL HOUR NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '-29:15' hour to minute as interval day to hour)\",\n        \"-1 05\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n  }\n","date":"2016-06-28 05:14:19","endLine":920,"groupId":"1330","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastIntervalToInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e8/1ed4ca2441054478c2f927aad5d9aa1fb40467.src","preCode":"  @Test public void testCastIntervalToInterval() {\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to minute)\",\n        \"+53:00\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval day to minute)\",\n        \"+2 05:00\",\n        \"INTERVAL DAY TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to second)\",\n        \"+53:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour)\",\n        \"+53\",\n        \"INTERVAL HOUR NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '-29:15' hour to minute as interval day to hour)\",\n        \"-1 05\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":899,"status":"N"},{"authorDate":"2018-06-12 06:09:00","commitOrder":4,"curCode":"  @Test public void testExtractDate() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    tester.checkScalar(\n        \"extract(epoch from date '2008-2-23')\",\n        \"1203724800\", \r\n                      \r\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(second from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '9999-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '0001-1-1')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(hour from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(day from date '2008-2-23')\",\n        \"23\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(month from date '2008-2-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from date '2008-4-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(doy from date '2008-2-23')\",\n        \"54\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-23')\",\n        \"7\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-24')\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from date '2008-2-23')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from timestamp '2008-2-23 01:23:45')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from cast(null as date))\",\n        null,\n        \"BIGINT\");\n\n    tester.checkScalar(\n        \"extract(decade from date '2008-2-23')\",\n        \"200\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(century from date '2008-2-23')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2001-01-01')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2000-12-31')\",\n        \"20\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '1852-06-07')\",\n        \"19\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '0001-02-01')\",\n        \"1\", \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(millennium from date '2000-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '1969-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2000-12-31')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2001-01-01')\",\n        \"3\", \"BIGINT NOT NULL\");\n  }\n","date":"2018-06-12 15:18:08","endLine":5726,"groupId":"1330","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6c/a3b6ce52794176e1af3e99c2c46b38e7f0f468.src","preCode":"  @Test public void testExtractDate() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    tester.checkScalar(\n        \"extract(epoch from date '2008-2-23')\",\n        \"1203724800\", \r\n                      \r\n        \"BIGINT NOT NULL\");\n\n    if (TODO) {\n      \r\n      \r\n      tester.checkScalar(\n          \"extract(second from date '2008-2-23')\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    tester.checkScalar(\n        \"extract(minute from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(hour from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(day from date '2008-2-23')\",\n        \"23\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(month from date '2008-2-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from date '2008-4-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(doy from date '2008-2-23')\",\n        \"54\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-23')\",\n        \"7\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-24')\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from date '2008-2-23')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from timestamp '2008-2-23 01:23:45')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from cast(null as date))\",\n        null,\n        \"BIGINT\");\n\n    tester.checkScalar(\n        \"extract(decade from date '2008-2-23')\",\n        \"200\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(century from date '2008-2-23')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2001-01-01')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2000-12-31')\",\n        \"20\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '1852-06-07')\",\n        \"19\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '0001-02-01')\",\n        \"1\", \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(millennium from date '2000-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '1969-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2000-12-31')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2001-01-01')\",\n        \"3\", \"BIGINT NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5615,"status":"M"}],"commitId":"a9d6cfdfdce908b31a4361ac0460b83548d0fd4b","commitMessage":"@@@[CALCITE-2324] EXTRACT function: HOUR.  MINUTE and SECOND parts of a DATE must be zero (Sergey Nuyanzin)\n\nClose apache/calcite#728\n\nChange-Id: Iedb930409a4ca7ab778c5ead2eff330b2b316ede\n","date":"2018-06-12 15:18:08","modifiedFileCount":"2","status":"M","submitter":"snuyanzin"},{"authorTime":"2018-05-28 17:23:39","codes":[{"authorDate":"2016-06-14 00:58:22","commitOrder":5,"curCode":"  @Test public void testCastIntervalToInterval() {\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to minute)\",\n        \"+53:00\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval day to minute)\",\n        \"+2 05:00\",\n        \"INTERVAL DAY TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to second)\",\n        \"+53:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour)\",\n        \"+53\",\n        \"INTERVAL HOUR NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '-29:15' hour to minute as interval day to hour)\",\n        \"-1 05\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n  }\n","date":"2016-06-28 05:14:19","endLine":920,"groupId":"1330","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastIntervalToInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e8/1ed4ca2441054478c2f927aad5d9aa1fb40467.src","preCode":"  @Test public void testCastIntervalToInterval() {\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to minute)\",\n        \"+53:00\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval day to minute)\",\n        \"+2 05:00\",\n        \"INTERVAL DAY TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to second)\",\n        \"+53:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour)\",\n        \"+53\",\n        \"INTERVAL HOUR NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '-29:15' hour to minute as interval day to hour)\",\n        \"-1 05\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":899,"status":"N"},{"authorDate":"2018-05-28 17:23:39","commitOrder":5,"curCode":"  @Test public void testExtractDate() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    tester.checkScalar(\n        \"extract(epoch from date '2008-2-23')\",\n        \"1203724800\", \r\n                      \r\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(second from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '9999-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '0001-1-1')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(hour from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(day from date '2008-2-23')\",\n        \"23\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(month from date '2008-2-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from date '2008-4-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(isoyear from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(doy from date '2008-2-23')\",\n        \"54\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-23')\",\n        \"7\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-24')\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(isodow from date '2008-2-23')\",\n        \"6\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(isodow from date '2008-2-24')\",\n        \"7\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from date '2008-2-23')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from timestamp '2008-2-23 01:23:45')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from cast(null as date))\",\n        null,\n        \"BIGINT\");\n\n    tester.checkScalar(\n        \"extract(decade from date '2008-2-23')\",\n        \"200\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(century from date '2008-2-23')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2001-01-01')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2000-12-31')\",\n        \"20\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '1852-06-07')\",\n        \"19\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '0001-02-01')\",\n        \"1\", \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(millennium from date '2000-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '1969-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2000-12-31')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2001-01-01')\",\n        \"3\", \"BIGINT NOT NULL\");\n  }\n","date":"2018-06-29 10:13:12","endLine":5989,"groupId":"1330","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7a/b856b8f823f2f204aa344a89ce905597f4f435.src","preCode":"  @Test public void testExtractDate() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    tester.checkScalar(\n        \"extract(epoch from date '2008-2-23')\",\n        \"1203724800\", \r\n                      \r\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(second from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '9999-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '0001-1-1')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(hour from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(day from date '2008-2-23')\",\n        \"23\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(month from date '2008-2-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from date '2008-4-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(doy from date '2008-2-23')\",\n        \"54\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-23')\",\n        \"7\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-24')\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from date '2008-2-23')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from timestamp '2008-2-23 01:23:45')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from cast(null as date))\",\n        null,\n        \"BIGINT\");\n\n    tester.checkScalar(\n        \"extract(decade from date '2008-2-23')\",\n        \"200\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(century from date '2008-2-23')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2001-01-01')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2000-12-31')\",\n        \"20\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '1852-06-07')\",\n        \"19\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '0001-02-01')\",\n        \"1\", \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(millennium from date '2000-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '1969-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2000-12-31')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2001-01-01')\",\n        \"3\", \"BIGINT NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5863,"status":"M"}],"commitId":"03b7af4863359dd3bb0a4c84eb01d0e39f865cf6","commitMessage":"@@@[CALCITE-2303] In EXTRACT function.  support MICROSECONDS.  MILLISECONDS.  EPOCH.  ISODOW.  ISOYEAR and DECADE time units (Sergey Nuyanzin)\n\nClose apache/calcite#702\n","date":"2018-06-29 10:13:12","modifiedFileCount":"3","status":"M","submitter":"snuyanzin"},{"authorTime":"2019-07-25 16:03:25","codes":[{"authorDate":"2016-06-14 00:58:22","commitOrder":6,"curCode":"  @Test public void testCastIntervalToInterval() {\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to minute)\",\n        \"+53:00\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval day to minute)\",\n        \"+2 05:00\",\n        \"INTERVAL DAY TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to second)\",\n        \"+53:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour)\",\n        \"+53\",\n        \"INTERVAL HOUR NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '-29:15' hour to minute as interval day to hour)\",\n        \"-1 05\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n  }\n","date":"2016-06-28 05:14:19","endLine":920,"groupId":"1330","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastIntervalToInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e8/1ed4ca2441054478c2f927aad5d9aa1fb40467.src","preCode":"  @Test public void testCastIntervalToInterval() {\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to minute)\",\n        \"+53:00\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval day to minute)\",\n        \"+2 05:00\",\n        \"INTERVAL DAY TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to second)\",\n        \"+53:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour)\",\n        \"+53\",\n        \"INTERVAL HOUR NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '-29:15' hour to minute as interval day to hour)\",\n        \"-1 05\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":899,"status":"N"},{"authorDate":"2019-07-25 16:03:25","commitOrder":6,"curCode":"  @Test public void testExtractDate() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    tester.checkScalar(\n        \"extract(epoch from date '2008-2-23')\",\n        \"1203724800\", \r\n        \r\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(second from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millisecond from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(microsecond from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(nanosecond from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '9999-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '0001-1-1')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(hour from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(day from date '2008-2-23')\",\n        \"23\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(month from date '2008-2-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from date '2008-4-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(isoyear from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(doy from date '2008-2-23')\",\n        \"54\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-23')\",\n        \"7\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-24')\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(isodow from date '2008-2-23')\",\n        \"6\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(isodow from date '2008-2-24')\",\n        \"7\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from date '2008-2-23')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from timestamp '2008-2-23 01:23:45')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from cast(null as date))\",\n        null,\n        \"BIGINT\");\n\n    tester.checkScalar(\n        \"extract(decade from date '2008-2-23')\",\n        \"200\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(century from date '2008-2-23')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2001-01-01')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2000-12-31')\",\n        \"20\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '1852-06-07')\",\n        \"19\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '0001-02-01')\",\n        \"1\", \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(millennium from date '2000-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '1969-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2000-12-31')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2001-01-01')\",\n        \"3\", \"BIGINT NOT NULL\");\n  }\n","date":"2019-07-30 10:24:45","endLine":7065,"groupId":"1330","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/3e9583a4fecec0682f9480c6b4ee1c6a752132.src","preCode":"  @Test public void testExtractDate() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    tester.checkScalar(\n        \"extract(epoch from date '2008-2-23')\",\n        \"1203724800\", \r\n        \r\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(second from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '9999-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '0001-1-1')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(hour from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(day from date '2008-2-23')\",\n        \"23\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(month from date '2008-2-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from date '2008-4-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(isoyear from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(doy from date '2008-2-23')\",\n        \"54\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-23')\",\n        \"7\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-24')\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(isodow from date '2008-2-23')\",\n        \"6\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(isodow from date '2008-2-24')\",\n        \"7\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from date '2008-2-23')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from timestamp '2008-2-23 01:23:45')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from cast(null as date))\",\n        null,\n        \"BIGINT\");\n\n    tester.checkScalar(\n        \"extract(decade from date '2008-2-23')\",\n        \"200\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(century from date '2008-2-23')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2001-01-01')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2000-12-31')\",\n        \"20\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '1852-06-07')\",\n        \"19\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '0001-02-01')\",\n        \"1\", \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(millennium from date '2000-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '1969-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2000-12-31')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2001-01-01')\",\n        \"3\", \"BIGINT NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6924,"status":"M"}],"commitId":"ccad6f982fc0d6bd45424e602ec0432a1bcecda7","commitMessage":"@@@[CALCITE-2496] Return 0 in case of extract(milli/micro/nanosecond from datel) (Sergey Nuyanzin.  Chunwei Lei)\n","date":"2019-07-30 10:24:45","modifiedFileCount":"2","status":"M","submitter":"Chunwei Lei"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testCastIntervalToInterval() {\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to minute)\",\n        \"+53:00\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval day to minute)\",\n        \"+2 05:00\",\n        \"INTERVAL DAY TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to second)\",\n        \"+53:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour)\",\n        \"+53\",\n        \"INTERVAL HOUR NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '-29:15' hour to minute as interval day to hour)\",\n        \"-1 05\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1028,"groupId":"10741","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastIntervalToInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testCastIntervalToInterval() {\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to minute)\",\n        \"+53:00\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval day to minute)\",\n        \"+2 05:00\",\n        \"INTERVAL DAY TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour to second)\",\n        \"+53:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '2 5' day to hour as interval hour)\",\n        \"+53\",\n        \"INTERVAL HOUR NOT NULL\");\n    tester.checkScalar(\n        \"cast(interval '-29:15' hour to minute as interval day to hour)\",\n        \"-1 05\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1007,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testExtractDate() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    tester.checkScalar(\n        \"extract(epoch from date '2008-2-23')\",\n        \"1203724800\", \r\n        \r\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(second from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millisecond from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(microsecond from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(nanosecond from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '9999-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '0001-1-1')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(hour from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(day from date '2008-2-23')\",\n        \"23\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(month from date '2008-2-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from date '2008-4-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(isoyear from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(doy from date '2008-2-23')\",\n        \"54\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-23')\",\n        \"7\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-24')\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(isodow from date '2008-2-23')\",\n        \"6\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(isodow from date '2008-2-24')\",\n        \"7\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from date '2008-2-23')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from timestamp '2008-2-23 01:23:45')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from cast(null as date))\",\n        null,\n        \"BIGINT\");\n\n    tester.checkScalar(\n        \"extract(decade from date '2008-2-23')\",\n        \"200\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(century from date '2008-2-23')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2001-01-01')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2000-12-31')\",\n        \"20\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '1852-06-07')\",\n        \"19\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '0001-02-01')\",\n        \"1\", \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(millennium from date '2000-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '1969-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2000-12-31')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2001-01-01')\",\n        \"3\", \"BIGINT NOT NULL\");\n  }\n","date":"2020-04-06 04:57:49","endLine":7571,"groupId":"10741","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testExtractDate() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    tester.checkScalar(\n        \"extract(epoch from date '2008-2-23')\",\n        \"1203724800\", \r\n        \r\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(second from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millisecond from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(microsecond from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(nanosecond from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '9999-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '0001-1-1')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(minute from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(hour from date '2008-2-23')\",\n        \"0\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(day from date '2008-2-23')\",\n        \"23\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(month from date '2008-2-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from date '2008-4-23')\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(isoyear from date '2008-2-23')\",\n        \"2008\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(doy from date '2008-2-23')\",\n        \"54\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-23')\",\n        \"7\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(dow from date '2008-2-24')\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(isodow from date '2008-2-23')\",\n        \"6\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(isodow from date '2008-2-24')\",\n        \"7\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from date '2008-2-23')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from timestamp '2008-2-23 01:23:45')\",\n        \"8\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(week from cast(null as date))\",\n        null,\n        \"BIGINT\");\n\n    tester.checkScalar(\n        \"extract(decade from date '2008-2-23')\",\n        \"200\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(century from date '2008-2-23')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2001-01-01')\",\n        \"21\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '2000-12-31')\",\n        \"20\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '1852-06-07')\",\n        \"19\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(century from date '0001-02-01')\",\n        \"1\", \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\"extract(millennium from date '2000-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '1969-2-23')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2000-12-31')\",\n        \"2\", \"BIGINT NOT NULL\");\n    tester.checkScalar(\"extract(millennium from date '2001-01-01')\",\n        \"3\", \"BIGINT NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7430,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
