[{"authorTime":"2017-12-15 11:34:34","codes":[{"authorDate":"2017-12-15 11:34:34","commitOrder":1,"curCode":"  public ImmutableList<RelCollation> collations(Match rel,\n      RelMetadataQuery mq) {\n    return ImmutableList.copyOf(\n        match(mq, rel.getInput(), rel.getRowType(), rel.getPattern(),\n            rel.isStrictStart(), rel.isStrictEnd(),\n            rel.getPatternDefinitions(), rel.getMeasures(), rel.getAfter(),\n            rel.getSubsets(), rel.isAllRows(), rel.getPartitionKeys(),\n            rel.getOrderKeys(), rel.getInterval()));\n  }\n","date":"2019-08-12 16:24:32","endLine":128,"groupId":"11123","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"collations","params":"(Matchrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/e2ffe5458cd85394f7448735916b4fd3a3b732.src","preCode":"  public ImmutableList<RelCollation> collations(Match rel,\n      RelMetadataQuery mq) {\n    return ImmutableList.copyOf(\n        match(mq, rel.getInput(), rel.getRowType(), rel.getPattern(),\n            rel.isStrictStart(), rel.isStrictEnd(),\n            rel.getPatternDefinitions(), rel.getMeasures(), rel.getAfter(),\n            rel.getSubsets(), rel.isAllRows(), rel.getPartitionKeys(),\n            rel.getOrderKeys(), rel.getInterval()));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"B"},{"authorDate":"2017-12-15 11:34:34","commitOrder":1,"curCode":"  public void onMatch(RelOptRuleCall call) {\n    final LogicalMatch oldRel = call.rel(0);\n    final RelNode match = LogicalMatch.create(oldRel.getCluster(),\n        oldRel.getTraitSet(), oldRel.getInput(), oldRel.getRowType(),\n        oldRel.getPattern(), oldRel.isStrictStart(), oldRel.isStrictEnd(),\n        oldRel.getPatternDefinitions(), oldRel.getMeasures(),\n        oldRel.getAfter(), oldRel.getSubsets(), oldRel.isAllRows(),\n        oldRel.getPartitionKeys(), oldRel.getOrderKeys(),\n        oldRel.getInterval());\n    call.transformTo(match);\n  }\n","date":"2019-08-12 16:24:32","endLine":52,"groupId":"11123","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onMatch","params":"(RelOptRuleCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e4/82b9143a2ee073337be487892e72f1d9439ce7.src","preCode":"  public void onMatch(RelOptRuleCall call) {\n    final LogicalMatch oldRel = call.rel(0);\n    final RelNode match = LogicalMatch.create(oldRel.getCluster(),\n        oldRel.getTraitSet(), oldRel.getInput(), oldRel.getRowType(),\n        oldRel.getPattern(), oldRel.isStrictStart(), oldRel.isStrictEnd(),\n        oldRel.getPatternDefinitions(), oldRel.getMeasures(),\n        oldRel.getAfter(), oldRel.getSubsets(), oldRel.isAllRows(),\n        oldRel.getPartitionKeys(), oldRel.getOrderKeys(),\n        oldRel.getInterval());\n    call.transformTo(match);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/MatchRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"}],"commitId":"205fe17eee11b923356e6f297679e43366043043","commitMessage":"@@@[CALCITE-1935] Implement MATCH_RECOGNIZE.  part 1: add basic classes: LogicalMatch.  BindableMatch.  EnumerableMatch.  MatchRule (Zhiqiang-He)\n","date":"2019-08-12 16:24:32","modifiedFileCount":"11","status":"B","submitter":"Zhiqiang-He"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2017-12-15 11:34:34","commitOrder":2,"curCode":"  public ImmutableList<RelCollation> collations(Match rel,\n      RelMetadataQuery mq) {\n    return ImmutableList.copyOf(\n        match(mq, rel.getInput(), rel.getRowType(), rel.getPattern(),\n            rel.isStrictStart(), rel.isStrictEnd(),\n            rel.getPatternDefinitions(), rel.getMeasures(), rel.getAfter(),\n            rel.getSubsets(), rel.isAllRows(), rel.getPartitionKeys(),\n            rel.getOrderKeys(), rel.getInterval()));\n  }\n","date":"2019-08-12 16:24:32","endLine":128,"groupId":"11123","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"collations","params":"(Matchrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/e2ffe5458cd85394f7448735916b4fd3a3b732.src","preCode":"  public ImmutableList<RelCollation> collations(Match rel,\n      RelMetadataQuery mq) {\n    return ImmutableList.copyOf(\n        match(mq, rel.getInput(), rel.getRowType(), rel.getPattern(),\n            rel.isStrictStart(), rel.isStrictEnd(),\n            rel.getPatternDefinitions(), rel.getMeasures(), rel.getAfter(),\n            rel.getSubsets(), rel.isAllRows(), rel.getPartitionKeys(),\n            rel.getOrderKeys(), rel.getInterval()));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"N"},{"authorDate":"2020-07-09 05:31:40","commitOrder":2,"curCode":"  @Override public void onMatch(RelOptRuleCall call) {\n    final LogicalMatch oldRel = call.rel(0);\n    final RelNode match = LogicalMatch.create(oldRel.getCluster(),\n        oldRel.getTraitSet(), oldRel.getInput(), oldRel.getRowType(),\n        oldRel.getPattern(), oldRel.isStrictStart(), oldRel.isStrictEnd(),\n        oldRel.getPatternDefinitions(), oldRel.getMeasures(),\n        oldRel.getAfter(), oldRel.getSubsets(), oldRel.isAllRows(),\n        oldRel.getPartitionKeys(), oldRel.getOrderKeys(),\n        oldRel.getInterval());\n    call.transformTo(match);\n  }\n","date":"2020-07-29 02:27:24","endLine":51,"groupId":"11123","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"onMatch","params":"(RelOptRuleCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6a/662863556588b827951be752f5d94599be2aa1.src","preCode":"  public void onMatch(RelOptRuleCall call) {\n    final LogicalMatch oldRel = call.rel(0);\n    final RelNode match = LogicalMatch.create(oldRel.getCluster(),\n        oldRel.getTraitSet(), oldRel.getInput(), oldRel.getRowType(),\n        oldRel.getPattern(), oldRel.isStrictStart(), oldRel.isStrictEnd(),\n        oldRel.getPatternDefinitions(), oldRel.getMeasures(),\n        oldRel.getAfter(), oldRel.getSubsets(), oldRel.isAllRows(),\n        oldRel.getPartitionKeys(), oldRel.getOrderKeys(),\n        oldRel.getInterval());\n    call.transformTo(match);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/MatchRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"998cd83ebe2fcd7ff3ee565299fed6e199269715","commitMessage":"@@@[CALCITE-3923] Refactor how planner rules are parameterized\n\nCreate operands using a builder interface.  OperandBuilder.  and\ndeprecate methods RelOptRule.operand etc.\n\nThe change is backwards compatible.  in the sense that\nexisting rule constructors are deprecated but still work.\nFrom now on.  to create rules.  call RelOptRule.Config.toRule()\n(which calls the rule's (Config) constructor).\n\nSub-classes of ConverterRule are a little different.  They\ndon't need their own sub-class of Config.  You just need to\ncall Config.withRuleFactory to specify the constructor of the\nsub-class of ConverterRule.\n\nMove rule instances into holder classes such as CoreRules. \nMaterializedViewRules. Deprecate existing rule INSTANCE fields\n(to be removed in 1.25). Deprecate previous rule constructors\n(to be removed in 2.0).\n\nDescribe how to write rules in howto and tutorial.\n\nRemove rule instances marked 'deprecated.  to be removed before\n1.25'.\n\nClose apache/calcite#2024\n","date":"2020-07-29 02:27:24","modifiedFileCount":"191","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-09-03 04:55:48","commitOrder":3,"curCode":"  public ImmutableList<RelCollation> collations(Match rel,\n      RelMetadataQuery mq) {\n    return copyOf(\n        match(mq, rel.getInput(), rel.getRowType(), rel.getPattern(),\n            rel.isStrictStart(), rel.isStrictEnd(),\n            rel.getPatternDefinitions(), rel.getMeasures(), rel.getAfter(),\n            rel.getSubsets(), rel.isAllRows(), rel.getPartitionKeys(),\n            rel.getOrderKeys(), rel.getInterval()));\n  }\n","date":"2020-10-02 02:53:33","endLine":135,"groupId":"11123","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"collations","params":"(Matchrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0b/e433be06413d41c42a8828163243e0d40ccb7b.src","preCode":"  public ImmutableList<RelCollation> collations(Match rel,\n      RelMetadataQuery mq) {\n    return ImmutableList.copyOf(\n        match(mq, rel.getInput(), rel.getRowType(), rel.getPattern(),\n            rel.isStrictStart(), rel.isStrictEnd(),\n            rel.getPatternDefinitions(), rel.getMeasures(), rel.getAfter(),\n            rel.getSubsets(), rel.isAllRows(), rel.getPartitionKeys(),\n            rel.getOrderKeys(), rel.getInterval()));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2020-07-09 05:31:40","commitOrder":3,"curCode":"  @Override public void onMatch(RelOptRuleCall call) {\n    final LogicalMatch oldRel = call.rel(0);\n    final RelNode match = LogicalMatch.create(oldRel.getCluster(),\n        oldRel.getTraitSet(), oldRel.getInput(), oldRel.getRowType(),\n        oldRel.getPattern(), oldRel.isStrictStart(), oldRel.isStrictEnd(),\n        oldRel.getPatternDefinitions(), oldRel.getMeasures(),\n        oldRel.getAfter(), oldRel.getSubsets(), oldRel.isAllRows(),\n        oldRel.getPartitionKeys(), oldRel.getOrderKeys(),\n        oldRel.getInterval());\n    call.transformTo(match);\n  }\n","date":"2020-07-29 02:27:24","endLine":51,"groupId":"11123","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"onMatch","params":"(RelOptRuleCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6a/662863556588b827951be752f5d94599be2aa1.src","preCode":"  @Override public void onMatch(RelOptRuleCall call) {\n    final LogicalMatch oldRel = call.rel(0);\n    final RelNode match = LogicalMatch.create(oldRel.getCluster(),\n        oldRel.getTraitSet(), oldRel.getInput(), oldRel.getRowType(),\n        oldRel.getPattern(), oldRel.isStrictStart(), oldRel.isStrictEnd(),\n        oldRel.getPatternDefinitions(), oldRel.getMeasures(),\n        oldRel.getAfter(), oldRel.getSubsets(), oldRel.isAllRows(),\n        oldRel.getPartitionKeys(), oldRel.getOrderKeys(),\n        oldRel.getInterval());\n    call.transformTo(match);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/MatchRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"N"}],"commitId":"2f1d764297233a60fed85dd10f2954240da6663a","commitMessage":"@@@[CALCITE-4215] Avoid NPE in RelMdCollation from ImmutableList.copyOf\n\nReturn null instead when metadata is not known\n","date":"2020-10-02 02:53:33","modifiedFileCount":"1","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  public @Nullable ImmutableList<RelCollation> collations(Match rel,\n      RelMetadataQuery mq) {\n    return copyOf(\n        match(mq, rel.getInput(), rel.getRowType(), rel.getPattern(),\n            rel.isStrictStart(), rel.isStrictEnd(),\n            rel.getPatternDefinitions(), rel.getMeasures(), rel.getAfter(),\n            rel.getSubsets(), rel.isAllRows(), rel.getPartitionKeys(),\n            rel.getOrderKeys(), rel.getInterval()));\n  }\n","date":"2020-11-30 06:45:33","endLine":138,"groupId":"101952","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"collations","params":"(Matchrel@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1f/c2336aaa87eacba8c7784e8f787e1269c1006c.src","preCode":"  public ImmutableList<RelCollation> collations(Match rel,\n      RelMetadataQuery mq) {\n    return copyOf(\n        match(mq, rel.getInput(), rel.getRowType(), rel.getPattern(),\n            rel.isStrictStart(), rel.isStrictEnd(),\n            rel.getPatternDefinitions(), rel.getMeasures(), rel.getAfter(),\n            rel.getSubsets(), rel.isAllRows(), rel.getPartitionKeys(),\n            rel.getOrderKeys(), rel.getInterval()));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2020-07-09 05:31:40","commitOrder":4,"curCode":"  @Override public void onMatch(RelOptRuleCall call) {\n    final LogicalMatch oldRel = call.rel(0);\n    final RelNode match = LogicalMatch.create(oldRel.getCluster(),\n        oldRel.getTraitSet(), oldRel.getInput(), oldRel.getRowType(),\n        oldRel.getPattern(), oldRel.isStrictStart(), oldRel.isStrictEnd(),\n        oldRel.getPatternDefinitions(), oldRel.getMeasures(),\n        oldRel.getAfter(), oldRel.getSubsets(), oldRel.isAllRows(),\n        oldRel.getPartitionKeys(), oldRel.getOrderKeys(),\n        oldRel.getInterval());\n    call.transformTo(match);\n  }\n","date":"2020-07-29 02:27:24","endLine":51,"groupId":"101952","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"onMatch","params":"(RelOptRuleCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6a/662863556588b827951be752f5d94599be2aa1.src","preCode":"  @Override public void onMatch(RelOptRuleCall call) {\n    final LogicalMatch oldRel = call.rel(0);\n    final RelNode match = LogicalMatch.create(oldRel.getCluster(),\n        oldRel.getTraitSet(), oldRel.getInput(), oldRel.getRowType(),\n        oldRel.getPattern(), oldRel.isStrictStart(), oldRel.isStrictEnd(),\n        oldRel.getPatternDefinitions(), oldRel.getMeasures(),\n        oldRel.getAfter(), oldRel.getSubsets(), oldRel.isAllRows(),\n        oldRel.getPartitionKeys(), oldRel.getOrderKeys(),\n        oldRel.getInterval());\n    call.transformTo(match);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/MatchRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"N"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
