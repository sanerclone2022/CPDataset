[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2017-02-21 19:44:11","commitOrder":2,"curCode":"    @Override public SqlCall createCall(\n        SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 5;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4]);\n    }\n","date":"2017-03-05 05:02:44","endLine":152,"groupId":"10095","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createCall","params":"(SqlLiteralfunctionQualifier@SqlParserPospos@SqlNode...operands)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/23/350fbabe844a9bc2d3e37a219913855c0aca0f.src","preCode":"    @Override public SqlCall createCall(\n        SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 5;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4]);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @Override\n        public SqlCall createCall(SqlLiteral functionQualifier,\n            SqlParserPos pos, SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","date":"2014-11-14 09:39:34","endLine":37,"groupId":"16852","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"OPERATOR","params":"(\"EXPLAIN\"@SqlKind.EXPLAIN)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/e39f126932cb65040ab6b124fb8757fde5e64b.src","preCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @Override\n        public SqlCall createCall(SqlLiteral functionQualifier,\n            SqlParserPos pos, SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlExplain.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"NB"}],"commitId":"4e1038255163792b8055d1b0c3f312bda872252d","commitMessage":"@@@[CALCITE-1641] Add parser and validator support for MATCH_RECOGNIZE (Zhiqiang-He)\n\nClose apache/calcite#378\n","date":"2017-03-05 05:02:44","modifiedFileCount":"30","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2017-03-13 19:11:19","commitOrder":3,"curCode":"    @Override public SqlCall createCall(\n        SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 6;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4], (SqlNodeList) operands[5]);\n    }\n","date":"2017-04-02 11:43:28","endLine":164,"groupId":"10095","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createCall","params":"(SqlLiteralfunctionQualifier@SqlParserPospos@SqlNode...operands)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/30/0e8860deee7b369f3c97b847783609777eb9b5.src","preCode":"    @Override public SqlCall createCall(\n        SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 5;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4]);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":3,"curCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @Override\n        public SqlCall createCall(SqlLiteral functionQualifier,\n            SqlParserPos pos, SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","date":"2014-11-14 09:39:34","endLine":37,"groupId":"16852","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"OPERATOR","params":"(\"EXPLAIN\"@SqlKind.EXPLAIN)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/e39f126932cb65040ab6b124fb8757fde5e64b.src","preCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @Override\n        public SqlCall createCall(SqlLiteral functionQualifier,\n            SqlParserPos pos, SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlExplain.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"N"}],"commitId":"4d20d62d4d752ce4de29a002ec313a758a7cee6e","commitMessage":"@@@[CALCITE-1642] Support MEASURES clause in MATCH_RECOGNIZE (Zhiqiang-He)\n\nClose apache/calcite#400\n","date":"2017-04-02 11:43:28","modifiedFileCount":"15","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2017-04-14 20:58:21","commitOrder":4,"curCode":"    @Override public SqlCall createCall(\n        SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 6;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4], (SqlNodeList) operands[5], operands[6]);\n    }\n","date":"2017-04-25 09:26:09","endLine":208,"groupId":"10095","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createCall","params":"(SqlLiteralfunctionQualifier@SqlParserPospos@SqlNode...operands)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7f/dc7650e51f16e2cdf01530bcbee3ea379a6bc1.src","preCode":"    @Override public SqlCall createCall(\n        SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 6;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4], (SqlNodeList) operands[5]);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":4,"curCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @Override\n        public SqlCall createCall(SqlLiteral functionQualifier,\n            SqlParserPos pos, SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","date":"2014-11-14 09:39:34","endLine":37,"groupId":"16852","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"OPERATOR","params":"(\"EXPLAIN\"@SqlKind.EXPLAIN)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/e39f126932cb65040ab6b124fb8757fde5e64b.src","preCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @Override\n        public SqlCall createCall(SqlLiteral functionQualifier,\n            SqlParserPos pos, SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlExplain.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"N"}],"commitId":"c850e227db583a697c8cc46585b33274b63ed2d0","commitMessage":"@@@[CALCITE-1643] AFTER MATCH sub-clause of MATCH_RECOGNIZE clause (Zhiqiang-He)\n\nClose apache/calcite#429\n","date":"2017-04-25 09:26:09","modifiedFileCount":"10","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2017-05-10 11:28:26","commitOrder":5,"curCode":"    @Override public SqlCall createCall(\n        SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 8;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4], (SqlNodeList) operands[5], operands[6],\n          (SqlNodeList) operands[7]);\n    }\n","date":"2017-05-16 10:33:38","endLine":219,"groupId":"10095","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createCall","params":"(SqlLiteralfunctionQualifier@SqlParserPospos@SqlNode...operands)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/c87f81f2482913f31d4b9bd50e34a71025fb04.src","preCode":"    @Override public SqlCall createCall(\n        SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 6;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4], (SqlNodeList) operands[5], operands[6]);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":5,"curCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @Override\n        public SqlCall createCall(SqlLiteral functionQualifier,\n            SqlParserPos pos, SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","date":"2014-11-14 09:39:34","endLine":37,"groupId":"16852","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"OPERATOR","params":"(\"EXPLAIN\"@SqlKind.EXPLAIN)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/e39f126932cb65040ab6b124fb8757fde5e64b.src","preCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @Override\n        public SqlCall createCall(SqlLiteral functionQualifier,\n            SqlParserPos pos, SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlExplain.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"N"}],"commitId":"7a56eb63dfbd3310d14c85270f667eb3f8fa6aa3","commitMessage":"@@@[CALCITE-1644] SUBSET sub-clause of MATCH_RECOGNIZE (Zhiqiang-He)\n\nClose apache/calcite#445\n","date":"2017-05-16 10:33:38","modifiedFileCount":"11","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2017-05-19 14:52:34","commitOrder":6,"curCode":"    @Override public SqlCall createCall(\n        SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 9;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4], (SqlNodeList) operands[5], operands[6],\n          (SqlNodeList) operands[7], (SqlLiteral) operands[8]);\n    }\n","date":"2017-05-24 02:28:41","endLine":255,"groupId":"10095","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createCall","params":"(SqlLiteralfunctionQualifier@SqlParserPospos@SqlNode...operands)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d9/8b58be43233cc3e8d4628a54e7b0b11f75b4de.src","preCode":"    @Override public SqlCall createCall(\n        SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 8;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4], (SqlNodeList) operands[5], operands[6],\n          (SqlNodeList) operands[7]);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":6,"curCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @Override\n        public SqlCall createCall(SqlLiteral functionQualifier,\n            SqlParserPos pos, SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","date":"2014-11-14 09:39:34","endLine":37,"groupId":"16852","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"OPERATOR","params":"(\"EXPLAIN\"@SqlKind.EXPLAIN)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/e39f126932cb65040ab6b124fb8757fde5e64b.src","preCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @Override\n        public SqlCall createCall(SqlLiteral functionQualifier,\n            SqlParserPos pos, SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlExplain.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"N"}],"commitId":"e117c10cef192ca4ab10ffec2132b7dbd34319fa","commitMessage":"@@@[CALCITE-1645] In MATCH_RECOGNIZE clause.  support ONE ROW PER MATCH and ALL ROWS PER MATCH (Zhiqiang-He)\n\nClose apache/calcite#452\n","date":"2017-05-24 02:28:41","modifiedFileCount":"9","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2017-06-05 17:25:34","commitOrder":7,"curCode":"    @Override public SqlCall createCall(\n        SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 11;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4], (SqlNodeList) operands[5], operands[6],\n          (SqlNodeList) operands[7], (SqlLiteral) operands[8],\n          (SqlNodeList) operands[9], (SqlNodeList) operands[10]);\n    }\n","date":"2017-06-09 07:08:22","endLine":278,"groupId":"10095","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createCall","params":"(SqlLiteralfunctionQualifier@SqlParserPospos@SqlNode...operands)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9c/8dcefbf5084d52e1635f88ea627ed8a7450b6f.src","preCode":"    @Override public SqlCall createCall(\n        SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 9;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4], (SqlNodeList) operands[5], operands[6],\n          (SqlNodeList) operands[7], (SqlLiteral) operands[8]);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":7,"curCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @Override\n        public SqlCall createCall(SqlLiteral functionQualifier,\n            SqlParserPos pos, SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","date":"2014-11-14 09:39:34","endLine":37,"groupId":"16852","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"OPERATOR","params":"(\"EXPLAIN\"@SqlKind.EXPLAIN)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/e39f126932cb65040ab6b124fb8757fde5e64b.src","preCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @Override\n        public SqlCall createCall(SqlLiteral functionQualifier,\n            SqlParserPos pos, SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlExplain.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"N"}],"commitId":"33873f64931470e868c1735e9eac86707a659d9e","commitMessage":"@@@[CALCITE-1646] PARTITION BY and ORDER BY sub-clauses of MATCH_RECOGNIZE (Zhiqiang-He)\n\nClose apache/calcite#468\n","date":"2017-06-09 07:08:22","modifiedFileCount":"10","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2017-08-07 21:39:15","commitOrder":8,"curCode":"    @Override public SqlCall createCall(\n        SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 12;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4], (SqlNodeList) operands[5], operands[6],\n          (SqlNodeList) operands[7], (SqlLiteral) operands[8],\n          (SqlNodeList) operands[9], (SqlNodeList) operands[10], (SqlLiteral) operands[11]);\n    }\n","date":"2017-08-24 02:20:35","endLine":288,"groupId":"10095","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createCall","params":"(SqlLiteralfunctionQualifier@SqlParserPospos@SqlNode...operands)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bb/52e62c13413f43faa98c237c117a559468d252.src","preCode":"    @Override public SqlCall createCall(\n        SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 11;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4], (SqlNodeList) operands[5], operands[6],\n          (SqlNodeList) operands[7], (SqlLiteral) operands[8],\n          (SqlNodeList) operands[9], (SqlNodeList) operands[10]);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":8,"curCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @Override\n        public SqlCall createCall(SqlLiteral functionQualifier,\n            SqlParserPos pos, SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","date":"2014-11-14 09:39:34","endLine":37,"groupId":"16852","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"OPERATOR","params":"(\"EXPLAIN\"@SqlKind.EXPLAIN)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/e39f126932cb65040ab6b124fb8757fde5e64b.src","preCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @Override\n        public SqlCall createCall(SqlLiteral functionQualifier,\n            SqlParserPos pos, SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlExplain.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"N"}],"commitId":"dfe251d7e5136ce93b1172ad1822bd908e953c86","commitMessage":"@@@[CALCITE-1911] In MATCH_RECOGNIZE.  support WITHIN sub-clause (Dian Fu)\n\nClose apache/calcite#509\n","date":"2017-08-24 02:20:35","modifiedFileCount":"14","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":9,"curCode":"    @Override public SqlCall createCall(\n        @Nullable SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        @Nullable SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 12;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4], (SqlNodeList) operands[5], operands[6],\n          (SqlNodeList) operands[7], (SqlLiteral) operands[8],\n          (SqlNodeList) operands[9], (SqlNodeList) operands[10], (SqlLiteral) operands[11]);\n    }\n","date":"2020-11-30 06:45:33","endLine":286,"groupId":"101839","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"createCall","params":"(@NullableSqlLiteralfunctionQualifier@SqlParserPospos@@NullableSqlNode...operands)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7f/025a175b859cf94533884e705341d75abdcb5a.src","preCode":"    @Override public SqlCall createCall(\n        SqlLiteral functionQualifier,\n        SqlParserPos pos,\n        SqlNode... operands) {\n      assert functionQualifier == null;\n      assert operands.length == 12;\n\n      return new SqlMatchRecognize(pos, operands[0], operands[1],\n          (SqlLiteral) operands[2], (SqlLiteral) operands[3],\n          (SqlNodeList) operands[4], (SqlNodeList) operands[5], operands[6],\n          (SqlNodeList) operands[7], (SqlLiteral) operands[8],\n          (SqlNodeList) operands[9], (SqlNodeList) operands[10], (SqlLiteral) operands[11]);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":9,"curCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @SuppressWarnings(\"argument.type.incompatible\")\n        @Override public SqlCall createCall(@Nullable SqlLiteral functionQualifier,\n            SqlParserPos pos, @Nullable SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","date":"2020-11-30 06:45:33","endLine":40,"groupId":"101839","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"OPERATOR","params":"(\"EXPLAIN\"@SqlKind.EXPLAIN)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d0/72a6ceacd196552d621e6b3a4e6fbea55bd523.src","preCode":"      new SqlSpecialOperator(\"EXPLAIN\", SqlKind.EXPLAIN) {\n        @Override public SqlCall createCall(SqlLiteral functionQualifier,\n            SqlParserPos pos, SqlNode... operands) {\n          return new SqlExplain(pos, operands[0], (SqlLiteral) operands[1],\n              (SqlLiteral) operands[2], (SqlLiteral) operands[3], 0);\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlExplain.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
