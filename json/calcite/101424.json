[{"authorTime":"2020-11-01 04:35:13","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testRedshiftDialect() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true)\n        .withDialect(SqlDialect.DatabaseProduct.REDSHIFT.getDialect())\n        .withLibrary(SqlLibrary.POSTGRESQL);\n\n    final String q0 = \"select\\n\"\n        + \"  CONCAT(\\\"fname\\\", ' ', \\\"lname\\\") as \\\"full_name\\\",\\n\"\n        + \"  convert_timezone('UTC', 'America/Los_Angeles',\\n\"\n        + \"    cast('2019-01-01 01:00:00' as timestamp)),\\n\"\n        + \"  left(\\\"fname\\\", 1) as \\\"initial\\\",\\n\"\n        + \"  to_date('2019-01-01', 'YYYY-MM-DD'),\\n\"\n        + \"  to_timestamp('2019-01-01 01:00:00', 'YYYY-MM-DD HH:MM:SS'),\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\" join \\\"sales_fact_1997\\\" using (\\\"customer_id\\\")\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n  }\n","date":"2020-04-06 04:57:49","endLine":618,"groupId":"10328","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRedshiftDialect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/3cc8e5ae752cd3b53de4d9ae6709226dc852a5.src","preCode":"  @Test void testRedshiftDialect() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true)\n        .withDialect(SqlDialect.DatabaseProduct.REDSHIFT.getDialect())\n        .withLibrary(SqlLibrary.POSTGRESQL);\n\n    final String q0 = \"select\\n\"\n        + \"  CONCAT(\\\"fname\\\", ' ', \\\"lname\\\") as \\\"full_name\\\",\\n\"\n        + \"  convert_timezone('UTC', 'America/Los_Angeles',\\n\"\n        + \"    cast('2019-01-01 01:00:00' as timestamp)),\\n\"\n        + \"  left(\\\"fname\\\", 1) as \\\"initial\\\",\\n\"\n        + \"  to_date('2019-01-01', 'YYYY-MM-DD'),\\n\"\n        + \"  to_timestamp('2019-01-01 01:00:00', 'YYYY-MM-DD HH:MM:SS'),\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\" join \\\"sales_fact_1997\\\" using (\\\"customer_id\\\")\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/materialize/LatticeSuggesterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":600,"status":"NB"},{"authorDate":"2020-11-01 04:35:13","commitOrder":3,"curCode":"  @Test void testBigQueryDialect() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true)\n        .withDialect(SqlDialect.DatabaseProduct.BIG_QUERY.getDialect())\n        .withLibrary(SqlLibrary.BIG_QUERY);\n\n    final String q0 = \"select `product_id`,\\n\"\n        + \"  SUM(unit_sales)\\n\"\n        + \"from\\n\"\n        + \"  `sales_fact_1997`\"\n        + \"group by 1\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n  }\n","date":"2020-11-01 12:55:50","endLine":636,"groupId":"875","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBigQueryDialect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2f/b2e4e2d71e06833e811e4accbb85b3fa4595d9.src","preCode":"  @Test void testBigQueryDialect() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true)\n        .withDialect(SqlDialect.DatabaseProduct.BIG_QUERY.getDialect())\n        .withLibrary(SqlLibrary.BIG_QUERY);\n\n    final String q0 = \"select `product_id`,\\n\"\n        + \"  SUM(unit_sales)\\n\"\n        + \"from\\n\"\n        + \"  `sales_fact_1997`\"\n        + \"group by 1\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/materialize/LatticeSuggesterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":624,"status":"B"}],"commitId":"5f1d8238da504d54a8d4d74252f344c4ebb77318","commitMessage":"@@@BigQuery dialect should allow GROUP BY ordinal\n","date":"2020-11-01 12:55:50","modifiedFileCount":"3","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-10-13 08:29:57","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testRedshiftDialect() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true)\n        .withDialect(SqlDialect.DatabaseProduct.REDSHIFT.getDialect())\n        .withLibrary(SqlLibrary.POSTGRESQL);\n\n    final String q0 = \"select\\n\"\n        + \"  CONCAT(\\\"fname\\\", ' ', \\\"lname\\\") as \\\"full_name\\\",\\n\"\n        + \"  convert_timezone('UTC', 'America/Los_Angeles',\\n\"\n        + \"    cast('2019-01-01 01:00:00' as timestamp)),\\n\"\n        + \"  left(\\\"fname\\\", 1) as \\\"initial\\\",\\n\"\n        + \"  to_date('2019-01-01', 'YYYY-MM-DD'),\\n\"\n        + \"  to_timestamp('2019-01-01 01:00:00', 'YYYY-MM-DD HH:MM:SS'),\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\" join \\\"sales_fact_1997\\\" using (\\\"customer_id\\\")\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n  }\n","date":"2020-04-06 04:57:49","endLine":618,"groupId":"101424","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRedshiftDialect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/3cc8e5ae752cd3b53de4d9ae6709226dc852a5.src","preCode":"  @Test void testRedshiftDialect() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true)\n        .withDialect(SqlDialect.DatabaseProduct.REDSHIFT.getDialect())\n        .withLibrary(SqlLibrary.POSTGRESQL);\n\n    final String q0 = \"select\\n\"\n        + \"  CONCAT(\\\"fname\\\", ' ', \\\"lname\\\") as \\\"full_name\\\",\\n\"\n        + \"  convert_timezone('UTC', 'America/Los_Angeles',\\n\"\n        + \"    cast('2019-01-01 01:00:00' as timestamp)),\\n\"\n        + \"  left(\\\"fname\\\", 1) as \\\"initial\\\",\\n\"\n        + \"  to_date('2019-01-01', 'YYYY-MM-DD'),\\n\"\n        + \"  to_timestamp('2019-01-01 01:00:00', 'YYYY-MM-DD HH:MM:SS'),\\n\"\n        + \"  count(*) as c,\\n\"\n        + \"  avg(\\\"total_children\\\" - \\\"num_children_at_home\\\")\\n\"\n        + \"from \\\"customer\\\" join \\\"sales_fact_1997\\\" using (\\\"customer_id\\\")\\n\"\n        + \"group by \\\"fname\\\", \\\"lname\\\"\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/materialize/LatticeSuggesterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":600,"status":"N"},{"authorDate":"2020-10-13 08:29:57","commitOrder":4,"curCode":"  @Test void testBigQueryDialect() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true)\n        .withDialect(SqlDialect.DatabaseProduct.BIG_QUERY.getDialect())\n        .withLibrary(SqlLibrary.BIG_QUERY);\n\n    final String q0 = \"select `product_id`,\\n\"\n        + \"  countif(unit_sales > 1000) as num_over_thousand,\\n\"\n        + \"  SUM(unit_sales)\\n\"\n        + \"from\\n\"\n        + \"  `sales_fact_1997`\"\n        + \"group by 1\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n  }\n","date":"2020-11-01 16:13:18","endLine":638,"groupId":"101424","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testBigQueryDialect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/f1e95ac3e1f489d7eb097014965b60dbac4fac.src","preCode":"  @Test void testBigQueryDialect() throws Exception {\n    final Tester t = new Tester().foodmart().withEvolve(true)\n        .withDialect(SqlDialect.DatabaseProduct.BIG_QUERY.getDialect())\n        .withLibrary(SqlLibrary.BIG_QUERY);\n\n    final String q0 = \"select `product_id`,\\n\"\n        + \"  SUM(unit_sales)\\n\"\n        + \"from\\n\"\n        + \"  `sales_fact_1997`\"\n        + \"group by 1\";\n    t.addQuery(q0);\n    assertThat(t.s.latticeMap.size(), is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/materialize/LatticeSuggesterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":625,"status":"M"}],"commitId":"a5801bed0d0d74ad12b6742d64ffb07b4a05f674","commitMessage":"@@@[CALCITE-4369] Support COUNTIF aggregate function for BigQuery (Aryeh Hillman)\n\nIn SQL reference.  move COUNTIF to the list of dialect-specific\nfunctions; during SQL-to-Rel.  transform to 'COUNT(*) FILTER\n(WHERE b)' rather than 'COUNT(CASE WHEN b THEN 1 END)' (Julian Hyde).\n\nClose apache/calcite#2235\n","date":"2020-11-01 16:13:18","modifiedFileCount":"6","status":"M","submitter":"Aryeh Hillman"}]
