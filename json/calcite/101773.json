[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.sep(\"FROM\");\n    call.operand(1).unparse(writer, leftPrec, rightPrec);\n\n    if (3 == call.operandCount()) {\n      writer.sep(\"FOR\");\n      call.operand(2).unparse(writer, leftPrec, rightPrec);\n    }\n\n    writer.endFunCall(frame);\n  }\n","date":"2014-11-14 09:39:34","endLine":177,"groupId":"14197","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bf/84442c7b52a9002a48fc08288401ec50b1e8ac.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.sep(\"FROM\");\n    call.operand(1).unparse(writer, leftPrec, rightPrec);\n\n    if (3 == call.operandCount()) {\n      writer.sep(\"FOR\");\n      call.operand(2).unparse(writer, leftPrec, rightPrec);\n    }\n\n    writer.endFunCall(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlSubstringFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    assert call.operand(0) instanceof SqlLiteral : call.operand(0);\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    call.operand(1).unparse(writer, leftPrec, rightPrec);\n    writer.sep(\"FROM\");\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n    writer.endFunCall(frame);\n  }\n","date":"2014-11-14 09:39:34","endLine":103,"groupId":"14197","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8a/c8d93e30b6e8a0b7f9ad15654c061d0317e135.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    assert call.operand(0) instanceof SqlLiteral : call.operand(0);\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    call.operand(1).unparse(writer, leftPrec, rightPrec);\n    writer.sep(\"FROM\");\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n    writer.endFunCall(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":2,"curCode":"  @Override public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.sep(\"FROM\");\n    call.operand(1).unparse(writer, leftPrec, rightPrec);\n\n    if (3 == call.operandCount()) {\n      writer.sep(\"FOR\");\n      call.operand(2).unparse(writer, leftPrec, rightPrec);\n    }\n\n    writer.endFunCall(frame);\n  }\n","date":"2020-10-07 05:42:47","endLine":157,"groupId":"101773","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9d/3db136180d24550385dd5db6f2f24a09a8ef9e.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.sep(\"FROM\");\n    call.operand(1).unparse(writer, leftPrec, rightPrec);\n\n    if (3 == call.operandCount()) {\n      writer.sep(\"FOR\");\n      call.operand(2).unparse(writer, leftPrec, rightPrec);\n    }\n\n    writer.endFunCall(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlSubstringFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":2,"curCode":"  @Override public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    assert call.operand(0) instanceof SqlLiteral : call.operand(0);\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    call.operand(1).unparse(writer, leftPrec, rightPrec);\n    writer.sep(\"FROM\");\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n    writer.endFunCall(frame);\n  }\n","date":"2020-10-07 05:42:47","endLine":110,"groupId":"101773","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/05/94dfe92dfd38b642cc467f6f9c1b5f45cf529b.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    final SqlWriter.Frame frame = writer.startFunCall(getName());\n    assert call.operand(0) instanceof SqlLiteral : call.operand(0);\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    call.operand(1).unparse(writer, leftPrec, rightPrec);\n    writer.sep(\"FROM\");\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n    writer.endFunCall(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
