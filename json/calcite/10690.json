[{"authorTime":"2020-10-12 07:22:07","codes":[{"authorDate":"2020-09-17 05:42:37","commitOrder":4,"curCode":"  @Test void testSimplifyRange3() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = or(\n        and(lt(literal(0), aRef),\n            le(aRef, literal(10))),\n        isNull(aRef),\n        and(lt(literal(8), aRef),\n            lt(aRef, literal(12))),\n        ge(aRef, literal(15)));\n    \r\n    final String simplified =\n        \"SEARCH($0, Sarg[(0..12), [15..+\\u221e), null])\";\n    final String expanded =\n        \"OR(IS NULL($0), AND(>($0, 0), <($0, 12)), >=($0, 15))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","date":"2020-09-28 23:30:05","endLine":1614,"groupId":"1813","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyRange3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8d/15644592da26a07c77aae4d4f9dce60876ce01.src","preCode":"  @Test void testSimplifyRange3() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = or(\n        and(lt(literal(0), aRef),\n            le(aRef, literal(10))),\n        isNull(aRef),\n        and(lt(literal(8), aRef),\n            lt(aRef, literal(12))),\n        ge(aRef, literal(15)));\n    \r\n    final String simplified =\n        \"SEARCH($0, Sarg[(0..12), [15..+\\u221e), null])\";\n    final String expanded =\n        \"OR(IS NULL($0), AND(>($0, 0), <($0, 12)), >=($0, 15))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1597,"status":"NB"},{"authorDate":"2020-10-12 07:22:07","commitOrder":4,"curCode":"  @Test void testSimplifyRange7() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = and(\n        isNotNull(aRef),\n        gt(aRef, literal(3)),\n        lt(aRef, literal(10)));\n    final String simplified = \"SEARCH($0, Sarg[(3..10)])\";\n    final String expanded = \"AND(>($0, 3), <($0, 10))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","date":"2020-10-15 09:15:13","endLine":1671,"groupId":"1813","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyRange7","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/2550aae581862267f104ef2721f8be8cd8c0ce.src","preCode":"  @Test void testSimplifyRange7() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = and(\n        isNotNull(aRef),\n        gt(aRef, literal(3)),\n        lt(aRef, literal(10)));\n    final String simplified = \"SEARCH($0, Sarg[(3..10)])\";\n    final String expanded = \"AND(>($0, 3), <($0, 10))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1660,"status":"B"}],"commitId":"ee5c78444558117c71cc7058a79bc920a52cad59","commitMessage":"@@@[CALCITE-4325] RexSimplify incorrectly simplifies complex expressions that contain Sarg and IS NULL\n\nImprove how class Sarg handles IS NULL and IS NOT NULL\nconditions. They are now handled symmetrically.  using fields\nnullCount and notNullCount.  whereas previously we used\ncontainsNull.  which could handle IS NULL only in certain\ncircumstances and IS NOT NULL not at all.\n\nIn CalciteAssert.  correct rounding floating point rounding\nerrors before comparing SQL column values. For example. \n'236.55000000000007' becomes '236.55'. This fixes some\nintermittent Druid test failures.\n","date":"2020-10-15 09:15:13","modifiedFileCount":"5","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-10-12 07:22:07","codes":[{"authorDate":"2020-10-25 08:23:16","commitOrder":5,"curCode":"  @Test void testSimplifyRange3() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = or(\n        and(lt(literal(0), aRef),\n            le(aRef, literal(10))),\n        isNull(aRef),\n        and(lt(literal(8), aRef),\n            lt(aRef, literal(12))),\n        ge(aRef, literal(15)));\n    \r\n    final String simplified =\n        \"SEARCH($0, Sarg[(0..12), [15..+\\u221e) OR NULL])\";\n    final String expanded =\n        \"OR(IS NULL($0), AND(>($0, 0), <($0, 12)), >=($0, 15))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","date":"2020-11-01 16:13:27","endLine":1619,"groupId":"1813","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyRange3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ba/2f91b245fb471dc13e7588d58a42e03df7d9f3.src","preCode":"  @Test void testSimplifyRange3() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = or(\n        and(lt(literal(0), aRef),\n            le(aRef, literal(10))),\n        isNull(aRef),\n        and(lt(literal(8), aRef),\n            lt(aRef, literal(12))),\n        ge(aRef, literal(15)));\n    \r\n    final String simplified =\n        \"SEARCH($0, Sarg[(0..12), [15..+\\u221e), null])\";\n    final String expanded =\n        \"OR(IS NULL($0), AND(>($0, 0), <($0, 12)), >=($0, 15))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1602,"status":"M"},{"authorDate":"2020-10-12 07:22:07","commitOrder":5,"curCode":"  @Test void testSimplifyRange7() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = and(\n        isNotNull(aRef),\n        gt(aRef, literal(3)),\n        lt(aRef, literal(10)));\n    final String simplified = \"SEARCH($0, Sarg[(3..10)])\";\n    final String expanded = \"AND(>($0, 3), <($0, 10))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","date":"2020-10-15 09:15:13","endLine":1671,"groupId":"1813","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyRange7","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/2550aae581862267f104ef2721f8be8cd8c0ce.src","preCode":"  @Test void testSimplifyRange7() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = and(\n        isNotNull(aRef),\n        gt(aRef, literal(3)),\n        lt(aRef, literal(10)));\n    final String simplified = \"SEARCH($0, Sarg[(3..10)])\";\n    final String expanded = \"AND(>($0, 3), <($0, 10))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1660,"status":"N"}],"commitId":"d03ce47536ddb2aaec6d445b3ea48464081a7ed0","commitMessage":"@@@[CALCITE-4352] RexSimplify incorrectly drops IS NULL and IS NOT NULL from SEARCH expressions\n\nImprove Sarg.toString() for IS NULL.  IS NOT NULL.  TRUE. \nFALSE.\n\nSimplify NOT SEARCH(x.  sarg) to SEARCH(x.  sarg2) where sarg2\nis the complement of sarg.\n\nImprove return type of SEARCH; result is NOT NULL if argument\nis NOT NULL of it Sarg allows IS NULL.\n\nClose apache/calcite#2233\n","date":"2020-11-01 16:13:27","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-12-24 05:32:41","codes":[{"authorDate":"2020-12-24 05:32:41","commitOrder":6,"curCode":"  @Test void testSimplifyRange3() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = or(\n        and(lt(literal(0), aRef),\n            le(aRef, literal(10))),\n        isNull(aRef),\n        and(lt(literal(8), aRef),\n            lt(aRef, literal(12))),\n        ge(aRef, literal(15)));\n    \r\n    final String simplified =\n        \"SEARCH($0, Sarg[(0..12), [15..+\\u221e); NULL AS TRUE])\";\n    final String expanded =\n        \"OR(IS NULL($0), AND(>($0, 0), <($0, 12)), >=($0, 15))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","date":"2021-03-03 04:28:27","endLine":1635,"groupId":"10690","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplifyRange3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/8a748d0cead45d1ae0e14d213cb2ee4e907113.src","preCode":"  @Test void testSimplifyRange3() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = or(\n        and(lt(literal(0), aRef),\n            le(aRef, literal(10))),\n        isNull(aRef),\n        and(lt(literal(8), aRef),\n            lt(aRef, literal(12))),\n        ge(aRef, literal(15)));\n    \r\n    final String simplified =\n        \"SEARCH($0, Sarg[(0..12), [15..+\\u221e) OR NULL])\";\n    final String expanded =\n        \"OR(IS NULL($0), AND(>($0, 0), <($0, 12)), >=($0, 15))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1618,"status":"M"},{"authorDate":"2020-12-24 05:32:41","commitOrder":6,"curCode":"  @Test void testSimplifyRange7() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = and(\n        isNotNull(aRef),\n        gt(aRef, literal(3)),\n        lt(aRef, literal(10)));\n    final String simplified = \"SEARCH($0, Sarg[(3..10); NULL AS FALSE])\";\n    final String expanded = \"AND(IS NOT NULL($0), AND(>($0, 3), <($0, 10)))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","date":"2021-03-03 04:28:27","endLine":1691,"groupId":"10690","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimplifyRange7","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/8a748d0cead45d1ae0e14d213cb2ee4e907113.src","preCode":"  @Test void testSimplifyRange7() {\n    final RexNode aRef = input(tInt(true), 0);\n    \r\n    RexNode expr = and(\n        isNotNull(aRef),\n        gt(aRef, literal(3)),\n        lt(aRef, literal(10)));\n    final String simplified = \"SEARCH($0, Sarg[(3..10)])\";\n    final String expanded = \"AND(>($0, 3), <($0, 10))\";\n    checkSimplify(expr, simplified)\n        .expandedSearch(expanded);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1680,"status":"M"}],"commitId":"00d1086c7003115a9ed9dcc874051f515b7b5aae","commitMessage":"@@@[CALCITE-4446] Implement three-valued logic for SEARCH operator\n\nClose apache/calcite#2357\n","date":"2021-03-03 04:28:27","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"}]
