[{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testBooleanPrecedenceAndAssociativity() {\n    sql(\"select * from t where true and false\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (TRUE AND FALSE)\");\n\n    sql(\"select * from t where null or unknown and unknown\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (NULL OR (UNKNOWN AND UNKNOWN))\");\n\n    sql(\"select * from t where true and (true or true) or false\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE ((TRUE AND (TRUE OR TRUE)) OR FALSE)\");\n\n    sql(\"select * from t where 1 and true\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (1 AND TRUE)\");\n  }\n","date":"2019-09-24 02:59:18","endLine":864,"groupId":"479","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBooleanPrecedenceAndAssociativity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testBooleanPrecedenceAndAssociativity() {\n    sql(\"select * from t where true and false\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (TRUE AND FALSE)\");\n\n    sql(\"select * from t where null or unknown and unknown\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (NULL OR (UNKNOWN AND UNKNOWN))\");\n\n    sql(\"select * from t where true and (true or true) or false\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE ((TRUE AND (TRUE OR TRUE)) OR FALSE)\");\n\n    sql(\"select * from t where 1 and true\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (1 AND TRUE)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":844,"status":"B"},{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testIsDistinctFrom() {\n    sql(\"select x is distinct from y from t\")\n        .ok(\"SELECT (`X` IS DISTINCT FROM `Y`)\\n\"\n            + \"FROM `T`\");\n\n    sql(\"select * from t where x is distinct from y\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (`X` IS DISTINCT FROM `Y`)\");\n\n    sql(\"select * from t where x is distinct from (4,5,6)\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (`X` IS DISTINCT FROM (ROW(4, 5, 6)))\");\n\n    sql(\"select * from t where x is distinct from row (4,5,6)\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (`X` IS DISTINCT FROM (ROW(4, 5, 6)))\");\n\n    sql(\"select * from t where true is distinct from true\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (TRUE IS DISTINCT FROM TRUE)\");\n\n    sql(\"select * from t where true is distinct from true is true\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE ((TRUE IS DISTINCT FROM TRUE) IS TRUE)\");\n  }\n","date":"2019-09-24 02:59:18","endLine":1329,"groupId":"479","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsDistinctFrom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testIsDistinctFrom() {\n    sql(\"select x is distinct from y from t\")\n        .ok(\"SELECT (`X` IS DISTINCT FROM `Y`)\\n\"\n            + \"FROM `T`\");\n\n    sql(\"select * from t where x is distinct from y\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (`X` IS DISTINCT FROM `Y`)\");\n\n    sql(\"select * from t where x is distinct from (4,5,6)\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (`X` IS DISTINCT FROM (ROW(4, 5, 6)))\");\n\n    sql(\"select * from t where x is distinct from row (4,5,6)\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (`X` IS DISTINCT FROM (ROW(4, 5, 6)))\");\n\n    sql(\"select * from t where true is distinct from true\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (TRUE IS DISTINCT FROM TRUE)\");\n\n    sql(\"select * from t where true is distinct from true is true\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE ((TRUE IS DISTINCT FROM TRUE) IS TRUE)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1300,"status":"MB"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testBooleanPrecedenceAndAssociativity() {\n    sql(\"select * from t where true and false\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (TRUE AND FALSE)\");\n\n    sql(\"select * from t where null or unknown and unknown\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (NULL OR (UNKNOWN AND UNKNOWN))\");\n\n    sql(\"select * from t where true and (true or true) or false\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE ((TRUE AND (TRUE OR TRUE)) OR FALSE)\");\n\n    sql(\"select * from t where 1 and true\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (1 AND TRUE)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":835,"groupId":"10842","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBooleanPrecedenceAndAssociativity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testBooleanPrecedenceAndAssociativity() {\n    sql(\"select * from t where true and false\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (TRUE AND FALSE)\");\n\n    sql(\"select * from t where null or unknown and unknown\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (NULL OR (UNKNOWN AND UNKNOWN))\");\n\n    sql(\"select * from t where true and (true or true) or false\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE ((TRUE AND (TRUE OR TRUE)) OR FALSE)\");\n\n    sql(\"select * from t where 1 and true\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (1 AND TRUE)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":815,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testIsDistinctFrom() {\n    sql(\"select x is distinct from y from t\")\n        .ok(\"SELECT (`X` IS DISTINCT FROM `Y`)\\n\"\n            + \"FROM `T`\");\n\n    sql(\"select * from t where x is distinct from y\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (`X` IS DISTINCT FROM `Y`)\");\n\n    sql(\"select * from t where x is distinct from (4,5,6)\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (`X` IS DISTINCT FROM (ROW(4, 5, 6)))\");\n\n    sql(\"select * from t where x is distinct from row (4,5,6)\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (`X` IS DISTINCT FROM (ROW(4, 5, 6)))\");\n\n    sql(\"select * from t where true is distinct from true\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (TRUE IS DISTINCT FROM TRUE)\");\n\n    sql(\"select * from t where true is distinct from true is true\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE ((TRUE IS DISTINCT FROM TRUE) IS TRUE)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1331,"groupId":"10842","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsDistinctFrom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testIsDistinctFrom() {\n    sql(\"select x is distinct from y from t\")\n        .ok(\"SELECT (`X` IS DISTINCT FROM `Y`)\\n\"\n            + \"FROM `T`\");\n\n    sql(\"select * from t where x is distinct from y\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (`X` IS DISTINCT FROM `Y`)\");\n\n    sql(\"select * from t where x is distinct from (4,5,6)\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (`X` IS DISTINCT FROM (ROW(4, 5, 6)))\");\n\n    sql(\"select * from t where x is distinct from row (4,5,6)\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (`X` IS DISTINCT FROM (ROW(4, 5, 6)))\");\n\n    sql(\"select * from t where true is distinct from true\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE (TRUE IS DISTINCT FROM TRUE)\");\n\n    sql(\"select * from t where true is distinct from true is true\")\n        .ok(\"SELECT *\\n\"\n            + \"FROM `T`\\n\"\n            + \"WHERE ((TRUE IS DISTINCT FROM TRUE) IS TRUE)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1302,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
