[{"authorTime":"2016-05-01 12:16:22","codes":[{"authorDate":"2016-05-01 12:16:22","commitOrder":2,"curCode":"  @Test public void testMultiMaterializationMultiUsage() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select \\\"deptno\\\", count(*) as c from \\\"emps\\\" group by \\\"deptno\\\") using (\\\"deptno\\\")\";\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select \\\"deptno\\\", count(*) as c, sum(\\\"empid\\\") as s from \\\"emps\\\" group by \\\"deptno\\\"\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","date":"2016-05-06 13:07:12","endLine":988,"groupId":"2004","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiMaterializationMultiUsage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ba/9a05eb1ddb1573c540033eca275f6fdbc5e583.src","preCode":"  @Test public void testMultiMaterializationMultiUsage() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select \\\"deptno\\\", count(*) as c from \\\"emps\\\" group by \\\"deptno\\\") using (\\\"deptno\\\")\";\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select \\\"deptno\\\", count(*) as c, sum(\\\"empid\\\") as s from \\\"emps\\\" group by \\\"deptno\\\"\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":972,"status":"MB"},{"authorDate":"2016-05-01 12:16:22","commitOrder":2,"curCode":"  @Test public void testMultiMaterializationOnJoinQuery() {\n    final String q = \"select *\\n\"\n        + \"from \\\"emps\\\"\\n\"\n        + \"join \\\"depts\\\" using (\\\"deptno\\\") where \\\"empid\\\" < 300 \"\n        + \"and \\\"depts\\\".\\\"deptno\\\" > 200\";\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\",\n              \"m1\", \"select * from \\\"depts\\\" where \\\"deptno\\\" > 100\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","date":"2016-05-06 13:07:12","endLine":1024,"groupId":"13471","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiMaterializationOnJoinQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ba/9a05eb1ddb1573c540033eca275f6fdbc5e583.src","preCode":"  @Test public void testMultiMaterializationOnJoinQuery() {\n    final String q = \"select *\\n\"\n        + \"from \\\"emps\\\"\\n\"\n        + \"join \\\"depts\\\" using (\\\"deptno\\\") where \\\"empid\\\" < 300 \"\n        + \"and \\\"depts\\\".\\\"deptno\\\" > 200\";\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\",\n              \"m1\", \"select * from \\\"depts\\\" where \\\"deptno\\\" > 100\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1007,"status":"B"}],"commitId":"bf098dd6737bdc78169961e076ba53bb30ba76d7","commitMessage":"@@@[CALCITE-1216] Rule to convert Filter-on-Scan to materialized view (Amogh Margoor)\n\nClose apache/calcite#224\n\nThis will allow join queries with filter to be optimized by Materialized\nViews. It waits for predicate tot be pushed across join onto table scan. \nand then check if it can possible do any substitution for it.\n","date":"2016-05-06 13:07:12","modifiedFileCount":"6","status":"M","submitter":"Amogh Margoor"},{"authorTime":"2017-04-21 00:39:18","codes":[{"authorDate":"2017-04-21 00:39:18","commitOrder":3,"curCode":"  @Test public void testMultiMaterializationMultiUsage() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select \\\"deptno\\\", count(*) as c from \\\"emps\\\" group by \\\"deptno\\\") using (\\\"deptno\\\")\";\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select \\\"deptno\\\", count(*) as c, sum(\\\"empid\\\") as s from \\\"emps\\\" group by \\\"deptno\\\"\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","date":"2017-04-27 03:02:10","endLine":1562,"groupId":"13415","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiMaterializationMultiUsage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/e76262b205b3d8cb4d11705fc860645005924e.src","preCode":"  @Test public void testMultiMaterializationMultiUsage() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select \\\"deptno\\\", count(*) as c from \\\"emps\\\" group by \\\"deptno\\\") using (\\\"deptno\\\")\";\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select \\\"deptno\\\", count(*) as c, sum(\\\"empid\\\") as s from \\\"emps\\\" group by \\\"deptno\\\"\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1546,"status":"M"},{"authorDate":"2017-04-21 00:39:18","commitOrder":3,"curCode":"  @Test public void testMultiMaterializationOnJoinQuery() {\n    final String q = \"select *\\n\"\n        + \"from \\\"emps\\\"\\n\"\n        + \"join \\\"depts\\\" using (\\\"deptno\\\") where \\\"empid\\\" < 300 \"\n        + \"and \\\"depts\\\".\\\"deptno\\\" > 200\";\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\",\n              \"m1\", \"select * from \\\"depts\\\" where \\\"deptno\\\" > 100\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","date":"2017-04-27 03:02:10","endLine":1598,"groupId":"13471","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiMaterializationOnJoinQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/e76262b205b3d8cb4d11705fc860645005924e.src","preCode":"  @Test public void testMultiMaterializationOnJoinQuery() {\n    final String q = \"select *\\n\"\n        + \"from \\\"emps\\\"\\n\"\n        + \"join \\\"depts\\\" using (\\\"deptno\\\") where \\\"empid\\\" < 300 \"\n        + \"and \\\"depts\\\".\\\"deptno\\\" > 200\";\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\",\n              \"m1\", \"select * from \\\"depts\\\" where \\\"deptno\\\" > 100\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1581,"status":"M"}],"commitId":"1f81e1353605fc2d16de9b4d56821736b0e82464","commitMessage":"@@@[CALCITE-1731] Materialized view rewriting for join and aggregate operators\n\n* Support for rewriting when view contains cardinality-preserving joins that are not present in the query\n\nClose apache/calcite#414\n","date":"2017-04-27 03:02:10","modifiedFileCount":"15","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2018-09-16 18:12:25","codes":[{"authorDate":"2018-09-16 18:12:25","commitOrder":4,"curCode":"  @Test public void testMultiMaterializationMultiUsage() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select \\\"deptno\\\", count(*) as c from \\\"emps\\\" group by \\\"deptno\\\") using (\\\"deptno\\\")\";\n    try (TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select \\\"deptno\\\", count(*) as c, sum(\\\"empid\\\") as s from \\\"emps\\\" group by \\\"deptno\\\"\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","date":"2018-09-16 20:33:59","endLine":2085,"groupId":"13415","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiMaterializationMultiUsage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1c/95b8ff81b87ddd432244fa2b82eb532603dac5.src","preCode":"  @Test public void testMultiMaterializationMultiUsage() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select \\\"deptno\\\", count(*) as c from \\\"emps\\\" group by \\\"deptno\\\") using (\\\"deptno\\\")\";\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select \\\"deptno\\\", count(*) as c, sum(\\\"empid\\\") as s from \\\"emps\\\" group by \\\"deptno\\\"\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2069,"status":"M"},{"authorDate":"2018-09-16 18:12:25","commitOrder":4,"curCode":"  @Test public void testMultiMaterializationOnJoinQuery() {\n    final String q = \"select *\\n\"\n        + \"from \\\"emps\\\"\\n\"\n        + \"join \\\"depts\\\" using (\\\"deptno\\\") where \\\"empid\\\" < 300 \"\n        + \"and \\\"depts\\\".\\\"deptno\\\" > 200\";\n    try (TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\",\n              \"m1\", \"select * from \\\"depts\\\" where \\\"deptno\\\" > 100\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","date":"2018-09-16 20:33:59","endLine":2121,"groupId":"13471","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiMaterializationOnJoinQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1c/95b8ff81b87ddd432244fa2b82eb532603dac5.src","preCode":"  @Test public void testMultiMaterializationOnJoinQuery() {\n    final String q = \"select *\\n\"\n        + \"from \\\"emps\\\"\\n\"\n        + \"join \\\"depts\\\" using (\\\"deptno\\\") where \\\"empid\\\" < 300 \"\n        + \"and \\\"depts\\\".\\\"deptno\\\" > 200\";\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\",\n              \"m1\", \"select * from \\\"depts\\\" where \\\"deptno\\\" > 100\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2104,"status":"M"}],"commitId":"4b4d8037c5073e4eb5702b12bc4ecade31476616","commitMessage":"@@@[CALCITE-2559] Update Checkstyle to 7.8.2\n\nIt catches violations better and it caches validation results.  so repeated validations are faster\n","date":"2018-09-16 20:33:59","modifiedFileCount":"47","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testMultiMaterializationMultiUsage() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select \\\"deptno\\\", count(*) as c from \\\"emps\\\" group by \\\"deptno\\\") using (\\\"deptno\\\")\";\n    try (TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select \\\"deptno\\\", count(*) as c, sum(\\\"empid\\\") as s from \\\"emps\\\" group by \\\"deptno\\\"\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":2686,"groupId":"101412","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiMaterializationMultiUsage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8b/332217db8c2c012d2d9e07f331a0deba461adb.src","preCode":"  @Test public void testMultiMaterializationMultiUsage() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select \\\"deptno\\\", count(*) as c from \\\"emps\\\" group by \\\"deptno\\\") using (\\\"deptno\\\")\";\n    try (TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select \\\"deptno\\\", count(*) as c, sum(\\\"empid\\\") as s from \\\"emps\\\" group by \\\"deptno\\\"\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2670,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testMultiMaterializationOnJoinQuery() {\n    final String q = \"select *\\n\"\n        + \"from \\\"emps\\\"\\n\"\n        + \"join \\\"depts\\\" using (\\\"deptno\\\") where \\\"empid\\\" < 300 \"\n        + \"and \\\"depts\\\".\\\"deptno\\\" > 200\";\n    try (TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\",\n              \"m1\", \"select * from \\\"depts\\\" where \\\"deptno\\\" > 100\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":2722,"groupId":"101412","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiMaterializationOnJoinQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8b/332217db8c2c012d2d9e07f331a0deba461adb.src","preCode":"  @Test public void testMultiMaterializationOnJoinQuery() {\n    final String q = \"select *\\n\"\n        + \"from \\\"emps\\\"\\n\"\n        + \"join \\\"depts\\\" using (\\\"deptno\\\") where \\\"empid\\\" < 300 \"\n        + \"and \\\"depts\\\".\\\"deptno\\\" > 200\";\n    try (TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 500\",\n              \"m1\", \"select * from \\\"depts\\\" where \\\"deptno\\\" > 100\")\n          .query(q)\n          .enableMaterializations(true)\n          .explainContains(\"EnumerableTableScan(table=[[hr, m0]])\")\n          .explainContains(\"EnumerableTableScan(table=[[hr, m1]])\")\n          .sameResultWithMaterializationsDisabled();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2705,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
