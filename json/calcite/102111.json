[{"authorTime":"2020-04-29 22:56:19","codes":[{"authorDate":"2020-04-29 22:56:19","commitOrder":1,"curCode":"  default RelNode passThrough(RelTraitSet required) {\n    Pair<RelTraitSet, List<RelTraitSet>> p = passThroughTraits(required);\n    if (p == null) {\n      return null;\n    }\n    int size = getInputs().size();\n    assert size == p.right.size();\n    List<RelNode> list = new ArrayList<>(size);\n    for (int i = 0; i < size; i++) {\n      RelNode n = RelOptRule.convert(getInput(i), p.right.get(i));\n      list.add(n);\n    }\n    return copy(p.left, list);\n  }\n","date":"2020-05-11 11:40:36","endLine":89,"groupId":"2223","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"passThrough","params":"(RelTraitSetrequired)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a2/839a404076182d1f8d19af70d32dd11dee2ad7.src","preCode":"  default RelNode passThrough(RelTraitSet required) {\n    Pair<RelTraitSet, List<RelTraitSet>> p = passThroughTraits(required);\n    if (p == null) {\n      return null;\n    }\n    int size = getInputs().size();\n    assert size == p.right.size();\n    List<RelNode> list = new ArrayList<>(size);\n    for (int i = 0; i < size; i++) {\n      RelNode n = RelOptRule.convert(getInput(i), p.right.get(i));\n      list.add(n);\n    }\n    return copy(p.left, list);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/PhysicalNode.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2020-04-29 22:56:19","commitOrder":1,"curCode":"  default RelNode derive(RelTraitSet childTraits, int childId) {\n    Pair<RelTraitSet, List<RelTraitSet>> p = deriveTraits(childTraits, childId);\n    if (p == null) {\n      return null;\n    }\n    int size = getInputs().size();\n    assert size == p.right.size();\n    List<RelNode> list = new ArrayList<>(size);\n    for (int i = 0; i < size; i++) {\n      RelNode node = getInput(i);\n      node = RelOptRule.convert(node, p.right.get(i));\n      list.add(node);\n    }\n    return copy(p.left, list);\n  }\n","date":"2020-05-11 11:40:36","endLine":122,"groupId":"2223","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"derive","params":"(RelTraitSetchildTraits@intchildId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a2/839a404076182d1f8d19af70d32dd11dee2ad7.src","preCode":"  default RelNode derive(RelTraitSet childTraits, int childId) {\n    Pair<RelTraitSet, List<RelTraitSet>> p = deriveTraits(childTraits, childId);\n    if (p == null) {\n      return null;\n    }\n    int size = getInputs().size();\n    assert size == p.right.size();\n    List<RelNode> list = new ArrayList<>(size);\n    for (int i = 0; i < size; i++) {\n      RelNode node = getInput(i);\n      node = RelOptRule.convert(node, p.right.get(i));\n      list.add(node);\n    }\n    return copy(p.left, list);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/PhysicalNode.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"}],"commitId":"9c31d9e83dc718800a36f7719534f9f74633c8a7","commitMessage":"@@@[CALCITE-3896] Top down trait request\n\n1. Top-down trait request\n2. Bottom-up trait derivation\n3. Trait enforcement without AbstractConverter\n\nHow to use?\n\n1. Enable top-down optimization by setting {VolcanoPlanner#setTopDownOpt(boolean)}\nor add 'calcite.planner.topdown.opt=true' to saffron.properties config file.\n\n2. Let your convention's rel interface extends {PhysicalNode}.  see\n{EnumerableRel} as an example.\n\n3. Each physical operator overrides any one of the two methods:\n{PhysicalNode#passThrough(RelTraitSet)} or\n{PhysicalNode#passThroughTraits(RelTraitSet)} depending on your needs.\n\n4. Choose derive mode for each physical operator by overriding\n{PhysicalNode#getDeriveMode()}.\n\n5. If the derive mode is {DeriveMode#OMAKASE}.  override method\n{PhysicalNode#derive(List)} in the physical operator.  otherwise.  override\n{PhysicalNode#derive(RelTraitSet.  int)} or\n{PhysicalNode#deriveTraits(RelTraitSet.  int)}.\n\n6. Mark your enforcer operator by overriding {RelNode#isEnforcer()}.  see\n{Sort#isEnforcer()} as an example. This is important.  because it can help\n{VolcanoPlanner} avoid unnecessary trait propagation and derivation.  therefore\nimprove optimization efficiency.\n\n7. Implement {Convention#enforce(RelNode.  RelTraitSet)} in your convention. \nwhich generates appropriate physical enforcer. See\n{EnumerableConvention#enforce(RelNode.  RelTraitSet)} as example. Simply return\nnull if you don't want physical trait enforcement.\n\nHow does it work?\n\nLet S# denote the seed physical operator in a RelSet after logical and physical\nrules transformation.  P# denote the physical operator generated by passing down\nparent trait requirements.  D# denote the physical operator generated by\nderiving from child delivered traitSets.\n\nThe initial rel list state in a RelSet is as follows:\n    cursor\n      |\n      V\n     S1.  S2\n\nWhen we create a task for RelSubset1.  the task will immediately pass the\nsubset's traitSet to seed operators.  S1 and S2.  now we have:\n    cursor\n      |\n      V\n     S1.  S2.  P1.  P2\n\nThe subset task will create a optimization task for the relnode pointed by\ncursor.  and move cursor to next available physical operator S2. In the task for\nS1.  it will continue optimize its child nodes.  which are RelSubsets. After\nchild inputs optimization is finished.  S1 will derive new relnodes from\ndelivered subsets in input RelSet. Once task for S1 is completed.  we have:\n        cursor\n          |\n          V\n     S1.  S2.  P1.  P2.  D1\n\nThe subset task continues scheduling task for S2.  P1... until there is no more\nrelnode created for the RelSet.  then we have:\n                                cursor\n                                  |\n                                  V\n     S1.  S2.  P1.  P2.  D1.  D2.  D3.  null\n\nWhen a task for another RelSubset2 is created.  the task will try to pass down\nthe subset's traitSet to seed operator S1 and S2.  now the RelSet looks like:\n                                cursor\n                                  |\n                                  V\n     S1.  S2.  P1.  P2.  D1.  D2.  D3.  P3.  P4\n\nThe process continues till there is no more subsets or relnodes created for the\nRelSet.\n\nSee https://t.ly/MmaF for discussion.\n\nClose #1953\n","date":"2020-05-11 11:40:36","modifiedFileCount":"17","status":"B","submitter":"Haisheng Yuan"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  default @Nullable RelNode passThrough(RelTraitSet required) {\n    Pair<RelTraitSet, List<RelTraitSet>> p = passThroughTraits(required);\n    if (p == null) {\n      return null;\n    }\n    int size = getInputs().size();\n    assert size == p.right.size();\n    List<RelNode> list = new ArrayList<>(size);\n    for (int i = 0; i < size; i++) {\n      RelNode n = RelOptRule.convert(getInput(i), p.right.get(i));\n      list.add(n);\n    }\n    return copy(p.left, list);\n  }\n","date":"2020-11-30 06:45:33","endLine":91,"groupId":"102111","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"passThrough","params":"(RelTraitSetrequired)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8e/32b9509e34f43572ceffdf8c473865edd08b4f.src","preCode":"  default RelNode passThrough(RelTraitSet required) {\n    Pair<RelTraitSet, List<RelTraitSet>> p = passThroughTraits(required);\n    if (p == null) {\n      return null;\n    }\n    int size = getInputs().size();\n    assert size == p.right.size();\n    List<RelNode> list = new ArrayList<>(size);\n    for (int i = 0; i < size; i++) {\n      RelNode n = RelOptRule.convert(getInput(i), p.right.get(i));\n      list.add(n);\n    }\n    return copy(p.left, list);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/PhysicalNode.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  default @Nullable RelNode derive(RelTraitSet childTraits, int childId) {\n    Pair<RelTraitSet, List<RelTraitSet>> p = deriveTraits(childTraits, childId);\n    if (p == null) {\n      return null;\n    }\n    int size = getInputs().size();\n    assert size == p.right.size();\n    List<RelNode> list = new ArrayList<>(size);\n    for (int i = 0; i < size; i++) {\n      RelNode node = getInput(i);\n      node = RelOptRule.convert(node, p.right.get(i));\n      list.add(node);\n    }\n    return copy(p.left, list);\n  }\n","date":"2020-11-30 06:45:33","endLine":124,"groupId":"102111","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"derive","params":"(RelTraitSetchildTraits@intchildId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8e/32b9509e34f43572ceffdf8c473865edd08b4f.src","preCode":"  default RelNode derive(RelTraitSet childTraits, int childId) {\n    Pair<RelTraitSet, List<RelTraitSet>> p = deriveTraits(childTraits, childId);\n    if (p == null) {\n      return null;\n    }\n    int size = getInputs().size();\n    assert size == p.right.size();\n    List<RelNode> list = new ArrayList<>(size);\n    for (int i = 0; i < size; i++) {\n      RelNode node = getInput(i);\n      node = RelOptRule.convert(node, p.right.get(i));\n      list.add(node);\n    }\n    return copy(p.left, list);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/PhysicalNode.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
