[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public static boolean isNullLiteral(\n      RexNode node,\n      boolean allowCast) {\n    if (node instanceof RexLiteral) {\n      RexLiteral literal = (RexLiteral) node;\n      if (literal.getTypeName() == SqlTypeName.NULL) {\n        assert null == literal.getValue();\n        return true;\n      } else {\n        \r\n        \r\n        return false;\n      }\n    }\n    if (allowCast) {\n      if (node.isA(SqlKind.CAST)) {\n        RexCall call = (RexCall) node;\n        if (isNullLiteral(call.operands.get(0), false)) {\n          \r\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n","date":"2014-11-14 09:39:34","endLine":174,"groupId":"156","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"isNullLiteral","params":"(RexNodenode@booleanallowCast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/365e105c6879cd165f026fedc7d2b5c2f9ba27.src","preCode":"  public static boolean isNullLiteral(\n      RexNode node,\n      boolean allowCast) {\n    if (node instanceof RexLiteral) {\n      RexLiteral literal = (RexLiteral) node;\n      if (literal.getTypeName() == SqlTypeName.NULL) {\n        assert null == literal.getValue();\n        return true;\n      } else {\n        \r\n        \r\n        return false;\n      }\n    }\n    if (allowCast) {\n      if (node.isA(SqlKind.CAST)) {\n        RexCall call = (RexCall) node;\n        if (isNullLiteral(call.operands.get(0), false)) {\n          \r\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public static boolean isNullLiteral(\n      SqlNode node,\n      boolean allowCast) {\n    if (node instanceof SqlLiteral) {\n      SqlLiteral literal = (SqlLiteral) node;\n      if (literal.getTypeName() == SqlTypeName.NULL) {\n        assert null == literal.getValue();\n        return true;\n      } else {\n        \r\n        \r\n        return false;\n      }\n    }\n    if (allowCast) {\n      if (node.getKind() == SqlKind.CAST) {\n        SqlCall call = (SqlCall) node;\n        if (isNullLiteral(call.operand(0), false)) {\n          \r\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n","date":"2014-11-14 09:39:34","endLine":151,"groupId":"14640","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"isNullLiteral","params":"(SqlNodenode@booleanallowCast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/da/dc3a3037b1935ecd3a085a40e99aa461cd3bb1.src","preCode":"  public static boolean isNullLiteral(\n      SqlNode node,\n      boolean allowCast) {\n    if (node instanceof SqlLiteral) {\n      SqlLiteral literal = (SqlLiteral) node;\n      if (literal.getTypeName() == SqlTypeName.NULL) {\n        assert null == literal.getValue();\n        return true;\n      } else {\n        \r\n        \r\n        return false;\n      }\n    }\n    if (allowCast) {\n      if (node.getKind() == SqlKind.CAST) {\n        SqlCall call = (SqlCall) node;\n        if (isNullLiteral(call.operand(0), false)) {\n          \r\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  public static boolean isNullLiteral(\n      RexNode node,\n      boolean allowCast) {\n    if (node instanceof RexLiteral) {\n      RexLiteral literal = (RexLiteral) node;\n      if (literal.getTypeName() == SqlTypeName.NULL) {\n        assert null == literal.getValue();\n        return true;\n      } else {\n        \r\n        \r\n        return false;\n      }\n    }\n    if (allowCast) {\n      if (node.isA(SqlKind.CAST)) {\n        RexCall call = (RexCall) node;\n        if (isNullLiteral(call.operands.get(0), false)) {\n          \r\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n","date":"2014-11-14 09:39:34","endLine":174,"groupId":"101728","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"isNullLiteral","params":"(RexNodenode@booleanallowCast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/365e105c6879cd165f026fedc7d2b5c2f9ba27.src","preCode":"  public static boolean isNullLiteral(\n      RexNode node,\n      boolean allowCast) {\n    if (node instanceof RexLiteral) {\n      RexLiteral literal = (RexLiteral) node;\n      if (literal.getTypeName() == SqlTypeName.NULL) {\n        assert null == literal.getValue();\n        return true;\n      } else {\n        \r\n        \r\n        return false;\n      }\n    }\n    if (allowCast) {\n      if (node.isA(SqlKind.CAST)) {\n        RexCall call = (RexCall) node;\n        if (isNullLiteral(call.operands.get(0), false)) {\n          \r\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"N"},{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  public static boolean isNullLiteral(\n      @Nullable SqlNode node,\n      boolean allowCast) {\n    if (node instanceof SqlLiteral) {\n      SqlLiteral literal = (SqlLiteral) node;\n      if (literal.getTypeName() == SqlTypeName.NULL) {\n        assert null == literal.getValue();\n        return true;\n      } else {\n        \r\n        \r\n        return false;\n      }\n    }\n    if (allowCast && node != null) {\n      if (node.getKind() == SqlKind.CAST) {\n        SqlCall call = (SqlCall) node;\n        if (isNullLiteral(call.operand(0), false)) {\n          \r\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n","date":"2020-11-30 06:45:33","endLine":195,"groupId":"101728","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"isNullLiteral","params":"(@NullableSqlNodenode@booleanallowCast)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2f/d99e5027dd2f31a3e603ec4898275b6372c6d6.src","preCode":"  public static boolean isNullLiteral(\n      SqlNode node,\n      boolean allowCast) {\n    if (node instanceof SqlLiteral) {\n      SqlLiteral literal = (SqlLiteral) node;\n      if (literal.getTypeName() == SqlTypeName.NULL) {\n        assert null == literal.getValue();\n        return true;\n      } else {\n        \r\n        \r\n        return false;\n      }\n    }\n    if (allowCast) {\n      if (node.getKind() == SqlKind.CAST) {\n        SqlCall call = (SqlCall) node;\n        if (isNullLiteral(call.operand(0), false)) {\n          \r\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
