[{"authorTime":"2019-03-16 00:43:18","codes":[{"authorDate":"2019-03-16 00:43:18","commitOrder":1,"curCode":"  public double tableCardinality(RelOptTable table) {\n    final JdbcTable jdbcTable = table.unwrap(JdbcTable.class);\n    return withBuilder(jdbcTable.jdbcSchema,\n        (cluster, relOptSchema, jdbcSchema, relBuilder) -> {\n          \r\n          \r\n          relBuilder.push(table.toRel(ViewExpanders.simpleContext(cluster)))\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), jdbcSchema.dialect);\n          final DataSource dataSource = jdbcSchema.getDataSource();\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final double cardinality = resultSet.getDouble(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return cardinality;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","date":"2019-04-06 06:22:54","endLine":110,"groupId":"452","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"tableCardinality","params":"(RelOptTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2f/4af9db4f2e86c0c8cd76fc32ea20e1a34221f4.src","preCode":"  public double tableCardinality(RelOptTable table) {\n    final JdbcTable jdbcTable = table.unwrap(JdbcTable.class);\n    return withBuilder(jdbcTable.jdbcSchema,\n        (cluster, relOptSchema, jdbcSchema, relBuilder) -> {\n          \r\n          \r\n          relBuilder.push(table.toRel(ViewExpanders.simpleContext(cluster)))\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), jdbcSchema.dialect);\n          final DataSource dataSource = jdbcSchema.getDataSource();\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final double cardinality = resultSet.getDouble(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return cardinality;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","realPath":"core/src/main/java/org/apache/calcite/statistic/QuerySqlStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"},{"authorDate":"2019-03-16 00:43:18","commitOrder":1,"curCode":"  public boolean isForeignKey(RelOptTable fromTable, List<Integer> fromColumns,\n      RelOptTable toTable, List<Integer> toColumns) {\n    final JdbcTable jdbcTable = fromTable.unwrap(JdbcTable.class);\n    return withBuilder(jdbcTable.jdbcSchema,\n        (cluster, relOptSchema, jdbcSchema, relBuilder) -> {\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          final RelOptTable.ToRelContext toRelContext =\n              ViewExpanders.simpleContext(cluster);\n          relBuilder.push(fromTable.toRel(toRelContext))\n              .filter(fromColumns.stream()\n                  .map(column ->\n                      relBuilder.call(SqlStdOperatorTable.IS_NOT_NULL,\n                          relBuilder.field(column)))\n                  .collect(Collectors.toList()))\n              .project(relBuilder.fields(fromColumns))\n              .push(toTable.toRel(toRelContext))\n              .project(relBuilder.fields(toColumns))\n              .minus(false, 2)\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), jdbcSchema.dialect);\n          final DataSource dataSource = jdbcTable.jdbcSchema.getDataSource();\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final int count = resultSet.getInt(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return count == 0;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","date":"2019-04-06 06:22:54","endLine":155,"groupId":"452","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"isForeignKey","params":"(RelOptTablefromTable@List<Integer>fromColumns@RelOptTabletoTable@List<Integer>toColumns)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2f/4af9db4f2e86c0c8cd76fc32ea20e1a34221f4.src","preCode":"  public boolean isForeignKey(RelOptTable fromTable, List<Integer> fromColumns,\n      RelOptTable toTable, List<Integer> toColumns) {\n    final JdbcTable jdbcTable = fromTable.unwrap(JdbcTable.class);\n    return withBuilder(jdbcTable.jdbcSchema,\n        (cluster, relOptSchema, jdbcSchema, relBuilder) -> {\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          final RelOptTable.ToRelContext toRelContext =\n              ViewExpanders.simpleContext(cluster);\n          relBuilder.push(fromTable.toRel(toRelContext))\n              .filter(fromColumns.stream()\n                  .map(column ->\n                      relBuilder.call(SqlStdOperatorTable.IS_NOT_NULL,\n                          relBuilder.field(column)))\n                  .collect(Collectors.toList()))\n              .project(relBuilder.fields(fromColumns))\n              .push(toTable.toRel(toRelContext))\n              .project(relBuilder.fields(toColumns))\n              .minus(false, 2)\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), jdbcSchema.dialect);\n          final DataSource dataSource = jdbcTable.jdbcSchema.getDataSource();\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final int count = resultSet.getInt(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return count == 0;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","realPath":"core/src/main/java/org/apache/calcite/statistic/QuerySqlStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"B"}],"commitId":"906183a35b6355b3f5e394ce838f5ea1dad09ad2","commitMessage":"@@@[CALCITE-2914] Add a new statistic provider.  to improve how LatticeSuggester deduces foreign keys\n\nStatistic provider now generates SQL statements to look at a join\ncondition and figure out whether either side is a unique key.  and\nwhether the other side is a foreign key (i.e. does an anti-join to\nverify referential integrity).\n\nCreate new package org.apache.calcite.statistic.  and move some\nexisting classes such as MapSqlStatisticProvider into it.\n\nIn JDBC adapter.  when generating SQL for JDBC tables.  use the foreign\ncatalog.  schema and table name.\n\nIn Frameworks.  use a query provider with a 30 minute.  1. 000 element\ncache.  rather than map provider as default provider.\n\nIn LatticeSuggesterTest we continue to use a MapSqlStatisticProvider. \nfor performance reasons.\n\nFix deprecated calls to AggregateCall.create added in [CALCITE-1172].\n\nClose apache/calcite#1141\n","date":"2019-04-06 06:22:54","modifiedFileCount":"13","status":"B","submitter":"Julian Hyde"},{"authorTime":"2019-09-20 01:53:29","codes":[{"authorDate":"2019-09-20 01:53:29","commitOrder":2,"curCode":"  public double tableCardinality(RelOptTable table) {\n    final SqlDialect dialect = table.unwrap(SqlDialect.class);\n    final DataSource dataSource = table.unwrap(DataSource.class);\n    return withBuilder(\n        (cluster, relOptSchema, relBuilder) -> {\n          \r\n          \r\n          relBuilder.push(table.toRel(ViewExpanders.simpleContext(cluster)))\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), dialect);\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final double cardinality = resultSet.getDouble(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return cardinality;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","date":"2019-09-25 02:32:40","endLine":108,"groupId":"452","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"tableCardinality","params":"(RelOptTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/5426cc40fa5ee56a5f4f710dfb7cd90d0fb51a.src","preCode":"  public double tableCardinality(RelOptTable table) {\n    final JdbcTable jdbcTable = table.unwrap(JdbcTable.class);\n    return withBuilder(jdbcTable.jdbcSchema,\n        (cluster, relOptSchema, jdbcSchema, relBuilder) -> {\n          \r\n          \r\n          relBuilder.push(table.toRel(ViewExpanders.simpleContext(cluster)))\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), jdbcSchema.dialect);\n          final DataSource dataSource = jdbcSchema.getDataSource();\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final double cardinality = resultSet.getDouble(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return cardinality;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","realPath":"core/src/main/java/org/apache/calcite/statistic/QuerySqlStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2019-09-20 01:53:29","commitOrder":2,"curCode":"  public boolean isForeignKey(RelOptTable fromTable, List<Integer> fromColumns,\n      RelOptTable toTable, List<Integer> toColumns) {\n    final SqlDialect dialect = fromTable.unwrap(SqlDialect.class);\n    final DataSource dataSource = fromTable.unwrap(DataSource.class);\n    return withBuilder(\n        (cluster, relOptSchema, relBuilder) -> {\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          final RelOptTable.ToRelContext toRelContext =\n              ViewExpanders.simpleContext(cluster);\n          relBuilder.push(fromTable.toRel(toRelContext))\n              .filter(fromColumns.stream()\n                  .map(column ->\n                      relBuilder.call(SqlStdOperatorTable.IS_NOT_NULL,\n                          relBuilder.field(column)))\n                  .collect(Collectors.toList()))\n              .project(relBuilder.fields(fromColumns))\n              .push(toTable.toRel(toRelContext))\n              .project(relBuilder.fields(toColumns))\n              .minus(false, 2)\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), dialect);\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final int count = resultSet.getInt(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return count == 0;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","date":"2019-09-25 02:32:40","endLine":153,"groupId":"452","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"isForeignKey","params":"(RelOptTablefromTable@List<Integer>fromColumns@RelOptTabletoTable@List<Integer>toColumns)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/5426cc40fa5ee56a5f4f710dfb7cd90d0fb51a.src","preCode":"  public boolean isForeignKey(RelOptTable fromTable, List<Integer> fromColumns,\n      RelOptTable toTable, List<Integer> toColumns) {\n    final JdbcTable jdbcTable = fromTable.unwrap(JdbcTable.class);\n    return withBuilder(jdbcTable.jdbcSchema,\n        (cluster, relOptSchema, jdbcSchema, relBuilder) -> {\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          final RelOptTable.ToRelContext toRelContext =\n              ViewExpanders.simpleContext(cluster);\n          relBuilder.push(fromTable.toRel(toRelContext))\n              .filter(fromColumns.stream()\n                  .map(column ->\n                      relBuilder.call(SqlStdOperatorTable.IS_NOT_NULL,\n                          relBuilder.field(column)))\n                  .collect(Collectors.toList()))\n              .project(relBuilder.fields(fromColumns))\n              .push(toTable.toRel(toRelContext))\n              .project(relBuilder.fields(toColumns))\n              .minus(false, 2)\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), jdbcSchema.dialect);\n          final DataSource dataSource = jdbcTable.jdbcSchema.getDataSource();\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final int count = resultSet.getInt(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return count == 0;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","realPath":"core/src/main/java/org/apache/calcite/statistic/QuerySqlStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"3005ff97ddb6173ac339b45affb0b4da5d406345","commitMessage":"@@@[CALCITE-3365] Don't require use of JdbcSchema in QuerySqlStatisticProvider (Lindsey Meyer)\n\nAdd a test case (Julian Hyde)\n\nClose apache/calcite#1467\n","date":"2019-09-25 02:32:40","modifiedFileCount":"4","status":"M","submitter":"Lindsey Meyer"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  @Override public double tableCardinality(RelOptTable table) {\n    final SqlDialect dialect = table.unwrap(SqlDialect.class);\n    final DataSource dataSource = table.unwrap(DataSource.class);\n    return withBuilder(\n        (cluster, relOptSchema, relBuilder) -> {\n          \r\n          \r\n          relBuilder.push(table.toRel(ViewExpanders.simpleContext(cluster)))\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), dialect);\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final double cardinality = resultSet.getDouble(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return cardinality;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","date":"2020-10-07 05:42:47","endLine":108,"groupId":"452","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"tableCardinality","params":"(RelOptTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6f/510811d406a43bd06e607a7c4ed07fd118d1f4.src","preCode":"  public double tableCardinality(RelOptTable table) {\n    final SqlDialect dialect = table.unwrap(SqlDialect.class);\n    final DataSource dataSource = table.unwrap(DataSource.class);\n    return withBuilder(\n        (cluster, relOptSchema, relBuilder) -> {\n          \r\n          \r\n          relBuilder.push(table.toRel(ViewExpanders.simpleContext(cluster)))\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), dialect);\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final double cardinality = resultSet.getDouble(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return cardinality;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","realPath":"core/src/main/java/org/apache/calcite/statistic/QuerySqlStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  @Override public boolean isForeignKey(RelOptTable fromTable, List<Integer> fromColumns,\n      RelOptTable toTable, List<Integer> toColumns) {\n    final SqlDialect dialect = fromTable.unwrap(SqlDialect.class);\n    final DataSource dataSource = fromTable.unwrap(DataSource.class);\n    return withBuilder(\n        (cluster, relOptSchema, relBuilder) -> {\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          final RelOptTable.ToRelContext toRelContext =\n              ViewExpanders.simpleContext(cluster);\n          relBuilder.push(fromTable.toRel(toRelContext))\n              .filter(fromColumns.stream()\n                  .map(column ->\n                      relBuilder.call(SqlStdOperatorTable.IS_NOT_NULL,\n                          relBuilder.field(column)))\n                  .collect(Collectors.toList()))\n              .project(relBuilder.fields(fromColumns))\n              .push(toTable.toRel(toRelContext))\n              .project(relBuilder.fields(toColumns))\n              .minus(false, 2)\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), dialect);\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final int count = resultSet.getInt(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return count == 0;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","date":"2020-10-07 05:42:47","endLine":153,"groupId":"452","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"isForeignKey","params":"(RelOptTablefromTable@List<Integer>fromColumns@RelOptTabletoTable@List<Integer>toColumns)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6f/510811d406a43bd06e607a7c4ed07fd118d1f4.src","preCode":"  public boolean isForeignKey(RelOptTable fromTable, List<Integer> fromColumns,\n      RelOptTable toTable, List<Integer> toColumns) {\n    final SqlDialect dialect = fromTable.unwrap(SqlDialect.class);\n    final DataSource dataSource = fromTable.unwrap(DataSource.class);\n    return withBuilder(\n        (cluster, relOptSchema, relBuilder) -> {\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          final RelOptTable.ToRelContext toRelContext =\n              ViewExpanders.simpleContext(cluster);\n          relBuilder.push(fromTable.toRel(toRelContext))\n              .filter(fromColumns.stream()\n                  .map(column ->\n                      relBuilder.call(SqlStdOperatorTable.IS_NOT_NULL,\n                          relBuilder.field(column)))\n                  .collect(Collectors.toList()))\n              .project(relBuilder.fields(fromColumns))\n              .push(toTable.toRel(toRelContext))\n              .project(relBuilder.fields(toColumns))\n              .minus(false, 2)\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), dialect);\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final int count = resultSet.getInt(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return count == 0;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","realPath":"core/src/main/java/org/apache/calcite/statistic/QuerySqlStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  @Override public double tableCardinality(RelOptTable table) {\n    final SqlDialect dialect = table.unwrapOrThrow(SqlDialect.class);\n    final DataSource dataSource = table.unwrapOrThrow(DataSource.class);\n    return withBuilder(\n        (cluster, relOptSchema, relBuilder) -> {\n          \r\n          \r\n          relBuilder.push(table.toRel(ViewExpanders.simpleContext(cluster)))\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), dialect);\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final double cardinality = resultSet.getDouble(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return cardinality;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","date":"2020-11-30 06:45:33","endLine":109,"groupId":"452","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"tableCardinality","params":"(RelOptTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/fb8dc390c40f2a5adbb52ecf0ad64a9e7b151b.src","preCode":"  @Override public double tableCardinality(RelOptTable table) {\n    final SqlDialect dialect = table.unwrap(SqlDialect.class);\n    final DataSource dataSource = table.unwrap(DataSource.class);\n    return withBuilder(\n        (cluster, relOptSchema, relBuilder) -> {\n          \r\n          \r\n          relBuilder.push(table.toRel(ViewExpanders.simpleContext(cluster)))\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), dialect);\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final double cardinality = resultSet.getDouble(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return cardinality;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","realPath":"core/src/main/java/org/apache/calcite/statistic/QuerySqlStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  @Override public boolean isForeignKey(RelOptTable fromTable, List<Integer> fromColumns,\n      RelOptTable toTable, List<Integer> toColumns) {\n    final SqlDialect dialect = fromTable.unwrapOrThrow(SqlDialect.class);\n    final DataSource dataSource = fromTable.unwrapOrThrow(DataSource.class);\n    return withBuilder(\n        (cluster, relOptSchema, relBuilder) -> {\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          final RelOptTable.ToRelContext toRelContext =\n              ViewExpanders.simpleContext(cluster);\n          relBuilder.push(fromTable.toRel(toRelContext))\n              .filter(fromColumns.stream()\n                  .map(column ->\n                      relBuilder.call(SqlStdOperatorTable.IS_NOT_NULL,\n                          relBuilder.field(column)))\n                  .collect(Collectors.toList()))\n              .project(relBuilder.fields(fromColumns))\n              .push(toTable.toRel(toRelContext))\n              .project(relBuilder.fields(toColumns))\n              .minus(false, 2)\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), dialect);\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final int count = resultSet.getInt(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return count == 0;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","date":"2020-11-30 06:45:33","endLine":154,"groupId":"452","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"isForeignKey","params":"(RelOptTablefromTable@List<Integer>fromColumns@RelOptTabletoTable@List<Integer>toColumns)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/fb8dc390c40f2a5adbb52ecf0ad64a9e7b151b.src","preCode":"  @Override public boolean isForeignKey(RelOptTable fromTable, List<Integer> fromColumns,\n      RelOptTable toTable, List<Integer> toColumns) {\n    final SqlDialect dialect = fromTable.unwrap(SqlDialect.class);\n    final DataSource dataSource = fromTable.unwrap(DataSource.class);\n    return withBuilder(\n        (cluster, relOptSchema, relBuilder) -> {\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          final RelOptTable.ToRelContext toRelContext =\n              ViewExpanders.simpleContext(cluster);\n          relBuilder.push(fromTable.toRel(toRelContext))\n              .filter(fromColumns.stream()\n                  .map(column ->\n                      relBuilder.call(SqlStdOperatorTable.IS_NOT_NULL,\n                          relBuilder.field(column)))\n                  .collect(Collectors.toList()))\n              .project(relBuilder.fields(fromColumns))\n              .push(toTable.toRel(toRelContext))\n              .project(relBuilder.fields(toColumns))\n              .minus(false, 2)\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), dialect);\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final int count = resultSet.getInt(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return count == 0;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","realPath":"core/src/main/java/org/apache/calcite/statistic/QuerySqlStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2021-09-17 17:38:52","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  @Override public double tableCardinality(RelOptTable table) {\n    final SqlDialect dialect = table.unwrapOrThrow(SqlDialect.class);\n    final DataSource dataSource = table.unwrapOrThrow(DataSource.class);\n    return withBuilder(\n        (cluster, relOptSchema, relBuilder) -> {\n          \r\n          \r\n          relBuilder.push(table.toRel(ViewExpanders.simpleContext(cluster)))\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), dialect);\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final double cardinality = resultSet.getDouble(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return cardinality;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","date":"2020-11-30 06:45:33","endLine":109,"groupId":"102204","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"tableCardinality","params":"(RelOptTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/fb8dc390c40f2a5adbb52ecf0ad64a9e7b151b.src","preCode":"  @Override public double tableCardinality(RelOptTable table) {\n    final SqlDialect dialect = table.unwrapOrThrow(SqlDialect.class);\n    final DataSource dataSource = table.unwrapOrThrow(DataSource.class);\n    return withBuilder(\n        (cluster, relOptSchema, relBuilder) -> {\n          \r\n          \r\n          relBuilder.push(table.toRel(ViewExpanders.simpleContext(cluster)))\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), dialect);\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final double cardinality = resultSet.getDouble(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return cardinality;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","realPath":"core/src/main/java/org/apache/calcite/statistic/QuerySqlStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"N"},{"authorDate":"2021-09-17 17:38:52","commitOrder":5,"curCode":"  @Override public boolean isForeignKey(RelOptTable fromTable, List<Integer> fromColumns,\n      RelOptTable toTable, List<Integer> toColumns) {\n    final SqlDialect dialect = fromTable.unwrapOrThrow(SqlDialect.class);\n    final DataSource dataSource = fromTable.unwrapOrThrow(DataSource.class);\n    return withBuilder(\n        (cluster, relOptSchema, relBuilder) -> {\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          final RelOptTable.ToRelContext toRelContext =\n              ViewExpanders.simpleContext(cluster);\n          relBuilder.push(fromTable.toRel(toRelContext))\n              .filter(fromColumns.stream()\n                  .map(column ->\n                      relBuilder.isNotNull(relBuilder.field(column)))\n                  .collect(Collectors.toList()))\n              .project(relBuilder.fields(fromColumns))\n              .push(toTable.toRel(toRelContext))\n              .project(relBuilder.fields(toColumns))\n              .minus(false, 2)\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), dialect);\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final int count = resultSet.getInt(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return count == 0;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","date":"2021-09-18 03:08:56","endLine":153,"groupId":"102204","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"isForeignKey","params":"(RelOptTablefromTable@List<Integer>fromColumns@RelOptTabletoTable@List<Integer>toColumns)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/95/567d1f08bf9991ebb305702dee3300c61078b6.src","preCode":"  @Override public boolean isForeignKey(RelOptTable fromTable, List<Integer> fromColumns,\n      RelOptTable toTable, List<Integer> toColumns) {\n    final SqlDialect dialect = fromTable.unwrapOrThrow(SqlDialect.class);\n    final DataSource dataSource = fromTable.unwrapOrThrow(DataSource.class);\n    return withBuilder(\n        (cluster, relOptSchema, relBuilder) -> {\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          final RelOptTable.ToRelContext toRelContext =\n              ViewExpanders.simpleContext(cluster);\n          relBuilder.push(fromTable.toRel(toRelContext))\n              .filter(fromColumns.stream()\n                  .map(column ->\n                      relBuilder.call(SqlStdOperatorTable.IS_NOT_NULL,\n                          relBuilder.field(column)))\n                  .collect(Collectors.toList()))\n              .project(relBuilder.fields(fromColumns))\n              .push(toTable.toRel(toRelContext))\n              .project(relBuilder.fields(toColumns))\n              .minus(false, 2)\n              .aggregate(relBuilder.groupKey(), relBuilder.count());\n\n          final String sql = toSql(relBuilder.build(), dialect);\n          try (Connection connection = dataSource.getConnection();\n               Statement statement = connection.createStatement();\n               ResultSet resultSet = statement.executeQuery(sql)) {\n            if (!resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            final int count = resultSet.getInt(1);\n            if (resultSet.next()) {\n              throw new AssertionError(\"expected exactly 1 row: \" + sql);\n            }\n            return count == 0;\n          } catch (SQLException e) {\n            throw handle(e, sql);\n          }\n        });\n  }\n","realPath":"core/src/main/java/org/apache/calcite/statistic/QuerySqlStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"4d82c5346292b32a1301214376366c2e8c5a892e","commitMessage":"@@@Add RelBuilder.lessThan.  and use RelBuilder shorthands\n","date":"2021-09-18 03:08:56","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"}]
