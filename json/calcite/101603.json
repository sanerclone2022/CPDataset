[{"authorTime":"2018-11-16 22:09:34","codes":[{"authorDate":"2018-11-16 22:09:34","commitOrder":1,"curCode":"  @Test public void testGetJavaClassWithTwoFieldsStructDataTypeV2() {\n    RelDataType structWithTwoFields = TYPE_FACTORY.createStructType(\n        ImmutableList.of(\n            TYPE_FACTORY.createSqlType(SqlTypeName.INTEGER),\n            TYPE_FACTORY.createSqlType(SqlTypeName.VARCHAR)),\n        ImmutableList.of(\"intField\", \"strField\"));\n    assertRecordType(TYPE_FACTORY.getJavaClass(structWithTwoFields));\n  }\n","date":"2019-03-11 07:55:23","endLine":74,"groupId":"16844","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetJavaClassWithTwoFieldsStructDataTypeV2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cd/0ba7af7392b4fb7628df836aae35819fd1b13f.src","preCode":"  @Test public void testGetJavaClassWithTwoFieldsStructDataTypeV2() {\n    RelDataType structWithTwoFields = TYPE_FACTORY.createStructType(\n        ImmutableList.of(\n            TYPE_FACTORY.createSqlType(SqlTypeName.INTEGER),\n            TYPE_FACTORY.createSqlType(SqlTypeName.VARCHAR)),\n        ImmutableList.of(\"intField\", \"strField\"));\n    assertRecordType(TYPE_FACTORY.getJavaClass(structWithTwoFields));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/jdbc/JavaTypeFactoryTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"},{"authorDate":"2018-11-16 22:09:34","commitOrder":1,"curCode":"  @Test public void testFieldClassOnColumnOfOneFieldStructType() {\n    RelDataType columnType = TYPE_FACTORY.createStructType(\n        ImmutableList.of(TYPE_FACTORY.createSqlType(SqlTypeName.INTEGER)),\n        ImmutableList.of(\"intField\"));\n    RelDataType rowType = TYPE_FACTORY.createStructType(\n        ImmutableList.of(columnType),\n        ImmutableList.of(\"structField\"));\n\n    PhysType rowPhysType = PhysTypeImpl.of(TYPE_FACTORY, rowType, JavaRowFormat.ARRAY);\n    assertEquals(Object[].class, rowPhysType.fieldClass(0));\n  }\n","date":"2019-03-11 07:55:23","endLine":49,"groupId":"16842","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFieldClassOnColumnOfOneFieldStructType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/40/23f3a4b1513cc4caa9d41654dbad5d51ea5789.src","preCode":"  @Test public void testFieldClassOnColumnOfOneFieldStructType() {\n    RelDataType columnType = TYPE_FACTORY.createStructType(\n        ImmutableList.of(TYPE_FACTORY.createSqlType(SqlTypeName.INTEGER)),\n        ImmutableList.of(\"intField\"));\n    RelDataType rowType = TYPE_FACTORY.createStructType(\n        ImmutableList.of(columnType),\n        ImmutableList.of(\"structField\"));\n\n    PhysType rowPhysType = PhysTypeImpl.of(TYPE_FACTORY, rowType, JavaRowFormat.ARRAY);\n    assertEquals(Object[].class, rowPhysType.fieldClass(0));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/adapter/enumerable/PhysTypeTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"}],"commitId":"bfc842a043fc1fb0776d4d2ac633cf91acda3dc0","commitMessage":"@@@[CALCITE-2677] Struct types with one field are not mapped correctly to Java Classes\n\n1. Remove wrong unnesting of single field struct types from JavaTypeFactoryImpl and EnumUtils.\n2. Refactor and move EnumUtils#javaRowClass method in PhysTypeImpl since it is used in only one place.\n3. Add tests for JavaTypeFactoryImpl#getJavaClass and PhysType#fieldClass methods.\n4. Modify EnumerableCollect to work always with rows represented as Object[].  necessary for having MULTISET working after fixing CALCITE-2776.\n5. Modify PhysType#convertTo to use JavaRowFormat instead of PhysType since the conversion is meant to only change the representation of rows in Java.\n6. Disallow optimizations of the row format in the PhysType#convertTo method.\n7. Implement SqlFunctions.slice method according to the specification in StdSqlOperatorTable.SLICE.\n8. Add struct.iq test for reproducing CALCITE-2677 and CALCITE-2776.\n9. Escape tests affected by CALCITE-2776.\n","date":"2019-03-11 07:55:23","modifiedFileCount":"11","status":"B","submitter":"Stamatis Zampetakis"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testGetJavaClassWithTwoFieldsStructDataTypeV2() {\n    RelDataType structWithTwoFields = TYPE_FACTORY.createStructType(\n        ImmutableList.of(\n            TYPE_FACTORY.createSqlType(SqlTypeName.INTEGER),\n            TYPE_FACTORY.createSqlType(SqlTypeName.VARCHAR)),\n        ImmutableList.of(\"intField\", \"strField\"));\n    assertRecordType(TYPE_FACTORY.getJavaClass(structWithTwoFields));\n  }\n","date":"2020-04-06 04:57:49","endLine":76,"groupId":"101603","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetJavaClassWithTwoFieldsStructDataTypeV2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/b8631ce95d07c29338e736426f95181efa2e79.src","preCode":"  @Test public void testGetJavaClassWithTwoFieldsStructDataTypeV2() {\n    RelDataType structWithTwoFields = TYPE_FACTORY.createStructType(\n        ImmutableList.of(\n            TYPE_FACTORY.createSqlType(SqlTypeName.INTEGER),\n            TYPE_FACTORY.createSqlType(SqlTypeName.VARCHAR)),\n        ImmutableList.of(\"intField\", \"strField\"));\n    assertRecordType(TYPE_FACTORY.getJavaClass(structWithTwoFields));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/jdbc/JavaTypeFactoryTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testFieldClassOnColumnOfOneFieldStructType() {\n    RelDataType columnType = TYPE_FACTORY.createStructType(\n        ImmutableList.of(TYPE_FACTORY.createSqlType(SqlTypeName.INTEGER)),\n        ImmutableList.of(\"intField\"));\n    RelDataType rowType = TYPE_FACTORY.createStructType(\n        ImmutableList.of(columnType),\n        ImmutableList.of(\"structField\"));\n\n    PhysType rowPhysType = PhysTypeImpl.of(TYPE_FACTORY, rowType, JavaRowFormat.ARRAY);\n    assertEquals(Object[].class, rowPhysType.fieldClass(0));\n  }\n","date":"2020-04-06 04:57:49","endLine":52,"groupId":"101603","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testFieldClassOnColumnOfOneFieldStructType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0e/23926c7cef3bbefa8057fcdacae49e2c770bd4.src","preCode":"  @Test public void testFieldClassOnColumnOfOneFieldStructType() {\n    RelDataType columnType = TYPE_FACTORY.createStructType(\n        ImmutableList.of(TYPE_FACTORY.createSqlType(SqlTypeName.INTEGER)),\n        ImmutableList.of(\"intField\"));\n    RelDataType rowType = TYPE_FACTORY.createStructType(\n        ImmutableList.of(columnType),\n        ImmutableList.of(\"structField\"));\n\n    PhysType rowPhysType = PhysTypeImpl.of(TYPE_FACTORY, rowType, JavaRowFormat.ARRAY);\n    assertEquals(Object[].class, rowPhysType.fieldClass(0));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/adapter/enumerable/PhysTypeTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
