[{"authorTime":"2020-07-16 08:54:17","codes":[{"authorDate":"2020-06-12 15:56:35","commitOrder":3,"curCode":"    protected boolean collationsCompatible(RelCollation sortCollation,\n        RelCollation implicitCollation) {\n      List<RelFieldCollation> sortFieldCollations = sortCollation.getFieldCollations();\n      List<RelFieldCollation> implicitFieldCollations = implicitCollation.getFieldCollations();\n\n      if (sortFieldCollations.size() > implicitFieldCollations.size()) {\n        return false;\n      }\n      if (sortFieldCollations.size() == 0) {\n        return true;\n      }\n\n      \r\n      boolean reversed = sortFieldCollations.get(0).getDirection().reverse().lax()\n          == implicitFieldCollations.get(0).getDirection();\n\n      for (int i = 0; i < sortFieldCollations.size(); i++) {\n        RelFieldCollation sorted = sortFieldCollations.get(i);\n        RelFieldCollation implied = implicitFieldCollations.get(i);\n\n        \r\n        if (sorted.getFieldIndex() != implied.getFieldIndex()) {\n          return false;\n        }\n\n        \r\n        \r\n        \r\n        RelFieldCollation.Direction sortDirection = sorted.getDirection();\n        RelFieldCollation.Direction implicitDirection = implied.getDirection();\n        if ((!reversed && sortDirection != implicitDirection)\n            || (reversed && sortDirection.reverse().lax() != implicitDirection)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n","date":"2020-10-12 07:23:10","endLine":283,"groupId":"11829","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"collationsCompatible","params":"(RelCollationsortCollation@RelCollationimplicitCollation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a1/5ab24d39abb16a065778758a6990affdaf6237.src","preCode":"    protected boolean collationsCompatible(RelCollation sortCollation,\n        RelCollation implicitCollation) {\n      List<RelFieldCollation> sortFieldCollations = sortCollation.getFieldCollations();\n      List<RelFieldCollation> implicitFieldCollations = implicitCollation.getFieldCollations();\n\n      if (sortFieldCollations.size() > implicitFieldCollations.size()) {\n        return false;\n      }\n      if (sortFieldCollations.size() == 0) {\n        return true;\n      }\n\n      \r\n      boolean reversed = sortFieldCollations.get(0).getDirection().reverse().lax()\n          == implicitFieldCollations.get(0).getDirection();\n\n      for (int i = 0; i < sortFieldCollations.size(); i++) {\n        RelFieldCollation sorted = sortFieldCollations.get(i);\n        RelFieldCollation implied = implicitFieldCollations.get(i);\n\n        \r\n        if (sorted.getFieldIndex() != implied.getFieldIndex()) {\n          return false;\n        }\n\n        \r\n        \r\n        \r\n        RelFieldCollation.Direction sortDirection = sorted.getDirection();\n        RelFieldCollation.Direction implicitDirection = implied.getDirection();\n        if ((!reversed && sortDirection != implicitDirection)\n            || (reversed && sortDirection.reverse().lax() != implicitDirection)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n","realPath":"innodb/src/main/java/org/apache/calcite/adapter/innodb/InnodbRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"B"},{"authorDate":"2020-07-16 08:54:17","commitOrder":3,"curCode":"    private boolean collationsCompatible(RelCollation sortCollation,\n        RelCollation implicitCollation) {\n      List<RelFieldCollation> sortFieldCollations = sortCollation.getFieldCollations();\n      List<RelFieldCollation> implicitFieldCollations = implicitCollation.getFieldCollations();\n\n      if (sortFieldCollations.size() > implicitFieldCollations.size()) {\n        return false;\n      }\n      if (sortFieldCollations.size() == 0) {\n        return true;\n      }\n\n      \r\n      boolean reversed = sortFieldCollations.get(0).getDirection().reverse().lax()\n          == implicitFieldCollations.get(0).getDirection();\n\n      for (int i = 0; i < sortFieldCollations.size(); i++) {\n        RelFieldCollation sorted = sortFieldCollations.get(i);\n        RelFieldCollation implied = implicitFieldCollations.get(i);\n\n        \r\n        if (sorted.getFieldIndex() != implied.getFieldIndex()) {\n          return false;\n        }\n\n        \r\n        \r\n        \r\n        RelFieldCollation.Direction sortDirection = sorted.getDirection();\n        RelFieldCollation.Direction implicitDirection = implied.getDirection();\n        if ((!reversed && sortDirection != implicitDirection)\n            || (reversed && sortDirection.reverse().lax() != implicitDirection)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n","date":"2020-10-12 05:55:18","endLine":345,"groupId":"11829","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"collationsCompatible","params":"(RelCollationsortCollation@RelCollationimplicitCollation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/a1f4475186aaa7c419ad3ff38ce2e84c43653f.src","preCode":"    private boolean collationsCompatible(RelCollation sortCollation,\n        RelCollation implicitCollation) {\n      List<RelFieldCollation> sortFieldCollations = sortCollation.getFieldCollations();\n      List<RelFieldCollation> implicitFieldCollations = implicitCollation.getFieldCollations();\n\n      if (sortFieldCollations.size() > implicitFieldCollations.size()) {\n        return false;\n      }\n      if (sortFieldCollations.size() == 0) {\n        return true;\n      }\n\n      \r\n      boolean reversed = sortFieldCollations.get(0).getDirection().reverse().lax()\n          == implicitFieldCollations.get(0).getDirection();\n\n      for (int i = 0; i < sortFieldCollations.size(); i++) {\n        RelFieldCollation sorted = sortFieldCollations.get(i);\n        RelFieldCollation implied = implicitFieldCollations.get(i);\n\n        \r\n        if (sorted.getFieldIndex() != implied.getFieldIndex()) {\n          return false;\n        }\n\n        \r\n        \r\n        \r\n        RelFieldCollation.Direction sortDirection = sorted.getDirection();\n        RelFieldCollation.Direction implicitDirection = implied.getDirection();\n        if ((!reversed && sortDirection != implicitDirection)\n            || (reversed && sortDirection.reverse().lax() != implicitDirection)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n","realPath":"cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"NB"}],"commitId":"ebefe52f577da5c744ea863480ed3c98b7ef2e99","commitMessage":"@@@[CALCITE-4034] InnoDB adapter (neoremind)\n\nInnoDB is a storage engine for MySQL.  but it can also be used\nas a standlone file format. This adapter adds a SQL interface\nto InnoDB that uses Calcite rather than MySQL.\n\nThis adapter handles Sarg by expanding to an OR of ranges. A\nbetter implementation of Sarg is probably possible. The\ncurrent implementation can only handle Sargs that result in\nan AND.  e.g. x >= 10 AND x <= 20). But we ought to handle\nSargs that can result in an OR of ANDs. E.g. the SQL\n  x BETWEEN 10 AND 20 OR c > 30\nbecomes a single RexCall\n   SEARCH(x.  Sarg([10.  20].  (30.  +inf)))\nand results in an OR of ANDs.  '(x >= 10 AND x <= 20) OR (x > 30)'.\n\nTweaks (Julian Hyde):\n* Add Holder.accept\n* Make IndexCondition immutable\n* Move computation out of InnodbFilter's constructor\n\nClose apache/calcite#1996\n","date":"2020-10-12 07:23:10","modifiedFileCount":"4","status":"M","submitter":"xu"},{"authorTime":"2020-12-02 05:40:39","codes":[{"authorDate":"2020-06-12 15:56:35","commitOrder":4,"curCode":"    protected boolean collationsCompatible(RelCollation sortCollation,\n        RelCollation implicitCollation) {\n      List<RelFieldCollation> sortFieldCollations = sortCollation.getFieldCollations();\n      List<RelFieldCollation> implicitFieldCollations = implicitCollation.getFieldCollations();\n\n      if (sortFieldCollations.size() > implicitFieldCollations.size()) {\n        return false;\n      }\n      if (sortFieldCollations.size() == 0) {\n        return true;\n      }\n\n      \r\n      boolean reversed = sortFieldCollations.get(0).getDirection().reverse().lax()\n          == implicitFieldCollations.get(0).getDirection();\n\n      for (int i = 0; i < sortFieldCollations.size(); i++) {\n        RelFieldCollation sorted = sortFieldCollations.get(i);\n        RelFieldCollation implied = implicitFieldCollations.get(i);\n\n        \r\n        if (sorted.getFieldIndex() != implied.getFieldIndex()) {\n          return false;\n        }\n\n        \r\n        \r\n        \r\n        RelFieldCollation.Direction sortDirection = sorted.getDirection();\n        RelFieldCollation.Direction implicitDirection = implied.getDirection();\n        if ((!reversed && sortDirection != implicitDirection)\n            || (reversed && sortDirection.reverse().lax() != implicitDirection)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n","date":"2020-10-12 07:23:10","endLine":283,"groupId":"12492","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"collationsCompatible","params":"(RelCollationsortCollation@RelCollationimplicitCollation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a1/5ab24d39abb16a065778758a6990affdaf6237.src","preCode":"    protected boolean collationsCompatible(RelCollation sortCollation,\n        RelCollation implicitCollation) {\n      List<RelFieldCollation> sortFieldCollations = sortCollation.getFieldCollations();\n      List<RelFieldCollation> implicitFieldCollations = implicitCollation.getFieldCollations();\n\n      if (sortFieldCollations.size() > implicitFieldCollations.size()) {\n        return false;\n      }\n      if (sortFieldCollations.size() == 0) {\n        return true;\n      }\n\n      \r\n      boolean reversed = sortFieldCollations.get(0).getDirection().reverse().lax()\n          == implicitFieldCollations.get(0).getDirection();\n\n      for (int i = 0; i < sortFieldCollations.size(); i++) {\n        RelFieldCollation sorted = sortFieldCollations.get(i);\n        RelFieldCollation implied = implicitFieldCollations.get(i);\n\n        \r\n        if (sorted.getFieldIndex() != implied.getFieldIndex()) {\n          return false;\n        }\n\n        \r\n        \r\n        \r\n        RelFieldCollation.Direction sortDirection = sorted.getDirection();\n        RelFieldCollation.Direction implicitDirection = implied.getDirection();\n        if ((!reversed && sortDirection != implicitDirection)\n            || (reversed && sortDirection.reverse().lax() != implicitDirection)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n","realPath":"innodb/src/main/java/org/apache/calcite/adapter/innodb/InnodbRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"N"},{"authorDate":"2020-12-02 05:40:39","commitOrder":4,"curCode":"    private static boolean collationsCompatible(RelCollation sortCollation,\n        RelCollation implicitCollation) {\n      List<RelFieldCollation> sortFieldCollations = sortCollation.getFieldCollations();\n      List<RelFieldCollation> implicitFieldCollations = implicitCollation.getFieldCollations();\n\n      if (sortFieldCollations.size() > implicitFieldCollations.size()) {\n        return false;\n      }\n      if (sortFieldCollations.size() == 0) {\n        return true;\n      }\n\n      \r\n      boolean reversed = sortFieldCollations.get(0).getDirection().reverse().lax()\n          == implicitFieldCollations.get(0).getDirection();\n\n      for (int i = 0; i < sortFieldCollations.size(); i++) {\n        RelFieldCollation sorted = sortFieldCollations.get(i);\n        RelFieldCollation implied = implicitFieldCollations.get(i);\n\n        \r\n        if (sorted.getFieldIndex() != implied.getFieldIndex()) {\n          return false;\n        }\n\n        \r\n        \r\n        \r\n        RelFieldCollation.Direction sortDirection = sorted.getDirection();\n        RelFieldCollation.Direction implicitDirection = implied.getDirection();\n        if ((!reversed && sortDirection != implicitDirection)\n            || (reversed && sortDirection.reverse().lax() != implicitDirection)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n","date":"2020-12-08 15:07:23","endLine":346,"groupId":"12492","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"collationsCompatible","params":"(RelCollationsortCollation@RelCollationimplicitCollation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9f/5786fe59d7aefe1063425e069d6e6535071062.src","preCode":"    private boolean collationsCompatible(RelCollation sortCollation,\n        RelCollation implicitCollation) {\n      List<RelFieldCollation> sortFieldCollations = sortCollation.getFieldCollations();\n      List<RelFieldCollation> implicitFieldCollations = implicitCollation.getFieldCollations();\n\n      if (sortFieldCollations.size() > implicitFieldCollations.size()) {\n        return false;\n      }\n      if (sortFieldCollations.size() == 0) {\n        return true;\n      }\n\n      \r\n      boolean reversed = sortFieldCollations.get(0).getDirection().reverse().lax()\n          == implicitFieldCollations.get(0).getDirection();\n\n      for (int i = 0; i < sortFieldCollations.size(); i++) {\n        RelFieldCollation sorted = sortFieldCollations.get(i);\n        RelFieldCollation implied = implicitFieldCollations.get(i);\n\n        \r\n        if (sorted.getFieldIndex() != implied.getFieldIndex()) {\n          return false;\n        }\n\n        \r\n        \r\n        \r\n        RelFieldCollation.Direction sortDirection = sorted.getDirection();\n        RelFieldCollation.Direction implicitDirection = implied.getDirection();\n        if ((!reversed && sortDirection != implicitDirection)\n            || (reversed && sortDirection.reverse().lax() != implicitDirection)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n","realPath":"cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"M"}],"commitId":"404f968f6079360621896e6ee20ec12488a40bc2","commitMessage":"@@@[CALCITE-4422] Add MethodCanBeStatic check via ErrorProne\n\nprivate and final methods can be made static.  so it is clear they do not access instance fields\n","date":"2020-12-08 15:07:23","modifiedFileCount":"169","status":"M","submitter":"Vladimir Sitnikov"}]
