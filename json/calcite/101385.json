[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testSubprogram() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    HepProgramBuilder subprogramBuilder = HepProgram.builder();\n    subprogramBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);\n    subprogramBuilder.addMatchLimit(1);\n    subprogramBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(MergeCalcRule.INSTANCE);\n\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addSubprogram(subprogramBuilder.build());\n\n    checkPlanning(\n        programBuilder.build(),\n        \"select upper(ename) from (select lower(ename) as ename from emp)\");\n  }\n","date":"2014-11-14 09:39:34","endLine":147,"groupId":"5999","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubprogram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a4/089505a8f1d108c36b8f19dfd0f58230b54580.src","preCode":"  @Test public void testSubprogram() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    HepProgramBuilder subprogramBuilder = HepProgram.builder();\n    subprogramBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);\n    subprogramBuilder.addMatchLimit(1);\n    subprogramBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(MergeCalcRule.INSTANCE);\n\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addSubprogram(subprogramBuilder.build());\n\n    checkPlanning(\n        programBuilder.build(),\n        \"select upper(ename) from (select lower(ename) as ename from emp)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/HepPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testGroup() throws Exception {\n    \r\n    \r\n    \r\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addGroupBegin();\n    programBuilder.addRuleInstance(MergeCalcRule.INSTANCE);\n    programBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    programBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    programBuilder.addGroupEnd();\n\n    checkPlanning(\n        programBuilder.build(),\n        \"select upper(name) from dept where deptno=20\");\n  }\n","date":"2014-11-14 09:39:34","endLine":163,"groupId":"9985","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a4/089505a8f1d108c36b8f19dfd0f58230b54580.src","preCode":"  @Test public void testGroup() throws Exception {\n    \r\n    \r\n    \r\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addGroupBegin();\n    programBuilder.addRuleInstance(MergeCalcRule.INSTANCE);\n    programBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    programBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    programBuilder.addGroupEnd();\n\n    checkPlanning(\n        programBuilder.build(),\n        \"select upper(name) from dept where deptno=20\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/HepPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Test public void testSubprogram() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    HepProgramBuilder subprogramBuilder = HepProgram.builder();\n    subprogramBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);\n    subprogramBuilder.addMatchLimit(1);\n    subprogramBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addSubprogram(subprogramBuilder.build());\n\n    checkPlanning(\n        programBuilder.build(),\n        \"select upper(ename) from (select lower(ename) as ename from emp)\");\n  }\n","date":"2014-11-14 10:22:06","endLine":155,"groupId":"5999","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubprogram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ac/8f67a41fc704e669b40773df27c6664ce0243b.src","preCode":"  @Test public void testSubprogram() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    HepProgramBuilder subprogramBuilder = HepProgram.builder();\n    subprogramBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);\n    subprogramBuilder.addMatchLimit(1);\n    subprogramBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(MergeCalcRule.INSTANCE);\n\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addSubprogram(subprogramBuilder.build());\n\n    checkPlanning(\n        programBuilder.build(),\n        \"select upper(ename) from (select lower(ename) as ename from emp)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/HepPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Test public void testGroup() throws Exception {\n    \r\n    \r\n    \r\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addGroupBegin();\n    programBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n    programBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    programBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    programBuilder.addGroupEnd();\n\n    checkPlanning(\n        programBuilder.build(),\n        \"select upper(name) from dept where deptno=20\");\n  }\n","date":"2014-11-14 10:22:06","endLine":171,"groupId":"9985","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ac/8f67a41fc704e669b40773df27c6664ce0243b.src","preCode":"  @Test public void testGroup() throws Exception {\n    \r\n    \r\n    \r\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addGroupBegin();\n    programBuilder.addRuleInstance(MergeCalcRule.INSTANCE);\n    programBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    programBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    programBuilder.addGroupEnd();\n\n    checkPlanning(\n        programBuilder.build(),\n        \"select upper(name) from dept where deptno=20\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/HepPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55","commitMessage":"@@@[CALCITE-306] Standardize code style for \"import package.*;\"\n\nRename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].\n\nMake many inner classes of EnumerableRules (e.g. EnumerableFilter.  EnumerableFilterRule) top-level classes.\n\nApply a consistent formatting convention for string literals split over multiple lines.\n\nRename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.\n\nChange occurrences of \"optiq\" and \"eigenbase\" in java code to \"calcite\".\n","date":"2014-11-14 10:22:06","modifiedFileCount":"1156","status":"M","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2019-05-19 21:30:47","commitOrder":3,"curCode":"  @Test public void testSubprogram() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    HepProgramBuilder subprogramBuilder = HepProgram.builder();\n    subprogramBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);\n    subprogramBuilder.addMatchLimit(1);\n    subprogramBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addSubprogram(subprogramBuilder.build());\n\n    checkPlanning(\n        programBuilder.build(),\n        \"select upper(ename) from (select lower(ename) as ename from emp where empno = 100)\");\n  }\n","date":"2019-05-20 10:10:17","endLine":263,"groupId":"933","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubprogram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7a/99d0bc809003bbfb8fbb19be923ccbd32c7148.src","preCode":"  @Test public void testSubprogram() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    HepProgramBuilder subprogramBuilder = HepProgram.builder();\n    subprogramBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);\n    subprogramBuilder.addMatchLimit(1);\n    subprogramBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addSubprogram(subprogramBuilder.build());\n\n    checkPlanning(\n        programBuilder.build(),\n        \"select upper(ename) from (select lower(ename) as ename from emp)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/HepPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2014-11-14 10:11:34","commitOrder":3,"curCode":"  @Test public void testGroup() throws Exception {\n    \r\n    \r\n    \r\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addGroupBegin();\n    programBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n    programBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    programBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    programBuilder.addGroupEnd();\n\n    checkPlanning(\n        programBuilder.build(),\n        \"select upper(name) from dept where deptno=20\");\n  }\n","date":"2014-11-14 10:22:06","endLine":171,"groupId":"9985","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ac/8f67a41fc704e669b40773df27c6664ce0243b.src","preCode":"  @Test public void testGroup() throws Exception {\n    \r\n    \r\n    \r\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addGroupBegin();\n    programBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n    programBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    programBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    programBuilder.addGroupEnd();\n\n    checkPlanning(\n        programBuilder.build(),\n        \"select upper(name) from dept where deptno=20\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/HepPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"N"}],"commitId":"1a5fca0feab124f33c16d31b65f0ba0806231731","commitMessage":"@@@[CALCITE-3068] testSubprogram() does not test whether subprogram gets re-executed\n","date":"2019-05-20 10:10:17","modifiedFileCount":"3","status":"M","submitter":"Chunwei Lei"},{"authorTime":"2019-10-14 20:53:23","codes":[{"authorDate":"2019-10-14 20:53:23","commitOrder":4,"curCode":"  @Test public void testSubprogram() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    HepProgramBuilder subprogramBuilder = HepProgram.builder();\n    subprogramBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);\n    subprogramBuilder.addMatchLimit(1);\n    subprogramBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addSubprogram(subprogramBuilder.build());\n\n    final String sql = \"select upper(ename) from\\n\"\n        + \"(select lower(ename) as ename from emp where empno = 100)\";\n    sql(sql).with(programBuilder.build()).check();\n  }\n","date":"2019-10-15 09:37:32","endLine":258,"groupId":"933","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubprogram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a8/8a1361671a06792f86e64983efbc90dac37c42.src","preCode":"  @Test public void testSubprogram() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    HepProgramBuilder subprogramBuilder = HepProgram.builder();\n    subprogramBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);\n    subprogramBuilder.addMatchLimit(1);\n    subprogramBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addSubprogram(subprogramBuilder.build());\n\n    checkPlanning(\n        programBuilder.build(),\n        \"select upper(ename) from (select lower(ename) as ename from emp where empno = 100)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/HepPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"},{"authorDate":"2019-10-14 20:53:23","commitOrder":4,"curCode":"  @Test public void testGroup() throws Exception {\n    \r\n    \r\n    \r\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addGroupBegin();\n    programBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n    programBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    programBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    programBuilder.addGroupEnd();\n\n    final String sql = \"select upper(name) from dept where deptno=20\";\n    sql(sql).with(programBuilder.build()).check();\n  }\n","date":"2019-10-15 09:37:32","endLine":273,"groupId":"9985","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a8/8a1361671a06792f86e64983efbc90dac37c42.src","preCode":"  @Test public void testGroup() throws Exception {\n    \r\n    \r\n    \r\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addGroupBegin();\n    programBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n    programBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    programBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    programBuilder.addGroupEnd();\n\n    checkPlanning(\n        programBuilder.build(),\n        \"select upper(name) from dept where deptno=20\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/HepPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"8da131c08afe67861ced49bc6180a20f66be52fb","commitMessage":"@@@[CALCITE-3410] Simplify RelOptRulesTest and HepPlannerTest by making test methods fluent\n\n* Add method 'Sql.withTester'\n* In RelOptTestBase.  deprecate checkPlanning method\n","date":"2019-10-15 09:37:32","modifiedFileCount":"3","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testSubprogram() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    HepProgramBuilder subprogramBuilder = HepProgram.builder();\n    subprogramBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);\n    subprogramBuilder.addMatchLimit(1);\n    subprogramBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addSubprogram(subprogramBuilder.build());\n\n    final String sql = \"select upper(ename) from\\n\"\n        + \"(select lower(ename) as ename from emp where empno = 100)\";\n    sql(sql).with(programBuilder.build()).check();\n  }\n","date":"2020-04-06 04:57:49","endLine":258,"groupId":"933","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubprogram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5b/5fcc25776e06c0eeed6462b4b723a3513d5cc7.src","preCode":"  @Test public void testSubprogram() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    HepProgramBuilder subprogramBuilder = HepProgram.builder();\n    subprogramBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);\n    subprogramBuilder.addMatchLimit(1);\n    subprogramBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addSubprogram(subprogramBuilder.build());\n\n    final String sql = \"select upper(ename) from\\n\"\n        + \"(select lower(ename) as ename from emp where empno = 100)\";\n    sql(sql).with(programBuilder.build()).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/HepPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testGroup() throws Exception {\n    \r\n    \r\n    \r\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addGroupBegin();\n    programBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n    programBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    programBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    programBuilder.addGroupEnd();\n\n    final String sql = \"select upper(name) from dept where deptno=20\";\n    sql(sql).with(programBuilder.build()).check();\n  }\n","date":"2020-04-06 04:57:49","endLine":273,"groupId":"9985","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5b/5fcc25776e06c0eeed6462b4b723a3513d5cc7.src","preCode":"  @Test public void testGroup() throws Exception {\n    \r\n    \r\n    \r\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addGroupBegin();\n    programBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n    programBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    programBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    programBuilder.addGroupEnd();\n\n    final String sql = \"select upper(name) from dept where deptno=20\";\n    sql(sql).with(programBuilder.build()).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/HepPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 04:45:12","codes":[{"authorDate":"2020-07-09 04:45:12","commitOrder":6,"curCode":"  @Test void testSubprogram() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    HepProgramBuilder subprogramBuilder = HepProgram.builder();\n    subprogramBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);\n    subprogramBuilder.addMatchLimit(1);\n    subprogramBuilder.addRuleInstance(CoreRules.PROJECT_TO_CALC);\n    subprogramBuilder.addRuleInstance(CoreRules.FILTER_TO_CALC);\n    subprogramBuilder.addRuleInstance(CoreRules.CALC_MERGE);\n\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addSubprogram(subprogramBuilder.build());\n\n    final String sql = \"select upper(ename) from\\n\"\n        + \"(select lower(ename) as ename from emp where empno = 100)\";\n    sql(sql).with(programBuilder.build()).check();\n  }\n","date":"2020-07-12 06:58:28","endLine":255,"groupId":"14776","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubprogram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/37/a38458000a95f67584016cf76d7f41d858b80c.src","preCode":"  @Test void testSubprogram() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    HepProgramBuilder subprogramBuilder = HepProgram.builder();\n    subprogramBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);\n    subprogramBuilder.addMatchLimit(1);\n    subprogramBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    subprogramBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addSubprogram(subprogramBuilder.build());\n\n    final String sql = \"select upper(ename) from\\n\"\n        + \"(select lower(ename) as ename from emp where empno = 100)\";\n    sql(sql).with(programBuilder.build()).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/HepPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2020-07-09 04:45:12","commitOrder":6,"curCode":"  @Test void testGroup() throws Exception {\n    \r\n    \r\n    \r\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addGroupBegin();\n    programBuilder.addRuleInstance(CoreRules.CALC_MERGE);\n    programBuilder.addRuleInstance(CoreRules.PROJECT_TO_CALC);\n    programBuilder.addRuleInstance(CoreRules.FILTER_TO_CALC);\n    programBuilder.addGroupEnd();\n\n    final String sql = \"select upper(name) from dept where deptno=20\";\n    sql(sql).with(programBuilder.build()).check();\n  }\n","date":"2020-07-12 06:58:28","endLine":270,"groupId":"282","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/37/a38458000a95f67584016cf76d7f41d858b80c.src","preCode":"  @Test void testGroup() throws Exception {\n    \r\n    \r\n    \r\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addGroupBegin();\n    programBuilder.addRuleInstance(CalcMergeRule.INSTANCE);\n    programBuilder.addRuleInstance(ProjectToCalcRule.INSTANCE);\n    programBuilder.addRuleInstance(FilterToCalcRule.INSTANCE);\n    programBuilder.addGroupEnd();\n\n    final String sql = \"select upper(name) from dept where deptno=20\";\n    sql(sql).with(programBuilder.build()).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/HepPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"M"}],"commitId":"23b26b6287315cc2cd236e705bb651077488fc5c","commitMessage":"@@@In preparation for [CALCITE-3923] and [CALCITE-4079].  deprecate fields and methods that will be removed between 1.24 and 1.25\n\nAlso.  in RelNode.  change some methods from 'to removed before 2.0'\nto 'to be removed before 1.25'. The methods are sDistinct(). \nisKey(ImmutableBitSet).  getQuery().  getRows().  getVariablesStopped(). \ncomputeSelfCost().  isValid(boolean).  getCollationList().  getChildExps().\n","date":"2020-07-12 06:58:28","modifiedFileCount":"137","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-07-09 05:31:40","commitOrder":7,"curCode":"  @Test void testSubprogram() {\n    \r\n    \r\n    \r\n    \r\n    HepProgramBuilder subprogramBuilder = HepProgram.builder();\n    subprogramBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);\n    subprogramBuilder.addMatchLimit(1);\n    subprogramBuilder.addRuleInstance(CoreRules.PROJECT_TO_CALC);\n    subprogramBuilder.addRuleInstance(CoreRules.FILTER_TO_CALC);\n    subprogramBuilder.addRuleInstance(CoreRules.CALC_MERGE);\n\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addSubprogram(subprogramBuilder.build());\n\n    final String sql = \"select upper(ename) from\\n\"\n        + \"(select lower(ename) as ename from emp where empno = 100)\";\n    sql(sql).with(programBuilder.build()).check();\n  }\n","date":"2020-07-29 02:27:24","endLine":259,"groupId":"101385","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubprogram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c4/86523a854569c665a0c5648d358bd9f37ba807.src","preCode":"  @Test void testSubprogram() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    HepProgramBuilder subprogramBuilder = HepProgram.builder();\n    subprogramBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);\n    subprogramBuilder.addMatchLimit(1);\n    subprogramBuilder.addRuleInstance(CoreRules.PROJECT_TO_CALC);\n    subprogramBuilder.addRuleInstance(CoreRules.FILTER_TO_CALC);\n    subprogramBuilder.addRuleInstance(CoreRules.CALC_MERGE);\n\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addSubprogram(subprogramBuilder.build());\n\n    final String sql = \"select upper(ename) from\\n\"\n        + \"(select lower(ename) as ename from emp where empno = 100)\";\n    sql(sql).with(programBuilder.build()).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/HepPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"},{"authorDate":"2020-07-09 05:31:40","commitOrder":7,"curCode":"  @Test void testGroup() {\n    \r\n    \r\n    \r\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addGroupBegin();\n    programBuilder.addRuleInstance(CoreRules.CALC_MERGE);\n    programBuilder.addRuleInstance(CoreRules.PROJECT_TO_CALC);\n    programBuilder.addRuleInstance(CoreRules.FILTER_TO_CALC);\n    programBuilder.addGroupEnd();\n\n    final String sql = \"select upper(name) from dept where deptno=20\";\n    sql(sql).with(programBuilder.build()).check();\n  }\n","date":"2020-07-29 02:27:24","endLine":274,"groupId":"101385","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c4/86523a854569c665a0c5648d358bd9f37ba807.src","preCode":"  @Test void testGroup() throws Exception {\n    \r\n    \r\n    \r\n    HepProgramBuilder programBuilder = HepProgram.builder();\n    programBuilder.addGroupBegin();\n    programBuilder.addRuleInstance(CoreRules.CALC_MERGE);\n    programBuilder.addRuleInstance(CoreRules.PROJECT_TO_CALC);\n    programBuilder.addRuleInstance(CoreRules.FILTER_TO_CALC);\n    programBuilder.addGroupEnd();\n\n    final String sql = \"select upper(name) from dept where deptno=20\";\n    sql(sql).with(programBuilder.build()).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/HepPlannerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"998cd83ebe2fcd7ff3ee565299fed6e199269715","commitMessage":"@@@[CALCITE-3923] Refactor how planner rules are parameterized\n\nCreate operands using a builder interface.  OperandBuilder.  and\ndeprecate methods RelOptRule.operand etc.\n\nThe change is backwards compatible.  in the sense that\nexisting rule constructors are deprecated but still work.\nFrom now on.  to create rules.  call RelOptRule.Config.toRule()\n(which calls the rule's (Config) constructor).\n\nSub-classes of ConverterRule are a little different.  They\ndon't need their own sub-class of Config.  You just need to\ncall Config.withRuleFactory to specify the constructor of the\nsub-class of ConverterRule.\n\nMove rule instances into holder classes such as CoreRules. \nMaterializedViewRules. Deprecate existing rule INSTANCE fields\n(to be removed in 1.25). Deprecate previous rule constructors\n(to be removed in 2.0).\n\nDescribe how to write rules in howto and tutorial.\n\nRemove rule instances marked 'deprecated.  to be removed before\n1.25'.\n\nClose apache/calcite#2024\n","date":"2020-07-29 02:27:24","modifiedFileCount":"191","status":"M","submitter":"Julian Hyde"}]
