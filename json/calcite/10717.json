[{"authorTime":"2017-11-15 20:43:41","codes":[{"authorDate":"2017-11-15 20:43:41","commitOrder":1,"curCode":"  @Test public void testDateStringYearError() {\n    try {\n      final DateString dateString = new DateString(11969, 7, 21);\n      fail(\"expected exception, got \" + dateString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), containsString(\"Year out of range: [11969]\"));\n    }\n    try {\n      final DateString dateString = new DateString(\"12345-01-23\");\n      fail(\"expected exception, got \" + dateString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(),\n          containsString(\"Invalid date format: [12345-01-23]\"));\n    }\n  }\n","date":"2017-11-21 06:43:29","endLine":380,"groupId":"16091","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDateStringYearError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2e/dddf88d8204c7ff3d1759347d56314330e248a.src","preCode":"  @Test public void testDateStringYearError() {\n    try {\n      final DateString dateString = new DateString(11969, 7, 21);\n      fail(\"expected exception, got \" + dateString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), containsString(\"Year out of range: [11969]\"));\n    }\n    try {\n      final DateString dateString = new DateString(\"12345-01-23\");\n      fail(\"expected exception, got \" + dateString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(),\n          containsString(\"Invalid date format: [12345-01-23]\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"B"},{"authorDate":"2017-11-15 20:43:41","commitOrder":1,"curCode":"  @Test public void testTimeStringMinuteError() {\n    try {\n      final TimeString timeString = new TimeString(12, 334, 56);\n      fail(\"expected exception, got \" + timeString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), containsString(\"Minute out of range: [334]\"));\n    }\n    try {\n      final TimeString timeString = new TimeString(\"12:60:23\");\n      fail(\"expected exception, got \" + timeString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), containsString(\"Minute out of range: [60]\"));\n    }\n  }\n","date":"2017-11-21 06:43:29","endLine":454,"groupId":"16091","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeStringMinuteError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2e/dddf88d8204c7ff3d1759347d56314330e248a.src","preCode":"  @Test public void testTimeStringMinuteError() {\n    try {\n      final TimeString timeString = new TimeString(12, 334, 56);\n      fail(\"expected exception, got \" + timeString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), containsString(\"Minute out of range: [334]\"));\n    }\n    try {\n      final TimeString timeString = new TimeString(\"12:60:23\");\n      fail(\"expected exception, got \" + timeString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), containsString(\"Minute out of range: [60]\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"B"}],"commitId":"237b627779a137b6d442e51543571961377862c6","commitMessage":"@@@[CALCITE-2055] Check year.  month.  day.  hour.  minute and second ranges for date and time literals (Volodymyr Vysotskyi)\n\nClose apache/calcite#567\n","date":"2017-11-21 06:43:29","modifiedFileCount":"4","status":"B","submitter":"Volodymyr Vysotskyi"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testDateStringYearError() {\n    try {\n      final DateString dateString = new DateString(11969, 7, 21);\n      fail(\"expected exception, got \" + dateString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), containsString(\"Year out of range: [11969]\"));\n    }\n    try {\n      final DateString dateString = new DateString(\"12345-01-23\");\n      fail(\"expected exception, got \" + dateString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(),\n          containsString(\"Invalid date format: [12345-01-23]\"));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":445,"groupId":"10717","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDateStringYearError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8c/8275535d464dbb0ef1603cd21a505c1bdbd9c5.src","preCode":"  @Test public void testDateStringYearError() {\n    try {\n      final DateString dateString = new DateString(11969, 7, 21);\n      fail(\"expected exception, got \" + dateString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), containsString(\"Year out of range: [11969]\"));\n    }\n    try {\n      final DateString dateString = new DateString(\"12345-01-23\");\n      fail(\"expected exception, got \" + dateString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(),\n          containsString(\"Invalid date format: [12345-01-23]\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testTimeStringMinuteError() {\n    try {\n      final TimeString timeString = new TimeString(12, 334, 56);\n      fail(\"expected exception, got \" + timeString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), containsString(\"Minute out of range: [334]\"));\n    }\n    try {\n      final TimeString timeString = new TimeString(\"12:60:23\");\n      fail(\"expected exception, got \" + timeString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), containsString(\"Minute out of range: [60]\"));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":519,"groupId":"10717","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeStringMinuteError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8c/8275535d464dbb0ef1603cd21a505c1bdbd9c5.src","preCode":"  @Test public void testTimeStringMinuteError() {\n    try {\n      final TimeString timeString = new TimeString(12, 334, 56);\n      fail(\"expected exception, got \" + timeString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), containsString(\"Minute out of range: [334]\"));\n    }\n    try {\n      final TimeString timeString = new TimeString(\"12:60:23\");\n      fail(\"expected exception, got \" + timeString);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), containsString(\"Minute out of range: [60]\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":506,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
