[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testNonBooleans() {\n    RexNode node =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.PLUS,\n            x,\n            y);\n    String expected = node.toString();\n    check(Boolean.TRUE, node, expected);\n    check(Boolean.FALSE, node, expected);\n    check(null, node, expected);\n  }\n","date":"2014-11-14 09:39:34","endLine":127,"groupId":"14830","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonBooleans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/95/f0a5870b0149235af31aab50d981ff4c4d1de8.src","preCode":"  @Test public void testNonBooleans() {\n    RexNode node =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.PLUS,\n            x,\n            y);\n    String expected = node.toString();\n    check(Boolean.TRUE, node, expected);\n    check(Boolean.FALSE, node, expected);\n    check(null, node, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexTransformerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testOrUnchanged() {\n    RexNode node =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.OR,\n            x,\n            y);\n    String expected = node.toString();\n    check(Boolean.TRUE, node, expected);\n    check(Boolean.FALSE, node, expected);\n    check(null, node, expected);\n  }\n","date":"2014-11-14 09:39:34","endLine":145,"groupId":"14830","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrUnchanged","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/95/f0a5870b0149235af31aab50d981ff4c4d1de8.src","preCode":"  @Test public void testOrUnchanged() {\n    RexNode node =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.OR,\n            x,\n            y);\n    String expected = node.toString();\n    check(Boolean.TRUE, node, expected);\n    check(Boolean.FALSE, node, expected);\n    check(null, node, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexTransformerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2015-07-26 05:44:20","codes":[{"authorDate":"2015-07-26 05:44:20","commitOrder":2,"curCode":"  @Test public void testNonBooleans() {\n    RexNode node = plus(x, y);\n    String expected = node.toString();\n    check(Boolean.TRUE, node, expected);\n    check(Boolean.FALSE, node, expected);\n    check(null, node, expected);\n  }\n","date":"2016-01-10 16:51:25","endLine":204,"groupId":"14830","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonBooleans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0f/88f0c7e517f767982ac9bf6ba3c543283f8915.src","preCode":"  @Test public void testNonBooleans() {\n    RexNode node =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.PLUS,\n            x,\n            y);\n    String expected = node.toString();\n    check(Boolean.TRUE, node, expected);\n    check(Boolean.FALSE, node, expected);\n    check(null, node, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexTransformerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2015-07-26 05:44:20","commitOrder":2,"curCode":"  @Test public void testOrUnchanged() {\n    RexNode node = or(x, y);\n    String expected = node.toString();\n    check(Boolean.TRUE, node, expected);\n    check(Boolean.FALSE, node, expected);\n    check(null, node, expected);\n  }\n","date":"2016-01-10 16:51:25","endLine":218,"groupId":"14830","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrUnchanged","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0f/88f0c7e517f767982ac9bf6ba3c543283f8915.src","preCode":"  @Test public void testOrUnchanged() {\n    RexNode node =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.OR,\n            x,\n            y);\n    String expected = node.toString();\n    check(Boolean.TRUE, node, expected);\n    check(Boolean.FALSE, node, expected);\n    check(null, node, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexTransformerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"}],"commitId":"505a9064b96a6c8399735fc2fa4d0ac9d5f3ed87","commitMessage":"@@@[CALCITE-816] Represent sub-query as a RexNode\n\nReduce 3-value logic to 1- or 2-value logic.\n\nOptimize certain IN and EXISTS to an inner join.\n\nRepresent correlation variables using CorrelationId wherever possible.\n\nIn Join.  replace field \"ImmutableSet<String> variablesStopped\" with\n\"ImmutableSet<CorrelationId> variablesSet\". RelNode.getVariablesSet\nis now preferred to RelNode.getVariablesStopped.\n\nMake Join.joinType final.\n\nVerify in builder that there are no correlation variables where there\nshouldn't be.\n\nRefactor decorrelator.\n\nLogged [CALCITE-1045] for remaining work.\n","date":"2016-01-10 16:51:25","modifiedFileCount":"76","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testNonBooleans() {\n    RexNode node = plus(x, y);\n    String expected = node.toString();\n    check(Boolean.TRUE, node, expected);\n    check(Boolean.FALSE, node, expected);\n    check(null, node, expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":204,"groupId":"101073","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonBooleans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/9b0b42d5356b00fb814bf15ff6721a9b005f74.src","preCode":"  @Test public void testNonBooleans() {\n    RexNode node = plus(x, y);\n    String expected = node.toString();\n    check(Boolean.TRUE, node, expected);\n    check(Boolean.FALSE, node, expected);\n    check(null, node, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexTransformerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testOrUnchanged() {\n    RexNode node = or(x, y);\n    String expected = node.toString();\n    check(Boolean.TRUE, node, expected);\n    check(Boolean.FALSE, node, expected);\n    check(null, node, expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":218,"groupId":"101073","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrUnchanged","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/9b0b42d5356b00fb814bf15ff6721a9b005f74.src","preCode":"  @Test public void testOrUnchanged() {\n    RexNode node = or(x, y);\n    String expected = node.toString();\n    check(Boolean.TRUE, node, expected);\n    check(Boolean.FALSE, node, expected);\n    check(null, node, expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexTransformerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
