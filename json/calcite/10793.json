[{"authorTime":"2016-10-14 00:45:27","codes":[{"authorDate":"2016-10-14 00:45:27","commitOrder":1,"curCode":"  @Test public void testRoundFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.ROUND);\n    tester.checkType(\"round(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"round(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"round(case when false then 42 else null end, -1)\", \"INTEGER\");\n    tester.checkFails(\n        \"^round('abc', 'def')^\",\n        \"Cannot apply 'ROUND' to arguments of type 'ROUND\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'ROUND\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkScalar(\n        \"round(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"round(cast(null as integer), 1)\");\n    tester.checkNull(\"round(cast(null as double), 1)\");\n  }\n","date":"2017-01-10 03:15:52","endLine":4094,"groupId":"3293","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRoundFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8c/3fccec61d8a8b653c498610d6f9a08efa32b0a.src","preCode":"  @Test public void testRoundFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.ROUND);\n    tester.checkType(\"round(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"round(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"round(case when false then 42 else null end, -1)\", \"INTEGER\");\n    tester.checkFails(\n        \"^round('abc', 'def')^\",\n        \"Cannot apply 'ROUND' to arguments of type 'ROUND\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'ROUND\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkScalar(\n        \"round(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"round(cast(null as integer), 1)\");\n    tester.checkNull(\"round(cast(null as double), 1)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4073,"status":"B"},{"authorDate":"2016-10-14 00:45:27","commitOrder":1,"curCode":"  @Test public void testTruncateFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.TRUNCATE);\n    tester.checkType(\"truncate(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"truncate(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"truncate(case when false then 42 else null end, -1)\", \"INTEGER\");\n    tester.checkFails(\n        \"^truncate('abc', 'def')^\",\n        \"Cannot apply 'TRUNCATE' to arguments of type 'TRUNCATE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'TRUNCATE\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkScalar(\n        \"truncate(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer), 1)\");\n    tester.checkNull(\"truncate(cast(null as double), 1)\");\n  }\n","date":"2017-01-10 03:15:52","endLine":4193,"groupId":"3293","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTruncateFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8c/3fccec61d8a8b653c498610d6f9a08efa32b0a.src","preCode":"  @Test public void testTruncateFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.TRUNCATE);\n    tester.checkType(\"truncate(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"truncate(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"truncate(case when false then 42 else null end, -1)\", \"INTEGER\");\n    tester.checkFails(\n        \"^truncate('abc', 'def')^\",\n        \"Cannot apply 'TRUNCATE' to arguments of type 'TRUNCATE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'TRUNCATE\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkScalar(\n        \"truncate(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer), 1)\");\n    tester.checkNull(\"truncate(cast(null as double), 1)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4172,"status":"B"}],"commitId":"17dc06fe5f4a250475517ddbd8c3f966a3c9d1fe","commitMessage":"@@@[CALCITE-1557] Add numeric scalar functions (Laurent Goujon)\n\nAdd support for the missing JDBC/ODBC numeric scalar functions:\n  ACOS ASIN ATAN ATAN2 CEILING COS COT DEGREES FLOOR PI RADIANS RAND\n  ROUND SIGN SIN SQRT TAN TRUNCATE\n\nClose apache/calcite#342\n","date":"2017-01-10 03:15:52","modifiedFileCount":"8","status":"B","submitter":"Laurent Goujon"},{"authorTime":"2017-01-13 01:03:24","codes":[{"authorDate":"2017-01-13 01:03:24","commitOrder":2,"curCode":"  @Test public void testRoundFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.ROUND);\n    tester.checkType(\"round(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"round(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"round(case when false then 42 else null end, -1)\", \"INTEGER\");\n    tester.checkFails(\n        \"^round('abc', 'def')^\",\n        \"Cannot apply 'ROUND' to arguments of type 'ROUND\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'ROUND\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkScalar(\n        \"round(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(-42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(-4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"round(cast(null as integer), 1)\");\n    tester.checkNull(\"round(cast(null as double), 1)\");\n    tester.checkNull(\"round(43.21, cast(null as integer))\");\n\n    tester.checkNull(\"round(cast(null as double))\");\n    tester.checkScalar(\"round(42)\", 42, \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)))\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\"round(42.324)\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n    tester.checkScalar(\"round(42.724)\",\n        BigDecimal.valueOf(43, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n  }\n","date":"2017-08-11 23:02:24","endLine":4413,"groupId":"3293","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRoundFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/4e2d0c84e97a40bb18e0e3c4560f9f8c29f7b8.src","preCode":"  @Test public void testRoundFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.ROUND);\n    tester.checkType(\"round(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"round(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"round(case when false then 42 else null end, -1)\", \"INTEGER\");\n    tester.checkFails(\n        \"^round('abc', 'def')^\",\n        \"Cannot apply 'ROUND' to arguments of type 'ROUND\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'ROUND\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkScalar(\n        \"round(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"round(cast(null as integer), 1)\");\n    tester.checkNull(\"round(cast(null as double), 1)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4374,"status":"M"},{"authorDate":"2017-01-13 01:03:24","commitOrder":2,"curCode":"  @Test public void testTruncateFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.TRUNCATE);\n    tester.checkType(\"truncate(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"truncate(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"truncate(case when false then 42 else null end, -1)\", \"INTEGER\");\n    tester.checkFails(\n        \"^truncate('abc', 'def')^\",\n        \"Cannot apply 'TRUNCATE' to arguments of type 'TRUNCATE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'TRUNCATE\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkScalar(\n        \"truncate(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(-42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(-4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer), 1)\");\n    tester.checkNull(\"truncate(cast(null as double), 1)\");\n    tester.checkNull(\"truncate(43.21, cast(null as integer))\");\n\n    tester.checkScalar(\"truncate(42)\", 42, \"INTEGER NOT NULL\");\n    tester.checkScalar(\"truncate(42.324)\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n    tester.checkScalar(\"truncate(cast(42.324 as float))\", 42F, \"FLOAT NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)))\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer))\");\n    tester.checkNull(\"truncate(cast(null as double))\");\n  }\n","date":"2017-08-11 23:02:24","endLine":4530,"groupId":"3293","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTruncateFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/4e2d0c84e97a40bb18e0e3c4560f9f8c29f7b8.src","preCode":"  @Test public void testTruncateFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.TRUNCATE);\n    tester.checkType(\"truncate(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"truncate(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"truncate(case when false then 42 else null end, -1)\", \"INTEGER\");\n    tester.checkFails(\n        \"^truncate('abc', 'def')^\",\n        \"Cannot apply 'TRUNCATE' to arguments of type 'TRUNCATE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'TRUNCATE\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkScalar(\n        \"truncate(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer), 1)\");\n    tester.checkNull(\"truncate(cast(null as double), 1)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4492,"status":"M"}],"commitId":"bfaea7ccfd33e9a4b5fee1617f56f2ccdd78db08","commitMessage":"@@@[CALCITE-1936] Allow ROUND() and TRUNCATE() to take one operand.  defaulting scale to 0\n\nAlso.  make ROUND and TRUNCATE nullable if their 2nd operand is nullable.\n\nClose apache/calcite#513\n","date":"2017-08-11 23:02:24","modifiedFileCount":"4","status":"M","submitter":"Minji Kim"},{"authorTime":"2018-05-30 12:16:57","codes":[{"authorDate":"2018-05-30 12:16:57","commitOrder":3,"curCode":"  @Test public void testRoundFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.ROUND);\n    tester.checkType(\"round(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"round(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"round(case when false then 42 else null end, -1)\", \"INTEGER\");\n    strictTester.checkFails(\n        \"^round('abc', 'def')^\",\n        \"Cannot apply 'ROUND' to arguments of type 'ROUND\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'ROUND\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkType(\"round('abc', 'def')\", \"DECIMAL(19, 19) NOT NULL\");\n    tester.checkScalar(\n        \"round(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(-42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(-4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"round(cast(null as integer), 1)\");\n    tester.checkNull(\"round(cast(null as double), 1)\");\n    tester.checkNull(\"round(43.21, cast(null as integer))\");\n\n    tester.checkNull(\"round(cast(null as double))\");\n    tester.checkScalar(\"round(42)\", 42, \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)))\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\"round(42.324)\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n    tester.checkScalar(\"round(42.724)\",\n        BigDecimal.valueOf(43, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n  }\n","date":"2019-08-29 17:01:46","endLine":5682,"groupId":"3293","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRoundFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/fce4b116dff8e30a5e69172941e134c36f92d1.src","preCode":"  @Test public void testRoundFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.ROUND);\n    tester.checkType(\"round(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"round(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"round(case when false then 42 else null end, -1)\", \"INTEGER\");\n    tester.checkFails(\n        \"^round('abc', 'def')^\",\n        \"Cannot apply 'ROUND' to arguments of type 'ROUND\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'ROUND\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkScalar(\n        \"round(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(-42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(-4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"round(cast(null as integer), 1)\");\n    tester.checkNull(\"round(cast(null as double), 1)\");\n    tester.checkNull(\"round(43.21, cast(null as integer))\");\n\n    tester.checkNull(\"round(cast(null as double))\");\n    tester.checkScalar(\"round(42)\", 42, \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)))\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\"round(42.324)\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n    tester.checkScalar(\"round(42.724)\",\n        BigDecimal.valueOf(43, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5642,"status":"M"},{"authorDate":"2018-05-30 12:16:57","commitOrder":3,"curCode":"  @Test public void testTruncateFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.TRUNCATE);\n    tester.checkType(\"truncate(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"truncate(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"truncate(case when false then 42 else null end, -1)\", \"INTEGER\");\n    strictTester.checkFails(\n        \"^truncate('abc', 'def')^\",\n        \"Cannot apply 'TRUNCATE' to arguments of type 'TRUNCATE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'TRUNCATE\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkType(\"truncate('abc', 'def')\", \"DECIMAL(19, 19) NOT NULL\");\n    tester.checkScalar(\n        \"truncate(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(-42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(-4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer), 1)\");\n    tester.checkNull(\"truncate(cast(null as double), 1)\");\n    tester.checkNull(\"truncate(43.21, cast(null as integer))\");\n\n    tester.checkScalar(\"truncate(42)\", 42, \"INTEGER NOT NULL\");\n    tester.checkScalar(\"truncate(42.324)\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n    tester.checkScalar(\"truncate(cast(42.324 as float))\", 42F, \"FLOAT NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)))\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer))\");\n    tester.checkNull(\"truncate(cast(null as double))\");\n  }\n","date":"2019-08-29 17:01:46","endLine":5803,"groupId":"3293","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTruncateFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/fce4b116dff8e30a5e69172941e134c36f92d1.src","preCode":"  @Test public void testTruncateFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.TRUNCATE);\n    tester.checkType(\"truncate(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"truncate(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"truncate(case when false then 42 else null end, -1)\", \"INTEGER\");\n    tester.checkFails(\n        \"^truncate('abc', 'def')^\",\n        \"Cannot apply 'TRUNCATE' to arguments of type 'TRUNCATE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'TRUNCATE\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkScalar(\n        \"truncate(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(-42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(-4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer), 1)\");\n    tester.checkNull(\"truncate(cast(null as double), 1)\");\n    tester.checkNull(\"truncate(43.21, cast(null as integer))\");\n\n    tester.checkScalar(\"truncate(42)\", 42, \"INTEGER NOT NULL\");\n    tester.checkScalar(\"truncate(42.324)\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n    tester.checkScalar(\"truncate(cast(42.324 as float))\", 42F, \"FLOAT NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)))\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer))\");\n    tester.checkNull(\"truncate(cast(null as double))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5764,"status":"M"}],"commitId":"01477c42ded991aaa7b14cf72a6e4ea1a20edf5e","commitMessage":"@@@[CALCITE-2302] Implicit type cast support\n\nChanges:\n* Support full implicit type coercion for SQL contexts:\nSet operation.  binary arithmetic exprs.  binary equality\nexprs.  binary comparison exprs.  case when(COALESCE). \nIN operation.  builtin functions.  user defined function(UDF);\n* The SqlValidator now takes a component named `TypeCoercion`\nresponsible for the coercion work.  you can turn off the coercion with\n`SqlValidator#setEnableTypeCoercion(false)`;\n* We follow PostgreSQL and SQL-SERVER conversion style for two integers division. \ni.e. `'9'/2` returns INTEGER 4.\n","date":"2019-08-29 17:01:46","modifiedFileCount":"50","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testRoundFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.ROUND);\n    tester.checkType(\"round(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"round(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"round(case when false then 42 else null end, -1)\", \"INTEGER\");\n    strictTester.checkFails(\n        \"^round('abc', 'def')^\",\n        \"Cannot apply 'ROUND' to arguments of type 'ROUND\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'ROUND\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkType(\"round('abc', 'def')\", \"DECIMAL(19, 19) NOT NULL\");\n    tester.checkScalar(\n        \"round(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(-42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(-4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"round(cast(null as integer), 1)\");\n    tester.checkNull(\"round(cast(null as double), 1)\");\n    tester.checkNull(\"round(43.21, cast(null as integer))\");\n\n    tester.checkNull(\"round(cast(null as double))\");\n    tester.checkScalar(\"round(42)\", 42, \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)))\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\"round(42.324)\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n    tester.checkScalar(\"round(42.724)\",\n        BigDecimal.valueOf(43, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n  }\n","date":"2020-04-06 04:57:49","endLine":5965,"groupId":"3293","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRoundFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testRoundFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.ROUND);\n    tester.checkType(\"round(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"round(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"round(case when false then 42 else null end, -1)\", \"INTEGER\");\n    strictTester.checkFails(\n        \"^round('abc', 'def')^\",\n        \"Cannot apply 'ROUND' to arguments of type 'ROUND\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'ROUND\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkType(\"round('abc', 'def')\", \"DECIMAL(19, 19) NOT NULL\");\n    tester.checkScalar(\n        \"round(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(-42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(-4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"round(cast(null as integer), 1)\");\n    tester.checkNull(\"round(cast(null as double), 1)\");\n    tester.checkNull(\"round(43.21, cast(null as integer))\");\n\n    tester.checkNull(\"round(cast(null as double))\");\n    tester.checkScalar(\"round(42)\", 42, \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)))\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\"round(42.324)\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n    tester.checkScalar(\"round(42.724)\",\n        BigDecimal.valueOf(43, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5925,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testTruncateFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.TRUNCATE);\n    tester.checkType(\"truncate(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"truncate(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"truncate(case when false then 42 else null end, -1)\", \"INTEGER\");\n    strictTester.checkFails(\n        \"^truncate('abc', 'def')^\",\n        \"Cannot apply 'TRUNCATE' to arguments of type 'TRUNCATE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'TRUNCATE\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkType(\"truncate('abc', 'def')\", \"DECIMAL(19, 19) NOT NULL\");\n    tester.checkScalar(\n        \"truncate(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(-42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(-4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer), 1)\");\n    tester.checkNull(\"truncate(cast(null as double), 1)\");\n    tester.checkNull(\"truncate(43.21, cast(null as integer))\");\n\n    tester.checkScalar(\"truncate(42)\", 42, \"INTEGER NOT NULL\");\n    tester.checkScalar(\"truncate(42.324)\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n    tester.checkScalar(\"truncate(cast(42.324 as float))\", 42F, \"FLOAT NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)))\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer))\");\n    tester.checkNull(\"truncate(cast(null as double))\");\n  }\n","date":"2020-04-06 04:57:49","endLine":6136,"groupId":"3293","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTruncateFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testTruncateFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.TRUNCATE);\n    tester.checkType(\"truncate(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"truncate(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"truncate(case when false then 42 else null end, -1)\", \"INTEGER\");\n    strictTester.checkFails(\n        \"^truncate('abc', 'def')^\",\n        \"Cannot apply 'TRUNCATE' to arguments of type 'TRUNCATE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'TRUNCATE\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkType(\"truncate('abc', 'def')\", \"DECIMAL(19, 19) NOT NULL\");\n    tester.checkScalar(\n        \"truncate(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(-42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(-4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer), 1)\");\n    tester.checkNull(\"truncate(cast(null as double), 1)\");\n    tester.checkNull(\"truncate(43.21, cast(null as integer))\");\n\n    tester.checkScalar(\"truncate(42)\", 42, \"INTEGER NOT NULL\");\n    tester.checkScalar(\"truncate(42.324)\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n    tester.checkScalar(\"truncate(cast(42.324 as float))\", 42F, \"FLOAT NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)))\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer))\");\n    tester.checkNull(\"truncate(cast(null as double))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6097,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-21 11:07:54","codes":[{"authorDate":"2020-09-21 11:07:54","commitOrder":5,"curCode":"  @Test void testRoundFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.ROUND);\n    tester.checkType(\"round(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"round(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"round(case when false then 42 else null end, -1)\", \"INTEGER\");\n    strictTester.checkFails(\n        \"^round('abc', 'def')^\",\n        \"Cannot apply 'ROUND' to arguments of type 'ROUND\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'ROUND\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkType(\"round('abc', 'def')\", \"DECIMAL(19, 9) NOT NULL\");\n    tester.checkScalar(\n        \"round(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(-42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(-4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"round(cast(null as integer), 1)\");\n    tester.checkNull(\"round(cast(null as double), 1)\");\n    tester.checkNull(\"round(43.21, cast(null as integer))\");\n\n    tester.checkNull(\"round(cast(null as double))\");\n    tester.checkScalar(\"round(42)\", 42, \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)))\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\"round(42.324)\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n    tester.checkScalar(\"round(42.724)\",\n        BigDecimal.valueOf(43, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n  }\n","date":"2020-10-14 18:19:27","endLine":6022,"groupId":"10793","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRoundFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cc/f4e0c6311ddc2475032bdc0c7480703d4232ef.src","preCode":"  @Test void testRoundFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.ROUND);\n    tester.checkType(\"round(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"round(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"round(case when false then 42 else null end, -1)\", \"INTEGER\");\n    strictTester.checkFails(\n        \"^round('abc', 'def')^\",\n        \"Cannot apply 'ROUND' to arguments of type 'ROUND\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'ROUND\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkType(\"round('abc', 'def')\", \"DECIMAL(19, 19) NOT NULL\");\n    tester.checkScalar(\n        \"round(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(-42.346 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(-4235, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"round(cast(null as integer), 1)\");\n    tester.checkNull(\"round(cast(null as double), 1)\");\n    tester.checkNull(\"round(43.21, cast(null as integer))\");\n\n    tester.checkNull(\"round(cast(null as double))\");\n    tester.checkScalar(\"round(42)\", 42, \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"round(cast(42.346 as decimal(2, 3)))\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\"round(42.324)\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n    tester.checkScalar(\"round(42.724)\",\n        BigDecimal.valueOf(43, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5982,"status":"M"},{"authorDate":"2020-09-21 11:07:54","commitOrder":5,"curCode":"  @Test void testTruncateFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.TRUNCATE);\n    tester.checkType(\"truncate(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"truncate(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"truncate(case when false then 42 else null end, -1)\", \"INTEGER\");\n    strictTester.checkFails(\n        \"^truncate('abc', 'def')^\",\n        \"Cannot apply 'TRUNCATE' to arguments of type 'TRUNCATE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'TRUNCATE\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkType(\"truncate('abc', 'def')\", \"DECIMAL(19, 9) NOT NULL\");\n    tester.checkScalar(\n        \"truncate(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(-42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(-4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer), 1)\");\n    tester.checkNull(\"truncate(cast(null as double), 1)\");\n    tester.checkNull(\"truncate(43.21, cast(null as integer))\");\n\n    tester.checkScalar(\"truncate(42)\", 42, \"INTEGER NOT NULL\");\n    tester.checkScalar(\"truncate(42.324)\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n    tester.checkScalar(\"truncate(cast(42.324 as float))\", 42F, \"FLOAT NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)))\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer))\");\n    tester.checkNull(\"truncate(cast(null as double))\");\n  }\n","date":"2020-10-14 18:19:27","endLine":6193,"groupId":"10793","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testTruncateFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cc/f4e0c6311ddc2475032bdc0c7480703d4232ef.src","preCode":"  @Test void testTruncateFunc() {\n    tester.setFor(\n        SqlStdOperatorTable.TRUNCATE);\n    tester.checkType(\"truncate(42, -1)\", \"INTEGER NOT NULL\");\n    tester.checkType(\"truncate(cast(42 as float), 1)\", \"FLOAT NOT NULL\");\n    tester.checkType(\n        \"truncate(case when false then 42 else null end, -1)\", \"INTEGER\");\n    strictTester.checkFails(\n        \"^truncate('abc', 'def')^\",\n        \"Cannot apply 'TRUNCATE' to arguments of type 'TRUNCATE\\\\(<CHAR\\\\(3\\\\)>, <CHAR\\\\(3\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'TRUNCATE\\\\(<NUMERIC>, <INTEGER>\\\\)'\",\n        false);\n    tester.checkType(\"truncate('abc', 'def')\", \"DECIMAL(19, 19) NOT NULL\");\n    tester.checkScalar(\n        \"truncate(42, -1)\",\n        40,\n        \"INTEGER NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(-42.345 as decimal(2, 3)), 2)\",\n        BigDecimal.valueOf(-4234, 2),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer), 1)\");\n    tester.checkNull(\"truncate(cast(null as double), 1)\");\n    tester.checkNull(\"truncate(43.21, cast(null as integer))\");\n\n    tester.checkScalar(\"truncate(42)\", 42, \"INTEGER NOT NULL\");\n    tester.checkScalar(\"truncate(42.324)\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(5, 3) NOT NULL\");\n    tester.checkScalar(\"truncate(cast(42.324 as float))\", 42F, \"FLOAT NOT NULL\");\n    tester.checkScalar(\n        \"truncate(cast(42.345 as decimal(2, 3)))\",\n        BigDecimal.valueOf(42, 0),\n        \"DECIMAL(2, 3) NOT NULL\");\n    tester.checkNull(\"truncate(cast(null as integer))\");\n    tester.checkNull(\"truncate(cast(null as double))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6154,"status":"M"}],"commitId":"16b22b105dfcb3d95cc7af8eb54105f231d18cc9","commitMessage":"@@@[CALCITE-4240] SqlTypeUtil#getMaxPrecisionScaleDecimal returns a decimal that with same precision and scale (Jiatao Tao)\n\nThe SqlTypeUtil#getMaxPrecisionScaleDecimal now returns decimal type with max\nprecision and scale half of that.\n\nPreviously it returns DECIMAL(19.  19) which is invalid.\n\nclose apache/calcite#2161\n","date":"2020-10-14 18:19:27","modifiedFileCount":"7","status":"M","submitter":"Jiatao Tao"}]
