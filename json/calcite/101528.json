[{"authorTime":"2020-02-20 02:55:29","codes":[{"authorDate":"2020-02-20 02:55:29","commitOrder":1,"curCode":"  @Test public void testSemiJoinFilter() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"DEPT\")\n        .scan(\"EMP\")\n        .filter(\n            builder.call(SqlStdOperatorTable.GREATER_THAN,\n              builder.field(builder.peek().getRowType().getField(\"EMPNO\", false, false).getIndex()),\n              builder.literal((short) 10)))\n        .join(\n            JoinRelType.SEMI, builder.equals(\n            builder.field(2, 1, \"DEPTNO\"),\n            builder.field(2, 0, \"DEPTNO\")))\n        .project(builder.field(\"DEPTNO\"))\n        .build();\n    final String expectedSql = \"SELECT \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"DEPT\\\"\\n\"\n        + \"WHERE EXISTS (SELECT 1\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\\n\"\n        + \"WHERE \\\"EMPNO\\\" > 10) AS \\\"t\\\"\\n\"\n        + \"WHERE \\\"DEPT\\\".\\\"DEPTNO\\\" = \\\"t\\\".\\\"DEPTNO\\\")\";\n    assertThat(toSql(root), isLinux(expectedSql));\n  }\n","date":"2020-03-23 17:11:58","endLine":715,"groupId":"8503","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSemiJoinFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/23/4323fdb7ebaa92dc75cfb335f3ebd8ba526452.src","preCode":"  @Test public void testSemiJoinFilter() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"DEPT\")\n        .scan(\"EMP\")\n        .filter(\n            builder.call(SqlStdOperatorTable.GREATER_THAN,\n              builder.field(builder.peek().getRowType().getField(\"EMPNO\", false, false).getIndex()),\n              builder.literal((short) 10)))\n        .join(\n            JoinRelType.SEMI, builder.equals(\n            builder.field(2, 1, \"DEPTNO\"),\n            builder.field(2, 0, \"DEPTNO\")))\n        .project(builder.field(\"DEPTNO\"))\n        .build();\n    final String expectedSql = \"SELECT \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"DEPT\\\"\\n\"\n        + \"WHERE EXISTS (SELECT 1\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\\n\"\n        + \"WHERE \\\"EMPNO\\\" > 10) AS \\\"t\\\"\\n\"\n        + \"WHERE \\\"DEPT\\\".\\\"DEPTNO\\\" = \\\"t\\\".\\\"DEPTNO\\\")\";\n    assertThat(toSql(root), isLinux(expectedSql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":692,"status":"B"},{"authorDate":"2020-02-20 02:55:29","commitOrder":1,"curCode":"  @Test public void testSemiJoinProject() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"DEPT\")\n        .scan(\"EMP\")\n        .project(\n            builder.field(builder.peek().getRowType().getField(\"EMPNO\", false, false).getIndex()),\n            builder.field(builder.peek().getRowType().getField(\"DEPTNO\", false, false).getIndex()))\n        .join(\n            JoinRelType.SEMI, builder.equals(\n              builder.field(2, 1, \"DEPTNO\"),\n              builder.field(2, 0, \"DEPTNO\")))\n        .project(builder.field(\"DEPTNO\"))\n        .build();\n    final String expectedSql = \"SELECT \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"DEPT\\\"\\n\"\n        + \"WHERE EXISTS (SELECT 1\\n\"\n        + \"FROM (SELECT \\\"EMPNO\\\", \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n        + \"WHERE \\\"DEPT\\\".\\\"DEPTNO\\\" = \\\"t\\\".\\\"DEPTNO\\\")\";\n    assertThat(toSql(root), isLinux(expectedSql));\n  }\n","date":"2020-03-23 17:11:58","endLine":738,"groupId":"8503","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSemiJoinProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/23/4323fdb7ebaa92dc75cfb335f3ebd8ba526452.src","preCode":"  @Test public void testSemiJoinProject() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"DEPT\")\n        .scan(\"EMP\")\n        .project(\n            builder.field(builder.peek().getRowType().getField(\"EMPNO\", false, false).getIndex()),\n            builder.field(builder.peek().getRowType().getField(\"DEPTNO\", false, false).getIndex()))\n        .join(\n            JoinRelType.SEMI, builder.equals(\n              builder.field(2, 1, \"DEPTNO\"),\n              builder.field(2, 0, \"DEPTNO\")))\n        .project(builder.field(\"DEPTNO\"))\n        .build();\n    final String expectedSql = \"SELECT \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"DEPT\\\"\\n\"\n        + \"WHERE EXISTS (SELECT 1\\n\"\n        + \"FROM (SELECT \\\"EMPNO\\\", \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n        + \"WHERE \\\"DEPT\\\".\\\"DEPTNO\\\" = \\\"t\\\".\\\"DEPTNO\\\")\";\n    assertThat(toSql(root), isLinux(expectedSql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":717,"status":"B"}],"commitId":"79d5001b945cbb9c47046b1b28b2345f78a72dc8","commitMessage":"@@@[CALCITE-3810] Render ANTI and SEMI join to NOT EXISTS and EXISTS in the JDBC adapter. Also add forgotten IS_DISTINCT_FROM translation support\n","date":"2020-03-23 17:11:58","modifiedFileCount":"3","status":"B","submitter":"Christian Beikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSemiJoinFilter() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"DEPT\")\n        .scan(\"EMP\")\n        .filter(\n            builder.call(SqlStdOperatorTable.GREATER_THAN,\n              builder.field(builder.peek().getRowType().getField(\"EMPNO\", false, false).getIndex()),\n              builder.literal((short) 10)))\n        .join(\n            JoinRelType.SEMI, builder.equals(\n            builder.field(2, 1, \"DEPTNO\"),\n            builder.field(2, 0, \"DEPTNO\")))\n        .project(builder.field(\"DEPTNO\"))\n        .build();\n    final String expectedSql = \"SELECT \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"DEPT\\\"\\n\"\n        + \"WHERE EXISTS (SELECT 1\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\\n\"\n        + \"WHERE \\\"EMPNO\\\" > 10) AS \\\"t\\\"\\n\"\n        + \"WHERE \\\"DEPT\\\".\\\"DEPTNO\\\" = \\\"t\\\".\\\"DEPTNO\\\")\";\n    assertThat(toSql(root), isLinux(expectedSql));\n  }\n","date":"2020-04-06 04:57:49","endLine":715,"groupId":"8503","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSemiJoinFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testSemiJoinFilter() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"DEPT\")\n        .scan(\"EMP\")\n        .filter(\n            builder.call(SqlStdOperatorTable.GREATER_THAN,\n              builder.field(builder.peek().getRowType().getField(\"EMPNO\", false, false).getIndex()),\n              builder.literal((short) 10)))\n        .join(\n            JoinRelType.SEMI, builder.equals(\n            builder.field(2, 1, \"DEPTNO\"),\n            builder.field(2, 0, \"DEPTNO\")))\n        .project(builder.field(\"DEPTNO\"))\n        .build();\n    final String expectedSql = \"SELECT \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"DEPT\\\"\\n\"\n        + \"WHERE EXISTS (SELECT 1\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\\n\"\n        + \"WHERE \\\"EMPNO\\\" > 10) AS \\\"t\\\"\\n\"\n        + \"WHERE \\\"DEPT\\\".\\\"DEPTNO\\\" = \\\"t\\\".\\\"DEPTNO\\\")\";\n    assertThat(toSql(root), isLinux(expectedSql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":692,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSemiJoinProject() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"DEPT\")\n        .scan(\"EMP\")\n        .project(\n            builder.field(builder.peek().getRowType().getField(\"EMPNO\", false, false).getIndex()),\n            builder.field(builder.peek().getRowType().getField(\"DEPTNO\", false, false).getIndex()))\n        .join(\n            JoinRelType.SEMI, builder.equals(\n              builder.field(2, 1, \"DEPTNO\"),\n              builder.field(2, 0, \"DEPTNO\")))\n        .project(builder.field(\"DEPTNO\"))\n        .build();\n    final String expectedSql = \"SELECT \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"DEPT\\\"\\n\"\n        + \"WHERE EXISTS (SELECT 1\\n\"\n        + \"FROM (SELECT \\\"EMPNO\\\", \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n        + \"WHERE \\\"DEPT\\\".\\\"DEPTNO\\\" = \\\"t\\\".\\\"DEPTNO\\\")\";\n    assertThat(toSql(root), isLinux(expectedSql));\n  }\n","date":"2020-04-06 04:57:49","endLine":738,"groupId":"8503","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSemiJoinProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testSemiJoinProject() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"DEPT\")\n        .scan(\"EMP\")\n        .project(\n            builder.field(builder.peek().getRowType().getField(\"EMPNO\", false, false).getIndex()),\n            builder.field(builder.peek().getRowType().getField(\"DEPTNO\", false, false).getIndex()))\n        .join(\n            JoinRelType.SEMI, builder.equals(\n              builder.field(2, 1, \"DEPTNO\"),\n              builder.field(2, 0, \"DEPTNO\")))\n        .project(builder.field(\"DEPTNO\"))\n        .build();\n    final String expectedSql = \"SELECT \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"DEPT\\\"\\n\"\n        + \"WHERE EXISTS (SELECT 1\\n\"\n        + \"FROM (SELECT \\\"EMPNO\\\", \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n        + \"WHERE \\\"DEPT\\\".\\\"DEPTNO\\\" = \\\"t\\\".\\\"DEPTNO\\\")\";\n    assertThat(toSql(root), isLinux(expectedSql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":717,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2021-02-02 10:03:21","commitOrder":3,"curCode":"  @Test void testSemiJoinFilter() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"DEPT\")\n        .scan(\"EMP\")\n        .filter(\n            builder.call(SqlStdOperatorTable.GREATER_THAN,\n              builder.field(\"EMPNO\"),\n              builder.literal((short) 10)))\n        .join(\n            JoinRelType.SEMI, builder.equals(\n            builder.field(2, 1, \"DEPTNO\"),\n            builder.field(2, 0, \"DEPTNO\")))\n        .project(builder.field(\"DEPTNO\"))\n        .build();\n    final String expectedSql = \"SELECT \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"DEPT\\\"\\n\"\n        + \"WHERE EXISTS (SELECT 1\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\\n\"\n        + \"WHERE \\\"EMPNO\\\" > 10) AS \\\"t\\\"\\n\"\n        + \"WHERE \\\"DEPT\\\".\\\"DEPTNO\\\" = \\\"t\\\".\\\"DEPTNO\\\")\";\n    assertThat(toSql(root), isLinux(expectedSql));\n  }\n","date":"2021-02-12 06:05:36","endLine":913,"groupId":"101528","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSemiJoinFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/40/2c1c385549a27d4d7fa1b1a6ed7e08caf8c6a9.src","preCode":"  @Test void testSemiJoinFilter() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"DEPT\")\n        .scan(\"EMP\")\n        .filter(\n            builder.call(SqlStdOperatorTable.GREATER_THAN,\n              builder.field(builder.peek().getRowType().getField(\"EMPNO\", false, false).getIndex()),\n              builder.literal((short) 10)))\n        .join(\n            JoinRelType.SEMI, builder.equals(\n            builder.field(2, 1, \"DEPTNO\"),\n            builder.field(2, 0, \"DEPTNO\")))\n        .project(builder.field(\"DEPTNO\"))\n        .build();\n    final String expectedSql = \"SELECT \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"DEPT\\\"\\n\"\n        + \"WHERE EXISTS (SELECT 1\\n\"\n        + \"FROM (SELECT *\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\"\\n\"\n        + \"WHERE \\\"EMPNO\\\" > 10) AS \\\"t\\\"\\n\"\n        + \"WHERE \\\"DEPT\\\".\\\"DEPTNO\\\" = \\\"t\\\".\\\"DEPTNO\\\")\";\n    assertThat(toSql(root), isLinux(expectedSql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":890,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testSemiJoinProject() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"DEPT\")\n        .scan(\"EMP\")\n        .project(\n            builder.field(builder.peek().getRowType().getField(\"EMPNO\", false, false).getIndex()),\n            builder.field(builder.peek().getRowType().getField(\"DEPTNO\", false, false).getIndex()))\n        .join(\n            JoinRelType.SEMI, builder.equals(\n              builder.field(2, 1, \"DEPTNO\"),\n              builder.field(2, 0, \"DEPTNO\")))\n        .project(builder.field(\"DEPTNO\"))\n        .build();\n    final String expectedSql = \"SELECT \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"DEPT\\\"\\n\"\n        + \"WHERE EXISTS (SELECT 1\\n\"\n        + \"FROM (SELECT \\\"EMPNO\\\", \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n        + \"WHERE \\\"DEPT\\\".\\\"DEPTNO\\\" = \\\"t\\\".\\\"DEPTNO\\\")\";\n    assertThat(toSql(root), isLinux(expectedSql));\n  }\n","date":"2020-04-06 04:57:49","endLine":738,"groupId":"101528","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSemiJoinProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test void testSemiJoinProject() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"DEPT\")\n        .scan(\"EMP\")\n        .project(\n            builder.field(builder.peek().getRowType().getField(\"EMPNO\", false, false).getIndex()),\n            builder.field(builder.peek().getRowType().getField(\"DEPTNO\", false, false).getIndex()))\n        .join(\n            JoinRelType.SEMI, builder.equals(\n              builder.field(2, 1, \"DEPTNO\"),\n              builder.field(2, 0, \"DEPTNO\")))\n        .project(builder.field(\"DEPTNO\"))\n        .build();\n    final String expectedSql = \"SELECT \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"DEPT\\\"\\n\"\n        + \"WHERE EXISTS (SELECT 1\\n\"\n        + \"FROM (SELECT \\\"EMPNO\\\", \\\"DEPTNO\\\"\\n\"\n        + \"FROM \\\"scott\\\".\\\"EMP\\\") AS \\\"t\\\"\\n\"\n        + \"WHERE \\\"DEPT\\\".\\\"DEPTNO\\\" = \\\"t\\\".\\\"DEPTNO\\\")\";\n    assertThat(toSql(root), isLinux(expectedSql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":717,"status":"N"}],"commitId":"a680abe0528faacf8d284419c76c36bbc1a65aa3","commitMessage":"@@@In RelBuilder.  remove not-null arguments to COUNT\n","date":"2021-02-12 06:05:36","modifiedFileCount":"4","status":"M","submitter":"Julian Hyde"}]
