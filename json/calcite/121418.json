[{"authorTime":"2018-11-05 23:57:50","codes":[{"authorDate":"2018-11-05 23:57:50","commitOrder":2,"curCode":"    protected AssertQuery returns(String sql, Consumer<ResultSet> checker) {\n      try (Connection connection = createConnection()) {\n        if (consumer == null) {\n          assertQuery(connection, sql, limit, materializationsEnabled,\n              hooks, checker, null, null);\n        } else {\n          assertPrepare(connection, sql, limit, materializationsEnabled,\n              hooks, checker, null, null, consumer);\n        }\n        return this;\n      } catch (Exception e) {\n        throw new RuntimeException(\n            \"exception while executing [\" + sql + \"]\", e);\n      }\n    }\n","date":"2018-11-19 08:15:42","endLine":1461,"groupId":"13241","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"returns","params":"(Stringsql@Consumer<ResultSet>checker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/da/7518bfd0801d74ff6df5b0f3337f1b23fa867d.src","preCode":"    protected AssertQuery returns(String sql, Consumer<ResultSet> checker) {\n      try (Connection connection = createConnection()) {\n        if (consumer == null) {\n          assertQuery(connection, sql, limit, materializationsEnabled,\n              hooks, checker, null, null);\n        } else {\n          assertPrepare(connection, sql, limit, materializationsEnabled,\n              hooks, checker, null, null, consumer);\n        }\n        return this;\n      } catch (Exception e) {\n        throw new RuntimeException(\n            \"exception while executing [\" + sql + \"]\", e);\n      }\n    }\n","realPath":"core/src/test/java/org/apache/calcite/test/CalciteAssert.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1447,"status":"MB"},{"authorDate":"2018-11-05 23:57:50","commitOrder":2,"curCode":"    public AssertQuery runs() {\n      try (Connection connection = createConnection()) {\n        if (consumer == null) {\n          assertQuery(connection, sql, limit, materializationsEnabled,\n              hooks, null, null, null);\n        } else {\n          assertPrepare(connection, sql, limit, materializationsEnabled,\n              hooks, null, null, null, consumer);\n        }\n        return this;\n      } catch (Exception e) {\n        throw new RuntimeException(\n            \"exception while executing [\" + sql + \"]\", e);\n      }\n    }\n","date":"2018-11-19 08:15:42","endLine":1525,"groupId":"13241","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"runs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/da/7518bfd0801d74ff6df5b0f3337f1b23fa867d.src","preCode":"    public AssertQuery runs() {\n      try (Connection connection = createConnection()) {\n        if (consumer == null) {\n          assertQuery(connection, sql, limit, materializationsEnabled,\n              hooks, null, null, null);\n        } else {\n          assertPrepare(connection, sql, limit, materializationsEnabled,\n              hooks, null, null, null, consumer);\n        }\n        return this;\n      } catch (Exception e) {\n        throw new RuntimeException(\n            \"exception while executing [\" + sql + \"]\", e);\n      }\n    }\n","realPath":"core/src/test/java/org/apache/calcite/test/CalciteAssert.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1511,"status":"B"}],"commitId":"53e15af6c5e8e782b2edcd7f5bf4f5f32225d110","commitMessage":"@@@[CALCITE-563] In JDBC adapter.  push bindable parameters down to the underlying JDBC data source (Vladimir Sitnikov.  Piotr Bojko)\n\nFix up.  moving JdbcPreparedStatementUtils methods into\nResultSetEnumerable.  and fixing some comments and typos. (Julian Hyde)\n\nClose apache/calcite#907\nClose apache/calcite#902\n","date":"2018-11-19 08:15:42","modifiedFileCount":"16","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2019-02-03 18:32:12","codes":[{"authorDate":"2019-02-03 18:32:12","commitOrder":3,"curCode":"    protected AssertQuery returns(String sql, Consumer<ResultSet> checker) {\n      return withConnection(connection -> {\n        if (consumer == null) {\n          assertQuery(connection, sql, limit, materializationsEnabled,\n              hooks, checker, null, null);\n        } else {\n          assertPrepare(connection, sql, limit, materializationsEnabled,\n              hooks, checker, null, null, consumer);\n        }\n      });\n    }\n","date":"2019-02-04 16:13:27","endLine":1464,"groupId":"121418","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"returns","params":"(Stringsql@Consumer<ResultSet>checker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7f/cf56cd4e1378b80d596e6a6ae85093b1bf7a20.src","preCode":"    protected AssertQuery returns(String sql, Consumer<ResultSet> checker) {\n      try (Connection connection = createConnection()) {\n        if (consumer == null) {\n          assertQuery(connection, sql, limit, materializationsEnabled,\n              hooks, checker, null, null);\n        } else {\n          assertPrepare(connection, sql, limit, materializationsEnabled,\n              hooks, checker, null, null, consumer);\n        }\n        return this;\n      } catch (Exception e) {\n        throw new RuntimeException(\n            \"exception while executing [\" + sql + \"]\", e);\n      }\n    }\n","realPath":"core/src/test/java/org/apache/calcite/test/CalciteAssert.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1454,"status":"M"},{"authorDate":"2019-02-03 18:32:12","commitOrder":3,"curCode":"    public AssertQuery runs() {\n      return withConnection(connection -> {\n        if (consumer == null) {\n          assertQuery(connection, sql, limit, materializationsEnabled,\n              hooks, null, null, null);\n        } else {\n          assertPrepare(connection, sql, limit, materializationsEnabled,\n              hooks, null, null, null, consumer);\n        }\n      });\n    }\n","date":"2019-02-04 16:13:27","endLine":1514,"groupId":"121418","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"runs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7f/cf56cd4e1378b80d596e6a6ae85093b1bf7a20.src","preCode":"    public AssertQuery runs() {\n      try (Connection connection = createConnection()) {\n        if (consumer == null) {\n          assertQuery(connection, sql, limit, materializationsEnabled,\n              hooks, null, null, null);\n        } else {\n          assertPrepare(connection, sql, limit, materializationsEnabled,\n              hooks, null, null, null, consumer);\n        }\n        return this;\n      } catch (Exception e) {\n        throw new RuntimeException(\n            \"exception while executing [\" + sql + \"]\", e);\n      }\n    }\n","realPath":"core/src/test/java/org/apache/calcite/test/CalciteAssert.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1504,"status":"M"}],"commitId":"d9fe7f7ad7c2006780e459ce90e3f442a6246051","commitMessage":"@@@Improve assert messages for CalciteAssert-based tests\n\nMake sure top-most exception is AssertionError.  so test failures are simpler to understand.\n\nFor instance:\n\njava.lang.AssertionError:\nExpected: \"empid=100; deptno=10; DNAME=Sales\\nempid=1170; deptno=10; DNAME=Sales\\nempid=150; deptno=10; DNAME=Sales\\nempid=200; deptno=20; DNAME=null\"\n     but: was \"empid=100; deptno=10; DNAME=Sales\\nempid=110; deptno=10; DNAME=Sales\\nempid=150; deptno=10; DNAME=Sales\\nempid=200; deptno=20; DNAME=null\"\n\n\tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\n\tat org.junit.Assert.assertThat(Assert.java:956)\n\tat org.junit.Assert.assertThat(Assert.java:923)\n\tat org.apache.calcite.test.CalciteAssert.lambda$checkResult$6(CalciteAssert.java:423)\n\tat org.apache.calcite.test.CalciteAssert.assertQuery(CalciteAssert.java:557)\n\tat org.apache.calcite.test.CalciteAssert$AssertQuery.lambda$returns$1(CalciteAssert.java:1456)\n\tat org.apache.calcite.test.CalciteAssert$AssertQuery.withConnection(CalciteAssert.java:1388)\n\tat org.apache.calcite.test.CalciteAssert$AssertQuery.returns(CalciteAssert.java:1454)\n\tat org.apache.calcite.test.CalciteAssert$AssertQuery.returns(CalciteAssert.java:1437)\n\tat org.apache.calcite.test.CalciteAssert$AssertQuery.returnsUnordered(CalciteAssert.java:1466)\n\tat org.apache.calcite.test.JdbcTest.testScalarSubQuery(JdbcTest.java:4593)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\n\tSuppressed: java.lang.RuntimeException: With materializationsEnabled=false.  limit=0.  sql=select \"empid\".  \"deptno\". \n (select \"name\" from \"hr\".\"depts\"\n  where \"deptno\" = e.\"deptno\") as dname\nfrom \"hr\".\"emps\" as e\n\t\tat org.apache.calcite.test.CalciteAssert.assertQuery(CalciteAssert.java:570)\n\t\t... 28 more\n","date":"2019-02-04 16:13:27","modifiedFileCount":"1","status":"M","submitter":"Vladimir Sitnikov"}]
