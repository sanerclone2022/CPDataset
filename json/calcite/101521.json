[{"authorTime":"2019-11-26 18:47:41","codes":[{"authorDate":"2019-11-26 18:47:41","commitOrder":1,"curCode":"  @Test public void testSelectQueryWithHiveCube() {\n    String query = \"select \\\"product_class_id\\\", \\\"product_id\\\", count(*) \"\n            + \"from \\\"product\\\" group by cube(\\\"product_class_id\\\", \\\"product_id\\\")\";\n    String expected = \"SELECT product_class_id, product_id, COUNT(*)\\n\"\n            + \"FROM foodmart.product\\n\"\n            + \"GROUP BY product_class_id, product_id WITH CUBE\";\n    sql(query).withHive().ok(expected);\n    SqlDialect sqlDialect = sql(query).withHive().dialect;\n    assertTrue(sqlDialect.supportsGroupByWithCube());\n  }\n","date":"2019-12-06 10:15:50","endLine":237,"groupId":"3230","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectQueryWithHiveCube","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ef/f53445f62a9bcd777b249013ac795b072fa411.src","preCode":"  @Test public void testSelectQueryWithHiveCube() {\n    String query = \"select \\\"product_class_id\\\", \\\"product_id\\\", count(*) \"\n            + \"from \\\"product\\\" group by cube(\\\"product_class_id\\\", \\\"product_id\\\")\";\n    String expected = \"SELECT product_class_id, product_id, COUNT(*)\\n\"\n            + \"FROM foodmart.product\\n\"\n            + \"GROUP BY product_class_id, product_id WITH CUBE\";\n    sql(query).withHive().ok(expected);\n    SqlDialect sqlDialect = sql(query).withHive().dialect;\n    assertTrue(sqlDialect.supportsGroupByWithCube());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"B"},{"authorDate":"2019-11-26 18:47:41","commitOrder":1,"curCode":"  @Test public void testSelectQueryWithHiveRollup() {\n    String query = \"select \\\"product_class_id\\\", \\\"product_id\\\", count(*) \"\n            + \"from \\\"product\\\" group by rollup(\\\"product_class_id\\\", \\\"product_id\\\")\";\n    String expected = \"SELECT product_class_id, product_id, COUNT(*)\\n\"\n            + \"FROM foodmart.product\\n\"\n            + \"GROUP BY product_class_id, product_id WITH ROLLUP\";\n    sql(query).withHive().ok(expected);\n    SqlDialect sqlDialect = sql(query).withHive().dialect;\n    assertTrue(sqlDialect.supportsGroupByWithRollup());\n  }\n","date":"2019-12-06 10:15:50","endLine":248,"groupId":"12194","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectQueryWithHiveRollup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ef/f53445f62a9bcd777b249013ac795b072fa411.src","preCode":"  @Test public void testSelectQueryWithHiveRollup() {\n    String query = \"select \\\"product_class_id\\\", \\\"product_id\\\", count(*) \"\n            + \"from \\\"product\\\" group by rollup(\\\"product_class_id\\\", \\\"product_id\\\")\";\n    String expected = \"SELECT product_class_id, product_id, COUNT(*)\\n\"\n            + \"FROM foodmart.product\\n\"\n            + \"GROUP BY product_class_id, product_id WITH ROLLUP\";\n    sql(query).withHive().ok(expected);\n    SqlDialect sqlDialect = sql(query).withHive().dialect;\n    assertTrue(sqlDialect.supportsGroupByWithRollup());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"B"}],"commitId":"3a5234b14af3503fc1ec17836383264cbb77cb86","commitMessage":"@@@[CALCITE-3496] Hive dialect and MS SQL dialect support with cube and with rollup (dz)\n","date":"2019-12-06 10:15:50","modifiedFileCount":"3","status":"B","submitter":"dz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSelectQueryWithHiveCube() {\n    String query = \"select \\\"product_class_id\\\", \\\"product_id\\\", count(*) \"\n            + \"from \\\"product\\\" group by cube(\\\"product_class_id\\\", \\\"product_id\\\")\";\n    String expected = \"SELECT product_class_id, product_id, COUNT(*)\\n\"\n            + \"FROM foodmart.product\\n\"\n            + \"GROUP BY product_class_id, product_id WITH CUBE\";\n    sql(query).withHive().ok(expected);\n    SqlDialect sqlDialect = sql(query).withHive().dialect;\n    assertTrue(sqlDialect.supportsGroupByWithCube());\n  }\n","date":"2020-04-06 04:57:49","endLine":246,"groupId":"101521","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectQueryWithHiveCube","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testSelectQueryWithHiveCube() {\n    String query = \"select \\\"product_class_id\\\", \\\"product_id\\\", count(*) \"\n            + \"from \\\"product\\\" group by cube(\\\"product_class_id\\\", \\\"product_id\\\")\";\n    String expected = \"SELECT product_class_id, product_id, COUNT(*)\\n\"\n            + \"FROM foodmart.product\\n\"\n            + \"GROUP BY product_class_id, product_id WITH CUBE\";\n    sql(query).withHive().ok(expected);\n    SqlDialect sqlDialect = sql(query).withHive().dialect;\n    assertTrue(sqlDialect.supportsGroupByWithCube());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSelectQueryWithHiveRollup() {\n    String query = \"select \\\"product_class_id\\\", \\\"product_id\\\", count(*) \"\n            + \"from \\\"product\\\" group by rollup(\\\"product_class_id\\\", \\\"product_id\\\")\";\n    String expected = \"SELECT product_class_id, product_id, COUNT(*)\\n\"\n            + \"FROM foodmart.product\\n\"\n            + \"GROUP BY product_class_id, product_id WITH ROLLUP\";\n    sql(query).withHive().ok(expected);\n    SqlDialect sqlDialect = sql(query).withHive().dialect;\n    assertTrue(sqlDialect.supportsGroupByWithRollup());\n  }\n","date":"2020-04-06 04:57:49","endLine":257,"groupId":"101521","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectQueryWithHiveRollup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testSelectQueryWithHiveRollup() {\n    String query = \"select \\\"product_class_id\\\", \\\"product_id\\\", count(*) \"\n            + \"from \\\"product\\\" group by rollup(\\\"product_class_id\\\", \\\"product_id\\\")\";\n    String expected = \"SELECT product_class_id, product_id, COUNT(*)\\n\"\n            + \"FROM foodmart.product\\n\"\n            + \"GROUP BY product_class_id, product_id WITH ROLLUP\";\n    sql(query).withHive().ok(expected);\n    SqlDialect sqlDialect = sql(query).withHive().dialect;\n    assertTrue(sqlDialect.supportsGroupByWithRollup());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
