[{"authorTime":"2018-08-28 19:45:51","codes":[{"authorDate":"2019-07-26 18:41:29","commitOrder":11,"curCode":"  private void checkGroupBySingleSortLimit(boolean approx) {\n    final String sql = \"select \\\"brand_name\\\", sum(\\\"unit_sales\\\") as s\\n\"\n        + \"from \\\"foodmart\\\"\\n\"\n        + \"group by \\\"brand_name\\\"\\n\"\n        + \"order by s desc limit 3\";\n    final String approxDruid = \"{'queryType':'topN','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimension':{'type':'default','dimension':'brand_name','outputName':'brand_name','outputType':'STRING'},'metric':'S',\"\n        + \"'aggregations':[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z'],\"\n        + \"'threshold':3}\";\n    final String exactDruid = \"{'queryType':'groupBy','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimensions':[{'type':'default','dimension':'brand_name','outputName':'brand_name',\"\n        + \"'outputType':'STRING'}],'limitSpec':{'type':'default','limit':3,'columns':\"\n        + \"[{'dimension':'S','direction':'descending','dimensionOrder':'numeric'}]},'aggregations':\"\n        + \"[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z']}\";\n    final String druidQuery = approx ? approxDruid : exactDruid;\n    final String explain = \"PLAN=EnumerableInterpreter\\n\"\n        + \"  DruidQuery(table=[[foodmart, foodmart]], intervals=[[1900-01-09T00:00:00.000Z/\"\n        + \"2992-01-10T00:00:00.000Z]], projects=[[$2, $89]], groups=[{0}], \"\n        + \"aggs=[[SUM($1)]], sort0=[1], dir0=[DESC], fetch=[3])\";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_TOP_N.name(), approx)\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"brand_name=Hermanos; S=8469\",\n            \"brand_name=Tell Tale; S=7877\",\n            \"brand_name=Ebony; S=7438\")\n        .explainContains(explain)\n        .queryContains(druidChecker(druidQuery));\n  }\n","date":"2019-07-26 18:41:29","endLine":431,"groupId":"1313","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkGroupBySingleSortLimit","params":"(booleanapprox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/02/b3ad0d5008a0228c8f3ee8b0550059f0beed2c.src","preCode":"  private void checkGroupBySingleSortLimit(boolean approx) {\n    final String sql = \"select \\\"brand_name\\\", sum(\\\"unit_sales\\\") as s\\n\"\n        + \"from \\\"foodmart\\\"\\n\"\n        + \"group by \\\"brand_name\\\"\\n\"\n        + \"order by s desc limit 3\";\n    final String approxDruid = \"{'queryType':'topN','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimension':{'type':'default','dimension':'brand_name','outputName':'brand_name','outputType':'STRING'},'metric':'S',\"\n        + \"'aggregations':[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z'],\"\n        + \"'threshold':3}\";\n    final String exactDruid = \"{'queryType':'groupBy','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimensions':[{'type':'default','dimension':'brand_name','outputName':'brand_name',\"\n        + \"'outputType':'STRING'}],'limitSpec':{'type':'default','limit':3,'columns':\"\n        + \"[{'dimension':'S','direction':'descending','dimensionOrder':'numeric'}]},'aggregations':\"\n        + \"[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z']}\";\n    final String druidQuery = approx ? approxDruid : exactDruid;\n    final String explain = \"PLAN=EnumerableInterpreter\\n\"\n        + \"  DruidQuery(table=[[foodmart, foodmart]], intervals=[[1900-01-09T00:00:00.000Z/\"\n        + \"2992-01-10T00:00:00.000Z]], projects=[[$2, $89]], groups=[{0}], \"\n        + \"aggs=[[SUM($1)]], sort0=[1], dir0=[DESC], fetch=[3])\";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_TOP_N.name(), approx)\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"brand_name=Hermanos; S=8469\",\n            \"brand_name=Tell Tale; S=7877\",\n            \"brand_name=Ebony; S=7438\")\n        .explainContains(explain)\n        .queryContains(druidChecker(druidQuery));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapter2IT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"B"},{"authorDate":"2018-08-28 19:45:51","commitOrder":11,"curCode":"  private void checkGroupBySingleSortLimit(boolean approx) {\n    final String sql = \"select \\\"brand_name\\\", sum(\\\"unit_sales\\\") as s\\n\"\n        + \"from \\\"foodmart\\\"\\n\"\n        + \"group by \\\"brand_name\\\"\\n\"\n        + \"order by s desc limit 3\";\n    final String approxDruid = \"{'queryType':'topN','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimension':{'type':'default','dimension':'brand_name','outputName':'brand_name','outputType':'STRING'},'metric':'S',\"\n        + \"'aggregations':[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z'],\"\n        + \"'threshold':3}\";\n    final String exactDruid = \"{'queryType':'groupBy','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimensions':[{'type':'default','dimension':'brand_name','outputName':'brand_name',\"\n        + \"'outputType':'STRING'}],'limitSpec':{'type':'default','limit':3,'columns':\"\n        + \"[{'dimension':'S','direction':'descending','dimensionOrder':'numeric'}]},'aggregations':\"\n        + \"[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z']}\";\n    final String druidQuery = approx ? approxDruid : exactDruid;\n    final String explain = \"PLAN=EnumerableInterpreter\\n\"\n        + \"  DruidQuery(table=[[foodmart, foodmart]], intervals=[[1900-01-09T00:00:00.000Z/\"\n        + \"2992-01-10T00:00:00.000Z]], projects=[[$2, $89]], groups=[{0}], \"\n        + \"aggs=[[SUM($1)]], sort0=[1], dir0=[DESC], fetch=[3])\";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_TOP_N, approx)\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"brand_name=Hermanos; S=8469\",\n            \"brand_name=Tell Tale; S=7877\",\n            \"brand_name=Ebony; S=7438\")\n        .explainContains(explain)\n        .queryContains(druidChecker(druidQuery));\n  }\n","date":"2018-08-29 18:21:24","endLine":677,"groupId":"1898","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkGroupBySingleSortLimit","params":"(booleanapprox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3a/572dd6ba0fc28314f7c4e000c350cff3eb9048.src","preCode":"  private void checkGroupBySingleSortLimit(boolean approx) {\n    final String sql = \"select \\\"brand_name\\\", sum(\\\"unit_sales\\\") as s\\n\"\n        + \"from \\\"foodmart\\\"\\n\"\n        + \"group by \\\"brand_name\\\"\\n\"\n        + \"order by s desc limit 3\";\n    final String approxDruid = \"{'queryType':'topN','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimension':{'type':'default','dimension':'brand_name','outputName':'brand_name','outputType':'STRING'},'metric':'S',\"\n        + \"'aggregations':[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z'],\"\n        + \"'threshold':3}\";\n    final String exactDruid = \"{'queryType':'groupBy','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimensions':[{'type':'default','dimension':'brand_name','outputName':'brand_name',\"\n        + \"'outputType':'STRING'}],'limitSpec':{'type':'default','limit':3,'columns':\"\n        + \"[{'dimension':'S','direction':'descending','dimensionOrder':'numeric'}]},'aggregations':\"\n        + \"[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z']}\";\n    final String druidQuery = approx ? approxDruid : exactDruid;\n    final String explain = \"PLAN=EnumerableInterpreter\\n\"\n        + \"  DruidQuery(table=[[foodmart, foodmart]], intervals=[[1900-01-09T00:00:00.000Z/\"\n        + \"2992-01-10T00:00:00.000Z]], projects=[[$2, $89]], groups=[{0}], \"\n        + \"aggs=[[SUM($1)]], sort0=[1], dir0=[DESC], fetch=[3])\";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_TOP_N, approx)\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"brand_name=Hermanos; S=8469\",\n            \"brand_name=Tell Tale; S=7877\",\n            \"brand_name=Ebony; S=7438\")\n        .explainContains(explain)\n        .queryContains(druidChecker(druidQuery));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":645,"status":"NB"}],"commitId":"689a5bbb14614d3f8eef4a4f7e832c6c02029b3c","commitMessage":"@@@Update stale tests in DruidAdapter\n\n1. Adapt plans based on the improvements in the simplifier and elsewhere.\n2. Rename DruidAdapterIT2 to DruidAdapterIT to be run in integration tests.\n","date":"2019-07-26 18:41:29","modifiedFileCount":"1","status":"M","submitter":"Stamatis Zampetakis"},{"authorTime":"2019-08-31 11:11:39","codes":[{"authorDate":"2019-08-31 11:11:39","commitOrder":12,"curCode":"  private void checkGroupBySingleSortLimit(boolean approx) {\n    final String sql = \"select \\\"brand_name\\\", sum(\\\"unit_sales\\\") as s\\n\"\n        + \"from \\\"foodmart\\\"\\n\"\n        + \"group by \\\"brand_name\\\"\\n\"\n        + \"order by s desc limit 3\";\n    final String approxDruid = \"{'queryType':'topN','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimension':{'type':'default','dimension':'brand_name','outputName':'brand_name','outputType':'STRING'},'metric':'S',\"\n        + \"'aggregations':[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z'],\"\n        + \"'threshold':3}\";\n    final String exactDruid = \"{'queryType':'groupBy','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimensions':[{'type':'default','dimension':'brand_name','outputName':'brand_name',\"\n        + \"'outputType':'STRING'}],'limitSpec':{'type':'default','limit':3,'columns':\"\n        + \"[{'dimension':'S','direction':'descending','dimensionOrder':'numeric'}]},'aggregations':\"\n        + \"[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z']}\";\n    final String druidQuery = approx ? approxDruid : exactDruid;\n    final String explain = \"PLAN=EnumerableInterpreter\\n\"\n        + \"  DruidQuery(table=[[foodmart, foodmart]], intervals=[[1900-01-09T00:00:00.000Z/\"\n        + \"2992-01-10T00:00:00.000Z]], projects=[[$2, $89]], groups=[{0}], \"\n        + \"aggs=[[SUM($1)]], sort0=[1], dir0=[DESC], fetch=[3])\";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_TOP_N.name(), approx)\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"brand_name=Hermanos; S=8469\",\n            \"brand_name=Tell Tale; S=7877\",\n            \"brand_name=Ebony; S=7438\")\n        .explainContains(explain)\n        .queryContains(new DruidChecker(druidQuery));\n  }\n","date":"2019-09-02 15:46:07","endLine":415,"groupId":"10281","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkGroupBySingleSortLimit","params":"(booleanapprox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3e/6ef8f6919ace14b6f7c152f9fe71cd49d6eac5.src","preCode":"  private void checkGroupBySingleSortLimit(boolean approx) {\n    final String sql = \"select \\\"brand_name\\\", sum(\\\"unit_sales\\\") as s\\n\"\n        + \"from \\\"foodmart\\\"\\n\"\n        + \"group by \\\"brand_name\\\"\\n\"\n        + \"order by s desc limit 3\";\n    final String approxDruid = \"{'queryType':'topN','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimension':{'type':'default','dimension':'brand_name','outputName':'brand_name','outputType':'STRING'},'metric':'S',\"\n        + \"'aggregations':[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z'],\"\n        + \"'threshold':3}\";\n    final String exactDruid = \"{'queryType':'groupBy','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimensions':[{'type':'default','dimension':'brand_name','outputName':'brand_name',\"\n        + \"'outputType':'STRING'}],'limitSpec':{'type':'default','limit':3,'columns':\"\n        + \"[{'dimension':'S','direction':'descending','dimensionOrder':'numeric'}]},'aggregations':\"\n        + \"[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z']}\";\n    final String druidQuery = approx ? approxDruid : exactDruid;\n    final String explain = \"PLAN=EnumerableInterpreter\\n\"\n        + \"  DruidQuery(table=[[foodmart, foodmart]], intervals=[[1900-01-09T00:00:00.000Z/\"\n        + \"2992-01-10T00:00:00.000Z]], projects=[[$2, $89]], groups=[{0}], \"\n        + \"aggs=[[SUM($1)]], sort0=[1], dir0=[DESC], fetch=[3])\";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_TOP_N.name(), approx)\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"brand_name=Hermanos; S=8469\",\n            \"brand_name=Tell Tale; S=7877\",\n            \"brand_name=Ebony; S=7438\")\n        .explainContains(explain)\n        .queryContains(druidChecker(druidQuery));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapter2IT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"M"},{"authorDate":"2019-08-31 11:11:39","commitOrder":12,"curCode":"  private void checkGroupBySingleSortLimit(boolean approx) {\n    final String sql = \"select \\\"brand_name\\\", sum(\\\"unit_sales\\\") as s\\n\"\n        + \"from \\\"foodmart\\\"\\n\"\n        + \"group by \\\"brand_name\\\"\\n\"\n        + \"order by s desc limit 3\";\n    final String approxDruid = \"{'queryType':'topN','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimension':{'type':'default','dimension':'brand_name','outputName':'brand_name','outputType':'STRING'},'metric':'S',\"\n        + \"'aggregations':[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z'],\"\n        + \"'threshold':3}\";\n    final String exactDruid = \"{'queryType':'groupBy','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimensions':[{'type':'default','dimension':'brand_name','outputName':'brand_name',\"\n        + \"'outputType':'STRING'}],'limitSpec':{'type':'default','limit':3,'columns':\"\n        + \"[{'dimension':'S','direction':'descending','dimensionOrder':'numeric'}]},'aggregations':\"\n        + \"[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z']}\";\n    final String druidQuery = approx ? approxDruid : exactDruid;\n    final String explain = \"PLAN=EnumerableInterpreter\\n\"\n        + \"  DruidQuery(table=[[foodmart, foodmart]], intervals=[[1900-01-09T00:00:00.000Z/\"\n        + \"2992-01-10T00:00:00.000Z]], projects=[[$2, $89]], groups=[{0}], \"\n        + \"aggs=[[SUM($1)]], sort0=[1], dir0=[DESC], fetch=[3])\";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_TOP_N, approx)\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"brand_name=Hermanos; S=8469\",\n            \"brand_name=Tell Tale; S=7877\",\n            \"brand_name=Ebony; S=7438\")\n        .explainContains(explain)\n        .queryContains(new DruidChecker(druidQuery));\n  }\n","date":"2019-09-02 15:46:07","endLine":675,"groupId":"10281","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkGroupBySingleSortLimit","params":"(booleanapprox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c7/b3fcca6ac021f35002e80042f0a396ddfa39ba.src","preCode":"  private void checkGroupBySingleSortLimit(boolean approx) {\n    final String sql = \"select \\\"brand_name\\\", sum(\\\"unit_sales\\\") as s\\n\"\n        + \"from \\\"foodmart\\\"\\n\"\n        + \"group by \\\"brand_name\\\"\\n\"\n        + \"order by s desc limit 3\";\n    final String approxDruid = \"{'queryType':'topN','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimension':{'type':'default','dimension':'brand_name','outputName':'brand_name','outputType':'STRING'},'metric':'S',\"\n        + \"'aggregations':[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z'],\"\n        + \"'threshold':3}\";\n    final String exactDruid = \"{'queryType':'groupBy','dataSource':'foodmart','granularity':'all',\"\n        + \"'dimensions':[{'type':'default','dimension':'brand_name','outputName':'brand_name',\"\n        + \"'outputType':'STRING'}],'limitSpec':{'type':'default','limit':3,'columns':\"\n        + \"[{'dimension':'S','direction':'descending','dimensionOrder':'numeric'}]},'aggregations':\"\n        + \"[{'type':'longSum','name':'S','fieldName':'unit_sales'}],\"\n        + \"'intervals':['1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z']}\";\n    final String druidQuery = approx ? approxDruid : exactDruid;\n    final String explain = \"PLAN=EnumerableInterpreter\\n\"\n        + \"  DruidQuery(table=[[foodmart, foodmart]], intervals=[[1900-01-09T00:00:00.000Z/\"\n        + \"2992-01-10T00:00:00.000Z]], projects=[[$2, $89]], groups=[{0}], \"\n        + \"aggs=[[SUM($1)]], sort0=[1], dir0=[DESC], fetch=[3])\";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.APPROXIMATE_TOP_N, approx)\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"brand_name=Hermanos; S=8469\",\n            \"brand_name=Tell Tale; S=7877\",\n            \"brand_name=Ebony; S=7438\")\n        .explainContains(explain)\n        .queryContains(druidChecker(druidQuery));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":643,"status":"M"}],"commitId":"48086a76578b96ac961c833075357710bd624d3e","commitMessage":"@@@[CALCITE-3315] Multiple failures in Druid IT tests due to implicit casts\n\n1. Update stale tests in DruidAdapterIT and DruidAdapter2IT following the implementation of implicit casts in CALCITE-2302.\n2. Refactor common druidChecker code in DruidAdapterIT and DruidAdapter2IT in a separate class.\n\nCo-authored-by: yuzhao.cyz <yuzhao.cyz@alibaba-inc.com>\n","date":"2019-09-02 15:46:07","modifiedFileCount":"2","status":"M","submitter":"Stamatis Zampetakis"}]
