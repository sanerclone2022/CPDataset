[{"authorTime":"2018-04-27 07:29:15","codes":[{"authorDate":"2018-04-27 07:29:15","commitOrder":2,"curCode":"  public void testExtractHourFilterExpression() {\n    final String sql = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE\"\n            + \" EXTRACT(HOUR from \\\"timestamp\\\") = 19 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 0 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","date":"2018-06-23 02:49:06","endLine":3707,"groupId":"10431","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractHourFilterExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2a/573034ffb5c601e163f47f09fd07c22bd2e0a5.src","preCode":"  public void testExtractHourFilterExpression() {\n    final String sql = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE\"\n            + \" EXTRACT(HOUR from \\\"timestamp\\\") = 19 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 0 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3673,"status":"MB"},{"authorDate":"2018-04-27 07:29:15","commitOrder":2,"curCode":"  public void testExtractHourFilterExpressionWithCast() {\n    final String sql = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE\"\n        + \" EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 19 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 0 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","date":"2018-06-23 02:49:06","endLine":3744,"groupId":"10431","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractHourFilterExpressionWithCast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2a/573034ffb5c601e163f47f09fd07c22bd2e0a5.src","preCode":"  public void testExtractHourFilterExpressionWithCast() {\n    final String sql = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE\"\n        + \" EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 19 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 0 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3710,"status":"B"}],"commitId":"b29397d92e16f8aa77d5e84cf7a21744cd1b19a9","commitMessage":"@@@[CALCITE-2286] Support timestamp type for Druid adapter\n\nClose apache/calcite#681\n","date":"2018-06-23 02:49:06","modifiedFileCount":"13","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2018-08-28 19:45:51","codes":[{"authorDate":"2018-08-28 19:45:51","commitOrder":3,"curCode":"  public void testExtractHourFilterExpression() {\n    final String sql = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE\"\n            + \" EXTRACT(HOUR from \\\"timestamp\\\") = 19 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 0 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","date":"2018-08-29 18:21:24","endLine":3679,"groupId":"10431","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractHourFilterExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3a/572dd6ba0fc28314f7c4e000c350cff3eb9048.src","preCode":"  public void testExtractHourFilterExpression() {\n    final String sql = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE\"\n            + \" EXTRACT(HOUR from \\\"timestamp\\\") = 19 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 0 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3645,"status":"M"},{"authorDate":"2018-08-28 19:45:51","commitOrder":3,"curCode":"  public void testExtractHourFilterExpressionWithCast() {\n    final String sql = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE\"\n        + \" EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 19 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 0 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","date":"2018-08-29 18:21:24","endLine":3716,"groupId":"10431","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractHourFilterExpressionWithCast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3a/572dd6ba0fc28314f7c4e000c350cff3eb9048.src","preCode":"  public void testExtractHourFilterExpressionWithCast() {\n    final String sql = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE\"\n        + \" EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 19 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 0 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .with(ImmutableMap.of(\"model\", FOODMART.getPath()))\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3682,"status":"M"}],"commitId":"2f33a0c57b7b7e77b8193d0fff1e3531119aee0a","commitMessage":"@@@[CALCITE-2495] Support encoded URLs in calcite.util.Source.  and use it for URL->File conversion in tests\n\nFor the record:\n1) URL.getPath() produces %20.  so it is added to forbidden signatures\n2) Paths.get(url.toURI()).toFile() almost works.  however it fails with URL is not hierarchical for new URL(\"file:test.java\")\n3) new File(URL.toURI() is worse than #2\n4) URLDecoder must not be used to decode %20.  since it will convert + to spaces as well.  thus it will corrupt test.c++ filenames\n5) It looks like url.toURI().getSchemeSpecificPart()) properly handles \"opaque\" URIs (which are relative file:test.java kind of URLs)\n6) file:/test is relative for Windows.  and absolute would be like file:c:/test\n","date":"2018-08-29 18:21:24","modifiedFileCount":"18","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2019-12-04 02:44:13","codes":[{"authorDate":"2019-12-04 02:44:13","commitOrder":4,"curCode":"  @Test public void testExtractHourFilterExpression() {\n    final String sql = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE\"\n            + \" EXTRACT(HOUR from \\\"timestamp\\\") = 19 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 0 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","date":"2019-12-14 23:57:27","endLine":3645,"groupId":"10431","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractHourFilterExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/16/2df38cd6813dcd057a94a189dd6bc463668579.src","preCode":"  public void testExtractHourFilterExpression() {\n    final String sql = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE\"\n            + \" EXTRACT(HOUR from \\\"timestamp\\\") = 19 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 0 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3611,"status":"M"},{"authorDate":"2019-12-04 02:44:13","commitOrder":4,"curCode":"  @Test public void testExtractHourFilterExpressionWithCast() {\n    final String sql = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE\"\n        + \" EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 19 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 0 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","date":"2019-12-14 23:57:27","endLine":3681,"groupId":"10431","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractHourFilterExpressionWithCast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/16/2df38cd6813dcd057a94a189dd6bc463668579.src","preCode":"  public void testExtractHourFilterExpressionWithCast() {\n    final String sql = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE\"\n        + \" EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 19 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 0 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3647,"status":"M"}],"commitId":"571731b80a58eb095ebac7123285c375e7afff90","commitMessage":"@@@[CALCITE-3559] Update formatting: remove \"// End\" trailers.  move @Test from their own lines\n","date":"2019-12-14 23:57:27","modifiedFileCount":"1961","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testExtractHourFilterExpression() {\n    final String sql = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE\"\n            + \" EXTRACT(HOUR from \\\"timestamp\\\") = 19 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 0 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","date":"2020-04-06 04:57:49","endLine":3645,"groupId":"10446","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractHourFilterExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7a/4c255a8931d21fca61278e3f99936a6e0b3678.src","preCode":"  @Test public void testExtractHourFilterExpression() {\n    final String sql = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE\"\n            + \" EXTRACT(HOUR from \\\"timestamp\\\") = 19 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from \\\"timestamp\\\") \"\n            + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 0 \"\n            + \"group by EXTRACT(HOUR from \\\"timestamp\\\") \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3611,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testExtractHourFilterExpressionWithCast() {\n    final String sql = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE\"\n        + \" EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 19 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 0 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","date":"2020-04-06 04:57:49","endLine":3681,"groupId":"10446","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractHourFilterExpressionWithCast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7a/4c255a8931d21fca61278e3f99936a6e0b3678.src","preCode":"  @Test public void testExtractHourFilterExpressionWithCast() {\n    final String sql = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from \\\"timestamp\\\") = 17 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"America/Los_Angeles\")\n        .query(sql)\n        .runs()\n        .returnsOrdered(\"EXPR$0=17\");\n\n    final String sql2 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE\"\n        + \" EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 19 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"EST\")\n        .query(sql2)\n        .runs()\n        .returnsOrdered(\"EXPR$0=19\");\n\n    final String sql3 = \"SELECT EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \"\n        + \"from \\\"foodmart\\\" WHERE EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) = 0 \"\n        + \"group by EXTRACT(HOUR from CAST(\\\"timestamp\\\" AS TIMESTAMP)) \";\n    CalciteAssert.that()\n        .enable(enabled())\n        .withModel(FOODMART)\n        .with(CalciteConnectionProperty.TIME_ZONE.camelName(), \"UTC\")\n        .query(sql3)\n        .runs()\n        .returnsOrdered(\"EXPR$0=0\");\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3647,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
