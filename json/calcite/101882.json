[{"authorTime":"2019-09-10 06:04:05","codes":[{"authorDate":"2018-06-07 07:24:12","commitOrder":4,"curCode":"  public static SqlAggFunction getRollup(SqlAggFunction aggregation) {\n    if (aggregation == SqlStdOperatorTable.SUM\n        || aggregation == SqlStdOperatorTable.MIN\n        || aggregation == SqlStdOperatorTable.MAX\n        || aggregation == SqlStdOperatorTable.SUM0\n        || aggregation == SqlStdOperatorTable.ANY_VALUE) {\n      return aggregation;\n    } else if (aggregation == SqlStdOperatorTable.COUNT) {\n      return SqlStdOperatorTable.SUM0;\n    } else {\n      return null;\n    }\n  }\n","date":"2018-07-13 20:10:51","endLine":1366,"groupId":"2694","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getRollup","params":"(SqlAggFunctionaggregation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/35/b33991b03f5304af5223543d1e9d1ca6e21ec4.src","preCode":"  public static SqlAggFunction getRollup(SqlAggFunction aggregation) {\n    if (aggregation == SqlStdOperatorTable.SUM\n        || aggregation == SqlStdOperatorTable.MIN\n        || aggregation == SqlStdOperatorTable.MAX\n        || aggregation == SqlStdOperatorTable.SUM0\n        || aggregation == SqlStdOperatorTable.ANY_VALUE) {\n      return aggregation;\n    } else if (aggregation == SqlStdOperatorTable.COUNT) {\n      return SqlStdOperatorTable.SUM0;\n    } else {\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1354,"status":"NB"},{"authorDate":"2019-09-10 06:04:05","commitOrder":4,"curCode":"  protected SqlAggFunction getRollup(SqlAggFunction aggregation) {\n    if (aggregation == SqlStdOperatorTable.SUM\n        || aggregation == SqlStdOperatorTable.MIN\n        || aggregation == SqlStdOperatorTable.MAX\n        || aggregation == SqlStdOperatorTable.SUM0\n        || aggregation == SqlStdOperatorTable.ANY_VALUE) {\n      return aggregation;\n    } else if (aggregation == SqlStdOperatorTable.COUNT) {\n      return SqlStdOperatorTable.SUM0;\n    } else {\n      return null;\n    }\n  }\n","date":"2020-03-05 12:57:25","endLine":891,"groupId":"2694","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getRollup","params":"(SqlAggFunctionaggregation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/de/48ccd992fb9ad6757078e1bb987767a64e039f.src","preCode":"  protected SqlAggFunction getRollup(SqlAggFunction aggregation) {\n    if (aggregation == SqlStdOperatorTable.SUM\n        || aggregation == SqlStdOperatorTable.MIN\n        || aggregation == SqlStdOperatorTable.MAX\n        || aggregation == SqlStdOperatorTable.SUM0\n        || aggregation == SqlStdOperatorTable.ANY_VALUE) {\n      return aggregation;\n    } else if (aggregation == SqlStdOperatorTable.COUNT) {\n      return SqlStdOperatorTable.SUM0;\n    } else {\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewAggregateRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":879,"status":"B"}],"commitId":"5dea67890a1916771e9a335e45969f2a4d4f7d3c","commitMessage":"@@@[CALCITE-3825] Split AbstractMaterializedViewRule into multiple classes\n\nClose apache/calcite#1831\n","date":"2020-03-05 12:57:25","modifiedFileCount":"2","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2019-12-26 19:00:11","codes":[{"authorDate":"2019-12-26 19:00:11","commitOrder":5,"curCode":"  public static SqlAggFunction getRollup(SqlAggFunction aggregation) {\n    if (aggregation == SqlStdOperatorTable.SUM\n        || aggregation == SqlStdOperatorTable.MIN\n        || aggregation == SqlStdOperatorTable.MAX\n        || aggregation == SqlStdOperatorTable.SOME\n        || aggregation == SqlStdOperatorTable.EVERY\n        || aggregation == SqlLibraryOperators.BOOL_AND\n        || aggregation == SqlLibraryOperators.BOOL_OR\n        || aggregation == SqlLibraryOperators.LOGICAL_AND\n        || aggregation == SqlLibraryOperators.LOGICAL_OR\n        || aggregation == SqlStdOperatorTable.SUM0\n        || aggregation == SqlStdOperatorTable.ANY_VALUE) {\n      return aggregation;\n    } else if (aggregation == SqlStdOperatorTable.COUNT) {\n      return SqlStdOperatorTable.SUM0;\n    } else {\n      return null;\n    }\n  }\n","date":"2020-10-16 09:22:08","endLine":1990,"groupId":"871","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getRollup","params":"(SqlAggFunctionaggregation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2f/e5b8859462bff21e2b38c94f616c4a834a2c0f.src","preCode":"  public static SqlAggFunction getRollup(SqlAggFunction aggregation) {\n    if (aggregation == SqlStdOperatorTable.SUM\n        || aggregation == SqlStdOperatorTable.MIN\n        || aggregation == SqlStdOperatorTable.MAX\n        || aggregation == SqlStdOperatorTable.SUM0\n        || aggregation == SqlStdOperatorTable.ANY_VALUE) {\n      return aggregation;\n    } else if (aggregation == SqlStdOperatorTable.COUNT) {\n      return SqlStdOperatorTable.SUM0;\n    } else {\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1972,"status":"M"},{"authorDate":"2019-12-26 19:00:11","commitOrder":5,"curCode":"  protected SqlAggFunction getRollup(SqlAggFunction aggregation) {\n    if (aggregation == SqlStdOperatorTable.SUM\n        || aggregation == SqlStdOperatorTable.SUM0\n        || aggregation instanceof SqlMinMaxAggFunction\n        || aggregation == SqlStdOperatorTable.ANY_VALUE) {\n      return aggregation;\n    } else if (aggregation == SqlStdOperatorTable.COUNT) {\n      return SqlStdOperatorTable.SUM0;\n    } else {\n      return null;\n    }\n  }\n","date":"2020-10-16 09:22:08","endLine":861,"groupId":"3082","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getRollup","params":"(SqlAggFunctionaggregation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/91/2a70551e06e06141283b5843e7109b75902971.src","preCode":"  protected SqlAggFunction getRollup(SqlAggFunction aggregation) {\n    if (aggregation == SqlStdOperatorTable.SUM\n        || aggregation == SqlStdOperatorTable.MIN\n        || aggregation == SqlStdOperatorTable.MAX\n        || aggregation == SqlStdOperatorTable.SUM0\n        || aggregation == SqlStdOperatorTable.ANY_VALUE) {\n      return aggregation;\n    } else if (aggregation == SqlStdOperatorTable.COUNT) {\n      return SqlStdOperatorTable.SUM0;\n    } else {\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewAggregateRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":850,"status":"M"}],"commitId":"b598ff08cc8ba4f00ddef08fdaf77e4fbb8d972f","commitMessage":"@@@[CALCITE-2935] Support BOOL_AND.  BOOL_OR.  LOGICAL_AND.  LOGICAL_OR aggregate functions (ShuMingLi)\n\nBOOL_AND and BOOL_OR are in PostgreSQL and Redshift;\nLOGICAL_AND and LOGICAL_OR are in BigQuery;\nall are equivalent to EVERY and SOME. \nand in turn to MIN and MAX over BOOLEAN types.\n\nRework to use SqlMinMaxAggregateFunction.  and add\nLOGICAL_AND and LOGICAL_OR (Julian Hyde).\n\nClose apache/calcite#1694\n","date":"2020-10-16 09:22:08","modifiedFileCount":"8","status":"M","submitter":"ShuMingLi"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"  public static @Nullable SqlAggFunction getRollup(SqlAggFunction aggregation) {\n    if (aggregation == SqlStdOperatorTable.SUM\n        || aggregation == SqlStdOperatorTable.MIN\n        || aggregation == SqlStdOperatorTable.MAX\n        || aggregation == SqlStdOperatorTable.SOME\n        || aggregation == SqlStdOperatorTable.EVERY\n        || aggregation == SqlLibraryOperators.BOOL_AND\n        || aggregation == SqlLibraryOperators.BOOL_OR\n        || aggregation == SqlLibraryOperators.LOGICAL_AND\n        || aggregation == SqlLibraryOperators.LOGICAL_OR\n        || aggregation == SqlStdOperatorTable.SUM0\n        || aggregation == SqlStdOperatorTable.ANY_VALUE) {\n      return aggregation;\n    } else if (aggregation == SqlStdOperatorTable.COUNT) {\n      return SqlStdOperatorTable.SUM0;\n    } else {\n      return null;\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":2013,"groupId":"101882","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getRollup","params":"(SqlAggFunctionaggregation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/987d23d57d4619eae578c60232ea52836bdf5c.src","preCode":"  public static SqlAggFunction getRollup(SqlAggFunction aggregation) {\n    if (aggregation == SqlStdOperatorTable.SUM\n        || aggregation == SqlStdOperatorTable.MIN\n        || aggregation == SqlStdOperatorTable.MAX\n        || aggregation == SqlStdOperatorTable.SOME\n        || aggregation == SqlStdOperatorTable.EVERY\n        || aggregation == SqlLibraryOperators.BOOL_AND\n        || aggregation == SqlLibraryOperators.BOOL_OR\n        || aggregation == SqlLibraryOperators.LOGICAL_AND\n        || aggregation == SqlLibraryOperators.LOGICAL_OR\n        || aggregation == SqlStdOperatorTable.SUM0\n        || aggregation == SqlStdOperatorTable.ANY_VALUE) {\n      return aggregation;\n    } else if (aggregation == SqlStdOperatorTable.COUNT) {\n      return SqlStdOperatorTable.SUM0;\n    } else {\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1995,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"  protected @Nullable SqlAggFunction getRollup(SqlAggFunction aggregation) {\n    if (aggregation == SqlStdOperatorTable.SUM\n        || aggregation == SqlStdOperatorTable.SUM0\n        || aggregation instanceof SqlMinMaxAggFunction\n        || aggregation == SqlStdOperatorTable.ANY_VALUE) {\n      return aggregation;\n    } else if (aggregation == SqlStdOperatorTable.COUNT) {\n      return SqlStdOperatorTable.SUM0;\n    } else {\n      return null;\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":879,"groupId":"101882","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getRollup","params":"(SqlAggFunctionaggregation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/34/ae63927160934747d90d9559c4fb0728d09f55.src","preCode":"  protected SqlAggFunction getRollup(SqlAggFunction aggregation) {\n    if (aggregation == SqlStdOperatorTable.SUM\n        || aggregation == SqlStdOperatorTable.SUM0\n        || aggregation instanceof SqlMinMaxAggFunction\n        || aggregation == SqlStdOperatorTable.ANY_VALUE) {\n      return aggregation;\n    } else if (aggregation == SqlStdOperatorTable.COUNT) {\n      return SqlStdOperatorTable.SUM0;\n    } else {\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewAggregateRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":868,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
