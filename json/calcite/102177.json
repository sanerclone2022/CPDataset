[{"authorTime":"2017-07-07 06:19:58","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  public E addEdge(V vertex, V targetVertex) {\n    final VertexInfo<V, E> info = vertexMap.get(vertex);\n    if (info == null) {\n      throw new IllegalArgumentException(\"no vertex \" + vertex);\n    }\n    final VertexInfo<V, E> info2 = vertexMap.get(targetVertex);\n    if (info2 == null) {\n      throw new IllegalArgumentException(\"no vertex \" + targetVertex);\n    }\n    final E edge = edgeFactory.createEdge(vertex, targetVertex);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":89,"groupId":"8321","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addEdge","params":"(Vvertex@VtargetVertex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3b/afdf6d83eb8829522620c2d77ba1957412cb50.src","preCode":"  public E addEdge(V vertex, V targetVertex) {\n    final VertexInfo<V, E> info = vertexMap.get(vertex);\n    if (info == null) {\n      throw new IllegalArgumentException(\"no vertex \" + vertex);\n    }\n    final VertexInfo<V, E> info2 = vertexMap.get(targetVertex);\n    if (info2 == null) {\n      throw new IllegalArgumentException(\"no vertex \" + targetVertex);\n    }\n    final E edge = edgeFactory.createEdge(vertex, targetVertex);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"NB"},{"authorDate":"2017-07-07 06:19:58","commitOrder":2,"curCode":"  public E addEdge(V vertex, V targetVertex, Object... attributes) {\n    final VertexInfo<V, E> info = vertexMap.get(vertex);\n    if (info == null) {\n      throw new IllegalArgumentException(\"no vertex \" + vertex);\n    }\n    final VertexInfo<V, E> info2 = vertexMap.get(targetVertex);\n    if (info2 == null) {\n      throw new IllegalArgumentException(\"no vertex \" + targetVertex);\n    }\n    @SuppressWarnings(\"unchecked\")\n    final AttributedEdgeFactory<V, E> f =\n        (AttributedEdgeFactory) this.edgeFactory;\n    final E edge = f.createEdge(vertex, targetVertex, attributes);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","date":"2018-10-30 07:51:43","endLine":78,"groupId":"8321","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addEdge","params":"(Vvertex@VtargetVertex@Object...attributes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6f/325e1b8e984bb1cc119c8284b0d322e9f091dd.src","preCode":"  public E addEdge(V vertex, V targetVertex, Object... attributes) {\n    final VertexInfo<V, E> info = vertexMap.get(vertex);\n    if (info == null) {\n      throw new IllegalArgumentException(\"no vertex \" + vertex);\n    }\n    final VertexInfo<V, E> info2 = vertexMap.get(targetVertex);\n    if (info2 == null) {\n      throw new IllegalArgumentException(\"no vertex \" + targetVertex);\n    }\n    @SuppressWarnings(\"unchecked\")\n    final AttributedEdgeFactory<V, E> f =\n        (AttributedEdgeFactory) this.edgeFactory;\n    final E edge = f.createEdge(vertex, targetVertex, attributes);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/util/graph/AttributedDirectedGraph.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"b47413a1d648455c43dbe8d51df926ebd68b3a36","commitMessage":"@@@[CALCITE-1870] Lattice suggester\n\nDon't add a query graph if it is cyclic.\n\nMore concise descriptions of join graphs.  and add FoodMart test case.\nAdd a test based on TPC-DS.\n\nMake FoodMartQueryTest a top-level class.  and add a test that runs\nthrough all of its queries and suggests lattices.\n\nAPI changes to Lattice. Rename class Lattice.Node to LatticeNode.  add\nsub-class LatticeRootNode that is immutable and has state that was\npreviously in Lattice. LatticeSuggester makes heavy use of LatticeNode.\nMove column unique name into Column.  and remove the\nLattice.uniqueColumnNames field.\n\nDirectedGraph.toString sorts lists of vertices and edges.\n\nAdd materialized views to documentation menu;\ntweak SQL formatting.\n\nIn HepPlanner.  rename noDAG to noDag.\n\nSqlImplementor: Translate simple RexNode to SQL without requiring RelBuilder;\nSqlImplementor.Context is now static.  but not all derived classes are.\n\nFix a typo in UdfTest.\n","date":"2018-10-30 07:51:43","modifiedFileCount":"19","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-02-26 16:06:04","codes":[{"authorDate":"2020-02-26 16:06:04","commitOrder":3,"curCode":"  public E addEdge(V vertex, V targetVertex) {\n    final VertexInfo<V, E> info = vertexMap.get(vertex);\n    if (info == null) {\n      throw new IllegalArgumentException(\"no vertex \" + vertex);\n    }\n    final VertexInfo<V, E> targetInfo = vertexMap.get(targetVertex);\n    if (targetInfo == null) {\n      throw new IllegalArgumentException(\"no vertex \" + targetVertex);\n    }\n    final E edge = edgeFactory.createEdge(vertex, targetVertex);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      targetInfo.inEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","date":"2020-04-29 04:57:51","endLine":111,"groupId":"90","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addEdge","params":"(Vvertex@VtargetVertex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ca/e5b4bbce4f3cc7f2cece8c6082a3284dd01be0.src","preCode":"  public E addEdge(V vertex, V targetVertex) {\n    final VertexInfo<V, E> info = vertexMap.get(vertex);\n    if (info == null) {\n      throw new IllegalArgumentException(\"no vertex \" + vertex);\n    }\n    final VertexInfo<V, E> info2 = vertexMap.get(targetVertex);\n    if (info2 == null) {\n      throw new IllegalArgumentException(\"no vertex \" + targetVertex);\n    }\n    final E edge = edgeFactory.createEdge(vertex, targetVertex);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-02-26 16:06:04","commitOrder":3,"curCode":"  public E addEdge(V vertex, V targetVertex, Object... attributes) {\n    final VertexInfo<V, E> info = vertexMap.get(vertex);\n    if (info == null) {\n      throw new IllegalArgumentException(\"no vertex \" + vertex);\n    }\n    final VertexInfo<V, E> targetInfo = vertexMap.get(targetVertex);\n    if (targetInfo == null) {\n      throw new IllegalArgumentException(\"no vertex \" + targetVertex);\n    }\n    @SuppressWarnings(\"unchecked\")\n    final AttributedEdgeFactory<V, E> f =\n        (AttributedEdgeFactory) this.edgeFactory;\n    final E edge = f.createEdge(vertex, targetVertex, attributes);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      targetInfo.inEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","date":"2020-04-29 04:57:51","endLine":79,"groupId":"90","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addEdge","params":"(Vvertex@VtargetVertex@Object...attributes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/75/6d97351efd5494043cc89c90c5216bd5715138.src","preCode":"  public E addEdge(V vertex, V targetVertex, Object... attributes) {\n    final VertexInfo<V, E> info = vertexMap.get(vertex);\n    if (info == null) {\n      throw new IllegalArgumentException(\"no vertex \" + vertex);\n    }\n    final VertexInfo<V, E> info2 = vertexMap.get(targetVertex);\n    if (info2 == null) {\n      throw new IllegalArgumentException(\"no vertex \" + targetVertex);\n    }\n    @SuppressWarnings(\"unchecked\")\n    final AttributedEdgeFactory<V, E> f =\n        (AttributedEdgeFactory) this.edgeFactory;\n    final E edge = f.createEdge(vertex, targetVertex, attributes);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/util/graph/AttributedDirectedGraph.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"0e00d65532251aacc8fdcde703bc1d8ddf8dff16","commitMessage":"@@@[CALCITE-3827] Reduce the time complexity of finding in-edges of a vertex in the graph (Liya Fan)\n\nAdd benchmark to measure performance difference;\nPlace inward & outward edges in VertexInfo;\nSwitch algorithms when removing vertices.\n\nBased on benchmarking.  change threshold to 35%.  and convert\ncollection to HashSet; add benchmarking README. (Julian Hyde)\n","date":"2020-04-29 04:57:51","modifiedFileCount":"3","status":"M","submitter":"liyafan82"},{"authorTime":"2020-02-26 16:06:04","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":4,"curCode":"  @Override public E addEdge(V vertex, V targetVertex) {\n    final VertexInfo<V, E> info = vertexMap.get(vertex);\n    if (info == null) {\n      throw new IllegalArgumentException(\"no vertex \" + vertex);\n    }\n    final VertexInfo<V, E> targetInfo = vertexMap.get(targetVertex);\n    if (targetInfo == null) {\n      throw new IllegalArgumentException(\"no vertex \" + targetVertex);\n    }\n    final E edge = edgeFactory.createEdge(vertex, targetVertex);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      targetInfo.inEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","date":"2020-10-07 05:42:47","endLine":111,"groupId":"90","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addEdge","params":"(Vvertex@VtargetVertex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3f/3bc153eba09cd4c9a9d0d51a69cf294e34aac1.src","preCode":"  public E addEdge(V vertex, V targetVertex) {\n    final VertexInfo<V, E> info = vertexMap.get(vertex);\n    if (info == null) {\n      throw new IllegalArgumentException(\"no vertex \" + vertex);\n    }\n    final VertexInfo<V, E> targetInfo = vertexMap.get(targetVertex);\n    if (targetInfo == null) {\n      throw new IllegalArgumentException(\"no vertex \" + targetVertex);\n    }\n    final E edge = edgeFactory.createEdge(vertex, targetVertex);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      targetInfo.inEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-02-26 16:06:04","commitOrder":4,"curCode":"  public E addEdge(V vertex, V targetVertex, Object... attributes) {\n    final VertexInfo<V, E> info = vertexMap.get(vertex);\n    if (info == null) {\n      throw new IllegalArgumentException(\"no vertex \" + vertex);\n    }\n    final VertexInfo<V, E> targetInfo = vertexMap.get(targetVertex);\n    if (targetInfo == null) {\n      throw new IllegalArgumentException(\"no vertex \" + targetVertex);\n    }\n    @SuppressWarnings(\"unchecked\")\n    final AttributedEdgeFactory<V, E> f =\n        (AttributedEdgeFactory) this.edgeFactory;\n    final E edge = f.createEdge(vertex, targetVertex, attributes);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      targetInfo.inEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","date":"2020-04-29 04:57:51","endLine":79,"groupId":"90","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addEdge","params":"(Vvertex@VtargetVertex@Object...attributes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/75/6d97351efd5494043cc89c90c5216bd5715138.src","preCode":"  public E addEdge(V vertex, V targetVertex, Object... attributes) {\n    final VertexInfo<V, E> info = vertexMap.get(vertex);\n    if (info == null) {\n      throw new IllegalArgumentException(\"no vertex \" + vertex);\n    }\n    final VertexInfo<V, E> targetInfo = vertexMap.get(targetVertex);\n    if (targetInfo == null) {\n      throw new IllegalArgumentException(\"no vertex \" + targetVertex);\n    }\n    @SuppressWarnings(\"unchecked\")\n    final AttributedEdgeFactory<V, E> f =\n        (AttributedEdgeFactory) this.edgeFactory;\n    final E edge = f.createEdge(vertex, targetVertex, attributes);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      targetInfo.inEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/util/graph/AttributedDirectedGraph.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"N"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  @Override public @Nullable E addEdge(V vertex, V targetVertex) {\n    final VertexInfo<V, E> info = getVertex(vertex);\n    final VertexInfo<V, E> targetInfo = getVertex(targetVertex);\n    final E edge = edgeFactory.createEdge(vertex, targetVertex);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      targetInfo.inEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":122,"groupId":"102177","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"addEdge","params":"(Vvertex@VtargetVertex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/4c3c4586d1a1f548d07598e1f08dce106ce099.src","preCode":"  @Override public E addEdge(V vertex, V targetVertex) {\n    final VertexInfo<V, E> info = vertexMap.get(vertex);\n    if (info == null) {\n      throw new IllegalArgumentException(\"no vertex \" + vertex);\n    }\n    final VertexInfo<V, E> targetInfo = vertexMap.get(targetVertex);\n    if (targetInfo == null) {\n      throw new IllegalArgumentException(\"no vertex \" + targetVertex);\n    }\n    final E edge = edgeFactory.createEdge(vertex, targetVertex);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      targetInfo.inEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  public @Nullable E addEdge(V vertex, V targetVertex, Object... attributes) {\n    final VertexInfo<V, E> info = getVertex(vertex);\n    final VertexInfo<V, E> targetInfo = getVertex(targetVertex);\n    @SuppressWarnings(\"unchecked\")\n    final AttributedEdgeFactory<V, E> f =\n        (AttributedEdgeFactory) this.edgeFactory;\n    final E edge = f.createEdge(vertex, targetVertex, attributes);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      targetInfo.inEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":77,"groupId":"102177","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"addEdge","params":"(Vvertex@VtargetVertex@Object...attributes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/15/c15a70c3d02f872ff0b375fed836458ced183d.src","preCode":"  public E addEdge(V vertex, V targetVertex, Object... attributes) {\n    final VertexInfo<V, E> info = vertexMap.get(vertex);\n    if (info == null) {\n      throw new IllegalArgumentException(\"no vertex \" + vertex);\n    }\n    final VertexInfo<V, E> targetInfo = vertexMap.get(targetVertex);\n    if (targetInfo == null) {\n      throw new IllegalArgumentException(\"no vertex \" + targetVertex);\n    }\n    @SuppressWarnings(\"unchecked\")\n    final AttributedEdgeFactory<V, E> f =\n        (AttributedEdgeFactory) this.edgeFactory;\n    final E edge = f.createEdge(vertex, targetVertex, attributes);\n    if (edges.add(edge)) {\n      info.outEdges.add(edge);\n      targetInfo.inEdges.add(edge);\n      return edge;\n    } else {\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/util/graph/AttributedDirectedGraph.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
