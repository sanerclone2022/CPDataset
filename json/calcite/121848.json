[{"authorTime":"2017-03-30 10:55:19","codes":[{"authorDate":"2017-01-21 19:18:42","commitOrder":2,"curCode":"  private int aliasCount(SqlNameMatcher nameMatcher, String name) {\n    int n = 0;\n    for (SqlNode s : select.getSelectList()) {\n      final String alias = SqlValidatorUtil.getAlias(s, -1);\n      if (alias != null && nameMatcher.matches(alias, name)) {\n        n++;\n      }\n    }\n    return n;\n  }\n","date":"2017-01-26 03:00:12","endLine":107,"groupId":"16297","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"aliasCount","params":"(SqlNameMatchernameMatcher@Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e4/256c4498438ed98e155c6f7ebefb2bb061272b.src","preCode":"  private int aliasCount(SqlNameMatcher nameMatcher, String name) {\n    int n = 0;\n    for (SqlNode s : select.getSelectList()) {\n      final String alias = SqlValidatorUtil.getAlias(s, -1);\n      if (alias != null && nameMatcher.matches(alias, name)) {\n        n++;\n      }\n    }\n    return n;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/OrderByScope.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"NB"},{"authorDate":"2017-03-30 10:55:19","commitOrder":2,"curCode":"    @Override public SqlNode visit(SqlIdentifier id) {\n      if (id.isSimple()\n          && (havingExpr\n              ? validator.getConformance().isHavingAlias()\n              : validator.getConformance().isGroupByAlias())) {\n        String name = id.getSimple();\n        SqlNode expr = null;\n        final SqlNameMatcher nameMatcher =\n            validator.catalogReader.nameMatcher();\n        int n = 0;\n        for (SqlNode s : select.getSelectList()) {\n          final String alias = SqlValidatorUtil.getAlias(s, -1);\n          if (alias != null && nameMatcher.matches(alias, name)) {\n            expr = s;\n            n++;\n          }\n        }\n        if (n == 0) {\n          return super.visit(id);\n        } else if (n > 1) {\n          \r\n          throw validator.newValidationError(id,\n              RESOURCE.columnAmbiguous(name));\n        }\n        if (havingExpr && validator.isAggregate(root)) {\n          return super.visit(id);\n        }\n        expr = stripAs(expr);\n        if (expr instanceof SqlIdentifier) {\n          expr = getScope().fullyQualify((SqlIdentifier) expr).identifier;\n        }\n        return expr;\n      }\n      return super.visit(id);\n    }\n","date":"2017-05-10 07:24:25","endLine":5325,"groupId":"16297","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"visit","params":"(SqlIdentifierid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/49/9cdc9577fd9d555818621f025ff401ac59b55e.src","preCode":"    @Override public SqlNode visit(SqlIdentifier id) {\n      if (id.isSimple()\n          && (havingExpr\n              ? validator.getConformance().isHavingAlias()\n              : validator.getConformance().isGroupByAlias())) {\n        String name = id.getSimple();\n        SqlNode expr = null;\n        final SqlNameMatcher nameMatcher =\n            validator.catalogReader.nameMatcher();\n        int n = 0;\n        for (SqlNode s : select.getSelectList()) {\n          final String alias = SqlValidatorUtil.getAlias(s, -1);\n          if (alias != null && nameMatcher.matches(alias, name)) {\n            expr = s;\n            n++;\n          }\n        }\n        if (n == 0) {\n          return super.visit(id);\n        } else if (n > 1) {\n          \r\n          throw validator.newValidationError(id,\n              RESOURCE.columnAmbiguous(name));\n        }\n        if (havingExpr && validator.isAggregate(root)) {\n          return super.visit(id);\n        }\n        expr = stripAs(expr);\n        if (expr instanceof SqlIdentifier) {\n          expr = getScope().fullyQualify((SqlIdentifier) expr).identifier;\n        }\n        return expr;\n      }\n      return super.visit(id);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5291,"status":"B"}],"commitId":"e046be23d7364e16648ade5240ad948a04cc814b","commitMessage":"@@@[CALCITE-1306] Allow GROUP BY and HAVING to reference SELECT expressions by ordinal and alias (Rajeshbabu Chintaguntla)\n\nClose apache/calcite#413\n","date":"2017-05-10 07:24:25","modifiedFileCount":"9","status":"M","submitter":"Rajeshbabu Chintaguntla"},{"authorTime":"2018-08-31 19:57:15","codes":[{"authorDate":"2017-01-21 19:18:42","commitOrder":3,"curCode":"  private int aliasCount(SqlNameMatcher nameMatcher, String name) {\n    int n = 0;\n    for (SqlNode s : select.getSelectList()) {\n      final String alias = SqlValidatorUtil.getAlias(s, -1);\n      if (alias != null && nameMatcher.matches(alias, name)) {\n        n++;\n      }\n    }\n    return n;\n  }\n","date":"2017-01-26 03:00:12","endLine":107,"groupId":"16297","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"aliasCount","params":"(SqlNameMatchernameMatcher@Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e4/256c4498438ed98e155c6f7ebefb2bb061272b.src","preCode":"  private int aliasCount(SqlNameMatcher nameMatcher, String name) {\n    int n = 0;\n    for (SqlNode s : select.getSelectList()) {\n      final String alias = SqlValidatorUtil.getAlias(s, -1);\n      if (alias != null && nameMatcher.matches(alias, name)) {\n        n++;\n      }\n    }\n    return n;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/OrderByScope.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"N"},{"authorDate":"2018-08-31 19:57:15","commitOrder":3,"curCode":"    @Override public SqlNode visit(SqlIdentifier id) {\n      if (id.isSimple()\n          && (havingExpr\n              ? validator.getConformance().isHavingAlias()\n              : validator.getConformance().isGroupByAlias())) {\n        String name = id.getSimple();\n        SqlNode expr = null;\n        final SqlNameMatcher nameMatcher =\n            validator.catalogReader.nameMatcher();\n        int n = 0;\n        for (SqlNode s : select.getSelectList()) {\n          final String alias = SqlValidatorUtil.getAlias(s, -1);\n          if (alias != null && nameMatcher.matches(alias, name)) {\n            expr = s;\n            n++;\n          }\n        }\n        if (n == 0) {\n          return super.visit(id);\n        } else if (n > 1) {\n          \r\n          throw validator.newValidationError(id,\n              RESOURCE.columnAmbiguous(name));\n        }\n        if (havingExpr && validator.isAggregate(root)) {\n          return super.visit(id);\n        }\n        expr = stripAs(expr);\n        if (expr instanceof SqlIdentifier) {\n          SqlIdentifier sid = (SqlIdentifier) expr;\n          final SqlIdentifier fqId = getScope().fullyQualify(sid).identifier;\n          expr = expandDynamicStar(sid, fqId);\n        }\n        return expr;\n      }\n      return super.visit(id);\n    }\n","date":"2018-09-03 19:29:53","endLine":5830,"groupId":"16297","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"visit","params":"(SqlIdentifierid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d4/25b95c33708e96307386c8ea1fde68bbeae6d6.src","preCode":"    @Override public SqlNode visit(SqlIdentifier id) {\n      if (id.isSimple()\n          && (havingExpr\n              ? validator.getConformance().isHavingAlias()\n              : validator.getConformance().isGroupByAlias())) {\n        String name = id.getSimple();\n        SqlNode expr = null;\n        final SqlNameMatcher nameMatcher =\n            validator.catalogReader.nameMatcher();\n        int n = 0;\n        for (SqlNode s : select.getSelectList()) {\n          final String alias = SqlValidatorUtil.getAlias(s, -1);\n          if (alias != null && nameMatcher.matches(alias, name)) {\n            expr = s;\n            n++;\n          }\n        }\n        if (n == 0) {\n          return super.visit(id);\n        } else if (n > 1) {\n          \r\n          throw validator.newValidationError(id,\n              RESOURCE.columnAmbiguous(name));\n        }\n        if (havingExpr && validator.isAggregate(root)) {\n          return super.visit(id);\n        }\n        expr = stripAs(expr);\n        if (expr instanceof SqlIdentifier) {\n          expr = getScope().fullyQualify((SqlIdentifier) expr).identifier;\n        }\n        return expr;\n      }\n      return super.visit(id);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5794,"status":"M"}],"commitId":"d12549530c0aeeedbd6b03f5473c15029d93566f","commitMessage":"@@@[CALCITE-2514] Add SqlIdentifier conversion to ITEM operator for dynamic tables in ExtendedExpander (Arina Ielchiieva)\n\nClose #814\n","date":"2018-09-03 19:29:53","modifiedFileCount":"2","status":"M","submitter":"Arina Ielchiieva"},{"authorTime":"2019-12-13 19:49:56","codes":[{"authorDate":"2017-01-21 19:18:42","commitOrder":4,"curCode":"  private int aliasCount(SqlNameMatcher nameMatcher, String name) {\n    int n = 0;\n    for (SqlNode s : select.getSelectList()) {\n      final String alias = SqlValidatorUtil.getAlias(s, -1);\n      if (alias != null && nameMatcher.matches(alias, name)) {\n        n++;\n      }\n    }\n    return n;\n  }\n","date":"2017-01-26 03:00:12","endLine":107,"groupId":"16297","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"aliasCount","params":"(SqlNameMatchernameMatcher@Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e4/256c4498438ed98e155c6f7ebefb2bb061272b.src","preCode":"  private int aliasCount(SqlNameMatcher nameMatcher, String name) {\n    int n = 0;\n    for (SqlNode s : select.getSelectList()) {\n      final String alias = SqlValidatorUtil.getAlias(s, -1);\n      if (alias != null && nameMatcher.matches(alias, name)) {\n        n++;\n      }\n    }\n    return n;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/OrderByScope.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"N"},{"authorDate":"2019-12-13 19:49:56","commitOrder":4,"curCode":"    @Override public SqlNode visit(SqlIdentifier id) {\n      if (id.isSimple()\n          && (havingExpr\n              ? validator.getConformance().isHavingAlias()\n              : validator.getConformance().isGroupByAlias())) {\n        String name = id.getSimple();\n        SqlNode expr = null;\n        final SqlNameMatcher nameMatcher =\n            validator.catalogReader.nameMatcher();\n        int n = 0;\n        for (SqlNode s : select.getSelectList()) {\n          final String alias = SqlValidatorUtil.getAlias(s, -1);\n          if (alias != null && nameMatcher.matches(alias, name)) {\n            expr = s;\n            n++;\n          }\n        }\n        if (n == 0) {\n          return super.visit(id);\n        } else if (n > 1) {\n          \r\n          throw validator.newValidationError(id,\n              RESOURCE.columnAmbiguous(name));\n        }\n        if (havingExpr && validator.isAggregate(root)) {\n          return super.visit(id);\n        }\n        expr = stripAs(expr);\n        if (expr instanceof SqlIdentifier) {\n          SqlIdentifier sid = (SqlIdentifier) expr;\n          final SqlIdentifier fqId = getScope().fullyQualify(sid).identifier;\n          expr = expandDynamicStar(sid, fqId);\n        }\n        return expr;\n      }\n      if (id.isSimple()) {\n        final SelectScope scope = validator.getRawSelectScope(select);\n        SqlNode node = expandCommonColumn(select, id, scope);\n        if (node != id) {\n          return node;\n        }\n      }\n      return super.visit(id);\n    }\n","date":"2019-12-23 10:43:11","endLine":6101,"groupId":"16297","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"visit","params":"(SqlIdentifierid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/d7c7a5f25c1e118f28987599ace7bfec93c4ac.src","preCode":"    @Override public SqlNode visit(SqlIdentifier id) {\n      if (id.isSimple()\n          && (havingExpr\n              ? validator.getConformance().isHavingAlias()\n              : validator.getConformance().isGroupByAlias())) {\n        String name = id.getSimple();\n        SqlNode expr = null;\n        final SqlNameMatcher nameMatcher =\n            validator.catalogReader.nameMatcher();\n        int n = 0;\n        for (SqlNode s : select.getSelectList()) {\n          final String alias = SqlValidatorUtil.getAlias(s, -1);\n          if (alias != null && nameMatcher.matches(alias, name)) {\n            expr = s;\n            n++;\n          }\n        }\n        if (n == 0) {\n          return super.visit(id);\n        } else if (n > 1) {\n          \r\n          throw validator.newValidationError(id,\n              RESOURCE.columnAmbiguous(name));\n        }\n        if (havingExpr && validator.isAggregate(root)) {\n          return super.visit(id);\n        }\n        expr = stripAs(expr);\n        if (expr instanceof SqlIdentifier) {\n          SqlIdentifier sid = (SqlIdentifier) expr;\n          final SqlIdentifier fqId = getScope().fullyQualify(sid).identifier;\n          expr = expandDynamicStar(sid, fqId);\n        }\n        return expr;\n      }\n      return super.visit(id);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6058,"status":"M"}],"commitId":"c4d18de778713850f7d00f2ed418dca6922a0bff","commitMessage":"@@@[CALCITE-3387] Query with GROUP BY and JOIN ... USING wrongly fails with \"Column DEPTNO is ambiguous\" error\n","date":"2019-12-23 10:43:11","modifiedFileCount":"4","status":"M","submitter":"Chunwei Lei"},{"authorTime":"2020-01-06 11:15:09","codes":[{"authorDate":"2017-01-21 19:18:42","commitOrder":5,"curCode":"  private int aliasCount(SqlNameMatcher nameMatcher, String name) {\n    int n = 0;\n    for (SqlNode s : select.getSelectList()) {\n      final String alias = SqlValidatorUtil.getAlias(s, -1);\n      if (alias != null && nameMatcher.matches(alias, name)) {\n        n++;\n      }\n    }\n    return n;\n  }\n","date":"2017-01-26 03:00:12","endLine":107,"groupId":"16297","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"aliasCount","params":"(SqlNameMatchernameMatcher@Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e4/256c4498438ed98e155c6f7ebefb2bb061272b.src","preCode":"  private int aliasCount(SqlNameMatcher nameMatcher, String name) {\n    int n = 0;\n    for (SqlNode s : select.getSelectList()) {\n      final String alias = SqlValidatorUtil.getAlias(s, -1);\n      if (alias != null && nameMatcher.matches(alias, name)) {\n        n++;\n      }\n    }\n    return n;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/OrderByScope.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"N"},{"authorDate":"2020-01-06 11:15:09","commitOrder":5,"curCode":"    @Override public SqlNode visit(SqlIdentifier id) {\n      if (id.isSimple()\n          && (havingExpr\n              ? validator.getConformance().isHavingAlias()\n              : validator.getConformance().isGroupByAlias())) {\n        String name = id.getSimple();\n        SqlNode expr = null;\n        final SqlNameMatcher nameMatcher =\n            validator.catalogReader.nameMatcher();\n        int n = 0;\n        for (SqlNode s : select.getSelectList()) {\n          final String alias = SqlValidatorUtil.getAlias(s, -1);\n          if (alias != null && nameMatcher.matches(alias, name)) {\n            expr = s;\n            n++;\n          }\n        }\n        if (n == 0) {\n          return super.visit(id);\n        } else if (n > 1) {\n          \r\n          throw validator.newValidationError(id,\n              RESOURCE.columnAmbiguous(name));\n        }\n        if (havingExpr && validator.isAggregate(root)) {\n          return super.visit(id);\n        }\n        expr = stripAs(expr);\n        if (expr instanceof SqlIdentifier) {\n          SqlIdentifier sid = (SqlIdentifier) expr;\n          final SqlIdentifier fqId = getScope().fullyQualify(sid).identifier;\n          expr = expandDynamicStar(sid, fqId);\n        }\n        return expr;\n      }\n      if (id.isSimple()) {\n        final SelectScope scope = validator.getRawSelectScope(select);\n        SqlNode node = expandCommonColumn(select, id, scope, validator);\n        if (node != id) {\n          return node;\n        }\n      }\n      return super.visit(id);\n    }\n","date":"2020-01-07 11:13:21","endLine":6216,"groupId":"16297","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"visit","params":"(SqlIdentifierid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/b197ed5e627c6b2006a93e72c185f7700c83a5.src","preCode":"    @Override public SqlNode visit(SqlIdentifier id) {\n      if (id.isSimple()\n          && (havingExpr\n              ? validator.getConformance().isHavingAlias()\n              : validator.getConformance().isGroupByAlias())) {\n        String name = id.getSimple();\n        SqlNode expr = null;\n        final SqlNameMatcher nameMatcher =\n            validator.catalogReader.nameMatcher();\n        int n = 0;\n        for (SqlNode s : select.getSelectList()) {\n          final String alias = SqlValidatorUtil.getAlias(s, -1);\n          if (alias != null && nameMatcher.matches(alias, name)) {\n            expr = s;\n            n++;\n          }\n        }\n        if (n == 0) {\n          return super.visit(id);\n        } else if (n > 1) {\n          \r\n          throw validator.newValidationError(id,\n              RESOURCE.columnAmbiguous(name));\n        }\n        if (havingExpr && validator.isAggregate(root)) {\n          return super.visit(id);\n        }\n        expr = stripAs(expr);\n        if (expr instanceof SqlIdentifier) {\n          SqlIdentifier sid = (SqlIdentifier) expr;\n          final SqlIdentifier fqId = getScope().fullyQualify(sid).identifier;\n          expr = expandDynamicStar(sid, fqId);\n        }\n        return expr;\n      }\n      if (id.isSimple()) {\n        final SelectScope scope = validator.getRawSelectScope(select);\n        SqlNode node = expandCommonColumn(select, id, scope);\n        if (node != id) {\n          return node;\n        }\n      }\n      return super.visit(id);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6173,"status":"M"}],"commitId":"162275be3f4417d1c69f8b244e2f62369bbd6211","commitMessage":"@@@[CALCITE-2672] Qualifying the common column should not be allowed in Oracle dialect and SQL standard\n\nAlso remove some dead codes and duplicate codes.\n","date":"2020-01-07 11:13:21","modifiedFileCount":"7","status":"M","submitter":"Chunwei Lei"},{"authorTime":"2020-04-09 10:56:51","codes":[{"authorDate":"2017-01-21 19:18:42","commitOrder":6,"curCode":"  private int aliasCount(SqlNameMatcher nameMatcher, String name) {\n    int n = 0;\n    for (SqlNode s : select.getSelectList()) {\n      final String alias = SqlValidatorUtil.getAlias(s, -1);\n      if (alias != null && nameMatcher.matches(alias, name)) {\n        n++;\n      }\n    }\n    return n;\n  }\n","date":"2017-01-26 03:00:12","endLine":107,"groupId":"16297","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"aliasCount","params":"(SqlNameMatchernameMatcher@Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e4/256c4498438ed98e155c6f7ebefb2bb061272b.src","preCode":"  private int aliasCount(SqlNameMatcher nameMatcher, String name) {\n    int n = 0;\n    for (SqlNode s : select.getSelectList()) {\n      final String alias = SqlValidatorUtil.getAlias(s, -1);\n      if (alias != null && nameMatcher.matches(alias, name)) {\n        n++;\n      }\n    }\n    return n;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/OrderByScope.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"N"},{"authorDate":"2020-04-09 10:56:51","commitOrder":6,"curCode":"    @Override public SqlNode visit(SqlIdentifier id) {\n      if (id.isSimple()\n          && (havingExpr\n              ? validator.config().sqlConformance().isHavingAlias()\n              : validator.config().sqlConformance().isGroupByAlias())) {\n        String name = id.getSimple();\n        SqlNode expr = null;\n        final SqlNameMatcher nameMatcher =\n            validator.catalogReader.nameMatcher();\n        int n = 0;\n        for (SqlNode s : select.getSelectList()) {\n          final String alias = SqlValidatorUtil.getAlias(s, -1);\n          if (alias != null && nameMatcher.matches(alias, name)) {\n            expr = s;\n            n++;\n          }\n        }\n        if (n == 0) {\n          return super.visit(id);\n        } else if (n > 1) {\n          \r\n          throw validator.newValidationError(id,\n              RESOURCE.columnAmbiguous(name));\n        }\n        if (havingExpr && validator.isAggregate(root)) {\n          return super.visit(id);\n        }\n        expr = stripAs(expr);\n        if (expr instanceof SqlIdentifier) {\n          SqlIdentifier sid = (SqlIdentifier) expr;\n          final SqlIdentifier fqId = getScope().fullyQualify(sid).identifier;\n          expr = expandDynamicStar(sid, fqId);\n        }\n        return expr;\n      }\n      if (id.isSimple()) {\n        final SelectScope scope = validator.getRawSelectScope(select);\n        SqlNode node = expandCommonColumn(select, id, scope, validator);\n        if (node != id) {\n          return node;\n        }\n      }\n      return super.visit(id);\n    }\n","date":"2020-04-10 10:56:43","endLine":6223,"groupId":"16297","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"visit","params":"(SqlIdentifierid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/d167c03775fea3cd77b47aa3d8ea8bbf278247.src","preCode":"    @Override public SqlNode visit(SqlIdentifier id) {\n      if (id.isSimple()\n          && (havingExpr\n              ? validator.getConformance().isHavingAlias()\n              : validator.getConformance().isGroupByAlias())) {\n        String name = id.getSimple();\n        SqlNode expr = null;\n        final SqlNameMatcher nameMatcher =\n            validator.catalogReader.nameMatcher();\n        int n = 0;\n        for (SqlNode s : select.getSelectList()) {\n          final String alias = SqlValidatorUtil.getAlias(s, -1);\n          if (alias != null && nameMatcher.matches(alias, name)) {\n            expr = s;\n            n++;\n          }\n        }\n        if (n == 0) {\n          return super.visit(id);\n        } else if (n > 1) {\n          \r\n          throw validator.newValidationError(id,\n              RESOURCE.columnAmbiguous(name));\n        }\n        if (havingExpr && validator.isAggregate(root)) {\n          return super.visit(id);\n        }\n        expr = stripAs(expr);\n        if (expr instanceof SqlIdentifier) {\n          SqlIdentifier sid = (SqlIdentifier) expr;\n          final SqlIdentifier fqId = getScope().fullyQualify(sid).identifier;\n          expr = expandDynamicStar(sid, fqId);\n        }\n        return expr;\n      }\n      if (id.isSimple()) {\n        final SelectScope scope = validator.getRawSelectScope(select);\n        SqlNode node = expandCommonColumn(select, id, scope, validator);\n        if (node != id) {\n          return node;\n        }\n      }\n      return super.visit(id);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6180,"status":"M"}],"commitId":"4e9870078fcaa7da9e475c94f43309cc3244fa22","commitMessage":"@@@[CALCITE-3900] Add Config for SqlValidator\n\nThe SqlValidator now has 7 setXXX methods for all kinds of control flags. \nwhich is hard for code evolving.\n\nThere is also no way to config these things through the FrameworkConfig.\n\nAdd a SqlValidator.Config to solve these problems.\n","date":"2020-04-10 10:56:43","modifiedFileCount":"33","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":7,"curCode":"  private int aliasCount(SqlNameMatcher nameMatcher, String name) {\n    int n = 0;\n    for (SqlNode s : getSelectList(select)) {\n      final String alias = SqlValidatorUtil.getAlias(s, -1);\n      if (alias != null && nameMatcher.matches(alias, name)) {\n        n++;\n      }\n    }\n    return n;\n  }\n","date":"2020-11-30 06:45:33","endLine":110,"groupId":"121848","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"aliasCount","params":"(SqlNameMatchernameMatcher@Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/61/d73f37edd6a5d9a78804024e8ec534914d957b.src","preCode":"  private int aliasCount(SqlNameMatcher nameMatcher, String name) {\n    int n = 0;\n    for (SqlNode s : select.getSelectList()) {\n      final String alias = SqlValidatorUtil.getAlias(s, -1);\n      if (alias != null && nameMatcher.matches(alias, name)) {\n        n++;\n      }\n    }\n    return n;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/OrderByScope.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":7,"curCode":"    @Override public @Nullable SqlNode visit(SqlIdentifier id) {\n      if (id.isSimple()\n          && (havingExpr\n              ? validator.config().sqlConformance().isHavingAlias()\n              : validator.config().sqlConformance().isGroupByAlias())) {\n        String name = id.getSimple();\n        SqlNode expr = null;\n        final SqlNameMatcher nameMatcher =\n            validator.catalogReader.nameMatcher();\n        int n = 0;\n        for (SqlNode s : SqlNonNullableAccessors.getSelectList(select)) {\n          final String alias = SqlValidatorUtil.getAlias(s, -1);\n          if (alias != null && nameMatcher.matches(alias, name)) {\n            expr = s;\n            n++;\n          }\n        }\n        if (n == 0) {\n          return super.visit(id);\n        } else if (n > 1) {\n          \r\n          throw validator.newValidationError(id,\n              RESOURCE.columnAmbiguous(name));\n        }\n        if (havingExpr && validator.isAggregate(root)) {\n          return super.visit(id);\n        }\n        expr = stripAs(expr);\n        if (expr instanceof SqlIdentifier) {\n          SqlIdentifier sid = (SqlIdentifier) expr;\n          final SqlIdentifier fqId = getScope().fullyQualify(sid).identifier;\n          expr = expandDynamicStar(sid, fqId);\n        }\n        return expr;\n      }\n      if (id.isSimple()) {\n        final SelectScope scope = validator.getRawSelectScope(select);\n        SqlNode node = expandCommonColumn(select, id, scope, validator);\n        if (node != id) {\n          return node;\n        }\n      }\n      return super.visit(id);\n    }\n","date":"2020-11-30 06:45:33","endLine":6445,"groupId":"121848","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"visit","params":"(SqlIdentifierid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/42/8f1d3a3f0cf3ef4a3ecc26bac058934422699c.src","preCode":"    @Override public SqlNode visit(SqlIdentifier id) {\n      if (id.isSimple()\n          && (havingExpr\n              ? validator.config().sqlConformance().isHavingAlias()\n              : validator.config().sqlConformance().isGroupByAlias())) {\n        String name = id.getSimple();\n        SqlNode expr = null;\n        final SqlNameMatcher nameMatcher =\n            validator.catalogReader.nameMatcher();\n        int n = 0;\n        for (SqlNode s : select.getSelectList()) {\n          final String alias = SqlValidatorUtil.getAlias(s, -1);\n          if (alias != null && nameMatcher.matches(alias, name)) {\n            expr = s;\n            n++;\n          }\n        }\n        if (n == 0) {\n          return super.visit(id);\n        } else if (n > 1) {\n          \r\n          throw validator.newValidationError(id,\n              RESOURCE.columnAmbiguous(name));\n        }\n        if (havingExpr && validator.isAggregate(root)) {\n          return super.visit(id);\n        }\n        expr = stripAs(expr);\n        if (expr instanceof SqlIdentifier) {\n          SqlIdentifier sid = (SqlIdentifier) expr;\n          final SqlIdentifier fqId = getScope().fullyQualify(sid).identifier;\n          expr = expandDynamicStar(sid, fqId);\n        }\n        return expr;\n      }\n      if (id.isSimple()) {\n        final SelectScope scope = validator.getRawSelectScope(select);\n        SqlNode node = expandCommonColumn(select, id, scope, validator);\n        if (node != id) {\n          return node;\n        }\n      }\n      return super.visit(id);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6402,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
