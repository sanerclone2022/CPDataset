[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testStrings() {\n    ArrayTable.Column pair;\n\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(String.class);\n    valueSet.add(\"foo\");\n    valueSet.add(\"foo\");\n    pair = valueSet.freeze(0, null);\n    assertTrue(pair.representation instanceof ArrayTable.ObjectArray);\n    final ArrayTable.ObjectArray representation =\n        (ArrayTable.ObjectArray) pair.representation;\n    assertEquals(\"foo\", representation.getObject(pair.dataSet, 0));\n    assertEquals(\"foo\", representation.getObject(pair.dataSet, 1));\n    assertEquals(1, pair.cardinality);\n\n    \r\n    for (int i = 0; i < 2000; i++) {\n      valueSet.add(\"foo\");\n    }\n    pair = valueSet.freeze(0, null);\n    final ArrayTable.ObjectDictionary representation2 =\n        (ArrayTable.ObjectDictionary) pair.representation;\n    assertTrue(\n        representation2.representation instanceof ArrayTable.Constant);\n    assertEquals(\"foo\", representation2.getObject(pair.dataSet, 0));\n    assertEquals(\"foo\", representation2.getObject(pair.dataSet, 1000));\n    assertEquals(1, pair.cardinality);\n\n    \r\n    \r\n    valueSet.add(\"bar\");\n    pair = valueSet.freeze(0, null);\n    final ArrayTable.ObjectDictionary representation3 =\n        (ArrayTable.ObjectDictionary) pair.representation;\n    assertTrue(\n        representation3.representation\n            instanceof ArrayTable.BitSlicedPrimitiveArray);\n    final ArrayTable.BitSlicedPrimitiveArray representation4 =\n        (ArrayTable.BitSlicedPrimitiveArray) representation3.representation;\n    assertEquals(1, representation4.bitCount);\n    assertFalse(representation4.signed);\n    assertEquals(\"foo\", representation3.getObject(pair.dataSet, 0));\n    assertEquals(\"foo\", representation3.getObject(pair.dataSet, 1000));\n    assertEquals(\"bar\", representation3.getObject(pair.dataSet, 2003));\n    assertEquals(2, pair.cardinality);\n  }\n","date":"2014-11-14 09:39:34","endLine":227,"groupId":"555","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStrings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/4e9c2bb58814b61ec3751609c01c9032d0bb76.src","preCode":"  @Test public void testStrings() {\n    ArrayTable.Column pair;\n\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(String.class);\n    valueSet.add(\"foo\");\n    valueSet.add(\"foo\");\n    pair = valueSet.freeze(0, null);\n    assertTrue(pair.representation instanceof ArrayTable.ObjectArray);\n    final ArrayTable.ObjectArray representation =\n        (ArrayTable.ObjectArray) pair.representation;\n    assertEquals(\"foo\", representation.getObject(pair.dataSet, 0));\n    assertEquals(\"foo\", representation.getObject(pair.dataSet, 1));\n    assertEquals(1, pair.cardinality);\n\n    \r\n    for (int i = 0; i < 2000; i++) {\n      valueSet.add(\"foo\");\n    }\n    pair = valueSet.freeze(0, null);\n    final ArrayTable.ObjectDictionary representation2 =\n        (ArrayTable.ObjectDictionary) pair.representation;\n    assertTrue(\n        representation2.representation instanceof ArrayTable.Constant);\n    assertEquals(\"foo\", representation2.getObject(pair.dataSet, 0));\n    assertEquals(\"foo\", representation2.getObject(pair.dataSet, 1000));\n    assertEquals(1, pair.cardinality);\n\n    \r\n    \r\n    valueSet.add(\"bar\");\n    pair = valueSet.freeze(0, null);\n    final ArrayTable.ObjectDictionary representation3 =\n        (ArrayTable.ObjectDictionary) pair.representation;\n    assertTrue(\n        representation3.representation\n            instanceof ArrayTable.BitSlicedPrimitiveArray);\n    final ArrayTable.BitSlicedPrimitiveArray representation4 =\n        (ArrayTable.BitSlicedPrimitiveArray) representation3.representation;\n    assertEquals(1, representation4.bitCount);\n    assertFalse(representation4.signed);\n    assertEquals(\"foo\", representation3.getObject(pair.dataSet, 0));\n    assertEquals(\"foo\", representation3.getObject(pair.dataSet, 1000));\n    assertEquals(\"bar\", representation3.getObject(pair.dataSet, 2003));\n    assertEquals(2, pair.cardinality);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/adapter/clone/ArrayTableTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testOneValueOneNull() {\n    ArrayTable.Column pair;\n\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(String.class);\n    valueSet.add(null);\n    valueSet.add(\"foo\");\n\n    pair = valueSet.freeze(0, null);\n    assertTrue(pair.representation instanceof ArrayTable.ObjectArray);\n    final ArrayTable.ObjectArray representation =\n        (ArrayTable.ObjectArray) pair.representation;\n    assertNull(representation.getObject(pair.dataSet, 0));\n    assertEquals(2, pair.cardinality);\n\n    for (int i = 0; i < 3000; i++) {\n      valueSet.add(null);\n    }\n    pair = valueSet.freeze(0, null);\n    final ArrayTable.ObjectDictionary representation2 =\n        (ArrayTable.ObjectDictionary) pair.representation;\n    assertEquals(\n        1,\n        ((ArrayTable.BitSlicedPrimitiveArray)\n            representation2.representation).bitCount);\n    assertEquals(\"foo\", representation2.getObject(pair.dataSet, 1));\n    assertNull(representation2.getObject(pair.dataSet, 10));\n    assertEquals(2, pair.cardinality);\n  }\n","date":"2014-11-14 09:39:34","endLine":282,"groupId":"2137","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOneValueOneNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/4e9c2bb58814b61ec3751609c01c9032d0bb76.src","preCode":"  @Test public void testOneValueOneNull() {\n    ArrayTable.Column pair;\n\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(String.class);\n    valueSet.add(null);\n    valueSet.add(\"foo\");\n\n    pair = valueSet.freeze(0, null);\n    assertTrue(pair.representation instanceof ArrayTable.ObjectArray);\n    final ArrayTable.ObjectArray representation =\n        (ArrayTable.ObjectArray) pair.representation;\n    assertNull(representation.getObject(pair.dataSet, 0));\n    assertEquals(2, pair.cardinality);\n\n    for (int i = 0; i < 3000; i++) {\n      valueSet.add(null);\n    }\n    pair = valueSet.freeze(0, null);\n    final ArrayTable.ObjectDictionary representation2 =\n        (ArrayTable.ObjectDictionary) pair.representation;\n    assertEquals(\n        1,\n        ((ArrayTable.BitSlicedPrimitiveArray)\n            representation2.representation).bitCount);\n    assertEquals(\"foo\", representation2.getObject(pair.dataSet, 1));\n    assertNull(representation2.getObject(pair.dataSet, 10));\n    assertEquals(2, pair.cardinality);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/adapter/clone/ArrayTableTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testStrings() {\n    ArrayTable.Column pair;\n\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(String.class);\n    valueSet.add(\"foo\");\n    valueSet.add(\"foo\");\n    pair = valueSet.freeze(0, null);\n    assertTrue(pair.representation instanceof ArrayTable.ObjectArray);\n    final ArrayTable.ObjectArray representation =\n        (ArrayTable.ObjectArray) pair.representation;\n    assertEquals(\"foo\", representation.getObject(pair.dataSet, 0));\n    assertEquals(\"foo\", representation.getObject(pair.dataSet, 1));\n    assertEquals(1, pair.cardinality);\n\n    \r\n    for (int i = 0; i < 2000; i++) {\n      valueSet.add(\"foo\");\n    }\n    pair = valueSet.freeze(0, null);\n    final ArrayTable.ObjectDictionary representation2 =\n        (ArrayTable.ObjectDictionary) pair.representation;\n    assertTrue(\n        representation2.representation instanceof ArrayTable.Constant);\n    assertEquals(\"foo\", representation2.getObject(pair.dataSet, 0));\n    assertEquals(\"foo\", representation2.getObject(pair.dataSet, 1000));\n    assertEquals(1, pair.cardinality);\n\n    \r\n    \r\n    valueSet.add(\"bar\");\n    pair = valueSet.freeze(0, null);\n    final ArrayTable.ObjectDictionary representation3 =\n        (ArrayTable.ObjectDictionary) pair.representation;\n    assertTrue(\n        representation3.representation\n            instanceof ArrayTable.BitSlicedPrimitiveArray);\n    final ArrayTable.BitSlicedPrimitiveArray representation4 =\n        (ArrayTable.BitSlicedPrimitiveArray) representation3.representation;\n    assertEquals(1, representation4.bitCount);\n    assertFalse(representation4.signed);\n    assertEquals(\"foo\", representation3.getObject(pair.dataSet, 0));\n    assertEquals(\"foo\", representation3.getObject(pair.dataSet, 1000));\n    assertEquals(\"bar\", representation3.getObject(pair.dataSet, 2003));\n    assertEquals(2, pair.cardinality);\n  }\n","date":"2020-04-06 04:57:49","endLine":228,"groupId":"101600","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testStrings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/55/60ebbfb8d7dab7cd17c367a6c6b9bb41c7f07e.src","preCode":"  @Test public void testStrings() {\n    ArrayTable.Column pair;\n\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(String.class);\n    valueSet.add(\"foo\");\n    valueSet.add(\"foo\");\n    pair = valueSet.freeze(0, null);\n    assertTrue(pair.representation instanceof ArrayTable.ObjectArray);\n    final ArrayTable.ObjectArray representation =\n        (ArrayTable.ObjectArray) pair.representation;\n    assertEquals(\"foo\", representation.getObject(pair.dataSet, 0));\n    assertEquals(\"foo\", representation.getObject(pair.dataSet, 1));\n    assertEquals(1, pair.cardinality);\n\n    \r\n    for (int i = 0; i < 2000; i++) {\n      valueSet.add(\"foo\");\n    }\n    pair = valueSet.freeze(0, null);\n    final ArrayTable.ObjectDictionary representation2 =\n        (ArrayTable.ObjectDictionary) pair.representation;\n    assertTrue(\n        representation2.representation instanceof ArrayTable.Constant);\n    assertEquals(\"foo\", representation2.getObject(pair.dataSet, 0));\n    assertEquals(\"foo\", representation2.getObject(pair.dataSet, 1000));\n    assertEquals(1, pair.cardinality);\n\n    \r\n    \r\n    valueSet.add(\"bar\");\n    pair = valueSet.freeze(0, null);\n    final ArrayTable.ObjectDictionary representation3 =\n        (ArrayTable.ObjectDictionary) pair.representation;\n    assertTrue(\n        representation3.representation\n            instanceof ArrayTable.BitSlicedPrimitiveArray);\n    final ArrayTable.BitSlicedPrimitiveArray representation4 =\n        (ArrayTable.BitSlicedPrimitiveArray) representation3.representation;\n    assertEquals(1, representation4.bitCount);\n    assertFalse(representation4.signed);\n    assertEquals(\"foo\", representation3.getObject(pair.dataSet, 0));\n    assertEquals(\"foo\", representation3.getObject(pair.dataSet, 1000));\n    assertEquals(\"bar\", representation3.getObject(pair.dataSet, 2003));\n    assertEquals(2, pair.cardinality);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/adapter/clone/ArrayTableTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testOneValueOneNull() {\n    ArrayTable.Column pair;\n\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(String.class);\n    valueSet.add(null);\n    valueSet.add(\"foo\");\n\n    pair = valueSet.freeze(0, null);\n    assertTrue(pair.representation instanceof ArrayTable.ObjectArray);\n    final ArrayTable.ObjectArray representation =\n        (ArrayTable.ObjectArray) pair.representation;\n    assertNull(representation.getObject(pair.dataSet, 0));\n    assertEquals(2, pair.cardinality);\n\n    for (int i = 0; i < 3000; i++) {\n      valueSet.add(null);\n    }\n    pair = valueSet.freeze(0, null);\n    final ArrayTable.ObjectDictionary representation2 =\n        (ArrayTable.ObjectDictionary) pair.representation;\n    assertEquals(\n        1,\n        ((ArrayTable.BitSlicedPrimitiveArray)\n            representation2.representation).bitCount);\n    assertEquals(\"foo\", representation2.getObject(pair.dataSet, 1));\n    assertNull(representation2.getObject(pair.dataSet, 10));\n    assertEquals(2, pair.cardinality);\n  }\n","date":"2020-04-06 04:57:49","endLine":283,"groupId":"101600","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testOneValueOneNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/55/60ebbfb8d7dab7cd17c367a6c6b9bb41c7f07e.src","preCode":"  @Test public void testOneValueOneNull() {\n    ArrayTable.Column pair;\n\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(String.class);\n    valueSet.add(null);\n    valueSet.add(\"foo\");\n\n    pair = valueSet.freeze(0, null);\n    assertTrue(pair.representation instanceof ArrayTable.ObjectArray);\n    final ArrayTable.ObjectArray representation =\n        (ArrayTable.ObjectArray) pair.representation;\n    assertNull(representation.getObject(pair.dataSet, 0));\n    assertEquals(2, pair.cardinality);\n\n    for (int i = 0; i < 3000; i++) {\n      valueSet.add(null);\n    }\n    pair = valueSet.freeze(0, null);\n    final ArrayTable.ObjectDictionary representation2 =\n        (ArrayTable.ObjectDictionary) pair.representation;\n    assertEquals(\n        1,\n        ((ArrayTable.BitSlicedPrimitiveArray)\n            representation2.representation).bitCount);\n    assertEquals(\"foo\", representation2.getObject(pair.dataSet, 1));\n    assertNull(representation2.getObject(pair.dataSet, 10));\n    assertEquals(2, pair.cardinality);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/adapter/clone/ArrayTableTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
