[{"authorTime":"2019-12-19 16:30:31","codes":[{"authorDate":"2018-12-28 04:18:14","commitOrder":2,"curCode":"  @Test public void testBitOrFunc() {\n    tester.setFor(SqlStdOperatorTable.BIT_OR, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"bit_or(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    tester.checkType(\"bit_or(1)\", \"INTEGER\");\n    tester.checkType(\"bit_or(CAST(2 AS TINYINT))\", \"TINYINT\");\n    tester.checkType(\"bit_or(CAST(2 AS SMALLINT))\", \"SMALLINT\");\n    tester.checkType(\"bit_or(distinct CAST(2 AS BIGINT))\", \"BIGINT\");\n    tester.checkFails(\"^bit_or(1.2)^\",\n        \"Cannot apply 'BIT_OR' to arguments of type 'BIT_OR\\\\(<DECIMAL\\\\(2, 1\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'BIT_OR\\\\(<INTEGER>\\\\)'\",\n        false);\n    tester.checkFails(\n        \"^bit_or()^\",\n        \"Invalid number of arguments to function 'BIT_OR'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^bit_or(1, 2)^\",\n        \"Invalid number of arguments to function 'BIT_OR'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"1\", \"2\", \"2\"};\n    tester.checkAgg(\"bit_or(x)\", values, 3, 0);\n  }\n","date":"2019-02-01 09:29:52","endLine":7806,"groupId":"12905","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBitOrFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/ba71cee8109b26aa50f44a5e5ba46ce7d71d76.src","preCode":"  @Test public void testBitOrFunc() {\n    tester.setFor(SqlStdOperatorTable.BIT_OR, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"bit_or(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    tester.checkType(\"bit_or(1)\", \"INTEGER\");\n    tester.checkType(\"bit_or(CAST(2 AS TINYINT))\", \"TINYINT\");\n    tester.checkType(\"bit_or(CAST(2 AS SMALLINT))\", \"SMALLINT\");\n    tester.checkType(\"bit_or(distinct CAST(2 AS BIGINT))\", \"BIGINT\");\n    tester.checkFails(\"^bit_or(1.2)^\",\n        \"Cannot apply 'BIT_OR' to arguments of type 'BIT_OR\\\\(<DECIMAL\\\\(2, 1\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'BIT_OR\\\\(<INTEGER>\\\\)'\",\n        false);\n    tester.checkFails(\n        \"^bit_or()^\",\n        \"Invalid number of arguments to function 'BIT_OR'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^bit_or(1, 2)^\",\n        \"Invalid number of arguments to function 'BIT_OR'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"1\", \"2\", \"2\"};\n    tester.checkAgg(\"bit_or(x)\", values, 3, 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7786,"status":"NB"},{"authorDate":"2019-12-19 16:30:31","commitOrder":2,"curCode":"  @Test public void testBitXorFunc() {\n    tester.setFor(SqlStdOperatorTable.BIT_XOR, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"bit_xor(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    tester.checkType(\"bit_xor(1)\", \"INTEGER\");\n    tester.checkType(\"bit_xor(CAST(2 AS TINYINT))\", \"TINYINT\");\n    tester.checkType(\"bit_xor(CAST(2 AS SMALLINT))\", \"SMALLINT\");\n    tester.checkType(\"bit_xor(distinct CAST(2 AS BIGINT))\", \"BIGINT\");\n    tester.checkFails(\"^bit_xor(1.2)^\",\n        \"Cannot apply 'BIT_XOR' to arguments of type 'BIT_XOR\\\\(<DECIMAL\\\\(2, 1\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'BIT_XOR\\\\(<INTEGER>\\\\)'\",\n        false);\n    tester.checkFails(\n        \"^bit_xor()^\",\n        \"Invalid number of arguments to function 'BIT_XOR'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^bit_xor(1, 2)^\",\n        \"Invalid number of arguments to function 'BIT_XOR'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"1\", \"2\", \"1\"};\n    tester.checkAgg(\"bit_xor(x)\", values, 2, 0);\n  }\n","date":"2019-12-27 14:08:03","endLine":8752,"groupId":"12905","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBitXorFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c5/e9aa9486c531b0e9ea13c4a13826f5772cdef5.src","preCode":"  @Test public void testBitXorFunc() {\n    tester.setFor(SqlStdOperatorTable.BIT_XOR, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"bit_xor(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    tester.checkType(\"bit_xor(1)\", \"INTEGER\");\n    tester.checkType(\"bit_xor(CAST(2 AS TINYINT))\", \"TINYINT\");\n    tester.checkType(\"bit_xor(CAST(2 AS SMALLINT))\", \"SMALLINT\");\n    tester.checkType(\"bit_xor(distinct CAST(2 AS BIGINT))\", \"BIGINT\");\n    tester.checkFails(\"^bit_xor(1.2)^\",\n        \"Cannot apply 'BIT_XOR' to arguments of type 'BIT_XOR\\\\(<DECIMAL\\\\(2, 1\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'BIT_XOR\\\\(<INTEGER>\\\\)'\",\n        false);\n    tester.checkFails(\n        \"^bit_xor()^\",\n        \"Invalid number of arguments to function 'BIT_XOR'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^bit_xor(1, 2)^\",\n        \"Invalid number of arguments to function 'BIT_XOR'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"1\", \"2\", \"1\"};\n    tester.checkAgg(\"bit_xor(x)\", values, 2, 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8732,"status":"B"}],"commitId":"e7fc6977341d0166f110de4218313648de81b336","commitMessage":"@@@[CALCITE-3591] Add bit_xor aggregate operator (wangxlong)\n\nclose apache/calcite#1676\n","date":"2019-12-27 14:08:03","modifiedFileCount":"8","status":"M","submitter":"whlwanghailong"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testBitOrFunc() {\n    tester.setFor(SqlStdOperatorTable.BIT_OR, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"bit_or(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    tester.checkType(\"bit_or(1)\", \"INTEGER\");\n    tester.checkType(\"bit_or(CAST(2 AS TINYINT))\", \"TINYINT\");\n    tester.checkType(\"bit_or(CAST(2 AS SMALLINT))\", \"SMALLINT\");\n    tester.checkType(\"bit_or(distinct CAST(2 AS BIGINT))\", \"BIGINT\");\n    tester.checkFails(\"^bit_or(1.2)^\",\n        \"Cannot apply 'BIT_OR' to arguments of type 'BIT_OR\\\\(<DECIMAL\\\\(2, 1\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'BIT_OR\\\\(<INTEGER>\\\\)'\",\n        false);\n    tester.checkFails(\n        \"^bit_or()^\",\n        \"Invalid number of arguments to function 'BIT_OR'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^bit_or(1, 2)^\",\n        \"Invalid number of arguments to function 'BIT_OR'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"1\", \"2\", \"2\"};\n    tester.checkAgg(\"bit_or(x)\", values, 3, 0);\n  }\n","date":"2020-04-06 04:57:49","endLine":9112,"groupId":"12905","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBitOrFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testBitOrFunc() {\n    tester.setFor(SqlStdOperatorTable.BIT_OR, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"bit_or(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    tester.checkType(\"bit_or(1)\", \"INTEGER\");\n    tester.checkType(\"bit_or(CAST(2 AS TINYINT))\", \"TINYINT\");\n    tester.checkType(\"bit_or(CAST(2 AS SMALLINT))\", \"SMALLINT\");\n    tester.checkType(\"bit_or(distinct CAST(2 AS BIGINT))\", \"BIGINT\");\n    tester.checkFails(\"^bit_or(1.2)^\",\n        \"Cannot apply 'BIT_OR' to arguments of type 'BIT_OR\\\\(<DECIMAL\\\\(2, 1\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'BIT_OR\\\\(<INTEGER>\\\\)'\",\n        false);\n    tester.checkFails(\n        \"^bit_or()^\",\n        \"Invalid number of arguments to function 'BIT_OR'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^bit_or(1, 2)^\",\n        \"Invalid number of arguments to function 'BIT_OR'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"1\", \"2\", \"2\"};\n    tester.checkAgg(\"bit_or(x)\", values, 3, 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9092,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testBitXorFunc() {\n    tester.setFor(SqlStdOperatorTable.BIT_XOR, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"bit_xor(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    tester.checkType(\"bit_xor(1)\", \"INTEGER\");\n    tester.checkType(\"bit_xor(CAST(2 AS TINYINT))\", \"TINYINT\");\n    tester.checkType(\"bit_xor(CAST(2 AS SMALLINT))\", \"SMALLINT\");\n    tester.checkType(\"bit_xor(distinct CAST(2 AS BIGINT))\", \"BIGINT\");\n    tester.checkFails(\"^bit_xor(1.2)^\",\n        \"Cannot apply 'BIT_XOR' to arguments of type 'BIT_XOR\\\\(<DECIMAL\\\\(2, 1\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'BIT_XOR\\\\(<INTEGER>\\\\)'\",\n        false);\n    tester.checkFails(\n        \"^bit_xor()^\",\n        \"Invalid number of arguments to function 'BIT_XOR'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^bit_xor(1, 2)^\",\n        \"Invalid number of arguments to function 'BIT_XOR'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"1\", \"2\", \"1\"};\n    tester.checkAgg(\"bit_xor(x)\", values, 2, 0);\n  }\n","date":"2020-04-06 04:57:49","endLine":9134,"groupId":"12905","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBitXorFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testBitXorFunc() {\n    tester.setFor(SqlStdOperatorTable.BIT_XOR, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"bit_xor(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    tester.checkType(\"bit_xor(1)\", \"INTEGER\");\n    tester.checkType(\"bit_xor(CAST(2 AS TINYINT))\", \"TINYINT\");\n    tester.checkType(\"bit_xor(CAST(2 AS SMALLINT))\", \"SMALLINT\");\n    tester.checkType(\"bit_xor(distinct CAST(2 AS BIGINT))\", \"BIGINT\");\n    tester.checkFails(\"^bit_xor(1.2)^\",\n        \"Cannot apply 'BIT_XOR' to arguments of type 'BIT_XOR\\\\(<DECIMAL\\\\(2, 1\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'BIT_XOR\\\\(<INTEGER>\\\\)'\",\n        false);\n    tester.checkFails(\n        \"^bit_xor()^\",\n        \"Invalid number of arguments to function 'BIT_XOR'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^bit_xor(1, 2)^\",\n        \"Invalid number of arguments to function 'BIT_XOR'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"1\", \"2\", \"1\"};\n    tester.checkAgg(\"bit_xor(x)\", values, 2, 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9114,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-03-27 16:24:56","codes":[{"authorDate":"2020-03-27 16:24:56","commitOrder":4,"curCode":"  @Test void testBitOrFunc() {\n    tester.setFor(SqlStdOperatorTable.BIT_OR, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"bit_or(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    tester.checkType(\"bit_or(1)\", \"INTEGER\");\n    tester.checkType(\"bit_or(CAST(2 AS TINYINT))\", \"TINYINT\");\n    tester.checkType(\"bit_or(CAST(2 AS SMALLINT))\", \"SMALLINT\");\n    tester.checkType(\"bit_or(distinct CAST(2 AS BIGINT))\", \"BIGINT\");\n    tester.checkType(\"bit_or(CAST(x'02' AS BINARY(1)))\", \"BINARY(1)\");\n    tester.checkFails(\"^bit_or(1.2)^\",\n        \"Cannot apply 'BIT_OR' to arguments of type 'BIT_OR\\\\(<DECIMAL\\\\(2, 1\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'BIT_OR\\\\(<INTEGER>\\\\)'\\n\"\n            + \"'BIT_OR\\\\(<BINARY>\\\\)'\",\n        false);\n    tester.checkFails(\n        \"^bit_or()^\",\n        \"Invalid number of arguments to function 'BIT_OR'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^bit_or(1, 2)^\",\n        \"Invalid number of arguments to function 'BIT_OR'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"1\", \"2\", \"2\"};\n    tester.checkAgg(\"bit_or(x)\", values, 3, 0);\n    final String[] binaryValues = {\n        \"CAST(x'01' AS BINARY)\",\n        \"cast(x'02' as BINARY)\",\n        \"cast(x'02' AS BINARY)\",\n        \"cast(null AS BINARY)\"};\n    tester.checkAgg(\"bit_or(x)\", binaryValues, \"03\", 0);\n    tester.checkAgg(\"bit_or(x)\", new String[]{\"CAST(x'02' AS BINARY)\"}, \"02\", 0);\n  }\n","date":"2020-08-24 02:36:39","endLine":9208,"groupId":"10827","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBitOrFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/3f8342893bb23d977244e8132d0fdef9220fb4.src","preCode":"  @Test void testBitOrFunc() {\n    tester.setFor(SqlStdOperatorTable.BIT_OR, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"bit_or(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    tester.checkType(\"bit_or(1)\", \"INTEGER\");\n    tester.checkType(\"bit_or(CAST(2 AS TINYINT))\", \"TINYINT\");\n    tester.checkType(\"bit_or(CAST(2 AS SMALLINT))\", \"SMALLINT\");\n    tester.checkType(\"bit_or(distinct CAST(2 AS BIGINT))\", \"BIGINT\");\n    tester.checkFails(\"^bit_or(1.2)^\",\n        \"Cannot apply 'BIT_OR' to arguments of type 'BIT_OR\\\\(<DECIMAL\\\\(2, 1\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'BIT_OR\\\\(<INTEGER>\\\\)'\",\n        false);\n    tester.checkFails(\n        \"^bit_or()^\",\n        \"Invalid number of arguments to function 'BIT_OR'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^bit_or(1, 2)^\",\n        \"Invalid number of arguments to function 'BIT_OR'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"1\", \"2\", \"2\"};\n    tester.checkAgg(\"bit_or(x)\", values, 3, 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9179,"status":"M"},{"authorDate":"2020-03-27 16:24:56","commitOrder":4,"curCode":"  @Test void testBitXorFunc() {\n    tester.setFor(SqlStdOperatorTable.BIT_XOR, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"bit_xor(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    tester.checkType(\"bit_xor(1)\", \"INTEGER\");\n    tester.checkType(\"bit_xor(CAST(2 AS TINYINT))\", \"TINYINT\");\n    tester.checkType(\"bit_xor(CAST(2 AS SMALLINT))\", \"SMALLINT\");\n    tester.checkType(\"bit_xor(distinct CAST(2 AS BIGINT))\", \"BIGINT\");\n    tester.checkType(\"bit_xor(CAST(x'02' AS BINARY(1)))\", \"BINARY(1)\");\n    tester.checkFails(\"^bit_xor(1.2)^\",\n        \"Cannot apply 'BIT_XOR' to arguments of type 'BIT_XOR\\\\(<DECIMAL\\\\(2, 1\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'BIT_XOR\\\\(<INTEGER>\\\\)'\\n\"\n            + \"'BIT_XOR\\\\(<BINARY>\\\\)'\",\n        false);\n    tester.checkFails(\n        \"^bit_xor()^\",\n        \"Invalid number of arguments to function 'BIT_XOR'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^bit_xor(1, 2)^\",\n        \"Invalid number of arguments to function 'BIT_XOR'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"1\", \"2\", \"1\"};\n    tester.checkAgg(\"bit_xor(x)\", values, 2, 0);\n    final String[] binaryValues = {\n        \"CAST(x'01' AS BINARY)\",\n        \"cast(x'02' as BINARY)\",\n        \"cast(x'01' AS BINARY)\",\n        \"cast(null AS BINARY)\"};\n    tester.checkAgg(\"bit_xor(x)\", binaryValues, \"02\", 0);\n    tester.checkAgg(\"bit_xor(x)\", new String[]{\"CAST(x'02' AS BINARY)\"}, \"02\", 0);\n    tester.checkAgg(\"bit_xor(distinct(x))\",\n        new String[]{\"CAST(x'02' AS BINARY)\", \"CAST(x'02' AS BINARY)\"}, \"02\", 0);\n  }\n","date":"2020-08-24 02:36:39","endLine":9241,"groupId":"10827","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBitXorFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/3f8342893bb23d977244e8132d0fdef9220fb4.src","preCode":"  @Test void testBitXorFunc() {\n    tester.setFor(SqlStdOperatorTable.BIT_XOR, VM_FENNEL, VM_JAVA);\n    tester.checkFails(\"bit_xor(^*^)\", \"Unknown identifier '\\\\*'\", false);\n    tester.checkType(\"bit_xor(1)\", \"INTEGER\");\n    tester.checkType(\"bit_xor(CAST(2 AS TINYINT))\", \"TINYINT\");\n    tester.checkType(\"bit_xor(CAST(2 AS SMALLINT))\", \"SMALLINT\");\n    tester.checkType(\"bit_xor(distinct CAST(2 AS BIGINT))\", \"BIGINT\");\n    tester.checkFails(\"^bit_xor(1.2)^\",\n        \"Cannot apply 'BIT_XOR' to arguments of type 'BIT_XOR\\\\(<DECIMAL\\\\(2, 1\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'BIT_XOR\\\\(<INTEGER>\\\\)'\",\n        false);\n    tester.checkFails(\n        \"^bit_xor()^\",\n        \"Invalid number of arguments to function 'BIT_XOR'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^bit_xor(1, 2)^\",\n        \"Invalid number of arguments to function 'BIT_XOR'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"1\", \"2\", \"1\"};\n    tester.checkAgg(\"bit_xor(x)\", values, 2, 0);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9210,"status":"M"}],"commitId":"9cf829bc28113ba01f3ee0c826b502143478680e","commitMessage":"@@@[CALCITE-3782] Bitwise functions BIT_AND.  BIT_OR and BIT_XOR support binary and varbinary type (Hailong Wang)\n\nClose #1878\n","date":"2020-08-24 02:36:39","modifiedFileCount":"8","status":"M","submitter":"wangxlong"}]
