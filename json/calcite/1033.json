[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testEmptyEnumerable() {\n    final Enumerable<Object> enumerable = Linq4j.emptyEnumerable();\n    assertThat(enumerable.any(), is(false));\n    assertThat(enumerable.longCount(), equalTo(0L));\n    final Enumerator<Object> enumerator = enumerable.enumerator();\n    assertThat(enumerator.moveNext(), is(false));\n  }\n","date":"2014-11-14 09:39:34","endLine":621,"groupId":"3793","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyEnumerable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/ce9619e1e3572cbab9672c4293786811c1f2fc.src","preCode":"  @Test public void testEmptyEnumerable() {\n    final Enumerable<Object> enumerable = Linq4j.emptyEnumerable();\n    assertThat(enumerable.any(), is(false));\n    assertThat(enumerable.longCount(), equalTo(0L));\n    final Enumerator<Object> enumerator = enumerable.enumerator();\n    assertThat(enumerator.moveNext(), is(false));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":615,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testSingletonEnumerable() {\n    final Enumerable<String> enumerable = Linq4j.singletonEnumerable(\"foo\");\n    assertThat(enumerable.any(), is(true));\n    assertThat(enumerable.longCount(), equalTo(1L));\n    final Enumerator<String> enumerator = enumerable.enumerator();\n    assertThat(enumerator.moveNext(), is(true));\n    assertThat(enumerator.current(), equalTo(\"foo\"));\n    assertThat(enumerator.moveNext(), is(false));\n  }\n","date":"2014-11-14 09:39:34","endLine":631,"groupId":"3793","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingletonEnumerable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/ce9619e1e3572cbab9672c4293786811c1f2fc.src","preCode":"  @Test public void testSingletonEnumerable() {\n    final Enumerable<String> enumerable = Linq4j.singletonEnumerable(\"foo\");\n    assertThat(enumerable.any(), is(true));\n    assertThat(enumerable.longCount(), equalTo(1L));\n    final Enumerator<String> enumerator = enumerable.enumerator();\n    assertThat(enumerator.moveNext(), is(true));\n    assertThat(enumerator.current(), equalTo(\"foo\"));\n    assertThat(enumerator.moveNext(), is(false));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testEmptyEnumerable() {\n    final Enumerable<Object> enumerable = Linq4j.emptyEnumerable();\n    assertThat(enumerable.any(), is(false));\n    assertThat(enumerable.longCount(), equalTo(0L));\n    final Enumerator<Object> enumerator = enumerable.enumerator();\n    assertThat(enumerator.moveNext(), is(false));\n  }\n","date":"2020-04-06 04:57:49","endLine":720,"groupId":"1033","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testEmptyEnumerable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/176b0c20dace781059f888f45af815a228f4c7.src","preCode":"  @Test public void testEmptyEnumerable() {\n    final Enumerable<Object> enumerable = Linq4j.emptyEnumerable();\n    assertThat(enumerable.any(), is(false));\n    assertThat(enumerable.longCount(), equalTo(0L));\n    final Enumerator<Object> enumerator = enumerable.enumerator();\n    assertThat(enumerator.moveNext(), is(false));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":714,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSingletonEnumerable() {\n    final Enumerable<String> enumerable = Linq4j.singletonEnumerable(\"foo\");\n    assertThat(enumerable.any(), is(true));\n    assertThat(enumerable.longCount(), equalTo(1L));\n    final Enumerator<String> enumerator = enumerable.enumerator();\n    assertThat(enumerator.moveNext(), is(true));\n    assertThat(enumerator.current(), equalTo(\"foo\"));\n    assertThat(enumerator.moveNext(), is(false));\n  }\n","date":"2020-04-06 04:57:49","endLine":730,"groupId":"1033","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testSingletonEnumerable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/176b0c20dace781059f888f45af815a228f4c7.src","preCode":"  @Test public void testSingletonEnumerable() {\n    final Enumerable<String> enumerable = Linq4j.singletonEnumerable(\"foo\");\n    assertThat(enumerable.any(), is(true));\n    assertThat(enumerable.longCount(), equalTo(1L));\n    final Enumerator<String> enumerator = enumerable.enumerator();\n    assertThat(enumerator.moveNext(), is(true));\n    assertThat(enumerator.current(), equalTo(\"foo\"));\n    assertThat(enumerator.moveNext(), is(false));\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":722,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
