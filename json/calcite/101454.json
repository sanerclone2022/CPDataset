[{"authorTime":"2020-03-09 23:20:31","codes":[{"authorDate":"2020-03-09 23:20:31","commitOrder":1,"curCode":"  @Test public void testWriteSortExchangeWithHashDistribution() {\n    final RelNode root = createSortPlan(RelDistributions.hash(Lists.newArrayList(0)));\n    final RelJsonWriter writer = new RelJsonWriter();\n    root.explain(writer);\n    final String json = writer.asString();\n    assertThat(json, is(XX3));\n\n    final String s = deserializeAndDumpToTextFormat(getSchema(root), json);\n    final String expected =\n        \"LogicalSortExchange(distribution=[hash[0]], collation=[[0]])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","date":"2020-03-29 04:27:24","endLine":893,"groupId":"2821","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriteSortExchangeWithHashDistribution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/aa/b731a9a07f9ae0df84ec3d3f25b1e56917f6f7.src","preCode":"  @Test public void testWriteSortExchangeWithHashDistribution() {\n    final RelNode root = createSortPlan(RelDistributions.hash(Lists.newArrayList(0)));\n    final RelJsonWriter writer = new RelJsonWriter();\n    root.explain(writer);\n    final String json = writer.asString();\n    assertThat(json, is(XX3));\n\n    final String s = deserializeAndDumpToTextFormat(getSchema(root), json);\n    final String expected =\n        \"LogicalSortExchange(distribution=[hash[0]], collation=[[0]])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":881,"status":"B"},{"authorDate":"2020-03-09 23:20:31","commitOrder":1,"curCode":"  @Test public void testWriteSortExchangeWithRandomDistribution() {\n    final RelNode root = createSortPlan(RelDistributions.RANDOM_DISTRIBUTED);\n    final RelJsonWriter writer = new RelJsonWriter();\n    root.explain(writer);\n    final String json = writer.asString();\n    final String s = deserializeAndDumpToTextFormat(getSchema(root), json);\n    final String expected =\n        \"LogicalSortExchange(distribution=[random], collation=[[0]])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","date":"2020-03-29 04:27:24","endLine":905,"groupId":"7048","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteSortExchangeWithRandomDistribution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/aa/b731a9a07f9ae0df84ec3d3f25b1e56917f6f7.src","preCode":"  @Test public void testWriteSortExchangeWithRandomDistribution() {\n    final RelNode root = createSortPlan(RelDistributions.RANDOM_DISTRIBUTED);\n    final RelJsonWriter writer = new RelJsonWriter();\n    root.explain(writer);\n    final String json = writer.asString();\n    final String s = deserializeAndDumpToTextFormat(getSchema(root), json);\n    final String expected =\n        \"LogicalSortExchange(distribution=[random], collation=[[0]])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":895,"status":"B"}],"commitId":"62186610f430996b28295d930a4ac505eed17b81","commitMessage":"@@@[CALCITE-3867] Support RelDistribution json serialization (Krisztian Kasa)\n\nClose #1868\n","date":"2020-03-29 04:27:24","modifiedFileCount":"5","status":"B","submitter":"kkasa"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testWriteSortExchangeWithHashDistribution() {\n    final RelNode root = createSortPlan(RelDistributions.hash(Lists.newArrayList(0)));\n    final RelJsonWriter writer = new RelJsonWriter();\n    root.explain(writer);\n    final String json = writer.asString();\n    assertThat(json, is(XX3));\n\n    final String s = deserializeAndDumpToTextFormat(getSchema(root), json);\n    final String expected =\n        \"LogicalSortExchange(distribution=[hash[0]], collation=[[0]])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":884,"groupId":"101454","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriteSortExchangeWithHashDistribution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/9753fd8857c7f47fc20212946c9a27afb27294.src","preCode":"  @Test public void testWriteSortExchangeWithHashDistribution() {\n    final RelNode root = createSortPlan(RelDistributions.hash(Lists.newArrayList(0)));\n    final RelJsonWriter writer = new RelJsonWriter();\n    root.explain(writer);\n    final String json = writer.asString();\n    assertThat(json, is(XX3));\n\n    final String s = deserializeAndDumpToTextFormat(getSchema(root), json);\n    final String expected =\n        \"LogicalSortExchange(distribution=[hash[0]], collation=[[0]])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":872,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testWriteSortExchangeWithRandomDistribution() {\n    final RelNode root = createSortPlan(RelDistributions.RANDOM_DISTRIBUTED);\n    final RelJsonWriter writer = new RelJsonWriter();\n    root.explain(writer);\n    final String json = writer.asString();\n    final String s = deserializeAndDumpToTextFormat(getSchema(root), json);\n    final String expected =\n        \"LogicalSortExchange(distribution=[random], collation=[[0]])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":896,"groupId":"101454","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteSortExchangeWithRandomDistribution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/9753fd8857c7f47fc20212946c9a27afb27294.src","preCode":"  @Test public void testWriteSortExchangeWithRandomDistribution() {\n    final RelNode root = createSortPlan(RelDistributions.RANDOM_DISTRIBUTED);\n    final RelJsonWriter writer = new RelJsonWriter();\n    root.explain(writer);\n    final String json = writer.asString();\n    final String s = deserializeAndDumpToTextFormat(getSchema(root), json);\n    final String expected =\n        \"LogicalSortExchange(distribution=[random], collation=[[0]])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":886,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
