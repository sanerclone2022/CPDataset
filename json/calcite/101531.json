[{"authorTime":"2018-10-17 09:47:44","codes":[{"authorDate":"2018-10-17 09:47:44","commitOrder":1,"curCode":"  @Test public void testNestedAggregatesMySqlTable() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.count(false, \"c\", builder.field(3)))\n        .build();\n    final SqlDialect dialect = SqlDialect.DatabaseProduct.MYSQL.getDialect();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, dialect), isLinux(expectedSql));\n  }\n","date":"2018-10-25 14:04:46","endLine":299,"groupId":"9133","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNestedAggregatesMySqlTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7e/5115842871c6c3b4273e514149109fdf78a071.src","preCode":"  @Test public void testNestedAggregatesMySqlTable() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.count(false, \"c\", builder.field(3)))\n        .build();\n    final SqlDialect dialect = SqlDialect.DatabaseProduct.MYSQL.getDialect();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, dialect), isLinux(expectedSql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"B"},{"authorDate":"2018-10-17 09:47:44","commitOrder":1,"curCode":"  @Test public void testNestedAggregatesMySqlStar() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .filter(builder.equals(builder.field(\"DEPTNO\"), builder.literal(10)))\n        .aggregate(builder.groupKey(),\n            builder.count(false, \"c\", builder.field(3)))\n        .build();\n    final SqlDialect dialect = SqlDialect.DatabaseProduct.MYSQL.getDialect();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\\n\"\n        + \"WHERE `DEPTNO` = 10\";\n    assertThat(toSql(root, dialect), isLinux(expectedSql));\n  }\n","date":"2018-10-25 14:04:46","endLine":316,"groupId":"9133","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedAggregatesMySqlStar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7e/5115842871c6c3b4273e514149109fdf78a071.src","preCode":"  @Test public void testNestedAggregatesMySqlStar() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .filter(builder.equals(builder.field(\"DEPTNO\"), builder.literal(10)))\n        .aggregate(builder.groupKey(),\n            builder.count(false, \"c\", builder.field(3)))\n        .build();\n    final SqlDialect dialect = SqlDialect.DatabaseProduct.MYSQL.getDialect();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\\n\"\n        + \"WHERE `DEPTNO` = 10\";\n    assertThat(toSql(root, dialect), isLinux(expectedSql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"B"}],"commitId":"784372debb2b51c3041c0d5b420a6f93a2457a16","commitMessage":"@@@[CALCITE-2628] JDBC adapter throws NullPointerException while generating GROUP BY query for MySQL\n\nAlso.  refactor RelToSqlConverterTest a little.\n","date":"2018-10-25 14:04:46","modifiedFileCount":"2","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-02-21 10:29:14","codes":[{"authorDate":"2020-02-21 10:29:14","commitOrder":2,"curCode":"  @Test public void testNestedAggregatesMySqlTable() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .aggregate(b.groupKey(),\n            b.count(false, \"c\", b.field(3)))\n        .build();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    relFn(relFn).withMysql().ok(expectedSql);\n  }\n","date":"2020-02-22 01:55:43","endLine":745,"groupId":"6148","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNestedAggregatesMySqlTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/8abea1fd2182ece1feb8d73e94b8b494b4d043.src","preCode":"  @Test public void testNestedAggregatesMySqlTable() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .aggregate(builder.groupKey(),\n            builder.count(false, \"c\", builder.field(3)))\n        .build();\n    final SqlDialect dialect = SqlDialect.DatabaseProduct.MYSQL.getDialect();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    assertThat(toSql(root, dialect), isLinux(expectedSql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":736,"status":"M"},{"authorDate":"2020-02-21 10:29:14","commitOrder":2,"curCode":"  @Test public void testNestedAggregatesMySqlStar() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .filter(b.equals(b.field(\"DEPTNO\"), b.literal(10)))\n        .aggregate(b.groupKey(),\n            b.count(false, \"c\", b.field(3)))\n        .build();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\\n\"\n        + \"WHERE `DEPTNO` = 10\";\n    relFn(relFn).withMysql().ok(expectedSql);\n  }\n","date":"2020-02-22 01:55:43","endLine":760,"groupId":"6148","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedAggregatesMySqlStar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/8abea1fd2182ece1feb8d73e94b8b494b4d043.src","preCode":"  @Test public void testNestedAggregatesMySqlStar() {\n    final RelBuilder builder = relBuilder();\n    final RelNode root = builder\n        .scan(\"EMP\")\n        .filter(builder.equals(builder.field(\"DEPTNO\"), builder.literal(10)))\n        .aggregate(builder.groupKey(),\n            builder.count(false, \"c\", builder.field(3)))\n        .build();\n    final SqlDialect dialect = SqlDialect.DatabaseProduct.MYSQL.getDialect();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\\n\"\n        + \"WHERE `DEPTNO` = 10\";\n    assertThat(toSql(root, dialect), isLinux(expectedSql));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":749,"status":"M"}],"commitId":"6d974f1b23bdca566d01cb7cbb1ec46d7ef5e84c","commitMessage":"@@@Refactor RelToSqlConverterTest\n\nMake test cases that use RelBuilder fluent.  like test cases that use SQL.\n","date":"2020-02-22 01:55:43","modifiedFileCount":"2","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testNestedAggregatesMySqlTable() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .aggregate(b.groupKey(),\n            b.count(false, \"c\", b.field(3)))\n        .build();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    relFn(relFn).withMysql().ok(expectedSql);\n  }\n","date":"2020-04-06 04:57:49","endLine":861,"groupId":"101531","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNestedAggregatesMySqlTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testNestedAggregatesMySqlTable() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .aggregate(b.groupKey(),\n            b.count(false, \"c\", b.field(3)))\n        .build();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\";\n    relFn(relFn).withMysql().ok(expectedSql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":852,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testNestedAggregatesMySqlStar() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .filter(b.equals(b.field(\"DEPTNO\"), b.literal(10)))\n        .aggregate(b.groupKey(),\n            b.count(false, \"c\", b.field(3)))\n        .build();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\\n\"\n        + \"WHERE `DEPTNO` = 10\";\n    relFn(relFn).withMysql().ok(expectedSql);\n  }\n","date":"2020-04-06 04:57:49","endLine":876,"groupId":"101531","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedAggregatesMySqlStar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testNestedAggregatesMySqlStar() {\n    final Function<RelBuilder, RelNode> relFn = b -> b\n        .scan(\"EMP\")\n        .filter(b.equals(b.field(\"DEPTNO\"), b.literal(10)))\n        .aggregate(b.groupKey(),\n            b.count(false, \"c\", b.field(3)))\n        .build();\n    final String expectedSql = \"SELECT COUNT(`MGR`) AS `c`\\n\"\n        + \"FROM `scott`.`EMP`\\n\"\n        + \"WHERE `DEPTNO` = 10\";\n    relFn(relFn).withMysql().ok(expectedSql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":865,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
