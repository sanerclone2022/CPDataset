[{"authorTime":"2019-03-10 00:56:15","codes":[{"authorDate":"2017-03-09 09:14:43","commitOrder":4,"curCode":"  @Test public void testPositionFunc() {\n    tester.setFor(SqlStdOperatorTable.POSITION);\n    tester.checkScalarExact(\"position('b' in 'abc')\", \"2\");\n    tester.checkScalarExact(\"position('' in 'abc')\", \"1\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 3)\", \"5\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 5)\", \"5\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 6)\", \"0\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM -5)\", \"0\");\n    tester.checkScalarExact(\"position('' in 'abc' FROM 3)\", \"3\");\n    tester.checkScalarExact(\"position('' in 'abc' FROM 10)\", \"0\");\n\n    tester.checkScalarExact(\"position(x'bb' in x'aabbcc')\", \"2\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc')\", \"1\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 3)\", \"5\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 5)\", \"5\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 6)\", \"0\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM -5)\", \"0\");\n    tester.checkScalarExact(\"position(x'cc' in x'aabbccdd' FROM 2)\", \"3\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc' FROM 3)\", \"3\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc' FROM 10)\", \"0\");\n\n    \r\n    tester.checkScalarExact(\"position('tra' in 'fdgjklewrtra')\", \"10\");\n\n    tester.checkNull(\"position(cast(null as varchar(1)) in '0010')\");\n    tester.checkNull(\"position('a' in cast(null as varchar(1)))\");\n\n    tester.checkScalar(\n        \"position(cast('a' as char) in cast('bca' as varchar))\",\n        3,\n        \"INTEGER NOT NULL\");\n  }\n","date":"2017-03-14 06:27:13","endLine":3673,"groupId":"4853","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPositionFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3e/8cbd26c459b4a99190f4fa1c249f2365baaf47.src","preCode":"  @Test public void testPositionFunc() {\n    tester.setFor(SqlStdOperatorTable.POSITION);\n    tester.checkScalarExact(\"position('b' in 'abc')\", \"2\");\n    tester.checkScalarExact(\"position('' in 'abc')\", \"1\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 3)\", \"5\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 5)\", \"5\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 6)\", \"0\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM -5)\", \"0\");\n    tester.checkScalarExact(\"position('' in 'abc' FROM 3)\", \"3\");\n    tester.checkScalarExact(\"position('' in 'abc' FROM 10)\", \"0\");\n\n    tester.checkScalarExact(\"position(x'bb' in x'aabbcc')\", \"2\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc')\", \"1\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 3)\", \"5\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 5)\", \"5\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 6)\", \"0\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM -5)\", \"0\");\n    tester.checkScalarExact(\"position(x'cc' in x'aabbccdd' FROM 2)\", \"3\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc' FROM 3)\", \"3\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc' FROM 10)\", \"0\");\n\n    \r\n    tester.checkScalarExact(\"position('tra' in 'fdgjklewrtra')\", \"10\");\n\n    tester.checkNull(\"position(cast(null as varchar(1)) in '0010')\");\n    tester.checkNull(\"position('a' in cast(null as varchar(1)))\");\n\n    tester.checkScalar(\n        \"position(cast('a' as char) in cast('bca' as varchar))\",\n        3,\n        \"INTEGER NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3642,"status":"NB"},{"authorDate":"2019-03-10 00:56:15","commitOrder":4,"curCode":"  @Test public void testAsciiFunc() {\n    tester.setFor(SqlStdOperatorTable.ASCII);\n    tester.checkScalarExact(\"ASCII('')\", \"0\");\n    tester.checkScalarExact(\"ASCII('a')\", \"97\");\n    tester.checkScalarExact(\"ASCII('1')\", \"49\");\n    tester.checkScalarExact(\"ASCII('abc')\", \"97\");\n    tester.checkScalarExact(\"ASCII('ABC')\", \"65\");\n    tester.checkScalarExact(\"ASCII(_UTF8'\\u0082')\", \"130\");\n    tester.checkScalarExact(\"ASCII(_UTF8'\\u5B57')\", \"23383\");\n    tester.checkScalarExact(\"ASCII(_UTF8'������')\", \"937\");\n    tester.checkNull(\"ASCII(cast(null as varchar(1)))\");\n  }\n","date":"2019-03-11 10:48:34","endLine":4261,"groupId":"11454","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsciiFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fc/f7fe9b20bf52b15d402fd5cc3f202e046d19be.src","preCode":"  @Test public void testAsciiFunc() {\n    tester.setFor(SqlStdOperatorTable.ASCII);\n    tester.checkScalarExact(\"ASCII('')\", \"0\");\n    tester.checkScalarExact(\"ASCII('a')\", \"97\");\n    tester.checkScalarExact(\"ASCII('1')\", \"49\");\n    tester.checkScalarExact(\"ASCII('abc')\", \"97\");\n    tester.checkScalarExact(\"ASCII('ABC')\", \"65\");\n    tester.checkScalarExact(\"ASCII(_UTF8'\\u0082')\", \"130\");\n    tester.checkScalarExact(\"ASCII(_UTF8'\\u5B57')\", \"23383\");\n    tester.checkScalarExact(\"ASCII(_UTF8'������')\", \"937\");\n    tester.checkNull(\"ASCII(cast(null as varchar(1)))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4250,"status":"B"}],"commitId":"a4813575ea8bfdb7dd65ddbf37d150835dad1d5d","commitMessage":"@@@[CALCITE-2599] Implement SQL ASCII function (Chunwei Lei)\n\nIt follows PostgreSQL standard which returns unicode code point for non-ASCII chars\n","date":"2019-03-11 10:48:34","modifiedFileCount":"5","status":"M","submitter":"Chunwei Lei"},{"authorTime":"2019-03-11 11:57:27","codes":[{"authorDate":"2017-03-09 09:14:43","commitOrder":5,"curCode":"  @Test public void testPositionFunc() {\n    tester.setFor(SqlStdOperatorTable.POSITION);\n    tester.checkScalarExact(\"position('b' in 'abc')\", \"2\");\n    tester.checkScalarExact(\"position('' in 'abc')\", \"1\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 3)\", \"5\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 5)\", \"5\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 6)\", \"0\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM -5)\", \"0\");\n    tester.checkScalarExact(\"position('' in 'abc' FROM 3)\", \"3\");\n    tester.checkScalarExact(\"position('' in 'abc' FROM 10)\", \"0\");\n\n    tester.checkScalarExact(\"position(x'bb' in x'aabbcc')\", \"2\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc')\", \"1\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 3)\", \"5\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 5)\", \"5\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 6)\", \"0\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM -5)\", \"0\");\n    tester.checkScalarExact(\"position(x'cc' in x'aabbccdd' FROM 2)\", \"3\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc' FROM 3)\", \"3\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc' FROM 10)\", \"0\");\n\n    \r\n    tester.checkScalarExact(\"position('tra' in 'fdgjklewrtra')\", \"10\");\n\n    tester.checkNull(\"position(cast(null as varchar(1)) in '0010')\");\n    tester.checkNull(\"position('a' in cast(null as varchar(1)))\");\n\n    tester.checkScalar(\n        \"position(cast('a' as char) in cast('bca' as varchar))\",\n        3,\n        \"INTEGER NOT NULL\");\n  }\n","date":"2017-03-14 06:27:13","endLine":3673,"groupId":"4853","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPositionFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3e/8cbd26c459b4a99190f4fa1c249f2365baaf47.src","preCode":"  @Test public void testPositionFunc() {\n    tester.setFor(SqlStdOperatorTable.POSITION);\n    tester.checkScalarExact(\"position('b' in 'abc')\", \"2\");\n    tester.checkScalarExact(\"position('' in 'abc')\", \"1\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 3)\", \"5\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 5)\", \"5\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 6)\", \"0\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM -5)\", \"0\");\n    tester.checkScalarExact(\"position('' in 'abc' FROM 3)\", \"3\");\n    tester.checkScalarExact(\"position('' in 'abc' FROM 10)\", \"0\");\n\n    tester.checkScalarExact(\"position(x'bb' in x'aabbcc')\", \"2\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc')\", \"1\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 3)\", \"5\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 5)\", \"5\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 6)\", \"0\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM -5)\", \"0\");\n    tester.checkScalarExact(\"position(x'cc' in x'aabbccdd' FROM 2)\", \"3\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc' FROM 3)\", \"3\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc' FROM 10)\", \"0\");\n\n    \r\n    tester.checkScalarExact(\"position('tra' in 'fdgjklewrtra')\", \"10\");\n\n    tester.checkNull(\"position(cast(null as varchar(1)) in '0010')\");\n    tester.checkNull(\"position('a' in cast(null as varchar(1)))\");\n\n    tester.checkScalar(\n        \"position(cast('a' as char) in cast('bca' as varchar))\",\n        3,\n        \"INTEGER NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3642,"status":"N"},{"authorDate":"2019-03-11 11:57:27","commitOrder":5,"curCode":"  @Test public void testAsciiFunc() {\n    tester.setFor(SqlStdOperatorTable.ASCII);\n    tester.checkScalarExact(\"ASCII('')\", \"0\");\n    tester.checkScalarExact(\"ASCII('a')\", \"97\");\n    tester.checkScalarExact(\"ASCII('1')\", \"49\");\n    tester.checkScalarExact(\"ASCII('abc')\", \"97\");\n    tester.checkScalarExact(\"ASCII('ABC')\", \"65\");\n    tester.checkScalarExact(\"ASCII(_UTF8'\\u0082')\", \"130\");\n    tester.checkScalarExact(\"ASCII(_UTF8'\\u5B57')\", \"23383\");\n    tester.checkScalarExact(\"ASCII(_UTF8'\\u03a9')\", \"937\"); \r\n    tester.checkNull(\"ASCII(cast(null as varchar(1)))\");\n  }\n","date":"2019-03-28 02:41:25","endLine":4261,"groupId":"11454","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsciiFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d4/2ab3ca76ffbb56ebd733ee8d6292b17242d0c1.src","preCode":"  @Test public void testAsciiFunc() {\n    tester.setFor(SqlStdOperatorTable.ASCII);\n    tester.checkScalarExact(\"ASCII('')\", \"0\");\n    tester.checkScalarExact(\"ASCII('a')\", \"97\");\n    tester.checkScalarExact(\"ASCII('1')\", \"49\");\n    tester.checkScalarExact(\"ASCII('abc')\", \"97\");\n    tester.checkScalarExact(\"ASCII('ABC')\", \"65\");\n    tester.checkScalarExact(\"ASCII(_UTF8'\\u0082')\", \"130\");\n    tester.checkScalarExact(\"ASCII(_UTF8'\\u5B57')\", \"23383\");\n    tester.checkScalarExact(\"ASCII(_UTF8'������')\", \"937\");\n    tester.checkNull(\"ASCII(cast(null as varchar(1)))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4250,"status":"M"}],"commitId":"ddbcd3955245787fc770d0cee589660a9abd81ad","commitMessage":"@@@Suppress deprecation warning.  and remove unicode character from Java source file\n\nRe-format and re-order change log in 1.19 release notes.  and fix release date.\n","date":"2019-03-28 02:41:25","modifiedFileCount":"4","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testPositionFunc() {\n    tester.setFor(SqlStdOperatorTable.POSITION);\n    tester.checkScalarExact(\"position('b' in 'abc')\", \"2\");\n    tester.checkScalarExact(\"position('' in 'abc')\", \"1\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 3)\", \"5\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 5)\", \"5\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 6)\", \"0\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM -5)\", \"0\");\n    tester.checkScalarExact(\"position('' in 'abc' FROM 3)\", \"3\");\n    tester.checkScalarExact(\"position('' in 'abc' FROM 10)\", \"0\");\n\n    tester.checkScalarExact(\"position(x'bb' in x'aabbcc')\", \"2\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc')\", \"1\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 3)\", \"5\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 5)\", \"5\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 6)\", \"0\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM -5)\", \"0\");\n    tester.checkScalarExact(\"position(x'cc' in x'aabbccdd' FROM 2)\", \"3\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc' FROM 3)\", \"3\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc' FROM 10)\", \"0\");\n\n    \r\n    tester.checkScalarExact(\"position('tra' in 'fdgjklewrtra')\", \"10\");\n\n    tester.checkNull(\"position(cast(null as varchar(1)) in '0010')\");\n    tester.checkNull(\"position('a' in cast(null as varchar(1)))\");\n\n    tester.checkScalar(\n        \"position(cast('a' as char) in cast('bca' as varchar))\",\n        3,\n        \"INTEGER NOT NULL\");\n  }\n","date":"2020-04-06 04:57:49","endLine":4327,"groupId":"10776","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPositionFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testPositionFunc() {\n    tester.setFor(SqlStdOperatorTable.POSITION);\n    tester.checkScalarExact(\"position('b' in 'abc')\", \"2\");\n    tester.checkScalarExact(\"position('' in 'abc')\", \"1\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 3)\", \"5\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 5)\", \"5\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM 6)\", \"0\");\n    tester.checkScalarExact(\"position('b' in 'abcabc' FROM -5)\", \"0\");\n    tester.checkScalarExact(\"position('' in 'abc' FROM 3)\", \"3\");\n    tester.checkScalarExact(\"position('' in 'abc' FROM 10)\", \"0\");\n\n    tester.checkScalarExact(\"position(x'bb' in x'aabbcc')\", \"2\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc')\", \"1\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 3)\", \"5\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 5)\", \"5\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM 6)\", \"0\");\n    tester.checkScalarExact(\"position(x'bb' in x'aabbccaabbcc' FROM -5)\", \"0\");\n    tester.checkScalarExact(\"position(x'cc' in x'aabbccdd' FROM 2)\", \"3\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc' FROM 3)\", \"3\");\n    tester.checkScalarExact(\"position(x'' in x'aabbcc' FROM 10)\", \"0\");\n\n    \r\n    tester.checkScalarExact(\"position('tra' in 'fdgjklewrtra')\", \"10\");\n\n    tester.checkNull(\"position(cast(null as varchar(1)) in '0010')\");\n    tester.checkNull(\"position('a' in cast(null as varchar(1)))\");\n\n    tester.checkScalar(\n        \"position(cast('a' as char) in cast('bca' as varchar))\",\n        3,\n        \"INTEGER NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4296,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testAsciiFunc() {\n    tester.setFor(SqlStdOperatorTable.ASCII);\n    tester.checkScalarExact(\"ASCII('')\", \"0\");\n    tester.checkScalarExact(\"ASCII('a')\", \"97\");\n    tester.checkScalarExact(\"ASCII('1')\", \"49\");\n    tester.checkScalarExact(\"ASCII('abc')\", \"97\");\n    tester.checkScalarExact(\"ASCII('ABC')\", \"65\");\n    tester.checkScalarExact(\"ASCII(_UTF8'\\u0082')\", \"130\");\n    tester.checkScalarExact(\"ASCII(_UTF8'\\u5B57')\", \"23383\");\n    tester.checkScalarExact(\"ASCII(_UTF8'\\u03a9')\", \"937\"); \r\n    tester.checkNull(\"ASCII(cast(null as varchar(1)))\");\n  }\n","date":"2020-04-06 04:57:49","endLine":4363,"groupId":"10776","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsciiFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testAsciiFunc() {\n    tester.setFor(SqlStdOperatorTable.ASCII);\n    tester.checkScalarExact(\"ASCII('')\", \"0\");\n    tester.checkScalarExact(\"ASCII('a')\", \"97\");\n    tester.checkScalarExact(\"ASCII('1')\", \"49\");\n    tester.checkScalarExact(\"ASCII('abc')\", \"97\");\n    tester.checkScalarExact(\"ASCII('ABC')\", \"65\");\n    tester.checkScalarExact(\"ASCII(_UTF8'\\u0082')\", \"130\");\n    tester.checkScalarExact(\"ASCII(_UTF8'\\u5B57')\", \"23383\");\n    tester.checkScalarExact(\"ASCII(_UTF8'\\u03a9')\", \"937\"); \r\n    tester.checkNull(\"ASCII(cast(null as varchar(1)))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4352,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
