[{"authorTime":"2016-12-22 09:49:23","codes":[{"authorDate":"2016-12-22 09:49:23","commitOrder":1,"curCode":"  @Test public void testAliasSort() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .sort(0)\n            .project(builder.field(\"e\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSort(sort0=[$0], dir0=[ASC])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(str(root), is(expected));\n  }\n","date":"2016-12-30 06:33:33","endLine":1078,"groupId":"6307","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAliasSort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/3dad43c02787c3019dafd2ab6d1a5b5db8d7b6.src","preCode":"  @Test public void testAliasSort() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .sort(0)\n            .project(builder.field(\"e\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSort(sort0=[$0], dir0=[ASC])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(str(root), is(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1065,"status":"B"},{"authorDate":"2016-12-22 09:49:23","commitOrder":1,"curCode":"  @Test public void testAliasLimit() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .sort(1)\n            .sortLimit(10, 20) \r\n            .project(builder.field(\"e\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSort(sort0=[$1], dir0=[ASC], offset=[10], fetch=[20])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(str(root), is(expected));\n  }\n","date":"2016-12-30 06:33:33","endLine":1094,"groupId":"6309","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAliasLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/3dad43c02787c3019dafd2ab6d1a5b5db8d7b6.src","preCode":"  @Test public void testAliasLimit() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .sort(1)\n            .sortLimit(10, 20) \r\n            .project(builder.field(\"e\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSort(sort0=[$1], dir0=[ASC], offset=[10], fetch=[20])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(str(root), is(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1080,"status":"B"}],"commitId":"31d68f71b01f016625a1def800c283820c600840","commitMessage":"@@@[CALCITE-1551] Preserve alias in RelBuilder.project (Jess Balint)\n\nThis is accomplished by changing the structure of the Frame in\nRelBuilder to include alias and field information for all fields in the\nRelNode irrespective of their origin. Rel aliases also preserved on\ngroup keys through aggregate operations.\n\nIn PigRelBuilder.  we retain aggregate aliases.  because Pig Latin\nrelies upon them.\n\nClose apache/calcite#340\n","date":"2016-12-30 06:33:33","modifiedFileCount":"5","status":"B","submitter":"Jess Balint"},{"authorTime":"2018-03-01 10:10:35","codes":[{"authorDate":"2018-03-01 10:10:35","commitOrder":2,"curCode":"  @Test public void testAliasSort() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .sort(0)\n            .project(builder.field(\"e\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSort(sort0=[$0], dir0=[ASC])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2018-03-12 15:16:13","endLine":1357,"groupId":"6307","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAliasSort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/9019101c478fdb0d8c9c1f7978cbf45c487a35.src","preCode":"  @Test public void testAliasSort() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .sort(0)\n            .project(builder.field(\"e\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSort(sort0=[$0], dir0=[ASC])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(str(root), is(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1344,"status":"M"},{"authorDate":"2018-03-01 10:10:35","commitOrder":2,"curCode":"  @Test public void testAliasLimit() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .sort(1)\n            .sortLimit(10, 20) \r\n            .project(builder.field(\"e\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSort(sort0=[$1], dir0=[ASC], offset=[10], fetch=[20])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2018-03-12 15:16:13","endLine":1373,"groupId":"6309","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAliasLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/9019101c478fdb0d8c9c1f7978cbf45c487a35.src","preCode":"  @Test public void testAliasLimit() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .sort(1)\n            .sortLimit(10, 20) \r\n            .project(builder.field(\"e\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSort(sort0=[$1], dir0=[ASC], offset=[10], fetch=[20])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(str(root), is(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1359,"status":"M"}],"commitId":"fb8ebd31526cd2e203fa3526ca8de7a22ee0d139","commitMessage":"@@@[CALCITE-2197] Fix test failures on Windows due to line endings\n\nAdd several new matchers in Matchers: isLinux.  containsStringLinux. \nhasTree.  compose. Change tests that generate platform-specific strings\nto use them.\n","date":"2018-03-12 15:16:13","modifiedFileCount":"13","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testAliasSort() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .sort(0)\n            .project(builder.field(\"e\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSort(sort0=[$0], dir0=[ASC])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":2109,"groupId":"101268","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAliasSort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testAliasSort() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .sort(0)\n            .project(builder.field(\"e\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSort(sort0=[$0], dir0=[ASC])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2096,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testAliasLimit() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .sort(1)\n            .sortLimit(10, 20) \r\n            .project(builder.field(\"e\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSort(sort0=[$1], dir0=[ASC], offset=[10], fetch=[20])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":2125,"groupId":"101268","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAliasLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testAliasLimit() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .as(\"e\")\n            .sort(1)\n            .sortLimit(10, 20) \r\n            .project(builder.field(\"e\", \"EMPNO\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSort(sort0=[$1], dir0=[ASC], offset=[10], fetch=[20])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2111,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
