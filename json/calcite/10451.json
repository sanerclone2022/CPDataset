[{"authorTime":"2018-01-11 02:10:44","codes":[{"authorDate":"2018-01-11 02:10:44","commitOrder":1,"curCode":"  protected static String extractColumnName(RexNode rexNode, RelDataType rowType,\n      DruidQuery query) {\n    if (rexNode.getKind() == SqlKind.INPUT_REF) {\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = rowType.getFieldNames().get(ref.getIndex());\n      if (columnName == null) {\n        return null;\n      }\n      \r\n      if (query.getDruidTable().timestampFieldName.equals(columnName)) {\n        return DruidTable.DEFAULT_TIMESTAMP_COLUMN;\n      }\n      return columnName;\n    }\n    return null;\n  }\n","date":"2018-02-17 11:35:34","endLine":394,"groupId":"14526","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"extractColumnName","params":"(RexNoderexNode@RelDataTyperowType@DruidQueryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/aa/9a02a2b233e12a2c1a4cbf745c003bab9eabd0.src","preCode":"  protected static String extractColumnName(RexNode rexNode, RelDataType rowType,\n      DruidQuery query) {\n    if (rexNode.getKind() == SqlKind.INPUT_REF) {\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = rowType.getFieldNames().get(ref.getIndex());\n      if (columnName == null) {\n        return null;\n      }\n      \r\n      if (query.getDruidTable().timestampFieldName.equals(columnName)) {\n        return DruidTable.DEFAULT_TIMESTAMP_COLUMN;\n      }\n      return columnName;\n    }\n    return null;\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":379,"status":"B"},{"authorDate":"2018-01-11 02:10:44","commitOrder":1,"curCode":"  public static String toDruidExpression(\n      final RexNode rexNode,\n      final RelDataType inputRowType,\n      final DruidQuery druidRel) {\n    SqlKind kind = rexNode.getKind();\n    SqlTypeName sqlTypeName = rexNode.getType().getSqlTypeName();\n\n    if (kind == SqlKind.INPUT_REF) {\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = inputRowType.getFieldNames().get(ref.getIndex());\n      if (columnName == null) {\n        return null;\n      }\n      if (druidRel.getDruidTable().timestampFieldName.equals(columnName)) {\n        return DruidExpressions.fromColumn(DruidTable.DEFAULT_TIMESTAMP_COLUMN);\n      }\n      return DruidExpressions.fromColumn(columnName);\n    }\n\n    if (rexNode instanceof RexCall) {\n      final SqlOperator operator = ((RexCall) rexNode).getOperator();\n      final DruidSqlOperatorConverter conversion = druidRel.getOperatorConversionMap()\n          .get(operator);\n      if (conversion == null) {\n        \r\n        return null;\n      } else {\n        return conversion.toDruidExpression(rexNode, inputRowType, druidRel);\n      }\n    }\n    if (kind == SqlKind.LITERAL) {\n      \r\n      if (RexLiteral.isNullLiteral(rexNode)) {\n        \r\n        return null;\n      } else if (SqlTypeName.NUMERIC_TYPES.contains(sqlTypeName)) {\n        return DruidExpressions.numberLiteral((Number) RexLiteral\n            .value(rexNode));\n      } else if (SqlTypeFamily.INTERVAL_DAY_TIME == sqlTypeName.getFamily()) {\n        \r\n        final long milliseconds = ((Number) RexLiteral.value(rexNode)).longValue();\n        return DruidExpressions.numberLiteral(milliseconds);\n      } else if (SqlTypeFamily.INTERVAL_YEAR_MONTH == sqlTypeName.getFamily()) {\n        \r\n        final long months = ((Number) RexLiteral.value(rexNode)).longValue();\n        return DruidExpressions.numberLiteral(months);\n      } else if (SqlTypeName.STRING_TYPES.contains(sqlTypeName)) {\n        return\n            DruidExpressions.stringLiteral(RexLiteral.stringValue(rexNode));\n      } else if (SqlTypeName.TIMESTAMP == sqlTypeName || SqlTypeName.DATE == sqlTypeName\n          || SqlTypeName.TIME_WITH_LOCAL_TIME_ZONE == sqlTypeName) {\n        return DruidExpressions.numberLiteral(DruidDateTimeUtils\n            .literalValue(rexNode, TimeZone.getTimeZone(druidRel.getConnectionConfig().timeZone()))\n            .getMillisSinceEpoch());\n      } else if (SqlTypeName.BOOLEAN == sqlTypeName) {\n        return DruidExpressions.numberLiteral(RexLiteral.booleanValue(rexNode) ? 1 : 0);\n      }\n    }\n    \r\n    return null;\n  }\n","date":"2018-02-17 11:35:34","endLine":153,"groupId":"16360","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toDruidExpression","params":"(finalRexNoderexNode@finalRelDataTypeinputRowType@finalDruidQuerydruidRel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/78/cfb0c5ee485f6b28e9beb9d3dc47ac433f08d9.src","preCode":"  public static String toDruidExpression(\n      final RexNode rexNode,\n      final RelDataType inputRowType,\n      final DruidQuery druidRel) {\n    SqlKind kind = rexNode.getKind();\n    SqlTypeName sqlTypeName = rexNode.getType().getSqlTypeName();\n\n    if (kind == SqlKind.INPUT_REF) {\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = inputRowType.getFieldNames().get(ref.getIndex());\n      if (columnName == null) {\n        return null;\n      }\n      if (druidRel.getDruidTable().timestampFieldName.equals(columnName)) {\n        return DruidExpressions.fromColumn(DruidTable.DEFAULT_TIMESTAMP_COLUMN);\n      }\n      return DruidExpressions.fromColumn(columnName);\n    }\n\n    if (rexNode instanceof RexCall) {\n      final SqlOperator operator = ((RexCall) rexNode).getOperator();\n      final DruidSqlOperatorConverter conversion = druidRel.getOperatorConversionMap()\n          .get(operator);\n      if (conversion == null) {\n        \r\n        return null;\n      } else {\n        return conversion.toDruidExpression(rexNode, inputRowType, druidRel);\n      }\n    }\n    if (kind == SqlKind.LITERAL) {\n      \r\n      if (RexLiteral.isNullLiteral(rexNode)) {\n        \r\n        return null;\n      } else if (SqlTypeName.NUMERIC_TYPES.contains(sqlTypeName)) {\n        return DruidExpressions.numberLiteral((Number) RexLiteral\n            .value(rexNode));\n      } else if (SqlTypeFamily.INTERVAL_DAY_TIME == sqlTypeName.getFamily()) {\n        \r\n        final long milliseconds = ((Number) RexLiteral.value(rexNode)).longValue();\n        return DruidExpressions.numberLiteral(milliseconds);\n      } else if (SqlTypeFamily.INTERVAL_YEAR_MONTH == sqlTypeName.getFamily()) {\n        \r\n        final long months = ((Number) RexLiteral.value(rexNode)).longValue();\n        return DruidExpressions.numberLiteral(months);\n      } else if (SqlTypeName.STRING_TYPES.contains(sqlTypeName)) {\n        return\n            DruidExpressions.stringLiteral(RexLiteral.stringValue(rexNode));\n      } else if (SqlTypeName.TIMESTAMP == sqlTypeName || SqlTypeName.DATE == sqlTypeName\n          || SqlTypeName.TIME_WITH_LOCAL_TIME_ZONE == sqlTypeName) {\n        return DruidExpressions.numberLiteral(DruidDateTimeUtils\n            .literalValue(rexNode, TimeZone.getTimeZone(druidRel.getConnectionConfig().timeZone()))\n            .getMillisSinceEpoch());\n      } else if (SqlTypeName.BOOLEAN == sqlTypeName) {\n        return DruidExpressions.numberLiteral(RexLiteral.booleanValue(rexNode) ? 1 : 0);\n      }\n    }\n    \r\n    return null;\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidExpressions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"0e13a8a021b6bdfa64967b5640dc8b970c11883a","commitMessage":"@@@[CALCITE-2170] Use Druid Expressions capabilities to improve the amount of work that can be pushed to Druid\n\nClose apache/calcite#624\n","date":"2018-02-17 11:35:34","modifiedFileCount":"14","status":"B","submitter":"Slim"},{"authorTime":"2018-04-27 07:29:15","codes":[{"authorDate":"2018-01-11 02:10:44","commitOrder":2,"curCode":"  protected static String extractColumnName(RexNode rexNode, RelDataType rowType,\n      DruidQuery query) {\n    if (rexNode.getKind() == SqlKind.INPUT_REF) {\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = rowType.getFieldNames().get(ref.getIndex());\n      if (columnName == null) {\n        return null;\n      }\n      \r\n      if (query.getDruidTable().timestampFieldName.equals(columnName)) {\n        return DruidTable.DEFAULT_TIMESTAMP_COLUMN;\n      }\n      return columnName;\n    }\n    return null;\n  }\n","date":"2018-02-17 11:35:34","endLine":394,"groupId":"14526","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"extractColumnName","params":"(RexNoderexNode@RelDataTyperowType@DruidQueryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/aa/9a02a2b233e12a2c1a4cbf745c003bab9eabd0.src","preCode":"  protected static String extractColumnName(RexNode rexNode, RelDataType rowType,\n      DruidQuery query) {\n    if (rexNode.getKind() == SqlKind.INPUT_REF) {\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = rowType.getFieldNames().get(ref.getIndex());\n      if (columnName == null) {\n        return null;\n      }\n      \r\n      if (query.getDruidTable().timestampFieldName.equals(columnName)) {\n        return DruidTable.DEFAULT_TIMESTAMP_COLUMN;\n      }\n      return columnName;\n    }\n    return null;\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":379,"status":"N"},{"authorDate":"2018-04-27 07:29:15","commitOrder":2,"curCode":"  public static String toDruidExpression(\n      final RexNode rexNode,\n      final RelDataType inputRowType,\n      final DruidQuery druidRel) {\n    SqlKind kind = rexNode.getKind();\n    SqlTypeName sqlTypeName = rexNode.getType().getSqlTypeName();\n\n    if (kind == SqlKind.INPUT_REF) {\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = inputRowType.getFieldNames().get(ref.getIndex());\n      if (columnName == null) {\n        return null;\n      }\n      if (druidRel.getDruidTable().timestampFieldName.equals(columnName)) {\n        return DruidExpressions.fromColumn(DruidTable.DEFAULT_TIMESTAMP_COLUMN);\n      }\n      return DruidExpressions.fromColumn(columnName);\n    }\n\n    if (rexNode instanceof RexCall) {\n      final SqlOperator operator = ((RexCall) rexNode).getOperator();\n      final DruidSqlOperatorConverter conversion = druidRel.getOperatorConversionMap()\n          .get(operator);\n      if (conversion == null) {\n        \r\n        return null;\n      } else {\n        return conversion.toDruidExpression(rexNode, inputRowType, druidRel);\n      }\n    }\n    if (kind == SqlKind.LITERAL) {\n      \r\n      if (RexLiteral.isNullLiteral(rexNode)) {\n        \r\n        return null;\n      } else if (SqlTypeName.NUMERIC_TYPES.contains(sqlTypeName)) {\n        return DruidExpressions.numberLiteral((Number) RexLiteral\n            .value(rexNode));\n      } else if (SqlTypeFamily.INTERVAL_DAY_TIME == sqlTypeName.getFamily()) {\n        \r\n        final long milliseconds = ((Number) RexLiteral.value(rexNode)).longValue();\n        return DruidExpressions.numberLiteral(milliseconds);\n      } else if (SqlTypeFamily.INTERVAL_YEAR_MONTH == sqlTypeName.getFamily()) {\n        \r\n        final long months = ((Number) RexLiteral.value(rexNode)).longValue();\n        return DruidExpressions.numberLiteral(months);\n      } else if (SqlTypeName.STRING_TYPES.contains(sqlTypeName)) {\n        return\n            DruidExpressions.stringLiteral(RexLiteral.stringValue(rexNode));\n      } else if (SqlTypeName.DATE == sqlTypeName\n          || SqlTypeName.TIMESTAMP == sqlTypeName\n          || SqlTypeName.TIME_WITH_LOCAL_TIME_ZONE == sqlTypeName) {\n        return DruidExpressions.numberLiteral(\n            DruidDateTimeUtils.literalValue(rexNode));\n      } else if (SqlTypeName.BOOLEAN == sqlTypeName) {\n        return DruidExpressions.numberLiteral(RexLiteral.booleanValue(rexNode) ? 1 : 0);\n      }\n    }\n    \r\n    return null;\n  }\n","date":"2018-06-23 02:49:06","endLine":160,"groupId":"16360","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toDruidExpression","params":"(finalRexNoderexNode@finalRelDataTypeinputRowType@finalDruidQuerydruidRel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ba/e6a4da38e17d4c9148dfde9dafaa862d2ee3ae.src","preCode":"  public static String toDruidExpression(\n      final RexNode rexNode,\n      final RelDataType inputRowType,\n      final DruidQuery druidRel) {\n    SqlKind kind = rexNode.getKind();\n    SqlTypeName sqlTypeName = rexNode.getType().getSqlTypeName();\n\n    if (kind == SqlKind.INPUT_REF) {\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = inputRowType.getFieldNames().get(ref.getIndex());\n      if (columnName == null) {\n        return null;\n      }\n      if (druidRel.getDruidTable().timestampFieldName.equals(columnName)) {\n        return DruidExpressions.fromColumn(DruidTable.DEFAULT_TIMESTAMP_COLUMN);\n      }\n      return DruidExpressions.fromColumn(columnName);\n    }\n\n    if (rexNode instanceof RexCall) {\n      final SqlOperator operator = ((RexCall) rexNode).getOperator();\n      final DruidSqlOperatorConverter conversion = druidRel.getOperatorConversionMap()\n          .get(operator);\n      if (conversion == null) {\n        \r\n        return null;\n      } else {\n        return conversion.toDruidExpression(rexNode, inputRowType, druidRel);\n      }\n    }\n    if (kind == SqlKind.LITERAL) {\n      \r\n      if (RexLiteral.isNullLiteral(rexNode)) {\n        \r\n        return null;\n      } else if (SqlTypeName.NUMERIC_TYPES.contains(sqlTypeName)) {\n        return DruidExpressions.numberLiteral((Number) RexLiteral\n            .value(rexNode));\n      } else if (SqlTypeFamily.INTERVAL_DAY_TIME == sqlTypeName.getFamily()) {\n        \r\n        final long milliseconds = ((Number) RexLiteral.value(rexNode)).longValue();\n        return DruidExpressions.numberLiteral(milliseconds);\n      } else if (SqlTypeFamily.INTERVAL_YEAR_MONTH == sqlTypeName.getFamily()) {\n        \r\n        final long months = ((Number) RexLiteral.value(rexNode)).longValue();\n        return DruidExpressions.numberLiteral(months);\n      } else if (SqlTypeName.STRING_TYPES.contains(sqlTypeName)) {\n        return\n            DruidExpressions.stringLiteral(RexLiteral.stringValue(rexNode));\n      } else if (SqlTypeName.TIMESTAMP == sqlTypeName || SqlTypeName.DATE == sqlTypeName\n          || SqlTypeName.TIME_WITH_LOCAL_TIME_ZONE == sqlTypeName) {\n        return DruidExpressions.numberLiteral(DruidDateTimeUtils\n            .literalValue(rexNode, TimeZone.getTimeZone(druidRel.getConnectionConfig().timeZone()))\n            .getMillisSinceEpoch());\n      } else if (SqlTypeName.BOOLEAN == sqlTypeName) {\n        return DruidExpressions.numberLiteral(RexLiteral.booleanValue(rexNode) ? 1 : 0);\n      }\n    }\n    \r\n    return null;\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidExpressions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"b29397d92e16f8aa77d5e84cf7a21744cd1b19a9","commitMessage":"@@@[CALCITE-2286] Support timestamp type for Druid adapter\n\nClose apache/calcite#681\n","date":"2018-06-23 02:49:06","modifiedFileCount":"13","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  protected static @Nullable String extractColumnName(RexNode rexNode, RelDataType rowType,\n      DruidQuery query) {\n    if (rexNode.getKind() == SqlKind.INPUT_REF) {\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = rowType.getFieldNames().get(ref.getIndex());\n      if (columnName == null) {\n        return null;\n      }\n      \r\n      if (query.getDruidTable().timestampFieldName.equals(columnName)) {\n        return DruidTable.DEFAULT_TIMESTAMP_COLUMN;\n      }\n      return columnName;\n    }\n    return null;\n  }\n","date":"2020-11-30 06:45:33","endLine":413,"groupId":"10451","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"extractColumnName","params":"(RexNoderexNode@RelDataTyperowType@DruidQueryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b8/2cacd9875817d15a1c74a2b925922108b549c2.src","preCode":"  protected static String extractColumnName(RexNode rexNode, RelDataType rowType,\n      DruidQuery query) {\n    if (rexNode.getKind() == SqlKind.INPUT_REF) {\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = rowType.getFieldNames().get(ref.getIndex());\n      if (columnName == null) {\n        return null;\n      }\n      \r\n      if (query.getDruidTable().timestampFieldName.equals(columnName)) {\n        return DruidTable.DEFAULT_TIMESTAMP_COLUMN;\n      }\n      return columnName;\n    }\n    return null;\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":398,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  public static @Nullable String toDruidExpression(\n      final RexNode rexNode,\n      final RelDataType inputRowType,\n      final DruidQuery druidRel) {\n    SqlKind kind = rexNode.getKind();\n    SqlTypeName sqlTypeName = rexNode.getType().getSqlTypeName();\n\n    if (kind == SqlKind.INPUT_REF) {\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = inputRowType.getFieldNames().get(ref.getIndex());\n      if (columnName == null) {\n        return null;\n      }\n      if (druidRel.getDruidTable().timestampFieldName.equals(columnName)) {\n        return DruidExpressions.fromColumn(DruidTable.DEFAULT_TIMESTAMP_COLUMN);\n      }\n      return DruidExpressions.fromColumn(columnName);\n    }\n\n    if (rexNode instanceof RexCall) {\n      final SqlOperator operator = ((RexCall) rexNode).getOperator();\n      final DruidSqlOperatorConverter conversion = druidRel.getOperatorConversionMap()\n          .get(operator);\n      if (conversion == null) {\n        \r\n        return null;\n      } else {\n        return conversion.toDruidExpression(rexNode, inputRowType, druidRel);\n      }\n    }\n    if (kind == SqlKind.LITERAL) {\n      \r\n      if (RexLiteral.isNullLiteral(rexNode)) {\n        \r\n        return null;\n      } else if (SqlTypeName.NUMERIC_TYPES.contains(sqlTypeName)) {\n        return DruidExpressions.numberLiteral((Number) RexLiteral\n            .value(rexNode));\n      } else if (SqlTypeFamily.INTERVAL_DAY_TIME == sqlTypeName.getFamily()) {\n        \r\n        final long milliseconds = ((Number) RexLiteral.value(rexNode)).longValue();\n        return DruidExpressions.numberLiteral(milliseconds);\n      } else if (SqlTypeFamily.INTERVAL_YEAR_MONTH == sqlTypeName.getFamily()) {\n        \r\n        final long months = ((Number) RexLiteral.value(rexNode)).longValue();\n        return DruidExpressions.numberLiteral(months);\n      } else if (SqlTypeName.STRING_TYPES.contains(sqlTypeName)) {\n        return\n            DruidExpressions.stringLiteral(RexLiteral.stringValue(rexNode));\n      } else if (SqlTypeName.DATE == sqlTypeName\n          || SqlTypeName.TIMESTAMP == sqlTypeName\n          || SqlTypeName.TIME_WITH_LOCAL_TIME_ZONE == sqlTypeName) {\n        return DruidExpressions.numberLiteral(\n            DruidDateTimeUtils.literalValue(rexNode));\n      } else if (SqlTypeName.BOOLEAN == sqlTypeName) {\n        return DruidExpressions.numberLiteral(RexLiteral.booleanValue(rexNode) ? 1 : 0);\n      }\n    }\n    \r\n    return null;\n  }\n","date":"2020-11-30 06:45:33","endLine":161,"groupId":"10451","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"toDruidExpression","params":"(finalRexNoderexNode@finalRelDataTypeinputRowType@finalDruidQuerydruidRel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/14/7a9189ee92a39334135ab3e4dfc97ee19d7f4c.src","preCode":"  public static String toDruidExpression(\n      final RexNode rexNode,\n      final RelDataType inputRowType,\n      final DruidQuery druidRel) {\n    SqlKind kind = rexNode.getKind();\n    SqlTypeName sqlTypeName = rexNode.getType().getSqlTypeName();\n\n    if (kind == SqlKind.INPUT_REF) {\n      final RexInputRef ref = (RexInputRef) rexNode;\n      final String columnName = inputRowType.getFieldNames().get(ref.getIndex());\n      if (columnName == null) {\n        return null;\n      }\n      if (druidRel.getDruidTable().timestampFieldName.equals(columnName)) {\n        return DruidExpressions.fromColumn(DruidTable.DEFAULT_TIMESTAMP_COLUMN);\n      }\n      return DruidExpressions.fromColumn(columnName);\n    }\n\n    if (rexNode instanceof RexCall) {\n      final SqlOperator operator = ((RexCall) rexNode).getOperator();\n      final DruidSqlOperatorConverter conversion = druidRel.getOperatorConversionMap()\n          .get(operator);\n      if (conversion == null) {\n        \r\n        return null;\n      } else {\n        return conversion.toDruidExpression(rexNode, inputRowType, druidRel);\n      }\n    }\n    if (kind == SqlKind.LITERAL) {\n      \r\n      if (RexLiteral.isNullLiteral(rexNode)) {\n        \r\n        return null;\n      } else if (SqlTypeName.NUMERIC_TYPES.contains(sqlTypeName)) {\n        return DruidExpressions.numberLiteral((Number) RexLiteral\n            .value(rexNode));\n      } else if (SqlTypeFamily.INTERVAL_DAY_TIME == sqlTypeName.getFamily()) {\n        \r\n        final long milliseconds = ((Number) RexLiteral.value(rexNode)).longValue();\n        return DruidExpressions.numberLiteral(milliseconds);\n      } else if (SqlTypeFamily.INTERVAL_YEAR_MONTH == sqlTypeName.getFamily()) {\n        \r\n        final long months = ((Number) RexLiteral.value(rexNode)).longValue();\n        return DruidExpressions.numberLiteral(months);\n      } else if (SqlTypeName.STRING_TYPES.contains(sqlTypeName)) {\n        return\n            DruidExpressions.stringLiteral(RexLiteral.stringValue(rexNode));\n      } else if (SqlTypeName.DATE == sqlTypeName\n          || SqlTypeName.TIMESTAMP == sqlTypeName\n          || SqlTypeName.TIME_WITH_LOCAL_TIME_ZONE == sqlTypeName) {\n        return DruidExpressions.numberLiteral(\n            DruidDateTimeUtils.literalValue(rexNode));\n      } else if (SqlTypeName.BOOLEAN == sqlTypeName) {\n        return DruidExpressions.numberLiteral(RexLiteral.booleanValue(rexNode) ? 1 : 0);\n      }\n    }\n    \r\n    return null;\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidExpressions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
