[{"authorTime":"2020-01-07 01:06:39","codes":[{"authorDate":"2020-01-07 01:06:39","commitOrder":1,"curCode":"  @Test public void testIsNullSimplificationWithUnaryPlus() {\n    RexNode expr =\n        isNotNull(coalesce(unaryPlus(vInt(1)), vIntNotNull(0)));\n    RexNode s = simplify.simplifyUnknownAs(expr, RexUnknownAs.UNKNOWN);\n\n    assertThat(expr.isAlwaysTrue(), is(true));\n    assertThat(s, is(trueLiteral));\n  }\n","date":"2020-01-08 01:04:52","endLine":2525,"groupId":"7850","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsNullSimplificationWithUnaryPlus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/a0c7274b2dc54806568765cd1d67427092fee2.src","preCode":"  @Test public void testIsNullSimplificationWithUnaryPlus() {\n    RexNode expr =\n        isNotNull(coalesce(unaryPlus(vInt(1)), vIntNotNull(0)));\n    RexNode s = simplify.simplifyUnknownAs(expr, RexUnknownAs.UNKNOWN);\n\n    assertThat(expr.isAlwaysTrue(), is(true));\n    assertThat(s, is(trueLiteral));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2518,"status":"B"},{"authorDate":"2020-01-07 01:06:39","commitOrder":1,"curCode":"  @Test public void testIsNullSimplificationWithIsDistinctFrom() {\n    RexNode expr =\n        isNotNull(\n            case_(vBool(),\n                isDistinctFrom(falseLiteral, vBoolNotNull(0)),\n                vBoolNotNull(2)));\n    RexNode s = simplify.simplifyUnknownAs(expr, RexUnknownAs.UNKNOWN);\n\n    assertThat(expr.isAlwaysTrue(), is(true));\n    assertThat(s, is(trueLiteral));\n  }\n","date":"2020-01-08 01:04:52","endLine":2537,"groupId":"7850","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsNullSimplificationWithIsDistinctFrom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/a0c7274b2dc54806568765cd1d67427092fee2.src","preCode":"  @Test public void testIsNullSimplificationWithIsDistinctFrom() {\n    RexNode expr =\n        isNotNull(\n            case_(vBool(),\n                isDistinctFrom(falseLiteral, vBoolNotNull(0)),\n                vBoolNotNull(2)));\n    RexNode s = simplify.simplifyUnknownAs(expr, RexUnknownAs.UNKNOWN);\n\n    assertThat(expr.isAlwaysTrue(), is(true));\n    assertThat(s, is(trueLiteral));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2527,"status":"B"}],"commitId":"763ec429c951acd5fa251c5d4a2b7780fbf648d4","commitMessage":"@@@[CALCITE-3712] Optimize lossless casts in RexSimplify: CAST(CAST(intExpr as BIGINT) as INT) => intExpr\n","date":"2020-01-08 01:04:52","modifiedFileCount":"4","status":"B","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testIsNullSimplificationWithUnaryPlus() {\n    RexNode expr =\n        isNotNull(coalesce(unaryPlus(vInt(1)), vIntNotNull(0)));\n    RexNode s = simplify.simplifyUnknownAs(expr, RexUnknownAs.UNKNOWN);\n\n    assertThat(expr.isAlwaysTrue(), is(true));\n    assertThat(s, is(trueLiteral));\n  }\n","date":"2020-04-06 04:57:49","endLine":2525,"groupId":"10695","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsNullSimplificationWithUnaryPlus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test public void testIsNullSimplificationWithUnaryPlus() {\n    RexNode expr =\n        isNotNull(coalesce(unaryPlus(vInt(1)), vIntNotNull(0)));\n    RexNode s = simplify.simplifyUnknownAs(expr, RexUnknownAs.UNKNOWN);\n\n    assertThat(expr.isAlwaysTrue(), is(true));\n    assertThat(s, is(trueLiteral));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2518,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testIsNullSimplificationWithIsDistinctFrom() {\n    RexNode expr =\n        isNotNull(\n            case_(vBool(),\n                isDistinctFrom(falseLiteral, vBoolNotNull(0)),\n                vBoolNotNull(2)));\n    RexNode s = simplify.simplifyUnknownAs(expr, RexUnknownAs.UNKNOWN);\n\n    assertThat(expr.isAlwaysTrue(), is(true));\n    assertThat(s, is(trueLiteral));\n  }\n","date":"2020-04-06 04:57:49","endLine":2537,"groupId":"10695","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsNullSimplificationWithIsDistinctFrom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test public void testIsNullSimplificationWithIsDistinctFrom() {\n    RexNode expr =\n        isNotNull(\n            case_(vBool(),\n                isDistinctFrom(falseLiteral, vBoolNotNull(0)),\n                vBoolNotNull(2)));\n    RexNode s = simplify.simplifyUnknownAs(expr, RexUnknownAs.UNKNOWN);\n\n    assertThat(expr.isAlwaysTrue(), is(true));\n    assertThat(s, is(trueLiteral));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2527,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
