[{"authorTime":"2020-07-22 05:18:37","codes":[{"authorDate":"2017-08-24 18:27:35","commitOrder":2,"curCode":"  public static ScannableTable eval(boolean b) {\n    return new ScannableTable() {\n      public Enumerable<Object[]> scan(DataContext root) {\n        return Linq4j.asEnumerable(ROWS);\n      };\n\n      public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n        return typeFactory.builder()\n            .add(\"country\", SqlTypeName.VARCHAR)\n            .add(\"latitude\", SqlTypeName.DECIMAL).nullable(true)\n            .add(\"longitude\", SqlTypeName.DECIMAL).nullable(true)\n            .add(\"name\", SqlTypeName.VARCHAR)\n            .build();\n      }\n\n      public Statistic getStatistic() {\n        return Statistics.of(246D,\n            ImmutableList.of(ImmutableBitSet.of(0), ImmutableBitSet.of(3)));\n      }\n\n      public Schema.TableType getJdbcTableType() {\n        return Schema.TableType.TABLE;\n      }\n\n      public boolean isRolledUp(String column) {\n        return false;\n      }\n\n      public boolean rolledUpColumnValidInsideAgg(String column, SqlCall call,\n          SqlNode parent, CalciteConnectionConfig config) {\n        return false;\n      }\n    };\n  }\n","date":"2017-08-30 04:24:42","endLine":324,"groupId":"1001","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"eval","params":"(booleanb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/09241ce39e9504ac9d1336857f8c84eac4fde3.src","preCode":"  public static ScannableTable eval(boolean b) {\n    return new ScannableTable() {\n      public Enumerable<Object[]> scan(DataContext root) {\n        return Linq4j.asEnumerable(ROWS);\n      };\n\n      public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n        return typeFactory.builder()\n            .add(\"country\", SqlTypeName.VARCHAR)\n            .add(\"latitude\", SqlTypeName.DECIMAL).nullable(true)\n            .add(\"longitude\", SqlTypeName.DECIMAL).nullable(true)\n            .add(\"name\", SqlTypeName.VARCHAR)\n            .build();\n      }\n\n      public Statistic getStatistic() {\n        return Statistics.of(246D,\n            ImmutableList.of(ImmutableBitSet.of(0), ImmutableBitSet.of(3)));\n      }\n\n      public Schema.TableType getJdbcTableType() {\n        return Schema.TableType.TABLE;\n      }\n\n      public boolean isRolledUp(String column) {\n        return false;\n      }\n\n      public boolean rolledUpColumnValidInsideAgg(String column, SqlCall call,\n          SqlNode parent, CalciteConnectionConfig config) {\n        return false;\n      }\n    };\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/CountriesTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"NB"},{"authorDate":"2020-07-22 05:18:37","commitOrder":2,"curCode":"  private static ScannableTable eval(final Object[][] rows) {\n    return new ScannableTable() {\n      public Enumerable<Object[]> scan(DataContext root) {\n        return Linq4j.asEnumerable(rows);\n      }\n\n      public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n        return typeFactory.builder()\n            .add(\"name\", SqlTypeName.VARCHAR)\n            .add(\"geom\", SqlTypeName.VARCHAR)\n            .build();\n      }\n\n      public Statistic getStatistic() {\n        return Statistics.of(rows.length,\n            ImmutableList.of(ImmutableBitSet.of(0)));\n      }\n\n      public Schema.TableType getJdbcTableType() {\n        return Schema.TableType.TABLE;\n      }\n\n      public boolean isRolledUp(String column) {\n        return false;\n      }\n\n      public boolean rolledUpColumnValidInsideAgg(String column, SqlCall call,\n          SqlNode parent, CalciteConnectionConfig config) {\n        return false;\n      }\n    };\n  }\n","date":"2020-07-29 03:09:43","endLine":120,"groupId":"944","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"eval","params":"(finalObject[][]rows)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2d/72fd0ec7710302d8cf67d4aad9b7a012c926d9.src","preCode":"  private static ScannableTable eval(final Object[][] rows) {\n    return new ScannableTable() {\n      public Enumerable<Object[]> scan(DataContext root) {\n        return Linq4j.asEnumerable(rows);\n      }\n\n      public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n        return typeFactory.builder()\n            .add(\"name\", SqlTypeName.VARCHAR)\n            .add(\"geom\", SqlTypeName.VARCHAR)\n            .build();\n      }\n\n      public Statistic getStatistic() {\n        return Statistics.of(rows.length,\n            ImmutableList.of(ImmutableBitSet.of(0)));\n      }\n\n      public Schema.TableType getJdbcTableType() {\n        return Schema.TableType.TABLE;\n      }\n\n      public boolean isRolledUp(String column) {\n        return false;\n      }\n\n      public boolean rolledUpColumnValidInsideAgg(String column, SqlCall call,\n          SqlNode parent, CalciteConnectionConfig config) {\n        return false;\n      }\n    };\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/StatesTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"}],"commitId":"885a3da76cfd59171624dc569e83e93a5bdaffe3","commitMessage":"@@@[CALCITE-2160] Spatial: Add functions ST_MakeGrid and ST_MakeGridPoints\n\nThese will be the foundations of a spatial grid index.  to accelerate\npolygon-to-polygon spatial joins.\n\nAdd \"states\" and \"parks\" data sets.\n\nFix lateral references to fields.\n","date":"2020-07-29 03:09:43","modifiedFileCount":"4","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  public static ScannableTable eval(boolean b) {\n    return new ScannableTable() {\n      public Enumerable<@Nullable Object[]> scan(DataContext root) {\n        return Linq4j.asEnumerable(ROWS);\n      };\n\n      public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n        return typeFactory.builder()\n            .add(\"country\", SqlTypeName.VARCHAR)\n            .add(\"latitude\", SqlTypeName.DECIMAL).nullable(true)\n            .add(\"longitude\", SqlTypeName.DECIMAL).nullable(true)\n            .add(\"name\", SqlTypeName.VARCHAR)\n            .build();\n      }\n\n      public Statistic getStatistic() {\n        return Statistics.of(246D,\n            ImmutableList.of(ImmutableBitSet.of(0), ImmutableBitSet.of(3)));\n      }\n\n      public Schema.TableType getJdbcTableType() {\n        return Schema.TableType.TABLE;\n      }\n\n      public boolean isRolledUp(String column) {\n        return false;\n      }\n\n      public boolean rolledUpColumnValidInsideAgg(String column, SqlCall call,\n          @Nullable SqlNode parent, @Nullable CalciteConnectionConfig config) {\n        return false;\n      }\n    };\n  }\n","date":"2020-11-30 06:45:33","endLine":326,"groupId":"101020","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"eval","params":"(booleanb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/da/b24ef9bfe1e60997cdecf3193f02d26afcf93b.src","preCode":"  public static ScannableTable eval(boolean b) {\n    return new ScannableTable() {\n      public Enumerable<Object[]> scan(DataContext root) {\n        return Linq4j.asEnumerable(ROWS);\n      };\n\n      public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n        return typeFactory.builder()\n            .add(\"country\", SqlTypeName.VARCHAR)\n            .add(\"latitude\", SqlTypeName.DECIMAL).nullable(true)\n            .add(\"longitude\", SqlTypeName.DECIMAL).nullable(true)\n            .add(\"name\", SqlTypeName.VARCHAR)\n            .build();\n      }\n\n      public Statistic getStatistic() {\n        return Statistics.of(246D,\n            ImmutableList.of(ImmutableBitSet.of(0), ImmutableBitSet.of(3)));\n      }\n\n      public Schema.TableType getJdbcTableType() {\n        return Schema.TableType.TABLE;\n      }\n\n      public boolean isRolledUp(String column) {\n        return false;\n      }\n\n      public boolean rolledUpColumnValidInsideAgg(String column, SqlCall call,\n          SqlNode parent, CalciteConnectionConfig config) {\n        return false;\n      }\n    };\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/CountriesTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  private static ScannableTable eval(final Object[][] rows) {\n    return new ScannableTable() {\n      public Enumerable<@Nullable Object[]> scan(DataContext root) {\n        return Linq4j.asEnumerable(rows);\n      }\n\n      public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n        return typeFactory.builder()\n            .add(\"name\", SqlTypeName.VARCHAR)\n            .add(\"geom\", SqlTypeName.VARCHAR)\n            .build();\n      }\n\n      public Statistic getStatistic() {\n        return Statistics.of(rows.length,\n            ImmutableList.of(ImmutableBitSet.of(0)));\n      }\n\n      public Schema.TableType getJdbcTableType() {\n        return Schema.TableType.TABLE;\n      }\n\n      public boolean isRolledUp(String column) {\n        return false;\n      }\n\n      public boolean rolledUpColumnValidInsideAgg(String column, SqlCall call,\n          @Nullable SqlNode parent, @Nullable CalciteConnectionConfig config) {\n        return false;\n      }\n    };\n  }\n","date":"2020-11-30 06:45:33","endLine":122,"groupId":"101020","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"eval","params":"(finalObject[][]rows)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3d/40787ab03dca7742ea8909de78926dee84c1aa.src","preCode":"  private static ScannableTable eval(final Object[][] rows) {\n    return new ScannableTable() {\n      public Enumerable<Object[]> scan(DataContext root) {\n        return Linq4j.asEnumerable(rows);\n      }\n\n      public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n        return typeFactory.builder()\n            .add(\"name\", SqlTypeName.VARCHAR)\n            .add(\"geom\", SqlTypeName.VARCHAR)\n            .build();\n      }\n\n      public Statistic getStatistic() {\n        return Statistics.of(rows.length,\n            ImmutableList.of(ImmutableBitSet.of(0)));\n      }\n\n      public Schema.TableType getJdbcTableType() {\n        return Schema.TableType.TABLE;\n      }\n\n      public boolean isRolledUp(String column) {\n        return false;\n      }\n\n      public boolean rolledUpColumnValidInsideAgg(String column, SqlCall call,\n          SqlNode parent, CalciteConnectionConfig config) {\n        return false;\n      }\n    };\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/StatesTableFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
