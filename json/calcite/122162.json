[{"authorTime":"2018-10-26 07:50:44","codes":[{"authorDate":"2018-09-16 20:24:07","commitOrder":4,"curCode":"  List<RexNode> toRexList(\n      FunctionExpression expression,\n      RelNode... inputs) {\n    List<RexNode> list = new ArrayList<>();\n    RexBuilder rexBuilder = cluster.getRexBuilder();\n    for (RelNode input : inputs) {\n      list.add(rexBuilder.makeRangeReference(input));\n    }\n    return CalcitePrepareImpl.EmptyScalarTranslator.empty(rexBuilder)\n        .bind(expression.parameterList, list)\n        .toRexList(expression.body);\n  }\n","date":"2018-09-20 16:51:04","endLine":164,"groupId":"3604","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toRexList","params":"(FunctionExpressionexpression@RelNode...inputs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/69/945504b53233f51194959667969a0364bc024a.src","preCode":"  List<RexNode> toRexList(\n      FunctionExpression expression,\n      RelNode... inputs) {\n    List<RexNode> list = new ArrayList<>();\n    RexBuilder rexBuilder = cluster.getRexBuilder();\n    for (RelNode input : inputs) {\n      list.add(rexBuilder.makeRangeReference(input));\n    }\n    return CalcitePrepareImpl.EmptyScalarTranslator.empty(rexBuilder)\n        .bind(expression.parameterList, list)\n        .toRexList(expression.body);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"NB"},{"authorDate":"2018-10-26 07:50:44","commitOrder":4,"curCode":"  RexNode toRex(\n      FunctionExpression expression,\n      RelNode... inputs) {\n    List<RexNode> list = new ArrayList<>();\n    RexBuilder rexBuilder = cluster.getRexBuilder();\n    for (RelNode input : inputs) {\n      list.add(rexBuilder.makeRangeReference(input));\n    }\n    return CalcitePrepareImpl.EmptyScalarTranslator.empty(rexBuilder)\n        .bind(expression.parameterList, list)\n        .toRex(expression.body);\n  }\n","date":"2018-11-01 03:01:28","endLine":177,"groupId":"3604","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toRex","params":"(FunctionExpressionexpression@RelNode...inputs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8a/0567138b50b4c61a3876204acc6f7347345c6e.src","preCode":"  RexNode toRex(\n      FunctionExpression expression,\n      RelNode... inputs) {\n    List<RexNode> list = new ArrayList<>();\n    RexBuilder rexBuilder = cluster.getRexBuilder();\n    for (RelNode input : inputs) {\n      list.add(rexBuilder.makeRangeReference(input));\n    }\n    return CalcitePrepareImpl.EmptyScalarTranslator.empty(rexBuilder)\n        .bind(expression.parameterList, list)\n        .toRex(expression.body);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"B"}],"commitId":"9c26a9e74dafadb27ea363d82cfe1105d5dd3329","commitMessage":"@@@[CALCITE-2441] RelBuilder.scan should expand TranslatableTable and views\n\nAdd class ViewExpanders.  which has utility methods for creating\nToRelContext and ViewExpander.\n","date":"2018-11-01 03:01:28","modifiedFileCount":"20","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  List<RexNode> toRexList(\n      FunctionExpression expression,\n      RelNode... inputs) {\n    List<RexNode> list = new ArrayList<>();\n    RexBuilder rexBuilder = cluster.getRexBuilder();\n    for (RelNode input : inputs) {\n      list.add(rexBuilder.makeRangeReference(input));\n    }\n    return CalcitePrepareImpl.EmptyScalarTranslator.empty(rexBuilder)\n        .bind(getParameterList(expression), list)\n        .toRexList(getBody(expression));\n  }\n","date":"2020-11-30 06:45:33","endLine":194,"groupId":"122162","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"toRexList","params":"(FunctionExpressionexpression@RelNode...inputs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f7/d02f3e2c76af0e9bddef9b5676f357592b95a1.src","preCode":"  List<RexNode> toRexList(\n      FunctionExpression expression,\n      RelNode... inputs) {\n    List<RexNode> list = new ArrayList<>();\n    RexBuilder rexBuilder = cluster.getRexBuilder();\n    for (RelNode input : inputs) {\n      list.add(rexBuilder.makeRangeReference(input));\n    }\n    return CalcitePrepareImpl.EmptyScalarTranslator.empty(rexBuilder)\n        .bind(expression.parameterList, list)\n        .toRexList(expression.body);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  RexNode toRex(\n      FunctionExpression expression,\n      RelNode... inputs) {\n    List<RexNode> list = new ArrayList<>();\n    RexBuilder rexBuilder = cluster.getRexBuilder();\n    for (RelNode input : inputs) {\n      list.add(rexBuilder.makeRangeReference(input));\n    }\n    return CalcitePrepareImpl.EmptyScalarTranslator.empty(rexBuilder)\n        .bind(getParameterList(expression), list)\n        .toRex(getBody(expression));\n  }\n","date":"2020-11-30 06:45:33","endLine":207,"groupId":"122162","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"toRex","params":"(FunctionExpressionexpression@RelNode...inputs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f7/d02f3e2c76af0e9bddef9b5676f357592b95a1.src","preCode":"  RexNode toRex(\n      FunctionExpression expression,\n      RelNode... inputs) {\n    List<RexNode> list = new ArrayList<>();\n    RexBuilder rexBuilder = cluster.getRexBuilder();\n    for (RelNode input : inputs) {\n      list.add(rexBuilder.makeRangeReference(input));\n    }\n    return CalcitePrepareImpl.EmptyScalarTranslator.empty(rexBuilder)\n        .bind(expression.parameterList, list)\n        .toRex(expression.body);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
