[{"authorTime":"2016-10-07 21:19:40","codes":[{"authorDate":"2016-10-07 21:19:40","commitOrder":3,"curCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      if (operatorBinding.isOperandNull(i, false)) {\n        if (throwOnFailure) {\n          throw callBinding.getValidator().newValidationError(\n              callBinding.operand(i), RESOURCE.nullIllegal());\n        } else {\n          return false;\n        }\n      }\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","date":"2016-10-12 07:13:42","endLine":116,"groupId":"10270","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypesImpl","params":"(SqlOperatorBindingoperatorBinding@booleanthrowOnFailure@SqlCallBindingcallBinding)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7b/4248ba2f5ba431bf701038ee7038513e76917d.src","preCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      if (operatorBinding.isOperandNull(i, false)) {\n        if (throwOnFailure) {\n          throw callBinding.getValidator().newValidationError(\n              callBinding.operand(i), RESOURCE.nullIllegal());\n        } else {\n          return false;\n        }\n      }\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"MB"},{"authorDate":"2016-10-07 21:19:40","commitOrder":3,"curCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      if (operatorBinding.isOperandNull(i, false)) {\n        if (throwOnFailure) {\n          throw callBinding.getValidator().newValidationError(\n              callBinding.operand(i), RESOURCE.nullIllegal());\n        } else {\n          return false;\n        }\n      }\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0 && i != operandList.get(operandList.size() - 1)) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","date":"2016-10-12 07:13:42","endLine":91,"groupId":"10270","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkOperandTypesImpl","params":"(SqlOperatorBindingoperatorBinding@booleanthrowOnFailure@SqlCallBindingcallBinding)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/12d355616ee356ad254391a0c805e538780dfb.src","preCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      if (operatorBinding.isOperandNull(i, false)) {\n        if (throwOnFailure) {\n          throw callBinding.getValidator().newValidationError(\n              callBinding.operand(i), RESOURCE.nullIllegal());\n        } else {\n          return false;\n        }\n      }\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0 && i != operandList.get(operandList.size() - 1)) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeExceptLastOperandChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"}],"commitId":"c3592044c1db6d2ca21cbc3e25d47f3854db3347","commitMessage":"@@@[CALCITE-1419] Implement JDBC functions: LTRIM.  RTRIM and 3-parameter LOCATE and POSITION (Jungtaek Lim)\n\n* For fixing LOCATE with 3 params easily.  modify POSITION to also have\n  optional third parameter: POSITION(string IN string FROM integer)\n* Add newly added POSITION to SQL reference page\n\nClose apache/calcite#299\n","date":"2016-10-12 07:13:42","modifiedFileCount":"7","status":"M","submitter":"Jungtaek Lim"},{"authorTime":"2016-10-07 21:19:40","codes":[{"authorDate":"2017-06-30 03:32:43","commitOrder":4,"curCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","date":"2017-07-04 12:32:03","endLine":108,"groupId":"3734","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypesImpl","params":"(SqlOperatorBindingoperatorBinding@booleanthrowOnFailure@SqlCallBindingcallBinding)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dd/d2bd7e7f22ea57d5e675769cf3368737118c13.src","preCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      if (operatorBinding.isOperandNull(i, false)) {\n        if (throwOnFailure) {\n          throw callBinding.getValidator().newValidationError(\n              callBinding.operand(i), RESOURCE.nullIllegal());\n        } else {\n          return false;\n        }\n      }\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2016-10-07 21:19:40","commitOrder":4,"curCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      if (operatorBinding.isOperandNull(i, false)) {\n        if (throwOnFailure) {\n          throw callBinding.getValidator().newValidationError(\n              callBinding.operand(i), RESOURCE.nullIllegal());\n        } else {\n          return false;\n        }\n      }\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0 && i != operandList.get(operandList.size() - 1)) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","date":"2016-10-12 07:13:42","endLine":91,"groupId":"10270","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkOperandTypesImpl","params":"(SqlOperatorBindingoperatorBinding@booleanthrowOnFailure@SqlCallBindingcallBinding)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/12d355616ee356ad254391a0c805e538780dfb.src","preCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      if (operatorBinding.isOperandNull(i, false)) {\n        if (throwOnFailure) {\n          throw callBinding.getValidator().newValidationError(\n              callBinding.operand(i), RESOURCE.nullIllegal());\n        } else {\n          return false;\n        }\n      }\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0 && i != operandList.get(operandList.size() - 1)) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeExceptLastOperandChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"ccaa700a0126cbca993217192df2bfe3fa4bce1a","commitMessage":"@@@[CALCITE-1864] Allow NULL literal as argument\n","date":"2017-07-04 12:32:03","modifiedFileCount":"8","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-05-30 12:16:57","codes":[{"authorDate":"2017-06-30 03:32:43","commitOrder":5,"curCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","date":"2017-07-04 12:32:03","endLine":108,"groupId":"3734","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypesImpl","params":"(SqlOperatorBindingoperatorBinding@booleanthrowOnFailure@SqlCallBindingcallBinding)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dd/d2bd7e7f22ea57d5e675769cf3368737118c13.src","preCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"},{"authorDate":"2018-05-30 12:16:57","commitOrder":5,"curCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      if (operatorBinding.isOperandNull(i, false)) {\n        if (callBinding.getValidator().isTypeCoercionEnabled()) {\n          types[i] = operatorBinding.getTypeFactory()\n              .createSqlType(SqlTypeName.NULL);\n        } else if (throwOnFailure) {\n          throw callBinding.getValidator().newValidationError(\n              callBinding.operand(i), RESOURCE.nullIllegal());\n        } else {\n          return false;\n        }\n      } else {\n        types[i] = operatorBinding.getOperandType(i);\n      }\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0 && i != operandList.get(operandList.size() - 1)) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","date":"2019-08-29 17:01:46","endLine":95,"groupId":"12718","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkOperandTypesImpl","params":"(SqlOperatorBindingoperatorBinding@booleanthrowOnFailure@SqlCallBindingcallBinding)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/57/4dc6a230ebbc8c5d7a9518181a80e8eb7c9349.src","preCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      if (operatorBinding.isOperandNull(i, false)) {\n        if (throwOnFailure) {\n          throw callBinding.getValidator().newValidationError(\n              callBinding.operand(i), RESOURCE.nullIllegal());\n        } else {\n          return false;\n        }\n      }\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0 && i != operandList.get(operandList.size() - 1)) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeExceptLastOperandChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"01477c42ded991aaa7b14cf72a6e4ea1a20edf5e","commitMessage":"@@@[CALCITE-2302] Implicit type cast support\n\nChanges:\n* Support full implicit type coercion for SQL contexts:\nSet operation.  binary arithmetic exprs.  binary equality\nexprs.  binary comparison exprs.  case when(COALESCE). \nIN operation.  builtin functions.  user defined function(UDF);\n* The SqlValidator now takes a component named `TypeCoercion`\nresponsible for the coercion work.  you can turn off the coercion with\n`SqlValidator#setEnableTypeCoercion(false)`;\n* We follow PostgreSQL and SQL-SERVER conversion style for two integers division. \ni.e. `'9'/2` returns INTEGER 4.\n","date":"2019-08-29 17:01:46","modifiedFileCount":"50","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-09 10:56:51","codes":[{"authorDate":"2017-06-30 03:32:43","commitOrder":6,"curCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","date":"2017-07-04 12:32:03","endLine":108,"groupId":"3734","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypesImpl","params":"(SqlOperatorBindingoperatorBinding@booleanthrowOnFailure@SqlCallBindingcallBinding)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dd/d2bd7e7f22ea57d5e675769cf3368737118c13.src","preCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"},{"authorDate":"2020-04-09 10:56:51","commitOrder":6,"curCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      if (operatorBinding.isOperandNull(i, false)) {\n        if (callBinding.isTypeCoercionEnabled()) {\n          types[i] = operatorBinding.getTypeFactory()\n              .createSqlType(SqlTypeName.NULL);\n        } else if (throwOnFailure) {\n          throw callBinding.getValidator().newValidationError(\n              callBinding.operand(i), RESOURCE.nullIllegal());\n        } else {\n          return false;\n        }\n      } else {\n        types[i] = operatorBinding.getOperandType(i);\n      }\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0 && i != operandList.get(operandList.size() - 1)) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","date":"2020-04-10 10:56:43","endLine":95,"groupId":"12718","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkOperandTypesImpl","params":"(SqlOperatorBindingoperatorBinding@booleanthrowOnFailure@SqlCallBindingcallBinding)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/88/96a0a40155af05adb84400ebf21b69b3551567.src","preCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      if (operatorBinding.isOperandNull(i, false)) {\n        if (callBinding.getValidator().isTypeCoercionEnabled()) {\n          types[i] = operatorBinding.getTypeFactory()\n              .createSqlType(SqlTypeName.NULL);\n        } else if (throwOnFailure) {\n          throw callBinding.getValidator().newValidationError(\n              callBinding.operand(i), RESOURCE.nullIllegal());\n        } else {\n          return false;\n        }\n      } else {\n        types[i] = operatorBinding.getOperandType(i);\n      }\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0 && i != operandList.get(operandList.size() - 1)) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeExceptLastOperandChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"4e9870078fcaa7da9e475c94f43309cc3244fa22","commitMessage":"@@@[CALCITE-3900] Add Config for SqlValidator\n\nThe SqlValidator now has 7 setXXX methods for all kinds of control flags. \nwhich is hard for code evolving.\n\nThere is also no way to config these things through the FrameworkConfig.\n\nAdd a SqlValidator.Config to solve these problems.\n","date":"2020-04-10 10:56:43","modifiedFileCount":"33","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2017-06-30 03:32:43","commitOrder":7,"curCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","date":"2017-07-04 12:32:03","endLine":108,"groupId":"3734","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypesImpl","params":"(SqlOperatorBindingoperatorBinding@booleanthrowOnFailure@SqlCallBindingcallBinding)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dd/d2bd7e7f22ea57d5e675769cf3368737118c13.src","preCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"},{"authorDate":"2020-09-29 22:09:05","commitOrder":7,"curCode":"  @Override protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      if (operatorBinding.isOperandNull(i, false)) {\n        if (callBinding.isTypeCoercionEnabled()) {\n          types[i] = operatorBinding.getTypeFactory()\n              .createSqlType(SqlTypeName.NULL);\n        } else if (throwOnFailure) {\n          throw callBinding.getValidator().newValidationError(\n              callBinding.operand(i), RESOURCE.nullIllegal());\n        } else {\n          return false;\n        }\n      } else {\n        types[i] = operatorBinding.getOperandType(i);\n      }\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0 && i != operandList.get(operandList.size() - 1)) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","date":"2020-10-07 05:42:47","endLine":95,"groupId":"12718","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"checkOperandTypesImpl","params":"(SqlOperatorBindingoperatorBinding@booleanthrowOnFailure@SqlCallBindingcallBinding)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7c/34c1e4a36cce92305e2f75a4bd4ab9e0502201.src","preCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      if (operatorBinding.isOperandNull(i, false)) {\n        if (callBinding.isTypeCoercionEnabled()) {\n          types[i] = operatorBinding.getTypeFactory()\n              .createSqlType(SqlTypeName.NULL);\n        } else if (throwOnFailure) {\n          throw callBinding.getValidator().newValidationError(\n              callBinding.operand(i), RESOURCE.nullIllegal());\n        } else {\n          return false;\n        }\n      } else {\n        types[i] = operatorBinding.getOperandType(i);\n      }\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0 && i != operandList.get(operandList.size() - 1)) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeExceptLastOperandChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":8,"curCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      @Nullable SqlCallBinding callBinding) {\n    if (throwOnFailure && callBinding == null) {\n      throw new IllegalArgumentException(\n          \"callBinding must be non-null in case throwOnFailure=true\");\n    }\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw requireNonNull(callBinding, \"callBinding\").newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","date":"2020-11-30 06:45:33","endLine":115,"groupId":"101805","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"checkOperandTypesImpl","params":"(SqlOperatorBindingoperatorBinding@booleanthrowOnFailure@@NullableSqlCallBindingcallBinding)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2e/a62fd327a472f892df4226eec5bf2175b803c3.src","preCode":"  protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      types[i] = operatorBinding.getOperandType(i);\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":8,"curCode":"  @Override protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      @Nullable SqlCallBinding callBinding) {\n    if (throwOnFailure && callBinding == null) {\n      throw new IllegalArgumentException(\n          \"callBinding must be non-null in case throwOnFailure=true\");\n    }\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      if (operatorBinding.isOperandNull(i, false)) {\n        if (requireNonNull(callBinding, \"callBinding\").isTypeCoercionEnabled()) {\n          types[i] = operatorBinding.getTypeFactory()\n              .createSqlType(SqlTypeName.NULL);\n        } else if (throwOnFailure) {\n          throw callBinding.getValidator().newValidationError(\n              callBinding.operand(i), RESOURCE.nullIllegal());\n        } else {\n          return false;\n        }\n      } else {\n        types[i] = operatorBinding.getOperandType(i);\n      }\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0 && i != operandList.get(operandList.size() - 1)) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw requireNonNull(callBinding, \"callBinding\").newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","date":"2020-11-30 06:45:33","endLine":102,"groupId":"101805","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"checkOperandTypesImpl","params":"(SqlOperatorBindingoperatorBinding@booleanthrowOnFailure@@NullableSqlCallBindingcallBinding)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/80/8a29b59a328b8e51ff38f9db08441d07513a5f.src","preCode":"  @Override protected boolean checkOperandTypesImpl(\n      SqlOperatorBinding operatorBinding,\n      boolean throwOnFailure,\n      SqlCallBinding callBinding) {\n    int nOperandsActual = nOperands;\n    if (nOperandsActual == -1) {\n      nOperandsActual = operatorBinding.getOperandCount();\n    }\n    assert !(throwOnFailure && (callBinding == null));\n    RelDataType[] types = new RelDataType[nOperandsActual];\n    final List<Integer> operandList =\n        getOperandList(operatorBinding.getOperandCount());\n    for (int i : operandList) {\n      if (operatorBinding.isOperandNull(i, false)) {\n        if (callBinding.isTypeCoercionEnabled()) {\n          types[i] = operatorBinding.getTypeFactory()\n              .createSqlType(SqlTypeName.NULL);\n        } else if (throwOnFailure) {\n          throw callBinding.getValidator().newValidationError(\n              callBinding.operand(i), RESOURCE.nullIllegal());\n        } else {\n          return false;\n        }\n      } else {\n        types[i] = operatorBinding.getOperandType(i);\n      }\n    }\n    int prev = -1;\n    for (int i : operandList) {\n      if (prev >= 0 && i != operandList.get(operandList.size() - 1)) {\n        if (!SqlTypeUtil.isComparable(types[i], types[prev])) {\n          if (!throwOnFailure) {\n            return false;\n          }\n\n          \r\n          \r\n          \r\n          throw callBinding.newValidationError(\n              RESOURCE.needSameTypeParameter());\n        }\n      }\n      prev = i;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeExceptLastOperandChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
