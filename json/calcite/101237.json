[{"authorTime":"2018-02-01 11:50:44","codes":[{"authorDate":"2015-11-21 04:05:09","commitOrder":2,"curCode":"  @Test public void testUdfArgumentName() {\n    final CalciteAssert.AssertThat with = withUdf();\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello', \\\"n\\\" => 3))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1 + 2, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"n\\\" => 2, \\\"s\\\" => 'hello'))\")\n        .throws_(\"Duplicate argument name 'n'\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"m\\\" => 2, \\\"s\\\" => 'h'))\")\n        .throws_(\"No match found for function signature \"\n            + \"MY_LEFT(n => <NUMERIC>, m => <NUMERIC>, s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3))\")\n        .throws_(\"No match found for function signature MY_LEFT(n => <NUMERIC>)\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello'))\")\n        .throws_(\"No match found for function signature MY_LEFT(s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 'hello', \\\"s\\\" => 'x'))\")\n        .throws_(\"No match found for function signature \"\n            + \"MY_LEFT(n => <CHARACTER>, s => <CHARACTER>)\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1, \\\"s\\\" => 0))\")\n        .throws_(\"No match found for function signature \"\n            + \"MY_LEFT(n => <NUMERIC>, s => <NUMERIC>)\");\n  }\n","date":"2015-11-21 05:28:15","endLine":288,"groupId":"1577","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUdfArgumentName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2e/8126dc3b75dc566e45fbdaf37f116195c0a232.src","preCode":"  @Test public void testUdfArgumentName() {\n    final CalciteAssert.AssertThat with = withUdf();\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello', \\\"n\\\" => 3))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1 + 2, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"n\\\" => 2, \\\"s\\\" => 'hello'))\")\n        .throws_(\"Duplicate argument name 'n'\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"m\\\" => 2, \\\"s\\\" => 'h'))\")\n        .throws_(\"No match found for function signature \"\n            + \"MY_LEFT(n => <NUMERIC>, m => <NUMERIC>, s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3))\")\n        .throws_(\"No match found for function signature MY_LEFT(n => <NUMERIC>)\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello'))\")\n        .throws_(\"No match found for function signature MY_LEFT(s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 'hello', \\\"s\\\" => 'x'))\")\n        .throws_(\"No match found for function signature \"\n            + \"MY_LEFT(n => <CHARACTER>, s => <CHARACTER>)\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1, \\\"s\\\" => 0))\")\n        .throws_(\"No match found for function signature \"\n            + \"MY_LEFT(n => <NUMERIC>, s => <NUMERIC>)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"NB"},{"authorDate":"2018-02-01 11:50:44","commitOrder":2,"curCode":"  public void testBigDecimalAndLong() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n  }\n","date":"2018-04-26 13:36:39","endLine":905,"groupId":"13330","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBigDecimalAndLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6d/c822a93ca4621757b44c0c3743722e026a7c9a.src","preCode":"  public void testBigDecimalAndLong() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":891,"status":"B"}],"commitId":"bd7e66a4487c3c6660903b2e107e6c81a5a63c82","commitMessage":"@@@[CALCITE-2053] Resolve Java user-defined functions that have Double and BigDecimal arguments (??)\n\nClose apache/calcite#619\n","date":"2018-04-26 13:36:39","modifiedFileCount":"3","status":"M","submitter":"hzyuqi1"},{"authorTime":"2018-02-01 11:50:44","codes":[{"authorDate":"2018-05-30 12:16:57","commitOrder":3,"curCode":"  @Test public void testUdfArgumentName() {\n    final CalciteAssert.AssertThat with = withUdf();\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello', \\\"n\\\" => 3))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1 + 2, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"n\\\" => 2, \\\"s\\\" => 'hello'))\")\n        .throws_(\"Duplicate argument name 'n'\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"m\\\" => 2, \\\"s\\\" => 'h'))\")\n        .throws_(\"No match found for function signature \"\n            + \"MY_LEFT(n => <NUMERIC>, m => <NUMERIC>, s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3))\")\n        .throws_(\"No match found for function signature MY_LEFT(n => <NUMERIC>)\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello'))\")\n        .throws_(\"No match found for function signature MY_LEFT(s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 'hello', \\\"s\\\" => 'x'))\")\n        .throws_(\"java.lang.NumberFormatException: For input string: \\\"hello\\\"\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => '1', \\\"s\\\" => 'x'))\")\n        .returns(\"EXPR$0=x\\n\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1, \\\"s\\\" => 0))\")\n        .returns(\"EXPR$0=0\\n\");\n  }\n","date":"2019-08-29 17:01:46","endLine":457,"groupId":"1577","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUdfArgumentName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f5/e868131bc4b69ca95a9e79377fa4de13c4e3ea.src","preCode":"  @Test public void testUdfArgumentName() {\n    final CalciteAssert.AssertThat with = withUdf();\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello', \\\"n\\\" => 3))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1 + 2, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"n\\\" => 2, \\\"s\\\" => 'hello'))\")\n        .throws_(\"Duplicate argument name 'n'\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"m\\\" => 2, \\\"s\\\" => 'h'))\")\n        .throws_(\"No match found for function signature \"\n            + \"MY_LEFT(n => <NUMERIC>, m => <NUMERIC>, s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3))\")\n        .throws_(\"No match found for function signature MY_LEFT(n => <NUMERIC>)\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello'))\")\n        .throws_(\"No match found for function signature MY_LEFT(s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 'hello', \\\"s\\\" => 'x'))\")\n        .throws_(\"No match found for function signature \"\n            + \"MY_LEFT(n => <CHARACTER>, s => <CHARACTER>)\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1, \\\"s\\\" => 0))\")\n        .throws_(\"No match found for function signature \"\n            + \"MY_LEFT(n => <NUMERIC>, s => <NUMERIC>)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":428,"status":"M"},{"authorDate":"2018-02-01 11:50:44","commitOrder":3,"curCode":"  public void testBigDecimalAndLong() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n  }\n","date":"2018-04-26 13:36:39","endLine":905,"groupId":"13330","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBigDecimalAndLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6d/c822a93ca4621757b44c0c3743722e026a7c9a.src","preCode":"  public void testBigDecimalAndLong() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":891,"status":"N"}],"commitId":"01477c42ded991aaa7b14cf72a6e4ea1a20edf5e","commitMessage":"@@@[CALCITE-2302] Implicit type cast support\n\nChanges:\n* Support full implicit type coercion for SQL contexts:\nSet operation.  binary arithmetic exprs.  binary equality\nexprs.  binary comparison exprs.  case when(COALESCE). \nIN operation.  builtin functions.  user defined function(UDF);\n* The SqlValidator now takes a component named `TypeCoercion`\nresponsible for the coercion work.  you can turn off the coercion with\n`SqlValidator#setEnableTypeCoercion(false)`;\n* We follow PostgreSQL and SQL-SERVER conversion style for two integers division. \ni.e. `'9'/2` returns INTEGER 4.\n","date":"2019-08-29 17:01:46","modifiedFileCount":"50","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2019-12-04 02:44:13","codes":[{"authorDate":"2018-05-30 12:16:57","commitOrder":4,"curCode":"  @Test public void testUdfArgumentName() {\n    final CalciteAssert.AssertThat with = withUdf();\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello', \\\"n\\\" => 3))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1 + 2, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"n\\\" => 2, \\\"s\\\" => 'hello'))\")\n        .throws_(\"Duplicate argument name 'n'\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"m\\\" => 2, \\\"s\\\" => 'h'))\")\n        .throws_(\"No match found for function signature \"\n            + \"MY_LEFT(n => <NUMERIC>, m => <NUMERIC>, s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3))\")\n        .throws_(\"No match found for function signature MY_LEFT(n => <NUMERIC>)\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello'))\")\n        .throws_(\"No match found for function signature MY_LEFT(s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 'hello', \\\"s\\\" => 'x'))\")\n        .throws_(\"java.lang.NumberFormatException: For input string: \\\"hello\\\"\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => '1', \\\"s\\\" => 'x'))\")\n        .returns(\"EXPR$0=x\\n\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1, \\\"s\\\" => 0))\")\n        .returns(\"EXPR$0=0\\n\");\n  }\n","date":"2019-08-29 17:01:46","endLine":457,"groupId":"1577","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUdfArgumentName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f5/e868131bc4b69ca95a9e79377fa4de13c4e3ea.src","preCode":"  @Test public void testUdfArgumentName() {\n    final CalciteAssert.AssertThat with = withUdf();\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello', \\\"n\\\" => 3))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1 + 2, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"n\\\" => 2, \\\"s\\\" => 'hello'))\")\n        .throws_(\"Duplicate argument name 'n'\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"m\\\" => 2, \\\"s\\\" => 'h'))\")\n        .throws_(\"No match found for function signature \"\n            + \"MY_LEFT(n => <NUMERIC>, m => <NUMERIC>, s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3))\")\n        .throws_(\"No match found for function signature MY_LEFT(n => <NUMERIC>)\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello'))\")\n        .throws_(\"No match found for function signature MY_LEFT(s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 'hello', \\\"s\\\" => 'x'))\")\n        .throws_(\"java.lang.NumberFormatException: For input string: \\\"hello\\\"\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => '1', \\\"s\\\" => 'x'))\")\n        .returns(\"EXPR$0=x\\n\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1, \\\"s\\\" => 0))\")\n        .returns(\"EXPR$0=0\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":428,"status":"N"},{"authorDate":"2019-12-04 02:44:13","commitOrder":4,"curCode":"  @Test public void testBigDecimalAndLong() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n  }\n","date":"2019-12-14 23:57:27","endLine":956,"groupId":"13330","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBigDecimalAndLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c5/d80c948c190a87d8c2172f1c7bec57902bfed7.src","preCode":"  public void testBigDecimalAndLong() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":942,"status":"M"}],"commitId":"571731b80a58eb095ebac7123285c375e7afff90","commitMessage":"@@@[CALCITE-3559] Update formatting: remove \"// End\" trailers.  move @Test from their own lines\n","date":"2019-12-14 23:57:27","modifiedFileCount":"1961","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testUdfArgumentName() {\n    final CalciteAssert.AssertThat with = withUdf();\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello', \\\"n\\\" => 3))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1 + 2, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"n\\\" => 2, \\\"s\\\" => 'hello'))\")\n        .throws_(\"Duplicate argument name 'n'\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"m\\\" => 2, \\\"s\\\" => 'h'))\")\n        .throws_(\"No match found for function signature \"\n            + \"MY_LEFT(n => <NUMERIC>, m => <NUMERIC>, s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3))\")\n        .throws_(\"No match found for function signature MY_LEFT(n => <NUMERIC>)\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello'))\")\n        .throws_(\"No match found for function signature MY_LEFT(s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 'hello', \\\"s\\\" => 'x'))\")\n        .throws_(\"java.lang.NumberFormatException: For input string: \\\"hello\\\"\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => '1', \\\"s\\\" => 'x'))\")\n        .returns(\"EXPR$0=x\\n\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1, \\\"s\\\" => 0))\")\n        .returns(\"EXPR$0=0\\n\");\n  }\n","date":"2020-04-06 04:57:49","endLine":457,"groupId":"101237","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testUdfArgumentName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/7e85d86a3434aff5736ae15c676405cb52adc6.src","preCode":"  @Test public void testUdfArgumentName() {\n    final CalciteAssert.AssertThat with = withUdf();\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello', \\\"n\\\" => 3))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1 + 2, \\\"s\\\" => 'hello'))\")\n        .returns(\"EXPR$0=hel\\n\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"n\\\" => 2, \\\"s\\\" => 'hello'))\")\n        .throws_(\"Duplicate argument name 'n'\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3, \\\"m\\\" => 2, \\\"s\\\" => 'h'))\")\n        .throws_(\"No match found for function signature \"\n            + \"MY_LEFT(n => <NUMERIC>, m => <NUMERIC>, s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 3))\")\n        .throws_(\"No match found for function signature MY_LEFT(n => <NUMERIC>)\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"s\\\" => 'hello'))\")\n        .throws_(\"No match found for function signature MY_LEFT(s => <CHARACTER>)\");\n    \r\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 'hello', \\\"s\\\" => 'x'))\")\n        .throws_(\"java.lang.NumberFormatException: For input string: \\\"hello\\\"\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => '1', \\\"s\\\" => 'x'))\")\n        .returns(\"EXPR$0=x\\n\");\n    with.query(\"values (\\\"adhoc\\\".my_left(\\\"n\\\" => 1, \\\"s\\\" => 0))\")\n        .returns(\"EXPR$0=0\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":428,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testBigDecimalAndLong() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n  }\n","date":"2020-04-06 04:57:49","endLine":956,"groupId":"101237","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBigDecimalAndLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/7e85d86a3434aff5736ae15c676405cb52adc6.src","preCode":"  @Test public void testBigDecimalAndLong() {\n    final CalciteAssert.AssertThat with = withUdf();\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as double))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as decimal))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n    with.query(\"values \\\"adhoc\\\".\\\"toDouble\\\"(cast(1.0 as float))\")\n            .returns(\"EXPR$0=1.0\\n\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/UdfTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":942,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
