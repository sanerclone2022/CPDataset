[{"authorTime":"2017-03-13 19:11:19","codes":[{"authorDate":"2017-03-13 19:11:19","commitOrder":1,"curCode":"  @Test public void testMatchRecognizeMeasures2() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"   measures STRT.ts as start_ts,\"\n        + \"  FINAL LAST(DOWN.ts) as bottom_ts,\"\n        + \"   LAST(up.ts) as end_ts\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"MEASURES `STRT`.`TS` AS `START_TS`, \"\n        + \"FINAL LAST(`DOWN`.`TS`, 0) AS `BOTTOM_TS`, \"\n        + \"LAST(`UP`.`TS`, 0) AS `END_TS`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE `DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-04-02 11:43:28","endLine":7504,"groupId":"4097","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognizeMeasures2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/56/4ce5fc6613223749e9a6c0acb13d4e8de540f1.src","preCode":"  @Test public void testMatchRecognizeMeasures2() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"   measures STRT.ts as start_ts,\"\n        + \"  FINAL LAST(DOWN.ts) as bottom_ts,\"\n        + \"   LAST(up.ts) as end_ts\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"MEASURES `STRT`.`TS` AS `START_TS`, \"\n        + \"FINAL LAST(`DOWN`.`TS`, 0) AS `BOTTOM_TS`, \"\n        + \"LAST(`UP`.`TS`, 0) AS `END_TS`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE `DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7482,"status":"B"},{"authorDate":"2017-03-13 19:11:19","commitOrder":1,"curCode":"  @Test public void testMatchRecognizeMeasures6() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"   measures \"\n        + \"  FIRST(STRT.ts) as strt_ts,\"\n        + \"  LAST(DOWN.ts) as down_ts,\"\n        + \"  FINAL SUM(DOWN.ts) as sum_down_ts\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"MEASURES FIRST(`STRT`.`TS`, 0) AS `STRT_TS`, \"\n        + \"LAST(`DOWN`.`TS`, 0) AS `DOWN_TS`, \"\n        + \"FINAL SUM(`DOWN`.`TS`) AS `SUM_DOWN_TS`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE `DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-04-02 11:43:28","endLine":7604,"groupId":"4097","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizeMeasures6","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/56/4ce5fc6613223749e9a6c0acb13d4e8de540f1.src","preCode":"  @Test public void testMatchRecognizeMeasures6() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"   measures \"\n        + \"  FIRST(STRT.ts) as strt_ts,\"\n        + \"  LAST(DOWN.ts) as down_ts,\"\n        + \"  FINAL SUM(DOWN.ts) as sum_down_ts\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"MEASURES FIRST(`STRT`.`TS`, 0) AS `STRT_TS`, \"\n        + \"LAST(`DOWN`.`TS`, 0) AS `DOWN_TS`, \"\n        + \"FINAL SUM(`DOWN`.`TS`) AS `SUM_DOWN_TS`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE `DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7581,"status":"B"}],"commitId":"4d20d62d4d752ce4de29a002ec313a758a7cee6e","commitMessage":"@@@[CALCITE-1642] Support MEASURES clause in MATCH_RECOGNIZE (Zhiqiang-He)\n\nClose apache/calcite#400\n","date":"2017-04-02 11:43:28","modifiedFileCount":"15","status":"B","submitter":"Zhiqiang-He"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testMatchRecognizeMeasures2() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"   measures STRT.ts as start_ts,\"\n        + \"  FINAL LAST(DOWN.ts) as bottom_ts,\"\n        + \"   LAST(up.ts) as end_ts\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"MEASURES `STRT`.`TS` AS `START_TS`, \"\n        + \"FINAL LAST(`DOWN`.`TS`, 0) AS `BOTTOM_TS`, \"\n        + \"LAST(`UP`.`TS`, 0) AS `END_TS`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE `DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":7894,"groupId":"10883","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognizeMeasures2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testMatchRecognizeMeasures2() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"   measures STRT.ts as start_ts,\"\n        + \"  FINAL LAST(DOWN.ts) as bottom_ts,\"\n        + \"   LAST(up.ts) as end_ts\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"MEASURES `STRT`.`TS` AS `START_TS`, \"\n        + \"FINAL LAST(`DOWN`.`TS`, 0) AS `BOTTOM_TS`, \"\n        + \"LAST(`UP`.`TS`, 0) AS `END_TS`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE `DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7872,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testMatchRecognizeMeasures6() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"   measures \"\n        + \"  FIRST(STRT.ts) as strt_ts,\"\n        + \"  LAST(DOWN.ts) as down_ts,\"\n        + \"  FINAL SUM(DOWN.ts) as sum_down_ts\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"MEASURES FIRST(`STRT`.`TS`, 0) AS `STRT_TS`, \"\n        + \"LAST(`DOWN`.`TS`, 0) AS `DOWN_TS`, \"\n        + \"FINAL SUM(`DOWN`.`TS`) AS `SUM_DOWN_TS`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE `DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":7994,"groupId":"10883","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizeMeasures6","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testMatchRecognizeMeasures6() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"   measures \"\n        + \"  FIRST(STRT.ts) as strt_ts,\"\n        + \"  LAST(DOWN.ts) as down_ts,\"\n        + \"  FINAL SUM(DOWN.ts) as sum_down_ts\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"MEASURES FIRST(`STRT`.`TS`, 0) AS `STRT_TS`, \"\n        + \"LAST(`DOWN`.`TS`, 0) AS `DOWN_TS`, \"\n        + \"FINAL SUM(`DOWN`.`TS`) AS `SUM_DOWN_TS`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE `DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7971,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
