[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public RelOptCost computeSelfCost(RelOptPlanner planner) {\n    double dRows = RelMetadataQuery.getRowCount(this);\n    double dCpu =\n        RelMetadataQuery.getRowCount(getChild())\n            * program.getExprCount();\n    double dIo = 0;\n    return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n  }\n","date":"2014-11-14 09:39:34","endLine":123,"groupId":"8375","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"computeSelfCost","params":"(RelOptPlannerplanner)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/a1e3d52622ffa53d3bb030842e66182bb2b5d1.src","preCode":"  public RelOptCost computeSelfCost(RelOptPlanner planner) {\n    double dRows = RelMetadataQuery.getRowCount(this);\n    double dCpu =\n        RelMetadataQuery.getRowCount(getChild())\n            * program.getExprCount();\n    double dIo = 0;\n    return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/Calc.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"    public RelOptCost computeSelfCost(RelOptPlanner planner) {\n      double dRows = RelMetadataQuery.getRowCount(this);\n      double dCpu = RelMetadataQuery.getRowCount(getChild())\n          * program.getExprCount();\n      double dIo = 0;\n      return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n    }\n","date":"2014-11-14 09:39:34","endLine":349,"groupId":"8375","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"computeSelfCost","params":"(RelOptPlannerplanner)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/87/bd005449dceba7008e0d77638cbdb9465adc7a.src","preCode":"    public RelOptCost computeSelfCost(RelOptPlanner planner) {\n      double dRows = RelMetadataQuery.getRowCount(this);\n      double dCpu = RelMetadataQuery.getRowCount(getChild())\n          * program.getExprCount();\n      double dIo = 0;\n      return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  public RelOptCost computeSelfCost(RelOptPlanner planner) {\n    double dRows = RelMetadataQuery.getRowCount(this);\n    double dCpu =\n        RelMetadataQuery.getRowCount(getInput())\n            * program.getExprCount();\n    double dIo = 0;\n    return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n  }\n","date":"2014-11-14 10:22:06","endLine":130,"groupId":"6152","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"computeSelfCost","params":"(RelOptPlannerplanner)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/80/3c7836f23e46d5b67f0f7ae4d8c4b795090dff.src","preCode":"  public RelOptCost computeSelfCost(RelOptPlanner planner) {\n    double dRows = RelMetadataQuery.getRowCount(this);\n    double dCpu =\n        RelMetadataQuery.getRowCount(getChild())\n            * program.getExprCount();\n    double dIo = 0;\n    return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/Calc.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"    public RelOptCost computeSelfCost(RelOptPlanner planner) {\n      double dRows = RelMetadataQuery.getRowCount(this);\n      double dCpu = RelMetadataQuery.getRowCount(getInput())\n          * program.getExprCount();\n      double dIo = 0;\n      return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n    }\n","date":"2014-11-14 10:22:06","endLine":399,"groupId":"6152","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"computeSelfCost","params":"(RelOptPlannerplanner)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f7/93a436f11f4263d34b8874428b28afd62587de.src","preCode":"    public RelOptCost computeSelfCost(RelOptPlanner planner) {\n      double dRows = RelMetadataQuery.getRowCount(this);\n      double dCpu = RelMetadataQuery.getRowCount(getChild())\n          * program.getExprCount();\n      double dIo = 0;\n      return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"M"}],"commitId":"a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55","commitMessage":"@@@[CALCITE-306] Standardize code style for \"import package.*;\"\n\nRename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].\n\nMake many inner classes of EnumerableRules (e.g. EnumerableFilter.  EnumerableFilterRule) top-level classes.\n\nApply a consistent formatting convention for string literals split over multiple lines.\n\nRename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.\n\nChange occurrences of \"optiq\" and \"eigenbase\" in java code to \"calcite\".\n","date":"2014-11-14 10:22:06","modifiedFileCount":"1156","status":"M","submitter":"Julian Hyde"},{"authorTime":"2015-07-12 05:56:42","codes":[{"authorDate":"2015-07-12 05:56:42","commitOrder":3,"curCode":"  @Override public RelOptCost computeSelfCost(RelOptPlanner planner,\n      RelMetadataQuery mq) {\n    double dRows = mq.getRowCount(this);\n    double dCpu = mq.getRowCount(getInput())\n        * program.getExprCount();\n    double dIo = 0;\n    return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n  }\n","date":"2016-01-10 16:51:25","endLine":145,"groupId":"6152","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"computeSelfCost","params":"(RelOptPlannerplanner@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/e5fcbd4c57e44b32a746674730ef08774b788a.src","preCode":"  public RelOptCost computeSelfCost(RelOptPlanner planner) {\n    double dRows = RelMetadataQuery.getRowCount(this);\n    double dCpu =\n        RelMetadataQuery.getRowCount(getInput())\n            * program.getExprCount();\n    double dIo = 0;\n    return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/Calc.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2015-07-12 05:56:42","commitOrder":3,"curCode":"    public RelOptCost computeSelfCost(RelOptPlanner planner,\n        RelMetadataQuery mq) {\n      double dRows = mq.getRowCount(this);\n      double dCpu = mq.getRowCount(getInput())\n          * program.getExprCount();\n      double dIo = 0;\n      return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n    }\n","date":"2016-01-10 16:51:25","endLine":332,"groupId":"6152","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"computeSelfCost","params":"(RelOptPlannerplanner@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/8bc892bac5fe22873426def868d62f3b33b450.src","preCode":"    public RelOptCost computeSelfCost(RelOptPlanner planner) {\n      double dRows = RelMetadataQuery.getRowCount(this);\n      double dCpu = RelMetadataQuery.getRowCount(getInput())\n          * program.getExprCount();\n      double dIo = 0;\n      return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"}],"commitId":"cabdcf44e4aec4d4ceea7f97c8c6fd9e9dbd36b1","commitMessage":"@@@[CALCITE-794] Detect cycles when computing statistics\n\nMake RelMetadataQuery methods non-static. Each active call is\nregistered in the RelMetadataQuery instance; it throws\nCyclicMetadataException when it detects a cycle.  and the caller can\ncatch it to return a sensible default value for the particular kind of\nmetadata.\n\nChange signature of FlatLists.of(Object...) to\nFlatLists.copyOf(Comparable...).\n\nTemporarily disable all failing tests.\n\nAdd metadata for EnumerableLimit.\n","date":"2016-01-10 16:51:25","modifiedFileCount":"122","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2015-07-12 05:56:42","commitOrder":4,"curCode":"  @Override public RelOptCost computeSelfCost(RelOptPlanner planner,\n      RelMetadataQuery mq) {\n    double dRows = mq.getRowCount(this);\n    double dCpu = mq.getRowCount(getInput())\n        * program.getExprCount();\n    double dIo = 0;\n    return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n  }\n","date":"2016-01-10 16:51:25","endLine":145,"groupId":"6152","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"computeSelfCost","params":"(RelOptPlannerplanner@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/e5fcbd4c57e44b32a746674730ef08774b788a.src","preCode":"  @Override public RelOptCost computeSelfCost(RelOptPlanner planner,\n      RelMetadataQuery mq) {\n    double dRows = mq.getRowCount(this);\n    double dCpu = mq.getRowCount(getInput())\n        * program.getExprCount();\n    double dIo = 0;\n    return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/Calc.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"},{"authorDate":"2020-09-29 22:09:05","commitOrder":4,"curCode":"    @Override public RelOptCost computeSelfCost(RelOptPlanner planner,\n        RelMetadataQuery mq) {\n      double dRows = mq.getRowCount(this);\n      double dCpu = mq.getRowCount(getInput())\n          * program.getExprCount();\n      double dIo = 0;\n      return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n    }\n","date":"2020-10-07 05:42:47","endLine":488,"groupId":"6152","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"computeSelfCost","params":"(RelOptPlannerplanner@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/23/fcd43272a207eff7a360df23d09a85435c3902.src","preCode":"    public RelOptCost computeSelfCost(RelOptPlanner planner,\n        RelMetadataQuery mq) {\n      double dRows = mq.getRowCount(this);\n      double dCpu = mq.getRowCount(getInput())\n          * program.getExprCount();\n      double dIo = 0;\n      return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":481,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  @Override public @Nullable RelOptCost computeSelfCost(RelOptPlanner planner,\n      RelMetadataQuery mq) {\n    double dRows = mq.getRowCount(this);\n    double dCpu = mq.getRowCount(getInput())\n        * program.getExprCount();\n    double dIo = 0;\n    return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n  }\n","date":"2020-11-30 06:45:33","endLine":178,"groupId":"102109","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"computeSelfCost","params":"(RelOptPlannerplanner@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/19/3c97cc09f715cd0d9ffeccd44225a25f8dd942.src","preCode":"  @Override public RelOptCost computeSelfCost(RelOptPlanner planner,\n      RelMetadataQuery mq) {\n    double dRows = mq.getRowCount(this);\n    double dCpu = mq.getRowCount(getInput())\n        * program.getExprCount();\n    double dIo = 0;\n    return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/core/Calc.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"    @Override public @Nullable RelOptCost computeSelfCost(RelOptPlanner planner,\n        RelMetadataQuery mq) {\n      double dRows = mq.getRowCount(this);\n      double dCpu = mq.getRowCount(getInput())\n          * program.getExprCount();\n      double dIo = 0;\n      return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n    }\n","date":"2020-11-30 06:45:33","endLine":494,"groupId":"102109","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"computeSelfCost","params":"(RelOptPlannerplanner@RelMetadataQuerymq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6a/ed23c58e84f4cbbb3c9821b817c1b4ade0fea9.src","preCode":"    @Override public RelOptCost computeSelfCost(RelOptPlanner planner,\n        RelMetadataQuery mq) {\n      double dRows = mq.getRowCount(this);\n      double dCpu = mq.getRowCount(getInput())\n          * program.getExprCount();\n      double dIo = 0;\n      return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":487,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
