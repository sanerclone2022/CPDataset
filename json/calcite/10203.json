[{"authorTime":"2017-03-08 03:10:24","codes":[{"authorDate":"2017-03-08 03:10:24","commitOrder":1,"curCode":"  @Test public void testTimestampOrderBy() throws SQLException {\n    Properties info = new Properties();\n    info.put(\"model\", jsonPath(\"bug\"));\n    final String sql = \"select \\\"EMPNO\\\",\\\"JOINTIMES\\\" from \\\"DATE\\\"\\n\"\n        + \"order by \\\"JOINTIMES\\\"\";\n    try (Connection connection =\n             DriverManager.getConnection(\"jdbc:calcite:\", info);\n         Statement statement = connection.createStatement();\n         ResultSet resultSet = statement.executeQuery(sql)) {\n      assertThat(resultSet.next(), is(true));\n      final Timestamp timestamp = resultSet.getTimestamp(2);\n      Assert.assertThat(timestamp,\n          is(java.sql.Timestamp.valueOf(\"1996-08-03 00:01:02\")));\n    }\n  }\n","date":"2017-03-10 05:56:43","endLine":561,"groupId":"8890","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimestampOrderBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/78/a396ff3f5ea3d27f2b65d26096683047652751.src","preCode":"  @Test public void testTimestampOrderBy() throws SQLException {\n    Properties info = new Properties();\n    info.put(\"model\", jsonPath(\"bug\"));\n    final String sql = \"select \\\"EMPNO\\\",\\\"JOINTIMES\\\" from \\\"DATE\\\"\\n\"\n        + \"order by \\\"JOINTIMES\\\"\";\n    try (Connection connection =\n             DriverManager.getConnection(\"jdbc:calcite:\", info);\n         Statement statement = connection.createStatement();\n         ResultSet resultSet = statement.executeQuery(sql)) {\n      assertThat(resultSet.next(), is(true));\n      final Timestamp timestamp = resultSet.getTimestamp(2);\n      Assert.assertThat(timestamp,\n          is(java.sql.Timestamp.valueOf(\"1996-08-03 00:01:02\")));\n    }\n  }\n","realPath":"example/csv/src/test/java/org/apache/calcite/test/CsvTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":547,"status":"B"},{"authorDate":"2017-03-08 03:10:24","commitOrder":1,"curCode":"  @Test public void testTimestampGroupByAndOrderBy() throws SQLException {\n    Properties info = new Properties();\n    info.put(\"model\", jsonPath(\"bug\"));\n    final String sql = \"select \\\"EMPNO\\\", \\\"JOINTIMES\\\" from \\\"DATE\\\"\\n\"\n        + \"group by \\\"EMPNO\\\",\\\"JOINTIMES\\\" order by \\\"JOINTIMES\\\"\";\n    try (Connection connection =\n             DriverManager.getConnection(\"jdbc:calcite:\", info);\n         Statement statement = connection.createStatement();\n         ResultSet resultSet = statement.executeQuery(sql)) {\n      assertThat(resultSet.next(), is(true));\n      final Timestamp timestamp = resultSet.getTimestamp(2);\n      Assert.assertThat(timestamp,\n          is(java.sql.Timestamp.valueOf(\"1996-08-03 00:01:02\")));\n    }\n  }\n","date":"2017-03-10 05:56:43","endLine":579,"groupId":"8890","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimestampGroupByAndOrderBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/78/a396ff3f5ea3d27f2b65d26096683047652751.src","preCode":"  @Test public void testTimestampGroupByAndOrderBy() throws SQLException {\n    Properties info = new Properties();\n    info.put(\"model\", jsonPath(\"bug\"));\n    final String sql = \"select \\\"EMPNO\\\", \\\"JOINTIMES\\\" from \\\"DATE\\\"\\n\"\n        + \"group by \\\"EMPNO\\\",\\\"JOINTIMES\\\" order by \\\"JOINTIMES\\\"\";\n    try (Connection connection =\n             DriverManager.getConnection(\"jdbc:calcite:\", info);\n         Statement statement = connection.createStatement();\n         ResultSet resultSet = statement.executeQuery(sql)) {\n      assertThat(resultSet.next(), is(true));\n      final Timestamp timestamp = resultSet.getTimestamp(2);\n      Assert.assertThat(timestamp,\n          is(java.sql.Timestamp.valueOf(\"1996-08-03 00:01:02\")));\n    }\n  }\n","realPath":"example/csv/src/test/java/org/apache/calcite/test/CsvTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":565,"status":"B"}],"commitId":"8e0d76bb98bf201373fad769c54b6e17f9383bd7","commitMessage":"@@@[CALCITE-1673] In CSV adapter.  query with ORDER BY or GROUP BY on TIMESTAMP column throws CompileException (Gangadhar Kairi)\n\nRework to use the same solution as in [CALCITE-1569]; clean up tests (Julian Hyde)\n\nClose apache/calcite#389\n","date":"2017-03-10 05:56:43","modifiedFileCount":"2","status":"B","submitter":"kaiga01"},{"authorTime":"2019-12-03 04:09:18","codes":[{"authorDate":"2019-12-03 04:09:18","commitOrder":2,"curCode":"  @Test public void testTimestampOrderBy() throws SQLException {\n    Properties info = new Properties();\n    info.put(\"model\", jsonPath(\"bug\"));\n    final String sql = \"select \\\"EMPNO\\\",\\\"JOINTIMES\\\" from \\\"DATE\\\"\\n\"\n        + \"order by \\\"JOINTIMES\\\"\";\n    try (Connection connection =\n             DriverManager.getConnection(\"jdbc:calcite:\", info);\n         Statement statement = connection.createStatement();\n         ResultSet resultSet = statement.executeQuery(sql)) {\n      assertThat(resultSet.next(), is(true));\n      final Timestamp timestamp = resultSet.getTimestamp(2);\n      assertThat(timestamp, is(valueOf(\"1996-08-03 00:01:02\")));\n    }\n  }\n","date":"2019-12-04 03:17:33","endLine":676,"groupId":"8890","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimestampOrderBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/903145e7dc8d471da1c0a126d9941a24394a0a.src","preCode":"  @Test public void testTimestampOrderBy() throws SQLException {\n    Properties info = new Properties();\n    info.put(\"model\", jsonPath(\"bug\"));\n    final String sql = \"select \\\"EMPNO\\\",\\\"JOINTIMES\\\" from \\\"DATE\\\"\\n\"\n        + \"order by \\\"JOINTIMES\\\"\";\n    try (Connection connection =\n             DriverManager.getConnection(\"jdbc:calcite:\", info);\n         Statement statement = connection.createStatement();\n         ResultSet resultSet = statement.executeQuery(sql)) {\n      assertThat(resultSet.next(), is(true));\n      final Timestamp timestamp = resultSet.getTimestamp(2);\n      Assert.assertThat(timestamp,\n          is(java.sql.Timestamp.valueOf(\"1996-08-03 00:01:02\")));\n    }\n  }\n","realPath":"example/csv/src/test/java/org/apache/calcite/test/CsvTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":663,"status":"M"},{"authorDate":"2019-12-03 04:09:18","commitOrder":2,"curCode":"  @Test public void testTimestampGroupByAndOrderBy() throws SQLException {\n    Properties info = new Properties();\n    info.put(\"model\", jsonPath(\"bug\"));\n    final String sql = \"select \\\"EMPNO\\\", \\\"JOINTIMES\\\" from \\\"DATE\\\"\\n\"\n        + \"group by \\\"EMPNO\\\",\\\"JOINTIMES\\\" order by \\\"JOINTIMES\\\"\";\n    try (Connection connection =\n             DriverManager.getConnection(\"jdbc:calcite:\", info);\n         Statement statement = connection.createStatement();\n         ResultSet resultSet = statement.executeQuery(sql)) {\n      assertThat(resultSet.next(), is(true));\n      final Timestamp timestamp = resultSet.getTimestamp(2);\n      assertThat(timestamp, is(valueOf(\"1996-08-03 00:01:02\")));\n    }\n  }\n","date":"2019-12-04 03:17:33","endLine":693,"groupId":"8890","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimestampGroupByAndOrderBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/903145e7dc8d471da1c0a126d9941a24394a0a.src","preCode":"  @Test public void testTimestampGroupByAndOrderBy() throws SQLException {\n    Properties info = new Properties();\n    info.put(\"model\", jsonPath(\"bug\"));\n    final String sql = \"select \\\"EMPNO\\\", \\\"JOINTIMES\\\" from \\\"DATE\\\"\\n\"\n        + \"group by \\\"EMPNO\\\",\\\"JOINTIMES\\\" order by \\\"JOINTIMES\\\"\";\n    try (Connection connection =\n             DriverManager.getConnection(\"jdbc:calcite:\", info);\n         Statement statement = connection.createStatement();\n         ResultSet resultSet = statement.executeQuery(sql)) {\n      assertThat(resultSet.next(), is(true));\n      final Timestamp timestamp = resultSet.getTimestamp(2);\n      Assert.assertThat(timestamp,\n          is(java.sql.Timestamp.valueOf(\"1996-08-03 00:01:02\")));\n    }\n  }\n","realPath":"example/csv/src/test/java/org/apache/calcite/test/CsvTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":680,"status":"M"}],"commitId":"60d27ee3162acead99f2510e36d7591add78e5a6","commitMessage":"@@@[CALCITE-2457] JUnit 4 -> 5: trivial renames\n","date":"2019-12-04 03:17:33","modifiedFileCount":"177","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testTimestampOrderBy() throws SQLException {\n    Properties info = new Properties();\n    info.put(\"model\", jsonPath(\"bug\"));\n    final String sql = \"select \\\"EMPNO\\\",\\\"JOINTIMES\\\" from \\\"DATE\\\"\\n\"\n        + \"order by \\\"JOINTIMES\\\"\";\n    try (Connection connection =\n             DriverManager.getConnection(\"jdbc:calcite:\", info);\n         Statement statement = connection.createStatement();\n         ResultSet resultSet = statement.executeQuery(sql)) {\n      assertThat(resultSet.next(), is(true));\n      final Timestamp timestamp = resultSet.getTimestamp(2);\n      assertThat(timestamp, is(valueOf(\"1996-08-03 00:01:02\")));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":675,"groupId":"10203","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimestampOrderBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6d/ac7f6f48fc93fb4e763002615eab389a0465c3.src","preCode":"  @Test public void testTimestampOrderBy() throws SQLException {\n    Properties info = new Properties();\n    info.put(\"model\", jsonPath(\"bug\"));\n    final String sql = \"select \\\"EMPNO\\\",\\\"JOINTIMES\\\" from \\\"DATE\\\"\\n\"\n        + \"order by \\\"JOINTIMES\\\"\";\n    try (Connection connection =\n             DriverManager.getConnection(\"jdbc:calcite:\", info);\n         Statement statement = connection.createStatement();\n         ResultSet resultSet = statement.executeQuery(sql)) {\n      assertThat(resultSet.next(), is(true));\n      final Timestamp timestamp = resultSet.getTimestamp(2);\n      assertThat(timestamp, is(valueOf(\"1996-08-03 00:01:02\")));\n    }\n  }\n","realPath":"example/csv/src/test/java/org/apache/calcite/test/CsvTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":662,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testTimestampGroupByAndOrderBy() throws SQLException {\n    Properties info = new Properties();\n    info.put(\"model\", jsonPath(\"bug\"));\n    final String sql = \"select \\\"EMPNO\\\", \\\"JOINTIMES\\\" from \\\"DATE\\\"\\n\"\n        + \"group by \\\"EMPNO\\\",\\\"JOINTIMES\\\" order by \\\"JOINTIMES\\\"\";\n    try (Connection connection =\n             DriverManager.getConnection(\"jdbc:calcite:\", info);\n         Statement statement = connection.createStatement();\n         ResultSet resultSet = statement.executeQuery(sql)) {\n      assertThat(resultSet.next(), is(true));\n      final Timestamp timestamp = resultSet.getTimestamp(2);\n      assertThat(timestamp, is(valueOf(\"1996-08-03 00:01:02\")));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":692,"groupId":"10203","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimestampGroupByAndOrderBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6d/ac7f6f48fc93fb4e763002615eab389a0465c3.src","preCode":"  @Test public void testTimestampGroupByAndOrderBy() throws SQLException {\n    Properties info = new Properties();\n    info.put(\"model\", jsonPath(\"bug\"));\n    final String sql = \"select \\\"EMPNO\\\", \\\"JOINTIMES\\\" from \\\"DATE\\\"\\n\"\n        + \"group by \\\"EMPNO\\\",\\\"JOINTIMES\\\" order by \\\"JOINTIMES\\\"\";\n    try (Connection connection =\n             DriverManager.getConnection(\"jdbc:calcite:\", info);\n         Statement statement = connection.createStatement();\n         ResultSet resultSet = statement.executeQuery(sql)) {\n      assertThat(resultSet.next(), is(true));\n      final Timestamp timestamp = resultSet.getTimestamp(2);\n      assertThat(timestamp, is(valueOf(\"1996-08-03 00:01:02\")));\n    }\n  }\n","realPath":"example/csv/src/test/java/org/apache/calcite/test/CsvTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":679,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
