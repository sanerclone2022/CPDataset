[{"authorTime":"2016-11-03 13:30:04","codes":[{"authorDate":"2016-11-03 13:30:04","commitOrder":1,"curCode":"  public synchronized Schema create(SchemaPlus parentSchema, String name,\n      Map<String, Object> operand) {\n    Map map = (Map) operand;\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pbxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    boolean allowSpatialFunctions = true;\n    if (map.containsKey(ALLOW_SPATIAL_FUNCTIONS)) {\n      allowSpatialFunctions = Boolean.valueOf((String) map.get(ALLOW_SPATIAL_FUNCTIONS));\n    }\n\n    if (allowSpatialFunctions) {\n      ModelHandler.addFunctions(parentSchema, null, ImmutableList.<String>of(),\n          GeoFunctions.class.getName(), \"*\", true);\n    }\n\n    return new GeodeSchema(locatorHost, locatorPort, regionNames,\n        pbxSerializablePackagePath, parentSchema);\n  }\n","date":"2018-02-17 02:18:02","endLine":66,"groupId":"9745","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(SchemaPlusparentSchema@Stringname@Map<String@Object>operand)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/80/52925d806dc1c5f2e50cbb7d6bb8941bf782df.src","preCode":"  public synchronized Schema create(SchemaPlus parentSchema, String name,\n      Map<String, Object> operand) {\n    Map map = (Map) operand;\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pbxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    boolean allowSpatialFunctions = true;\n    if (map.containsKey(ALLOW_SPATIAL_FUNCTIONS)) {\n      allowSpatialFunctions = Boolean.valueOf((String) map.get(ALLOW_SPATIAL_FUNCTIONS));\n    }\n\n    if (allowSpatialFunctions) {\n      ModelHandler.addFunctions(parentSchema, null, ImmutableList.<String>of(),\n          GeoFunctions.class.getName(), \"*\", true);\n    }\n\n    return new GeodeSchema(locatorHost, locatorPort, regionNames,\n        pbxSerializablePackagePath, parentSchema);\n  }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeSchemaFactory.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2016-11-03 13:30:04","commitOrder":1,"curCode":"  @Override public Schema create(SchemaPlus parentSchema,\n      String name, Map<String, Object> operand) {\n    Map map = (Map) operand;\n\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pdxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    return new GeodeSimpleSchema(locatorHost, locatorPort, regionNames, pdxSerializablePackagePath);\n  }\n","date":"2018-02-17 02:18:02","endLine":50,"groupId":"9745","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(SchemaPlusparentSchema@Stringname@Map<String@Object>operand)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/b3a26913e737cfad40bf1b20739f4897425b25.src","preCode":"  @Override public Schema create(SchemaPlus parentSchema,\n      String name, Map<String, Object> operand) {\n    Map map = (Map) operand;\n\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pdxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    return new GeodeSimpleSchema(locatorHost, locatorPort, regionNames, pdxSerializablePackagePath);\n  }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/simple/GeodeSimpleSchemaFactory.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"}],"commitId":"707f4de9cafc474d0daf807b1e4c339f6eb42d7e","commitMessage":"@@@[CALCITE-2059] Apache Geode Adapter (Christian Tzolov)\n\n- Downgrade Geode from 1.4.0 to 1.3.0 - Geode server allows connections\n  only from clients with same or lower version\n- Add links to presentations and tutorials\n\nClose apache/calcite#581\n","date":"2018-02-17 02:18:02","modifiedFileCount":"0","status":"B","submitter":"Christian Tzolov"},{"authorTime":"2016-11-03 13:30:04","codes":[{"authorDate":"2018-07-06 04:21:59","commitOrder":2,"curCode":"  public synchronized Schema create(SchemaPlus parentSchema, String name,\n      Map<String, Object> operand) {\n    Map map = (Map) operand;\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pbxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    boolean allowSpatialFunctions = true;\n    if (map.containsKey(ALLOW_SPATIAL_FUNCTIONS)) {\n      allowSpatialFunctions = Boolean.valueOf((String) map.get(ALLOW_SPATIAL_FUNCTIONS));\n    }\n\n    if (allowSpatialFunctions) {\n      ModelHandler.addFunctions(parentSchema, null, ImmutableList.of(),\n          GeoFunctions.class.getName(), \"*\", true);\n    }\n\n    return new GeodeSchema(locatorHost, locatorPort, regionNames,\n        pbxSerializablePackagePath, parentSchema);\n  }\n","date":"2018-07-09 01:16:26","endLine":66,"groupId":"9745","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(SchemaPlusparentSchema@Stringname@Map<String@Object>operand)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/03/48a0d78a03a7b45edd8fe636980a516c0f4ab6.src","preCode":"  public synchronized Schema create(SchemaPlus parentSchema, String name,\n      Map<String, Object> operand) {\n    Map map = (Map) operand;\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pbxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    boolean allowSpatialFunctions = true;\n    if (map.containsKey(ALLOW_SPATIAL_FUNCTIONS)) {\n      allowSpatialFunctions = Boolean.valueOf((String) map.get(ALLOW_SPATIAL_FUNCTIONS));\n    }\n\n    if (allowSpatialFunctions) {\n      ModelHandler.addFunctions(parentSchema, null, ImmutableList.<String>of(),\n          GeoFunctions.class.getName(), \"*\", true);\n    }\n\n    return new GeodeSchema(locatorHost, locatorPort, regionNames,\n        pbxSerializablePackagePath, parentSchema);\n  }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeSchemaFactory.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2016-11-03 13:30:04","commitOrder":2,"curCode":"  @Override public Schema create(SchemaPlus parentSchema,\n      String name, Map<String, Object> operand) {\n    Map map = (Map) operand;\n\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pdxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    return new GeodeSimpleSchema(locatorHost, locatorPort, regionNames, pdxSerializablePackagePath);\n  }\n","date":"2018-02-17 02:18:02","endLine":50,"groupId":"9745","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(SchemaPlusparentSchema@Stringname@Map<String@Object>operand)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/b3a26913e737cfad40bf1b20739f4897425b25.src","preCode":"  @Override public Schema create(SchemaPlus parentSchema,\n      String name, Map<String, Object> operand) {\n    Map map = (Map) operand;\n\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pdxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    return new GeodeSimpleSchema(locatorHost, locatorPort, regionNames, pdxSerializablePackagePath);\n  }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/simple/GeodeSimpleSchemaFactory.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"N"}],"commitId":"d59b639d27da704f00eff616324a2c04aa06f84c","commitMessage":"@@@[CALCITE-2259] Allow Java 8 syntax\n\nIn summary: use lambdas where possible.  switch from Guava function\ntypes to Java function types or lambdas.  but continue to use Guava\ncomponents (such as immutable collections and cache) that have no\nequivalent in the Java runtime.\n\n1. Change single-abstract-method (SAM) classes to lambdas. Preserve\nformatting wherever possible.\n\n2. Change AssertQuery.returns argument type from Guava Function to Java\nConsumer. If you are using a lambda and see 'returns is deprecated'. \nremove the 'return null;' line.  and the lambda will become a Consumer\n(whose return is void).\n\n3. Change RelOptRuleOperand and RelOptRule.operand methods to take Java\nPredicate rather than Guava Predicate.\n\n4. Change the argument of Hook.add and .addThread from Guava Function to\nJava Consumer.\n\n5. Change 'list.toArray(new T[list.size()])' to 'list.toArray(new T[0])'\nbecause the latter is simpler.  and just as efficient on recent Java\nversions.\n\n6. Resource references; change \"try (Closeable ignore = foo())\" to \"try\n  (foo())\".  especially uses of TryThreadLocal and Hook.Closeable.\n\n7. Convert linq4j Function1 to java Function.  Function2 to java BiFunction\n\n8. Fix occurrences of Intellij's \"Explicit type can be replaced with\n<>\" inspection. (Occurs for \"List<String> list = new\nArrayList<String>();\".)\n\n9. Change Guava Preconditions.checkNotNull to Java\nObjects.requireNonNull. (Kevin Risden)\n\n10. Break out anonymous classes and fix dependency problems.\n\n11. Use CacheLoader.of(Function) where possible.\n\n12. Replace sub-classes of ThreadLocal with ThreadLocal.withInitial().\n\n13. Replace Guava collection methods with calls to Java collection types. \nfor example replace Lists.newArrayList() with new ArrayList<>(). \nMaps.newHashSet() with new HashSet<>().  similarly Sets.\n\n14. Replace Guava Joiner with String.join.\n\n15. Replace Collections.emptyList() with ImmutableList.of() in a few\nplaces.\n\nFor backwards compatibility.  we preserved (and deprecated) the old\nmethods that used Guava types. In a few cases where new and old have\nthe same signature (after erasure).  we could not add a method with the\nsame name.  so we gave the new method a \"J\" suffix. Examples include\nHook.property and .propertyJ.  RelOptRule.operand and .operandJ.\n\nIn test code.  we have not slavishly ensured backwards compatibility.\n\nWe do not intend to remove uses of Guava's immutable collections.\n\nWe have ignored Intellij's \"Pseudo functional style code\" inspection\nmost of the time.  but in a few cases have converted Lists.transform(). \nIterables.transform().  and Iterables.filter() into Java streams. Use\nthe Util.toImmutableList() collector if the result is to be an\nimmutable list. Use Util.transform() rather than Lists.transform()\nif you have a Java function rather than a Guava function or lambda.\n\nNot covered in this change (might be done in future):\n* Convert Collections.sort(list) to list.sort.\n* Review uses of 'for (Map.Entry<K.  V> e : map.entrySet())' and see\n  whether it makes sense to convert to 'map.forEach((k.  v) ->\n  ...)'. Intellij inspection is called 'Replace with Map.forEach'.\n\nBreaking changes:\n* LatticeStatisticProvider.Factory.  result of RexUtil.notFun().  and\n  arguments to Mappings.target() are Function (was Guava.  now Java)\n* Argument to SqlSpecialOperator.TokenSequence.parser() is Predicate\n  (was Guava.  now Java)\n* AggregateNode.AccumulatorFactory extends Supplier (was Guava.  now Java)\n","date":"2018-07-09 01:16:26","modifiedFileCount":"514","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-11-03 13:30:04","codes":[{"authorDate":"2018-09-13 23:37:20","commitOrder":3,"curCode":"  public synchronized Schema create(SchemaPlus parentSchema, String name,\n      Map<String, Object> operand) {\n    Map map = (Map) operand;\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pbxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    boolean allowSpatialFunctions = true;\n    if (map.containsKey(ALLOW_SPATIAL_FUNCTIONS)) {\n      allowSpatialFunctions = Boolean.valueOf((String) map.get(ALLOW_SPATIAL_FUNCTIONS));\n    }\n\n    if (allowSpatialFunctions) {\n      ModelHandler.addFunctions(parentSchema, null, ImmutableList.of(),\n          GeoFunctions.class.getName(), \"*\", true);\n    }\n\n    return new GeodeSchema(locatorHost, locatorPort, Arrays.asList(regionNames),\n        pbxSerializablePackagePath);\n  }\n","date":"2018-09-26 02:04:36","endLine":67,"groupId":"9745","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(SchemaPlusparentSchema@Stringname@Map<String@Object>operand)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e4/36ff19b8e57f4ecfe4b5ea81c0101502fc6bc5.src","preCode":"  public synchronized Schema create(SchemaPlus parentSchema, String name,\n      Map<String, Object> operand) {\n    Map map = (Map) operand;\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pbxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    boolean allowSpatialFunctions = true;\n    if (map.containsKey(ALLOW_SPATIAL_FUNCTIONS)) {\n      allowSpatialFunctions = Boolean.valueOf((String) map.get(ALLOW_SPATIAL_FUNCTIONS));\n    }\n\n    if (allowSpatialFunctions) {\n      ModelHandler.addFunctions(parentSchema, null, ImmutableList.of(),\n          GeoFunctions.class.getName(), \"*\", true);\n    }\n\n    return new GeodeSchema(locatorHost, locatorPort, regionNames,\n        pbxSerializablePackagePath, parentSchema);\n  }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeSchemaFactory.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2016-11-03 13:30:04","commitOrder":3,"curCode":"  @Override public Schema create(SchemaPlus parentSchema,\n      String name, Map<String, Object> operand) {\n    Map map = (Map) operand;\n\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pdxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    return new GeodeSimpleSchema(locatorHost, locatorPort, regionNames, pdxSerializablePackagePath);\n  }\n","date":"2018-02-17 02:18:02","endLine":50,"groupId":"9745","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(SchemaPlusparentSchema@Stringname@Map<String@Object>operand)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/b3a26913e737cfad40bf1b20739f4897425b25.src","preCode":"  @Override public Schema create(SchemaPlus parentSchema,\n      String name, Map<String, Object> operand) {\n    Map map = (Map) operand;\n\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pdxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    return new GeodeSimpleSchema(locatorHost, locatorPort, regionNames, pdxSerializablePackagePath);\n  }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/simple/GeodeSimpleSchemaFactory.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"N"}],"commitId":"ed424ed81d0de66fcfd6a5352f00fb99cc514882","commitMessage":"@@@[CALCITE-2588] Run Geode Adapter tests with an Embedded Instance\n\nPart of the effort to increase test coverage for adapters. Enables execution of all Geode adapter tests during CI build (instead of manual run).\n\nCreate special JUnit Rule (`GeodeEmbeddedPolicy`) which starts / stops embedded Geode instance once for all the tests.\n\nModify GeodeSchema and GeodeTable to accept exising geode instance in the constructor instance of connection parameters.\n\nIgnore two tests which currently fail for both embedded and external instance(s). These bugs will be addressed separately\n\nLocal test dataset is taken from `calcite-test-dataset` project (the one which is used for integration testing). Re-use `zips-mini.json` from mongo/elastic adapters.\n\nCloses apache/calcite#857\n","date":"2018-09-26 02:04:36","modifiedFileCount":"13","status":"M","submitter":"Andrei Sereda"},{"authorTime":"2016-11-03 13:30:04","codes":[{"authorDate":"2019-02-27 12:21:57","commitOrder":4,"curCode":"  public synchronized Schema create(SchemaPlus parentSchema, String name,\n      Map<String, Object> operand) {\n    Map map = (Map) operand;\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pbxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    boolean allowSpatialFunctions = true;\n    if (map.containsKey(ALLOW_SPATIAL_FUNCTIONS)) {\n      allowSpatialFunctions = Boolean.valueOf((String) map.get(ALLOW_SPATIAL_FUNCTIONS));\n    }\n\n    if (allowSpatialFunctions) {\n      ModelHandler.addFunctions(parentSchema, null, ImmutableList.of(),\n          GeoFunctions.class.getName(), \"*\", true);\n    }\n\n    return new GeodeSchema(\n        createClientCache(locatorHost, locatorPort, pbxSerializablePackagePath, true),\n        Arrays.asList(regionNames));\n  }\n","date":"2019-03-28 07:21:42","endLine":70,"groupId":"9745","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(SchemaPlusparentSchema@Stringname@Map<String@Object>operand)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/10/66511f802f655f23c9082248546e7bc74bff9e.src","preCode":"  public synchronized Schema create(SchemaPlus parentSchema, String name,\n      Map<String, Object> operand) {\n    Map map = (Map) operand;\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pbxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    boolean allowSpatialFunctions = true;\n    if (map.containsKey(ALLOW_SPATIAL_FUNCTIONS)) {\n      allowSpatialFunctions = Boolean.valueOf((String) map.get(ALLOW_SPATIAL_FUNCTIONS));\n    }\n\n    if (allowSpatialFunctions) {\n      ModelHandler.addFunctions(parentSchema, null, ImmutableList.of(),\n          GeoFunctions.class.getName(), \"*\", true);\n    }\n\n    return new GeodeSchema(locatorHost, locatorPort, Arrays.asList(regionNames),\n        pbxSerializablePackagePath);\n  }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeSchemaFactory.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2016-11-03 13:30:04","commitOrder":4,"curCode":"  @Override public Schema create(SchemaPlus parentSchema,\n      String name, Map<String, Object> operand) {\n    Map map = (Map) operand;\n\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pdxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    return new GeodeSimpleSchema(locatorHost, locatorPort, regionNames, pdxSerializablePackagePath);\n  }\n","date":"2018-02-17 02:18:02","endLine":50,"groupId":"9745","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(SchemaPlusparentSchema@Stringname@Map<String@Object>operand)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/b3a26913e737cfad40bf1b20739f4897425b25.src","preCode":"  @Override public Schema create(SchemaPlus parentSchema,\n      String name, Map<String, Object> operand) {\n    Map map = (Map) operand;\n\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pdxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    return new GeodeSimpleSchema(locatorHost, locatorPort, regionNames, pdxSerializablePackagePath);\n  }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/simple/GeodeSimpleSchemaFactory.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"N"}],"commitId":"62fc0e649c460e9f4ca10b302a9c260206914c72","commitMessage":"@@@[CALCITE-2877] Make GeodeSchema constructor public to pass client cache object (Sandeep Chada)\n","date":"2019-03-28 07:21:42","modifiedFileCount":"3","status":"M","submitter":"chadasa"},{"authorTime":"2016-11-03 13:30:04","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":5,"curCode":"  @Override public synchronized Schema create(SchemaPlus parentSchema, String name,\n      Map<String, Object> operand) {\n    Map map = (Map) operand;\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pbxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    boolean allowSpatialFunctions = true;\n    if (map.containsKey(ALLOW_SPATIAL_FUNCTIONS)) {\n      allowSpatialFunctions = Boolean.valueOf((String) map.get(ALLOW_SPATIAL_FUNCTIONS));\n    }\n\n    if (allowSpatialFunctions) {\n      ModelHandler.addFunctions(parentSchema, null, ImmutableList.of(),\n          GeoFunctions.class.getName(), \"*\", true);\n    }\n\n    return new GeodeSchema(\n        createClientCache(locatorHost, locatorPort, pbxSerializablePackagePath, true),\n        Arrays.asList(regionNames));\n  }\n","date":"2020-10-07 05:42:47","endLine":70,"groupId":"10541","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"create","params":"(SchemaPlusparentSchema@Stringname@Map<String@Object>operand)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1c/3ad623d41c53b749e5f19d380c5d1b224a69a1.src","preCode":"  public synchronized Schema create(SchemaPlus parentSchema, String name,\n      Map<String, Object> operand) {\n    Map map = (Map) operand;\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pbxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    boolean allowSpatialFunctions = true;\n    if (map.containsKey(ALLOW_SPATIAL_FUNCTIONS)) {\n      allowSpatialFunctions = Boolean.valueOf((String) map.get(ALLOW_SPATIAL_FUNCTIONS));\n    }\n\n    if (allowSpatialFunctions) {\n      ModelHandler.addFunctions(parentSchema, null, ImmutableList.of(),\n          GeoFunctions.class.getName(), \"*\", true);\n    }\n\n    return new GeodeSchema(\n        createClientCache(locatorHost, locatorPort, pbxSerializablePackagePath, true),\n        Arrays.asList(regionNames));\n  }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeSchemaFactory.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2016-11-03 13:30:04","commitOrder":5,"curCode":"  @Override public Schema create(SchemaPlus parentSchema,\n      String name, Map<String, Object> operand) {\n    Map map = (Map) operand;\n\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pdxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    return new GeodeSimpleSchema(locatorHost, locatorPort, regionNames, pdxSerializablePackagePath);\n  }\n","date":"2018-02-17 02:18:02","endLine":50,"groupId":"10541","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(SchemaPlusparentSchema@Stringname@Map<String@Object>operand)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/b3a26913e737cfad40bf1b20739f4897425b25.src","preCode":"  @Override public Schema create(SchemaPlus parentSchema,\n      String name, Map<String, Object> operand) {\n    Map map = (Map) operand;\n\n    String locatorHost = (String) map.get(LOCATOR_HOST);\n    int locatorPort = Integer.valueOf((String) map.get(LOCATOR_PORT));\n    String[] regionNames = ((String) map.get(REGIONS)).split(COMMA_DELIMITER);\n    String pdxSerializablePackagePath = (String) map.get(PDX_SERIALIZABLE_PACKAGE_PATH);\n\n    return new GeodeSimpleSchema(locatorHost, locatorPort, regionNames, pdxSerializablePackagePath);\n  }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/simple/GeodeSimpleSchemaFactory.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"N"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
