[{"authorTime":"2019-08-12 16:20:03","codes":[{"authorDate":"2019-08-12 16:20:03","commitOrder":1,"curCode":"  @Test public void testSimple() {\n    \r\n    final Pattern p = Pattern.builder().symbol(\"a\").build();\n    assertThat(p.toString(), is(\"a\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"a\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", (s, list) -> s.contains(\"a\"))\n            .build();\n    final String expected = \"[[a], [a]]\";\n    assertThat(matcher.match(rows).toString(), is(expected));\n  }\n","date":"2019-08-12 16:33:58","endLine":40,"groupId":"2957","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/36/f166ef6b4ec039cbeab13c89784e19052ce440.src","preCode":"  @Test public void testSimple() {\n    \r\n    final Pattern p = Pattern.builder().symbol(\"a\").build();\n    assertThat(p.toString(), is(\"a\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"a\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", (s, list) -> s.contains(\"a\"))\n            .build();\n    final String expected = \"[[a], [a]]\";\n    assertThat(matcher.match(rows).toString(), is(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/AutomatonTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":28,"status":"B"},{"authorDate":"2019-08-12 16:20:03","commitOrder":1,"curCode":"  @Test public void testPlus() {\n    \r\n    final Pattern p = Pattern.builder()\n        .symbol(\"a\").plus()\n        .symbol(\"b\").seq().build();\n    assertThat(p.toString(), is(\"(a)+ b\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"b\", \"\", \"ab\", \"a\", \"ab\", \"b\", \"b\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", (s, list) -> s.contains(\"a\"))\n            .add(\"b\", (s, list) -> s.contains(\"b\"))\n            .build();\n    final String expected = \"[[ab, a, ab], [a, ab], [ab, b]]\";\n    assertThat(matcher.match(rows).toString(), is(expected));\n  }\n","date":"2019-08-12 16:33:58","endLine":90,"groupId":"15928","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPlus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/36/f166ef6b4ec039cbeab13c89784e19052ce440.src","preCode":"  @Test public void testPlus() {\n    \r\n    final Pattern p = Pattern.builder()\n        .symbol(\"a\").plus()\n        .symbol(\"b\").seq().build();\n    assertThat(p.toString(), is(\"(a)+ b\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"b\", \"\", \"ab\", \"a\", \"ab\", \"b\", \"b\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", (s, list) -> s.contains(\"a\"))\n            .add(\"b\", (s, list) -> s.contains(\"b\"))\n            .build();\n    final String expected = \"[[ab, a, ab], [a, ab], [ab, b]]\";\n    assertThat(matcher.match(rows).toString(), is(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/AutomatonTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"}],"commitId":"2a2de705f93c886cea0996e757348a2493eef737","commitMessage":"@@@[CALCITE-1935] Implement MATCH_RECOGNIZE.  part 2: add class Automaton\n\nIn ImmutableBitSet.  add buildAndReset().  to allow re-use;\nadd ImmutableBitSet.Builder.get.\n\nIn Pair.  add zipMutable.\n","date":"2019-08-12 16:33:58","modifiedFileCount":"25","status":"B","submitter":"Julian Hyde"},{"authorTime":"2018-12-26 06:50:58","codes":[{"authorDate":"2018-12-26 06:50:58","commitOrder":2,"curCode":"  @Test public void testSimple() {\n    \r\n    final Pattern p = Pattern.builder().symbol(\"a\").build();\n    assertThat(p.toString(), is(\"a\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"a\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", s -> s.get().contains(\"a\"))\n            .build();\n    final String expected = \"[[a], [a]]\";\n    assertThat(matcher.match(rows).toString(), is(expected));\n  }\n","date":"2019-08-12 16:43:42","endLine":44,"groupId":"2957","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/ec2db7e636653b18f2727efef796c669b8c95f.src","preCode":"  @Test public void testSimple() {\n    \r\n    final Pattern p = Pattern.builder().symbol(\"a\").build();\n    assertThat(p.toString(), is(\"a\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"a\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", (s, list) -> s.contains(\"a\"))\n            .build();\n    final String expected = \"[[a], [a]]\";\n    assertThat(matcher.match(rows).toString(), is(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/AutomatonTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2018-12-26 06:50:58","commitOrder":2,"curCode":"  @Test public void testPlus() {\n    \r\n    final Pattern p = Pattern.builder()\n        .symbol(\"a\").plus()\n        .symbol(\"b\").seq().build();\n    assertThat(p.toString(), is(\"(a)+ b\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"b\", \"\", \"ab\", \"a\", \"ab\", \"b\", \"b\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", s -> s.get().contains(\"a\"))\n            .add(\"b\", s -> s.get().contains(\"b\"))\n            .build();\n    final String expected = \"[[ab, a, ab], [a, ab], [ab, b], [ab, a, ab, b], [a, ab, b]]\";\n    assertThat(matcher.match(rows).toString(), is(expected));\n  }\n","date":"2019-08-12 16:43:42","endLine":95,"groupId":"15928","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPlus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e7/ec2db7e636653b18f2727efef796c669b8c95f.src","preCode":"  @Test public void testPlus() {\n    \r\n    final Pattern p = Pattern.builder()\n        .symbol(\"a\").plus()\n        .symbol(\"b\").seq().build();\n    assertThat(p.toString(), is(\"(a)+ b\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"b\", \"\", \"ab\", \"a\", \"ab\", \"b\", \"b\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", (s, list) -> s.contains(\"a\"))\n            .add(\"b\", (s, list) -> s.contains(\"b\"))\n            .build();\n    final String expected = \"[[ab, a, ab], [a, ab], [ab, b]]\";\n    assertThat(matcher.match(rows).toString(), is(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/AutomatonTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"5ec3a2a503dcf26fe1b3cad8a5a9467264213dcf","commitMessage":"@@@[CALCITE-1935] Implement MATCH_RECOGNIZE.  part 3: get it working (Julian Feinauer)\n\nAdd support for OR (\"|\") and OPTIONAL (\"?\") patterns.\n\nTranslate eps-NFA to DFA.  and implement Matcher based on DFA.\n\nFixed a Bug in RexImpTable to make the minimal example work.\n\nClose apache/calcite#1343\n","date":"2019-08-12 16:43:42","modifiedFileCount":"25","status":"M","submitter":"Julian Feinauer"},{"authorTime":"2019-08-28 16:34:53","codes":[{"authorDate":"2019-08-28 16:34:53","commitOrder":3,"curCode":"  @Test public void testSimple() {\n    \r\n    final Pattern p = Pattern.builder().symbol(\"a\").build();\n    assertThat(p.toString(), is(\"a\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"a\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", s -> s.get().contains(\"a\"))\n            .build();\n    final String expected = \"[[a], [a]]\";\n\n    assertThat(matcher.match(rows), isMatchList(expected));\n  }\n","date":"2019-09-17 03:56:28","endLine":62,"groupId":"2957","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/38/be52fbcc627bb9c869002d1cf09b477ecbae63.src","preCode":"  @Test public void testSimple() {\n    \r\n    final Pattern p = Pattern.builder().symbol(\"a\").build();\n    assertThat(p.toString(), is(\"a\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"a\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", s -> s.get().contains(\"a\"))\n            .build();\n    final String expected = \"[[a], [a]]\";\n    assertThat(matcher.match(rows).toString(), is(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/AutomatonTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2019-08-28 16:34:53","commitOrder":3,"curCode":"  @Test public void testPlus() {\n    \r\n    final Pattern p = Pattern.builder()\n        .symbol(\"a\").plus()\n        .symbol(\"b\").seq().build();\n    assertThat(p.toString(), is(\"(a)+ b\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"b\", \"\", \"ab\", \"a\", \"ab\", \"b\", \"b\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", s -> s.get().contains(\"a\"))\n            .add(\"b\", s -> s.get().contains(\"b\"))\n            .build();\n    final String expected = \"[[ab, a, ab], [a, ab], [ab, b], [ab, a, ab, b], [a, ab, b]]\";\n    assertThat(matcher.match(rows), isMatchList(expected));\n  }\n","date":"2019-09-17 03:56:28","endLine":113,"groupId":"15928","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPlus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/38/be52fbcc627bb9c869002d1cf09b477ecbae63.src","preCode":"  @Test public void testPlus() {\n    \r\n    final Pattern p = Pattern.builder()\n        .symbol(\"a\").plus()\n        .symbol(\"b\").seq().build();\n    assertThat(p.toString(), is(\"(a)+ b\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"b\", \"\", \"ab\", \"a\", \"ab\", \"b\", \"b\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", s -> s.get().contains(\"a\"))\n            .add(\"b\", s -> s.get().contains(\"b\"))\n            .build();\n    final String expected = \"[[ab, a, ab], [a, ab], [ab, b], [ab, a, ab, b], [a, ab, b]]\";\n    assertThat(matcher.match(rows).toString(), is(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/AutomatonTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"f4dde669631f7fa4f64b42eb1481ba9a8f27bd39","commitMessage":"@@@[CALCITE-3302] Implement CLASSIFIER and LAST functions for MATCH_RECOGNIZE\n\nClose apache/calcite#1449\n","date":"2019-09-17 03:56:28","modifiedFileCount":"9","status":"M","submitter":"Julian Feinauer"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testSimple() {\n    \r\n    final Pattern p = Pattern.builder().symbol(\"a\").build();\n    assertThat(p.toString(), is(\"a\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"a\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", s -> s.get().contains(\"a\"))\n            .build();\n    final String expected = \"[[a], [a]]\";\n\n    assertThat(matcher.match(rows), isMatchList(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":60,"groupId":"10573","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2f/0388cc0da9da0265240bdf9faf2a97ac064cfc.src","preCode":"  @Test public void testSimple() {\n    \r\n    final Pattern p = Pattern.builder().symbol(\"a\").build();\n    assertThat(p.toString(), is(\"a\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"a\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", s -> s.get().contains(\"a\"))\n            .build();\n    final String expected = \"[[a], [a]]\";\n\n    assertThat(matcher.match(rows), isMatchList(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/AutomatonTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testPlus() {\n    \r\n    final Pattern p = Pattern.builder()\n        .symbol(\"a\").plus()\n        .symbol(\"b\").seq().build();\n    assertThat(p.toString(), is(\"(a)+ b\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"b\", \"\", \"ab\", \"a\", \"ab\", \"b\", \"b\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", s -> s.get().contains(\"a\"))\n            .add(\"b\", s -> s.get().contains(\"b\"))\n            .build();\n    final String expected = \"[[ab, a, ab], [a, ab], [ab, b], [ab, a, ab, b], [a, ab, b]]\";\n    assertThat(matcher.match(rows), isMatchList(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":111,"groupId":"10573","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testPlus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2f/0388cc0da9da0265240bdf9faf2a97ac064cfc.src","preCode":"  @Test public void testPlus() {\n    \r\n    final Pattern p = Pattern.builder()\n        .symbol(\"a\").plus()\n        .symbol(\"b\").seq().build();\n    assertThat(p.toString(), is(\"(a)+ b\"));\n\n    final String[] rows = {\"\", \"a\", \"\", \"b\", \"\", \"ab\", \"a\", \"ab\", \"b\", \"b\"};\n    final Matcher<String> matcher =\n        Matcher.<String>builder(p.toAutomaton())\n            .add(\"a\", s -> s.get().contains(\"a\"))\n            .add(\"b\", s -> s.get().contains(\"b\"))\n            .build();\n    final String expected = \"[[ab, a, ab], [a, ab], [ab, b], [ab, a, ab, b], [a, ab, b]]\";\n    assertThat(matcher.match(rows), isMatchList(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/runtime/AutomatonTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
