[{"authorTime":"2018-05-07 20:59:30","codes":[{"authorDate":"2018-05-07 20:59:30","commitOrder":1,"curCode":"  private void simplifyAndTerms(List<RexNode> terms) {\n    RexSimplify simplify = withUnknownAsFalse(false);\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t));\n    }\n  }\n","date":"2018-05-26 04:40:52","endLine":290,"groupId":"9520","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyAndTerms","params":"(List<RexNode>terms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7b/efc4d13dc374428a7075c5fd173d95b84aeed3.src","preCode":"  private void simplifyAndTerms(List<RexNode> terms) {\n    RexSimplify simplify = withUnknownAsFalse(false);\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"B"},{"authorDate":"2018-05-07 20:59:30","commitOrder":1,"curCode":"  private void simplifyOrTerms(List<RexNode> terms) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      final RexNode t2 = simplify.simplify(t);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(rexBuilder.makeCall(SqlStdOperatorTable.NOT, t2));\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t));\n    }\n  }\n","date":"2018-05-26 04:40:52","endLine":318,"groupId":"2479","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyOrTerms","params":"(List<RexNode>terms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7b/efc4d13dc374428a7075c5fd173d95b84aeed3.src","preCode":"  private void simplifyOrTerms(List<RexNode> terms) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      final RexNode t2 = simplify.simplify(t);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(rexBuilder.makeCall(SqlStdOperatorTable.NOT, t2));\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"B"}],"commitId":"c3788056507206c50b8c700ab81abd4b511bb863","commitMessage":"@@@[CALCITE-2247] Simplify AND and OR conditions using predicates (Zoltan Haindrich)\n\nIf you are simplifying \"p1 AND p2\".  when you are simplifying \"p2\" you\nknow that \"p1\" is not true.  and so can add it to the predicates.\n\nClose apache/calcite#688\n","date":"2018-05-26 04:40:52","modifiedFileCount":"3","status":"B","submitter":"Zoltan Haindrich"},{"authorTime":"2018-09-28 09:34:22","codes":[{"authorDate":"2018-09-28 09:34:22","commitOrder":2,"curCode":"  private void simplifyAndTerms(List<RexNode> terms) {\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, UNKNOWN));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, UNKNOWN));\n    }\n  }\n","date":"2018-10-08 04:34:53","endLine":414,"groupId":"9520","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyAndTerms","params":"(List<RexNode>terms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/67/41c65083f6cbb3f28168727007d40a5f23154c.src","preCode":"  private void simplifyAndTerms(List<RexNode> terms) {\n    RexSimplify simplify = withUnknownAsFalse(false);\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"},{"authorDate":"2018-09-28 09:34:22","commitOrder":2,"curCode":"  private void simplifyOrTerms(List<RexNode> terms) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      final RexNode t2 = simplify.simplify(t, RexUnknownAs.UNKNOWN);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(rexBuilder.makeCall(SqlStdOperatorTable.NOT, t2),\n              RexUnknownAs.UNKNOWN);\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, RexUnknownAs.UNKNOWN));\n    }\n  }\n","date":"2018-10-08 04:34:53","endLine":443,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyOrTerms","params":"(List<RexNode>terms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/67/41c65083f6cbb3f28168727007d40a5f23154c.src","preCode":"  private void simplifyOrTerms(List<RexNode> terms) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      final RexNode t2 = simplify.simplify(t);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(rexBuilder.makeCall(SqlStdOperatorTable.NOT, t2));\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":416,"status":"M"}],"commitId":"6b3844c0634792263a5073b8ea93565fb3415f41","commitMessage":"@@@[CALCITE-2604] When simplifying an expression.  say whether an UNKNOWN value will be interpreted as is.  or as TRUE or FALSE\n\nAdd class RexUnknownAs to describe policy.  and make it an argument to\ninternal methods; public methods such as RexSimplify.simplify(RexNode)\nand RexSimplify.simplifyAnds(Iterable) use UNKNOWN. (The RexSimplify\nconstructor that allows a different policy than UNKNOWN is deprecated. \nand even if you use the deprecated constructor.  that policy only\napplies to the top-level expression.  not arguments to it.)\n\nAdd RexSimplify.simplify(RexNode.  RexUnknownAs) (mainly for internal\nuse).  and RexSimplify.simplifyUnknownAsFalse(RexNode) (for public use).\n\nAdd variant of RexUtil.composeConjunction that never returns null. \nwith @Nonnull annotation.\n","date":"2018-10-08 04:34:53","modifiedFileCount":"28","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-10-09 05:17:10","codes":[{"authorDate":"2018-09-28 09:34:22","commitOrder":3,"curCode":"  private void simplifyAndTerms(List<RexNode> terms) {\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, UNKNOWN));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, UNKNOWN));\n    }\n  }\n","date":"2018-10-08 04:34:53","endLine":414,"groupId":"9520","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyAndTerms","params":"(List<RexNode>terms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/67/41c65083f6cbb3f28168727007d40a5f23154c.src","preCode":"  private void simplifyAndTerms(List<RexNode> terms) {\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, UNKNOWN));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, UNKNOWN));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"N"},{"authorDate":"2018-10-09 05:17:10","commitOrder":3,"curCode":"  private void simplifyOrTerms(List<RexNode> terms) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      final RexNode t2 = simplify.simplify(t, RexUnknownAs.UNKNOWN);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_TRUE, t2),\n              RexUnknownAs.UNKNOWN);\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, RexUnknownAs.UNKNOWN));\n    }\n  }\n","date":"2018-10-18 03:46:37","endLine":443,"groupId":"2479","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyOrTerms","params":"(List<RexNode>terms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b2/eddb890741b7b24375682b082275a120d0d6ac.src","preCode":"  private void simplifyOrTerms(List<RexNode> terms) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      final RexNode t2 = simplify.simplify(t, RexUnknownAs.UNKNOWN);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(rexBuilder.makeCall(SqlStdOperatorTable.NOT, t2),\n              RexUnknownAs.UNKNOWN);\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, RexUnknownAs.UNKNOWN));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":416,"status":"M"}],"commitId":"064974d543874e47a9da8ea0595824dde398bee1","commitMessage":"@@@[CALCITE-2615] When simplifying NOT-AND-OR.  RexSimplify incorrectly applies predicates deduced for operands to the same operands (Zoltan Haindrich)\n\nClose apache/calcite#880\n","date":"2018-10-18 03:46:37","modifiedFileCount":"2","status":"M","submitter":"Zoltan Haindrich"},{"authorTime":"2019-02-13 23:07:43","codes":[{"authorDate":"2019-02-13 23:07:43","commitOrder":4,"curCode":"  private void simplifyAndTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","date":"2019-02-21 13:09:19","endLine":433,"groupId":"9520","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyAndTerms","params":"(List<RexNode>terms@RexUnknownAsunknownAs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ab/29c963bbedc2ab2fd30b4c1062b6de31692c96.src","preCode":"  private void simplifyAndTerms(List<RexNode> terms) {\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, UNKNOWN));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, UNKNOWN));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":414,"status":"M"},{"authorDate":"2019-02-13 23:07:43","commitOrder":4,"curCode":"  private void simplifyOrTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      final RexNode t2 = simplify.simplify(t, unknownAs);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_TRUE, t2),\n              RexUnknownAs.UNKNOWN);\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","date":"2019-02-21 13:09:19","endLine":462,"groupId":"16479","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyOrTerms","params":"(List<RexNode>terms@RexUnknownAsunknownAs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ab/29c963bbedc2ab2fd30b4c1062b6de31692c96.src","preCode":"  private void simplifyOrTerms(List<RexNode> terms) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      final RexNode t2 = simplify.simplify(t, RexUnknownAs.UNKNOWN);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_TRUE, t2),\n              RexUnknownAs.UNKNOWN);\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, RexUnknownAs.UNKNOWN));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":435,"status":"M"}],"commitId":"e4489207385701549c3e0309d8d44e5e8d9f9cbf","commitMessage":"@@@[CALCITE-2840] RexNode simplification logic should use more specific UnknownAs modes\n\nClose apache/calcite#1045\n","date":"2019-02-21 13:09:19","modifiedFileCount":"3","status":"M","submitter":"Zoltan Haindrich"},{"authorTime":"2019-07-29 23:51:53","codes":[{"authorDate":"2019-02-13 23:07:43","commitOrder":5,"curCode":"  private void simplifyAndTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","date":"2019-02-21 13:09:19","endLine":433,"groupId":"9520","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyAndTerms","params":"(List<RexNode>terms@RexUnknownAsunknownAs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ab/29c963bbedc2ab2fd30b4c1062b6de31692c96.src","preCode":"  private void simplifyAndTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":414,"status":"N"},{"authorDate":"2019-07-29 23:51:53","commitOrder":5,"curCode":"  private void simplifyOrTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (!allowedAsPredicateDuringOrSimplification(t)) {\n        continue;\n      }\n      final RexNode t2 = simplify.simplify(t, unknownAs);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_TRUE, t2),\n              RexUnknownAs.UNKNOWN);\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (allowedAsPredicateDuringOrSimplification(t)) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","date":"2019-08-02 21:01:09","endLine":524,"groupId":"3125","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyOrTerms","params":"(List<RexNode>terms@RexUnknownAsunknownAs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bb/f6b2844ff46412dd7138a15ff02310601a4c0e.src","preCode":"  private void simplifyOrTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      final RexNode t2 = simplify.simplify(t, unknownAs);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_TRUE, t2),\n              RexUnknownAs.UNKNOWN);\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":497,"status":"M"}],"commitId":"f7762b6a7cd85711a8cc6d7c7174dedca22bdcd2","commitMessage":"@@@[CALCITE-3192] Simplification may weaken OR conditions containing inequalities\n\nFor expressions like: (1 < x or ( x < 3 and c ))\nsimplification was made to ( 1 < x or c )\n","date":"2019-08-02 21:01:09","modifiedFileCount":"2","status":"M","submitter":"Zoltan Haindrich"},{"authorTime":"2020-08-10 02:43:18","codes":[{"authorDate":"2019-02-13 23:07:43","commitOrder":6,"curCode":"  private void simplifyAndTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","date":"2019-02-21 13:09:19","endLine":433,"groupId":"9520","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyAndTerms","params":"(List<RexNode>terms@RexUnknownAsunknownAs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ab/29c963bbedc2ab2fd30b4c1062b6de31692c96.src","preCode":"  private void simplifyAndTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":414,"status":"N"},{"authorDate":"2020-08-10 02:43:18","commitOrder":6,"curCode":"  private void simplifyOrTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (!simplify.allowedAsPredicateDuringOrSimplification(t)) {\n        continue;\n      }\n      final RexNode t2 = simplify.simplify(t, unknownAs);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_TRUE, t2),\n              RexUnknownAs.UNKNOWN);\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (allowedAsPredicateDuringOrSimplification(t)) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","date":"2020-08-21 05:13:59","endLine":550,"groupId":"3125","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyOrTerms","params":"(List<RexNode>terms@RexUnknownAsunknownAs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5e/92098ad0d209d59abbb0dedee708f0d6e76086.src","preCode":"  private void simplifyOrTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (!allowedAsPredicateDuringOrSimplification(t)) {\n        continue;\n      }\n      final RexNode t2 = simplify.simplify(t, unknownAs);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_TRUE, t2),\n              RexUnknownAs.UNKNOWN);\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (allowedAsPredicateDuringOrSimplification(t)) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":523,"status":"M"}],"commitId":"9ca61f020d134032dac8167b83bf431f078e33c5","commitMessage":"@@@[CALCITE-4159] Simplify always-true expressions (such as LIKE '%') to TRUE\n\nRexSimplify needs to recognize that the following expressions\ncan be simplified to TRUE:\n\n* c < 0 OR c >= 0 OR c IS NULL\n* c < 2 OR c > 0 OR c IS NULL\n* c LIKE '%' OR c IS NULL\n\nTo enable this fix.  we pull 'IS NULL' terms to the front of a list of\nOR-terms.  so that by the time the subsequent terms are reached they\nknow that the term's value is not NULL.\n\nClose apache/calcite#2105\n","date":"2020-08-21 05:13:59","modifiedFileCount":"6","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-08-24 05:47:18","codes":[{"authorDate":"2019-02-13 23:07:43","commitOrder":7,"curCode":"  private void simplifyAndTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","date":"2019-02-21 13:09:19","endLine":433,"groupId":"9520","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyAndTerms","params":"(List<RexNode>terms@RexUnknownAsunknownAs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ab/29c963bbedc2ab2fd30b4c1062b6de31692c96.src","preCode":"  private void simplifyAndTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":414,"status":"N"},{"authorDate":"2020-08-24 05:47:18","commitOrder":7,"curCode":"  private void simplifyOrTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    final BitSet doneTerms = new BitSet();\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (!simplify.allowedAsPredicateDuringOrSimplification(t)) {\n        continue;\n      }\n      doneTerms.set(i);\n      final RexNode t2 = simplify.simplify(t, unknownAs);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_TRUE, t2),\n              RexUnknownAs.UNKNOWN);\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (doneTerms.get(i)) {\n        continue; \r\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","date":"2020-08-25 10:30:06","endLine":559,"groupId":"11660","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyOrTerms","params":"(List<RexNode>terms@RexUnknownAsunknownAs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/8fd7e78294253a19891b9df6b9231bd7d3dc8b.src","preCode":"  private void simplifyOrTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (!simplify.allowedAsPredicateDuringOrSimplification(t)) {\n        continue;\n      }\n      final RexNode t2 = simplify.simplify(t, unknownAs);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_TRUE, t2),\n              RexUnknownAs.UNKNOWN);\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (allowedAsPredicateDuringOrSimplification(t)) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":524,"status":"M"}],"commitId":"401b01897b9a3b588d38acb6459411c5f7805776","commitMessage":"@@@[CALCITE-4190] OR simplification incorrectly loses term\n","date":"2020-08-25 10:30:06","modifiedFileCount":"2","status":"M","submitter":"Julian Hyde"},{"authorTime":"2021-04-01 04:37:04","codes":[{"authorDate":"2019-02-13 23:07:43","commitOrder":8,"curCode":"  private void simplifyAndTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","date":"2019-02-21 13:09:19","endLine":433,"groupId":"101723","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyAndTerms","params":"(List<RexNode>terms@RexUnknownAsunknownAs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ab/29c963bbedc2ab2fd30b4c1062b6de31692c96.src","preCode":"  private void simplifyAndTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    RexSimplify simplify = this;\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) == null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n      RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, terms.subList(i, i + 1)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      RexNode t = terms.get(i);\n      if (Predicate.of(t) != null) {\n        continue;\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":414,"status":"N"},{"authorDate":"2021-04-01 04:37:04","commitOrder":8,"curCode":"  private void simplifyOrTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    final BitSet doneTerms = new BitSet();\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (!simplify.allowedAsPredicateDuringOrSimplification(t)) {\n        continue;\n      }\n      doneTerms.set(i);\n      final RexNode t2 = simplify.simplify(t, unknownAs);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(isNotTrue(t2), RexUnknownAs.UNKNOWN);\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (doneTerms.get(i)) {\n        continue; \r\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","date":"2021-04-03 09:45:11","endLine":631,"groupId":"101723","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyOrTerms","params":"(List<RexNode>terms@RexUnknownAsunknownAs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/14/337e7294cb9ec282ae1d91d4919f54a12a1232.src","preCode":"  private void simplifyOrTerms(List<RexNode> terms, RexUnknownAs unknownAs) {\n    \r\n    \r\n    \r\n    \r\n    RexSimplify simplify = this;\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    final BitSet doneTerms = new BitSet();\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (!simplify.allowedAsPredicateDuringOrSimplification(t)) {\n        continue;\n      }\n      doneTerms.set(i);\n      final RexNode t2 = simplify.simplify(t, unknownAs);\n      terms.set(i, t2);\n      final RexNode inverse =\n          simplify.simplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_TRUE, t2),\n              RexUnknownAs.UNKNOWN);\n      final RelOptPredicateList newPredicates = simplify.predicates.union(rexBuilder,\n          RelOptPredicateList.of(rexBuilder, ImmutableList.of(inverse)));\n      simplify = simplify.withPredicates(newPredicates);\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      final RexNode t = terms.get(i);\n      if (doneTerms.get(i)) {\n        continue; \r\n      }\n      terms.set(i, simplify.simplify(t, unknownAs));\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":597,"status":"M"}],"commitId":"8581f0a3fe9a4f079cb4d36f02121ae22118714c","commitMessage":"@@@[CALCITE-4562] Improve simplification of \"x IS TRUE\" and \"x LIKE '%'\"\n\nSimplify \"x LIKE '%'\" to \"x IS NOT NULL\" in an unknown-as-false\ncontext.  such as a WHERE clause.\n\nSimplify \"x IS TRUE\" to \"x\" if \"x\" is already NOT NULL;\nsimilarly \"IS FALSE\".  \"IS NOT TRUE\".  \"IS NOT FALSE\".\n","date":"2021-04-03 09:45:11","modifiedFileCount":"4","status":"M","submitter":"Julian Hyde"}]
