[{"authorTime":"2020-02-05 21:47:00","codes":[{"authorDate":"2020-01-06 19:04:36","commitOrder":2,"curCode":"  private void unparseTrim(SqlWriter writer, SqlCall call, int leftPrec,\n      int rightPrec) {\n    final String operatorName;\n    SqlLiteral trimFlag = call.operand(0);\n    SqlLiteral valueToTrim = call.operand(1);\n    switch (trimFlag.getValueAs(SqlTrimFunction.Flag.class)) {\n    case LEADING:\n      operatorName = \"LTRIM\";\n      break;\n    case TRAILING:\n      operatorName = \"RTRIM\";\n      break;\n    default:\n      operatorName = call.getOperator().getName();\n      break;\n    }\n    final SqlWriter.Frame trimFrame = writer.startFunCall(operatorName);\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n\n    \r\n\r\n\r\n\n    if (!valueToTrim.toValue().matches(\"\\\\s+\")) {\n      writer.literal(\",\");\n      call.operand(1).unparse(writer, leftPrec, rightPrec);\n    }\n    writer.endFunCall(trimFrame);\n  }\n","date":"2020-01-08 10:12:29","endLine":234,"groupId":"11504","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseTrim","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c7/332c30def90a2657354f141f2333dde321dc7c.src","preCode":"  private void unparseTrim(SqlWriter writer, SqlCall call, int leftPrec,\n      int rightPrec) {\n    final String operatorName;\n    SqlLiteral trimFlag = call.operand(0);\n    SqlLiteral valueToTrim = call.operand(1);\n    switch (trimFlag.getValueAs(SqlTrimFunction.Flag.class)) {\n    case LEADING:\n      operatorName = \"LTRIM\";\n      break;\n    case TRAILING:\n      operatorName = \"RTRIM\";\n      break;\n    default:\n      operatorName = call.getOperator().getName();\n      break;\n    }\n    final SqlWriter.Frame trimFrame = writer.startFunCall(operatorName);\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n\n    \r\n\r\n\r\n\n    if (!valueToTrim.toValue().matches(\"\\\\s+\")) {\n      writer.literal(\",\");\n      call.operand(1).unparse(writer, leftPrec, rightPrec);\n    }\n    writer.endFunCall(trimFrame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"NB"},{"authorDate":"2020-02-05 21:47:00","commitOrder":2,"curCode":"  private static void unparseTrimWithSpace(\n      SqlWriter writer, SqlCall call, int leftPrec, int rightPrec) {\n    final String operatorName;\n    final SqlLiteral trimFlag = call.operand(0);\n    switch (trimFlag.getValueAs(SqlTrimFunction.Flag.class)) {\n    case LEADING:\n      operatorName = \"LTRIM\";\n      break;\n    case TRAILING:\n      operatorName = \"RTRIM\";\n      break;\n    default:\n      operatorName = call.getOperator().getName();\n      break;\n    }\n    final SqlWriter.Frame trimFrame = writer.startFunCall(operatorName);\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n    writer.endFunCall(trimFrame);\n  }\n","date":"2020-02-20 12:24:42","endLine":89,"groupId":"11504","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseTrimWithSpace","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bf/4a53db8d559165af1e993b9dc0399b581ebe1a.src","preCode":"  private static void unparseTrimWithSpace(\n      SqlWriter writer, SqlCall call, int leftPrec, int rightPrec) {\n    final String operatorName;\n    final SqlLiteral trimFlag = call.operand(0);\n    switch (trimFlag.getValueAs(SqlTrimFunction.Flag.class)) {\n    case LEADING:\n      operatorName = \"LTRIM\";\n      break;\n    case TRAILING:\n      operatorName = \"RTRIM\";\n      break;\n    default:\n      operatorName = call.getOperator().getName();\n      break;\n    }\n    final SqlWriter.Frame trimFrame = writer.startFunCall(operatorName);\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n    writer.endFunCall(trimFrame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/util/RelToSqlConverterUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"}],"commitId":"5fa41609cb0fe310a0a11d86319d861423850a36","commitMessage":"@@@[CALCITE-3771] TRIM Support for HIVE/SPARK Dialect (Dhirenda Gautam)\n\nFix-up (by Danny):\n* Move all the common logic for Hive and Spark TRIM unparsing to\nRelToSqlConverterUtil\n* Refactor the tests to split Hive and Spark from BigQuery for some TRIM\ncases\n\nclose apache/calcite#1785\n","date":"2020-02-20 12:24:42","modifiedFileCount":"3","status":"M","submitter":"dhirenda.gautam"},{"authorTime":"2020-02-05 21:47:00","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  private void unparseTrim(SqlWriter writer, SqlCall call, int leftPrec,\n      int rightPrec) {\n    final String operatorName;\n    SqlLiteral trimFlag = call.operand(0);\n    SqlLiteral valueToTrim = call.operand(1);\n    switch (trimFlag.getValueAs(SqlTrimFunction.Flag.class)) {\n    case LEADING:\n      operatorName = \"LTRIM\";\n      break;\n    case TRAILING:\n      operatorName = \"RTRIM\";\n      break;\n    default:\n      operatorName = call.getOperator().getName();\n      break;\n    }\n    final SqlWriter.Frame trimFrame = writer.startFunCall(operatorName);\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n\n    \r\n    \r\n    \r\n    String value = requireNonNull(valueToTrim.toValue(), \"valueToTrim.toValue()\");\n    if (!value.matches(\"\\\\s+\")) {\n      writer.literal(\",\");\n      call.operand(1).unparse(writer, leftPrec, rightPrec);\n    }\n    writer.endFunCall(trimFrame);\n  }\n","date":"2020-11-30 06:45:33","endLine":248,"groupId":"1252","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseTrim","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/18/2075742a2772c4dd008b1dd0e1af996e9f348b.src","preCode":"  private void unparseTrim(SqlWriter writer, SqlCall call, int leftPrec,\n      int rightPrec) {\n    final String operatorName;\n    SqlLiteral trimFlag = call.operand(0);\n    SqlLiteral valueToTrim = call.operand(1);\n    switch (trimFlag.getValueAs(SqlTrimFunction.Flag.class)) {\n    case LEADING:\n      operatorName = \"LTRIM\";\n      break;\n    case TRAILING:\n      operatorName = \"RTRIM\";\n      break;\n    default:\n      operatorName = call.getOperator().getName();\n      break;\n    }\n    final SqlWriter.Frame trimFrame = writer.startFunCall(operatorName);\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n\n    \r\n    \r\n    \r\n    if (!valueToTrim.toValue().matches(\"\\\\s+\")) {\n      writer.literal(\",\");\n      call.operand(1).unparse(writer, leftPrec, rightPrec);\n    }\n    writer.endFunCall(trimFrame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2020-02-05 21:47:00","commitOrder":3,"curCode":"  private static void unparseTrimWithSpace(\n      SqlWriter writer, SqlCall call, int leftPrec, int rightPrec) {\n    final String operatorName;\n    final SqlLiteral trimFlag = call.operand(0);\n    switch (trimFlag.getValueAs(SqlTrimFunction.Flag.class)) {\n    case LEADING:\n      operatorName = \"LTRIM\";\n      break;\n    case TRAILING:\n      operatorName = \"RTRIM\";\n      break;\n    default:\n      operatorName = call.getOperator().getName();\n      break;\n    }\n    final SqlWriter.Frame trimFrame = writer.startFunCall(operatorName);\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n    writer.endFunCall(trimFrame);\n  }\n","date":"2020-02-20 12:24:42","endLine":89,"groupId":"11504","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseTrimWithSpace","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bf/4a53db8d559165af1e993b9dc0399b581ebe1a.src","preCode":"  private static void unparseTrimWithSpace(\n      SqlWriter writer, SqlCall call, int leftPrec, int rightPrec) {\n    final String operatorName;\n    final SqlLiteral trimFlag = call.operand(0);\n    switch (trimFlag.getValueAs(SqlTrimFunction.Flag.class)) {\n    case LEADING:\n      operatorName = \"LTRIM\";\n      break;\n    case TRAILING:\n      operatorName = \"RTRIM\";\n      break;\n    default:\n      operatorName = call.getOperator().getName();\n      break;\n    }\n    final SqlWriter.Frame trimFrame = writer.startFunCall(operatorName);\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n    writer.endFunCall(trimFrame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/util/RelToSqlConverterUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-02-05 21:47:00","codes":[{"authorDate":"2020-12-02 05:40:39","commitOrder":4,"curCode":"  private static void unparseTrim(SqlWriter writer, SqlCall call, int leftPrec,\n      int rightPrec) {\n    final String operatorName;\n    SqlLiteral trimFlag = call.operand(0);\n    SqlLiteral valueToTrim = call.operand(1);\n    switch (trimFlag.getValueAs(SqlTrimFunction.Flag.class)) {\n    case LEADING:\n      operatorName = \"LTRIM\";\n      break;\n    case TRAILING:\n      operatorName = \"RTRIM\";\n      break;\n    default:\n      operatorName = call.getOperator().getName();\n      break;\n    }\n    final SqlWriter.Frame trimFrame = writer.startFunCall(operatorName);\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n\n    \r\n    \r\n    \r\n    String value = requireNonNull(valueToTrim.toValue(), \"valueToTrim.toValue()\");\n    if (!value.matches(\"\\\\s+\")) {\n      writer.literal(\",\");\n      call.operand(1).unparse(writer, leftPrec, rightPrec);\n    }\n    writer.endFunCall(trimFrame);\n  }\n","date":"2020-12-08 15:07:23","endLine":248,"groupId":"101822","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseTrim","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/b42e2e15e898cf14b4188476cd981cecef23aa.src","preCode":"  private void unparseTrim(SqlWriter writer, SqlCall call, int leftPrec,\n      int rightPrec) {\n    final String operatorName;\n    SqlLiteral trimFlag = call.operand(0);\n    SqlLiteral valueToTrim = call.operand(1);\n    switch (trimFlag.getValueAs(SqlTrimFunction.Flag.class)) {\n    case LEADING:\n      operatorName = \"LTRIM\";\n      break;\n    case TRAILING:\n      operatorName = \"RTRIM\";\n      break;\n    default:\n      operatorName = call.getOperator().getName();\n      break;\n    }\n    final SqlWriter.Frame trimFrame = writer.startFunCall(operatorName);\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n\n    \r\n    \r\n    \r\n    String value = requireNonNull(valueToTrim.toValue(), \"valueToTrim.toValue()\");\n    if (!value.matches(\"\\\\s+\")) {\n      writer.literal(\",\");\n      call.operand(1).unparse(writer, leftPrec, rightPrec);\n    }\n    writer.endFunCall(trimFrame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2020-02-05 21:47:00","commitOrder":4,"curCode":"  private static void unparseTrimWithSpace(\n      SqlWriter writer, SqlCall call, int leftPrec, int rightPrec) {\n    final String operatorName;\n    final SqlLiteral trimFlag = call.operand(0);\n    switch (trimFlag.getValueAs(SqlTrimFunction.Flag.class)) {\n    case LEADING:\n      operatorName = \"LTRIM\";\n      break;\n    case TRAILING:\n      operatorName = \"RTRIM\";\n      break;\n    default:\n      operatorName = call.getOperator().getName();\n      break;\n    }\n    final SqlWriter.Frame trimFrame = writer.startFunCall(operatorName);\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n    writer.endFunCall(trimFrame);\n  }\n","date":"2020-02-20 12:24:42","endLine":89,"groupId":"101822","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseTrimWithSpace","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bf/4a53db8d559165af1e993b9dc0399b581ebe1a.src","preCode":"  private static void unparseTrimWithSpace(\n      SqlWriter writer, SqlCall call, int leftPrec, int rightPrec) {\n    final String operatorName;\n    final SqlLiteral trimFlag = call.operand(0);\n    switch (trimFlag.getValueAs(SqlTrimFunction.Flag.class)) {\n    case LEADING:\n      operatorName = \"LTRIM\";\n      break;\n    case TRAILING:\n      operatorName = \"RTRIM\";\n      break;\n    default:\n      operatorName = call.getOperator().getName();\n      break;\n    }\n    final SqlWriter.Frame trimFrame = writer.startFunCall(operatorName);\n    call.operand(2).unparse(writer, leftPrec, rightPrec);\n    writer.endFunCall(trimFrame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/util/RelToSqlConverterUtil.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"}],"commitId":"404f968f6079360621896e6ee20ec12488a40bc2","commitMessage":"@@@[CALCITE-4422] Add MethodCanBeStatic check via ErrorProne\n\nprivate and final methods can be made static.  so it is clear they do not access instance fields\n","date":"2020-12-08 15:07:23","modifiedFileCount":"169","status":"M","submitter":"Vladimir Sitnikov"}]
