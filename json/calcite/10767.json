[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testLikeEscape() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"'a_c' like 'a#_c' escape '#'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a#_c' escape '#'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a_c' like 'a\\\\_c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a\\\\_c' escape '\\\\'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a%c' like 'a\\\\%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a%cde' like 'a\\\\%c_e' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a\\\\%c' escape '\\\\'\", Boolean.FALSE);\n  }\n","date":"2014-11-14 09:39:34","endLine":2993,"groupId":"9760","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLikeEscape","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testLikeEscape() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"'a_c' like 'a#_c' escape '#'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a#_c' escape '#'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a_c' like 'a\\\\_c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a\\\\_c' escape '\\\\'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a%c' like 'a\\\\%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a%cde' like 'a\\\\%c_e' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a\\\\%c' escape '\\\\'\", Boolean.FALSE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2983,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testLikeOperator() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"''  like ''\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'a'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'b'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like 'A'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like 'a_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like '_a'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like '%a'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like '%a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab'   like 'a_'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abc'  like 'a_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'abcd' like 'a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab'   like '_b'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abcd' like '_d'\", Boolean.FALSE);\n    tester.checkBoolean(\"'abcd' like '%d'\", Boolean.TRUE);\n  }\n","date":"2014-11-14 09:39:34","endLine":3012,"groupId":"9760","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLikeOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testLikeOperator() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"''  like ''\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'a'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'b'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like 'A'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like 'a_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like '_a'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like '%a'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like '%a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab'   like 'a_'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abc'  like 'a_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'abcd' like 'a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab'   like '_b'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abcd' like '_d'\", Boolean.FALSE);\n    tester.checkBoolean(\"'abcd' like '%d'\", Boolean.TRUE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2995,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2017-03-08 03:44:23","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testLikeEscape() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"'a_c' like 'a#_c' escape '#'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a#_c' escape '#'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a_c' like 'a\\\\_c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a\\\\_c' escape '\\\\'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a%c' like 'a\\\\%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a%cde' like 'a\\\\%c_e' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a\\\\%c' escape '\\\\'\", Boolean.FALSE);\n  }\n","date":"2014-11-14 09:39:34","endLine":2993,"groupId":"9760","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLikeEscape","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testLikeEscape() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"'a_c' like 'a#_c' escape '#'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a#_c' escape '#'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a_c' like 'a\\\\_c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a\\\\_c' escape '\\\\'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a%c' like 'a\\\\%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a%cde' like 'a\\\\%c_e' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a\\\\%c' escape '\\\\'\", Boolean.FALSE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2983,"status":"N"},{"authorDate":"2017-03-08 03:44:23","commitOrder":2,"curCode":"  @Test public void testLikeOperator() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"''  like ''\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'a'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'b'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like 'A'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like 'a_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like '_a'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like '%a'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like '%a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab'   like 'a_'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abc'  like 'a_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'abcd' like 'a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab'   like '_b'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abcd' like '_d'\", Boolean.FALSE);\n    tester.checkBoolean(\"'abcd' like '%d'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab\\ncd' like 'ab%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abc\\ncd' like 'ab%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'123\\n\\n45\\n' like '%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab\\ncd\\nef' like '%cd%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab\\ncd\\nef' like '%cde%'\", Boolean.FALSE);\n  }\n","date":"2017-03-10 05:10:10","endLine":3232,"groupId":"9760","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLikeOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f8/efa3e871299401bc40d573a093958d40d4e6bc.src","preCode":"  @Test public void testLikeOperator() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"''  like ''\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'a'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'b'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like 'A'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like 'a_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like '_a'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like '%a'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like '%a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab'   like 'a_'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abc'  like 'a_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'abcd' like 'a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab'   like '_b'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abcd' like '_d'\", Boolean.FALSE);\n    tester.checkBoolean(\"'abcd' like '%d'\", Boolean.TRUE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3210,"status":"M"}],"commitId":"58217cb2122b508016a1b8c4278a21a2e890b861","commitMessage":"@@@[CALCITE-1674] LIKE does not match value that contains newline (Mark Payne)\n\nUse (?s:.*) for regex that matches % wildcard for LIKE operators.\nThis allows the % character to match newlines.\n\nClose apache/calcite#390\n","date":"2017-03-10 05:10:10","modifiedFileCount":"2","status":"M","submitter":"Mark Payne"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testLikeEscape() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"'a_c' like 'a#_c' escape '#'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a#_c' escape '#'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a_c' like 'a\\\\_c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a\\\\_c' escape '\\\\'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a%c' like 'a\\\\%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a%cde' like 'a\\\\%c_e' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a\\\\%c' escape '\\\\'\", Boolean.FALSE);\n  }\n","date":"2020-04-06 04:57:49","endLine":3845,"groupId":"10767","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLikeEscape","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testLikeEscape() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"'a_c' like 'a#_c' escape '#'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a#_c' escape '#'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a_c' like 'a\\\\_c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'axc' like 'a\\\\_c' escape '\\\\'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a%c' like 'a\\\\%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a%cde' like 'a\\\\%c_e' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a%c' escape '\\\\'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abbc' like 'a\\\\%c' escape '\\\\'\", Boolean.FALSE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3835,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testLikeOperator() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"''  like ''\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'a'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'b'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like 'A'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like 'a_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like '_a'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like '%a'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like '%a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab'   like 'a_'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abc'  like 'a_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'abcd' like 'a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab'   like '_b'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abcd' like '_d'\", Boolean.FALSE);\n    tester.checkBoolean(\"'abcd' like '%d'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab\\ncd' like 'ab%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abc\\ncd' like 'ab%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'123\\n\\n45\\n' like '%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab\\ncd\\nef' like '%cd%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab\\ncd\\nef' like '%cde%'\", Boolean.FALSE);\n  }\n","date":"2020-04-06 04:57:49","endLine":3875,"groupId":"10767","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLikeOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testLikeOperator() {\n    tester.setFor(SqlStdOperatorTable.LIKE);\n    tester.checkBoolean(\"''  like ''\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'a'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'b'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like 'A'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like 'a_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like '_a'\", Boolean.FALSE);\n    tester.checkBoolean(\"'a' like '%a'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like '%a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'a' like 'a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab'   like 'a_'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abc'  like 'a_'\", Boolean.FALSE);\n    tester.checkBoolean(\"'abcd' like 'a%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab'   like '_b'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abcd' like '_d'\", Boolean.FALSE);\n    tester.checkBoolean(\"'abcd' like '%d'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab\\ncd' like 'ab%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'abc\\ncd' like 'ab%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'123\\n\\n45\\n' like '%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab\\ncd\\nef' like '%cd%'\", Boolean.TRUE);\n    tester.checkBoolean(\"'ab\\ncd\\nef' like '%cde%'\", Boolean.FALSE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3853,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
