[{"authorTime":"2018-09-19 10:53:24","codes":[{"authorDate":"2018-06-27 09:11:06","commitOrder":2,"curCode":"  private CalciteAssert.ConnectionFactory newConnectionFactory() {\n    return new CalciteAssert.ConnectionFactory() {\n      @Override public Connection createConnection() throws SQLException {\n        final Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n        final SchemaPlus root = connection.unwrap(CalciteConnection.class).getRootSchema();\n\n        root.add(\"elastic\", new ElasticsearchSchema(NODE.restClient(), NODE.mapper(), NAME));\n\n        \r\n        final String viewSql = String.format(Locale.ROOT,\n            \"select cast(_MAP['a'] AS varchar(2)) AS a, \"\n                + \" cast(_MAP['b'] AS varchar(2)) AS b, \"\n                +  \" cast(_MAP['c'] AS varchar(2)) AS c, \"\n                +  \" cast(_MAP['int'] AS integer) AS num\"\n                +  \" from \\\"elastic\\\".\\\"%s\\\"\", NAME);\n\n        ViewTableMacro macro = ViewTable.viewMacro(root, viewSql,\n                Collections.singletonList(\"elastic\"), Arrays.asList(\"elastic\", \"view\"), false);\n        root.add(\"VIEW\", macro);\n\n        return connection;\n      }\n    };\n  }\n","date":"2018-07-15 05:43:13","endLine":89,"groupId":"1804","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newConnectionFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c3/b416c792e6bf319369e494fcc4a0ab1c636fa8.src","preCode":"  private CalciteAssert.ConnectionFactory newConnectionFactory() {\n    return new CalciteAssert.ConnectionFactory() {\n      @Override public Connection createConnection() throws SQLException {\n        final Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n        final SchemaPlus root = connection.unwrap(CalciteConnection.class).getRootSchema();\n\n        root.add(\"elastic\", new ElasticsearchSchema(NODE.restClient(), NODE.mapper(), NAME));\n\n        \r\n        final String viewSql = String.format(Locale.ROOT,\n            \"select cast(_MAP['a'] AS varchar(2)) AS a, \"\n                + \" cast(_MAP['b'] AS varchar(2)) AS b, \"\n                +  \" cast(_MAP['c'] AS varchar(2)) AS c, \"\n                +  \" cast(_MAP['int'] AS integer) AS num\"\n                +  \" from \\\"elastic\\\".\\\"%s\\\"\", NAME);\n\n        ViewTableMacro macro = ViewTable.viewMacro(root, viewSql,\n                Collections.singletonList(\"elastic\"), Arrays.asList(\"elastic\", \"view\"), false);\n        root.add(\"VIEW\", macro);\n\n        return connection;\n      }\n    };\n  }\n","realPath":"elasticsearch/src/test/java/org/apache/calcite/adapter/elasticsearch/BooleanLogicTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"NB"},{"authorDate":"2018-09-19 10:53:24","commitOrder":2,"curCode":"  private CalciteAssert.ConnectionFactory newConnectionFactory() {\n    return new CalciteAssert.ConnectionFactory() {\n      @Override public Connection createConnection() throws SQLException {\n        final Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n        final SchemaPlus root = connection.unwrap(CalciteConnection.class).getRootSchema();\n\n        root.add(\"elastic\", new ElasticsearchSchema(NODE.restClient(), NODE.mapper(), NAME));\n\n        \r\n        final String viewSql = String.format(Locale.ROOT,\n            \"select _MAP['a'] AS \\\"a\\\", \"\n                + \" _MAP['b.a']  AS \\\"b.a\\\", \"\n                +  \" _MAP['b.b'] AS \\\"b.b\\\", \"\n                +  \" _MAP['b.c.a'] AS \\\"b.c.a\\\" \"\n                +  \" from \\\"elastic\\\".\\\"%s\\\"\", NAME);\n\n        ViewTableMacro macro = ViewTable.viewMacro(root, viewSql,\n            Collections.singletonList(\"elastic\"), Arrays.asList(\"elastic\", \"view\"), false);\n        root.add(\"VIEW\", macro);\n        return connection;\n      }\n    };\n  }\n","date":"2018-09-19 10:53:24","endLine":84,"groupId":"15802","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newConnectionFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/d445763ec231fe276031a62be7181e05b68f77.src","preCode":"  private CalciteAssert.ConnectionFactory newConnectionFactory() {\n    return new CalciteAssert.ConnectionFactory() {\n      @Override public Connection createConnection() throws SQLException {\n        final Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n        final SchemaPlus root = connection.unwrap(CalciteConnection.class).getRootSchema();\n\n        root.add(\"elastic\", new ElasticsearchSchema(NODE.restClient(), NODE.mapper(), NAME));\n\n        \r\n        final String viewSql = String.format(Locale.ROOT,\n            \"select _MAP['a'] AS \\\"a\\\", \"\n                + \" _MAP['b.a']  AS \\\"b.a\\\", \"\n                +  \" _MAP['b.b'] AS \\\"b.b\\\", \"\n                +  \" _MAP['b.c.a'] AS \\\"b.c.a\\\" \"\n                +  \" from \\\"elastic\\\".\\\"%s\\\"\", NAME);\n\n        ViewTableMacro macro = ViewTable.viewMacro(root, viewSql,\n            Collections.singletonList(\"elastic\"), Arrays.asList(\"elastic\", \"view\"), false);\n        root.add(\"VIEW\", macro);\n        return connection;\n      }\n    };\n  }\n","realPath":"elasticsearch/src/test/java/org/apache/calcite/adapter/elasticsearch/Projection2Test.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"}],"commitId":"79af1c9ba735286653697deed3ff849b7c921fe4","commitMessage":"@@@[CALCITE-2528] Support Aggregates in ElasticSearch adapter (Andrei Sereda)\n\nAggregate functions (count/sum/min/max/avg) are pushed down to ES.\n\nAdd ElasticsearchAggregate relational expression to convert SQL into native Elastic aggregations (value_count.  min.  max etc.).\nEnhance ElasticsearchTable to prepare correct aggregate ES JSON query.\n\nCreate special classes to parse recursively elastic aggregation response or buckets (located in ElasticJson). They're inspired from existing Elastic high-level client source.\n\nFor tests.  make Json input more human friendly. Single quotes are accepted and fields can be unquoted (unless\nthey contain special characters). Also field with dots 'a.b.c' are automatically auto-expanded. This reduces JSON noise.\n\nFix single projections which previously returned map (see [CALCITE-2485])\n\nClose apache/calcite#801\nClose apache/calcite#822\n","date":"2018-09-19 10:53:24","modifiedFileCount":"20","status":"M","submitter":"Andrei Sereda"},{"authorTime":"2018-12-25 02:56:59","codes":[{"authorDate":"2018-06-27 09:11:06","commitOrder":3,"curCode":"  private CalciteAssert.ConnectionFactory newConnectionFactory() {\n    return new CalciteAssert.ConnectionFactory() {\n      @Override public Connection createConnection() throws SQLException {\n        final Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n        final SchemaPlus root = connection.unwrap(CalciteConnection.class).getRootSchema();\n\n        root.add(\"elastic\", new ElasticsearchSchema(NODE.restClient(), NODE.mapper(), NAME));\n\n        \r\n        final String viewSql = String.format(Locale.ROOT,\n            \"select cast(_MAP['a'] AS varchar(2)) AS a, \"\n                + \" cast(_MAP['b'] AS varchar(2)) AS b, \"\n                +  \" cast(_MAP['c'] AS varchar(2)) AS c, \"\n                +  \" cast(_MAP['int'] AS integer) AS num\"\n                +  \" from \\\"elastic\\\".\\\"%s\\\"\", NAME);\n\n        ViewTableMacro macro = ViewTable.viewMacro(root, viewSql,\n                Collections.singletonList(\"elastic\"), Arrays.asList(\"elastic\", \"view\"), false);\n        root.add(\"VIEW\", macro);\n\n        return connection;\n      }\n    };\n  }\n","date":"2018-07-15 05:43:13","endLine":89,"groupId":"102209","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"newConnectionFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c3/b416c792e6bf319369e494fcc4a0ab1c636fa8.src","preCode":"  private CalciteAssert.ConnectionFactory newConnectionFactory() {\n    return new CalciteAssert.ConnectionFactory() {\n      @Override public Connection createConnection() throws SQLException {\n        final Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n        final SchemaPlus root = connection.unwrap(CalciteConnection.class).getRootSchema();\n\n        root.add(\"elastic\", new ElasticsearchSchema(NODE.restClient(), NODE.mapper(), NAME));\n\n        \r\n        final String viewSql = String.format(Locale.ROOT,\n            \"select cast(_MAP['a'] AS varchar(2)) AS a, \"\n                + \" cast(_MAP['b'] AS varchar(2)) AS b, \"\n                +  \" cast(_MAP['c'] AS varchar(2)) AS c, \"\n                +  \" cast(_MAP['int'] AS integer) AS num\"\n                +  \" from \\\"elastic\\\".\\\"%s\\\"\", NAME);\n\n        ViewTableMacro macro = ViewTable.viewMacro(root, viewSql,\n                Collections.singletonList(\"elastic\"), Arrays.asList(\"elastic\", \"view\"), false);\n        root.add(\"VIEW\", macro);\n\n        return connection;\n      }\n    };\n  }\n","realPath":"elasticsearch/src/test/java/org/apache/calcite/adapter/elasticsearch/BooleanLogicTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2018-12-25 02:56:59","commitOrder":3,"curCode":"  private CalciteAssert.ConnectionFactory newConnectionFactory() {\n    return new CalciteAssert.ConnectionFactory() {\n      @Override public Connection createConnection() throws SQLException {\n        final Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n        final SchemaPlus root = connection.unwrap(CalciteConnection.class).getRootSchema();\n\n        root.add(\"elastic\", new ElasticsearchSchema(NODE.restClient(), NODE.mapper(), NAME));\n\n        \r\n        final String viewSql = String.format(Locale.ROOT,\n            \"select _MAP['a'] AS \\\"a\\\", \"\n                + \" _MAP['b.a']  AS \\\"b.a\\\", \"\n                +  \" _MAP['b.b'] AS \\\"b.b\\\", \"\n                +  \" _MAP['b.c.a'] AS \\\"b.c.a\\\", \"\n                +  \" _MAP['_id'] AS \\\"id\\\" \" \r\n                +  \" from \\\"elastic\\\".\\\"%s\\\"\", NAME);\n\n        ViewTableMacro macro = ViewTable.viewMacro(root, viewSql,\n            Collections.singletonList(\"elastic\"), Arrays.asList(\"elastic\", \"view\"), false);\n        root.add(\"VIEW\", macro);\n        return connection;\n      }\n    };\n  }\n","date":"2019-01-03 03:34:20","endLine":91,"groupId":"102209","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"newConnectionFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dd/badc20f1be63dc358ebc8b817be0791c13ba32.src","preCode":"  private CalciteAssert.ConnectionFactory newConnectionFactory() {\n    return new CalciteAssert.ConnectionFactory() {\n      @Override public Connection createConnection() throws SQLException {\n        final Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n        final SchemaPlus root = connection.unwrap(CalciteConnection.class).getRootSchema();\n\n        root.add(\"elastic\", new ElasticsearchSchema(NODE.restClient(), NODE.mapper(), NAME));\n\n        \r\n        final String viewSql = String.format(Locale.ROOT,\n            \"select _MAP['a'] AS \\\"a\\\", \"\n                + \" _MAP['b.a']  AS \\\"b.a\\\", \"\n                +  \" _MAP['b.b'] AS \\\"b.b\\\", \"\n                +  \" _MAP['b.c.a'] AS \\\"b.c.a\\\" \"\n                +  \" from \\\"elastic\\\".\\\"%s\\\"\", NAME);\n\n        ViewTableMacro macro = ViewTable.viewMacro(root, viewSql,\n            Collections.singletonList(\"elastic\"), Arrays.asList(\"elastic\", \"view\"), false);\n        root.add(\"VIEW\", macro);\n        return connection;\n      }\n    };\n  }\n","realPath":"elasticsearch/src/test/java/org/apache/calcite/adapter/elasticsearch/Projection2Test.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"3dee82dd7825f4c09dca27a312f9f82a8d6b899d","commitMessage":"@@@[CALCITE-2755] Expose document _id field when querying ElasticSearch\n\nAllow user to query (project) [_id](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-id-field.html) field\nexplicitly.\n\nNote that (by default) meta fields are not available for `select *` type of queries and have to be explicitly listed in projection\nlike `select _MAP['_id'].  _MAP['a'] from elastic`.\n\nAdd additional mapping between calcite expression `EXPR$n` and item name `foo.bar` (as part of `_MAP['foo.bar']`).\nThis information is otherwise lost during query translation.\n\nCloses #982\n","date":"2019-01-03 03:34:20","modifiedFileCount":"10","status":"M","submitter":"Andrei Sereda"}]
