[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"    public void checkFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = parseStmt(sap.sql);\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      SqlValidatorTestCase.checkEx(thrown, expectedMsgPattern, sap);\n    }\n","date":"2014-11-14 09:39:34","endLine":5643,"groupId":"356","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkFails","params":"(Stringsql@StringexpectedMsgPattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/e977745bb2356d254a45d8c8d3748b6dec754f.src","preCode":"    public void checkFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = parseStmt(sap.sql);\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      SqlValidatorTestCase.checkEx(thrown, expectedMsgPattern, sap);\n    }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5630,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"    public void checkExpFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = parseExpression(sap.sql);\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      SqlValidatorTestCase.checkEx(thrown, expectedMsgPattern, sap);\n    }\n","date":"2014-11-14 09:39:34","endLine":5662,"groupId":"12034","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkExpFails","params":"(Stringsql@StringexpectedMsgPattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/e977745bb2356d254a45d8c8d3748b6dec754f.src","preCode":"    public void checkExpFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = parseExpression(sap.sql);\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      SqlValidatorTestCase.checkEx(thrown, expectedMsgPattern, sap);\n    }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5649,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2016-10-28 13:21:23","codes":[{"authorDate":"2016-10-28 13:21:23","commitOrder":2,"curCode":"    public void checkFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = getSqlParser(sap.sql).parseStmt();\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      SqlValidatorTestCase.checkEx(thrown, expectedMsgPattern, sap);\n    }\n","date":"2016-10-31 12:28:10","endLine":7086,"groupId":"3512","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkFails","params":"(Stringsql@StringexpectedMsgPattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b5/ce24bb6f389d695d45be2979dd6adefd358736.src","preCode":"    public void checkFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = parseStmt(sap.sql);\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      SqlValidatorTestCase.checkEx(thrown, expectedMsgPattern, sap);\n    }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7073,"status":"M"},{"authorDate":"2016-10-28 13:21:23","commitOrder":2,"curCode":"    public void checkExpFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = getSqlParser(sap.sql).parseExpression();\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      SqlValidatorTestCase.checkEx(thrown, expectedMsgPattern, sap);\n    }\n","date":"2016-10-31 12:28:10","endLine":7115,"groupId":"3511","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkExpFails","params":"(Stringsql@StringexpectedMsgPattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b5/ce24bb6f389d695d45be2979dd6adefd358736.src","preCode":"    public void checkExpFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = parseExpression(sap.sql);\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      SqlValidatorTestCase.checkEx(thrown, expectedMsgPattern, sap);\n    }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7102,"status":"M"}],"commitId":"aa8fe0828d319614bce2fc1a519ad907f25d904e","commitMessage":"@@@[CALCITE-1125] MINUS as a synonym for EXCEPT (enabled in Oracle10 conformance) (Chandni Singh)\n\nClose apache/calcite#321\n","date":"2016-10-31 12:28:10","modifiedFileCount":"7","status":"M","submitter":"Chandni Singh"},{"authorTime":"2019-02-14 16:22:18","codes":[{"authorDate":"2019-02-14 16:22:18","commitOrder":3,"curCode":"    public void checkFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = getSqlParser(sap.sql).parseStmt();\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      checkEx(expectedMsgPattern, sap, thrown);\n    }\n","date":"2019-04-06 12:20:21","endLine":8646,"groupId":"3512","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkFails","params":"(Stringsql@StringexpectedMsgPattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bf/b02911b0f06ba848fe169a0be750a2435abea4.src","preCode":"    public void checkFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = getSqlParser(sap.sql).parseStmt();\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      SqlValidatorTestCase.checkEx(thrown, expectedMsgPattern, sap);\n    }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8633,"status":"M"},{"authorDate":"2019-02-14 16:22:18","commitOrder":3,"curCode":"    public void checkExpFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = getSqlParser(sap.sql).parseExpression();\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      checkEx(expectedMsgPattern, sap, thrown);\n    }\n","date":"2019-04-06 12:20:21","endLine":8675,"groupId":"3511","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkExpFails","params":"(Stringsql@StringexpectedMsgPattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bf/b02911b0f06ba848fe169a0be750a2435abea4.src","preCode":"    public void checkExpFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = getSqlParser(sap.sql).parseExpression();\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      SqlValidatorTestCase.checkEx(thrown, expectedMsgPattern, sap);\n    }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8662,"status":"M"}],"commitId":"16f518b359cdf529d5bbe42cd5e8663001030d14","commitMessage":"@@@[CALCITE-2847] Optimize global LOOKAHEAD for SQL parsers\n\nClose apache/calcite#1041\n","date":"2019-04-06 12:20:21","modifiedFileCount":"5","status":"M","submitter":"hongzezhang"},{"authorTime":"2019-02-14 16:22:18","codes":[{"authorDate":"2018-08-08 17:41:13","commitOrder":4,"curCode":"    public void checkFails(\n        String sql,\n        boolean list,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode;\n        if (list) {\n          sqlNode = getSqlParser(sap.sql).parseStmtList();\n        } else {\n          sqlNode = getSqlParser(sap.sql).parseStmt();\n        }\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      checkEx(expectedMsgPattern, sap, thrown);\n    }\n","date":"2019-04-24 08:16:46","endLine":8860,"groupId":"7593","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"checkFails","params":"(Stringsql@booleanlist@StringexpectedMsgPattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/88/046f4b353d93dd2cf575f1d1b4b14224dd017d.src","preCode":"    public void checkFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = getSqlParser(sap.sql).parseStmt();\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      checkEx(expectedMsgPattern, sap, thrown);\n    }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8841,"status":"M"},{"authorDate":"2019-02-14 16:22:18","commitOrder":4,"curCode":"    public void checkExpFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = getSqlParser(sap.sql).parseExpression();\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      checkEx(expectedMsgPattern, sap, thrown);\n    }\n","date":"2019-04-06 12:20:21","endLine":8675,"groupId":"3511","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkExpFails","params":"(Stringsql@StringexpectedMsgPattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bf/b02911b0f06ba848fe169a0be750a2435abea4.src","preCode":"    public void checkExpFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = getSqlParser(sap.sql).parseExpression();\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      checkEx(expectedMsgPattern, sap, thrown);\n    }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8662,"status":"N"}],"commitId":"986a2d579c8f9b9f08aa9bbbfe11efc4e7bb0809","commitMessage":"@@@[CALCITE-2453] Parse list of SQL statements separated with a semicolon (Chunwei Lei.  charbel yazbeck)\n\nClose apache/calcite#1177\n","date":"2019-04-24 08:16:46","modifiedFileCount":"3","status":"M","submitter":"cyazbeck"},{"authorTime":"2020-09-10 07:48:24","codes":[{"authorDate":"2020-09-10 07:48:24","commitOrder":5,"curCode":"    @Override public void checkFails(StringAndPos sap, SqlDialect dialect,\n        boolean list, String expectedMsgPattern) {\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode;\n        final UnaryOperator<SqlParser.ConfigBuilder> transform =\n            getTransform(dialect);\n        final Reader reader = new SourceStringReader(sap.sql);\n        final SqlParser parser = getSqlParser(reader, transform);\n        if (list) {\n          sqlNode = parser.parseStmtList();\n        } else {\n          sqlNode = parser.parseStmt();\n        }\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      checkEx(expectedMsgPattern, sap, thrown);\n    }\n","date":"2020-09-18 10:35:30","endLine":9196,"groupId":"10375","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"checkFails","params":"(StringAndPossap@SqlDialectdialect@booleanlist@StringexpectedMsgPattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6c/d1a9613e189238221e85788dafc7e38ba16391.src","preCode":"    public void checkFails(\n        String sql,\n        boolean list,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode;\n        if (list) {\n          sqlNode = getSqlParser(sap.sql).parseStmtList();\n        } else {\n          sqlNode = getSqlParser(sap.sql).parseStmt();\n        }\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      checkEx(expectedMsgPattern, sap, thrown);\n    }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9176,"status":"M"},{"authorDate":"2020-09-10 07:48:24","commitOrder":5,"curCode":"    @Override public void checkExpFails(StringAndPos sap, SqlDialect dialect,\n        String expectedMsgPattern) {\n      Throwable thrown = null;\n      try {\n        final UnaryOperator<SqlParser.ConfigBuilder> transform =\n            getTransform(dialect);\n        final Reader reader = new SourceStringReader(sap.sql);\n        final SqlParser parser = getSqlParser(reader, transform);\n        final SqlNode sqlNode = parser.parseExpression();\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      checkEx(expectedMsgPattern, sap, thrown);\n    }\n","date":"2020-09-18 10:35:30","endLine":9231,"groupId":"5099","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"checkExpFails","params":"(StringAndPossap@SqlDialectdialect@StringexpectedMsgPattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6c/d1a9613e189238221e85788dafc7e38ba16391.src","preCode":"    public void checkExpFails(\n        String sql,\n        String expectedMsgPattern) {\n      SqlParserUtil.StringAndPos sap = SqlParserUtil.findPos(sql);\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode = getSqlParser(sap.sql).parseExpression();\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      checkEx(expectedMsgPattern, sap, thrown);\n    }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9216,"status":"M"}],"commitId":"0c5bb1a345f39cab3eaa3b95a77c1e8831e667e1","commitMessage":"@@@Refactor SqlParserTest\n\nStore StringAndPos rather than the SQL string in a test. This\nmakes it easier to write positive and negative tests on same\nSQL string.  because we don't have to keep the carets (that\nindicate the error position) in the SQL string. If you want\nreal carets in a SQL string.  you can now write \"^^\". Remove\nthe sansCarets() method.  as it is no longer necessary.\n\nPass SqlDialect into negative and expression tests.\n\nAdd constants in SqlParserTest for common dialects.\n","date":"2020-09-18 10:35:30","modifiedFileCount":"4","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-11 16:38:46","codes":[{"authorDate":"2020-09-11 16:38:46","commitOrder":6,"curCode":"    @Override public void checkFails(StringAndPos sap, SqlDialect dialect,\n        boolean list, String expectedMsgPattern) {\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode;\n        final UnaryOperator<SqlParser.Config> transform =\n            getTransform(dialect);\n        final Reader reader = new SourceStringReader(sap.sql);\n        final SqlParser parser = getSqlParser(reader, transform);\n        if (list) {\n          sqlNode = parser.parseStmtList();\n        } else {\n          sqlNode = parser.parseStmt();\n        }\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      checkEx(expectedMsgPattern, sap, thrown);\n    }\n","date":"2020-09-18 10:35:31","endLine":9193,"groupId":"10929","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"checkFails","params":"(StringAndPossap@SqlDialectdialect@booleanlist@StringexpectedMsgPattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/33/552d6fe318702111ab3e1aa8126d5c28de6598.src","preCode":"    @Override public void checkFails(StringAndPos sap, SqlDialect dialect,\n        boolean list, String expectedMsgPattern) {\n      Throwable thrown = null;\n      try {\n        final SqlNode sqlNode;\n        final UnaryOperator<SqlParser.ConfigBuilder> transform =\n            getTransform(dialect);\n        final Reader reader = new SourceStringReader(sap.sql);\n        final SqlParser parser = getSqlParser(reader, transform);\n        if (list) {\n          sqlNode = parser.parseStmtList();\n        } else {\n          sqlNode = parser.parseStmt();\n        }\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      checkEx(expectedMsgPattern, sap, thrown);\n    }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9173,"status":"M"},{"authorDate":"2020-09-11 16:38:46","commitOrder":6,"curCode":"    @Override public void checkExpFails(StringAndPos sap, SqlDialect dialect,\n        String expectedMsgPattern) {\n      Throwable thrown = null;\n      try {\n        final UnaryOperator<SqlParser.Config> transform = getTransform(dialect);\n        final Reader reader = new SourceStringReader(sap.sql);\n        final SqlParser parser = getSqlParser(reader, transform);\n        final SqlNode sqlNode = parser.parseExpression();\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      checkEx(expectedMsgPattern, sap, thrown);\n    }\n","date":"2020-09-18 10:35:31","endLine":9226,"groupId":"10929","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"checkExpFails","params":"(StringAndPossap@SqlDialectdialect@StringexpectedMsgPattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/33/552d6fe318702111ab3e1aa8126d5c28de6598.src","preCode":"    @Override public void checkExpFails(StringAndPos sap, SqlDialect dialect,\n        String expectedMsgPattern) {\n      Throwable thrown = null;\n      try {\n        final UnaryOperator<SqlParser.ConfigBuilder> transform =\n            getTransform(dialect);\n        final Reader reader = new SourceStringReader(sap.sql);\n        final SqlParser parser = getSqlParser(reader, transform);\n        final SqlNode sqlNode = parser.parseExpression();\n        Util.discard(sqlNode);\n      } catch (Throwable ex) {\n        thrown = ex;\n      }\n\n      checkEx(expectedMsgPattern, sap, thrown);\n    }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9212,"status":"M"}],"commitId":"76ff19135f8bf9ee19b47d999d23bc1e2ab75e15","commitMessage":"@@@[CALCITE-4248] Deprecate SqlParser.ConfigBuilder\n","date":"2020-09-18 10:35:31","modifiedFileCount":"20","status":"M","submitter":"Julian Hyde"}]
