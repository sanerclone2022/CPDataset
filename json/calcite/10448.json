[{"authorTime":"2017-03-15 11:56:19","codes":[{"authorDate":"2017-04-17 20:05:59","commitOrder":4,"curCode":"  private void checkDateRangeNoSimplify(Fixture f, RexNode e,\n      Matcher<String> intervalMatcher) {\n    final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();\n    \r\n    \r\n    \r\n    \r\n    final List<TimeUnitRange> timeUnits =\n        Ordering.natural().sortedCopy(DateRangeRules.extractTimeUnits(e));\n    for (TimeUnitRange timeUnit : timeUnits) {\n      e = e.accept(\n          new DateRangeRules.ExtractShuttle(f.rexBuilder, timeUnit,\n              operandRanges));\n    }\n    final List<LocalInterval> intervals =\n        DruidDateTimeUtils.createInterval(f.timeStampDataType, e);\n    assertThat(intervals, notNullValue());\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","date":"2017-04-21 01:19:38","endLine":162,"groupId":"16123","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkDateRangeNoSimplify","params":"(Fixturef@RexNodee@Matcher<String>intervalMatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b2/cf321e6f2dc07f32aefd4dea6ca3418d9c6724.src","preCode":"  private void checkDateRangeNoSimplify(Fixture f, RexNode e,\n      Matcher<String> intervalMatcher) {\n    final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();\n    \r\n    \r\n    \r\n    \r\n    final List<TimeUnitRange> timeUnits =\n        Ordering.natural().sortedCopy(DateRangeRules.extractTimeUnits(e));\n    for (TimeUnitRange timeUnit : timeUnits) {\n      e = e.accept(\n          new DateRangeRules.ExtractShuttle(f.rexBuilder, timeUnit,\n              operandRanges));\n    }\n    final List<LocalInterval> intervals =\n        DruidDateTimeUtils.createInterval(f.timeStampDataType, e);\n    assertThat(intervals, notNullValue());\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"},{"authorDate":"2017-03-15 11:56:19","commitOrder":4,"curCode":"  private void checkDateRange(Fixture f, RexNode e, Matcher<String> intervalMatcher) {\n    final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();\n    \r\n    \r\n    \r\n    \r\n    final List<TimeUnitRange> timeUnits =\n        Ordering.natural().sortedCopy(DateRangeRules.extractTimeUnits(e));\n    for (TimeUnitRange timeUnit : timeUnits) {\n      e = e.accept(\n          new DateRangeRules.ExtractShuttle(f.rexBuilder, timeUnit,\n              operandRanges));\n    }\n    final RexNode e2 = f.simplify.simplify(e);\n    List<LocalInterval> intervals =\n        DruidDateTimeUtils.createInterval(f.timeStampDataType, e2);\n    if (intervals == null) {\n      throw new AssertionError(\"null interval\");\n    }\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","date":"2017-03-15 16:44:46","endLine":139,"groupId":"4844","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDateRange","params":"(Fixturef@RexNodee@Matcher<String>intervalMatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/82/73130ba2cae087aeceb5d2edce1bc0a9a0a911.src","preCode":"  private void checkDateRange(Fixture f, RexNode e, Matcher<String> intervalMatcher) {\n    final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();\n    \r\n    \r\n    \r\n    \r\n    final List<TimeUnitRange> timeUnits =\n        Ordering.natural().sortedCopy(DateRangeRules.extractTimeUnits(e));\n    for (TimeUnitRange timeUnit : timeUnits) {\n      e = e.accept(\n          new DateRangeRules.ExtractShuttle(f.rexBuilder, timeUnit,\n              operandRanges));\n    }\n    final RexNode e2 = f.simplify.simplify(e);\n    List<LocalInterval> intervals =\n        DruidDateTimeUtils.createInterval(f.timeStampDataType, e2);\n    if (intervals == null) {\n      throw new AssertionError(\"null interval\");\n    }\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"NB"}],"commitId":"495fd1dc7b0c1805834964a98fc042e12c76d7a7","commitMessage":"@@@[CALCITE-1738] Push CAST of literals to Druid (Remus Rusanu)\n\nClose apache/calcite#430\n","date":"2017-04-21 01:19:38","modifiedFileCount":"3","status":"M","submitter":"Remus Rusanu"},{"authorTime":"2017-08-15 08:46:42","codes":[{"authorDate":"2017-08-15 08:46:42","commitOrder":5,"curCode":"  private void checkDateRangeNoSimplify(Fixture f, RexNode e,\n      Matcher<String> intervalMatcher) {\n    final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();\n    \r\n    \r\n    \r\n    \r\n    final List<TimeUnitRange> timeUnits =\n        Ordering.natural().sortedCopy(DateRangeRules.extractTimeUnits(e));\n    for (TimeUnitRange timeUnit : timeUnits) {\n      e = e.accept(\n          new DateRangeRules.ExtractShuttle(f.rexBuilder, timeUnit,\n              operandRanges));\n    }\n    final List<LocalInterval> intervals =\n        DruidDateTimeUtils.createInterval(e, \"UTC\");\n    assertThat(intervals, notNullValue());\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","date":"2017-09-06 06:00:36","endLine":164,"groupId":"16123","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkDateRangeNoSimplify","params":"(Fixturef@RexNodee@Matcher<String>intervalMatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0e/1948daa8636c2a25c5cb7397d675ff1098cf16.src","preCode":"  private void checkDateRangeNoSimplify(Fixture f, RexNode e,\n      Matcher<String> intervalMatcher) {\n    final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();\n    \r\n    \r\n    \r\n    \r\n    final List<TimeUnitRange> timeUnits =\n        Ordering.natural().sortedCopy(DateRangeRules.extractTimeUnits(e));\n    for (TimeUnitRange timeUnit : timeUnits) {\n      e = e.accept(\n          new DateRangeRules.ExtractShuttle(f.rexBuilder, timeUnit,\n              operandRanges));\n    }\n    final List<LocalInterval> intervals =\n        DruidDateTimeUtils.createInterval(f.timeStampDataType, e);\n    assertThat(intervals, notNullValue());\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2017-08-15 08:46:42","commitOrder":5,"curCode":"  private void checkDateRange(Fixture f, RexNode e, Matcher<String> intervalMatcher) {\n    final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();\n    \r\n    \r\n    \r\n    \r\n    final List<TimeUnitRange> timeUnits =\n        Ordering.natural().sortedCopy(DateRangeRules.extractTimeUnits(e));\n    for (TimeUnitRange timeUnit : timeUnits) {\n      e = e.accept(\n          new DateRangeRules.ExtractShuttle(f.rexBuilder, timeUnit,\n              operandRanges));\n    }\n    final RexNode e2 = f.simplify.simplify(e);\n    List<LocalInterval> intervals =\n        DruidDateTimeUtils.createInterval(e2, \"UTC\");\n    if (intervals == null) {\n      throw new AssertionError(\"null interval\");\n    }\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","date":"2017-09-06 06:00:36","endLine":186,"groupId":"4844","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDateRange","params":"(Fixturef@RexNodee@Matcher<String>intervalMatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0e/1948daa8636c2a25c5cb7397d675ff1098cf16.src","preCode":"  private void checkDateRange(Fixture f, RexNode e, Matcher<String> intervalMatcher) {\n    final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();\n    \r\n    \r\n    \r\n    \r\n    final List<TimeUnitRange> timeUnits =\n        Ordering.natural().sortedCopy(DateRangeRules.extractTimeUnits(e));\n    for (TimeUnitRange timeUnit : timeUnits) {\n      e = e.accept(\n          new DateRangeRules.ExtractShuttle(f.rexBuilder, timeUnit,\n              operandRanges));\n    }\n    final RexNode e2 = f.simplify.simplify(e);\n    List<LocalInterval> intervals =\n        DruidDateTimeUtils.createInterval(f.timeStampDataType, e2);\n    if (intervals == null) {\n      throw new AssertionError(\"null interval\");\n    }\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"939c9a62b4905d2cfffcb4adaefd76a809aa3520","commitMessage":"@@@[CALCITE-1947] Add time/timestamp with local time zone types to optimizer\n\nClose apache/calcite#519\n","date":"2017-09-06 06:00:36","modifiedFileCount":"34","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2017-10-14 01:29:27","codes":[{"authorDate":"2017-10-14 01:29:27","commitOrder":6,"curCode":"  private void checkDateRangeNoSimplify(Fixture f, RexNode e,\n      Matcher<String> intervalMatcher) {\n    final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();\n    \r\n    \r\n    \r\n    \r\n    final List<TimeUnitRange> timeUnits =\n        Ordering.natural().sortedCopy(DateRangeRules.extractTimeUnits(e));\n    for (TimeUnitRange timeUnit : timeUnits) {\n      e = e.accept(\n          new DateRangeRules.ExtractShuttle(f.rexBuilder, timeUnit,\n              operandRanges));\n    }\n    final List<Interval> intervals =\n        DruidDateTimeUtils.createInterval(e, \"UTC\");\n    assertThat(intervals, notNullValue());\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","date":"2017-11-15 07:37:02","endLine":164,"groupId":"16123","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkDateRangeNoSimplify","params":"(Fixturef@RexNodee@Matcher<String>intervalMatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/f5b9e75ec54d39abedda2715fee61205278691.src","preCode":"  private void checkDateRangeNoSimplify(Fixture f, RexNode e,\n      Matcher<String> intervalMatcher) {\n    final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();\n    \r\n    \r\n    \r\n    \r\n    final List<TimeUnitRange> timeUnits =\n        Ordering.natural().sortedCopy(DateRangeRules.extractTimeUnits(e));\n    for (TimeUnitRange timeUnit : timeUnits) {\n      e = e.accept(\n          new DateRangeRules.ExtractShuttle(f.rexBuilder, timeUnit,\n              operandRanges));\n    }\n    final List<LocalInterval> intervals =\n        DruidDateTimeUtils.createInterval(e, \"UTC\");\n    assertThat(intervals, notNullValue());\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2017-10-14 01:29:27","commitOrder":6,"curCode":"  private void checkDateRange(Fixture f, RexNode e, Matcher<String> intervalMatcher) {\n    final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();\n    \r\n    \r\n    \r\n    \r\n    final List<TimeUnitRange> timeUnits =\n        Ordering.natural().sortedCopy(DateRangeRules.extractTimeUnits(e));\n    for (TimeUnitRange timeUnit : timeUnits) {\n      e = e.accept(\n          new DateRangeRules.ExtractShuttle(f.rexBuilder, timeUnit,\n              operandRanges));\n    }\n    final RexNode e2 = f.simplify.simplify(e);\n    List<Interval> intervals =\n        DruidDateTimeUtils.createInterval(e2, \"UTC\");\n    if (intervals == null) {\n      throw new AssertionError(\"null interval\");\n    }\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","date":"2017-11-15 07:37:02","endLine":186,"groupId":"4844","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDateRange","params":"(Fixturef@RexNodee@Matcher<String>intervalMatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/f5b9e75ec54d39abedda2715fee61205278691.src","preCode":"  private void checkDateRange(Fixture f, RexNode e, Matcher<String> intervalMatcher) {\n    final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();\n    \r\n    \r\n    \r\n    \r\n    final List<TimeUnitRange> timeUnits =\n        Ordering.natural().sortedCopy(DateRangeRules.extractTimeUnits(e));\n    for (TimeUnitRange timeUnit : timeUnits) {\n      e = e.accept(\n          new DateRangeRules.ExtractShuttle(f.rexBuilder, timeUnit,\n              operandRanges));\n    }\n    final RexNode e2 = f.simplify.simplify(e);\n    List<LocalInterval> intervals =\n        DruidDateTimeUtils.createInterval(e2, \"UTC\");\n    if (intervals == null) {\n      throw new AssertionError(\"null interval\");\n    }\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"20ade9d266d969f230be7b4e0062db17757e53a3","commitMessage":"@@@[CALCITE-2012] Replace LocalInterval by Interval in Druid adapter\n","date":"2017-11-15 07:37:02","modifiedFileCount":"8","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2018-01-01 18:45:32","codes":[{"authorDate":"2018-01-01 18:45:32","commitOrder":7,"curCode":"  private void checkDateRangeNoSimplify(Fixture f, RexNode e,\n      Matcher<String> intervalMatcher) {\n    e = DateRangeRules.replaceTimeUnits(f.rexBuilder, e);\n    final List<Interval> intervals =\n        DruidDateTimeUtils.createInterval(e, \"UTC\");\n    assertThat(intervals, notNullValue());\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","date":"2018-01-03 06:24:51","endLine":149,"groupId":"16123","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"checkDateRangeNoSimplify","params":"(Fixturef@RexNodee@Matcher<String>intervalMatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0b/5d03499116471ec5d95df060f4ce1fee54321c.src","preCode":"  private void checkDateRangeNoSimplify(Fixture f, RexNode e,\n      Matcher<String> intervalMatcher) {\n    final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();\n    \r\n    \r\n    \r\n    \r\n    final List<TimeUnitRange> timeUnits =\n        Ordering.natural().sortedCopy(DateRangeRules.extractTimeUnits(e));\n    for (TimeUnitRange timeUnit : timeUnits) {\n      e = e.accept(\n          new DateRangeRules.ExtractShuttle(f.rexBuilder, timeUnit,\n              operandRanges));\n    }\n    final List<Interval> intervals =\n        DruidDateTimeUtils.createInterval(e, \"UTC\");\n    assertThat(intervals, notNullValue());\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2018-01-01 18:45:32","commitOrder":7,"curCode":"  private void checkDateRange(Fixture f, RexNode e, Matcher<String> intervalMatcher) {\n    e = DateRangeRules.replaceTimeUnits(f.rexBuilder, e);\n    final RexNode e2 = f.simplify.simplify(e);\n    List<Interval> intervals =\n        DruidDateTimeUtils.createInterval(e2, \"UTC\");\n    if (intervals == null) {\n      throw new AssertionError(\"null interval\");\n    }\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","date":"2018-01-03 06:24:51","endLine":160,"groupId":"4844","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDateRange","params":"(Fixturef@RexNodee@Matcher<String>intervalMatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0b/5d03499116471ec5d95df060f4ce1fee54321c.src","preCode":"  private void checkDateRange(Fixture f, RexNode e, Matcher<String> intervalMatcher) {\n    final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();\n    \r\n    \r\n    \r\n    \r\n    final List<TimeUnitRange> timeUnits =\n        Ordering.natural().sortedCopy(DateRangeRules.extractTimeUnits(e));\n    for (TimeUnitRange timeUnit : timeUnits) {\n      e = e.accept(\n          new DateRangeRules.ExtractShuttle(f.rexBuilder, timeUnit,\n              operandRanges));\n    }\n    final RexNode e2 = f.simplify.simplify(e);\n    List<Interval> intervals =\n        DruidDateTimeUtils.createInterval(e2, \"UTC\");\n    if (intervals == null) {\n      throw new AssertionError(\"null interval\");\n    }\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"1e9fd38ba7b702675a066f6bd712d03b7b07410e","commitMessage":"@@@[CALCITE-1658] DateRangeRules incorrectly rewrites EXTRACT calls (Nishant Bangarwa)\n\nFix several issues where DateRangeRules incorrectly rewrites EXTRACT\ncalls.  causing wrong results.\n\nClose apache/calcite#596\n\nClose apache/calcite#587 (unrelated.  but forgot to close it in [CALCITE-2102])\n","date":"2018-01-03 06:24:51","modifiedFileCount":"3","status":"M","submitter":"Nishant"},{"authorTime":"2018-01-30 04:30:05","codes":[{"authorDate":"2018-01-30 04:30:05","commitOrder":8,"curCode":"  private void checkDateRangeNoSimplify(Fixture f, RexNode e,\n      Matcher<String> intervalMatcher) {\n    e = DateRangeRules.replaceTimeUnits(f.rexBuilder, e, \"UTC\");\n    final List<Interval> intervals =\n        DruidDateTimeUtils.createInterval(e, \"UTC\");\n    assertThat(intervals, notNullValue());\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","date":"2018-02-06 02:36:17","endLine":149,"groupId":"16123","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"checkDateRangeNoSimplify","params":"(Fixturef@RexNodee@Matcher<String>intervalMatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1b/20b320f6c3d9e9ece7f40c4c464cf0e785950e.src","preCode":"  private void checkDateRangeNoSimplify(Fixture f, RexNode e,\n      Matcher<String> intervalMatcher) {\n    e = DateRangeRules.replaceTimeUnits(f.rexBuilder, e);\n    final List<Interval> intervals =\n        DruidDateTimeUtils.createInterval(e, \"UTC\");\n    assertThat(intervals, notNullValue());\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2018-01-30 04:30:05","commitOrder":8,"curCode":"  private void checkDateRange(Fixture f, RexNode e, Matcher<String> intervalMatcher) {\n    e = DateRangeRules.replaceTimeUnits(f.rexBuilder, e, \"UTC\");\n    final RexNode e2 = f.simplify.simplify(e);\n    List<Interval> intervals =\n        DruidDateTimeUtils.createInterval(e2, \"UTC\");\n    if (intervals == null) {\n      throw new AssertionError(\"null interval\");\n    }\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","date":"2018-02-06 02:36:17","endLine":160,"groupId":"4844","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDateRange","params":"(Fixturef@RexNodee@Matcher<String>intervalMatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1b/20b320f6c3d9e9ece7f40c4c464cf0e785950e.src","preCode":"  private void checkDateRange(Fixture f, RexNode e, Matcher<String> intervalMatcher) {\n    e = DateRangeRules.replaceTimeUnits(f.rexBuilder, e);\n    final RexNode e2 = f.simplify.simplify(e);\n    List<Interval> intervals =\n        DruidDateTimeUtils.createInterval(e2, \"UTC\");\n    if (intervals == null) {\n      throw new AssertionError(\"null interval\");\n    }\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"96d620be8054d83aca97d62780cb38cea928a655","commitMessage":"@@@[CALCITE-2156] In DateRangeRules.  compute FLOOR and CEIL of TIMESTAMP WITH LOCAL TIMEZONE in local time zone\n\nClose apache/calcite#617\n","date":"2018-02-06 02:36:17","modifiedFileCount":"9","status":"M","submitter":"Nishant"},{"authorTime":"2018-04-27 07:29:15","codes":[{"authorDate":"2018-04-27 07:29:15","commitOrder":9,"curCode":"  private void checkDateRangeNoSimplify(Fixture f, RexNode e,\n      Matcher<String> intervalMatcher) {\n    e = DateRangeRules.replaceTimeUnits(f.rexBuilder, e, \"UTC\");\n    final List<Interval> intervals =\n        DruidDateTimeUtils.createInterval(e);\n    assertThat(intervals, notNullValue());\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","date":"2018-06-23 02:49:06","endLine":149,"groupId":"10448","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"checkDateRangeNoSimplify","params":"(Fixturef@RexNodee@Matcher<String>intervalMatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9c/aa4134ba05f634b32b95061b0eb3d66acf4b10.src","preCode":"  private void checkDateRangeNoSimplify(Fixture f, RexNode e,\n      Matcher<String> intervalMatcher) {\n    e = DateRangeRules.replaceTimeUnits(f.rexBuilder, e, \"UTC\");\n    final List<Interval> intervals =\n        DruidDateTimeUtils.createInterval(e, \"UTC\");\n    assertThat(intervals, notNullValue());\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2018-04-27 07:29:15","commitOrder":9,"curCode":"  private void checkDateRange(Fixture f, RexNode e, Matcher<String> intervalMatcher) {\n    e = DateRangeRules.replaceTimeUnits(f.rexBuilder, e, \"UTC\");\n    final RexNode e2 = f.simplify.simplify(e);\n    List<Interval> intervals =\n        DruidDateTimeUtils.createInterval(e2);\n    if (intervals == null) {\n      throw new AssertionError(\"null interval\");\n    }\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","date":"2018-06-23 02:49:06","endLine":160,"groupId":"10448","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDateRange","params":"(Fixturef@RexNodee@Matcher<String>intervalMatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9c/aa4134ba05f634b32b95061b0eb3d66acf4b10.src","preCode":"  private void checkDateRange(Fixture f, RexNode e, Matcher<String> intervalMatcher) {\n    e = DateRangeRules.replaceTimeUnits(f.rexBuilder, e, \"UTC\");\n    final RexNode e2 = f.simplify.simplify(e);\n    List<Interval> intervals =\n        DruidDateTimeUtils.createInterval(e2, \"UTC\");\n    if (intervals == null) {\n      throw new AssertionError(\"null interval\");\n    }\n    assertThat(intervals.toString(), intervalMatcher);\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"b29397d92e16f8aa77d5e84cf7a21744cd1b19a9","commitMessage":"@@@[CALCITE-2286] Support timestamp type for Druid adapter\n\nClose apache/calcite#681\n","date":"2018-06-23 02:49:06","modifiedFileCount":"13","status":"M","submitter":"Jesus Camacho Rodriguez"}]
