[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  private void startOfGroupStep1(String startOfGroup) {\n    OptiqAssert.that()\n        .with(OptiqAssert.Config.REGULAR)\n        .query(\n            \"select t.*\\n\"\n                + \"  from (\\n\"\n                + \"       select  t.*,\\n\"\n                + \"               case when \" + startOfGroup\n                + \" then 0 else 1 end start_of_group\\n\"\n                + \"         from \"\n                + START_OF_GROUP_DATA\n                + \") t\\n\")\n        .typeIs(\n            \"[RN INTEGER NOT NULL, VAL INTEGER NOT NULL, EXPECTED INTEGER NOT NULL, START_OF_GROUP INTEGER NOT NULL]\")\n        .returnsUnordered(\n            \"RN=1; VAL=0; EXPECTED=1; START_OF_GROUP=1\",\n            \"RN=2; VAL=0; EXPECTED=1; START_OF_GROUP=0\",\n            \"RN=3; VAL=1; EXPECTED=2; START_OF_GROUP=1\",\n            \"RN=4; VAL=0; EXPECTED=3; START_OF_GROUP=1\",\n            \"RN=5; VAL=0; EXPECTED=3; START_OF_GROUP=0\",\n            \"RN=6; VAL=0; EXPECTED=3; START_OF_GROUP=0\",\n            \"RN=7; VAL=1; EXPECTED=4; START_OF_GROUP=1\",\n            \"RN=8; VAL=1; EXPECTED=4; START_OF_GROUP=0\");\n  }\n","date":"2014-11-14 09:39:34","endLine":3457,"groupId":"3486","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startOfGroupStep1","params":"(StringstartOfGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/07/a80a852c13070ba5bd528e6632fbe305eb1033.src","preCode":"  private void startOfGroupStep1(String startOfGroup) {\n    OptiqAssert.that()\n        .with(OptiqAssert.Config.REGULAR)\n        .query(\n            \"select t.*\\n\"\n                + \"  from (\\n\"\n                + \"       select  t.*,\\n\"\n                + \"               case when \" + startOfGroup\n                + \" then 0 else 1 end start_of_group\\n\"\n                + \"         from \"\n                + START_OF_GROUP_DATA\n                + \") t\\n\")\n        .typeIs(\n            \"[RN INTEGER NOT NULL, VAL INTEGER NOT NULL, EXPECTED INTEGER NOT NULL, START_OF_GROUP INTEGER NOT NULL]\")\n        .returnsUnordered(\n            \"RN=1; VAL=0; EXPECTED=1; START_OF_GROUP=1\",\n            \"RN=2; VAL=0; EXPECTED=1; START_OF_GROUP=0\",\n            \"RN=3; VAL=1; EXPECTED=2; START_OF_GROUP=1\",\n            \"RN=4; VAL=0; EXPECTED=3; START_OF_GROUP=1\",\n            \"RN=5; VAL=0; EXPECTED=3; START_OF_GROUP=0\",\n            \"RN=6; VAL=0; EXPECTED=3; START_OF_GROUP=0\",\n            \"RN=7; VAL=1; EXPECTED=4; START_OF_GROUP=1\",\n            \"RN=8; VAL=1; EXPECTED=4; START_OF_GROUP=0\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3434,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  private void startOfGroupStep2(String startOfGroup) {\n    OptiqAssert.that()\n        .with(OptiqAssert.Config.REGULAR)\n        .query(\n            \"select t.*\\n\"\n                \r\n                + \"       ,sum(start_of_group) over (order by rn rows unbounded preceding) group_id\\n\"\n                + \"  from (\\n\"\n                + \"       select  t.*,\\n\"\n                + \"               case when \" + startOfGroup\n                + \" then 0 else 1 end start_of_group\\n\"\n                + \"         from \"\n                + START_OF_GROUP_DATA\n                + \") t\\n\")\n        .typeIs(\n            \"[RN INTEGER NOT NULL, VAL INTEGER NOT NULL, EXPECTED INTEGER NOT NULL, START_OF_GROUP INTEGER NOT NULL, GROUP_ID INTEGER NOT NULL]\")\n        .returnsUnordered(\n            \"RN=1; VAL=0; EXPECTED=1; START_OF_GROUP=1; GROUP_ID=1\",\n            \"RN=2; VAL=0; EXPECTED=1; START_OF_GROUP=0; GROUP_ID=1\",\n            \"RN=3; VAL=1; EXPECTED=2; START_OF_GROUP=1; GROUP_ID=2\",\n            \"RN=4; VAL=0; EXPECTED=3; START_OF_GROUP=1; GROUP_ID=3\",\n            \"RN=5; VAL=0; EXPECTED=3; START_OF_GROUP=0; GROUP_ID=3\",\n            \"RN=6; VAL=0; EXPECTED=3; START_OF_GROUP=0; GROUP_ID=3\",\n            \"RN=7; VAL=1; EXPECTED=4; START_OF_GROUP=1; GROUP_ID=4\",\n            \"RN=8; VAL=1; EXPECTED=4; START_OF_GROUP=0; GROUP_ID=4\");\n  }\n","date":"2014-11-14 09:39:34","endLine":3484,"groupId":"971","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"startOfGroupStep2","params":"(StringstartOfGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/07/a80a852c13070ba5bd528e6632fbe305eb1033.src","preCode":"  private void startOfGroupStep2(String startOfGroup) {\n    OptiqAssert.that()\n        .with(OptiqAssert.Config.REGULAR)\n        .query(\n            \"select t.*\\n\"\n                \r\n                + \"       ,sum(start_of_group) over (order by rn rows unbounded preceding) group_id\\n\"\n                + \"  from (\\n\"\n                + \"       select  t.*,\\n\"\n                + \"               case when \" + startOfGroup\n                + \" then 0 else 1 end start_of_group\\n\"\n                + \"         from \"\n                + START_OF_GROUP_DATA\n                + \") t\\n\")\n        .typeIs(\n            \"[RN INTEGER NOT NULL, VAL INTEGER NOT NULL, EXPECTED INTEGER NOT NULL, START_OF_GROUP INTEGER NOT NULL, GROUP_ID INTEGER NOT NULL]\")\n        .returnsUnordered(\n            \"RN=1; VAL=0; EXPECTED=1; START_OF_GROUP=1; GROUP_ID=1\",\n            \"RN=2; VAL=0; EXPECTED=1; START_OF_GROUP=0; GROUP_ID=1\",\n            \"RN=3; VAL=1; EXPECTED=2; START_OF_GROUP=1; GROUP_ID=2\",\n            \"RN=4; VAL=0; EXPECTED=3; START_OF_GROUP=1; GROUP_ID=3\",\n            \"RN=5; VAL=0; EXPECTED=3; START_OF_GROUP=0; GROUP_ID=3\",\n            \"RN=6; VAL=0; EXPECTED=3; START_OF_GROUP=0; GROUP_ID=3\",\n            \"RN=7; VAL=1; EXPECTED=4; START_OF_GROUP=1; GROUP_ID=4\",\n            \"RN=8; VAL=1; EXPECTED=4; START_OF_GROUP=0; GROUP_ID=4\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3459,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  private void startOfGroupStep1(String startOfGroup) {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.REGULAR)\n        .query(\"select t.*\\n\"\n            + \"  from (\\n\"\n            + \"       select  t.*,\\n\"\n            + \"               case when \" + startOfGroup\n            + \" then 0 else 1 end start_of_group\\n\"\n            + \"         from \"\n            + START_OF_GROUP_DATA\n            + \") t\\n\")\n        .typeIs(\n            \"[RN INTEGER NOT NULL, VAL INTEGER NOT NULL, EXPECTED INTEGER NOT NULL, START_OF_GROUP INTEGER NOT NULL]\")\n        .returnsUnordered(\n            \"RN=1; VAL=0; EXPECTED=1; START_OF_GROUP=1\",\n            \"RN=2; VAL=0; EXPECTED=1; START_OF_GROUP=0\",\n            \"RN=3; VAL=1; EXPECTED=2; START_OF_GROUP=1\",\n            \"RN=4; VAL=0; EXPECTED=3; START_OF_GROUP=1\",\n            \"RN=5; VAL=0; EXPECTED=3; START_OF_GROUP=0\",\n            \"RN=6; VAL=0; EXPECTED=3; START_OF_GROUP=0\",\n            \"RN=7; VAL=1; EXPECTED=4; START_OF_GROUP=1\",\n            \"RN=8; VAL=1; EXPECTED=4; START_OF_GROUP=0\");\n  }\n","date":"2014-11-14 10:22:06","endLine":3374,"groupId":"3486","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startOfGroupStep1","params":"(StringstartOfGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/29/1dff15ca3e8c94607d5cca33d7c97daddb9b8c.src","preCode":"  private void startOfGroupStep1(String startOfGroup) {\n    OptiqAssert.that()\n        .with(OptiqAssert.Config.REGULAR)\n        .query(\n            \"select t.*\\n\"\n                + \"  from (\\n\"\n                + \"       select  t.*,\\n\"\n                + \"               case when \" + startOfGroup\n                + \" then 0 else 1 end start_of_group\\n\"\n                + \"         from \"\n                + START_OF_GROUP_DATA\n                + \") t\\n\")\n        .typeIs(\n            \"[RN INTEGER NOT NULL, VAL INTEGER NOT NULL, EXPECTED INTEGER NOT NULL, START_OF_GROUP INTEGER NOT NULL]\")\n        .returnsUnordered(\n            \"RN=1; VAL=0; EXPECTED=1; START_OF_GROUP=1\",\n            \"RN=2; VAL=0; EXPECTED=1; START_OF_GROUP=0\",\n            \"RN=3; VAL=1; EXPECTED=2; START_OF_GROUP=1\",\n            \"RN=4; VAL=0; EXPECTED=3; START_OF_GROUP=1\",\n            \"RN=5; VAL=0; EXPECTED=3; START_OF_GROUP=0\",\n            \"RN=6; VAL=0; EXPECTED=3; START_OF_GROUP=0\",\n            \"RN=7; VAL=1; EXPECTED=4; START_OF_GROUP=1\",\n            \"RN=8; VAL=1; EXPECTED=4; START_OF_GROUP=0\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3352,"status":"M"},{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  private void startOfGroupStep2(String startOfGroup) {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.REGULAR)\n        .query(\"select t.*\\n\"\n            \r\n            + \"       ,sum(start_of_group) over (order by rn rows unbounded preceding) group_id\\n\"\n            + \"  from (\\n\"\n            + \"       select  t.*,\\n\"\n            + \"               case when \" + startOfGroup\n            + \" then 0 else 1 end start_of_group\\n\"\n            + \"         from \"\n            + START_OF_GROUP_DATA\n            + \") t\\n\")\n        .typeIs(\n            \"[RN INTEGER NOT NULL, VAL INTEGER NOT NULL, EXPECTED INTEGER NOT NULL, START_OF_GROUP INTEGER NOT NULL, GROUP_ID INTEGER NOT NULL]\")\n        .returnsUnordered(\n            \"RN=1; VAL=0; EXPECTED=1; START_OF_GROUP=1; GROUP_ID=1\",\n            \"RN=2; VAL=0; EXPECTED=1; START_OF_GROUP=0; GROUP_ID=1\",\n            \"RN=3; VAL=1; EXPECTED=2; START_OF_GROUP=1; GROUP_ID=2\",\n            \"RN=4; VAL=0; EXPECTED=3; START_OF_GROUP=1; GROUP_ID=3\",\n            \"RN=5; VAL=0; EXPECTED=3; START_OF_GROUP=0; GROUP_ID=3\",\n            \"RN=6; VAL=0; EXPECTED=3; START_OF_GROUP=0; GROUP_ID=3\",\n            \"RN=7; VAL=1; EXPECTED=4; START_OF_GROUP=1; GROUP_ID=4\",\n            \"RN=8; VAL=1; EXPECTED=4; START_OF_GROUP=0; GROUP_ID=4\");\n  }\n","date":"2014-11-14 10:22:06","endLine":3400,"groupId":"971","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"startOfGroupStep2","params":"(StringstartOfGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/29/1dff15ca3e8c94607d5cca33d7c97daddb9b8c.src","preCode":"  private void startOfGroupStep2(String startOfGroup) {\n    OptiqAssert.that()\n        .with(OptiqAssert.Config.REGULAR)\n        .query(\n            \"select t.*\\n\"\n                \r\n                + \"       ,sum(start_of_group) over (order by rn rows unbounded preceding) group_id\\n\"\n                + \"  from (\\n\"\n                + \"       select  t.*,\\n\"\n                + \"               case when \" + startOfGroup\n                + \" then 0 else 1 end start_of_group\\n\"\n                + \"         from \"\n                + START_OF_GROUP_DATA\n                + \") t\\n\")\n        .typeIs(\n            \"[RN INTEGER NOT NULL, VAL INTEGER NOT NULL, EXPECTED INTEGER NOT NULL, START_OF_GROUP INTEGER NOT NULL, GROUP_ID INTEGER NOT NULL]\")\n        .returnsUnordered(\n            \"RN=1; VAL=0; EXPECTED=1; START_OF_GROUP=1; GROUP_ID=1\",\n            \"RN=2; VAL=0; EXPECTED=1; START_OF_GROUP=0; GROUP_ID=1\",\n            \"RN=3; VAL=1; EXPECTED=2; START_OF_GROUP=1; GROUP_ID=2\",\n            \"RN=4; VAL=0; EXPECTED=3; START_OF_GROUP=1; GROUP_ID=3\",\n            \"RN=5; VAL=0; EXPECTED=3; START_OF_GROUP=0; GROUP_ID=3\",\n            \"RN=6; VAL=0; EXPECTED=3; START_OF_GROUP=0; GROUP_ID=3\",\n            \"RN=7; VAL=1; EXPECTED=4; START_OF_GROUP=1; GROUP_ID=4\",\n            \"RN=8; VAL=1; EXPECTED=4; START_OF_GROUP=0; GROUP_ID=4\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3376,"status":"M"}],"commitId":"a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55","commitMessage":"@@@[CALCITE-306] Standardize code style for \"import package.*;\"\n\nRename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].\n\nMake many inner classes of EnumerableRules (e.g. EnumerableFilter.  EnumerableFilterRule) top-level classes.\n\nApply a consistent formatting convention for string literals split over multiple lines.\n\nRename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.\n\nChange occurrences of \"optiq\" and \"eigenbase\" in java code to \"calcite\".\n","date":"2014-11-14 10:22:06","modifiedFileCount":"1156","status":"M","submitter":"Julian Hyde"},{"authorTime":"2015-01-07 08:17:15","codes":[{"authorDate":"2015-01-07 08:17:15","commitOrder":3,"curCode":"  private void startOfGroupStep1(String startOfGroup) {\n    CalciteAssert.that()\n        .query(\"select t.*\\n\"\n            + \"  from (\\n\"\n            + \"       select  t.*,\\n\"\n            + \"               case when \" + startOfGroup\n            + \" then 0 else 1 end start_of_group\\n\"\n            + \"         from \"\n            + START_OF_GROUP_DATA\n            + \") t\\n\")\n        .typeIs(\n            \"[RN INTEGER NOT NULL, VAL INTEGER NOT NULL, EXPECTED INTEGER NOT NULL, START_OF_GROUP INTEGER NOT NULL]\")\n        .returnsUnordered(\n            \"RN=1; VAL=0; EXPECTED=1; START_OF_GROUP=1\",\n            \"RN=2; VAL=0; EXPECTED=1; START_OF_GROUP=0\",\n            \"RN=3; VAL=1; EXPECTED=2; START_OF_GROUP=1\",\n            \"RN=4; VAL=0; EXPECTED=3; START_OF_GROUP=1\",\n            \"RN=5; VAL=0; EXPECTED=3; START_OF_GROUP=0\",\n            \"RN=6; VAL=0; EXPECTED=3; START_OF_GROUP=0\",\n            \"RN=7; VAL=1; EXPECTED=4; START_OF_GROUP=1\",\n            \"RN=8; VAL=1; EXPECTED=4; START_OF_GROUP=0\");\n  }\n","date":"2015-01-07 08:17:15","endLine":3483,"groupId":"101298","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"startOfGroupStep1","params":"(StringstartOfGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/eb/aceec7bfa3a4c2bc774c6d0b6b4610fd04b77c.src","preCode":"  private void startOfGroupStep1(String startOfGroup) {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.REGULAR)\n        .query(\"select t.*\\n\"\n            + \"  from (\\n\"\n            + \"       select  t.*,\\n\"\n            + \"               case when \" + startOfGroup\n            + \" then 0 else 1 end start_of_group\\n\"\n            + \"         from \"\n            + START_OF_GROUP_DATA\n            + \") t\\n\")\n        .typeIs(\n            \"[RN INTEGER NOT NULL, VAL INTEGER NOT NULL, EXPECTED INTEGER NOT NULL, START_OF_GROUP INTEGER NOT NULL]\")\n        .returnsUnordered(\n            \"RN=1; VAL=0; EXPECTED=1; START_OF_GROUP=1\",\n            \"RN=2; VAL=0; EXPECTED=1; START_OF_GROUP=0\",\n            \"RN=3; VAL=1; EXPECTED=2; START_OF_GROUP=1\",\n            \"RN=4; VAL=0; EXPECTED=3; START_OF_GROUP=1\",\n            \"RN=5; VAL=0; EXPECTED=3; START_OF_GROUP=0\",\n            \"RN=6; VAL=0; EXPECTED=3; START_OF_GROUP=0\",\n            \"RN=7; VAL=1; EXPECTED=4; START_OF_GROUP=1\",\n            \"RN=8; VAL=1; EXPECTED=4; START_OF_GROUP=0\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3462,"status":"M"},{"authorDate":"2015-01-07 08:17:15","commitOrder":3,"curCode":"  private void startOfGroupStep2(String startOfGroup) {\n    CalciteAssert.that()\n        .query(\"select t.*\\n\"\n            \r\n            + \"       ,sum(start_of_group) over (order by rn rows unbounded preceding) group_id\\n\"\n            + \"  from (\\n\"\n            + \"       select  t.*,\\n\"\n            + \"               case when \" + startOfGroup\n            + \" then 0 else 1 end start_of_group\\n\"\n            + \"         from \"\n            + START_OF_GROUP_DATA\n            + \") t\\n\")\n        .typeIs(\n            \"[RN INTEGER NOT NULL, VAL INTEGER NOT NULL, EXPECTED INTEGER NOT NULL, START_OF_GROUP INTEGER NOT NULL, GROUP_ID INTEGER NOT NULL]\")\n        .returnsUnordered(\n            \"RN=1; VAL=0; EXPECTED=1; START_OF_GROUP=1; GROUP_ID=1\",\n            \"RN=2; VAL=0; EXPECTED=1; START_OF_GROUP=0; GROUP_ID=1\",\n            \"RN=3; VAL=1; EXPECTED=2; START_OF_GROUP=1; GROUP_ID=2\",\n            \"RN=4; VAL=0; EXPECTED=3; START_OF_GROUP=1; GROUP_ID=3\",\n            \"RN=5; VAL=0; EXPECTED=3; START_OF_GROUP=0; GROUP_ID=3\",\n            \"RN=6; VAL=0; EXPECTED=3; START_OF_GROUP=0; GROUP_ID=3\",\n            \"RN=7; VAL=1; EXPECTED=4; START_OF_GROUP=1; GROUP_ID=4\",\n            \"RN=8; VAL=1; EXPECTED=4; START_OF_GROUP=0; GROUP_ID=4\");\n  }\n","date":"2015-01-07 08:17:15","endLine":3508,"groupId":"101298","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"startOfGroupStep2","params":"(StringstartOfGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/eb/aceec7bfa3a4c2bc774c6d0b6b4610fd04b77c.src","preCode":"  private void startOfGroupStep2(String startOfGroup) {\n    CalciteAssert.that()\n        .with(CalciteAssert.Config.REGULAR)\n        .query(\"select t.*\\n\"\n            \r\n            + \"       ,sum(start_of_group) over (order by rn rows unbounded preceding) group_id\\n\"\n            + \"  from (\\n\"\n            + \"       select  t.*,\\n\"\n            + \"               case when \" + startOfGroup\n            + \" then 0 else 1 end start_of_group\\n\"\n            + \"         from \"\n            + START_OF_GROUP_DATA\n            + \") t\\n\")\n        .typeIs(\n            \"[RN INTEGER NOT NULL, VAL INTEGER NOT NULL, EXPECTED INTEGER NOT NULL, START_OF_GROUP INTEGER NOT NULL, GROUP_ID INTEGER NOT NULL]\")\n        .returnsUnordered(\n            \"RN=1; VAL=0; EXPECTED=1; START_OF_GROUP=1; GROUP_ID=1\",\n            \"RN=2; VAL=0; EXPECTED=1; START_OF_GROUP=0; GROUP_ID=1\",\n            \"RN=3; VAL=1; EXPECTED=2; START_OF_GROUP=1; GROUP_ID=2\",\n            \"RN=4; VAL=0; EXPECTED=3; START_OF_GROUP=1; GROUP_ID=3\",\n            \"RN=5; VAL=0; EXPECTED=3; START_OF_GROUP=0; GROUP_ID=3\",\n            \"RN=6; VAL=0; EXPECTED=3; START_OF_GROUP=0; GROUP_ID=3\",\n            \"RN=7; VAL=1; EXPECTED=4; START_OF_GROUP=1; GROUP_ID=4\",\n            \"RN=8; VAL=1; EXPECTED=4; START_OF_GROUP=0; GROUP_ID=4\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3485,"status":"M"}],"commitId":"3fccc08ef23d33efbc692b389cc1049ee7939533","commitMessage":"@@@[CALCITE-489] Teach CalciteAssert to respect multiple settings\n","date":"2015-01-07 08:17:15","modifiedFileCount":"12","status":"M","submitter":"Julian Hyde"}]
