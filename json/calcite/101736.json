[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public Boolean visitInputRef(RexInputRef ref) {\n    final int index = ref.getIndex();\n    if ((index < 0) || (index >= inputTypeList.size())) {\n      assert !fail\n          : \"RexInputRef index \" + index\n          + \" out of range 0..\" + (inputTypeList.size() - 1);\n      ++failCount;\n      return false;\n    }\n    if (!ref.getType().isStruct()\n        && !RelOptUtil.eq(\"ref\", ref.getType(), \"input\",\n            inputTypeList.get(index), fail)) {\n      assert !fail;\n      ++failCount;\n      return false;\n    }\n    return true;\n  }\n","date":"2014-11-14 09:39:34","endLine":125,"groupId":"16508","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"visitInputRef","params":"(RexInputRefref)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/70/eca3b7747cf5205611b192a218b901b62c41b7.src","preCode":"  public Boolean visitInputRef(RexInputRef ref) {\n    final int index = ref.getIndex();\n    if ((index < 0) || (index >= inputTypeList.size())) {\n      assert !fail\n          : \"RexInputRef index \" + index\n          + \" out of range 0..\" + (inputTypeList.size() - 1);\n      ++failCount;\n      return false;\n    }\n    if (!ref.getType().isStruct()\n        && !RelOptUtil.eq(\"ref\", ref.getType(), \"input\",\n            inputTypeList.get(index), fail)) {\n      assert !fail;\n      ++failCount;\n      return false;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"    public Boolean visitLocalRef(RexLocalRef localRef) {\n      final int index = localRef.getIndex();\n      if ((index < 0) || (index >= internalExprTypeList.size())) {\n        assert !fail;\n        ++failCount;\n        return false;\n      }\n      if (!RelOptUtil.eq(\n          \"type1\",\n          localRef.getType(),\n          \"type2\",\n          internalExprTypeList.get(index),\n          fail)) {\n        assert !fail;\n        ++failCount;\n        return false;\n      }\n      return true;\n    }\n","date":"2014-11-14 09:39:34","endLine":848,"groupId":"15168","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"visitLocalRef","params":"(RexLocalReflocalRef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/aa/fe3615103288f4bc06af735a2af23b70c69e79.src","preCode":"    public Boolean visitLocalRef(RexLocalRef localRef) {\n      final int index = localRef.getIndex();\n      if ((index < 0) || (index >= internalExprTypeList.size())) {\n        assert !fail;\n        ++failCount;\n        return false;\n      }\n      if (!RelOptUtil.eq(\n          \"type1\",\n          localRef.getType(),\n          \"type2\",\n          internalExprTypeList.get(index),\n          fail)) {\n        assert !fail;\n        ++failCount;\n        return false;\n      }\n      return true;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexProgram.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":830,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2015-11-06 10:09:38","codes":[{"authorDate":"2015-11-06 10:09:38","commitOrder":2,"curCode":"  public Boolean visitInputRef(RexInputRef ref) {\n    final int index = ref.getIndex();\n    if ((index < 0) || (index >= inputTypeList.size())) {\n      ++failCount;\n      return litmus.fail(\"RexInputRef index \" + index\n          + \" out of range 0..\" + (inputTypeList.size() - 1));\n    }\n    if (!ref.getType().isStruct()\n        && !RelOptUtil.eq(\"ref\", ref.getType(), \"input\",\n            inputTypeList.get(index), litmus)) {\n      ++failCount;\n      return litmus.fail(null);\n    }\n    return litmus.succeed();\n  }\n","date":"2016-01-10 16:51:24","endLine":124,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"visitInputRef","params":"(RexInputRefref)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c5/1d923a335876efdc8c7cd1688a53a6f4c53641.src","preCode":"  public Boolean visitInputRef(RexInputRef ref) {\n    final int index = ref.getIndex();\n    if ((index < 0) || (index >= inputTypeList.size())) {\n      assert !fail\n          : \"RexInputRef index \" + index\n          + \" out of range 0..\" + (inputTypeList.size() - 1);\n      ++failCount;\n      return false;\n    }\n    if (!ref.getType().isStruct()\n        && !RelOptUtil.eq(\"ref\", ref.getType(), \"input\",\n            inputTypeList.get(index), fail)) {\n      assert !fail;\n      ++failCount;\n      return false;\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2015-11-06 10:09:38","commitOrder":2,"curCode":"    public Boolean visitLocalRef(RexLocalRef localRef) {\n      final int index = localRef.getIndex();\n      if ((index < 0) || (index >= internalExprTypeList.size())) {\n        ++failCount;\n        return litmus.fail(null);\n      }\n      if (!RelOptUtil.eq(\n          \"type1\",\n          localRef.getType(),\n          \"type2\",\n          internalExprTypeList.get(index), litmus)) {\n        ++failCount;\n        return litmus.fail(null);\n      }\n      return litmus.succeed();\n    }\n","date":"2016-01-10 16:51:24","endLine":836,"groupId":"7959","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"visitLocalRef","params":"(RexLocalReflocalRef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/cdc403553344ca6dcc4ae465adb5005d98ebc2.src","preCode":"    public Boolean visitLocalRef(RexLocalRef localRef) {\n      final int index = localRef.getIndex();\n      if ((index < 0) || (index >= internalExprTypeList.size())) {\n        assert !fail;\n        ++failCount;\n        return false;\n      }\n      if (!RelOptUtil.eq(\n          \"type1\",\n          localRef.getType(),\n          \"type2\",\n          internalExprTypeList.get(index),\n          fail)) {\n        assert !fail;\n        ++failCount;\n        return false;\n      }\n      return true;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexProgram.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":821,"status":"M"}],"commitId":"9a52b5eda9fcfb4e6a7ad94fbd4a1c3fa2fb869a","commitMessage":"@@@[CALCITE-955] Litmus (continuation-passing style for methods that check invariants)\n","date":"2016-01-10 16:51:24","modifiedFileCount":"39","status":"M","submitter":"Julian Hyde"},{"authorTime":"2015-11-06 10:09:38","codes":[{"authorDate":"2016-02-10 07:04:03","commitOrder":3,"curCode":"  public Boolean visitInputRef(RexInputRef ref) {\n    final int index = ref.getIndex();\n    if ((index < 0) || (index >= inputTypeList.size())) {\n      ++failCount;\n      return litmus.fail(\"RexInputRef index {} out of range 0..{}\",\n          index, inputTypeList.size() - 1);\n    }\n    if (!ref.getType().isStruct()\n        && !RelOptUtil.eq(\"ref\", ref.getType(), \"input\",\n            inputTypeList.get(index), litmus)) {\n      ++failCount;\n      return litmus.fail(null);\n    }\n    return litmus.succeed();\n  }\n","date":"2016-02-10 07:17:40","endLine":124,"groupId":"8763","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"visitInputRef","params":"(RexInputRefref)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d5/73c5197f04a28cf316389595bdc28926296709.src","preCode":"  public Boolean visitInputRef(RexInputRef ref) {\n    final int index = ref.getIndex();\n    if ((index < 0) || (index >= inputTypeList.size())) {\n      ++failCount;\n      return litmus.fail(\"RexInputRef index \" + index\n          + \" out of range 0..\" + (inputTypeList.size() - 1));\n    }\n    if (!ref.getType().isStruct()\n        && !RelOptUtil.eq(\"ref\", ref.getType(), \"input\",\n            inputTypeList.get(index), litmus)) {\n      ++failCount;\n      return litmus.fail(null);\n    }\n    return litmus.succeed();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2015-11-06 10:09:38","commitOrder":3,"curCode":"    public Boolean visitLocalRef(RexLocalRef localRef) {\n      final int index = localRef.getIndex();\n      if ((index < 0) || (index >= internalExprTypeList.size())) {\n        ++failCount;\n        return litmus.fail(null);\n      }\n      if (!RelOptUtil.eq(\n          \"type1\",\n          localRef.getType(),\n          \"type2\",\n          internalExprTypeList.get(index), litmus)) {\n        ++failCount;\n        return litmus.fail(null);\n      }\n      return litmus.succeed();\n    }\n","date":"2016-01-10 16:51:24","endLine":836,"groupId":"7959","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"visitLocalRef","params":"(RexLocalReflocalRef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/cdc403553344ca6dcc4ae465adb5005d98ebc2.src","preCode":"    public Boolean visitLocalRef(RexLocalRef localRef) {\n      final int index = localRef.getIndex();\n      if ((index < 0) || (index >= internalExprTypeList.size())) {\n        ++failCount;\n        return litmus.fail(null);\n      }\n      if (!RelOptUtil.eq(\n          \"type1\",\n          localRef.getType(),\n          \"type2\",\n          internalExprTypeList.get(index), litmus)) {\n        ++failCount;\n        return litmus.fail(null);\n      }\n      return litmus.succeed();\n    }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexProgram.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":821,"status":"N"}],"commitId":"670fa73e24a7b72d6ddafd69793474083bb4b9f0","commitMessage":"@@@[CALCITE-1083] SqlNode.equalsDeep has O(n ^ 2) performance\n\nCause of the problem is that Litmus.fail constructs an error message string.  even if the particular implementation of Litmus does not use the string. Solution is to pass a format string and arguments.  which are only converted to strings if the message is used.  the same as SLF4J Logger does.\n","date":"2016-02-10 07:17:40","modifiedFileCount":"22","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-12-15 05:25:33","codes":[{"authorDate":"2016-12-15 05:25:33","commitOrder":4,"curCode":"  @Override public Boolean visitInputRef(RexInputRef ref) {\n    final int index = ref.getIndex();\n    if ((index < 0) || (index >= inputTypeList.size())) {\n      ++failCount;\n      return litmus.fail(\"RexInputRef index {} out of range 0..{}\",\n          index, inputTypeList.size() - 1);\n    }\n    if (!ref.getType().isStruct()\n        && !RelOptUtil.eq(\"ref\", ref.getType(), \"input\",\n            inputTypeList.get(index), litmus)) {\n      ++failCount;\n      return litmus.fail(null);\n    }\n    return litmus.succeed();\n  }\n","date":"2016-12-27 09:40:45","endLine":131,"groupId":"101736","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"visitInputRef","params":"(RexInputRefref)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/1328df32a15de05ec15e0c5f83d0bdbc17378d.src","preCode":"  public Boolean visitInputRef(RexInputRef ref) {\n    final int index = ref.getIndex();\n    if ((index < 0) || (index >= inputTypeList.size())) {\n      ++failCount;\n      return litmus.fail(\"RexInputRef index {} out of range 0..{}\",\n          index, inputTypeList.size() - 1);\n    }\n    if (!ref.getType().isStruct()\n        && !RelOptUtil.eq(\"ref\", ref.getType(), \"input\",\n            inputTypeList.get(index), litmus)) {\n      ++failCount;\n      return litmus.fail(null);\n    }\n    return litmus.succeed();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2016-12-15 05:25:33","commitOrder":4,"curCode":"    @Override public Boolean visitLocalRef(RexLocalRef localRef) {\n      final int index = localRef.getIndex();\n      if ((index < 0) || (index >= internalExprTypeList.size())) {\n        ++failCount;\n        return litmus.fail(null);\n      }\n      if (!RelOptUtil.eq(\n          \"type1\",\n          localRef.getType(),\n          \"type2\",\n          internalExprTypeList.get(index), litmus)) {\n        ++failCount;\n        return litmus.fail(null);\n      }\n      return litmus.succeed();\n    }\n","date":"2016-12-27 09:40:45","endLine":827,"groupId":"101736","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"visitLocalRef","params":"(RexLocalReflocalRef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1a/eb0ae67b854593c6ebb72f069589a531af98c3.src","preCode":"    public Boolean visitLocalRef(RexLocalRef localRef) {\n      final int index = localRef.getIndex();\n      if ((index < 0) || (index >= internalExprTypeList.size())) {\n        ++failCount;\n        return litmus.fail(null);\n      }\n      if (!RelOptUtil.eq(\n          \"type1\",\n          localRef.getType(),\n          \"type2\",\n          internalExprTypeList.get(index), litmus)) {\n        ++failCount;\n        return litmus.fail(null);\n      }\n      return litmus.succeed();\n    }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexProgram.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":812,"status":"M"}],"commitId":"3f261072c96a3c5042b2987c35880826f0a47a00","commitMessage":"@@@[CALCITE-1555] Improve RelNode validation\n\nAdd a context to the RelNode.isValid method. The context allows the\nvalidator to deduce what correlation variables are available (namely. \nthose set by a RelNode between this one and the root). The context is\noptional; if null.  the isValid method does the best it can.\n","date":"2016-12-27 09:40:45","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"}]
