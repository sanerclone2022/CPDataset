[{"authorTime":"2020-07-20 08:23:08","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  private int[] getProjectFields(List<RexNode> exps) {\n    final int[] fields = new int[exps.size()];\n    for (int i = 0; i < exps.size(); i++) {\n      final RexNode exp = exps.get(i);\n      if (exp instanceof RexInputRef) {\n        fields[i] = ((RexInputRef) exp).getIndex();\n      } else {\n        return null; \r\n      }\n    }\n    return fields;\n  }\n","date":"2014-11-14 09:39:34","endLine":71,"groupId":"1280","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getProjectFields","params":"(List<RexNode>exps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/03/e2f17613c40d3da11427b51381d1e8052cf2a8.src","preCode":"  private int[] getProjectFields(List<RexNode> exps) {\n    final int[] fields = new int[exps.size()];\n    for (int i = 0; i < exps.size(); i++) {\n      final RexNode exp = exps.get(i);\n      if (exp instanceof RexInputRef) {\n        fields[i] = ((RexInputRef) exp).getIndex();\n      } else {\n        return null; \r\n      }\n    }\n    return fields;\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"NB"},{"authorDate":"2020-07-20 08:23:08","commitOrder":2,"curCode":"  private int[] getProjectFields(List<RexNode> exps) {\n    final int[] fields = new int[exps.size()];\n    for (int i = 0; i < exps.size(); i++) {\n      final RexNode exp = exps.get(i);\n      if (exp instanceof RexInputRef) {\n        fields[i] = ((RexInputRef) exp).getIndex();\n      } else {\n        return null; \r\n      }\n    }\n    return fields;\n  }\n","date":"2020-07-29 03:09:43","endLine":69,"groupId":"1280","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getProjectFields","params":"(List<RexNode>exps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4d/5416c2169d4577d3e622b058985023b91d8493.src","preCode":"  private int[] getProjectFields(List<RexNode> exps) {\n    final int[] fields = new int[exps.size()];\n    for (int i = 0; i < exps.size(); i++) {\n      final RexNode exp = exps.get(i);\n      if (exp instanceof RexInputRef) {\n        fields[i] = ((RexInputRef) exp).getIndex();\n      } else {\n        return null; \r\n      }\n    }\n    return fields;\n  }\n","realPath":"file/src/main/java/org/apache/calcite/adapter/file/CsvProjectTableScanRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"}],"commitId":"9b678f1d7ffe030711d86f475c3a9e9e95bacb8f","commitMessage":"@@@[CALCITE-4128] Remove dependency of File adapter on Example CSV adapter\n\nMove some classes from 'example/csv' to 'file'.  and make CSV adapter\ndepend on File adapter. Copy some other classes (so that we can keep the\n'example/csv' versions simple.  and add functionality to the 'file'\nadapter).\n\nRename SqlTest to FileAdapterTest.  factor utility methods into\nFileAdapterTests.  and copy in a bunch of tests from example/csv/.../CsvTest.\n","date":"2020-07-29 03:09:43","modifiedFileCount":"10","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-12-02 05:40:39","codes":[{"authorDate":"2020-12-02 05:40:39","commitOrder":3,"curCode":"  private static int[] getProjectFields(List<RexNode> exps) {\n    final int[] fields = new int[exps.size()];\n    for (int i = 0; i < exps.size(); i++) {\n      final RexNode exp = exps.get(i);\n      if (exp instanceof RexInputRef) {\n        fields[i] = ((RexInputRef) exp).getIndex();\n      } else {\n        return null; \r\n      }\n    }\n    return fields;\n  }\n","date":"2020-12-08 15:07:23","endLine":69,"groupId":"10221","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getProjectFields","params":"(List<RexNode>exps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/aa/bcdd9538602cd0f54333913dcbc788505b3ce2.src","preCode":"  private int[] getProjectFields(List<RexNode> exps) {\n    final int[] fields = new int[exps.size()];\n    for (int i = 0; i < exps.size(); i++) {\n      final RexNode exp = exps.get(i);\n      if (exp instanceof RexInputRef) {\n        fields[i] = ((RexInputRef) exp).getIndex();\n      } else {\n        return null; \r\n      }\n    }\n    return fields;\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2020-12-02 05:40:39","commitOrder":3,"curCode":"  private static int[] getProjectFields(List<RexNode> exps) {\n    final int[] fields = new int[exps.size()];\n    for (int i = 0; i < exps.size(); i++) {\n      final RexNode exp = exps.get(i);\n      if (exp instanceof RexInputRef) {\n        fields[i] = ((RexInputRef) exp).getIndex();\n      } else {\n        return null; \r\n      }\n    }\n    return fields;\n  }\n","date":"2020-12-08 15:07:23","endLine":69,"groupId":"10221","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getProjectFields","params":"(List<RexNode>exps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/921f66af3035e72d2be45285ad014586050190.src","preCode":"  private int[] getProjectFields(List<RexNode> exps) {\n    final int[] fields = new int[exps.size()];\n    for (int i = 0; i < exps.size(); i++) {\n      final RexNode exp = exps.get(i);\n      if (exp instanceof RexInputRef) {\n        fields[i] = ((RexInputRef) exp).getIndex();\n      } else {\n        return null; \r\n      }\n    }\n    return fields;\n  }\n","realPath":"file/src/main/java/org/apache/calcite/adapter/file/CsvProjectTableScanRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"404f968f6079360621896e6ee20ec12488a40bc2","commitMessage":"@@@[CALCITE-4422] Add MethodCanBeStatic check via ErrorProne\n\nprivate and final methods can be made static.  so it is clear they do not access instance fields\n","date":"2020-12-08 15:07:23","modifiedFileCount":"169","status":"M","submitter":"Vladimir Sitnikov"}]
