[{"authorTime":"2019-08-12 17:32:20","codes":[{"authorDate":"2016-02-10 07:04:03","commitOrder":4,"curCode":"  public boolean equalsDeep(SqlNode node, Litmus litmus) {\n    if (!(node instanceof SqlIdentifier)) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    SqlIdentifier that = (SqlIdentifier) node;\n    if (this.names.size() != that.names.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < names.size(); i++) {\n      if (!this.names.get(i).equals(that.names.get(i))) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    return litmus.succeed();\n  }\n","date":"2016-02-10 07:17:40","endLine":304,"groupId":"2047","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equalsDeep","params":"(SqlNodenode@Litmuslitmus)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2a/6bca0dd104947487e288073fa881f193d5895b.src","preCode":"  public boolean equalsDeep(SqlNode node, Litmus litmus) {\n    if (!(node instanceof SqlIdentifier)) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    SqlIdentifier that = (SqlIdentifier) node;\n    if (this.names.size() != that.names.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < names.size(); i++) {\n      if (!this.names.get(i).equals(that.names.get(i))) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    return litmus.succeed();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"NB"},{"authorDate":"2019-08-12 17:32:20","commitOrder":4,"curCode":"  @Override public boolean equalsDeep(SqlTypeNameSpec node, Litmus litmus) {\n    if (!(node instanceof SqlRowTypeNameSpec)) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    SqlRowTypeNameSpec that = (SqlRowTypeNameSpec) node;\n    if (this.fieldNames.size() != that.fieldNames.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < fieldNames.size(); i++) {\n      if (!this.fieldNames.get(i).equalsDeep(that.fieldNames.get(i), litmus)) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    if (this.fieldTypes.size() != that.fieldTypes.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < fieldTypes.size(); i++) {\n      if (!this.fieldTypes.get(i).equals(that.fieldTypes.get(i))) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    return litmus.succeed();\n  }\n","date":"2019-08-14 16:47:54","endLine":123,"groupId":"2047","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equalsDeep","params":"(SqlTypeNameSpecnode@Litmuslitmus)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c4/77c19966c03238da3e52d2a1c7da7ba80aed64.src","preCode":"  @Override public boolean equalsDeep(SqlTypeNameSpec node, Litmus litmus) {\n    if (!(node instanceof SqlRowTypeNameSpec)) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    SqlRowTypeNameSpec that = (SqlRowTypeNameSpec) node;\n    if (this.fieldNames.size() != that.fieldNames.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < fieldNames.size(); i++) {\n      if (!this.fieldNames.get(i).equalsDeep(that.fieldNames.get(i), litmus)) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    if (this.fieldTypes.size() != that.fieldTypes.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < fieldTypes.size(); i++) {\n      if (!this.fieldTypes.get(i).equals(that.fieldTypes.get(i))) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    return litmus.succeed();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlRowTypeNameSpec.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"}],"commitId":"f25734a2d27f304a454a310e656ab83a5fa85890","commitMessage":"@@@[CALCITE-3238] Support Time Zone suffix of DateTime types for SqlDataTypeSpec\n","date":"2019-08-14 16:47:54","modifiedFileCount":"14","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2019-08-12 17:32:20","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":5,"curCode":"  @Override public boolean equalsDeep(SqlNode node, Litmus litmus) {\n    if (!(node instanceof SqlIdentifier)) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    SqlIdentifier that = (SqlIdentifier) node;\n    if (this.names.size() != that.names.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < names.size(); i++) {\n      if (!this.names.get(i).equals(that.names.get(i))) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    return litmus.succeed();\n  }\n","date":"2020-10-07 05:42:47","endLine":317,"groupId":"2047","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equalsDeep","params":"(SqlNodenode@Litmuslitmus)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3d/b2bad0419eb40017c470be00e5c693d297bda6.src","preCode":"  public boolean equalsDeep(SqlNode node, Litmus litmus) {\n    if (!(node instanceof SqlIdentifier)) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    SqlIdentifier that = (SqlIdentifier) node;\n    if (this.names.size() != that.names.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < names.size(); i++) {\n      if (!this.names.get(i).equals(that.names.get(i))) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    return litmus.succeed();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"},{"authorDate":"2019-08-12 17:32:20","commitOrder":5,"curCode":"  @Override public boolean equalsDeep(SqlTypeNameSpec node, Litmus litmus) {\n    if (!(node instanceof SqlRowTypeNameSpec)) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    SqlRowTypeNameSpec that = (SqlRowTypeNameSpec) node;\n    if (this.fieldNames.size() != that.fieldNames.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < fieldNames.size(); i++) {\n      if (!this.fieldNames.get(i).equalsDeep(that.fieldNames.get(i), litmus)) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    if (this.fieldTypes.size() != that.fieldTypes.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < fieldTypes.size(); i++) {\n      if (!this.fieldTypes.get(i).equals(that.fieldTypes.get(i))) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    return litmus.succeed();\n  }\n","date":"2019-08-14 16:47:54","endLine":123,"groupId":"2047","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equalsDeep","params":"(SqlTypeNameSpecnode@Litmuslitmus)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c4/77c19966c03238da3e52d2a1c7da7ba80aed64.src","preCode":"  @Override public boolean equalsDeep(SqlTypeNameSpec node, Litmus litmus) {\n    if (!(node instanceof SqlRowTypeNameSpec)) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    SqlRowTypeNameSpec that = (SqlRowTypeNameSpec) node;\n    if (this.fieldNames.size() != that.fieldNames.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < fieldNames.size(); i++) {\n      if (!this.fieldNames.get(i).equalsDeep(that.fieldNames.get(i), litmus)) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    if (this.fieldTypes.size() != that.fieldTypes.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < fieldTypes.size(); i++) {\n      if (!this.fieldTypes.get(i).equals(that.fieldTypes.get(i))) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    return litmus.succeed();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlRowTypeNameSpec.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"N"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2019-08-12 17:32:20","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"  @Override public boolean equalsDeep(@Nullable SqlNode node, Litmus litmus) {\n    if (!(node instanceof SqlIdentifier)) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    SqlIdentifier that = (SqlIdentifier) node;\n    if (this.names.size() != that.names.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < names.size(); i++) {\n      if (!this.names.get(i).equals(that.names.get(i))) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    return litmus.succeed();\n  }\n","date":"2020-11-30 06:45:33","endLine":322,"groupId":"101739","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"equalsDeep","params":"(@NullableSqlNodenode@Litmuslitmus)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/25ce1c729350e5ca021485ffe298aeb52b8c35.src","preCode":"  @Override public boolean equalsDeep(SqlNode node, Litmus litmus) {\n    if (!(node instanceof SqlIdentifier)) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    SqlIdentifier that = (SqlIdentifier) node;\n    if (this.names.size() != that.names.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < names.size(); i++) {\n      if (!this.names.get(i).equals(that.names.get(i))) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    return litmus.succeed();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"},{"authorDate":"2019-08-12 17:32:20","commitOrder":6,"curCode":"  @Override public boolean equalsDeep(SqlTypeNameSpec node, Litmus litmus) {\n    if (!(node instanceof SqlRowTypeNameSpec)) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    SqlRowTypeNameSpec that = (SqlRowTypeNameSpec) node;\n    if (this.fieldNames.size() != that.fieldNames.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < fieldNames.size(); i++) {\n      if (!this.fieldNames.get(i).equalsDeep(that.fieldNames.get(i), litmus)) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    if (this.fieldTypes.size() != that.fieldTypes.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < fieldTypes.size(); i++) {\n      if (!this.fieldTypes.get(i).equals(that.fieldTypes.get(i))) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    return litmus.succeed();\n  }\n","date":"2019-08-14 16:47:54","endLine":123,"groupId":"101739","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"equalsDeep","params":"(SqlTypeNameSpecnode@Litmuslitmus)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c4/77c19966c03238da3e52d2a1c7da7ba80aed64.src","preCode":"  @Override public boolean equalsDeep(SqlTypeNameSpec node, Litmus litmus) {\n    if (!(node instanceof SqlRowTypeNameSpec)) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    SqlRowTypeNameSpec that = (SqlRowTypeNameSpec) node;\n    if (this.fieldNames.size() != that.fieldNames.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < fieldNames.size(); i++) {\n      if (!this.fieldNames.get(i).equalsDeep(that.fieldNames.get(i), litmus)) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    if (this.fieldTypes.size() != that.fieldTypes.size()) {\n      return litmus.fail(\"{} != {}\", this, node);\n    }\n    for (int i = 0; i < fieldTypes.size(); i++) {\n      if (!this.fieldTypes.get(i).equals(that.fieldTypes.get(i))) {\n        return litmus.fail(\"{} != {}\", this, node);\n      }\n    }\n    return litmus.succeed();\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlRowTypeNameSpec.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"N"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
