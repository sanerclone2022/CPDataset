[{"authorTime":"2015-03-20 00:56:09","codes":[{"authorDate":"2015-03-20 00:56:09","commitOrder":3,"curCode":"  public static CalcitePrepare.ParseResult parse(\n      final CalciteConnection connection, final CalciteSchema schema,\n      final List<String> schemaPath, final String sql) {\n    final CalcitePrepare prepare = CalcitePrepare.DEFAULT_FACTORY.apply();\n    final ImmutableMap<CalciteConnectionProperty, String> propValues =\n        ImmutableMap.of();\n    final CalcitePrepare.Context context =\n        makeContext(connection, schema, schemaPath, propValues);\n    CalcitePrepare.Dummy.push(context);\n    try {\n      return prepare.parse(context, sql);\n    } finally {\n      CalcitePrepare.Dummy.pop(context);\n    }\n  }\n","date":"2015-05-13 05:18:10","endLine":299,"groupId":"5622","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parse","params":"(finalCalciteConnectionconnection@finalCalciteSchemaschema@finalList<String>schemaPath@finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/34233aa4f6ca3224a15ad233d8dc94a420afb3.src","preCode":"  public static CalcitePrepare.ParseResult parse(\n      final CalciteConnection connection, final CalciteSchema schema,\n      final List<String> schemaPath, final String sql) {\n    final CalcitePrepare prepare = CalcitePrepare.DEFAULT_FACTORY.apply();\n    final ImmutableMap<CalciteConnectionProperty, String> propValues =\n        ImmutableMap.of();\n    final CalcitePrepare.Context context =\n        makeContext(connection, schema, schemaPath, propValues);\n    CalcitePrepare.Dummy.push(context);\n    try {\n      return prepare.parse(context, sql);\n    } finally {\n      CalcitePrepare.Dummy.pop(context);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/Schemas.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"MB"},{"authorDate":"2015-03-20 00:56:09","commitOrder":3,"curCode":"  public static CalcitePrepare.AnalyzeViewResult analyzeView(\n      final CalciteConnection connection, final CalciteSchema schema,\n      final List<String> schemaPath, final String sql, boolean fail) {\n    final CalcitePrepare prepare = CalcitePrepare.DEFAULT_FACTORY.apply();\n    final ImmutableMap<CalciteConnectionProperty, String> propValues =\n        ImmutableMap.of();\n    final CalcitePrepare.Context context =\n        makeContext(connection, schema, schemaPath, propValues);\n    CalcitePrepare.Dummy.push(context);\n    try {\n      return prepare.analyzeView(context, sql, fail);\n    } finally {\n      CalcitePrepare.Dummy.pop(context);\n    }\n  }\n","date":"2015-05-13 05:18:10","endLine":334,"groupId":"5622","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"analyzeView","params":"(finalCalciteConnectionconnection@finalCalciteSchemaschema@finalList<String>schemaPath@finalStringsql@booleanfail)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/34233aa4f6ca3224a15ad233d8dc94a420afb3.src","preCode":"  public static CalcitePrepare.AnalyzeViewResult analyzeView(\n      final CalciteConnection connection, final CalciteSchema schema,\n      final List<String> schemaPath, final String sql, boolean fail) {\n    final CalcitePrepare prepare = CalcitePrepare.DEFAULT_FACTORY.apply();\n    final ImmutableMap<CalciteConnectionProperty, String> propValues =\n        ImmutableMap.of();\n    final CalcitePrepare.Context context =\n        makeContext(connection, schema, schemaPath, propValues);\n    CalcitePrepare.Dummy.push(context);\n    try {\n      return prepare.analyzeView(context, sql, fail);\n    } finally {\n      CalcitePrepare.Dummy.pop(context);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/Schemas.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"B"}],"commitId":"bc45a2c047349826e22641e82468a2d4dad948e3","commitMessage":"@@@[CALCITE-505] Support modifiable view\n","date":"2015-05-13 05:18:10","modifiedFileCount":"25","status":"M","submitter":"Julian Hyde"},{"authorTime":"2017-07-24 23:41:43","codes":[{"authorDate":"2017-07-24 23:41:43","commitOrder":4,"curCode":"  public static CalcitePrepare.ParseResult parse(\n      final CalciteConnection connection, final CalciteSchema schema,\n      final List<String> schemaPath, final String sql) {\n    final CalcitePrepare prepare = CalcitePrepare.DEFAULT_FACTORY.apply();\n    final ImmutableMap<CalciteConnectionProperty, String> propValues =\n        ImmutableMap.of();\n    final CalcitePrepare.Context context =\n        makeContext(connection, schema, schemaPath, null, propValues);\n    CalcitePrepare.Dummy.push(context);\n    try {\n      return prepare.parse(context, sql);\n    } finally {\n      CalcitePrepare.Dummy.pop(context);\n    }\n  }\n","date":"2017-07-25 11:19:12","endLine":299,"groupId":"153","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"parse","params":"(finalCalciteConnectionconnection@finalCalciteSchemaschema@finalList<String>schemaPath@finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bd/671f9ce9e73d68dda7dca6b1c3df8a84279751.src","preCode":"  public static CalcitePrepare.ParseResult parse(\n      final CalciteConnection connection, final CalciteSchema schema,\n      final List<String> schemaPath, final String sql) {\n    final CalcitePrepare prepare = CalcitePrepare.DEFAULT_FACTORY.apply();\n    final ImmutableMap<CalciteConnectionProperty, String> propValues =\n        ImmutableMap.of();\n    final CalcitePrepare.Context context =\n        makeContext(connection, schema, schemaPath, propValues);\n    CalcitePrepare.Dummy.push(context);\n    try {\n      return prepare.parse(context, sql);\n    } finally {\n      CalcitePrepare.Dummy.pop(context);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/Schemas.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"},{"authorDate":"2017-07-24 23:41:43","commitOrder":4,"curCode":"  public static CalcitePrepare.AnalyzeViewResult analyzeView(\n      final CalciteConnection connection, final CalciteSchema schema,\n      final List<String> schemaPath, final String viewSql,\n      List<String> viewPath, boolean fail) {\n    final CalcitePrepare prepare = CalcitePrepare.DEFAULT_FACTORY.apply();\n    final ImmutableMap<CalciteConnectionProperty, String> propValues =\n        ImmutableMap.of();\n    final CalcitePrepare.Context context =\n        makeContext(connection, schema, schemaPath, viewPath, propValues);\n    CalcitePrepare.Dummy.push(context);\n    try {\n      return prepare.analyzeView(context, viewSql, fail);\n    } finally {\n      CalcitePrepare.Dummy.pop(context);\n    }\n  }\n","date":"2017-07-25 11:19:12","endLine":335,"groupId":"7098","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"analyzeView","params":"(finalCalciteConnectionconnection@finalCalciteSchemaschema@finalList<String>schemaPath@finalStringviewSql@List<String>viewPath@booleanfail)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bd/671f9ce9e73d68dda7dca6b1c3df8a84279751.src","preCode":"  public static CalcitePrepare.AnalyzeViewResult analyzeView(\n      final CalciteConnection connection, final CalciteSchema schema,\n      final List<String> schemaPath, final String sql, boolean fail) {\n    final CalcitePrepare prepare = CalcitePrepare.DEFAULT_FACTORY.apply();\n    final ImmutableMap<CalciteConnectionProperty, String> propValues =\n        ImmutableMap.of();\n    final CalcitePrepare.Context context =\n        makeContext(connection, schema, schemaPath, propValues);\n    CalcitePrepare.Dummy.push(context);\n    try {\n      return prepare.analyzeView(context, sql, fail);\n    } finally {\n      CalcitePrepare.Dummy.pop(context);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/Schemas.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"}],"commitId":"0cbd2a1825768835dccce1b24f746bc968908c3a","commitMessage":"@@@[CALCITE-1900] Detect cyclic views and give useful error message\n","date":"2017-07-25 11:19:12","modifiedFileCount":"7","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  public static CalcitePrepare.ParseResult parse(\n      final CalciteConnection connection, final CalciteSchema schema,\n      final @Nullable List<String> schemaPath, final String sql) {\n    final CalcitePrepare prepare = CalcitePrepare.DEFAULT_FACTORY.apply();\n    final ImmutableMap<CalciteConnectionProperty, String> propValues =\n        ImmutableMap.of();\n    final CalcitePrepare.Context context =\n        makeContext(connection, schema, schemaPath, null, propValues);\n    CalcitePrepare.Dummy.push(context);\n    try {\n      return prepare.parse(context, sql);\n    } finally {\n      CalcitePrepare.Dummy.pop(context);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":297,"groupId":"101704","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"parse","params":"(finalCalciteConnectionconnection@finalCalciteSchemaschema@final@NullableList<String>schemaPath@finalStringsql)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f8/57ba3fc4f73ea14187abbe1a95d51dc8a39d61.src","preCode":"  public static CalcitePrepare.ParseResult parse(\n      final CalciteConnection connection, final CalciteSchema schema,\n      final List<String> schemaPath, final String sql) {\n    final CalcitePrepare prepare = CalcitePrepare.DEFAULT_FACTORY.apply();\n    final ImmutableMap<CalciteConnectionProperty, String> propValues =\n        ImmutableMap.of();\n    final CalcitePrepare.Context context =\n        makeContext(connection, schema, schemaPath, null, propValues);\n    CalcitePrepare.Dummy.push(context);\n    try {\n      return prepare.parse(context, sql);\n    } finally {\n      CalcitePrepare.Dummy.pop(context);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/Schemas.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  public static CalcitePrepare.AnalyzeViewResult analyzeView(\n      final CalciteConnection connection, final CalciteSchema schema,\n      final @Nullable List<String> schemaPath, final String viewSql,\n      @Nullable List<String> viewPath, boolean fail) {\n    final CalcitePrepare prepare = CalcitePrepare.DEFAULT_FACTORY.apply();\n    final ImmutableMap<CalciteConnectionProperty, String> propValues =\n        ImmutableMap.of();\n    final CalcitePrepare.Context context =\n        makeContext(connection, schema, schemaPath, viewPath, propValues);\n    CalcitePrepare.Dummy.push(context);\n    try {\n      return prepare.analyzeView(context, viewSql, fail);\n    } finally {\n      CalcitePrepare.Dummy.pop(context);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":333,"groupId":"101704","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"analyzeView","params":"(finalCalciteConnectionconnection@finalCalciteSchemaschema@final@NullableList<String>schemaPath@finalStringviewSql@@NullableList<String>viewPath@booleanfail)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f8/57ba3fc4f73ea14187abbe1a95d51dc8a39d61.src","preCode":"  public static CalcitePrepare.AnalyzeViewResult analyzeView(\n      final CalciteConnection connection, final CalciteSchema schema,\n      final List<String> schemaPath, final String viewSql,\n      List<String> viewPath, boolean fail) {\n    final CalcitePrepare prepare = CalcitePrepare.DEFAULT_FACTORY.apply();\n    final ImmutableMap<CalciteConnectionProperty, String> propValues =\n        ImmutableMap.of();\n    final CalcitePrepare.Context context =\n        makeContext(connection, schema, schemaPath, viewPath, propValues);\n    CalcitePrepare.Dummy.push(context);\n    try {\n      return prepare.analyzeView(context, viewSql, fail);\n    } finally {\n      CalcitePrepare.Dummy.pop(context);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/Schemas.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
