[{"authorTime":"2019-11-15 15:05:25","codes":[{"authorDate":"2018-03-04 13:26:26","commitOrder":2,"curCode":"  @Test public void testUnparseSqlIntervalQualifierMySql() {\n    final String sql0 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" - \"\n        + \"INTERVAL '19800' SECOND(5) > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect0 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` - INTERVAL '19800' SECOND)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql0).withMysql().ok(expect0);\n\n    final String sql1 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n        + \"INTERVAL '10' HOUR > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect1 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` + INTERVAL '10' HOUR)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql1).withMysql().ok(expect1);\n\n    final String sql2 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n        + \"INTERVAL '1-2' year to month > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect2 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` + INTERVAL '1-2' YEAR_MONTH)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql2).withMysql().ok(expect2);\n\n    final String sql3 = \"select  * from \\\"employee\\\" \"\n        + \"where  \\\"hire_date\\\" + INTERVAL '39:12' MINUTE TO SECOND\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect3 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` + INTERVAL '39:12' MINUTE_SECOND)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql3).withMysql().ok(expect3);\n  }\n","date":"2018-03-25 06:58:01","endLine":1159,"groupId":"11052","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnparseSqlIntervalQualifierMySql","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/88/f78866dfa3d164f0ab64937d6c85e6f82da8e8.src","preCode":"  @Test public void testUnparseSqlIntervalQualifierMySql() {\n    final String sql0 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" - \"\n        + \"INTERVAL '19800' SECOND(5) > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect0 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` - INTERVAL '19800' SECOND)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql0).withMysql().ok(expect0);\n\n    final String sql1 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n        + \"INTERVAL '10' HOUR > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect1 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` + INTERVAL '10' HOUR)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql1).withMysql().ok(expect1);\n\n    final String sql2 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n        + \"INTERVAL '1-2' year to month > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect2 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` + INTERVAL '1-2' YEAR_MONTH)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql2).withMysql().ok(expect2);\n\n    final String sql3 = \"select  * from \\\"employee\\\" \"\n        + \"where  \\\"hire_date\\\" + INTERVAL '39:12' MINUTE TO SECOND\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect3 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` + INTERVAL '39:12' MINUTE_SECOND)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql3).withMysql().ok(expect3);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1126,"status":"NB"},{"authorDate":"2019-11-15 15:05:25","commitOrder":2,"curCode":"  @Test public void testUnparseSqlIntervalQualifierBigQuery() {\n    final String sql0 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" - \"\n            + \"INTERVAL '19800' SECOND(5) > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect0 = \"SELECT *\\n\"\n            + \"FROM foodmart.employee\\n\"\n            + \"WHERE (hire_date - INTERVAL 19800 SECOND)\"\n            + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql0).withBigQuery().ok(expect0);\n\n    final String sql1 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n            + \"INTERVAL '10' HOUR > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect1 = \"SELECT *\\n\"\n            + \"FROM foodmart.employee\\n\"\n            + \"WHERE (hire_date + INTERVAL 10 HOUR)\"\n            + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql1).withBigQuery().ok(expect1);\n\n    final String sql2 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n            + \"INTERVAL '1 2:34:56.78' DAY TO SECOND > TIMESTAMP '2005-10-17 00:00:00' \";\n    sql(sql2).withBigQuery().throws_(\"Only INT64 is supported as the interval value for BigQuery.\");\n  }\n","date":"2019-12-12 13:43:30","endLine":2342,"groupId":"11052","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnparseSqlIntervalQualifierBigQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/66/989ba09317d0bf6afaba3f97a582a3f4e8ae7d.src","preCode":"  @Test public void testUnparseSqlIntervalQualifierBigQuery() {\n    final String sql0 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" - \"\n            + \"INTERVAL '19800' SECOND(5) > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect0 = \"SELECT *\\n\"\n            + \"FROM foodmart.employee\\n\"\n            + \"WHERE (hire_date - INTERVAL 19800 SECOND)\"\n            + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql0).withBigQuery().ok(expect0);\n\n    final String sql1 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n            + \"INTERVAL '10' HOUR > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect1 = \"SELECT *\\n\"\n            + \"FROM foodmart.employee\\n\"\n            + \"WHERE (hire_date + INTERVAL 10 HOUR)\"\n            + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql1).withBigQuery().ok(expect1);\n\n    final String sql2 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n            + \"INTERVAL '1 2:34:56.78' DAY TO SECOND > TIMESTAMP '2005-10-17 00:00:00' \";\n    sql(sql2).withBigQuery().throws_(\"Only INT64 is supported as the interval value for BigQuery.\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2322,"status":"B"}],"commitId":"fd92642d8a0b08ed0b1b4ccefd0de58d6239dd03","commitMessage":"@@@[CALCITE-3381] Unparse to correct BigQuery ingterval syngax: INTERVAL int64 time_unit. Range time unit is not supported yet by BigQuery (amaliujia)\n\nBigQuery only allows interval syntax: INTERVAL int64 time_unit.\n\nclose apache/calcite#1588\n","date":"2019-12-12 13:43:30","modifiedFileCount":"2","status":"M","submitter":"amaliujia"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testUnparseSqlIntervalQualifierMySql() {\n    final String sql0 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" - \"\n        + \"INTERVAL '19800' SECOND(5) > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect0 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` - INTERVAL '19800' SECOND)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql0).withMysql().ok(expect0);\n\n    final String sql1 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n        + \"INTERVAL '10' HOUR > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect1 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` + INTERVAL '10' HOUR)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql1).withMysql().ok(expect1);\n\n    final String sql2 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n        + \"INTERVAL '1-2' year to month > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect2 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` + INTERVAL '1-2' YEAR_MONTH)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql2).withMysql().ok(expect2);\n\n    final String sql3 = \"select  * from \\\"employee\\\" \"\n        + \"where  \\\"hire_date\\\" + INTERVAL '39:12' MINUTE TO SECOND\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect3 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` + INTERVAL '39:12' MINUTE_SECOND)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql3).withMysql().ok(expect3);\n  }\n","date":"2020-04-06 04:57:49","endLine":2886,"groupId":"101560","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnparseSqlIntervalQualifierMySql","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testUnparseSqlIntervalQualifierMySql() {\n    final String sql0 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" - \"\n        + \"INTERVAL '19800' SECOND(5) > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect0 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` - INTERVAL '19800' SECOND)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql0).withMysql().ok(expect0);\n\n    final String sql1 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n        + \"INTERVAL '10' HOUR > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect1 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` + INTERVAL '10' HOUR)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql1).withMysql().ok(expect1);\n\n    final String sql2 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n        + \"INTERVAL '1-2' year to month > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect2 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` + INTERVAL '1-2' YEAR_MONTH)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql2).withMysql().ok(expect2);\n\n    final String sql3 = \"select  * from \\\"employee\\\" \"\n        + \"where  \\\"hire_date\\\" + INTERVAL '39:12' MINUTE TO SECOND\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect3 = \"SELECT *\\n\"\n        + \"FROM `foodmart`.`employee`\\n\"\n        + \"WHERE (`hire_date` + INTERVAL '39:12' MINUTE_SECOND)\"\n        + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql3).withMysql().ok(expect3);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2853,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testUnparseSqlIntervalQualifierBigQuery() {\n    final String sql0 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" - \"\n            + \"INTERVAL '19800' SECOND(5) > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect0 = \"SELECT *\\n\"\n            + \"FROM foodmart.employee\\n\"\n            + \"WHERE (hire_date - INTERVAL 19800 SECOND)\"\n            + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql0).withBigQuery().ok(expect0);\n\n    final String sql1 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n            + \"INTERVAL '10' HOUR > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect1 = \"SELECT *\\n\"\n            + \"FROM foodmart.employee\\n\"\n            + \"WHERE (hire_date + INTERVAL 10 HOUR)\"\n            + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql1).withBigQuery().ok(expect1);\n\n    final String sql2 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n            + \"INTERVAL '1 2:34:56.78' DAY TO SECOND > TIMESTAMP '2005-10-17 00:00:00' \";\n    sql(sql2).withBigQuery().throws_(\"Only INT64 is supported as the interval value for BigQuery.\");\n  }\n","date":"2020-04-06 04:57:49","endLine":2941,"groupId":"101560","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnparseSqlIntervalQualifierBigQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testUnparseSqlIntervalQualifierBigQuery() {\n    final String sql0 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" - \"\n            + \"INTERVAL '19800' SECOND(5) > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect0 = \"SELECT *\\n\"\n            + \"FROM foodmart.employee\\n\"\n            + \"WHERE (hire_date - INTERVAL 19800 SECOND)\"\n            + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql0).withBigQuery().ok(expect0);\n\n    final String sql1 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n            + \"INTERVAL '10' HOUR > TIMESTAMP '2005-10-17 00:00:00' \";\n    final String expect1 = \"SELECT *\\n\"\n            + \"FROM foodmart.employee\\n\"\n            + \"WHERE (hire_date + INTERVAL 10 HOUR)\"\n            + \" > TIMESTAMP '2005-10-17 00:00:00'\";\n    sql(sql1).withBigQuery().ok(expect1);\n\n    final String sql2 = \"select  * from \\\"employee\\\" where  \\\"hire_date\\\" + \"\n            + \"INTERVAL '1 2:34:56.78' DAY TO SECOND > TIMESTAMP '2005-10-17 00:00:00' \";\n    sql(sql2).withBigQuery().throws_(\"Only INT64 is supported as the interval value for BigQuery.\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2921,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
