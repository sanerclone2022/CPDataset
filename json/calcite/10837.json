[{"authorTime":"2016-06-11 04:28:59","codes":[{"authorDate":"2016-06-11 04:28:59","commitOrder":1,"curCode":"  @Test public void testLeastRestrictiveWithNullability() {\n    Fixture f = new Fixture();\n    RelDataType leastRestrictive =\n        f.typeFactory.leastRestrictive(Lists.newArrayList(f.sqlVarcharNullable, f.sqlAny));\n    assertThat(leastRestrictive.getSqlTypeName(), is(SqlTypeName.ANY));\n    assertThat(leastRestrictive.isNullable(), is(true));\n  }\n","date":"2016-06-15 09:02:59","endLine":54,"groupId":"9816","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeastRestrictiveWithNullability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4c/a75fa12665c289278353dcb6878d732c7dcb1f.src","preCode":"  @Test public void testLeastRestrictiveWithNullability() {\n    Fixture f = new Fixture();\n    RelDataType leastRestrictive =\n        f.typeFactory.leastRestrictive(Lists.newArrayList(f.sqlVarcharNullable, f.sqlAny));\n    assertThat(leastRestrictive.getSqlTypeName(), is(SqlTypeName.ANY));\n    assertThat(leastRestrictive.isNullable(), is(true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/SqlTypeFactoryTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2016-06-11 04:28:59","commitOrder":1,"curCode":"  @Test public void testLeastRestrictiveWithNull() {\n    Fixture f = new Fixture();\n    RelDataType leastRestrictive =\n        f.typeFactory.leastRestrictive(Lists.newArrayList(f.sqlNull, f.sqlNull));\n    assertThat(leastRestrictive.getSqlTypeName(), is(SqlTypeName.NULL));\n    assertThat(leastRestrictive.isNullable(), is(true));\n  }\n","date":"2016-06-15 09:02:59","endLine":62,"groupId":"9817","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeastRestrictiveWithNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4c/a75fa12665c289278353dcb6878d732c7dcb1f.src","preCode":"  @Test public void testLeastRestrictiveWithNull() {\n    Fixture f = new Fixture();\n    RelDataType leastRestrictive =\n        f.typeFactory.leastRestrictive(Lists.newArrayList(f.sqlNull, f.sqlNull));\n    assertThat(leastRestrictive.getSqlTypeName(), is(SqlTypeName.NULL));\n    assertThat(leastRestrictive.isNullable(), is(true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/SqlTypeFactoryTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"}],"commitId":"0404349e84b6286aa16add5ce9ae6728240ffdbc","commitMessage":"@@@[CALCITE-1283] leastRestrictiveSqlType() should account for nullability of each type and null types (Minji Kim)\n\nClose apache/calcite#246\n","date":"2016-06-15 09:02:59","modifiedFileCount":"2","status":"B","submitter":"Minji Kim"},{"authorTime":"2018-05-23 01:44:06","codes":[{"authorDate":"2018-05-23 01:44:06","commitOrder":2,"curCode":"  @Test public void testLeastRestrictiveWithNullability() {\n    SqlTypeFixture f = new SqlTypeFixture();\n    RelDataType leastRestrictive =\n        f.typeFactory.leastRestrictive(Lists.newArrayList(f.sqlVarcharNullable, f.sqlAny));\n    assertThat(leastRestrictive.getSqlTypeName(), is(SqlTypeName.ANY));\n    assertThat(leastRestrictive.isNullable(), is(true));\n  }\n","date":"2018-05-23 04:49:50","endLine":55,"groupId":"9816","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeastRestrictiveWithNullability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f3/c5209956c1fb8bbf74a899858a8076eadca3d6.src","preCode":"  @Test public void testLeastRestrictiveWithNullability() {\n    Fixture f = new Fixture();\n    RelDataType leastRestrictive =\n        f.typeFactory.leastRestrictive(Lists.newArrayList(f.sqlVarcharNullable, f.sqlAny));\n    assertThat(leastRestrictive.getSqlTypeName(), is(SqlTypeName.ANY));\n    assertThat(leastRestrictive.isNullable(), is(true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/SqlTypeFactoryTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2018-05-23 01:44:06","commitOrder":2,"curCode":"  @Test public void testLeastRestrictiveWithNull() {\n    SqlTypeFixture f = new SqlTypeFixture();\n    RelDataType leastRestrictive =\n        f.typeFactory.leastRestrictive(Lists.newArrayList(f.sqlNull, f.sqlNull));\n    assertThat(leastRestrictive.getSqlTypeName(), is(SqlTypeName.NULL));\n    assertThat(leastRestrictive.isNullable(), is(true));\n  }\n","date":"2018-05-23 04:49:50","endLine":63,"groupId":"9817","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeastRestrictiveWithNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f3/c5209956c1fb8bbf74a899858a8076eadca3d6.src","preCode":"  @Test public void testLeastRestrictiveWithNull() {\n    Fixture f = new Fixture();\n    RelDataType leastRestrictive =\n        f.typeFactory.leastRestrictive(Lists.newArrayList(f.sqlNull, f.sqlNull));\n    assertThat(leastRestrictive.getSqlTypeName(), is(SqlTypeName.NULL));\n    assertThat(leastRestrictive.isNullable(), is(true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/SqlTypeFactoryTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"da568324ad84c5a792f2b9c2bd2c827c1440b19c","commitMessage":"@@@[CALCITE-2265] Allow comparison of ROW values (Dylan Adams)\n\nStandardConvertletTable.consistentType now checks if structs' members\nare pair-wise of the same family.\n\nAdded isSameFamily and areSameFamily methods to SqlTypeUtil to determine\nwhether two types.  or a list of types.  are of the same family. Added\nunit test to verify this new functionality.\n\nAdded new case to JdbcTest to verify row comparison are executed in\nHSQLDB.\n\nRefactored common code from SqlTypeUtil.isComparable for determining\nthe family of a RelDataType.\n\nExtracted SqlTypeFixture from SqlTypeFactoryTest.\n\nClose apache/calcite#696\n","date":"2018-05-23 04:49:50","modifiedFileCount":"5","status":"M","submitter":"dkadams"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testLeastRestrictiveWithNullability() {\n    SqlTypeFixture f = new SqlTypeFixture();\n    RelDataType leastRestrictive =\n        f.typeFactory.leastRestrictive(Lists.newArrayList(f.sqlVarcharNullable, f.sqlAny));\n    assertThat(leastRestrictive.getSqlTypeName(), is(SqlTypeName.ANY));\n    assertThat(leastRestrictive.isNullable(), is(true));\n  }\n","date":"2020-04-06 04:57:49","endLine":65,"groupId":"10837","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeastRestrictiveWithNullability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e5/734134f390f884c679dbc3f95193fe2c4e8e68.src","preCode":"  @Test public void testLeastRestrictiveWithNullability() {\n    SqlTypeFixture f = new SqlTypeFixture();\n    RelDataType leastRestrictive =\n        f.typeFactory.leastRestrictive(Lists.newArrayList(f.sqlVarcharNullable, f.sqlAny));\n    assertThat(leastRestrictive.getSqlTypeName(), is(SqlTypeName.ANY));\n    assertThat(leastRestrictive.isNullable(), is(true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/SqlTypeFactoryTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testLeastRestrictiveWithNull() {\n    SqlTypeFixture f = new SqlTypeFixture();\n    RelDataType leastRestrictive =\n        f.typeFactory.leastRestrictive(Lists.newArrayList(f.sqlNull, f.sqlNull));\n    assertThat(leastRestrictive.getSqlTypeName(), is(SqlTypeName.NULL));\n    assertThat(leastRestrictive.isNullable(), is(true));\n  }\n","date":"2020-04-06 04:57:49","endLine":84,"groupId":"10837","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeastRestrictiveWithNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e5/734134f390f884c679dbc3f95193fe2c4e8e68.src","preCode":"  @Test public void testLeastRestrictiveWithNull() {\n    SqlTypeFixture f = new SqlTypeFixture();\n    RelDataType leastRestrictive =\n        f.typeFactory.leastRestrictive(Lists.newArrayList(f.sqlNull, f.sqlNull));\n    assertThat(leastRestrictive.getSqlTypeName(), is(SqlTypeName.NULL));\n    assertThat(leastRestrictive.isNullable(), is(true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/SqlTypeFactoryTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
