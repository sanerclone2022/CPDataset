[{"authorTime":"2017-12-30 02:19:25","codes":[{"authorDate":"2017-12-30 02:19:25","commitOrder":1,"curCode":"  @Test public void testAggregateExtractProjectRuleWithGroupingSets() {\n    final String sql = \"select empno, deptno, sum(sal)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(AggregateProjectMergeRule.INSTANCE)\n        .build();\n    final AggregateExtractProjectRule rule =\n        new AggregateExtractProjectRule(Aggregate.class, LogicalTableScan.class,\n            RelFactories.LOGICAL_BUILDER);\n    sql(sql).withPre(pre).withRule(rule).check();\n  }\n","date":"2018-01-03 09:52:42","endLine":2550,"groupId":"9346","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregateExtractProjectRuleWithGroupingSets","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d7/6babe3d72f9f8f3e71f01261c059505c05d438.src","preCode":"  @Test public void testAggregateExtractProjectRuleWithGroupingSets() {\n    final String sql = \"select empno, deptno, sum(sal)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(AggregateProjectMergeRule.INSTANCE)\n        .build();\n    final AggregateExtractProjectRule rule =\n        new AggregateExtractProjectRule(Aggregate.class, LogicalTableScan.class,\n            RelFactories.LOGICAL_BUILDER);\n    sql(sql).withPre(pre).withRule(rule).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2539,"status":"B"},{"authorDate":"2017-12-30 02:19:25","commitOrder":1,"curCode":"  @Test public void testAggregateExtractProjectRuleWithGroupingSets2() {\n    final String sql = \"select empno, deptno, sum(empno)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(AggregateProjectMergeRule.INSTANCE)\n        .build();\n    final AggregateExtractProjectRule rule =\n        new AggregateExtractProjectRule(Aggregate.class, LogicalTableScan.class,\n            RelFactories.LOGICAL_BUILDER);\n    sql(sql).withPre(pre).withRule(rule).check();\n  }\n","date":"2018-01-03 09:52:42","endLine":2566,"groupId":"9346","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregateExtractProjectRuleWithGroupingSets2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d7/6babe3d72f9f8f3e71f01261c059505c05d438.src","preCode":"  @Test public void testAggregateExtractProjectRuleWithGroupingSets2() {\n    final String sql = \"select empno, deptno, sum(empno)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(AggregateProjectMergeRule.INSTANCE)\n        .build();\n    final AggregateExtractProjectRule rule =\n        new AggregateExtractProjectRule(Aggregate.class, LogicalTableScan.class,\n            RelFactories.LOGICAL_BUILDER);\n    sql(sql).withPre(pre).withRule(rule).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2555,"status":"B"}],"commitId":"d3b35a4b5c9270f905175fefa312ab5d8207c1b0","commitMessage":"@@@[CALCITE-2113] Prune the columns coming from the input of an Aggregate by pushing a Project.  in both core and Druid adapter (Nishant Bangarwa)\n\nIntroduce a rule.  DruidAggregateExtractProjectRule that\ntransforms Aggregate(DruidQuery) to Aggregate(Project(DruidQuery)).\nThe Project would fix column pruning to Druid in case\nHepPlanner is used to plan queries.\n\nAlso a general-purpose rule AggregateExtractProjectRule.\n\nClose apache/calcite#594\n","date":"2018-01-03 09:52:42","modifiedFileCount":"3","status":"B","submitter":"Nishant"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testAggregateExtractProjectRuleWithGroupingSets() {\n    final String sql = \"select empno, deptno, sum(sal)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(AggregateProjectMergeRule.INSTANCE)\n        .build();\n    final AggregateExtractProjectRule rule =\n        new AggregateExtractProjectRule(Aggregate.class, LogicalTableScan.class,\n            RelFactories.LOGICAL_BUILDER);\n    sql(sql).withPre(pre).withRule(rule).check();\n  }\n","date":"2020-04-06 04:57:49","endLine":3791,"groupId":"9346","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregateExtractProjectRuleWithGroupingSets","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/c56354833d8acfcc210ae25313c78e9332a2ba.src","preCode":"  @Test public void testAggregateExtractProjectRuleWithGroupingSets() {\n    final String sql = \"select empno, deptno, sum(sal)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(AggregateProjectMergeRule.INSTANCE)\n        .build();\n    final AggregateExtractProjectRule rule =\n        new AggregateExtractProjectRule(Aggregate.class, LogicalTableScan.class,\n            RelFactories.LOGICAL_BUILDER);\n    sql(sql).withPre(pre).withRule(rule).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3780,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testAggregateExtractProjectRuleWithGroupingSets2() {\n    final String sql = \"select empno, deptno, sum(empno)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(AggregateProjectMergeRule.INSTANCE)\n        .build();\n    final AggregateExtractProjectRule rule =\n        new AggregateExtractProjectRule(Aggregate.class, LogicalTableScan.class,\n            RelFactories.LOGICAL_BUILDER);\n    sql(sql).withPre(pre).withRule(rule).check();\n  }\n","date":"2020-04-06 04:57:49","endLine":3807,"groupId":"9346","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregateExtractProjectRuleWithGroupingSets2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/c56354833d8acfcc210ae25313c78e9332a2ba.src","preCode":"  @Test public void testAggregateExtractProjectRuleWithGroupingSets2() {\n    final String sql = \"select empno, deptno, sum(empno)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(AggregateProjectMergeRule.INSTANCE)\n        .build();\n    final AggregateExtractProjectRule rule =\n        new AggregateExtractProjectRule(Aggregate.class, LogicalTableScan.class,\n            RelFactories.LOGICAL_BUILDER);\n    sql(sql).withPre(pre).withRule(rule).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3796,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 04:45:12","codes":[{"authorDate":"2020-07-09 04:45:12","commitOrder":3,"curCode":"  @Test void testAggregateExtractProjectRuleWithGroupingSets() {\n    final String sql = \"select empno, deptno, sum(sal)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(CoreRules.AGGREGATE_PROJECT_MERGE)\n        .build();\n    final AggregateExtractProjectRule rule =\n        new AggregateExtractProjectRule(Aggregate.class, LogicalTableScan.class,\n            RelFactories.LOGICAL_BUILDER);\n    sql(sql).withPre(pre).withRule(rule).check();\n  }\n","date":"2020-07-12 06:58:28","endLine":3935,"groupId":"5188","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregateExtractProjectRuleWithGroupingSets","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/d77aee9e74f65d9e26a1ffa96400062e1eb119.src","preCode":"  @Test void testAggregateExtractProjectRuleWithGroupingSets() {\n    final String sql = \"select empno, deptno, sum(sal)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(AggregateProjectMergeRule.INSTANCE)\n        .build();\n    final AggregateExtractProjectRule rule =\n        new AggregateExtractProjectRule(Aggregate.class, LogicalTableScan.class,\n            RelFactories.LOGICAL_BUILDER);\n    sql(sql).withPre(pre).withRule(rule).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3924,"status":"M"},{"authorDate":"2020-07-09 04:45:12","commitOrder":3,"curCode":"  @Test void testAggregateExtractProjectRuleWithGroupingSets2() {\n    final String sql = \"select empno, deptno, sum(empno)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(CoreRules.AGGREGATE_PROJECT_MERGE)\n        .build();\n    final AggregateExtractProjectRule rule =\n        new AggregateExtractProjectRule(Aggregate.class, LogicalTableScan.class,\n            RelFactories.LOGICAL_BUILDER);\n    sql(sql).withPre(pre).withRule(rule).check();\n  }\n","date":"2020-07-12 06:58:28","endLine":3951,"groupId":"5188","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregateExtractProjectRuleWithGroupingSets2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/d77aee9e74f65d9e26a1ffa96400062e1eb119.src","preCode":"  @Test void testAggregateExtractProjectRuleWithGroupingSets2() {\n    final String sql = \"select empno, deptno, sum(empno)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(AggregateProjectMergeRule.INSTANCE)\n        .build();\n    final AggregateExtractProjectRule rule =\n        new AggregateExtractProjectRule(Aggregate.class, LogicalTableScan.class,\n            RelFactories.LOGICAL_BUILDER);\n    sql(sql).withPre(pre).withRule(rule).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3940,"status":"M"}],"commitId":"23b26b6287315cc2cd236e705bb651077488fc5c","commitMessage":"@@@In preparation for [CALCITE-3923] and [CALCITE-4079].  deprecate fields and methods that will be removed between 1.24 and 1.25\n\nAlso.  in RelNode.  change some methods from 'to removed before 2.0'\nto 'to be removed before 1.25'. The methods are sDistinct(). \nisKey(ImmutableBitSet).  getQuery().  getRows().  getVariablesStopped(). \ncomputeSelfCost().  isValid(boolean).  getCollationList().  getChildExps().\n","date":"2020-07-12 06:58:28","modifiedFileCount":"137","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-07-09 05:31:40","commitOrder":4,"curCode":"  @Test void testAggregateExtractProjectRuleWithGroupingSets() {\n    final String sql = \"select empno, deptno, sum(sal)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(CoreRules.AGGREGATE_PROJECT_MERGE)\n        .build();\n    sql(sql).withPre(pre).withRule(AggregateExtractProjectRule.SCAN).check();\n  }\n","date":"2020-07-29 02:27:24","endLine":3990,"groupId":"10991","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregateExtractProjectRuleWithGroupingSets","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/40/40570b99f5fa273879b44bd2b31dffdf03345c.src","preCode":"  @Test void testAggregateExtractProjectRuleWithGroupingSets() {\n    final String sql = \"select empno, deptno, sum(sal)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(CoreRules.AGGREGATE_PROJECT_MERGE)\n        .build();\n    final AggregateExtractProjectRule rule =\n        new AggregateExtractProjectRule(Aggregate.class, LogicalTableScan.class,\n            RelFactories.LOGICAL_BUILDER);\n    sql(sql).withPre(pre).withRule(rule).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3982,"status":"M"},{"authorDate":"2020-07-09 05:31:40","commitOrder":4,"curCode":"  @Test void testAggregateExtractProjectRuleWithGroupingSets2() {\n    final String sql = \"select empno, deptno, sum(empno)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(CoreRules.AGGREGATE_PROJECT_MERGE)\n        .build();\n    sql(sql).withPre(pre).withRule(AggregateExtractProjectRule.SCAN).check();\n  }\n","date":"2020-07-29 02:27:24","endLine":4002,"groupId":"10991","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregateExtractProjectRuleWithGroupingSets2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/40/40570b99f5fa273879b44bd2b31dffdf03345c.src","preCode":"  @Test void testAggregateExtractProjectRuleWithGroupingSets2() {\n    final String sql = \"select empno, deptno, sum(empno)\\n\"\n        + \"from emp\\n\"\n        + \"group by grouping sets ((empno, deptno),(deptno),(empno))\";\n    HepProgram pre = new HepProgramBuilder()\n        .addRuleInstance(CoreRules.AGGREGATE_PROJECT_MERGE)\n        .build();\n    final AggregateExtractProjectRule rule =\n        new AggregateExtractProjectRule(Aggregate.class, LogicalTableScan.class,\n            RelFactories.LOGICAL_BUILDER);\n    sql(sql).withPre(pre).withRule(rule).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3994,"status":"M"}],"commitId":"998cd83ebe2fcd7ff3ee565299fed6e199269715","commitMessage":"@@@[CALCITE-3923] Refactor how planner rules are parameterized\n\nCreate operands using a builder interface.  OperandBuilder.  and\ndeprecate methods RelOptRule.operand etc.\n\nThe change is backwards compatible.  in the sense that\nexisting rule constructors are deprecated but still work.\nFrom now on.  to create rules.  call RelOptRule.Config.toRule()\n(which calls the rule's (Config) constructor).\n\nSub-classes of ConverterRule are a little different.  They\ndon't need their own sub-class of Config.  You just need to\ncall Config.withRuleFactory to specify the constructor of the\nsub-class of ConverterRule.\n\nMove rule instances into holder classes such as CoreRules. \nMaterializedViewRules. Deprecate existing rule INSTANCE fields\n(to be removed in 1.25). Deprecate previous rule constructors\n(to be removed in 2.0).\n\nDescribe how to write rules in howto and tutorial.\n\nRemove rule instances marked 'deprecated.  to be removed before\n1.25'.\n\nClose apache/calcite#2024\n","date":"2020-07-29 02:27:24","modifiedFileCount":"191","status":"M","submitter":"Julian Hyde"}]
