[{"authorTime":"2015-11-05 03:52:03","codes":[{"authorDate":"2015-11-05 03:52:03","commitOrder":1,"curCode":"  @Test public void testMaterializationSubstitution() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n      {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}}};\n\n    try {\n      Prepare.THREAD_TRIM.set(true);\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\")\n          .query(q)\n          .withHook(Hook.SUB,\n              new Function<RelNode, Void>() {\n                public Void apply(RelNode input) {\n                  substitutedNames.add(new TableNameVisitor().run(input));\n                  return null;\n                }\n              })\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      Collections.sort(substitutedNames, CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    } finally {\n      Prepare.THREAD_TRIM.set(false);\n    }\n  }\n","date":"2015-11-05 03:52:32","endLine":943,"groupId":"7020","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaterializationSubstitution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/87/b72bc1e59fa66251b2f8847c759450b271d1d1.src","preCode":"  @Test public void testMaterializationSubstitution() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n      {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}}};\n\n    try {\n      Prepare.THREAD_TRIM.set(true);\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\")\n          .query(q)\n          .withHook(Hook.SUB,\n              new Function<RelNode, Void>() {\n                public Void apply(RelNode input) {\n                  substitutedNames.add(new TableNameVisitor().run(input));\n                  return null;\n                }\n              })\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      Collections.sort(substitutedNames, CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    } finally {\n      Prepare.THREAD_TRIM.set(false);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":905,"status":"B"},{"authorDate":"2015-11-05 03:52:03","commitOrder":1,"curCode":"  @Test public void testMaterializationSubstitution2() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n      {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m2\"}}};\n\n    try {\n      Prepare.THREAD_TRIM.set(true);\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\",\n              \"m2\", \"select * from \\\"m1\\\"\")\n          .query(q)\n          .withHook(Hook.SUB,\n              new Function<RelNode, Void>() {\n                public Void apply(RelNode input) {\n                  substitutedNames.add(new TableNameVisitor().run(input));\n                  return null;\n                }\n              })\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      Collections.sort(substitutedNames, CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    } finally {\n      Prepare.THREAD_TRIM.set(false);\n    }\n  }\n","date":"2015-11-05 03:52:32","endLine":991,"groupId":"2013","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaterializationSubstitution2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/87/b72bc1e59fa66251b2f8847c759450b271d1d1.src","preCode":"  @Test public void testMaterializationSubstitution2() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n      {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m2\"}}};\n\n    try {\n      Prepare.THREAD_TRIM.set(true);\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\",\n              \"m2\", \"select * from \\\"m1\\\"\")\n          .query(q)\n          .withHook(Hook.SUB,\n              new Function<RelNode, Void>() {\n                public Void apply(RelNode input) {\n                  substitutedNames.add(new TableNameVisitor().run(input));\n                  return null;\n                }\n              })\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      Collections.sort(substitutedNames, CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    } finally {\n      Prepare.THREAD_TRIM.set(false);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":945,"status":"B"}],"commitId":"c48c341392032a652c40ce129157deb73ab949d7","commitMessage":"@@@[CALCITE-952] Organize applicable materializations in reversed topological order (Maryann Xue)\n","date":"2015-11-05 03:52:32","modifiedFileCount":"2","status":"B","submitter":"maryannxue"},{"authorTime":"2016-05-01 12:16:22","codes":[{"authorDate":"2016-05-01 12:16:22","commitOrder":2,"curCode":"  @Test public void testMaterializationSubstitution() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n      {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}}};\n\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\")\n          .query(q)\n          .withHook(Hook.SUB,\n              new Function<RelNode, Void>() {\n                public Void apply(RelNode input) {\n                  substitutedNames.add(new TableNameVisitor().run(input));\n                  return null;\n                }\n              })\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      Collections.sort(substitutedNames, CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","date":"2016-05-06 13:07:12","endLine":1061,"groupId":"7020","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaterializationSubstitution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ba/9a05eb1ddb1573c540033eca275f6fdbc5e583.src","preCode":"  @Test public void testMaterializationSubstitution() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n      {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}}};\n\n    try {\n      Prepare.THREAD_TRIM.set(true);\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\")\n          .query(q)\n          .withHook(Hook.SUB,\n              new Function<RelNode, Void>() {\n                public Void apply(RelNode input) {\n                  substitutedNames.add(new TableNameVisitor().run(input));\n                  return null;\n                }\n              })\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      Collections.sort(substitutedNames, CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    } finally {\n      Prepare.THREAD_TRIM.set(false);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1026,"status":"M"},{"authorDate":"2016-05-01 12:16:22","commitOrder":2,"curCode":"  @Test public void testMaterializationSubstitution2() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n      {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m2\"}}};\n\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\",\n              \"m2\", \"select * from \\\"m1\\\"\")\n          .query(q)\n          .withHook(Hook.SUB,\n              new Function<RelNode, Void>() {\n                public Void apply(RelNode input) {\n                  substitutedNames.add(new TableNameVisitor().run(input));\n                  return null;\n                }\n              })\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      Collections.sort(substitutedNames, CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","date":"2016-05-06 13:07:12","endLine":1106,"groupId":"2013","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaterializationSubstitution2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ba/9a05eb1ddb1573c540033eca275f6fdbc5e583.src","preCode":"  @Test public void testMaterializationSubstitution2() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n      {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m2\"}}};\n\n    try {\n      Prepare.THREAD_TRIM.set(true);\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\",\n              \"m2\", \"select * from \\\"m1\\\"\")\n          .query(q)\n          .withHook(Hook.SUB,\n              new Function<RelNode, Void>() {\n                public Void apply(RelNode input) {\n                  substitutedNames.add(new TableNameVisitor().run(input));\n                  return null;\n                }\n              })\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      Collections.sort(substitutedNames, CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    } finally {\n      Prepare.THREAD_TRIM.set(false);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1063,"status":"M"}],"commitId":"bf098dd6737bdc78169961e076ba53bb30ba76d7","commitMessage":"@@@[CALCITE-1216] Rule to convert Filter-on-Scan to materialized view (Amogh Margoor)\n\nClose apache/calcite#224\n\nThis will allow join queries with filter to be optimized by Materialized\nViews. It waits for predicate tot be pushed across join onto table scan. \nand then check if it can possible do any substitution for it.\n","date":"2016-05-06 13:07:12","modifiedFileCount":"6","status":"M","submitter":"Amogh Margoor"},{"authorTime":"2017-04-21 00:39:18","codes":[{"authorDate":"2017-04-21 00:39:18","commitOrder":3,"curCode":"  @Test public void testMaterializationSubstitution() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n      {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}}};\n\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\")\n          .query(q)\n          .withHook(Hook.SUB,\n              new Function<RelNode, Void>() {\n                public Void apply(RelNode input) {\n                  substitutedNames.add(new TableNameVisitor().run(input));\n                  return null;\n                }\n              })\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      Collections.sort(substitutedNames, CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","date":"2017-04-27 03:02:10","endLine":1635,"groupId":"7020","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaterializationSubstitution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/e76262b205b3d8cb4d11705fc860645005924e.src","preCode":"  @Test public void testMaterializationSubstitution() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n      {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}}};\n\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\")\n          .query(q)\n          .withHook(Hook.SUB,\n              new Function<RelNode, Void>() {\n                public Void apply(RelNode input) {\n                  substitutedNames.add(new TableNameVisitor().run(input));\n                  return null;\n                }\n              })\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      Collections.sort(substitutedNames, CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1600,"status":"M"},{"authorDate":"2017-04-21 00:39:18","commitOrder":3,"curCode":"  @Test public void testMaterializationSubstitution2() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n      {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m2\"}}};\n\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\",\n              \"m2\", \"select * from \\\"m1\\\"\")\n          .query(q)\n          .withHook(Hook.SUB,\n              new Function<RelNode, Void>() {\n                public Void apply(RelNode input) {\n                  substitutedNames.add(new TableNameVisitor().run(input));\n                  return null;\n                }\n              })\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      Collections.sort(substitutedNames, CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","date":"2017-04-27 03:02:10","endLine":1680,"groupId":"4391","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaterializationSubstitution2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/e76262b205b3d8cb4d11705fc860645005924e.src","preCode":"  @Test public void testMaterializationSubstitution2() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n      {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"emps\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m0\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m1\"}, {\"hr\", \"m2\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"emps\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m0\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m1\"}},\n      {{\"hr\", \"m2\"}, {\"hr\", \"m2\"}}};\n\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(JdbcTest.HR_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\",\n              \"m2\", \"select * from \\\"m1\\\"\")\n          .query(q)\n          .withHook(Hook.SUB,\n              new Function<RelNode, Void>() {\n                public Void apply(RelNode input) {\n                  substitutedNames.add(new TableNameVisitor().run(input));\n                  return null;\n                }\n              })\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      Collections.sort(substitutedNames, CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1637,"status":"M"}],"commitId":"1f81e1353605fc2d16de9b4d56821736b0e82464","commitMessage":"@@@[CALCITE-1731] Materialized view rewriting for join and aggregate operators\n\n* Support for rewriting when view contains cardinality-preserving joins that are not present in the query\n\nClose apache/calcite#414\n","date":"2017-04-27 03:02:10","modifiedFileCount":"15","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2018-07-06 04:21:59","codes":[{"authorDate":"2018-07-06 04:21:59","commitOrder":4,"curCode":"  @Test public void testMaterializationSubstitution() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n        {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}}};\n\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\")\n          .query(q)\n          .withHook(Hook.SUB, (Consumer<RelNode>) r ->\n              substitutedNames.add(new TableNameVisitor().run(r)))\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      substitutedNames.sort(CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","date":"2018-07-09 01:16:26","endLine":2227,"groupId":"7020","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaterializationSubstitution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b3/2ec74c260ffcfe15635464199ffd3b988ad894.src","preCode":"  @Test public void testMaterializationSubstitution() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n        {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}}};\n\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\")\n          .query(q)\n          .withHook(Hook.SUB,\n              new Function<RelNode, Void>() {\n                public Void apply(RelNode input) {\n                  substitutedNames.add(new TableNameVisitor().run(input));\n                  return null;\n                }\n              })\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      Collections.sort(substitutedNames, CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2197,"status":"M"},{"authorDate":"2018-07-06 04:21:59","commitOrder":4,"curCode":"  @Test public void testMaterializationSubstitution2() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n        {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m2\"}}};\n\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\",\n              \"m2\", \"select * from \\\"m1\\\"\")\n          .query(q)\n          .withHook(Hook.SUB, (Consumer<RelNode>) r ->\n              substitutedNames.add(new TableNameVisitor().run(r)))\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      substitutedNames.sort(CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","date":"2018-07-09 01:16:26","endLine":2267,"groupId":"4391","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaterializationSubstitution2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b3/2ec74c260ffcfe15635464199ffd3b988ad894.src","preCode":"  @Test public void testMaterializationSubstitution2() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n        {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m2\"}}};\n\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\",\n              \"m2\", \"select * from \\\"m1\\\"\")\n          .query(q)\n          .withHook(Hook.SUB,\n              new Function<RelNode, Void>() {\n                public Void apply(RelNode input) {\n                  substitutedNames.add(new TableNameVisitor().run(input));\n                  return null;\n                }\n              })\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      Collections.sort(substitutedNames, CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2229,"status":"M"}],"commitId":"d59b639d27da704f00eff616324a2c04aa06f84c","commitMessage":"@@@[CALCITE-2259] Allow Java 8 syntax\n\nIn summary: use lambdas where possible.  switch from Guava function\ntypes to Java function types or lambdas.  but continue to use Guava\ncomponents (such as immutable collections and cache) that have no\nequivalent in the Java runtime.\n\n1. Change single-abstract-method (SAM) classes to lambdas. Preserve\nformatting wherever possible.\n\n2. Change AssertQuery.returns argument type from Guava Function to Java\nConsumer. If you are using a lambda and see 'returns is deprecated'. \nremove the 'return null;' line.  and the lambda will become a Consumer\n(whose return is void).\n\n3. Change RelOptRuleOperand and RelOptRule.operand methods to take Java\nPredicate rather than Guava Predicate.\n\n4. Change the argument of Hook.add and .addThread from Guava Function to\nJava Consumer.\n\n5. Change 'list.toArray(new T[list.size()])' to 'list.toArray(new T[0])'\nbecause the latter is simpler.  and just as efficient on recent Java\nversions.\n\n6. Resource references; change \"try (Closeable ignore = foo())\" to \"try\n  (foo())\".  especially uses of TryThreadLocal and Hook.Closeable.\n\n7. Convert linq4j Function1 to java Function.  Function2 to java BiFunction\n\n8. Fix occurrences of Intellij's \"Explicit type can be replaced with\n<>\" inspection. (Occurs for \"List<String> list = new\nArrayList<String>();\".)\n\n9. Change Guava Preconditions.checkNotNull to Java\nObjects.requireNonNull. (Kevin Risden)\n\n10. Break out anonymous classes and fix dependency problems.\n\n11. Use CacheLoader.of(Function) where possible.\n\n12. Replace sub-classes of ThreadLocal with ThreadLocal.withInitial().\n\n13. Replace Guava collection methods with calls to Java collection types. \nfor example replace Lists.newArrayList() with new ArrayList<>(). \nMaps.newHashSet() with new HashSet<>().  similarly Sets.\n\n14. Replace Guava Joiner with String.join.\n\n15. Replace Collections.emptyList() with ImmutableList.of() in a few\nplaces.\n\nFor backwards compatibility.  we preserved (and deprecated) the old\nmethods that used Guava types. In a few cases where new and old have\nthe same signature (after erasure).  we could not add a method with the\nsame name.  so we gave the new method a \"J\" suffix. Examples include\nHook.property and .propertyJ.  RelOptRule.operand and .operandJ.\n\nIn test code.  we have not slavishly ensured backwards compatibility.\n\nWe do not intend to remove uses of Guava's immutable collections.\n\nWe have ignored Intellij's \"Pseudo functional style code\" inspection\nmost of the time.  but in a few cases have converted Lists.transform(). \nIterables.transform().  and Iterables.filter() into Java streams. Use\nthe Util.toImmutableList() collector if the result is to be an\nimmutable list. Use Util.transform() rather than Lists.transform()\nif you have a Java function rather than a Guava function or lambda.\n\nNot covered in this change (might be done in future):\n* Convert Collections.sort(list) to list.sort.\n* Review uses of 'for (Map.Entry<K.  V> e : map.entrySet())' and see\n  whether it makes sense to convert to 'map.forEach((k.  v) ->\n  ...)'. Intellij inspection is called 'Replace with Map.forEach'.\n\nBreaking changes:\n* LatticeStatisticProvider.Factory.  result of RexUtil.notFun().  and\n  arguments to Mappings.target() are Function (was Guava.  now Java)\n* Argument to SqlSpecialOperator.TokenSequence.parser() is Predicate\n  (was Guava.  now Java)\n* AggregateNode.AccumulatorFactory extends Supplier (was Guava.  now Java)\n","date":"2018-07-09 01:16:26","modifiedFileCount":"514","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-09-16 18:12:25","codes":[{"authorDate":"2018-09-16 18:12:25","commitOrder":5,"curCode":"  @Test public void testMaterializationSubstitution() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n        {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}}};\n\n    try (TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\")\n          .query(q)\n          .withHook(Hook.SUB, (Consumer<RelNode>) r ->\n              substitutedNames.add(new TableNameVisitor().run(r)))\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      substitutedNames.sort(CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","date":"2018-09-16 20:33:59","endLine":2227,"groupId":"7020","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaterializationSubstitution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1c/95b8ff81b87ddd432244fa2b82eb532603dac5.src","preCode":"  @Test public void testMaterializationSubstitution() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n        {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}}};\n\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\")\n          .query(q)\n          .withHook(Hook.SUB, (Consumer<RelNode>) r ->\n              substitutedNames.add(new TableNameVisitor().run(r)))\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      substitutedNames.sort(CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2197,"status":"M"},{"authorDate":"2018-09-16 18:12:25","commitOrder":5,"curCode":"  @Test public void testMaterializationSubstitution2() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n        {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m2\"}}};\n\n    try (TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\",\n              \"m2\", \"select * from \\\"m1\\\"\")\n          .query(q)\n          .withHook(Hook.SUB, (Consumer<RelNode>) r ->\n              substitutedNames.add(new TableNameVisitor().run(r)))\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      substitutedNames.sort(CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","date":"2018-09-16 20:33:59","endLine":2267,"groupId":"4391","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaterializationSubstitution2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1c/95b8ff81b87ddd432244fa2b82eb532603dac5.src","preCode":"  @Test public void testMaterializationSubstitution2() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n        {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m2\"}}};\n\n    try (final TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\",\n              \"m2\", \"select * from \\\"m1\\\"\")\n          .query(q)\n          .withHook(Hook.SUB, (Consumer<RelNode>) r ->\n              substitutedNames.add(new TableNameVisitor().run(r)))\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      substitutedNames.sort(CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2229,"status":"M"}],"commitId":"4b4d8037c5073e4eb5702b12bc4ecade31476616","commitMessage":"@@@[CALCITE-2559] Update Checkstyle to 7.8.2\n\nIt catches violations better and it caches validation results.  so repeated validations are faster\n","date":"2018-09-16 20:33:59","modifiedFileCount":"47","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testMaterializationSubstitution() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n        {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}}};\n\n    try (TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\")\n          .query(q)\n          .withHook(Hook.SUB, (Consumer<RelNode>) r ->\n              substitutedNames.add(new TableNameVisitor().run(r)))\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      substitutedNames.sort(CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":2824,"groupId":"101413","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaterializationSubstitution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8b/332217db8c2c012d2d9e07f331a0deba461adb.src","preCode":"  @Test public void testMaterializationSubstitution() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n        {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}}};\n\n    try (TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\")\n          .query(q)\n          .withHook(Hook.SUB, (Consumer<RelNode>) r ->\n              substitutedNames.add(new TableNameVisitor().run(r)))\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      substitutedNames.sort(CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2794,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testMaterializationSubstitution2() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n        {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m2\"}}};\n\n    try (TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\",\n              \"m2\", \"select * from \\\"m1\\\"\")\n          .query(q)\n          .withHook(Hook.SUB, (Consumer<RelNode>) r ->\n              substitutedNames.add(new TableNameVisitor().run(r)))\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      substitutedNames.sort(CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":2864,"groupId":"101413","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaterializationSubstitution2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8b/332217db8c2c012d2d9e07f331a0deba461adb.src","preCode":"  @Test public void testMaterializationSubstitution2() {\n    String q = \"select *\\n\"\n        + \"from (select * from \\\"emps\\\" where \\\"empid\\\" < 300)\\n\"\n        + \"join (select * from \\\"emps\\\" where \\\"empid\\\" < 200) using (\\\"empid\\\")\";\n\n    final String[][][] expectedNames = {\n        {{\"hr\", \"emps\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"emps\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m0\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m1\"}, {\"hr\", \"m2\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"emps\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m0\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m1\"}},\n        {{\"hr\", \"m2\"}, {\"hr\", \"m2\"}}};\n\n    try (TryThreadLocal.Memo ignored = Prepare.THREAD_TRIM.push(true)) {\n      MaterializationService.setThreadLocal();\n      final List<List<List<String>>> substitutedNames = new ArrayList<>();\n      CalciteAssert.that()\n          .withMaterializations(HR_FKUK_MODEL,\n              \"m0\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 300\",\n              \"m1\", \"select * from \\\"emps\\\" where \\\"empid\\\" < 600\",\n              \"m2\", \"select * from \\\"m1\\\"\")\n          .query(q)\n          .withHook(Hook.SUB, (Consumer<RelNode>) r ->\n              substitutedNames.add(new TableNameVisitor().run(r)))\n          .enableMaterializations(true)\n          .sameResultWithMaterializationsDisabled();\n      substitutedNames.sort(CASE_INSENSITIVE_LIST_LIST_COMPARATOR);\n      assertThat(substitutedNames, is(list3(expectedNames)));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2826,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
