[{"authorTime":"2020-06-19 02:09:17","codes":[{"authorDate":"2020-06-19 02:09:17","commitOrder":1,"curCode":"  private static <TSource> Enumerator<TSource> where(\n      final Enumerator<TSource> enumerator,\n      final Predicate1<TSource> predicate) {\n    return new Enumerator<TSource>() {\n      public TSource current() {\n        return enumerator.current();\n      }\n\n      public boolean moveNext() {\n        while (enumerator.moveNext()) {\n          if (predicate.apply(enumerator.current())) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      public void reset() {\n        enumerator.reset();\n      }\n\n      public void close() {\n        enumerator.close();\n      }\n    };\n  }\n","date":"2020-06-29 16:36:00","endLine":3579,"groupId":"10784","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"where","params":"(finalEnumerator<TSource>enumerator@finalPredicate1<TSource>predicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/1be29b1674ec11926bcb0f2157ddf4571aab83.src","preCode":"  private static <TSource> Enumerator<TSource> where(\n      final Enumerator<TSource> enumerator,\n      final Predicate1<TSource> predicate) {\n    return new Enumerator<TSource>() {\n      public TSource current() {\n        return enumerator.current();\n      }\n\n      public boolean moveNext() {\n        while (enumerator.moveNext()) {\n          if (predicate.apply(enumerator.current())) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      public void reset() {\n        enumerator.reset();\n      }\n\n      public void close() {\n        enumerator.close();\n      }\n    };\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3554,"status":"B"},{"authorDate":"2020-06-19 02:09:17","commitOrder":1,"curCode":"  public static <TSource> Enumerable<TSource> where(\n      final Enumerable<TSource> source,\n      final Predicate2<TSource, Integer> predicate) {\n    return new AbstractEnumerable<TSource>() {\n      public Enumerator<TSource> enumerator() {\n        return new Enumerator<TSource>() {\n          final Enumerator<TSource> enumerator = source.enumerator();\n          int n = -1;\n\n          public TSource current() {\n            return enumerator.current();\n          }\n\n          public boolean moveNext() {\n            while (enumerator.moveNext()) {\n              ++n;\n              if (predicate.apply(enumerator.current(), n)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          public void reset() {\n            enumerator.reset();\n            n = -1;\n          }\n\n          public void close() {\n            enumerator.close();\n          }\n        };\n      }\n    };\n  }\n","date":"2020-06-29 16:36:00","endLine":3620,"groupId":"10785","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"where","params":"(finalEnumerable<TSource>source@finalPredicate2<TSource@Integer>predicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1d/1be29b1674ec11926bcb0f2157ddf4571aab83.src","preCode":"  public static <TSource> Enumerable<TSource> where(\n      final Enumerable<TSource> source,\n      final Predicate2<TSource, Integer> predicate) {\n    return new AbstractEnumerable<TSource>() {\n      public Enumerator<TSource> enumerator() {\n        return new Enumerator<TSource>() {\n          final Enumerator<TSource> enumerator = source.enumerator();\n          int n = -1;\n\n          public TSource current() {\n            return enumerator.current();\n          }\n\n          public boolean moveNext() {\n            while (enumerator.moveNext()) {\n              ++n;\n              if (predicate.apply(enumerator.current(), n)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          public void reset() {\n            enumerator.reset();\n            n = -1;\n          }\n\n          public void close() {\n            enumerator.close();\n          }\n        };\n      }\n    };\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3586,"status":"B"}],"commitId":"bf9ff001db743bcba35943daf7fec5fe8b8b207e","commitMessage":"@@@[CALCITE-4008] Implement Code generation for EnumerableSortedAggregate (Rui Wang).\n","date":"2020-06-29 16:36:00","modifiedFileCount":"6","status":"B","submitter":"amaliujia"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":2,"curCode":"  private static <TSource> Enumerator<TSource> where(\n      final Enumerator<TSource> enumerator,\n      final Predicate1<TSource> predicate) {\n    return new Enumerator<TSource>() {\n      @Override public TSource current() {\n        return enumerator.current();\n      }\n\n      @Override public boolean moveNext() {\n        while (enumerator.moveNext()) {\n          if (predicate.apply(enumerator.current())) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      @Override public void reset() {\n        enumerator.reset();\n      }\n\n      @Override public void close() {\n        enumerator.close();\n      }\n    };\n  }\n","date":"2020-10-07 05:42:47","endLine":3682,"groupId":"11133","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"where","params":"(finalEnumerator<TSource>enumerator@finalPredicate1<TSource>predicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/4d484dbd63f86d5449292ce78f1f05dc972925.src","preCode":"  private static <TSource> Enumerator<TSource> where(\n      final Enumerator<TSource> enumerator,\n      final Predicate1<TSource> predicate) {\n    return new Enumerator<TSource>() {\n      public TSource current() {\n        return enumerator.current();\n      }\n\n      public boolean moveNext() {\n        while (enumerator.moveNext()) {\n          if (predicate.apply(enumerator.current())) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      public void reset() {\n        enumerator.reset();\n      }\n\n      public void close() {\n        enumerator.close();\n      }\n    };\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3657,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":2,"curCode":"  public static <TSource> Enumerable<TSource> where(\n      final Enumerable<TSource> source,\n      final Predicate2<TSource, Integer> predicate) {\n    return new AbstractEnumerable<TSource>() {\n      @Override public Enumerator<TSource> enumerator() {\n        return new Enumerator<TSource>() {\n          final Enumerator<TSource> enumerator = source.enumerator();\n          int n = -1;\n\n          @Override public TSource current() {\n            return enumerator.current();\n          }\n\n          @Override public boolean moveNext() {\n            while (enumerator.moveNext()) {\n              ++n;\n              if (predicate.apply(enumerator.current(), n)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override public void reset() {\n            enumerator.reset();\n            n = -1;\n          }\n\n          @Override public void close() {\n            enumerator.close();\n          }\n        };\n      }\n    };\n  }\n","date":"2020-10-07 05:42:47","endLine":3723,"groupId":"11133","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"where","params":"(finalEnumerable<TSource>source@finalPredicate2<TSource@Integer>predicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/4d484dbd63f86d5449292ce78f1f05dc972925.src","preCode":"  public static <TSource> Enumerable<TSource> where(\n      final Enumerable<TSource> source,\n      final Predicate2<TSource, Integer> predicate) {\n    return new AbstractEnumerable<TSource>() {\n      public Enumerator<TSource> enumerator() {\n        return new Enumerator<TSource>() {\n          final Enumerator<TSource> enumerator = source.enumerator();\n          int n = -1;\n\n          public TSource current() {\n            return enumerator.current();\n          }\n\n          public boolean moveNext() {\n            while (enumerator.moveNext()) {\n              ++n;\n              if (predicate.apply(enumerator.current(), n)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          public void reset() {\n            enumerator.reset();\n            n = -1;\n          }\n\n          public void close() {\n            enumerator.close();\n          }\n        };\n      }\n    };\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3689,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
