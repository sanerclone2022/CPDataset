[{"authorTime":"2018-11-05 23:57:50","codes":[{"authorDate":"2018-09-16 18:12:25","commitOrder":14,"curCode":"  static void assertQuery(\n      Connection connection,\n      String sql,\n      int limit,\n      boolean materializationsEnabled,\n      List<Pair<Hook, Consumer>> hooks,\n      Consumer<ResultSet> resultChecker,\n      Consumer<Integer> updateChecker,\n      Consumer<Throwable> exceptionChecker) throws Exception {\n    final String message =\n        \"With materializationsEnabled=\" + materializationsEnabled\n            + \", limit=\" + limit;\n    try (Closer closer = new Closer()) {\n      if (connection.isWrapperFor(CalciteConnection.class)) {\n        final CalciteConnection calciteConnection =\n            connection.unwrap(CalciteConnection.class);\n        final Properties properties = calciteConnection.getProperties();\n        properties.setProperty(\n            CalciteConnectionProperty.MATERIALIZATIONS_ENABLED.camelName(),\n            Boolean.toString(materializationsEnabled));\n        properties.setProperty(\n            CalciteConnectionProperty.CREATE_MATERIALIZATIONS.camelName(),\n            Boolean.toString(materializationsEnabled));\n        if (!properties\n            .containsKey(CalciteConnectionProperty.TIME_ZONE.camelName())) {\n          \r\n          properties.setProperty(\n              CalciteConnectionProperty.TIME_ZONE.camelName(),\n              DateTimeUtils.UTC_ZONE.getID());\n        }\n      }\n      for (Pair<Hook, Consumer> hook : hooks) {\n        \r\n        closer.add(hook.left.addThread(hook.right));\n      }\n      Statement statement = connection.createStatement();\n      statement.setMaxRows(limit <= 0 ? limit : Math.max(limit, 1));\n      ResultSet resultSet = null;\n      Integer updateCount = null;\n      try {\n        if (updateChecker == null) {\n          resultSet = statement.executeQuery(sql);\n        } else {\n          updateCount = statement.executeUpdate(sql);\n        }\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(null);\n          return;\n        }\n      } catch (Exception | Error e) {\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(e);\n          return;\n        }\n        throw e;\n      }\n      if (resultChecker != null) {\n        resultChecker.accept(resultSet);\n      }\n      if (updateChecker != null) {\n        updateChecker.accept(updateCount);\n      }\n      if (resultSet != null) {\n        resultSet.close();\n      }\n      statement.close();\n      connection.close();\n    } catch (Error | RuntimeException e) {\n      \r\n      \r\n      \r\n      throw e;\n    } catch (Throwable e) {\n      throw new RuntimeException(message, e);\n    }\n  }\n","date":"2018-09-16 20:33:59","endLine":575,"groupId":"12797","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertQuery","params":"(Connectionconnection@Stringsql@intlimit@booleanmaterializationsEnabled@List<Pair<Hook@Consumer>>hooks@Consumer<ResultSet>resultChecker@Consumer<Integer>updateChecker@Consumer<Throwable>exceptionChecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/27/e0a36fed1d73630fb9064efa6c9fb730400b1e.src","preCode":"  static void assertQuery(\n      Connection connection,\n      String sql,\n      int limit,\n      boolean materializationsEnabled,\n      List<Pair<Hook, Consumer>> hooks,\n      Consumer<ResultSet> resultChecker,\n      Consumer<Integer> updateChecker,\n      Consumer<Throwable> exceptionChecker) throws Exception {\n    final String message =\n        \"With materializationsEnabled=\" + materializationsEnabled\n            + \", limit=\" + limit;\n    try (Closer closer = new Closer()) {\n      if (connection.isWrapperFor(CalciteConnection.class)) {\n        final CalciteConnection calciteConnection =\n            connection.unwrap(CalciteConnection.class);\n        final Properties properties = calciteConnection.getProperties();\n        properties.setProperty(\n            CalciteConnectionProperty.MATERIALIZATIONS_ENABLED.camelName(),\n            Boolean.toString(materializationsEnabled));\n        properties.setProperty(\n            CalciteConnectionProperty.CREATE_MATERIALIZATIONS.camelName(),\n            Boolean.toString(materializationsEnabled));\n        if (!properties\n            .containsKey(CalciteConnectionProperty.TIME_ZONE.camelName())) {\n          \r\n          properties.setProperty(\n              CalciteConnectionProperty.TIME_ZONE.camelName(),\n              DateTimeUtils.UTC_ZONE.getID());\n        }\n      }\n      for (Pair<Hook, Consumer> hook : hooks) {\n        \r\n        closer.add(hook.left.addThread(hook.right));\n      }\n      Statement statement = connection.createStatement();\n      statement.setMaxRows(limit <= 0 ? limit : Math.max(limit, 1));\n      ResultSet resultSet = null;\n      Integer updateCount = null;\n      try {\n        if (updateChecker == null) {\n          resultSet = statement.executeQuery(sql);\n        } else {\n          updateCount = statement.executeUpdate(sql);\n        }\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(null);\n          return;\n        }\n      } catch (Exception | Error e) {\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(e);\n          return;\n        }\n        throw e;\n      }\n      if (resultChecker != null) {\n        resultChecker.accept(resultSet);\n      }\n      if (updateChecker != null) {\n        updateChecker.accept(updateCount);\n      }\n      if (resultSet != null) {\n        resultSet.close();\n      }\n      statement.close();\n      connection.close();\n    } catch (Error | RuntimeException e) {\n      \r\n      \r\n      \r\n      throw e;\n    } catch (Throwable e) {\n      throw new RuntimeException(message, e);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/CalciteAssert.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"NB"},{"authorDate":"2018-11-05 23:57:50","commitOrder":14,"curCode":"  private static void assertPrepare(\n      Connection connection,\n      String sql,\n      int limit,\n      boolean materializationsEnabled,\n      List<Pair<Hook, Consumer>> hooks,\n      Consumer<ResultSet> resultChecker,\n      Consumer<Integer> updateChecker,\n      Consumer<Throwable> exceptionChecker,\n      PreparedStatementConsumer consumer) {\n    final String message = \"With materializationsEnabled=\"\n        + materializationsEnabled + \", limit=\" + limit;\n    try (Closer closer = new Closer()) {\n      if (connection.isWrapperFor(CalciteConnection.class)) {\n        final CalciteConnection calciteConnection =\n            connection.unwrap(CalciteConnection.class);\n        final Properties properties = calciteConnection.getProperties();\n        properties.setProperty(\n            CalciteConnectionProperty.MATERIALIZATIONS_ENABLED.camelName(),\n            Boolean.toString(materializationsEnabled));\n        properties.setProperty(\n            CalciteConnectionProperty.CREATE_MATERIALIZATIONS.camelName(),\n            Boolean.toString(materializationsEnabled));\n        if (!properties\n            .containsKey(CalciteConnectionProperty.TIME_ZONE.camelName())) {\n          \r\n          properties.setProperty(\n              CalciteConnectionProperty.TIME_ZONE.camelName(),\n              DateTimeUtils.UTC_ZONE.getID());\n        }\n      }\n      for (Pair<Hook, Consumer> hook : hooks) {\n        \r\n        closer.add(hook.left.addThread(hook.right));\n      }\n      PreparedStatement statement = connection.prepareStatement(sql);\n      statement.setMaxRows(limit <= 0 ? limit : Math.max(limit, 1));\n      ResultSet resultSet = null;\n      Integer updateCount = null;\n      try {\n        consumer.accept(statement);\n        if (updateChecker == null) {\n          resultSet = statement.executeQuery();\n        } else {\n          updateCount = statement.executeUpdate(sql);\n        }\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(null);\n          return;\n        }\n      } catch (Exception | Error e) {\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(e);\n          return;\n        }\n        throw e;\n      }\n      if (resultChecker != null) {\n        resultChecker.accept(resultSet);\n      }\n      if (updateChecker != null) {\n        updateChecker.accept(updateCount);\n      }\n      if (resultSet != null) {\n        resultSet.close();\n      }\n      statement.close();\n      connection.close();\n    } catch (Error | RuntimeException e) {\n      \r\n      \r\n      \r\n      throw e;\n    } catch (Throwable e) {\n      throw new RuntimeException(message, e);\n    }\n  }\n","date":"2018-11-19 08:15:42","endLine":653,"groupId":"12797","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertPrepare","params":"(Connectionconnection@Stringsql@intlimit@booleanmaterializationsEnabled@List<Pair<Hook@Consumer>>hooks@Consumer<ResultSet>resultChecker@Consumer<Integer>updateChecker@Consumer<Throwable>exceptionChecker@PreparedStatementConsumerconsumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/da/7518bfd0801d74ff6df5b0f3337f1b23fa867d.src","preCode":"  private static void assertPrepare(\n      Connection connection,\n      String sql,\n      int limit,\n      boolean materializationsEnabled,\n      List<Pair<Hook, Consumer>> hooks,\n      Consumer<ResultSet> resultChecker,\n      Consumer<Integer> updateChecker,\n      Consumer<Throwable> exceptionChecker,\n      PreparedStatementConsumer consumer) {\n    final String message = \"With materializationsEnabled=\"\n        + materializationsEnabled + \", limit=\" + limit;\n    try (Closer closer = new Closer()) {\n      if (connection.isWrapperFor(CalciteConnection.class)) {\n        final CalciteConnection calciteConnection =\n            connection.unwrap(CalciteConnection.class);\n        final Properties properties = calciteConnection.getProperties();\n        properties.setProperty(\n            CalciteConnectionProperty.MATERIALIZATIONS_ENABLED.camelName(),\n            Boolean.toString(materializationsEnabled));\n        properties.setProperty(\n            CalciteConnectionProperty.CREATE_MATERIALIZATIONS.camelName(),\n            Boolean.toString(materializationsEnabled));\n        if (!properties\n            .containsKey(CalciteConnectionProperty.TIME_ZONE.camelName())) {\n          \r\n          properties.setProperty(\n              CalciteConnectionProperty.TIME_ZONE.camelName(),\n              DateTimeUtils.UTC_ZONE.getID());\n        }\n      }\n      for (Pair<Hook, Consumer> hook : hooks) {\n        \r\n        closer.add(hook.left.addThread(hook.right));\n      }\n      PreparedStatement statement = connection.prepareStatement(sql);\n      statement.setMaxRows(limit <= 0 ? limit : Math.max(limit, 1));\n      ResultSet resultSet = null;\n      Integer updateCount = null;\n      try {\n        consumer.accept(statement);\n        if (updateChecker == null) {\n          resultSet = statement.executeQuery();\n        } else {\n          updateCount = statement.executeUpdate(sql);\n        }\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(null);\n          return;\n        }\n      } catch (Exception | Error e) {\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(e);\n          return;\n        }\n        throw e;\n      }\n      if (resultChecker != null) {\n        resultChecker.accept(resultSet);\n      }\n      if (updateChecker != null) {\n        updateChecker.accept(updateCount);\n      }\n      if (resultSet != null) {\n        resultSet.close();\n      }\n      statement.close();\n      connection.close();\n    } catch (Error | RuntimeException e) {\n      \r\n      \r\n      \r\n      throw e;\n    } catch (Throwable e) {\n      throw new RuntimeException(message, e);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/CalciteAssert.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":577,"status":"B"}],"commitId":"53e15af6c5e8e782b2edcd7f5bf4f5f32225d110","commitMessage":"@@@[CALCITE-563] In JDBC adapter.  push bindable parameters down to the underlying JDBC data source (Vladimir Sitnikov.  Piotr Bojko)\n\nFix up.  moving JdbcPreparedStatementUtils methods into\nResultSetEnumerable.  and fixing some comments and typos. (Julian Hyde)\n\nClose apache/calcite#907\nClose apache/calcite#902\n","date":"2018-11-19 08:15:42","modifiedFileCount":"16","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2019-02-03 18:32:12","codes":[{"authorDate":"2019-02-03 18:32:12","commitOrder":15,"curCode":"  static void assertQuery(\n      Connection connection,\n      String sql,\n      int limit,\n      boolean materializationsEnabled,\n      List<Pair<Hook, Consumer>> hooks,\n      Consumer<ResultSet> resultChecker,\n      Consumer<Integer> updateChecker,\n      Consumer<Throwable> exceptionChecker) {\n    final Supplier<String> message = () ->\n        \"With materializationsEnabled=\" + materializationsEnabled\n            + \", limit=\" + limit + \", sql=\" + sql;\n    try (Closer closer = new Closer()) {\n      if (connection.isWrapperFor(CalciteConnection.class)) {\n        final CalciteConnection calciteConnection =\n            connection.unwrap(CalciteConnection.class);\n        final Properties properties = calciteConnection.getProperties();\n        properties.setProperty(\n            CalciteConnectionProperty.MATERIALIZATIONS_ENABLED.camelName(),\n            Boolean.toString(materializationsEnabled));\n        properties.setProperty(\n            CalciteConnectionProperty.CREATE_MATERIALIZATIONS.camelName(),\n            Boolean.toString(materializationsEnabled));\n        if (!properties\n            .containsKey(CalciteConnectionProperty.TIME_ZONE.camelName())) {\n          \r\n          properties.setProperty(\n              CalciteConnectionProperty.TIME_ZONE.camelName(),\n              DateTimeUtils.UTC_ZONE.getID());\n        }\n      }\n      for (Pair<Hook, Consumer> hook : hooks) {\n        \r\n        closer.add(hook.left.addThread(hook.right));\n      }\n      Statement statement = connection.createStatement();\n      statement.setMaxRows(limit <= 0 ? limit : Math.max(limit, 1));\n      ResultSet resultSet = null;\n      Integer updateCount = null;\n      try {\n        if (updateChecker == null) {\n          resultSet = statement.executeQuery(sql);\n        } else {\n          updateCount = statement.executeUpdate(sql);\n        }\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(null);\n          return;\n        }\n      } catch (Exception | Error e) {\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(e);\n          return;\n        }\n        throw e;\n      }\n      if (resultChecker != null) {\n        resultChecker.accept(resultSet);\n      }\n      if (updateChecker != null) {\n        updateChecker.accept(updateCount);\n      }\n      if (resultSet != null) {\n        resultSet.close();\n      }\n      statement.close();\n      connection.close();\n    } catch (Error | RuntimeException e) {\n      \r\n      \r\n      e.addSuppressed(new RuntimeException(message.get()));\n      throw e;\n    } catch (Throwable e) {\n      throw new RuntimeException(message.get(), e);\n    }\n  }\n","date":"2019-02-04 16:13:27","endLine":576,"groupId":"12797","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertQuery","params":"(Connectionconnection@Stringsql@intlimit@booleanmaterializationsEnabled@List<Pair<Hook@Consumer>>hooks@Consumer<ResultSet>resultChecker@Consumer<Integer>updateChecker@Consumer<Throwable>exceptionChecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7f/cf56cd4e1378b80d596e6a6ae85093b1bf7a20.src","preCode":"  static void assertQuery(\n      Connection connection,\n      String sql,\n      int limit,\n      boolean materializationsEnabled,\n      List<Pair<Hook, Consumer>> hooks,\n      Consumer<ResultSet> resultChecker,\n      Consumer<Integer> updateChecker,\n      Consumer<Throwable> exceptionChecker) throws Exception {\n    final String message =\n        \"With materializationsEnabled=\" + materializationsEnabled\n            + \", limit=\" + limit;\n    try (Closer closer = new Closer()) {\n      if (connection.isWrapperFor(CalciteConnection.class)) {\n        final CalciteConnection calciteConnection =\n            connection.unwrap(CalciteConnection.class);\n        final Properties properties = calciteConnection.getProperties();\n        properties.setProperty(\n            CalciteConnectionProperty.MATERIALIZATIONS_ENABLED.camelName(),\n            Boolean.toString(materializationsEnabled));\n        properties.setProperty(\n            CalciteConnectionProperty.CREATE_MATERIALIZATIONS.camelName(),\n            Boolean.toString(materializationsEnabled));\n        if (!properties\n            .containsKey(CalciteConnectionProperty.TIME_ZONE.camelName())) {\n          \r\n          properties.setProperty(\n              CalciteConnectionProperty.TIME_ZONE.camelName(),\n              DateTimeUtils.UTC_ZONE.getID());\n        }\n      }\n      for (Pair<Hook, Consumer> hook : hooks) {\n        \r\n        closer.add(hook.left.addThread(hook.right));\n      }\n      Statement statement = connection.createStatement();\n      statement.setMaxRows(limit <= 0 ? limit : Math.max(limit, 1));\n      ResultSet resultSet = null;\n      Integer updateCount = null;\n      try {\n        if (updateChecker == null) {\n          resultSet = statement.executeQuery(sql);\n        } else {\n          updateCount = statement.executeUpdate(sql);\n        }\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(null);\n          return;\n        }\n      } catch (Exception | Error e) {\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(e);\n          return;\n        }\n        throw e;\n      }\n      if (resultChecker != null) {\n        resultChecker.accept(resultSet);\n      }\n      if (updateChecker != null) {\n        updateChecker.accept(updateCount);\n      }\n      if (resultSet != null) {\n        resultSet.close();\n      }\n      statement.close();\n      connection.close();\n    } catch (Error | RuntimeException e) {\n      \r\n      \r\n      \r\n      throw e;\n    } catch (Throwable e) {\n      throw new RuntimeException(message, e);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/CalciteAssert.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":501,"status":"M"},{"authorDate":"2019-02-03 18:32:12","commitOrder":15,"curCode":"  private static void assertPrepare(\n      Connection connection,\n      String sql,\n      int limit,\n      boolean materializationsEnabled,\n      List<Pair<Hook, Consumer>> hooks,\n      Consumer<ResultSet> resultChecker,\n      Consumer<Integer> updateChecker,\n      Consumer<Throwable> exceptionChecker,\n      PreparedStatementConsumer consumer) {\n    final Supplier<String> message = () -> \"With materializationsEnabled=\"\n        + materializationsEnabled + \", limit=\" + limit + \", sql = \" + sql;\n    try (Closer closer = new Closer()) {\n      if (connection.isWrapperFor(CalciteConnection.class)) {\n        final CalciteConnection calciteConnection =\n            connection.unwrap(CalciteConnection.class);\n        final Properties properties = calciteConnection.getProperties();\n        properties.setProperty(\n            CalciteConnectionProperty.MATERIALIZATIONS_ENABLED.camelName(),\n            Boolean.toString(materializationsEnabled));\n        properties.setProperty(\n            CalciteConnectionProperty.CREATE_MATERIALIZATIONS.camelName(),\n            Boolean.toString(materializationsEnabled));\n        if (!properties\n            .containsKey(CalciteConnectionProperty.TIME_ZONE.camelName())) {\n          \r\n          properties.setProperty(\n              CalciteConnectionProperty.TIME_ZONE.camelName(),\n              DateTimeUtils.UTC_ZONE.getID());\n        }\n      }\n      for (Pair<Hook, Consumer> hook : hooks) {\n        \r\n        closer.add(hook.left.addThread(hook.right));\n      }\n      PreparedStatement statement = connection.prepareStatement(sql);\n      statement.setMaxRows(limit <= 0 ? limit : Math.max(limit, 1));\n      ResultSet resultSet = null;\n      Integer updateCount = null;\n      try {\n        consumer.accept(statement);\n        if (updateChecker == null) {\n          resultSet = statement.executeQuery();\n        } else {\n          updateCount = statement.executeUpdate(sql);\n        }\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(null);\n          return;\n        }\n      } catch (Exception | Error e) {\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(e);\n          return;\n        }\n        throw e;\n      }\n      if (resultChecker != null) {\n        resultChecker.accept(resultSet);\n      }\n      if (updateChecker != null) {\n        updateChecker.accept(updateCount);\n      }\n      if (resultSet != null) {\n        resultSet.close();\n      }\n      statement.close();\n      connection.close();\n    } catch (Error | RuntimeException e) {\n      \r\n      \r\n      e.addSuppressed(new RuntimeException(message.get()));\n      throw e;\n    } catch (Throwable e) {\n      throw new RuntimeException(message.get(), e);\n    }\n  }\n","date":"2019-02-04 16:13:27","endLine":654,"groupId":"12797","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertPrepare","params":"(Connectionconnection@Stringsql@intlimit@booleanmaterializationsEnabled@List<Pair<Hook@Consumer>>hooks@Consumer<ResultSet>resultChecker@Consumer<Integer>updateChecker@Consumer<Throwable>exceptionChecker@PreparedStatementConsumerconsumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7f/cf56cd4e1378b80d596e6a6ae85093b1bf7a20.src","preCode":"  private static void assertPrepare(\n      Connection connection,\n      String sql,\n      int limit,\n      boolean materializationsEnabled,\n      List<Pair<Hook, Consumer>> hooks,\n      Consumer<ResultSet> resultChecker,\n      Consumer<Integer> updateChecker,\n      Consumer<Throwable> exceptionChecker,\n      PreparedStatementConsumer consumer) {\n    final String message = \"With materializationsEnabled=\"\n        + materializationsEnabled + \", limit=\" + limit;\n    try (Closer closer = new Closer()) {\n      if (connection.isWrapperFor(CalciteConnection.class)) {\n        final CalciteConnection calciteConnection =\n            connection.unwrap(CalciteConnection.class);\n        final Properties properties = calciteConnection.getProperties();\n        properties.setProperty(\n            CalciteConnectionProperty.MATERIALIZATIONS_ENABLED.camelName(),\n            Boolean.toString(materializationsEnabled));\n        properties.setProperty(\n            CalciteConnectionProperty.CREATE_MATERIALIZATIONS.camelName(),\n            Boolean.toString(materializationsEnabled));\n        if (!properties\n            .containsKey(CalciteConnectionProperty.TIME_ZONE.camelName())) {\n          \r\n          properties.setProperty(\n              CalciteConnectionProperty.TIME_ZONE.camelName(),\n              DateTimeUtils.UTC_ZONE.getID());\n        }\n      }\n      for (Pair<Hook, Consumer> hook : hooks) {\n        \r\n        closer.add(hook.left.addThread(hook.right));\n      }\n      PreparedStatement statement = connection.prepareStatement(sql);\n      statement.setMaxRows(limit <= 0 ? limit : Math.max(limit, 1));\n      ResultSet resultSet = null;\n      Integer updateCount = null;\n      try {\n        consumer.accept(statement);\n        if (updateChecker == null) {\n          resultSet = statement.executeQuery();\n        } else {\n          updateCount = statement.executeUpdate(sql);\n        }\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(null);\n          return;\n        }\n      } catch (Exception | Error e) {\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(e);\n          return;\n        }\n        throw e;\n      }\n      if (resultChecker != null) {\n        resultChecker.accept(resultSet);\n      }\n      if (updateChecker != null) {\n        updateChecker.accept(updateCount);\n      }\n      if (resultSet != null) {\n        resultSet.close();\n      }\n      statement.close();\n      connection.close();\n    } catch (Error | RuntimeException e) {\n      \r\n      \r\n      \r\n      throw e;\n    } catch (Throwable e) {\n      throw new RuntimeException(message, e);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/CalciteAssert.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"M"}],"commitId":"d9fe7f7ad7c2006780e459ce90e3f442a6246051","commitMessage":"@@@Improve assert messages for CalciteAssert-based tests\n\nMake sure top-most exception is AssertionError.  so test failures are simpler to understand.\n\nFor instance:\n\njava.lang.AssertionError:\nExpected: \"empid=100; deptno=10; DNAME=Sales\\nempid=1170; deptno=10; DNAME=Sales\\nempid=150; deptno=10; DNAME=Sales\\nempid=200; deptno=20; DNAME=null\"\n     but: was \"empid=100; deptno=10; DNAME=Sales\\nempid=110; deptno=10; DNAME=Sales\\nempid=150; deptno=10; DNAME=Sales\\nempid=200; deptno=20; DNAME=null\"\n\n\tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\n\tat org.junit.Assert.assertThat(Assert.java:956)\n\tat org.junit.Assert.assertThat(Assert.java:923)\n\tat org.apache.calcite.test.CalciteAssert.lambda$checkResult$6(CalciteAssert.java:423)\n\tat org.apache.calcite.test.CalciteAssert.assertQuery(CalciteAssert.java:557)\n\tat org.apache.calcite.test.CalciteAssert$AssertQuery.lambda$returns$1(CalciteAssert.java:1456)\n\tat org.apache.calcite.test.CalciteAssert$AssertQuery.withConnection(CalciteAssert.java:1388)\n\tat org.apache.calcite.test.CalciteAssert$AssertQuery.returns(CalciteAssert.java:1454)\n\tat org.apache.calcite.test.CalciteAssert$AssertQuery.returns(CalciteAssert.java:1437)\n\tat org.apache.calcite.test.CalciteAssert$AssertQuery.returnsUnordered(CalciteAssert.java:1466)\n\tat org.apache.calcite.test.JdbcTest.testScalarSubQuery(JdbcTest.java:4593)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\n\tSuppressed: java.lang.RuntimeException: With materializationsEnabled=false.  limit=0.  sql=select \"empid\".  \"deptno\". \n (select \"name\" from \"hr\".\"depts\"\n  where \"deptno\" = e.\"deptno\") as dname\nfrom \"hr\".\"emps\" as e\n\t\tat org.apache.calcite.test.CalciteAssert.assertQuery(CalciteAssert.java:570)\n\t\t... 28 more\n","date":"2019-02-04 16:13:27","modifiedFileCount":"1","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2019-02-14 04:35:36","codes":[{"authorDate":"2019-02-14 04:35:36","commitOrder":16,"curCode":"  static void assertQuery(\n      Connection connection,\n      String sql,\n      int limit,\n      boolean materializationsEnabled,\n      List<Pair<Hook, Consumer>> hooks,\n      Consumer<ResultSet> resultChecker,\n      Consumer<Integer> updateChecker,\n      Consumer<Throwable> exceptionChecker) {\n    try (Closer closer = new Closer()) {\n      if (connection.isWrapperFor(CalciteConnection.class)) {\n        final CalciteConnection calciteConnection =\n            connection.unwrap(CalciteConnection.class);\n        final Properties properties = calciteConnection.getProperties();\n        properties.setProperty(\n            CalciteConnectionProperty.MATERIALIZATIONS_ENABLED.camelName(),\n            Boolean.toString(materializationsEnabled));\n        properties.setProperty(\n            CalciteConnectionProperty.CREATE_MATERIALIZATIONS.camelName(),\n            Boolean.toString(materializationsEnabled));\n        if (!properties\n            .containsKey(CalciteConnectionProperty.TIME_ZONE.camelName())) {\n          \r\n          properties.setProperty(\n              CalciteConnectionProperty.TIME_ZONE.camelName(),\n              DateTimeUtils.UTC_ZONE.getID());\n        }\n      }\n      for (Pair<Hook, Consumer> hook : hooks) {\n        \r\n        closer.add(hook.left.addThread(hook.right));\n      }\n      Statement statement = connection.createStatement();\n      statement.setMaxRows(limit <= 0 ? limit : Math.max(limit, 1));\n      ResultSet resultSet = null;\n      Integer updateCount = null;\n      try {\n        if (updateChecker == null) {\n          resultSet = statement.executeQuery(sql);\n        } else {\n          updateCount = statement.executeUpdate(sql);\n        }\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(null);\n          return;\n        }\n      } catch (Exception | Error e) {\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(e);\n          return;\n        }\n        throw e;\n      }\n      if (resultChecker != null) {\n        resultChecker.accept(resultSet);\n      }\n      if (updateChecker != null) {\n        updateChecker.accept(updateCount);\n      }\n      if (resultSet != null) {\n        resultSet.close();\n      }\n      statement.close();\n      connection.close();\n    } catch (Throwable e) {\n      String message = \"With materializationsEnabled=\" + materializationsEnabled\n          + \", limit=\" + limit;\n      if (!TestUtil.hasMessage(e, sql)) {\n        message += \", sql=\" + sql;\n      }\n      throw TestUtil.rethrow(e, message);\n    }\n  }\n","date":"2019-02-27 15:04:26","endLine":563,"groupId":"121417","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertQuery","params":"(Connectionconnection@Stringsql@intlimit@booleanmaterializationsEnabled@List<Pair<Hook@Consumer>>hooks@Consumer<ResultSet>resultChecker@Consumer<Integer>updateChecker@Consumer<Throwable>exceptionChecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/03/e7d808c5cfc7df10aed4e133f7f48539617301.src","preCode":"  static void assertQuery(\n      Connection connection,\n      String sql,\n      int limit,\n      boolean materializationsEnabled,\n      List<Pair<Hook, Consumer>> hooks,\n      Consumer<ResultSet> resultChecker,\n      Consumer<Integer> updateChecker,\n      Consumer<Throwable> exceptionChecker) {\n    final Supplier<String> message = () ->\n        \"With materializationsEnabled=\" + materializationsEnabled\n            + \", limit=\" + limit + \", sql=\" + sql;\n    try (Closer closer = new Closer()) {\n      if (connection.isWrapperFor(CalciteConnection.class)) {\n        final CalciteConnection calciteConnection =\n            connection.unwrap(CalciteConnection.class);\n        final Properties properties = calciteConnection.getProperties();\n        properties.setProperty(\n            CalciteConnectionProperty.MATERIALIZATIONS_ENABLED.camelName(),\n            Boolean.toString(materializationsEnabled));\n        properties.setProperty(\n            CalciteConnectionProperty.CREATE_MATERIALIZATIONS.camelName(),\n            Boolean.toString(materializationsEnabled));\n        if (!properties\n            .containsKey(CalciteConnectionProperty.TIME_ZONE.camelName())) {\n          \r\n          properties.setProperty(\n              CalciteConnectionProperty.TIME_ZONE.camelName(),\n              DateTimeUtils.UTC_ZONE.getID());\n        }\n      }\n      for (Pair<Hook, Consumer> hook : hooks) {\n        \r\n        closer.add(hook.left.addThread(hook.right));\n      }\n      Statement statement = connection.createStatement();\n      statement.setMaxRows(limit <= 0 ? limit : Math.max(limit, 1));\n      ResultSet resultSet = null;\n      Integer updateCount = null;\n      try {\n        if (updateChecker == null) {\n          resultSet = statement.executeQuery(sql);\n        } else {\n          updateCount = statement.executeUpdate(sql);\n        }\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(null);\n          return;\n        }\n      } catch (Exception | Error e) {\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(e);\n          return;\n        }\n        throw e;\n      }\n      if (resultChecker != null) {\n        resultChecker.accept(resultSet);\n      }\n      if (updateChecker != null) {\n        updateChecker.accept(updateCount);\n      }\n      if (resultSet != null) {\n        resultSet.close();\n      }\n      statement.close();\n      connection.close();\n    } catch (Error | RuntimeException e) {\n      \r\n      \r\n      e.addSuppressed(new RuntimeException(message.get()));\n      throw e;\n    } catch (Throwable e) {\n      throw new RuntimeException(message.get(), e);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/CalciteAssert.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":491,"status":"M"},{"authorDate":"2019-02-14 04:35:36","commitOrder":16,"curCode":"  private static void assertPrepare(\n      Connection connection,\n      String sql,\n      int limit,\n      boolean materializationsEnabled,\n      List<Pair<Hook, Consumer>> hooks,\n      Consumer<ResultSet> resultChecker,\n      Consumer<Integer> updateChecker,\n      Consumer<Throwable> exceptionChecker,\n      PreparedStatementConsumer consumer) {\n    try (Closer closer = new Closer()) {\n      if (connection.isWrapperFor(CalciteConnection.class)) {\n        final CalciteConnection calciteConnection =\n            connection.unwrap(CalciteConnection.class);\n        final Properties properties = calciteConnection.getProperties();\n        properties.setProperty(\n            CalciteConnectionProperty.MATERIALIZATIONS_ENABLED.camelName(),\n            Boolean.toString(materializationsEnabled));\n        properties.setProperty(\n            CalciteConnectionProperty.CREATE_MATERIALIZATIONS.camelName(),\n            Boolean.toString(materializationsEnabled));\n        if (!properties\n            .containsKey(CalciteConnectionProperty.TIME_ZONE.camelName())) {\n          \r\n          properties.setProperty(\n              CalciteConnectionProperty.TIME_ZONE.camelName(),\n              DateTimeUtils.UTC_ZONE.getID());\n        }\n      }\n      for (Pair<Hook, Consumer> hook : hooks) {\n        \r\n        closer.add(hook.left.addThread(hook.right));\n      }\n      PreparedStatement statement = connection.prepareStatement(sql);\n      statement.setMaxRows(limit <= 0 ? limit : Math.max(limit, 1));\n      ResultSet resultSet = null;\n      Integer updateCount = null;\n      try {\n        consumer.accept(statement);\n        if (updateChecker == null) {\n          resultSet = statement.executeQuery();\n        } else {\n          updateCount = statement.executeUpdate(sql);\n        }\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(null);\n          return;\n        }\n      } catch (Exception | Error e) {\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(e);\n          return;\n        }\n        throw e;\n      }\n      if (resultChecker != null) {\n        resultChecker.accept(resultSet);\n      }\n      if (updateChecker != null) {\n        updateChecker.accept(updateCount);\n      }\n      if (resultSet != null) {\n        resultSet.close();\n      }\n      statement.close();\n      connection.close();\n    } catch (Throwable e) {\n      String message = \"With materializationsEnabled=\" + materializationsEnabled\n          + \", limit=\" + limit;\n      if (!TestUtil.hasMessage(e, sql)) {\n        message += \", sql=\" + sql;\n      }\n      throw TestUtil.rethrow(e, message);\n    }\n  }\n","date":"2019-02-27 15:04:26","endLine":639,"groupId":"121417","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertPrepare","params":"(Connectionconnection@Stringsql@intlimit@booleanmaterializationsEnabled@List<Pair<Hook@Consumer>>hooks@Consumer<ResultSet>resultChecker@Consumer<Integer>updateChecker@Consumer<Throwable>exceptionChecker@PreparedStatementConsumerconsumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/03/e7d808c5cfc7df10aed4e133f7f48539617301.src","preCode":"  private static void assertPrepare(\n      Connection connection,\n      String sql,\n      int limit,\n      boolean materializationsEnabled,\n      List<Pair<Hook, Consumer>> hooks,\n      Consumer<ResultSet> resultChecker,\n      Consumer<Integer> updateChecker,\n      Consumer<Throwable> exceptionChecker,\n      PreparedStatementConsumer consumer) {\n    final Supplier<String> message = () -> \"With materializationsEnabled=\"\n        + materializationsEnabled + \", limit=\" + limit + \", sql = \" + sql;\n    try (Closer closer = new Closer()) {\n      if (connection.isWrapperFor(CalciteConnection.class)) {\n        final CalciteConnection calciteConnection =\n            connection.unwrap(CalciteConnection.class);\n        final Properties properties = calciteConnection.getProperties();\n        properties.setProperty(\n            CalciteConnectionProperty.MATERIALIZATIONS_ENABLED.camelName(),\n            Boolean.toString(materializationsEnabled));\n        properties.setProperty(\n            CalciteConnectionProperty.CREATE_MATERIALIZATIONS.camelName(),\n            Boolean.toString(materializationsEnabled));\n        if (!properties\n            .containsKey(CalciteConnectionProperty.TIME_ZONE.camelName())) {\n          \r\n          properties.setProperty(\n              CalciteConnectionProperty.TIME_ZONE.camelName(),\n              DateTimeUtils.UTC_ZONE.getID());\n        }\n      }\n      for (Pair<Hook, Consumer> hook : hooks) {\n        \r\n        closer.add(hook.left.addThread(hook.right));\n      }\n      PreparedStatement statement = connection.prepareStatement(sql);\n      statement.setMaxRows(limit <= 0 ? limit : Math.max(limit, 1));\n      ResultSet resultSet = null;\n      Integer updateCount = null;\n      try {\n        consumer.accept(statement);\n        if (updateChecker == null) {\n          resultSet = statement.executeQuery();\n        } else {\n          updateCount = statement.executeUpdate(sql);\n        }\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(null);\n          return;\n        }\n      } catch (Exception | Error e) {\n        if (exceptionChecker != null) {\n          exceptionChecker.accept(e);\n          return;\n        }\n        throw e;\n      }\n      if (resultChecker != null) {\n        resultChecker.accept(resultSet);\n      }\n      if (updateChecker != null) {\n        updateChecker.accept(updateCount);\n      }\n      if (resultSet != null) {\n        resultSet.close();\n      }\n      statement.close();\n      connection.close();\n    } catch (Error | RuntimeException e) {\n      \r\n      \r\n      e.addSuppressed(new RuntimeException(message.get()));\n      throw e;\n    } catch (Throwable e) {\n      throw new RuntimeException(message.get(), e);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/CalciteAssert.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":565,"status":"M"}],"commitId":"ebafff1ede5921901b322872693bf1dbdf09fc8d","commitMessage":"@@@[CALCITE-2878] Avoid use of new RuntimeException(e) in tests\n\nnew RuntimeException(e) adds very little info in tests.  and it makes stacktraces harder to read.\nSo it makes sense to just sneaky-throw in those cases.  especially for test purposes.\n","date":"2019-02-27 15:04:26","modifiedFileCount":"38","status":"M","submitter":"Vladimir Sitnikov"}]
