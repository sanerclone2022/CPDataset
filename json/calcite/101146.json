[{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":2,"curCode":"  @Test public void testNullIf() {\n    expr(\"nullif(1,2)\").ok();\n    expr(\"nullif(1,2)\")\n        .columnType(\"INTEGER\");\n    expr(\"nullif('a','b')\")\n        .columnType(\"CHAR(1)\");\n    expr(\"nullif(345.21, 2)\")\n        .columnType(\"DECIMAL(5, 2)\");\n    expr(\"nullif(345.21, 2e0)\")\n        .columnType(\"DECIMAL(5, 2)\");\n    wholeExpr(\"nullif(1,2,3)\")\n        .fails(\"Invalid number of arguments to function 'NULLIF'. Was \"\n            + \"expecting 2 arguments\");\n  }\n","date":"2019-09-24 02:59:18","endLine":612,"groupId":"9061","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullIf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testNullIf() {\n    expr(\"nullif(1,2)\").ok();\n    expr(\"nullif(1,2)\")\n        .columnType(\"INTEGER\");\n    expr(\"nullif('a','b')\")\n        .columnType(\"CHAR(1)\");\n    expr(\"nullif(345.21, 2)\")\n        .columnType(\"DECIMAL(5, 2)\");\n    expr(\"nullif(345.21, 2e0)\")\n        .columnType(\"DECIMAL(5, 2)\");\n    wholeExpr(\"nullif(1,2,3)\")\n        .fails(\"Invalid number of arguments to function 'NULLIF'. Was \"\n            + \"expecting 2 arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":599,"status":"B"},{"authorDate":"2019-09-07 07:51:19","commitOrder":2,"curCode":"  @Test public void testNullCast() {\n    expr(\"cast(null as tinyint)\")\n        .columnType(\"TINYINT\");\n    expr(\"cast(null as smallint)\")\n        .columnType(\"SMALLINT\");\n    expr(\"cast(null as integer)\")\n        .columnType(\"INTEGER\");\n    expr(\"cast(null as bigint)\")\n        .columnType(\"BIGINT\");\n    expr(\"cast(null as float)\")\n        .columnType(\"FLOAT\");\n    expr(\"cast(null as real)\")\n        .columnType(\"REAL\");\n    expr(\"cast(null as double)\")\n        .columnType(\"DOUBLE\");\n    expr(\"cast(null as boolean)\")\n        .columnType(\"BOOLEAN\");\n    expr(\"cast(null as varchar(1))\")\n        .columnType(\"VARCHAR(1)\");\n    expr(\"cast(null as char(1))\")\n        .columnType(\"CHAR(1)\");\n    expr(\"cast(null as binary(1))\")\n        .columnType(\"BINARY(1)\");\n    expr(\"cast(null as date)\")\n        .columnType(\"DATE\");\n    expr(\"cast(null as time)\")\n        .columnType(\"TIME(0)\");\n    expr(\"cast(null as timestamp)\")\n        .columnType(\"TIMESTAMP(0)\");\n    expr(\"cast(null as decimal)\")\n        .columnType(\"DECIMAL(19, 0)\");\n    expr(\"cast(null as varbinary(1))\")\n        .columnType(\"VARBINARY(1)\");\n\n    expr(\"cast(null as integer), cast(null as char(1))\").ok();\n  }\n","date":"2019-09-24 02:59:18","endLine":1073,"groupId":"11897","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNullCast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testNullCast() {\n    expr(\"cast(null as tinyint)\")\n        .columnType(\"TINYINT\");\n    expr(\"cast(null as smallint)\")\n        .columnType(\"SMALLINT\");\n    expr(\"cast(null as integer)\")\n        .columnType(\"INTEGER\");\n    expr(\"cast(null as bigint)\")\n        .columnType(\"BIGINT\");\n    expr(\"cast(null as float)\")\n        .columnType(\"FLOAT\");\n    expr(\"cast(null as real)\")\n        .columnType(\"REAL\");\n    expr(\"cast(null as double)\")\n        .columnType(\"DOUBLE\");\n    expr(\"cast(null as boolean)\")\n        .columnType(\"BOOLEAN\");\n    expr(\"cast(null as varchar(1))\")\n        .columnType(\"VARCHAR(1)\");\n    expr(\"cast(null as char(1))\")\n        .columnType(\"CHAR(1)\");\n    expr(\"cast(null as binary(1))\")\n        .columnType(\"BINARY(1)\");\n    expr(\"cast(null as date)\")\n        .columnType(\"DATE\");\n    expr(\"cast(null as time)\")\n        .columnType(\"TIME(0)\");\n    expr(\"cast(null as timestamp)\")\n        .columnType(\"TIMESTAMP(0)\");\n    expr(\"cast(null as decimal)\")\n        .columnType(\"DECIMAL(19, 0)\");\n    expr(\"cast(null as varbinary(1))\")\n        .columnType(\"VARBINARY(1)\");\n\n    expr(\"cast(null as integer), cast(null as char(1))\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1038,"status":"MB"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testNullIf() {\n    expr(\"nullif(1,2)\").ok();\n    expr(\"nullif(1,2)\")\n        .columnType(\"INTEGER\");\n    expr(\"nullif('a','b')\")\n        .columnType(\"CHAR(1)\");\n    expr(\"nullif(345.21, 2)\")\n        .columnType(\"DECIMAL(5, 2)\");\n    expr(\"nullif(345.21, 2e0)\")\n        .columnType(\"DECIMAL(5, 2)\");\n    wholeExpr(\"nullif(1,2,3)\")\n        .fails(\"Invalid number of arguments to function 'NULLIF'. Was \"\n            + \"expecting 2 arguments\");\n  }\n","date":"2020-04-06 04:57:49","endLine":609,"groupId":"101146","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullIf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testNullIf() {\n    expr(\"nullif(1,2)\").ok();\n    expr(\"nullif(1,2)\")\n        .columnType(\"INTEGER\");\n    expr(\"nullif('a','b')\")\n        .columnType(\"CHAR(1)\");\n    expr(\"nullif(345.21, 2)\")\n        .columnType(\"DECIMAL(5, 2)\");\n    expr(\"nullif(345.21, 2e0)\")\n        .columnType(\"DECIMAL(5, 2)\");\n    wholeExpr(\"nullif(1,2,3)\")\n        .fails(\"Invalid number of arguments to function 'NULLIF'. Was \"\n            + \"expecting 2 arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":596,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testNullCast() {\n    expr(\"cast(null as tinyint)\")\n        .columnType(\"TINYINT\");\n    expr(\"cast(null as smallint)\")\n        .columnType(\"SMALLINT\");\n    expr(\"cast(null as integer)\")\n        .columnType(\"INTEGER\");\n    expr(\"cast(null as bigint)\")\n        .columnType(\"BIGINT\");\n    expr(\"cast(null as float)\")\n        .columnType(\"FLOAT\");\n    expr(\"cast(null as real)\")\n        .columnType(\"REAL\");\n    expr(\"cast(null as double)\")\n        .columnType(\"DOUBLE\");\n    expr(\"cast(null as boolean)\")\n        .columnType(\"BOOLEAN\");\n    expr(\"cast(null as varchar(1))\")\n        .columnType(\"VARCHAR(1)\");\n    expr(\"cast(null as char(1))\")\n        .columnType(\"CHAR(1)\");\n    expr(\"cast(null as binary(1))\")\n        .columnType(\"BINARY(1)\");\n    expr(\"cast(null as date)\")\n        .columnType(\"DATE\");\n    expr(\"cast(null as time)\")\n        .columnType(\"TIME(0)\");\n    expr(\"cast(null as timestamp)\")\n        .columnType(\"TIMESTAMP(0)\");\n    expr(\"cast(null as decimal)\")\n        .columnType(\"DECIMAL(19, 0)\");\n    expr(\"cast(null as varbinary(1))\")\n        .columnType(\"VARBINARY(1)\");\n\n    expr(\"cast(null as integer), cast(null as char(1))\").ok();\n  }\n","date":"2020-04-06 04:57:49","endLine":1073,"groupId":"101146","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNullCast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testNullCast() {\n    expr(\"cast(null as tinyint)\")\n        .columnType(\"TINYINT\");\n    expr(\"cast(null as smallint)\")\n        .columnType(\"SMALLINT\");\n    expr(\"cast(null as integer)\")\n        .columnType(\"INTEGER\");\n    expr(\"cast(null as bigint)\")\n        .columnType(\"BIGINT\");\n    expr(\"cast(null as float)\")\n        .columnType(\"FLOAT\");\n    expr(\"cast(null as real)\")\n        .columnType(\"REAL\");\n    expr(\"cast(null as double)\")\n        .columnType(\"DOUBLE\");\n    expr(\"cast(null as boolean)\")\n        .columnType(\"BOOLEAN\");\n    expr(\"cast(null as varchar(1))\")\n        .columnType(\"VARCHAR(1)\");\n    expr(\"cast(null as char(1))\")\n        .columnType(\"CHAR(1)\");\n    expr(\"cast(null as binary(1))\")\n        .columnType(\"BINARY(1)\");\n    expr(\"cast(null as date)\")\n        .columnType(\"DATE\");\n    expr(\"cast(null as time)\")\n        .columnType(\"TIME(0)\");\n    expr(\"cast(null as timestamp)\")\n        .columnType(\"TIMESTAMP(0)\");\n    expr(\"cast(null as decimal)\")\n        .columnType(\"DECIMAL(19, 0)\");\n    expr(\"cast(null as varbinary(1))\")\n        .columnType(\"VARBINARY(1)\");\n\n    expr(\"cast(null as integer), cast(null as char(1))\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1038,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
