[{"authorTime":"2018-06-29 16:41:24","codes":[{"authorDate":"2018-06-29 16:41:24","commitOrder":1,"curCode":"  private RexNode reduceRegrSzz(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs,\n      int xIndex,\n      int yIndex,\n      int nullFilterIndex) {\n    \r\n    \r\n    \r\n\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    final RelDataType argXType = getFieldType(oldAggRel.getInput(), xIndex);\n    final RelDataType argYType =\n        xIndex == yIndex ? argXType : getFieldType(oldAggRel.getInput(), yIndex);\n    final RelDataType nullFilterIndexType =\n        nullFilterIndex == yIndex ? argYType : getFieldType(oldAggRel.getInput(), yIndex);\n\n    final RelDataType oldCallType =\n        typeFactory.createTypeWithNullability(oldCall.getType(),\n            argXType.isNullable() || argYType.isNullable() || nullFilterIndexType.isNullable());\n\n    final RexNode argX =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(xIndex), true);\n    final RexNode argY =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(yIndex), true);\n    final RexNode argNullFilter =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(nullFilterIndex), true);\n\n    final RexNode argXArgY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argSquaredOrdinal = lookupOrAdd(inputExprs, argXArgY);\n\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.AND,\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY)),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argNullFilter));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(\n        oldAggRel, oldCall, newCalls, aggCallMapping, argXArgY.getType(),\n        argSquaredOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXYCast = rexBuilder.ensureType(oldCallType, sumXY, true);\n\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall,\n        newCalls, aggCallMapping, rexBuilder, xIndex, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = xIndex == yIndex\n        ? sumX\n        : getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n            aggCallMapping, rexBuilder, yIndex, argXAndYNotNullFilterOrdinal);\n\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(xIndex), ImmutableList.of(argXType), argXAndYNotNullFilterOrdinal);\n\n    RexLiteral zero = rexBuilder.makeExactLiteral(BigDecimal.ZERO);\n    RexNode nul = rexBuilder.constantNull();\n    final RexNode avgSumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.CASE,\n        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS, countArg, zero), nul,\n            rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE, sumXSumY, countArg));\n    final RexNode avgSumXSumYCast = rexBuilder.ensureType(oldCallType, avgSumXSumY, true);\n    final RexNode result =\n        rexBuilder.makeCall(SqlStdOperatorTable.MINUS, sumXYCast, avgSumXSumYCast);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","date":"2018-08-13 09:04:44","endLine":718,"groupId":"15493","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"reduceRegrSzz","params":"(AggregateoldAggRel@AggregateCalloldCall@List<AggregateCall>newCalls@Map<AggregateCall@RexNode>aggCallMapping@List<RexNode>inputExprs@intxIndex@intyIndex@intnullFilterIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/68/f6b16c3943cffb65de1cd5aba16758072e5767.src","preCode":"  private RexNode reduceRegrSzz(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs,\n      int xIndex,\n      int yIndex,\n      int nullFilterIndex) {\n    \r\n    \r\n    \r\n\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    final RelDataType argXType = getFieldType(oldAggRel.getInput(), xIndex);\n    final RelDataType argYType =\n        xIndex == yIndex ? argXType : getFieldType(oldAggRel.getInput(), yIndex);\n    final RelDataType nullFilterIndexType =\n        nullFilterIndex == yIndex ? argYType : getFieldType(oldAggRel.getInput(), yIndex);\n\n    final RelDataType oldCallType =\n        typeFactory.createTypeWithNullability(oldCall.getType(),\n            argXType.isNullable() || argYType.isNullable() || nullFilterIndexType.isNullable());\n\n    final RexNode argX =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(xIndex), true);\n    final RexNode argY =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(yIndex), true);\n    final RexNode argNullFilter =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(nullFilterIndex), true);\n\n    final RexNode argXArgY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argSquaredOrdinal = lookupOrAdd(inputExprs, argXArgY);\n\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.AND,\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY)),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argNullFilter));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(\n        oldAggRel, oldCall, newCalls, aggCallMapping, argXArgY.getType(),\n        argSquaredOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXYCast = rexBuilder.ensureType(oldCallType, sumXY, true);\n\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall,\n        newCalls, aggCallMapping, rexBuilder, xIndex, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = xIndex == yIndex\n        ? sumX\n        : getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n            aggCallMapping, rexBuilder, yIndex, argXAndYNotNullFilterOrdinal);\n\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(xIndex), ImmutableList.of(argXType), argXAndYNotNullFilterOrdinal);\n\n    RexLiteral zero = rexBuilder.makeExactLiteral(BigDecimal.ZERO);\n    RexNode nul = rexBuilder.constantNull();\n    final RexNode avgSumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.CASE,\n        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS, countArg, zero), nul,\n            rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE, sumXSumY, countArg));\n    final RexNode avgSumXSumYCast = rexBuilder.ensureType(oldCallType, avgSumXSumY, true);\n    final RexNode result =\n        rexBuilder.makeCall(SqlStdOperatorTable.MINUS, sumXYCast, avgSumXSumYCast);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":650,"status":"B"},{"authorDate":"2018-06-29 16:41:24","commitOrder":1,"curCode":"  private RexNode reduceCovariance(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      boolean biased,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    assert oldCall.getArgList().size() == 2 : oldCall.getArgList();\n    final int argXOrdinal = oldCall.getArgList().get(0);\n    final int argYOrdinal = oldCall.getArgList().get(1);\n    final RelDataType argXOrdinalType = getFieldType(oldAggRel.getInput(), argXOrdinal);\n    final RelDataType argYOrdinalType = getFieldType(oldAggRel.getInput(), argYOrdinal);\n    final RelDataType oldCallType = typeFactory.createTypeWithNullability(oldCall.getType(),\n        argXOrdinalType.isNullable() || argYOrdinalType.isNullable());\n    final RexNode argX = rexBuilder.ensureType(oldCallType, inputExprs.get(argXOrdinal), true);\n    final RexNode argY = rexBuilder.ensureType(oldCallType, inputExprs.get(argYOrdinal), true);\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode argXY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argXYOrdinal = lookupOrAdd(inputExprs, argXY);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(oldAggRel, oldCall, newCalls,\n        aggCallMapping, argXY.getType(), argXYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argXOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(argXOrdinal, argYOrdinal),\n        ImmutableList.of(argXOrdinalType, argYOrdinalType),\n        argXAndYNotNullFilterOrdinal);\n    final RexNode avgSumSquaredArg =\n         rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE, sumXSumY, countArg);\n    final RexNode diff = rexBuilder.makeCall(SqlStdOperatorTable.MINUS, sumXY, avgSumSquaredArg);\n    final RexNode denominator;\n    if (biased) {\n      denominator = countArg;\n    } else {\n      final RexLiteral one = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n      final RexNode nul = rexBuilder.makeCast(countArg.getType(), rexBuilder.constantNull());\n      final RexNode countMinusOne = rexBuilder.makeCall(SqlStdOperatorTable.MINUS, countArg, one);\n      final RexNode countEqOne = rexBuilder.makeCall(SqlStdOperatorTable.EQUALS, countArg, one);\n      denominator = rexBuilder.makeCall(SqlStdOperatorTable.CASE, countEqOne, nul, countMinusOne);\n    }\n    final RexNode result = rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE, diff, denominator);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","date":"2018-08-13 09:04:44","endLine":778,"groupId":"15492","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"reduceCovariance","params":"(AggregateoldAggRel@AggregateCalloldCall@booleanbiased@List<AggregateCall>newCalls@Map<AggregateCall@RexNode>aggCallMapping@List<RexNode>inputExprs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/68/f6b16c3943cffb65de1cd5aba16758072e5767.src","preCode":"  private RexNode reduceCovariance(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      boolean biased,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    assert oldCall.getArgList().size() == 2 : oldCall.getArgList();\n    final int argXOrdinal = oldCall.getArgList().get(0);\n    final int argYOrdinal = oldCall.getArgList().get(1);\n    final RelDataType argXOrdinalType = getFieldType(oldAggRel.getInput(), argXOrdinal);\n    final RelDataType argYOrdinalType = getFieldType(oldAggRel.getInput(), argYOrdinal);\n    final RelDataType oldCallType = typeFactory.createTypeWithNullability(oldCall.getType(),\n        argXOrdinalType.isNullable() || argYOrdinalType.isNullable());\n    final RexNode argX = rexBuilder.ensureType(oldCallType, inputExprs.get(argXOrdinal), true);\n    final RexNode argY = rexBuilder.ensureType(oldCallType, inputExprs.get(argYOrdinal), true);\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode argXY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argXYOrdinal = lookupOrAdd(inputExprs, argXY);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(oldAggRel, oldCall, newCalls,\n        aggCallMapping, argXY.getType(), argXYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argXOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(argXOrdinal, argYOrdinal),\n        ImmutableList.of(argXOrdinalType, argYOrdinalType),\n        argXAndYNotNullFilterOrdinal);\n    final RexNode avgSumSquaredArg =\n         rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE, sumXSumY, countArg);\n    final RexNode diff = rexBuilder.makeCall(SqlStdOperatorTable.MINUS, sumXY, avgSumSquaredArg);\n    final RexNode denominator;\n    if (biased) {\n      denominator = countArg;\n    } else {\n      final RexLiteral one = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n      final RexNode nul = rexBuilder.makeCast(countArg.getType(), rexBuilder.constantNull());\n      final RexNode countMinusOne = rexBuilder.makeCall(SqlStdOperatorTable.MINUS, countArg, one);\n      final RexNode countEqOne = rexBuilder.makeCall(SqlStdOperatorTable.EQUALS, countArg, one);\n      denominator = rexBuilder.makeCall(SqlStdOperatorTable.CASE, countEqOne, nul, countMinusOne);\n    }\n    final RexNode result = rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE, diff, denominator);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":720,"status":"B"}],"commitId":"ca858dd725dea6bf9b4a9059cf1c3ba98bd82f26","commitMessage":"@@@[CALCITE-2402] Implement regr functions: COVAR_POP.  COVAR_SAMP.  REGR_COUNT.  REGR_SXX.  REGR_SYY\n\nUse filters in case of AggregateReduceFunctionsRule expansions.\n\nClose apache/calcite#779\n","date":"2018-08-13 09:04:44","modifiedFileCount":"9","status":"B","submitter":"snuyanzin"},{"authorTime":"2019-08-03 08:59:01","codes":[{"authorDate":"2019-08-03 08:59:01","commitOrder":2,"curCode":"  private RexNode reduceRegrSzz(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs,\n      int xIndex,\n      int yIndex,\n      int nullFilterIndex) {\n    \r\n    \r\n    \r\n\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    final RelDataType argXType = getFieldType(oldAggRel.getInput(), xIndex);\n    final RelDataType argYType =\n        xIndex == yIndex ? argXType : getFieldType(oldAggRel.getInput(), yIndex);\n    final RelDataType nullFilterIndexType =\n        nullFilterIndex == yIndex ? argYType : getFieldType(oldAggRel.getInput(), yIndex);\n\n    final RelDataType oldCallType =\n        typeFactory.createTypeWithNullability(oldCall.getType(),\n            argXType.isNullable() || argYType.isNullable() || nullFilterIndexType.isNullable());\n\n    final RexNode argX =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(xIndex), true);\n    final RexNode argY =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(yIndex), true);\n    final RexNode argNullFilter =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(nullFilterIndex), true);\n\n    final RexNode argXArgY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argSquaredOrdinal = lookupOrAdd(inputExprs, argXArgY);\n\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.AND,\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY)),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argNullFilter));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(\n        oldAggRel, oldCall, newCalls, aggCallMapping, argXArgY.getType(),\n        argSquaredOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXYCast = rexBuilder.ensureType(oldCallType, sumXY, true);\n\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall,\n        newCalls, aggCallMapping, rexBuilder, xIndex, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = xIndex == yIndex\n        ? sumX\n        : getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n            aggCallMapping, rexBuilder, yIndex, argXAndYNotNullFilterOrdinal);\n\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(xIndex), ImmutableList.of(argXType), argXAndYNotNullFilterOrdinal);\n\n    RexLiteral zero = rexBuilder.makeExactLiteral(BigDecimal.ZERO);\n    RexNode nul = rexBuilder.makeNullLiteral(zero.getType());\n    final RexNode avgSumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.CASE,\n        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS, countArg, zero), nul,\n            rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE, sumXSumY, countArg));\n    final RexNode avgSumXSumYCast = rexBuilder.ensureType(oldCallType, avgSumXSumY, true);\n    final RexNode result =\n        rexBuilder.makeCall(SqlStdOperatorTable.MINUS, sumXYCast, avgSumXSumYCast);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","date":"2019-08-04 04:36:34","endLine":733,"groupId":"15493","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"reduceRegrSzz","params":"(AggregateoldAggRel@AggregateCalloldCall@List<AggregateCall>newCalls@Map<AggregateCall@RexNode>aggCallMapping@List<RexNode>inputExprs@intxIndex@intyIndex@intnullFilterIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/80/e7ae7c4360a4f69189fea935b2170617009ef4.src","preCode":"  private RexNode reduceRegrSzz(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs,\n      int xIndex,\n      int yIndex,\n      int nullFilterIndex) {\n    \r\n    \r\n    \r\n\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    final RelDataType argXType = getFieldType(oldAggRel.getInput(), xIndex);\n    final RelDataType argYType =\n        xIndex == yIndex ? argXType : getFieldType(oldAggRel.getInput(), yIndex);\n    final RelDataType nullFilterIndexType =\n        nullFilterIndex == yIndex ? argYType : getFieldType(oldAggRel.getInput(), yIndex);\n\n    final RelDataType oldCallType =\n        typeFactory.createTypeWithNullability(oldCall.getType(),\n            argXType.isNullable() || argYType.isNullable() || nullFilterIndexType.isNullable());\n\n    final RexNode argX =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(xIndex), true);\n    final RexNode argY =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(yIndex), true);\n    final RexNode argNullFilter =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(nullFilterIndex), true);\n\n    final RexNode argXArgY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argSquaredOrdinal = lookupOrAdd(inputExprs, argXArgY);\n\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.AND,\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY)),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argNullFilter));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(\n        oldAggRel, oldCall, newCalls, aggCallMapping, argXArgY.getType(),\n        argSquaredOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXYCast = rexBuilder.ensureType(oldCallType, sumXY, true);\n\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall,\n        newCalls, aggCallMapping, rexBuilder, xIndex, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = xIndex == yIndex\n        ? sumX\n        : getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n            aggCallMapping, rexBuilder, yIndex, argXAndYNotNullFilterOrdinal);\n\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(xIndex), ImmutableList.of(argXType), argXAndYNotNullFilterOrdinal);\n\n    RexLiteral zero = rexBuilder.makeExactLiteral(BigDecimal.ZERO);\n    RexNode nul = rexBuilder.constantNull();\n    final RexNode avgSumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.CASE,\n        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS, countArg, zero), nul,\n            rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE, sumXSumY, countArg));\n    final RexNode avgSumXSumYCast = rexBuilder.ensureType(oldCallType, avgSumXSumY, true);\n    final RexNode result =\n        rexBuilder.makeCall(SqlStdOperatorTable.MINUS, sumXYCast, avgSumXSumYCast);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":665,"status":"M"},{"authorDate":"2019-08-03 08:59:01","commitOrder":2,"curCode":"  private RexNode reduceCovariance(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      boolean biased,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    assert oldCall.getArgList().size() == 2 : oldCall.getArgList();\n    final int argXOrdinal = oldCall.getArgList().get(0);\n    final int argYOrdinal = oldCall.getArgList().get(1);\n    final RelDataType argXOrdinalType = getFieldType(oldAggRel.getInput(), argXOrdinal);\n    final RelDataType argYOrdinalType = getFieldType(oldAggRel.getInput(), argYOrdinal);\n    final RelDataType oldCallType = typeFactory.createTypeWithNullability(oldCall.getType(),\n        argXOrdinalType.isNullable() || argYOrdinalType.isNullable());\n    final RexNode argX = rexBuilder.ensureType(oldCallType, inputExprs.get(argXOrdinal), true);\n    final RexNode argY = rexBuilder.ensureType(oldCallType, inputExprs.get(argYOrdinal), true);\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode argXY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argXYOrdinal = lookupOrAdd(inputExprs, argXY);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(oldAggRel, oldCall, newCalls,\n        aggCallMapping, argXY.getType(), argXYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argXOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(argXOrdinal, argYOrdinal),\n        ImmutableList.of(argXOrdinalType, argYOrdinalType),\n        argXAndYNotNullFilterOrdinal);\n    final RexNode result = divide(biased, rexBuilder, sumXY, sumXSumY, countArg);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","date":"2019-08-04 04:36:34","endLine":780,"groupId":"15492","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"reduceCovariance","params":"(AggregateoldAggRel@AggregateCalloldCall@booleanbiased@List<AggregateCall>newCalls@Map<AggregateCall@RexNode>aggCallMapping@List<RexNode>inputExprs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/80/e7ae7c4360a4f69189fea935b2170617009ef4.src","preCode":"  private RexNode reduceCovariance(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      boolean biased,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    assert oldCall.getArgList().size() == 2 : oldCall.getArgList();\n    final int argXOrdinal = oldCall.getArgList().get(0);\n    final int argYOrdinal = oldCall.getArgList().get(1);\n    final RelDataType argXOrdinalType = getFieldType(oldAggRel.getInput(), argXOrdinal);\n    final RelDataType argYOrdinalType = getFieldType(oldAggRel.getInput(), argYOrdinal);\n    final RelDataType oldCallType = typeFactory.createTypeWithNullability(oldCall.getType(),\n        argXOrdinalType.isNullable() || argYOrdinalType.isNullable());\n    final RexNode argX = rexBuilder.ensureType(oldCallType, inputExprs.get(argXOrdinal), true);\n    final RexNode argY = rexBuilder.ensureType(oldCallType, inputExprs.get(argYOrdinal), true);\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode argXY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argXYOrdinal = lookupOrAdd(inputExprs, argXY);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(oldAggRel, oldCall, newCalls,\n        aggCallMapping, argXY.getType(), argXYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argXOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(argXOrdinal, argYOrdinal),\n        ImmutableList.of(argXOrdinalType, argYOrdinalType),\n        argXAndYNotNullFilterOrdinal);\n    final RexNode avgSumSquaredArg =\n         rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE, sumXSumY, countArg);\n    final RexNode diff = rexBuilder.makeCall(SqlStdOperatorTable.MINUS, sumXY, avgSumSquaredArg);\n    final RexNode denominator;\n    if (biased) {\n      denominator = countArg;\n    } else {\n      final RexLiteral one = rexBuilder.makeExactLiteral(BigDecimal.ONE);\n      final RexNode nul = rexBuilder.makeCast(countArg.getType(), rexBuilder.constantNull());\n      final RexNode countMinusOne = rexBuilder.makeCall(SqlStdOperatorTable.MINUS, countArg, one);\n      final RexNode countEqOne = rexBuilder.makeCall(SqlStdOperatorTable.EQUALS, countArg, one);\n      denominator = rexBuilder.makeCall(SqlStdOperatorTable.CASE, countEqOne, nul, countMinusOne);\n    }\n    final RexNode result = rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE, diff, denominator);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":735,"status":"M"}],"commitId":"b432756e2be9ad0557a56254550eb4438dd0efcf","commitMessage":"@@@Deprecate RexBuilder.constantNull().  because it produces untyped NULL literals that make planning difficult\n\nWe cannot deprecate RelBuilder.literal(null).  but remove all uses of\nin internal code.  for similar reasons.\n","date":"2019-08-04 04:36:34","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-12-02 05:40:39","codes":[{"authorDate":"2020-12-02 05:40:39","commitOrder":3,"curCode":"  private static RexNode reduceRegrSzz(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs,\n      int xIndex,\n      int yIndex,\n      int nullFilterIndex) {\n    \r\n    \r\n    \r\n\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    final RelDataType argXType = getFieldType(oldAggRel.getInput(), xIndex);\n    final RelDataType argYType =\n        xIndex == yIndex ? argXType : getFieldType(oldAggRel.getInput(), yIndex);\n    final RelDataType nullFilterIndexType =\n        nullFilterIndex == yIndex ? argYType : getFieldType(oldAggRel.getInput(), yIndex);\n\n    final RelDataType oldCallType =\n        typeFactory.createTypeWithNullability(oldCall.getType(),\n            argXType.isNullable() || argYType.isNullable() || nullFilterIndexType.isNullable());\n\n    final RexNode argX =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(xIndex), true);\n    final RexNode argY =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(yIndex), true);\n    final RexNode argNullFilter =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(nullFilterIndex), true);\n\n    final RexNode argXArgY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argSquaredOrdinal = lookupOrAdd(inputExprs, argXArgY);\n\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.AND,\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY)),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argNullFilter));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(\n        oldAggRel, oldCall, newCalls, aggCallMapping, argXArgY.getType(),\n        argSquaredOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXYCast = rexBuilder.ensureType(oldCallType, sumXY, true);\n\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall,\n        newCalls, aggCallMapping, rexBuilder, xIndex, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = xIndex == yIndex\n        ? sumX\n        : getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n            aggCallMapping, rexBuilder, yIndex, argXAndYNotNullFilterOrdinal);\n\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(xIndex), ImmutableList.of(argXType), argXAndYNotNullFilterOrdinal);\n\n    RexLiteral zero = rexBuilder.makeExactLiteral(BigDecimal.ZERO);\n    RexNode nul = rexBuilder.makeNullLiteral(zero.getType());\n    final RexNode avgSumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.CASE,\n        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS, countArg, zero), nul,\n            rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE, sumXSumY, countArg));\n    final RexNode avgSumXSumYCast = rexBuilder.ensureType(oldCallType, avgSumXSumY, true);\n    final RexNode result =\n        rexBuilder.makeCall(SqlStdOperatorTable.MINUS, sumXYCast, avgSumXSumYCast);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","date":"2020-12-08 15:07:23","endLine":732,"groupId":"15493","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"reduceRegrSzz","params":"(AggregateoldAggRel@AggregateCalloldCall@List<AggregateCall>newCalls@Map<AggregateCall@RexNode>aggCallMapping@List<RexNode>inputExprs@intxIndex@intyIndex@intnullFilterIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ef/af9af27f11ce6b0ada03de2a9865cf33486d2b.src","preCode":"  private RexNode reduceRegrSzz(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs,\n      int xIndex,\n      int yIndex,\n      int nullFilterIndex) {\n    \r\n    \r\n    \r\n\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    final RelDataType argXType = getFieldType(oldAggRel.getInput(), xIndex);\n    final RelDataType argYType =\n        xIndex == yIndex ? argXType : getFieldType(oldAggRel.getInput(), yIndex);\n    final RelDataType nullFilterIndexType =\n        nullFilterIndex == yIndex ? argYType : getFieldType(oldAggRel.getInput(), yIndex);\n\n    final RelDataType oldCallType =\n        typeFactory.createTypeWithNullability(oldCall.getType(),\n            argXType.isNullable() || argYType.isNullable() || nullFilterIndexType.isNullable());\n\n    final RexNode argX =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(xIndex), true);\n    final RexNode argY =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(yIndex), true);\n    final RexNode argNullFilter =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(nullFilterIndex), true);\n\n    final RexNode argXArgY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argSquaredOrdinal = lookupOrAdd(inputExprs, argXArgY);\n\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.AND,\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY)),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argNullFilter));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(\n        oldAggRel, oldCall, newCalls, aggCallMapping, argXArgY.getType(),\n        argSquaredOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXYCast = rexBuilder.ensureType(oldCallType, sumXY, true);\n\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall,\n        newCalls, aggCallMapping, rexBuilder, xIndex, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = xIndex == yIndex\n        ? sumX\n        : getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n            aggCallMapping, rexBuilder, yIndex, argXAndYNotNullFilterOrdinal);\n\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(xIndex), ImmutableList.of(argXType), argXAndYNotNullFilterOrdinal);\n\n    RexLiteral zero = rexBuilder.makeExactLiteral(BigDecimal.ZERO);\n    RexNode nul = rexBuilder.makeNullLiteral(zero.getType());\n    final RexNode avgSumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.CASE,\n        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS, countArg, zero), nul,\n            rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE, sumXSumY, countArg));\n    final RexNode avgSumXSumYCast = rexBuilder.ensureType(oldCallType, avgSumXSumY, true);\n    final RexNode result =\n        rexBuilder.makeCall(SqlStdOperatorTable.MINUS, sumXYCast, avgSumXSumYCast);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"M"},{"authorDate":"2020-12-02 05:40:39","commitOrder":3,"curCode":"  private static RexNode reduceCovariance(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      boolean biased,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    assert oldCall.getArgList().size() == 2 : oldCall.getArgList();\n    final int argXOrdinal = oldCall.getArgList().get(0);\n    final int argYOrdinal = oldCall.getArgList().get(1);\n    final RelDataType argXOrdinalType = getFieldType(oldAggRel.getInput(), argXOrdinal);\n    final RelDataType argYOrdinalType = getFieldType(oldAggRel.getInput(), argYOrdinal);\n    final RelDataType oldCallType = typeFactory.createTypeWithNullability(oldCall.getType(),\n        argXOrdinalType.isNullable() || argYOrdinalType.isNullable());\n    final RexNode argX = rexBuilder.ensureType(oldCallType, inputExprs.get(argXOrdinal), true);\n    final RexNode argY = rexBuilder.ensureType(oldCallType, inputExprs.get(argYOrdinal), true);\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode argXY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argXYOrdinal = lookupOrAdd(inputExprs, argXY);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(oldAggRel, oldCall, newCalls,\n        aggCallMapping, argXY.getType(), argXYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argXOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(argXOrdinal, argYOrdinal),\n        ImmutableList.of(argXOrdinalType, argYOrdinalType),\n        argXAndYNotNullFilterOrdinal);\n    final RexNode result = divide(biased, rexBuilder, sumXY, sumXSumY, countArg);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","date":"2020-12-08 15:07:23","endLine":779,"groupId":"15492","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"reduceCovariance","params":"(AggregateoldAggRel@AggregateCalloldCall@booleanbiased@List<AggregateCall>newCalls@Map<AggregateCall@RexNode>aggCallMapping@List<RexNode>inputExprs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ef/af9af27f11ce6b0ada03de2a9865cf33486d2b.src","preCode":"  private RexNode reduceCovariance(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      boolean biased,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    assert oldCall.getArgList().size() == 2 : oldCall.getArgList();\n    final int argXOrdinal = oldCall.getArgList().get(0);\n    final int argYOrdinal = oldCall.getArgList().get(1);\n    final RelDataType argXOrdinalType = getFieldType(oldAggRel.getInput(), argXOrdinal);\n    final RelDataType argYOrdinalType = getFieldType(oldAggRel.getInput(), argYOrdinal);\n    final RelDataType oldCallType = typeFactory.createTypeWithNullability(oldCall.getType(),\n        argXOrdinalType.isNullable() || argYOrdinalType.isNullable());\n    final RexNode argX = rexBuilder.ensureType(oldCallType, inputExprs.get(argXOrdinal), true);\n    final RexNode argY = rexBuilder.ensureType(oldCallType, inputExprs.get(argYOrdinal), true);\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode argXY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argXYOrdinal = lookupOrAdd(inputExprs, argXY);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(oldAggRel, oldCall, newCalls,\n        aggCallMapping, argXY.getType(), argXYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argXOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(argXOrdinal, argYOrdinal),\n        ImmutableList.of(argXOrdinalType, argYOrdinalType),\n        argXAndYNotNullFilterOrdinal);\n    final RexNode result = divide(biased, rexBuilder, sumXY, sumXSumY, countArg);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":734,"status":"M"}],"commitId":"404f968f6079360621896e6ee20ec12488a40bc2","commitMessage":"@@@[CALCITE-4422] Add MethodCanBeStatic check via ErrorProne\n\nprivate and final methods can be made static.  so it is clear they do not access instance fields\n","date":"2020-12-08 15:07:23","modifiedFileCount":"169","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2021-02-01 04:37:37","codes":[{"authorDate":"2021-02-01 04:37:37","commitOrder":4,"curCode":"  private static RexNode reduceRegrSzz(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs,\n      int xIndex,\n      int yIndex,\n      int nullFilterIndex) {\n    \r\n    \r\n    \r\n\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    final IntPredicate fieldIsNullable = oldAggRel.getInput()::fieldIsNullable;\n\n    final RelDataType oldCallType =\n        typeFactory.createTypeWithNullability(oldCall.getType(),\n            fieldIsNullable.test(xIndex)\n                || fieldIsNullable.test(yIndex)\n                || fieldIsNullable.test(nullFilterIndex));\n\n    final RexNode argX =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(xIndex), true);\n    final RexNode argY =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(yIndex), true);\n    final RexNode argNullFilter =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(nullFilterIndex), true);\n\n    final RexNode argXArgY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argSquaredOrdinal = lookupOrAdd(inputExprs, argXArgY);\n\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.AND,\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY)),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argNullFilter));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(\n        oldAggRel, oldCall, newCalls, aggCallMapping, argXArgY.getType(),\n        argSquaredOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXYCast = rexBuilder.ensureType(oldCallType, sumXY, true);\n\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall,\n        newCalls, aggCallMapping, rexBuilder, xIndex, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = xIndex == yIndex\n        ? sumX\n        : getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n            aggCallMapping, rexBuilder, yIndex, argXAndYNotNullFilterOrdinal);\n\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(xIndex), argXAndYNotNullFilterOrdinal);\n\n    RexLiteral zero = rexBuilder.makeExactLiteral(BigDecimal.ZERO);\n    RexNode nul = rexBuilder.makeNullLiteral(zero.getType());\n    final RexNode avgSumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.CASE,\n        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS, countArg, zero), nul,\n            rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE, sumXSumY, countArg));\n    final RexNode avgSumXSumYCast = rexBuilder.ensureType(oldCallType, avgSumXSumY, true);\n    final RexNode result =\n        rexBuilder.makeCall(SqlStdOperatorTable.MINUS, sumXYCast, avgSumXSumYCast);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","date":"2021-02-12 05:40:07","endLine":711,"groupId":"102023","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"reduceRegrSzz","params":"(AggregateoldAggRel@AggregateCalloldCall@List<AggregateCall>newCalls@Map<AggregateCall@RexNode>aggCallMapping@List<RexNode>inputExprs@intxIndex@intyIndex@intnullFilterIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e3/51824245f6a2e262b242c3026cc9ef64012c2f.src","preCode":"  private static RexNode reduceRegrSzz(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs,\n      int xIndex,\n      int yIndex,\n      int nullFilterIndex) {\n    \r\n    \r\n    \r\n\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    final RelDataType argXType = getFieldType(oldAggRel.getInput(), xIndex);\n    final RelDataType argYType =\n        xIndex == yIndex ? argXType : getFieldType(oldAggRel.getInput(), yIndex);\n    final RelDataType nullFilterIndexType =\n        nullFilterIndex == yIndex ? argYType : getFieldType(oldAggRel.getInput(), yIndex);\n\n    final RelDataType oldCallType =\n        typeFactory.createTypeWithNullability(oldCall.getType(),\n            argXType.isNullable() || argYType.isNullable() || nullFilterIndexType.isNullable());\n\n    final RexNode argX =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(xIndex), true);\n    final RexNode argY =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(yIndex), true);\n    final RexNode argNullFilter =\n        rexBuilder.ensureType(oldCallType, inputExprs.get(nullFilterIndex), true);\n\n    final RexNode argXArgY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argSquaredOrdinal = lookupOrAdd(inputExprs, argXArgY);\n\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.AND,\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY)),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argNullFilter));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(\n        oldAggRel, oldCall, newCalls, aggCallMapping, argXArgY.getType(),\n        argSquaredOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXYCast = rexBuilder.ensureType(oldCallType, sumXY, true);\n\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall,\n        newCalls, aggCallMapping, rexBuilder, xIndex, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = xIndex == yIndex\n        ? sumX\n        : getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n            aggCallMapping, rexBuilder, yIndex, argXAndYNotNullFilterOrdinal);\n\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(xIndex), ImmutableList.of(argXType), argXAndYNotNullFilterOrdinal);\n\n    RexLiteral zero = rexBuilder.makeExactLiteral(BigDecimal.ZERO);\n    RexNode nul = rexBuilder.makeNullLiteral(zero.getType());\n    final RexNode avgSumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.CASE,\n        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS, countArg, zero), nul,\n            rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE, sumXSumY, countArg));\n    final RexNode avgSumXSumYCast = rexBuilder.ensureType(oldCallType, avgSumXSumY, true);\n    final RexNode result =\n        rexBuilder.makeCall(SqlStdOperatorTable.MINUS, sumXYCast, avgSumXSumYCast);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":645,"status":"M"},{"authorDate":"2021-02-01 04:37:37","commitOrder":4,"curCode":"  private static RexNode reduceCovariance(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      boolean biased,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    assert oldCall.getArgList().size() == 2 : oldCall.getArgList();\n    final int argXOrdinal = oldCall.getArgList().get(0);\n    final int argYOrdinal = oldCall.getArgList().get(1);\n    final IntPredicate fieldIsNullable = oldAggRel.getInput()::fieldIsNullable;\n    final RelDataType oldCallType =\n        typeFactory.createTypeWithNullability(oldCall.getType(),\n            fieldIsNullable.test(argXOrdinal)\n                || fieldIsNullable.test(argYOrdinal));\n    final RexNode argX = rexBuilder.ensureType(oldCallType, inputExprs.get(argXOrdinal), true);\n    final RexNode argY = rexBuilder.ensureType(oldCallType, inputExprs.get(argYOrdinal), true);\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode argXY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argXYOrdinal = lookupOrAdd(inputExprs, argXY);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(oldAggRel, oldCall, newCalls,\n        aggCallMapping, argXY.getType(), argXYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argXOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(argXOrdinal, argYOrdinal),\n        argXAndYNotNullFilterOrdinal);\n    final RexNode result = divide(biased, rexBuilder, sumXY, sumXSumY, countArg);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","date":"2021-02-12 05:40:07","endLine":758,"groupId":"102023","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"reduceCovariance","params":"(AggregateoldAggRel@AggregateCalloldCall@booleanbiased@List<AggregateCall>newCalls@Map<AggregateCall@RexNode>aggCallMapping@List<RexNode>inputExprs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e3/51824245f6a2e262b242c3026cc9ef64012c2f.src","preCode":"  private static RexNode reduceCovariance(\n      Aggregate oldAggRel,\n      AggregateCall oldCall,\n      boolean biased,\n      List<AggregateCall> newCalls,\n      Map<AggregateCall, RexNode> aggCallMapping,\n      List<RexNode> inputExprs) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelOptCluster cluster = oldAggRel.getCluster();\n    final RexBuilder rexBuilder = cluster.getRexBuilder();\n    final RelDataTypeFactory typeFactory = cluster.getTypeFactory();\n    assert oldCall.getArgList().size() == 2 : oldCall.getArgList();\n    final int argXOrdinal = oldCall.getArgList().get(0);\n    final int argYOrdinal = oldCall.getArgList().get(1);\n    final RelDataType argXOrdinalType = getFieldType(oldAggRel.getInput(), argXOrdinal);\n    final RelDataType argYOrdinalType = getFieldType(oldAggRel.getInput(), argYOrdinal);\n    final RelDataType oldCallType = typeFactory.createTypeWithNullability(oldCall.getType(),\n        argXOrdinalType.isNullable() || argYOrdinalType.isNullable());\n    final RexNode argX = rexBuilder.ensureType(oldCallType, inputExprs.get(argXOrdinal), true);\n    final RexNode argY = rexBuilder.ensureType(oldCallType, inputExprs.get(argYOrdinal), true);\n    final RexNode argXAndYNotNullFilter = rexBuilder.makeCall(SqlStdOperatorTable.AND,\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argX),\n        rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, argY));\n    final int argXAndYNotNullFilterOrdinal = lookupOrAdd(inputExprs, argXAndYNotNullFilter);\n    final RexNode argXY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, argX, argY);\n    final int argXYOrdinal = lookupOrAdd(inputExprs, argXY);\n    final RexNode sumXY = getSumAggregatedRexNodeWithBinding(oldAggRel, oldCall, newCalls,\n        aggCallMapping, argXY.getType(), argXYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumX = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argXOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumY = getSumAggregatedRexNode(oldAggRel, oldCall, newCalls,\n        aggCallMapping, rexBuilder, argYOrdinal, argXAndYNotNullFilterOrdinal);\n    final RexNode sumXSumY = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, sumX, sumY);\n    final RexNode countArg = getRegrCountRexNode(oldAggRel, oldCall, newCalls, aggCallMapping,\n        ImmutableIntList.of(argXOrdinal, argYOrdinal),\n        ImmutableList.of(argXOrdinalType, argYOrdinalType),\n        argXAndYNotNullFilterOrdinal);\n    final RexNode result = divide(biased, rexBuilder, sumXY, sumXSumY, countArg);\n    return rexBuilder.makeCast(oldCall.getType(), result);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":713,"status":"M"}],"commitId":"8178367ad64f6ed0e7f667122aa9b5d26e7a35f6","commitMessage":"@@@Refactor: Change RexBuilder.addAggCall() to use a nullability predicate rather than type\n","date":"2021-02-12 05:40:07","modifiedFileCount":"5","status":"M","submitter":"Julian Hyde"}]
