[{"authorTime":"2015-06-11 17:48:52","codes":[{"authorDate":"2015-06-11 17:48:52","commitOrder":1,"curCode":"  @Test public void testSimpleGreaterCond() {\n    RexNode node1 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.GREATER_THAN,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    RexNode node2 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.GREATER_THAN,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(30)));\n\n    RexNode node3 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(30)));\n\n    RexNode node4 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    RexNode node5 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.EQUALS,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(30)));\n\n    RexNode node6 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.NOT_EQUALS,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    checkImplies(node2, node1);\n    checkNotImplies(node1, node2);\n    checkNotImplies(node1, node3);\n    checkImplies(node3, node1);\n    checkImplies(node5, node1);\n    checkNotImplies(node1, node5);\n    checkNotImplies(node1, node6);\n    checkNotImplies(node4, node6);\n    \r\n    \r\n    \r\n  }\n","date":"2015-07-17 04:22:39","endLine":228,"groupId":"4559","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleGreaterCond","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7e/693b033d2725335ef2867c0798d84adecc9f3d.src","preCode":"  @Test public void testSimpleGreaterCond() {\n    RexNode node1 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.GREATER_THAN,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    RexNode node2 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.GREATER_THAN,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(30)));\n\n    RexNode node3 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(30)));\n\n    RexNode node4 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    RexNode node5 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.EQUALS,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(30)));\n\n    RexNode node6 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.NOT_EQUALS,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    checkImplies(node2, node1);\n    checkNotImplies(node1, node2);\n    checkNotImplies(node1, node3);\n    checkImplies(node3, node1);\n    checkImplies(node5, node1);\n    checkNotImplies(node1, node5);\n    checkNotImplies(node1, node6);\n    checkNotImplies(node4, node6);\n    \r\n    \r\n    \r\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexImplicationCheckerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"},{"authorDate":"2015-06-11 17:48:52","commitOrder":1,"curCode":"  @Test public void testSimpleLesserCond() {\n    RexNode node1 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.LESS_THAN,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    RexNode node2 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.LESS_THAN,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(30)));\n\n    RexNode node3 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.LESS_THAN_OR_EQUAL,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(30)));\n\n    RexNode node4 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.LESS_THAN_OR_EQUAL,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    RexNode node5 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.EQUALS,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    RexNode node6 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.NOT_EQUALS,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    checkImplies(node1, node2);\n    checkNotImplies(node2, node1);\n    checkImplies(node1, node3);\n    checkNotImplies(node3, node1);\n    checkImplies(node5, node2);\n    checkNotImplies(node2, node5);\n    checkNotImplies(node1, node5);\n    checkNotImplies(node1, node6);\n    checkNotImplies(node4, node6);\n    \r\n    \r\n    \r\n  }\n","date":"2015-07-17 04:22:39","endLine":279,"groupId":"4559","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleLesserCond","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7e/693b033d2725335ef2867c0798d84adecc9f3d.src","preCode":"  @Test public void testSimpleLesserCond() {\n    RexNode node1 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.LESS_THAN,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    RexNode node2 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.LESS_THAN,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(30)));\n\n    RexNode node3 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.LESS_THAN_OR_EQUAL,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(30)));\n\n    RexNode node4 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.LESS_THAN_OR_EQUAL,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    RexNode node5 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.EQUALS,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    RexNode node6 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.NOT_EQUALS,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    checkImplies(node1, node2);\n    checkNotImplies(node2, node1);\n    checkImplies(node1, node3);\n    checkNotImplies(node3, node1);\n    checkImplies(node5, node2);\n    checkNotImplies(node2, node5);\n    checkNotImplies(node1, node5);\n    checkNotImplies(node1, node6);\n    checkNotImplies(node4, node6);\n    \r\n    \r\n    \r\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexImplicationCheckerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"B"}],"commitId":"4a9b19390b2f9ab5a6d3bc2340c323d3a39cfa80","commitMessage":"@@@[CALCITE-786] Detect if materialized view can be used to rewrite a query in non-trivial cases (Amogh Margoor)\n\nClose apache/incubator-calcite#102\n","date":"2015-07-17 04:22:39","modifiedFileCount":"6","status":"B","submitter":"Amogh Margoor"},{"authorTime":"2015-07-16 12:48:51","codes":[{"authorDate":"2015-07-16 12:48:51","commitOrder":2,"curCode":"  @Test public void testSimpleGreaterCond() {\n    final Fixture f = new Fixture();\n    final RexNode node1 = f.gt(f.i, f.literal(10));\n    final RexNode node2 = f.gt(f.i, f.literal(30));\n    final RexNode node3 = f.ge(f.i, f.literal(30));\n    final RexNode node4 = f.ge(f.i, f.literal(10));\n    final RexNode node5 = f.eq(f.i, f.literal(30));\n    final RexNode node6 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(node2, node1);\n    f.checkNotImplies(node1, node2);\n    f.checkNotImplies(node1, node3);\n    f.checkImplies(node3, node1);\n    f.checkImplies(node5, node1);\n    f.checkNotImplies(node1, node5);\n    f.checkNotImplies(node1, node6);\n    f.checkNotImplies(node4, node6);\n    \r\n    \r\n    \r\n  }\n","date":"2015-07-17 06:03:20","endLine":82,"groupId":"1776","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleGreaterCond","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/0798ed889c6a965e042ed4b36ce226c97cb586.src","preCode":"  @Test public void testSimpleGreaterCond() {\n    RexNode node1 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.GREATER_THAN,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    RexNode node2 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.GREATER_THAN,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(30)));\n\n    RexNode node3 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(30)));\n\n    RexNode node4 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    RexNode node5 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.EQUALS,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(30)));\n\n    RexNode node6 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.NOT_EQUALS,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    checkImplies(node2, node1);\n    checkNotImplies(node1, node2);\n    checkNotImplies(node1, node3);\n    checkImplies(node3, node1);\n    checkImplies(node5, node1);\n    checkNotImplies(node1, node5);\n    checkNotImplies(node1, node6);\n    checkNotImplies(node4, node6);\n    \r\n    \r\n    \r\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexImplicationCheckerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2015-07-16 12:48:51","commitOrder":2,"curCode":"  @Test public void testSimpleLesserCond() {\n    final Fixture f = new Fixture();\n    final RexNode node1 = f.lt(f.i, f.literal(10));\n    final RexNode node2 = f.lt(f.i, f.literal(30));\n    final RexNode node3 = f.le(f.i, f.literal(30));\n    final RexNode node4 = f.le(f.i, f.literal(10));\n    final RexNode node5 = f.eq(f.i, f.literal(10));\n    final RexNode node6 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(node1, node2);\n    f.checkNotImplies(node2, node1);\n    f.checkImplies(node1, node3);\n    f.checkNotImplies(node3, node1);\n    f.checkImplies(node5, node2);\n    f.checkNotImplies(node2, node5);\n    f.checkNotImplies(node1, node5);\n    f.checkNotImplies(node1, node6);\n    f.checkNotImplies(node4, node6);\n    \r\n    \r\n    \r\n  }\n","date":"2015-07-17 06:03:20","endLine":105,"groupId":"1774","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleLesserCond","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/0798ed889c6a965e042ed4b36ce226c97cb586.src","preCode":"  @Test public void testSimpleLesserCond() {\n    RexNode node1 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.LESS_THAN,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    RexNode node2 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.LESS_THAN,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(30)));\n\n    RexNode node3 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.LESS_THAN_OR_EQUAL,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(30)));\n\n    RexNode node4 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.LESS_THAN_OR_EQUAL,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    RexNode node5 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.EQUALS,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    RexNode node6 =\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.NOT_EQUALS,\n            i,\n            rexBuilder.makeExactLiteral(new BigDecimal(10)));\n\n    checkImplies(node1, node2);\n    checkNotImplies(node2, node1);\n    checkImplies(node1, node3);\n    checkNotImplies(node3, node1);\n    checkImplies(node5, node2);\n    checkNotImplies(node2, node5);\n    checkNotImplies(node1, node5);\n    checkNotImplies(node1, node6);\n    checkNotImplies(node4, node6);\n    \r\n    \r\n    \r\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexImplicationCheckerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"5a365609c0d050e5e832449bdadad1e309f0f204","commitMessage":"@@@Fix up previous commit; add some tests for constant reduction\n","date":"2015-07-17 06:03:20","modifiedFileCount":"13","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-11-21 04:48:39","codes":[{"authorDate":"2016-11-21 04:48:39","commitOrder":3,"curCode":"  @Test public void testSimpleGreaterCond() {\n    final Fixture f = new Fixture();\n    final RexNode iGt10 = f.gt(f.i, f.literal(10));\n    final RexNode iGt30 = f.gt(f.i, f.literal(30));\n    final RexNode iGe30 = f.ge(f.i, f.literal(30));\n    final RexNode iGe10 = f.ge(f.i, f.literal(10));\n    final RexNode iEq30 = f.eq(f.i, f.literal(30));\n    final RexNode iNe10 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(iGt30, iGt10);\n    f.checkNotImplies(iGt10, iGt30);\n    f.checkNotImplies(iGt10, iGe30);\n    f.checkImplies(iGe30, iGt10);\n    f.checkImplies(iEq30, iGt10);\n    f.checkNotImplies(iGt10, iEq30);\n    f.checkNotImplies(iGt10, iNe10);\n    f.checkNotImplies(iGe10, iNe10);\n    \r\n    f.checkImplies(iGt10, iGt10);\n    f.checkImplies(iGe30, iGe30);\n  }\n","date":"2016-11-21 06:38:52","endLine":82,"groupId":"10339","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleGreaterCond","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/44/6401992fc7051f3808a4082b1169020392fba4.src","preCode":"  @Test public void testSimpleGreaterCond() {\n    final Fixture f = new Fixture();\n    final RexNode node1 = f.gt(f.i, f.literal(10));\n    final RexNode node2 = f.gt(f.i, f.literal(30));\n    final RexNode node3 = f.ge(f.i, f.literal(30));\n    final RexNode node4 = f.ge(f.i, f.literal(10));\n    final RexNode node5 = f.eq(f.i, f.literal(30));\n    final RexNode node6 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(node2, node1);\n    f.checkNotImplies(node1, node2);\n    f.checkNotImplies(node1, node3);\n    f.checkImplies(node3, node1);\n    f.checkImplies(node5, node1);\n    f.checkNotImplies(node1, node5);\n    f.checkNotImplies(node1, node6);\n    f.checkNotImplies(node4, node6);\n    \r\n    \r\n    \r\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexImplicationCheckerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2016-11-21 04:48:39","commitOrder":3,"curCode":"  @Test public void testSimpleLesserCond() {\n    final Fixture f = new Fixture();\n    final RexNode iLt10 = f.lt(f.i, f.literal(10));\n    final RexNode iLt30 = f.lt(f.i, f.literal(30));\n    final RexNode iLe30 = f.le(f.i, f.literal(30));\n    final RexNode iLe10 = f.le(f.i, f.literal(10));\n    final RexNode iEq10 = f.eq(f.i, f.literal(10));\n    final RexNode iNe10 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(iLt10, iLt30);\n    f.checkNotImplies(iLt30, iLt10);\n    f.checkImplies(iLt10, iLe30);\n    f.checkNotImplies(iLe30, iLt10);\n    f.checkImplies(iEq10, iLt30);\n    f.checkNotImplies(iLt30, iEq10);\n    f.checkNotImplies(iLt10, iEq10);\n    f.checkNotImplies(iLt10, iNe10);\n    f.checkNotImplies(iLe10, iNe10);\n    \r\n    f.checkImplies(iLt10, iLt10);\n    f.checkImplies(iLe30, iLe30);\n  }\n","date":"2016-11-21 06:38:52","endLine":105,"groupId":"10339","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleLesserCond","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/44/6401992fc7051f3808a4082b1169020392fba4.src","preCode":"  @Test public void testSimpleLesserCond() {\n    final Fixture f = new Fixture();\n    final RexNode node1 = f.lt(f.i, f.literal(10));\n    final RexNode node2 = f.lt(f.i, f.literal(30));\n    final RexNode node3 = f.le(f.i, f.literal(30));\n    final RexNode node4 = f.le(f.i, f.literal(10));\n    final RexNode node5 = f.eq(f.i, f.literal(10));\n    final RexNode node6 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(node1, node2);\n    f.checkNotImplies(node2, node1);\n    f.checkImplies(node1, node3);\n    f.checkNotImplies(node3, node1);\n    f.checkImplies(node5, node2);\n    f.checkNotImplies(node2, node5);\n    f.checkNotImplies(node1, node5);\n    f.checkNotImplies(node1, node6);\n    f.checkNotImplies(node4, node6);\n    \r\n    \r\n    \r\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexImplicationCheckerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"dccbb55ae4ef904c4242fba57e173b6536a32ed5","commitMessage":"@@@[CALCITE-1497] Infer IS NOT NULL.  and project predicates\n","date":"2016-11-21 06:38:52","modifiedFileCount":"4","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testSimpleGreaterCond() {\n    final Fixture f = new Fixture();\n    final RexNode iGt10 = f.gt(f.i, f.literal(10));\n    final RexNode iGt30 = f.gt(f.i, f.literal(30));\n    final RexNode iGe30 = f.ge(f.i, f.literal(30));\n    final RexNode iGe10 = f.ge(f.i, f.literal(10));\n    final RexNode iEq30 = f.eq(f.i, f.literal(30));\n    final RexNode iNe10 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(iGt30, iGt10);\n    f.checkNotImplies(iGt10, iGt30);\n    f.checkNotImplies(iGt10, iGe30);\n    f.checkImplies(iGe30, iGt10);\n    f.checkImplies(iEq30, iGt10);\n    f.checkNotImplies(iGt10, iEq30);\n    f.checkNotImplies(iGt10, iNe10);\n    f.checkNotImplies(iGe10, iNe10);\n    \r\n    f.checkImplies(iGt10, iGt10);\n    f.checkImplies(iGe30, iGe30);\n  }\n","date":"2020-04-06 04:57:49","endLine":88,"groupId":"101081","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleGreaterCond","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/42/41444dfdd43805caece994cd16a03e6a7e4912.src","preCode":"  @Test public void testSimpleGreaterCond() {\n    final Fixture f = new Fixture();\n    final RexNode iGt10 = f.gt(f.i, f.literal(10));\n    final RexNode iGt30 = f.gt(f.i, f.literal(30));\n    final RexNode iGe30 = f.ge(f.i, f.literal(30));\n    final RexNode iGe10 = f.ge(f.i, f.literal(10));\n    final RexNode iEq30 = f.eq(f.i, f.literal(30));\n    final RexNode iNe10 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(iGt30, iGt10);\n    f.checkNotImplies(iGt10, iGt30);\n    f.checkNotImplies(iGt10, iGe30);\n    f.checkImplies(iGe30, iGt10);\n    f.checkImplies(iEq30, iGt10);\n    f.checkNotImplies(iGt10, iEq30);\n    f.checkNotImplies(iGt10, iNe10);\n    f.checkNotImplies(iGe10, iNe10);\n    \r\n    f.checkImplies(iGt10, iGt10);\n    f.checkImplies(iGe30, iGe30);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexImplicationCheckerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testSimpleLesserCond() {\n    final Fixture f = new Fixture();\n    final RexNode iLt10 = f.lt(f.i, f.literal(10));\n    final RexNode iLt30 = f.lt(f.i, f.literal(30));\n    final RexNode iLe30 = f.le(f.i, f.literal(30));\n    final RexNode iLe10 = f.le(f.i, f.literal(10));\n    final RexNode iEq10 = f.eq(f.i, f.literal(10));\n    final RexNode iNe10 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(iLt10, iLt30);\n    f.checkNotImplies(iLt30, iLt10);\n    f.checkImplies(iLt10, iLe30);\n    f.checkNotImplies(iLe30, iLt10);\n    f.checkImplies(iEq10, iLt30);\n    f.checkNotImplies(iLt30, iEq10);\n    f.checkNotImplies(iLt10, iEq10);\n    f.checkNotImplies(iLt10, iNe10);\n    f.checkNotImplies(iLe10, iNe10);\n    \r\n    f.checkImplies(iLt10, iLt10);\n    f.checkImplies(iLe30, iLe30);\n  }\n","date":"2020-04-06 04:57:49","endLine":111,"groupId":"101081","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleLesserCond","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/42/41444dfdd43805caece994cd16a03e6a7e4912.src","preCode":"  @Test public void testSimpleLesserCond() {\n    final Fixture f = new Fixture();\n    final RexNode iLt10 = f.lt(f.i, f.literal(10));\n    final RexNode iLt30 = f.lt(f.i, f.literal(30));\n    final RexNode iLe30 = f.le(f.i, f.literal(30));\n    final RexNode iLe10 = f.le(f.i, f.literal(10));\n    final RexNode iEq10 = f.eq(f.i, f.literal(10));\n    final RexNode iNe10 = f.ne(f.i, f.literal(10));\n\n    f.checkImplies(iLt10, iLt30);\n    f.checkNotImplies(iLt30, iLt10);\n    f.checkImplies(iLt10, iLe30);\n    f.checkNotImplies(iLe30, iLt10);\n    f.checkImplies(iEq10, iLt30);\n    f.checkNotImplies(iLt30, iEq10);\n    f.checkNotImplies(iLt10, iEq10);\n    f.checkNotImplies(iLt10, iNe10);\n    f.checkNotImplies(iLe10, iNe10);\n    \r\n    f.checkImplies(iLt10, iLt10);\n    f.checkImplies(iLe30, iLe30);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RexImplicationCheckerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
