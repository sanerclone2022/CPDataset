[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"DELETE FROM\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","date":"2014-11-14 09:39:34","endLine":136,"groupId":"934","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/35/33c9947bd9a6eb1b57066398f586290bffa085.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"DELETE FROM\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlDelete.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"UPDATE\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (targetColumnList != null) {\n      targetColumnList.unparse(writer, opLeft, opRight);\n    }\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    final SqlWriter.Frame setFrame =\n        writer.startList(SqlWriter.FrameTypeEnum.UPDATE_SET_LIST, \"SET\", \"\");\n    for (Pair<SqlNode, SqlNode> pair\n        : Pair.zip(getTargetColumnList(), getSourceExpressionList())) {\n      writer.sep(\",\");\n      SqlIdentifier id = (SqlIdentifier) pair.left;\n      id.unparse(writer, opLeft, opRight);\n      writer.keyword(\"=\");\n      SqlNode sourceExp = pair.right;\n      sourceExp.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(setFrame);\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","date":"2014-11-14 09:39:34","endLine":188,"groupId":"16601","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/17/3571e5045b29b22bb51d272a22371aaccfde90.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"UPDATE\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (targetColumnList != null) {\n      targetColumnList.unparse(writer, opLeft, opRight);\n    }\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    final SqlWriter.Frame setFrame =\n        writer.startList(SqlWriter.FrameTypeEnum.UPDATE_SET_LIST, \"SET\", \"\");\n    for (Pair<SqlNode, SqlNode> pair\n        : Pair.zip(getTargetColumnList(), getSourceExpressionList())) {\n      writer.sep(\",\");\n      SqlIdentifier id = (SqlIdentifier) pair.left;\n      id.unparse(writer, opLeft, opRight);\n      writer.keyword(\"=\");\n      SqlNode sourceExp = pair.right;\n      sourceExp.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(setFrame);\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlUpdate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2015-04-17 05:50:06","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"DELETE FROM\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","date":"2014-11-14 09:39:34","endLine":136,"groupId":"934","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/35/33c9947bd9a6eb1b57066398f586290bffa085.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"DELETE FROM\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlDelete.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"},{"authorDate":"2015-04-17 05:50:06","commitOrder":2,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"UPDATE\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    final SqlWriter.Frame setFrame =\n        writer.startList(SqlWriter.FrameTypeEnum.UPDATE_SET_LIST, \"SET\", \"\");\n    for (Pair<SqlNode, SqlNode> pair\n        : Pair.zip(getTargetColumnList(), getSourceExpressionList())) {\n      writer.sep(\",\");\n      SqlIdentifier id = (SqlIdentifier) pair.left;\n      id.unparse(writer, opLeft, opRight);\n      writer.keyword(\"=\");\n      SqlNode sourceExp = pair.right;\n      sourceExp.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(setFrame);\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","date":"2015-04-17 15:19:58","endLine":186,"groupId":"16601","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5d/8ebfafd0259b0372b286de17b2eee498d48c97.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"UPDATE\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (targetColumnList != null) {\n      targetColumnList.unparse(writer, opLeft, opRight);\n    }\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    final SqlWriter.Frame setFrame =\n        writer.startList(SqlWriter.FrameTypeEnum.UPDATE_SET_LIST, \"SET\", \"\");\n    for (Pair<SqlNode, SqlNode> pair\n        : Pair.zip(getTargetColumnList(), getSourceExpressionList())) {\n      writer.sep(\",\");\n      SqlIdentifier id = (SqlIdentifier) pair.left;\n      id.unparse(writer, opLeft, opRight);\n      writer.keyword(\"=\");\n      SqlNode sourceExp = pair.right;\n      sourceExp.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(setFrame);\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlUpdate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"057f847bf6a918ee767f597be2705d70145cabac","commitMessage":"@@@[CALCITE-686] SqlNode.unparse produces invalid SQL\n\nEnable SqlUnParserTest and RelOptPlanReaderTest\n","date":"2015-04-17 15:19:58","modifiedFileCount":"14","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"DELETE FROM\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    SqlIdentifier alias = this.alias;\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    SqlNode condition = this.condition;\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","date":"2020-11-30 06:45:33","endLine":144,"groupId":"101873","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/32c1126b36ba382f1c5bcb2c67b96ae272e5d7.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"DELETE FROM\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlDelete.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"UPDATE\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    SqlIdentifier alias = this.alias;\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    final SqlWriter.Frame setFrame =\n        writer.startList(SqlWriter.FrameTypeEnum.UPDATE_SET_LIST, \"SET\", \"\");\n    for (Pair<SqlNode, SqlNode> pair\n        : Pair.zip(getTargetColumnList(), getSourceExpressionList())) {\n      writer.sep(\",\");\n      SqlIdentifier id = (SqlIdentifier) pair.left;\n      id.unparse(writer, opLeft, opRight);\n      writer.keyword(\"=\");\n      SqlNode sourceExp = pair.right;\n      sourceExp.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(setFrame);\n    SqlNode condition = this.condition;\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","date":"2020-11-30 06:45:33","endLine":187,"groupId":"101873","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"unparse","params":"(SqlWriterwriter@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/50/e051dea3e9bf02c81f3f16e22a45cd6c7f5111.src","preCode":"  @Override public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n    final SqlWriter.Frame frame =\n        writer.startList(SqlWriter.FrameTypeEnum.SELECT, \"UPDATE\", \"\");\n    final int opLeft = getOperator().getLeftPrec();\n    final int opRight = getOperator().getRightPrec();\n    targetTable.unparse(writer, opLeft, opRight);\n    if (alias != null) {\n      writer.keyword(\"AS\");\n      alias.unparse(writer, opLeft, opRight);\n    }\n    final SqlWriter.Frame setFrame =\n        writer.startList(SqlWriter.FrameTypeEnum.UPDATE_SET_LIST, \"SET\", \"\");\n    for (Pair<SqlNode, SqlNode> pair\n        : Pair.zip(getTargetColumnList(), getSourceExpressionList())) {\n      writer.sep(\",\");\n      SqlIdentifier id = (SqlIdentifier) pair.left;\n      id.unparse(writer, opLeft, opRight);\n      writer.keyword(\"=\");\n      SqlNode sourceExp = pair.right;\n      sourceExp.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(setFrame);\n    if (condition != null) {\n      writer.sep(\"WHERE\");\n      condition.unparse(writer, opLeft, opRight);\n    }\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlUpdate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
