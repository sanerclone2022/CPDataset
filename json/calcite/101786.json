[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    writer.keyword(\"CURSOR\");\n    final SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n    assert call.operandCount() == 1;\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.endList(frame);\n  }\n","date":"2014-11-14 09:39:34","endLine":63,"groupId":"15938","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5e/a0fff11ce321d3fd79a71592724f925e209ce9.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    writer.keyword(\"CURSOR\");\n    final SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n    assert call.operandCount() == 1;\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlCursorConstructor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    writer.keyword(\"MULTISET\");\n    final SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n    assert call.operandCount() == 1;\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.endList(frame);\n  }\n","date":"2014-11-14 09:39:34","endLine":119,"groupId":"15938","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f0/6d74402031c5d950ebdd1f10d656e330e33edc.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    writer.keyword(\"MULTISET\");\n    final SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n    assert call.operandCount() == 1;\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlMultisetQueryConstructor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2015-08-28 06:17:21","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    writer.keyword(\"CURSOR\");\n    final SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n    assert call.operandCount() == 1;\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.endList(frame);\n  }\n","date":"2014-11-14 09:39:34","endLine":63,"groupId":"15938","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5e/a0fff11ce321d3fd79a71592724f925e209ce9.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    writer.keyword(\"CURSOR\");\n    final SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n    assert call.operandCount() == 1;\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlCursorConstructor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2015-08-28 06:17:21","commitOrder":2,"curCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    writer.keyword(getName());\n    final SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n    assert call.operandCount() == 1;\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.endList(frame);\n  }\n","date":"2016-01-10 16:51:24","endLine":130,"groupId":"15938","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9c/58a30703b757fe104bb34dc29da97057fb26fd.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    writer.keyword(\"MULTISET\");\n    final SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n    assert call.operandCount() == 1;\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlMultisetQueryConstructor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"4762b889699f5fb963749dca8b3106c17f44f2a9","commitMessage":"@@@[CALCITE-854] Implement UNNEST ... WITH ORDINALITY\n\nAlso allow UNNEST applied to ARRAY types.  and lay groundwork for UNNEST with more than one argument.\n\nImprove the error location for the \"List of column aliases must have same degree as table\" message.\n","date":"2016-01-10 16:51:24","modifiedFileCount":"20","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  @Override public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    writer.keyword(\"CURSOR\");\n    final SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n    assert call.operandCount() == 1;\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.endList(frame);\n  }\n","date":"2020-10-07 05:42:47","endLine":69,"groupId":"101786","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7d/23c4123eab53b35c9eb8d300027116c906ff5a.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    writer.keyword(\"CURSOR\");\n    final SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n    assert call.operandCount() == 1;\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlCursorConstructor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  @Override public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    writer.keyword(getName());\n    final SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n    assert call.operandCount() == 1;\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.endList(frame);\n  }\n","date":"2020-10-07 05:42:47","endLine":126,"groupId":"101786","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unparse","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2e/aec975a9bd10a0affbcb9f44dc0b73883407f5.src","preCode":"  public void unparse(\n      SqlWriter writer,\n      SqlCall call,\n      int leftPrec,\n      int rightPrec) {\n    writer.keyword(getName());\n    final SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n    assert call.operandCount() == 1;\n    call.operand(0).unparse(writer, leftPrec, rightPrec);\n    writer.endList(frame);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/fun/SqlMultisetQueryConstructor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
