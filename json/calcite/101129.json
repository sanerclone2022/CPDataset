[{"authorTime":"2017-03-10 20:53:51","codes":[{"authorDate":"2015-07-12 05:56:42","commitOrder":4,"curCode":"  @Test public void testPullUpPredicatesFromAggregation() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select 1 as a, 2 as b from emp)subq\\n\"\n        + \"group by a\";\n    final Aggregate rel = (Aggregate) convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList inputSet = mq.getPulledUpPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates, sortsAs(\"[=($0, 1)]\"));\n  }\n","date":"2016-01-10 16:51:25","endLine":1291,"groupId":"11204","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPullUpPredicatesFromAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/cd23b3aab9084129ca47bf4bd5480d0b3c35d4.src","preCode":"  @Test public void testPullUpPredicatesFromAggregation() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select 1 as a, 2 as b from emp)subq\\n\"\n        + \"group by a\";\n    final Aggregate rel = (Aggregate) convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList inputSet = mq.getPulledUpPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates, sortsAs(\"[=($0, 1)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1282,"status":"NB"},{"authorDate":"2017-03-10 20:53:51","commitOrder":4,"curCode":"  private void checkAllPredicates(RelOptCluster cluster, RelOptTable empTable,\n      RelOptTable deptTable) {\n    final RelBuilder relBuilder = RelBuilder.proto().create(cluster, null);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final LogicalTableScan empScan = LogicalTableScan.create(cluster, empTable);\n    relBuilder.push(empScan);\n\n    RelOptPredicateList predicates =\n        mq.getAllPredicates(empScan);\n    assertThat(predicates.pulledUpPredicates.isEmpty(), is(true));\n\n    relBuilder.filter(\n        relBuilder.equals(relBuilder.field(\"EMPNO\"),\n            relBuilder.literal(BigDecimal.ONE)));\n\n    final RelNode filter = relBuilder.peek();\n    predicates = mq.getAllPredicates(filter);\n    assertThat(predicates.pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n\n    final LogicalTableScan deptScan =\n        LogicalTableScan.create(cluster, deptTable);\n    relBuilder.push(deptScan);\n\n    relBuilder.join(JoinRelType.INNER,\n        relBuilder.equals(relBuilder.field(2, 0, \"DEPTNO\"),\n            relBuilder.field(2, 1, \"DEPTNO\")));\n\n    relBuilder.project(relBuilder.field(\"DEPTNO\"));\n    final RelNode project = relBuilder.peek();\n    predicates = mq.getAllPredicates(project);\n    assertThat(predicates.pulledUpPredicates.size(), is(2));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(1);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(7));\n    RexTableInputRef inputRef2 = (RexTableInputRef) call.getOperands().get(1);\n    assertThat(inputRef2.getQualifiedName(), is(\"[CATALOG, SALES, DEPT]\"));\n    assertThat(inputRef2.getIndex(), is(0));\n  }\n","date":"2017-04-27 02:56:37","endLine":1833,"groupId":"6571","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkAllPredicates","params":"(RelOptClustercluster@RelOptTableempTable@RelOptTabledeptTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/c230aa1837e272d15599363543c58e2d8b0a29.src","preCode":"  private void checkAllPredicates(RelOptCluster cluster, RelOptTable empTable,\n      RelOptTable deptTable) {\n    final RelBuilder relBuilder = RelBuilder.proto().create(cluster, null);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final LogicalTableScan empScan = LogicalTableScan.create(cluster, empTable);\n    relBuilder.push(empScan);\n\n    RelOptPredicateList predicates =\n        mq.getAllPredicates(empScan);\n    assertThat(predicates.pulledUpPredicates.isEmpty(), is(true));\n\n    relBuilder.filter(\n        relBuilder.equals(relBuilder.field(\"EMPNO\"),\n            relBuilder.literal(BigDecimal.ONE)));\n\n    final RelNode filter = relBuilder.peek();\n    predicates = mq.getAllPredicates(filter);\n    assertThat(predicates.pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n\n    final LogicalTableScan deptScan =\n        LogicalTableScan.create(cluster, deptTable);\n    relBuilder.push(deptScan);\n\n    relBuilder.join(JoinRelType.INNER,\n        relBuilder.equals(relBuilder.field(2, 0, \"DEPTNO\"),\n            relBuilder.field(2, 1, \"DEPTNO\")));\n\n    relBuilder.project(relBuilder.field(\"DEPTNO\"));\n    final RelNode project = relBuilder.peek();\n    predicates = mq.getAllPredicates(project);\n    assertThat(predicates.pulledUpPredicates.size(), is(2));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(1);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(7));\n    RexTableInputRef inputRef2 = (RexTableInputRef) call.getOperands().get(1);\n    assertThat(inputRef2.getQualifiedName(), is(\"[CATALOG, SALES, DEPT]\"));\n    assertThat(inputRef2.getIndex(), is(0));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1781,"status":"B"}],"commitId":"41b05d784fd2e0ae81b09d013ef8a746036ca446","commitMessage":"@@@[CALCITE-1682] New metadata providers for expression column origin and all predicates in plan\n\nIncludes:\n* RelNode type metadata provider\n* Ranges containment-based simplification in conjunctive predicates\n","date":"2017-04-27 02:56:37","modifiedFileCount":"16","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2017-03-29 14:36:43","codes":[{"authorDate":"2015-07-12 05:56:42","commitOrder":5,"curCode":"  @Test public void testPullUpPredicatesFromAggregation() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select 1 as a, 2 as b from emp)subq\\n\"\n        + \"group by a\";\n    final Aggregate rel = (Aggregate) convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList inputSet = mq.getPulledUpPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates, sortsAs(\"[=($0, 1)]\"));\n  }\n","date":"2016-01-10 16:51:25","endLine":1291,"groupId":"11204","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPullUpPredicatesFromAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/cd23b3aab9084129ca47bf4bd5480d0b3c35d4.src","preCode":"  @Test public void testPullUpPredicatesFromAggregation() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select 1 as a, 2 as b from emp)subq\\n\"\n        + \"group by a\";\n    final Aggregate rel = (Aggregate) convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList inputSet = mq.getPulledUpPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates, sortsAs(\"[=($0, 1)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1282,"status":"NB"},{"authorDate":"2017-03-29 14:36:43","commitOrder":5,"curCode":"  private void checkAllPredicates(RelOptCluster cluster, RelOptTable empTable,\n      RelOptTable deptTable) {\n    final RelBuilder relBuilder = RelBuilder.proto().create(cluster, null);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final LogicalTableScan empScan = LogicalTableScan.create(cluster, empTable);\n    relBuilder.push(empScan);\n\n    RelOptPredicateList predicates =\n        mq.getAllPredicates(empScan);\n    assertThat(predicates.pulledUpPredicates.isEmpty(), is(true));\n\n    relBuilder.filter(\n        relBuilder.equals(relBuilder.field(\"EMPNO\"),\n            relBuilder.literal(BigDecimal.ONE)));\n\n    final RelNode filter = relBuilder.peek();\n    predicates = mq.getAllPredicates(filter);\n    assertThat(predicates.pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n\n    final LogicalTableScan deptScan =\n        LogicalTableScan.create(cluster, deptTable);\n    relBuilder.push(deptScan);\n\n    relBuilder.join(JoinRelType.INNER,\n        relBuilder.equals(relBuilder.field(2, 0, \"DEPTNO\"),\n            relBuilder.field(2, 1, \"DEPTNO\")));\n\n    relBuilder.project(relBuilder.field(\"DEPTNO\"));\n    final RelNode project = relBuilder.peek();\n    predicates = mq.getAllPredicates(project);\n    assertThat(predicates.pulledUpPredicates.size(), is(2));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(1);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(7));\n    RexTableInputRef inputRef2 = (RexTableInputRef) call.getOperands().get(1);\n    assertTrue(inputRef2.getQualifiedName().equals(ImmutableList.of(\"CATALOG\", \"SALES\", \"DEPT\")));\n    assertThat(inputRef2.getIndex(), is(0));\n  }\n","date":"2017-04-27 02:56:37","endLine":1833,"groupId":"6571","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkAllPredicates","params":"(RelOptClustercluster@RelOptTableempTable@RelOptTabledeptTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/25b30757dc28f5c50a8e650fb49838c96dc902.src","preCode":"  private void checkAllPredicates(RelOptCluster cluster, RelOptTable empTable,\n      RelOptTable deptTable) {\n    final RelBuilder relBuilder = RelBuilder.proto().create(cluster, null);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final LogicalTableScan empScan = LogicalTableScan.create(cluster, empTable);\n    relBuilder.push(empScan);\n\n    RelOptPredicateList predicates =\n        mq.getAllPredicates(empScan);\n    assertThat(predicates.pulledUpPredicates.isEmpty(), is(true));\n\n    relBuilder.filter(\n        relBuilder.equals(relBuilder.field(\"EMPNO\"),\n            relBuilder.literal(BigDecimal.ONE)));\n\n    final RelNode filter = relBuilder.peek();\n    predicates = mq.getAllPredicates(filter);\n    assertThat(predicates.pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n\n    final LogicalTableScan deptScan =\n        LogicalTableScan.create(cluster, deptTable);\n    relBuilder.push(deptScan);\n\n    relBuilder.join(JoinRelType.INNER,\n        relBuilder.equals(relBuilder.field(2, 0, \"DEPTNO\"),\n            relBuilder.field(2, 1, \"DEPTNO\")));\n\n    relBuilder.project(relBuilder.field(\"DEPTNO\"));\n    final RelNode project = relBuilder.peek();\n    predicates = mq.getAllPredicates(project);\n    assertThat(predicates.pulledUpPredicates.size(), is(2));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(1);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(7));\n    RexTableInputRef inputRef2 = (RexTableInputRef) call.getOperands().get(1);\n    assertTrue(inputRef2.getQualifiedName().equals(ImmutableList.of(\"CATALOG\", \"SALES\", \"DEPT\")));\n    assertThat(inputRef2.getIndex(), is(0));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1781,"status":"MB"}],"commitId":"84b49f5b48842708e9f4d912b4f9564745d74bc6","commitMessage":"@@@[CALCITE-1731] Materialized view rewriting for join and aggregate operators\n","date":"2017-04-27 02:56:37","modifiedFileCount":"16","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2019-10-16 19:22:37","codes":[{"authorDate":"2019-10-16 19:22:37","commitOrder":6,"curCode":"  @Test public void testPullUpPredicatesFromAggregation() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select 1 as a, 2 as b from emp)subq\\n\"\n        + \"group by a\";\n    final Aggregate rel = (Aggregate) convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getPulledUpPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates, sortsAs(\"[=($0, 1)]\"));\n  }\n","date":"2019-10-18 06:51:31","endLine":1528,"groupId":"16634","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPullUpPredicatesFromAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testPullUpPredicatesFromAggregation() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select 1 as a, 2 as b from emp)subq\\n\"\n        + \"group by a\";\n    final Aggregate rel = (Aggregate) convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList inputSet = mq.getPulledUpPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates, sortsAs(\"[=($0, 1)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1519,"status":"M"},{"authorDate":"2019-10-16 19:22:37","commitOrder":6,"curCode":"  private void checkAllPredicates(RelOptCluster cluster, RelOptTable empTable,\n      RelOptTable deptTable) {\n    final RelBuilder relBuilder = RelBuilder.proto().create(cluster, null);\n    final RelMetadataQuery mq = cluster.getMetadataQuery();\n\n    final LogicalTableScan empScan = LogicalTableScan.create(cluster, empTable);\n    relBuilder.push(empScan);\n\n    RelOptPredicateList predicates =\n        mq.getAllPredicates(empScan);\n    assertThat(predicates.pulledUpPredicates.isEmpty(), is(true));\n\n    relBuilder.filter(\n        relBuilder.equals(relBuilder.field(\"EMPNO\"),\n            relBuilder.literal(BigDecimal.ONE)));\n\n    final RelNode filter = relBuilder.peek();\n    predicates = mq.getAllPredicates(filter);\n    assertThat(predicates.pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n\n    final LogicalTableScan deptScan =\n        LogicalTableScan.create(cluster, deptTable);\n    relBuilder.push(deptScan);\n\n    relBuilder.join(JoinRelType.INNER,\n        relBuilder.equals(relBuilder.field(2, 0, \"DEPTNO\"),\n            relBuilder.field(2, 1, \"DEPTNO\")));\n\n    relBuilder.project(relBuilder.field(\"DEPTNO\"));\n    final RelNode project = relBuilder.peek();\n    predicates = mq.getAllPredicates(project);\n    assertThat(predicates.pulledUpPredicates.size(), is(2));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(1);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(7));\n    RexTableInputRef inputRef2 = (RexTableInputRef) call.getOperands().get(1);\n    assertTrue(inputRef2.getQualifiedName().equals(ImmutableList.of(\"CATALOG\", \"SALES\", \"DEPT\")));\n    assertThat(inputRef2.getIndex(), is(0));\n  }\n","date":"2019-10-18 06:51:31","endLine":1987,"groupId":"6571","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkAllPredicates","params":"(RelOptClustercluster@RelOptTableempTable@RelOptTabledeptTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  private void checkAllPredicates(RelOptCluster cluster, RelOptTable empTable,\n      RelOptTable deptTable) {\n    final RelBuilder relBuilder = RelBuilder.proto().create(cluster, null);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final LogicalTableScan empScan = LogicalTableScan.create(cluster, empTable);\n    relBuilder.push(empScan);\n\n    RelOptPredicateList predicates =\n        mq.getAllPredicates(empScan);\n    assertThat(predicates.pulledUpPredicates.isEmpty(), is(true));\n\n    relBuilder.filter(\n        relBuilder.equals(relBuilder.field(\"EMPNO\"),\n            relBuilder.literal(BigDecimal.ONE)));\n\n    final RelNode filter = relBuilder.peek();\n    predicates = mq.getAllPredicates(filter);\n    assertThat(predicates.pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n\n    final LogicalTableScan deptScan =\n        LogicalTableScan.create(cluster, deptTable);\n    relBuilder.push(deptScan);\n\n    relBuilder.join(JoinRelType.INNER,\n        relBuilder.equals(relBuilder.field(2, 0, \"DEPTNO\"),\n            relBuilder.field(2, 1, \"DEPTNO\")));\n\n    relBuilder.project(relBuilder.field(\"DEPTNO\"));\n    final RelNode project = relBuilder.peek();\n    predicates = mq.getAllPredicates(project);\n    assertThat(predicates.pulledUpPredicates.size(), is(2));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(1);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(7));\n    RexTableInputRef inputRef2 = (RexTableInputRef) call.getOperands().get(1);\n    assertTrue(inputRef2.getQualifiedName().equals(ImmutableList.of(\"CATALOG\", \"SALES\", \"DEPT\")));\n    assertThat(inputRef2.getIndex(), is(0));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1935,"status":"M"}],"commitId":"ebc16afa935888578b5befc870c1997f307a6cb5","commitMessage":"@@@[CALCITE-3421] Reuse RelMetadataQuery in test suites\n\nClose #1513\n","date":"2019-10-18 06:51:31","modifiedFileCount":"5","status":"M","submitter":"dz"},{"authorTime":"2019-10-25 22:40:36","codes":[{"authorDate":"2019-10-16 19:22:37","commitOrder":7,"curCode":"  @Test public void testPullUpPredicatesFromAggregation() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select 1 as a, 2 as b from emp)subq\\n\"\n        + \"group by a\";\n    final Aggregate rel = (Aggregate) convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getPulledUpPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates, sortsAs(\"[=($0, 1)]\"));\n  }\n","date":"2019-10-18 06:51:31","endLine":1528,"groupId":"16634","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPullUpPredicatesFromAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testPullUpPredicatesFromAggregation() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select 1 as a, 2 as b from emp)subq\\n\"\n        + \"group by a\";\n    final Aggregate rel = (Aggregate) convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getPulledUpPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates, sortsAs(\"[=($0, 1)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1519,"status":"N"},{"authorDate":"2019-10-25 22:40:36","commitOrder":7,"curCode":"  private void checkAllPredicates(RelOptCluster cluster, RelOptTable empTable,\n      RelOptTable deptTable) {\n    final RelBuilder relBuilder = RelBuilder.proto().create(cluster, null);\n    final RelMetadataQuery mq = cluster.getMetadataQuery();\n\n    final LogicalTableScan empScan = LogicalTableScan.create(cluster, empTable);\n    relBuilder.push(empScan);\n\n    RelOptPredicateList predicates =\n        mq.getAllPredicates(empScan);\n    assertThat(predicates.pulledUpPredicates.isEmpty(), is(true));\n\n    relBuilder.filter(\n        relBuilder.equals(relBuilder.field(\"EMPNO\"),\n            relBuilder.literal(BigDecimal.ONE)));\n\n    final RelNode filter = relBuilder.peek();\n    predicates = mq.getAllPredicates(filter);\n    assertThat(predicates.pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n\n    final LogicalTableScan deptScan =\n        LogicalTableScan.create(cluster, deptTable);\n    relBuilder.push(deptScan);\n\n    relBuilder.join(JoinRelType.INNER,\n        relBuilder.equals(relBuilder.field(2, 0, \"DEPTNO\"),\n            relBuilder.field(2, 1, \"DEPTNO\")));\n\n    relBuilder.project(relBuilder.field(\"DEPTNO\"));\n    final RelNode project = relBuilder.peek();\n    predicates = mq.getAllPredicates(project);\n    assertThat(predicates.pulledUpPredicates.size(), is(2));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(1);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(7));\n    RexTableInputRef inputRef2 = (RexTableInputRef) call.getOperands().get(1);\n    assertThat(inputRef2.getQualifiedName(),\n        equalTo(ImmutableList.of(\"CATALOG\", \"SALES\", \"DEPT\")));\n    assertThat(inputRef2.getIndex(), is(0));\n  }\n","date":"2019-10-30 10:10:44","endLine":2304,"groupId":"6571","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkAllPredicates","params":"(RelOptClustercluster@RelOptTableempTable@RelOptTabledeptTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/d2de04e1f002bb086c95d3a32edb41ffb94f09.src","preCode":"  private void checkAllPredicates(RelOptCluster cluster, RelOptTable empTable,\n      RelOptTable deptTable) {\n    final RelBuilder relBuilder = RelBuilder.proto().create(cluster, null);\n    final RelMetadataQuery mq = cluster.getMetadataQuery();\n\n    final LogicalTableScan empScan = LogicalTableScan.create(cluster, empTable);\n    relBuilder.push(empScan);\n\n    RelOptPredicateList predicates =\n        mq.getAllPredicates(empScan);\n    assertThat(predicates.pulledUpPredicates.isEmpty(), is(true));\n\n    relBuilder.filter(\n        relBuilder.equals(relBuilder.field(\"EMPNO\"),\n            relBuilder.literal(BigDecimal.ONE)));\n\n    final RelNode filter = relBuilder.peek();\n    predicates = mq.getAllPredicates(filter);\n    assertThat(predicates.pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n\n    final LogicalTableScan deptScan =\n        LogicalTableScan.create(cluster, deptTable);\n    relBuilder.push(deptScan);\n\n    relBuilder.join(JoinRelType.INNER,\n        relBuilder.equals(relBuilder.field(2, 0, \"DEPTNO\"),\n            relBuilder.field(2, 1, \"DEPTNO\")));\n\n    relBuilder.project(relBuilder.field(\"DEPTNO\"));\n    final RelNode project = relBuilder.peek();\n    predicates = mq.getAllPredicates(project);\n    assertThat(predicates.pulledUpPredicates.size(), is(2));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(1);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertTrue(inputRef1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(7));\n    RexTableInputRef inputRef2 = (RexTableInputRef) call.getOperands().get(1);\n    assertTrue(inputRef2.getQualifiedName().equals(ImmutableList.of(\"CATALOG\", \"SALES\", \"DEPT\")));\n    assertThat(inputRef2.getIndex(), is(0));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2251,"status":"M"}],"commitId":"977ea0d96f1f8e4225b6e27f02d86d0ea5aebb9a","commitMessage":"@@@[CALCITE-3446] Make RelMetadataQuery extensible\n\n* Add interface RelOptCluster.setMetadataQuery to let user set the\ncustomized RelMetadataQuery instance\n* Add a base metadata query class named RelMetadataQueryBase.  it\nholds the common parts that a metadata query requires.  also add doc\nabout how to add a new RelMetadataQuery sub-class\n* In RelMetadataQuery.  make constructor RelMetadataQuery(boolean) and\nRelMetadataQuery(JaninoRelMetadataProvider.  RelMetadataQuery) private. \nadd a new constrcutor RelMetadataQuery() for sub-class\n* Add test cases in RelMetadataTest\n* Refactor out assertEquals within RelMetadataTest\n* Make RelMetadataQueryBase#THREAD_PROVIDERS default to be a empty\ninstance.  we always initialize it now in RelOptCluster\n","date":"2019-10-30 10:10:44","modifiedFileCount":"5","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-01-14 11:52:33","codes":[{"authorDate":"2019-10-16 19:22:37","commitOrder":8,"curCode":"  @Test public void testPullUpPredicatesFromAggregation() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select 1 as a, 2 as b from emp)subq\\n\"\n        + \"group by a\";\n    final Aggregate rel = (Aggregate) convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getPulledUpPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates, sortsAs(\"[=($0, 1)]\"));\n  }\n","date":"2019-10-18 06:51:31","endLine":1528,"groupId":"16634","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPullUpPredicatesFromAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testPullUpPredicatesFromAggregation() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select 1 as a, 2 as b from emp)subq\\n\"\n        + \"group by a\";\n    final Aggregate rel = (Aggregate) convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getPulledUpPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates, sortsAs(\"[=($0, 1)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1519,"status":"N"},{"authorDate":"2020-01-14 11:52:33","commitOrder":8,"curCode":"  private void checkAllPredicates(RelOptCluster cluster, RelOptTable empTable,\n      RelOptTable deptTable) {\n    final RelBuilder relBuilder = RelBuilder.proto().create(cluster, null);\n    final RelMetadataQuery mq = cluster.getMetadataQuery();\n\n    final LogicalTableScan empScan = LogicalTableScan.create(cluster, empTable,\n        ImmutableList.of());\n    relBuilder.push(empScan);\n\n    RelOptPredicateList predicates =\n        mq.getAllPredicates(empScan);\n    assertThat(predicates.pulledUpPredicates.isEmpty(), is(true));\n\n    relBuilder.filter(\n        relBuilder.equals(relBuilder.field(\"EMPNO\"),\n            relBuilder.literal(BigDecimal.ONE)));\n\n    final RelNode filter = relBuilder.peek();\n    predicates = mq.getAllPredicates(filter);\n    assertThat(predicates.pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n\n    final LogicalTableScan deptScan =\n        LogicalTableScan.create(cluster, deptTable, ImmutableList.of());\n    relBuilder.push(deptScan);\n\n    relBuilder.join(JoinRelType.INNER,\n        relBuilder.equals(relBuilder.field(2, 0, \"DEPTNO\"),\n            relBuilder.field(2, 1, \"DEPTNO\")));\n\n    relBuilder.project(relBuilder.field(\"DEPTNO\"));\n    final RelNode project = relBuilder.peek();\n    predicates = mq.getAllPredicates(project);\n    assertThat(predicates.pulledUpPredicates.size(), is(2));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(1);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(7));\n    RexTableInputRef inputRef2 = (RexTableInputRef) call.getOperands().get(1);\n    assertThat(inputRef2.getQualifiedName(),\n        equalTo(ImmutableList.of(\"CATALOG\", \"SALES\", \"DEPT\")));\n    assertThat(inputRef2.getIndex(), is(0));\n  }\n","date":"2020-01-15 08:01:28","endLine":2454,"groupId":"10738","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"checkAllPredicates","params":"(RelOptClustercluster@RelOptTableempTable@RelOptTabledeptTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2b/84ae2bc90102538d9e3b671ee0c62c5cde6377.src","preCode":"  private void checkAllPredicates(RelOptCluster cluster, RelOptTable empTable,\n      RelOptTable deptTable) {\n    final RelBuilder relBuilder = RelBuilder.proto().create(cluster, null);\n    final RelMetadataQuery mq = cluster.getMetadataQuery();\n\n    final LogicalTableScan empScan = LogicalTableScan.create(cluster, empTable);\n    relBuilder.push(empScan);\n\n    RelOptPredicateList predicates =\n        mq.getAllPredicates(empScan);\n    assertThat(predicates.pulledUpPredicates.isEmpty(), is(true));\n\n    relBuilder.filter(\n        relBuilder.equals(relBuilder.field(\"EMPNO\"),\n            relBuilder.literal(BigDecimal.ONE)));\n\n    final RelNode filter = relBuilder.peek();\n    predicates = mq.getAllPredicates(filter);\n    assertThat(predicates.pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n\n    final LogicalTableScan deptScan =\n        LogicalTableScan.create(cluster, deptTable);\n    relBuilder.push(deptScan);\n\n    relBuilder.join(JoinRelType.INNER,\n        relBuilder.equals(relBuilder.field(2, 0, \"DEPTNO\"),\n            relBuilder.field(2, 1, \"DEPTNO\")));\n\n    relBuilder.project(relBuilder.field(\"DEPTNO\"));\n    final RelNode project = relBuilder.peek();\n    predicates = mq.getAllPredicates(project);\n    assertThat(predicates.pulledUpPredicates.size(), is(2));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(1);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(7));\n    RexTableInputRef inputRef2 = (RexTableInputRef) call.getOperands().get(1);\n    assertThat(inputRef2.getQualifiedName(),\n        equalTo(ImmutableList.of(\"CATALOG\", \"SALES\", \"DEPT\")));\n    assertThat(inputRef2.getIndex(), is(0));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2400,"status":"M"}],"commitId":"6257609c6be438ba9103666ea41e3191d851abd0","commitMessage":"@@@[CALCITE-3730] Add hints to RelBuilder\n\n* Add #hints to RelBuilder\n* Add hints to RelNode factories\n* In logical RelNode classes that implement Hintable.  add hints to #create method\n","date":"2020-01-15 08:01:28","modifiedFileCount":"39","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-01-14 11:52:33","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":9,"curCode":"  @Test void testPullUpPredicatesFromAggregation() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select 1 as a, 2 as b from emp)subq\\n\"\n        + \"group by a\";\n    final Aggregate rel = (Aggregate) convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getPulledUpPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates, sortsAs(\"[=($0, 1)]\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":1915,"groupId":"101129","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testPullUpPredicatesFromAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testPullUpPredicatesFromAggregation() {\n    final String sql = \"select a, max(b) from (\\n\"\n        + \"  select 1 as a, 2 as b from emp)subq\\n\"\n        + \"group by a\";\n    final Aggregate rel = (Aggregate) convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList inputSet = mq.getPulledUpPredicates(rel);\n    ImmutableList<RexNode> pulledUpPredicates = inputSet.pulledUpPredicates;\n    assertThat(pulledUpPredicates, sortsAs(\"[=($0, 1)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1906,"status":"M"},{"authorDate":"2020-01-14 11:52:33","commitOrder":9,"curCode":"  private void checkAllPredicates(RelOptCluster cluster, RelOptTable empTable,\n      RelOptTable deptTable) {\n    final RelBuilder relBuilder = RelBuilder.proto().create(cluster, null);\n    final RelMetadataQuery mq = cluster.getMetadataQuery();\n\n    final LogicalTableScan empScan = LogicalTableScan.create(cluster, empTable,\n        ImmutableList.of());\n    relBuilder.push(empScan);\n\n    RelOptPredicateList predicates =\n        mq.getAllPredicates(empScan);\n    assertThat(predicates.pulledUpPredicates.isEmpty(), is(true));\n\n    relBuilder.filter(\n        relBuilder.equals(relBuilder.field(\"EMPNO\"),\n            relBuilder.literal(BigDecimal.ONE)));\n\n    final RelNode filter = relBuilder.peek();\n    predicates = mq.getAllPredicates(filter);\n    assertThat(predicates.pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n\n    final LogicalTableScan deptScan =\n        LogicalTableScan.create(cluster, deptTable, ImmutableList.of());\n    relBuilder.push(deptScan);\n\n    relBuilder.join(JoinRelType.INNER,\n        relBuilder.equals(relBuilder.field(2, 0, \"DEPTNO\"),\n            relBuilder.field(2, 1, \"DEPTNO\")));\n\n    relBuilder.project(relBuilder.field(\"DEPTNO\"));\n    final RelNode project = relBuilder.peek();\n    predicates = mq.getAllPredicates(project);\n    assertThat(predicates.pulledUpPredicates.size(), is(2));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(1);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(7));\n    RexTableInputRef inputRef2 = (RexTableInputRef) call.getOperands().get(1);\n    assertThat(inputRef2.getQualifiedName(),\n        equalTo(ImmutableList.of(\"CATALOG\", \"SALES\", \"DEPT\")));\n    assertThat(inputRef2.getIndex(), is(0));\n  }\n","date":"2020-01-15 08:01:28","endLine":2454,"groupId":"101129","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"checkAllPredicates","params":"(RelOptClustercluster@RelOptTableempTable@RelOptTabledeptTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2b/84ae2bc90102538d9e3b671ee0c62c5cde6377.src","preCode":"  private void checkAllPredicates(RelOptCluster cluster, RelOptTable empTable,\n      RelOptTable deptTable) {\n    final RelBuilder relBuilder = RelBuilder.proto().create(cluster, null);\n    final RelMetadataQuery mq = cluster.getMetadataQuery();\n\n    final LogicalTableScan empScan = LogicalTableScan.create(cluster, empTable,\n        ImmutableList.of());\n    relBuilder.push(empScan);\n\n    RelOptPredicateList predicates =\n        mq.getAllPredicates(empScan);\n    assertThat(predicates.pulledUpPredicates.isEmpty(), is(true));\n\n    relBuilder.filter(\n        relBuilder.equals(relBuilder.field(\"EMPNO\"),\n            relBuilder.literal(BigDecimal.ONE)));\n\n    final RelNode filter = relBuilder.peek();\n    predicates = mq.getAllPredicates(filter);\n    assertThat(predicates.pulledUpPredicates.size(), is(1));\n    RexCall call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    RexTableInputRef inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n\n    final LogicalTableScan deptScan =\n        LogicalTableScan.create(cluster, deptTable, ImmutableList.of());\n    relBuilder.push(deptScan);\n\n    relBuilder.join(JoinRelType.INNER,\n        relBuilder.equals(relBuilder.field(2, 0, \"DEPTNO\"),\n            relBuilder.field(2, 1, \"DEPTNO\")));\n\n    relBuilder.project(relBuilder.field(\"DEPTNO\"));\n    final RelNode project = relBuilder.peek();\n    predicates = mq.getAllPredicates(project);\n    assertThat(predicates.pulledUpPredicates.size(), is(2));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(0);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(0));\n    \r\n    call = (RexCall) predicates.pulledUpPredicates.get(1);\n    assertThat(call.getOperands().size(), is(2));\n    inputRef1 = (RexTableInputRef) call.getOperands().get(0);\n    assertThat(inputRef1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(inputRef1.getIndex(), is(7));\n    RexTableInputRef inputRef2 = (RexTableInputRef) call.getOperands().get(1);\n    assertThat(inputRef2.getQualifiedName(),\n        equalTo(ImmutableList.of(\"CATALOG\", \"SALES\", \"DEPT\")));\n    assertThat(inputRef2.getIndex(), is(0));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2400,"status":"N"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
