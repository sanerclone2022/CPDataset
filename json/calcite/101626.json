[{"authorTime":"2015-05-23 01:11:06","codes":[{"authorDate":"2015-05-23 01:11:06","commitOrder":2,"curCode":"  @Test public void testSet() {\n    final ImmutableBitSet bitSet = ImmutableBitSet.of(29, 4, 1969);\n    final ImmutableBitSet bitSet2 = ImmutableBitSet.of(29, 4, 1969, 30);\n    assertThat(bitSet.set(30), equalTo(bitSet2));\n    assertThat(bitSet.set(30).set(30), equalTo(bitSet2));\n    assertThat(bitSet.set(29), equalTo(bitSet));\n    assertThat(bitSet.setIf(30, false), equalTo(bitSet));\n    assertThat(bitSet.setIf(30, true), equalTo(bitSet2));\n  }\n","date":"2015-06-01 15:01:55","endLine":437,"groupId":"6002","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/da/34dc71250a9b32c2f670d6096fe669ec81ffb9.src","preCode":"  @Test public void testSet() {\n    final ImmutableBitSet bitSet = ImmutableBitSet.of(29, 4, 1969);\n    final ImmutableBitSet bitSet2 = ImmutableBitSet.of(29, 4, 1969, 30);\n    assertThat(bitSet.set(30), equalTo(bitSet2));\n    assertThat(bitSet.set(30).set(30), equalTo(bitSet2));\n    assertThat(bitSet.set(29), equalTo(bitSet));\n    assertThat(bitSet.setIf(30, false), equalTo(bitSet));\n    assertThat(bitSet.setIf(30, true), equalTo(bitSet2));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/ImmutableBitSetTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"MB"},{"authorDate":"2015-05-23 01:11:06","commitOrder":2,"curCode":"  @Test public void testClear() {\n    final ImmutableBitSet bitSet = ImmutableBitSet.of(29, 4, 1969);\n    final ImmutableBitSet bitSet2 = ImmutableBitSet.of(4, 1969);\n    assertThat(bitSet.clear(29), equalTo(bitSet2));\n    assertThat(bitSet.clear(29).clear(29), equalTo(bitSet2));\n    assertThat(bitSet.clear(29).clear(4).clear(29).clear(1969),\n        equalTo(ImmutableBitSet.of()));\n    assertThat(bitSet.clearIf(29, false), equalTo(bitSet));\n    assertThat(bitSet.clearIf(29, true), equalTo(bitSet2));\n  }\n","date":"2015-06-01 15:01:55","endLine":448,"groupId":"9056","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testClear","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/da/34dc71250a9b32c2f670d6096fe669ec81ffb9.src","preCode":"  @Test public void testClear() {\n    final ImmutableBitSet bitSet = ImmutableBitSet.of(29, 4, 1969);\n    final ImmutableBitSet bitSet2 = ImmutableBitSet.of(4, 1969);\n    assertThat(bitSet.clear(29), equalTo(bitSet2));\n    assertThat(bitSet.clear(29).clear(29), equalTo(bitSet2));\n    assertThat(bitSet.clear(29).clear(4).clear(29).clear(1969),\n        equalTo(ImmutableBitSet.of()));\n    assertThat(bitSet.clearIf(29, false), equalTo(bitSet));\n    assertThat(bitSet.clearIf(29, true), equalTo(bitSet2));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/ImmutableBitSetTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":439,"status":"MB"}],"commitId":"3e50232b681e8dadb921580ee6f3e0376dd0f664","commitMessage":"@@@[CALCITE-732] Implement multiple distinct-COUNT using GROUPING SETS\n","date":"2015-06-01 15:01:55","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testSet() {\n    final ImmutableBitSet bitSet = ImmutableBitSet.of(29, 4, 1969);\n    final ImmutableBitSet bitSet2 = ImmutableBitSet.of(29, 4, 1969, 30);\n    assertThat(bitSet.set(30), equalTo(bitSet2));\n    assertThat(bitSet.set(30).set(30), equalTo(bitSet2));\n    assertThat(bitSet.set(29), equalTo(bitSet));\n    assertThat(bitSet.setIf(30, false), equalTo(bitSet));\n    assertThat(bitSet.setIf(30, true), equalTo(bitSet2));\n  }\n","date":"2020-04-06 04:57:49","endLine":515,"groupId":"101626","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/49/ad82e4a4fce33c9e631a020dd26c8e5319acfb.src","preCode":"  @Test public void testSet() {\n    final ImmutableBitSet bitSet = ImmutableBitSet.of(29, 4, 1969);\n    final ImmutableBitSet bitSet2 = ImmutableBitSet.of(29, 4, 1969, 30);\n    assertThat(bitSet.set(30), equalTo(bitSet2));\n    assertThat(bitSet.set(30).set(30), equalTo(bitSet2));\n    assertThat(bitSet.set(29), equalTo(bitSet));\n    assertThat(bitSet.setIf(30, false), equalTo(bitSet));\n    assertThat(bitSet.setIf(30, true), equalTo(bitSet2));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/ImmutableBitSetTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testClear() {\n    final ImmutableBitSet bitSet = ImmutableBitSet.of(29, 4, 1969);\n    final ImmutableBitSet bitSet2 = ImmutableBitSet.of(4, 1969);\n    assertThat(bitSet.clear(29), equalTo(bitSet2));\n    assertThat(bitSet.clear(29).clear(29), equalTo(bitSet2));\n    assertThat(bitSet.clear(29).clear(4).clear(29).clear(1969),\n        equalTo(ImmutableBitSet.of()));\n    assertThat(bitSet.clearIf(29, false), equalTo(bitSet));\n    assertThat(bitSet.clearIf(29, true), equalTo(bitSet2));\n  }\n","date":"2020-04-06 04:57:49","endLine":526,"groupId":"101626","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testClear","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/49/ad82e4a4fce33c9e631a020dd26c8e5319acfb.src","preCode":"  @Test public void testClear() {\n    final ImmutableBitSet bitSet = ImmutableBitSet.of(29, 4, 1969);\n    final ImmutableBitSet bitSet2 = ImmutableBitSet.of(4, 1969);\n    assertThat(bitSet.clear(29), equalTo(bitSet2));\n    assertThat(bitSet.clear(29).clear(29), equalTo(bitSet2));\n    assertThat(bitSet.clear(29).clear(4).clear(29).clear(1969),\n        equalTo(ImmutableBitSet.of()));\n    assertThat(bitSet.clearIf(29, false), equalTo(bitSet));\n    assertThat(bitSet.clearIf(29, true), equalTo(bitSet2));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/util/ImmutableBitSetTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":517,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
