[{"authorTime":"2019-10-25 17:17:30","codes":[{"authorDate":"2018-06-27 09:11:06","commitOrder":3,"curCode":"  public static void setupInstance() throws Exception {\n    final Map<String, String> mapping = ImmutableMap.of(\"city\", \"keyword\", \"state\",\n        \"keyword\", \"pop\", \"long\");\n\n    NODE.createIndex(ZIPS, mapping);\n\n    \r\n    final List<ObjectNode> bulk = new ArrayList<>();\n    Resources.readLines(ElasticSearchAdapterTest.class.getResource(\"/zips-mini.json\"),\n        StandardCharsets.UTF_8, new LineProcessor<Void>() {\n          @Override public boolean processLine(String line) throws IOException {\n            line = line.replaceAll(\"_id\", \"id\"); \r\n            bulk.add((ObjectNode) NODE.mapper().readTree(line));\n            return true;\n          }\n\n          @Override public Void getResult() {\n            return null;\n          }\n        });\n\n    if (bulk.isEmpty()) {\n      throw new IllegalStateException(\"No records to index. Empty file ?\");\n    }\n\n    NODE.insertBulk(ZIPS, bulk);\n  }\n","date":"2018-07-15 05:43:13","endLine":91,"groupId":"9329","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6d/6eb4110f13e6f8855f5b6dc5b3d78b64e266cb.src","preCode":"  public static void setupInstance() throws Exception {\n    final Map<String, String> mapping = ImmutableMap.of(\"city\", \"keyword\", \"state\",\n        \"keyword\", \"pop\", \"long\");\n\n    NODE.createIndex(ZIPS, mapping);\n\n    \r\n    final List<ObjectNode> bulk = new ArrayList<>();\n    Resources.readLines(ElasticSearchAdapterTest.class.getResource(\"/zips-mini.json\"),\n        StandardCharsets.UTF_8, new LineProcessor<Void>() {\n          @Override public boolean processLine(String line) throws IOException {\n            line = line.replaceAll(\"_id\", \"id\"); \r\n            bulk.add((ObjectNode) NODE.mapper().readTree(line));\n            return true;\n          }\n\n          @Override public Void getResult() {\n            return null;\n          }\n        });\n\n    if (bulk.isEmpty()) {\n      throw new IllegalStateException(\"No records to index. Empty file ?\");\n    }\n\n    NODE.insertBulk(ZIPS, bulk);\n  }\n","realPath":"elasticsearch/src/test/java/org/apache/calcite/adapter/elasticsearch/ElasticSearchAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"NB"},{"authorDate":"2019-10-25 17:17:30","commitOrder":3,"curCode":"  public static void setup() throws Exception {\n    final Map<String, String> mapping = ImmutableMap.of(\"city\", \"text\", \"state\",\n        \"keyword\", \"pop\", \"long\");\n\n    NODE.createIndex(ZIPS, mapping);\n\n    \r\n    final List<ObjectNode> bulk = new ArrayList<>();\n    Resources.readLines(ElasticSearchAdapterTest.class.getResource(\"/zips-mini.json\"),\n        StandardCharsets.UTF_8, new LineProcessor<Void>() {\n          @Override public boolean processLine(String line) throws IOException {\n            line = line.replaceAll(\"_id\", \"id\"); \r\n            bulk.add((ObjectNode) NODE.mapper().readTree(line));\n            return true;\n          }\n\n          @Override public Void getResult() {\n            return null;\n          }\n        });\n\n    if (bulk.isEmpty()) {\n      throw new IllegalStateException(\"No records to index. Empty file ?\");\n    }\n\n    NODE.insertBulk(ZIPS, bulk);\n  }\n","date":"2019-11-09 01:37:06","endLine":112,"groupId":"9329","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2f/4bfa0bd36953b004a0b3882ddc38f74c126d3f.src","preCode":"  public static void setup() throws Exception {\n    final Map<String, String> mapping = ImmutableMap.of(\"city\", \"text\", \"state\",\n        \"keyword\", \"pop\", \"long\");\n\n    NODE.createIndex(ZIPS, mapping);\n\n    \r\n    final List<ObjectNode> bulk = new ArrayList<>();\n    Resources.readLines(ElasticSearchAdapterTest.class.getResource(\"/zips-mini.json\"),\n        StandardCharsets.UTF_8, new LineProcessor<Void>() {\n          @Override public boolean processLine(String line) throws IOException {\n            line = line.replaceAll(\"_id\", \"id\"); \r\n            bulk.add((ObjectNode) NODE.mapper().readTree(line));\n            return true;\n          }\n\n          @Override public Void getResult() {\n            return null;\n          }\n        });\n\n    if (bulk.isEmpty()) {\n      throw new IllegalStateException(\"No records to index. Empty file ?\");\n    }\n\n    NODE.insertBulk(ZIPS, bulk);\n  }\n","realPath":"elasticsearch/src/test/java/org/apache/calcite/adapter/elasticsearch/MatchTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"e6f91d2e92acbc8dccd375b777b71265677dea16","commitMessage":"@@@[CALCITE-3437] ElasticSearch adapter. Support MatchQuery in elasticsearch (Shlok Srivastava)\n","date":"2019-11-09 01:37:06","modifiedFileCount":"4","status":"M","submitter":"shlok"},{"authorTime":"2020-02-27 04:26:07","codes":[{"authorDate":"2020-02-27 04:26:07","commitOrder":4,"curCode":"  public static void setupInstance() throws Exception {\n    final Map<String, String> mapping = ImmutableMap.of(\"city\", \"keyword\", \"state\",\n        \"keyword\", \"pop\", \"long\");\n\n    NODE.createIndex(ZIPS, mapping);\n\n    \r\n    final List<ObjectNode> bulk = new ArrayList<>();\n    Resources.readLines(ElasticSearchAdapterTest.class.getResource(\"/zips-mini.json\"),\n        StandardCharsets.UTF_8, new LineProcessor<Void>() {\n          @Override public boolean processLine(String line) throws IOException {\n            line = line.replace(\"_id\", \"id\"); \r\n            bulk.add((ObjectNode) NODE.mapper().readTree(line));\n            return true;\n          }\n\n          @Override public Void getResult() {\n            return null;\n          }\n        });\n\n    if (bulk.isEmpty()) {\n      throw new IllegalStateException(\"No records to index. Empty file ?\");\n    }\n\n    NODE.insertBulk(ZIPS, bulk);\n  }\n","date":"2020-03-09 11:44:30","endLine":97,"groupId":"102206","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3c/d8704762b79723f30f5dc2ae05db3096e48909.src","preCode":"  public static void setupInstance() throws Exception {\n    final Map<String, String> mapping = ImmutableMap.of(\"city\", \"keyword\", \"state\",\n        \"keyword\", \"pop\", \"long\");\n\n    NODE.createIndex(ZIPS, mapping);\n\n    \r\n    final List<ObjectNode> bulk = new ArrayList<>();\n    Resources.readLines(ElasticSearchAdapterTest.class.getResource(\"/zips-mini.json\"),\n        StandardCharsets.UTF_8, new LineProcessor<Void>() {\n          @Override public boolean processLine(String line) throws IOException {\n            line = line.replaceAll(\"_id\", \"id\"); \r\n            bulk.add((ObjectNode) NODE.mapper().readTree(line));\n            return true;\n          }\n\n          @Override public Void getResult() {\n            return null;\n          }\n        });\n\n    if (bulk.isEmpty()) {\n      throw new IllegalStateException(\"No records to index. Empty file ?\");\n    }\n\n    NODE.insertBulk(ZIPS, bulk);\n  }\n","realPath":"elasticsearch/src/test/java/org/apache/calcite/adapter/elasticsearch/ElasticSearchAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-02-27 04:26:07","commitOrder":4,"curCode":"  public static void setup() throws Exception {\n    final Map<String, String> mapping = ImmutableMap.of(\"city\", \"text\", \"state\",\n        \"keyword\", \"pop\", \"long\");\n\n    NODE.createIndex(ZIPS, mapping);\n\n    \r\n    final List<ObjectNode> bulk = new ArrayList<>();\n    Resources.readLines(ElasticSearchAdapterTest.class.getResource(\"/zips-mini.json\"),\n        StandardCharsets.UTF_8, new LineProcessor<Void>() {\n          @Override public boolean processLine(String line) throws IOException {\n            line = line.replace(\"_id\", \"id\"); \r\n            bulk.add((ObjectNode) NODE.mapper().readTree(line));\n            return true;\n          }\n\n          @Override public Void getResult() {\n            return null;\n          }\n        });\n\n    if (bulk.isEmpty()) {\n      throw new IllegalStateException(\"No records to index. Empty file ?\");\n    }\n\n    NODE.insertBulk(ZIPS, bulk);\n  }\n","date":"2020-03-09 11:44:30","endLine":113,"groupId":"102206","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1f/02812803ff0f460a327f3825cf59242efb1f9b.src","preCode":"  public static void setup() throws Exception {\n    final Map<String, String> mapping = ImmutableMap.of(\"city\", \"text\", \"state\",\n        \"keyword\", \"pop\", \"long\");\n\n    NODE.createIndex(ZIPS, mapping);\n\n    \r\n    final List<ObjectNode> bulk = new ArrayList<>();\n    Resources.readLines(ElasticSearchAdapterTest.class.getResource(\"/zips-mini.json\"),\n        StandardCharsets.UTF_8, new LineProcessor<Void>() {\n          @Override public boolean processLine(String line) throws IOException {\n            line = line.replaceAll(\"_id\", \"id\"); \r\n            bulk.add((ObjectNode) NODE.mapper().readTree(line));\n            return true;\n          }\n\n          @Override public Void getResult() {\n            return null;\n          }\n        });\n\n    if (bulk.isEmpty()) {\n      throw new IllegalStateException(\"No records to index. Empty file ?\");\n    }\n\n    NODE.insertBulk(ZIPS, bulk);\n  }\n","realPath":"elasticsearch/src/test/java/org/apache/calcite/adapter/elasticsearch/MatchTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"4208d0ba6f2a749692fe64181a1373af07d55db5","commitMessage":"@@@[CALCITE-3823] Do not use String.replaceAll\n\nString.replaceAll uses regex.  which is inefficient.  and may not be\nwhat we want. For strings.  use either String.replace; for regex use\nPattern.compile().matcher().replaceAll().  being sure to store the\npattern for future use.\n\nAdd entries to forbidden-apis/signatures.txt to prevent people\nusing String.replaceAll in future.\n","date":"2020-03-09 11:44:30","modifiedFileCount":"30","status":"M","submitter":"Julian Hyde"}]
