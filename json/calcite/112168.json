[{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":1,"curCode":"    private SqlNode getCastedSqlNode(SqlNode argInput, RelDataType varType,\n        SqlParserPos pos, @Nullable RexNode argRex) {\n      SqlNode arg;\n      if (argRex != null && !argRex.getType().equals(varType)) {\n        arg = SqlStdOperatorTable.CAST.createCall(\n            pos, argInput, SqlTypeUtil.convertTypeToSpec(varType));\n      } else {\n        arg = argInput;\n      }\n      return arg;\n    }\n","date":"2020-11-30 06:45:33","endLine":1321,"groupId":"15107","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getCastedSqlNode","params":"(SqlNodeargInput@RelDataTypevarType@SqlParserPospos@@NullableRexNodeargRex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f5/ed8943d9f748185ef2ee89c6ec241d2494247b.src","preCode":"    private SqlNode getCastedSqlNode(SqlNode argInput, RelDataType varType,\n        SqlParserPos pos, @Nullable RexNode argRex) {\n      SqlNode arg;\n      if (argRex != null && !argRex.getType().equals(varType)) {\n        arg = SqlStdOperatorTable.CAST.createCall(\n            pos, argInput, SqlTypeUtil.convertTypeToSpec(varType));\n      } else {\n        arg = argInput;\n      }\n      return arg;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1311,"status":"B"},{"authorDate":"2020-05-29 00:04:40","commitOrder":1,"curCode":"    private SqlNode getCastedSqlNode(SqlNode argInput, RelDataType varType,\n        SqlParserPos pos, @Nullable RexNode argRex) {\n      SqlNode arg;\n      if (argRex != null && !argRex.getType().equals(varType)) {\n        arg = SqlStdOperatorTable.CAST.createCall(\n            pos, argInput, SqlTypeUtil.convertTypeToSpec(varType));\n      } else {\n        arg = argInput;\n      }\n      return arg;\n    }\n","date":"2020-11-30 06:45:33","endLine":1462,"groupId":"15107","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getCastedSqlNode","params":"(SqlNodeargInput@RelDataTypevarType@SqlParserPospos@@NullableRexNodeargRex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f5/ed8943d9f748185ef2ee89c6ec241d2494247b.src","preCode":"    private SqlNode getCastedSqlNode(SqlNode argInput, RelDataType varType,\n        SqlParserPos pos, @Nullable RexNode argRex) {\n      SqlNode arg;\n      if (argRex != null && !argRex.getType().equals(varType)) {\n        arg = SqlStdOperatorTable.CAST.createCall(\n            pos, argInput, SqlTypeUtil.convertTypeToSpec(varType));\n      } else {\n        arg = argInput;\n      }\n      return arg;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1452,"status":"B"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"B","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-12-02 05:40:39","codes":[{"authorDate":"2020-12-02 05:40:39","commitOrder":2,"curCode":"    private static SqlNode getCastedSqlNode(SqlNode argInput, RelDataType varType,\n        SqlParserPos pos, @Nullable RexNode argRex) {\n      SqlNode arg;\n      if (argRex != null && !argRex.getType().equals(varType)) {\n        arg = SqlStdOperatorTable.CAST.createCall(\n            pos, argInput, SqlTypeUtil.convertTypeToSpec(varType));\n      } else {\n        arg = argInput;\n      }\n      return arg;\n    }\n","date":"2020-12-08 15:07:23","endLine":1322,"groupId":"112168","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getCastedSqlNode","params":"(SqlNodeargInput@RelDataTypevarType@SqlParserPospos@@NullableRexNodeargRex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/51/df78457c2d358b2f4b82cc0ada50ca31bb6fbd.src","preCode":"    private SqlNode getCastedSqlNode(SqlNode argInput, RelDataType varType,\n        SqlParserPos pos, @Nullable RexNode argRex) {\n      SqlNode arg;\n      if (argRex != null && !argRex.getType().equals(varType)) {\n        arg = SqlStdOperatorTable.CAST.createCall(\n            pos, argInput, SqlTypeUtil.convertTypeToSpec(varType));\n      } else {\n        arg = argInput;\n      }\n      return arg;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1312,"status":"M"},{"authorDate":"2020-12-02 05:40:39","commitOrder":2,"curCode":"    private static SqlNode getCastedSqlNode(SqlNode argInput, RelDataType varType,\n            SqlParserPos pos, @Nullable RexNode argRex) {\n      SqlNode arg;\n      if (argRex != null && !argRex.getType().equals(varType)) {\n        arg = SqlStdOperatorTable.CAST.createCall(\n            pos, argInput, SqlTypeUtil.convertTypeToSpec(varType));\n      } else {\n        arg = argInput;\n      }\n      return arg;\n    }\n","date":"2020-12-08 15:07:23","endLine":1463,"groupId":"112168","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getCastedSqlNode","params":"(SqlNodeargInput@RelDataTypevarType@SqlParserPospos@@NullableRexNodeargRex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/51/df78457c2d358b2f4b82cc0ada50ca31bb6fbd.src","preCode":"    private SqlNode getCastedSqlNode(SqlNode argInput, RelDataType varType,\n        SqlParserPos pos, @Nullable RexNode argRex) {\n      SqlNode arg;\n      if (argRex != null && !argRex.getType().equals(varType)) {\n        arg = SqlStdOperatorTable.CAST.createCall(\n            pos, argInput, SqlTypeUtil.convertTypeToSpec(varType));\n      } else {\n        arg = argInput;\n      }\n      return arg;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1453,"status":"M"}],"commitId":"404f968f6079360621896e6ee20ec12488a40bc2","commitMessage":"@@@[CALCITE-4422] Add MethodCanBeStatic check via ErrorProne\n\nprivate and final methods can be made static.  so it is clear they do not access instance fields\n","date":"2020-12-08 15:07:23","modifiedFileCount":"169","status":"M","submitter":"Vladimir Sitnikov"}]
