[{"authorTime":"2019-04-13 04:43:44","codes":[{"authorDate":"2017-04-14 20:58:21","commitOrder":2,"curCode":"  @Test public void testMatchRecognizePatternSkip4() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"     after match skip to LAST down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO LAST `DOWN`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2017-04-25 09:26:09","endLine":7721,"groupId":"10705","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognizePatternSkip4","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/05/089bf17c0006002614a627b1c1efb599477b99.src","preCode":"  @Test public void testMatchRecognizePatternSkip4() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"     after match skip to LAST down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO LAST `DOWN`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7702,"status":"NB"},{"authorDate":"2019-04-13 04:43:44","commitOrder":2,"curCode":"  @Test public void testMatchRecognizePatternSkip6() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"     after match skip to last\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO LAST `LAST`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2019-04-23 23:24:15","endLine":8177,"groupId":"10705","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizePatternSkip6","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/93/c5fa8a85892bad3d7a46f77f07b41c9250a4d0.src","preCode":"  @Test public void testMatchRecognizePatternSkip6() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"     after match skip to last\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO LAST `LAST`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8158,"status":"B"}],"commitId":"577e72cb95e5d4d88f187909c14d8691c266ac4c","commitMessage":"@@@[CALCITE-2993] ParseException may be thrown for legal SQL queries due to incorrect \"LOOKAHEAD(1)\" hints\n\nAlso:\n* Following [CALCITE-883].  add absent non-reserved keywords to config.fmpp files;\n* Remove redundant \"LOOKAHEAD(1)\" hints;\n* The case \"select json_object(key: value) from t\" is added to unit test but not fixed. See the reason from method \"SqlParserTest#testJsonObject\".\n","date":"2019-04-23 23:24:15","modifiedFileCount":"1","status":"M","submitter":"Hongze Zhang"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testMatchRecognizePatternSkip4() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"     after match skip to LAST down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO LAST `DOWN`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":8078,"groupId":"10918","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchRecognizePatternSkip4","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testMatchRecognizePatternSkip4() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"     after match skip to LAST down\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO LAST `DOWN`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8059,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testMatchRecognizePatternSkip6() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"     after match skip to last\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO LAST `LAST`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":8124,"groupId":"10918","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMatchRecognizePatternSkip6","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testMatchRecognizePatternSkip6() {\n    final String sql = \"select *\\n\"\n        + \"  from t match_recognize\\n\"\n        + \"  (\\n\"\n        + \"     after match skip to last\\n\"\n        + \"    pattern (strt down+ up+)\\n\"\n        + \"    define\\n\"\n        + \"      down as down.price < PREV(down.price),\\n\"\n        + \"      up as up.price > prev(up.price)\\n\"\n        + \"  ) mr\";\n    final String expected = \"SELECT *\\n\"\n        + \"FROM `T` MATCH_RECOGNIZE(\\n\"\n        + \"AFTER MATCH SKIP TO LAST `LAST`\\n\"\n        + \"PATTERN (((`STRT` (`DOWN` +)) (`UP` +)))\\n\"\n        + \"DEFINE \"\n        + \"`DOWN` AS (`DOWN`.`PRICE` < PREV(`DOWN`.`PRICE`, 1)), \"\n        + \"`UP` AS (`UP`.`PRICE` > PREV(`UP`.`PRICE`, 1))\"\n        + \") AS `MR`\";\n    sql(sql).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8105,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
