[{"authorTime":"2017-07-22 10:54:05","codes":[{"authorDate":"2017-07-22 10:54:05","commitOrder":1,"curCode":"    public Enumerator<String> enumerator() {\n      final Process process = processSupplier.get();\n      final InputStream is = process.getInputStream();\n      final BufferedInputStream bis =\n          new BufferedInputStream(is);\n      final InputStreamReader isr =\n          new InputStreamReader(bis, StandardCharsets.UTF_8);\n      final BufferedReader br = new BufferedReader(isr);\n      return new Enumerator<String>() {\n        private String line;\n\n        public String current() {\n          return line;\n        }\n\n        public boolean moveNext() {\n          try {\n            line = br.readLine();\n            return line != null;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        public void reset() {\n          throw new UnsupportedOperationException();\n        }\n\n        public void close() {\n          try {\n            br.close();\n          } catch (IOException e) {\n            throw new RuntimeException(\"while running \" + processSupplier, e);\n          }\n          process.destroy();\n        }\n      };\n    }\n","date":"2017-07-28 07:03:52","endLine":118,"groupId":"8644","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"enumerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/19/766a81372eab51fe73e7eb5dc54c5607e4bcbe.src","preCode":"    public Enumerator<String> enumerator() {\n      final Process process = processSupplier.get();\n      final InputStream is = process.getInputStream();\n      final BufferedInputStream bis =\n          new BufferedInputStream(is);\n      final InputStreamReader isr =\n          new InputStreamReader(bis, StandardCharsets.UTF_8);\n      final BufferedReader br = new BufferedReader(isr);\n      return new Enumerator<String>() {\n        private String line;\n\n        public String current() {\n          return line;\n        }\n\n        public boolean moveNext() {\n          try {\n            line = br.readLine();\n            return line != null;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        public void reset() {\n          throw new UnsupportedOperationException();\n        }\n\n        public void close() {\n          try {\n            br.close();\n          } catch (IOException e) {\n            throw new RuntimeException(\"while running \" + processSupplier, e);\n          }\n          process.destroy();\n        }\n      };\n    }\n","realPath":"plus/src/main/java/org/apache/calcite/adapter/os/Processes.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"},{"authorDate":"2017-07-22 10:54:05","commitOrder":1,"curCode":"    public Enumerator<String> enumerator() {\n      final Process process = processSupplier.get();\n      final InputStream is = process.getInputStream();\n      final BufferedInputStream bis =\n          new BufferedInputStream(is);\n      final InputStreamReader isr =\n          new InputStreamReader(bis, StandardCharsets.UTF_8);\n      final BufferedReader br = new BufferedReader(isr);\n      return new Enumerator<String>() {\n        private final StringBuilder b = new StringBuilder();\n        private String line;\n\n        public String current() {\n          return line;\n        }\n\n        public boolean moveNext() {\n          try {\n            for (;;) {\n              int c = br.read();\n              if (c < 0) {\n                return false;\n              }\n              if (c == sep) {\n                line = b.toString();\n                b.setLength(0);\n                return true;\n              }\n              b.append((char) c);\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        public void reset() {\n          throw new UnsupportedOperationException();\n        }\n\n        public void close() {\n          try {\n            br.close();\n          } catch (IOException e) {\n            throw new RuntimeException(\"while running \" + processSupplier, e);\n          }\n          process.destroy();\n        }\n      };\n    }\n","date":"2017-07-28 07:03:52","endLine":180,"groupId":"8642","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"enumerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/19/766a81372eab51fe73e7eb5dc54c5607e4bcbe.src","preCode":"    public Enumerator<String> enumerator() {\n      final Process process = processSupplier.get();\n      final InputStream is = process.getInputStream();\n      final BufferedInputStream bis =\n          new BufferedInputStream(is);\n      final InputStreamReader isr =\n          new InputStreamReader(bis, StandardCharsets.UTF_8);\n      final BufferedReader br = new BufferedReader(isr);\n      return new Enumerator<String>() {\n        private final StringBuilder b = new StringBuilder();\n        private String line;\n\n        public String current() {\n          return line;\n        }\n\n        public boolean moveNext() {\n          try {\n            for (;;) {\n              int c = br.read();\n              if (c < 0) {\n                return false;\n              }\n              if (c == sep) {\n                line = b.toString();\n                b.setLength(0);\n                return true;\n              }\n              b.append((char) c);\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        public void reset() {\n          throw new UnsupportedOperationException();\n        }\n\n        public void close() {\n          try {\n            br.close();\n          } catch (IOException e) {\n            throw new RuntimeException(\"while running \" + processSupplier, e);\n          }\n          process.destroy();\n        }\n      };\n    }\n","realPath":"plus/src/main/java/org/apache/calcite/adapter/os/Processes.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"B"}],"commitId":"d23e529515ce0eb6e0c150052fe3d2c5d90f1747","commitMessage":"@@@[CALCITE-1896] OS adapter and sqlsh\n\nContains tables du.  files.  git_commits.  ps.  stdin;\noption '-o FORMAT' (FORMAT can be mysql.  spaced.  headers.  json.  csv);\noption '--help'.\n\nTested on Ubuntu and macOS (the 'ps' and 'files' commands are\nimplemented fairly differently).\n\nAdded Hook.STANDARD_STREAMS to allow stdin.  stdout.  stderr to be\noverridden for the duration of a statement.  and for thread-safe\ntesting.\n","date":"2017-07-28 07:03:52","modifiedFileCount":"6","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":2,"curCode":"    @Override public Enumerator<String> enumerator() {\n      final Process process = processSupplier.get();\n      final InputStream is = process.getInputStream();\n      final BufferedInputStream bis =\n          new BufferedInputStream(is);\n      final InputStreamReader isr =\n          new InputStreamReader(bis, StandardCharsets.UTF_8);\n      final BufferedReader br = new BufferedReader(isr);\n      return new Enumerator<String>() {\n        private String line;\n\n        @Override public String current() {\n          return line;\n        }\n\n        @Override public boolean moveNext() {\n          try {\n            line = br.readLine();\n            return line != null;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override public void reset() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override public void close() {\n          try {\n            br.close();\n          } catch (IOException e) {\n            throw new RuntimeException(\"while running \" + processSupplier, e);\n          }\n          process.destroy();\n        }\n      };\n    }\n","date":"2020-10-07 05:42:47","endLine":117,"groupId":"11522","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"enumerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/e4e6447bcb513d4fd520c487e7944206d22dff.src","preCode":"    public Enumerator<String> enumerator() {\n      final Process process = processSupplier.get();\n      final InputStream is = process.getInputStream();\n      final BufferedInputStream bis =\n          new BufferedInputStream(is);\n      final InputStreamReader isr =\n          new InputStreamReader(bis, StandardCharsets.UTF_8);\n      final BufferedReader br = new BufferedReader(isr);\n      return new Enumerator<String>() {\n        private String line;\n\n        public String current() {\n          return line;\n        }\n\n        public boolean moveNext() {\n          try {\n            line = br.readLine();\n            return line != null;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        public void reset() {\n          throw new UnsupportedOperationException();\n        }\n\n        public void close() {\n          try {\n            br.close();\n          } catch (IOException e) {\n            throw new RuntimeException(\"while running \" + processSupplier, e);\n          }\n          process.destroy();\n        }\n      };\n    }\n","realPath":"plus/src/main/java/org/apache/calcite/adapter/os/Processes.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":2,"curCode":"    @Override public Enumerator<String> enumerator() {\n      final Process process = processSupplier.get();\n      final InputStream is = process.getInputStream();\n      final BufferedInputStream bis =\n          new BufferedInputStream(is);\n      final InputStreamReader isr =\n          new InputStreamReader(bis, StandardCharsets.UTF_8);\n      final BufferedReader br = new BufferedReader(isr);\n      return new Enumerator<String>() {\n        private final StringBuilder b = new StringBuilder();\n        private String line;\n\n        @Override public String current() {\n          return line;\n        }\n\n        @Override public boolean moveNext() {\n          try {\n            for (;;) {\n              int c = br.read();\n              if (c < 0) {\n                return false;\n              }\n              if (c == sep) {\n                line = b.toString();\n                b.setLength(0);\n                return true;\n              }\n              b.append((char) c);\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override public void reset() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override public void close() {\n          try {\n            br.close();\n          } catch (IOException e) {\n            throw new RuntimeException(\"while running \" + processSupplier, e);\n          }\n          process.destroy();\n        }\n      };\n    }\n","date":"2020-10-07 05:42:47","endLine":179,"groupId":"11522","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"enumerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/e4e6447bcb513d4fd520c487e7944206d22dff.src","preCode":"    public Enumerator<String> enumerator() {\n      final Process process = processSupplier.get();\n      final InputStream is = process.getInputStream();\n      final BufferedInputStream bis =\n          new BufferedInputStream(is);\n      final InputStreamReader isr =\n          new InputStreamReader(bis, StandardCharsets.UTF_8);\n      final BufferedReader br = new BufferedReader(isr);\n      return new Enumerator<String>() {\n        private final StringBuilder b = new StringBuilder();\n        private String line;\n\n        public String current() {\n          return line;\n        }\n\n        public boolean moveNext() {\n          try {\n            for (;;) {\n              int c = br.read();\n              if (c < 0) {\n                return false;\n              }\n              if (c == sep) {\n                line = b.toString();\n                b.setLength(0);\n                return true;\n              }\n              b.append((char) c);\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        public void reset() {\n          throw new UnsupportedOperationException();\n        }\n\n        public void close() {\n          try {\n            br.close();\n          } catch (IOException e) {\n            throw new RuntimeException(\"while running \" + processSupplier, e);\n          }\n          process.destroy();\n        }\n      };\n    }\n","realPath":"plus/src/main/java/org/apache/calcite/adapter/os/Processes.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
