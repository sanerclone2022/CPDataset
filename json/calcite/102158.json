[{"authorTime":"2014-12-30 09:40:39","codes":[{"authorDate":"2014-11-14 11:21:22","commitOrder":4,"curCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode child,\n      boolean indicator,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, child, indicator, groupSet, groupSets, aggCalls);\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","date":"2014-11-14 16:06:24","endLine":90,"groupId":"13689","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"EnumerableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodechild@booleanindicator@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a6/d3885b2bc5745255131d6375ab80c668ddc0de.src","preCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode child,\n      boolean indicator,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, child, indicator, groupSet, groupSets, aggCalls);\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"NB"},{"authorDate":"2014-12-30 09:40:39","commitOrder":4,"curCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode child,\n        boolean indicator,\n        ImmutableBitSet groupSet,\n        List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, child, indicator, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","date":"2015-01-22 07:57:37","endLine":477,"groupId":"13689","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"BindableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodechild@booleanindicator@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/e9b3719fdf02c112912433cd25663ec68ed3e9.src","preCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode child,\n        boolean indicator,\n        ImmutableBitSet groupSet,\n        List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, child, indicator, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/interpreter/Bindables.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"B"}],"commitId":"66cfb120fca58e4c809748e2bcef4d3d5a7c6b82","commitMessage":"@@@[CALCITE-544] Implement Union in Interpreter;\n[CALCITE-562] Implement inner JOIN in interpreter and improve handling of scalar expressions\n\nAlso.  progress towards [CALCITE-558] Add BINDABLE convention and make it the default convention for query root.  but currently ENUMERABLE is still the default. You can enable BINDABLE by setting CalcitePrepareImpl.ENABLE_BINDABLE; there are 184 test failures.\n\nNew interface ArrayBindable extends Bindable. Unlike Bindable the return is guaranteed to be an Object[]. Enumerable convention expects generated code to return a Bindable.  which might return custom classes or arrays.  and if there is a single column.  the array is optimized to the raw column value. Bindable convention assumes that relational expressions implement ArrayBindable and return arrays of column values; the arrays are not optimized if there is only one column.\n\nNew interface Scalar represents a compiled way to execute a scalar expression (or expressions) and is easily built from a RexNode or AggregateCall.\n\nClose apache/incubator-calcite#43\n","date":"2015-01-22 07:57:37","modifiedFileCount":"53","status":"M","submitter":"Julian Hyde"},{"authorTime":"2015-02-09 09:41:35","codes":[{"authorDate":"2014-11-14 11:21:22","commitOrder":5,"curCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode child,\n      boolean indicator,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, child, indicator, groupSet, groupSets, aggCalls);\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","date":"2014-11-14 16:06:24","endLine":90,"groupId":"13689","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"EnumerableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodechild@booleanindicator@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a6/d3885b2bc5745255131d6375ab80c668ddc0de.src","preCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode child,\n      boolean indicator,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, child, indicator, groupSet, groupSets, aggCalls);\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2015-02-09 09:41:35","commitOrder":5,"curCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode input,\n        boolean indicator,\n        ImmutableBitSet groupSet,\n        List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, input, indicator, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","date":"2015-02-09 09:41:35","endLine":475,"groupId":"13689","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"BindableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodeinput@booleanindicator@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0e/63b551bc9a57d6e6d5c6f2397da076f909c314.src","preCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode child,\n        boolean indicator,\n        ImmutableBitSet groupSet,\n        List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, child, indicator, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/interpreter/Bindables.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"}],"commitId":"9bd3ba36edf776a1b0a3b7798c6927f5dc1d9408","commitMessage":"@@@Restore methods removed in [CALCITE-572]; they are now deprecated and will be removed just before 2.0\n\nRename a few parameters to the preferred names: traits -> traitSet.  child -> input.  exps -> projects.\n","date":"2015-02-09 09:41:35","modifiedFileCount":"7","status":"M","submitter":"Julian Hyde"},{"authorTime":"2015-02-09 09:41:35","codes":[{"authorDate":"2017-03-23 03:33:46","commitOrder":6,"curCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode child,\n      boolean indicator,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, child, indicator, groupSet, groupSets, aggCalls);\n    Preconditions.checkArgument(!indicator,\n        \"EnumerableAggregate no longer supports indicator fields\");\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","date":"2017-08-30 12:01:50","endLine":87,"groupId":"13689","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"EnumerableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodechild@booleanindicator@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4d/6fb059c5f2e5adabb65df9183783ef4580375b.src","preCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode child,\n      boolean indicator,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, child, indicator, groupSet, groupSets, aggCalls);\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2015-02-09 09:41:35","commitOrder":6,"curCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode input,\n        boolean indicator,\n        ImmutableBitSet groupSet,\n        List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, input, indicator, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","date":"2015-02-09 09:41:35","endLine":475,"groupId":"13689","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"BindableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodeinput@booleanindicator@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0e/63b551bc9a57d6e6d5c6f2397da076f909c314.src","preCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode input,\n        boolean indicator,\n        ImmutableBitSet groupSet,\n        List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, input, indicator, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/interpreter/Bindables.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"N"}],"commitId":"1e7ae1c30a5e6f4335f2e4cc0059f2f2901e35fd","commitMessage":"@@@[CALCITE-1069] In Aggregate.  deprecate indicators.  and allow GROUPING to be used as an aggregate function\n\nDeprecate the Aggregate.indicator field (strongly encouraging people\nto set it to false) and to allow GROUPING (and its synonym.  GROUP_ID)\nto be used as an aggregate function. It will be handled at implement\ntime.\n\nWith indicator = false.  even queries with more than one grouping set\nwill just output the join keys and the aggregate functions. A join key\nwill be nullable if it doesn't appear in all grouping sets.\n\nThe output row type of Aggregate will be more consistent.  and this will\nhave benefits such as fewer bugs in rules.\n\nAdd RelBuilder.rename().\n\nRemove SqlValidatorNamespace.translate() and\nSqlQualified.suffixTranslated().\n\nMute deprecation warnings.\n\nRemove MutableAggregate.indicator.\n\nClose apache/calcite#470\n","date":"2017-08-30 12:01:50","modifiedFileCount":"49","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-05-31 01:41:41","codes":[{"authorDate":"2019-05-31 01:41:41","commitOrder":7,"curCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode child,\n      boolean indicator,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, child, groupSet, groupSets, aggCalls);\n    Preconditions.checkArgument(!indicator,\n        \"EnumerableAggregate no longer supports indicator fields\");\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","date":"2019-06-01 02:41:23","endLine":88,"groupId":"13689","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"EnumerableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodechild@booleanindicator@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/86/054098db8278dc9edc4982de5d93f031ff3a2c.src","preCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode child,\n      boolean indicator,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, child, indicator, groupSet, groupSets, aggCalls);\n    Preconditions.checkArgument(!indicator,\n        \"EnumerableAggregate no longer supports indicator fields\");\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2019-05-31 01:41:41","commitOrder":7,"curCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode input,\n        boolean indicator,\n        ImmutableBitSet groupSet,\n        List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, input, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      Preconditions.checkArgument(!indicator,\n          \"indicator is not supported, use GROUPING function instead\");\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","date":"2019-06-01 02:41:23","endLine":637,"groupId":"13689","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"BindableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodeinput@booleanindicator@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/35/41bfa22127f8e662c9a74815c1e9fec50c05c6.src","preCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode input,\n        boolean indicator,\n        ImmutableBitSet groupSet,\n        List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, input, indicator, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/interpreter/Bindables.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"}],"commitId":"8a2578787910e3c05c4d17006439de1940c0b195","commitMessage":"@@@[CALCITE-2944] Deprecate Aggregate indicator and remove fields where possible\n","date":"2019-06-01 02:41:23","modifiedFileCount":"24","status":"M","submitter":"Haisheng Yuan"},{"authorTime":"2019-06-01 11:36:14","codes":[{"authorDate":"2019-06-01 11:36:14","commitOrder":8,"curCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode input,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, input, groupSet, groupSets, aggCalls);\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","date":"2019-06-02 07:22:34","endLine":84,"groupId":"13689","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"EnumerableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodeinput@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/31/b2b568ed6719435b6964ac91e090fc0d2bbb98.src","preCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode child,\n      boolean indicator,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, child, groupSet, groupSets, aggCalls);\n    Preconditions.checkArgument(!indicator,\n        \"EnumerableAggregate no longer supports indicator fields\");\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-06-01 11:36:14","commitOrder":8,"curCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode input,\n        ImmutableBitSet groupSet,\n        List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, input, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","date":"2019-06-02 07:22:34","endLine":634,"groupId":"13689","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"BindableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodeinput@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e4/81de058305d187a807678cd6f4dd3571c0c8f8.src","preCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode input,\n        boolean indicator,\n        ImmutableBitSet groupSet,\n        List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, input, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      Preconditions.checkArgument(!indicator,\n          \"indicator is not supported, use GROUPING function instead\");\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/interpreter/Bindables.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"}],"commitId":"b0e83c469ff57257c1ea621ff943ca76f626a9b7","commitMessage":"@@@Following [CALCITE-2944] remove internal uses of Aggregate.indicator\n\nThese were generating deprecation warnings.\n","date":"2019-06-02 07:22:34","modifiedFileCount":"31","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-01-13 11:31:19","codes":[{"authorDate":"2020-01-13 11:31:19","commitOrder":9,"curCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode input,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, ImmutableList.of(), input, groupSet, groupSets, aggCalls);\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","date":"2020-01-13 12:31:07","endLine":84,"groupId":"13689","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"EnumerableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodeinput@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a0/dee72b768f91472e00628a62966b32ad1cfb2d.src","preCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode input,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, input, groupSet, groupSets, aggCalls);\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-01-13 11:31:19","commitOrder":9,"curCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode input,\n        ImmutableBitSet groupSet,\n        List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, ImmutableList.of(), input, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","date":"2020-01-13 12:31:07","endLine":649,"groupId":"13689","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"BindableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodeinput@ImmutableBitSetgroupSet@List<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/50/007d4150c6138018f55eced57b7c2946f4c02e.src","preCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode input,\n        ImmutableBitSet groupSet,\n        List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, input, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/interpreter/Bindables.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":626,"status":"M"}],"commitId":"5cfd8c31cea1bf5411e503b15714cab5fc1c0d0a","commitMessage":"@@@[CALCITE-3723] Following the change to add hints to RelNode.  deprecate the old constructors\n\nConstructors for `Project`.  `TableScan`.  `Calc`.  `Aggregate` and `Join`\nintroduce new parameter named \"hints\" which is a breaking change.\n","date":"2020-01-13 12:31:07","modifiedFileCount":"46","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":10,"curCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode input,\n      ImmutableBitSet groupSet,\n      @Nullable List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, ImmutableList.of(), input, groupSet, groupSets, aggCalls);\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":73,"groupId":"13689","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"EnumerableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodeinput@ImmutableBitSetgroupSet@@NullableList<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/14/a9c8e0df462840ebb2005304edaa62ff7a7ab0.src","preCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode input,\n      ImmutableBitSet groupSet,\n      List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, ImmutableList.of(), input, groupSet, groupSets, aggCalls);\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":10,"curCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode input,\n        ImmutableBitSet groupSet,\n        @Nullable List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, ImmutableList.of(), input, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","date":"2020-11-30 06:45:33","endLine":745,"groupId":"13689","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"BindableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodeinput@ImmutableBitSetgroupSet@@NullableList<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/55/c3f686e41b94ba1b629bc2d98d9f2de2197211.src","preCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode input,\n        ImmutableBitSet groupSet,\n        List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, ImmutableList.of(), input, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/interpreter/Bindables.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":722,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2018-11-14 11:27:42","codes":[{"authorDate":"2018-11-14 11:27:42","commitOrder":11,"curCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode input,\n      ImmutableBitSet groupSet,\n      @Nullable List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, ImmutableList.of(), input, groupSet, groupSets, aggCalls);\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      if (aggCall.distinctKeys != null) {\n        throw new InvalidRelException(\n            \"within-distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","date":"2021-02-12 07:42:13","endLine":77,"groupId":"102158","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"EnumerableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodeinput@ImmutableBitSetgroupSet@@NullableList<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/71/9a39c18691fc7912ddfceb5d66bc6f3556f223.src","preCode":"  public EnumerableAggregate(\n      RelOptCluster cluster,\n      RelTraitSet traitSet,\n      RelNode input,\n      ImmutableBitSet groupSet,\n      @Nullable List<ImmutableBitSet> groupSets,\n      List<AggregateCall> aggCalls)\n      throws InvalidRelException {\n    super(cluster, traitSet, ImmutableList.of(), input, groupSet, groupSets, aggCalls);\n    assert getConvention() instanceof EnumerableConvention;\n\n    for (AggregateCall aggCall : aggCalls) {\n      if (aggCall.isDistinct()) {\n        throw new InvalidRelException(\n            \"distinct aggregation not supported\");\n      }\n      AggImplementor implementor2 =\n          RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n      if (implementor2 == null) {\n        throw new InvalidRelException(\n            \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2018-11-14 11:27:42","commitOrder":11,"curCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode input,\n        ImmutableBitSet groupSet,\n        @Nullable List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, ImmutableList.of(), input, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        if (aggCall.distinctKeys != null) {\n          throw new InvalidRelException(\n              \"within-distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","date":"2021-02-12 07:42:13","endLine":749,"groupId":"102158","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"BindableAggregate","params":"(RelOptClustercluster@RelTraitSettraitSet@RelNodeinput@ImmutableBitSetgroupSet@@NullableList<ImmutableBitSet>groupSets@List<AggregateCall>aggCalls)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/13/9d1405f6f39a99cce97c1e68b6e413c837386e.src","preCode":"    public BindableAggregate(\n        RelOptCluster cluster,\n        RelTraitSet traitSet,\n        RelNode input,\n        ImmutableBitSet groupSet,\n        @Nullable List<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls)\n        throws InvalidRelException {\n      super(cluster, traitSet, ImmutableList.of(), input, groupSet, groupSets, aggCalls);\n      assert getConvention() instanceof BindableConvention;\n\n      for (AggregateCall aggCall : aggCalls) {\n        if (aggCall.isDistinct()) {\n          throw new InvalidRelException(\n              \"distinct aggregation not supported\");\n        }\n        AggImplementor implementor2 =\n            RexImpTable.INSTANCE.get(aggCall.getAggregation(), false);\n        if (implementor2 == null) {\n          throw new InvalidRelException(\n              \"aggregation \" + aggCall.getAggregation() + \" not supported\");\n        }\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/interpreter/Bindables.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":722,"status":"M"}],"commitId":"f1da65504e598928cf77aa6a7244552692ae2529","commitMessage":"@@@[CALCITE-4483] WITHIN DISTINCT clause for aggregate functions (experimental)\n\nThe WITHIN DISTINCT feature is experimental and subject to\nchange/removal without notice.\n\nTo represent WITHIN DISTINCT in relational algebra.  add\nmethod RelBuilder.AggCall.unique() and field\nAggregateCall.distinctKeys.\n\nTo represent WITHIN DISTINCT in the SQL AST.  add\nWITHIN_DISTINCT SQL operator.\n\nAdd a planner rule.  AggregateExpandWithinDistinctRule.  that\nimplements WITHIN DISTINCT by pre-aggregating the rows that\nwill go into each aggregate function.\n\nThere are two variants of the rule; one that throws a runtime\nerror if the operand is not functionally-dependent on the\nWITHIN DISTINCT key.  and one that takes the minimum. The former\nis enabled by default.\n\nThe rule handles DISTINCT aggregate calls by converting them\nto WITHIN DISTINCT (because the latter is a generalization of\nthe former).\n\nAdd an internal $THROW_UNLESS function (invoked when operands\nare not functionally dependent).\n\nFurther work is required to complete the feature:\n * support FILTER clause in combination with WITHIN DISTINCT;\n * support WITHIN DISTINCT clause in GROUPING SETS queries;\n * duplicate detection fails for aggregate functions that\n   respect nulls.\n\nRegarding nulls. Luckily most aggregate functions ignore\nnulls by default.  but exceptions include ARRAY_AGG. If the\ninput to ARRAY_AGG for a given WITHIN-DISTINCT-key value is\n[null.  1.  null].  MIN and MAX will both be 1.  so we cannot\ndetermine that all of the values were not the same.\n\nClose apache/calcite#2339\n","date":"2021-02-12 07:42:13","modifiedFileCount":"46","status":"M","submitter":"Julian Hyde"}]
