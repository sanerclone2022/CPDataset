[{"authorTime":"2016-08-24 06:57:16","codes":[{"authorDate":"2016-08-24 06:57:16","commitOrder":1,"curCode":"  @Test public void testExtractYearMonthDayFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYear, f.literal(2010)), f.lt(f.exYear, f.literal(2020)),\n            f.eq(f.exMonth, f.literal(2)), f.eq(f.exDay, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000Z/2012-03-01T00:00:00.000Z, \"\n            + \"2016-02-29T00:00:00.000Z/2016-03-01T00:00:00.000Z]\"));\n  }\n","date":"2016-09-15 12:46:04","endLine":95,"groupId":"2594","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractYearMonthDayFromDateColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/df43fce9e514dfed7d8b0867f3dacc4495f791.src","preCode":"  @Test public void testExtractYearMonthDayFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYear, f.literal(2010)), f.lt(f.exYear, f.literal(2020)),\n            f.eq(f.exMonth, f.literal(2)), f.eq(f.exDay, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000Z/2012-03-01T00:00:00.000Z, \"\n            + \"2016-02-29T00:00:00.000Z/2016-03-01T00:00:00.000Z]\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2016-08-24 06:57:16","commitOrder":1,"curCode":"  @Test public void testExtractYearMonthDayFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYearTs, f.literal(2010)),\n            f.lt(f.exYearTs, f.literal(2020)),\n            f.eq(f.exMonthTs, f.literal(2)), f.eq(f.exDayTs, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000Z/2012-03-01T00:00:00.000Z, \"\n            + \"2016-02-29T00:00:00.000Z/2016-03-01T00:00:00.000Z]\"));\n  }\n","date":"2016-09-15 12:46:04","endLine":118,"groupId":"5605","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractYearMonthDayFromTimestampColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/df43fce9e514dfed7d8b0867f3dacc4495f791.src","preCode":"  @Test public void testExtractYearMonthDayFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYearTs, f.literal(2010)),\n            f.lt(f.exYearTs, f.literal(2020)),\n            f.eq(f.exMonthTs, f.literal(2)), f.eq(f.exDayTs, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000Z/2012-03-01T00:00:00.000Z, \"\n            + \"2016-02-29T00:00:00.000Z/2016-03-01T00:00:00.000Z]\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"}],"commitId":"962eac566cb19a95d8581a1b10fc120657069b1c","commitMessage":"@@@[CALCITE-1357] Recognize Druid Timeseries and TopN queries in DruidQuery\n\n[CALCITE-1358] Push filters on time dimension to Druid\n\nClose apache/calcite#280\n","date":"2016-09-15 12:46:04","modifiedFileCount":"14","status":"B","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2017-02-03 10:20:02","codes":[{"authorDate":"2017-02-03 10:20:02","commitOrder":2,"curCode":"  @Test public void testExtractYearMonthDayFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYear, f.literal(2010)), f.lt(f.exYear, f.literal(2020)),\n            f.eq(f.exMonth, f.literal(2)), f.eq(f.exDay, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000/2012-03-01T00:00:00.000, \"\n            + \"2016-02-29T00:00:00.000/2016-03-01T00:00:00.000]\"));\n  }\n","date":"2017-02-04 01:59:55","endLine":95,"groupId":"2594","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractYearMonthDayFromDateColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/f7a95be8ea0ec479ce6dc4035a4697b1a35c05.src","preCode":"  @Test public void testExtractYearMonthDayFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYear, f.literal(2010)), f.lt(f.exYear, f.literal(2020)),\n            f.eq(f.exMonth, f.literal(2)), f.eq(f.exDay, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000Z/2012-03-01T00:00:00.000Z, \"\n            + \"2016-02-29T00:00:00.000Z/2016-03-01T00:00:00.000Z]\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2017-02-03 10:20:02","commitOrder":2,"curCode":"  @Test public void testExtractYearMonthDayFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYearTs, f.literal(2010)),\n            f.lt(f.exYearTs, f.literal(2020)),\n            f.eq(f.exMonthTs, f.literal(2)), f.eq(f.exDayTs, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000/2012-03-01T00:00:00.000, \"\n            + \"2016-02-29T00:00:00.000/2016-03-01T00:00:00.000]\"));\n  }\n","date":"2017-02-04 01:59:55","endLine":118,"groupId":"5605","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractYearMonthDayFromTimestampColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/f7a95be8ea0ec479ce6dc4035a4697b1a35c05.src","preCode":"  @Test public void testExtractYearMonthDayFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYearTs, f.literal(2010)),\n            f.lt(f.exYearTs, f.literal(2020)),\n            f.eq(f.exMonthTs, f.literal(2)), f.eq(f.exDayTs, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000Z/2012-03-01T00:00:00.000Z, \"\n            + \"2016-02-29T00:00:00.000Z/2016-03-01T00:00:00.000Z]\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"6759218b014ce2de75cf706843d413b54f808711","commitMessage":"@@@[CALCITE-1617] Druid adapter: Send timestamp literals to Druid as local time.  not UTC\n\nAdd a new class LocalInterval.  because Joda-time's Interval is based\non Instants.  but SQL semantics needs zone-less times.\n\nAlso.  add test case (disabled) for [DRUID-3905].\n","date":"2017-02-04 01:59:55","modifiedFileCount":"8","status":"M","submitter":"Julian Hyde"},{"authorTime":"2017-09-14 20:53:41","codes":[{"authorDate":"2017-02-03 10:20:02","commitOrder":3,"curCode":"  @Test public void testExtractYearMonthDayFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYear, f.literal(2010)), f.lt(f.exYear, f.literal(2020)),\n            f.eq(f.exMonth, f.literal(2)), f.eq(f.exDay, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000/2012-03-01T00:00:00.000, \"\n            + \"2016-02-29T00:00:00.000/2016-03-01T00:00:00.000]\"));\n  }\n","date":"2017-02-04 01:59:55","endLine":95,"groupId":"2594","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractYearMonthDayFromDateColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/f7a95be8ea0ec479ce6dc4035a4697b1a35c05.src","preCode":"  @Test public void testExtractYearMonthDayFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYear, f.literal(2010)), f.lt(f.exYear, f.literal(2020)),\n            f.eq(f.exMonth, f.literal(2)), f.eq(f.exDay, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000/2012-03-01T00:00:00.000, \"\n            + \"2016-02-29T00:00:00.000/2016-03-01T00:00:00.000]\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"},{"authorDate":"2017-09-14 20:53:41","commitOrder":3,"curCode":"  @Test public void testExtractYearMonthDayFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYear, f.literal(2010)),\n            f.lt(f.exYear, f.literal(2020)),\n            f.eq(f.exMonth, f.literal(2)), f.eq(f.exDay, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000/2012-03-01T00:00:00.000, \"\n            + \"2016-02-29T00:00:00.000/2016-03-01T00:00:00.000]\"));\n  }\n","date":"2017-10-03 02:13:43","endLine":120,"groupId":"2594","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractYearMonthDayFromTimestampColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/93a53f3f3e97e5f26366196e244cc48172e1fd.src","preCode":"  @Test public void testExtractYearMonthDayFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYearTs, f.literal(2010)),\n            f.lt(f.exYearTs, f.literal(2020)),\n            f.eq(f.exMonthTs, f.literal(2)), f.eq(f.exDayTs, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000/2012-03-01T00:00:00.000, \"\n            + \"2016-02-29T00:00:00.000/2016-03-01T00:00:00.000]\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"796a28f9a9d49a16971135074f315d536eb929cf","commitMessage":"@@@[CALCITE-1987] Implement EXTRACT for JDBC (Pavel Gubin)\n\nRemove EXTRACT_DATE function (it's all just EXTRACTi now). \nand revise Druid adapter.\n\nClose apache/calcite#539\n","date":"2017-10-03 02:13:43","modifiedFileCount":"8","status":"M","submitter":"pavelgubin"},{"authorTime":"2017-10-14 01:29:27","codes":[{"authorDate":"2017-10-14 01:29:27","commitOrder":4,"curCode":"  @Test public void testExtractYearMonthDayFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYear, f.literal(2010)), f.lt(f.exYear, f.literal(2020)),\n            f.eq(f.exMonth, f.literal(2)), f.eq(f.exDay, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000Z/2012-03-01T00:00:00.000Z, \"\n            + \"2016-02-29T00:00:00.000Z/2016-03-01T00:00:00.000Z]\"));\n  }\n","date":"2017-11-15 07:37:02","endLine":97,"groupId":"2594","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractYearMonthDayFromDateColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/f5b9e75ec54d39abedda2715fee61205278691.src","preCode":"  @Test public void testExtractYearMonthDayFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYear, f.literal(2010)), f.lt(f.exYear, f.literal(2020)),\n            f.eq(f.exMonth, f.literal(2)), f.eq(f.exDay, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000/2012-03-01T00:00:00.000, \"\n            + \"2016-02-29T00:00:00.000/2016-03-01T00:00:00.000]\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2017-10-14 01:29:27","commitOrder":4,"curCode":"  @Test public void testExtractYearMonthDayFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYear, f.literal(2010)),\n            f.lt(f.exYear, f.literal(2020)),\n            f.eq(f.exMonth, f.literal(2)), f.eq(f.exDay, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000Z/2012-03-01T00:00:00.000Z, \"\n            + \"2016-02-29T00:00:00.000Z/2016-03-01T00:00:00.000Z]\"));\n  }\n","date":"2017-11-15 07:37:02","endLine":120,"groupId":"2594","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractYearMonthDayFromTimestampColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/f5b9e75ec54d39abedda2715fee61205278691.src","preCode":"  @Test public void testExtractYearMonthDayFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYear, f.literal(2010)),\n            f.lt(f.exYear, f.literal(2020)),\n            f.eq(f.exMonth, f.literal(2)), f.eq(f.exDay, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000/2012-03-01T00:00:00.000, \"\n            + \"2016-02-29T00:00:00.000/2016-03-01T00:00:00.000]\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"20ade9d266d969f230be7b4e0062db17757e53a3","commitMessage":"@@@[CALCITE-2012] Replace LocalInterval by Interval in Druid adapter\n","date":"2017-11-15 07:37:02","modifiedFileCount":"8","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testExtractYearMonthDayFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYear, f.literal(2010)), f.lt(f.exYear, f.literal(2020)),\n            f.eq(f.exMonth, f.literal(2)), f.eq(f.exDay, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000Z/2012-03-01T00:00:00.000Z, \"\n            + \"2016-02-29T00:00:00.000Z/2016-03-01T00:00:00.000Z]\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":102,"groupId":"10447","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractYearMonthDayFromDateColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/65/ab344132f8c767c7383dc1500dd2b45eac0ac0.src","preCode":"  @Test public void testExtractYearMonthDayFromDateColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYear, f.literal(2010)), f.lt(f.exYear, f.literal(2020)),\n            f.eq(f.exMonth, f.literal(2)), f.eq(f.exDay, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000Z/2012-03-01T00:00:00.000Z, \"\n            + \"2016-02-29T00:00:00.000Z/2016-03-01T00:00:00.000Z]\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testExtractYearMonthDayFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYear, f.literal(2010)),\n            f.lt(f.exYear, f.literal(2020)),\n            f.eq(f.exMonth, f.literal(2)), f.eq(f.exDay, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000Z/2012-03-01T00:00:00.000Z, \"\n            + \"2016-02-29T00:00:00.000Z/2016-03-01T00:00:00.000Z]\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":125,"groupId":"10447","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractYearMonthDayFromTimestampColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/65/ab344132f8c767c7383dc1500dd2b45eac0ac0.src","preCode":"  @Test public void testExtractYearMonthDayFromTimestampColumn() {\n    final Fixture2 f = new Fixture2();\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkDateRange(f,\n        f.and(f.gt(f.exYear, f.literal(2010)),\n            f.lt(f.exYear, f.literal(2020)),\n            f.eq(f.exMonth, f.literal(2)), f.eq(f.exDay, f.literal(29))),\n        is(\"[2012-02-29T00:00:00.000Z/2012-03-01T00:00:00.000Z, \"\n            + \"2016-02-29T00:00:00.000Z/2016-03-01T00:00:00.000Z]\"));\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidDateRangeRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
