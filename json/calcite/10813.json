[{"authorTime":"2015-02-22 10:10:32","codes":[{"authorDate":"2015-02-22 10:10:32","commitOrder":1,"curCode":"  @Test public void testFloorFuncDateTime() {\n    tester.checkFails(\"^floor('12:34:56')^\",\n        \"Cannot apply 'FLOOR' to arguments of type 'FLOOR\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'FLOOR\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkFails(\"^floor(time '12:34:56')^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(123.45 to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor('abcde' to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkScalar(\n        \"floor(time '12:34:56' to minute)\", \"12:34:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:34:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2015-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-02-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"floor(cast(null as timestamp) to month)\");\n  }\n","date":"2015-03-08 07:33:21","endLine":4402,"groupId":"1330","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFloorFuncDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8b/0c0c1853b655d88f580f0e45827d9f382fb3c7.src","preCode":"  @Test public void testFloorFuncDateTime() {\n    tester.checkFails(\"^floor('12:34:56')^\",\n        \"Cannot apply 'FLOOR' to arguments of type 'FLOOR\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'FLOOR\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkFails(\"^floor(time '12:34:56')^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(123.45 to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor('abcde' to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkScalar(\n        \"floor(time '12:34:56' to minute)\", \"12:34:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:34:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2015-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-02-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"floor(cast(null as timestamp) to month)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4377,"status":"B"},{"authorDate":"2015-02-22 10:10:32","commitOrder":1,"curCode":"  @Test public void testCeilFuncDateTime() {\n    tester.checkFails(\"^ceil('12:34:56')^\",\n        \"Cannot apply 'CEIL' to arguments of type 'CEIL\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CEIL\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkFails(\"^ceil(time '12:34:56')^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(123.45 to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil('abcde' to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkScalar(\"ceil(time '12:34:56' to minute)\",\n        \"12:35:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(time '12:59:56' to minute)\",\n        \"13:00:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:57\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.00' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:35:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2016-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"ceil(cast(null as timestamp) to month)\");\n\n    \r\n    tester.checkScalar(\"ceiling(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"ceiling(cast(null as timestamp) to month)\");\n  }\n","date":"2015-03-08 07:33:21","endLine":4438,"groupId":"15245","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCeilFuncDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8b/0c0c1853b655d88f580f0e45827d9f382fb3c7.src","preCode":"  @Test public void testCeilFuncDateTime() {\n    tester.checkFails(\"^ceil('12:34:56')^\",\n        \"Cannot apply 'CEIL' to arguments of type 'CEIL\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CEIL\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkFails(\"^ceil(time '12:34:56')^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(123.45 to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil('abcde' to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkScalar(\"ceil(time '12:34:56' to minute)\",\n        \"12:35:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(time '12:59:56' to minute)\",\n        \"13:00:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:57\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.00' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:35:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2016-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"ceil(cast(null as timestamp) to month)\");\n\n    \r\n    tester.checkScalar(\"ceiling(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"ceiling(cast(null as timestamp) to month)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4404,"status":"B"}],"commitId":"0ecd8702ab95fd59b7ef2182720d12b2167ae968","commitMessage":"@@@[CALCITE-602] Streaming queries\n\nValidate and implement streaming queries: streaming scan.  project.  filter.  aggregate.  sort.\n\nImplement CEIL and FLOOR functions for date-time and numeric values.\n\nAdd CompositeSingleOperandTypeChecker.  and make CompositeOperandTypeChecker work for multiple operands.\n","date":"2015-03-08 07:33:21","modifiedFileCount":"46","status":"B","submitter":"Julian Hyde"},{"authorTime":"2019-07-25 16:03:25","codes":[{"authorDate":"2019-07-25 16:03:25","commitOrder":2,"curCode":"  @Test public void testFloorFuncDateTime() {\n    tester.checkFails(\"^floor('12:34:56')^\",\n        \"Cannot apply 'FLOOR' to arguments of type 'FLOOR\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'FLOOR\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkFails(\"^floor(time '12:34:56')^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(123.45 to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor('abcde' to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\n        \"floor(time '12:34:56' to minute)\", \"12:34:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:34:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2015-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-02-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"floor(cast(null as timestamp) to month)\");\n  }\n","date":"2019-07-30 10:24:45","endLine":7516,"groupId":"1330","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFloorFuncDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/3e9583a4fecec0682f9480c6b4ee1c6a752132.src","preCode":"  @Test public void testFloorFuncDateTime() {\n    tester.checkFails(\"^floor('12:34:56')^\",\n        \"Cannot apply 'FLOOR' to arguments of type 'FLOOR\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'FLOOR\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkFails(\"^floor(time '12:34:56')^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(123.45 to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor('abcde' to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkScalar(\n        \"floor(time '12:34:56' to minute)\", \"12:34:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:34:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2015-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-02-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"floor(cast(null as timestamp) to month)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7487,"status":"M"},{"authorDate":"2019-07-25 16:03:25","commitOrder":2,"curCode":"  @Test public void testCeilFuncDateTime() {\n    tester.checkFails(\"^ceil('12:34:56')^\",\n        \"Cannot apply 'CEIL' to arguments of type 'CEIL\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CEIL\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkFails(\"^ceil(time '12:34:56')^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(123.45 to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil('abcde' to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\"ceil(time '12:34:56' to minute)\",\n        \"12:35:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(time '12:59:56' to minute)\",\n        \"13:00:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:57\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.00' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:35:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2016-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"ceil(cast(null as timestamp) to month)\");\n\n    \r\n    tester.checkScalar(\"ceiling(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"ceiling(cast(null as timestamp) to month)\");\n  }\n","date":"2019-07-30 10:24:45","endLine":7556,"groupId":"15245","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCeilFuncDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/3e9583a4fecec0682f9480c6b4ee1c6a752132.src","preCode":"  @Test public void testCeilFuncDateTime() {\n    tester.checkFails(\"^ceil('12:34:56')^\",\n        \"Cannot apply 'CEIL' to arguments of type 'CEIL\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CEIL\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkFails(\"^ceil(time '12:34:56')^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(123.45 to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil('abcde' to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkScalar(\"ceil(time '12:34:56' to minute)\",\n        \"12:35:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(time '12:59:56' to minute)\",\n        \"13:00:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:57\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.00' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:35:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2016-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"ceil(cast(null as timestamp) to month)\");\n\n    \r\n    tester.checkScalar(\"ceiling(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"ceiling(cast(null as timestamp) to month)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7518,"status":"M"}],"commitId":"ccad6f982fc0d6bd45424e602ec0432a1bcecda7","commitMessage":"@@@[CALCITE-2496] Return 0 in case of extract(milli/micro/nanosecond from datel) (Sergey Nuyanzin.  Chunwei Lei)\n","date":"2019-07-30 10:24:45","modifiedFileCount":"2","status":"M","submitter":"Chunwei Lei"},{"authorTime":"2018-05-30 12:16:57","codes":[{"authorDate":"2018-05-30 12:16:57","commitOrder":3,"curCode":"  @Test public void testFloorFuncDateTime() {\n    strictTester.checkFails(\"^floor('12:34:56')^\",\n        \"Cannot apply 'FLOOR' to arguments of type 'FLOOR\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'FLOOR\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkType(\"floor('12:34:56')\", \"DECIMAL(19, 0) NOT NULL\");\n    tester.checkFails(\"^floor(time '12:34:56')^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(123.45 to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor('abcde' to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\n        \"floor(time '12:34:56' to minute)\", \"12:34:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:34:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2015-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-02-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"floor(cast(null as timestamp) to month)\");\n  }\n","date":"2019-08-29 17:01:46","endLine":7635,"groupId":"1330","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFloorFuncDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/fce4b116dff8e30a5e69172941e134c36f92d1.src","preCode":"  @Test public void testFloorFuncDateTime() {\n    tester.checkFails(\"^floor('12:34:56')^\",\n        \"Cannot apply 'FLOOR' to arguments of type 'FLOOR\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'FLOOR\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkFails(\"^floor(time '12:34:56')^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(123.45 to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor('abcde' to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\n        \"floor(time '12:34:56' to minute)\", \"12:34:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:34:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2015-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-02-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"floor(cast(null as timestamp) to month)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7605,"status":"M"},{"authorDate":"2018-05-30 12:16:57","commitOrder":3,"curCode":"  @Test public void testCeilFuncDateTime() {\n    strictTester.checkFails(\"^ceil('12:34:56')^\",\n        \"Cannot apply 'CEIL' to arguments of type 'CEIL\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CEIL\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkType(\"ceil('12:34:56')\", \"DECIMAL(19, 0) NOT NULL\");\n    tester.checkFails(\"^ceil(time '12:34:56')^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(123.45 to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil('abcde' to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\"ceil(time '12:34:56' to minute)\",\n        \"12:35:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(time '12:59:56' to minute)\",\n        \"13:00:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:57\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.00' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:35:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2016-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"ceil(cast(null as timestamp) to month)\");\n\n    \r\n    tester.checkScalar(\"ceiling(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"ceiling(cast(null as timestamp) to month)\");\n  }\n","date":"2019-08-29 17:01:46","endLine":7676,"groupId":"15245","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCeilFuncDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/fce4b116dff8e30a5e69172941e134c36f92d1.src","preCode":"  @Test public void testCeilFuncDateTime() {\n    tester.checkFails(\"^ceil('12:34:56')^\",\n        \"Cannot apply 'CEIL' to arguments of type 'CEIL\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CEIL\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkFails(\"^ceil(time '12:34:56')^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(123.45 to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil('abcde' to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\"ceil(time '12:34:56' to minute)\",\n        \"12:35:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(time '12:59:56' to minute)\",\n        \"13:00:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:57\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.00' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:35:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2016-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"ceil(cast(null as timestamp) to month)\");\n\n    \r\n    tester.checkScalar(\"ceiling(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"ceiling(cast(null as timestamp) to month)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7637,"status":"M"}],"commitId":"01477c42ded991aaa7b14cf72a6e4ea1a20edf5e","commitMessage":"@@@[CALCITE-2302] Implicit type cast support\n\nChanges:\n* Support full implicit type coercion for SQL contexts:\nSet operation.  binary arithmetic exprs.  binary equality\nexprs.  binary comparison exprs.  case when(COALESCE). \nIN operation.  builtin functions.  user defined function(UDF);\n* The SqlValidator now takes a component named `TypeCoercion`\nresponsible for the coercion work.  you can turn off the coercion with\n`SqlValidator#setEnableTypeCoercion(false)`;\n* We follow PostgreSQL and SQL-SERVER conversion style for two integers division. \ni.e. `'9'/2` returns INTEGER 4.\n","date":"2019-08-29 17:01:46","modifiedFileCount":"50","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2019-10-17 16:22:09","codes":[{"authorDate":"2019-10-17 16:22:09","commitOrder":4,"curCode":"  @Test public void testFloorFuncDateTime() {\n    strictTester.checkFails(\"^floor('12:34:56')^\",\n        \"Cannot apply 'FLOOR' to arguments of type 'FLOOR\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'FLOOR\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkType(\"floor('12:34:56')\", \"DECIMAL(19, 0) NOT NULL\");\n    tester.checkFails(\"^floor(time '12:34:56')^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(123.45 to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor('abcde' to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\n        \"floor(time '12:34:56' to minute)\", \"12:34:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:34:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2015-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(date '2015-02-19' to year)\",\n        \"2015-01-01\", \"DATE NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-02-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(date '2015-02-19' to month)\",\n        \"2015-02-01\", \"DATE NOT NULL\");\n    tester.checkNull(\"floor(cast(null as timestamp) to month)\");\n    tester.checkNull(\"floor(cast(null as date) to month)\");\n  }\n","date":"2020-03-09 11:44:30","endLine":7919,"groupId":"1330","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFloorFuncDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e1/6a7aff59e119a259aafd81773046839eadb38b.src","preCode":"  @Test public void testFloorFuncDateTime() {\n    strictTester.checkFails(\"^floor('12:34:56')^\",\n        \"Cannot apply 'FLOOR' to arguments of type 'FLOOR\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'FLOOR\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkType(\"floor('12:34:56')\", \"DECIMAL(19, 0) NOT NULL\");\n    tester.checkFails(\"^floor(time '12:34:56')^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(123.45 to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor('abcde' to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\n        \"floor(time '12:34:56' to minute)\", \"12:34:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:34:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2015-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-02-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"floor(cast(null as timestamp) to month)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7884,"status":"M"},{"authorDate":"2019-10-17 16:22:09","commitOrder":4,"curCode":"  @Test public void testCeilFuncDateTime() {\n    strictTester.checkFails(\"^ceil('12:34:56')^\",\n        \"Cannot apply 'CEIL' to arguments of type 'CEIL\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CEIL\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkType(\"ceil('12:34:56')\", \"DECIMAL(19, 0) NOT NULL\");\n    tester.checkFails(\"^ceil(time '12:34:56')^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(123.45 to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil('abcde' to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\"ceil(time '12:34:56' to minute)\",\n        \"12:35:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(time '12:59:56' to minute)\",\n        \"13:00:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:57\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.00' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:35:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2016-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(date '2015-02-19' to year)\",\n        \"2016-01-01\", \"DATE NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(date '2015-02-19' to month)\",\n        \"2015-03-01\", \"DATE NOT NULL\");\n    tester.checkNull(\"ceil(cast(null as timestamp) to month)\");\n    tester.checkNull(\"ceil(cast(null as date) to month)\");\n\n    \r\n    tester.checkScalar(\"ceiling(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceiling(date '2015-02-19' to month)\",\n        \"2015-03-01\", \"DATE NOT NULL\");\n    tester.checkNull(\"ceiling(cast(null as timestamp) to month)\");\n  }\n","date":"2020-03-09 11:44:30","endLine":7967,"groupId":"15245","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCeilFuncDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e1/6a7aff59e119a259aafd81773046839eadb38b.src","preCode":"  @Test public void testCeilFuncDateTime() {\n    strictTester.checkFails(\"^ceil('12:34:56')^\",\n        \"Cannot apply 'CEIL' to arguments of type 'CEIL\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CEIL\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkType(\"ceil('12:34:56')\", \"DECIMAL(19, 0) NOT NULL\");\n    tester.checkFails(\"^ceil(time '12:34:56')^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(123.45 to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil('abcde' to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\"ceil(time '12:34:56' to minute)\",\n        \"12:35:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(time '12:59:56' to minute)\",\n        \"13:00:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:57\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.00' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:35:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2016-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"ceil(cast(null as timestamp) to month)\");\n\n    \r\n    tester.checkScalar(\"ceiling(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkNull(\"ceiling(cast(null as timestamp) to month)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7921,"status":"M"}],"commitId":"91f5bb5589ca5b7c08b09969ad21c5e9bd18d293","commitMessage":"@@@[CALCITE-3412] FLOOR(timestamp TO WEEK) gives wrong result\n\nUpgrade to avatica-1.16.0.  getting fix for [CALCITE-3199]\n\"DateTimeUtils.unixDateCeil should not return the same value as\nunixDateFloor\".\n\nImplement \"FLOOR(date TO timeUnit)\" for QUARTER.  WEEK.  and fix bugs in\nYEAR.  MONTH.\n","date":"2020-03-09 11:44:30","modifiedFileCount":"3","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testFloorFuncDateTime() {\n    strictTester.checkFails(\"^floor('12:34:56')^\",\n        \"Cannot apply 'FLOOR' to arguments of type 'FLOOR\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'FLOOR\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkType(\"floor('12:34:56')\", \"DECIMAL(19, 0) NOT NULL\");\n    tester.checkFails(\"^floor(time '12:34:56')^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(123.45 to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor('abcde' to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\n        \"floor(time '12:34:56' to minute)\", \"12:34:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:34:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2015-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(date '2015-02-19' to year)\",\n        \"2015-01-01\", \"DATE NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-02-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(date '2015-02-19' to month)\",\n        \"2015-02-01\", \"DATE NOT NULL\");\n    tester.checkNull(\"floor(cast(null as timestamp) to month)\");\n    tester.checkNull(\"floor(cast(null as date) to month)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":8028,"groupId":"1330","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFloorFuncDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testFloorFuncDateTime() {\n    strictTester.checkFails(\"^floor('12:34:56')^\",\n        \"Cannot apply 'FLOOR' to arguments of type 'FLOOR\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'FLOOR\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkType(\"floor('12:34:56')\", \"DECIMAL(19, 0) NOT NULL\");\n    tester.checkFails(\"^floor(time '12:34:56')^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(123.45 to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor('abcde' to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\n        \"floor(time '12:34:56' to minute)\", \"12:34:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:34:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2015-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(date '2015-02-19' to year)\",\n        \"2015-01-01\", \"DATE NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-02-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(date '2015-02-19' to month)\",\n        \"2015-02-01\", \"DATE NOT NULL\");\n    tester.checkNull(\"floor(cast(null as timestamp) to month)\");\n    tester.checkNull(\"floor(cast(null as date) to month)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7993,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testCeilFuncDateTime() {\n    strictTester.checkFails(\"^ceil('12:34:56')^\",\n        \"Cannot apply 'CEIL' to arguments of type 'CEIL\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CEIL\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkType(\"ceil('12:34:56')\", \"DECIMAL(19, 0) NOT NULL\");\n    tester.checkFails(\"^ceil(time '12:34:56')^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(123.45 to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil('abcde' to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\"ceil(time '12:34:56' to minute)\",\n        \"12:35:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(time '12:59:56' to minute)\",\n        \"13:00:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:57\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.00' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:35:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2016-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(date '2015-02-19' to year)\",\n        \"2016-01-01\", \"DATE NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(date '2015-02-19' to month)\",\n        \"2015-03-01\", \"DATE NOT NULL\");\n    tester.checkNull(\"ceil(cast(null as timestamp) to month)\");\n    tester.checkNull(\"ceil(cast(null as date) to month)\");\n\n    \r\n    tester.checkScalar(\"ceiling(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceiling(date '2015-02-19' to month)\",\n        \"2015-03-01\", \"DATE NOT NULL\");\n    tester.checkNull(\"ceiling(cast(null as timestamp) to month)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":8076,"groupId":"15245","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCeilFuncDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testCeilFuncDateTime() {\n    strictTester.checkFails(\"^ceil('12:34:56')^\",\n        \"Cannot apply 'CEIL' to arguments of type 'CEIL\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CEIL\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkType(\"ceil('12:34:56')\", \"DECIMAL(19, 0) NOT NULL\");\n    tester.checkFails(\"^ceil(time '12:34:56')^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(123.45 to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil('abcde' to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\"ceil(time '12:34:56' to minute)\",\n        \"12:35:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(time '12:59:56' to minute)\",\n        \"13:00:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:57\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.00' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:35:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2016-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(date '2015-02-19' to year)\",\n        \"2016-01-01\", \"DATE NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(date '2015-02-19' to month)\",\n        \"2015-03-01\", \"DATE NOT NULL\");\n    tester.checkNull(\"ceil(cast(null as timestamp) to month)\");\n    tester.checkNull(\"ceil(cast(null as date) to month)\");\n\n    \r\n    tester.checkScalar(\"ceiling(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceiling(date '2015-02-19' to month)\",\n        \"2015-03-01\", \"DATE NOT NULL\");\n    tester.checkNull(\"ceiling(cast(null as timestamp) to month)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8030,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-25 03:37:33","codes":[{"authorDate":"2020-09-25 03:37:33","commitOrder":6,"curCode":"  @Test void testFloorFuncDateTime() {\n    strictTester.checkFails(\"^floor('12:34:56')^\",\n        \"Cannot apply 'FLOOR' to arguments of type 'FLOOR\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'FLOOR\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkType(\"floor('12:34:56')\", \"DECIMAL(19, 0) NOT NULL\");\n    tester.checkFails(\"^floor(time '12:34:56')^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(123.45 to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor('abcde' to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"floor(timestamp '2015-02-19 12:34:56.78' to ^microsecond^)\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"floor(timestamp '2015-02-19 12:34:56.78' to ^nanosecond^)\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\n        \"floor(time '12:34:56' to minute)\", \"12:34:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:34:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2015-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(date '2015-02-19' to year)\",\n        \"2015-01-01\", \"DATE NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-02-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(date '2015-02-19' to month)\",\n        \"2015-02-01\", \"DATE NOT NULL\");\n    tester.checkNull(\"floor(cast(null as timestamp) to month)\");\n    tester.checkNull(\"floor(cast(null as date) to month)\");\n  }\n","date":"2020-10-01 08:47:03","endLine":8081,"groupId":"10813","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testFloorFuncDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c4/f56125e34aa5f6eb522e231062199f4225e3aa.src","preCode":"  @Test void testFloorFuncDateTime() {\n    strictTester.checkFails(\"^floor('12:34:56')^\",\n        \"Cannot apply 'FLOOR' to arguments of type 'FLOOR\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'FLOOR\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'FLOOR\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkType(\"floor('12:34:56')\", \"DECIMAL(19, 0) NOT NULL\");\n    tester.checkFails(\"^floor(time '12:34:56')^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(123.45 to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor('abcde' to minute)^\",\n        \"(?s)Cannot apply 'FLOOR' to arguments .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^floor(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\n        \"floor(time '12:34:56' to minute)\", \"12:34:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:34:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2015-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(date '2015-02-19' to year)\",\n        \"2015-01-01\", \"DATE NOT NULL\");\n    tester.checkScalar(\"floor(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-02-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"floor(date '2015-02-19' to month)\",\n        \"2015-02-01\", \"DATE NOT NULL\");\n    tester.checkNull(\"floor(cast(null as timestamp) to month)\");\n    tester.checkNull(\"floor(cast(null as date) to month)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8046,"status":"M"},{"authorDate":"2020-09-25 03:37:33","commitOrder":6,"curCode":"  @Test void testCeilFuncDateTime() {\n    strictTester.checkFails(\"^ceil('12:34:56')^\",\n        \"Cannot apply 'CEIL' to arguments of type 'CEIL\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CEIL\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkType(\"ceil('12:34:56')\", \"DECIMAL(19, 0) NOT NULL\");\n    tester.checkFails(\"^ceil(time '12:34:56')^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(123.45 to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil('abcde' to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"ceil(timestamp '2015-02-19 12:34:56.78' to ^microsecond^)\",\n        \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"ceil(timestamp '2015-02-19 12:34:56.78' to ^nanosecond^)\",\n        \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\"ceil(time '12:34:56' to minute)\",\n        \"12:35:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(time '12:59:56' to minute)\",\n        \"13:00:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:57\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.00' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:35:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2016-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(date '2015-02-19' to year)\",\n        \"2016-01-01\", \"DATE NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(date '2015-02-19' to month)\",\n        \"2015-03-01\", \"DATE NOT NULL\");\n    tester.checkNull(\"ceil(cast(null as timestamp) to month)\");\n    tester.checkNull(\"ceil(cast(null as date) to month)\");\n\n    \r\n    tester.checkScalar(\"ceiling(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceiling(date '2015-02-19' to month)\",\n        \"2015-03-01\", \"DATE NOT NULL\");\n    tester.checkNull(\"ceiling(cast(null as timestamp) to month)\");\n  }\n","date":"2020-10-01 08:47:03","endLine":8129,"groupId":"10813","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCeilFuncDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c4/f56125e34aa5f6eb522e231062199f4225e3aa.src","preCode":"  @Test void testCeilFuncDateTime() {\n    strictTester.checkFails(\"^ceil('12:34:56')^\",\n        \"Cannot apply 'CEIL' to arguments of type 'CEIL\\\\(<CHAR\\\\(8\\\\)>\\\\)'\\\\. Supported form\\\\(s\\\\): 'CEIL\\\\(<NUMERIC>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATETIME_INTERVAL>\\\\)'\\n\"\n            + \"'CEIL\\\\(<DATE> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIME> TO <TIME_UNIT>\\\\)'\\n\"\n            + \"'CEIL\\\\(<TIMESTAMP> TO <TIME_UNIT>\\\\)'\",\n        false);\n    tester.checkType(\"ceil('12:34:56')\", \"DECIMAL(19, 0) NOT NULL\");\n    tester.checkFails(\"^ceil(time '12:34:56')^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(123.45 to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil('abcde' to minute)^\",\n        \"(?s)Cannot apply 'CEIL' to arguments .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to microsecond)^\",\n            \"(?s)Encountered \\\"microsecond\\\" at .*\", false);\n    tester.checkFails(\"^ceil(timestamp '2015-02-19 12:34:56.78' to nanosecond)^\",\n            \"(?s)Encountered \\\"nanosecond\\\" at .*\", false);\n    tester.checkScalar(\"ceil(time '12:34:56' to minute)\",\n        \"12:35:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(time '12:59:56' to minute)\",\n        \"13:00:00\", \"TIME(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.78' to second)\",\n        \"2015-02-19 12:34:57\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56.00' to second)\",\n        \"2015-02-19 12:34:56\", \"TIMESTAMP(2) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to minute)\",\n        \"2015-02-19 12:35:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to year)\",\n        \"2016-01-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(date '2015-02-19' to year)\",\n        \"2016-01-01\", \"DATE NOT NULL\");\n    tester.checkScalar(\"ceil(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceil(date '2015-02-19' to month)\",\n        \"2015-03-01\", \"DATE NOT NULL\");\n    tester.checkNull(\"ceil(cast(null as timestamp) to month)\");\n    tester.checkNull(\"ceil(cast(null as date) to month)\");\n\n    \r\n    tester.checkScalar(\"ceiling(timestamp '2015-02-19 12:34:56' to month)\",\n        \"2015-03-01 00:00:00\", \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\"ceiling(date '2015-02-19' to month)\",\n        \"2015-03-01\", \"DATE NOT NULL\");\n    tester.checkNull(\"ceiling(cast(null as timestamp) to month)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8083,"status":"M"}],"commitId":"f704450de0c24faa106206d2da4981cdf385d45f","commitMessage":"@@@Improve positions in SQL validator error messages\n\nMove class StringAndPos to top-level from SqlParserUtil.\n\nAdd RelBuilder.aggregateCall(AggregateCall).  to create a\nRelBuilder.AggCall with the same contents as an AggregateCall.\n\nAdd ImmutableBitSet.toImmutableBitSet.  Util.first(List). \nUtil.first(List.  int).  Pair.forEach(Iterable.  BiConsumer).\n","date":"2020-10-01 08:47:03","modifiedFileCount":"23","status":"M","submitter":"Julian Hyde"}]
