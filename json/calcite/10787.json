[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testExpFunc() {\n    tester.setFor(SqlStdOperatorTable.EXP, VM_FENNEL);\n    tester.checkScalarApprox(\n        \"exp(2)\", \"DOUBLE NOT NULL\", 7.389056, 0.000001);\n    tester.checkScalarApprox(\n        \"exp(-2)\",\n        \"DOUBLE NOT NULL\",\n        0.1353,\n        0.0001);\n    tester.checkNull(\"exp(cast(null as integer))\");\n    tester.checkNull(\"exp(cast(null as double))\");\n  }\n","date":"2014-11-14 09:39:34","endLine":3492,"groupId":"8840","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testExpFunc() {\n    tester.setFor(SqlStdOperatorTable.EXP, VM_FENNEL);\n    tester.checkScalarApprox(\n        \"exp(2)\", \"DOUBLE NOT NULL\", 7.389056, 0.000001);\n    tester.checkScalarApprox(\n        \"exp(-2)\",\n        \"DOUBLE NOT NULL\",\n        0.1353,\n        0.0001);\n    tester.checkNull(\"exp(cast(null as integer))\");\n    tester.checkNull(\"exp(cast(null as double))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3481,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testLogFunc() {\n    tester.setFor(SqlStdOperatorTable.LOG10);\n    tester.checkScalarApprox(\n        \"log10(10)\",\n        \"DOUBLE NOT NULL\",\n        1.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(100.0)\",\n        \"DOUBLE NOT NULL\",\n        2.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(cast(10e8 as double))\",\n        \"DOUBLE NOT NULL\",\n        9.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(cast(10e2 as float))\",\n        \"DOUBLE NOT NULL\",\n        3.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(cast(10e-3 as real))\",\n        \"DOUBLE NOT NULL\",\n        -2.0,\n        0.000001);\n    tester.checkNull(\"log10(cast(null as real))\");\n  }\n","date":"2014-11-14 09:39:34","endLine":3586,"groupId":"8840","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLogFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testLogFunc() {\n    tester.setFor(SqlStdOperatorTable.LOG10);\n    tester.checkScalarApprox(\n        \"log10(10)\",\n        \"DOUBLE NOT NULL\",\n        1.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(100.0)\",\n        \"DOUBLE NOT NULL\",\n        2.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(cast(10e8 as double))\",\n        \"DOUBLE NOT NULL\",\n        9.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(cast(10e2 as float))\",\n        \"DOUBLE NOT NULL\",\n        3.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(cast(10e-3 as real))\",\n        \"DOUBLE NOT NULL\",\n        -2.0,\n        0.000001);\n    tester.checkNull(\"log10(cast(null as real))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3558,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testExpFunc() {\n    tester.setFor(SqlStdOperatorTable.EXP, VM_FENNEL);\n    tester.checkScalarApprox(\n        \"exp(2)\", \"DOUBLE NOT NULL\", 7.389056, 0.000001);\n    tester.checkScalarApprox(\n        \"exp(-2)\",\n        \"DOUBLE NOT NULL\",\n        0.1353,\n        0.0001);\n    tester.checkNull(\"exp(cast(null as integer))\");\n    tester.checkNull(\"exp(cast(null as double))\");\n  }\n","date":"2020-04-06 04:57:49","endLine":5467,"groupId":"10787","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testExpFunc() {\n    tester.setFor(SqlStdOperatorTable.EXP, VM_FENNEL);\n    tester.checkScalarApprox(\n        \"exp(2)\", \"DOUBLE NOT NULL\", 7.389056, 0.000001);\n    tester.checkScalarApprox(\n        \"exp(-2)\",\n        \"DOUBLE NOT NULL\",\n        0.1353,\n        0.0001);\n    tester.checkNull(\"exp(cast(null as integer))\");\n    tester.checkNull(\"exp(cast(null as double))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5456,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testLogFunc() {\n    tester.setFor(SqlStdOperatorTable.LOG10);\n    tester.checkScalarApprox(\n        \"log10(10)\",\n        \"DOUBLE NOT NULL\",\n        1.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(100.0)\",\n        \"DOUBLE NOT NULL\",\n        2.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(cast(10e8 as double))\",\n        \"DOUBLE NOT NULL\",\n        9.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(cast(10e2 as float))\",\n        \"DOUBLE NOT NULL\",\n        3.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(cast(10e-3 as real))\",\n        \"DOUBLE NOT NULL\",\n        -2.0,\n        0.000001);\n    tester.checkNull(\"log10(cast(null as real))\");\n  }\n","date":"2020-04-06 04:57:49","endLine":5561,"groupId":"10787","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLogFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testLogFunc() {\n    tester.setFor(SqlStdOperatorTable.LOG10);\n    tester.checkScalarApprox(\n        \"log10(10)\",\n        \"DOUBLE NOT NULL\",\n        1.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(100.0)\",\n        \"DOUBLE NOT NULL\",\n        2.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(cast(10e8 as double))\",\n        \"DOUBLE NOT NULL\",\n        9.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(cast(10e2 as float))\",\n        \"DOUBLE NOT NULL\",\n        3.0,\n        0.000001);\n    tester.checkScalarApprox(\n        \"log10(cast(10e-3 as real))\",\n        \"DOUBLE NOT NULL\",\n        -2.0,\n        0.000001);\n    tester.checkNull(\"log10(cast(null as real))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5533,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
