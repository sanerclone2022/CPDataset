[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testOne() {\n    final List<String> tomDickHarry = Arrays.asList(\"tom\", \"dick\", \"harry\");\n    final Filterator<String> filterator =\n        new Filterator<String>(tomDickHarry.iterator(), String.class);\n\n    \r\n    assertTrue(filterator.hasNext());\n    assertTrue(filterator.hasNext());\n    assertEquals(\"tom\", filterator.next());\n\n    \r\n    assertEquals(\"dick\", filterator.next());\n    assertTrue(filterator.hasNext());\n    assertEquals(\"harry\", filterator.next());\n    assertFalse(filterator.hasNext());\n    assertFalse(filterator.hasNext());\n  }\n","date":"2014-11-14 09:39:34","endLine":49,"groupId":"10394","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/f1dfbab98cdaada7313e96d21c613e73d539f1.src","preCode":"  @Test public void testOne() {\n    final List<String> tomDickHarry = Arrays.asList(\"tom\", \"dick\", \"harry\");\n    final Filterator<String> filterator =\n        new Filterator<String>(tomDickHarry.iterator(), String.class);\n\n    \r\n    assertTrue(filterator.hasNext());\n    assertTrue(filterator.hasNext());\n    assertEquals(\"tom\", filterator.next());\n\n    \r\n    assertEquals(\"dick\", filterator.next());\n    assertTrue(filterator.hasNext());\n    assertEquals(\"harry\", filterator.next());\n    assertFalse(filterator.hasNext());\n    assertFalse(filterator.hasNext());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/FilteratorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testNulls() {\n    \r\n    \r\n    final List<String> tomDickHarry = Arrays.asList(\"paul\", null, \"ringo\");\n    final Filterator<String> filterator =\n        new Filterator<String>(tomDickHarry.iterator(), String.class);\n    assertEquals(\"paul\", filterator.next());\n    assertEquals(\"ringo\", filterator.next());\n    assertFalse(filterator.hasNext());\n  }\n","date":"2014-11-14 09:39:34","endLine":60,"groupId":"10394","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/f1dfbab98cdaada7313e96d21c613e73d539f1.src","preCode":"  @Test public void testNulls() {\n    \r\n    \r\n    final List<String> tomDickHarry = Arrays.asList(\"paul\", null, \"ringo\");\n    final Filterator<String> filterator =\n        new Filterator<String>(tomDickHarry.iterator(), String.class);\n    assertEquals(\"paul\", filterator.next());\n    assertEquals(\"ringo\", filterator.next());\n    assertFalse(filterator.hasNext());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/FilteratorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testOne() {\n    final List<String> tomDickHarry = Arrays.asList(\"tom\", \"dick\", \"harry\");\n    final Filterator<String> filterator =\n        new Filterator<String>(tomDickHarry.iterator(), String.class);\n\n    \r\n    assertTrue(filterator.hasNext());\n    assertTrue(filterator.hasNext());\n    assertEquals(\"tom\", filterator.next());\n\n    \r\n    assertEquals(\"dick\", filterator.next());\n    assertTrue(filterator.hasNext());\n    assertEquals(\"harry\", filterator.next());\n    assertFalse(filterator.hasNext());\n    assertFalse(filterator.hasNext());\n  }\n","date":"2020-04-06 04:57:49","endLine":57,"groupId":"101030","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/b016996ce22008b1b7402eb1a99f4bad1b126c.src","preCode":"  @Test public void testOne() {\n    final List<String> tomDickHarry = Arrays.asList(\"tom\", \"dick\", \"harry\");\n    final Filterator<String> filterator =\n        new Filterator<String>(tomDickHarry.iterator(), String.class);\n\n    \r\n    assertTrue(filterator.hasNext());\n    assertTrue(filterator.hasNext());\n    assertEquals(\"tom\", filterator.next());\n\n    \r\n    assertEquals(\"dick\", filterator.next());\n    assertTrue(filterator.hasNext());\n    assertEquals(\"harry\", filterator.next());\n    assertFalse(filterator.hasNext());\n    assertFalse(filterator.hasNext());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/FilteratorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testNulls() {\n    \r\n    \r\n    final List<String> tomDickHarry = Arrays.asList(\"paul\", null, \"ringo\");\n    final Filterator<String> filterator =\n        new Filterator<String>(tomDickHarry.iterator(), String.class);\n    assertEquals(\"paul\", filterator.next());\n    assertEquals(\"ringo\", filterator.next());\n    assertFalse(filterator.hasNext());\n  }\n","date":"2020-04-06 04:57:49","endLine":68,"groupId":"101030","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/b016996ce22008b1b7402eb1a99f4bad1b126c.src","preCode":"  @Test public void testNulls() {\n    \r\n    \r\n    final List<String> tomDickHarry = Arrays.asList(\"paul\", null, \"ringo\");\n    final Filterator<String> filterator =\n        new Filterator<String>(tomDickHarry.iterator(), String.class);\n    assertEquals(\"paul\", filterator.next());\n    assertEquals(\"ringo\", filterator.next());\n    assertFalse(filterator.hasNext());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/FilteratorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
