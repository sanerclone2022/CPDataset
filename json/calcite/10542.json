[{"authorTime":"2016-02-19 03:49:20","codes":[{"authorDate":"2016-11-03 13:30:04","commitOrder":2,"curCode":"    private String translateAnd(RexNode condition) {\n      List<String> predicates = new ArrayList<String>();\n      for (RexNode node : RelOptUtil.conjunctions(condition)) {\n        predicates.add(translateMatch2(node));\n      }\n\n      return Util.toString(predicates, \"\", \" AND \", \"\");\n    }\n","date":"2018-02-17 02:18:02","endLine":131,"groupId":"2227","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"translateAnd","params":"(RexNodecondition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e4/e5ac9751d7cca1704277f1bff61eadde01da35.src","preCode":"    private String translateAnd(RexNode condition) {\n      List<String> predicates = new ArrayList<String>();\n      for (RexNode node : RelOptUtil.conjunctions(condition)) {\n        predicates.add(translateMatch2(node));\n      }\n\n      return Util.toString(predicates, \"\", \" AND \", \"\");\n    }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeFilter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"},{"authorDate":"2016-02-19 03:49:20","commitOrder":2,"curCode":"    private String translateAnd(RexNode condition) {\n      List<String> predicates = new ArrayList<String>();\n      for (RexNode node : RelOptUtil.conjunctions(condition)) {\n        predicates.add(translateMatch2(node));\n      }\n\n      return Util.toString(predicates, \"\", \" AND \", \"\");\n    }\n","date":"2016-02-19 13:16:50","endLine":197,"groupId":"2227","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"translateAnd","params":"(RexNodecondition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/eb3ad506addf6398ff2c5995115f34f74912eb.src","preCode":"    private String translateAnd(RexNode condition) {\n      List<String> predicates = new ArrayList<String>();\n      for (RexNode node : RelOptUtil.conjunctions(condition)) {\n        predicates.add(translateMatch2(node));\n      }\n\n      return Util.toString(predicates, \"\", \" AND \", \"\");\n    }\n","realPath":"cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraFilter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"NB"}],"commitId":"707f4de9cafc474d0daf807b1e4c339f6eb42d7e","commitMessage":"@@@[CALCITE-2059] Apache Geode Adapter (Christian Tzolov)\n\n- Downgrade Geode from 1.4.0 to 1.3.0 - Geode server allows connections\n  only from clients with same or lower version\n- Add links to presentations and tutorials\n\nClose apache/calcite#581\n","date":"2018-02-17 02:18:02","modifiedFileCount":"0","status":"M","submitter":"Christian Tzolov"},{"authorTime":"2018-09-16 20:24:07","codes":[{"authorDate":"2018-09-16 20:24:07","commitOrder":3,"curCode":"    private String translateAnd(RexNode condition) {\n      List<String> predicates = new ArrayList<>();\n      for (RexNode node : RelOptUtil.conjunctions(condition)) {\n        predicates.add(translateMatch2(node));\n      }\n\n      return Util.toString(predicates, \"\", \" AND \", \"\");\n    }\n","date":"2018-09-20 16:51:04","endLine":132,"groupId":"10542","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"translateAnd","params":"(RexNodecondition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e6/9a0db4fd96b5f39233f0a1f72d047e58f8cd59.src","preCode":"    private String translateAnd(RexNode condition) {\n      List<String> predicates = new ArrayList<String>();\n      for (RexNode node : RelOptUtil.conjunctions(condition)) {\n        predicates.add(translateMatch2(node));\n      }\n\n      return Util.toString(predicates, \"\", \" AND \", \"\");\n    }\n","realPath":"geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeFilter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2018-09-16 20:24:07","commitOrder":3,"curCode":"    private String translateAnd(RexNode condition) {\n      List<String> predicates = new ArrayList<>();\n      for (RexNode node : RelOptUtil.conjunctions(condition)) {\n        predicates.add(translateMatch2(node));\n      }\n\n      return Util.toString(predicates, \"\", \" AND \", \"\");\n    }\n","date":"2018-09-20 16:51:04","endLine":201,"groupId":"10542","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"translateAnd","params":"(RexNodecondition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8a/ab55ee0fa8a9091c728e2cea0b434451a73605.src","preCode":"    private String translateAnd(RexNode condition) {\n      List<String> predicates = new ArrayList<String>();\n      for (RexNode node : RelOptUtil.conjunctions(condition)) {\n        predicates.add(translateMatch2(node));\n      }\n\n      return Util.toString(predicates, \"\", \" AND \", \"\");\n    }\n","realPath":"cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraFilter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"295ab13e8338bdd0e0c29e051907371c9b2929aa","commitMessage":"@@@Apply small refactorings to Calcite codebase (Java 5.  Java 7.  Java 8)\n\nUse Objects.equals when possible\nReplace for with foreach in Mappings\nUse Java 7 diamond operator to reduce code verbosity\nCollapse identical catch blocks to multi-catch\nUse Double/Float/Long/Boolean hashCode from Java 8\nRemove unnecessary substring call arguments\nFix sqlTypeName -> SqlTypeName typo\nMake floorKey/ceilingKey non-static so their use in NameMap makes more sense\nNameMap uses COMPARATOR.floorKey(name) which is a bit weird when floorKey is static\nAdd @SafeVarargs to methods that are obviously safe\nReplace anonymous types with Java 8 lambdas\nUse Collection#removeIf when possible\nUse Integer.compare when possible\nSuppress AssertWithSideEffects warnings\nAdd missing check to Permutation#isValid\nPermutation#isValid had occurCount[target] != 0 check.  however the array was never updated.  so the check was useless.\nRemove duplicate keys from Strong#MAP\nReplace remove+add with set in ReduceExpressionsRule\nRemove redundant initializers\nMove dead code inside if (false) branch in org.apache.calcite.plan.volcano.RelSubset#add\nRevert removal of UtilTest#testHash\n\ncloses #834\n","date":"2018-09-20 16:51:04","modifiedFileCount":"130","status":"M","submitter":"Vladimir Sitnikov"}]
