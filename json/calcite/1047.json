[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testJoin() {\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .join(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR,\n                new Function2<Employee, Department, String>() {\n                  public String apply(Employee v1, Department v2) {\n                    return v1.name + \" works in \" + v2.name;\n                  }\n                })\n            .orderBy(Functions.<String>identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n        + \"Eric works in Sales, \"\n        + \"Fred works in Sales, \"\n        + \"Janet works in Sales]\",\n        s);\n  }\n","date":"2014-11-14 09:39:34","endLine":851,"groupId":"5511","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/ce9619e1e3572cbab9672c4293786811c1f2fc.src","preCode":"  @Test public void testJoin() {\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .join(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR,\n                new Function2<Employee, Department, String>() {\n                  public String apply(Employee v1, Department v2) {\n                    return v1.name + \" works in \" + v2.name;\n                  }\n                })\n            .orderBy(Functions.<String>identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n        + \"Eric works in Sales, \"\n        + \"Fred works in Sales, \"\n        + \"Janet works in Sales]\",\n        s);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":826,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testRightJoin() {\n    \r\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .join(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR,\n                new Function2<Employee, Department, String>() {\n                  public String apply(Employee v1, Department v2) {\n                    return (v1 == null ? null : v1.name)\n                        + \" works in \" + (v2 == null ? null : v2.name);\n                  }\n                }, null, true, false)\n            .orderBy(Functions.<String>identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n        + \"Eric works in Sales, \"\n        + \"Fred works in Sales, \"\n        + \"Janet works in Sales, \"\n        + \"null works in HR]\",\n        s);\n  }\n","date":"2014-11-14 09:39:34","endLine":911,"groupId":"5511","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRightJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/ce9619e1e3572cbab9672c4293786811c1f2fc.src","preCode":"  @Test public void testRightJoin() {\n    \r\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .join(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR,\n                new Function2<Employee, Department, String>() {\n                  public String apply(Employee v1, Department v2) {\n                    return (v1 == null ? null : v1.name)\n                        + \" works in \" + (v2 == null ? null : v2.name);\n                  }\n                }, null, true, false)\n            .orderBy(Functions.<String>identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n        + \"Eric works in Sales, \"\n        + \"Fred works in Sales, \"\n        + \"Janet works in Sales, \"\n        + \"null works in HR]\",\n        s);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":883,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2018-07-06 04:21:59","codes":[{"authorDate":"2018-07-06 04:21:59","commitOrder":2,"curCode":"  @Test public void testJoin() {\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .join(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR, (v1, v2) -> v1.name + \" works in \" + v2.name)\n            .orderBy(Functions.identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n            + \"Eric works in Sales, \"\n            + \"Fred works in Sales, \"\n            + \"Janet works in Sales]\",\n        s);\n  }\n","date":"2018-07-09 01:16:26","endLine":997,"groupId":"7183","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8f/76c1b8c5bb03e8f260c0bd761a8f4eaac3702f.src","preCode":"  @Test public void testJoin() {\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .join(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR,\n                new Function2<Employee, Department, String>() {\n                  public String apply(Employee v1, Department v2) {\n                    return v1.name + \" works in \" + v2.name;\n                  }\n                })\n            .orderBy(Functions.<String>identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n            + \"Eric works in Sales, \"\n            + \"Fred works in Sales, \"\n            + \"Janet works in Sales]\",\n        s);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":977,"status":"M"},{"authorDate":"2018-07-06 04:21:59","commitOrder":2,"curCode":"  @Test public void testRightJoin() {\n    \r\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .join(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR, (v1, v2) -> (v1 == null ? null : v1.name)\n                    + \" works in \" + (v2 == null ? null : v2.name), null, true, false)\n            .orderBy(Functions.identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n            + \"Eric works in Sales, \"\n            + \"Fred works in Sales, \"\n            + \"Janet works in Sales, \"\n            + \"null works in HR]\",\n        s);\n  }\n","date":"2018-07-09 01:16:26","endLine":1047,"groupId":"7183","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRightJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8f/76c1b8c5bb03e8f260c0bd761a8f4eaac3702f.src","preCode":"  @Test public void testRightJoin() {\n    \r\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .join(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR,\n                new Function2<Employee, Department, String>() {\n                  public String apply(Employee v1, Department v2) {\n                    return (v1 == null ? null : v1.name)\n                        + \" works in \" + (v2 == null ? null : v2.name);\n                  }\n                }, null, true, false)\n            .orderBy(Functions.<String>identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n            + \"Eric works in Sales, \"\n            + \"Fred works in Sales, \"\n            + \"Janet works in Sales, \"\n            + \"null works in HR]\",\n        s);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1024,"status":"M"}],"commitId":"d59b639d27da704f00eff616324a2c04aa06f84c","commitMessage":"@@@[CALCITE-2259] Allow Java 8 syntax\n\nIn summary: use lambdas where possible.  switch from Guava function\ntypes to Java function types or lambdas.  but continue to use Guava\ncomponents (such as immutable collections and cache) that have no\nequivalent in the Java runtime.\n\n1. Change single-abstract-method (SAM) classes to lambdas. Preserve\nformatting wherever possible.\n\n2. Change AssertQuery.returns argument type from Guava Function to Java\nConsumer. If you are using a lambda and see 'returns is deprecated'. \nremove the 'return null;' line.  and the lambda will become a Consumer\n(whose return is void).\n\n3. Change RelOptRuleOperand and RelOptRule.operand methods to take Java\nPredicate rather than Guava Predicate.\n\n4. Change the argument of Hook.add and .addThread from Guava Function to\nJava Consumer.\n\n5. Change 'list.toArray(new T[list.size()])' to 'list.toArray(new T[0])'\nbecause the latter is simpler.  and just as efficient on recent Java\nversions.\n\n6. Resource references; change \"try (Closeable ignore = foo())\" to \"try\n  (foo())\".  especially uses of TryThreadLocal and Hook.Closeable.\n\n7. Convert linq4j Function1 to java Function.  Function2 to java BiFunction\n\n8. Fix occurrences of Intellij's \"Explicit type can be replaced with\n<>\" inspection. (Occurs for \"List<String> list = new\nArrayList<String>();\".)\n\n9. Change Guava Preconditions.checkNotNull to Java\nObjects.requireNonNull. (Kevin Risden)\n\n10. Break out anonymous classes and fix dependency problems.\n\n11. Use CacheLoader.of(Function) where possible.\n\n12. Replace sub-classes of ThreadLocal with ThreadLocal.withInitial().\n\n13. Replace Guava collection methods with calls to Java collection types. \nfor example replace Lists.newArrayList() with new ArrayList<>(). \nMaps.newHashSet() with new HashSet<>().  similarly Sets.\n\n14. Replace Guava Joiner with String.join.\n\n15. Replace Collections.emptyList() with ImmutableList.of() in a few\nplaces.\n\nFor backwards compatibility.  we preserved (and deprecated) the old\nmethods that used Guava types. In a few cases where new and old have\nthe same signature (after erasure).  we could not add a method with the\nsame name.  so we gave the new method a \"J\" suffix. Examples include\nHook.property and .propertyJ.  RelOptRule.operand and .operandJ.\n\nIn test code.  we have not slavishly ensured backwards compatibility.\n\nWe do not intend to remove uses of Guava's immutable collections.\n\nWe have ignored Intellij's \"Pseudo functional style code\" inspection\nmost of the time.  but in a few cases have converted Lists.transform(). \nIterables.transform().  and Iterables.filter() into Java streams. Use\nthe Util.toImmutableList() collector if the result is to be an\nimmutable list. Use Util.transform() rather than Lists.transform()\nif you have a Java function rather than a Guava function or lambda.\n\nNot covered in this change (might be done in future):\n* Convert Collections.sort(list) to list.sort.\n* Review uses of 'for (Map.Entry<K.  V> e : map.entrySet())' and see\n  whether it makes sense to convert to 'map.forEach((k.  v) ->\n  ...)'. Intellij inspection is called 'Replace with Map.forEach'.\n\nBreaking changes:\n* LatticeStatisticProvider.Factory.  result of RexUtil.notFun().  and\n  arguments to Mappings.target() are Function (was Guava.  now Java)\n* Argument to SqlSpecialOperator.TokenSequence.parser() is Predicate\n  (was Guava.  now Java)\n* AggregateNode.AccumulatorFactory extends Supplier (was Guava.  now Java)\n","date":"2018-07-09 01:16:26","modifiedFileCount":"514","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-04-12 15:11:30","codes":[{"authorDate":"2019-04-12 15:11:30","commitOrder":3,"curCode":"  @Test public void testJoin() {\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .hashJoin(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR, (v1, v2) -> v1.name + \" works in \" + v2.name)\n            .orderBy(Functions.identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n            + \"Eric works in Sales, \"\n            + \"Fred works in Sales, \"\n            + \"Janet works in Sales]\",\n        s);\n  }\n","date":"2019-05-30 11:27:53","endLine":996,"groupId":"7183","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f3/cc139b74a3b8f408a2dfcfb665e93e9927d63a.src","preCode":"  @Test public void testJoin() {\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .join(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR, (v1, v2) -> v1.name + \" works in \" + v2.name)\n            .orderBy(Functions.identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n            + \"Eric works in Sales, \"\n            + \"Fred works in Sales, \"\n            + \"Janet works in Sales]\",\n        s);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":976,"status":"M"},{"authorDate":"2019-04-12 15:11:30","commitOrder":3,"curCode":"  @Test public void testRightJoin() {\n    \r\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .hashJoin(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR, (v1, v2) -> (v1 == null ? null : v1.name)\n                    + \" works in \" + (v2 == null ? null : v2.name), null, true, false)\n            .orderBy(Functions.identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n            + \"Eric works in Sales, \"\n            + \"Fred works in Sales, \"\n            + \"Janet works in Sales, \"\n            + \"null works in HR]\",\n        s);\n  }\n","date":"2019-05-30 11:27:53","endLine":1046,"groupId":"7183","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRightJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f3/cc139b74a3b8f408a2dfcfb665e93e9927d63a.src","preCode":"  @Test public void testRightJoin() {\n    \r\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .join(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR, (v1, v2) -> (v1 == null ? null : v1.name)\n                    + \" works in \" + (v2 == null ? null : v2.name), null, true, false)\n            .orderBy(Functions.identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n            + \"Eric works in Sales, \"\n            + \"Fred works in Sales, \"\n            + \"Janet works in Sales, \"\n            + \"null works in HR]\",\n        s);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1023,"status":"M"}],"commitId":"48093937ae4db179884d1111fa9d12e978e57e1f","commitMessage":"@@@[CALCITE-2696] Improve design of join-like relational expressions\n\n**Diff**\n- Deprecate SemiJoin.  EnumerableSemiJoin.  SemiJoinType. \nEnumerableSemiJoinRule.  JoinToCorrelateRule#SEMI\n- Add SEMI and ANTI join type to JoinRelType.  add method\nprojectsRight() and isOuterJoin()\n- Correlate use JoinRelType instead of SemiJoinType\n- Rename EnumerableThetaJoin to EnumerableNestedLoopJoin\n- Rename EnumerableJoin to EnumerableHashJoin\n- EnumerableJoinRule converts semi join to EnumerableHashJoin\n(EnumerableSemiJoin's functionality is merged into this rule)\n- Add method isSemiJoin() in Join.java to decide if this join is a semi join\n(comes from SemiJoinRule during decorrelateation). \nthe return value true means the join is a semi join equivalent to\nSemiJoin before this patch.\n- Cache the JoinInfo in Join and use it to get leftKeys and rightKeys. \nmerge SemiJoin#computeSelfCost logic into Join#computeSelfCost\n- For RelBuilder.  removes SemiJoinFactory.  method #semiJoin\nnow returns a LogicalJoin with JoinRelType#SEMI\n- Rename EnumerableDefaults#join to EnumerableDefaults#hashJoin\n- Rename EnumerableDefaults#thetaJoin to EnumerableDefaults#nestedLoopJoin\n\n**Rules tweak**\n- JoinAddRedundantSemiJoinRule now creates LogicalJoin with JoinRelType#SEMI\ninstead of SemiJoin\n- JoinToCorrelateRule deprecates SEMI instance and change the matches\ncondition to !join.getJoinType().generatesNullsOnLeft() which also\nallowed ANTI compared before this patch.\n- SemiJoinRule matches SEMI join specifically.\n\n**Metadata tweak**\n- RelMdAllPredicates.  RelMdExpressionLineage: Add full rowType to\ngetAllPredicates(Join) cause semi join only outputs one side\n- RelMdColumnUniqueness.  RelMdSelectivity.  RelMdDistinctRowCount. \nRelMdSize.  RelMdUniqueKeys: merge semi join logic to join\n\n**Test cases change**\n- MaterializationTest#testJoinMaterialization11 now can materialize\nsuccessfully.  cause i allow logical SemiJoin node to match.  the original\nmatches SemiJoin as SemiJoin.class.isAssignableFrom().  which i think is\nwrong cause this will only matches subClasses of SemiJoin which is only\nEnumerableSemiJoin before this patch.\n- SortRemoveRuleTest#removeSortOverEnumerableCorrelate.  because\nCALCITE-2018.  the final EnumerableSort's cost was cached by the previous\nEnumerableSort with logical children.  so i remove the EnumerableSortRule\nand the best plan is correct\n\nclose apache/calcite#1157\n","date":"2019-05-30 11:27:53","modifiedFileCount":"81","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testJoin() {\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .hashJoin(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR, (v1, v2) -> v1.name + \" works in \" + v2.name)\n            .orderBy(Functions.identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n            + \"Eric works in Sales, \"\n            + \"Fred works in Sales, \"\n            + \"Janet works in Sales]\",\n        s);\n  }\n","date":"2020-04-06 04:57:49","endLine":1023,"groupId":"1047","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/176b0c20dace781059f888f45af815a228f4c7.src","preCode":"  @Test public void testJoin() {\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .hashJoin(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR, (v1, v2) -> v1.name + \" works in \" + v2.name)\n            .orderBy(Functions.identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n            + \"Eric works in Sales, \"\n            + \"Fred works in Sales, \"\n            + \"Janet works in Sales]\",\n        s);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1003,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testRightJoin() {\n    \r\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .hashJoin(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR, (v1, v2) -> (v1 == null ? null : v1.name)\n                    + \" works in \" + (v2 == null ? null : v2.name), null, true, false)\n            .orderBy(Functions.identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n            + \"Eric works in Sales, \"\n            + \"Fred works in Sales, \"\n            + \"Janet works in Sales, \"\n            + \"null works in HR]\",\n        s);\n  }\n","date":"2020-04-06 04:57:49","endLine":1073,"groupId":"1047","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testRightJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/176b0c20dace781059f888f45af815a228f4c7.src","preCode":"  @Test public void testRightJoin() {\n    \r\n    \r\n    \r\n    \r\n    String s =\n        Linq4j.asEnumerable(emps)\n            .concat(Linq4j.asEnumerable(badEmps))\n            .hashJoin(\n                Linq4j.asEnumerable(depts),\n                EMP_DEPTNO_SELECTOR,\n                DEPT_DEPTNO_SELECTOR, (v1, v2) -> (v1 == null ? null : v1.name)\n                    + \" works in \" + (v2 == null ? null : v2.name), null, true, false)\n            .orderBy(Functions.identitySelector())\n            .toList()\n            .toString();\n    assertEquals(\n        \"[Bill works in Marketing, \"\n            + \"Eric works in Sales, \"\n            + \"Fred works in Sales, \"\n            + \"Janet works in Sales, \"\n            + \"null works in HR]\",\n        s);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/Linq4jTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1050,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
