[{"authorTime":"2017-12-22 17:56:44","codes":[{"authorDate":"2017-11-07 08:03:13","commitOrder":3,"curCode":"    public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      if (leftSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(SqlStdOperatorTable.SUM0, false, false,\n          ImmutableList.of(ordinal), -1, aggregateCall.type,\n          aggregateCall.name);\n    }\n","date":"2017-11-09 00:41:32","endLine":152,"groupId":"5508","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"topSplit","params":"(RexBuilderrexBuilder@Registry<RexNode>extra@intoffset@RelDataTypeinputRowType@AggregateCallaggregateCall@intleftSubTotal@intrightSubTotal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6e/8e4fe39f4fd1cbee66683fa0ab7bce1c9e4ff1.src","preCode":"    public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      if (leftSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(SqlStdOperatorTable.SUM0, false, false,\n          ImmutableList.of(ordinal), -1, aggregateCall.type,\n          aggregateCall.name);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"NB"},{"authorDate":"2017-12-22 17:56:44","commitOrder":3,"curCode":"    public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      final List<RelDataTypeField> fieldList = inputRowType.getFieldList();\n      if (leftSubTotal >= 0) {\n        final RelDataType type = fieldList.get(leftSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        final RelDataType type = fieldList.get(rightSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        node = rexBuilder.makeAbstractCast(aggregateCall.type, node);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(getMergeAggFunctionOfTopSplit(), false, false,\n          ImmutableList.of(ordinal), -1, aggregateCall.type,\n          aggregateCall.name);\n    }\n","date":"2017-12-25 13:09:41","endLine":265,"groupId":"5510","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"topSplit","params":"(RexBuilderrexBuilder@Registry<RexNode>extra@intoffset@RelDataTypeinputRowType@AggregateCallaggregateCall@intleftSubTotal@intrightSubTotal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/83/dad3aca40fede2eb5a456e492d194a78a71778.src","preCode":"    public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      final List<RelDataTypeField> fieldList = inputRowType.getFieldList();\n      if (leftSubTotal >= 0) {\n        final RelDataType type = fieldList.get(leftSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        final RelDataType type = fieldList.get(rightSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        node = rexBuilder.makeAbstractCast(aggregateCall.type, node);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(getMergeAggFunctionOfTopSplit(), false, false,\n          ImmutableList.of(ordinal), -1, aggregateCall.type,\n          aggregateCall.name);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"}],"commitId":"cb8376b13ad50003134e398a87161bec68908606","commitMessage":"@@@[CALCITE-2108] AggregateJoinTransposeRule incorrectly splits a SUM0 call when Aggregate has no group keys (jingzhang)\n\nClose apache/calcite#591\n","date":"2017-12-25 13:09:41","modifiedFileCount":"3","status":"M","submitter":"beyond1920"},{"authorTime":"2018-09-27 17:55:02","codes":[{"authorDate":"2018-09-27 17:55:02","commitOrder":4,"curCode":"    public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      if (leftSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(SqlStdOperatorTable.SUM0, false, false,\n          ImmutableList.of(ordinal), -1, aggregateCall.collation,\n          aggregateCall.type, aggregateCall.name);\n    }\n","date":"2018-11-09 02:00:28","endLine":153,"groupId":"5508","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"topSplit","params":"(RexBuilderrexBuilder@Registry<RexNode>extra@intoffset@RelDataTypeinputRowType@AggregateCallaggregateCall@intleftSubTotal@intrightSubTotal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/65/2886f2fb5639169cc281d5b8b934e68b058c2f.src","preCode":"    public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      if (leftSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(SqlStdOperatorTable.SUM0, false, false,\n          ImmutableList.of(ordinal), -1, aggregateCall.type,\n          aggregateCall.name);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2018-09-27 17:55:02","commitOrder":4,"curCode":"    public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      final List<RelDataTypeField> fieldList = inputRowType.getFieldList();\n      if (leftSubTotal >= 0) {\n        final RelDataType type = fieldList.get(leftSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        final RelDataType type = fieldList.get(rightSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        node = rexBuilder.makeAbstractCast(aggregateCall.type, node);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(getMergeAggFunctionOfTopSplit(), false, false,\n          ImmutableList.of(ordinal), -1, aggregateCall.collation,\n          aggregateCall.type, aggregateCall.name);\n    }\n","date":"2018-11-09 02:00:28","endLine":269,"groupId":"5510","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"topSplit","params":"(RexBuilderrexBuilder@Registry<RexNode>extra@intoffset@RelDataTypeinputRowType@AggregateCallaggregateCall@intleftSubTotal@intrightSubTotal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/65/2886f2fb5639169cc281d5b8b934e68b058c2f.src","preCode":"    public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      final List<RelDataTypeField> fieldList = inputRowType.getFieldList();\n      if (leftSubTotal >= 0) {\n        final RelDataType type = fieldList.get(leftSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        final RelDataType type = fieldList.get(rightSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        node = rexBuilder.makeAbstractCast(aggregateCall.type, node);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(getMergeAggFunctionOfTopSplit(), false, false,\n          ImmutableList.of(ordinal), -1, aggregateCall.type,\n          aggregateCall.name);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"}],"commitId":"7bc9f14032b7cf0761c0b2eefdb6bb588047ec8e","commitMessage":"@@@[CALCITE-2224] Support WITHIN GROUP clause for aggregate functions (Hongze Zhang)\n\nClose apache/calcite#871\n","date":"2018-11-09 02:00:28","modifiedFileCount":"60","status":"M","submitter":"hongzezhang"},{"authorTime":"2019-03-27 14:58:58","codes":[{"authorDate":"2019-03-27 14:58:58","commitOrder":5,"curCode":"    public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      if (leftSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(SqlStdOperatorTable.SUM0, false, false,\n          false, ImmutableList.of(ordinal), -1, aggregateCall.collation,\n          aggregateCall.type, aggregateCall.name);\n    }\n","date":"2019-04-01 05:42:24","endLine":153,"groupId":"5508","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"topSplit","params":"(RexBuilderrexBuilder@Registry<RexNode>extra@intoffset@RelDataTypeinputRowType@AggregateCallaggregateCall@intleftSubTotal@intrightSubTotal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/da/843f3a56e7a6b27cdc373b71085aba3e156337.src","preCode":"    public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      if (leftSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(SqlStdOperatorTable.SUM0, false, false,\n          ImmutableList.of(ordinal), -1, aggregateCall.collation,\n          aggregateCall.type, aggregateCall.name);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2019-03-27 14:58:58","commitOrder":5,"curCode":"    public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      final List<RelDataTypeField> fieldList = inputRowType.getFieldList();\n      if (leftSubTotal >= 0) {\n        final RelDataType type = fieldList.get(leftSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        final RelDataType type = fieldList.get(rightSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        node = rexBuilder.makeAbstractCast(aggregateCall.type, node);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(getMergeAggFunctionOfTopSplit(), false, false,\n          false, ImmutableList.of(ordinal), -1, aggregateCall.collation,\n          aggregateCall.type, aggregateCall.name);\n    }\n","date":"2019-04-01 05:42:24","endLine":270,"groupId":"5510","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"topSplit","params":"(RexBuilderrexBuilder@Registry<RexNode>extra@intoffset@RelDataTypeinputRowType@AggregateCallaggregateCall@intleftSubTotal@intrightSubTotal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/da/843f3a56e7a6b27cdc373b71085aba3e156337.src","preCode":"    public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      final List<RelDataTypeField> fieldList = inputRowType.getFieldList();\n      if (leftSubTotal >= 0) {\n        final RelDataType type = fieldList.get(leftSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        final RelDataType type = fieldList.get(rightSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        node = rexBuilder.makeAbstractCast(aggregateCall.type, node);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(getMergeAggFunctionOfTopSplit(), false, false,\n          ImmutableList.of(ordinal), -1, aggregateCall.collation,\n          aggregateCall.type, aggregateCall.name);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"}],"commitId":"d7946a94adfd2e788f5d324910944dd65dab11ee","commitMessage":"@@@[CALCITE-883] Support RESPECT NULLS.  IGNORE NULLS option for LEAD.  LAG.  FIRST_VALUE.  LAST_VALUE.  NTH_VALUE functions (Chunwei Lei)\n\nIGNORE NULLS works in the parser and validator but not at runtime.\n\nWe have changed the Rex model support for aggregate functions even\nthough today it is only valid for windowed functions.\n\nFix javadoc error on JDK 8.\n\nClose apache/calcite#1108\n","date":"2019-04-01 05:42:24","modifiedFileCount":"38","status":"M","submitter":"Chunwei Lei"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":6,"curCode":"    @Override public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      if (leftSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(SqlStdOperatorTable.SUM0, false, false,\n          false, ImmutableList.of(ordinal), -1, aggregateCall.collation,\n          aggregateCall.type, aggregateCall.name);\n    }\n","date":"2020-10-07 05:42:47","endLine":167,"groupId":"5508","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"topSplit","params":"(RexBuilderrexBuilder@Registry<RexNode>extra@intoffset@RelDataTypeinputRowType@AggregateCallaggregateCall@intleftSubTotal@intrightSubTotal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5e/c772f084f6c07604010b5adc2dd9652b6c302f.src","preCode":"    public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      if (leftSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(SqlStdOperatorTable.SUM0, false, false,\n          false, ImmutableList.of(ordinal), -1, aggregateCall.collation,\n          aggregateCall.type, aggregateCall.name);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":6,"curCode":"    @Override public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      final List<RelDataTypeField> fieldList = inputRowType.getFieldList();\n      if (leftSubTotal >= 0) {\n        final RelDataType type = fieldList.get(leftSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        final RelDataType type = fieldList.get(rightSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        node = rexBuilder.makeAbstractCast(aggregateCall.type, node);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(getMergeAggFunctionOfTopSplit(), false, false,\n          false, ImmutableList.of(ordinal), -1, aggregateCall.collation,\n          aggregateCall.type, aggregateCall.name);\n    }\n","date":"2020-10-07 05:42:47","endLine":312,"groupId":"5510","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"topSplit","params":"(RexBuilderrexBuilder@Registry<RexNode>extra@intoffset@RelDataTypeinputRowType@AggregateCallaggregateCall@intleftSubTotal@intrightSubTotal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5e/c772f084f6c07604010b5adc2dd9652b6c302f.src","preCode":"    public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      final List<RelDataTypeField> fieldList = inputRowType.getFieldList();\n      if (leftSubTotal >= 0) {\n        final RelDataType type = fieldList.get(leftSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        final RelDataType type = fieldList.get(rightSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        node = rexBuilder.makeAbstractCast(aggregateCall.type, node);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(getMergeAggFunctionOfTopSplit(), false, false,\n          false, ImmutableList.of(ordinal), -1, aggregateCall.collation,\n          aggregateCall.type, aggregateCall.name);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2018-11-14 11:27:42","codes":[{"authorDate":"2018-11-14 11:27:42","commitOrder":7,"curCode":"    @Override public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      if (leftSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(SqlStdOperatorTable.SUM0, false, false,\n          false, ImmutableList.of(ordinal), -1, aggregateCall.distinctKeys,\n          aggregateCall.collation, aggregateCall.type, aggregateCall.name);\n    }\n","date":"2021-02-12 07:42:13","endLine":170,"groupId":"111751","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"topSplit","params":"(RexBuilderrexBuilder@Registry<RexNode>extra@intoffset@RelDataTypeinputRowType@AggregateCallaggregateCall@intleftSubTotal@intrightSubTotal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/a41f59dd7ed47fd9d53f5666ce426ffed82dc6.src","preCode":"    @Override public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      if (leftSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        merges.add(\n            rexBuilder.makeInputRef(aggregateCall.type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(SqlStdOperatorTable.SUM0, false, false,\n          false, ImmutableList.of(ordinal), -1, aggregateCall.collation,\n          aggregateCall.type, aggregateCall.name);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2018-11-14 11:27:42","commitOrder":7,"curCode":"    @Override public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      final List<RelDataTypeField> fieldList = inputRowType.getFieldList();\n      if (leftSubTotal >= 0) {\n        final RelDataType type = fieldList.get(leftSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        final RelDataType type = fieldList.get(rightSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        node = rexBuilder.makeAbstractCast(aggregateCall.type, node);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(getMergeAggFunctionOfTopSplit(), false, false,\n          false, ImmutableList.of(ordinal), -1,\n          aggregateCall.distinctKeys, aggregateCall.collation,\n          aggregateCall.type, aggregateCall.name);\n    }\n","date":"2021-02-12 07:42:13","endLine":317,"groupId":"111751","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"topSplit","params":"(RexBuilderrexBuilder@Registry<RexNode>extra@intoffset@RelDataTypeinputRowType@AggregateCallaggregateCall@intleftSubTotal@intrightSubTotal)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/a41f59dd7ed47fd9d53f5666ce426ffed82dc6.src","preCode":"    @Override public AggregateCall topSplit(RexBuilder rexBuilder,\n        Registry<RexNode> extra, int offset, RelDataType inputRowType,\n        AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal) {\n      final List<RexNode> merges = new ArrayList<>();\n      final List<RelDataTypeField> fieldList = inputRowType.getFieldList();\n      if (leftSubTotal >= 0) {\n        final RelDataType type = fieldList.get(leftSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, leftSubTotal));\n      }\n      if (rightSubTotal >= 0) {\n        final RelDataType type = fieldList.get(rightSubTotal).getType();\n        merges.add(rexBuilder.makeInputRef(type, rightSubTotal));\n      }\n      RexNode node;\n      switch (merges.size()) {\n      case 1:\n        node = merges.get(0);\n        break;\n      case 2:\n        node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, merges);\n        node = rexBuilder.makeAbstractCast(aggregateCall.type, node);\n        break;\n      default:\n        throw new AssertionError(\"unexpected count \" + merges);\n      }\n      int ordinal = extra.register(node);\n      return AggregateCall.create(getMergeAggFunctionOfTopSplit(), false, false,\n          false, ImmutableList.of(ordinal), -1, aggregateCall.collation,\n          aggregateCall.type, aggregateCall.name);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"}],"commitId":"f1da65504e598928cf77aa6a7244552692ae2529","commitMessage":"@@@[CALCITE-4483] WITHIN DISTINCT clause for aggregate functions (experimental)\n\nThe WITHIN DISTINCT feature is experimental and subject to\nchange/removal without notice.\n\nTo represent WITHIN DISTINCT in relational algebra.  add\nmethod RelBuilder.AggCall.unique() and field\nAggregateCall.distinctKeys.\n\nTo represent WITHIN DISTINCT in the SQL AST.  add\nWITHIN_DISTINCT SQL operator.\n\nAdd a planner rule.  AggregateExpandWithinDistinctRule.  that\nimplements WITHIN DISTINCT by pre-aggregating the rows that\nwill go into each aggregate function.\n\nThere are two variants of the rule; one that throws a runtime\nerror if the operand is not functionally-dependent on the\nWITHIN DISTINCT key.  and one that takes the minimum. The former\nis enabled by default.\n\nThe rule handles DISTINCT aggregate calls by converting them\nto WITHIN DISTINCT (because the latter is a generalization of\nthe former).\n\nAdd an internal $THROW_UNLESS function (invoked when operands\nare not functionally dependent).\n\nFurther work is required to complete the feature:\n * support FILTER clause in combination with WITHIN DISTINCT;\n * support WITHIN DISTINCT clause in GROUPING SETS queries;\n * duplicate detection fails for aggregate functions that\n   respect nulls.\n\nRegarding nulls. Luckily most aggregate functions ignore\nnulls by default.  but exceptions include ARRAY_AGG. If the\ninput to ARRAY_AGG for a given WITHIN-DISTINCT-key value is\n[null.  1.  null].  MIN and MAX will both be 1.  so we cannot\ndetermine that all of the values were not the same.\n\nClose apache/calcite#2339\n","date":"2021-02-12 07:42:13","modifiedFileCount":"46","status":"M","submitter":"Julian Hyde"}]
