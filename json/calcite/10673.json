[{"authorTime":"2019-02-22 18:30:45","codes":[{"authorDate":"2019-08-05 15:54:01","commitOrder":3,"curCode":"  @Test public void testPushProjectToScan() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n            SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n                    .setCaseSensitive(false)\n                    .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n            .parserConfig(parserConfig)\n            .defaultSchema(schema)\n            .traitDefs(traitDefs)\n            \r\n            .ruleSets(\n                    RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE,\n                            ProjectTableScanRule.INSTANCE))\n            .programs(Programs.ofRules(Programs.RULE_SET))\n            .build();\n\n    executeQuery(config, \"select min(id) as mi, max(id) as ma from mytable where id=1 group by id\",\n            CalciteSystemProperty.DEBUG.value());\n  }\n","date":"2019-08-23 10:02:06","endLine":331,"groupId":"11445","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPushProjectToScan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a1/830ac2aaeb1833db2915a441ddc71fb206b140.src","preCode":"  @Test public void testPushProjectToScan() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n            SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n                    .setCaseSensitive(false)\n                    .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n            .parserConfig(parserConfig)\n            .defaultSchema(schema)\n            .traitDefs(traitDefs)\n            \r\n            .ruleSets(\n                    RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE,\n                            ProjectTableScanRule.INSTANCE))\n            .programs(Programs.ofRules(Programs.RULE_SET))\n            .build();\n\n    executeQuery(config, \"select min(id) as mi, max(id) as ma from mytable where id=1 group by id\",\n            CalciteSystemProperty.DEBUG.value());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/FrameworksTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"B"},{"authorDate":"2019-02-22 18:30:45","commitOrder":3,"curCode":"  @Test public void testUpdate() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n        SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n            .setCaseSensitive(false)\n            .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .parserConfig(parserConfig)\n        .defaultSchema(schema)\n        .traitDefs(traitDefs)\n        \r\n        .ruleSets(\n            RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE))\n        .programs(Programs.ofRules(Programs.RULE_SET))\n        .build();\n    executeQuery(config, \" UPDATE MYTABLE set id=7 where id=1\",\n        CalciteSystemProperty.DEBUG.value());\n  }\n","date":"2019-02-28 18:05:41","endLine":329,"groupId":"11445","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/29/c0ec3a43644f2d22d5823b148d416116e025eb.src","preCode":"  @Test public void testUpdate() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n        SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n            .setCaseSensitive(false)\n            .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .parserConfig(parserConfig)\n        .defaultSchema(schema)\n        .traitDefs(traitDefs)\n        \r\n        .ruleSets(\n            RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE))\n        .programs(Programs.ofRules(Programs.RULE_SET))\n        .build();\n    executeQuery(config, \" UPDATE MYTABLE set id=7 where id=1\",\n        CalciteSystemProperty.DEBUG.value());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/FrameworksTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"NB"}],"commitId":"22577e488e04d4056e15af96bac4246fd810f0fa","commitMessage":"@@@[CALCITE-3228] Error while applying rule ProjectScanRule: interpreter\n","date":"2019-08-23 10:02:06","modifiedFileCount":"5","status":"M","submitter":"Chunwei Lei"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testPushProjectToScan() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n            SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n                    .setCaseSensitive(false)\n                    .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n            .parserConfig(parserConfig)\n            .defaultSchema(schema)\n            .traitDefs(traitDefs)\n            \r\n            .ruleSets(\n                    RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE,\n                            ProjectTableScanRule.INSTANCE))\n            .programs(Programs.ofRules(Programs.RULE_SET))\n            .build();\n\n    executeQuery(config, \"select min(id) as mi, max(id) as ma from mytable where id=1 group by id\",\n            CalciteSystemProperty.DEBUG.value());\n  }\n","date":"2020-04-06 04:57:49","endLine":412,"groupId":"11445","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPushProjectToScan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3b/cb4e0594f28f29c756ec31b16c8c4656f0182a.src","preCode":"  @Test public void testPushProjectToScan() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n            SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n                    .setCaseSensitive(false)\n                    .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n            .parserConfig(parserConfig)\n            .defaultSchema(schema)\n            .traitDefs(traitDefs)\n            \r\n            .ruleSets(\n                    RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE,\n                            ProjectTableScanRule.INSTANCE))\n            .programs(Programs.ofRules(Programs.RULE_SET))\n            .build();\n\n    executeQuery(config, \"select min(id) as mi, max(id) as ma from mytable where id=1 group by id\",\n            CalciteSystemProperty.DEBUG.value());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/FrameworksTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testUpdate() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n        SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n            .setCaseSensitive(false)\n            .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .parserConfig(parserConfig)\n        .defaultSchema(schema)\n        .traitDefs(traitDefs)\n        \r\n        .ruleSets(\n            RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE))\n        .programs(Programs.ofRules(Programs.RULE_SET))\n        .build();\n    executeQuery(config, \" UPDATE MYTABLE set id=7 where id=1\",\n        CalciteSystemProperty.DEBUG.value());\n  }\n","date":"2020-04-06 04:57:49","endLine":442,"groupId":"11445","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3b/cb4e0594f28f29c756ec31b16c8c4656f0182a.src","preCode":"  @Test public void testUpdate() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n        SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n            .setCaseSensitive(false)\n            .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .parserConfig(parserConfig)\n        .defaultSchema(schema)\n        .traitDefs(traitDefs)\n        \r\n        .ruleSets(\n            RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE))\n        .programs(Programs.ofRules(Programs.RULE_SET))\n        .build();\n    executeQuery(config, \" UPDATE MYTABLE set id=7 where id=1\",\n        CalciteSystemProperty.DEBUG.value());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/FrameworksTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-07-09 04:45:12","commitOrder":5,"curCode":"  @Test void testPushProjectToScan() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n            SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n                    .setCaseSensitive(false)\n                    .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n            .parserConfig(parserConfig)\n            .defaultSchema(schema)\n            .traitDefs(traitDefs)\n            \r\n            .ruleSets(\n                    RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE,\n                        CoreRules.PROJECT_TABLE_SCAN))\n            .programs(Programs.ofRules(Programs.RULE_SET))\n            .build();\n\n    executeQuery(config, \"select min(id) as mi, max(id) as ma from mytable where id=1 group by id\",\n            CalciteSystemProperty.DEBUG.value());\n  }\n","date":"2020-07-12 06:58:28","endLine":412,"groupId":"11445","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPushProjectToScan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4d/a1ad0885f0824550a6b790b6f00a61a2b2080f.src","preCode":"  @Test void testPushProjectToScan() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n            SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n                    .setCaseSensitive(false)\n                    .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n            .parserConfig(parserConfig)\n            .defaultSchema(schema)\n            .traitDefs(traitDefs)\n            \r\n            .ruleSets(\n                    RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE,\n                            ProjectTableScanRule.INSTANCE))\n            .programs(Programs.ofRules(Programs.RULE_SET))\n            .build();\n\n    executeQuery(config, \"select min(id) as mi, max(id) as ma from mytable where id=1 group by id\",\n            CalciteSystemProperty.DEBUG.value());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/FrameworksTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testUpdate() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n        SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n            .setCaseSensitive(false)\n            .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .parserConfig(parserConfig)\n        .defaultSchema(schema)\n        .traitDefs(traitDefs)\n        \r\n        .ruleSets(\n            RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE))\n        .programs(Programs.ofRules(Programs.RULE_SET))\n        .build();\n    executeQuery(config, \" UPDATE MYTABLE set id=7 where id=1\",\n        CalciteSystemProperty.DEBUG.value());\n  }\n","date":"2020-04-06 04:57:49","endLine":442,"groupId":"11445","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3b/cb4e0594f28f29c756ec31b16c8c4656f0182a.src","preCode":"  @Test void testUpdate() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n        SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n            .setCaseSensitive(false)\n            .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .parserConfig(parserConfig)\n        .defaultSchema(schema)\n        .traitDefs(traitDefs)\n        \r\n        .ruleSets(\n            RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE))\n        .programs(Programs.ofRules(Programs.RULE_SET))\n        .build();\n    executeQuery(config, \" UPDATE MYTABLE set id=7 where id=1\",\n        CalciteSystemProperty.DEBUG.value());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/FrameworksTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"N"}],"commitId":"23b26b6287315cc2cd236e705bb651077488fc5c","commitMessage":"@@@In preparation for [CALCITE-3923] and [CALCITE-4079].  deprecate fields and methods that will be removed between 1.24 and 1.25\n\nAlso.  in RelNode.  change some methods from 'to removed before 2.0'\nto 'to be removed before 1.25'. The methods are sDistinct(). \nisKey(ImmutableBitSet).  getQuery().  getRows().  getVariablesStopped(). \ncomputeSelfCost().  isValid(boolean).  getCollationList().  getChildExps().\n","date":"2020-07-12 06:58:28","modifiedFileCount":"137","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-07-09 05:31:40","commitOrder":6,"curCode":"  @Test void testPushProjectToScan() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n        SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n            .setCaseSensitive(false)\n            .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .parserConfig(parserConfig)\n        .defaultSchema(schema)\n        .traitDefs(traitDefs)\n        \r\n        .ruleSets(\n            RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE,\n                CoreRules.PROJECT_TABLE_SCAN))\n        .programs(Programs.ofRules(Programs.RULE_SET))\n        .build();\n\n    final String sql = \"select min(id) as mi, max(id) as ma\\n\"\n        + \"from mytable where id=1 group by id\";\n    executeQuery(config, sql, CalciteSystemProperty.DEBUG.value());\n  }\n","date":"2020-07-29 02:27:24","endLine":413,"groupId":"11445","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPushProjectToScan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b8/8a3098309b1d7359be9197c085a30c42641828.src","preCode":"  @Test void testPushProjectToScan() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n            SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n                    .setCaseSensitive(false)\n                    .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n            .parserConfig(parserConfig)\n            .defaultSchema(schema)\n            .traitDefs(traitDefs)\n            \r\n            .ruleSets(\n                    RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE,\n                        CoreRules.PROJECT_TABLE_SCAN))\n            .programs(Programs.ofRules(Programs.RULE_SET))\n            .build();\n\n    executeQuery(config, \"select min(id) as mi, max(id) as ma from mytable where id=1 group by id\",\n            CalciteSystemProperty.DEBUG.value());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/FrameworksTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testUpdate() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n        SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n            .setCaseSensitive(false)\n            .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .parserConfig(parserConfig)\n        .defaultSchema(schema)\n        .traitDefs(traitDefs)\n        \r\n        .ruleSets(\n            RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE))\n        .programs(Programs.ofRules(Programs.RULE_SET))\n        .build();\n    executeQuery(config, \" UPDATE MYTABLE set id=7 where id=1\",\n        CalciteSystemProperty.DEBUG.value());\n  }\n","date":"2020-04-06 04:57:49","endLine":442,"groupId":"11445","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3b/cb4e0594f28f29c756ec31b16c8c4656f0182a.src","preCode":"  @Test void testUpdate() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n        SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n            .setCaseSensitive(false)\n            .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .parserConfig(parserConfig)\n        .defaultSchema(schema)\n        .traitDefs(traitDefs)\n        \r\n        .ruleSets(\n            RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE))\n        .programs(Programs.ofRules(Programs.RULE_SET))\n        .build();\n    executeQuery(config, \" UPDATE MYTABLE set id=7 where id=1\",\n        CalciteSystemProperty.DEBUG.value());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/FrameworksTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"N"}],"commitId":"998cd83ebe2fcd7ff3ee565299fed6e199269715","commitMessage":"@@@[CALCITE-3923] Refactor how planner rules are parameterized\n\nCreate operands using a builder interface.  OperandBuilder.  and\ndeprecate methods RelOptRule.operand etc.\n\nThe change is backwards compatible.  in the sense that\nexisting rule constructors are deprecated but still work.\nFrom now on.  to create rules.  call RelOptRule.Config.toRule()\n(which calls the rule's (Config) constructor).\n\nSub-classes of ConverterRule are a little different.  They\ndon't need their own sub-class of Config.  You just need to\ncall Config.withRuleFactory to specify the constructor of the\nsub-class of ConverterRule.\n\nMove rule instances into holder classes such as CoreRules. \nMaterializedViewRules. Deprecate existing rule INSTANCE fields\n(to be removed in 1.25). Deprecate previous rule constructors\n(to be removed in 2.0).\n\nDescribe how to write rules in howto and tutorial.\n\nRemove rule instances marked 'deprecated.  to be removed before\n1.25'.\n\nClose apache/calcite#2024\n","date":"2020-07-29 02:27:24","modifiedFileCount":"191","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-11 16:38:46","codes":[{"authorDate":"2020-09-11 16:38:46","commitOrder":7,"curCode":"  @Test void testPushProjectToScan() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n        SqlParser.Config.DEFAULT\n            .withCaseSensitive(false);\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .parserConfig(parserConfig)\n        .defaultSchema(schema)\n        .traitDefs(traitDefs)\n        \r\n        .ruleSets(\n            RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE,\n                CoreRules.PROJECT_TABLE_SCAN))\n        .programs(Programs.ofRules(Programs.RULE_SET))\n        .build();\n\n    final String sql = \"select min(id) as mi, max(id) as ma\\n\"\n        + \"from mytable where id=1 group by id\";\n    executeQuery(config, sql, CalciteSystemProperty.DEBUG.value());\n  }\n","date":"2020-09-18 10:35:31","endLine":412,"groupId":"10673","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPushProjectToScan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/55/2e48aff42c072dc63989eb198c890ccaac5063.src","preCode":"  @Test void testPushProjectToScan() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n        SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n            .setCaseSensitive(false)\n            .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .parserConfig(parserConfig)\n        .defaultSchema(schema)\n        .traitDefs(traitDefs)\n        \r\n        .ruleSets(\n            RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE,\n                CoreRules.PROJECT_TABLE_SCAN))\n        .programs(Programs.ofRules(Programs.RULE_SET))\n        .build();\n\n    final String sql = \"select min(id) as mi, max(id) as ma\\n\"\n        + \"from mytable where id=1 group by id\";\n    executeQuery(config, sql, CalciteSystemProperty.DEBUG.value());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/FrameworksTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"},{"authorDate":"2020-09-11 16:38:46","commitOrder":7,"curCode":"  @Test void testUpdate() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n        SqlParser.Config.DEFAULT\n            .withCaseSensitive(false);\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .parserConfig(parserConfig)\n        .defaultSchema(schema)\n        .traitDefs(traitDefs)\n        \r\n        .ruleSets(\n            RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE))\n        .programs(Programs.ofRules(Programs.RULE_SET))\n        .build();\n    executeQuery(config, \" UPDATE MYTABLE set id=7 where id=1\",\n        CalciteSystemProperty.DEBUG.value());\n  }\n","date":"2020-09-18 10:35:31","endLine":441,"groupId":"10673","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/55/2e48aff42c072dc63989eb198c890ccaac5063.src","preCode":"  @Test void testUpdate() throws Exception {\n    Table table = new TableImpl();\n    final SchemaPlus rootSchema = Frameworks.createRootSchema(true);\n    SchemaPlus schema = rootSchema.add(\"x\", new AbstractSchema());\n    schema.add(\"MYTABLE\", table);\n    List<RelTraitDef> traitDefs = new ArrayList<>();\n    traitDefs.add(ConventionTraitDef.INSTANCE);\n    traitDefs.add(RelDistributionTraitDef.INSTANCE);\n    SqlParser.Config parserConfig =\n        SqlParser.configBuilder(SqlParser.Config.DEFAULT)\n            .setCaseSensitive(false)\n            .build();\n\n    final FrameworkConfig config = Frameworks.newConfigBuilder()\n        .parserConfig(parserConfig)\n        .defaultSchema(schema)\n        .traitDefs(traitDefs)\n        \r\n        .ruleSets(\n            RuleSets.ofList(AbstractConverter.ExpandConversionRule.INSTANCE))\n        .programs(Programs.ofRules(Programs.RULE_SET))\n        .build();\n    executeQuery(config, \" UPDATE MYTABLE set id=7 where id=1\",\n        CalciteSystemProperty.DEBUG.value());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/tools/FrameworksTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"}],"commitId":"76ff19135f8bf9ee19b47d999d23bc1e2ab75e15","commitMessage":"@@@[CALCITE-4248] Deprecate SqlParser.ConfigBuilder\n","date":"2020-09-18 10:35:31","modifiedFileCount":"20","status":"M","submitter":"Julian Hyde"}]
