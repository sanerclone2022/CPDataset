[{"authorTime":"2018-05-30 12:16:57","codes":[{"authorDate":"2018-05-30 12:16:57","commitOrder":1,"curCode":"  private RelDataType promoteToVarChar(RelDataType type1, RelDataType type2) {\n    RelDataType resultType = null;\n    \r\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isCharacter(type2)) {\n      return null;\n    }\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n    return resultType;\n  }\n","date":"2019-08-29 17:01:46","endLine":407,"groupId":"14261","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"promoteToVarChar","params":"(RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3e/0f4ee77127921f87881574ad4ea00f289a61ea.src","preCode":"  private RelDataType promoteToVarChar(RelDataType type1, RelDataType type2) {\n    RelDataType resultType = null;\n    \r\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isCharacter(type2)) {\n      return null;\n    }\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n    return resultType;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/implicit/AbstractTypeCoercion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"B"},{"authorDate":"2018-05-30 12:16:57","commitOrder":1,"curCode":"  public RelDataType commonTypeForBinaryComparison(RelDataType type1, RelDataType type2) {\n    SqlTypeName typeName1 = type1.getSqlTypeName();\n    SqlTypeName typeName2 = type2.getSqlTypeName();\n\n    if (typeName1 == null || typeName2 == null) {\n      return null;\n    }\n\n    if (SqlTypeUtil.isString(type1) && SqlTypeUtil.isDatetime(type2)\n        || SqlTypeUtil.isDatetime(type1) && SqlTypeUtil.isString(type2)) {\n      \r\n      \r\n      return null;\n    }\n\n    \r\n    if (SqlTypeUtil.isDate(type1) && SqlTypeUtil.isTimestamp(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDate(type2) && SqlTypeUtil.isTimestamp(type1)) {\n      return type1;\n    }\n\n    if (SqlTypeUtil.isString(type1) && typeName2 == SqlTypeName.NULL) {\n      return type1;\n    }\n\n    if (typeName1 == SqlTypeName.NULL && SqlTypeUtil.isString(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDecimal(type1) && SqlTypeUtil.isCharacter(type2)\n        || SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isDecimal(type2)) {\n      \r\n      \r\n      return SqlTypeUtil.getMaxPrecisionScaleDecimal(factory);\n    }\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isBinary(type2) && SqlTypeUtil.isApproximateNumeric(type1)\n        || SqlTypeUtil.isBinary(type1) && SqlTypeUtil.isApproximateNumeric(type2)) {\n      return null;\n    }\n\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      if (SqlTypeUtil.isTimestamp(type1)) {\n        return null;\n      }\n      return type1;\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      if (SqlTypeUtil.isTimestamp(type2)) {\n        return null;\n      }\n      return type2;\n    }\n\n    return null;\n  }\n","date":"2019-08-29 17:01:46","endLine":481,"groupId":"14261","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"commonTypeForBinaryComparison","params":"(RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3e/0f4ee77127921f87881574ad4ea00f289a61ea.src","preCode":"  public RelDataType commonTypeForBinaryComparison(RelDataType type1, RelDataType type2) {\n    SqlTypeName typeName1 = type1.getSqlTypeName();\n    SqlTypeName typeName2 = type2.getSqlTypeName();\n\n    if (typeName1 == null || typeName2 == null) {\n      return null;\n    }\n\n    if (SqlTypeUtil.isString(type1) && SqlTypeUtil.isDatetime(type2)\n        || SqlTypeUtil.isDatetime(type1) && SqlTypeUtil.isString(type2)) {\n      \r\n      \r\n      return null;\n    }\n\n    \r\n    if (SqlTypeUtil.isDate(type1) && SqlTypeUtil.isTimestamp(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDate(type2) && SqlTypeUtil.isTimestamp(type1)) {\n      return type1;\n    }\n\n    if (SqlTypeUtil.isString(type1) && typeName2 == SqlTypeName.NULL) {\n      return type1;\n    }\n\n    if (typeName1 == SqlTypeName.NULL && SqlTypeUtil.isString(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDecimal(type1) && SqlTypeUtil.isCharacter(type2)\n        || SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isDecimal(type2)) {\n      \r\n      \r\n      return SqlTypeUtil.getMaxPrecisionScaleDecimal(factory);\n    }\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isBinary(type2) && SqlTypeUtil.isApproximateNumeric(type1)\n        || SqlTypeUtil.isBinary(type1) && SqlTypeUtil.isApproximateNumeric(type2)) {\n      return null;\n    }\n\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      if (SqlTypeUtil.isTimestamp(type1)) {\n        return null;\n      }\n      return type1;\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      if (SqlTypeUtil.isTimestamp(type2)) {\n        return null;\n      }\n      return type2;\n    }\n\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/implicit/AbstractTypeCoercion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":414,"status":"B"}],"commitId":"01477c42ded991aaa7b14cf72a6e4ea1a20edf5e","commitMessage":"@@@[CALCITE-2302] Implicit type cast support\n\nChanges:\n* Support full implicit type coercion for SQL contexts:\nSet operation.  binary arithmetic exprs.  binary equality\nexprs.  binary comparison exprs.  case when(COALESCE). \nIN operation.  builtin functions.  user defined function(UDF);\n* The SqlValidator now takes a component named `TypeCoercion`\nresponsible for the coercion work.  you can turn off the coercion with\n`SqlValidator#setEnableTypeCoercion(false)`;\n* We follow PostgreSQL and SQL-SERVER conversion style for two integers division. \ni.e. `'9'/2` returns INTEGER 4.\n","date":"2019-08-29 17:01:46","modifiedFileCount":"50","status":"B","submitter":"yuzhao.cyz"},{"authorTime":"2019-09-23 13:42:45","codes":[{"authorDate":"2018-05-30 12:16:57","commitOrder":2,"curCode":"  private RelDataType promoteToVarChar(RelDataType type1, RelDataType type2) {\n    RelDataType resultType = null;\n    \r\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isCharacter(type2)) {\n      return null;\n    }\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n    return resultType;\n  }\n","date":"2019-08-29 17:01:46","endLine":407,"groupId":"14261","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"promoteToVarChar","params":"(RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3e/0f4ee77127921f87881574ad4ea00f289a61ea.src","preCode":"  private RelDataType promoteToVarChar(RelDataType type1, RelDataType type2) {\n    RelDataType resultType = null;\n    \r\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isCharacter(type2)) {\n      return null;\n    }\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n    return resultType;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/implicit/AbstractTypeCoercion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"N"},{"authorDate":"2019-09-23 13:42:45","commitOrder":2,"curCode":"  public RelDataType commonTypeForBinaryComparison(RelDataType type1, RelDataType type2) {\n    SqlTypeName typeName1 = type1.getSqlTypeName();\n    SqlTypeName typeName2 = type2.getSqlTypeName();\n\n    if (typeName1 == null || typeName2 == null) {\n      return null;\n    }\n\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isDatetime(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDatetime(type1) && SqlTypeUtil.isCharacter(type2)) {\n      return type1;\n    }\n\n    \r\n    if (SqlTypeUtil.isDate(type1) && SqlTypeUtil.isTimestamp(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDate(type2) && SqlTypeUtil.isTimestamp(type1)) {\n      return type1;\n    }\n\n    if (SqlTypeUtil.isString(type1) && typeName2 == SqlTypeName.NULL) {\n      return type1;\n    }\n\n    if (typeName1 == SqlTypeName.NULL && SqlTypeUtil.isString(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDecimal(type1) && SqlTypeUtil.isCharacter(type2)\n        || SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isDecimal(type2)) {\n      \r\n      \r\n      return SqlTypeUtil.getMaxPrecisionScaleDecimal(factory);\n    }\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isBinary(type2) && SqlTypeUtil.isApproximateNumeric(type1)\n        || SqlTypeUtil.isBinary(type1) && SqlTypeUtil.isApproximateNumeric(type2)) {\n      return null;\n    }\n\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      if (SqlTypeUtil.isTimestamp(type1)) {\n        return null;\n      }\n      return type1;\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      if (SqlTypeUtil.isTimestamp(type2)) {\n        return null;\n      }\n      return type2;\n    }\n\n    return null;\n  }\n","date":"2019-09-23 14:54:40","endLine":504,"groupId":"14261","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"commonTypeForBinaryComparison","params":"(RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ac/d0cdf0d924e361614892ce6a3c441f3b0de36f.src","preCode":"  public RelDataType commonTypeForBinaryComparison(RelDataType type1, RelDataType type2) {\n    SqlTypeName typeName1 = type1.getSqlTypeName();\n    SqlTypeName typeName2 = type2.getSqlTypeName();\n\n    if (typeName1 == null || typeName2 == null) {\n      return null;\n    }\n\n    if (SqlTypeUtil.isString(type1) && SqlTypeUtil.isDatetime(type2)\n        || SqlTypeUtil.isDatetime(type1) && SqlTypeUtil.isString(type2)) {\n      \r\n      \r\n      return null;\n    }\n\n    \r\n    if (SqlTypeUtil.isDate(type1) && SqlTypeUtil.isTimestamp(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDate(type2) && SqlTypeUtil.isTimestamp(type1)) {\n      return type1;\n    }\n\n    if (SqlTypeUtil.isString(type1) && typeName2 == SqlTypeName.NULL) {\n      return type1;\n    }\n\n    if (typeName1 == SqlTypeName.NULL && SqlTypeUtil.isString(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDecimal(type1) && SqlTypeUtil.isCharacter(type2)\n        || SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isDecimal(type2)) {\n      \r\n      \r\n      return SqlTypeUtil.getMaxPrecisionScaleDecimal(factory);\n    }\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isBinary(type2) && SqlTypeUtil.isApproximateNumeric(type1)\n        || SqlTypeUtil.isBinary(type1) && SqlTypeUtil.isApproximateNumeric(type2)) {\n      return null;\n    }\n\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      if (SqlTypeUtil.isTimestamp(type1)) {\n        return null;\n      }\n      return type1;\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      if (SqlTypeUtil.isTimestamp(type2)) {\n        return null;\n      }\n      return type2;\n    }\n\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/implicit/AbstractTypeCoercion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":433,"status":"M"}],"commitId":"64068d69ceee8450e56c4705d26b7a2f944909b9","commitMessage":"@@@[CALCITE-1178] Allow SqlBetweenOperator to compare DATE and TIMESTAMP\n\n* Add implicit type coercion rules for BETWEEN operator and add test\ncases\n* For comparison of NUMERIC and CHARACTER.  we coerce the CHARACTER to\nNUMERIC type which is breaking change.(Before this patch.  CHARACTER would\nbe coerced to INT during sql-to-rel conversion)\n* For \"DATETIME and CHARACTER\" comparison and equality.  add coercion rules during sql\nnode validation.  before this patch.  the coercion happens during sql-to-rel conversion\n* Some code refactoring for TypeCoercionConverterTest\n","date":"2019-09-23 14:54:40","modifiedFileCount":"6","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2018-05-30 12:16:57","commitOrder":3,"curCode":"  private RelDataType promoteToVarChar(RelDataType type1, RelDataType type2) {\n    RelDataType resultType = null;\n    \r\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isCharacter(type2)) {\n      return null;\n    }\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n    return resultType;\n  }\n","date":"2019-08-29 17:01:46","endLine":407,"groupId":"14261","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"promoteToVarChar","params":"(RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3e/0f4ee77127921f87881574ad4ea00f289a61ea.src","preCode":"  private RelDataType promoteToVarChar(RelDataType type1, RelDataType type2) {\n    RelDataType resultType = null;\n    \r\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isCharacter(type2)) {\n      return null;\n    }\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n    return resultType;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/implicit/AbstractTypeCoercion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"N"},{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  @Override public RelDataType commonTypeForBinaryComparison(RelDataType type1, RelDataType type2) {\n    SqlTypeName typeName1 = type1.getSqlTypeName();\n    SqlTypeName typeName2 = type2.getSqlTypeName();\n\n    if (typeName1 == null || typeName2 == null) {\n      return null;\n    }\n\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isDatetime(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDatetime(type1) && SqlTypeUtil.isCharacter(type2)) {\n      return type1;\n    }\n\n    \r\n    if (SqlTypeUtil.isDate(type1) && SqlTypeUtil.isTimestamp(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDate(type2) && SqlTypeUtil.isTimestamp(type1)) {\n      return type1;\n    }\n\n    if (SqlTypeUtil.isString(type1) && typeName2 == SqlTypeName.NULL) {\n      return type1;\n    }\n\n    if (typeName1 == SqlTypeName.NULL && SqlTypeUtil.isString(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDecimal(type1) && SqlTypeUtil.isCharacter(type2)\n        || SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isDecimal(type2)) {\n      \r\n      \r\n      return SqlTypeUtil.getMaxPrecisionScaleDecimal(factory);\n    }\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isBinary(type2) && SqlTypeUtil.isApproximateNumeric(type1)\n        || SqlTypeUtil.isBinary(type1) && SqlTypeUtil.isApproximateNumeric(type2)) {\n      return null;\n    }\n\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      if (SqlTypeUtil.isTimestamp(type1)) {\n        return null;\n      }\n      return type1;\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      if (SqlTypeUtil.isTimestamp(type2)) {\n        return null;\n      }\n      return type2;\n    }\n\n    return null;\n  }\n","date":"2020-10-07 05:42:47","endLine":504,"groupId":"14261","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"commonTypeForBinaryComparison","params":"(RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/85/8bb3c50917ab9590d354c52584f5a167364848.src","preCode":"  public RelDataType commonTypeForBinaryComparison(RelDataType type1, RelDataType type2) {\n    SqlTypeName typeName1 = type1.getSqlTypeName();\n    SqlTypeName typeName2 = type2.getSqlTypeName();\n\n    if (typeName1 == null || typeName2 == null) {\n      return null;\n    }\n\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isDatetime(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDatetime(type1) && SqlTypeUtil.isCharacter(type2)) {\n      return type1;\n    }\n\n    \r\n    if (SqlTypeUtil.isDate(type1) && SqlTypeUtil.isTimestamp(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDate(type2) && SqlTypeUtil.isTimestamp(type1)) {\n      return type1;\n    }\n\n    if (SqlTypeUtil.isString(type1) && typeName2 == SqlTypeName.NULL) {\n      return type1;\n    }\n\n    if (typeName1 == SqlTypeName.NULL && SqlTypeUtil.isString(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDecimal(type1) && SqlTypeUtil.isCharacter(type2)\n        || SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isDecimal(type2)) {\n      \r\n      \r\n      return SqlTypeUtil.getMaxPrecisionScaleDecimal(factory);\n    }\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isBinary(type2) && SqlTypeUtil.isApproximateNumeric(type1)\n        || SqlTypeUtil.isBinary(type1) && SqlTypeUtil.isApproximateNumeric(type2)) {\n      return null;\n    }\n\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      if (SqlTypeUtil.isTimestamp(type1)) {\n        return null;\n      }\n      return type1;\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      if (SqlTypeUtil.isTimestamp(type2)) {\n        return null;\n      }\n      return type2;\n    }\n\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/implicit/AbstractTypeCoercion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":433,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  private @Nullable RelDataType promoteToVarChar(\n      @Nullable RelDataType type1, @Nullable RelDataType type2) {\n    RelDataType resultType = null;\n    if (type1 == null || type2 == null) {\n      return null;\n    }\n    \r\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isCharacter(type2)) {\n      return null;\n    }\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n    return resultType;\n  }\n","date":"2020-11-30 06:45:33","endLine":446,"groupId":"101850","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"promoteToVarChar","params":"(@NullableRelDataTypetype1@@NullableRelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/60/1a9f1704fc15bc4c6d04583ce5fad6755142e4.src","preCode":"  private RelDataType promoteToVarChar(RelDataType type1, RelDataType type2) {\n    RelDataType resultType = null;\n    \r\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isCharacter(type2)) {\n      return null;\n    }\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      resultType = factory.createSqlType(SqlTypeName.VARCHAR);\n    }\n    return resultType;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/implicit/AbstractTypeCoercion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":424,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"  @Override public @Nullable RelDataType commonTypeForBinaryComparison(\n      @Nullable RelDataType type1, @Nullable RelDataType type2) {\n    if (type1 == null || type2 == null) {\n      return null;\n    }\n\n    SqlTypeName typeName1 = type1.getSqlTypeName();\n    SqlTypeName typeName2 = type2.getSqlTypeName();\n\n    if (typeName1 == null || typeName2 == null) {\n      return null;\n    }\n\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isDatetime(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDatetime(type1) && SqlTypeUtil.isCharacter(type2)) {\n      return type1;\n    }\n\n    \r\n    if (SqlTypeUtil.isDate(type1) && SqlTypeUtil.isTimestamp(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDate(type2) && SqlTypeUtil.isTimestamp(type1)) {\n      return type1;\n    }\n\n    if (SqlTypeUtil.isString(type1) && typeName2 == SqlTypeName.NULL) {\n      return type1;\n    }\n\n    if (typeName1 == SqlTypeName.NULL && SqlTypeUtil.isString(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDecimal(type1) && SqlTypeUtil.isCharacter(type2)\n        || SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isDecimal(type2)) {\n      \r\n      \r\n      return SqlTypeUtil.getMaxPrecisionScaleDecimal(factory);\n    }\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isBinary(type2) && SqlTypeUtil.isApproximateNumeric(type1)\n        || SqlTypeUtil.isBinary(type1) && SqlTypeUtil.isApproximateNumeric(type2)) {\n      return null;\n    }\n\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      if (SqlTypeUtil.isTimestamp(type1)) {\n        return null;\n      }\n      return type1;\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      if (SqlTypeUtil.isTimestamp(type2)) {\n        return null;\n      }\n      return type2;\n    }\n\n    return null;\n  }\n","date":"2020-11-30 06:45:33","endLine":529,"groupId":"101850","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"commonTypeForBinaryComparison","params":"(@NullableRelDataTypetype1@@NullableRelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/60/1a9f1704fc15bc4c6d04583ce5fad6755142e4.src","preCode":"  @Override public RelDataType commonTypeForBinaryComparison(RelDataType type1, RelDataType type2) {\n    SqlTypeName typeName1 = type1.getSqlTypeName();\n    SqlTypeName typeName2 = type2.getSqlTypeName();\n\n    if (typeName1 == null || typeName2 == null) {\n      return null;\n    }\n\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isDatetime(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDatetime(type1) && SqlTypeUtil.isCharacter(type2)) {\n      return type1;\n    }\n\n    \r\n    if (SqlTypeUtil.isDate(type1) && SqlTypeUtil.isTimestamp(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDate(type2) && SqlTypeUtil.isTimestamp(type1)) {\n      return type1;\n    }\n\n    if (SqlTypeUtil.isString(type1) && typeName2 == SqlTypeName.NULL) {\n      return type1;\n    }\n\n    if (typeName1 == SqlTypeName.NULL && SqlTypeUtil.isString(type2)) {\n      return type2;\n    }\n\n    if (SqlTypeUtil.isDecimal(type1) && SqlTypeUtil.isCharacter(type2)\n        || SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isDecimal(type2)) {\n      \r\n      \r\n      return SqlTypeUtil.getMaxPrecisionScaleDecimal(factory);\n    }\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isBinary(type2) && SqlTypeUtil.isApproximateNumeric(type1)\n        || SqlTypeUtil.isBinary(type1) && SqlTypeUtil.isApproximateNumeric(type2)) {\n      return null;\n    }\n\n    \r\n    if (SqlTypeUtil.isAtomic(type1) && SqlTypeUtil.isCharacter(type2)) {\n      if (SqlTypeUtil.isTimestamp(type1)) {\n        return null;\n      }\n      return type1;\n    }\n\n    if (SqlTypeUtil.isCharacter(type1) && SqlTypeUtil.isAtomic(type2)) {\n      if (SqlTypeUtil.isTimestamp(type2)) {\n        return null;\n      }\n      return type2;\n    }\n\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/implicit/AbstractTypeCoercion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
