[{"authorTime":"2018-01-03 21:44:00","codes":[{"authorDate":"2018-01-03 21:44:00","commitOrder":1,"curCode":"  private Queryable<Integer> fetchPreferredGenres() {\n    if (EnvironmentFairy.getUser() == EnvironmentFairy.User.SPECIFIC_USER) {\n      return Linq4j.asEnumerable(SPECIFIC_USER_PREFERRED_GENRES).asQueryable();\n    } else {\n      final ContiguousSet<Integer> set =\n          ContiguousSet.create(Range.closed(FIRST_ID, LAST_ID),\n              DiscreteDomain.integers());\n      return Linq4j.asEnumerable(set).asQueryable();\n    }\n  }\n","date":"2018-03-04 13:35:17","endLine":72,"groupId":"7845","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchPreferredGenres","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/28/e043eddef1df148d24517bb10da418a6ecf21f.src","preCode":"  private Queryable<Integer> fetchPreferredGenres() {\n    if (EnvironmentFairy.getUser() == EnvironmentFairy.User.SPECIFIC_USER) {\n      return Linq4j.asEnumerable(SPECIFIC_USER_PREFERRED_GENRES).asQueryable();\n    } else {\n      final ContiguousSet<Integer> set =\n          ContiguousSet.create(Range.closed(FIRST_ID, LAST_ID),\n              DiscreteDomain.integers());\n      return Linq4j.asEnumerable(set).asQueryable();\n    }\n  }\n","realPath":"plus/src/main/java/org/apache/calcite/chinook/PreferredGenresTableFactory.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2018-01-03 21:44:00","commitOrder":1,"curCode":"  private Queryable<Integer> fetchPreferredAlbums() {\n    if (EnvironmentFairy.getUser() == EnvironmentFairy.User.SPECIFIC_USER) {\n      return Linq4j.asEnumerable(SPECIFIC_USER_PREFERRED_ALBUMS).asQueryable();\n    } else {\n      final ContiguousSet<Integer> set =\n          ContiguousSet.create(Range.closed(FIRST_ID, LAST_ID),\n              DiscreteDomain.integers());\n      return Linq4j.asEnumerable(set).asQueryable();\n    }\n  }\n","date":"2018-03-04 13:35:17","endLine":72,"groupId":"10740","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchPreferredAlbums","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/73/496108bc7bc6188309508158073c07f7341aba.src","preCode":"  private Queryable<Integer> fetchPreferredAlbums() {\n    if (EnvironmentFairy.getUser() == EnvironmentFairy.User.SPECIFIC_USER) {\n      return Linq4j.asEnumerable(SPECIFIC_USER_PREFERRED_ALBUMS).asQueryable();\n    } else {\n      final ContiguousSet<Integer> set =\n          ContiguousSet.create(Range.closed(FIRST_ID, LAST_ID),\n              DiscreteDomain.integers());\n      return Linq4j.asEnumerable(set).asQueryable();\n    }\n  }\n","realPath":"plus/src/main/java/org/apache/calcite/chinook/PreferredAlbumsTableFactory.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"}],"commitId":"81d59679b3ffd90339df7d8463c9865b89867e98","commitMessage":"@@@[CALCITE-2088] Chinook database with simple end-to-end tests for Calcite JDBC (Piotr Bojko)\n\nTests use the chinook-data-hsqldb data set from maven central.\n\nFix bug.  introduced in [CALCITE-2128].  where JdbcJoinRule is\nerroneously applied to SemiJoin.\n\nIn gitignore.  ignore netbeans project config overrides.\n\nClose apache/calcite#600\n","date":"2018-03-04 13:35:17","modifiedFileCount":"3","status":"B","submitter":"Piotr Bojko"},{"authorTime":"2020-12-02 05:40:39","codes":[{"authorDate":"2020-12-02 05:40:39","commitOrder":2,"curCode":"  private static Queryable<Integer> fetchPreferredGenres() {\n    if (EnvironmentFairy.getUser() == EnvironmentFairy.User.SPECIFIC_USER) {\n      return Linq4j.asEnumerable(SPECIFIC_USER_PREFERRED_GENRES).asQueryable();\n    } else {\n      final ContiguousSet<Integer> set =\n          ContiguousSet.create(Range.closed(FIRST_ID, LAST_ID),\n              DiscreteDomain.integers());\n      return Linq4j.asEnumerable(set).asQueryable();\n    }\n  }\n","date":"2020-12-08 15:07:23","endLine":74,"groupId":"10521","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"fetchPreferredGenres","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ab/fada547f71fb0ed772cc0cfb55da16849bb657.src","preCode":"  private Queryable<Integer> fetchPreferredGenres() {\n    if (EnvironmentFairy.getUser() == EnvironmentFairy.User.SPECIFIC_USER) {\n      return Linq4j.asEnumerable(SPECIFIC_USER_PREFERRED_GENRES).asQueryable();\n    } else {\n      final ContiguousSet<Integer> set =\n          ContiguousSet.create(Range.closed(FIRST_ID, LAST_ID),\n              DiscreteDomain.integers());\n      return Linq4j.asEnumerable(set).asQueryable();\n    }\n  }\n","realPath":"plus/src/main/java/org/apache/calcite/chinook/PreferredGenresTableFactory.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2020-12-02 05:40:39","commitOrder":2,"curCode":"  private static Queryable<Integer> fetchPreferredAlbums() {\n    if (EnvironmentFairy.getUser() == EnvironmentFairy.User.SPECIFIC_USER) {\n      return Linq4j.asEnumerable(SPECIFIC_USER_PREFERRED_ALBUMS).asQueryable();\n    } else {\n      final ContiguousSet<Integer> set =\n          ContiguousSet.create(Range.closed(FIRST_ID, LAST_ID),\n              DiscreteDomain.integers());\n      return Linq4j.asEnumerable(set).asQueryable();\n    }\n  }\n","date":"2020-12-08 15:07:23","endLine":74,"groupId":"10521","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"fetchPreferredAlbums","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/9086a7403cefec4c9f16df16f83fca9ea11d58.src","preCode":"  private Queryable<Integer> fetchPreferredAlbums() {\n    if (EnvironmentFairy.getUser() == EnvironmentFairy.User.SPECIFIC_USER) {\n      return Linq4j.asEnumerable(SPECIFIC_USER_PREFERRED_ALBUMS).asQueryable();\n    } else {\n      final ContiguousSet<Integer> set =\n          ContiguousSet.create(Range.closed(FIRST_ID, LAST_ID),\n              DiscreteDomain.integers());\n      return Linq4j.asEnumerable(set).asQueryable();\n    }\n  }\n","realPath":"plus/src/main/java/org/apache/calcite/chinook/PreferredAlbumsTableFactory.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"404f968f6079360621896e6ee20ec12488a40bc2","commitMessage":"@@@[CALCITE-4422] Add MethodCanBeStatic check via ErrorProne\n\nprivate and final methods can be made static.  so it is clear they do not access instance fields\n","date":"2020-12-08 15:07:23","modifiedFileCount":"169","status":"M","submitter":"Vladimir Sitnikov"}]
