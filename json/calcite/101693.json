[{"authorTime":"2019-03-15 23:56:54","codes":[{"authorDate":"2016-01-26 13:42:14","commitOrder":4,"curCode":"  public RelBuilder semiJoin(Iterable<? extends RexNode> conditions) {\n    final Frame right = stack.pop();\n    final Frame left = stack.pop();\n    final RelNode semiJoin =\n        semiJoinFactory.createSemiJoin(left.rel, right.rel, and(conditions));\n    stack.push(new Frame(semiJoin, left.right));\n    return this;\n  }\n","date":"2016-01-27 03:53:34","endLine":1069,"groupId":"2026","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"semiJoin","params":"(Iterable<?extendsRexNode>conditions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/54/398a6122053d96b11f5bcfb373282e7616b168.src","preCode":"  public RelBuilder semiJoin(Iterable<? extends RexNode> conditions) {\n    final Frame right = stack.pop();\n    final Frame left = stack.pop();\n    final RelNode semiJoin =\n        semiJoinFactory.createSemiJoin(left.rel, right.rel, and(conditions));\n    stack.push(new Frame(semiJoin, left.right));\n    return this;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/tools/RelBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1062,"status":"NB"},{"authorDate":"2019-03-15 23:56:54","commitOrder":4,"curCode":"  public RelBuilder antiJoin(Iterable<? extends RexNode> conditions) {\n    \r\n    \r\n    final RexBuilder rexBuilder = getRexBuilder();\n    final RelNode right = build();\n    final RelNode left = peek();\n    final int leftFieldCount = left.getRowType().getFieldCount();\n    final CorrelationId correlationId = cluster.createCorrel();\n    final RexNode corrVar =\n        rexBuilder.makeCorrel(left.getRowType(), correlationId);\n    final ImmutableBitSet.Builder requiredColumns = ImmutableBitSet.builder();\n\n    \r\n    final RexNode condition = and(conditions).accept(new RexShuttle() {\n      @Override public RexNode visitInputRef(RexInputRef input) {\n        final int field = input.getIndex();\n        if (field >= leftFieldCount) {\n          return rexBuilder.makeInputRef(input.getType(), input.getIndex()\n              - leftFieldCount);\n        }\n        requiredColumns.set(field);\n        return rexBuilder.makeFieldAccess(corrVar, field);\n      }\n    });\n\n    final RelNode right2 = push(right).filter(condition).build();\n\n    final RelNode antiJoin =\n        correlateFactory.createCorrelate(left, right2, correlationId,\n            requiredColumns.build(), SemiJoinType.ANTI);\n    replaceTop(antiJoin);\n    return this;\n  }\n","date":"2019-03-30 10:11:22","endLine":1871,"groupId":"8072","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"antiJoin","params":"(Iterable<?extendsRexNode>conditions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/68/492c94c71e70509cc82570433a4d5640fb7d5a.src","preCode":"  public RelBuilder antiJoin(Iterable<? extends RexNode> conditions) {\n    \r\n    \r\n    final RexBuilder rexBuilder = getRexBuilder();\n    final RelNode right = build();\n    final RelNode left = peek();\n    final int leftFieldCount = left.getRowType().getFieldCount();\n    final CorrelationId correlationId = cluster.createCorrel();\n    final RexNode corrVar =\n        rexBuilder.makeCorrel(left.getRowType(), correlationId);\n    final ImmutableBitSet.Builder requiredColumns = ImmutableBitSet.builder();\n\n    \r\n    final RexNode condition = and(conditions).accept(new RexShuttle() {\n      @Override public RexNode visitInputRef(RexInputRef input) {\n        final int field = input.getIndex();\n        if (field >= leftFieldCount) {\n          return rexBuilder.makeInputRef(input.getType(), input.getIndex()\n              - leftFieldCount);\n        }\n        requiredColumns.set(field);\n        return rexBuilder.makeFieldAccess(corrVar, field);\n      }\n    });\n\n    final RelNode right2 = push(right).filter(condition).build();\n\n    final RelNode antiJoin =\n        correlateFactory.createCorrelate(left, right2, correlationId,\n            requiredColumns.build(), SemiJoinType.ANTI);\n    replaceTop(antiJoin);\n    return this;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/tools/RelBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1839,"status":"B"}],"commitId":"22fd34f892a2232d393bd5906f8bb1f21f1dff50","commitMessage":"@@@[CALCITE-2920] In RelBuilder.  add antiJoin method (Ruben Quesada Lopez)\n\nThere is no AntiJoin relational operator (for now).  so generate a\nCorrelate instead.\n\nClose apache/calcite#1110\n","date":"2019-03-30 10:11:22","modifiedFileCount":"7","status":"M","submitter":"rubenada"},{"authorTime":"2019-04-12 15:11:30","codes":[{"authorDate":"2019-04-12 15:11:30","commitOrder":5,"curCode":"  public RelBuilder semiJoin(Iterable<? extends RexNode> conditions) {\n    final Frame right = stack.pop();\n    final RelNode semiJoin =\n        joinFactory.createJoin(peek(), right.rel,\n            and(conditions), ImmutableSet.of(), JoinRelType.SEMI, false);\n    replaceTop(semiJoin);\n    return this;\n  }\n","date":"2019-05-30 11:27:53","endLine":1925,"groupId":"2229","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"semiJoin","params":"(Iterable<?extendsRexNode>conditions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d3/1312f7c404211f4e677c7429400d53d62d90d2.src","preCode":"  public RelBuilder semiJoin(Iterable<? extends RexNode> conditions) {\n    final Frame right = stack.pop();\n    final Frame left = stack.pop();\n    final RelNode semiJoin =\n        semiJoinFactory.createSemiJoin(left.rel, right.rel, and(conditions));\n    stack.push(new Frame(semiJoin, left.right));\n    return this;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/tools/RelBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1918,"status":"M"},{"authorDate":"2019-04-12 15:11:30","commitOrder":5,"curCode":"  public RelBuilder antiJoin(Iterable<? extends RexNode> conditions) {\n    \r\n    \r\n    final RexBuilder rexBuilder = getRexBuilder();\n    final RelNode right = build();\n    final RelNode left = peek();\n    final int leftFieldCount = left.getRowType().getFieldCount();\n    final CorrelationId correlationId = cluster.createCorrel();\n    final RexNode corrVar =\n        rexBuilder.makeCorrel(left.getRowType(), correlationId);\n    final ImmutableBitSet.Builder requiredColumns = ImmutableBitSet.builder();\n\n    \r\n    final RexNode condition = and(conditions).accept(new RexShuttle() {\n      @Override public RexNode visitInputRef(RexInputRef input) {\n        final int field = input.getIndex();\n        if (field >= leftFieldCount) {\n          return rexBuilder.makeInputRef(input.getType(), input.getIndex()\n              - leftFieldCount);\n        }\n        requiredColumns.set(field);\n        return rexBuilder.makeFieldAccess(corrVar, field);\n      }\n    });\n\n    final RelNode right2 = push(right).filter(condition).build();\n\n    final RelNode antiJoin =\n        correlateFactory.createCorrelate(left, right2, correlationId,\n            requiredColumns.build(), JoinRelType.ANTI);\n    replaceTop(antiJoin);\n    return this;\n  }\n","date":"2019-05-30 11:27:53","endLine":1982,"groupId":"8072","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"antiJoin","params":"(Iterable<?extendsRexNode>conditions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d3/1312f7c404211f4e677c7429400d53d62d90d2.src","preCode":"  public RelBuilder antiJoin(Iterable<? extends RexNode> conditions) {\n    \r\n    \r\n    final RexBuilder rexBuilder = getRexBuilder();\n    final RelNode right = build();\n    final RelNode left = peek();\n    final int leftFieldCount = left.getRowType().getFieldCount();\n    final CorrelationId correlationId = cluster.createCorrel();\n    final RexNode corrVar =\n        rexBuilder.makeCorrel(left.getRowType(), correlationId);\n    final ImmutableBitSet.Builder requiredColumns = ImmutableBitSet.builder();\n\n    \r\n    final RexNode condition = and(conditions).accept(new RexShuttle() {\n      @Override public RexNode visitInputRef(RexInputRef input) {\n        final int field = input.getIndex();\n        if (field >= leftFieldCount) {\n          return rexBuilder.makeInputRef(input.getType(), input.getIndex()\n              - leftFieldCount);\n        }\n        requiredColumns.set(field);\n        return rexBuilder.makeFieldAccess(corrVar, field);\n      }\n    });\n\n    final RelNode right2 = push(right).filter(condition).build();\n\n    final RelNode antiJoin =\n        correlateFactory.createCorrelate(left, right2, correlationId,\n            requiredColumns.build(), SemiJoinType.ANTI);\n    replaceTop(antiJoin);\n    return this;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/tools/RelBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1950,"status":"M"}],"commitId":"48093937ae4db179884d1111fa9d12e978e57e1f","commitMessage":"@@@[CALCITE-2696] Improve design of join-like relational expressions\n\n**Diff**\n- Deprecate SemiJoin.  EnumerableSemiJoin.  SemiJoinType. \nEnumerableSemiJoinRule.  JoinToCorrelateRule#SEMI\n- Add SEMI and ANTI join type to JoinRelType.  add method\nprojectsRight() and isOuterJoin()\n- Correlate use JoinRelType instead of SemiJoinType\n- Rename EnumerableThetaJoin to EnumerableNestedLoopJoin\n- Rename EnumerableJoin to EnumerableHashJoin\n- EnumerableJoinRule converts semi join to EnumerableHashJoin\n(EnumerableSemiJoin's functionality is merged into this rule)\n- Add method isSemiJoin() in Join.java to decide if this join is a semi join\n(comes from SemiJoinRule during decorrelateation). \nthe return value true means the join is a semi join equivalent to\nSemiJoin before this patch.\n- Cache the JoinInfo in Join and use it to get leftKeys and rightKeys. \nmerge SemiJoin#computeSelfCost logic into Join#computeSelfCost\n- For RelBuilder.  removes SemiJoinFactory.  method #semiJoin\nnow returns a LogicalJoin with JoinRelType#SEMI\n- Rename EnumerableDefaults#join to EnumerableDefaults#hashJoin\n- Rename EnumerableDefaults#thetaJoin to EnumerableDefaults#nestedLoopJoin\n\n**Rules tweak**\n- JoinAddRedundantSemiJoinRule now creates LogicalJoin with JoinRelType#SEMI\ninstead of SemiJoin\n- JoinToCorrelateRule deprecates SEMI instance and change the matches\ncondition to !join.getJoinType().generatesNullsOnLeft() which also\nallowed ANTI compared before this patch.\n- SemiJoinRule matches SEMI join specifically.\n\n**Metadata tweak**\n- RelMdAllPredicates.  RelMdExpressionLineage: Add full rowType to\ngetAllPredicates(Join) cause semi join only outputs one side\n- RelMdColumnUniqueness.  RelMdSelectivity.  RelMdDistinctRowCount. \nRelMdSize.  RelMdUniqueKeys: merge semi join logic to join\n\n**Test cases change**\n- MaterializationTest#testJoinMaterialization11 now can materialize\nsuccessfully.  cause i allow logical SemiJoin node to match.  the original\nmatches SemiJoin as SemiJoin.class.isAssignableFrom().  which i think is\nwrong cause this will only matches subClasses of SemiJoin which is only\nEnumerableSemiJoin before this patch.\n- SortRemoveRuleTest#removeSortOverEnumerableCorrelate.  because\nCALCITE-2018.  the final EnumerableSort's cost was cached by the previous\nEnumerableSort with logical children.  so i remove the EnumerableSortRule\nand the best plan is correct\n\nclose apache/calcite#1157\n","date":"2019-05-30 11:27:53","modifiedFileCount":"81","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2019-06-01 00:16:42","codes":[{"authorDate":"2019-04-12 15:11:30","commitOrder":6,"curCode":"  public RelBuilder semiJoin(Iterable<? extends RexNode> conditions) {\n    final Frame right = stack.pop();\n    final RelNode semiJoin =\n        joinFactory.createJoin(peek(), right.rel,\n            and(conditions), ImmutableSet.of(), JoinRelType.SEMI, false);\n    replaceTop(semiJoin);\n    return this;\n  }\n","date":"2019-05-30 11:27:53","endLine":1925,"groupId":"2229","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"semiJoin","params":"(Iterable<?extendsRexNode>conditions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d3/1312f7c404211f4e677c7429400d53d62d90d2.src","preCode":"  public RelBuilder semiJoin(Iterable<? extends RexNode> conditions) {\n    final Frame right = stack.pop();\n    final RelNode semiJoin =\n        joinFactory.createJoin(peek(), right.rel,\n            and(conditions), ImmutableSet.of(), JoinRelType.SEMI, false);\n    replaceTop(semiJoin);\n    return this;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/tools/RelBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1918,"status":"N"},{"authorDate":"2019-06-01 00:16:42","commitOrder":6,"curCode":"  public RelBuilder antiJoin(Iterable<? extends RexNode> conditions) {\n    final Frame right = stack.pop();\n    final RelNode antiJoin =\n        joinFactory.createJoin(peek(), right.rel,\n            and(conditions), ImmutableSet.of(), JoinRelType.ANTI, false);\n    replaceTop(antiJoin);\n    return this;\n  }\n","date":"2019-06-07 22:58:45","endLine":1958,"groupId":"2229","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"antiJoin","params":"(Iterable<?extendsRexNode>conditions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/39f5889badec4811f772b8bb6bce732dc5c833.src","preCode":"  public RelBuilder antiJoin(Iterable<? extends RexNode> conditions) {\n    \r\n    \r\n    final RexBuilder rexBuilder = getRexBuilder();\n    final RelNode right = build();\n    final RelNode left = peek();\n    final int leftFieldCount = left.getRowType().getFieldCount();\n    final CorrelationId correlationId = cluster.createCorrel();\n    final RexNode corrVar =\n        rexBuilder.makeCorrel(left.getRowType(), correlationId);\n    final ImmutableBitSet.Builder requiredColumns = ImmutableBitSet.builder();\n\n    \r\n    final RexNode condition = and(conditions).accept(new RexShuttle() {\n      @Override public RexNode visitInputRef(RexInputRef input) {\n        final int field = input.getIndex();\n        if (field >= leftFieldCount) {\n          return rexBuilder.makeInputRef(input.getType(), input.getIndex()\n              - leftFieldCount);\n        }\n        requiredColumns.set(field);\n        return rexBuilder.makeFieldAccess(corrVar, field);\n      }\n    });\n\n    final RelNode right2 = push(right).filter(condition).build();\n\n    final RelNode antiJoin =\n        correlateFactory.createCorrelate(left, right2, correlationId,\n            requiredColumns.build(), JoinRelType.ANTI);\n    replaceTop(antiJoin);\n    return this;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/tools/RelBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1951,"status":"M"}],"commitId":"be2b97905548a5b24067c8636567b364529332cc","commitMessage":"@@@[CALCITE-2968] New AntiJoin relational expression\n\nClose apache/calcite#1246\n","date":"2019-06-07 22:58:45","modifiedFileCount":"16","status":"M","submitter":"rubenada"},{"authorTime":"2020-01-14 11:52:33","codes":[{"authorDate":"2020-01-14 11:52:33","commitOrder":7,"curCode":"  public RelBuilder semiJoin(Iterable<? extends RexNode> conditions) {\n    final Frame right = stack.pop();\n    final RelNode semiJoin =\n        joinFactory.createJoin(peek(),\n            right.rel,\n            ImmutableList.of(),\n            and(conditions),\n            ImmutableSet.of(),\n            JoinRelType.SEMI,\n            false);\n    replaceTop(semiJoin);\n    return this;\n  }\n","date":"2020-01-15 08:01:28","endLine":2168,"groupId":"11881","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"semiJoin","params":"(Iterable<?extendsRexNode>conditions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7b/240e6f04652a6b8b64303141eb64580b6efa59.src","preCode":"  public RelBuilder semiJoin(Iterable<? extends RexNode> conditions) {\n    final Frame right = stack.pop();\n    final RelNode semiJoin =\n        joinFactory.createJoin(peek(), right.rel,\n            and(conditions), ImmutableSet.of(), JoinRelType.SEMI, false);\n    replaceTop(semiJoin);\n    return this;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/tools/RelBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2156,"status":"M"},{"authorDate":"2020-01-14 11:52:33","commitOrder":7,"curCode":"  public RelBuilder antiJoin(Iterable<? extends RexNode> conditions) {\n    final Frame right = stack.pop();\n    final RelNode antiJoin =\n        joinFactory.createJoin(peek(),\n            right.rel,\n            ImmutableList.of(),\n            and(conditions),\n            ImmutableSet.of(),\n            JoinRelType.ANTI,\n            false);\n    replaceTop(antiJoin);\n    return this;\n  }\n","date":"2020-01-15 08:01:28","endLine":2205,"groupId":"11881","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"antiJoin","params":"(Iterable<?extendsRexNode>conditions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7b/240e6f04652a6b8b64303141eb64580b6efa59.src","preCode":"  public RelBuilder antiJoin(Iterable<? extends RexNode> conditions) {\n    final Frame right = stack.pop();\n    final RelNode antiJoin =\n        joinFactory.createJoin(peek(), right.rel,\n            and(conditions), ImmutableSet.of(), JoinRelType.ANTI, false);\n    replaceTop(antiJoin);\n    return this;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/tools/RelBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2193,"status":"M"}],"commitId":"6257609c6be438ba9103666ea41e3191d851abd0","commitMessage":"@@@[CALCITE-3730] Add hints to RelBuilder\n\n* Add #hints to RelBuilder\n* Add hints to RelNode factories\n* In logical RelNode classes that implement Hintable.  add hints to #create method\n","date":"2020-01-15 08:01:28","modifiedFileCount":"39","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-02-08 10:10:42","codes":[{"authorDate":"2020-02-08 10:10:42","commitOrder":8,"curCode":"  public RelBuilder semiJoin(Iterable<? extends RexNode> conditions) {\n    final Frame right = stack.pop();\n    final RelNode semiJoin =\n        struct.joinFactory.createJoin(peek(),\n            right.rel,\n            ImmutableList.of(),\n            and(conditions),\n            ImmutableSet.of(),\n            JoinRelType.SEMI,\n            false);\n    replaceTop(semiJoin);\n    return this;\n  }\n","date":"2020-02-13 09:54:41","endLine":2128,"groupId":"101693","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"semiJoin","params":"(Iterable<?extendsRexNode>conditions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e4/ef056eb9cd67296b94990dcf50507dfbea6e55.src","preCode":"  public RelBuilder semiJoin(Iterable<? extends RexNode> conditions) {\n    final Frame right = stack.pop();\n    final RelNode semiJoin =\n        joinFactory.createJoin(peek(),\n            right.rel,\n            ImmutableList.of(),\n            and(conditions),\n            ImmutableSet.of(),\n            JoinRelType.SEMI,\n            false);\n    replaceTop(semiJoin);\n    return this;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/tools/RelBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2116,"status":"M"},{"authorDate":"2020-02-08 10:10:42","commitOrder":8,"curCode":"  public RelBuilder antiJoin(Iterable<? extends RexNode> conditions) {\n    final Frame right = stack.pop();\n    final RelNode antiJoin =\n        struct.joinFactory.createJoin(peek(),\n            right.rel,\n            ImmutableList.of(),\n            and(conditions),\n            ImmutableSet.of(),\n            JoinRelType.ANTI,\n            false);\n    replaceTop(antiJoin);\n    return this;\n  }\n","date":"2020-02-13 09:54:41","endLine":2165,"groupId":"101693","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"antiJoin","params":"(Iterable<?extendsRexNode>conditions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e4/ef056eb9cd67296b94990dcf50507dfbea6e55.src","preCode":"  public RelBuilder antiJoin(Iterable<? extends RexNode> conditions) {\n    final Frame right = stack.pop();\n    final RelNode antiJoin =\n        joinFactory.createJoin(peek(),\n            right.rel,\n            ImmutableList.of(),\n            and(conditions),\n            ImmutableSet.of(),\n            JoinRelType.ANTI,\n            false);\n    replaceTop(antiJoin);\n    return this;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/tools/RelBuilder.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2153,"status":"M"}],"commitId":"051b6919dfc5b60406e81d5e8b8d5efb263def87","commitMessage":"@@@Add RelBuilder.transform.  which allows you to clone a RelBuilder with slightly different Config\n\nAdd class RelFactories.Struct.  which contains an instance of\neach RelNode factory. This allows more efficient initialization\nof RelBuilder.\n","date":"2020-02-13 09:54:41","modifiedFileCount":"2","status":"M","submitter":"Julian Hyde"}]
