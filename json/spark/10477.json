[{"authorTime":"2014-05-06 09:32:54","codes":[{"authorDate":"2014-04-03 05:01:12","commitOrder":3,"curCode":"  public void runLassoUsingStaticMethods() {\n    int nPoints = 10000;\n    double A = 0.0;\n    double[] weights = {-1.5, 1.0e-2};\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(LinearDataGenerator.generateLinearInputAsList(A,\n        weights, nPoints, 42, 0.1), 2).cache();\n    List<LabeledPoint> validationData =\n        LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 17, 0.1);\n\n    LassoModel model = LassoWithSGD.train(testRDD.rdd(), 100, 1.0, 0.01, 1.0);\n\n    int numAccurate = validatePrediction(validationData, model);\n    Assert.assertTrue(numAccurate > nPoints * 4.0 / 5.0);\n  }\n","date":"2014-04-03 05:01:12","endLine":95,"groupId":"3275","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runLassoUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/f7/25924a2d971aefd68f3cd2863c61572d5a6ae2.src","preCode":"  public void runLassoUsingStaticMethods() {\n    int nPoints = 10000;\n    double A = 0.0;\n    double[] weights = {-1.5, 1.0e-2};\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(LinearDataGenerator.generateLinearInputAsList(A,\n        weights, nPoints, 42, 0.1), 2).cache();\n    List<LabeledPoint> validationData =\n        LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 17, 0.1);\n\n    LassoModel model = LassoWithSGD.train(testRDD.rdd(), 100, 1.0, 0.01, 1.0);\n\n    int numAccurate = validatePrediction(validationData, model);\n    Assert.assertTrue(numAccurate > nPoints * 4.0 / 5.0);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaLassoSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"NB"},{"authorDate":"2014-05-06 09:32:54","commitOrder":3,"curCode":"  public void runLinearRegressionUsingConstructor() {\n    int nPoints = 100;\n    double A = 3.0;\n    double[] weights = {10, 10};\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(\n        LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 42, 0.1), 2).cache();\n    List<LabeledPoint> validationData =\n            LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 17, 0.1);\n\n    LinearRegressionWithSGD linSGDImpl = new LinearRegressionWithSGD();\n    linSGDImpl.setIntercept(true);\n    LinearRegressionModel model = linSGDImpl.run(testRDD.rdd());\n\n    int numAccurate = validatePrediction(validationData, model);\n    Assert.assertTrue(numAccurate > nPoints * 4.0 / 5.0);\n  }\n","date":"2014-05-06 09:32:54","endLine":76,"groupId":"30","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"runLinearRegressionUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/71/51e553512b38f613fb21fbfd69f12f24edcadc.src","preCode":"  public void runLinearRegressionUsingConstructor() {\n    int nPoints = 100;\n    double A = 3.0;\n    double[] weights = {10, 10};\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(\n        LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 42, 0.1), 2).cache();\n    List<LabeledPoint> validationData =\n            LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 17, 0.1);\n\n    LinearRegressionWithSGD linSGDImpl = new LinearRegressionWithSGD();\n    linSGDImpl.setIntercept(true);\n    LinearRegressionModel model = linSGDImpl.run(testRDD.rdd());\n\n    int numAccurate = validatePrediction(validationData, model);\n    Assert.assertTrue(numAccurate > nPoints * 4.0 / 5.0);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaLinearRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"MB"}],"commitId":"98750a74daf7e2b873da85d2d5067f47e3bbdc4e","commitMessage":"@@@[SPARK-1594][MLLIB] Cleaning up MLlib APIs and guide\n\nFinal pass before the v1.0 release.\n\n* Remove `VectorRDDs`\n* Move `BinaryClassificationMetrics` from `evaluation.binary` to `evaluation`\n* Change default value of `addIntercept` to false and allow to add intercept in Ridge and Lasso.\n* Clean `DecisionTree` package doc and test suite.\n* Mark model constructors `private[spark]`\n* Rename `loadLibSVMData` to `loadLibSVMFile` and hide `LabelParser` from users.\n* Add `saveAsLibSVMFile`.\n* Add `appendBias` to `MLUtils`.\n\nAuthor: Xiangrui Meng <meng@databricks.com>\n\nCloses #524 from mengxr/mllib-cleaning and squashes the following commits:\n\n295dc8b [Xiangrui Meng] update loadLibSVMFile doc\n1977ac1 [Xiangrui Meng] fix doc of appendBias\n649fcf0 [Xiangrui Meng] rename loadLibSVMData to loadLibSVMFile; hide LabelParser from user APIs\n54b812c [Xiangrui Meng] add appendBias\na71e7d0 [Xiangrui Meng] add saveAsLibSVMFile\nd976295 [Xiangrui Meng] Merge branch 'master' into mllib-cleaning\nb7e5cec [Xiangrui Meng] remove some experimental annotations and make model constructors private[mllib]\n9b02b93 [Xiangrui Meng] minor code style update\na593ddc [Xiangrui Meng] fix python tests\nfc28c18 [Xiangrui Meng] mark more classes experimental\nf6cbbff [Xiangrui Meng] fix Java tests\n0af70b0 [Xiangrui Meng] minor\n6e139ef [Xiangrui Meng] Merge branch 'master' into mllib-cleaning\n94e6dce [Xiangrui Meng] move BinaryLabelCounter and BinaryConfusionMatrixImpl to evaluation.binary\ndf34907 [Xiangrui Meng] clean DecisionTreeSuite to use LocalSparkContext\nc81807f [Xiangrui Meng] set the default value of AddIntercept to false\n03389c0 [Xiangrui Meng] allow to add intercept in Ridge and Lasso\nc66c56f [Xiangrui Meng] move tree md to package object doc\na2695df [Xiangrui Meng] update guide for BinaryClassificationMetrics\n9194f4c [Xiangrui Meng] move BinaryClassificationMetrics one level up\n1c1a0e3 [Xiangrui Meng] remove VectorRDDs because it only contains one function that is not necessary for us to maintain\n","date":"2014-05-06 09:32:54","modifiedFileCount":"3","status":"M","submitter":"Xiangrui Meng"},{"authorTime":"2016-05-11 02:17:47","codes":[{"authorDate":"2016-05-11 02:17:47","commitOrder":4,"curCode":"  public void runLassoUsingStaticMethods() {\n    int nPoints = 10000;\n    double A = 0.0;\n    double[] weights = {-1.5, 1.0e-2};\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(LinearDataGenerator.generateLinearInputAsList(A,\n      weights, nPoints, 42, 0.1), 2).cache();\n    List<LabeledPoint> validationData =\n      LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 17, 0.1);\n\n    LassoModel model = LassoWithSGD.train(testRDD.rdd(), 100, 1.0, 0.01, 1.0);\n\n    int numAccurate = validatePrediction(validationData, model);\n    Assert.assertTrue(numAccurate > nPoints * 4.0 / 5.0);\n  }\n","date":"2016-05-11 02:17:47","endLine":100,"groupId":"3275","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runLassoUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/09/8bac3bedfff7eabeb26fd5d41987199cd9475a.src","preCode":"  public void runLassoUsingStaticMethods() {\n    int nPoints = 10000;\n    double A = 0.0;\n    double[] weights = {-1.5, 1.0e-2};\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(LinearDataGenerator.generateLinearInputAsList(A,\n        weights, nPoints, 42, 0.1), 2).cache();\n    List<LabeledPoint> validationData =\n        LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 17, 0.1);\n\n    LassoModel model = LassoWithSGD.train(testRDD.rdd(), 100, 1.0, 0.01, 1.0);\n\n    int numAccurate = validatePrediction(validationData, model);\n    Assert.assertTrue(numAccurate > nPoints * 4.0 / 5.0);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaLassoSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2016-05-11 02:17:47","commitOrder":4,"curCode":"  public void runLinearRegressionUsingConstructor() {\n    int nPoints = 100;\n    double A = 3.0;\n    double[] weights = {10, 10};\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(\n      LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 42, 0.1), 2).cache();\n    List<LabeledPoint> validationData =\n      LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 17, 0.1);\n\n    LinearRegressionWithSGD linSGDImpl = new LinearRegressionWithSGD();\n    linSGDImpl.setIntercept(true);\n    LinearRegressionModel model = linSGDImpl.run(testRDD.rdd());\n\n    int numAccurate = validatePrediction(validationData, model);\n    Assert.assertTrue(numAccurate > nPoints * 4.0 / 5.0);\n  }\n","date":"2016-05-11 02:17:47","endLine":83,"groupId":"30","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"runLinearRegressionUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/35/087a5e461dfa2360cb21bcff4103c063449813.src","preCode":"  public void runLinearRegressionUsingConstructor() {\n    int nPoints = 100;\n    double A = 3.0;\n    double[] weights = {10, 10};\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(\n        LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 42, 0.1), 2).cache();\n    List<LabeledPoint> validationData =\n            LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 17, 0.1);\n\n    LinearRegressionWithSGD linSGDImpl = new LinearRegressionWithSGD();\n    linSGDImpl.setIntercept(true);\n    LinearRegressionModel model = linSGDImpl.run(testRDD.rdd());\n\n    int numAccurate = validatePrediction(validationData, model);\n    Assert.assertTrue(numAccurate > nPoints * 4.0 / 5.0);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaLinearRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"ed0b4070fb50054b1ecf66ff6c32458a4967dfd3","commitMessage":"@@@[SPARK-15037][SQL][MLLIB] Use SparkSession instead of SQLContext in Scala/Java TestSuites\n\n## What changes were proposed in this pull request?\nUse SparkSession instead of SQLContext in Scala/Java TestSuites\nas this PR already very big working Python TestSuites in a diff PR.\n\n## How was this patch tested?\nExisting tests\n\nAuthor: Sandeep Singh <sandeep@techaddict.me>\n\nCloses #12907 from techaddict/SPARK-15037.\n","date":"2016-05-11 02:17:47","modifiedFileCount":"63","status":"M","submitter":"Sandeep Singh"},{"authorTime":"2019-09-09 23:19:40","codes":[{"authorDate":"2019-09-09 23:19:40","commitOrder":5,"curCode":"  public void runLassoUsingStaticMethods() {\n    int nPoints = 10000;\n    double A = 0.0;\n    double[] weights = {-1.5, 1.0e-2};\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(LinearDataGenerator.generateLinearInputAsList(A,\n      weights, nPoints, 42, 0.1), 2).cache();\n    List<LabeledPoint> validationData =\n      LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 17, 0.1);\n\n    LassoModel model = new LassoWithSGD(1.0, 100, 0.01, 1.0).run(testRDD.rdd());\n\n    int numAccurate = validatePrediction(validationData, model);\n    Assert.assertTrue(numAccurate > nPoints * 4.0 / 5.0);\n  }\n","date":"2019-09-09 23:19:40","endLine":76,"groupId":"10477","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"runLassoUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/35/ad24bc2a84f08ae14b84e060fd62eddf7cd571.src","preCode":"  public void runLassoUsingStaticMethods() {\n    int nPoints = 10000;\n    double A = 0.0;\n    double[] weights = {-1.5, 1.0e-2};\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(LinearDataGenerator.generateLinearInputAsList(A,\n      weights, nPoints, 42, 0.1), 2).cache();\n    List<LabeledPoint> validationData =\n      LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 17, 0.1);\n\n    LassoModel model = LassoWithSGD.train(testRDD.rdd(), 100, 1.0, 0.01, 1.0);\n\n    int numAccurate = validatePrediction(validationData, model);\n    Assert.assertTrue(numAccurate > nPoints * 4.0 / 5.0);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaLassoSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2019-09-09 23:19:40","commitOrder":5,"curCode":"  public void runLinearRegressionUsingConstructor() {\n    int nPoints = 100;\n    double A = 3.0;\n    double[] weights = {10, 10};\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(\n      LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 42, 0.1), 2).cache();\n    List<LabeledPoint> validationData =\n      LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 17, 0.1);\n\n    LinearRegressionWithSGD linSGDImpl = new LinearRegressionWithSGD(1.0, 100, 0.0, 1.0);\n    linSGDImpl.setIntercept(true);\n    LinearRegressionModel model = linSGDImpl.run(testRDD.rdd());\n\n    int numAccurate = validatePrediction(validationData, model);\n    Assert.assertTrue(numAccurate > nPoints * 4.0 / 5.0);\n  }\n","date":"2019-09-09 23:19:40","endLine":62,"groupId":"10477","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"runLinearRegressionUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/7e/87588c4f0f6b2262a19a9713a884897689adb9.src","preCode":"  public void runLinearRegressionUsingConstructor() {\n    int nPoints = 100;\n    double A = 3.0;\n    double[] weights = {10, 10};\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(\n      LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 42, 0.1), 2).cache();\n    List<LabeledPoint> validationData =\n      LinearDataGenerator.generateLinearInputAsList(A, weights, nPoints, 17, 0.1);\n\n    LinearRegressionWithSGD linSGDImpl = new LinearRegressionWithSGD();\n    linSGDImpl.setIntercept(true);\n    LinearRegressionModel model = linSGDImpl.run(testRDD.rdd());\n\n    int numAccurate = validatePrediction(validationData, model);\n    Assert.assertTrue(numAccurate > nPoints * 4.0 / 5.0);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaLinearRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"6378d4bc06cd1bb1a209bd5fb63d10ef52d75eb4","commitMessage":"@@@[SPARK-28980][CORE][SQL][STREAMING][MLLIB] Remove most items deprecated in Spark 2.2.0 or earlier.  for Spark 3\n\n\n What changes were proposed in this pull request?\n\n- Remove SQLContext.createExternalTable and Catalog.createExternalTable.  deprecated in favor of createTable since 2.2.0.  plus tests of deprecated methods\n- Remove HiveContext.  deprecated in 2.0.0.  in favor of `SparkSession.builder.enableHiveSupport`\n- Remove deprecated KinesisUtils.createStream methods.  plus tests of deprecated methods.  deprecate in 2.2.0\n- Remove deprecated MLlib (not Spark ML) linear method support.  mostly utility constructors and 'train' methods.  and associated docs. This includes methods in LinearRegression.  LogisticRegression.  Lasso.  RidgeRegression. These have been deprecated since 2.0.0\n- Remove deprecated Pyspark MLlib linear method support.  including LogisticRegressionWithSGD.  LinearRegressionWithSGD.  LassoWithSGD\n- Remove 'runs' argument in KMeans.train() method.  which has been a no-op since 2.0.0\n- Remove deprecated ChiSqSelector isSorted protected method\n- Remove deprecated 'yarn-cluster' and 'yarn-client' master argument in favor of 'yarn' and deploy mode 'cluster'.  etc\n\nNotes:\n\n- I was not able to remove deprecated DataFrameReader.json(RDD) in favor of DataFrameReader.json(Dataset); the former was deprecated in 2.2.0.  but.  it is still needed to support Pyspark's .json() method.  which can't use a Dataset.\n- Looks like SQLContext.createExternalTable was not actually deprecated in Pyspark.  but.  almost certainly was meant to be? Catalog.createExternalTable was.\n- I afterwards noted that the toDegrees.  toRadians functions were almost removed fully in SPARK-25908.  but Felix suggested keeping just the R version as they hadn't been technically deprecated. I'd like to revisit that. Do we really want the inconsistency? I'm not against reverting it again.  but then that implies leaving SQLContext.createExternalTable just in Pyspark too.  which seems weird.\n- I *kept* LogisticRegressionWithSGD.  LinearRegressionWithSGD.  LassoWithSGD.  RidgeRegressionWithSGD in Pyspark.  though deprecated.  as it is hard to remove them (still used by StreamingLogisticRegressionWithSGD?) and they are not fully removed in Scala. Maybe should not have been deprecated.\n\n\n Why are the changes needed?\n\nDeprecated items are easiest to remove in a major release.  so we should do so as much as possible for Spark 3. This does not target items deprecated 'recently' as of Spark 2.3.  which is still 18 months old.\n\n\n Does this PR introduce any user-facing change?\n\nYes.  in that deprecated items are removed from some public APIs.\n\n\n How was this patch tested?\n\nExisting tests.\n\nCloses #25684 from srowen/SPARK-28980.\n\nLead-authored-by: Sean Owen <sean.owen@databricks.com>\nCo-authored-by: HyukjinKwon <gurwls223@apache.org>\nSigned-off-by: Sean Owen <sean.owen@databricks.com>\n","date":"2019-09-09 23:19:40","modifiedFileCount":"8","status":"M","submitter":"Sean Owen"}]
