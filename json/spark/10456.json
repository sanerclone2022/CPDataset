[{"authorTime":"2015-06-04 05:34:20","codes":[{"authorDate":"2014-03-24 08:34:02","commitOrder":4,"curCode":"  public void runKMeansUsingConstructor() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = new KMeans()\n      .setK(1)\n      .setMaxIterations(1)\n      .setInitializationMode(KMeans.RANDOM())\n      .run(data.rdd());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2014-03-24 08:34:02","endLine":90,"groupId":"1923","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runKMeansUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/49/a614bd90caba308466b222bef9e31635939470.src","preCode":"  public void runKMeansUsingConstructor() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = new KMeans()\n      .setK(1)\n      .setMaxIterations(1)\n      .setInitializationMode(KMeans.RANDOM())\n      .run(data.rdd());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"NB"},{"authorDate":"2015-06-04 05:34:20","commitOrder":4,"curCode":"  public void runGaussianMixture() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    GaussianMixtureModel model = new GaussianMixture().setK(2).setMaxIterations(1).setSeed(1234)\n      .run(data);\n    assertEquals(model.gaussians().length, 2);\n    JavaRDD<Integer> predictions = model.predict(data);\n    predictions.first();\n  }\n","date":"2015-06-04 05:34:20","endLine":63,"groupId":"2034","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"runGaussianMixture","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/46/7a7a69e8f308a9fa4a94173643ffd447c7e76c.src","preCode":"  public void runGaussianMixture() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    GaussianMixtureModel model = new GaussianMixture().setK(2).setMaxIterations(1).setSeed(1234)\n      .run(data);\n    assertEquals(model.gaussians().length, 2);\n    JavaRDD<Integer> predictions = model.predict(data);\n    predictions.first();\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaGaussianMixtureSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"}],"commitId":"20a26b595c74ac41cf7c19e6091d7e675e503321","commitMessage":"@@@[SPARK-8054] [MLLIB] Added several Java-friendly APIs + unit tests\n\nJava-friendly APIs added:\n* GaussianMixture.run()\n* GaussianMixtureModel.predict()\n* DistributedLDAModel.javaTopicDistributions()\n* StreamingKMeans: trainOn.  predictOn.  predictOnValues\n* Statistics.corr\n* params\n  * added doc to w() since Java docs do not inherit doc\n  * removed non-Java-friendly w() from StringArrayParam and DoubleArrayParam\n  * made DoubleArrayParam Java-friendly w() actually Java-friendly\n\nI generated the doc and verified all changes.\n\nCC: mengxr\n\nAuthor: Joseph K. Bradley <joseph@databricks.com>\n\nCloses #6562 from jkbradley/java-api-1.4 and squashes the following commits:\n\nc16821b [Joseph K. Bradley] Small fixes based on code review.\nd955581 [Joseph K. Bradley] unit test fixes\n29b6b0d [Joseph K. Bradley] small fixes\nfe6dcfe [Joseph K. Bradley] Added several Java-friendly APIs + unit tests: NaiveBayes.  GaussianMixture.  LDA.  StreamingKMeans.  Statistics.corr.  params\n","date":"2015-06-04 05:34:20","modifiedFileCount":"3","status":"M","submitter":"Joseph K. Bradley"},{"authorTime":"2015-08-28 01:46:41","codes":[{"authorDate":"2015-08-28 01:46:41","commitOrder":5,"curCode":"  public void runKMeansUsingConstructor() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = new KMeans()\n      .setK(1)\n      .setMaxIterations(1)\n      .setInitializationMode(KMeans.RANDOM())\n      .run(data.rdd());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2015-08-28 01:46:41","endLine":88,"groupId":"1923","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runKMeansUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/ad/06676c72ac6e0750bbbdb223fd7b62ef3cd4f1.src","preCode":"  public void runKMeansUsingConstructor() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = new KMeans()\n      .setK(1)\n      .setMaxIterations(1)\n      .setInitializationMode(KMeans.RANDOM())\n      .run(data.rdd());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2015-08-28 01:46:41","commitOrder":5,"curCode":"  public void runGaussianMixture() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    GaussianMixtureModel model = new GaussianMixture().setK(2).setMaxIterations(1).setSeed(1234)\n      .run(data);\n    assertEquals(model.gaussians().length, 2);\n    JavaRDD<Integer> predictions = model.predict(data);\n    predictions.first();\n  }\n","date":"2015-08-28 01:46:41","endLine":63,"groupId":"2034","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"runGaussianMixture","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/12/3f78da54e346e4a8ae29572e7b2d7c5410b693.src","preCode":"  public void runGaussianMixture() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    GaussianMixtureModel model = new GaussianMixture().setK(2).setMaxIterations(1).setSeed(1234)\n      .run(data);\n    assertEquals(model.gaussians().length, 2);\n    JavaRDD<Integer> predictions = model.predict(data);\n    predictions.first();\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaGaussianMixtureSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"e1f4de4a7d15d4ca4b5c64ff929ac3980f5d706f","commitMessage":"@@@[SPARK-10257] [MLLIB] Removes Guava from all spark.mllib Java tests\n\n* Replaces instances of `Lists.newArrayList` with `Arrays.asList`\n* Replaces `commons.lang.StringUtils` over `com.google.collections.Strings`\n* Replaces `List` interface over `ArrayList` implementations\n\nThis PR along with #8445 #8446 #8447 completely removes all `com.google.collections.Lists` dependencies within mllib's Java tests.\n\nAuthor: Feynman Liang <fliang@databricks.com>\n\nCloses #8451 from feynmanliang/SPARK-10257.\n","date":"2015-08-28 01:46:41","modifiedFileCount":"14","status":"M","submitter":"Feynman Liang"},{"authorTime":"2016-05-11 02:17:47","codes":[{"authorDate":"2016-05-11 02:17:47","commitOrder":6,"curCode":"  public void runKMeansUsingConstructor() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = new KMeans()\n      .setK(1)\n      .setMaxIterations(1)\n      .setInitializationMode(KMeans.RANDOM())\n      .run(data.rdd());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2016-05-11 02:17:47","endLine":95,"groupId":"1923","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"runKMeansUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/4e/5b87f588e3dc412925bc01002415e8e7c8e23d.src","preCode":"  public void runKMeansUsingConstructor() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = new KMeans()\n      .setK(1)\n      .setMaxIterations(1)\n      .setInitializationMode(KMeans.RANDOM())\n      .run(data.rdd());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2016-05-11 02:17:47","commitOrder":6,"curCode":"  public void runGaussianMixture() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    GaussianMixtureModel model = new GaussianMixture().setK(2).setMaxIterations(1).setSeed(1234)\n      .run(data);\n    assertEquals(model.gaussians().length, 2);\n    JavaRDD<Integer> predictions = model.predict(data);\n    predictions.first();\n  }\n","date":"2016-05-11 02:17:47","endLine":69,"groupId":"2034","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"runGaussianMixture","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/20/edd08a2172d85ee574a76a6be145755779421f.src","preCode":"  public void runGaussianMixture() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    GaussianMixtureModel model = new GaussianMixture().setK(2).setMaxIterations(1).setSeed(1234)\n      .run(data);\n    assertEquals(model.gaussians().length, 2);\n    JavaRDD<Integer> predictions = model.predict(data);\n    predictions.first();\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaGaussianMixtureSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"ed0b4070fb50054b1ecf66ff6c32458a4967dfd3","commitMessage":"@@@[SPARK-15037][SQL][MLLIB] Use SparkSession instead of SQLContext in Scala/Java TestSuites\n\n## What changes were proposed in this pull request?\nUse SparkSession instead of SQLContext in Scala/Java TestSuites\nas this PR already very big working Python TestSuites in a diff PR.\n\n## How was this patch tested?\nExisting tests\n\nAuthor: Sandeep Singh <sandeep@techaddict.me>\n\nCloses #12907 from techaddict/SPARK-15037.\n","date":"2016-05-11 02:17:47","modifiedFileCount":"63","status":"M","submitter":"Sandeep Singh"},{"authorTime":"2019-11-04 03:21:28","codes":[{"authorDate":"2016-05-11 02:17:47","commitOrder":7,"curCode":"  public void runKMeansUsingConstructor() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = new KMeans()\n      .setK(1)\n      .setMaxIterations(1)\n      .setInitializationMode(KMeans.RANDOM())\n      .run(data.rdd());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2016-05-11 02:17:47","endLine":95,"groupId":"10456","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"runKMeansUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/4e/5b87f588e3dc412925bc01002415e8e7c8e23d.src","preCode":"  public void runKMeansUsingConstructor() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = new KMeans()\n      .setK(1)\n      .setMaxIterations(1)\n      .setInitializationMode(KMeans.RANDOM())\n      .run(data.rdd());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"},{"authorDate":"2019-11-04 03:21:28","commitOrder":7,"curCode":"  public void runGaussianMixture() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    GaussianMixtureModel model = new GaussianMixture().setK(2).setMaxIterations(1).setSeed(1234)\n      .run(data);\n    assertEquals(2, model.gaussians().length);\n    JavaRDD<Integer> predictions = model.predict(data);\n    predictions.first();\n  }\n","date":"2019-11-04 03:21:28","endLine":48,"groupId":"10456","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"runGaussianMixture","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/51/313f4fb581a50c5faf8295f89bd0f5a700a84a.src","preCode":"  public void runGaussianMixture() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    GaussianMixtureModel model = new GaussianMixture().setK(2).setMaxIterations(1).setSeed(1234)\n      .run(data);\n    assertEquals(model.gaussians().length, 2);\n    JavaRDD<Integer> predictions = model.predict(data);\n    predictions.first();\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaGaussianMixtureSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"80a89873b20aa07e2522bed5da0fc50e616246d9","commitMessage":"@@@[SPARK-29733][TESTS] Fix wrong order of parameters passed to `assertEquals`\n\n\n What changes were proposed in this pull request?\nThe `assertEquals` method of JUnit Assert requires the first parameter to be the expected value. In this PR.  I propose to change the order of parameters when the expected value is passed as the second parameter.\n\n\n Why are the changes needed?\nWrong order of assert parameters confuses when the assert fails and the parameters have special string representation. For example:\n```java\nassertEquals(input1.add(input2).  new CalendarInterval(5.  5.  367200000000L));\n```\n```\njava.lang.AssertionError:\nExpected :interval 5 months 5 days 101 hours\nActual   :interval 5 months 5 days 102 hours\n```\n\n\n Does this PR introduce any user-facing change?\nNo\n\n\n How was this patch tested?\nBy existing tests.\n\nCloses #26377 from MaxGekk/fix-order-in-assert-equals.\n\nAuthored-by: Maxim Gekk <max.gekk@gmail.com>\nSigned-off-by: Dongjoon Hyun <dhyun@apple.com>\n","date":"2019-11-04 03:21:28","modifiedFileCount":"21","status":"M","submitter":"Maxim Gekk"}]
