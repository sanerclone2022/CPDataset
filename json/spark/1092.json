[{"authorTime":"2016-03-08 06:13:44","codes":[{"authorDate":"2016-03-08 06:13:44","commitOrder":1,"curCode":"  public static long timeStringAs(String str, TimeUnit unit) {\n    String lower = str.toLowerCase().trim();\n\n    try {\n      Matcher m = Pattern.compile(\"(-?[0-9]+)([a-z]+)?\").matcher(lower);\n      if (!m.matches()) {\n        throw new NumberFormatException(\"Failed to parse time string: \" + str);\n      }\n\n      long val = Long.parseLong(m.group(1));\n      String suffix = m.group(2);\n\n      \r\n      if (suffix != null && !timeSuffixes.containsKey(suffix)) {\n        throw new NumberFormatException(\"Invalid suffix: \\\"\" + suffix + \"\\\"\");\n      }\n\n      \r\n      return unit.convert(val, suffix != null ? timeSuffixes.get(suffix) : unit);\n    } catch (NumberFormatException e) {\n      String timeError = \"Time must be specified as seconds (s), \" +\n              \"milliseconds (ms), microseconds (us), minutes (m or min), hour (h), or day (d). \" +\n              \"E.g. 50s, 100ms, or 250us.\";\n\n      throw new NumberFormatException(timeError + \"\\n\" + e.getMessage());\n    }\n  }\n","date":"2016-03-08 06:13:44","endLine":191,"groupId":"3050","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"timeStringAs","params":"(Stringstr@TimeUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/cc/c527306d9200c1625d02a666b9b4f6a518a88d.src","preCode":"  public static long timeStringAs(String str, TimeUnit unit) {\n    String lower = str.toLowerCase().trim();\n\n    try {\n      Matcher m = Pattern.compile(\"(-?[0-9]+)([a-z]+)?\").matcher(lower);\n      if (!m.matches()) {\n        throw new NumberFormatException(\"Failed to parse time string: \" + str);\n      }\n\n      long val = Long.parseLong(m.group(1));\n      String suffix = m.group(2);\n\n      \r\n      if (suffix != null && !timeSuffixes.containsKey(suffix)) {\n        throw new NumberFormatException(\"Invalid suffix: \\\"\" + suffix + \"\\\"\");\n      }\n\n      \r\n      return unit.convert(val, suffix != null ? timeSuffixes.get(suffix) : unit);\n    } catch (NumberFormatException e) {\n      String timeError = \"Time must be specified as seconds (s), \" +\n              \"milliseconds (ms), microseconds (us), minutes (m or min), hour (h), or day (d). \" +\n              \"E.g. 50s, 100ms, or 250us.\";\n\n      throw new NumberFormatException(timeError + \"\\n\" + e.getMessage());\n    }\n  }\n","realPath":"common/network-common/src/main/java/org/apache/spark/network/util/JavaUtils.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"B"},{"authorDate":"2016-03-08 06:13:44","commitOrder":1,"curCode":"  public static long byteStringAs(String str, ByteUnit unit) {\n    String lower = str.toLowerCase().trim();\n\n    try {\n      Matcher m = Pattern.compile(\"([0-9]+)([a-z]+)?\").matcher(lower);\n      Matcher fractionMatcher = Pattern.compile(\"([0-9]+\\\\.[0-9]+)([a-z]+)?\").matcher(lower);\n\n      if (m.matches()) {\n        long val = Long.parseLong(m.group(1));\n        String suffix = m.group(2);\n\n        \r\n        if (suffix != null && !byteSuffixes.containsKey(suffix)) {\n          throw new NumberFormatException(\"Invalid suffix: \\\"\" + suffix + \"\\\"\");\n        }\n\n        \r\n        return unit.convertFrom(val, suffix != null ? byteSuffixes.get(suffix) : unit);\n      } else if (fractionMatcher.matches()) {\n        throw new NumberFormatException(\"Fractional values are not supported. Input was: \"\n          + fractionMatcher.group(1));\n      } else {\n        throw new NumberFormatException(\"Failed to parse byte string: \" + str);\n      }\n\n    } catch (NumberFormatException e) {\n      String timeError = \"Size must be specified as bytes (b), \" +\n        \"kibibytes (k), mebibytes (m), gibibytes (g), tebibytes (t), or pebibytes(p). \" +\n        \"E.g. 50b, 100k, or 250m.\";\n\n      throw new NumberFormatException(timeError + \"\\n\" + e.getMessage());\n    }\n  }\n","date":"2016-03-08 06:13:44","endLine":245,"groupId":"606","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"byteStringAs","params":"(Stringstr@ByteUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/cc/c527306d9200c1625d02a666b9b4f6a518a88d.src","preCode":"  public static long byteStringAs(String str, ByteUnit unit) {\n    String lower = str.toLowerCase().trim();\n\n    try {\n      Matcher m = Pattern.compile(\"([0-9]+)([a-z]+)?\").matcher(lower);\n      Matcher fractionMatcher = Pattern.compile(\"([0-9]+\\\\.[0-9]+)([a-z]+)?\").matcher(lower);\n\n      if (m.matches()) {\n        long val = Long.parseLong(m.group(1));\n        String suffix = m.group(2);\n\n        \r\n        if (suffix != null && !byteSuffixes.containsKey(suffix)) {\n          throw new NumberFormatException(\"Invalid suffix: \\\"\" + suffix + \"\\\"\");\n        }\n\n        \r\n        return unit.convertFrom(val, suffix != null ? byteSuffixes.get(suffix) : unit);\n      } else if (fractionMatcher.matches()) {\n        throw new NumberFormatException(\"Fractional values are not supported. Input was: \"\n          + fractionMatcher.group(1));\n      } else {\n        throw new NumberFormatException(\"Failed to parse byte string: \" + str);\n      }\n\n    } catch (NumberFormatException e) {\n      String timeError = \"Size must be specified as bytes (b), \" +\n        \"kibibytes (k), mebibytes (m), gibibytes (g), tebibytes (t), or pebibytes(p). \" +\n        \"E.g. 50b, 100k, or 250m.\";\n\n      throw new NumberFormatException(timeError + \"\\n\" + e.getMessage());\n    }\n  }\n","realPath":"common/network-common/src/main/java/org/apache/spark/network/util/JavaUtils.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"B"}],"commitId":"e1fb857992074164dcaa02498c5a9604fac6f57e","commitMessage":"@@@[SPARK-529][CORE][YARN] Add type-safe config keys to SparkConf.\n\nThis is.  in a way.  the basics to enable SPARK-529 (which was closed as\nwon't fix but I think is still valuable). In fact.  Spark SQL created\nsomething for that.  and this change basically factors out that code\nand inserts it into SparkConf.  with some extra bells and whistles.\n\nTo showcase the usage of this pattern.  I modified the YARN backend\nto use the new config keys (defined in the new `config` package object\nunder `o.a.s.deploy.yarn`). Most of the changes are mechanic.  although\nlogic had to be slightly modified in a handful of places.\n\nAuthor: Marcelo Vanzin <vanzin@cloudera.com>\n\nCloses #10205 from vanzin/conf-opts.\n","date":"2016-03-08 06:13:44","modifiedFileCount":"1","status":"B","submitter":"Marcelo Vanzin"},{"authorTime":"2016-03-15 03:27:49","codes":[{"authorDate":"2016-03-08 06:13:44","commitOrder":2,"curCode":"  public static long timeStringAs(String str, TimeUnit unit) {\n    String lower = str.toLowerCase().trim();\n\n    try {\n      Matcher m = Pattern.compile(\"(-?[0-9]+)([a-z]+)?\").matcher(lower);\n      if (!m.matches()) {\n        throw new NumberFormatException(\"Failed to parse time string: \" + str);\n      }\n\n      long val = Long.parseLong(m.group(1));\n      String suffix = m.group(2);\n\n      \r\n      if (suffix != null && !timeSuffixes.containsKey(suffix)) {\n        throw new NumberFormatException(\"Invalid suffix: \\\"\" + suffix + \"\\\"\");\n      }\n\n      \r\n      return unit.convert(val, suffix != null ? timeSuffixes.get(suffix) : unit);\n    } catch (NumberFormatException e) {\n      String timeError = \"Time must be specified as seconds (s), \" +\n              \"milliseconds (ms), microseconds (us), minutes (m or min), hour (h), or day (d). \" +\n              \"E.g. 50s, 100ms, or 250us.\";\n\n      throw new NumberFormatException(timeError + \"\\n\" + e.getMessage());\n    }\n  }\n","date":"2016-03-08 06:13:44","endLine":191,"groupId":"3050","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"timeStringAs","params":"(Stringstr@TimeUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/cc/c527306d9200c1625d02a666b9b4f6a518a88d.src","preCode":"  public static long timeStringAs(String str, TimeUnit unit) {\n    String lower = str.toLowerCase().trim();\n\n    try {\n      Matcher m = Pattern.compile(\"(-?[0-9]+)([a-z]+)?\").matcher(lower);\n      if (!m.matches()) {\n        throw new NumberFormatException(\"Failed to parse time string: \" + str);\n      }\n\n      long val = Long.parseLong(m.group(1));\n      String suffix = m.group(2);\n\n      \r\n      if (suffix != null && !timeSuffixes.containsKey(suffix)) {\n        throw new NumberFormatException(\"Invalid suffix: \\\"\" + suffix + \"\\\"\");\n      }\n\n      \r\n      return unit.convert(val, suffix != null ? timeSuffixes.get(suffix) : unit);\n    } catch (NumberFormatException e) {\n      String timeError = \"Time must be specified as seconds (s), \" +\n              \"milliseconds (ms), microseconds (us), minutes (m or min), hour (h), or day (d). \" +\n              \"E.g. 50s, 100ms, or 250us.\";\n\n      throw new NumberFormatException(timeError + \"\\n\" + e.getMessage());\n    }\n  }\n","realPath":"common/network-common/src/main/java/org/apache/spark/network/util/JavaUtils.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"N"},{"authorDate":"2016-03-15 03:27:49","commitOrder":2,"curCode":"  public static long byteStringAs(String str, ByteUnit unit) {\n    String lower = str.toLowerCase().trim();\n\n    try {\n      Matcher m = Pattern.compile(\"([0-9]+)([a-z]+)?\").matcher(lower);\n      Matcher fractionMatcher = Pattern.compile(\"([0-9]+\\\\.[0-9]+)([a-z]+)?\").matcher(lower);\n\n      if (m.matches()) {\n        long val = Long.parseLong(m.group(1));\n        String suffix = m.group(2);\n\n        \r\n        if (suffix != null && !byteSuffixes.containsKey(suffix)) {\n          throw new NumberFormatException(\"Invalid suffix: \\\"\" + suffix + \"\\\"\");\n        }\n\n        \r\n        return unit.convertFrom(val, suffix != null ? byteSuffixes.get(suffix) : unit);\n      } else if (fractionMatcher.matches()) {\n        throw new NumberFormatException(\"Fractional values are not supported. Input was: \"\n          + fractionMatcher.group(1));\n      } else {\n        throw new NumberFormatException(\"Failed to parse byte string: \" + str);\n      }\n\n    } catch (NumberFormatException e) {\n      String byteError = \"Size must be specified as bytes (b), \" +\n        \"kibibytes (k), mebibytes (m), gibibytes (g), tebibytes (t), or pebibytes(p). \" +\n        \"E.g. 50b, 100k, or 250m.\";\n\n      throw new NumberFormatException(byteError + \"\\n\" + e.getMessage());\n    }\n  }\n","date":"2016-03-15 03:27:49","endLine":245,"groupId":"606","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"byteStringAs","params":"(Stringstr@ByteUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/fb/ed2f053dc6c4dd3f36b8ee936df9e90cc70c44.src","preCode":"  public static long byteStringAs(String str, ByteUnit unit) {\n    String lower = str.toLowerCase().trim();\n\n    try {\n      Matcher m = Pattern.compile(\"([0-9]+)([a-z]+)?\").matcher(lower);\n      Matcher fractionMatcher = Pattern.compile(\"([0-9]+\\\\.[0-9]+)([a-z]+)?\").matcher(lower);\n\n      if (m.matches()) {\n        long val = Long.parseLong(m.group(1));\n        String suffix = m.group(2);\n\n        \r\n        if (suffix != null && !byteSuffixes.containsKey(suffix)) {\n          throw new NumberFormatException(\"Invalid suffix: \\\"\" + suffix + \"\\\"\");\n        }\n\n        \r\n        return unit.convertFrom(val, suffix != null ? byteSuffixes.get(suffix) : unit);\n      } else if (fractionMatcher.matches()) {\n        throw new NumberFormatException(\"Fractional values are not supported. Input was: \"\n          + fractionMatcher.group(1));\n      } else {\n        throw new NumberFormatException(\"Failed to parse byte string: \" + str);\n      }\n\n    } catch (NumberFormatException e) {\n      String timeError = \"Size must be specified as bytes (b), \" +\n        \"kibibytes (k), mebibytes (m), gibibytes (g), tebibytes (t), or pebibytes(p). \" +\n        \"E.g. 50b, 100k, or 250m.\";\n\n      throw new NumberFormatException(timeError + \"\\n\" + e.getMessage());\n    }\n  }\n","realPath":"common/network-common/src/main/java/org/apache/spark/network/util/JavaUtils.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"e06493cb7b790623a9106241a8d496ecea703328","commitMessage":"@@@[MINOR][COMMON] Fix copy-paste oversight in variable naming\n\n## What changes were proposed in this pull request?\n\nJavaUtils.java has methods to convert time and byte strings for internal use.  this change renames a variable used in byteStringAs().  from timeError to byteError.\n\nAuthor: Bjorn Jonsson <bjornjon@gmail.com>\n\nCloses #11695 from bjornjon/master.\n","date":"2016-03-15 03:27:49","modifiedFileCount":"1","status":"M","submitter":"Bjorn Jonsson"},{"authorTime":"2017-04-11 03:11:56","codes":[{"authorDate":"2017-04-11 03:11:56","commitOrder":3,"curCode":"  public static long timeStringAs(String str, TimeUnit unit) {\n    String lower = str.toLowerCase(Locale.ROOT).trim();\n\n    try {\n      Matcher m = Pattern.compile(\"(-?[0-9]+)([a-z]+)?\").matcher(lower);\n      if (!m.matches()) {\n        throw new NumberFormatException(\"Failed to parse time string: \" + str);\n      }\n\n      long val = Long.parseLong(m.group(1));\n      String suffix = m.group(2);\n\n      \r\n      if (suffix != null && !timeSuffixes.containsKey(suffix)) {\n        throw new NumberFormatException(\"Invalid suffix: \\\"\" + suffix + \"\\\"\");\n      }\n\n      \r\n      return unit.convert(val, suffix != null ? timeSuffixes.get(suffix) : unit);\n    } catch (NumberFormatException e) {\n      String timeError = \"Time must be specified as seconds (s), \" +\n              \"milliseconds (ms), microseconds (us), minutes (m or min), hour (h), or day (d). \" +\n              \"E.g. 50s, 100ms, or 250us.\";\n\n      throw new NumberFormatException(timeError + \"\\n\" + e.getMessage());\n    }\n  }\n","date":"2017-04-11 03:11:56","endLine":239,"groupId":"1092","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"timeStringAs","params":"(Stringstr@TimeUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/af/c59efaef810df45d414e6c6ec271f4c1d31db6.src","preCode":"  public static long timeStringAs(String str, TimeUnit unit) {\n    String lower = str.toLowerCase().trim();\n\n    try {\n      Matcher m = Pattern.compile(\"(-?[0-9]+)([a-z]+)?\").matcher(lower);\n      if (!m.matches()) {\n        throw new NumberFormatException(\"Failed to parse time string: \" + str);\n      }\n\n      long val = Long.parseLong(m.group(1));\n      String suffix = m.group(2);\n\n      \r\n      if (suffix != null && !timeSuffixes.containsKey(suffix)) {\n        throw new NumberFormatException(\"Invalid suffix: \\\"\" + suffix + \"\\\"\");\n      }\n\n      \r\n      return unit.convert(val, suffix != null ? timeSuffixes.get(suffix) : unit);\n    } catch (NumberFormatException e) {\n      String timeError = \"Time must be specified as seconds (s), \" +\n              \"milliseconds (ms), microseconds (us), minutes (m or min), hour (h), or day (d). \" +\n              \"E.g. 50s, 100ms, or 250us.\";\n\n      throw new NumberFormatException(timeError + \"\\n\" + e.getMessage());\n    }\n  }\n","realPath":"common/network-common/src/main/java/org/apache/spark/network/util/JavaUtils.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2017-04-11 03:11:56","commitOrder":3,"curCode":"  public static long byteStringAs(String str, ByteUnit unit) {\n    String lower = str.toLowerCase(Locale.ROOT).trim();\n\n    try {\n      Matcher m = Pattern.compile(\"([0-9]+)([a-z]+)?\").matcher(lower);\n      Matcher fractionMatcher = Pattern.compile(\"([0-9]+\\\\.[0-9]+)([a-z]+)?\").matcher(lower);\n\n      if (m.matches()) {\n        long val = Long.parseLong(m.group(1));\n        String suffix = m.group(2);\n\n        \r\n        if (suffix != null && !byteSuffixes.containsKey(suffix)) {\n          throw new NumberFormatException(\"Invalid suffix: \\\"\" + suffix + \"\\\"\");\n        }\n\n        \r\n        return unit.convertFrom(val, suffix != null ? byteSuffixes.get(suffix) : unit);\n      } else if (fractionMatcher.matches()) {\n        throw new NumberFormatException(\"Fractional values are not supported. Input was: \"\n          + fractionMatcher.group(1));\n      } else {\n        throw new NumberFormatException(\"Failed to parse byte string: \" + str);\n      }\n\n    } catch (NumberFormatException e) {\n      String byteError = \"Size must be specified as bytes (b), \" +\n        \"kibibytes (k), mebibytes (m), gibibytes (g), tebibytes (t), or pebibytes(p). \" +\n        \"E.g. 50b, 100k, or 250m.\";\n\n      throw new NumberFormatException(byteError + \"\\n\" + e.getMessage());\n    }\n  }\n","date":"2017-04-11 03:11:56","endLine":293,"groupId":"1092","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"byteStringAs","params":"(Stringstr@ByteUnitunit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/af/c59efaef810df45d414e6c6ec271f4c1d31db6.src","preCode":"  public static long byteStringAs(String str, ByteUnit unit) {\n    String lower = str.toLowerCase().trim();\n\n    try {\n      Matcher m = Pattern.compile(\"([0-9]+)([a-z]+)?\").matcher(lower);\n      Matcher fractionMatcher = Pattern.compile(\"([0-9]+\\\\.[0-9]+)([a-z]+)?\").matcher(lower);\n\n      if (m.matches()) {\n        long val = Long.parseLong(m.group(1));\n        String suffix = m.group(2);\n\n        \r\n        if (suffix != null && !byteSuffixes.containsKey(suffix)) {\n          throw new NumberFormatException(\"Invalid suffix: \\\"\" + suffix + \"\\\"\");\n        }\n\n        \r\n        return unit.convertFrom(val, suffix != null ? byteSuffixes.get(suffix) : unit);\n      } else if (fractionMatcher.matches()) {\n        throw new NumberFormatException(\"Fractional values are not supported. Input was: \"\n          + fractionMatcher.group(1));\n      } else {\n        throw new NumberFormatException(\"Failed to parse byte string: \" + str);\n      }\n\n    } catch (NumberFormatException e) {\n      String byteError = \"Size must be specified as bytes (b), \" +\n        \"kibibytes (k), mebibytes (m), gibibytes (g), tebibytes (t), or pebibytes(p). \" +\n        \"E.g. 50b, 100k, or 250m.\";\n\n      throw new NumberFormatException(byteError + \"\\n\" + e.getMessage());\n    }\n  }\n","realPath":"common/network-common/src/main/java/org/apache/spark/network/util/JavaUtils.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"a26e3ed5e414d0a350cfe65dd511b154868b9f1d","commitMessage":"@@@[SPARK-20156][CORE][SQL][STREAMING][MLLIB] Java String toLowerCase \"Turkish locale bug\" causes Spark problems\n\n## What changes were proposed in this pull request?\n\nAdd Locale.ROOT to internal calls to String `toLowerCase`.  `toUpperCase`.  to avoid inadvertent locale-sensitive variation in behavior (aka the \"Turkish locale problem\").\n\nThe change looks large but it is just adding `Locale.ROOT` (the locale with no country or language specified) to every call to these methods.\n\n## How was this patch tested?\n\nExisting tests.\n\nAuthor: Sean Owen <sowen@cloudera.com>\n\nCloses #17527 from srowen/SPARK-20156.\n","date":"2017-04-11 03:11:56","modifiedFileCount":"10","status":"M","submitter":"Sean Owen"}]
