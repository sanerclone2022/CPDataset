[{"authorTime":"2014-02-20 15:44:53","codes":[{"authorDate":"2014-02-20 15:44:53","commitOrder":2,"curCode":"  public void runImplicitALSUsingConstructor() {\n    int features = 2;\n    int iterations = 15;\n    int users = 100;\n    int products = 200;\n    scala.Tuple3<List<Rating>, DoubleMatrix, DoubleMatrix> testData = ALSSuite.generateRatingsAsJavaList(\n        users, products, features, 0.7, true, false);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .run(data.rdd());\n    validatePrediction(model, users, products, features, testData._2(), 0.4, true, testData._3());\n  }\n","date":"2014-02-20 15:44:53","endLine":159,"groupId":"1722","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runImplicitALSUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b1/50334deb06cbff9cbd8f780e5dfb7cba309d53.src","preCode":"  public void runImplicitALSUsingConstructor() {\n    int features = 2;\n    int iterations = 15;\n    int users = 100;\n    int products = 200;\n    scala.Tuple3<List<Rating>, DoubleMatrix, DoubleMatrix> testData = ALSSuite.generateRatingsAsJavaList(\n        users, products, features, 0.7, true, false);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .run(data.rdd());\n    validatePrediction(model, users, products, features, testData._2(), 0.4, true, testData._3());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/recommendation/JavaALSSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"MB"},{"authorDate":"2014-02-20 15:44:53","commitOrder":2,"curCode":"  public void runImplicitALSWithNegativeWeight() {\n    int features = 2;\n    int iterations = 15;\n    int users = 80;\n    int products = 160;\n    scala.Tuple3<List<Rating>, DoubleMatrix, DoubleMatrix> testData = ALSSuite.generateRatingsAsJavaList(\n        users, products, features, 0.7, true, true);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n    MatrixFactorizationModel model = ALS.trainImplicit(data.rdd(), features, iterations);\n    validatePrediction(model, users, products, features, testData._2(), 0.4, true, testData._3());\n  }\n","date":"2014-02-20 15:44:53","endLine":173,"groupId":"279","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"runImplicitALSWithNegativeWeight","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b1/50334deb06cbff9cbd8f780e5dfb7cba309d53.src","preCode":"  public void runImplicitALSWithNegativeWeight() {\n    int features = 2;\n    int iterations = 15;\n    int users = 80;\n    int products = 160;\n    scala.Tuple3<List<Rating>, DoubleMatrix, DoubleMatrix> testData = ALSSuite.generateRatingsAsJavaList(\n        users, products, features, 0.7, true, true);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n    MatrixFactorizationModel model = ALS.trainImplicit(data.rdd(), features, iterations);\n    validatePrediction(model, users, products, features, testData._2(), 0.4, true, testData._3());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/recommendation/JavaALSSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"B"}],"commitId":"9e63f80e75bb6d9bbe6df268908c3219de6852d9","commitMessage":"@@@MLLIB-22. Support negative implicit input in ALS\n\nI'm back with another less trivial suggestion for ALS:\n\nIn ALS for implicit feedback.  input values are treated as weights on squared-errors in a loss function (or rather.  the weight is a simple function of the input r.  like c = 1 + alpha*r). The paper on which it's based assumes that the input is positive. Indeed.  if the input is negative.  it will create a negative weight on squared-errors.  which causes things to go haywire. The optimization will try to make the error in a cell as large possible.  and the result is silently bogus.\n\nThere is a good use case for negative input values though. Implicit feedback is usually collected from signals of positive interaction like a view or like or buy.  but equally.  can come from \"not interested\" signals. The natural representation is negative values.\n\nThe algorithm can be extended quite simply to provide a sound interpretation of these values: negative values should encourage the factorization to come up with 0 for cells with large negative input values.  just as much as positive values encourage it to come up with 1.\n\nThe implications for the algorithm are simple:\n* the confidence function value must not be negative.  and so can become 1 + alpha*|r|\n* the matrix P should have a value 1 where the input R is _positive_.  not merely where it is non-zero. Actually.  that's what the paper already says.  it's just that we can't assume P = 1 when a cell in R is specified anymore.  since it may be negative\n\nThis in turn entails just a few lines of code change in `ALS.scala`:\n* `rs(i)` becomes `abs(rs(i))`\n* When constructing `userXy(us(i))`.  it's implicitly only adding where P is 1. That had been true for any us(i) that is iterated over.  before.  since these are exactly the ones for which P is 1. But now P is zero where rs(i) <= 0.  and should not be added\n\nI think it's a safe change because:\n* It doesn't change any existing behavior (unless you're using negative values.  in which case results are already borked)\n* It's the simplest direct extension of the paper's algorithm\n* (I've used it to good effect in production FWIW)\n\nTests included.\n\nI tweaked minor things en route:\n* `ALS.scala` javadoc writes \"R = Xt*Y\" when the paper and rest of code defines it as \"R = X*Yt\"\n* RMSE in the ALS tests uses a confidence-weighted mean.  but the denominator is not actually sum of weights\n\nExcuse my Scala style; I'm sure it needs tweaks.\n\nAuthor: Sean Owen <sowen@cloudera.com>\n\nCloses #500 from srowen/ALSNegativeImplicitInput and squashes the following commits:\n\ncf902a9 [Sean Owen] Support negative implicit input in ALS\n953be1c [Sean Owen] Make weighted RMSE in ALS test actually weighted; adjust comment about R = X*Yt\n","date":"2014-02-20 15:44:53","modifiedFileCount":"1","status":"M","submitter":"Sean Owen"},{"authorTime":"2014-08-01 22:32:53","codes":[{"authorDate":"2014-08-01 22:32:53","commitOrder":3,"curCode":"  public void runImplicitALSUsingConstructor() {\n    int features = 2;\n    int iterations = 15;\n    int users = 100;\n    int products = 200;\n    Tuple3<List<Rating>, DoubleMatrix, DoubleMatrix> testData = ALSSuite.generateRatingsAsJavaList(\n        users, products, features, 0.7, true, false);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .run(data.rdd());\n    validatePrediction(model, users, products, features, testData._2(), 0.4, true, testData._3());\n  }\n","date":"2014-08-01 22:32:53","endLine":169,"groupId":"1722","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runImplicitALSUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/f6/ca9643227f8ea838f9596f82fe1e4e4a58c6a7.src","preCode":"  public void runImplicitALSUsingConstructor() {\n    int features = 2;\n    int iterations = 15;\n    int users = 100;\n    int products = 200;\n    scala.Tuple3<List<Rating>, DoubleMatrix, DoubleMatrix> testData = ALSSuite.generateRatingsAsJavaList(\n        users, products, features, 0.7, true, false);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .run(data.rdd());\n    validatePrediction(model, users, products, features, testData._2(), 0.4, true, testData._3());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/recommendation/JavaALSSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2014-08-01 22:32:53","commitOrder":3,"curCode":"  public void runImplicitALSWithNegativeWeight() {\n    int features = 2;\n    int iterations = 15;\n    int users = 80;\n    int products = 160;\n    Tuple3<List<Rating>, DoubleMatrix, DoubleMatrix> testData = ALSSuite.generateRatingsAsJavaList(\n        users, products, features, 0.7, true, true);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .setSeed(8675309L)\n      .run(data.rdd());\n    validatePrediction(model, users, products, features, testData._2(), 0.4, true, testData._3());\n  }\n","date":"2014-08-01 22:32:53","endLine":187,"groupId":"1722","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"runImplicitALSWithNegativeWeight","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/f6/ca9643227f8ea838f9596f82fe1e4e4a58c6a7.src","preCode":"  public void runImplicitALSWithNegativeWeight() {\n    int features = 2;\n    int iterations = 15;\n    int users = 80;\n    int products = 160;\n    scala.Tuple3<List<Rating>, DoubleMatrix, DoubleMatrix> testData = ALSSuite.generateRatingsAsJavaList(\n        users, products, features, 0.7, true, true);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n    MatrixFactorizationModel model = ALS.trainImplicit(data.rdd(), features, iterations);\n    validatePrediction(model, users, products, features, testData._2(), 0.4, true, testData._3());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/recommendation/JavaALSSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"82d209d43fb543c174e640667de15b00c7fb5d35","commitMessage":"@@@SPARK-2768 [MLLIB] Add product.  user recommend method to MatrixFactorizationModel\n\nRight now.  `MatrixFactorizationModel` can only predict a score for one or more `(user. product)` tuples. As a comment in the file notes.  it would be more useful to expose a recommend method.  that computes top N scoring products for a user (or vice versa ? users for a product).\n\n(This also corrects some long lines in the Java ALS test suite.)\n\nAs you can see.  it's a little messy to access the class from Java. Should there be a Java-friendly wrapper for it? with a pointer about where that should go.  I could add that.\n\nAuthor: Sean Owen <srowen@gmail.com>\n\nCloses #1687 from srowen/SPARK-2768 and squashes the following commits:\n\nb349675 [Sean Owen] Additional review changes\nc9edb04 [Sean Owen] Updates from code review\n7bc35f9 [Sean Owen] Add recommend methods to MatrixFactorizationModel\n","date":"2014-08-01 22:32:53","modifiedFileCount":"1","status":"M","submitter":"Sean Owen"},{"authorTime":"2014-11-14 03:42:27","codes":[{"authorDate":"2014-11-14 03:42:27","commitOrder":4,"curCode":"  public void runImplicitALSUsingConstructor() {\n    int features = 2;\n    int iterations = 15;\n    int users = 100;\n    int products = 200;\n    Tuple3<List<Rating>, DoubleMatrix, DoubleMatrix> testData = ALSSuite.generateRatingsAsJavaList(\n        users, products, features, 0.7, true, false);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .run(data.rdd());\n    validatePrediction(model, users, products, testData._2(), 0.4, true, testData._3());\n  }\n","date":"2014-11-14 03:42:27","endLine":157,"groupId":"1722","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"runImplicitALSUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/af/688c504cf1e352d6b32e8a3e15cadc80dbe17b.src","preCode":"  public void runImplicitALSUsingConstructor() {\n    int features = 2;\n    int iterations = 15;\n    int users = 100;\n    int products = 200;\n    Tuple3<List<Rating>, DoubleMatrix, DoubleMatrix> testData = ALSSuite.generateRatingsAsJavaList(\n        users, products, features, 0.7, true, false);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .run(data.rdd());\n    validatePrediction(model, users, products, features, testData._2(), 0.4, true, testData._3());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/recommendation/JavaALSSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2014-11-14 03:42:27","commitOrder":4,"curCode":"  public void runImplicitALSWithNegativeWeight() {\n    int features = 2;\n    int iterations = 15;\n    int users = 80;\n    int products = 160;\n    Tuple3<List<Rating>, DoubleMatrix, DoubleMatrix> testData = ALSSuite.generateRatingsAsJavaList(\n        users, products, features, 0.7, true, true);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .setSeed(8675309L)\n      .run(data.rdd());\n    validatePrediction(model, users, products, testData._2(), 0.4, true, testData._3());\n  }\n","date":"2014-11-14 03:42:27","endLine":175,"groupId":"1722","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"runImplicitALSWithNegativeWeight","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/af/688c504cf1e352d6b32e8a3e15cadc80dbe17b.src","preCode":"  public void runImplicitALSWithNegativeWeight() {\n    int features = 2;\n    int iterations = 15;\n    int users = 80;\n    int products = 160;\n    Tuple3<List<Rating>, DoubleMatrix, DoubleMatrix> testData = ALSSuite.generateRatingsAsJavaList(\n        users, products, features, 0.7, true, true);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .setSeed(8675309L)\n      .run(data.rdd());\n    validatePrediction(model, users, products, features, testData._2(), 0.4, true, testData._3());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/recommendation/JavaALSSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"ca26a212fda39a15fde09dfdb2fbe69580a717f6","commitMessage":"@@@[SPARK-4378][MLLIB] make ALS more Java-friendly\n\nAdd Java-friendly version of `run` and `predict`.  and use bulk prediction in Java unit tests. The user guide update will come later (though we may not save many lines of code there). srowen\n\nAuthor: Xiangrui Meng <meng@databricks.com>\n\nCloses #3240 from mengxr/SPARK-4378 and squashes the following commits:\n\n6581503 [Xiangrui Meng] check number of predictions\n6c8bbd1 [Xiangrui Meng] make ALS more Java-friendly\n","date":"2014-11-14 03:42:27","modifiedFileCount":"1","status":"M","submitter":"Xiangrui Meng"},{"authorTime":"2016-03-09 01:47:55","codes":[{"authorDate":"2016-03-09 01:47:55","commitOrder":5,"curCode":"  public void runImplicitALSUsingConstructor() {\n    int features = 2;\n    int iterations = 15;\n    int users = 100;\n    int products = 200;\n    Tuple3<List<Rating>, double[], double[]> testData =\n        ALSSuite.generateRatingsAsJava(users, products, features, 0.7, true, false);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .run(data.rdd());\n    validatePrediction(model, users, products, testData._2(), 0.4, true, testData._3());\n  }\n","date":"2016-03-09 01:47:55","endLine":155,"groupId":"1722","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"runImplicitALSUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/d0/bf7f556dcc0b6ad41e74692f32114c7655eedc.src","preCode":"  public void runImplicitALSUsingConstructor() {\n    int features = 2;\n    int iterations = 15;\n    int users = 100;\n    int products = 200;\n    Tuple3<List<Rating>, DoubleMatrix, DoubleMatrix> testData = ALSSuite.generateRatingsAsJavaList(\n        users, products, features, 0.7, true, false);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .run(data.rdd());\n    validatePrediction(model, users, products, testData._2(), 0.4, true, testData._3());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/recommendation/JavaALSSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2016-03-09 01:47:55","commitOrder":5,"curCode":"  public void runImplicitALSWithNegativeWeight() {\n    int features = 2;\n    int iterations = 15;\n    int users = 80;\n    int products = 160;\n    Tuple3<List<Rating>, double[], double[]> testData =\n        ALSSuite.generateRatingsAsJava(users, products, features, 0.7, true, true);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .setSeed(8675309L)\n      .run(data.rdd());\n    validatePrediction(model, users, products, testData._2(), 0.4, true, testData._3());\n  }\n","date":"2016-03-09 01:47:55","endLine":173,"groupId":"1722","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"runImplicitALSWithNegativeWeight","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/d0/bf7f556dcc0b6ad41e74692f32114c7655eedc.src","preCode":"  public void runImplicitALSWithNegativeWeight() {\n    int features = 2;\n    int iterations = 15;\n    int users = 80;\n    int products = 160;\n    Tuple3<List<Rating>, DoubleMatrix, DoubleMatrix> testData = ALSSuite.generateRatingsAsJavaList(\n        users, products, features, 0.7, true, true);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .setSeed(8675309L)\n      .run(data.rdd());\n    validatePrediction(model, users, products, testData._2(), 0.4, true, testData._3());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/recommendation/JavaALSSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"54040f8d350d2aad3078dcffef808c62b7c0b73d","commitMessage":"@@@[SPARK-13715][MLLIB] Remove last usages of jblas in tests\n\n## What changes were proposed in this pull request?\n\nRemove last usage of jblas.  in tests\n\n## How was this patch tested?\n\nJenkins tests -- the same ones that are being modified.\n\nAuthor: Sean Owen <sowen@cloudera.com>\n\nCloses #11560 from srowen/SPARK-13715.\n","date":"2016-03-09 01:47:55","modifiedFileCount":"2","status":"M","submitter":"Sean Owen"},{"authorTime":"2016-05-11 02:17:47","codes":[{"authorDate":"2016-05-11 02:17:47","commitOrder":6,"curCode":"  public void runImplicitALSUsingConstructor() {\n    int features = 2;\n    int iterations = 15;\n    int users = 100;\n    int products = 200;\n    Tuple3<List<Rating>, double[], double[]> testData =\n      ALSSuite.generateRatingsAsJava(users, products, features, 0.7, true, false);\n\n    JavaRDD<Rating> data = jsc.parallelize(testData._1());\n\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .run(data.rdd());\n    validatePrediction(model, users, products, testData._2(), 0.4, true, testData._3());\n  }\n","date":"2016-05-11 02:17:47","endLine":161,"groupId":"10469","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"runImplicitALSUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/aa/784054d551eb33b83ff38f668d9a7cbe06a3fe.src","preCode":"  public void runImplicitALSUsingConstructor() {\n    int features = 2;\n    int iterations = 15;\n    int users = 100;\n    int products = 200;\n    Tuple3<List<Rating>, double[], double[]> testData =\n        ALSSuite.generateRatingsAsJava(users, products, features, 0.7, true, false);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .run(data.rdd());\n    validatePrediction(model, users, products, testData._2(), 0.4, true, testData._3());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/recommendation/JavaALSSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2016-05-11 02:17:47","commitOrder":6,"curCode":"  public void runImplicitALSWithNegativeWeight() {\n    int features = 2;\n    int iterations = 15;\n    int users = 80;\n    int products = 160;\n    Tuple3<List<Rating>, double[], double[]> testData =\n      ALSSuite.generateRatingsAsJava(users, products, features, 0.7, true, true);\n\n    JavaRDD<Rating> data = jsc.parallelize(testData._1());\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .setSeed(8675309L)\n      .run(data.rdd());\n    validatePrediction(model, users, products, testData._2(), 0.4, true, testData._3());\n  }\n","date":"2016-05-11 02:17:47","endLine":179,"groupId":"10469","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"runImplicitALSWithNegativeWeight","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/aa/784054d551eb33b83ff38f668d9a7cbe06a3fe.src","preCode":"  public void runImplicitALSWithNegativeWeight() {\n    int features = 2;\n    int iterations = 15;\n    int users = 80;\n    int products = 160;\n    Tuple3<List<Rating>, double[], double[]> testData =\n        ALSSuite.generateRatingsAsJava(users, products, features, 0.7, true, true);\n\n    JavaRDD<Rating> data = sc.parallelize(testData._1());\n    MatrixFactorizationModel model = new ALS().setRank(features)\n      .setIterations(iterations)\n      .setImplicitPrefs(true)\n      .setSeed(8675309L)\n      .run(data.rdd());\n    validatePrediction(model, users, products, testData._2(), 0.4, true, testData._3());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/recommendation/JavaALSSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"ed0b4070fb50054b1ecf66ff6c32458a4967dfd3","commitMessage":"@@@[SPARK-15037][SQL][MLLIB] Use SparkSession instead of SQLContext in Scala/Java TestSuites\n\n## What changes were proposed in this pull request?\nUse SparkSession instead of SQLContext in Scala/Java TestSuites\nas this PR already very big working Python TestSuites in a diff PR.\n\n## How was this patch tested?\nExisting tests\n\nAuthor: Sandeep Singh <sandeep@techaddict.me>\n\nCloses #12907 from techaddict/SPARK-15037.\n","date":"2016-05-11 02:17:47","modifiedFileCount":"63","status":"M","submitter":"Sandeep Singh"}]
