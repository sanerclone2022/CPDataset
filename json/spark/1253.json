[{"authorTime":"2016-02-29 09:25:07","codes":[{"authorDate":"2016-09-03 01:42:13","commitOrder":2,"curCode":"    public boolean equals(Object o) {\n      if (this == o) return true;\n      if (o == null || getClass() != o.getClass()) return false;\n\n      AppId appExecId = (AppId) o;\n      return Objects.equal(appId, appExecId.appId);\n    }\n","date":"2016-09-03 01:42:13","endLine":382,"groupId":"1006","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/df/082e4a927470931ec43ef933edb6537c1ce142.src","preCode":"    public boolean equals(Object o) {\n      if (this == o) return true;\n      if (o == null || getClass() != o.getClass()) return false;\n\n      AppId appExecId = (AppId) o;\n      return Objects.equal(appId, appExecId.appId);\n    }\n","realPath":"common/network-yarn/src/main/java/org/apache/spark/network/yarn/YarnShuffleService.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"B"},{"authorDate":"2016-02-29 09:25:07","commitOrder":2,"curCode":"    public boolean equals(Object o) {\n      if (this == o) return true;\n      if (o == null || getClass() != o.getClass()) return false;\n\n      AppExecId appExecId = (AppExecId) o;\n      return Objects.equal(appId, appExecId.appId) && Objects.equal(execId, appExecId.execId);\n    }\n","date":"2016-02-29 09:25:07","endLine":333,"groupId":"1006","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/fe/933ed650caf1ee38a84af9e02a7893ea5135ef.src","preCode":"    public boolean equals(Object o) {\n      if (this == o) return true;\n      if (o == null || getClass() != o.getClass()) return false;\n\n      AppExecId appExecId = (AppExecId) o;\n      return Objects.equal(appId, appExecId.appId) && Objects.equal(execId, appExecId.execId);\n    }\n","realPath":"common/network-shuffle/src/main/java/org/apache/spark/network/shuffle/ExternalShuffleBlockResolver.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"NB"}],"commitId":"e79962f2f3955485aecf32939207d8ee6ccd2704","commitMessage":"@@@[SPARK-16711] YarnShuffleService doesn't re-init properly on YARN rolling upgrade\n\nThe Spark Yarn Shuffle Service doesn't re-initialize the application credentials early enough which causes any other spark executors trying to fetch from that node during a rolling upgrade to fail with \"java.lang.NullPointerException: Password cannot be null if SASL is enabled\".  Right now the spark shuffle service relies on the Yarn nodemanager to re-register the applications.  unfortunately this is after we open the port for other executors to connect. If other executors connected before the re-register they get a null pointer exception which isn't a re-tryable exception and cause them to fail pretty quickly. To solve this I added another leveldb file so that it can save and re-initialize all the applications before opening the port for other executors to connect to it.  Adding another leveldb was simpler from the code structure point of view.\n\nMost of the code changes are moving things to common util class.\n\nPatch was tested manually on a Yarn cluster with rolling upgrade was happing while spark job was running. Without the patch I consistently get the NullPointerException.  with the patch the job gets a few Connection refused exceptions but the retries kick in and the it succeeds.\n\nAuthor: Thomas Graves <tgraves@staydecay.corp.gq1.yahoo.com>\n\nCloses #14718 from tgravescs/SPARK-16711.\n","date":"2016-09-03 01:42:13","modifiedFileCount":"2","status":"M","submitter":"Thomas Graves"},{"authorTime":"2019-12-20 22:55:04","codes":[{"authorDate":"2019-12-20 22:55:04","commitOrder":3,"curCode":"    public boolean equals(Object o) {\n      if (this == o) return true;\n      if (o == null || getClass() != o.getClass()) return false;\n\n      AppId appExecId = (AppId) o;\n      return Objects.equals(appId, appExecId.appId);\n    }\n","date":"2019-12-20 22:55:04","endLine":423,"groupId":"1253","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/81/5a56d765b6a9019bbae5634714742767c096c2.src","preCode":"    public boolean equals(Object o) {\n      if (this == o) return true;\n      if (o == null || getClass() != o.getClass()) return false;\n\n      AppId appExecId = (AppId) o;\n      return Objects.equal(appId, appExecId.appId);\n    }\n","realPath":"common/network-yarn/src/main/java/org/apache/spark/network/yarn/YarnShuffleService.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"M"},{"authorDate":"2019-12-20 22:55:04","commitOrder":3,"curCode":"    public boolean equals(Object o) {\n      if (this == o) return true;\n      if (o == null || getClass() != o.getClass()) return false;\n\n      AppExecId appExecId = (AppExecId) o;\n      return Objects.equals(appId, appExecId.appId) && Objects.equals(execId, appExecId.execId);\n    }\n","date":"2019-12-20 22:55:04","endLine":406,"groupId":"1253","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/ba/1a17bf7e5ea77b01fff23d8fa4b4a85f2ee0e7.src","preCode":"    public boolean equals(Object o) {\n      if (this == o) return true;\n      if (o == null || getClass() != o.getClass()) return false;\n\n      AppExecId appExecId = (AppExecId) o;\n      return Objects.equal(appId, appExecId.appId) && Objects.equal(execId, appExecId.execId);\n    }\n","realPath":"common/network-shuffle/src/main/java/org/apache/spark/network/shuffle/ExternalShuffleBlockResolver.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"}],"commitId":"7dff3b125de23a4d6ce834217ee08973b259414c","commitMessage":"@@@[SPARK-30272][SQL][CORE] Remove usage of Guava that breaks in 27; replace with workalikes\n\n\n What changes were proposed in this pull request?\n\nRemove usages of Guava that no longer work in Guava 27.  and replace with workalikes. I'll comment on key types of changes below.\n\n\n Why are the changes needed?\n\nHadoop 3.2.1 uses Guava 27.  so this helps us avoid problems running on Hadoop 3.2.1+ and generally lowers our exposure to Guava.\n\n\n Does this PR introduce any user-facing change?\n\nShould not be.  but see notes below on hash codes and toString.\n\n\n How was this patch tested?\n\nExisting tests will verify whether these changes break anything for Guava 14.\nI manually built with an updated version and it compiles with Guava 27; tests running manually locally now.\n\nCloses #26911 from srowen/SPARK-30272.\n\nAuthored-by: Sean Owen <srowen@gmail.com>\nSigned-off-by: Sean Owen <srowen@gmail.com>\n","date":"2019-12-20 22:55:04","modifiedFileCount":"34","status":"M","submitter":"Sean Owen"}]
