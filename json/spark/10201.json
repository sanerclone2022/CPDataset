[{"authorTime":"2017-02-16 20:32:45","codes":[{"authorDate":"2017-02-16 20:32:45","commitOrder":1,"curCode":"  public void testPairFilter() {\n    List<List<String>> inputData = Arrays.asList(\n        Arrays.asList(\"giants\", \"dodgers\"),\n        Arrays.asList(\"yankees\", \"red sox\"));\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"giants\", 6)),\n        Arrays.asList(new Tuple2<>(\"yankees\", 7)));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream = stream.mapToPair(\n        new PairFunction<String, String, Integer>() {\n          @Override\n          public Tuple2<String, Integer> call(String in) {\n            return new Tuple2<>(in, in.length());\n          }\n        });\n\n    JavaPairDStream<String, Integer> filtered = pairStream.filter(\n        new Function<Tuple2<String, Integer>, Boolean>() {\n      @Override\n      public Boolean call(Tuple2<String, Integer> in) {\n        return in._1().contains(\"a\");\n      }\n    });\n    JavaTestUtils.attachTestOutputStream(filtered);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n\n    Assert.assertEquals(expected, result);\n  }\n","date":"2017-02-16 20:32:45","endLine":971,"groupId":"345","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPairFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/8d/24104d7870bd3178e7bd3b9a61a2725615e7be.src","preCode":"  public void testPairFilter() {\n    List<List<String>> inputData = Arrays.asList(\n        Arrays.asList(\"giants\", \"dodgers\"),\n        Arrays.asList(\"yankees\", \"red sox\"));\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"giants\", 6)),\n        Arrays.asList(new Tuple2<>(\"yankees\", 7)));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream = stream.mapToPair(\n        new PairFunction<String, String, Integer>() {\n          @Override\n          public Tuple2<String, Integer> call(String in) {\n            return new Tuple2<>(in, in.length());\n          }\n        });\n\n    JavaPairDStream<String, Integer> filtered = pairStream.filter(\n        new Function<Tuple2<String, Integer>, Boolean>() {\n      @Override\n      public Boolean call(Tuple2<String, Integer> in) {\n        return in._1().contains(\"a\");\n      }\n    });\n    JavaTestUtils.attachTestOutputStream(filtered);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":942,"status":"B"},{"authorDate":"2017-02-16 20:32:45","commitOrder":1,"curCode":"  public void testPairFilter() {\n    List<List<String>> inputData = Arrays.asList(\n      Arrays.asList(\"giants\", \"dodgers\"),\n      Arrays.asList(\"yankees\", \"red sox\"));\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n      Arrays.asList(new Tuple2<>(\"giants\", 6)),\n      Arrays.asList(new Tuple2<>(\"yankees\", 7)));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream =\n      stream.mapToPair(x -> new Tuple2<>(x, x.length()));\n    JavaPairDStream<String, Integer> filtered = pairStream.filter(x -> x._1().contains(\"a\"));\n    JavaTestUtils.attachTestOutputStream(filtered);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n\n    Assert.assertEquals(expected, result);\n  }\n","date":"2017-02-16 20:32:45","endLine":451,"groupId":"345","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPairFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/64/6cb97066f3501e7d1f5c159c770ea4d0dd2fca.src","preCode":"  public void testPairFilter() {\n    List<List<String>> inputData = Arrays.asList(\n      Arrays.asList(\"giants\", \"dodgers\"),\n      Arrays.asList(\"yankees\", \"red sox\"));\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n      Arrays.asList(new Tuple2<>(\"giants\", 6)),\n      Arrays.asList(new Tuple2<>(\"yankees\", 7)));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream =\n      stream.mapToPair(x -> new Tuple2<>(x, x.length()));\n    JavaPairDStream<String, Integer> filtered = pairStream.filter(x -> x._1().contains(\"a\"));\n    JavaTestUtils.attachTestOutputStream(filtered);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/Java8APISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"B"}],"commitId":"0e2405490f2056728d1353abbac6f3ea177ae533","commitMessage":"@@@[SPARK-19550][BUILD][CORE][WIP] Remove Java 7 support\n\n- Move external/java8-tests tests into core.  streaming.  sql and remove\n- Remove MaxPermGen and related options\n- Fix some reflection / TODOs around Java 8+ methods\n- Update doc references to 1.7/1.8 differences\n- Remove Java 7/8 related build profiles\n- Update some plugins for better Java 8 compatibility\n- Fix a few Java-related warnings\n\nFor the future:\n\n- Update Java 8 examples to fully use Java 8\n- Update Java tests to use lambdas for simplicity\n- Update Java internal implementations to use lambdas\n\n## How was this patch tested?\n\nExisting tests\n\nAuthor: Sean Owen <sowen@cloudera.com>\n\nCloses #16871 from srowen/SPARK-19493.\n","date":"2017-02-16 20:32:45","modifiedFileCount":"51","status":"B","submitter":"Sean Owen"},{"authorTime":"2017-02-16 20:32:45","codes":[{"authorDate":"2017-02-20 01:42:50","commitOrder":2,"curCode":"  public void testPairFilter() {\n    List<List<String>> inputData = Arrays.asList(\n        Arrays.asList(\"giants\", \"dodgers\"),\n        Arrays.asList(\"yankees\", \"red sox\"));\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"giants\", 6)),\n        Arrays.asList(new Tuple2<>(\"yankees\", 7)));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream =\n        stream.mapToPair(in -> new Tuple2<>(in, in.length()));\n\n    JavaPairDStream<String, Integer> filtered = pairStream.filter(in -> in._1().contains(\"a\"));\n    JavaTestUtils.attachTestOutputStream(filtered);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n\n    Assert.assertEquals(expected, result);\n  }\n","date":"2017-02-20 01:42:50","endLine":760,"groupId":"10201","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPairFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b9/66cbdca076d7ade49beefe4e328d93dd52e6c4.src","preCode":"  public void testPairFilter() {\n    List<List<String>> inputData = Arrays.asList(\n        Arrays.asList(\"giants\", \"dodgers\"),\n        Arrays.asList(\"yankees\", \"red sox\"));\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"giants\", 6)),\n        Arrays.asList(new Tuple2<>(\"yankees\", 7)));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream = stream.mapToPair(\n        new PairFunction<String, String, Integer>() {\n          @Override\n          public Tuple2<String, Integer> call(String in) {\n            return new Tuple2<>(in, in.length());\n          }\n        });\n\n    JavaPairDStream<String, Integer> filtered = pairStream.filter(\n        new Function<Tuple2<String, Integer>, Boolean>() {\n      @Override\n      public Boolean call(Tuple2<String, Integer> in) {\n        return in._1().contains(\"a\");\n      }\n    });\n    JavaTestUtils.attachTestOutputStream(filtered);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":742,"status":"M"},{"authorDate":"2017-02-16 20:32:45","commitOrder":2,"curCode":"  public void testPairFilter() {\n    List<List<String>> inputData = Arrays.asList(\n      Arrays.asList(\"giants\", \"dodgers\"),\n      Arrays.asList(\"yankees\", \"red sox\"));\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n      Arrays.asList(new Tuple2<>(\"giants\", 6)),\n      Arrays.asList(new Tuple2<>(\"yankees\", 7)));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream =\n      stream.mapToPair(x -> new Tuple2<>(x, x.length()));\n    JavaPairDStream<String, Integer> filtered = pairStream.filter(x -> x._1().contains(\"a\"));\n    JavaTestUtils.attachTestOutputStream(filtered);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n\n    Assert.assertEquals(expected, result);\n  }\n","date":"2017-02-16 20:32:45","endLine":451,"groupId":"10201","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPairFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/64/6cb97066f3501e7d1f5c159c770ea4d0dd2fca.src","preCode":"  public void testPairFilter() {\n    List<List<String>> inputData = Arrays.asList(\n      Arrays.asList(\"giants\", \"dodgers\"),\n      Arrays.asList(\"yankees\", \"red sox\"));\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n      Arrays.asList(new Tuple2<>(\"giants\", 6)),\n      Arrays.asList(new Tuple2<>(\"yankees\", 7)));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream =\n      stream.mapToPair(x -> new Tuple2<>(x, x.length()));\n    JavaPairDStream<String, Integer> filtered = pairStream.filter(x -> x._1().contains(\"a\"));\n    JavaTestUtils.attachTestOutputStream(filtered);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/Java8APISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"N"}],"commitId":"1487c9af20a333ead55955acf4c0aa323bea0d07","commitMessage":"@@@[SPARK-19534][TESTS] Convert Java tests to use lambdas.  Java 8 features\n\n## What changes were proposed in this pull request?\n\nConvert tests to use Java 8 lambdas.  and modest related fixes to surrounding code.\n\n## How was this patch tested?\n\nJenkins tests\n\nAuthor: Sean Owen <sowen@cloudera.com>\n\nCloses #16964 from srowen/SPARK-19534.\n","date":"2017-02-20 01:42:50","modifiedFileCount":"45","status":"M","submitter":"Sean Owen"}]
