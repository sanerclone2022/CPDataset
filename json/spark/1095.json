[{"authorTime":"2016-02-29 09:25:07","codes":[{"authorDate":"2016-02-29 09:25:07","commitOrder":1,"curCode":"    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n\n      for (Callback callback : callbacks) {\n        if (callback instanceof NameCallback) {\n          logger.trace(\"SASL client callback: setting username\");\n          NameCallback nc = (NameCallback) callback;\n          nc.setName(encodeIdentifier(secretKeyHolder.getSaslUser(secretKeyId)));\n        } else if (callback instanceof PasswordCallback) {\n          logger.trace(\"SASL client callback: setting password\");\n          PasswordCallback pc = (PasswordCallback) callback;\n          pc.setPassword(encodePassword(secretKeyHolder.getSecretKey(secretKeyId)));\n        } else if (callback instanceof RealmCallback) {\n          logger.trace(\"SASL client callback: setting realm\");\n          RealmCallback rc = (RealmCallback) callback;\n          rc.setText(rc.getDefaultText());\n        } else if (callback instanceof RealmChoiceCallback) {\n          \r\n        } else {\n          throw new UnsupportedCallbackException(callback, \"Unrecognized SASL DIGEST-MD5 Callback\");\n        }\n      }\n    }\n","date":"2016-02-29 09:25:07","endLine":149,"groupId":"82","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"handle","params":"(Callback[]callbacks)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/94/685e91b862e3b3618c09e543968d35cb3c4454.src","preCode":"    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n\n      for (Callback callback : callbacks) {\n        if (callback instanceof NameCallback) {\n          logger.trace(\"SASL client callback: setting username\");\n          NameCallback nc = (NameCallback) callback;\n          nc.setName(encodeIdentifier(secretKeyHolder.getSaslUser(secretKeyId)));\n        } else if (callback instanceof PasswordCallback) {\n          logger.trace(\"SASL client callback: setting password\");\n          PasswordCallback pc = (PasswordCallback) callback;\n          pc.setPassword(encodePassword(secretKeyHolder.getSecretKey(secretKeyId)));\n        } else if (callback instanceof RealmCallback) {\n          logger.trace(\"SASL client callback: setting realm\");\n          RealmCallback rc = (RealmCallback) callback;\n          rc.setText(rc.getDefaultText());\n        } else if (callback instanceof RealmChoiceCallback) {\n          \r\n        } else {\n          throw new UnsupportedCallbackException(callback, \"Unrecognized SASL DIGEST-MD5 Callback\");\n        }\n      }\n    }\n","realPath":"common/network-common/src/main/java/org/apache/spark/network/sasl/SparkSaslClient.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"},{"authorDate":"2016-02-29 09:25:07","commitOrder":1,"curCode":"    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n      for (Callback callback : callbacks) {\n        if (callback instanceof NameCallback) {\n          logger.trace(\"SASL server callback: setting username\");\n          NameCallback nc = (NameCallback) callback;\n          nc.setName(encodeIdentifier(secretKeyHolder.getSaslUser(secretKeyId)));\n        } else if (callback instanceof PasswordCallback) {\n          logger.trace(\"SASL server callback: setting password\");\n          PasswordCallback pc = (PasswordCallback) callback;\n          pc.setPassword(encodePassword(secretKeyHolder.getSecretKey(secretKeyId)));\n        } else if (callback instanceof RealmCallback) {\n          logger.trace(\"SASL server callback: setting realm\");\n          RealmCallback rc = (RealmCallback) callback;\n          rc.setText(rc.getDefaultText());\n        } else if (callback instanceof AuthorizeCallback) {\n          AuthorizeCallback ac = (AuthorizeCallback) callback;\n          String authId = ac.getAuthenticationID();\n          String authzId = ac.getAuthorizationID();\n          ac.setAuthorized(authId.equals(authzId));\n          if (ac.isAuthorized()) {\n            ac.setAuthorizedID(authzId);\n          }\n          logger.debug(\"SASL Authorization complete, authorized set to {}\", ac.isAuthorized());\n        } else {\n          throw new UnsupportedCallbackException(callback, \"Unrecognized SASL DIGEST-MD5 Callback\");\n        }\n      }\n    }\n","date":"2016-02-29 09:25:07","endLine":184,"groupId":"82","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"handle","params":"(Callback[]callbacks)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/43/1cb67a2ae0bbc7208ff03209511e0c48fe69a6.src","preCode":"    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n      for (Callback callback : callbacks) {\n        if (callback instanceof NameCallback) {\n          logger.trace(\"SASL server callback: setting username\");\n          NameCallback nc = (NameCallback) callback;\n          nc.setName(encodeIdentifier(secretKeyHolder.getSaslUser(secretKeyId)));\n        } else if (callback instanceof PasswordCallback) {\n          logger.trace(\"SASL server callback: setting password\");\n          PasswordCallback pc = (PasswordCallback) callback;\n          pc.setPassword(encodePassword(secretKeyHolder.getSecretKey(secretKeyId)));\n        } else if (callback instanceof RealmCallback) {\n          logger.trace(\"SASL server callback: setting realm\");\n          RealmCallback rc = (RealmCallback) callback;\n          rc.setText(rc.getDefaultText());\n        } else if (callback instanceof AuthorizeCallback) {\n          AuthorizeCallback ac = (AuthorizeCallback) callback;\n          String authId = ac.getAuthenticationID();\n          String authzId = ac.getAuthorizationID();\n          ac.setAuthorized(authId.equals(authzId));\n          if (ac.isAuthorized()) {\n            ac.setAuthorizedID(authzId);\n          }\n          logger.debug(\"SASL Authorization complete, authorized set to {}\", ac.isAuthorized());\n        } else {\n          throw new UnsupportedCallbackException(callback, \"Unrecognized SASL DIGEST-MD5 Callback\");\n        }\n      }\n    }\n","realPath":"common/network-common/src/main/java/org/apache/spark/network/sasl/SparkSaslServer.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"B"}],"commitId":"9e01dcc6446f8648e61062f8afe62589b9d4b5ab","commitMessage":"@@@[SPARK-13529][BUILD] Move network/* modules into common/network-*\n\n## What changes were proposed in this pull request?\nAs the title says.  this moves the three modules currently in network/ into common/network-*. This removes one top level.  non-user-facing folder.\n\n## How was this patch tested?\nCompilation and existing tests. We should run both SBT and Maven.\n\nAuthor: Reynold Xin <rxin@databricks.com>\n\nCloses #11409 from rxin/SPARK-13529.\n","date":"2016-02-29 09:25:07","modifiedFileCount":"1","status":"B","submitter":"Reynold Xin"},{"authorTime":"2017-09-13 21:04:26","codes":[{"authorDate":"2017-09-13 21:04:26","commitOrder":2,"curCode":"    public void handle(Callback[] callbacks) throws UnsupportedCallbackException {\n\n      for (Callback callback : callbacks) {\n        if (callback instanceof NameCallback) {\n          logger.trace(\"SASL client callback: setting username\");\n          NameCallback nc = (NameCallback) callback;\n          nc.setName(encodeIdentifier(secretKeyHolder.getSaslUser(secretKeyId)));\n        } else if (callback instanceof PasswordCallback) {\n          logger.trace(\"SASL client callback: setting password\");\n          PasswordCallback pc = (PasswordCallback) callback;\n          pc.setPassword(encodePassword(secretKeyHolder.getSecretKey(secretKeyId)));\n        } else if (callback instanceof RealmCallback) {\n          logger.trace(\"SASL client callback: setting realm\");\n          RealmCallback rc = (RealmCallback) callback;\n          rc.setText(rc.getDefaultText());\n        } else if (callback instanceof RealmChoiceCallback) {\n          \r\n        } else {\n          throw new UnsupportedCallbackException(callback, \"Unrecognized SASL DIGEST-MD5 Callback\");\n        }\n      }\n    }\n","date":"2017-09-13 21:04:26","endLine":148,"groupId":"1095","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"handle","params":"(Callback[]callbacks)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/05/a5afe195e8cc0aa96201e2f2754c38b5820ca6.src","preCode":"    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n\n      for (Callback callback : callbacks) {\n        if (callback instanceof NameCallback) {\n          logger.trace(\"SASL client callback: setting username\");\n          NameCallback nc = (NameCallback) callback;\n          nc.setName(encodeIdentifier(secretKeyHolder.getSaslUser(secretKeyId)));\n        } else if (callback instanceof PasswordCallback) {\n          logger.trace(\"SASL client callback: setting password\");\n          PasswordCallback pc = (PasswordCallback) callback;\n          pc.setPassword(encodePassword(secretKeyHolder.getSecretKey(secretKeyId)));\n        } else if (callback instanceof RealmCallback) {\n          logger.trace(\"SASL client callback: setting realm\");\n          RealmCallback rc = (RealmCallback) callback;\n          rc.setText(rc.getDefaultText());\n        } else if (callback instanceof RealmChoiceCallback) {\n          \r\n        } else {\n          throw new UnsupportedCallbackException(callback, \"Unrecognized SASL DIGEST-MD5 Callback\");\n        }\n      }\n    }\n","realPath":"common/network-common/src/main/java/org/apache/spark/network/sasl/SparkSaslClient.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2017-09-13 21:04:26","commitOrder":2,"curCode":"    public void handle(Callback[] callbacks) throws UnsupportedCallbackException {\n      for (Callback callback : callbacks) {\n        if (callback instanceof NameCallback) {\n          logger.trace(\"SASL server callback: setting username\");\n          NameCallback nc = (NameCallback) callback;\n          nc.setName(encodeIdentifier(secretKeyHolder.getSaslUser(secretKeyId)));\n        } else if (callback instanceof PasswordCallback) {\n          logger.trace(\"SASL server callback: setting password\");\n          PasswordCallback pc = (PasswordCallback) callback;\n          pc.setPassword(encodePassword(secretKeyHolder.getSecretKey(secretKeyId)));\n        } else if (callback instanceof RealmCallback) {\n          logger.trace(\"SASL server callback: setting realm\");\n          RealmCallback rc = (RealmCallback) callback;\n          rc.setText(rc.getDefaultText());\n        } else if (callback instanceof AuthorizeCallback) {\n          AuthorizeCallback ac = (AuthorizeCallback) callback;\n          String authId = ac.getAuthenticationID();\n          String authzId = ac.getAuthorizationID();\n          ac.setAuthorized(authId.equals(authzId));\n          if (ac.isAuthorized()) {\n            ac.setAuthorizedID(authzId);\n          }\n          logger.debug(\"SASL Authorization complete, authorized set to {}\", ac.isAuthorized());\n        } else {\n          throw new UnsupportedCallbackException(callback, \"Unrecognized SASL DIGEST-MD5 Callback\");\n        }\n      }\n    }\n","date":"2017-09-13 21:04:26","endLine":184,"groupId":"1095","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"handle","params":"(Callback[]callbacks)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/e2/2e09d2a22e649b2bafbbc8c7859d926d0f47d6.src","preCode":"    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n      for (Callback callback : callbacks) {\n        if (callback instanceof NameCallback) {\n          logger.trace(\"SASL server callback: setting username\");\n          NameCallback nc = (NameCallback) callback;\n          nc.setName(encodeIdentifier(secretKeyHolder.getSaslUser(secretKeyId)));\n        } else if (callback instanceof PasswordCallback) {\n          logger.trace(\"SASL server callback: setting password\");\n          PasswordCallback pc = (PasswordCallback) callback;\n          pc.setPassword(encodePassword(secretKeyHolder.getSecretKey(secretKeyId)));\n        } else if (callback instanceof RealmCallback) {\n          logger.trace(\"SASL server callback: setting realm\");\n          RealmCallback rc = (RealmCallback) callback;\n          rc.setText(rc.getDefaultText());\n        } else if (callback instanceof AuthorizeCallback) {\n          AuthorizeCallback ac = (AuthorizeCallback) callback;\n          String authId = ac.getAuthenticationID();\n          String authzId = ac.getAuthorizationID();\n          ac.setAuthorized(authId.equals(authzId));\n          if (ac.isAuthorized()) {\n            ac.setAuthorizedID(authzId);\n          }\n          logger.debug(\"SASL Authorization complete, authorized set to {}\", ac.isAuthorized());\n        } else {\n          throw new UnsupportedCallbackException(callback, \"Unrecognized SASL DIGEST-MD5 Callback\");\n        }\n      }\n    }\n","realPath":"common/network-common/src/main/java/org/apache/spark/network/sasl/SparkSaslServer.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"b6ef1f57bc06a0b213b0367229a09b5094267d80","commitMessage":"@@@[SPARK-21970][CORE] Fix Redundant Throws Declarations in Java Codebase\n\n## What changes were proposed in this pull request?\n\n1. Removing all redundant throws declarations from Java codebase.\n2. Removing dead code made visible by this from `ShuffleExternalSorter#closeAndGetSpills`\n\n## How was this patch tested?\n\nBuild still passes.\n\nAuthor: Armin <me@obrown.io>\n\nCloses #19182 from original-brownbear/SPARK-21970.\n","date":"2017-09-13 21:04:26","modifiedFileCount":"15","status":"M","submitter":"Armin"}]
