[{"authorTime":"2013-09-02 05:57:27","codes":[{"authorDate":"2013-09-02 05:57:27","commitOrder":1,"curCode":"  public void runRidgeRegressionUsingConstructor() {\n    int nexamples = 200;\n    int nfeatures = 20;\n    double eps = 10.0;\n    List<LabeledPoint> data = generateRidgeData(2*nexamples, nfeatures, eps);\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(data.subList(0, nexamples));\n    List<LabeledPoint> validationData = data.subList(nexamples, 2*nexamples);\n\n    RidgeRegressionWithSGD ridgeSGDImpl = new RidgeRegressionWithSGD();\n    ridgeSGDImpl.optimizer().setStepSize(1.0)\n                            .setRegParam(0.0)\n                            .setNumIterations(200);\n    RidgeRegressionModel model = ridgeSGDImpl.run(testRDD.rdd());\n    double unRegularizedErr = predictionError(validationData, model);\n\n    ridgeSGDImpl.optimizer().setRegParam(0.1);\n    model = ridgeSGDImpl.run(testRDD.rdd());\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","date":"2013-09-02 05:57:27","endLine":90,"groupId":"736","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runRidgeRegressionUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/2f/dd5fc8fdca6371b0a85351451a306bbd2fc459.src","preCode":"  public void runRidgeRegressionUsingConstructor() {\n    int nexamples = 200;\n    int nfeatures = 20;\n    double eps = 10.0;\n    List<LabeledPoint> data = generateRidgeData(2*nexamples, nfeatures, eps);\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(data.subList(0, nexamples));\n    List<LabeledPoint> validationData = data.subList(nexamples, 2*nexamples);\n\n    RidgeRegressionWithSGD ridgeSGDImpl = new RidgeRegressionWithSGD();\n    ridgeSGDImpl.optimizer().setStepSize(1.0)\n                            .setRegParam(0.0)\n                            .setNumIterations(200);\n    RidgeRegressionModel model = ridgeSGDImpl.run(testRDD.rdd());\n    double unRegularizedErr = predictionError(validationData, model);\n\n    ridgeSGDImpl.optimizer().setRegParam(0.1);\n    model = ridgeSGDImpl.run(testRDD.rdd());\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaRidgeRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"},{"authorDate":"2013-09-02 05:57:27","commitOrder":1,"curCode":"  public void runRidgeRegressionUsingStaticMethods() {\n    int nexamples = 200;\n    int nfeatures = 20;\n    double eps = 10.0;\n    List<LabeledPoint> data = generateRidgeData(2*nexamples, nfeatures, eps);\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(data.subList(0, nexamples));\n    List<LabeledPoint> validationData = data.subList(nexamples, 2*nexamples);\n\n    RidgeRegressionModel model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.0);\n    double unRegularizedErr = predictionError(validationData, model);\n\n    model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.1);\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","date":"2013-09-02 05:57:27","endLine":109,"groupId":"737","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"runRidgeRegressionUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/2f/dd5fc8fdca6371b0a85351451a306bbd2fc459.src","preCode":"  public void runRidgeRegressionUsingStaticMethods() {\n    int nexamples = 200;\n    int nfeatures = 20;\n    double eps = 10.0;\n    List<LabeledPoint> data = generateRidgeData(2*nexamples, nfeatures, eps);\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(data.subList(0, nexamples));\n    List<LabeledPoint> validationData = data.subList(nexamples, 2*nexamples);\n\n    RidgeRegressionModel model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.0);\n    double unRegularizedErr = predictionError(validationData, model);\n\n    model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.1);\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaRidgeRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"2ce200bf7f7a38afbcacf3303ca2418e49bdbe2a","commitMessage":"@@@Merge remote-tracking branch 'old/master'\n","date":"2013-09-02 05:57:27","modifiedFileCount":"0","status":"B","submitter":"Matei Zaharia"},{"authorTime":"2014-04-03 05:01:12","codes":[{"authorDate":"2014-04-03 05:01:12","commitOrder":2,"curCode":"  public void runRidgeRegressionUsingConstructor() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2*numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(data.subList(0, numExamples));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionWithSGD ridgeSGDImpl = new RidgeRegressionWithSGD();\n    ridgeSGDImpl.optimizer()\n      .setStepSize(1.0)\n      .setRegParam(0.0)\n      .setNumIterations(200);\n    RidgeRegressionModel model = ridgeSGDImpl.run(testRDD.rdd());\n    double unRegularizedErr = predictionError(validationData, model);\n\n    ridgeSGDImpl.optimizer().setRegParam(0.1);\n    model = ridgeSGDImpl.run(testRDD.rdd());\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","date":"2014-04-03 05:01:12","endLine":87,"groupId":"736","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runRidgeRegressionUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/03/714ae7e4d0008613898318054aafe8b6aab41e.src","preCode":"  public void runRidgeRegressionUsingConstructor() {\n    int nexamples = 200;\n    int nfeatures = 20;\n    double eps = 10.0;\n    List<LabeledPoint> data = generateRidgeData(2*nexamples, nfeatures, eps);\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(data.subList(0, nexamples));\n    List<LabeledPoint> validationData = data.subList(nexamples, 2*nexamples);\n\n    RidgeRegressionWithSGD ridgeSGDImpl = new RidgeRegressionWithSGD();\n    ridgeSGDImpl.optimizer().setStepSize(1.0)\n                            .setRegParam(0.0)\n                            .setNumIterations(200);\n    RidgeRegressionModel model = ridgeSGDImpl.run(testRDD.rdd());\n    double unRegularizedErr = predictionError(validationData, model);\n\n    ridgeSGDImpl.optimizer().setRegParam(0.1);\n    model = ridgeSGDImpl.run(testRDD.rdd());\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaRidgeRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2014-04-03 05:01:12","commitOrder":2,"curCode":"  public void runRidgeRegressionUsingStaticMethods() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(data.subList(0, numExamples));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionModel model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.0);\n    double unRegularizedErr = predictionError(validationData, model);\n\n    model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.1);\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","date":"2014-04-03 05:01:12","endLine":105,"groupId":"737","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"runRidgeRegressionUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/03/714ae7e4d0008613898318054aafe8b6aab41e.src","preCode":"  public void runRidgeRegressionUsingStaticMethods() {\n    int nexamples = 200;\n    int nfeatures = 20;\n    double eps = 10.0;\n    List<LabeledPoint> data = generateRidgeData(2*nexamples, nfeatures, eps);\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(data.subList(0, nexamples));\n    List<LabeledPoint> validationData = data.subList(nexamples, 2*nexamples);\n\n    RidgeRegressionModel model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.0);\n    double unRegularizedErr = predictionError(validationData, model);\n\n    model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.1);\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaRidgeRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"9c65fa76f9d413e311a80f29d35d3ff7722e9476","commitMessage":"@@@[SPARK-1212.  Part II] Support sparse data in MLlib\n\nIn PR https://github.com/apache/spark/pull/117.  we added dense/sparse vector data model and updated KMeans to support sparse input. This PR is to replace all other `Array[Double]` usage by `Vector` in generalized linear models (GLMs) and Naive Bayes. Major changes:\n\n1. `LabeledPoint` becomes `LabeledPoint(Double.  Vector)`.\n2. Methods that accept `RDD[Array[Double]]` now accept `RDD[Vector]`. We cannot support both in an elegant way because of type erasure.\n3. Mark 'createModel' and 'predictPoint' protected because they are not for end users.\n4. Add libSVMFile to MLContext.\n5. NaiveBayes can accept arbitrary labels (introducing a breaking change to Python's `NaiveBayesModel`).\n6. Gradient computation no longer creates temp vectors.\n7. Column normalization and centering are removed from Lasso and Ridge because the operation will densify the data. Simple feature transformation can be done before training.\n\nTODO:\n1. ~~Use axpy when possible.~~\n2. ~~Optimize Naive Bayes.~~\n\nAuthor: Xiangrui Meng <meng@databricks.com>\n\nCloses #245 from mengxr/vector and squashes the following commits:\n\neb6e793 [Xiangrui Meng] move libSVMFile to MLUtils and rename to loadLibSVMData\nc26c4fc [Xiangrui Meng] update DecisionTree to use RDD[Vector]\n11999c7 [Xiangrui Meng] Merge branch 'master' into vector\nf7da54b [Xiangrui Meng] add minSplits to libSVMFile\nda25e24 [Xiangrui Meng] revert the change to default addIntercept because it might change the behavior of existing code without warning\n493f26f [Xiangrui Meng] Merge branch 'master' into vector\n7c1bc01 [Xiangrui Meng] add a TODO to NB\nb9b7ef7 [Xiangrui Meng] change default value of addIntercept to false\nb01df54 [Xiangrui Meng] allow to change or clear threshold in LR and SVM\n4addc50 [Xiangrui Meng] merge master\n4ca5b1b [Xiangrui Meng] remove normalization from Lasso and update tests\nf04fe8a [Xiangrui Meng] remove normalization from RidgeRegression and update tests\nd088552 [Xiangrui Meng] use static constructor for MLContext\n6f59eed [Xiangrui Meng] update libSVMFile to determine number of features automatically\n3432e84 [Xiangrui Meng] update NaiveBayes to support sparse data\n0f8759b [Xiangrui Meng] minor updates to NB\nb11659c [Xiangrui Meng] style update\n78c4671 [Xiangrui Meng] add libSVMFile to MLContext\nf0fe616 [Xiangrui Meng] add a test for sparse linear regression\n44733e1 [Xiangrui Meng] use in-place gradient computation\ne981396 [Xiangrui Meng] use axpy in Updater\ndb808a1 [Xiangrui Meng] update JavaLR example\nbefa592 [Xiangrui Meng] passed scala/java tests\n75c83a4 [Xiangrui Meng] passed test compile\n1859701 [Xiangrui Meng] passed compile\n834ada2 [Xiangrui Meng] optimized MLUtils.computeStats update some ml algorithms to use Vector (cont.)\n135ab72 [Xiangrui Meng] merge glm\n0e57aa4 [Xiangrui Meng] update Lasso and RidgeRegression to parse the weights correctly from GLM mark createModel protected mark predictPoint protected\nd7f629f [Xiangrui Meng] fix a bug in GLM when intercept is not used\n3f346ba [Xiangrui Meng] update some ml algorithms to use Vector\n","date":"2014-04-03 05:01:12","modifiedFileCount":"6","status":"M","submitter":"Xiangrui Meng"},{"authorTime":"2016-05-11 02:17:47","codes":[{"authorDate":"2016-05-11 02:17:47","commitOrder":3,"curCode":"  public void runRidgeRegressionUsingConstructor() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(data.subList(0, numExamples));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionWithSGD ridgeSGDImpl = new RidgeRegressionWithSGD();\n    ridgeSGDImpl.optimizer()\n      .setStepSize(1.0)\n      .setRegParam(0.0)\n      .setNumIterations(200);\n    RidgeRegressionModel model = ridgeSGDImpl.run(testRDD.rdd());\n    double unRegularizedErr = predictionError(validationData, model);\n\n    ridgeSGDImpl.optimizer().setRegParam(0.1);\n    model = ridgeSGDImpl.run(testRDD.rdd());\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","date":"2016-05-11 02:17:47","endLine":95,"groupId":"736","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"runRidgeRegressionUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b2/efb2e72e374a7c93f1bdf44c264ba9a7df866f.src","preCode":"  public void runRidgeRegressionUsingConstructor() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2*numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(data.subList(0, numExamples));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionWithSGD ridgeSGDImpl = new RidgeRegressionWithSGD();\n    ridgeSGDImpl.optimizer()\n      .setStepSize(1.0)\n      .setRegParam(0.0)\n      .setNumIterations(200);\n    RidgeRegressionModel model = ridgeSGDImpl.run(testRDD.rdd());\n    double unRegularizedErr = predictionError(validationData, model);\n\n    ridgeSGDImpl.optimizer().setRegParam(0.1);\n    model = ridgeSGDImpl.run(testRDD.rdd());\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaRidgeRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2016-05-11 02:17:47","commitOrder":3,"curCode":"  public void runRidgeRegressionUsingStaticMethods() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(data.subList(0, numExamples));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionModel model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.0);\n    double unRegularizedErr = predictionError(validationData, model);\n\n    model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.1);\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","date":"2016-05-11 02:17:47","endLine":113,"groupId":"737","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"runRidgeRegressionUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b2/efb2e72e374a7c93f1bdf44c264ba9a7df866f.src","preCode":"  public void runRidgeRegressionUsingStaticMethods() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = sc.parallelize(data.subList(0, numExamples));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionModel model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.0);\n    double unRegularizedErr = predictionError(validationData, model);\n\n    model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.1);\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaRidgeRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"ed0b4070fb50054b1ecf66ff6c32458a4967dfd3","commitMessage":"@@@[SPARK-15037][SQL][MLLIB] Use SparkSession instead of SQLContext in Scala/Java TestSuites\n\n## What changes were proposed in this pull request?\nUse SparkSession instead of SQLContext in Scala/Java TestSuites\nas this PR already very big working Python TestSuites in a diff PR.\n\n## How was this patch tested?\nExisting tests\n\nAuthor: Sandeep Singh <sandeep@techaddict.me>\n\nCloses #12907 from techaddict/SPARK-15037.\n","date":"2016-05-11 02:17:47","modifiedFileCount":"63","status":"M","submitter":"Sandeep Singh"},{"authorTime":"2019-04-23 02:05:31","codes":[{"authorDate":"2019-04-23 02:05:31","commitOrder":4,"curCode":"  public void runRidgeRegressionUsingConstructor() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(\n      new ArrayList<LabeledPoint>(data.subList(0, numExamples)));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionWithSGD ridgeSGDImpl = new RidgeRegressionWithSGD();\n    ridgeSGDImpl.optimizer()\n      .setStepSize(1.0)\n      .setRegParam(0.0)\n      .setNumIterations(200);\n    RidgeRegressionModel model = ridgeSGDImpl.run(testRDD.rdd());\n    double unRegularizedErr = predictionError(validationData, model);\n\n    ridgeSGDImpl.optimizer().setRegParam(0.1);\n    model = ridgeSGDImpl.run(testRDD.rdd());\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","date":"2019-04-23 02:05:31","endLine":76,"groupId":"736","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"runRidgeRegressionUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/fb/6c775a4961228ae00ee01c4a92bd3f2b5207c6.src","preCode":"  public void runRidgeRegressionUsingConstructor() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(data.subList(0, numExamples));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionWithSGD ridgeSGDImpl = new RidgeRegressionWithSGD();\n    ridgeSGDImpl.optimizer()\n      .setStepSize(1.0)\n      .setRegParam(0.0)\n      .setNumIterations(200);\n    RidgeRegressionModel model = ridgeSGDImpl.run(testRDD.rdd());\n    double unRegularizedErr = predictionError(validationData, model);\n\n    ridgeSGDImpl.optimizer().setRegParam(0.1);\n    model = ridgeSGDImpl.run(testRDD.rdd());\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaRidgeRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-04-23 02:05:31","commitOrder":4,"curCode":"  public void runRidgeRegressionUsingStaticMethods() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(\n      new ArrayList<LabeledPoint>(data.subList(0, numExamples)));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionModel model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.0);\n    double unRegularizedErr = predictionError(validationData, model);\n\n    model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.1);\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","date":"2019-04-23 02:05:31","endLine":95,"groupId":"1325","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"runRidgeRegressionUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/fb/6c775a4961228ae00ee01c4a92bd3f2b5207c6.src","preCode":"  public void runRidgeRegressionUsingStaticMethods() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(data.subList(0, numExamples));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionModel model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.0);\n    double unRegularizedErr = predictionError(validationData, model);\n\n    model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.1);\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaRidgeRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"5172190da19a2750e00e1eac00cebfbca1f3c173","commitMessage":"@@@[SPARK-27392][SQL] TestHive test tables should be placed in shared test state.  not per session\n\n## What changes were proposed in this pull request?\n\nOtherwise.  tests that use tables from multiple sessions will run into issues if they access the same table. The correct location is in shared state.\n\nA couple other minor test improvements.\n\ncc gatorsmile srinathshankar\n\n## How was this patch tested?\n\nExisting unit tests.\n\nCloses #24302 from ericl/test-conflicts.\n\nLead-authored-by: Eric Liang <ekl@databricks.com>\nCo-authored-by: Eric Liang <ekhliang@gmail.com>\nSigned-off-by: Sean Owen <sean.owen@databricks.com>\n","date":"2019-04-23 02:05:31","modifiedFileCount":"1","status":"M","submitter":"Eric Liang"},{"authorTime":"2019-08-11 05:47:11","codes":[{"authorDate":"2019-08-11 05:47:11","commitOrder":5,"curCode":"  public void runRidgeRegressionUsingConstructor() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(\n            new ArrayList<>(data.subList(0, numExamples)));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionWithSGD ridgeSGDImpl = new RidgeRegressionWithSGD();\n    ridgeSGDImpl.optimizer()\n      .setStepSize(1.0)\n      .setRegParam(0.0)\n      .setNumIterations(200);\n    RidgeRegressionModel model = ridgeSGDImpl.run(testRDD.rdd());\n    double unRegularizedErr = predictionError(validationData, model);\n\n    ridgeSGDImpl.optimizer().setRegParam(0.1);\n    model = ridgeSGDImpl.run(testRDD.rdd());\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","date":"2019-08-11 05:47:11","endLine":76,"groupId":"736","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"runRidgeRegressionUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/5a/9389c424b44198c61bb9622d1fe0e633692d4d.src","preCode":"  public void runRidgeRegressionUsingConstructor() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(\n      new ArrayList<LabeledPoint>(data.subList(0, numExamples)));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionWithSGD ridgeSGDImpl = new RidgeRegressionWithSGD();\n    ridgeSGDImpl.optimizer()\n      .setStepSize(1.0)\n      .setRegParam(0.0)\n      .setNumIterations(200);\n    RidgeRegressionModel model = ridgeSGDImpl.run(testRDD.rdd());\n    double unRegularizedErr = predictionError(validationData, model);\n\n    ridgeSGDImpl.optimizer().setRegParam(0.1);\n    model = ridgeSGDImpl.run(testRDD.rdd());\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaRidgeRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-08-11 05:47:11","commitOrder":5,"curCode":"  public void runRidgeRegressionUsingStaticMethods() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(\n            new ArrayList<>(data.subList(0, numExamples)));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionModel model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.0);\n    double unRegularizedErr = predictionError(validationData, model);\n\n    model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.1);\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","date":"2019-08-11 05:47:11","endLine":95,"groupId":"1325","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"runRidgeRegressionUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/5a/9389c424b44198c61bb9622d1fe0e633692d4d.src","preCode":"  public void runRidgeRegressionUsingStaticMethods() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(\n      new ArrayList<LabeledPoint>(data.subList(0, numExamples)));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionModel model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.0);\n    double unRegularizedErr = predictionError(validationData, model);\n\n    model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.1);\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaRidgeRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"8535df72614800ba789286e569a39ea6e84b3354","commitMessage":"@@@[MINOR] Fix typos in comments and replace an explicit type with <>\n\n## What changes were proposed in this pull request?\nThis PR fixed typos in comments and replace the explicit type with '<>' for Java 8+.\n\n## How was this patch tested?\nManually tested.\n\nCloses #25338 from younggyuchun/younggyu.\n\nAuthored-by: younggyu chun <younggyuchun@gmail.com>\nSigned-off-by: Sean Owen <sean.owen@databricks.com>\n","date":"2019-08-11 05:47:11","modifiedFileCount":"14","status":"M","submitter":"younggyu chun"},{"authorTime":"2019-09-09 23:19:40","codes":[{"authorDate":"2019-09-09 23:19:40","commitOrder":6,"curCode":"  public void runRidgeRegressionUsingConstructor() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(\n            new ArrayList<>(data.subList(0, numExamples)));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionWithSGD ridgeSGDImpl = new RidgeRegressionWithSGD(1.0, 200, 0.0, 1.0);\n    RidgeRegressionModel model = ridgeSGDImpl.run(testRDD.rdd());\n    double unRegularizedErr = predictionError(validationData, model);\n\n    ridgeSGDImpl.optimizer().setRegParam(0.1);\n    model = ridgeSGDImpl.run(testRDD.rdd());\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","date":"2019-09-09 23:19:40","endLine":72,"groupId":"10480","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"runRidgeRegressionUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/63/441950cd18fa6c1437a668716c67a46dcb7c23.src","preCode":"  public void runRidgeRegressionUsingConstructor() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(\n            new ArrayList<>(data.subList(0, numExamples)));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionWithSGD ridgeSGDImpl = new RidgeRegressionWithSGD();\n    ridgeSGDImpl.optimizer()\n      .setStepSize(1.0)\n      .setRegParam(0.0)\n      .setNumIterations(200);\n    RidgeRegressionModel model = ridgeSGDImpl.run(testRDD.rdd());\n    double unRegularizedErr = predictionError(validationData, model);\n\n    ridgeSGDImpl.optimizer().setRegParam(0.1);\n    model = ridgeSGDImpl.run(testRDD.rdd());\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaRidgeRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-09-09 23:19:40","commitOrder":6,"curCode":"  public void runRidgeRegressionUsingStaticMethods() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(\n            new ArrayList<>(data.subList(0, numExamples)));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionModel model = new RidgeRegressionWithSGD(1.0, 200, 0.0, 1.0)\n        .run(testRDD.rdd());\n    double unRegularizedErr = predictionError(validationData, model);\n\n    model = new RidgeRegressionWithSGD(1.0, 200, 0.1, 1.0)\n        .run(testRDD.rdd());\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","date":"2019-09-09 23:19:40","endLine":93,"groupId":"10480","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"runRidgeRegressionUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/63/441950cd18fa6c1437a668716c67a46dcb7c23.src","preCode":"  public void runRidgeRegressionUsingStaticMethods() {\n    int numExamples = 50;\n    int numFeatures = 20;\n    List<LabeledPoint> data = generateRidgeData(2 * numExamples, numFeatures, 10.0);\n\n    JavaRDD<LabeledPoint> testRDD = jsc.parallelize(\n            new ArrayList<>(data.subList(0, numExamples)));\n    List<LabeledPoint> validationData = data.subList(numExamples, 2 * numExamples);\n\n    RidgeRegressionModel model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.0);\n    double unRegularizedErr = predictionError(validationData, model);\n\n    model = RidgeRegressionWithSGD.train(testRDD.rdd(), 200, 1.0, 0.1);\n    double regularizedErr = predictionError(validationData, model);\n\n    Assert.assertTrue(regularizedErr < unRegularizedErr);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/regression/JavaRidgeRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"6378d4bc06cd1bb1a209bd5fb63d10ef52d75eb4","commitMessage":"@@@[SPARK-28980][CORE][SQL][STREAMING][MLLIB] Remove most items deprecated in Spark 2.2.0 or earlier.  for Spark 3\n\n\n What changes were proposed in this pull request?\n\n- Remove SQLContext.createExternalTable and Catalog.createExternalTable.  deprecated in favor of createTable since 2.2.0.  plus tests of deprecated methods\n- Remove HiveContext.  deprecated in 2.0.0.  in favor of `SparkSession.builder.enableHiveSupport`\n- Remove deprecated KinesisUtils.createStream methods.  plus tests of deprecated methods.  deprecate in 2.2.0\n- Remove deprecated MLlib (not Spark ML) linear method support.  mostly utility constructors and 'train' methods.  and associated docs. This includes methods in LinearRegression.  LogisticRegression.  Lasso.  RidgeRegression. These have been deprecated since 2.0.0\n- Remove deprecated Pyspark MLlib linear method support.  including LogisticRegressionWithSGD.  LinearRegressionWithSGD.  LassoWithSGD\n- Remove 'runs' argument in KMeans.train() method.  which has been a no-op since 2.0.0\n- Remove deprecated ChiSqSelector isSorted protected method\n- Remove deprecated 'yarn-cluster' and 'yarn-client' master argument in favor of 'yarn' and deploy mode 'cluster'.  etc\n\nNotes:\n\n- I was not able to remove deprecated DataFrameReader.json(RDD) in favor of DataFrameReader.json(Dataset); the former was deprecated in 2.2.0.  but.  it is still needed to support Pyspark's .json() method.  which can't use a Dataset.\n- Looks like SQLContext.createExternalTable was not actually deprecated in Pyspark.  but.  almost certainly was meant to be? Catalog.createExternalTable was.\n- I afterwards noted that the toDegrees.  toRadians functions were almost removed fully in SPARK-25908.  but Felix suggested keeping just the R version as they hadn't been technically deprecated. I'd like to revisit that. Do we really want the inconsistency? I'm not against reverting it again.  but then that implies leaving SQLContext.createExternalTable just in Pyspark too.  which seems weird.\n- I *kept* LogisticRegressionWithSGD.  LinearRegressionWithSGD.  LassoWithSGD.  RidgeRegressionWithSGD in Pyspark.  though deprecated.  as it is hard to remove them (still used by StreamingLogisticRegressionWithSGD?) and they are not fully removed in Scala. Maybe should not have been deprecated.\n\n\n Why are the changes needed?\n\nDeprecated items are easiest to remove in a major release.  so we should do so as much as possible for Spark 3. This does not target items deprecated 'recently' as of Spark 2.3.  which is still 18 months old.\n\n\n Does this PR introduce any user-facing change?\n\nYes.  in that deprecated items are removed from some public APIs.\n\n\n How was this patch tested?\n\nExisting tests.\n\nCloses #25684 from srowen/SPARK-28980.\n\nLead-authored-by: Sean Owen <sean.owen@databricks.com>\nCo-authored-by: HyukjinKwon <gurwls223@apache.org>\nSigned-off-by: Sean Owen <sean.owen@databricks.com>\n","date":"2019-09-09 23:19:40","modifiedFileCount":"8","status":"M","submitter":"Sean Owen"}]
