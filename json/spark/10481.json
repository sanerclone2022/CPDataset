[{"authorTime":"2018-03-21 02:14:34","codes":[{"authorDate":"2018-03-21 02:14:34","commitOrder":1,"curCode":"  public void testKSTestCDF() {\n    \r\n    NormalDistribution stdNormalDist = new NormalDistribution(0, 1);\n\n    \r\n    Long seed = 10L;\n    stdNormalDist.reseedRandomGenerator(seed);\n    Function<Double, Double> stdNormalCDF = (x) -> stdNormalDist.cumulativeProbability(x);\n\n    double pThreshold = 0.05;\n\n    \r\n    Row results = KolmogorovSmirnovTest\n      .test(dataset, \"sample\", stdNormalCDF).head();\n    double pValue1 = results.getDouble(0);\n    \r\n    assert(pValue1 > pThreshold);\n  }\n","date":"2018-03-21 02:14:34","endLine":71,"groupId":"372","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testKSTestCDF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/02/1272dd5a40c17f3bf41a14ed569760cebfa673.src","preCode":"  public void testKSTestCDF() {\n    \r\n    NormalDistribution stdNormalDist = new NormalDistribution(0, 1);\n\n    \r\n    Long seed = 10L;\n    stdNormalDist.reseedRandomGenerator(seed);\n    Function<Double, Double> stdNormalCDF = (x) -> stdNormalDist.cumulativeProbability(x);\n\n    double pThreshold = 0.05;\n\n    \r\n    Row results = KolmogorovSmirnovTest\n      .test(dataset, \"sample\", stdNormalCDF).head();\n    double pValue1 = results.getDouble(0);\n    \r\n    assert(pValue1 > pThreshold);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/stat/JavaKolmogorovSmirnovTestSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2018-03-21 02:14:34","commitOrder":1,"curCode":"  public void testKSTestNamedDistribution() {\n    double pThreshold = 0.05;\n\n    \r\n    Row results = KolmogorovSmirnovTest\n            .test(dataset, \"sample\", \"norm\", 0.0, 1.0).head();\n    double pValue1 = results.getDouble(0);\n    \r\n    assert(pValue1 > pThreshold);\n  }\n","date":"2018-03-21 02:14:34","endLine":83,"groupId":"373","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testKSTestNamedDistribution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/02/1272dd5a40c17f3bf41a14ed569760cebfa673.src","preCode":"  public void testKSTestNamedDistribution() {\n    double pThreshold = 0.05;\n\n    \r\n    Row results = KolmogorovSmirnovTest\n            .test(dataset, \"sample\", \"norm\", 0.0, 1.0).head();\n    double pValue1 = results.getDouble(0);\n    \r\n    assert(pValue1 > pThreshold);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/stat/JavaKolmogorovSmirnovTestSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"7f5e8aa2606b0ee0297ceb6f4603bd368e3b0291","commitMessage":"@@@[SPARK-21898][ML] Feature parity for KolmogorovSmirnovTest in MLlib\n\n## What changes were proposed in this pull request?\n\nFeature parity for KolmogorovSmirnovTest in MLlib.\nImplement `DataFrame` interface for `KolmogorovSmirnovTest` in `mllib.stat`.\n\n## How was this patch tested?\n\nTest suite added.\n\nAuthor: WeichenXu <weichen.xu@databricks.com>\nAuthor: jkbradley <joseph.kurata.bradley@gmail.com>\n\nCloses #19108 from WeichenXu123/ml-ks-test.\n","date":"2018-03-21 02:14:34","modifiedFileCount":"0","status":"B","submitter":"WeichenXu"},{"authorTime":"2019-11-21 04:04:15","codes":[{"authorDate":"2019-11-21 04:04:15","commitOrder":2,"curCode":"  public void testKSTestCDF() {\n    \r\n    NormalDistribution stdNormalDist = new NormalDistribution(0, 1);\n\n    \r\n    Long seed = 10L;\n    stdNormalDist.reseedRandomGenerator(seed);\n    Function<Double, Double> stdNormalCDF = (x) -> stdNormalDist.cumulativeProbability(x);\n\n    double pThreshold = 0.05;\n\n    \r\n    Row results = KolmogorovSmirnovTest\n      .test(dataset, \"sample\", stdNormalCDF).head();\n    double pValue1 = results.getDouble(0);\n    \r\n    Assert.assertTrue(pValue1 > pThreshold);\n  }\n","date":"2019-11-21 04:04:15","endLine":65,"groupId":"10481","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testKSTestCDF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/90/37f6b8547247b4dff14fb9755763b2d19caed5.src","preCode":"  public void testKSTestCDF() {\n    \r\n    NormalDistribution stdNormalDist = new NormalDistribution(0, 1);\n\n    \r\n    Long seed = 10L;\n    stdNormalDist.reseedRandomGenerator(seed);\n    Function<Double, Double> stdNormalCDF = (x) -> stdNormalDist.cumulativeProbability(x);\n\n    double pThreshold = 0.05;\n\n    \r\n    Row results = KolmogorovSmirnovTest\n      .test(dataset, \"sample\", stdNormalCDF).head();\n    double pValue1 = results.getDouble(0);\n    \r\n    assert(pValue1 > pThreshold);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/stat/JavaKolmogorovSmirnovTestSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2019-11-21 04:04:15","commitOrder":2,"curCode":"  public void testKSTestNamedDistribution() {\n    double pThreshold = 0.05;\n\n    \r\n    Row results = KolmogorovSmirnovTest\n            .test(dataset, \"sample\", \"norm\", 0.0, 1.0).head();\n    double pValue1 = results.getDouble(0);\n    \r\n    Assert.assertTrue(pValue1 > pThreshold);\n  }\n","date":"2019-11-21 04:04:15","endLine":77,"groupId":"10481","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testKSTestNamedDistribution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/90/37f6b8547247b4dff14fb9755763b2d19caed5.src","preCode":"  public void testKSTestNamedDistribution() {\n    double pThreshold = 0.05;\n\n    \r\n    Row results = KolmogorovSmirnovTest\n            .test(dataset, \"sample\", \"norm\", 0.0, 1.0).head();\n    double pValue1 = results.getDouble(0);\n    \r\n    assert(pValue1 > pThreshold);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/stat/JavaKolmogorovSmirnovTestSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"1febd373ea806326d269a60048ee52543a76c918","commitMessage":"@@@[MINOR][TESTS] Replace JVM assert with JUnit Assert in tests\n\n\n What changes were proposed in this pull request?\n\nUse JUnit assertions in tests uniformly.  not JVM assert() statements.\n\n\n Why are the changes needed?\n\nassert() statements do not produce as useful errors when they fail.  and.  if they were somehow disabled.  would fail to test anything.\n\n\n Does this PR introduce any user-facing change?\n\nNo. The assertion logic should be identical.\n\n\n How was this patch tested?\n\nExisting tests.\n\nCloses #26581 from srowen/assertToJUnit.\n\nAuthored-by: Sean Owen <sean.owen@databricks.com>\nSigned-off-by: Sean Owen <sean.owen@databricks.com>\n","date":"2019-11-21 04:04:15","modifiedFileCount":"5","status":"M","submitter":"Sean Owen"}]
