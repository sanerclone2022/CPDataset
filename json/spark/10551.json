[{"authorTime":"2017-02-16 20:32:45","codes":[{"authorDate":"2017-02-16 20:32:45","commitOrder":1,"curCode":"  public void sampleByKey() {\n    JavaRDD<Integer> rdd1 = sc.parallelize(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8), 3);\n    JavaPairRDD<Integer, Integer> rdd2 = rdd1.mapToPair(\n      new PairFunction<Integer, Integer, Integer>() {\n        @Override\n        public Tuple2<Integer, Integer> call(Integer i) {\n          return new Tuple2<>(i % 2, 1);\n        }\n      });\n    Map<Integer, Double> fractions = new HashMap<>();\n    fractions.put(0, 0.5);\n    fractions.put(1, 1.0);\n    JavaPairRDD<Integer, Integer> wr = rdd2.sampleByKey(true, fractions, 1L);\n    Map<Integer, Long> wrCounts = wr.countByKey();\n    assertEquals(2, wrCounts.size());\n    assertTrue(wrCounts.get(0) > 0);\n    assertTrue(wrCounts.get(1) > 0);\n    JavaPairRDD<Integer, Integer> wor = rdd2.sampleByKey(false, fractions, 1L);\n    Map<Integer, Long> worCounts = wor.countByKey();\n    assertEquals(2, worCounts.size());\n    assertTrue(worCounts.get(0) > 0);\n    assertTrue(worCounts.get(1) > 0);\n  }\n","date":"2017-02-16 20:32:45","endLine":1674,"groupId":"2482","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"sampleByKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/80/aab100aced46cbe2866850ce4da7935d650b60.src","preCode":"  public void sampleByKey() {\n    JavaRDD<Integer> rdd1 = sc.parallelize(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8), 3);\n    JavaPairRDD<Integer, Integer> rdd2 = rdd1.mapToPair(\n      new PairFunction<Integer, Integer, Integer>() {\n        @Override\n        public Tuple2<Integer, Integer> call(Integer i) {\n          return new Tuple2<>(i % 2, 1);\n        }\n      });\n    Map<Integer, Double> fractions = new HashMap<>();\n    fractions.put(0, 0.5);\n    fractions.put(1, 1.0);\n    JavaPairRDD<Integer, Integer> wr = rdd2.sampleByKey(true, fractions, 1L);\n    Map<Integer, Long> wrCounts = wr.countByKey();\n    assertEquals(2, wrCounts.size());\n    assertTrue(wrCounts.get(0) > 0);\n    assertTrue(wrCounts.get(1) > 0);\n    JavaPairRDD<Integer, Integer> wor = rdd2.sampleByKey(false, fractions, 1L);\n    Map<Integer, Long> worCounts = wor.countByKey();\n    assertEquals(2, worCounts.size());\n    assertTrue(worCounts.get(0) > 0);\n    assertTrue(worCounts.get(1) > 0);\n  }\n","realPath":"core/src/test/java/test/org/apache/spark/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":1652,"status":"B"},{"authorDate":"2017-02-16 20:32:45","commitOrder":1,"curCode":"  public void sampleByKeyExact() {\n    JavaRDD<Integer> rdd1 = sc.parallelize(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8), 3);\n    JavaPairRDD<Integer, Integer> rdd2 = rdd1.mapToPair(\n      new PairFunction<Integer, Integer, Integer>() {\n          @Override\n          public Tuple2<Integer, Integer> call(Integer i) {\n              return new Tuple2<>(i % 2, 1);\n          }\n      });\n    Map<Integer, Double> fractions = new HashMap<>();\n    fractions.put(0, 0.5);\n    fractions.put(1, 1.0);\n    JavaPairRDD<Integer, Integer> wrExact = rdd2.sampleByKeyExact(true, fractions, 1L);\n    Map<Integer, Long> wrExactCounts = wrExact.countByKey();\n    assertEquals(2, wrExactCounts.size());\n    assertTrue(wrExactCounts.get(0) == 2);\n    assertTrue(wrExactCounts.get(1) == 4);\n    JavaPairRDD<Integer, Integer> worExact = rdd2.sampleByKeyExact(false, fractions, 1L);\n    Map<Integer, Long> worExactCounts = worExact.countByKey();\n    assertEquals(2, worExactCounts.size());\n    assertTrue(worExactCounts.get(0) == 2);\n    assertTrue(worExactCounts.get(1) == 4);\n  }\n","date":"2017-02-16 20:32:45","endLine":1700,"groupId":"891","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"sampleByKeyExact","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/80/aab100aced46cbe2866850ce4da7935d650b60.src","preCode":"  public void sampleByKeyExact() {\n    JavaRDD<Integer> rdd1 = sc.parallelize(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8), 3);\n    JavaPairRDD<Integer, Integer> rdd2 = rdd1.mapToPair(\n      new PairFunction<Integer, Integer, Integer>() {\n          @Override\n          public Tuple2<Integer, Integer> call(Integer i) {\n              return new Tuple2<>(i % 2, 1);\n          }\n      });\n    Map<Integer, Double> fractions = new HashMap<>();\n    fractions.put(0, 0.5);\n    fractions.put(1, 1.0);\n    JavaPairRDD<Integer, Integer> wrExact = rdd2.sampleByKeyExact(true, fractions, 1L);\n    Map<Integer, Long> wrExactCounts = wrExact.countByKey();\n    assertEquals(2, wrExactCounts.size());\n    assertTrue(wrExactCounts.get(0) == 2);\n    assertTrue(wrExactCounts.get(1) == 4);\n    JavaPairRDD<Integer, Integer> worExact = rdd2.sampleByKeyExact(false, fractions, 1L);\n    Map<Integer, Long> worExactCounts = worExact.countByKey();\n    assertEquals(2, worExactCounts.size());\n    assertTrue(worExactCounts.get(0) == 2);\n    assertTrue(worExactCounts.get(1) == 4);\n  }\n","realPath":"core/src/test/java/test/org/apache/spark/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":1678,"status":"B"}],"commitId":"0e2405490f2056728d1353abbac6f3ea177ae533","commitMessage":"@@@[SPARK-19550][BUILD][CORE][WIP] Remove Java 7 support\n\n- Move external/java8-tests tests into core.  streaming.  sql and remove\n- Remove MaxPermGen and related options\n- Fix some reflection / TODOs around Java 8+ methods\n- Update doc references to 1.7/1.8 differences\n- Remove Java 7/8 related build profiles\n- Update some plugins for better Java 8 compatibility\n- Fix a few Java-related warnings\n\nFor the future:\n\n- Update Java 8 examples to fully use Java 8\n- Update Java tests to use lambdas for simplicity\n- Update Java internal implementations to use lambdas\n\n## How was this patch tested?\n\nExisting tests\n\nAuthor: Sean Owen <sowen@cloudera.com>\n\nCloses #16871 from srowen/SPARK-19493.\n","date":"2017-02-16 20:32:45","modifiedFileCount":"51","status":"B","submitter":"Sean Owen"},{"authorTime":"2017-02-20 01:42:50","codes":[{"authorDate":"2017-02-20 01:42:50","commitOrder":2,"curCode":"  public void sampleByKey() {\n    JavaRDD<Integer> rdd1 = sc.parallelize(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8), 3);\n    JavaPairRDD<Integer, Integer> rdd2 = rdd1.mapToPair(i -> new Tuple2<>(i % 2, 1));\n    Map<Integer, Double> fractions = new HashMap<>();\n    fractions.put(0, 0.5);\n    fractions.put(1, 1.0);\n    JavaPairRDD<Integer, Integer> wr = rdd2.sampleByKey(true, fractions, 1L);\n    Map<Integer, Long> wrCounts = wr.countByKey();\n    assertEquals(2, wrCounts.size());\n    assertTrue(wrCounts.get(0) > 0);\n    assertTrue(wrCounts.get(1) > 0);\n    JavaPairRDD<Integer, Integer> wor = rdd2.sampleByKey(false, fractions, 1L);\n    Map<Integer, Long> worCounts = wor.countByKey();\n    assertEquals(2, worCounts.size());\n    assertTrue(worCounts.get(0) > 0);\n    assertTrue(worCounts.get(1) > 0);\n  }\n","date":"2017-02-20 01:42:50","endLine":1398,"groupId":"2482","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"sampleByKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/51/2149127d72f4f8f7ed7438b9ba9015a07e254f.src","preCode":"  public void sampleByKey() {\n    JavaRDD<Integer> rdd1 = sc.parallelize(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8), 3);\n    JavaPairRDD<Integer, Integer> rdd2 = rdd1.mapToPair(\n      new PairFunction<Integer, Integer, Integer>() {\n        @Override\n        public Tuple2<Integer, Integer> call(Integer i) {\n          return new Tuple2<>(i % 2, 1);\n        }\n      });\n    Map<Integer, Double> fractions = new HashMap<>();\n    fractions.put(0, 0.5);\n    fractions.put(1, 1.0);\n    JavaPairRDD<Integer, Integer> wr = rdd2.sampleByKey(true, fractions, 1L);\n    Map<Integer, Long> wrCounts = wr.countByKey();\n    assertEquals(2, wrCounts.size());\n    assertTrue(wrCounts.get(0) > 0);\n    assertTrue(wrCounts.get(1) > 0);\n    JavaPairRDD<Integer, Integer> wor = rdd2.sampleByKey(false, fractions, 1L);\n    Map<Integer, Long> worCounts = wor.countByKey();\n    assertEquals(2, worCounts.size());\n    assertTrue(worCounts.get(0) > 0);\n    assertTrue(worCounts.get(1) > 0);\n  }\n","realPath":"core/src/test/java/test/org/apache/spark/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":1382,"status":"M"},{"authorDate":"2017-02-20 01:42:50","commitOrder":2,"curCode":"  public void sampleByKeyExact() {\n    JavaRDD<Integer> rdd1 = sc.parallelize(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8), 3);\n    JavaPairRDD<Integer, Integer> rdd2 = rdd1.mapToPair(i -> new Tuple2<>(i % 2, 1));\n    Map<Integer, Double> fractions = new HashMap<>();\n    fractions.put(0, 0.5);\n    fractions.put(1, 1.0);\n    JavaPairRDD<Integer, Integer> wrExact = rdd2.sampleByKeyExact(true, fractions, 1L);\n    Map<Integer, Long> wrExactCounts = wrExact.countByKey();\n    assertEquals(2, wrExactCounts.size());\n    assertTrue(wrExactCounts.get(0) == 2);\n    assertTrue(wrExactCounts.get(1) == 4);\n    JavaPairRDD<Integer, Integer> worExact = rdd2.sampleByKeyExact(false, fractions, 1L);\n    Map<Integer, Long> worExactCounts = worExact.countByKey();\n    assertEquals(2, worExactCounts.size());\n    assertTrue(worExactCounts.get(0) == 2);\n    assertTrue(worExactCounts.get(1) == 4);\n  }\n","date":"2017-02-20 01:42:50","endLine":1418,"groupId":"891","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"sampleByKeyExact","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/51/2149127d72f4f8f7ed7438b9ba9015a07e254f.src","preCode":"  public void sampleByKeyExact() {\n    JavaRDD<Integer> rdd1 = sc.parallelize(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8), 3);\n    JavaPairRDD<Integer, Integer> rdd2 = rdd1.mapToPair(\n      new PairFunction<Integer, Integer, Integer>() {\n          @Override\n          public Tuple2<Integer, Integer> call(Integer i) {\n              return new Tuple2<>(i % 2, 1);\n          }\n      });\n    Map<Integer, Double> fractions = new HashMap<>();\n    fractions.put(0, 0.5);\n    fractions.put(1, 1.0);\n    JavaPairRDD<Integer, Integer> wrExact = rdd2.sampleByKeyExact(true, fractions, 1L);\n    Map<Integer, Long> wrExactCounts = wrExact.countByKey();\n    assertEquals(2, wrExactCounts.size());\n    assertTrue(wrExactCounts.get(0) == 2);\n    assertTrue(wrExactCounts.get(1) == 4);\n    JavaPairRDD<Integer, Integer> worExact = rdd2.sampleByKeyExact(false, fractions, 1L);\n    Map<Integer, Long> worExactCounts = worExact.countByKey();\n    assertEquals(2, worExactCounts.size());\n    assertTrue(worExactCounts.get(0) == 2);\n    assertTrue(worExactCounts.get(1) == 4);\n  }\n","realPath":"core/src/test/java/test/org/apache/spark/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":1402,"status":"M"}],"commitId":"1487c9af20a333ead55955acf4c0aa323bea0d07","commitMessage":"@@@[SPARK-19534][TESTS] Convert Java tests to use lambdas.  Java 8 features\n\n## What changes were proposed in this pull request?\n\nConvert tests to use Java 8 lambdas.  and modest related fixes to surrounding code.\n\n## How was this patch tested?\n\nJenkins tests\n\nAuthor: Sean Owen <sowen@cloudera.com>\n\nCloses #16964 from srowen/SPARK-19534.\n","date":"2017-02-20 01:42:50","modifiedFileCount":"45","status":"M","submitter":"Sean Owen"},{"authorTime":"2018-10-24 22:08:26","codes":[{"authorDate":"2017-02-20 01:42:50","commitOrder":3,"curCode":"  public void sampleByKey() {\n    JavaRDD<Integer> rdd1 = sc.parallelize(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8), 3);\n    JavaPairRDD<Integer, Integer> rdd2 = rdd1.mapToPair(i -> new Tuple2<>(i % 2, 1));\n    Map<Integer, Double> fractions = new HashMap<>();\n    fractions.put(0, 0.5);\n    fractions.put(1, 1.0);\n    JavaPairRDD<Integer, Integer> wr = rdd2.sampleByKey(true, fractions, 1L);\n    Map<Integer, Long> wrCounts = wr.countByKey();\n    assertEquals(2, wrCounts.size());\n    assertTrue(wrCounts.get(0) > 0);\n    assertTrue(wrCounts.get(1) > 0);\n    JavaPairRDD<Integer, Integer> wor = rdd2.sampleByKey(false, fractions, 1L);\n    Map<Integer, Long> worCounts = wor.countByKey();\n    assertEquals(2, worCounts.size());\n    assertTrue(worCounts.get(0) > 0);\n    assertTrue(worCounts.get(1) > 0);\n  }\n","date":"2017-02-20 01:42:50","endLine":1398,"groupId":"10551","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"sampleByKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/51/2149127d72f4f8f7ed7438b9ba9015a07e254f.src","preCode":"  public void sampleByKey() {\n    JavaRDD<Integer> rdd1 = sc.parallelize(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8), 3);\n    JavaPairRDD<Integer, Integer> rdd2 = rdd1.mapToPair(i -> new Tuple2<>(i % 2, 1));\n    Map<Integer, Double> fractions = new HashMap<>();\n    fractions.put(0, 0.5);\n    fractions.put(1, 1.0);\n    JavaPairRDD<Integer, Integer> wr = rdd2.sampleByKey(true, fractions, 1L);\n    Map<Integer, Long> wrCounts = wr.countByKey();\n    assertEquals(2, wrCounts.size());\n    assertTrue(wrCounts.get(0) > 0);\n    assertTrue(wrCounts.get(1) > 0);\n    JavaPairRDD<Integer, Integer> wor = rdd2.sampleByKey(false, fractions, 1L);\n    Map<Integer, Long> worCounts = wor.countByKey();\n    assertEquals(2, worCounts.size());\n    assertTrue(worCounts.get(0) > 0);\n    assertTrue(worCounts.get(1) > 0);\n  }\n","realPath":"core/src/test/java/test/org/apache/spark/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":1382,"status":"N"},{"authorDate":"2018-10-24 22:08:26","commitOrder":3,"curCode":"  public void sampleByKeyExact() {\n    JavaRDD<Integer> rdd1 = sc.parallelize(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8), 3);\n    JavaPairRDD<Integer, Integer> rdd2 = rdd1.mapToPair(i -> new Tuple2<>(i % 2, 1));\n    Map<Integer, Double> fractions = new HashMap<>();\n    fractions.put(0, 0.5);\n    fractions.put(1, 1.0);\n    JavaPairRDD<Integer, Integer> wrExact = rdd2.sampleByKeyExact(true, fractions, 1L);\n    Map<Integer, Long> wrExactCounts = wrExact.countByKey();\n    assertEquals(2, wrExactCounts.size());\n    assertEquals(2, (long) wrExactCounts.get(0));\n    assertEquals(4, (long) wrExactCounts.get(1));\n    JavaPairRDD<Integer, Integer> worExact = rdd2.sampleByKeyExact(false, fractions, 1L);\n    Map<Integer, Long> worExactCounts = worExact.countByKey();\n    assertEquals(2, worExactCounts.size());\n    assertEquals(2, (long) worExactCounts.get(0));\n    assertEquals(4, (long) worExactCounts.get(1));\n  }\n","date":"2018-10-24 22:08:26","endLine":1378,"groupId":"10551","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"sampleByKeyExact","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/36/5a93d2601e7ddbe3602e5bc6469f0ae17427da.src","preCode":"  public void sampleByKeyExact() {\n    JavaRDD<Integer> rdd1 = sc.parallelize(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8), 3);\n    JavaPairRDD<Integer, Integer> rdd2 = rdd1.mapToPair(i -> new Tuple2<>(i % 2, 1));\n    Map<Integer, Double> fractions = new HashMap<>();\n    fractions.put(0, 0.5);\n    fractions.put(1, 1.0);\n    JavaPairRDD<Integer, Integer> wrExact = rdd2.sampleByKeyExact(true, fractions, 1L);\n    Map<Integer, Long> wrExactCounts = wrExact.countByKey();\n    assertEquals(2, wrExactCounts.size());\n    assertTrue(wrExactCounts.get(0) == 2);\n    assertTrue(wrExactCounts.get(1) == 4);\n    JavaPairRDD<Integer, Integer> worExact = rdd2.sampleByKeyExact(false, fractions, 1L);\n    Map<Integer, Long> worExactCounts = worExact.countByKey();\n    assertEquals(2, worExactCounts.size());\n    assertTrue(worExactCounts.get(0) == 2);\n    assertTrue(worExactCounts.get(1) == 4);\n  }\n","realPath":"core/src/test/java/test/org/apache/spark/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":1362,"status":"M"}],"commitId":"b19a28dea098c7d6188f8540429c50f42952d678","commitMessage":"@@@[SPARK-16775][CORE] Remove deprecated accumulator v1 APIs\n\n## What changes were proposed in this pull request?\n\nRemove deprecated accumulator v1\n\n## How was this patch tested?\n\nExisting tests.\n\nCloses #22730 from srowen/SPARK-16775.\n\nAuthored-by: Sean Owen <sean.owen@databricks.com>\nSigned-off-by: Sean Owen <sean.owen@databricks.com>\n","date":"2018-10-24 22:08:26","modifiedFileCount":"2","status":"M","submitter":"Sean Owen"}]
