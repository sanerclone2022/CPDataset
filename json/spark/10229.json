[{"authorTime":"2017-02-16 20:32:45","codes":[{"authorDate":"2017-02-16 20:32:45","commitOrder":1,"curCode":"  public void testFlatMapValues() {\n    List<List<Tuple2<String, String>>> inputData = stringStringKVStream;\n\n    List<List<Tuple2<String, String>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"california\", \"dodgers1\"),\n                      new Tuple2<>(\"california\", \"dodgers2\"),\n                      new Tuple2<>(\"california\", \"giants1\"),\n                      new Tuple2<>(\"california\", \"giants2\"),\n                      new Tuple2<>(\"new york\", \"yankees1\"),\n                      new Tuple2<>(\"new york\", \"yankees2\"),\n                      new Tuple2<>(\"new york\", \"mets1\"),\n                      new Tuple2<>(\"new york\", \"mets2\")),\n        Arrays.asList(new Tuple2<>(\"california\", \"sharks1\"),\n                      new Tuple2<>(\"california\", \"sharks2\"),\n                      new Tuple2<>(\"california\", \"ducks1\"),\n                      new Tuple2<>(\"california\", \"ducks2\"),\n                      new Tuple2<>(\"new york\", \"rangers1\"),\n                      new Tuple2<>(\"new york\", \"rangers2\"),\n                      new Tuple2<>(\"new york\", \"islanders1\"),\n                      new Tuple2<>(\"new york\", \"islanders2\")));\n\n    JavaDStream<Tuple2<String, String>> stream = JavaTestUtils.attachTestInputStream(\n        ssc, inputData, 1);\n    JavaPairDStream<String, String> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n\n    JavaPairDStream<String, String> flatMapped = pairStream.flatMapValues(\n        new Function<String, Iterable<String>>() {\n          @Override\n          public Iterable<String> call(String in) {\n            List<String> out = new ArrayList<>();\n            out.add(in + \"1\");\n            out.add(in + \"2\");\n            return out;\n          }\n        });\n\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<Tuple2<String, String>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n\n    Assert.assertEquals(expected, result);\n  }\n","date":"2017-02-16 20:32:45","endLine":1634,"groupId":"275","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlatMapValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/8d/24104d7870bd3178e7bd3b9a61a2725615e7be.src","preCode":"  public void testFlatMapValues() {\n    List<List<Tuple2<String, String>>> inputData = stringStringKVStream;\n\n    List<List<Tuple2<String, String>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"california\", \"dodgers1\"),\n                      new Tuple2<>(\"california\", \"dodgers2\"),\n                      new Tuple2<>(\"california\", \"giants1\"),\n                      new Tuple2<>(\"california\", \"giants2\"),\n                      new Tuple2<>(\"new york\", \"yankees1\"),\n                      new Tuple2<>(\"new york\", \"yankees2\"),\n                      new Tuple2<>(\"new york\", \"mets1\"),\n                      new Tuple2<>(\"new york\", \"mets2\")),\n        Arrays.asList(new Tuple2<>(\"california\", \"sharks1\"),\n                      new Tuple2<>(\"california\", \"sharks2\"),\n                      new Tuple2<>(\"california\", \"ducks1\"),\n                      new Tuple2<>(\"california\", \"ducks2\"),\n                      new Tuple2<>(\"new york\", \"rangers1\"),\n                      new Tuple2<>(\"new york\", \"rangers2\"),\n                      new Tuple2<>(\"new york\", \"islanders1\"),\n                      new Tuple2<>(\"new york\", \"islanders2\")));\n\n    JavaDStream<Tuple2<String, String>> stream = JavaTestUtils.attachTestInputStream(\n        ssc, inputData, 1);\n    JavaPairDStream<String, String> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n\n    JavaPairDStream<String, String> flatMapped = pairStream.flatMapValues(\n        new Function<String, Iterable<String>>() {\n          @Override\n          public Iterable<String> call(String in) {\n            List<String> out = new ArrayList<>();\n            out.add(in + \"1\");\n            out.add(in + \"2\");\n            return out;\n          }\n        });\n\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<Tuple2<String, String>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":1593,"status":"B"},{"authorDate":"2017-02-16 20:32:45","commitOrder":1,"curCode":"  public void testFlatMapValues() {\n    List<List<Tuple2<String, String>>> inputData = stringStringKVStream;\n\n    List<List<Tuple2<String, String>>> expected = Arrays.asList(\n      Arrays.asList(new Tuple2<>(\"california\", \"dodgers1\"),\n        new Tuple2<>(\"california\", \"dodgers2\"),\n        new Tuple2<>(\"california\", \"giants1\"),\n        new Tuple2<>(\"california\", \"giants2\"),\n        new Tuple2<>(\"new york\", \"yankees1\"),\n        new Tuple2<>(\"new york\", \"yankees2\"),\n        new Tuple2<>(\"new york\", \"mets1\"),\n        new Tuple2<>(\"new york\", \"mets2\")),\n      Arrays.asList(new Tuple2<>(\"california\", \"sharks1\"),\n        new Tuple2<>(\"california\", \"sharks2\"),\n        new Tuple2<>(\"california\", \"ducks1\"),\n        new Tuple2<>(\"california\", \"ducks2\"),\n        new Tuple2<>(\"new york\", \"rangers1\"),\n        new Tuple2<>(\"new york\", \"rangers2\"),\n        new Tuple2<>(\"new york\", \"islanders1\"),\n        new Tuple2<>(\"new york\", \"islanders2\")));\n\n    JavaDStream<Tuple2<String, String>> stream = JavaTestUtils.attachTestInputStream(\n      ssc, inputData, 1);\n    JavaPairDStream<String, String> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n    JavaPairDStream<String, String> flatMapped =\n      pairStream.flatMapValues(in -> Arrays.asList(in + \"1\", in + \"2\"));\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<Tuple2<String, String>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n    Assert.assertEquals(expected, result);\n  }\n","date":"2017-02-16 20:32:45","endLine":845,"groupId":"275","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlatMapValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/64/6cb97066f3501e7d1f5c159c770ea4d0dd2fca.src","preCode":"  public void testFlatMapValues() {\n    List<List<Tuple2<String, String>>> inputData = stringStringKVStream;\n\n    List<List<Tuple2<String, String>>> expected = Arrays.asList(\n      Arrays.asList(new Tuple2<>(\"california\", \"dodgers1\"),\n        new Tuple2<>(\"california\", \"dodgers2\"),\n        new Tuple2<>(\"california\", \"giants1\"),\n        new Tuple2<>(\"california\", \"giants2\"),\n        new Tuple2<>(\"new york\", \"yankees1\"),\n        new Tuple2<>(\"new york\", \"yankees2\"),\n        new Tuple2<>(\"new york\", \"mets1\"),\n        new Tuple2<>(\"new york\", \"mets2\")),\n      Arrays.asList(new Tuple2<>(\"california\", \"sharks1\"),\n        new Tuple2<>(\"california\", \"sharks2\"),\n        new Tuple2<>(\"california\", \"ducks1\"),\n        new Tuple2<>(\"california\", \"ducks2\"),\n        new Tuple2<>(\"new york\", \"rangers1\"),\n        new Tuple2<>(\"new york\", \"rangers2\"),\n        new Tuple2<>(\"new york\", \"islanders1\"),\n        new Tuple2<>(\"new york\", \"islanders2\")));\n\n    JavaDStream<Tuple2<String, String>> stream = JavaTestUtils.attachTestInputStream(\n      ssc, inputData, 1);\n    JavaPairDStream<String, String> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n    JavaPairDStream<String, String> flatMapped =\n      pairStream.flatMapValues(in -> Arrays.asList(in + \"1\", in + \"2\"));\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<Tuple2<String, String>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/Java8APISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":815,"status":"B"}],"commitId":"0e2405490f2056728d1353abbac6f3ea177ae533","commitMessage":"@@@[SPARK-19550][BUILD][CORE][WIP] Remove Java 7 support\n\n- Move external/java8-tests tests into core.  streaming.  sql and remove\n- Remove MaxPermGen and related options\n- Fix some reflection / TODOs around Java 8+ methods\n- Update doc references to 1.7/1.8 differences\n- Remove Java 7/8 related build profiles\n- Update some plugins for better Java 8 compatibility\n- Fix a few Java-related warnings\n\nFor the future:\n\n- Update Java 8 examples to fully use Java 8\n- Update Java tests to use lambdas for simplicity\n- Update Java internal implementations to use lambdas\n\n## How was this patch tested?\n\nExisting tests\n\nAuthor: Sean Owen <sowen@cloudera.com>\n\nCloses #16871 from srowen/SPARK-19493.\n","date":"2017-02-16 20:32:45","modifiedFileCount":"51","status":"B","submitter":"Sean Owen"},{"authorTime":"2017-02-16 20:32:45","codes":[{"authorDate":"2017-02-20 01:42:50","commitOrder":2,"curCode":"  public void testFlatMapValues() {\n    List<List<Tuple2<String, String>>> inputData = stringStringKVStream;\n\n    List<List<Tuple2<String, String>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"california\", \"dodgers1\"),\n                      new Tuple2<>(\"california\", \"dodgers2\"),\n                      new Tuple2<>(\"california\", \"giants1\"),\n                      new Tuple2<>(\"california\", \"giants2\"),\n                      new Tuple2<>(\"new york\", \"yankees1\"),\n                      new Tuple2<>(\"new york\", \"yankees2\"),\n                      new Tuple2<>(\"new york\", \"mets1\"),\n                      new Tuple2<>(\"new york\", \"mets2\")),\n        Arrays.asList(new Tuple2<>(\"california\", \"sharks1\"),\n                      new Tuple2<>(\"california\", \"sharks2\"),\n                      new Tuple2<>(\"california\", \"ducks1\"),\n                      new Tuple2<>(\"california\", \"ducks2\"),\n                      new Tuple2<>(\"new york\", \"rangers1\"),\n                      new Tuple2<>(\"new york\", \"rangers2\"),\n                      new Tuple2<>(\"new york\", \"islanders1\"),\n                      new Tuple2<>(\"new york\", \"islanders2\")));\n\n    JavaDStream<Tuple2<String, String>> stream = JavaTestUtils.attachTestInputStream(\n        ssc, inputData, 1);\n    JavaPairDStream<String, String> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n\n    JavaPairDStream<String, String> flatMapped = pairStream.flatMapValues(in -> {\n        List<String> out = new ArrayList<>();\n        out.add(in + \"1\");\n        out.add(in + \"2\");\n        return out;\n      });\n\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<Tuple2<String, String>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n\n    Assert.assertEquals(expected, result);\n  }\n","date":"2017-02-20 01:42:50","endLine":1364,"groupId":"275","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlatMapValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b9/66cbdca076d7ade49beefe4e328d93dd52e6c4.src","preCode":"  public void testFlatMapValues() {\n    List<List<Tuple2<String, String>>> inputData = stringStringKVStream;\n\n    List<List<Tuple2<String, String>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"california\", \"dodgers1\"),\n                      new Tuple2<>(\"california\", \"dodgers2\"),\n                      new Tuple2<>(\"california\", \"giants1\"),\n                      new Tuple2<>(\"california\", \"giants2\"),\n                      new Tuple2<>(\"new york\", \"yankees1\"),\n                      new Tuple2<>(\"new york\", \"yankees2\"),\n                      new Tuple2<>(\"new york\", \"mets1\"),\n                      new Tuple2<>(\"new york\", \"mets2\")),\n        Arrays.asList(new Tuple2<>(\"california\", \"sharks1\"),\n                      new Tuple2<>(\"california\", \"sharks2\"),\n                      new Tuple2<>(\"california\", \"ducks1\"),\n                      new Tuple2<>(\"california\", \"ducks2\"),\n                      new Tuple2<>(\"new york\", \"rangers1\"),\n                      new Tuple2<>(\"new york\", \"rangers2\"),\n                      new Tuple2<>(\"new york\", \"islanders1\"),\n                      new Tuple2<>(\"new york\", \"islanders2\")));\n\n    JavaDStream<Tuple2<String, String>> stream = JavaTestUtils.attachTestInputStream(\n        ssc, inputData, 1);\n    JavaPairDStream<String, String> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n\n    JavaPairDStream<String, String> flatMapped = pairStream.flatMapValues(\n        new Function<String, Iterable<String>>() {\n          @Override\n          public Iterable<String> call(String in) {\n            List<String> out = new ArrayList<>();\n            out.add(in + \"1\");\n            out.add(in + \"2\");\n            return out;\n          }\n        });\n\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<Tuple2<String, String>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":1327,"status":"M"},{"authorDate":"2017-02-16 20:32:45","commitOrder":2,"curCode":"  public void testFlatMapValues() {\n    List<List<Tuple2<String, String>>> inputData = stringStringKVStream;\n\n    List<List<Tuple2<String, String>>> expected = Arrays.asList(\n      Arrays.asList(new Tuple2<>(\"california\", \"dodgers1\"),\n        new Tuple2<>(\"california\", \"dodgers2\"),\n        new Tuple2<>(\"california\", \"giants1\"),\n        new Tuple2<>(\"california\", \"giants2\"),\n        new Tuple2<>(\"new york\", \"yankees1\"),\n        new Tuple2<>(\"new york\", \"yankees2\"),\n        new Tuple2<>(\"new york\", \"mets1\"),\n        new Tuple2<>(\"new york\", \"mets2\")),\n      Arrays.asList(new Tuple2<>(\"california\", \"sharks1\"),\n        new Tuple2<>(\"california\", \"sharks2\"),\n        new Tuple2<>(\"california\", \"ducks1\"),\n        new Tuple2<>(\"california\", \"ducks2\"),\n        new Tuple2<>(\"new york\", \"rangers1\"),\n        new Tuple2<>(\"new york\", \"rangers2\"),\n        new Tuple2<>(\"new york\", \"islanders1\"),\n        new Tuple2<>(\"new york\", \"islanders2\")));\n\n    JavaDStream<Tuple2<String, String>> stream = JavaTestUtils.attachTestInputStream(\n      ssc, inputData, 1);\n    JavaPairDStream<String, String> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n    JavaPairDStream<String, String> flatMapped =\n      pairStream.flatMapValues(in -> Arrays.asList(in + \"1\", in + \"2\"));\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<Tuple2<String, String>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n    Assert.assertEquals(expected, result);\n  }\n","date":"2017-02-16 20:32:45","endLine":845,"groupId":"275","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlatMapValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/64/6cb97066f3501e7d1f5c159c770ea4d0dd2fca.src","preCode":"  public void testFlatMapValues() {\n    List<List<Tuple2<String, String>>> inputData = stringStringKVStream;\n\n    List<List<Tuple2<String, String>>> expected = Arrays.asList(\n      Arrays.asList(new Tuple2<>(\"california\", \"dodgers1\"),\n        new Tuple2<>(\"california\", \"dodgers2\"),\n        new Tuple2<>(\"california\", \"giants1\"),\n        new Tuple2<>(\"california\", \"giants2\"),\n        new Tuple2<>(\"new york\", \"yankees1\"),\n        new Tuple2<>(\"new york\", \"yankees2\"),\n        new Tuple2<>(\"new york\", \"mets1\"),\n        new Tuple2<>(\"new york\", \"mets2\")),\n      Arrays.asList(new Tuple2<>(\"california\", \"sharks1\"),\n        new Tuple2<>(\"california\", \"sharks2\"),\n        new Tuple2<>(\"california\", \"ducks1\"),\n        new Tuple2<>(\"california\", \"ducks2\"),\n        new Tuple2<>(\"new york\", \"rangers1\"),\n        new Tuple2<>(\"new york\", \"rangers2\"),\n        new Tuple2<>(\"new york\", \"islanders1\"),\n        new Tuple2<>(\"new york\", \"islanders2\")));\n\n    JavaDStream<Tuple2<String, String>> stream = JavaTestUtils.attachTestInputStream(\n      ssc, inputData, 1);\n    JavaPairDStream<String, String> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n    JavaPairDStream<String, String> flatMapped =\n      pairStream.flatMapValues(in -> Arrays.asList(in + \"1\", in + \"2\"));\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<Tuple2<String, String>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/Java8APISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":815,"status":"N"}],"commitId":"1487c9af20a333ead55955acf4c0aa323bea0d07","commitMessage":"@@@[SPARK-19534][TESTS] Convert Java tests to use lambdas.  Java 8 features\n\n## What changes were proposed in this pull request?\n\nConvert tests to use Java 8 lambdas.  and modest related fixes to surrounding code.\n\n## How was this patch tested?\n\nJenkins tests\n\nAuthor: Sean Owen <sowen@cloudera.com>\n\nCloses #16964 from srowen/SPARK-19534.\n","date":"2017-02-20 01:42:50","modifiedFileCount":"45","status":"M","submitter":"Sean Owen"},{"authorTime":"2018-10-13 07:10:59","codes":[{"authorDate":"2018-10-13 07:10:59","commitOrder":3,"curCode":"  public void testFlatMapValues() {\n    List<List<Tuple2<String, String>>> inputData = stringStringKVStream;\n\n    List<List<Tuple2<String, String>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"california\", \"dodgers1\"),\n                      new Tuple2<>(\"california\", \"dodgers2\"),\n                      new Tuple2<>(\"california\", \"giants1\"),\n                      new Tuple2<>(\"california\", \"giants2\"),\n                      new Tuple2<>(\"new york\", \"yankees1\"),\n                      new Tuple2<>(\"new york\", \"yankees2\"),\n                      new Tuple2<>(\"new york\", \"mets1\"),\n                      new Tuple2<>(\"new york\", \"mets2\")),\n        Arrays.asList(new Tuple2<>(\"california\", \"sharks1\"),\n                      new Tuple2<>(\"california\", \"sharks2\"),\n                      new Tuple2<>(\"california\", \"ducks1\"),\n                      new Tuple2<>(\"california\", \"ducks2\"),\n                      new Tuple2<>(\"new york\", \"rangers1\"),\n                      new Tuple2<>(\"new york\", \"rangers2\"),\n                      new Tuple2<>(\"new york\", \"islanders1\"),\n                      new Tuple2<>(\"new york\", \"islanders2\")));\n\n    JavaDStream<Tuple2<String, String>> stream = JavaTestUtils.attachTestInputStream(\n        ssc, inputData, 1);\n    JavaPairDStream<String, String> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n\n    JavaPairDStream<String, String> flatMapped = pairStream.flatMapValues(in -> {\n        List<String> out = new ArrayList<>();\n        out.add(in + \"1\");\n        out.add(in + \"2\");\n        return out.iterator();\n      });\n\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<Tuple2<String, String>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n\n    Assert.assertEquals(expected, result);\n  }\n","date":"2018-10-13 07:10:59","endLine":1365,"groupId":"10229","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlatMapValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/c7/cde5674f547323894bd44656fa078e05f302de.src","preCode":"  public void testFlatMapValues() {\n    List<List<Tuple2<String, String>>> inputData = stringStringKVStream;\n\n    List<List<Tuple2<String, String>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"california\", \"dodgers1\"),\n                      new Tuple2<>(\"california\", \"dodgers2\"),\n                      new Tuple2<>(\"california\", \"giants1\"),\n                      new Tuple2<>(\"california\", \"giants2\"),\n                      new Tuple2<>(\"new york\", \"yankees1\"),\n                      new Tuple2<>(\"new york\", \"yankees2\"),\n                      new Tuple2<>(\"new york\", \"mets1\"),\n                      new Tuple2<>(\"new york\", \"mets2\")),\n        Arrays.asList(new Tuple2<>(\"california\", \"sharks1\"),\n                      new Tuple2<>(\"california\", \"sharks2\"),\n                      new Tuple2<>(\"california\", \"ducks1\"),\n                      new Tuple2<>(\"california\", \"ducks2\"),\n                      new Tuple2<>(\"new york\", \"rangers1\"),\n                      new Tuple2<>(\"new york\", \"rangers2\"),\n                      new Tuple2<>(\"new york\", \"islanders1\"),\n                      new Tuple2<>(\"new york\", \"islanders2\")));\n\n    JavaDStream<Tuple2<String, String>> stream = JavaTestUtils.attachTestInputStream(\n        ssc, inputData, 1);\n    JavaPairDStream<String, String> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n\n    JavaPairDStream<String, String> flatMapped = pairStream.flatMapValues(in -> {\n        List<String> out = new ArrayList<>();\n        out.add(in + \"1\");\n        out.add(in + \"2\");\n        return out;\n      });\n\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<Tuple2<String, String>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":1328,"status":"M"},{"authorDate":"2018-10-13 07:10:59","commitOrder":3,"curCode":"  public void testFlatMapValues() {\n    List<List<Tuple2<String, String>>> inputData = stringStringKVStream;\n\n    List<List<Tuple2<String, String>>> expected = Arrays.asList(\n      Arrays.asList(new Tuple2<>(\"california\", \"dodgers1\"),\n        new Tuple2<>(\"california\", \"dodgers2\"),\n        new Tuple2<>(\"california\", \"giants1\"),\n        new Tuple2<>(\"california\", \"giants2\"),\n        new Tuple2<>(\"new york\", \"yankees1\"),\n        new Tuple2<>(\"new york\", \"yankees2\"),\n        new Tuple2<>(\"new york\", \"mets1\"),\n        new Tuple2<>(\"new york\", \"mets2\")),\n      Arrays.asList(new Tuple2<>(\"california\", \"sharks1\"),\n        new Tuple2<>(\"california\", \"sharks2\"),\n        new Tuple2<>(\"california\", \"ducks1\"),\n        new Tuple2<>(\"california\", \"ducks2\"),\n        new Tuple2<>(\"new york\", \"rangers1\"),\n        new Tuple2<>(\"new york\", \"rangers2\"),\n        new Tuple2<>(\"new york\", \"islanders1\"),\n        new Tuple2<>(\"new york\", \"islanders2\")));\n\n    JavaDStream<Tuple2<String, String>> stream = JavaTestUtils.attachTestInputStream(\n      ssc, inputData, 1);\n    JavaPairDStream<String, String> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n    JavaPairDStream<String, String> flatMapped =\n      pairStream.flatMapValues(in -> Arrays.asList(in + \"1\", in + \"2\").iterator());\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<Tuple2<String, String>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n    Assert.assertEquals(expected, result);\n  }\n","date":"2018-10-13 07:10:59","endLine":848,"groupId":"10229","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlatMapValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b1/54f0e3ac455e0e2fe43a6a02c96a68f1b3f3cc.src","preCode":"  public void testFlatMapValues() {\n    List<List<Tuple2<String, String>>> inputData = stringStringKVStream;\n\n    List<List<Tuple2<String, String>>> expected = Arrays.asList(\n      Arrays.asList(new Tuple2<>(\"california\", \"dodgers1\"),\n        new Tuple2<>(\"california\", \"dodgers2\"),\n        new Tuple2<>(\"california\", \"giants1\"),\n        new Tuple2<>(\"california\", \"giants2\"),\n        new Tuple2<>(\"new york\", \"yankees1\"),\n        new Tuple2<>(\"new york\", \"yankees2\"),\n        new Tuple2<>(\"new york\", \"mets1\"),\n        new Tuple2<>(\"new york\", \"mets2\")),\n      Arrays.asList(new Tuple2<>(\"california\", \"sharks1\"),\n        new Tuple2<>(\"california\", \"sharks2\"),\n        new Tuple2<>(\"california\", \"ducks1\"),\n        new Tuple2<>(\"california\", \"ducks2\"),\n        new Tuple2<>(\"new york\", \"rangers1\"),\n        new Tuple2<>(\"new york\", \"rangers2\"),\n        new Tuple2<>(\"new york\", \"islanders1\"),\n        new Tuple2<>(\"new york\", \"islanders2\")));\n\n    JavaDStream<Tuple2<String, String>> stream = JavaTestUtils.attachTestInputStream(\n      ssc, inputData, 1);\n    JavaPairDStream<String, String> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n    JavaPairDStream<String, String> flatMapped =\n      pairStream.flatMapValues(in -> Arrays.asList(in + \"1\", in + \"2\"));\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<Tuple2<String, String>>> result = JavaTestUtils.runStreams(ssc, 2, 2);\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/Java8APISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":818,"status":"M"}],"commitId":"1ddfab8c4f37f8a87a0203610f52fafc0debdea0","commitMessage":"@@@[SPARK-19287][CORE][STREAMING] JavaPairRDD flatMapValues requires function returning Iterable.  not Iterator\n\n## What changes were proposed in this pull request?\n\nFix old oversight in API: Java `flatMapValues` needs a `FlatMapFunction`\n\n## How was this patch tested?\n\nExisting tests.\n\nCloses #22690 from srowen/SPARK-19287.\n\nAuthored-by: Sean Owen <sean.owen@databricks.com>\nSigned-off-by: Sean Owen <sean.owen@databricks.com>\n","date":"2018-10-13 07:10:59","modifiedFileCount":"2","status":"M","submitter":"Sean Owen"}]
