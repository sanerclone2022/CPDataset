[{"authorTime":"2019-11-19 16:10:22","codes":[{"authorDate":"2019-11-19 16:10:22","commitOrder":1,"curCode":"  public void testCompareLongsAsLittleEndian() {\n    long arrayOffset = 12;\n\n    long[] arr1 = new long[2];\n    Platform.putLong(arr1, arrayOffset, 0x0100000000000000L);\n    long[] arr2 = new long[2];\n    Platform.putLong(arr2, arrayOffset + 4, 0x0000000000000001L);\n    \r\n    \r\n    int result1 = binaryComparator.compare(arr1, arrayOffset, 8, arr2, arrayOffset + 4, 8);\n\n    long[] arr3 = new long[2];\n    Platform.putLong(arr3, arrayOffset, 0x0100000000000000L);\n    long[] arr4 = new long[2];\n    Platform.putLong(arr4, arrayOffset, 0x0000000000000001L);\n    \r\n    int result2 = binaryComparator.compare(arr3, arrayOffset, 8, arr4, arrayOffset, 8);\n\n    Assert.assertEquals(result1, result2);\n  }\n","date":"2019-11-19 16:10:22","endLine":346,"groupId":"3580","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCompareLongsAsLittleEndian","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/68/f984ae0c1e3583f740018ddc777c3bd8511c72.src","preCode":"  public void testCompareLongsAsLittleEndian() {\n    long arrayOffset = 12;\n\n    long[] arr1 = new long[2];\n    Platform.putLong(arr1, arrayOffset, 0x0100000000000000L);\n    long[] arr2 = new long[2];\n    Platform.putLong(arr2, arrayOffset + 4, 0x0000000000000001L);\n    \r\n    \r\n    int result1 = binaryComparator.compare(arr1, arrayOffset, 8, arr2, arrayOffset + 4, 8);\n\n    long[] arr3 = new long[2];\n    Platform.putLong(arr3, arrayOffset, 0x0100000000000000L);\n    long[] arr4 = new long[2];\n    Platform.putLong(arr4, arrayOffset, 0x0000000000000001L);\n    \r\n    int result2 = binaryComparator.compare(arr3, arrayOffset, 8, arr4, arrayOffset, 8);\n\n    Assert.assertEquals(result1, result2);\n  }\n","realPath":"sql/core/src/test/java/test/org/apache/spark/sql/execution/sort/RecordBinaryComparatorSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"B"},{"authorDate":"2019-11-19 16:10:22","commitOrder":1,"curCode":"  public void testCompareLongsAsUnsigned() {\n    long arrayOffset = 12;\n\n    long[] arr1 = new long[2];\n    Platform.putLong(arr1, arrayOffset + 4, 0xa000000000000000L);\n    long[] arr2 = new long[2];\n    Platform.putLong(arr2, arrayOffset + 4, 0x0000000000000000L);\n    \r\n    int result1 = binaryComparator.compare(arr1, arrayOffset + 4, 8, arr2, arrayOffset + 4, 8);\n\n    long[] arr3 = new long[2];\n    Platform.putLong(arr3, arrayOffset, 0xa000000000000000L);\n    long[] arr4 = new long[2];\n    Platform.putLong(arr4, arrayOffset, 0x0000000000000000L);\n    \r\n    \r\n    int result2 = binaryComparator.compare(arr3, arrayOffset, 8, arr4, arrayOffset, 8);\n\n    Assert.assertEquals(result1, result2);\n  }\n","date":"2019-11-19 16:10:22","endLine":368,"groupId":"929","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCompareLongsAsUnsigned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/68/f984ae0c1e3583f740018ddc777c3bd8511c72.src","preCode":"  public void testCompareLongsAsUnsigned() {\n    long arrayOffset = 12;\n\n    long[] arr1 = new long[2];\n    Platform.putLong(arr1, arrayOffset + 4, 0xa000000000000000L);\n    long[] arr2 = new long[2];\n    Platform.putLong(arr2, arrayOffset + 4, 0x0000000000000000L);\n    \r\n    int result1 = binaryComparator.compare(arr1, arrayOffset + 4, 8, arr2, arrayOffset + 4, 8);\n\n    long[] arr3 = new long[2];\n    Platform.putLong(arr3, arrayOffset, 0xa000000000000000L);\n    long[] arr4 = new long[2];\n    Platform.putLong(arr4, arrayOffset, 0x0000000000000000L);\n    \r\n    \r\n    int result2 = binaryComparator.compare(arr3, arrayOffset, 8, arr4, arrayOffset, 8);\n\n    Assert.assertEquals(result1, result2);\n  }\n","realPath":"sql/core/src/test/java/test/org/apache/spark/sql/execution/sort/RecordBinaryComparatorSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"B"}],"commitId":"ffc97530371433bc0221e06d8c1d11af8d92bd94","commitMessage":"@@@[SPARK-29918][SQL] RecordBinaryComparator should check endianness when compared by long\n\n\n What changes were proposed in this pull request?\nThis PR try to make sure the comparison results of  `compared by 8 bytes at a time` and `compared by bytes wise` in RecordBinaryComparator is *consistent*.  by reverse long bytes if it is little-endian and using Long.compareUnsigned.\n\n\n Why are the changes needed?\nIf the architecture supports unaligned or the offset is 8 bytes aligned.  `RecordBinaryComparator` compare 8 bytes at a time by reading 8 bytes as a long.  Related code is\n```\n    if (Platform.unaligned() || (((leftOff + i) % 8 == 0) && ((rightOff + i) % 8 == 0))) {\n      while (i <= leftLen - 8) {\n        final long v1 = Platform.getLong(leftObj.  leftOff + i);\n        final long v2 = Platform.getLong(rightObj.  rightOff + i);\n        if (v1 != v2) {\n          return v1 > v2 ? 1 : -1;\n        }\n        i += 8;\n      }\n    }\n```\n\nOtherwise.  it will compare bytes by bytes.? Related code is\n```\n    while (i < leftLen) {\n      final int v1 = Platform.getByte(leftObj.  leftOff + i) & 0xff;\n      final int v2 = Platform.getByte(rightObj.  rightOff + i) & 0xff;\n      if (v1 != v2) {\n        return v1 > v2 ? 1 : -1;\n      }\n      i += 1;\n    }\n```\n\nHowever.  on little-endian machine. ? the result of *compared by a long value* and *compared bytes by bytes* maybe different.\n\nFor two same records.  its offsets may vary in the first run and second run.  which will lead to compare them using long comparison or byte-by-byte comparison.  the result maybe different.\n\n\n Does this PR introduce any user-facing change?\nNo\n\n\n How was this patch tested?\nAdd new test cases in RecordBinaryComparatorSuite\n\nCloses #26548 from WangGuangxin/binary_comparator.\n\nAuthored-by: wangguangxin.cn <wangguangxin.cn@bytedance.com>\nSigned-off-by: Wenchen Fan <wenchen@databricks.com>\n","date":"2019-11-19 16:10:22","modifiedFileCount":"2","status":"B","submitter":"wangguangxin.cn"},{"authorTime":"2019-12-19 17:01:40","codes":[{"authorDate":"2019-12-19 17:01:40","commitOrder":2,"curCode":"  public void testCompareLongsAsLittleEndian() {\n    long arrayOffset = Platform.LONG_ARRAY_OFFSET + 4;\n\n    long[] arr1 = new long[2];\n    Platform.putLong(arr1, arrayOffset, 0x0100000000000000L);\n    long[] arr2 = new long[2];\n    Platform.putLong(arr2, arrayOffset + 4, 0x0000000000000001L);\n    \r\n    \r\n    int result1 = binaryComparator.compare(arr1, arrayOffset, 8, arr2, arrayOffset + 4, 8);\n\n    long[] arr3 = new long[2];\n    Platform.putLong(arr3, arrayOffset, 0x0100000000000000L);\n    long[] arr4 = new long[2];\n    Platform.putLong(arr4, arrayOffset, 0x0000000000000001L);\n    \r\n    int result2 = binaryComparator.compare(arr3, arrayOffset, 8, arr4, arrayOffset, 8);\n\n    Assert.assertEquals(result1, result2);\n  }\n","date":"2019-12-19 17:01:40","endLine":346,"groupId":"10408","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCompareLongsAsLittleEndian","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/56/4e76737ecde41991e5dc78997beb75fcf2510b.src","preCode":"  public void testCompareLongsAsLittleEndian() {\n    long arrayOffset = 12;\n\n    long[] arr1 = new long[2];\n    Platform.putLong(arr1, arrayOffset, 0x0100000000000000L);\n    long[] arr2 = new long[2];\n    Platform.putLong(arr2, arrayOffset + 4, 0x0000000000000001L);\n    \r\n    \r\n    int result1 = binaryComparator.compare(arr1, arrayOffset, 8, arr2, arrayOffset + 4, 8);\n\n    long[] arr3 = new long[2];\n    Platform.putLong(arr3, arrayOffset, 0x0100000000000000L);\n    long[] arr4 = new long[2];\n    Platform.putLong(arr4, arrayOffset, 0x0000000000000001L);\n    \r\n    int result2 = binaryComparator.compare(arr3, arrayOffset, 8, arr4, arrayOffset, 8);\n\n    Assert.assertEquals(result1, result2);\n  }\n","realPath":"sql/core/src/test/java/test/org/apache/spark/sql/execution/sort/RecordBinaryComparatorSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"},{"authorDate":"2019-12-19 17:01:40","commitOrder":2,"curCode":"  public void testCompareLongsAsUnsigned() {\n    long arrayOffset = Platform.LONG_ARRAY_OFFSET + 4;\n\n    long[] arr1 = new long[2];\n    Platform.putLong(arr1, arrayOffset + 4, 0xa000000000000000L);\n    long[] arr2 = new long[2];\n    Platform.putLong(arr2, arrayOffset + 4, 0x0000000000000000L);\n    \r\n    int result1 = binaryComparator.compare(arr1, arrayOffset + 4, 8, arr2, arrayOffset + 4, 8);\n\n    long[] arr3 = new long[2];\n    Platform.putLong(arr3, arrayOffset, 0xa000000000000000L);\n    long[] arr4 = new long[2];\n    Platform.putLong(arr4, arrayOffset, 0x0000000000000000L);\n    \r\n    \r\n    int result2 = binaryComparator.compare(arr3, arrayOffset, 8, arr4, arrayOffset, 8);\n\n    Assert.assertEquals(result1, result2);\n  }\n","date":"2019-12-19 17:01:40","endLine":368,"groupId":"10408","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCompareLongsAsUnsigned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/56/4e76737ecde41991e5dc78997beb75fcf2510b.src","preCode":"  public void testCompareLongsAsUnsigned() {\n    long arrayOffset = 12;\n\n    long[] arr1 = new long[2];\n    Platform.putLong(arr1, arrayOffset + 4, 0xa000000000000000L);\n    long[] arr2 = new long[2];\n    Platform.putLong(arr2, arrayOffset + 4, 0x0000000000000000L);\n    \r\n    int result1 = binaryComparator.compare(arr1, arrayOffset + 4, 8, arr2, arrayOffset + 4, 8);\n\n    long[] arr3 = new long[2];\n    Platform.putLong(arr3, arrayOffset, 0xa000000000000000L);\n    long[] arr4 = new long[2];\n    Platform.putLong(arr4, arrayOffset, 0x0000000000000000L);\n    \r\n    \r\n    int result2 = binaryComparator.compare(arr3, arrayOffset, 8, arr4, arrayOffset, 8);\n\n    Assert.assertEquals(result1, result2);\n  }\n","realPath":"sql/core/src/test/java/test/org/apache/spark/sql/execution/sort/RecordBinaryComparatorSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"}],"commitId":"2af5237fe889ddc0926ca7af8eab0fec5622ecbb","commitMessage":"@@@[SPARK-29918][SQL][FOLLOWUP][TEST] Fix arrayOffset in `RecordBinaryComparatorSuite`\n\n\n What changes were proposed in this pull request?\n\nAs mentioned in https://github.com/apache/spark/pull/26548#pullrequestreview-334345333.  some test cases in `RecordBinaryComparatorSuite` use a fixed arrayOffset when writing to long arrays.  this  could lead to weird stuff including crashing with a SIGSEGV.\n\nThis PR fix the problem by computing the arrayOffset based on `Platform.LONG_ARRAY_OFFSET`.\n\n\n How was this patch tested?\nTested locally. Previously.  when we try to add `System.gc()` between write into long array and compare by RecordBinaryComparator.  there is a chance to hit JVM crash with SIGSEGV like:\n```\n\n## A fatal error has been detected by the Java Runtime Environment:\n\n##  SIGSEGV (0xb) at pc=0x00007efc66970bcb.  pid=11831.  tid=0x00007efc0f9f9700\n\n## JRE version: OpenJDK Runtime Environment (8.0_222-b10) (build 1.8.0_222-8u222-b10-1ubuntu1~16.04.1-b10)\n# Java VM: OpenJDK 64-Bit Server VM (25.222-b10 mixed mode linux-amd64 compressed oops)\n# Problematic frame:\n# V  [libjvm.so+0x5fbbcb]\n\n## Core dump written. Default location: /home/jenkins/workspace/sql/core/core or core.11831\n\n## An error report file with more information is saved as:\n# /home/jenkins/workspace/sql/core/hs_err_pid11831.log\n\n## If you would like to submit a bug report.  please visit:\n#   http://bugreport.java.com/bugreport/crash.jsp\n\n#```\nAfter the fix those test cases didn't crash the JVM anymore.\n\nCloses #26939 from jiangxb1987/rbc.\n\nAuthored-by: Xingbo Jiang <xingbo.jiang@databricks.com>\nSigned-off-by: Wenchen Fan <wenchen@databricks.com>\n","date":"2019-12-19 17:01:40","modifiedFileCount":"1","status":"M","submitter":"Xingbo Jiang"}]
