[{"authorTime":"2015-11-05 00:32:08","codes":[{"authorDate":"2015-08-03 02:50:17","commitOrder":2,"curCode":"  public void runPrefixSpan() {\n    JavaRDD<List<List<Integer>>> sequences = sc.parallelize(Arrays.asList(\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3)),\n      Arrays.asList(Arrays.asList(1), Arrays.asList(3, 2), Arrays.asList(1, 2)),\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(5)),\n      Arrays.asList(Arrays.asList(6))\n    ), 2);\n    PrefixSpan prefixSpan = new PrefixSpan()\n      .setMinSupport(0.5)\n      .setMaxPatternLength(5);\n    PrefixSpanModel<Integer> model = prefixSpan.run(sequences);\n    JavaRDD<FreqSequence<Integer>> freqSeqs = model.freqSequences().toJavaRDD();\n    List<FreqSequence<Integer>> localFreqSeqs = freqSeqs.collect();\n    Assert.assertEquals(5, localFreqSeqs.size());\n    \r\n    for (PrefixSpan.FreqSequence<Integer> freqSeq: localFreqSeqs) {\n      List<List<Integer>> seq = freqSeq.javaSequence();\n      long freq = freqSeq.freq();\n    }\n  }\n","date":"2015-08-03 02:50:17","endLine":66,"groupId":"3145","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runPrefixSpan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/34/daf5fbde80fb33fe7685ecf33891fb8b13c8de.src","preCode":"  public void runPrefixSpan() {\n    JavaRDD<List<List<Integer>>> sequences = sc.parallelize(Arrays.asList(\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3)),\n      Arrays.asList(Arrays.asList(1), Arrays.asList(3, 2), Arrays.asList(1, 2)),\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(5)),\n      Arrays.asList(Arrays.asList(6))\n    ), 2);\n    PrefixSpan prefixSpan = new PrefixSpan()\n      .setMinSupport(0.5)\n      .setMaxPatternLength(5);\n    PrefixSpanModel<Integer> model = prefixSpan.run(sequences);\n    JavaRDD<FreqSequence<Integer>> freqSeqs = model.freqSequences().toJavaRDD();\n    List<FreqSequence<Integer>> localFreqSeqs = freqSeqs.collect();\n    Assert.assertEquals(5, localFreqSeqs.size());\n    \r\n    for (PrefixSpan.FreqSequence<Integer> freqSeq: localFreqSeqs) {\n      List<List<Integer>> seq = freqSeq.javaSequence();\n      long freq = freqSeq.freq();\n    }\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/fpm/JavaPrefixSpanSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"NB"},{"authorDate":"2015-11-05 00:32:08","commitOrder":2,"curCode":"  public static void main(String[] args) {\n\n    SparkConf sparkConf = new SparkConf().setAppName(\"JavaPrefixSpanExample\");\n    JavaSparkContext sc = new JavaSparkContext(sparkConf);\n\n    \r\n    JavaRDD<List<List<Integer>>> sequences = sc.parallelize(Arrays.asList(\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3)),\n      Arrays.asList(Arrays.asList(1), Arrays.asList(3, 2), Arrays.asList(1, 2)),\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(5)),\n      Arrays.asList(Arrays.asList(6))\n    ), 2);\n    PrefixSpan prefixSpan = new PrefixSpan()\n      .setMinSupport(0.5)\n      .setMaxPatternLength(5);\n    PrefixSpanModel<Integer> model = prefixSpan.run(sequences);\n    for (PrefixSpan.FreqSequence<Integer> freqSeq: model.freqSequences().toJavaRDD().collect()) {\n      System.out.println(freqSeq.javaSequence() + \", \" + freqSeq.freq());\n    }\n    \r\n  }\n","date":"2015-11-05 00:32:08","endLine":54,"groupId":"3145","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/68/ec7c1e6ebe0f54d357342b7975389395d5edf5.src","preCode":"  public static void main(String[] args) {\n\n    SparkConf sparkConf = new SparkConf().setAppName(\"JavaPrefixSpanExample\");\n    JavaSparkContext sc = new JavaSparkContext(sparkConf);\n\n    \r\n    JavaRDD<List<List<Integer>>> sequences = sc.parallelize(Arrays.asList(\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3)),\n      Arrays.asList(Arrays.asList(1), Arrays.asList(3, 2), Arrays.asList(1, 2)),\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(5)),\n      Arrays.asList(Arrays.asList(6))\n    ), 2);\n    PrefixSpan prefixSpan = new PrefixSpan()\n      .setMinSupport(0.5)\n      .setMaxPatternLength(5);\n    PrefixSpanModel<Integer> model = prefixSpan.run(sequences);\n    for (PrefixSpan.FreqSequence<Integer> freqSeq: model.freqSequences().toJavaRDD().collect()) {\n      System.out.println(freqSeq.javaSequence() + \", \" + freqSeq.freq());\n    }\n    \r\n  }\n","realPath":"examples/src/main/java/org/apache/spark/examples/mllib/JavaPrefixSpanExample.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"B"}],"commitId":"820064e613609bbf7edd726d982da1de60bf417a","commitMessage":"@@@[SPARK-11380][DOCS] Replace example code in mllib-frequent-pattern-mining.md using include_example\n\nAuthor: Pravin Gadakh <pravingadakh177@gmail.com>\nAuthor: Pravin Gadakh <prgadakh@in.ibm.com>\n\nCloses #9340 from pravingadakh/SPARK-11380.\n","date":"2015-11-05 00:32:08","modifiedFileCount":"0","status":"M","submitter":"Pravin Gadakh"},{"authorTime":"2016-03-09 18:12:23","codes":[{"authorDate":"2015-08-03 02:50:17","commitOrder":3,"curCode":"  public void runPrefixSpan() {\n    JavaRDD<List<List<Integer>>> sequences = sc.parallelize(Arrays.asList(\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3)),\n      Arrays.asList(Arrays.asList(1), Arrays.asList(3, 2), Arrays.asList(1, 2)),\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(5)),\n      Arrays.asList(Arrays.asList(6))\n    ), 2);\n    PrefixSpan prefixSpan = new PrefixSpan()\n      .setMinSupport(0.5)\n      .setMaxPatternLength(5);\n    PrefixSpanModel<Integer> model = prefixSpan.run(sequences);\n    JavaRDD<FreqSequence<Integer>> freqSeqs = model.freqSequences().toJavaRDD();\n    List<FreqSequence<Integer>> localFreqSeqs = freqSeqs.collect();\n    Assert.assertEquals(5, localFreqSeqs.size());\n    \r\n    for (PrefixSpan.FreqSequence<Integer> freqSeq: localFreqSeqs) {\n      List<List<Integer>> seq = freqSeq.javaSequence();\n      long freq = freqSeq.freq();\n    }\n  }\n","date":"2015-08-03 02:50:17","endLine":66,"groupId":"3145","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runPrefixSpan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/34/daf5fbde80fb33fe7685ecf33891fb8b13c8de.src","preCode":"  public void runPrefixSpan() {\n    JavaRDD<List<List<Integer>>> sequences = sc.parallelize(Arrays.asList(\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3)),\n      Arrays.asList(Arrays.asList(1), Arrays.asList(3, 2), Arrays.asList(1, 2)),\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(5)),\n      Arrays.asList(Arrays.asList(6))\n    ), 2);\n    PrefixSpan prefixSpan = new PrefixSpan()\n      .setMinSupport(0.5)\n      .setMaxPatternLength(5);\n    PrefixSpanModel<Integer> model = prefixSpan.run(sequences);\n    JavaRDD<FreqSequence<Integer>> freqSeqs = model.freqSequences().toJavaRDD();\n    List<FreqSequence<Integer>> localFreqSeqs = freqSeqs.collect();\n    Assert.assertEquals(5, localFreqSeqs.size());\n    \r\n    for (PrefixSpan.FreqSequence<Integer> freqSeq: localFreqSeqs) {\n      List<List<Integer>> seq = freqSeq.javaSequence();\n      long freq = freqSeq.freq();\n    }\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/fpm/JavaPrefixSpanSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"},{"authorDate":"2016-03-09 18:12:23","commitOrder":3,"curCode":"  public static void main(String[] args) {\n\n    SparkConf sparkConf = new SparkConf().setAppName(\"JavaPrefixSpanExample\");\n    JavaSparkContext sc = new JavaSparkContext(sparkConf);\n\n    \r\n    JavaRDD<List<List<Integer>>> sequences = sc.parallelize(Arrays.asList(\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3)),\n      Arrays.asList(Arrays.asList(1), Arrays.asList(3, 2), Arrays.asList(1, 2)),\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(5)),\n      Arrays.asList(Arrays.asList(6))\n    ), 2);\n    PrefixSpan prefixSpan = new PrefixSpan()\n      .setMinSupport(0.5)\n      .setMaxPatternLength(5);\n    PrefixSpanModel<Integer> model = prefixSpan.run(sequences);\n    for (PrefixSpan.FreqSequence<Integer> freqSeq: model.freqSequences().toJavaRDD().collect()) {\n      System.out.println(freqSeq.javaSequence() + \", \" + freqSeq.freq());\n    }\n    \r\n\n    sc.stop();\n  }\n","date":"2016-03-09 18:12:23","endLine":56,"groupId":"3145","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/16/340759412916245fe7fcf94ee268fa51ceca7a.src","preCode":"  public static void main(String[] args) {\n\n    SparkConf sparkConf = new SparkConf().setAppName(\"JavaPrefixSpanExample\");\n    JavaSparkContext sc = new JavaSparkContext(sparkConf);\n\n    \r\n    JavaRDD<List<List<Integer>>> sequences = sc.parallelize(Arrays.asList(\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3)),\n      Arrays.asList(Arrays.asList(1), Arrays.asList(3, 2), Arrays.asList(1, 2)),\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(5)),\n      Arrays.asList(Arrays.asList(6))\n    ), 2);\n    PrefixSpan prefixSpan = new PrefixSpan()\n      .setMinSupport(0.5)\n      .setMaxPatternLength(5);\n    PrefixSpanModel<Integer> model = prefixSpan.run(sequences);\n    for (PrefixSpan.FreqSequence<Integer> freqSeq: model.freqSequences().toJavaRDD().collect()) {\n      System.out.println(freqSeq.javaSequence() + \", \" + freqSeq.freq());\n    }\n    \r\n  }\n","realPath":"examples/src/main/java/org/apache/spark/examples/mllib/JavaPrefixSpanExample.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"f3201aeeb06aae3b11e8cf6ee9693182dd896b32","commitMessage":"@@@[SPARK-13692][CORE][SQL] Fix trivial Coverity/Checkstyle defects\n\n## What changes were proposed in this pull request?\n\nThis issue fixes the following potential bugs and Java coding style detected by Coverity and Checkstyle.\n\n- Implement both null and type checking in equals functions.\n- Fix wrong type casting logic in SimpleJavaBean2.equals.\n- Add `implement Cloneable` to `UTF8String` and `SortedIterator`.\n- Remove dereferencing before null check in `AbstractBytesToBytesMapSuite`.\n- Fix coding style: Add '{}' to single `for` statement in mllib examples.\n- Remove unused imports in `ColumnarBatch` and `JavaKinesisStreamSuite`.\n- Remove unused fields in `ChunkFetchIntegrationSuite`.\n- Add `stop()` to prevent resource leak.\n\nPlease note that the last two checkstyle errors exist on newly added commits after [SPARK-13583](https://issues.apache.org/jira/browse/SPARK-13583).\n\n## How was this patch tested?\n\nmanual via `./dev/lint-java` and Coverity site.\n\nAuthor: Dongjoon Hyun <dongjoon@apache.org>\n\nCloses #11530 from dongjoon-hyun/SPARK-13692.\n","date":"2016-03-09 18:12:23","modifiedFileCount":"31","status":"M","submitter":"Dongjoon Hyun"},{"authorTime":"2016-03-09 18:12:23","codes":[{"authorDate":"2016-05-11 02:17:47","commitOrder":4,"curCode":"  public void runPrefixSpan() {\n    JavaRDD<List<List<Integer>>> sequences = jsc.parallelize(Arrays.asList(\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3)),\n      Arrays.asList(Arrays.asList(1), Arrays.asList(3, 2), Arrays.asList(1, 2)),\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(5)),\n      Arrays.asList(Arrays.asList(6))\n    ), 2);\n    PrefixSpan prefixSpan = new PrefixSpan()\n      .setMinSupport(0.5)\n      .setMaxPatternLength(5);\n    PrefixSpanModel<Integer> model = prefixSpan.run(sequences);\n    JavaRDD<FreqSequence<Integer>> freqSeqs = model.freqSequences().toJavaRDD();\n    List<FreqSequence<Integer>> localFreqSeqs = freqSeqs.collect();\n    Assert.assertEquals(5, localFreqSeqs.size());\n    \r\n    for (PrefixSpan.FreqSequence<Integer> freqSeq : localFreqSeqs) {\n      List<List<Integer>> seq = freqSeq.javaSequence();\n      long freq = freqSeq.freq();\n    }\n  }\n","date":"2016-05-11 02:17:47","endLine":74,"groupId":"10462","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"runPrefixSpan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/bf/7f1fc71b08e3d85619e39a1a580a4739d30275.src","preCode":"  public void runPrefixSpan() {\n    JavaRDD<List<List<Integer>>> sequences = sc.parallelize(Arrays.asList(\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3)),\n      Arrays.asList(Arrays.asList(1), Arrays.asList(3, 2), Arrays.asList(1, 2)),\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(5)),\n      Arrays.asList(Arrays.asList(6))\n    ), 2);\n    PrefixSpan prefixSpan = new PrefixSpan()\n      .setMinSupport(0.5)\n      .setMaxPatternLength(5);\n    PrefixSpanModel<Integer> model = prefixSpan.run(sequences);\n    JavaRDD<FreqSequence<Integer>> freqSeqs = model.freqSequences().toJavaRDD();\n    List<FreqSequence<Integer>> localFreqSeqs = freqSeqs.collect();\n    Assert.assertEquals(5, localFreqSeqs.size());\n    \r\n    for (PrefixSpan.FreqSequence<Integer> freqSeq: localFreqSeqs) {\n      List<List<Integer>> seq = freqSeq.javaSequence();\n      long freq = freqSeq.freq();\n    }\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/fpm/JavaPrefixSpanSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2016-03-09 18:12:23","commitOrder":4,"curCode":"  public static void main(String[] args) {\n\n    SparkConf sparkConf = new SparkConf().setAppName(\"JavaPrefixSpanExample\");\n    JavaSparkContext sc = new JavaSparkContext(sparkConf);\n\n    \r\n    JavaRDD<List<List<Integer>>> sequences = sc.parallelize(Arrays.asList(\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3)),\n      Arrays.asList(Arrays.asList(1), Arrays.asList(3, 2), Arrays.asList(1, 2)),\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(5)),\n      Arrays.asList(Arrays.asList(6))\n    ), 2);\n    PrefixSpan prefixSpan = new PrefixSpan()\n      .setMinSupport(0.5)\n      .setMaxPatternLength(5);\n    PrefixSpanModel<Integer> model = prefixSpan.run(sequences);\n    for (PrefixSpan.FreqSequence<Integer> freqSeq: model.freqSequences().toJavaRDD().collect()) {\n      System.out.println(freqSeq.javaSequence() + \", \" + freqSeq.freq());\n    }\n    \r\n\n    sc.stop();\n  }\n","date":"2016-03-09 18:12:23","endLine":56,"groupId":"10462","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/16/340759412916245fe7fcf94ee268fa51ceca7a.src","preCode":"  public static void main(String[] args) {\n\n    SparkConf sparkConf = new SparkConf().setAppName(\"JavaPrefixSpanExample\");\n    JavaSparkContext sc = new JavaSparkContext(sparkConf);\n\n    \r\n    JavaRDD<List<List<Integer>>> sequences = sc.parallelize(Arrays.asList(\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3)),\n      Arrays.asList(Arrays.asList(1), Arrays.asList(3, 2), Arrays.asList(1, 2)),\n      Arrays.asList(Arrays.asList(1, 2), Arrays.asList(5)),\n      Arrays.asList(Arrays.asList(6))\n    ), 2);\n    PrefixSpan prefixSpan = new PrefixSpan()\n      .setMinSupport(0.5)\n      .setMaxPatternLength(5);\n    PrefixSpanModel<Integer> model = prefixSpan.run(sequences);\n    for (PrefixSpan.FreqSequence<Integer> freqSeq: model.freqSequences().toJavaRDD().collect()) {\n      System.out.println(freqSeq.javaSequence() + \", \" + freqSeq.freq());\n    }\n    \r\n\n    sc.stop();\n  }\n","realPath":"examples/src/main/java/org/apache/spark/examples/mllib/JavaPrefixSpanExample.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"ed0b4070fb50054b1ecf66ff6c32458a4967dfd3","commitMessage":"@@@[SPARK-15037][SQL][MLLIB] Use SparkSession instead of SQLContext in Scala/Java TestSuites\n\n## What changes were proposed in this pull request?\nUse SparkSession instead of SQLContext in Scala/Java TestSuites\nas this PR already very big working Python TestSuites in a diff PR.\n\n## How was this patch tested?\nExisting tests\n\nAuthor: Sandeep Singh <sandeep@techaddict.me>\n\nCloses #12907 from techaddict/SPARK-15037.\n","date":"2016-05-11 02:17:47","modifiedFileCount":"63","status":"M","submitter":"Sandeep Singh"}]
