[{"authorTime":"2018-06-28 14:19:50","codes":[{"authorDate":"2018-06-28 14:19:50","commitOrder":1,"curCode":"  public void testBinaryComparatorForArrayColumn() throws Exception {\n    int numFields = 1;\n\n    UnsafeRow row1 = new UnsafeRow(numFields);\n    byte[] data1 = new byte[100];\n    UnsafeArrayData arrayData1 = UnsafeArrayData.fromPrimitiveArray(new int[]{11, 42, -1});\n    row1.pointTo(data1, computeSizeInBytes(numFields * 8 + arrayData1.getSizeInBytes()));\n    row1.setLong(0, (relativeOffset(numFields) << 32) | (long) arrayData1.getSizeInBytes());\n    Platform.copyMemory(arrayData1.getBaseObject(), arrayData1.getBaseOffset(), data1,\n        row1.getBaseOffset() + relativeOffset(numFields), arrayData1.getSizeInBytes());\n\n    UnsafeRow row2 = new UnsafeRow(numFields);\n    byte[] data2 = new byte[100];\n    UnsafeArrayData arrayData2 = UnsafeArrayData.fromPrimitiveArray(new int[]{22});\n    row2.pointTo(data2, computeSizeInBytes(numFields * 8 + arrayData2.getSizeInBytes()));\n    row2.setLong(0, (relativeOffset(numFields) << 32) | (long) arrayData2.getSizeInBytes());\n    Platform.copyMemory(arrayData2.getBaseObject(), arrayData2.getBaseOffset(), data2,\n        row2.getBaseOffset() + relativeOffset(numFields), arrayData2.getSizeInBytes());\n\n    insertRow(row1);\n    insertRow(row2);\n\n    assert(compare(0, 0) == 0);\n    assert(compare(0, 1) > 0);\n  }\n","date":"2018-06-28 14:19:50","endLine":196,"groupId":"922","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBinaryComparatorForArrayColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/a1/9ddbdbadba2f41868a944933aa3d56a43b6050.src","preCode":"  public void testBinaryComparatorForArrayColumn() throws Exception {\n    int numFields = 1;\n\n    UnsafeRow row1 = new UnsafeRow(numFields);\n    byte[] data1 = new byte[100];\n    UnsafeArrayData arrayData1 = UnsafeArrayData.fromPrimitiveArray(new int[]{11, 42, -1});\n    row1.pointTo(data1, computeSizeInBytes(numFields * 8 + arrayData1.getSizeInBytes()));\n    row1.setLong(0, (relativeOffset(numFields) << 32) | (long) arrayData1.getSizeInBytes());\n    Platform.copyMemory(arrayData1.getBaseObject(), arrayData1.getBaseOffset(), data1,\n        row1.getBaseOffset() + relativeOffset(numFields), arrayData1.getSizeInBytes());\n\n    UnsafeRow row2 = new UnsafeRow(numFields);\n    byte[] data2 = new byte[100];\n    UnsafeArrayData arrayData2 = UnsafeArrayData.fromPrimitiveArray(new int[]{22});\n    row2.pointTo(data2, computeSizeInBytes(numFields * 8 + arrayData2.getSizeInBytes()));\n    row2.setLong(0, (relativeOffset(numFields) << 32) | (long) arrayData2.getSizeInBytes());\n    Platform.copyMemory(arrayData2.getBaseObject(), arrayData2.getBaseOffset(), data2,\n        row2.getBaseOffset() + relativeOffset(numFields), arrayData2.getSizeInBytes());\n\n    insertRow(row1);\n    insertRow(row2);\n\n    assert(compare(0, 0) == 0);\n    assert(compare(0, 1) > 0);\n  }\n","realPath":"sql/core/src/test/java/test/org/apache/spark/sql/execution/sort/RecordBinaryComparatorSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"B"},{"authorDate":"2018-06-28 14:19:50","commitOrder":1,"curCode":"  public void testBinaryComparatorForMixedColumns() throws Exception {\n    int numFields = 4;\n\n    UnsafeRow row1 = new UnsafeRow(numFields);\n    byte[] data1 = new byte[100];\n    UTF8String str1 = UTF8String.fromString(\"Milk tea\");\n    row1.pointTo(data1, computeSizeInBytes(numFields * 8 + str1.numBytes()));\n    row1.setInt(0, 11);\n    row1.setDouble(1, 3.14);\n    row1.setInt(2, -1);\n    row1.setLong(3, (relativeOffset(numFields) << 32) | (long) str1.numBytes());\n    Platform.copyMemory(str1.getBaseObject(), str1.getBaseOffset(), data1,\n        row1.getBaseOffset() + relativeOffset(numFields), str1.numBytes());\n\n    UnsafeRow row2 = new UnsafeRow(numFields);\n    byte[] data2 = new byte[100];\n    UTF8String str2 = UTF8String.fromString(\"Java\");\n    row2.pointTo(data2, computeSizeInBytes(numFields * 8 + str2.numBytes()));\n    row2.setInt(0, 11);\n    row2.setDouble(1, 3.14);\n    row2.setInt(2, -1);\n    row2.setLong(3, (relativeOffset(numFields) << 32) | (long) str2.numBytes());\n    Platform.copyMemory(str2.getBaseObject(), str2.getBaseOffset(), data2,\n        row2.getBaseOffset() + relativeOffset(numFields), str2.numBytes());\n\n    insertRow(row1);\n    insertRow(row2);\n\n    assert(compare(0, 0) == 0);\n    assert(compare(0, 1) > 0);\n  }\n","date":"2018-06-28 14:19:50","endLine":229,"groupId":"923","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBinaryComparatorForMixedColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/a1/9ddbdbadba2f41868a944933aa3d56a43b6050.src","preCode":"  public void testBinaryComparatorForMixedColumns() throws Exception {\n    int numFields = 4;\n\n    UnsafeRow row1 = new UnsafeRow(numFields);\n    byte[] data1 = new byte[100];\n    UTF8String str1 = UTF8String.fromString(\"Milk tea\");\n    row1.pointTo(data1, computeSizeInBytes(numFields * 8 + str1.numBytes()));\n    row1.setInt(0, 11);\n    row1.setDouble(1, 3.14);\n    row1.setInt(2, -1);\n    row1.setLong(3, (relativeOffset(numFields) << 32) | (long) str1.numBytes());\n    Platform.copyMemory(str1.getBaseObject(), str1.getBaseOffset(), data1,\n        row1.getBaseOffset() + relativeOffset(numFields), str1.numBytes());\n\n    UnsafeRow row2 = new UnsafeRow(numFields);\n    byte[] data2 = new byte[100];\n    UTF8String str2 = UTF8String.fromString(\"Java\");\n    row2.pointTo(data2, computeSizeInBytes(numFields * 8 + str2.numBytes()));\n    row2.setInt(0, 11);\n    row2.setDouble(1, 3.14);\n    row2.setInt(2, -1);\n    row2.setLong(3, (relativeOffset(numFields) << 32) | (long) str2.numBytes());\n    Platform.copyMemory(str2.getBaseObject(), str2.getBaseOffset(), data2,\n        row2.getBaseOffset() + relativeOffset(numFields), str2.numBytes());\n\n    insertRow(row1);\n    insertRow(row2);\n\n    assert(compare(0, 0) == 0);\n    assert(compare(0, 1) > 0);\n  }\n","realPath":"sql/core/src/test/java/test/org/apache/spark/sql/execution/sort/RecordBinaryComparatorSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"B"}],"commitId":"5b0596648854c0c733b7c607661b78af7df18b89","commitMessage":"@@@[SPARK-24564][TEST] Add test suite for RecordBinaryComparator\n\n## What changes were proposed in this pull request?\n\nAdd a new test suite to test RecordBinaryComparator.\n\n## How was this patch tested?\n\nNew test suite.\n\nAuthor: Xingbo Jiang <xingbo.jiang@databricks.com>\n\nCloses #21570 from jiangxb1987/rbc-test.\n","date":"2018-06-28 14:19:50","modifiedFileCount":"1","status":"B","submitter":"Xingbo Jiang"},{"authorTime":"2019-11-21 04:04:15","codes":[{"authorDate":"2019-11-21 04:04:15","commitOrder":2,"curCode":"  public void testBinaryComparatorForArrayColumn() throws Exception {\n    int numFields = 1;\n\n    UnsafeRow row1 = new UnsafeRow(numFields);\n    byte[] data1 = new byte[100];\n    UnsafeArrayData arrayData1 = UnsafeArrayData.fromPrimitiveArray(new int[]{11, 42, -1});\n    row1.pointTo(data1, computeSizeInBytes(numFields * 8 + arrayData1.getSizeInBytes()));\n    row1.setLong(0, (relativeOffset(numFields) << 32) | (long) arrayData1.getSizeInBytes());\n    Platform.copyMemory(arrayData1.getBaseObject(), arrayData1.getBaseOffset(), data1,\n        row1.getBaseOffset() + relativeOffset(numFields), arrayData1.getSizeInBytes());\n\n    UnsafeRow row2 = new UnsafeRow(numFields);\n    byte[] data2 = new byte[100];\n    UnsafeArrayData arrayData2 = UnsafeArrayData.fromPrimitiveArray(new int[]{22});\n    row2.pointTo(data2, computeSizeInBytes(numFields * 8 + arrayData2.getSizeInBytes()));\n    row2.setLong(0, (relativeOffset(numFields) << 32) | (long) arrayData2.getSizeInBytes());\n    Platform.copyMemory(arrayData2.getBaseObject(), arrayData2.getBaseOffset(), data2,\n        row2.getBaseOffset() + relativeOffset(numFields), arrayData2.getSizeInBytes());\n\n    insertRow(row1);\n    insertRow(row2);\n\n    Assert.assertEquals(0, compare(0, 0));\n    Assert.assertTrue(compare(0, 1) > 0);\n  }\n","date":"2019-11-21 04:04:15","endLine":199,"groupId":"10406","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBinaryComparatorForArrayColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/4b/23615275871d3b1e94a3613504b23be580932c.src","preCode":"  public void testBinaryComparatorForArrayColumn() throws Exception {\n    int numFields = 1;\n\n    UnsafeRow row1 = new UnsafeRow(numFields);\n    byte[] data1 = new byte[100];\n    UnsafeArrayData arrayData1 = UnsafeArrayData.fromPrimitiveArray(new int[]{11, 42, -1});\n    row1.pointTo(data1, computeSizeInBytes(numFields * 8 + arrayData1.getSizeInBytes()));\n    row1.setLong(0, (relativeOffset(numFields) << 32) | (long) arrayData1.getSizeInBytes());\n    Platform.copyMemory(arrayData1.getBaseObject(), arrayData1.getBaseOffset(), data1,\n        row1.getBaseOffset() + relativeOffset(numFields), arrayData1.getSizeInBytes());\n\n    UnsafeRow row2 = new UnsafeRow(numFields);\n    byte[] data2 = new byte[100];\n    UnsafeArrayData arrayData2 = UnsafeArrayData.fromPrimitiveArray(new int[]{22});\n    row2.pointTo(data2, computeSizeInBytes(numFields * 8 + arrayData2.getSizeInBytes()));\n    row2.setLong(0, (relativeOffset(numFields) << 32) | (long) arrayData2.getSizeInBytes());\n    Platform.copyMemory(arrayData2.getBaseObject(), arrayData2.getBaseOffset(), data2,\n        row2.getBaseOffset() + relativeOffset(numFields), arrayData2.getSizeInBytes());\n\n    insertRow(row1);\n    insertRow(row2);\n\n    assert(compare(0, 0) == 0);\n    assert(compare(0, 1) > 0);\n  }\n","realPath":"sql/core/src/test/java/test/org/apache/spark/sql/execution/sort/RecordBinaryComparatorSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2019-11-21 04:04:15","commitOrder":2,"curCode":"  public void testBinaryComparatorForMixedColumns() throws Exception {\n    int numFields = 4;\n\n    UnsafeRow row1 = new UnsafeRow(numFields);\n    byte[] data1 = new byte[100];\n    UTF8String str1 = UTF8String.fromString(\"Milk tea\");\n    row1.pointTo(data1, computeSizeInBytes(numFields * 8 + str1.numBytes()));\n    row1.setInt(0, 11);\n    row1.setDouble(1, 3.14);\n    row1.setInt(2, -1);\n    row1.setLong(3, (relativeOffset(numFields) << 32) | (long) str1.numBytes());\n    Platform.copyMemory(str1.getBaseObject(), str1.getBaseOffset(), data1,\n        row1.getBaseOffset() + relativeOffset(numFields), str1.numBytes());\n\n    UnsafeRow row2 = new UnsafeRow(numFields);\n    byte[] data2 = new byte[100];\n    UTF8String str2 = UTF8String.fromString(\"Java\");\n    row2.pointTo(data2, computeSizeInBytes(numFields * 8 + str2.numBytes()));\n    row2.setInt(0, 11);\n    row2.setDouble(1, 3.14);\n    row2.setInt(2, -1);\n    row2.setLong(3, (relativeOffset(numFields) << 32) | (long) str2.numBytes());\n    Platform.copyMemory(str2.getBaseObject(), str2.getBaseOffset(), data2,\n        row2.getBaseOffset() + relativeOffset(numFields), str2.numBytes());\n\n    insertRow(row1);\n    insertRow(row2);\n\n    Assert.assertEquals(0, compare(0, 0));\n    Assert.assertTrue(compare(0, 1) > 0);\n  }\n","date":"2019-11-21 04:04:15","endLine":232,"groupId":"10406","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBinaryComparatorForMixedColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/4b/23615275871d3b1e94a3613504b23be580932c.src","preCode":"  public void testBinaryComparatorForMixedColumns() throws Exception {\n    int numFields = 4;\n\n    UnsafeRow row1 = new UnsafeRow(numFields);\n    byte[] data1 = new byte[100];\n    UTF8String str1 = UTF8String.fromString(\"Milk tea\");\n    row1.pointTo(data1, computeSizeInBytes(numFields * 8 + str1.numBytes()));\n    row1.setInt(0, 11);\n    row1.setDouble(1, 3.14);\n    row1.setInt(2, -1);\n    row1.setLong(3, (relativeOffset(numFields) << 32) | (long) str1.numBytes());\n    Platform.copyMemory(str1.getBaseObject(), str1.getBaseOffset(), data1,\n        row1.getBaseOffset() + relativeOffset(numFields), str1.numBytes());\n\n    UnsafeRow row2 = new UnsafeRow(numFields);\n    byte[] data2 = new byte[100];\n    UTF8String str2 = UTF8String.fromString(\"Java\");\n    row2.pointTo(data2, computeSizeInBytes(numFields * 8 + str2.numBytes()));\n    row2.setInt(0, 11);\n    row2.setDouble(1, 3.14);\n    row2.setInt(2, -1);\n    row2.setLong(3, (relativeOffset(numFields) << 32) | (long) str2.numBytes());\n    Platform.copyMemory(str2.getBaseObject(), str2.getBaseOffset(), data2,\n        row2.getBaseOffset() + relativeOffset(numFields), str2.numBytes());\n\n    insertRow(row1);\n    insertRow(row2);\n\n    assert(compare(0, 0) == 0);\n    assert(compare(0, 1) > 0);\n  }\n","realPath":"sql/core/src/test/java/test/org/apache/spark/sql/execution/sort/RecordBinaryComparatorSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"}],"commitId":"1febd373ea806326d269a60048ee52543a76c918","commitMessage":"@@@[MINOR][TESTS] Replace JVM assert with JUnit Assert in tests\n\n\n What changes were proposed in this pull request?\n\nUse JUnit assertions in tests uniformly.  not JVM assert() statements.\n\n\n Why are the changes needed?\n\nassert() statements do not produce as useful errors when they fail.  and.  if they were somehow disabled.  would fail to test anything.\n\n\n Does this PR introduce any user-facing change?\n\nNo. The assertion logic should be identical.\n\n\n How was this patch tested?\n\nExisting tests.\n\nCloses #26581 from srowen/assertToJUnit.\n\nAuthored-by: Sean Owen <sean.owen@databricks.com>\nSigned-off-by: Sean Owen <sean.owen@databricks.com>\n","date":"2019-11-21 04:04:15","modifiedFileCount":"5","status":"M","submitter":"Sean Owen"}]
