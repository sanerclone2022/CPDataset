[{"authorTime":"2017-02-16 20:32:45","codes":[{"authorDate":"2017-02-16 20:32:45","commitOrder":1,"curCode":"  public void testUpdateStateByKey() {\n    List<List<Tuple2<String, Integer>>> inputData = stringIntKVStream;\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"california\", 4),\n                      new Tuple2<>(\"new york\", 5)),\n        Arrays.asList(new Tuple2<>(\"california\", 14),\n                      new Tuple2<>(\"new york\", 9)),\n        Arrays.asList(new Tuple2<>(\"california\", 14),\n                      new Tuple2<>(\"new york\", 9)));\n\n    JavaDStream<Tuple2<String, Integer>> stream =\n      JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n    JavaPairDStream<String, Integer> updated = pairStream.updateStateByKey(\n        new Function2<List<Integer>, Optional<Integer>, Optional<Integer>>() {\n          @Override\n          public Optional<Integer> call(List<Integer> values, Optional<Integer> state) {\n            int out = 0;\n            if (state.isPresent()) {\n              out += state.get();\n            }\n            for (Integer v : values) {\n              out += v;\n            }\n            return Optional.of(out);\n          }\n        });\n    JavaTestUtils.attachTestOutputStream(updated);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    Assert.assertEquals(expected, result);\n  }\n","date":"2017-02-16 20:32:45","endLine":1366,"groupId":"351","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateStateByKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/8d/24104d7870bd3178e7bd3b9a61a2725615e7be.src","preCode":"  public void testUpdateStateByKey() {\n    List<List<Tuple2<String, Integer>>> inputData = stringIntKVStream;\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"california\", 4),\n                      new Tuple2<>(\"new york\", 5)),\n        Arrays.asList(new Tuple2<>(\"california\", 14),\n                      new Tuple2<>(\"new york\", 9)),\n        Arrays.asList(new Tuple2<>(\"california\", 14),\n                      new Tuple2<>(\"new york\", 9)));\n\n    JavaDStream<Tuple2<String, Integer>> stream =\n      JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n    JavaPairDStream<String, Integer> updated = pairStream.updateStateByKey(\n        new Function2<List<Integer>, Optional<Integer>, Optional<Integer>>() {\n          @Override\n          public Optional<Integer> call(List<Integer> values, Optional<Integer> state) {\n            int out = 0;\n            if (state.isPresent()) {\n              out += state.get();\n            }\n            for (Integer v : values) {\n              out += v;\n            }\n            return Optional.of(out);\n          }\n        });\n    JavaTestUtils.attachTestOutputStream(updated);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":1333,"status":"B"},{"authorDate":"2017-02-16 20:32:45","commitOrder":1,"curCode":"  public void testUpdateStateByKeyWithInitial() {\n    List<List<Tuple2<String, Integer>>> inputData = stringIntKVStream;\n\n    List<Tuple2<String, Integer>> initial = Arrays.asList(\n        new Tuple2<>(\"california\", 1),\n            new Tuple2<>(\"new york\", 2));\n\n    JavaRDD<Tuple2<String, Integer>> tmpRDD = ssc.sparkContext().parallelize(initial);\n    JavaPairRDD<String, Integer> initialRDD = JavaPairRDD.fromJavaRDD(tmpRDD);\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"california\", 5),\n                      new Tuple2<>(\"new york\", 7)),\n        Arrays.asList(new Tuple2<>(\"california\", 15),\n                      new Tuple2<>(\"new york\", 11)),\n        Arrays.asList(new Tuple2<>(\"california\", 15),\n                      new Tuple2<>(\"new york\", 11)));\n\n    JavaDStream<Tuple2<String, Integer>> stream =\n      JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n    JavaPairDStream<String, Integer> updated = pairStream.updateStateByKey(\n        new Function2<List<Integer>, Optional<Integer>, Optional<Integer>>() {\n          @Override\n          public Optional<Integer> call(List<Integer> values, Optional<Integer> state) {\n            int out = 0;\n            if (state.isPresent()) {\n              out += state.get();\n            }\n            for (Integer v : values) {\n              out += v;\n            }\n            return Optional.of(out);\n          }\n        }, new HashPartitioner(1), initialRDD);\n    JavaTestUtils.attachTestOutputStream(updated);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    assertOrderInvariantEquals(expected, result);\n  }\n","date":"2017-02-16 20:32:45","endLine":1410,"groupId":"351","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpdateStateByKeyWithInitial","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/8d/24104d7870bd3178e7bd3b9a61a2725615e7be.src","preCode":"  public void testUpdateStateByKeyWithInitial() {\n    List<List<Tuple2<String, Integer>>> inputData = stringIntKVStream;\n\n    List<Tuple2<String, Integer>> initial = Arrays.asList(\n        new Tuple2<>(\"california\", 1),\n            new Tuple2<>(\"new york\", 2));\n\n    JavaRDD<Tuple2<String, Integer>> tmpRDD = ssc.sparkContext().parallelize(initial);\n    JavaPairRDD<String, Integer> initialRDD = JavaPairRDD.fromJavaRDD(tmpRDD);\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"california\", 5),\n                      new Tuple2<>(\"new york\", 7)),\n        Arrays.asList(new Tuple2<>(\"california\", 15),\n                      new Tuple2<>(\"new york\", 11)),\n        Arrays.asList(new Tuple2<>(\"california\", 15),\n                      new Tuple2<>(\"new york\", 11)));\n\n    JavaDStream<Tuple2<String, Integer>> stream =\n      JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n    JavaPairDStream<String, Integer> updated = pairStream.updateStateByKey(\n        new Function2<List<Integer>, Optional<Integer>, Optional<Integer>>() {\n          @Override\n          public Optional<Integer> call(List<Integer> values, Optional<Integer> state) {\n            int out = 0;\n            if (state.isPresent()) {\n              out += state.get();\n            }\n            for (Integer v : values) {\n              out += v;\n            }\n            return Optional.of(out);\n          }\n        }, new HashPartitioner(1), initialRDD);\n    JavaTestUtils.attachTestOutputStream(updated);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    assertOrderInvariantEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":1370,"status":"B"}],"commitId":"0e2405490f2056728d1353abbac6f3ea177ae533","commitMessage":"@@@[SPARK-19550][BUILD][CORE][WIP] Remove Java 7 support\n\n- Move external/java8-tests tests into core.  streaming.  sql and remove\n- Remove MaxPermGen and related options\n- Fix some reflection / TODOs around Java 8+ methods\n- Update doc references to 1.7/1.8 differences\n- Remove Java 7/8 related build profiles\n- Update some plugins for better Java 8 compatibility\n- Fix a few Java-related warnings\n\nFor the future:\n\n- Update Java 8 examples to fully use Java 8\n- Update Java tests to use lambdas for simplicity\n- Update Java internal implementations to use lambdas\n\n## How was this patch tested?\n\nExisting tests\n\nAuthor: Sean Owen <sowen@cloudera.com>\n\nCloses #16871 from srowen/SPARK-19493.\n","date":"2017-02-16 20:32:45","modifiedFileCount":"51","status":"B","submitter":"Sean Owen"},{"authorTime":"2017-02-20 01:42:50","codes":[{"authorDate":"2017-02-20 01:42:50","commitOrder":2,"curCode":"  public void testUpdateStateByKey() {\n    List<List<Tuple2<String, Integer>>> inputData = stringIntKVStream;\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"california\", 4),\n                      new Tuple2<>(\"new york\", 5)),\n        Arrays.asList(new Tuple2<>(\"california\", 14),\n                      new Tuple2<>(\"new york\", 9)),\n        Arrays.asList(new Tuple2<>(\"california\", 14),\n                      new Tuple2<>(\"new york\", 9)));\n\n    JavaDStream<Tuple2<String, Integer>> stream =\n      JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n    JavaPairDStream<String, Integer> updated = pairStream.updateStateByKey((values, state) -> {\n        int out = 0;\n        if (state.isPresent()) {\n          out += state.get();\n        }\n        for (Integer v : values) {\n          out += v;\n        }\n        return Optional.of(out);\n      });\n    JavaTestUtils.attachTestOutputStream(updated);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    Assert.assertEquals(expected, result);\n  }\n","date":"2017-02-20 01:42:50","endLine":1126,"groupId":"10223","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateStateByKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b9/66cbdca076d7ade49beefe4e328d93dd52e6c4.src","preCode":"  public void testUpdateStateByKey() {\n    List<List<Tuple2<String, Integer>>> inputData = stringIntKVStream;\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"california\", 4),\n                      new Tuple2<>(\"new york\", 5)),\n        Arrays.asList(new Tuple2<>(\"california\", 14),\n                      new Tuple2<>(\"new york\", 9)),\n        Arrays.asList(new Tuple2<>(\"california\", 14),\n                      new Tuple2<>(\"new york\", 9)));\n\n    JavaDStream<Tuple2<String, Integer>> stream =\n      JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n    JavaPairDStream<String, Integer> updated = pairStream.updateStateByKey(\n        new Function2<List<Integer>, Optional<Integer>, Optional<Integer>>() {\n          @Override\n          public Optional<Integer> call(List<Integer> values, Optional<Integer> state) {\n            int out = 0;\n            if (state.isPresent()) {\n              out += state.get();\n            }\n            for (Integer v : values) {\n              out += v;\n            }\n            return Optional.of(out);\n          }\n        });\n    JavaTestUtils.attachTestOutputStream(updated);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":1097,"status":"M"},{"authorDate":"2017-02-20 01:42:50","commitOrder":2,"curCode":"  public void testUpdateStateByKeyWithInitial() {\n    List<List<Tuple2<String, Integer>>> inputData = stringIntKVStream;\n\n    List<Tuple2<String, Integer>> initial = Arrays.asList(\n        new Tuple2<>(\"california\", 1),\n            new Tuple2<>(\"new york\", 2));\n\n    JavaRDD<Tuple2<String, Integer>> tmpRDD = ssc.sparkContext().parallelize(initial);\n    JavaPairRDD<String, Integer> initialRDD = JavaPairRDD.fromJavaRDD(tmpRDD);\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"california\", 5),\n                      new Tuple2<>(\"new york\", 7)),\n        Arrays.asList(new Tuple2<>(\"california\", 15),\n                      new Tuple2<>(\"new york\", 11)),\n        Arrays.asList(new Tuple2<>(\"california\", 15),\n                      new Tuple2<>(\"new york\", 11)));\n\n    JavaDStream<Tuple2<String, Integer>> stream =\n      JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n    JavaPairDStream<String, Integer> updated = pairStream.updateStateByKey((values, state) -> {\n        int out = 0;\n        if (state.isPresent()) {\n          out += state.get();\n        }\n        for (Integer v : values) {\n          out += v;\n        }\n        return Optional.of(out);\n      }, new HashPartitioner(1), initialRDD);\n    JavaTestUtils.attachTestOutputStream(updated);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    assertOrderInvariantEquals(expected, result);\n  }\n","date":"2017-02-20 01:42:50","endLine":1166,"groupId":"10223","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpdateStateByKeyWithInitial","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b9/66cbdca076d7ade49beefe4e328d93dd52e6c4.src","preCode":"  public void testUpdateStateByKeyWithInitial() {\n    List<List<Tuple2<String, Integer>>> inputData = stringIntKVStream;\n\n    List<Tuple2<String, Integer>> initial = Arrays.asList(\n        new Tuple2<>(\"california\", 1),\n            new Tuple2<>(\"new york\", 2));\n\n    JavaRDD<Tuple2<String, Integer>> tmpRDD = ssc.sparkContext().parallelize(initial);\n    JavaPairRDD<String, Integer> initialRDD = JavaPairRDD.fromJavaRDD(tmpRDD);\n\n    List<List<Tuple2<String, Integer>>> expected = Arrays.asList(\n        Arrays.asList(new Tuple2<>(\"california\", 5),\n                      new Tuple2<>(\"new york\", 7)),\n        Arrays.asList(new Tuple2<>(\"california\", 15),\n                      new Tuple2<>(\"new york\", 11)),\n        Arrays.asList(new Tuple2<>(\"california\", 15),\n                      new Tuple2<>(\"new york\", 11)));\n\n    JavaDStream<Tuple2<String, Integer>> stream =\n      JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaPairDStream<String, Integer> pairStream = JavaPairDStream.fromJavaDStream(stream);\n\n    JavaPairDStream<String, Integer> updated = pairStream.updateStateByKey(\n        new Function2<List<Integer>, Optional<Integer>, Optional<Integer>>() {\n          @Override\n          public Optional<Integer> call(List<Integer> values, Optional<Integer> state) {\n            int out = 0;\n            if (state.isPresent()) {\n              out += state.get();\n            }\n            for (Integer v : values) {\n              out += v;\n            }\n            return Optional.of(out);\n          }\n        }, new HashPartitioner(1), initialRDD);\n    JavaTestUtils.attachTestOutputStream(updated);\n    List<List<Tuple2<String, Integer>>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    assertOrderInvariantEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":1130,"status":"M"}],"commitId":"1487c9af20a333ead55955acf4c0aa323bea0d07","commitMessage":"@@@[SPARK-19534][TESTS] Convert Java tests to use lambdas.  Java 8 features\n\n## What changes were proposed in this pull request?\n\nConvert tests to use Java 8 lambdas.  and modest related fixes to surrounding code.\n\n## How was this patch tested?\n\nJenkins tests\n\nAuthor: Sean Owen <sowen@cloudera.com>\n\nCloses #16964 from srowen/SPARK-19534.\n","date":"2017-02-20 01:42:50","modifiedFileCount":"45","status":"M","submitter":"Sean Owen"}]
