[{"authorTime":"2015-02-06 15:43:47","codes":[{"authorDate":"2015-02-06 15:43:47","commitOrder":4,"curCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    assert(model.fittingParamMap().apply(lr.maxIter()) == 10);\n    assert(model.fittingParamMap().apply(lr.regParam()).equals(1.0));\n    assert(model.fittingParamMap().apply(lr.threshold()).equals(0.6));\n    assert(model.getThreshold() == 0.6);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      assert(r.getDouble(0) == 0.0);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    assert(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    assert(model2.fittingParamMap().apply(lr.maxIter()) == 5);\n    assert(model2.fittingParamMap().apply(lr.regParam()).equals(0.1));\n    assert(model2.fittingParamMap().apply(lr.threshold()).equals(0.4));\n    assert(model2.getThreshold() == 0.4);\n    assert(model2.getProbabilityCol().equals(\"theProb\"));\n  }\n","date":"2015-02-06 15:43:47","endLine":117,"groupId":"1032","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"logisticRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/26/284023b0f69ad4da818d9634232fd25165aabc.src","preCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    assert(model.fittingParamMap().apply(lr.maxIter()) == 10);\n    assert(model.fittingParamMap().apply(lr.regParam()).equals(1.0));\n    assert(model.fittingParamMap().apply(lr.threshold()).equals(0.6));\n    assert(model.getThreshold() == 0.6);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      assert(r.getDouble(0) == 0.0);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    assert(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    assert(model2.fittingParamMap().apply(lr.maxIter()) == 5);\n    assert(model2.fittingParamMap().apply(lr.regParam()).equals(0.1));\n    assert(model2.fittingParamMap().apply(lr.threshold()).equals(0.4));\n    assert(model2.getThreshold() == 0.4);\n    assert(model2.getProbabilityCol().equals(\"theProb\"));\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/classification/JavaLogisticRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"MB"},{"authorDate":"2015-02-06 15:43:47","commitOrder":4,"curCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0);\n    LinearRegressionModel model = lr.fit(dataset);\n    assert(model.fittingParamMap().apply(lr.maxIter()) == 10);\n    assert(model.fittingParamMap().apply(lr.regParam()).equals(1.0));\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    assert(model2.fittingParamMap().apply(lr.maxIter()) == 5);\n    assert(model2.fittingParamMap().apply(lr.regParam()).equals(0.1));\n    assert(model2.getPredictionCol().equals(\"thePred\"));\n  }\n","date":"2015-02-06 15:43:47","endLine":88,"groupId":"2159","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"linearRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/5b/d616e74d86cb006d62be2ec5cb5226eb89996d.src","preCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0);\n    LinearRegressionModel model = lr.fit(dataset);\n    assert(model.fittingParamMap().apply(lr.maxIter()) == 10);\n    assert(model.fittingParamMap().apply(lr.regParam()).equals(1.0));\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    assert(model2.fittingParamMap().apply(lr.maxIter()) == 5);\n    assert(model2.fittingParamMap().apply(lr.regParam()).equals(0.1));\n    assert(model2.getPredictionCol().equals(\"thePred\"));\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/regression/JavaLinearRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"}],"commitId":"dc0c4490a12ecedd8ca5a1bb256c7ccbdf0be04f","commitMessage":"@@@[SPARK-4789] [SPARK-4942] [SPARK-5031] [mllib] Standardize ML Prediction APIs\n\nThis is part (1a) of the updates from the design doc in [https://docs.google.com/document/d/1BH9el33kBX8JiDdgUJXdLW14CA2qhTCWIG46eXZVoJs]\n\n**UPDATE**: Most of the APIs are being kept private[spark] to allow further discussion.  Here is a list of changes which are public:\n* new output columns: rawPrediction.  probabilities\n  * The ?score? column is now called ?rawPrediction?\n* Classifiers now provide numClasses\n* Params.get and .set are now protected instead of private[ml].\n* ParamMap now has a size method.\n* new classes: LinearRegression.  LinearRegressionModel\n* LogisticRegression now has an intercept.\n\n\n Sketch of APIs (most of which are private[spark] for now)\n\nAbstract classes for learning algorithms (+ corresponding Model abstractions):\n* Classifier (+ ClassificationModel)\n* ProbabilisticClassifier (+ ProbabilisticClassificationModel)\n* Regressor (+ RegressionModel)\n* Predictor (+ PredictionModel)\n* *For all of these*:\n * There is no strongly typed training-time API.\n * There is a strongly typed test-time (prediction) API which helps developers implement new algorithms.\n\nConcrete classes: learning algorithms\n* LinearRegression\n* LogisticRegression (updated to use new abstract classes)\n * Also.  removed \"score\" in favor of \"probability\" output column.  Changed BinaryClassificationEvaluator to match. (SPARK-5031)\n\nOther updates:\n* params.scala: Changed Params.set/get to be protected instead of private[ml]\n * This was needed for the example of defining a class from outside of the MLlib namespace.\n* VectorUDT: Will later change from private[spark] to public.\n * This is needed for outside users to write their own validateAndTransformSchema() methods using vectors.\n * Also.  added equals() method.f\n* SPARK-4942 : ML Transformers should allow output cols to be turned on. off\n * Update validateAndTransformSchema\n * Update transform\n* (Updated examples.  test suites according to other changes)\n\nNew examples:\n* DeveloperApiExample.scala (example of defining algorithm from outside of the MLlib namespace)\n * Added Java version too\n\nTest Suites:\n* LinearRegressionSuite\n* LogisticRegressionSuite\n* + Java versions of above suites\n\nCC: mengxr  etrain  shivaram\n\nAuthor: Joseph K. Bradley <joseph@databricks.com>\n\nCloses #3637 from jkbradley/ml-api-part1 and squashes the following commits:\n\n405bfb8 [Joseph K. Bradley] Last edits based on code review.  Small cleanups\nfec348a [Joseph K. Bradley] Added JavaDeveloperApiExample.java and fixed other issues: Made developer API private[spark] for now. Added constructors Java can understand to specialized Param types.\n8316d5e [Joseph K. Bradley] fixes after rebasing on master\nfc62406 [Joseph K. Bradley] fixed test suites after last commit\nbcb9549 [Joseph K. Bradley] Fixed issues after rebasing from master (after move from SchemaRDD to DataFrame)\n9872424 [Joseph K. Bradley] fixed JavaLinearRegressionSuite.java Java sql api\nf542997 [Joseph K. Bradley] Added MIMA excludes for VectorUDT (now public).  and added DeveloperApi annotation to it\n216d199 [Joseph K. Bradley] fixed after sql datatypes PR got merged\nf549e34 [Joseph K. Bradley] Updates based on code review.  Major ones are: * Created weakly typed Predictor.train() method which is called by fit() so that developers do not have to call schema validation or copy parameters. * Made Predictor.featuresDataType have a default value of VectorUDT.   * NOTE: This could be dangerous since the FeaturesType type parameter cannot have a default value.\n343e7bd [Joseph K. Bradley] added blanket mima exclude for ml package\n82f340b [Joseph K. Bradley] Fixed bug in LogisticRegression (introduced in this PR).  Fixed Java suites\n0a16da9 [Joseph K. Bradley] Fixed Linear/Logistic RegressionSuites\nc3c8da5 [Joseph K. Bradley] small cleanup\n934f97b [Joseph K. Bradley] Fixed bugs from previous commit.\n1c61723 [Joseph K. Bradley] * Made ProbabilisticClassificationModel into a subclass of ClassificationModel.  Also introduced ProbabilisticClassifier.  * This was to support output column ?probabilityCol? in transform().\n4e2f711 [Joseph K. Bradley] rat fix\nbc654e1 [Joseph K. Bradley] Added spark.ml LinearRegressionSuite\n8d13233 [Joseph K. Bradley] Added methods: * Classifier: batch predictRaw() * Predictor: train() without paramMap ProbabilisticClassificationModel.predictProbabilities() * Java versions of all above batch methods + others\n1680905 [Joseph K. Bradley] Added JavaLabeledPointSuite.java for spark.ml.  and added constructor to LabeledPoint which defaults weight to 1.0\nadbe50a [Joseph K. Bradley] * fixed LinearRegression train() to use embedded paramMap * added Predictor.predict(RDD[Vector]) method * updated Linear/LogisticRegressionSuites\n58802e3 [Joseph K. Bradley] added train() to Predictor subclasses which does not take a ParamMap.\n57d54ab [Joseph K. Bradley] * Changed semantics of Predictor.train() to merge the given paramMap with the embedded paramMap. * remove threshold_internal from logreg * Added Predictor.copy() * Extended LogisticRegressionSuite\ne433872 [Joseph K. Bradley] Updated docs.  Added LabeledPointSuite to spark.ml\n54b7b31 [Joseph K. Bradley] Fixed issue with logreg threshold being set correctly\n0617d61 [Joseph K. Bradley] Fixed bug from last commit (sorting paramMap by parameter names in toString).  Fixed bug in persisting logreg data.  Added threshold_internal to logreg for faster test-time prediction (avoiding map lookup).\n601e792 [Joseph K. Bradley] Modified ParamMap to sort parameters in toString.  Cleaned up classes in class hierarchy.  before implementing tests and examples.\nd705e87 [Joseph K. Bradley] Added LinearRegression and Regressor back from ml-api branch\n52f4fde [Joseph K. Bradley] removing everything except for simple class hierarchy for classification\nd35bb5d [Joseph K. Bradley] fixed compilation issues.  but have not added tests yet\nbfade12 [Joseph K. Bradley] Added lots of classes for new ML API:\n","date":"2015-02-06 15:43:47","modifiedFileCount":"5","status":"M","submitter":"Joseph K. Bradley"},{"authorTime":"2015-02-07 03:22:11","codes":[{"authorDate":"2015-02-07 03:22:11","commitOrder":5,"curCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    assert(model.fittingParamMap().apply(lr.maxIter()).equals(10));\n    assert(model.fittingParamMap().apply(lr.regParam()).equals(1.0));\n    assert(model.fittingParamMap().apply(lr.threshold()).equals(0.6));\n    assert(model.getThreshold() == 0.6);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      assert(r.getDouble(0) == 0.0);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    assert(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    assert(model2.fittingParamMap().apply(lr.maxIter()).equals(5));\n    assert(model2.fittingParamMap().apply(lr.regParam()).equals(0.1));\n    assert(model2.fittingParamMap().apply(lr.threshold()).equals(0.4));\n    assert(model2.getThreshold() == 0.4);\n    assert(model2.getProbabilityCol().equals(\"theProb\"));\n  }\n","date":"2015-02-07 03:22:11","endLine":117,"groupId":"1032","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"logisticRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/d4/b664479255db742575410fe0eb0fe6f82ba8c8.src","preCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    assert(model.fittingParamMap().apply(lr.maxIter()) == 10);\n    assert(model.fittingParamMap().apply(lr.regParam()).equals(1.0));\n    assert(model.fittingParamMap().apply(lr.threshold()).equals(0.6));\n    assert(model.getThreshold() == 0.6);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      assert(r.getDouble(0) == 0.0);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    assert(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    assert(model2.fittingParamMap().apply(lr.maxIter()) == 5);\n    assert(model2.fittingParamMap().apply(lr.regParam()).equals(0.1));\n    assert(model2.fittingParamMap().apply(lr.threshold()).equals(0.4));\n    assert(model2.getThreshold() == 0.4);\n    assert(model2.getProbabilityCol().equals(\"theProb\"));\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/classification/JavaLogisticRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2015-02-07 03:22:11","commitOrder":5,"curCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0);\n    LinearRegressionModel model = lr.fit(dataset);\n    assert(model.fittingParamMap().apply(lr.maxIter()).equals(10));\n    assert(model.fittingParamMap().apply(lr.regParam()).equals(1.0));\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    assert(model2.fittingParamMap().apply(lr.maxIter()).equals(5));\n    assert(model2.fittingParamMap().apply(lr.regParam()).equals(0.1));\n    assert(model2.getPredictionCol().equals(\"thePred\"));\n  }\n","date":"2015-02-07 03:22:11","endLine":88,"groupId":"2159","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"linearRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/40/d5a92bb32afe2399f49636a4eb88fbcde541d4.src","preCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0);\n    LinearRegressionModel model = lr.fit(dataset);\n    assert(model.fittingParamMap().apply(lr.maxIter()) == 10);\n    assert(model.fittingParamMap().apply(lr.regParam()).equals(1.0));\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    assert(model2.fittingParamMap().apply(lr.maxIter()) == 5);\n    assert(model2.fittingParamMap().apply(lr.regParam()).equals(0.1));\n    assert(model2.getPredictionCol().equals(\"thePred\"));\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/regression/JavaLinearRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"80f3bcb58f836cfe1829c85bdd349c10525c8a5e","commitMessage":"@@@[SPARK-5652][Mllib] Use broadcasted weights in LogisticRegressionModel\n\n`LogisticRegressionModel`'s `predictPoint` should directly use broadcasted weights. This pr also fixes the compilation errors of two unit test suite: `JavaLogisticRegressionSuite ` and `JavaLinearRegressionSuite`.\n\nAuthor: Liang-Chi Hsieh <viirya@gmail.com>\n\nCloses #4429 from viirya/use_bcvalue and squashes the following commits:\n\n5a797e5 [Liang-Chi Hsieh] Use broadcasted weights. Fix compilation error.\n","date":"2015-02-07 03:22:11","modifiedFileCount":"2","status":"M","submitter":"Liang-Chi Hsieh"},{"authorTime":"2015-05-05 02:28:59","codes":[{"authorDate":"2015-05-05 02:28:59","commitOrder":6,"curCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = model.parent();\n    assert(parent.getMaxIter() == 10);\n    assert(parent.getRegParam() == 1.0);\n    assert(parent.getThreshold() == 0.6);\n    assert(model.getThreshold() == 0.6);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      assert(r.getDouble(0) == 0.0);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    assert(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = model2.parent();\n    assert(parent2.getMaxIter() == 5);\n    assert(parent2.getRegParam() == 0.1);\n    assert(parent2.getThreshold() == 0.4);\n    assert(model2.getThreshold() == 0.4);\n    assert(model2.getProbabilityCol().equals(\"theProb\"));\n  }\n","date":"2015-05-05 02:28:59","endLine":119,"groupId":"3288","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"logisticRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/7e/7189a2b1d53f753c8eec5eff04f728e69e9b0d.src","preCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    assert(model.fittingParamMap().apply(lr.maxIter()).equals(10));\n    assert(model.fittingParamMap().apply(lr.regParam()).equals(1.0));\n    assert(model.fittingParamMap().apply(lr.threshold()).equals(0.6));\n    assert(model.getThreshold() == 0.6);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      assert(r.getDouble(0) == 0.0);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    assert(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    assert(model2.fittingParamMap().apply(lr.maxIter()).equals(5));\n    assert(model2.fittingParamMap().apply(lr.regParam()).equals(0.1));\n    assert(model2.fittingParamMap().apply(lr.threshold()).equals(0.4));\n    assert(model2.getThreshold() == 0.4);\n    assert(model2.getProbabilityCol().equals(\"theProb\"));\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/classification/JavaLogisticRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2015-05-05 02:28:59","commitOrder":6,"curCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0);\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","date":"2015-05-05 02:28:59","endLine":91,"groupId":"1647","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"linearRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/a8/2b86d560b6e3f4e4819b5523de163345ef80e7.src","preCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0);\n    LinearRegressionModel model = lr.fit(dataset);\n    assert(model.fittingParamMap().apply(lr.maxIter()).equals(10));\n    assert(model.fittingParamMap().apply(lr.regParam()).equals(1.0));\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    assert(model2.fittingParamMap().apply(lr.maxIter()).equals(5));\n    assert(model2.fittingParamMap().apply(lr.regParam()).equals(0.1));\n    assert(model2.getPredictionCol().equals(\"thePred\"));\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/regression/JavaLinearRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"e0833c5958bbd73ff27cfe6865648d7b6e5a99bc","commitMessage":"@@@[SPARK-5956] [MLLIB] Pipeline components should be copyable.\n\nThis PR added `copy(extra: ParamMap): Params` to `Params`.  which makes a copy of the current instance with a randomly generated uid and some extra param values. With this change.  we only need to implement `fit` and `transform` without extra param values given the default implementation of `fit(dataset.  extra)`:\n\n~~~scala\ndef fit(dataset: DataFrame.  extra: ParamMap): Model = {\n  copy(extra).fit(dataset)\n}\n~~~\n\nInside `fit` and `transform`.  since only the embedded values are used.  I added `$` as an alias for `getOrDefault` to make the code easier to read. For example.  in `LinearRegression.fit` we have:\n\n~~~scala\nval effectiveRegParam = $(regParam) / yStd\nval effectiveL1RegParam = $(elasticNetParam) * effectiveRegParam\nval effectiveL2RegParam = (1.0 - $(elasticNetParam)) * effectiveRegParam\n~~~\n\nMeta-algorithm like `Pipeline` implements its own `copy(extra)`. So the fitted pipeline model stored all copied stages (no matter whether it is a transformer or a model).\n\nOther changes:\n* `Params$.inheritValues` is moved to `Params!.copyValues` and returns the target instance.\n* `fittingParamMap` was removed because the `parent` carries this information.\n* `validate` was renamed to `validateParams` to be more precise.\n\nTODOs:\n* [x] add tests for newly added methods\n* [ ] update documentation\n\njkbradley dbtsai\n\nAuthor: Xiangrui Meng <meng@databricks.com>\n\nCloses #5820 from mengxr/SPARK-5956 and squashes the following commits:\n\n7bef88d [Xiangrui Meng] address comments\n05229c3 [Xiangrui Meng] assert -> assertEquals\nb2927b1 [Xiangrui Meng] organize imports\nf14456b [Xiangrui Meng] Merge remote-tracking branch 'apache/master' into SPARK-5956\n93e7924 [Xiangrui Meng] add tests for hasParam & copy\n463ecae [Xiangrui Meng] merge master\n2b954c3 [Xiangrui Meng] update Binarizer\n465dd12 [Xiangrui Meng] Merge remote-tracking branch 'apache/master' into SPARK-5956\n282a1a8 [Xiangrui Meng] fix test\n819dd2d [Xiangrui Meng] merge master\nb642872 [Xiangrui Meng] example code runs\n5a67779 [Xiangrui Meng] examples compile\nc76b4d1 [Xiangrui Meng] fix all unit tests\n0f4fd64 [Xiangrui Meng] fix some tests\n9286a22 [Xiangrui Meng] copyValues to trained models\n53e0973 [Xiangrui Meng] move inheritValues to Params and rename it to copyValues\n9ee004e [Xiangrui Meng] merge copy and copyWith; rename validate to validateParams\nd882afc [Xiangrui Meng] test compile\nf082a31 [Xiangrui Meng] make Params copyable and simply handling of extra params in all spark.ml components\n","date":"2015-05-05 02:28:59","modifiedFileCount":"5","status":"M","submitter":"Xiangrui Meng"},{"authorTime":"2015-05-14 16:22:15","codes":[{"authorDate":"2015-05-14 16:22:15","commitOrder":7,"curCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = (LogisticRegression) model.parent();\n    assert(parent.getMaxIter() == 10);\n    assert(parent.getRegParam() == 1.0);\n    assert(parent.getThreshold() == 0.6);\n    assert(model.getThreshold() == 0.6);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      assert(r.getDouble(0) == 0.0);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    assert(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = (LogisticRegression) model2.parent();\n    assert(parent2.getMaxIter() == 5);\n    assert(parent2.getRegParam() == 0.1);\n    assert(parent2.getThreshold() == 0.4);\n    assert(model2.getThreshold() == 0.4);\n    assert(model2.getProbabilityCol().equals(\"theProb\"));\n  }\n","date":"2015-05-14 16:22:15","endLine":119,"groupId":"3288","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"logisticRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/f7/5e024a713ee8e8247bf5fbf501c92a02efb4a6.src","preCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = model.parent();\n    assert(parent.getMaxIter() == 10);\n    assert(parent.getRegParam() == 1.0);\n    assert(parent.getThreshold() == 0.6);\n    assert(model.getThreshold() == 0.6);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      assert(r.getDouble(0) == 0.0);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    assert(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = model2.parent();\n    assert(parent2.getMaxIter() == 5);\n    assert(parent2.getRegParam() == 0.1);\n    assert(parent2.getThreshold() == 0.4);\n    assert(model2.getThreshold() == 0.4);\n    assert(model2.getProbabilityCol().equals(\"theProb\"));\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/classification/JavaLogisticRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2015-05-14 16:22:15","commitOrder":7,"curCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0);\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = (LinearRegression) model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = (LinearRegression) model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","date":"2015-05-14 16:22:15","endLine":91,"groupId":"1647","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"linearRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/d5/91a456864e4a6804b2eafbb90936132b850133.src","preCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0);\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/regression/JavaLinearRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"1b8625f4258d6d1a049d0ba60e39e9757f5a568b","commitMessage":"@@@[SPARK-7407] [MLLIB] use uid + name to identify parameters\n\nA param instance is strongly attached to an parent in the current implementation. So if we make a copy of an estimator or a transformer in pipelines and other meta-algorithms.  it becomes error-prone to copy the params to the copied instances. In this PR.  a param is identified by its parent's UID and the param name. So it becomes loosely attached to its parent and all its derivatives. The UID is preserved during copying or fitting. All components now have a default constructor and a constructor that takes a UID as input. I keep the constructors for Param in this PR to reduce the amount of diff and moved `parent` as a mutable field.\n\nThis PR still needs some clean-ups.  and there are several spark.ml PRs pending. I'll try to get them merged first and then update this PR.\n\njkbradley\n\nAuthor: Xiangrui Meng <meng@databricks.com>\n\nCloses #6019 from mengxr/SPARK-7407 and squashes the following commits:\n\nc4c8120 [Xiangrui Meng] Merge remote-tracking branch 'apache/master' into SPARK-7407\n520f0a2 [Xiangrui Meng] address comments\n2569168 [Xiangrui Meng] fix tests\n873caca [Xiangrui Meng] fix tests in OneVsRest; fix a racing condition in shouldOwn\n409ea08 [Xiangrui Meng] minor updates\n83a163c [Xiangrui Meng] update JavaDeveloperApiExample\n5db5325 [Xiangrui Meng] update OneVsRest\n7bde7ae [Xiangrui Meng] merge master\n697fdf9 [Xiangrui Meng] update Bucketizer\n7b4f6c2 [Xiangrui Meng] Merge remote-tracking branch 'apache/master' into SPARK-7407\n629d402 [Xiangrui Meng] fix LRSuite\n154516f [Xiangrui Meng] merge master\naa4a611 [Xiangrui Meng] fix examples/compile\na4794dd [Xiangrui Meng] change Param to use  to reduce the size of diff\nfdbc415 [Xiangrui Meng] all tests passed\nc255f17 [Xiangrui Meng] fix tests in ParamsSuite\n818e1db [Xiangrui Meng] merge master\ne1160cf [Xiangrui Meng] fix tests\nfbc39f0 [Xiangrui Meng] pass test:compile\n108937e [Xiangrui Meng] pass compile\n8726d39 [Xiangrui Meng] use parent uid in Param\neaeed35 [Xiangrui Meng] update Identifiable\n","date":"2015-05-14 16:22:15","modifiedFileCount":"4","status":"M","submitter":"Xiangrui Meng"},{"authorTime":"2015-05-14 16:22:15","codes":[{"authorDate":"2015-08-05 01:12:22","commitOrder":8,"curCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = (LogisticRegression) model.parent();\n    assert(parent.getMaxIter() == 10);\n    assert(parent.getRegParam() == 1.0);\n    assert(parent.getThresholds()[0] == 0.4);\n    assert(parent.getThresholds()[1] == 0.6);\n    assert(parent.getThreshold() == 0.6);\n    assert(model.getThreshold() == 0.6);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      assert(r.getDouble(0) == 0.0);\n    }\n    \r\n    double[] thresholds = {1.0, 0.0};\n    model.transform(\n      dataset, model.thresholds().w(thresholds), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    assert(foundNonZero);\n\n    \r\n    double[] thresholds2 = {0.6, 0.4};\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.thresholds().w(thresholds2), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = (LogisticRegression) model2.parent();\n    assert(parent2.getMaxIter() == 5);\n    assert(parent2.getRegParam() == 0.1);\n    assert(parent2.getThreshold() == 0.4);\n    assert(model2.getThreshold() == 0.4);\n    assert(model2.getProbabilityCol().equals(\"theProb\"));\n  }\n","date":"2015-08-05 01:12:22","endLine":124,"groupId":"424","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"logisticRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/fb/1de51163f2e3da3cf101223dbb49524b7f7ac9.src","preCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = (LogisticRegression) model.parent();\n    assert(parent.getMaxIter() == 10);\n    assert(parent.getRegParam() == 1.0);\n    assert(parent.getThreshold() == 0.6);\n    assert(model.getThreshold() == 0.6);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      assert(r.getDouble(0) == 0.0);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    assert(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = (LogisticRegression) model2.parent();\n    assert(parent2.getMaxIter() == 5);\n    assert(parent2.getRegParam() == 0.1);\n    assert(parent2.getThreshold() == 0.4);\n    assert(model2.getThreshold() == 0.4);\n    assert(model2.getProbabilityCol().equals(\"theProb\"));\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/classification/JavaLogisticRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2015-05-14 16:22:15","commitOrder":8,"curCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0);\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = (LinearRegression) model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = (LinearRegression) model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","date":"2015-05-14 16:22:15","endLine":91,"groupId":"1647","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"linearRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/d5/91a456864e4a6804b2eafbb90936132b850133.src","preCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0);\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = (LinearRegression) model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = (LinearRegression) model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/regression/JavaLinearRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"5a23213c148bfe362514f9c71f5273ebda0a848a","commitMessage":"@@@[SPARK-8069] [ML] Add multiclass thresholds for ProbabilisticClassifier\n\nThis PR replaces the old \"threshold\" with a generalized \"thresholds\" Param.  We keep getThreshold. setThreshold for backwards compatibility for binary classification.\n\nNote that the primary author of this PR is holdenk\n\nAuthor: Holden Karau <holden@pigscanfly.ca>\nAuthor: Joseph K. Bradley <joseph@databricks.com>\n\nCloses #7909 from jkbradley/holdenk-SPARK-8069-add-cutoff-aka-threshold-to-random-forest and squashes the following commits:\n\n3952977 [Joseph K. Bradley] fixed pyspark doc test\n85febc8 [Joseph K. Bradley] made python unit tests a little more robust\n7eb1d86 [Joseph K. Bradley] small cleanups\n6cc2ed8 [Joseph K. Bradley] Fixed remaining merge issues.\n0255e44 [Joseph K. Bradley] Many cleanups for thresholds.  some more tests\n7565a60 [Holden Karau] fix pep8 style checks.  add a getThreshold method similar to our LogisticRegression.scala one for API compat\nbe87f26 [Holden Karau] Convert threshold to thresholds in the python code.  add specialized support for Array[Double] to shared parems codegen.  etc.\n6747dad [Holden Karau] Override raw2prediction for ProbabilisticClassifier.  fix some tests\n25df168 [Holden Karau] Fix handling of thresholds in LogisticRegression\nc02d6c0 [Holden Karau] No default for thresholds\n5e43628 [Holden Karau] CR feedback and fixed the renamed test\nf3fbbd1 [Holden Karau] revert the changes to random forest :(\n51f581c [Holden Karau] Add explicit types to public methods.  fix long line\nf7032eb [Holden Karau] Fix a java test bug.  remove some unecessary changes\nadf15b4 [Holden Karau] rename the classifier suite test to ProbabilisticClassifierSuite now that we only have it in Probabilistic\n398078a [Holden Karau] move the thresholding around a bunch based on the design doc\n4893bdc [Holden Karau] Use numtrees of 3 since previous result was tied (one tree for each) and the switch from different max methods picked a different element (since they were equal I think this is ok)\n638854c [Holden Karau] Add a scala RandomForestClassifierSuite test based on corresponding python test\ne09919c [Holden Karau] Fix return type.  I need more coffee....\n8d92cac [Holden Karau] Use ClassifierParams as the head\n3456ed3 [Holden Karau] Add explicit return types even though just test\na0f3b0c [Holden Karau] scala style fixes\n6f14314 [Holden Karau] Since hasthreshold/hasthresholds is in root classifier now\nffc8dab [Holden Karau] Update the sharedParams\n0420290 [Holden Karau] Allow us to override the get methods selectively\n978e77a [Holden Karau] Move HasThreshold into classifier params and start defining the overloaded getThreshold/getThresholds functions\n1433e52 [Holden Karau] Revert \"try and hide threshold but chainges the API so no dice there\"\n1f09a2e [Holden Karau] try and hide threshold but chainges the API so no dice there\nefb9084 [Holden Karau] move setThresholds only to where its used\n6b34809 [Holden Karau] Add a test with thresholding for the RFCS\n74f54c3 [Holden Karau] Fix creation of vote array\n1986fa8 [Holden Karau] Setting the thresholds only makes sense if the underlying class hasn't overridden predict.  so lets push it down.\n2f44b18 [Holden Karau] Add a global default of null for thresholds param\nf338cfc [Holden Karau] Wait that wasn't a good idea.  Revert \"Some progress towards unifying threshold and thresholds\"\n634b06f [Holden Karau] Some progress towards unifying threshold and thresholds\n85c9e01 [Holden Karau] Test passes again... little fnur\n099c0f3 [Holden Karau] Move thresholds around some more (set on model not trainer)\n0f46836 [Holden Karau] Start adding a classifiersuite\nf70eb5e [Holden Karau] Fix test compile issues\na7d59c8 [Holden Karau] Move thresholding into Classifier trait\n5d999d2 [Holden Karau] Some more progress.  start adding a test (maybe try and see if we can find a better thing to use for the base of the test)\n1fed644 [Holden Karau] Use thresholds to scale scores in random forest classifcation\n31d6bf2 [Holden Karau] Start threading the threshold info through\n0ef228c [Holden Karau] Add hasthresholds\n","date":"2015-08-05 01:12:22","modifiedFileCount":"2","status":"M","submitter":"Holden Karau"},{"authorTime":"2015-05-14 16:22:15","codes":[{"authorDate":"2015-08-13 05:27:13","commitOrder":9,"curCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = (LogisticRegression) model.parent();\n    assert(parent.getMaxIter() == 10);\n    assert(parent.getRegParam() == 1.0);\n    assert(parent.getThresholds()[0] == 0.4);\n    assert(parent.getThresholds()[1] == 0.6);\n    assert(parent.getThreshold() == 0.6);\n    assert(model.getThreshold() == 0.6);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      assert(r.getDouble(0) == 0.0);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    assert(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = (LogisticRegression) model2.parent();\n    assert(parent2.getMaxIter() == 5);\n    assert(parent2.getRegParam() == 0.1);\n    assert(parent2.getThreshold() == 0.4);\n    assert(model2.getThreshold() == 0.4);\n    assert(model2.getProbabilityCol().equals(\"theProb\"));\n  }\n","date":"2015-08-13 05:27:13","endLine":121,"groupId":"3288","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"logisticRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/61/8b95b9bd126402f8d7aec36e44edc5e15d75d9.src","preCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = (LogisticRegression) model.parent();\n    assert(parent.getMaxIter() == 10);\n    assert(parent.getRegParam() == 1.0);\n    assert(parent.getThresholds()[0] == 0.4);\n    assert(parent.getThresholds()[1] == 0.6);\n    assert(parent.getThreshold() == 0.6);\n    assert(model.getThreshold() == 0.6);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      assert(r.getDouble(0) == 0.0);\n    }\n    \r\n    double[] thresholds = {1.0, 0.0};\n    model.transform(\n      dataset, model.thresholds().w(thresholds), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    assert(foundNonZero);\n\n    \r\n    double[] thresholds2 = {0.6, 0.4};\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.thresholds().w(thresholds2), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = (LogisticRegression) model2.parent();\n    assert(parent2.getMaxIter() == 5);\n    assert(parent2.getRegParam() == 0.1);\n    assert(parent2.getThreshold() == 0.4);\n    assert(model2.getThreshold() == 0.4);\n    assert(model2.getProbabilityCol().equals(\"theProb\"));\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/classification/JavaLogisticRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2015-05-14 16:22:15","commitOrder":9,"curCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0);\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = (LinearRegression) model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = (LinearRegression) model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","date":"2015-05-14 16:22:15","endLine":91,"groupId":"1647","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"linearRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/d5/91a456864e4a6804b2eafbb90936132b850133.src","preCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0);\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = (LinearRegression) model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = (LinearRegression) model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/regression/JavaLinearRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"551def5d6972440365bd7436d484a67138d9a8f3","commitMessage":"@@@[SPARK-9789] [ML] Added logreg threshold param back\n\nReinstated LogisticRegression.threshold Param for binary compatibility.  Param thresholds overrides threshold.  if set.\n\nCC: mengxr dbtsai feynmanliang\n\nAuthor: Joseph K. Bradley <joseph@databricks.com>\n\nCloses #8079 from jkbradley/logreg-reinstate-threshold.\n","date":"2015-08-13 05:27:13","modifiedFileCount":"1","status":"M","submitter":"Joseph K. Bradley"},{"authorTime":"2015-05-14 16:22:15","codes":[{"authorDate":"2015-09-05 18:04:00","commitOrder":10,"curCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = (LogisticRegression) model.parent();\n    Assert.assertEquals(10, parent.getMaxIter());\n    Assert.assertEquals(1.0, parent.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent.getThresholds()[0], eps);\n    Assert.assertEquals(0.6, parent.getThresholds()[1], eps);\n    Assert.assertEquals(0.6, parent.getThreshold(), eps);\n    Assert.assertEquals(0.6, model.getThreshold(), eps);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      Assert.assertEquals(0.0, r.getDouble(0), eps);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    Assert.assertTrue(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = (LogisticRegression) model2.parent();\n    Assert.assertEquals(5, parent2.getMaxIter());\n    Assert.assertEquals(0.1, parent2.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent2.getThreshold(), eps);\n    Assert.assertEquals(0.4, model2.getThreshold(), eps);\n    Assert.assertEquals(\"theProb\", model2.getProbabilityCol());\n  }\n","date":"2015-09-05 18:04:00","endLine":122,"groupId":"2517","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"logisticRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/fd/22eb6dca0185f96de7e5a526be748315dc229b.src","preCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = (LogisticRegression) model.parent();\n    assert(parent.getMaxIter() == 10);\n    assert(parent.getRegParam() == 1.0);\n    assert(parent.getThresholds()[0] == 0.4);\n    assert(parent.getThresholds()[1] == 0.6);\n    assert(parent.getThreshold() == 0.6);\n    assert(model.getThreshold() == 0.6);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      assert(r.getDouble(0) == 0.0);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    assert(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = (LogisticRegression) model2.parent();\n    assert(parent2.getMaxIter() == 5);\n    assert(parent2.getRegParam() == 0.1);\n    assert(parent2.getThreshold() == 0.4);\n    assert(model2.getThreshold() == 0.4);\n    assert(model2.getProbabilityCol().equals(\"theProb\"));\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/classification/JavaLogisticRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2015-05-14 16:22:15","commitOrder":10,"curCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0);\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = (LinearRegression) model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = (LinearRegression) model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","date":"2015-05-14 16:22:15","endLine":91,"groupId":"1647","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"linearRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/d5/91a456864e4a6804b2eafbb90936132b850133.src","preCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0);\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = (LinearRegression) model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = (LinearRegression) model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/regression/JavaLinearRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"871764c6ce531af5b1ac7ccccb32e7a903b59a2a","commitMessage":"@@@[SPARK-10013] [ML] [JAVA] [TEST] remove java assert from java unit tests\n\nFrom Jira: We should use assertTrue.  etc. instead to make sure the asserts are not ignored in tests.\n\nAuthor: Holden Karau <holden@pigscanfly.ca>\n\nCloses #8607 from holdenk/SPARK-10013-remove-java-assert-from-java-unit-tests.\n","date":"2015-09-05 18:04:00","modifiedFileCount":"4","status":"M","submitter":"Holden Karau"},{"authorTime":"2015-10-20 01:46:10","codes":[{"authorDate":"2015-09-05 18:04:00","commitOrder":11,"curCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = (LogisticRegression) model.parent();\n    Assert.assertEquals(10, parent.getMaxIter());\n    Assert.assertEquals(1.0, parent.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent.getThresholds()[0], eps);\n    Assert.assertEquals(0.6, parent.getThresholds()[1], eps);\n    Assert.assertEquals(0.6, parent.getThreshold(), eps);\n    Assert.assertEquals(0.6, model.getThreshold(), eps);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      Assert.assertEquals(0.0, r.getDouble(0), eps);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    Assert.assertTrue(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = (LogisticRegression) model2.parent();\n    Assert.assertEquals(5, parent2.getMaxIter());\n    Assert.assertEquals(0.1, parent2.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent2.getThreshold(), eps);\n    Assert.assertEquals(0.4, model2.getThreshold(), eps);\n    Assert.assertEquals(\"theProb\", model2.getProbabilityCol());\n  }\n","date":"2015-09-05 18:04:00","endLine":122,"groupId":"2517","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"logisticRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/fd/22eb6dca0185f96de7e5a526be748315dc229b.src","preCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = (LogisticRegression) model.parent();\n    Assert.assertEquals(10, parent.getMaxIter());\n    Assert.assertEquals(1.0, parent.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent.getThresholds()[0], eps);\n    Assert.assertEquals(0.6, parent.getThresholds()[1], eps);\n    Assert.assertEquals(0.6, parent.getThreshold(), eps);\n    Assert.assertEquals(0.6, model.getThreshold(), eps);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      Assert.assertEquals(0.0, r.getDouble(0), eps);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    Assert.assertTrue(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = (LogisticRegression) model2.parent();\n    Assert.assertEquals(5, parent2.getMaxIter());\n    Assert.assertEquals(0.1, parent2.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent2.getThreshold(), eps);\n    Assert.assertEquals(0.4, model2.getThreshold(), eps);\n    Assert.assertEquals(\"theProb\", model2.getProbabilityCol());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/classification/JavaLogisticRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"},{"authorDate":"2015-10-20 01:46:10","commitOrder":11,"curCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0).setSolver(\"l-bfgs\");\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = (LinearRegression) model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = (LinearRegression) model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","date":"2015-10-20 01:46:10","endLine":92,"groupId":"1647","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"linearRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/4f/b0b0d1092b6ffc5b8badd0c37367e3c59f9f2b.src","preCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0);\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = (LinearRegression) model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = (LinearRegression) model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/regression/JavaLinearRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"4c33a34ba3167ae67fdb4978ea2166ce65638fb9","commitMessage":"@@@[SPARK-10668] [ML] Use WeightedLeastSquares in LinearRegression with L?\n\n?2 regularization if the number of features is small\n\nAuthor: lewuathe <lewuathe@me.com>\nAuthor: Lewuathe <sasaki@treasure-data.com>\nAuthor: Kai Sasaki <sasaki@treasure-data.com>\nAuthor: Lewuathe <lewuathe@me.com>\n\nCloses #8884 from Lewuathe/SPARK-10668.\n","date":"2015-10-20 01:46:10","modifiedFileCount":"1","status":"M","submitter":"lewuathe"},{"authorTime":"2015-10-20 01:46:10","codes":[{"authorDate":"2016-03-11 09:00:17","commitOrder":12,"curCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = (LogisticRegression) model.parent();\n    Assert.assertEquals(10, parent.getMaxIter());\n    Assert.assertEquals(1.0, parent.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent.getThresholds()[0], eps);\n    Assert.assertEquals(0.6, parent.getThresholds()[1], eps);\n    Assert.assertEquals(0.6, parent.getThreshold(), eps);\n    Assert.assertEquals(0.6, model.getThreshold(), eps);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    Dataset<Row> predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      Assert.assertEquals(0.0, r.getDouble(0), eps);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    Dataset<Row> predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    Assert.assertTrue(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = (LogisticRegression) model2.parent();\n    Assert.assertEquals(5, parent2.getMaxIter());\n    Assert.assertEquals(0.1, parent2.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent2.getThreshold(), eps);\n    Assert.assertEquals(0.4, model2.getThreshold(), eps);\n    Assert.assertEquals(\"theProb\", model2.getProbabilityCol());\n  }\n","date":"2016-03-11 09:00:17","endLine":122,"groupId":"2517","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"logisticRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/53/6f0dc58ff38b0953aa095ecbe18032f19c4b49.src","preCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = (LogisticRegression) model.parent();\n    Assert.assertEquals(10, parent.getMaxIter());\n    Assert.assertEquals(1.0, parent.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent.getThresholds()[0], eps);\n    Assert.assertEquals(0.6, parent.getThresholds()[1], eps);\n    Assert.assertEquals(0.6, parent.getThreshold(), eps);\n    Assert.assertEquals(0.6, model.getThreshold(), eps);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    DataFrame predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      Assert.assertEquals(0.0, r.getDouble(0), eps);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    DataFrame predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    Assert.assertTrue(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = (LogisticRegression) model2.parent();\n    Assert.assertEquals(5, parent2.getMaxIter());\n    Assert.assertEquals(0.1, parent2.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent2.getThreshold(), eps);\n    Assert.assertEquals(0.4, model2.getThreshold(), eps);\n    Assert.assertEquals(\"theProb\", model2.getProbabilityCol());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/classification/JavaLogisticRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2015-10-20 01:46:10","commitOrder":12,"curCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0).setSolver(\"l-bfgs\");\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = (LinearRegression) model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = (LinearRegression) model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","date":"2015-10-20 01:46:10","endLine":92,"groupId":"1647","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"linearRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/4f/b0b0d1092b6ffc5b8badd0c37367e3c59f9f2b.src","preCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0).setSolver(\"l-bfgs\");\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = (LinearRegression) model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = (LinearRegression) model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/regression/JavaLinearRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"}],"commitId":"1d542785b9949e7f92025e6754973a779cc37c52","commitMessage":"@@@[SPARK-13244][SQL] Migrates DataFrame to Dataset\n\n## What changes were proposed in this pull request?\n\nThis PR unifies DataFrame and Dataset by migrating existing DataFrame operations to Dataset and make `DataFrame` a type alias of `Dataset[Row]`.\n\nMost Scala code changes are source compatible.  but Java API is broken as Java knows nothing about Scala type alias (mostly replacing `DataFrame` with `Dataset<Row>`).\n\nThere are several noticeable API changes related to those returning arrays:\n\n1.  `collect`/`take`\n\n    -   Old APIs in class `DataFrame`:\n\n        ```scala\n        def collect(): Array[Row]\n        def take(n: Int): Array[Row]\n        ```\n\n    -   New APIs in class `Dataset[T]`:\n\n        ```scala\n        def collect(): Array[T]\n        def take(n: Int): Array[T]\n\n        def collectRows(): Array[Row]\n        def takeRows(n: Int): Array[Row]\n        ```\n\n    Two specialized methods `collectRows` and `takeRows` are added because Java doesn't support returning generic arrays. Thus.  for example.  `DataFrame.collect(): Array[T]` actually returns `Object` instead of `Array<T>` from Java side.\n\n    Normally.  Java users may fall back to `collectAsList` and `takeAsList`.  The two new specialized versions are added to avoid performance regression in ML related code (but maybe I'm wrong and they are not necessary here).\n\n1.  `randomSplit`\n\n    -   Old APIs in class `DataFrame`:\n\n        ```scala\n        def randomSplit(weights: Array[Double].  seed: Long): Array[DataFrame]\n        def randomSplit(weights: Array[Double]): Array[DataFrame]\n        ```\n\n    -   New APIs in class `Dataset[T]`:\n\n        ```scala\n        def randomSplit(weights: Array[Double].  seed: Long): Array[Dataset[T]]\n        def randomSplit(weights: Array[Double]): Array[Dataset[T]]\n        ```\n\n    Similar problem as above.  but hasn't been addressed for Java API yet.  We can probably add `randomSplitAsList` to fix this one.\n\n1.  `groupBy`\n\n    Some original `DataFrame.groupBy` methods have conflicting signature with original `Dataset.groupBy` methods.  To distinguish these two.  typed `Dataset.groupBy` methods are renamed to `groupByKey`.\n\nOther noticeable changes:\n\n1.  Dataset always do eager analysis now\n\n    We used to support disabling DataFrame eager analysis to help reporting partially analyzed malformed logical plan on analysis failure.  However.  Dataset encoders requires eager analysi during Dataset construction.  To preserve the error reporting feature.  `AnalysisException` now takes an extra `Option[LogicalPlan]` argument to hold the partially analyzed plan.  so that we can check the plan tree when reporting test failures.  This plan is passed by `QueryExecution.assertAnalyzed`.\n\n## How was this patch tested?\n\nExisting tests do the work.\n\n## TODO\n\n- [ ] Fix all tests\n- [ ] Re-enable MiMA check\n- [ ] Update ScalaDoc (`since`.  `group`.  and example code)\n\nAuthor: Cheng Lian <lian@databricks.com>\nAuthor: Yin Huai <yhuai@databricks.com>\nAuthor: Wenchen Fan <wenchen@databricks.com>\nAuthor: Cheng Lian <liancheng@users.noreply.github.com>\n\nCloses #11443 from liancheng/ds-to-df.\n","date":"2016-03-11 09:00:17","modifiedFileCount":"87","status":"M","submitter":"Cheng Lian"},{"authorTime":"2015-10-20 01:46:10","codes":[{"authorDate":"2016-05-11 02:17:47","commitOrder":13,"curCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = (LogisticRegression) model.parent();\n    Assert.assertEquals(10, parent.getMaxIter());\n    Assert.assertEquals(1.0, parent.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent.getThresholds()[0], eps);\n    Assert.assertEquals(0.6, parent.getThresholds()[1], eps);\n    Assert.assertEquals(0.6, parent.getThreshold(), eps);\n    Assert.assertEquals(0.6, model.getThreshold(), eps);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    Dataset<Row> predAllZero = spark.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r : predAllZero.collectAsList()) {\n      Assert.assertEquals(0.0, r.getDouble(0), eps);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    Dataset<Row> predNotAllZero = spark.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r : predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    Assert.assertTrue(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n      lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = (LogisticRegression) model2.parent();\n    Assert.assertEquals(5, parent2.getMaxIter());\n    Assert.assertEquals(0.1, parent2.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent2.getThreshold(), eps);\n    Assert.assertEquals(0.4, model2.getThreshold(), eps);\n    Assert.assertEquals(\"theProb\", model2.getProbabilityCol());\n  }\n","date":"2016-05-11 02:17:47","endLine":124,"groupId":"2517","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"logisticRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/e3/ff68364e69026d300c4059094fcea321e351ab.src","preCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = (LogisticRegression) model.parent();\n    Assert.assertEquals(10, parent.getMaxIter());\n    Assert.assertEquals(1.0, parent.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent.getThresholds()[0], eps);\n    Assert.assertEquals(0.6, parent.getThresholds()[1], eps);\n    Assert.assertEquals(0.6, parent.getThreshold(), eps);\n    Assert.assertEquals(0.6, model.getThreshold(), eps);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    Dataset<Row> predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r: predAllZero.collectAsList()) {\n      Assert.assertEquals(0.0, r.getDouble(0), eps);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    Dataset<Row> predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r: predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    Assert.assertTrue(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n        lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = (LogisticRegression) model2.parent();\n    Assert.assertEquals(5, parent2.getMaxIter());\n    Assert.assertEquals(0.1, parent2.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent2.getThreshold(), eps);\n    Assert.assertEquals(0.4, model2.getThreshold(), eps);\n    Assert.assertEquals(\"theProb\", model2.getProbabilityCol());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/classification/JavaLogisticRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2015-10-20 01:46:10","commitOrder":13,"curCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0).setSolver(\"l-bfgs\");\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = (LinearRegression) model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = (LinearRegression) model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","date":"2015-10-20 01:46:10","endLine":92,"groupId":"1647","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"linearRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/4f/b0b0d1092b6ffc5b8badd0c37367e3c59f9f2b.src","preCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0).setSolver(\"l-bfgs\");\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = (LinearRegression) model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = (LinearRegression) model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/regression/JavaLinearRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"}],"commitId":"ed0b4070fb50054b1ecf66ff6c32458a4967dfd3","commitMessage":"@@@[SPARK-15037][SQL][MLLIB] Use SparkSession instead of SQLContext in Scala/Java TestSuites\n\n## What changes were proposed in this pull request?\nUse SparkSession instead of SQLContext in Scala/Java TestSuites\nas this PR already very big working Python TestSuites in a diff PR.\n\n## How was this patch tested?\nExisting tests\n\nAuthor: Sandeep Singh <sandeep@techaddict.me>\n\nCloses #12907 from techaddict/SPARK-15037.\n","date":"2016-05-11 02:17:47","modifiedFileCount":"63","status":"M","submitter":"Sandeep Singh"},{"authorTime":"2015-10-20 01:46:10","codes":[{"authorDate":"2016-05-18 09:01:59","commitOrder":14,"curCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = (LogisticRegression) model.parent();\n    Assert.assertEquals(10, parent.getMaxIter());\n    Assert.assertEquals(1.0, parent.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent.getThresholds()[0], eps);\n    Assert.assertEquals(0.6, parent.getThresholds()[1], eps);\n    Assert.assertEquals(0.6, parent.getThreshold(), eps);\n    Assert.assertEquals(0.6, model.getThreshold(), eps);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).createOrReplaceTempView(\"predAllZero\");\n    Dataset<Row> predAllZero = spark.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r : predAllZero.collectAsList()) {\n      Assert.assertEquals(0.0, r.getDouble(0), eps);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .createOrReplaceTempView(\"predNotAllZero\");\n    Dataset<Row> predNotAllZero = spark.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r : predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    Assert.assertTrue(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n      lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = (LogisticRegression) model2.parent();\n    Assert.assertEquals(5, parent2.getMaxIter());\n    Assert.assertEquals(0.1, parent2.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent2.getThreshold(), eps);\n    Assert.assertEquals(0.4, model2.getThreshold(), eps);\n    Assert.assertEquals(\"theProb\", model2.getProbabilityCol());\n  }\n","date":"2016-05-18 09:01:59","endLine":124,"groupId":"10483","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"logisticRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b8/da04c26a49d44c2a78e21392cba52005a659d2.src","preCode":"  public void logisticRegressionWithSetters() {\n    \r\n    LogisticRegression lr = new LogisticRegression()\n      .setMaxIter(10)\n      .setRegParam(1.0)\n      .setThreshold(0.6)\n      .setProbabilityCol(\"myProbability\");\n    LogisticRegressionModel model = lr.fit(dataset);\n    LogisticRegression parent = (LogisticRegression) model.parent();\n    Assert.assertEquals(10, parent.getMaxIter());\n    Assert.assertEquals(1.0, parent.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent.getThresholds()[0], eps);\n    Assert.assertEquals(0.6, parent.getThresholds()[1], eps);\n    Assert.assertEquals(0.6, parent.getThreshold(), eps);\n    Assert.assertEquals(0.6, model.getThreshold(), eps);\n\n    \r\n    model.setThreshold(1.0);\n    model.transform(dataset).registerTempTable(\"predAllZero\");\n    Dataset<Row> predAllZero = spark.sql(\"SELECT prediction, myProbability FROM predAllZero\");\n    for (Row r : predAllZero.collectAsList()) {\n      Assert.assertEquals(0.0, r.getDouble(0), eps);\n    }\n    \r\n    model.transform(dataset, model.threshold().w(0.0), model.probabilityCol().w(\"myProb\"))\n      .registerTempTable(\"predNotAllZero\");\n    Dataset<Row> predNotAllZero = spark.sql(\"SELECT prediction, myProb FROM predNotAllZero\");\n    boolean foundNonZero = false;\n    for (Row r : predNotAllZero.collectAsList()) {\n      if (r.getDouble(0) != 0.0) foundNonZero = true;\n    }\n    Assert.assertTrue(foundNonZero);\n\n    \r\n    LogisticRegressionModel model2 = lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1),\n      lr.threshold().w(0.4), lr.probabilityCol().w(\"theProb\"));\n    LogisticRegression parent2 = (LogisticRegression) model2.parent();\n    Assert.assertEquals(5, parent2.getMaxIter());\n    Assert.assertEquals(0.1, parent2.getRegParam(), eps);\n    Assert.assertEquals(0.4, parent2.getThreshold(), eps);\n    Assert.assertEquals(0.4, model2.getThreshold(), eps);\n    Assert.assertEquals(\"theProb\", model2.getProbabilityCol());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/classification/JavaLogisticRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2015-10-20 01:46:10","commitOrder":14,"curCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0).setSolver(\"l-bfgs\");\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = (LinearRegression) model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = (LinearRegression) model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","date":"2015-10-20 01:46:10","endLine":92,"groupId":"10483","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"linearRegressionWithSetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/4f/b0b0d1092b6ffc5b8badd0c37367e3c59f9f2b.src","preCode":"  public void linearRegressionWithSetters() {\n    \r\n    LinearRegression lr = new LinearRegression()\n        .setMaxIter(10)\n        .setRegParam(1.0).setSolver(\"l-bfgs\");\n    LinearRegressionModel model = lr.fit(dataset);\n    LinearRegression parent = (LinearRegression) model.parent();\n    assertEquals(10, parent.getMaxIter());\n    assertEquals(1.0, parent.getRegParam(), 0.0);\n\n    \r\n    LinearRegressionModel model2 =\n        lr.fit(dataset, lr.maxIter().w(5), lr.regParam().w(0.1), lr.predictionCol().w(\"thePred\"));\n    LinearRegression parent2 = (LinearRegression) model2.parent();\n    assertEquals(5, parent2.getMaxIter());\n    assertEquals(0.1, parent2.getRegParam(), 0.0);\n    assertEquals(\"thePred\", model2.getPredictionCol());\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/ml/regression/JavaLinearRegressionSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"}],"commitId":"25b315e6cad7c27b62dcaa2c194293c1115fdfb3","commitMessage":"@@@[SPARK-15171][SQL] Remove the references to deprecated method dataset.registerTempTable\n\n## What changes were proposed in this pull request?\n\nUpdate the unit test code.  examples.  and documents to remove calls to deprecated method `dataset.registerTempTable`.\n\n## How was this patch tested?\n\nThis PR only changes the unit test code.  examples.  and comments. It should be safe.\nThis is a follow up of PR https://github.com/apache/spark/pull/12945 which was merged.\n\nAuthor: Sean Zhong <seanzhong@databricks.com>\n\nCloses #13098 from clockfly/spark-15171-remove-deprecation.\n","date":"2016-05-18 09:01:59","modifiedFileCount":"9","status":"M","submitter":"Sean Zhong"}]
