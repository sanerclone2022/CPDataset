[{"authorTime":"2020-11-10 01:00:52","codes":[{"authorDate":"2020-11-10 01:00:52","commitOrder":1,"curCode":"  public void testFailureAfterData() throws IOException {\n    StreamCallbackWithID stream =\n      pushResolver.receiveBlockDataAsStream(new PushBlockStream(TEST_APP, 0, 0, 0, 0));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[4]));\n    stream.onFailure(stream.getID(), new RuntimeException(\"Forced Failure\"));\n    pushResolver.finalizeShuffleMerge(new FinalizeShuffleMerge(TEST_APP, 0));\n    MergedBlockMeta blockMeta = pushResolver.getMergedBlockMeta(TEST_APP, 0, 0);\n    assertEquals(\"num-chunks\", 0, blockMeta.getNumChunks());\n  }\n","date":"2020-11-10 01:00:52","endLine":231,"groupId":"1186","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailureAfterData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/0f/200dc721963b1871eeac1958230b6150bf5b83.src","preCode":"  public void testFailureAfterData() throws IOException {\n    StreamCallbackWithID stream =\n      pushResolver.receiveBlockDataAsStream(new PushBlockStream(TEST_APP, 0, 0, 0, 0));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[4]));\n    stream.onFailure(stream.getID(), new RuntimeException(\"Forced Failure\"));\n    pushResolver.finalizeShuffleMerge(new FinalizeShuffleMerge(TEST_APP, 0));\n    MergedBlockMeta blockMeta = pushResolver.getMergedBlockMeta(TEST_APP, 0, 0);\n    assertEquals(\"num-chunks\", 0, blockMeta.getNumChunks());\n  }\n","realPath":"common/network-shuffle/src/test/java/org/apache/spark/network/shuffle/RemoteBlockPushResolverSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"B"},{"authorDate":"2020-11-10 01:00:52","commitOrder":1,"curCode":"  public void testFailureAfterMultipleDataBlocks() throws IOException {\n    StreamCallbackWithID stream =\n      pushResolver.receiveBlockDataAsStream(new PushBlockStream(TEST_APP, 0, 0, 0, 0));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[2]));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[3]));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[4]));\n    stream.onFailure(stream.getID(), new RuntimeException(\"Forced Failure\"));\n    pushResolver.finalizeShuffleMerge(new FinalizeShuffleMerge(TEST_APP, 0));\n    MergedBlockMeta blockMeta = pushResolver.getMergedBlockMeta(TEST_APP, 0, 0);\n    assertEquals(\"num-chunks\", 0, blockMeta.getNumChunks());\n  }\n","date":"2020-11-10 01:00:52","endLine":244,"groupId":"1186","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailureAfterMultipleDataBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/0f/200dc721963b1871eeac1958230b6150bf5b83.src","preCode":"  public void testFailureAfterMultipleDataBlocks() throws IOException {\n    StreamCallbackWithID stream =\n      pushResolver.receiveBlockDataAsStream(new PushBlockStream(TEST_APP, 0, 0, 0, 0));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[2]));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[3]));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[4]));\n    stream.onFailure(stream.getID(), new RuntimeException(\"Forced Failure\"));\n    pushResolver.finalizeShuffleMerge(new FinalizeShuffleMerge(TEST_APP, 0));\n    MergedBlockMeta blockMeta = pushResolver.getMergedBlockMeta(TEST_APP, 0, 0);\n    assertEquals(\"num-chunks\", 0, blockMeta.getNumChunks());\n  }\n","realPath":"common/network-shuffle/src/test/java/org/apache/spark/network/shuffle/RemoteBlockPushResolverSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"B"}],"commitId":"8113c88542ee282b510c7e046d64df1761a85d14","commitMessage":"@@@[SPARK-32916][SHUFFLE] Implementation of shuffle service that leverages push-based shuffle in YARN deployment mode\n\n\n What changes were proposed in this pull request?\nThis is one of the patches for SPIP [SPARK-30602](https://issues.apache.org/jira/browse/SPARK-30602) which is needed for push-based shuffle.\nSummary of changes:\n- Adds an implementation of `MergedShuffleFileManager` which was introduced with [Spark 32915](https://issues.apache.org/jira/browse/SPARK-32915).\n- Integrated the push-based shuffle service with `YarnShuffleService`.\n\n\n Why are the changes needed?\nRefer to the SPIP in  [SPARK-30602](https://issues.apache.org/jira/browse/SPARK-30602).\n\n\n Does this PR introduce _any_ user-facing change?\nNo\n\n\n How was this patch tested?\nAdded unit tests.\nThe reference PR with the consolidated changes covering the complete implementation is also provided in [SPARK-30602](https://issues.apache.org/jira/browse/SPARK-30602).\nWe have already verified the functionality and the improved performance as documented in the SPIP doc.\n\nLead-authored-by: Min Shen mshenlinkedin.com\nCo-authored-by: Chandni Singh chsinghlinkedin.com\nCo-authored-by: Ye Zhou yezhoulinkedin.com\n\nCloses #30062 from otterc/SPARK-32916.\n\nLead-authored-by: Chandni Singh <singh.chandni@gmail.com>\nCo-authored-by: Chandni Singh <chsingh@linkedin.com>\nCo-authored-by: Ye Zhou <yezhou@linkedin.com>\nCo-authored-by: Min Shen <mshen@linkedin.com>\nSigned-off-by: Mridul Muralidharan <mridul<at>gmail.com>\n","date":"2020-11-10 01:00:52","modifiedFileCount":"13","status":"B","submitter":"Chandni Singh"},{"authorTime":"2021-07-20 13:03:30","codes":[{"authorDate":"2021-07-20 13:03:30","commitOrder":2,"curCode":"  public void testFailureAfterData() throws IOException {\n    StreamCallbackWithID stream =\n      pushResolver.receiveBlockDataAsStream(\n        new PushBlockStream(TEST_APP, NO_ATTEMPT_ID, 0, 0, 0, 0));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[4]));\n    stream.onFailure(stream.getID(), new RuntimeException(\"Forced Failure\"));\n    pushResolver.finalizeShuffleMerge(new FinalizeShuffleMerge(TEST_APP, NO_ATTEMPT_ID, 0));\n    MergedBlockMeta blockMeta = pushResolver.getMergedBlockMeta(TEST_APP, 0, 0);\n    assertEquals(\"num-chunks\", 0, blockMeta.getNumChunks());\n  }\n","date":"2021-07-20 13:03:30","endLine":258,"groupId":"1186","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailureAfterData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/2a/73aa56b2d28be4c2d5bb4368259993d6dbd7a4.src","preCode":"  public void testFailureAfterData() throws IOException {\n    StreamCallbackWithID stream =\n      pushResolver.receiveBlockDataAsStream(new PushBlockStream(TEST_APP, 0, 0, 0, 0));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[4]));\n    stream.onFailure(stream.getID(), new RuntimeException(\"Forced Failure\"));\n    pushResolver.finalizeShuffleMerge(new FinalizeShuffleMerge(TEST_APP, 0));\n    MergedBlockMeta blockMeta = pushResolver.getMergedBlockMeta(TEST_APP, 0, 0);\n    assertEquals(\"num-chunks\", 0, blockMeta.getNumChunks());\n  }\n","realPath":"common/network-shuffle/src/test/java/org/apache/spark/network/shuffle/RemoteBlockPushResolverSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2021-07-20 13:03:30","commitOrder":2,"curCode":"  public void testFailureAfterMultipleDataBlocks() throws IOException {\n    StreamCallbackWithID stream =\n      pushResolver.receiveBlockDataAsStream(\n        new PushBlockStream(TEST_APP, NO_ATTEMPT_ID, 0, 0, 0, 0));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[2]));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[3]));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[4]));\n    stream.onFailure(stream.getID(), new RuntimeException(\"Forced Failure\"));\n    pushResolver.finalizeShuffleMerge(new FinalizeShuffleMerge(TEST_APP, NO_ATTEMPT_ID, 0));\n    MergedBlockMeta blockMeta = pushResolver.getMergedBlockMeta(TEST_APP, 0, 0);\n    assertEquals(\"num-chunks\", 0, blockMeta.getNumChunks());\n  }\n","date":"2021-07-20 13:03:30","endLine":272,"groupId":"1186","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailureAfterMultipleDataBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/2a/73aa56b2d28be4c2d5bb4368259993d6dbd7a4.src","preCode":"  public void testFailureAfterMultipleDataBlocks() throws IOException {\n    StreamCallbackWithID stream =\n      pushResolver.receiveBlockDataAsStream(new PushBlockStream(TEST_APP, 0, 0, 0, 0));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[2]));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[3]));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[4]));\n    stream.onFailure(stream.getID(), new RuntimeException(\"Forced Failure\"));\n    pushResolver.finalizeShuffleMerge(new FinalizeShuffleMerge(TEST_APP, 0));\n    MergedBlockMeta blockMeta = pushResolver.getMergedBlockMeta(TEST_APP, 0, 0);\n    assertEquals(\"num-chunks\", 0, blockMeta.getNumChunks());\n  }\n","realPath":"common/network-shuffle/src/test/java/org/apache/spark/network/shuffle/RemoteBlockPushResolverSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"c77acf0bbc25341de2636649fdd76f9bb4bdf4ed","commitMessage":"@@@[SPARK-35546][SHUFFLE] Enable push-based shuffle when multiple app attempts are enabled and manage concurrent access to the state in a better way\n\n\n What changes were proposed in this pull request?\nThis is one of the patches for SPIP SPARK-30602 which is needed for push-based shuffle.\n\n\n Summary of the change:\nWhen Executor registers with Shuffle Service.  it will encode the merged shuffle dir created and also the application attemptId into the ShuffleManagerMeta into Json. Then in Shuffle Service.  it will decode the Json string and get the correct merged shuffle dir and also the attemptId. If the registration comes from a newer attempt.  the merged shuffle information will be updated to store the information from the newer attempt.\n\nThis PR also refactored the management of the merged shuffle information to avoid concurrency issues.\n\n Why are the changes needed?\nRefer to the SPIP in SPARK-30602.\n\n\n Does this PR introduce _any_ user-facing change?\nNo.\n\n\n How was this patch tested?\nAdded unit tests.\nThe reference PR with the consolidated changes covering the complete implementation is also provided in SPARK-30602.\nWe have already verified the functionality and the improved performance as documented in the SPIP doc.\n\nCloses #33078 from zhouyejoe/SPARK-35546.\n\nAuthored-by: Ye Zhou <yezhou@linkedin.com>\nSigned-off-by: Mridul Muralidharan <mridul<at>gmail.com>\n","date":"2021-07-20 13:03:30","modifiedFileCount":"10","status":"M","submitter":"Ye Zhou"},{"authorTime":"2021-08-02 12:16:33","codes":[{"authorDate":"2021-08-02 12:16:33","commitOrder":3,"curCode":"  public void testFailureAfterData() throws IOException {\n    StreamCallbackWithID stream =\n      pushResolver.receiveBlockDataAsStream(\n        new PushBlockStream(TEST_APP, NO_ATTEMPT_ID, 0, 0, 0, 0, 0));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[4]));\n    stream.onFailure(stream.getID(), new RuntimeException(\"Forced Failure\"));\n    pushResolver.finalizeShuffleMerge(new FinalizeShuffleMerge(TEST_APP, NO_ATTEMPT_ID, 0, 0));\n    MergedBlockMeta blockMeta = pushResolver.getMergedBlockMeta(TEST_APP, 0, 0, 0);\n    assertEquals(\"num-chunks\", 0, blockMeta.getNumChunks());\n  }\n","date":"2021-08-02 12:16:33","endLine":258,"groupId":"10115","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailureAfterData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/c6/9e57d94c3c9a3236cf68f4d94f39ae39370866.src","preCode":"  public void testFailureAfterData() throws IOException {\n    StreamCallbackWithID stream =\n      pushResolver.receiveBlockDataAsStream(\n        new PushBlockStream(TEST_APP, NO_ATTEMPT_ID, 0, 0, 0, 0));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[4]));\n    stream.onFailure(stream.getID(), new RuntimeException(\"Forced Failure\"));\n    pushResolver.finalizeShuffleMerge(new FinalizeShuffleMerge(TEST_APP, NO_ATTEMPT_ID, 0));\n    MergedBlockMeta blockMeta = pushResolver.getMergedBlockMeta(TEST_APP, 0, 0);\n    assertEquals(\"num-chunks\", 0, blockMeta.getNumChunks());\n  }\n","realPath":"common/network-shuffle/src/test/java/org/apache/spark/network/shuffle/RemoteBlockPushResolverSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2021-08-02 12:16:33","commitOrder":3,"curCode":"  public void testFailureAfterMultipleDataBlocks() throws IOException {\n    StreamCallbackWithID stream =\n      pushResolver.receiveBlockDataAsStream(\n        new PushBlockStream(TEST_APP, NO_ATTEMPT_ID, 0, 0, 0, 0, 0));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[2]));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[3]));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[4]));\n    stream.onFailure(stream.getID(), new RuntimeException(\"Forced Failure\"));\n    pushResolver.finalizeShuffleMerge(new FinalizeShuffleMerge(TEST_APP, NO_ATTEMPT_ID, 0, 0));\n    MergedBlockMeta blockMeta = pushResolver.getMergedBlockMeta(TEST_APP, 0, 0, 0);\n    assertEquals(\"num-chunks\", 0, blockMeta.getNumChunks());\n  }\n","date":"2021-08-02 12:16:33","endLine":272,"groupId":"10115","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailureAfterMultipleDataBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/c6/9e57d94c3c9a3236cf68f4d94f39ae39370866.src","preCode":"  public void testFailureAfterMultipleDataBlocks() throws IOException {\n    StreamCallbackWithID stream =\n      pushResolver.receiveBlockDataAsStream(\n        new PushBlockStream(TEST_APP, NO_ATTEMPT_ID, 0, 0, 0, 0));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[2]));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[3]));\n    stream.onData(stream.getID(), ByteBuffer.wrap(new byte[4]));\n    stream.onFailure(stream.getID(), new RuntimeException(\"Forced Failure\"));\n    pushResolver.finalizeShuffleMerge(new FinalizeShuffleMerge(TEST_APP, NO_ATTEMPT_ID, 0));\n    MergedBlockMeta blockMeta = pushResolver.getMergedBlockMeta(TEST_APP, 0, 0);\n    assertEquals(\"num-chunks\", 0, blockMeta.getNumChunks());\n  }\n","realPath":"common/network-shuffle/src/test/java/org/apache/spark/network/shuffle/RemoteBlockPushResolverSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"c039d998128dd0dab27f43e7de083a71b9d1cfcf","commitMessage":"@@@[SPARK-32923][CORE][SHUFFLE] Handle indeterminate stage retries for push-based shuffle\n\n\n What changes were proposed in this pull request?\n[[SPARK-23243](https://issues.apache.org/jira/browse/SPARK-23243)] and [[SPARK-25341](https://issues.apache.org/jira/browse/SPARK-25341)] addressed cases of stage retries for indeterminate stage involving operations like repartition. This PR addresses the same issues in the context of push-based shuffle. Currently there is no way to distinguish the current execution of a stage for a shuffle ID. Therefore the changes explained below are necessary.\n\nCore changes are summarized as follows:\n\n1. Introduce a new variable `shuffleMergeId` in `ShuffleDependency` which is monotonically increasing value tracking the temporal ordering of execution of <stage-id.  stage-attempt-id> for a shuffle ID.\n2. Correspondingly make changes in the push-based shuffle protocol layer in `MergedShuffleFileManager`.  `BlockStoreClient` passing the `shuffleMergeId` in order to keep track of the shuffle output in separate files on the shuffle service side.\n3. `DAGScheduler` increments the `shuffleMergeId` tracked in `ShuffleDependency` in the cases of a indeterministic stage execution\n4. Deterministic stage will have `shuffleMergeId` set to 0 as no special handling is needed in this case and indeterminate stage will have `shuffleMergeId` starting from 1.\n\n\n Why are the changes needed?\n\nNew protocol changes are needed due to the reasons explained above.\n\n\n Does this PR introduce _any_ user-facing change?\n\nNo\n\n\n How was this patch tested?\nAdded new unit tests in `RemoteBlockPushResolverSuite.  DAGSchedulerSuite.  BlockIdSuite.  ErrorHandlerSuite`\n\nCloses #33034 from venkata91/SPARK-32923.\n\nAuthored-by: Venkata krishnan Sowrirajan <vsowrirajan@linkedin.com>\nSigned-off-by: Mridul Muralidharan <mridul<at>gmail.com>\n","date":"2021-08-02 12:16:33","modifiedFileCount":"22","status":"M","submitter":"Venkata krishnan Sowrirajan"}]
