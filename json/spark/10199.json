[{"authorTime":"2017-02-16 20:32:45","codes":[{"authorDate":"2017-02-16 20:32:45","commitOrder":1,"curCode":"  public void testFlatMap() {\n    List<List<String>> inputData = Arrays.asList(\n        Arrays.asList(\"go\", \"giants\"),\n        Arrays.asList(\"boo\", \"dodgers\"),\n        Arrays.asList(\"athletics\"));\n\n    List<List<String>> expected = Arrays.asList(\n        Arrays.asList(\"g\",\"o\",\"g\",\"i\",\"a\",\"n\",\"t\",\"s\"),\n        Arrays.asList(\"b\", \"o\", \"o\", \"d\",\"o\",\"d\",\"g\",\"e\",\"r\",\"s\"),\n        Arrays.asList(\"a\",\"t\",\"h\",\"l\",\"e\",\"t\",\"i\",\"c\",\"s\"));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaDStream<String> flatMapped = stream.flatMap(new FlatMapFunction<String, String>() {\n      @Override\n      public Iterator<String> call(String x) {\n        return Arrays.asList(x.split(\"(?!^)\")).iterator();\n      }\n    });\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<String>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    assertOrderInvariantEquals(expected, result);\n  }\n","date":"2017-02-16 20:32:45","endLine":800,"groupId":"145","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlatMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/8d/24104d7870bd3178e7bd3b9a61a2725615e7be.src","preCode":"  public void testFlatMap() {\n    List<List<String>> inputData = Arrays.asList(\n        Arrays.asList(\"go\", \"giants\"),\n        Arrays.asList(\"boo\", \"dodgers\"),\n        Arrays.asList(\"athletics\"));\n\n    List<List<String>> expected = Arrays.asList(\n        Arrays.asList(\"g\",\"o\",\"g\",\"i\",\"a\",\"n\",\"t\",\"s\"),\n        Arrays.asList(\"b\", \"o\", \"o\", \"d\",\"o\",\"d\",\"g\",\"e\",\"r\",\"s\"),\n        Arrays.asList(\"a\",\"t\",\"h\",\"l\",\"e\",\"t\",\"i\",\"c\",\"s\"));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaDStream<String> flatMapped = stream.flatMap(new FlatMapFunction<String, String>() {\n      @Override\n      public Iterator<String> call(String x) {\n        return Arrays.asList(x.split(\"(?!^)\")).iterator();\n      }\n    });\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<String>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    assertOrderInvariantEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":778,"status":"B"},{"authorDate":"2017-02-16 20:32:45","commitOrder":1,"curCode":"  public void testFlatMap() {\n    List<List<String>> inputData = Arrays.asList(\n      Arrays.asList(\"go\", \"giants\"),\n      Arrays.asList(\"boo\", \"dodgers\"),\n      Arrays.asList(\"athletics\"));\n\n    List<List<String>> expected = Arrays.asList(\n      Arrays.asList(\"g\", \"o\", \"g\", \"i\", \"a\", \"n\", \"t\", \"s\"),\n      Arrays.asList(\"b\", \"o\", \"o\", \"d\", \"o\", \"d\", \"g\", \"e\", \"r\", \"s\"),\n      Arrays.asList(\"a\", \"t\", \"h\", \"l\", \"e\", \"t\", \"i\", \"c\", \"s\"));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaDStream<String> flatMapped = stream.flatMap(\n        s -> Lists.newArrayList(s.split(\"(?!^)\")).iterator());\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<String>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    assertOrderInvariantEquals(expected, result);\n  }\n","date":"2017-02-16 20:32:45","endLine":366,"groupId":"145","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlatMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/64/6cb97066f3501e7d1f5c159c770ea4d0dd2fca.src","preCode":"  public void testFlatMap() {\n    List<List<String>> inputData = Arrays.asList(\n      Arrays.asList(\"go\", \"giants\"),\n      Arrays.asList(\"boo\", \"dodgers\"),\n      Arrays.asList(\"athletics\"));\n\n    List<List<String>> expected = Arrays.asList(\n      Arrays.asList(\"g\", \"o\", \"g\", \"i\", \"a\", \"n\", \"t\", \"s\"),\n      Arrays.asList(\"b\", \"o\", \"o\", \"d\", \"o\", \"d\", \"g\", \"e\", \"r\", \"s\"),\n      Arrays.asList(\"a\", \"t\", \"h\", \"l\", \"e\", \"t\", \"i\", \"c\", \"s\"));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaDStream<String> flatMapped = stream.flatMap(\n        s -> Lists.newArrayList(s.split(\"(?!^)\")).iterator());\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<String>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    assertOrderInvariantEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/Java8APISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"B"}],"commitId":"0e2405490f2056728d1353abbac6f3ea177ae533","commitMessage":"@@@[SPARK-19550][BUILD][CORE][WIP] Remove Java 7 support\n\n- Move external/java8-tests tests into core.  streaming.  sql and remove\n- Remove MaxPermGen and related options\n- Fix some reflection / TODOs around Java 8+ methods\n- Update doc references to 1.7/1.8 differences\n- Remove Java 7/8 related build profiles\n- Update some plugins for better Java 8 compatibility\n- Fix a few Java-related warnings\n\nFor the future:\n\n- Update Java 8 examples to fully use Java 8\n- Update Java tests to use lambdas for simplicity\n- Update Java internal implementations to use lambdas\n\n## How was this patch tested?\n\nExisting tests\n\nAuthor: Sean Owen <sowen@cloudera.com>\n\nCloses #16871 from srowen/SPARK-19493.\n","date":"2017-02-16 20:32:45","modifiedFileCount":"51","status":"B","submitter":"Sean Owen"},{"authorTime":"2017-02-20 01:42:50","codes":[{"authorDate":"2017-02-20 01:42:50","commitOrder":2,"curCode":"  public void testFlatMap() {\n    List<List<String>> inputData = Arrays.asList(\n        Arrays.asList(\"go\", \"giants\"),\n        Arrays.asList(\"boo\", \"dodgers\"),\n        Arrays.asList(\"athletics\"));\n\n    List<List<String>> expected = Arrays.asList(\n        Arrays.asList(\"g\",\"o\",\"g\",\"i\",\"a\",\"n\",\"t\",\"s\"),\n        Arrays.asList(\"b\", \"o\", \"o\", \"d\",\"o\",\"d\",\"g\",\"e\",\"r\",\"s\"),\n        Arrays.asList(\"a\",\"t\",\"h\",\"l\",\"e\",\"t\",\"i\",\"c\",\"s\"));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaDStream<String> flatMapped = stream.flatMap(x -> Arrays.asList(x.split(\"(?!^)\")).iterator());\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<String>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    assertOrderInvariantEquals(expected, result);\n  }\n","date":"2017-02-20 01:42:50","endLine":616,"groupId":"10199","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlatMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b9/66cbdca076d7ade49beefe4e328d93dd52e6c4.src","preCode":"  public void testFlatMap() {\n    List<List<String>> inputData = Arrays.asList(\n        Arrays.asList(\"go\", \"giants\"),\n        Arrays.asList(\"boo\", \"dodgers\"),\n        Arrays.asList(\"athletics\"));\n\n    List<List<String>> expected = Arrays.asList(\n        Arrays.asList(\"g\",\"o\",\"g\",\"i\",\"a\",\"n\",\"t\",\"s\"),\n        Arrays.asList(\"b\", \"o\", \"o\", \"d\",\"o\",\"d\",\"g\",\"e\",\"r\",\"s\"),\n        Arrays.asList(\"a\",\"t\",\"h\",\"l\",\"e\",\"t\",\"i\",\"c\",\"s\"));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaDStream<String> flatMapped = stream.flatMap(new FlatMapFunction<String, String>() {\n      @Override\n      public Iterator<String> call(String x) {\n        return Arrays.asList(x.split(\"(?!^)\")).iterator();\n      }\n    });\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<String>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    assertOrderInvariantEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/JavaAPISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":599,"status":"M"},{"authorDate":"2017-02-20 01:42:50","commitOrder":2,"curCode":"  public void testFlatMap() {\n    List<List<String>> inputData = Arrays.asList(\n      Arrays.asList(\"go\", \"giants\"),\n      Arrays.asList(\"boo\", \"dodgers\"),\n      Arrays.asList(\"athletics\"));\n\n    List<List<String>> expected = Arrays.asList(\n      Arrays.asList(\"g\", \"o\", \"g\", \"i\", \"a\", \"n\", \"t\", \"s\"),\n      Arrays.asList(\"b\", \"o\", \"o\", \"d\", \"o\", \"d\", \"g\", \"e\", \"r\", \"s\"),\n      Arrays.asList(\"a\", \"t\", \"h\", \"l\", \"e\", \"t\", \"i\", \"c\", \"s\"));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaDStream<String> flatMapped = stream.flatMap(\n        s -> Arrays.asList(s.split(\"(?!^)\")).iterator());\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<String>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    assertOrderInvariantEquals(expected, result);\n  }\n","date":"2017-02-20 01:42:50","endLine":365,"groupId":"10199","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlatMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/99/48a4074cdc700ab7bd129f274926ef63637843.src","preCode":"  public void testFlatMap() {\n    List<List<String>> inputData = Arrays.asList(\n      Arrays.asList(\"go\", \"giants\"),\n      Arrays.asList(\"boo\", \"dodgers\"),\n      Arrays.asList(\"athletics\"));\n\n    List<List<String>> expected = Arrays.asList(\n      Arrays.asList(\"g\", \"o\", \"g\", \"i\", \"a\", \"n\", \"t\", \"s\"),\n      Arrays.asList(\"b\", \"o\", \"o\", \"d\", \"o\", \"d\", \"g\", \"e\", \"r\", \"s\"),\n      Arrays.asList(\"a\", \"t\", \"h\", \"l\", \"e\", \"t\", \"i\", \"c\", \"s\"));\n\n    JavaDStream<String> stream = JavaTestUtils.attachTestInputStream(ssc, inputData, 1);\n    JavaDStream<String> flatMapped = stream.flatMap(\n        s -> Lists.newArrayList(s.split(\"(?!^)\")).iterator());\n    JavaTestUtils.attachTestOutputStream(flatMapped);\n    List<List<String>> result = JavaTestUtils.runStreams(ssc, 3, 3);\n\n    assertOrderInvariantEquals(expected, result);\n  }\n","realPath":"streaming/src/test/java/test/org/apache/spark/streaming/Java8APISuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"}],"commitId":"1487c9af20a333ead55955acf4c0aa323bea0d07","commitMessage":"@@@[SPARK-19534][TESTS] Convert Java tests to use lambdas.  Java 8 features\n\n## What changes were proposed in this pull request?\n\nConvert tests to use Java 8 lambdas.  and modest related fixes to surrounding code.\n\n## How was this patch tested?\n\nJenkins tests\n\nAuthor: Sean Owen <sowen@cloudera.com>\n\nCloses #16964 from srowen/SPARK-19534.\n","date":"2017-02-20 01:42:50","modifiedFileCount":"45","status":"M","submitter":"Sean Owen"}]
