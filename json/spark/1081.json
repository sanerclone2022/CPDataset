[{"authorTime":"2020-11-10 01:00:52","codes":[{"authorDate":"2021-06-21 06:22:37","commitOrder":2,"curCode":"  public static MergedBlockMetaRequest decode(ByteBuf buf) {\n    long requestId = buf.readLong();\n    String appId = Encoders.Strings.decode(buf);\n    int shuffleId = buf.readInt();\n    int reduceId = buf.readInt();\n    return new MergedBlockMetaRequest(requestId, appId, shuffleId, reduceId);\n  }\n","date":"2021-06-21 06:22:37","endLine":69,"groupId":"3409","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"decode","params":"(ByteBufbuf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/cf/7c22d2412346b1a0118ccb1cc07df87190665a.src","preCode":"  public static MergedBlockMetaRequest decode(ByteBuf buf) {\n    long requestId = buf.readLong();\n    String appId = Encoders.Strings.decode(buf);\n    int shuffleId = buf.readInt();\n    int reduceId = buf.readInt();\n    return new MergedBlockMetaRequest(requestId, appId, shuffleId, reduceId);\n  }\n","realPath":"common/network-common/src/main/java/org/apache/spark/network/protocol/MergedBlockMetaRequest.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2020-11-10 01:00:52","commitOrder":2,"curCode":"  public static PushBlockStream decode(ByteBuf buf) {\n    String appId = Encoders.Strings.decode(buf);\n    int shuffleId = buf.readInt();\n    int mapIdx = buf.readInt();\n    int reduceId = buf.readInt();\n    int index = buf.readInt();\n    return new PushBlockStream(appId, shuffleId, mapIdx, reduceId, index);\n  }\n","date":"2020-11-10 01:00:52","endLine":105,"groupId":"3409","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"decode","params":"(ByteBufbuf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/83/fc7b23ac444297dab08ee195afa87314ea9cb1.src","preCode":"  public static PushBlockStream decode(ByteBuf buf) {\n    String appId = Encoders.Strings.decode(buf);\n    int shuffleId = buf.readInt();\n    int mapIdx = buf.readInt();\n    int reduceId = buf.readInt();\n    int index = buf.readInt();\n    return new PushBlockStream(appId, shuffleId, mapIdx, reduceId, index);\n  }\n","realPath":"common/network-shuffle/src/main/java/org/apache/spark/network/shuffle/protocol/PushBlockStream.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"NB"}],"commitId":"8ce1e344e58dbfbddecd9e9fd9f0a5a6f15dbea9","commitMessage":"@@@[SPARK-35671][SHUFFLE][CORE] Add support in the ESS to serve merged shuffle block meta and data to executors\n\n\n What changes were proposed in this pull request?\nThis adds support in the ESS to serve merged shuffle block meta and data requests to executors.\nThis change is needed for fetching remote merged shuffle data from the remote shuffle services. This is part of push-based shuffle SPIP [SPARK-30602](https://issues.apache.org/jira/browse/SPARK-30602).\n\nThis change introduces new messages between clients and the external shuffle service:\n\n1. `MergedBlockMetaRequest`: The client sends this to external shuffle to get the meta information for a merged block. The response to this is one of these :\n  - `MergedBlockMetaSuccess` : contains request id.  number of chunks.  and a `ManagedBuffer` which is a `FileSegmentBuffer` backed by the merged block meta file.\n  - `RpcFailure`: this is sent back to client in case of failure. This is an existing message.\n\n2. `FetchShuffleBlockChunks`: This is similar to `FetchShuffleBlocks` message but it is to fetch merged shuffle chunks instead of blocks.\n\n\n Why are the changes needed?\nThese changes are needed for push-based shuffle. Refer to the SPIP in [SPARK-30602](https://issues.apache.org/jira/browse/SPARK-30602).\n\n\n Does this PR introduce _any_ user-facing change?\nNo.\n\n\n How was this patch tested?\nAdded unit tests.\nThe reference PR with the consolidated changes covering the complete implementation is also provided in [SPARK-30602](https://issues.apache.org/jira/browse/SPARK-30602).\nWe have already verified the functionality and the improved performance as documented in the SPIP doc.\n\nLead-authored-by: Chandni Singh chsinghlinkedin.com\nCo-authored-by: Min Shen mshenlinkedin.com\n\nCloses #32811 from otterc/SPARK-35671.\n\nLead-authored-by: Chandni Singh <singh.chandni@gmail.com>\nCo-authored-by: Min Shen <mshen@linkedin.com>\nCo-authored-by: Chandni Singh <chsingh@linkedin.com>\nSigned-off-by: Mridul Muralidharan <mridul<at>gmail.com>\n","date":"2021-06-21 06:22:37","modifiedFileCount":"20","status":"M","submitter":"Chandni Singh"},{"authorTime":"2021-07-20 13:03:30","codes":[{"authorDate":"2021-06-21 06:22:37","commitOrder":3,"curCode":"  public static MergedBlockMetaRequest decode(ByteBuf buf) {\n    long requestId = buf.readLong();\n    String appId = Encoders.Strings.decode(buf);\n    int shuffleId = buf.readInt();\n    int reduceId = buf.readInt();\n    return new MergedBlockMetaRequest(requestId, appId, shuffleId, reduceId);\n  }\n","date":"2021-06-21 06:22:37","endLine":69,"groupId":"3409","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"decode","params":"(ByteBufbuf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/cf/7c22d2412346b1a0118ccb1cc07df87190665a.src","preCode":"  public static MergedBlockMetaRequest decode(ByteBuf buf) {\n    long requestId = buf.readLong();\n    String appId = Encoders.Strings.decode(buf);\n    int shuffleId = buf.readInt();\n    int reduceId = buf.readInt();\n    return new MergedBlockMetaRequest(requestId, appId, shuffleId, reduceId);\n  }\n","realPath":"common/network-common/src/main/java/org/apache/spark/network/protocol/MergedBlockMetaRequest.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2021-07-20 13:03:30","commitOrder":3,"curCode":"  public static PushBlockStream decode(ByteBuf buf) {\n    String appId = Encoders.Strings.decode(buf);\n    int attemptId = buf.readInt();\n    int shuffleId = buf.readInt();\n    int mapIdx = buf.readInt();\n    int reduceId = buf.readInt();\n    int index = buf.readInt();\n    return new PushBlockStream(appId, attemptId, shuffleId, mapIdx, reduceId, index);\n  }\n","date":"2021-07-20 13:03:30","endLine":120,"groupId":"3409","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"decode","params":"(ByteBufbuf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/d5/e1cf2464d9e0471b73244c3a3ec4283e29989e.src","preCode":"  public static PushBlockStream decode(ByteBuf buf) {\n    String appId = Encoders.Strings.decode(buf);\n    int shuffleId = buf.readInt();\n    int mapIdx = buf.readInt();\n    int reduceId = buf.readInt();\n    int index = buf.readInt();\n    return new PushBlockStream(appId, shuffleId, mapIdx, reduceId, index);\n  }\n","realPath":"common/network-shuffle/src/main/java/org/apache/spark/network/shuffle/protocol/PushBlockStream.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"c77acf0bbc25341de2636649fdd76f9bb4bdf4ed","commitMessage":"@@@[SPARK-35546][SHUFFLE] Enable push-based shuffle when multiple app attempts are enabled and manage concurrent access to the state in a better way\n\n\n What changes were proposed in this pull request?\nThis is one of the patches for SPIP SPARK-30602 which is needed for push-based shuffle.\n\n\n Summary of the change:\nWhen Executor registers with Shuffle Service.  it will encode the merged shuffle dir created and also the application attemptId into the ShuffleManagerMeta into Json. Then in Shuffle Service.  it will decode the Json string and get the correct merged shuffle dir and also the attemptId. If the registration comes from a newer attempt.  the merged shuffle information will be updated to store the information from the newer attempt.\n\nThis PR also refactored the management of the merged shuffle information to avoid concurrency issues.\n\n Why are the changes needed?\nRefer to the SPIP in SPARK-30602.\n\n\n Does this PR introduce _any_ user-facing change?\nNo.\n\n\n How was this patch tested?\nAdded unit tests.\nThe reference PR with the consolidated changes covering the complete implementation is also provided in SPARK-30602.\nWe have already verified the functionality and the improved performance as documented in the SPIP doc.\n\nCloses #33078 from zhouyejoe/SPARK-35546.\n\nAuthored-by: Ye Zhou <yezhou@linkedin.com>\nSigned-off-by: Mridul Muralidharan <mridul<at>gmail.com>\n","date":"2021-07-20 13:03:30","modifiedFileCount":"10","status":"M","submitter":"Ye Zhou"},{"authorTime":"2021-08-02 12:16:33","codes":[{"authorDate":"2021-08-02 12:16:33","commitOrder":4,"curCode":"  public static MergedBlockMetaRequest decode(ByteBuf buf) {\n    long requestId = buf.readLong();\n    String appId = Encoders.Strings.decode(buf);\n    int shuffleId = buf.readInt();\n    int shuffleMergeId = buf.readInt();\n    int reduceId = buf.readInt();\n    return new MergedBlockMetaRequest(requestId, appId, shuffleId, shuffleMergeId, reduceId);\n  }\n","date":"2021-08-02 12:16:33","endLine":78,"groupId":"1081","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"decode","params":"(ByteBufbuf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/c8/5d104fdd0fe2ca024fbcf9541d83616c16f511.src","preCode":"  public static MergedBlockMetaRequest decode(ByteBuf buf) {\n    long requestId = buf.readLong();\n    String appId = Encoders.Strings.decode(buf);\n    int shuffleId = buf.readInt();\n    int reduceId = buf.readInt();\n    return new MergedBlockMetaRequest(requestId, appId, shuffleId, reduceId);\n  }\n","realPath":"common/network-common/src/main/java/org/apache/spark/network/protocol/MergedBlockMetaRequest.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2021-08-02 12:16:33","commitOrder":4,"curCode":"  public static PushBlockStream decode(ByteBuf buf) {\n    String appId = Encoders.Strings.decode(buf);\n    int attemptId = buf.readInt();\n    int shuffleId = buf.readInt();\n    int shuffleMergeId = buf.readInt();\n    int mapIdx = buf.readInt();\n    int reduceId = buf.readInt();\n    int index = buf.readInt();\n    return new PushBlockStream(appId, attemptId, shuffleId, shuffleMergeId, mapIdx, reduceId,\n      index);\n  }\n","date":"2021-08-02 12:16:33","endLine":129,"groupId":"1081","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"decode","params":"(ByteBufbuf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b8/68d7ccff568d3c4dc61a1cf64d67502b17f44a.src","preCode":"  public static PushBlockStream decode(ByteBuf buf) {\n    String appId = Encoders.Strings.decode(buf);\n    int attemptId = buf.readInt();\n    int shuffleId = buf.readInt();\n    int mapIdx = buf.readInt();\n    int reduceId = buf.readInt();\n    int index = buf.readInt();\n    return new PushBlockStream(appId, attemptId, shuffleId, mapIdx, reduceId, index);\n  }\n","realPath":"common/network-shuffle/src/main/java/org/apache/spark/network/shuffle/protocol/PushBlockStream.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"c039d998128dd0dab27f43e7de083a71b9d1cfcf","commitMessage":"@@@[SPARK-32923][CORE][SHUFFLE] Handle indeterminate stage retries for push-based shuffle\n\n\n What changes were proposed in this pull request?\n[[SPARK-23243](https://issues.apache.org/jira/browse/SPARK-23243)] and [[SPARK-25341](https://issues.apache.org/jira/browse/SPARK-25341)] addressed cases of stage retries for indeterminate stage involving operations like repartition. This PR addresses the same issues in the context of push-based shuffle. Currently there is no way to distinguish the current execution of a stage for a shuffle ID. Therefore the changes explained below are necessary.\n\nCore changes are summarized as follows:\n\n1. Introduce a new variable `shuffleMergeId` in `ShuffleDependency` which is monotonically increasing value tracking the temporal ordering of execution of <stage-id.  stage-attempt-id> for a shuffle ID.\n2. Correspondingly make changes in the push-based shuffle protocol layer in `MergedShuffleFileManager`.  `BlockStoreClient` passing the `shuffleMergeId` in order to keep track of the shuffle output in separate files on the shuffle service side.\n3. `DAGScheduler` increments the `shuffleMergeId` tracked in `ShuffleDependency` in the cases of a indeterministic stage execution\n4. Deterministic stage will have `shuffleMergeId` set to 0 as no special handling is needed in this case and indeterminate stage will have `shuffleMergeId` starting from 1.\n\n\n Why are the changes needed?\n\nNew protocol changes are needed due to the reasons explained above.\n\n\n Does this PR introduce _any_ user-facing change?\n\nNo\n\n\n How was this patch tested?\nAdded new unit tests in `RemoteBlockPushResolverSuite.  DAGSchedulerSuite.  BlockIdSuite.  ErrorHandlerSuite`\n\nCloses #33034 from venkata91/SPARK-32923.\n\nAuthored-by: Venkata krishnan Sowrirajan <vsowrirajan@linkedin.com>\nSigned-off-by: Mridul Muralidharan <mridul<at>gmail.com>\n","date":"2021-08-02 12:16:33","modifiedFileCount":"22","status":"M","submitter":"Venkata krishnan Sowrirajan"}]
