[{"authorTime":"2013-09-02 05:57:27","codes":[{"authorDate":"2013-09-02 05:57:27","commitOrder":1,"curCode":"  public void runKMeansUsingStaticMethods() {\n    List<double[]> points = new ArrayList();\n    points.add(new double[]{1.0, 2.0, 6.0});\n    points.add(new double[]{1.0, 3.0, 0.0});\n    points.add(new double[]{1.0, 4.0, 6.0});\n\n    double[][] expectedCenter = { {1.0, 3.0, 4.0} };\n\n    JavaRDD<double[]> data = sc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1);\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n  }\n","date":"2013-09-02 05:57:27","endLine":93,"groupId":"3097","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runKMeansUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/32/d3934ac135a9ecb4aa2df50b03b88dcd3addbe.src","preCode":"  public void runKMeansUsingStaticMethods() {\n    List<double[]> points = new ArrayList();\n    points.add(new double[]{1.0, 2.0, 6.0});\n    points.add(new double[]{1.0, 3.0, 0.0});\n    points.add(new double[]{1.0, 4.0, 6.0});\n\n    double[][] expectedCenter = { {1.0, 3.0, 4.0} };\n\n    JavaRDD<double[]> data = sc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1);\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"},{"authorDate":"2013-09-02 05:57:27","commitOrder":1,"curCode":"  public void runKMeansUsingConstructor() {\n    List<double[]> points = new ArrayList();\n    points.add(new double[]{1.0, 2.0, 6.0});\n    points.add(new double[]{1.0, 3.0, 0.0});\n    points.add(new double[]{1.0, 4.0, 6.0});\n\n    double[][] expectedCenter = { {1.0, 3.0, 4.0} };\n\n    JavaRDD<double[]> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n\n    model = new KMeans().setK(1)\n                        .setMaxIterations(1)\n                        .setRuns(1)\n                        .setInitializationMode(KMeans.RANDOM())\n                        .run(data.rdd());\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n  }\n","date":"2013-09-02 05:57:27","endLine":114,"groupId":"3097","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"runKMeansUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/32/d3934ac135a9ecb4aa2df50b03b88dcd3addbe.src","preCode":"  public void runKMeansUsingConstructor() {\n    List<double[]> points = new ArrayList();\n    points.add(new double[]{1.0, 2.0, 6.0});\n    points.add(new double[]{1.0, 3.0, 0.0});\n    points.add(new double[]{1.0, 4.0, 6.0});\n\n    double[][] expectedCenter = { {1.0, 3.0, 4.0} };\n\n    JavaRDD<double[]> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n\n    model = new KMeans().setK(1)\n                        .setMaxIterations(1)\n                        .setRuns(1)\n                        .setInitializationMode(KMeans.RANDOM())\n                        .run(data.rdd());\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"}],"commitId":"2ce200bf7f7a38afbcacf3303ca2418e49bdbe2a","commitMessage":"@@@Merge remote-tracking branch 'old/master'\n","date":"2013-09-02 05:57:27","modifiedFileCount":"0","status":"B","submitter":"Matei Zaharia"},{"authorTime":"2013-12-14 16:22:45","codes":[{"authorDate":"2013-12-14 16:22:45","commitOrder":2,"curCode":"  public void runKMeansUsingStaticMethods() {\n    List<double[]> points = new ArrayList<double[]>();\n    points.add(new double[]{1.0, 2.0, 6.0});\n    points.add(new double[]{1.0, 3.0, 0.0});\n    points.add(new double[]{1.0, 4.0, 6.0});\n\n    double[][] expectedCenter = { {1.0, 3.0, 4.0} };\n\n    JavaRDD<double[]> data = sc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1);\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n  }\n","date":"2013-12-14 16:22:45","endLine":93,"groupId":"3097","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runKMeansUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/33/b99f4bd3bcf72962e025599279b5d0e7e788f7.src","preCode":"  public void runKMeansUsingStaticMethods() {\n    List<double[]> points = new ArrayList();\n    points.add(new double[]{1.0, 2.0, 6.0});\n    points.add(new double[]{1.0, 3.0, 0.0});\n    points.add(new double[]{1.0, 4.0, 6.0});\n\n    double[][] expectedCenter = { {1.0, 3.0, 4.0} };\n\n    JavaRDD<double[]> data = sc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1);\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2013-12-14 16:22:45","commitOrder":2,"curCode":"  public void runKMeansUsingConstructor() {\n    List<double[]> points = new ArrayList<double[]>();\n    points.add(new double[]{1.0, 2.0, 6.0});\n    points.add(new double[]{1.0, 3.0, 0.0});\n    points.add(new double[]{1.0, 4.0, 6.0});\n\n    double[][] expectedCenter = { {1.0, 3.0, 4.0} };\n\n    JavaRDD<double[]> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n\n    model = new KMeans().setK(1)\n                        .setMaxIterations(1)\n                        .setRuns(1)\n                        .setInitializationMode(KMeans.RANDOM())\n                        .run(data.rdd());\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n  }\n","date":"2013-12-14 16:22:45","endLine":114,"groupId":"3097","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"runKMeansUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/33/b99f4bd3bcf72962e025599279b5d0e7e788f7.src","preCode":"  public void runKMeansUsingConstructor() {\n    List<double[]> points = new ArrayList();\n    points.add(new double[]{1.0, 2.0, 6.0});\n    points.add(new double[]{1.0, 3.0, 0.0});\n    points.add(new double[]{1.0, 4.0, 6.0});\n\n    double[][] expectedCenter = { {1.0, 3.0, 4.0} };\n\n    JavaRDD<double[]> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n\n    model = new KMeans().setK(1)\n                        .setMaxIterations(1)\n                        .setRuns(1)\n                        .setInitializationMode(KMeans.RANDOM())\n                        .run(data.rdd());\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"97ac06018206b593600594605be241d0cd706e08","commitMessage":"@@@Merge pull request #259 from pwendell/scala-2.10\n\nMigration to Scala 2.10\n\n== Below description was written by Prashant Sharma ==\n\nThis PR migrates spark to scala 2.10.\n\nSummary of changes apart from scala 2.10 migration:\n(has no implications for user.)\n1. Migrated Akka to 2.2.3.\n\nDoes not use remote death watch for it has a bug.  where it tries to send message to dead node infinitely.\n\nUses an indestructible actorsystem which tolerates errors only on executors.\n\n(Might be useful for user.)\n4. New configuration settings introduced:\n\nSystem.getProperty(\"spark.akka.heartbeat.pauses\".  \"600\")\nSystem.getProperty(\"spark.akka.failure-detector.threshold\".  \"300.0\")\nSystem.getProperty(\"spark.akka.heartbeat.interval\".  \"1000\")\n\nDefaults for these are fairly large to only disable Failure detector that comes with akka. The reason for doing so is we have our own failure detector like mechanism in place and then this is just an overhead on top of that + it leads to a lot of false positives. But with these properties it is possible to enable them. A good use case for enabling it could be when someone wants spark to be sensitive (in a controllable manner ofc.) to GC pauses/Network lags and quickly evict executors that experienced it. More information is included in configuration.md\n\nOnce we have the SPARK-544 merged.  I had like to deprecate atleast these akka properties and may be others too.\n\nThis PR is duplicate of #221(where all the discussion happened.) for that one pointed to master this one points to scala-2.10 branch.\n","date":"2013-12-14 16:22:45","modifiedFileCount":"15","status":"M","submitter":"Patrick Wendell"},{"authorTime":"2014-03-24 08:34:02","codes":[{"authorDate":"2014-03-24 08:34:02","commitOrder":3,"curCode":"  public void runKMeansUsingStaticMethods() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.K_MEANS_PARALLEL());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2014-03-24 08:34:02","endLine":67,"groupId":"2195","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"runKMeansUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/49/a614bd90caba308466b222bef9e31635939470.src","preCode":"  public void runKMeansUsingStaticMethods() {\n    List<double[]> points = new ArrayList<double[]>();\n    points.add(new double[]{1.0, 2.0, 6.0});\n    points.add(new double[]{1.0, 3.0, 0.0});\n    points.add(new double[]{1.0, 4.0, 6.0});\n\n    double[][] expectedCenter = { {1.0, 3.0, 4.0} };\n\n    JavaRDD<double[]> data = sc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1);\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2014-03-24 08:34:02","commitOrder":3,"curCode":"  public void runKMeansUsingConstructor() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = new KMeans()\n      .setK(1)\n      .setMaxIterations(1)\n      .setInitializationMode(KMeans.RANDOM())\n      .run(data.rdd());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2014-03-24 08:34:02","endLine":90,"groupId":"1923","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"runKMeansUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/49/a614bd90caba308466b222bef9e31635939470.src","preCode":"  public void runKMeansUsingConstructor() {\n    List<double[]> points = new ArrayList<double[]>();\n    points.add(new double[]{1.0, 2.0, 6.0});\n    points.add(new double[]{1.0, 3.0, 0.0});\n    points.add(new double[]{1.0, 4.0, 6.0});\n\n    double[][] expectedCenter = { {1.0, 3.0, 4.0} };\n\n    JavaRDD<double[]> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n\n    model = new KMeans().setK(1)\n                        .setMaxIterations(1)\n                        .setRuns(1)\n                        .setInitializationMode(KMeans.RANDOM())\n                        .run(data.rdd());\n    assertSetsEqual(model.clusterCenters(), expectedCenter);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"80c29689ae3b589254a571da3ddb5f9c866ae534","commitMessage":"@@@[SPARK-1212] Adding sparse data support and update KMeans\n\nContinue our discussions from https://github.com/apache/incubator-spark/pull/575\n\nThis PR is WIP because it depends on a SNAPSHOT version of breeze.\n\nPer previous discussions and benchmarks.  I switched to breeze for linear algebra operations. @dlwh and I made some improvements to breeze to keep its performance comparable to the bare-bone implementation.  including norm computation and squared distance. This is why this PR needs to depend on a SNAPSHOT version of breeze.\n\n@fommil .  please find the notice of using netlib-core in `NOTICE`. This is following Apache's instructions on appropriate labeling.\n\nI'm going to update this PR to include:\n\n1. Fast distance computation: using `\\|a\\|_2^2 + \\|b\\|_2^2 - 2 a^T b` when it doesn't introduce too much numerical error. The squared norms are pre-computed. Otherwise.  computing the distance between the center (dense) and a point (possibly sparse) always takes O(n) time.\n\n2. Some numbers about the performance.\n\n3. A released version of breeze. @dlwh.  a minor release of breeze will help this PR get merged early. Do you mind sharing breeze's release plan? Thanks!\n\nAuthor: Xiangrui Meng <meng@databricks.com>\n\nCloses #117 from mengxr/sparse-kmeans and squashes the following commits:\n\n67b368d [Xiangrui Meng] fix SparseVector.toArray\n5eda0de [Xiangrui Meng] update NOTICE\n67abe31 [Xiangrui Meng] move ArrayRDDs to mllib.rdd\n1da1033 [Xiangrui Meng] remove dependency on commons-math3 and compute EPSILON directly\n9bb1b31 [Xiangrui Meng] optimize SparseVector.toArray\n226d2cd [Xiangrui Meng] update Java friendly methods in Vectors\n238ba34 [Xiangrui Meng] add VectorRDDs with a converter from RDD[Array[Double]]\nb28ba2f [Xiangrui Meng] add toArray to Vector\ne69b10c [Xiangrui Meng] remove examples/JavaKMeans.java.  which is replaced by mllib/examples/JavaKMeans.java\n72bde33 [Xiangrui Meng] clean up code for distance computation\n712cb88 [Xiangrui Meng] make Vectors.sparse Java friendly\n27858e4 [Xiangrui Meng] update breeze version to 0.7\n07c3cf2 [Xiangrui Meng] change Mahout to breeze in doc use a simple lower bound to avoid unnecessary distance computation\n6f5cdde [Xiangrui Meng] fix a bug in filtering finished runs\n42512f2 [Xiangrui Meng] Merge branch 'master' into sparse-kmeans\nd6e6c07 [Xiangrui Meng] add predict(RDD[Vector]) to KMeansModel\n42b4e50 [Xiangrui Meng] line feed at the end\na4ace73 [Xiangrui Meng] Merge branch 'fast-dist' into sparse-kmeans\n3ed1a24 [Xiangrui Meng] add doc to BreezeVectorWithSquaredNorm\n0107e19 [Xiangrui Meng] update NOTICE\n87bc755 [Xiangrui Meng] tuned the KMeans code: changed some for loops to while.  use view to avoid copying arrays\n0ff8046 [Xiangrui Meng] update KMeans to use fastSquaredDistance\nf355411 [Xiangrui Meng] add BreezeVectorWithSquaredNorm case class\nab74f67 [Xiangrui Meng] add fastSquaredDistance for KMeans\n4e7d5ca [Xiangrui Meng] minor style update\n07ffaf2 [Xiangrui Meng] add dense/sparse vector data models and conversions to/from breeze vectors use breeze to implement KMeans in order to support both dense and sparse data\n","date":"2014-03-24 08:34:02","modifiedFileCount":"2","status":"M","submitter":"Xiangrui Meng"},{"authorTime":"2015-08-28 01:46:41","codes":[{"authorDate":"2015-08-28 01:46:41","commitOrder":4,"curCode":"  public void runKMeansUsingStaticMethods() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.K_MEANS_PARALLEL());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2015-08-28 01:46:41","endLine":65,"groupId":"2195","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"runKMeansUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/ad/06676c72ac6e0750bbbdb223fd7b62ef3cd4f1.src","preCode":"  public void runKMeansUsingStaticMethods() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.K_MEANS_PARALLEL());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2015-08-28 01:46:41","commitOrder":4,"curCode":"  public void runKMeansUsingConstructor() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = new KMeans()\n      .setK(1)\n      .setMaxIterations(1)\n      .setInitializationMode(KMeans.RANDOM())\n      .run(data.rdd());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2015-08-28 01:46:41","endLine":88,"groupId":"1923","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"runKMeansUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/ad/06676c72ac6e0750bbbdb223fd7b62ef3cd4f1.src","preCode":"  public void runKMeansUsingConstructor() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = new KMeans()\n      .setK(1)\n      .setMaxIterations(1)\n      .setInitializationMode(KMeans.RANDOM())\n      .run(data.rdd());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"e1f4de4a7d15d4ca4b5c64ff929ac3980f5d706f","commitMessage":"@@@[SPARK-10257] [MLLIB] Removes Guava from all spark.mllib Java tests\n\n* Replaces instances of `Lists.newArrayList` with `Arrays.asList`\n* Replaces `commons.lang.StringUtils` over `com.google.collections.Strings`\n* Replaces `List` interface over `ArrayList` implementations\n\nThis PR along with #8445 #8446 #8447 completely removes all `com.google.collections.Lists` dependencies within mllib's Java tests.\n\nAuthor: Feynman Liang <fliang@databricks.com>\n\nCloses #8451 from feynmanliang/SPARK-10257.\n","date":"2015-08-28 01:46:41","modifiedFileCount":"14","status":"M","submitter":"Feynman Liang"},{"authorTime":"2016-05-11 02:17:47","codes":[{"authorDate":"2016-05-11 02:17:47","commitOrder":5,"curCode":"  public void runKMeansUsingStaticMethods() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.K_MEANS_PARALLEL());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2016-05-11 02:17:47","endLine":72,"groupId":"2195","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"runKMeansUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/4e/5b87f588e3dc412925bc01002415e8e7c8e23d.src","preCode":"  public void runKMeansUsingStaticMethods() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.K_MEANS_PARALLEL());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2016-05-11 02:17:47","commitOrder":5,"curCode":"  public void runKMeansUsingConstructor() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = new KMeans()\n      .setK(1)\n      .setMaxIterations(1)\n      .setInitializationMode(KMeans.RANDOM())\n      .run(data.rdd());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2016-05-11 02:17:47","endLine":95,"groupId":"1923","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"runKMeansUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/4e/5b87f588e3dc412925bc01002415e8e7c8e23d.src","preCode":"  public void runKMeansUsingConstructor() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = new KMeans()\n      .setK(1)\n      .setMaxIterations(1)\n      .setInitializationMode(KMeans.RANDOM())\n      .run(data.rdd());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"ed0b4070fb50054b1ecf66ff6c32458a4967dfd3","commitMessage":"@@@[SPARK-15037][SQL][MLLIB] Use SparkSession instead of SQLContext in Scala/Java TestSuites\n\n## What changes were proposed in this pull request?\nUse SparkSession instead of SQLContext in Scala/Java TestSuites\nas this PR already very big working Python TestSuites in a diff PR.\n\n## How was this patch tested?\nExisting tests\n\nAuthor: Sandeep Singh <sandeep@techaddict.me>\n\nCloses #12907 from techaddict/SPARK-15037.\n","date":"2016-05-11 02:17:47","modifiedFileCount":"63","status":"M","submitter":"Sandeep Singh"},{"authorTime":"2016-05-11 02:17:47","codes":[{"authorDate":"2019-09-09 23:19:40","commitOrder":6,"curCode":"  public void runKMeansUsingStaticMethods() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1, KMeans.K_MEANS_PARALLEL());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = KMeans.train(data.rdd(), 1, 1, KMeans.RANDOM());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2019-09-09 23:19:40","endLine":51,"groupId":"10452","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"runKMeansUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/a9/a8b7f2b88d662b90cc65f18c8f28c8aa23fce1.src","preCode":"  public void runKMeansUsingStaticMethods() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.K_MEANS_PARALLEL());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2016-05-11 02:17:47","commitOrder":6,"curCode":"  public void runKMeansUsingConstructor() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = new KMeans()\n      .setK(1)\n      .setMaxIterations(1)\n      .setInitializationMode(KMeans.RANDOM())\n      .run(data.rdd());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2016-05-11 02:17:47","endLine":95,"groupId":"10452","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"runKMeansUsingConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/4e/5b87f588e3dc412925bc01002415e8e7c8e23d.src","preCode":"  public void runKMeansUsingConstructor() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = new KMeans()\n      .setK(1)\n      .setMaxIterations(1)\n      .setInitializationMode(KMeans.RANDOM())\n      .run(data.rdd());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"}],"commitId":"6378d4bc06cd1bb1a209bd5fb63d10ef52d75eb4","commitMessage":"@@@[SPARK-28980][CORE][SQL][STREAMING][MLLIB] Remove most items deprecated in Spark 2.2.0 or earlier.  for Spark 3\n\n\n What changes were proposed in this pull request?\n\n- Remove SQLContext.createExternalTable and Catalog.createExternalTable.  deprecated in favor of createTable since 2.2.0.  plus tests of deprecated methods\n- Remove HiveContext.  deprecated in 2.0.0.  in favor of `SparkSession.builder.enableHiveSupport`\n- Remove deprecated KinesisUtils.createStream methods.  plus tests of deprecated methods.  deprecate in 2.2.0\n- Remove deprecated MLlib (not Spark ML) linear method support.  mostly utility constructors and 'train' methods.  and associated docs. This includes methods in LinearRegression.  LogisticRegression.  Lasso.  RidgeRegression. These have been deprecated since 2.0.0\n- Remove deprecated Pyspark MLlib linear method support.  including LogisticRegressionWithSGD.  LinearRegressionWithSGD.  LassoWithSGD\n- Remove 'runs' argument in KMeans.train() method.  which has been a no-op since 2.0.0\n- Remove deprecated ChiSqSelector isSorted protected method\n- Remove deprecated 'yarn-cluster' and 'yarn-client' master argument in favor of 'yarn' and deploy mode 'cluster'.  etc\n\nNotes:\n\n- I was not able to remove deprecated DataFrameReader.json(RDD) in favor of DataFrameReader.json(Dataset); the former was deprecated in 2.2.0.  but.  it is still needed to support Pyspark's .json() method.  which can't use a Dataset.\n- Looks like SQLContext.createExternalTable was not actually deprecated in Pyspark.  but.  almost certainly was meant to be? Catalog.createExternalTable was.\n- I afterwards noted that the toDegrees.  toRadians functions were almost removed fully in SPARK-25908.  but Felix suggested keeping just the R version as they hadn't been technically deprecated. I'd like to revisit that. Do we really want the inconsistency? I'm not against reverting it again.  but then that implies leaving SQLContext.createExternalTable just in Pyspark too.  which seems weird.\n- I *kept* LogisticRegressionWithSGD.  LinearRegressionWithSGD.  LassoWithSGD.  RidgeRegressionWithSGD in Pyspark.  though deprecated.  as it is hard to remove them (still used by StreamingLogisticRegressionWithSGD?) and they are not fully removed in Scala. Maybe should not have been deprecated.\n\n\n Why are the changes needed?\n\nDeprecated items are easiest to remove in a major release.  so we should do so as much as possible for Spark 3. This does not target items deprecated 'recently' as of Spark 2.3.  which is still 18 months old.\n\n\n Does this PR introduce any user-facing change?\n\nYes.  in that deprecated items are removed from some public APIs.\n\n\n How was this patch tested?\n\nExisting tests.\n\nCloses #25684 from srowen/SPARK-28980.\n\nLead-authored-by: Sean Owen <sean.owen@databricks.com>\nCo-authored-by: HyukjinKwon <gurwls223@apache.org>\nSigned-off-by: Sean Owen <sean.owen@databricks.com>\n","date":"2019-09-09 23:19:40","modifiedFileCount":"8","status":"M","submitter":"Sean Owen"}]
