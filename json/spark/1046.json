[{"authorTime":"2016-03-02 07:39:13","codes":[{"authorDate":"2016-03-02 07:39:13","commitOrder":1,"curCode":"  public UTF8String rpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      byte[] data = new byte[this.numBytes + pad.numBytes * count + remain.numBytes];\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET, this.numBytes);\n      int offset = this.numBytes;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","date":"2016-03-02 07:39:13","endLine":686,"groupId":"2680","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"rpad","params":"(intlen@UTF8Stringpad)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/87/706d0b6838882d3997ddd4a397948cc0fc2a6a.src","preCode":"  public UTF8String rpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      byte[] data = new byte[this.numBytes + pad.numBytes * count + remain.numBytes];\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET, this.numBytes);\n      int offset = this.numBytes;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","realPath":"common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":662,"status":"B"},{"authorDate":"2016-03-02 07:39:13","commitOrder":1,"curCode":"  public UTF8String lpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      byte[] data = new byte[this.numBytes + pad.numBytes * count + remain.numBytes];\n\n      int offset = 0;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n      offset += remain.numBytes;\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET + offset, numBytes());\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","date":"2016-03-02 07:39:13","endLine":720,"groupId":"1137","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"lpad","params":"(intlen@UTF8Stringpad)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/87/706d0b6838882d3997ddd4a397948cc0fc2a6a.src","preCode":"  public UTF8String lpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      byte[] data = new byte[this.numBytes + pad.numBytes * count + remain.numBytes];\n\n      int offset = 0;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n      offset += remain.numBytes;\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET + offset, numBytes());\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","realPath":"common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":694,"status":"B"}],"commitId":"b0ee7d43730469ad61fdf6b7b75cc1b1efb62c31","commitMessage":"@@@[SPARK-13548][BUILD] Move tags and unsafe modules into common\n\n## What changes were proposed in this pull request?\nThis patch moves tags and unsafe modules into common directory to remove 2 top level non-user-facing directories.\n\n## How was this patch tested?\nJenkins should suffice.\n\nAuthor: Reynold Xin <rxin@databricks.com>\n\nCloses #11426 from rxin/SPARK-13548.\n","date":"2016-03-02 07:39:13","modifiedFileCount":"0","status":"B","submitter":"Reynold Xin"},{"authorTime":"2018-04-06 10:13:59","codes":[{"authorDate":"2018-04-06 10:13:59","commitOrder":2,"curCode":"  public UTF8String rpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      byte[] data = new byte[this.numBytes + pad.numBytes * count + remain.numBytes];\n      base.writeTo(0, data, BYTE_ARRAY_OFFSET, this.numBytes);\n      int offset = this.numBytes;\n      int idx = 0;\n      while (idx < count) {\n        pad.base.writeTo(0, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      remain.base.writeTo(0, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","date":"2018-04-06 10:13:59","endLine":839,"groupId":"1800","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"rpad","params":"(intlen@UTF8Stringpad)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/e9/b3d9b045af5c6c0f6fb49ecd8efe68f99ec944.src","preCode":"  public UTF8String rpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      byte[] data = new byte[this.numBytes + pad.numBytes * count + remain.numBytes];\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET, this.numBytes);\n      int offset = this.numBytes;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","realPath":"common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":815,"status":"M"},{"authorDate":"2018-04-06 10:13:59","commitOrder":2,"curCode":"  public UTF8String lpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      byte[] data = new byte[this.numBytes + pad.numBytes * count + remain.numBytes];\n\n      int offset = 0;\n      int idx = 0;\n      while (idx < count) {\n        pad.base.writeTo(0, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      remain.base.writeTo(0, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n      offset += remain.numBytes;\n      base.writeTo(0, data, BYTE_ARRAY_OFFSET + offset, numBytes());\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","date":"2018-04-06 10:13:59","endLine":873,"groupId":"1800","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"lpad","params":"(intlen@UTF8Stringpad)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/e9/b3d9b045af5c6c0f6fb49ecd8efe68f99ec944.src","preCode":"  public UTF8String lpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      byte[] data = new byte[this.numBytes + pad.numBytes * count + remain.numBytes];\n\n      int offset = 0;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n      offset += remain.numBytes;\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET + offset, numBytes());\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","realPath":"common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":847,"status":"M"}],"commitId":"4807d381bb113a5c61e6dad88202f23a8b6dd141","commitMessage":"@@@[SPARK-10399][CORE][SQL] Introduce multiple MemoryBlocks to choose several types of memory block\n\n## What changes were proposed in this pull request?\n\nThis PR allows us to use one of several types of `MemoryBlock`.  such as byte array.  int array.  long array.  or `java.nio.DirectByteBuffer`. To use `java.nio.DirectByteBuffer` allows to have off heap memory which is automatically deallocated by JVM. `MemoryBlock`  class has primitive accessors like `Platform.getInt()`.  `Platform.putint()`.  or `Platform.copyMemory()`.\n\nThis PR uses `MemoryBlock` for `OffHeapColumnVector`.  `UTF8String`.  and other places. This PR can improve performance of operations involving memory accesses (e.g. `UTF8String.trim`) by 1.8x.\n\nFor now.  this PR does not use `MemoryBlock` for `BufferHolder` based on cloud-fan's [suggestion](https://github.com/apache/spark/pull/11494#issuecomment-309694290).\n\nSince this PR is a successor of #11494.  close #11494. Many codes were ported from #11494. Many efforts were put here. **I think this PR should credit to yzotov.**\n\nThis PR can achieve **1.1-1.4x performance improvements** for  operations in `UTF8String` or `Murmur3_x86_32`. Other operations are almost comparable performances.\n\nWithout this PR\n```\nOpenJDK 64-Bit Server VM 1.8.0_121-8u121-b13-0ubuntu1.16.04.2-b13 on Linux 4.4.0-22-generic\nIntel(R) Xeon(R) CPU E5-2667 v3  3.20GHz\nOpenJDK 64-Bit Server VM 1.8.0_121-8u121-b13-0ubuntu1.16.04.2-b13 on Linux 4.4.0-22-generic\nIntel(R) Xeon(R) CPU E5-2667 v3  3.20GHz\nHash byte arrays with length 268435487:  Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n------------------------------------------------------------------------------------------------\nMurmur3_x86_32                                 526 /  536          0.0   131399881.5       1.0X\n\nUTF8String benchmark:                    Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n------------------------------------------------------------------------------------------------\nhashCode                                       525 /  552       1022.6           1.0       1.0X\nsubstring                                      414 /  423       1298.0           0.8       1.3X\n```\n\nWith this PR\n```\nOpenJDK 64-Bit Server VM 1.8.0_121-8u121-b13-0ubuntu1.16.04.2-b13 on Linux 4.4.0-22-generic\nIntel(R) Xeon(R) CPU E5-2667 v3  3.20GHz\nHash byte arrays with length 268435487:  Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n------------------------------------------------------------------------------------------------\nMurmur3_x86_32                                 474 /  488          0.0   118552232.0       1.0X\n\nUTF8String benchmark:                    Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n------------------------------------------------------------------------------------------------\nhashCode                                       476 /  480       1127.3           0.9       1.0X\nsubstring                                      287 /  291       1869.9           0.5       1.7X\n```\n\nBenchmark program\n```\ntest(\"benchmark Murmur3_x86_32\") {\n  val length = 8192 * 32768 + 31\n  val seed = 42L\n  val iters = 1 << 2\n  val random = new Random(seed)\n  val arrays = Array.fill[MemoryBlock](numArrays) {\n    val bytes = new Array[Byte](length)\n    random.nextBytes(bytes)\n    new ByteArrayMemoryBlock(bytes.  Platform.BYTE_ARRAY_OFFSET.  length)\n  }\n\n  val benchmark = new Benchmark(\"Hash byte arrays with length \" + length. \n    iters * numArrays.  minNumIters = 20)\n  benchmark.addCase(\"HiveHasher\") { _: Int =>\n    var sum = 0L\n    for (_ <- 0L until iters) {\n      sum += HiveHasher.hashUnsafeBytesBlock(\n        arrays(i).  Platform.BYTE_ARRAY_OFFSET.  length)\n    }\n  }\n  benchmark.run()\n}\n\ntest(\"benchmark UTF8String\") {\n  val N = 512 * 1024 * 1024\n  val iters = 2\n  val benchmark = new Benchmark(\"UTF8String benchmark\".  N.  minNumIters = 20)\n  val str0 = new java.io.StringWriter() { { for (i <- 0 until N) { write(\" \") } } }.toString\n  val s0 = UTF8String.fromString(str0)\n  benchmark.addCase(\"hashCode\") { _: Int =>\n    var h: Int = 0\n    for (_ <- 0L until iters) { h += s0.hashCode }\n  }\n  benchmark.addCase(\"substring\") { _: Int =>\n    var s: UTF8String = null\n    for (_ <- 0L until iters) { s = s0.substring(N / 2 - 5.  N / 2 + 5) }\n  }\n  benchmark.run()\n}\n```\n\nI run [this benchmark program](https://gist.github.com/kiszk/94f75b506c93a663bbbc372ffe8f05de) using [the commit](https://github.com/apache/spark/pull/19222/commits/ee5a79861c18725fb1cd9b518cdfd2489c05b81d6). I got the following results:\n\n```\nOpenJDK 64-Bit Server VM 1.8.0_151-8u151-b12-0ubuntu0.16.04.2-b12 on Linux 4.4.0-66-generic\nIntel(R) Xeon(R) CPU E5-2667 v3  3.20GHz\nMemory access benchmarks:                Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n------------------------------------------------------------------------------------------------\nByteArrayMemoryBlock get/putInt()              220 /  221        609.3           1.6       1.0X\nPlatform get/putInt(byte[])                    220 /  236        610.9           1.6       1.0X\nPlatform get/putInt(Object)                    492 /  494        272.8           3.7       0.4X\nOnHeapMemoryBlock get/putLong()                322 /  323        416.5           2.4       0.7X\nlong[]                                         221 /  221        608.0           1.6       1.0X\nPlatform get/putLong(long[])                   321 /  321        418.7           2.4       0.7X\nPlatform get/putLong(Object)                   561 /  563        239.2           4.2       0.4X\n```\n\nI also run [this benchmark program](https://gist.github.com/kiszk/5fdb4e03733a5d110421177e289d1fb5) for comparing performance of `Platform.copyMemory()`.\n```\nOpenJDK 64-Bit Server VM 1.8.0_151-8u151-b12-0ubuntu0.16.04.2-b12 on Linux 4.4.0-66-generic\nIntel(R) Xeon(R) CPU E5-2667 v3  3.20GHz\nPlatform copyMemory:                     Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n------------------------------------------------------------------------------------------------\nObject to Object                              1961 / 1967          8.6         116.9       1.0X\nSystem.arraycopy Object to Object             1917 / 1921          8.8         114.3       1.0X\nbyte array to byte array                      1961 / 1968          8.6         116.9       1.0X\nSystem.arraycopy byte array to byte array      1909 / 1937          8.8         113.8       1.0X\nint array to int array                        1921 / 1990          8.7         114.5       1.0X\ndouble array to double array                  1918 / 1923          8.7         114.3       1.0X\nObject to byte array                          1961 / 1967          8.6         116.9       1.0X\nObject to short array                         1965 / 1972          8.5         117.1       1.0X\nObject to int array                           1910 / 1915          8.8         113.9       1.0X\nObject to float array                         1971 / 1978          8.5         117.5       1.0X\nObject to double array                        1919 / 1944          8.7         114.4       1.0X\nbyte array to Object                          1959 / 1967          8.6         116.8       1.0X\nint array to Object                           1961 / 1970          8.6         116.9       1.0X\ndouble array to Object                        1917 / 1924          8.8         114.3       1.0X\n```\n\nThese results show three facts:\n1. According to the second/third or sixth/seventh results in the first experiment.  if we use `Platform.get/putInt(Object)`.  we achieve more than 2x worse performance than `Platform.get/putInt(byte[])` with concrete type (i.e. `byte[]`).\n2. According to the second/third or fourth/fifth/sixth results in the first experiment.  the fastest way to access an array element on Java heap is `array[]`. **Cons of `array[]` is that it is not possible to support unaligned-8byte access.**\n3. According to the first/second/third or fourth/sixth/seventh results in the first experiment.  `getInt()/putInt() or getLong()/putLong()` in subclasses of `MemoryBlock` can achieve comparable performance to `Platform.get/putInt()` or `Platform.get/putLong()` with concrete type (second or sixth result). There is no overhead regarding virtual call.\n4. According to results in the second experiment.  for `Platform.copy()`.  to pass `Object` can achieve the same performance as to pass any type of primitive array as source or destination.\n5. According to second/fourth results in the second experiment.  `Platform.copy()` can achieve the same performance as `System.arrayCopy`. **It would be good to use `Platform.copy()` since `Platform.copy()` can take any types for src and dst.**\n\nWe are incrementally replace `Platform.get/putXXX` with `MemoryBlock.get/putXXX`. This is because we have two advantages.\n1) Achieve better performance due to having a concrete type for an array.\n2) Use simple OO design instead of passing `Object`\nIt is easy to use `MemoryBlock` in `InternalRow`.  `BufferHolder`.  `TaskMemoryManager`.  and others that are already abstracted. It is not easy to use `MemoryBlock` in utility classes related to hashing or others.\n\nOther candidates are\n- UnsafeRow.  UnsafeArrayData.  UnsafeMapData.  SpecificUnsafeRowJoiner\n- UTF8StringBuffer\n- BufferHolder\n- TaskMemoryManager\n- OnHeapColumnVector\n- BytesToBytesMap\n- CachedBatch\n- classes for hash\n- others.\n\n## How was this patch tested?\n\nAdded `UnsafeMemoryAllocator`\n\nAuthor: Kazuaki Ishizaki <ishizaki@jp.ibm.com>\n\nCloses #19222 from kiszk/SPARK-10399.\n","date":"2018-04-06 10:13:59","modifiedFileCount":"27","status":"M","submitter":"Kazuaki Ishizaki"},{"authorTime":"2018-09-09 21:25:19","codes":[{"authorDate":"2018-09-09 21:25:19","commitOrder":3,"curCode":"  public UTF8String rpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      byte[] data = new byte[this.numBytes + pad.numBytes * count + remain.numBytes];\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET, this.numBytes);\n      int offset = this.numBytes;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","date":"2018-09-09 21:25:19","endLine":845,"groupId":"2680","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"rpad","params":"(intlen@UTF8Stringpad)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/df/f4a73f3e9da8de6de530af8fa8d181f24a01e6.src","preCode":"  public UTF8String rpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      byte[] data = new byte[this.numBytes + pad.numBytes * count + remain.numBytes];\n      base.writeTo(0, data, BYTE_ARRAY_OFFSET, this.numBytes);\n      int offset = this.numBytes;\n      int idx = 0;\n      while (idx < count) {\n        pad.base.writeTo(0, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      remain.base.writeTo(0, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","realPath":"common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":821,"status":"M"},{"authorDate":"2018-09-09 21:25:19","commitOrder":3,"curCode":"  public UTF8String lpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      byte[] data = new byte[this.numBytes + pad.numBytes * count + remain.numBytes];\n\n      int offset = 0;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n      offset += remain.numBytes;\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET + offset, numBytes());\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","date":"2018-09-09 21:25:19","endLine":879,"groupId":"1137","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"lpad","params":"(intlen@UTF8Stringpad)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/df/f4a73f3e9da8de6de530af8fa8d181f24a01e6.src","preCode":"  public UTF8String lpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      byte[] data = new byte[this.numBytes + pad.numBytes * count + remain.numBytes];\n\n      int offset = 0;\n      int idx = 0;\n      while (idx < count) {\n        pad.base.writeTo(0, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      remain.base.writeTo(0, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n      offset += remain.numBytes;\n      base.writeTo(0, data, BYTE_ARRAY_OFFSET + offset, numBytes());\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","realPath":"common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":853,"status":"M"}],"commitId":"0b9ccd55c2986957863dcad3b44ce80403eecfa1","commitMessage":"@@@Revert [SPARK-10399] [SPARK-23879] [SPARK-23762] [SPARK-25317]\n\n## What changes were proposed in this pull request?\n\nWhen running TPC-DS benchmarks on 2.4 release.  npoggi and winglungngai  saw more than 10% performance regression on the following queries: q67.  q24a and q24b. After we applying the PR https://github.com/apache/spark/pull/22338.  the performance regression still exists. If we revert the changes in https://github.com/apache/spark/pull/19222.  npoggi and winglungngai  found the performance regression was resolved. Thus.  this PR is to revert the related changes for unblocking the 2.4 release.\n\nIn the future release.  we still can continue the investigation and find out the root cause of the regression.\n\n## How was this patch tested?\n\nThe existing test cases\n\nCloses #22361 from gatorsmile/revertMemoryBlock.\n\nAuthored-by: gatorsmile <gatorsmile@gmail.com>\nSigned-off-by: Wenchen Fan <wenchen@databricks.com>\n","date":"2018-09-09 21:25:19","modifiedFileCount":"28","status":"M","submitter":"gatorsmile"},{"authorTime":"2021-04-13 19:34:28","codes":[{"authorDate":"2021-04-13 19:34:28","commitOrder":4,"curCode":"  public UTF8String rpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      int resultSize = Math.toIntExact((long)numBytes + pad.numBytes * count + remain.numBytes);\n      byte[] data = new byte[resultSize];\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET, this.numBytes);\n      int offset = this.numBytes;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","date":"2021-04-13 19:34:28","endLine":923,"groupId":"2738","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"rpad","params":"(intlen@UTF8Stringpad)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/db/52f7748176129f6441490bead05b25dc41f2f1.src","preCode":"  public UTF8String rpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      byte[] data = new byte[this.numBytes + pad.numBytes * count + remain.numBytes];\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET, this.numBytes);\n      int offset = this.numBytes;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","realPath":"common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":898,"status":"M"},{"authorDate":"2021-04-13 19:34:28","commitOrder":4,"curCode":"  public UTF8String lpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      int resultSize = Math.toIntExact((long)numBytes + pad.numBytes * count + remain.numBytes);\n      byte[] data = new byte[resultSize];\n\n      int offset = 0;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n      offset += remain.numBytes;\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET + offset, numBytes());\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","date":"2021-04-13 19:34:28","endLine":958,"groupId":"2739","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"lpad","params":"(intlen@UTF8Stringpad)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/db/52f7748176129f6441490bead05b25dc41f2f1.src","preCode":"  public UTF8String lpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      byte[] data = new byte[this.numBytes + pad.numBytes * count + remain.numBytes];\n\n      int offset = 0;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n      offset += remain.numBytes;\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET + offset, numBytes());\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","realPath":"common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":931,"status":"M"}],"commitId":"e70b0f81b32f3c5ad9c926142d7ccdc9f1a19ab4","commitMessage":"@@@[SPARK-35041][SQL] Revise the overflow in UTF8String\n\n\n What changes were proposed in this pull request?\n\nAdd overflow check before do `new byte[]`.\n\n\n Why are the changes needed?\n\nAvoid overflow in extreme case.\n\n\n Does this PR introduce _any_ user-facing change?\n\nMaybe yes.  the error msg changed if overflow.\n\n\n How was this patch tested?\n\nPass CI.\n\nCloses #32142 from ulysses-you/SPARK-35041.\n\nAuthored-by: ulysses-you <ulyssesyou18@gmail.com>\nSigned-off-by: Max Gekk <max.gekk@gmail.com>\n","date":"2021-04-13 19:34:28","modifiedFileCount":"1","status":"M","submitter":"ulysses-you"},{"authorTime":"2021-08-01 13:35:57","codes":[{"authorDate":"2021-08-01 13:35:57","commitOrder":5,"curCode":"  public UTF8String rpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      int resultSize = Math.toIntExact((long) numBytes + (long) pad.numBytes * count + remain.numBytes);\n      byte[] data = new byte[resultSize];\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET, this.numBytes);\n      int offset = this.numBytes;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","date":"2021-08-01 13:35:57","endLine":923,"groupId":"1046","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"rpad","params":"(intlen@UTF8Stringpad)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/18/dd606e4f3f7a9c43ee19f186598cdb1c33c6ad.src","preCode":"  public UTF8String rpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      int resultSize = Math.toIntExact((long)numBytes + pad.numBytes * count + remain.numBytes);\n      byte[] data = new byte[resultSize];\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET, this.numBytes);\n      int offset = this.numBytes;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","realPath":"common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":898,"status":"M"},{"authorDate":"2021-08-01 13:35:57","commitOrder":5,"curCode":"  public UTF8String lpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      int resultSize = Math.toIntExact((long) numBytes + (long) pad.numBytes * count + remain.numBytes);\n      byte[] data = new byte[resultSize];\n\n      int offset = 0;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n      offset += remain.numBytes;\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET + offset, numBytes());\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","date":"2021-08-01 13:35:57","endLine":958,"groupId":"1046","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"lpad","params":"(intlen@UTF8Stringpad)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/18/dd606e4f3f7a9c43ee19f186598cdb1c33c6ad.src","preCode":"  public UTF8String lpad(int len, UTF8String pad) {\n    int spaces = len - this.numChars(); \r\n    if (spaces <= 0 || pad.numBytes() == 0) {\n      \r\n      return substring(0, len);\n    } else {\n      int padChars = pad.numChars();\n      int count = spaces / padChars; \r\n      \r\n      UTF8String remain = pad.substring(0, spaces - padChars * count);\n\n      int resultSize = Math.toIntExact((long)numBytes + pad.numBytes * count + remain.numBytes);\n      byte[] data = new byte[resultSize];\n\n      int offset = 0;\n      int idx = 0;\n      while (idx < count) {\n        copyMemory(pad.base, pad.offset, data, BYTE_ARRAY_OFFSET + offset, pad.numBytes);\n        ++ idx;\n        offset += pad.numBytes;\n      }\n      copyMemory(remain.base, remain.offset, data, BYTE_ARRAY_OFFSET + offset, remain.numBytes);\n      offset += remain.numBytes;\n      copyMemory(this.base, this.offset, data, BYTE_ARRAY_OFFSET + offset, numBytes());\n\n      return UTF8String.fromBytes(data);\n    }\n  }\n","realPath":"common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":931,"status":"M"}],"commitId":"72615bc551adaa238d15a8b43a8f99aaf741c30f","commitMessage":"@@@[SPARK-36362][CORE][SQL][TESTS] Omnibus Java code static analyzer warning fixes\n\n\n What changes were proposed in this pull request?\n\nFix up some minor Java issues:\n\n- Some int*int multiplications that widen to long maybe could overflow\n- Unnecessarily non-static inner classes\n- Some tests \"catch (AssertionError)\" and do nothing\n- Manual array iteration vs very slightly faster/simpler foreach\n- Incorrect generic types that just happen to not cause a runtime error\n- Missed opportunities for try-close\n- Mutable enums\n- .. and a few other minor things\n\n\n Why are the changes needed?\n\nSome are minor but clear fixes; some may have a marginal perf impact or avoid a bug later. Also: maybe avoid future PRs to address these one by one.\n\n\n Does this PR introduce _any_ user-facing change?\n\nNo.\n\n\n How was this patch tested?\n\nExisting tests\n\nCloses #33594 from srowen/SPARK-36362.\n\nAuthored-by: Sean Owen <srowen@gmail.com>\nSigned-off-by: Dongjoon Hyun <dongjoon@apache.org>\n","date":"2021-08-01 13:35:57","modifiedFileCount":"41","status":"M","submitter":"Sean Owen"}]
