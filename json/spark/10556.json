[{"authorTime":"2015-08-01 10:19:27","codes":[{"authorDate":"2015-08-01 10:19:27","commitOrder":1,"curCode":"  public void randomizedStressTest() {\n    final int size = 65536;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    final BytesToBytesMap map = new BytesToBytesMap(\n      taskMemoryManager, shuffleMemoryManager, size, PAGE_SIZE_BYTES);\n\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(512) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = entry.getKey().array();\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc = map.lookup(key, BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2015-08-01 10:19:27","endLine":363,"groupId":"1509","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"randomizedStressTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/60/f483acbcb80581d60fbfb0cdd2154f05400ba6.src","preCode":"  public void randomizedStressTest() {\n    final int size = 65536;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    final BytesToBytesMap map = new BytesToBytesMap(\n      taskMemoryManager, shuffleMemoryManager, size, PAGE_SIZE_BYTES);\n\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(512) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = entry.getKey().array();\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc = map.lookup(key, BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"B"},{"authorDate":"2015-08-01 10:19:27","commitOrder":1,"curCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(\n      taskMemoryManager, shuffleMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = entry.getKey().array();\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc = map.lookup(key, BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2015-08-01 10:19:27","endLine":413,"groupId":"1509","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"randomizedTestWithRecordsLargerThanPageSize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/60/f483acbcb80581d60fbfb0cdd2154f05400ba6.src","preCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(\n      taskMemoryManager, shuffleMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = entry.getKey().array();\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc = map.lookup(key, BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"B"}],"commitId":"8cb415a4b9bc1f82127ccce4a5579d433f4e8f83","commitMessage":"@@@[SPARK-9451] [SQL] Support entries larger than default page size in BytesToBytesMap & integrate with ShuffleMemoryManager\n\nThis patch adds support for entries larger than the default page size in BytesToBytesMap.  These large rows are handled by allocating special overflow pages to hold individual entries.\n\nIn addition.  this patch integrates BytesToBytesMap with the ShuffleMemoryManager:\n\n- Move BytesToBytesMap from `unsafe` to `core` so that it can import `ShuffleMemoryManager`.\n- Before allocating new data pages.  ask the ShuffleMemoryManager to reserve the memory:\n  - `putNewKey()` now returns a boolean to indicate whether the insert succeeded or failed due to a lack of memory.  The caller can use this value to respond to the memory pressure (e.g. by spilling).\n- `UnsafeFixedWidthAggregationMap. getAggregationBuffer()` now returns `null` to signal failure due to a lack of memory.\n- Updated all uses of these classes to handle these error conditions.\n- Added new tests for allocating large records and for allocations which fail due to memory pressure.\n- Extended the `afterAll()` test teardown methods to detect ShuffleMemoryManager leaks.\n\nAuthor: Josh Rosen <joshrosen@databricks.com>\n\nCloses #7762 from JoshRosen/large-rows and squashes the following commits:\n\nae7bc56 [Josh Rosen] Fix compilation\n82fc657 [Josh Rosen] Merge remote-tracking branch 'origin/master' into large-rows\n34ab943 [Josh Rosen] Remove semi\n31a525a [Josh Rosen] Integrate BytesToBytesMap with ShuffleMemoryManager.\n626b33c [Josh Rosen] Move code to sql/core and spark/core packages so that ShuffleMemoryManager can be integrated\nec4484c [Josh Rosen] Move BytesToBytesMap from unsafe package to core.\n642ed69 [Josh Rosen] Rename size to numElements\nbea1152 [Josh Rosen] Add basic test.\n2cd3570 [Josh Rosen] Remove accidental duplicated code\n07ff9ef [Josh Rosen] Basic support for large rows in BytesToBytesMap.\n","date":"2015-08-01 10:19:27","modifiedFileCount":"2","status":"B","submitter":"Josh Rosen"},{"authorTime":"2015-08-11 23:41:06","codes":[{"authorDate":"2015-08-11 23:41:06","commitOrder":2,"curCode":"  public void randomizedStressTest() {\n    final int size = 65536;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    final BytesToBytesMap map = new BytesToBytesMap(\n      taskMemoryManager, shuffleMemoryManager, size, PAGE_SIZE_BYTES);\n\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(512) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = entry.getKey().array();\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2015-08-11 23:41:06","endLine":384,"groupId":"3063","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"randomizedStressTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/1a/79c20c35246ab9ab6c50638b8562c6a979fd86.src","preCode":"  public void randomizedStressTest() {\n    final int size = 65536;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    final BytesToBytesMap map = new BytesToBytesMap(\n      taskMemoryManager, shuffleMemoryManager, size, PAGE_SIZE_BYTES);\n\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(512) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = entry.getKey().array();\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc = map.lookup(key, BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"},{"authorDate":"2015-08-11 23:41:06","commitOrder":2,"curCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(\n      taskMemoryManager, shuffleMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = entry.getKey().array();\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2015-08-11 23:41:06","endLine":435,"groupId":"3063","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"randomizedTestWithRecordsLargerThanPageSize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/1a/79c20c35246ab9ab6c50638b8562c6a979fd86.src","preCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(\n      taskMemoryManager, shuffleMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = entry.getKey().array();\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc = map.lookup(key, BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"M"}],"commitId":"d378396f86f625f006738d87fe5dbc2ff8fd913d","commitMessage":"@@@[SPARK-9815] Rename PlatformDependent.UNSAFE -> Platform.\n\nPlatformDependent.UNSAFE is way too verbose.\n\nAuthor: Reynold Xin <rxin@databricks.com>\n\nCloses #8094 from rxin/SPARK-9815 and squashes the following commits:\n\n229b603 [Reynold Xin] [SPARK-9815] Rename PlatformDependent.UNSAFE -> Platform.\n","date":"2015-08-11 23:41:06","modifiedFileCount":"30","status":"M","submitter":"Reynold Xin"},{"authorTime":"2015-10-26 12:19:52","codes":[{"authorDate":"2015-10-26 12:19:52","commitOrder":3,"curCode":"  public void randomizedStressTest() {\n    final int size = 65536;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, size, PAGE_SIZE_BYTES);\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(512) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = entry.getKey().array();\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2015-10-26 12:19:52","endLine":364,"groupId":"3063","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"randomizedStressTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/6e/52496cf933b1e311c42a407334fe9148686568.src","preCode":"  public void randomizedStressTest() {\n    final int size = 65536;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    final BytesToBytesMap map = new BytesToBytesMap(\n      taskMemoryManager, shuffleMemoryManager, size, PAGE_SIZE_BYTES);\n\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(512) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = entry.getKey().array();\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"},{"authorDate":"2015-10-26 12:19:52","commitOrder":3,"curCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = entry.getKey().array();\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2015-10-26 12:19:52","endLine":414,"groupId":"3063","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"randomizedTestWithRecordsLargerThanPageSize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/6e/52496cf933b1e311c42a407334fe9148686568.src","preCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(\n      taskMemoryManager, shuffleMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = entry.getKey().array();\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":367,"status":"M"}],"commitId":"85e654c5ec87e666a8845bfd77185c1ea57b268a","commitMessage":"@@@[SPARK-10984] Simplify *MemoryManager class structure\n\nThis patch refactors the MemoryManager class structure. After #9000.  Spark had the following classes:\n\n- MemoryManager\n- StaticMemoryManager\n- ExecutorMemoryManager\n- TaskMemoryManager\n- ShuffleMemoryManager\n\nThis is fairly confusing. To simplify things.  this patch consolidates several of these classes:\n\n- ShuffleMemoryManager and ExecutorMemoryManager were merged into MemoryManager.\n- TaskMemoryManager is moved into Spark Core.\n\n**Key changes and tasks**:\n\n- [x] Merge ExecutorMemoryManager into MemoryManager.\n  - [x] Move pooling logic into Allocator.\n- [x] Move TaskMemoryManager from `spark-unsafe` to `spark-core`.\n- [x] Refactor the existing Tungsten TaskMemoryManager interactions so Tungsten code use only this and not both this and ShuffleMemoryManager.\n- [x] Refactor non-Tungsten code to use the TaskMemoryManager instead of ShuffleMemoryManager.\n- [x] Merge ShuffleMemoryManager into MemoryManager.\n  - [x] Move code\n  - [x] ~~Simplify 1/n calculation.~~ **Will defer to followup.  since this needs more work.**\n- [x] Port ShuffleMemoryManagerSuite tests.\n- [x] Move classes from `unsafe` package to `memory` package.\n- [ ] Figure out how to handle the hacky use of the memory managers in HashedRelation's broadcast variable construction.\n- [x] Test porting and cleanup: several tests relied on mock functionality (such as `TestShuffleMemoryManager.markAsOutOfMemory`) which has been changed or broken during the memory manager consolidation\n  - [x] AbstractBytesToBytesMapSuite\n  - [x] UnsafeExternalSorterSuite\n  - [x] UnsafeFixedWidthAggregationMapSuite\n  - [x] UnsafeKVExternalSorterSuite\n\n**Compatiblity notes**:\n\n- This patch introduces breaking changes in `ExternalAppendOnlyMap`.  which is marked as `DevloperAPI` (likely for legacy reasons): this class now cannot be used outside of a task.\n\nAuthor: Josh Rosen <joshrosen@databricks.com>\n\nCloses #9127 from JoshRosen/SPARK-10984.\n","date":"2015-10-26 12:19:52","modifiedFileCount":"20","status":"M","submitter":"Josh Rosen"},{"authorTime":"2015-12-05 09:02:04","codes":[{"authorDate":"2015-12-05 09:02:04","commitOrder":4,"curCode":"  public void randomizedStressTest() {\n    final int size = 65536;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, size, PAGE_SIZE_BYTES);\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(512) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2015-12-05 09:02:04","endLine":445,"groupId":"3063","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"randomizedStressTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/87/24a3498842170ff47a57d93147b0fc17699174.src","preCode":"  public void randomizedStressTest() {\n    final int size = 65536;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, size, PAGE_SIZE_BYTES);\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(512) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = entry.getKey().array();\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"M"},{"authorDate":"2015-12-05 09:02:04","commitOrder":4,"curCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2015-12-05 09:02:04","endLine":495,"groupId":"3063","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"randomizedTestWithRecordsLargerThanPageSize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/87/24a3498842170ff47a57d93147b0fc17699174.src","preCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = entry.getKey().array();\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":448,"status":"M"}],"commitId":"3af53e61fd604fe8000e1fdf656d60b79c842d1c","commitMessage":"@@@[SPARK-12084][CORE] Fix codes that uses ByteBuffer.array incorrectly\n\n`ByteBuffer` doesn't guarantee all contents in `ByteBuffer.array` are valid. E.g.  a ByteBuffer returned by `ByteBuffer.slice`. We should not use the whole content of `ByteBuffer` unless we know that's correct.\n\nThis patch fixed all places that use `ByteBuffer.array` incorrectly.\n\nAuthor: Shixiong Zhu <shixiong@databricks.com>\n\nCloses #10083 from zsxwing/bytebuffer-array.\n","date":"2015-12-05 09:02:04","modifiedFileCount":"3","status":"M","submitter":"Shixiong Zhu"},{"authorTime":"2016-02-10 08:41:21","codes":[{"authorDate":"2016-02-10 08:41:21","commitOrder":5,"curCode":"  public void randomizedStressTest() {\n    final int size = 65536;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, size, PAGE_SIZE_BYTES);\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(512) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), key.length));\n          Assert.assertTrue(\n            arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(\n          arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), loc.getKeyLength()));\n        Assert.assertTrue(\n          arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2016-02-10 08:41:21","endLine":448,"groupId":"3063","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"randomizedStressTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/d8/af2b336dd4db82ed5ff7ffc81b9a24e2dd8935.src","preCode":"  public void randomizedStressTest() {\n    final int size = 65536;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, size, PAGE_SIZE_BYTES);\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(512) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"M"},{"authorDate":"2016-02-10 08:41:21","commitOrder":5,"curCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), key.length));\n          Assert.assertTrue(\n            arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(\n          arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), loc.getKeyLength()));\n        Assert.assertTrue(\n          arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2016-02-10 08:41:21","endLine":501,"groupId":"3063","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"randomizedTestWithRecordsLargerThanPageSize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/d8/af2b336dd4db82ed5ff7ffc81b9a24e2dd8935.src","preCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), key.length));\n          Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(arrayEquals(key, loc.getKeyAddress(), loc.getKeyLength()));\n        Assert.assertTrue(arrayEquals(value, loc.getValueAddress(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"}],"commitId":"0e5ebac3c1f1ff58f938be59c7c9e604977d269c","commitMessage":"@@@[SPARK-12950] [SQL] Improve lookup of BytesToBytesMap in aggregate\n\nThis PR improve the lookup of BytesToBytesMap by:\n\n1. Generate code for calculate the hash code of grouping keys.\n\n2. Do not use MemoryLocation.  fetch the baseObject and offset for key and value directly (remove the indirection).\n\nAuthor: Davies Liu <davies@databricks.com>\n\nCloses #11010 from davies/gen_map.\n","date":"2016-02-10 08:41:21","modifiedFileCount":"4","status":"M","submitter":"Davies Liu"},{"authorTime":"2016-03-09 18:31:26","codes":[{"authorDate":"2016-03-09 18:31:26","commitOrder":6,"curCode":"  public void randomizedStressTest() {\n    final int size = 65536;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<>();\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, size, PAGE_SIZE_BYTES);\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(512) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), key.length));\n          Assert.assertTrue(\n            arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(\n          arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), loc.getKeyLength()));\n        Assert.assertTrue(\n          arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2016-03-09 18:31:26","endLine":448,"groupId":"3063","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"randomizedStressTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/9a/ab2265c98928d5e475f65e97de76f54bb0420c.src","preCode":"  public void randomizedStressTest() {\n    final int size = 65536;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, size, PAGE_SIZE_BYTES);\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(512) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), key.length));\n          Assert.assertTrue(\n            arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(\n          arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), loc.getKeyLength()));\n        Assert.assertTrue(\n          arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"M"},{"authorDate":"2016-03-09 18:31:26","commitOrder":6,"curCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), key.length));\n          Assert.assertTrue(\n            arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(\n          arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), loc.getKeyLength()));\n        Assert.assertTrue(\n          arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2016-03-09 18:31:26","endLine":501,"groupId":"3063","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"randomizedTestWithRecordsLargerThanPageSize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/9a/ab2265c98928d5e475f65e97de76f54bb0420c.src","preCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<ByteBuffer, byte[]>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), key.length));\n          Assert.assertTrue(\n            arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(\n          arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), loc.getKeyLength()));\n        Assert.assertTrue(\n          arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"}],"commitId":"c3689bc24e03a9471cd6e8169da61963c4528252","commitMessage":"@@@[SPARK-13702][CORE][SQL][MLLIB] Use diamond operator for generic instance creation in Java code.\n\n## What changes were proposed in this pull request?\n\nIn order to make `docs/examples` (and other related code) more simple/readable/user-friendly.  this PR replaces existing codes like the followings by using `diamond` operator.\n\n```\n-    final ArrayList<Product2<Object.  Object>> dataToWrite =\n-      new ArrayList<Product2<Object.  Object>>();\n+    final ArrayList<Product2<Object.  Object>> dataToWrite = new ArrayList<>();\n```\n\nJava 7 or higher supports **diamond** operator which replaces the type arguments required to invoke the constructor of a generic class with an empty set of type parameters (<>). Currently.  Spark Java code use mixed usage of this.\n\n## How was this patch tested?\n\nManual.\nPass the existing tests.\n\nAuthor: Dongjoon Hyun <dongjoon@apache.org>\n\nCloses #11541 from dongjoon-hyun/SPARK-13702.\n","date":"2016-03-09 18:31:26","modifiedFileCount":"57","status":"M","submitter":"Dongjoon Hyun"},{"authorTime":"2016-03-29 04:07:32","codes":[{"authorDate":"2016-03-29 04:07:32","commitOrder":7,"curCode":"  public void randomizedStressTest() {\n    final int size = 65536;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<>();\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, size, PAGE_SIZE_BYTES);\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(512) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.append(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), key.length));\n          Assert.assertTrue(\n            arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(\n          arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), loc.getKeyLength()));\n        Assert.assertTrue(\n          arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2016-03-29 04:07:32","endLine":453,"groupId":"3063","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"randomizedStressTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/84/b82f5a4742cdce097e1e08d34d141ee6cbe559.src","preCode":"  public void randomizedStressTest() {\n    final int size = 65536;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<>();\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, size, PAGE_SIZE_BYTES);\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(512) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), key.length));\n          Assert.assertTrue(\n            arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(\n          arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), loc.getKeyLength()));\n        Assert.assertTrue(\n          arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"M"},{"authorDate":"2016-03-29 04:07:32","commitOrder":7,"curCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.append(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), key.length));\n          Assert.assertTrue(\n            arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(\n          arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), loc.getKeyLength()));\n        Assert.assertTrue(\n          arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2016-03-29 04:07:32","endLine":506,"groupId":"3063","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"randomizedTestWithRecordsLargerThanPageSize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/84/b82f5a4742cdce097e1e08d34d141ee6cbe559.src","preCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.putNewKey(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), key.length));\n          Assert.assertTrue(\n            arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(\n          arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), loc.getKeyLength()));\n        Assert.assertTrue(\n          arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":456,"status":"M"}],"commitId":"d7b58f1461f71ee3c028360eef0ffedd17d6a076","commitMessage":"@@@[SPARK-14052] [SQL] build a BytesToBytesMap directly in HashedRelation\n\n## What changes were proposed in this pull request?\n\nCurrently.  for the key that can not fit within a long.   we build a hash map for UnsafeHashedRelation.  it's converted to BytesToBytesMap after serialization and deserialization. We should build a BytesToBytesMap directly to have better memory efficiency.\n\nIn order to do that.  BytesToBytesMap should support multiple (K. V) pair with the same K.   Location.putNewKey() is renamed to Location.append().  which could append multiple values for the same key (same Location). `Location.newValue()` is added to find the next value for the same key.\n\n## How was this patch tested?\n\nExisting tests. Added benchmark for broadcast hash join with duplicated keys.\n\nAuthor: Davies Liu <davies@databricks.com>\n\nCloses #11870 from davies/map2.\n","date":"2016-03-29 04:07:32","modifiedFileCount":"3","status":"M","submitter":"Davies Liu"},{"authorTime":"2016-03-29 04:07:32","codes":[{"authorDate":"2018-09-01 16:25:29","commitOrder":8,"curCode":"  public void randomizedStressTest() {\n    final int size = 32768;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<>();\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, size, PAGE_SIZE_BYTES);\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(256) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.append(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), key.length));\n          Assert.assertTrue(\n            arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(\n          arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), loc.getKeyLength()));\n        Assert.assertTrue(\n          arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2018-09-01 16:25:29","endLine":433,"groupId":"10556","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"randomizedStressTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/53/a233f698c7a68745d3ba76267ed0dfcf8bcaf1.src","preCode":"  public void randomizedStressTest() {\n    final int size = 65536;\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<>();\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, size, PAGE_SIZE_BYTES);\n    try {\n      \r\n      for (int i = 0; i < size * 0.9; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(256) + 1);\n        final byte[] value = getRandomByteArray(rand.nextInt(512) + 1);\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.append(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), key.length));\n          Assert.assertTrue(\n            arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), value.length));\n        }\n      }\n\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(\n          arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), loc.getKeyLength()));\n        Assert.assertTrue(\n          arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"M"},{"authorDate":"2016-03-29 04:07:32","commitOrder":8,"curCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.append(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), key.length));\n          Assert.assertTrue(\n            arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(\n          arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), loc.getKeyLength()));\n        Assert.assertTrue(\n          arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","date":"2016-03-29 04:07:32","endLine":506,"groupId":"10556","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"randomizedTestWithRecordsLargerThanPageSize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/84/b82f5a4742cdce097e1e08d34d141ee6cbe559.src","preCode":"  public void randomizedTestWithRecordsLargerThanPageSize() {\n    final long pageSizeBytes = 128;\n    final BytesToBytesMap map = new BytesToBytesMap(taskMemoryManager, 64, pageSizeBytes);\n    \r\n    \r\n    final Map<ByteBuffer, byte[]> expected = new HashMap<>();\n    try {\n      for (int i = 0; i < 1000; i++) {\n        final byte[] key = getRandomByteArray(rand.nextInt(128));\n        final byte[] value = getRandomByteArray(rand.nextInt(128));\n        if (!expected.containsKey(ByteBuffer.wrap(key))) {\n          expected.put(ByteBuffer.wrap(key), value);\n          final BytesToBytesMap.Location loc = map.lookup(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length\n          );\n          Assert.assertFalse(loc.isDefined());\n          Assert.assertTrue(loc.append(\n            key,\n            Platform.BYTE_ARRAY_OFFSET,\n            key.length,\n            value,\n            Platform.BYTE_ARRAY_OFFSET,\n            value.length\n          ));\n          \r\n          \r\n          Assert.assertTrue(loc.isDefined());\n          Assert.assertEquals(key.length, loc.getKeyLength());\n          Assert.assertEquals(value.length, loc.getValueLength());\n          Assert.assertTrue(arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), key.length));\n          Assert.assertTrue(\n            arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), value.length));\n        }\n      }\n      for (Map.Entry<ByteBuffer, byte[]> entry : expected.entrySet()) {\n        final byte[] key = JavaUtils.bufferToArray(entry.getKey());\n        final byte[] value = entry.getValue();\n        final BytesToBytesMap.Location loc =\n          map.lookup(key, Platform.BYTE_ARRAY_OFFSET, key.length);\n        Assert.assertTrue(loc.isDefined());\n        Assert.assertTrue(\n          arrayEquals(key, loc.getKeyBase(), loc.getKeyOffset(), loc.getKeyLength()));\n        Assert.assertTrue(\n          arrayEquals(value, loc.getValueBase(), loc.getValueOffset(), loc.getValueLength()));\n      }\n    } finally {\n      map.free();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/spark/unsafe/map/AbstractBytesToBytesMapSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":456,"status":"N"}],"commitId":"7c36ee46d974021474d8098f87f70440a10319ee","commitMessage":"@@@[SPARK-25290][CORE][TEST] Reduce the size of acquired arrays to avoid OOM error\n\n## What changes were proposed in this pull request?\n\n`BytesToBytesMapOnHeapSuite`.`randomizedStressTest` caused `OutOfMemoryError` on several test runs. Seems better to reduce memory usage in this test.\n\n## How was this patch tested?\n\nUnit tests.\n\nCloses #22297 from viirya/SPARK-25290.\n\nAuthored-by: Liang-Chi Hsieh <viirya@gmail.com>\nSigned-off-by: Wenchen Fan <wenchen@databricks.com>\n","date":"2018-09-01 16:25:29","modifiedFileCount":"1","status":"M","submitter":"Liang-Chi Hsieh"}]
