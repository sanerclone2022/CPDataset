[{"authorTime":"2017-08-09 05:33:27","codes":[{"authorDate":"2017-08-09 05:33:27","commitOrder":1,"curCode":"  public void testMultipleObjectWriteReadDelete() throws Exception {\n    CustomType1 t1 = new CustomType1();\n    t1.key = \"key1\";\n    t1.id = \"id\";\n    t1.name = \"name1\";\n    t1.child = \"child1\";\n\n    CustomType1 t2 = new CustomType1();\n    t2.key = \"key2\";\n    t2.id = \"id\";\n    t2.name = \"name2\";\n    t2.child = \"child2\";\n\n    db.write(t1);\n    db.write(t2);\n\n    assertEquals(t1, db.read(t1.getClass(), t1.key));\n    assertEquals(t2, db.read(t2.getClass(), t2.key));\n    assertEquals(2L, db.count(t1.getClass()));\n\n    \r\n    assertEquals(2, db.count(t1.getClass(), \"id\", t1.id));\n\n    \r\n    \r\n    db.delete(t1.getClass(), t1.key);\n\n    \r\n    assertEquals(1, db.count(t2.getClass(), \"id\", t2.id));\n\n    \r\n    db.delete(t2.getClass(), t2.key);\n    assertEquals(0, countKeys(t2.getClass()));\n  }\n","date":"2017-08-09 05:33:27","endLine":141,"groupId":"1777","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleObjectWriteReadDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/2b/07d249d2022cf95d317d2a2512d72bacf48646.src","preCode":"  public void testMultipleObjectWriteReadDelete() throws Exception {\n    CustomType1 t1 = new CustomType1();\n    t1.key = \"key1\";\n    t1.id = \"id\";\n    t1.name = \"name1\";\n    t1.child = \"child1\";\n\n    CustomType1 t2 = new CustomType1();\n    t2.key = \"key2\";\n    t2.id = \"id\";\n    t2.name = \"name2\";\n    t2.child = \"child2\";\n\n    db.write(t1);\n    db.write(t2);\n\n    assertEquals(t1, db.read(t1.getClass(), t1.key));\n    assertEquals(t2, db.read(t2.getClass(), t2.key));\n    assertEquals(2L, db.count(t1.getClass()));\n\n    \r\n    assertEquals(2, db.count(t1.getClass(), \"id\", t1.id));\n\n    \r\n    \r\n    db.delete(t1.getClass(), t1.key);\n\n    \r\n    assertEquals(1, db.count(t2.getClass(), \"id\", t2.id));\n\n    \r\n    db.delete(t2.getClass(), t2.key);\n    assertEquals(0, countKeys(t2.getClass()));\n  }\n","realPath":"common/kvstore/src/test/java/org/apache/spark/util/kvstore/LevelDBSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"},{"authorDate":"2017-08-09 05:33:27","commitOrder":1,"curCode":"  public void testMultipleTypesWriteReadDelete() throws Exception {\n    CustomType1 t1 = new CustomType1();\n    t1.key = \"1\";\n    t1.id = \"id\";\n    t1.name = \"name1\";\n    t1.child = \"child1\";\n\n    IntKeyType t2 = new IntKeyType();\n    t2.key = 2;\n    t2.id = \"2\";\n    t2.values = Arrays.asList(\"value1\", \"value2\");\n\n    ArrayKeyIndexType t3 = new ArrayKeyIndexType();\n    t3.key = new int[] { 42, 84 };\n    t3.id = new String[] { \"id1\", \"id2\" };\n\n    db.write(t1);\n    db.write(t2);\n    db.write(t3);\n\n    assertEquals(t1, db.read(t1.getClass(), t1.key));\n    assertEquals(t2, db.read(t2.getClass(), t2.key));\n    assertEquals(t3, db.read(t3.getClass(), t3.key));\n\n    \r\n    assertEquals(1, db.count(t1.getClass(), \"id\", t1.id));\n    assertEquals(1, db.count(t2.getClass(), \"id\", t2.id));\n    assertEquals(1, db.count(t3.getClass(), \"id\", t3.id));\n\n    \r\n    db.delete(t1.getClass(), t1.key);\n    assertEquals(0, countKeys(t1.getClass()));\n    assertEquals(1, db.count(t2.getClass(), \"id\", t2.id));\n    assertEquals(1, db.count(t3.getClass(), \"id\", t3.id));\n\n    \r\n    db.delete(t2.getClass(), t2.key);\n    assertEquals(0, countKeys(t2.getClass()));\n\n    db.delete(t3.getClass(), t3.key);\n    assertEquals(0, countKeys(t3.getClass()));\n  }\n","date":"2017-08-09 05:33:27","endLine":185,"groupId":"1777","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleTypesWriteReadDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/2b/07d249d2022cf95d317d2a2512d72bacf48646.src","preCode":"  public void testMultipleTypesWriteReadDelete() throws Exception {\n    CustomType1 t1 = new CustomType1();\n    t1.key = \"1\";\n    t1.id = \"id\";\n    t1.name = \"name1\";\n    t1.child = \"child1\";\n\n    IntKeyType t2 = new IntKeyType();\n    t2.key = 2;\n    t2.id = \"2\";\n    t2.values = Arrays.asList(\"value1\", \"value2\");\n\n    ArrayKeyIndexType t3 = new ArrayKeyIndexType();\n    t3.key = new int[] { 42, 84 };\n    t3.id = new String[] { \"id1\", \"id2\" };\n\n    db.write(t1);\n    db.write(t2);\n    db.write(t3);\n\n    assertEquals(t1, db.read(t1.getClass(), t1.key));\n    assertEquals(t2, db.read(t2.getClass(), t2.key));\n    assertEquals(t3, db.read(t3.getClass(), t3.key));\n\n    \r\n    assertEquals(1, db.count(t1.getClass(), \"id\", t1.id));\n    assertEquals(1, db.count(t2.getClass(), \"id\", t2.id));\n    assertEquals(1, db.count(t3.getClass(), \"id\", t3.id));\n\n    \r\n    db.delete(t1.getClass(), t1.key);\n    assertEquals(0, countKeys(t1.getClass()));\n    assertEquals(1, db.count(t2.getClass(), \"id\", t2.id));\n    assertEquals(1, db.count(t3.getClass(), \"id\", t3.id));\n\n    \r\n    db.delete(t2.getClass(), t2.key);\n    assertEquals(0, countKeys(t2.getClass()));\n\n    db.delete(t3.getClass(), t3.key);\n    assertEquals(0, countKeys(t3.getClass()));\n  }\n","realPath":"common/kvstore/src/test/java/org/apache/spark/util/kvstore/LevelDBSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"}],"commitId":"2c1bfb497f31ff402796b57b617a9075c6044e4d","commitMessage":"@@@[SPARK-21671][CORE] Move kvstore to \"util\" sub-package.  add private annotation.\n\nAuthor: Marcelo Vanzin <vanzin@cloudera.com>\n\nCloses #18886 from vanzin/SPARK-21671.\n","date":"2017-08-09 05:33:27","modifiedFileCount":"0","status":"B","submitter":"Marcelo Vanzin"},{"authorTime":"2018-01-20 03:32:20","codes":[{"authorDate":"2018-01-20 03:32:20","commitOrder":2,"curCode":"  public void testMultipleObjectWriteReadDelete() throws Exception {\n    CustomType1 t1 = createCustomType1(1);\n    CustomType1 t2 = createCustomType1(2);\n    t2.id = t1.id;\n\n    db.write(t1);\n    db.write(t2);\n\n    assertEquals(t1, db.read(t1.getClass(), t1.key));\n    assertEquals(t2, db.read(t2.getClass(), t2.key));\n    assertEquals(2L, db.count(t1.getClass()));\n\n    \r\n    assertEquals(2, db.count(t1.getClass(), \"id\", t1.id));\n\n    \r\n    \r\n    db.delete(t1.getClass(), t1.key);\n\n    \r\n    assertEquals(1, db.count(t2.getClass(), \"id\", t2.id));\n\n    \r\n    db.delete(t2.getClass(), t2.key);\n    assertEquals(0, countKeys(t2.getClass()));\n  }\n","date":"2018-01-20 03:32:20","endLine":131,"groupId":"1013","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleObjectWriteReadDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b8/123ac81d29a8b8e696656284c212400c8c3bda.src","preCode":"  public void testMultipleObjectWriteReadDelete() throws Exception {\n    CustomType1 t1 = new CustomType1();\n    t1.key = \"key1\";\n    t1.id = \"id\";\n    t1.name = \"name1\";\n    t1.child = \"child1\";\n\n    CustomType1 t2 = new CustomType1();\n    t2.key = \"key2\";\n    t2.id = \"id\";\n    t2.name = \"name2\";\n    t2.child = \"child2\";\n\n    db.write(t1);\n    db.write(t2);\n\n    assertEquals(t1, db.read(t1.getClass(), t1.key));\n    assertEquals(t2, db.read(t2.getClass(), t2.key));\n    assertEquals(2L, db.count(t1.getClass()));\n\n    \r\n    assertEquals(2, db.count(t1.getClass(), \"id\", t1.id));\n\n    \r\n    \r\n    db.delete(t1.getClass(), t1.key);\n\n    \r\n    assertEquals(1, db.count(t2.getClass(), \"id\", t2.id));\n\n    \r\n    db.delete(t2.getClass(), t2.key);\n    assertEquals(0, countKeys(t2.getClass()));\n  }\n","realPath":"common/kvstore/src/test/java/org/apache/spark/util/kvstore/LevelDBSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2018-01-20 03:32:20","commitOrder":2,"curCode":"  public void testMultipleTypesWriteReadDelete() throws Exception {\n    CustomType1 t1 = createCustomType1(1);\n\n    IntKeyType t2 = new IntKeyType();\n    t2.key = 2;\n    t2.id = \"2\";\n    t2.values = Arrays.asList(\"value1\", \"value2\");\n\n    ArrayKeyIndexType t3 = new ArrayKeyIndexType();\n    t3.key = new int[] { 42, 84 };\n    t3.id = new String[] { \"id1\", \"id2\" };\n\n    db.write(t1);\n    db.write(t2);\n    db.write(t3);\n\n    assertEquals(t1, db.read(t1.getClass(), t1.key));\n    assertEquals(t2, db.read(t2.getClass(), t2.key));\n    assertEquals(t3, db.read(t3.getClass(), t3.key));\n\n    \r\n    assertEquals(1, db.count(t1.getClass(), \"id\", t1.id));\n    assertEquals(1, db.count(t2.getClass(), \"id\", t2.id));\n    assertEquals(1, db.count(t3.getClass(), \"id\", t3.id));\n\n    \r\n    db.delete(t1.getClass(), t1.key);\n    assertEquals(0, countKeys(t1.getClass()));\n    assertEquals(1, db.count(t2.getClass(), \"id\", t2.id));\n    assertEquals(1, db.count(t3.getClass(), \"id\", t3.id));\n\n    \r\n    db.delete(t2.getClass(), t2.key);\n    assertEquals(0, countKeys(t2.getClass()));\n\n    db.delete(t3.getClass(), t3.key);\n    assertEquals(0, countKeys(t3.getClass()));\n  }\n","date":"2018-01-20 03:32:20","endLine":171,"groupId":"1013","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleTypesWriteReadDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b8/123ac81d29a8b8e696656284c212400c8c3bda.src","preCode":"  public void testMultipleTypesWriteReadDelete() throws Exception {\n    CustomType1 t1 = new CustomType1();\n    t1.key = \"1\";\n    t1.id = \"id\";\n    t1.name = \"name1\";\n    t1.child = \"child1\";\n\n    IntKeyType t2 = new IntKeyType();\n    t2.key = 2;\n    t2.id = \"2\";\n    t2.values = Arrays.asList(\"value1\", \"value2\");\n\n    ArrayKeyIndexType t3 = new ArrayKeyIndexType();\n    t3.key = new int[] { 42, 84 };\n    t3.id = new String[] { \"id1\", \"id2\" };\n\n    db.write(t1);\n    db.write(t2);\n    db.write(t3);\n\n    assertEquals(t1, db.read(t1.getClass(), t1.key));\n    assertEquals(t2, db.read(t2.getClass(), t2.key));\n    assertEquals(t3, db.read(t3.getClass(), t3.key));\n\n    \r\n    assertEquals(1, db.count(t1.getClass(), \"id\", t1.id));\n    assertEquals(1, db.count(t2.getClass(), \"id\", t2.id));\n    assertEquals(1, db.count(t3.getClass(), \"id\", t3.id));\n\n    \r\n    db.delete(t1.getClass(), t1.key);\n    assertEquals(0, countKeys(t1.getClass()));\n    assertEquals(1, db.count(t2.getClass(), \"id\", t2.id));\n    assertEquals(1, db.count(t3.getClass(), \"id\", t3.id));\n\n    \r\n    db.delete(t2.getClass(), t2.key);\n    assertEquals(0, countKeys(t2.getClass()));\n\n    db.delete(t3.getClass(), t3.key);\n    assertEquals(0, countKeys(t3.getClass()));\n  }\n","realPath":"common/kvstore/src/test/java/org/apache/spark/util/kvstore/LevelDBSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"aa3a1276f9e23ffbb093d00743e63cd4369f9f57","commitMessage":"@@@[SPARK-23103][CORE] Ensure correct sort order for negative values in LevelDB.\n\nThe code was sorting \"0\" as \"less than\" negative values.  which is a little\nwrong. Fix is simple.  most of the changes are the added test and related\ncleanup.\n\nAuthor: Marcelo Vanzin <vanzin@cloudera.com>\n\nCloses #20284 from vanzin/SPARK-23103.\n","date":"2018-01-20 03:32:20","modifiedFileCount":"3","status":"M","submitter":"Marcelo Vanzin"}]
