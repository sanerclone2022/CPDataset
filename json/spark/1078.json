[{"authorTime":"2016-02-29 09:25:07","codes":[{"authorDate":"2016-02-29 09:25:07","commitOrder":1,"curCode":"  private void assertBuffersEqual(ManagedBuffer buffer0, ManagedBuffer buffer1) throws Exception {\n    ByteBuffer nio0 = buffer0.nioByteBuffer();\n    ByteBuffer nio1 = buffer1.nioByteBuffer();\n\n    int len = nio0.remaining();\n    assertEquals(nio0.remaining(), nio1.remaining());\n    for (int i = 0; i < len; i ++) {\n      assertEquals(nio0.get(), nio1.get());\n    }\n  }\n","date":"2016-02-29 09:25:07","endLine":243,"groupId":"3071","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuffersEqual","params":"(ManagedBufferbuffer0@ManagedBufferbuffer1)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/70/c849d60e0a6c8bc7809c9ff30b8d8ad9df389f.src","preCode":"  private void assertBuffersEqual(ManagedBuffer buffer0, ManagedBuffer buffer1) throws Exception {\n    ByteBuffer nio0 = buffer0.nioByteBuffer();\n    ByteBuffer nio1 = buffer1.nioByteBuffer();\n\n    int len = nio0.remaining();\n    assertEquals(nio0.remaining(), nio1.remaining());\n    for (int i = 0; i < len; i ++) {\n      assertEquals(nio0.get(), nio1.get());\n    }\n  }\n","realPath":"common/network-common/src/test/java/org/apache/spark/network/ChunkFetchIntegrationSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"B"},{"authorDate":"2016-02-29 09:25:07","commitOrder":1,"curCode":"  private void assertBuffersEqual(ManagedBuffer buffer0, ManagedBuffer buffer1) throws Exception {\n    ByteBuffer nio0 = buffer0.nioByteBuffer();\n    ByteBuffer nio1 = buffer1.nioByteBuffer();\n\n    int len = nio0.remaining();\n    assertEquals(nio0.remaining(), nio1.remaining());\n    for (int i = 0; i < len; i ++) {\n      assertEquals(nio0.get(), nio1.get());\n    }\n  }\n","date":"2016-02-29 09:25:07","endLine":300,"groupId":"3071","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuffersEqual","params":"(ManagedBufferbuffer0@ManagedBufferbuffer1)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/5e/706bf4016936aff3776270221ca5ed16984563.src","preCode":"  private void assertBuffersEqual(ManagedBuffer buffer0, ManagedBuffer buffer1) throws Exception {\n    ByteBuffer nio0 = buffer0.nioByteBuffer();\n    ByteBuffer nio1 = buffer1.nioByteBuffer();\n\n    int len = nio0.remaining();\n    assertEquals(nio0.remaining(), nio1.remaining());\n    for (int i = 0; i < len; i ++) {\n      assertEquals(nio0.get(), nio1.get());\n    }\n  }\n","realPath":"common/network-shuffle/src/test/java/org/apache/spark/network/shuffle/ExternalShuffleIntegrationSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"B"}],"commitId":"9e01dcc6446f8648e61062f8afe62589b9d4b5ab","commitMessage":"@@@[SPARK-13529][BUILD] Move network/* modules into common/network-*\n\n## What changes were proposed in this pull request?\nAs the title says.  this moves the three modules currently in network/ into common/network-*. This removes one top level.  non-user-facing folder.\n\n## How was this patch tested?\nCompilation and existing tests. We should run both SBT and Maven.\n\nAuthor: Reynold Xin <rxin@databricks.com>\n\nCloses #11409 from rxin/SPARK-13529.\n","date":"2016-02-29 09:25:07","modifiedFileCount":"1","status":"B","submitter":"Reynold Xin"},{"authorTime":"2017-02-20 01:42:50","codes":[{"authorDate":"2017-02-20 01:42:50","commitOrder":2,"curCode":"  private static void assertBuffersEqual(ManagedBuffer buffer0, ManagedBuffer buffer1)\n      throws Exception {\n    ByteBuffer nio0 = buffer0.nioByteBuffer();\n    ByteBuffer nio1 = buffer1.nioByteBuffer();\n\n    int len = nio0.remaining();\n    assertEquals(nio0.remaining(), nio1.remaining());\n    for (int i = 0; i < len; i ++) {\n      assertEquals(nio0.get(), nio1.get());\n    }\n  }\n","date":"2017-02-20 01:42:50","endLine":242,"groupId":"1078","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertBuffersEqual","params":"(ManagedBufferbuffer0@ManagedBufferbuffer1)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/82/4482af08dd4619a8b304c63e8828beb244aaa4.src","preCode":"  private void assertBuffersEqual(ManagedBuffer buffer0, ManagedBuffer buffer1) throws Exception {\n    ByteBuffer nio0 = buffer0.nioByteBuffer();\n    ByteBuffer nio1 = buffer1.nioByteBuffer();\n\n    int len = nio0.remaining();\n    assertEquals(nio0.remaining(), nio1.remaining());\n    for (int i = 0; i < len; i ++) {\n      assertEquals(nio0.get(), nio1.get());\n    }\n  }\n","realPath":"common/network-common/src/test/java/org/apache/spark/network/ChunkFetchIntegrationSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"},{"authorDate":"2017-02-20 01:42:50","commitOrder":2,"curCode":"  private static void assertBuffersEqual(ManagedBuffer buffer0, ManagedBuffer buffer1)\n      throws Exception {\n    ByteBuffer nio0 = buffer0.nioByteBuffer();\n    ByteBuffer nio1 = buffer1.nioByteBuffer();\n\n    int len = nio0.remaining();\n    assertEquals(nio0.remaining(), nio1.remaining());\n    for (int i = 0; i < len; i ++) {\n      assertEquals(nio0.get(), nio1.get());\n    }\n  }\n","date":"2017-02-20 01:42:50","endLine":270,"groupId":"1078","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertBuffersEqual","params":"(ManagedBufferbuffer0@ManagedBufferbuffer1)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b8/ae04eefb97284e77763a51e67b68ccdbcfa50e.src","preCode":"  private void assertBuffersEqual(ManagedBuffer buffer0, ManagedBuffer buffer1) throws Exception {\n    ByteBuffer nio0 = buffer0.nioByteBuffer();\n    ByteBuffer nio1 = buffer1.nioByteBuffer();\n\n    int len = nio0.remaining();\n    assertEquals(nio0.remaining(), nio1.remaining());\n    for (int i = 0; i < len; i ++) {\n      assertEquals(nio0.get(), nio1.get());\n    }\n  }\n","realPath":"common/network-shuffle/src/test/java/org/apache/spark/network/shuffle/ExternalShuffleIntegrationSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"1487c9af20a333ead55955acf4c0aa323bea0d07","commitMessage":"@@@[SPARK-19534][TESTS] Convert Java tests to use lambdas.  Java 8 features\n\n## What changes were proposed in this pull request?\n\nConvert tests to use Java 8 lambdas.  and modest related fixes to surrounding code.\n\n## How was this patch tested?\n\nJenkins tests\n\nAuthor: Sean Owen <sowen@cloudera.com>\n\nCloses #16964 from srowen/SPARK-19534.\n","date":"2017-02-20 01:42:50","modifiedFileCount":"45","status":"M","submitter":"Sean Owen"}]
