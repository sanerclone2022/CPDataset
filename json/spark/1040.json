[{"authorTime":"2016-03-24 03:51:01","codes":[{"authorDate":"2016-10-05 09:59:31","commitOrder":2,"curCode":"  public void randomizedStressTestPaddedStrings() {\n    int size = 64000;\n    \r\n    Set<Integer> hashcodes = new HashSet<>();\n    for (int i = 0; i < size; i++) {\n      int byteArrSize = 8;\n      byte[] strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8);\n      byte[] paddedBytes = new byte[byteArrSize];\n      System.arraycopy(strBytes, 0, paddedBytes, 0, strBytes.length);\n\n      Assert.assertEquals(\n          HiveHasher.hashUnsafeBytes(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize),\n          HiveHasher.hashUnsafeBytes(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n\n      hashcodes.add(HiveHasher.hashUnsafeBytes(\n          paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n    }\n\n    \r\n    Assert.assertTrue(hashcodes.size() > size * 0.95);\n  }\n","date":"2016-10-05 09:59:31","endLine":127,"groupId":"3400","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"randomizedStressTestPaddedStrings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/67/a5eb0c7fe8f9f25fcee383f95b5ae27975d3a6.src","preCode":"  public void randomizedStressTestPaddedStrings() {\n    int size = 64000;\n    \r\n    Set<Integer> hashcodes = new HashSet<>();\n    for (int i = 0; i < size; i++) {\n      int byteArrSize = 8;\n      byte[] strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8);\n      byte[] paddedBytes = new byte[byteArrSize];\n      System.arraycopy(strBytes, 0, paddedBytes, 0, strBytes.length);\n\n      Assert.assertEquals(\n          HiveHasher.hashUnsafeBytes(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize),\n          HiveHasher.hashUnsafeBytes(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n\n      hashcodes.add(HiveHasher.hashUnsafeBytes(\n          paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n    }\n\n    \r\n    Assert.assertTrue(hashcodes.size() > size * 0.95);\n  }\n","realPath":"sql/catalyst/src/test/java/org/apache/spark/sql/catalyst/expressions/HiveHasherSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"},{"authorDate":"2016-03-24 03:51:01","commitOrder":2,"curCode":"  public void randomizedStressTestPaddedStrings() {\n    int size = 64000;\n    \r\n    Set<Long> hashcodes = new HashSet<>();\n    for (int i = 0; i < size; i++) {\n      int byteArrSize = 8;\n      byte[] strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8);\n      byte[] paddedBytes = new byte[byteArrSize];\n      System.arraycopy(strBytes, 0, paddedBytes, 0, strBytes.length);\n\n      Assert.assertEquals(\n              hasher.hashUnsafeWords(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize),\n              hasher.hashUnsafeWords(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n\n      hashcodes.add(hasher.hashUnsafeWords(\n              paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n    }\n\n    \r\n    Assert.assertTrue(hashcodes.size() > size * 0.95d);\n  }\n","date":"2016-03-24 03:51:01","endLine":165,"groupId":"3417","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"randomizedStressTestPaddedStrings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/71/1887f02832a252a2fcaa212241da7cf26f51b4.src","preCode":"  public void randomizedStressTestPaddedStrings() {\n    int size = 64000;\n    \r\n    Set<Long> hashcodes = new HashSet<>();\n    for (int i = 0; i < size; i++) {\n      int byteArrSize = 8;\n      byte[] strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8);\n      byte[] paddedBytes = new byte[byteArrSize];\n      System.arraycopy(strBytes, 0, paddedBytes, 0, strBytes.length);\n\n      Assert.assertEquals(\n              hasher.hashUnsafeWords(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize),\n              hasher.hashUnsafeWords(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n\n      hashcodes.add(hasher.hashUnsafeWords(\n              paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n    }\n\n    \r\n    Assert.assertTrue(hashcodes.size() > size * 0.95d);\n  }\n","realPath":"sql/catalyst/src/test/java/org/apache/spark/sql/catalyst/expressions/XXH64Suite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"NB"}],"commitId":"a99743d053e84f695dc3034550939555297b0a05","commitMessage":"@@@[SPARK-17495][SQL] Add Hash capability semantically equivalent to Hive's\n\n## What changes were proposed in this pull request?\n\nJira : https://issues.apache.org/jira/browse/SPARK-17495\n\nSpark internally uses Murmur3Hash for partitioning. This is different from the one used by Hive. For queries which use bucketing this leads to different results if one tries the same query on both engines. For us.  we want users to have backward compatibility to that one can switch parts of applications across the engines without observing regressions.\n\nThis PR includes `HiveHash`.  `HiveHashFunction`.  `HiveHasher` which mimics Hive's hashing at https://github.com/apache/hive/blob/master/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorUtils.java#L638\n\nI am intentionally not introducing any usages of this hash function in rest of the code to keep this PR small. My eventual goal is to have Hive bucketing support in Spark. Once this PR gets in.  I will make hash function pluggable in relevant areas (eg. `HashPartitioning`'s `partitionIdExpression` has Murmur3 hardcoded : https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/plans/physical/partitioning.scala#L265)\n\n## How was this patch tested?\n\nAdded `HiveHashSuite`\n\nAuthor: Tejas Patil <tejasp@fb.com>\n\nCloses #15047 from tejasapatil/SPARK-17495_hive_hash.\n","date":"2016-10-05 09:59:31","modifiedFileCount":"0","status":"M","submitter":"Tejas Patil"},{"authorTime":"2018-04-06 10:13:59","codes":[{"authorDate":"2018-04-06 10:13:59","commitOrder":3,"curCode":"  public void randomizedStressTestPaddedStrings() {\n    int size = 64000;\n    \r\n    Set<Integer> hashcodes = new HashSet<>();\n    for (int i = 0; i < size; i++) {\n      int byteArrSize = 8;\n      byte[] strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8);\n      byte[] paddedBytes = new byte[byteArrSize];\n      System.arraycopy(strBytes, 0, paddedBytes, 0, strBytes.length);\n      MemoryBlock mb = ByteArrayMemoryBlock.fromArray(paddedBytes);\n\n      Assert.assertEquals(\n          HiveHasher.hashUnsafeBytesBlock(mb),\n          HiveHasher.hashUnsafeBytesBlock(mb));\n\n      hashcodes.add(HiveHasher.hashUnsafeBytesBlock(mb));\n    }\n\n    \r\n    Assert.assertTrue(hashcodes.size() > size * 0.95);\n  }\n","date":"2018-04-06 10:13:59","endLine":128,"groupId":"2122","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"randomizedStressTestPaddedStrings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/8f/fc1d7c24d61b98c96b5f898a9a5ccd399fabfd.src","preCode":"  public void randomizedStressTestPaddedStrings() {\n    int size = 64000;\n    \r\n    Set<Integer> hashcodes = new HashSet<>();\n    for (int i = 0; i < size; i++) {\n      int byteArrSize = 8;\n      byte[] strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8);\n      byte[] paddedBytes = new byte[byteArrSize];\n      System.arraycopy(strBytes, 0, paddedBytes, 0, strBytes.length);\n\n      Assert.assertEquals(\n          HiveHasher.hashUnsafeBytes(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize),\n          HiveHasher.hashUnsafeBytes(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n\n      hashcodes.add(HiveHasher.hashUnsafeBytes(\n          paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n    }\n\n    \r\n    Assert.assertTrue(hashcodes.size() > size * 0.95);\n  }\n","realPath":"sql/catalyst/src/test/java/org/apache/spark/sql/catalyst/expressions/HiveHasherSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2018-04-06 10:13:59","commitOrder":3,"curCode":"  public void randomizedStressTestPaddedStrings() {\n    int size = 64000;\n    \r\n    Set<Long> hashcodes = new HashSet<>();\n    for (int i = 0; i < size; i++) {\n      int byteArrSize = 8;\n      byte[] strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8);\n      byte[] paddedBytes = new byte[byteArrSize];\n      System.arraycopy(strBytes, 0, paddedBytes, 0, strBytes.length);\n      MemoryBlock mb = ByteArrayMemoryBlock.fromArray(paddedBytes);\n\n      Assert.assertEquals(\n              hasher.hashUnsafeWordsBlock(mb),\n              hasher.hashUnsafeWordsBlock(mb));\n\n      hashcodes.add(hasher.hashUnsafeWordsBlock(mb));\n    }\n\n    \r\n    Assert.assertTrue(hashcodes.size() > size * 0.95d);\n  }\n","date":"2018-04-06 10:13:59","endLine":181,"groupId":"2122","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"randomizedStressTestPaddedStrings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/cd/8bce623c5dff66242b14f5ed806d6dba9974db.src","preCode":"  public void randomizedStressTestPaddedStrings() {\n    int size = 64000;\n    \r\n    Set<Long> hashcodes = new HashSet<>();\n    for (int i = 0; i < size; i++) {\n      int byteArrSize = 8;\n      byte[] strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8);\n      byte[] paddedBytes = new byte[byteArrSize];\n      System.arraycopy(strBytes, 0, paddedBytes, 0, strBytes.length);\n\n      Assert.assertEquals(\n              hasher.hashUnsafeWords(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize),\n              hasher.hashUnsafeWords(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n\n      hashcodes.add(hasher.hashUnsafeWords(\n              paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n    }\n\n    \r\n    Assert.assertTrue(hashcodes.size() > size * 0.95d);\n  }\n","realPath":"sql/catalyst/src/test/java/org/apache/spark/sql/catalyst/expressions/XXH64Suite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"4807d381bb113a5c61e6dad88202f23a8b6dd141","commitMessage":"@@@[SPARK-10399][CORE][SQL] Introduce multiple MemoryBlocks to choose several types of memory block\n\n## What changes were proposed in this pull request?\n\nThis PR allows us to use one of several types of `MemoryBlock`.  such as byte array.  int array.  long array.  or `java.nio.DirectByteBuffer`. To use `java.nio.DirectByteBuffer` allows to have off heap memory which is automatically deallocated by JVM. `MemoryBlock`  class has primitive accessors like `Platform.getInt()`.  `Platform.putint()`.  or `Platform.copyMemory()`.\n\nThis PR uses `MemoryBlock` for `OffHeapColumnVector`.  `UTF8String`.  and other places. This PR can improve performance of operations involving memory accesses (e.g. `UTF8String.trim`) by 1.8x.\n\nFor now.  this PR does not use `MemoryBlock` for `BufferHolder` based on cloud-fan's [suggestion](https://github.com/apache/spark/pull/11494#issuecomment-309694290).\n\nSince this PR is a successor of #11494.  close #11494. Many codes were ported from #11494. Many efforts were put here. **I think this PR should credit to yzotov.**\n\nThis PR can achieve **1.1-1.4x performance improvements** for  operations in `UTF8String` or `Murmur3_x86_32`. Other operations are almost comparable performances.\n\nWithout this PR\n```\nOpenJDK 64-Bit Server VM 1.8.0_121-8u121-b13-0ubuntu1.16.04.2-b13 on Linux 4.4.0-22-generic\nIntel(R) Xeon(R) CPU E5-2667 v3  3.20GHz\nOpenJDK 64-Bit Server VM 1.8.0_121-8u121-b13-0ubuntu1.16.04.2-b13 on Linux 4.4.0-22-generic\nIntel(R) Xeon(R) CPU E5-2667 v3  3.20GHz\nHash byte arrays with length 268435487:  Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n------------------------------------------------------------------------------------------------\nMurmur3_x86_32                                 526 /  536          0.0   131399881.5       1.0X\n\nUTF8String benchmark:                    Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n------------------------------------------------------------------------------------------------\nhashCode                                       525 /  552       1022.6           1.0       1.0X\nsubstring                                      414 /  423       1298.0           0.8       1.3X\n```\n\nWith this PR\n```\nOpenJDK 64-Bit Server VM 1.8.0_121-8u121-b13-0ubuntu1.16.04.2-b13 on Linux 4.4.0-22-generic\nIntel(R) Xeon(R) CPU E5-2667 v3  3.20GHz\nHash byte arrays with length 268435487:  Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n------------------------------------------------------------------------------------------------\nMurmur3_x86_32                                 474 /  488          0.0   118552232.0       1.0X\n\nUTF8String benchmark:                    Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n------------------------------------------------------------------------------------------------\nhashCode                                       476 /  480       1127.3           0.9       1.0X\nsubstring                                      287 /  291       1869.9           0.5       1.7X\n```\n\nBenchmark program\n```\ntest(\"benchmark Murmur3_x86_32\") {\n  val length = 8192 * 32768 + 31\n  val seed = 42L\n  val iters = 1 << 2\n  val random = new Random(seed)\n  val arrays = Array.fill[MemoryBlock](numArrays) {\n    val bytes = new Array[Byte](length)\n    random.nextBytes(bytes)\n    new ByteArrayMemoryBlock(bytes.  Platform.BYTE_ARRAY_OFFSET.  length)\n  }\n\n  val benchmark = new Benchmark(\"Hash byte arrays with length \" + length. \n    iters * numArrays.  minNumIters = 20)\n  benchmark.addCase(\"HiveHasher\") { _: Int =>\n    var sum = 0L\n    for (_ <- 0L until iters) {\n      sum += HiveHasher.hashUnsafeBytesBlock(\n        arrays(i).  Platform.BYTE_ARRAY_OFFSET.  length)\n    }\n  }\n  benchmark.run()\n}\n\ntest(\"benchmark UTF8String\") {\n  val N = 512 * 1024 * 1024\n  val iters = 2\n  val benchmark = new Benchmark(\"UTF8String benchmark\".  N.  minNumIters = 20)\n  val str0 = new java.io.StringWriter() { { for (i <- 0 until N) { write(\" \") } } }.toString\n  val s0 = UTF8String.fromString(str0)\n  benchmark.addCase(\"hashCode\") { _: Int =>\n    var h: Int = 0\n    for (_ <- 0L until iters) { h += s0.hashCode }\n  }\n  benchmark.addCase(\"substring\") { _: Int =>\n    var s: UTF8String = null\n    for (_ <- 0L until iters) { s = s0.substring(N / 2 - 5.  N / 2 + 5) }\n  }\n  benchmark.run()\n}\n```\n\nI run [this benchmark program](https://gist.github.com/kiszk/94f75b506c93a663bbbc372ffe8f05de) using [the commit](https://github.com/apache/spark/pull/19222/commits/ee5a79861c18725fb1cd9b518cdfd2489c05b81d6). I got the following results:\n\n```\nOpenJDK 64-Bit Server VM 1.8.0_151-8u151-b12-0ubuntu0.16.04.2-b12 on Linux 4.4.0-66-generic\nIntel(R) Xeon(R) CPU E5-2667 v3  3.20GHz\nMemory access benchmarks:                Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n------------------------------------------------------------------------------------------------\nByteArrayMemoryBlock get/putInt()              220 /  221        609.3           1.6       1.0X\nPlatform get/putInt(byte[])                    220 /  236        610.9           1.6       1.0X\nPlatform get/putInt(Object)                    492 /  494        272.8           3.7       0.4X\nOnHeapMemoryBlock get/putLong()                322 /  323        416.5           2.4       0.7X\nlong[]                                         221 /  221        608.0           1.6       1.0X\nPlatform get/putLong(long[])                   321 /  321        418.7           2.4       0.7X\nPlatform get/putLong(Object)                   561 /  563        239.2           4.2       0.4X\n```\n\nI also run [this benchmark program](https://gist.github.com/kiszk/5fdb4e03733a5d110421177e289d1fb5) for comparing performance of `Platform.copyMemory()`.\n```\nOpenJDK 64-Bit Server VM 1.8.0_151-8u151-b12-0ubuntu0.16.04.2-b12 on Linux 4.4.0-66-generic\nIntel(R) Xeon(R) CPU E5-2667 v3  3.20GHz\nPlatform copyMemory:                     Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative\n------------------------------------------------------------------------------------------------\nObject to Object                              1961 / 1967          8.6         116.9       1.0X\nSystem.arraycopy Object to Object             1917 / 1921          8.8         114.3       1.0X\nbyte array to byte array                      1961 / 1968          8.6         116.9       1.0X\nSystem.arraycopy byte array to byte array      1909 / 1937          8.8         113.8       1.0X\nint array to int array                        1921 / 1990          8.7         114.5       1.0X\ndouble array to double array                  1918 / 1923          8.7         114.3       1.0X\nObject to byte array                          1961 / 1967          8.6         116.9       1.0X\nObject to short array                         1965 / 1972          8.5         117.1       1.0X\nObject to int array                           1910 / 1915          8.8         113.9       1.0X\nObject to float array                         1971 / 1978          8.5         117.5       1.0X\nObject to double array                        1919 / 1944          8.7         114.4       1.0X\nbyte array to Object                          1959 / 1967          8.6         116.8       1.0X\nint array to Object                           1961 / 1970          8.6         116.9       1.0X\ndouble array to Object                        1917 / 1924          8.8         114.3       1.0X\n```\n\nThese results show three facts:\n1. According to the second/third or sixth/seventh results in the first experiment.  if we use `Platform.get/putInt(Object)`.  we achieve more than 2x worse performance than `Platform.get/putInt(byte[])` with concrete type (i.e. `byte[]`).\n2. According to the second/third or fourth/fifth/sixth results in the first experiment.  the fastest way to access an array element on Java heap is `array[]`. **Cons of `array[]` is that it is not possible to support unaligned-8byte access.**\n3. According to the first/second/third or fourth/sixth/seventh results in the first experiment.  `getInt()/putInt() or getLong()/putLong()` in subclasses of `MemoryBlock` can achieve comparable performance to `Platform.get/putInt()` or `Platform.get/putLong()` with concrete type (second or sixth result). There is no overhead regarding virtual call.\n4. According to results in the second experiment.  for `Platform.copy()`.  to pass `Object` can achieve the same performance as to pass any type of primitive array as source or destination.\n5. According to second/fourth results in the second experiment.  `Platform.copy()` can achieve the same performance as `System.arrayCopy`. **It would be good to use `Platform.copy()` since `Platform.copy()` can take any types for src and dst.**\n\nWe are incrementally replace `Platform.get/putXXX` with `MemoryBlock.get/putXXX`. This is because we have two advantages.\n1) Achieve better performance due to having a concrete type for an array.\n2) Use simple OO design instead of passing `Object`\nIt is easy to use `MemoryBlock` in `InternalRow`.  `BufferHolder`.  `TaskMemoryManager`.  and others that are already abstracted. It is not easy to use `MemoryBlock` in utility classes related to hashing or others.\n\nOther candidates are\n- UnsafeRow.  UnsafeArrayData.  UnsafeMapData.  SpecificUnsafeRowJoiner\n- UTF8StringBuffer\n- BufferHolder\n- TaskMemoryManager\n- OnHeapColumnVector\n- BytesToBytesMap\n- CachedBatch\n- classes for hash\n- others.\n\n## How was this patch tested?\n\nAdded `UnsafeMemoryAllocator`\n\nAuthor: Kazuaki Ishizaki <ishizaki@jp.ibm.com>\n\nCloses #19222 from kiszk/SPARK-10399.\n","date":"2018-04-06 10:13:59","modifiedFileCount":"27","status":"M","submitter":"Kazuaki Ishizaki"},{"authorTime":"2018-09-09 21:25:19","codes":[{"authorDate":"2018-09-09 21:25:19","commitOrder":4,"curCode":"  public void randomizedStressTestPaddedStrings() {\n    int size = 64000;\n    \r\n    Set<Integer> hashcodes = new HashSet<>();\n    for (int i = 0; i < size; i++) {\n      int byteArrSize = 8;\n      byte[] strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8);\n      byte[] paddedBytes = new byte[byteArrSize];\n      System.arraycopy(strBytes, 0, paddedBytes, 0, strBytes.length);\n\n      Assert.assertEquals(\n          HiveHasher.hashUnsafeBytes(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize),\n          HiveHasher.hashUnsafeBytes(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n\n      hashcodes.add(HiveHasher.hashUnsafeBytes(\n          paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n    }\n\n    \r\n    Assert.assertTrue(hashcodes.size() > size * 0.95);\n  }\n","date":"2018-09-09 21:25:19","endLine":126,"groupId":"1040","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"randomizedStressTestPaddedStrings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b6/7c6f3e6e85e4e70a32844787374fed2a3024c7.src","preCode":"  public void randomizedStressTestPaddedStrings() {\n    int size = 64000;\n    \r\n    Set<Integer> hashcodes = new HashSet<>();\n    for (int i = 0; i < size; i++) {\n      int byteArrSize = 8;\n      byte[] strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8);\n      byte[] paddedBytes = new byte[byteArrSize];\n      System.arraycopy(strBytes, 0, paddedBytes, 0, strBytes.length);\n      MemoryBlock mb = ByteArrayMemoryBlock.fromArray(paddedBytes);\n\n      Assert.assertEquals(\n          HiveHasher.hashUnsafeBytesBlock(mb),\n          HiveHasher.hashUnsafeBytesBlock(mb));\n\n      hashcodes.add(HiveHasher.hashUnsafeBytesBlock(mb));\n    }\n\n    \r\n    Assert.assertTrue(hashcodes.size() > size * 0.95);\n  }\n","realPath":"sql/catalyst/src/test/java/org/apache/spark/sql/catalyst/expressions/HiveHasherSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2018-09-09 21:25:19","commitOrder":4,"curCode":"  public void randomizedStressTestPaddedStrings() {\n    int size = 64000;\n    \r\n    Set<Long> hashcodes = new HashSet<>();\n    for (int i = 0; i < size; i++) {\n      int byteArrSize = 8;\n      byte[] strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8);\n      byte[] paddedBytes = new byte[byteArrSize];\n      System.arraycopy(strBytes, 0, paddedBytes, 0, strBytes.length);\n\n      Assert.assertEquals(\n              hasher.hashUnsafeWords(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize),\n              hasher.hashUnsafeWords(paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n\n      hashcodes.add(hasher.hashUnsafeWords(\n              paddedBytes, Platform.BYTE_ARRAY_OFFSET, byteArrSize));\n    }\n\n    \r\n    Assert.assertTrue(hashcodes.size() > size * 0.95d);\n  }\n","date":"2018-09-09 21:25:19","endLine":179,"groupId":"1040","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"randomizedStressTestPaddedStrings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/1b/aee91b3439c1b718c845bc8edb87af7099710b.src","preCode":"  public void randomizedStressTestPaddedStrings() {\n    int size = 64000;\n    \r\n    Set<Long> hashcodes = new HashSet<>();\n    for (int i = 0; i < size; i++) {\n      int byteArrSize = 8;\n      byte[] strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8);\n      byte[] paddedBytes = new byte[byteArrSize];\n      System.arraycopy(strBytes, 0, paddedBytes, 0, strBytes.length);\n      MemoryBlock mb = ByteArrayMemoryBlock.fromArray(paddedBytes);\n\n      Assert.assertEquals(\n              hasher.hashUnsafeWordsBlock(mb),\n              hasher.hashUnsafeWordsBlock(mb));\n\n      hashcodes.add(hasher.hashUnsafeWordsBlock(mb));\n    }\n\n    \r\n    Assert.assertTrue(hashcodes.size() > size * 0.95d);\n  }\n","realPath":"sql/catalyst/src/test/java/org/apache/spark/sql/catalyst/expressions/XXH64Suite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"0b9ccd55c2986957863dcad3b44ce80403eecfa1","commitMessage":"@@@Revert [SPARK-10399] [SPARK-23879] [SPARK-23762] [SPARK-25317]\n\n## What changes were proposed in this pull request?\n\nWhen running TPC-DS benchmarks on 2.4 release.  npoggi and winglungngai  saw more than 10% performance regression on the following queries: q67.  q24a and q24b. After we applying the PR https://github.com/apache/spark/pull/22338.  the performance regression still exists. If we revert the changes in https://github.com/apache/spark/pull/19222.  npoggi and winglungngai  found the performance regression was resolved. Thus.  this PR is to revert the related changes for unblocking the 2.4 release.\n\nIn the future release.  we still can continue the investigation and find out the root cause of the regression.\n\n## How was this patch tested?\n\nThe existing test cases\n\nCloses #22361 from gatorsmile/revertMemoryBlock.\n\nAuthored-by: gatorsmile <gatorsmile@gmail.com>\nSigned-off-by: Wenchen Fan <wenchen@databricks.com>\n","date":"2018-09-09 21:25:19","modifiedFileCount":"28","status":"M","submitter":"gatorsmile"}]
