[{"authorTime":"2016-02-29 09:25:07","codes":[{"authorDate":"2016-02-29 09:25:07","commitOrder":1,"curCode":"  public void testFailure() {\n    LinkedHashMap<String, ManagedBuffer> blocks = Maps.newLinkedHashMap();\n    blocks.put(\"b0\", new NioManagedBuffer(ByteBuffer.wrap(new byte[12])));\n    blocks.put(\"b1\", null);\n    blocks.put(\"b2\", null);\n\n    BlockFetchingListener listener = fetchBlocks(blocks);\n\n    \r\n    verify(listener, times(1)).onBlockFetchSuccess(\"b0\", blocks.get(\"b0\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b1\"), (Throwable) any());\n    verify(listener, times(2)).onBlockFetchFailure(eq(\"b2\"), (Throwable) any());\n  }\n","date":"2016-02-29 09:25:07","endLine":90,"groupId":"2858","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/25/90b9ce4c1f1b8a947e0739dcb07983baed6432.src","preCode":"  public void testFailure() {\n    LinkedHashMap<String, ManagedBuffer> blocks = Maps.newLinkedHashMap();\n    blocks.put(\"b0\", new NioManagedBuffer(ByteBuffer.wrap(new byte[12])));\n    blocks.put(\"b1\", null);\n    blocks.put(\"b2\", null);\n\n    BlockFetchingListener listener = fetchBlocks(blocks);\n\n    \r\n    verify(listener, times(1)).onBlockFetchSuccess(\"b0\", blocks.get(\"b0\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b1\"), (Throwable) any());\n    verify(listener, times(2)).onBlockFetchFailure(eq(\"b2\"), (Throwable) any());\n  }\n","realPath":"common/network-shuffle/src/test/java/org/apache/spark/network/shuffle/OneForOneBlockFetcherSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"},{"authorDate":"2016-02-29 09:25:07","commitOrder":1,"curCode":"  public void testFailureAndSuccess() {\n    LinkedHashMap<String, ManagedBuffer> blocks = Maps.newLinkedHashMap();\n    blocks.put(\"b0\", new NioManagedBuffer(ByteBuffer.wrap(new byte[12])));\n    blocks.put(\"b1\", null);\n    blocks.put(\"b2\", new NioManagedBuffer(ByteBuffer.wrap(new byte[21])));\n\n    BlockFetchingListener listener = fetchBlocks(blocks);\n\n    \r\n    verify(listener, times(1)).onBlockFetchSuccess(\"b0\", blocks.get(\"b0\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b1\"), (Throwable) any());\n    verify(listener, times(1)).onBlockFetchSuccess(\"b2\", blocks.get(\"b2\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b2\"), (Throwable) any());\n  }\n","date":"2016-02-29 09:25:07","endLine":106,"groupId":"2873","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailureAndSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/25/90b9ce4c1f1b8a947e0739dcb07983baed6432.src","preCode":"  public void testFailureAndSuccess() {\n    LinkedHashMap<String, ManagedBuffer> blocks = Maps.newLinkedHashMap();\n    blocks.put(\"b0\", new NioManagedBuffer(ByteBuffer.wrap(new byte[12])));\n    blocks.put(\"b1\", null);\n    blocks.put(\"b2\", new NioManagedBuffer(ByteBuffer.wrap(new byte[21])));\n\n    BlockFetchingListener listener = fetchBlocks(blocks);\n\n    \r\n    verify(listener, times(1)).onBlockFetchSuccess(\"b0\", blocks.get(\"b0\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b1\"), (Throwable) any());\n    verify(listener, times(1)).onBlockFetchSuccess(\"b2\", blocks.get(\"b2\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b2\"), (Throwable) any());\n  }\n","realPath":"common/network-shuffle/src/test/java/org/apache/spark/network/shuffle/OneForOneBlockFetcherSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"9e01dcc6446f8648e61062f8afe62589b9d4b5ab","commitMessage":"@@@[SPARK-13529][BUILD] Move network/* modules into common/network-*\n\n## What changes were proposed in this pull request?\nAs the title says.  this moves the three modules currently in network/ into common/network-*. This removes one top level.  non-user-facing folder.\n\n## How was this patch tested?\nCompilation and existing tests. We should run both SBT and Maven.\n\nAuthor: Reynold Xin <rxin@databricks.com>\n\nCloses #11409 from rxin/SPARK-13529.\n","date":"2016-02-29 09:25:07","modifiedFileCount":"1","status":"B","submitter":"Reynold Xin"},{"authorTime":"2017-02-20 01:42:50","codes":[{"authorDate":"2017-02-20 01:42:50","commitOrder":2,"curCode":"  public void testFailure() {\n    LinkedHashMap<String, ManagedBuffer> blocks = Maps.newLinkedHashMap();\n    blocks.put(\"b0\", new NioManagedBuffer(ByteBuffer.wrap(new byte[12])));\n    blocks.put(\"b1\", null);\n    blocks.put(\"b2\", null);\n\n    BlockFetchingListener listener = fetchBlocks(blocks);\n\n    \r\n    verify(listener, times(1)).onBlockFetchSuccess(\"b0\", blocks.get(\"b0\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b1\"), any());\n    verify(listener, times(2)).onBlockFetchFailure(eq(\"b2\"), any());\n  }\n","date":"2017-02-20 01:42:50","endLine":88,"groupId":"2858","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/3e/51fea3cf0e50fe1f2f682d9f84deb1310da2ed.src","preCode":"  public void testFailure() {\n    LinkedHashMap<String, ManagedBuffer> blocks = Maps.newLinkedHashMap();\n    blocks.put(\"b0\", new NioManagedBuffer(ByteBuffer.wrap(new byte[12])));\n    blocks.put(\"b1\", null);\n    blocks.put(\"b2\", null);\n\n    BlockFetchingListener listener = fetchBlocks(blocks);\n\n    \r\n    verify(listener, times(1)).onBlockFetchSuccess(\"b0\", blocks.get(\"b0\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b1\"), (Throwable) any());\n    verify(listener, times(2)).onBlockFetchFailure(eq(\"b2\"), (Throwable) any());\n  }\n","realPath":"common/network-shuffle/src/test/java/org/apache/spark/network/shuffle/OneForOneBlockFetcherSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2017-02-20 01:42:50","commitOrder":2,"curCode":"  public void testFailureAndSuccess() {\n    LinkedHashMap<String, ManagedBuffer> blocks = Maps.newLinkedHashMap();\n    blocks.put(\"b0\", new NioManagedBuffer(ByteBuffer.wrap(new byte[12])));\n    blocks.put(\"b1\", null);\n    blocks.put(\"b2\", new NioManagedBuffer(ByteBuffer.wrap(new byte[21])));\n\n    BlockFetchingListener listener = fetchBlocks(blocks);\n\n    \r\n    verify(listener, times(1)).onBlockFetchSuccess(\"b0\", blocks.get(\"b0\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b1\"), any());\n    verify(listener, times(1)).onBlockFetchSuccess(\"b2\", blocks.get(\"b2\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b2\"), any());\n  }\n","date":"2017-02-20 01:42:50","endLine":104,"groupId":"2873","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailureAndSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/3e/51fea3cf0e50fe1f2f682d9f84deb1310da2ed.src","preCode":"  public void testFailureAndSuccess() {\n    LinkedHashMap<String, ManagedBuffer> blocks = Maps.newLinkedHashMap();\n    blocks.put(\"b0\", new NioManagedBuffer(ByteBuffer.wrap(new byte[12])));\n    blocks.put(\"b1\", null);\n    blocks.put(\"b2\", new NioManagedBuffer(ByteBuffer.wrap(new byte[21])));\n\n    BlockFetchingListener listener = fetchBlocks(blocks);\n\n    \r\n    verify(listener, times(1)).onBlockFetchSuccess(\"b0\", blocks.get(\"b0\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b1\"), (Throwable) any());\n    verify(listener, times(1)).onBlockFetchSuccess(\"b2\", blocks.get(\"b2\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b2\"), (Throwable) any());\n  }\n","realPath":"common/network-shuffle/src/test/java/org/apache/spark/network/shuffle/OneForOneBlockFetcherSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"1487c9af20a333ead55955acf4c0aa323bea0d07","commitMessage":"@@@[SPARK-19534][TESTS] Convert Java tests to use lambdas.  Java 8 features\n\n## What changes were proposed in this pull request?\n\nConvert tests to use Java 8 lambdas.  and modest related fixes to surrounding code.\n\n## How was this patch tested?\n\nJenkins tests\n\nAuthor: Sean Owen <sowen@cloudera.com>\n\nCloses #16964 from srowen/SPARK-19534.\n","date":"2017-02-20 01:42:50","modifiedFileCount":"45","status":"M","submitter":"Sean Owen"},{"authorTime":"2019-05-27 22:19:31","codes":[{"authorDate":"2019-05-27 22:19:31","commitOrder":3,"curCode":"  public void testFailure() {\n    LinkedHashMap<String, ManagedBuffer> blocks = Maps.newLinkedHashMap();\n    blocks.put(\"b0\", new NioManagedBuffer(ByteBuffer.wrap(new byte[12])));\n    blocks.put(\"b1\", null);\n    blocks.put(\"b2\", null);\n    String[] blockIds = blocks.keySet().toArray(new String[blocks.size()]);\n\n    BlockFetchingListener listener = fetchBlocks(\n      blocks,\n      blockIds,\n      new OpenBlocks(\"app-id\", \"exec-id\", blockIds),\n      conf);\n\n    \r\n    verify(listener, times(1)).onBlockFetchSuccess(\"b0\", blocks.get(\"b0\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b1\"), any());\n    verify(listener, times(2)).onBlockFetchFailure(eq(\"b2\"), any());\n  }\n","date":"2019-05-27 22:19:31","endLine":149,"groupId":"10163","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/66/633cc7a35953bf9fc691e22d8c2f572223b287.src","preCode":"  public void testFailure() {\n    LinkedHashMap<String, ManagedBuffer> blocks = Maps.newLinkedHashMap();\n    blocks.put(\"b0\", new NioManagedBuffer(ByteBuffer.wrap(new byte[12])));\n    blocks.put(\"b1\", null);\n    blocks.put(\"b2\", null);\n\n    BlockFetchingListener listener = fetchBlocks(blocks);\n\n    \r\n    verify(listener, times(1)).onBlockFetchSuccess(\"b0\", blocks.get(\"b0\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b1\"), any());\n    verify(listener, times(2)).onBlockFetchFailure(eq(\"b2\"), any());\n  }\n","realPath":"common/network-shuffle/src/test/java/org/apache/spark/network/shuffle/OneForOneBlockFetcherSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2019-05-27 22:19:31","commitOrder":3,"curCode":"  public void testFailureAndSuccess() {\n    LinkedHashMap<String, ManagedBuffer> blocks = Maps.newLinkedHashMap();\n    blocks.put(\"b0\", new NioManagedBuffer(ByteBuffer.wrap(new byte[12])));\n    blocks.put(\"b1\", null);\n    blocks.put(\"b2\", new NioManagedBuffer(ByteBuffer.wrap(new byte[21])));\n    String[] blockIds = blocks.keySet().toArray(new String[blocks.size()]);\n\n    BlockFetchingListener listener = fetchBlocks(\n      blocks,\n      blockIds,\n      new OpenBlocks(\"app-id\", \"exec-id\", blockIds),\n      conf);\n\n    \r\n    verify(listener, times(1)).onBlockFetchSuccess(\"b0\", blocks.get(\"b0\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b1\"), any());\n    verify(listener, times(1)).onBlockFetchSuccess(\"b2\", blocks.get(\"b2\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b2\"), any());\n  }\n","date":"2019-05-27 22:19:31","endLine":170,"groupId":"10163","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailureAndSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/66/633cc7a35953bf9fc691e22d8c2f572223b287.src","preCode":"  public void testFailureAndSuccess() {\n    LinkedHashMap<String, ManagedBuffer> blocks = Maps.newLinkedHashMap();\n    blocks.put(\"b0\", new NioManagedBuffer(ByteBuffer.wrap(new byte[12])));\n    blocks.put(\"b1\", null);\n    blocks.put(\"b2\", new NioManagedBuffer(ByteBuffer.wrap(new byte[21])));\n\n    BlockFetchingListener listener = fetchBlocks(blocks);\n\n    \r\n    verify(listener, times(1)).onBlockFetchSuccess(\"b0\", blocks.get(\"b0\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b1\"), any());\n    verify(listener, times(1)).onBlockFetchSuccess(\"b2\", blocks.get(\"b2\"));\n    verify(listener, times(1)).onBlockFetchFailure(eq(\"b2\"), any());\n  }\n","realPath":"common/network-shuffle/src/test/java/org/apache/spark/network/shuffle/OneForOneBlockFetcherSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"8949bc7a3c1133bc17dac25111b222a788b826a8","commitMessage":"@@@[SPARK-27665][CORE] Split fetch shuffle blocks protocol from OpenBlocks\n\n## What changes were proposed in this pull request?\n\nAs the current approach in OneForOneBlockFetcher.  we reuse the OpenBlocks protocol to describe the fetch request for shuffle blocks.  and it causes the extension work for shuffle fetching like #19788 and #24110 very awkward.\nIn this PR.  we split the fetch request for shuffle blocks from OpenBlocks which named FetchShuffleBlocks. It's a loose bind with ShuffleBlockId and can easily extend by adding new fields in this protocol.\n\n## How was this patch tested?\n\nExisting and new added UT.\n\nCloses #24565 from xuanyuanking/SPARK-27665.\n\nAuthored-by: Yuanjian Li <xyliyuanjian@gmail.com>\nSigned-off-by: Wenchen Fan <wenchen@databricks.com>\n","date":"2019-05-27 22:19:31","modifiedFileCount":"8","status":"M","submitter":"Yuanjian Li"}]
