[{"authorTime":"2015-09-22 18:05:24","codes":[{"authorDate":"2015-08-28 01:46:41","commitOrder":3,"curCode":"  public void testGammaVectorRDD() {\n    double shape = 1.0;\n    double scale = 2.0;\n    long m = 100L;\n    int n = 10;\n    int p = 2;\n    long seed = 1L;\n    JavaRDD<Vector> rdd1 = gammaJavaVectorRDD(sc, shape, scale, m, n);\n    JavaRDD<Vector> rdd2 = gammaJavaVectorRDD(sc, shape, scale, m, n, p);\n    JavaRDD<Vector> rdd3 = gammaJavaVectorRDD(sc, shape, scale, m, n, p, seed);\n    for (JavaRDD<Vector> rdd: Arrays.asList(rdd1, rdd2, rdd3)) {\n      Assert.assertEquals(m, rdd.count());\n      Assert.assertEquals(n, rdd.first().size());\n    }\n  }\n","date":"2015-08-28 01:46:41","endLine":232,"groupId":"3429","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGammaVectorRDD","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/33/d81b1e9592b233b93a530e57266e07dd358164.src","preCode":"  public void testGammaVectorRDD() {\n    double shape = 1.0;\n    double scale = 2.0;\n    long m = 100L;\n    int n = 10;\n    int p = 2;\n    long seed = 1L;\n    JavaRDD<Vector> rdd1 = gammaJavaVectorRDD(sc, shape, scale, m, n);\n    JavaRDD<Vector> rdd2 = gammaJavaVectorRDD(sc, shape, scale, m, n, p);\n    JavaRDD<Vector> rdd3 = gammaJavaVectorRDD(sc, shape, scale, m, n, p, seed);\n    for (JavaRDD<Vector> rdd: Arrays.asList(rdd1, rdd2, rdd3)) {\n      Assert.assertEquals(m, rdd.count());\n      Assert.assertEquals(n, rdd.first().size());\n    }\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/random/JavaRandomRDDsSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"NB"},{"authorDate":"2015-09-22 18:05:24","commitOrder":3,"curCode":"  public void testRandomVectorRDD() {\n    UniformGenerator generator = new UniformGenerator();\n    long m = 100L;\n    int n = 10;\n    int p = 2;\n    long seed = 1L;\n    JavaRDD<Vector> rdd1 = randomJavaVectorRDD(sc, generator, m, n);\n    JavaRDD<Vector> rdd2 = randomJavaVectorRDD(sc, generator, m, n, p);\n    JavaRDD<Vector> rdd3 = randomJavaVectorRDD(sc, generator, m, n, p, seed);\n    for (JavaRDD<Vector> rdd: Arrays.asList(rdd1, rdd2, rdd3)) {\n      Assert.assertEquals(m, rdd.count());\n      Assert.assertEquals(n, rdd.first().size());\n    }\n  }\n","date":"2015-09-22 18:05:24","endLine":265,"groupId":"3429","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRandomVectorRDD","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/57/28df5aeebdc68824edb3fb333f4690f7f16728.src","preCode":"  public void testRandomVectorRDD() {\n    UniformGenerator generator = new UniformGenerator();\n    long m = 100L;\n    int n = 10;\n    int p = 2;\n    long seed = 1L;\n    JavaRDD<Vector> rdd1 = randomJavaVectorRDD(sc, generator, m, n);\n    JavaRDD<Vector> rdd2 = randomJavaVectorRDD(sc, generator, m, n, p);\n    JavaRDD<Vector> rdd3 = randomJavaVectorRDD(sc, generator, m, n, p, seed);\n    for (JavaRDD<Vector> rdd: Arrays.asList(rdd1, rdd2, rdd3)) {\n      Assert.assertEquals(m, rdd.count());\n      Assert.assertEquals(n, rdd.first().size());\n    }\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/random/JavaRandomRDDsSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"B"}],"commitId":"870b8a2edd44c9274c43ca0db4ef5b0998e16fd8","commitMessage":"@@@[SPARK-10706] [MLLIB] Add java wrapper for random vector rdd\n\nAdd java wrapper for random vector rdd\n\nholdenk srowen\n\nAuthor: Meihua Wu <meihuawu@umich.edu>\n\nCloses #8841 from rotationsymmetry/SPARK-10706.\n","date":"2015-09-22 18:05:24","modifiedFileCount":"1","status":"M","submitter":"Meihua Wu"},{"authorTime":"2016-05-11 02:17:47","codes":[{"authorDate":"2016-05-11 02:17:47","commitOrder":4,"curCode":"  public void testGammaVectorRDD() {\n    double shape = 1.0;\n    double jscale = 2.0;\n    long m = 100L;\n    int n = 10;\n    int p = 2;\n    long seed = 1L;\n    JavaRDD<Vector> rdd1 = gammaJavaVectorRDD(jsc, shape, jscale, m, n);\n    JavaRDD<Vector> rdd2 = gammaJavaVectorRDD(jsc, shape, jscale, m, n, p);\n    JavaRDD<Vector> rdd3 = gammaJavaVectorRDD(jsc, shape, jscale, m, n, p, seed);\n    for (JavaRDD<Vector> rdd : Arrays.asList(rdd1, rdd2, rdd3)) {\n      Assert.assertEquals(m, rdd.count());\n      Assert.assertEquals(n, rdd.first().size());\n    }\n  }\n","date":"2016-05-11 02:17:47","endLine":239,"groupId":"10474","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGammaVectorRDD","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b4/49108a9b83e89cffdb167f6ca4496c7f81b951.src","preCode":"  public void testGammaVectorRDD() {\n    double shape = 1.0;\n    double scale = 2.0;\n    long m = 100L;\n    int n = 10;\n    int p = 2;\n    long seed = 1L;\n    JavaRDD<Vector> rdd1 = gammaJavaVectorRDD(sc, shape, scale, m, n);\n    JavaRDD<Vector> rdd2 = gammaJavaVectorRDD(sc, shape, scale, m, n, p);\n    JavaRDD<Vector> rdd3 = gammaJavaVectorRDD(sc, shape, scale, m, n, p, seed);\n    for (JavaRDD<Vector> rdd: Arrays.asList(rdd1, rdd2, rdd3)) {\n      Assert.assertEquals(m, rdd.count());\n      Assert.assertEquals(n, rdd.first().size());\n    }\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/random/JavaRandomRDDsSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"},{"authorDate":"2016-05-11 02:17:47","commitOrder":4,"curCode":"  public void testRandomVectorRDD() {\n    UniformGenerator generator = new UniformGenerator();\n    long m = 100L;\n    int n = 10;\n    int p = 2;\n    long seed = 1L;\n    JavaRDD<Vector> rdd1 = randomJavaVectorRDD(jsc, generator, m, n);\n    JavaRDD<Vector> rdd2 = randomJavaVectorRDD(jsc, generator, m, n, p);\n    JavaRDD<Vector> rdd3 = randomJavaVectorRDD(jsc, generator, m, n, p, seed);\n    for (JavaRDD<Vector> rdd : Arrays.asList(rdd1, rdd2, rdd3)) {\n      Assert.assertEquals(m, rdd.count());\n      Assert.assertEquals(n, rdd.first().size());\n    }\n  }\n","date":"2016-05-11 02:17:47","endLine":271,"groupId":"10474","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRandomVectorRDD","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/b4/49108a9b83e89cffdb167f6ca4496c7f81b951.src","preCode":"  public void testRandomVectorRDD() {\n    UniformGenerator generator = new UniformGenerator();\n    long m = 100L;\n    int n = 10;\n    int p = 2;\n    long seed = 1L;\n    JavaRDD<Vector> rdd1 = randomJavaVectorRDD(sc, generator, m, n);\n    JavaRDD<Vector> rdd2 = randomJavaVectorRDD(sc, generator, m, n, p);\n    JavaRDD<Vector> rdd3 = randomJavaVectorRDD(sc, generator, m, n, p, seed);\n    for (JavaRDD<Vector> rdd: Arrays.asList(rdd1, rdd2, rdd3)) {\n      Assert.assertEquals(m, rdd.count());\n      Assert.assertEquals(n, rdd.first().size());\n    }\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/random/JavaRandomRDDsSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"ed0b4070fb50054b1ecf66ff6c32458a4967dfd3","commitMessage":"@@@[SPARK-15037][SQL][MLLIB] Use SparkSession instead of SQLContext in Scala/Java TestSuites\n\n## What changes were proposed in this pull request?\nUse SparkSession instead of SQLContext in Scala/Java TestSuites\nas this PR already very big working Python TestSuites in a diff PR.\n\n## How was this patch tested?\nExisting tests\n\nAuthor: Sandeep Singh <sandeep@techaddict.me>\n\nCloses #12907 from techaddict/SPARK-15037.\n","date":"2016-05-11 02:17:47","modifiedFileCount":"63","status":"M","submitter":"Sandeep Singh"}]
