[{"authorTime":"2014-05-16 02:59:59","codes":[{"authorDate":"2014-03-24 08:34:02","commitOrder":4,"curCode":"  public void runKMeansUsingStaticMethods() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.K_MEANS_PARALLEL());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2014-03-24 08:34:02","endLine":67,"groupId":"2195","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runKMeansUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/49/a614bd90caba308466b222bef9e31635939470.src","preCode":"  public void runKMeansUsingStaticMethods() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.K_MEANS_PARALLEL());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"NB"},{"authorDate":"2014-05-16 02:59:59","commitOrder":4,"curCode":"  public void testPredictJavaRDD() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    JavaRDD<Integer> predictions = model.predict(data);\n    \r\n    predictions.first();\n  }\n","date":"2014-05-16 02:59:59","endLine":104,"groupId":"1923","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPredictJavaRDD","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/0c/916ca3780346943d88c66be6498d8f650d92b9.src","preCode":"  public void testPredictJavaRDD() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    JavaRDD<Integer> predictions = model.predict(data);\n    \r\n    predictions.first();\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"d52761d67f42ad4d2ff02d96f0675fb3ab709f38","commitMessage":"@@@[SPARK-1741][MLLIB] add predict(JavaRDD) to RegressionModel.  ClassificationModel.  and KMeans\n\n`model.predict` returns a RDD of Scala primitive type (Int/Double).  which is recognized as Object in Java. Adding predict(JavaRDD) could make life easier for Java users.\n\nAdded tests for KMeans.  LinearRegression.  and NaiveBayes.\n\nWill update examples after https://github.com/apache/spark/pull/653 gets merged.\n\ncc: @srowen\n\nAuthor: Xiangrui Meng <meng@databricks.com>\n\nCloses #670 from mengxr/predict-javardd and squashes the following commits:\n\nb77ccd8 [Xiangrui Meng] Merge branch 'master' into predict-javardd\n43caac9 [Xiangrui Meng] add predict(JavaRDD) to RegressionModel.  ClassificationModel.  and KMeans\n","date":"2014-05-16 02:59:59","modifiedFileCount":"3","status":"M","submitter":"Xiangrui Meng"},{"authorTime":"2015-08-28 01:46:41","codes":[{"authorDate":"2015-08-28 01:46:41","commitOrder":5,"curCode":"  public void runKMeansUsingStaticMethods() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.K_MEANS_PARALLEL());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2015-08-28 01:46:41","endLine":65,"groupId":"2195","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runKMeansUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/ad/06676c72ac6e0750bbbdb223fd7b62ef3cd4f1.src","preCode":"  public void runKMeansUsingStaticMethods() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.K_MEANS_PARALLEL());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2015-08-28 01:46:41","commitOrder":5,"curCode":"  public void testPredictJavaRDD() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    JavaRDD<Integer> predictions = model.predict(data);\n    \r\n    predictions.first();\n  }\n","date":"2015-08-28 01:46:41","endLine":102,"groupId":"1923","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPredictJavaRDD","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/ad/06676c72ac6e0750bbbdb223fd7b62ef3cd4f1.src","preCode":"  public void testPredictJavaRDD() {\n    List<Vector> points = Lists.newArrayList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    JavaRDD<Integer> predictions = model.predict(data);\n    \r\n    predictions.first();\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"e1f4de4a7d15d4ca4b5c64ff929ac3980f5d706f","commitMessage":"@@@[SPARK-10257] [MLLIB] Removes Guava from all spark.mllib Java tests\n\n* Replaces instances of `Lists.newArrayList` with `Arrays.asList`\n* Replaces `commons.lang.StringUtils` over `com.google.collections.Strings`\n* Replaces `List` interface over `ArrayList` implementations\n\nThis PR along with #8445 #8446 #8447 completely removes all `com.google.collections.Lists` dependencies within mllib's Java tests.\n\nAuthor: Feynman Liang <fliang@databricks.com>\n\nCloses #8451 from feynmanliang/SPARK-10257.\n","date":"2015-08-28 01:46:41","modifiedFileCount":"14","status":"M","submitter":"Feynman Liang"},{"authorTime":"2016-05-11 02:17:47","codes":[{"authorDate":"2016-05-11 02:17:47","commitOrder":6,"curCode":"  public void runKMeansUsingStaticMethods() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.K_MEANS_PARALLEL());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2016-05-11 02:17:47","endLine":72,"groupId":"2195","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"runKMeansUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/4e/5b87f588e3dc412925bc01002415e8e7c8e23d.src","preCode":"  public void runKMeansUsingStaticMethods() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.K_MEANS_PARALLEL());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2016-05-11 02:17:47","commitOrder":6,"curCode":"  public void testPredictJavaRDD() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    JavaRDD<Integer> predictions = model.predict(data);\n    \r\n    predictions.first();\n  }\n","date":"2016-05-11 02:17:47","endLine":109,"groupId":"1923","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPredictJavaRDD","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/4e/5b87f588e3dc412925bc01002415e8e7c8e23d.src","preCode":"  public void testPredictJavaRDD() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n    JavaRDD<Vector> data = sc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    JavaRDD<Integer> predictions = model.predict(data);\n    \r\n    predictions.first();\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"ed0b4070fb50054b1ecf66ff6c32458a4967dfd3","commitMessage":"@@@[SPARK-15037][SQL][MLLIB] Use SparkSession instead of SQLContext in Scala/Java TestSuites\n\n## What changes were proposed in this pull request?\nUse SparkSession instead of SQLContext in Scala/Java TestSuites\nas this PR already very big working Python TestSuites in a diff PR.\n\n## How was this patch tested?\nExisting tests\n\nAuthor: Sandeep Singh <sandeep@techaddict.me>\n\nCloses #12907 from techaddict/SPARK-15037.\n","date":"2016-05-11 02:17:47","modifiedFileCount":"63","status":"M","submitter":"Sandeep Singh"},{"authorTime":"2016-05-11 02:17:47","codes":[{"authorDate":"2019-09-09 23:19:40","commitOrder":7,"curCode":"  public void runKMeansUsingStaticMethods() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1, KMeans.K_MEANS_PARALLEL());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = KMeans.train(data.rdd(), 1, 1, KMeans.RANDOM());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","date":"2019-09-09 23:19:40","endLine":51,"groupId":"10453","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"runKMeansUsingStaticMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/a9/a8b7f2b88d662b90cc65f18c8f28c8aa23fce1.src","preCode":"  public void runKMeansUsingStaticMethods() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n\n    Vector expectedCenter = Vectors.dense(1.0, 3.0, 4.0);\n\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    KMeansModel model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.K_MEANS_PARALLEL());\n    assertEquals(1, model.clusterCenters().length);\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n\n    model = KMeans.train(data.rdd(), 1, 1, 1, KMeans.RANDOM());\n    assertEquals(expectedCenter, model.clusterCenters()[0]);\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2016-05-11 02:17:47","commitOrder":7,"curCode":"  public void testPredictJavaRDD() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    JavaRDD<Integer> predictions = model.predict(data);\n    \r\n    predictions.first();\n  }\n","date":"2016-05-11 02:17:47","endLine":109,"groupId":"10453","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPredictJavaRDD","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-spark-10-0.7/blobInfo/CC_OUT/blobs/4e/5b87f588e3dc412925bc01002415e8e7c8e23d.src","preCode":"  public void testPredictJavaRDD() {\n    List<Vector> points = Arrays.asList(\n      Vectors.dense(1.0, 2.0, 6.0),\n      Vectors.dense(1.0, 3.0, 0.0),\n      Vectors.dense(1.0, 4.0, 6.0)\n    );\n    JavaRDD<Vector> data = jsc.parallelize(points, 2);\n    KMeansModel model = new KMeans().setK(1).setMaxIterations(5).run(data.rdd());\n    JavaRDD<Integer> predictions = model.predict(data);\n    \r\n    predictions.first();\n  }\n","realPath":"mllib/src/test/java/org/apache/spark/mllib/clustering/JavaKMeansSuite.java","repoName":"spark","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"N"}],"commitId":"6378d4bc06cd1bb1a209bd5fb63d10ef52d75eb4","commitMessage":"@@@[SPARK-28980][CORE][SQL][STREAMING][MLLIB] Remove most items deprecated in Spark 2.2.0 or earlier.  for Spark 3\n\n\n What changes were proposed in this pull request?\n\n- Remove SQLContext.createExternalTable and Catalog.createExternalTable.  deprecated in favor of createTable since 2.2.0.  plus tests of deprecated methods\n- Remove HiveContext.  deprecated in 2.0.0.  in favor of `SparkSession.builder.enableHiveSupport`\n- Remove deprecated KinesisUtils.createStream methods.  plus tests of deprecated methods.  deprecate in 2.2.0\n- Remove deprecated MLlib (not Spark ML) linear method support.  mostly utility constructors and 'train' methods.  and associated docs. This includes methods in LinearRegression.  LogisticRegression.  Lasso.  RidgeRegression. These have been deprecated since 2.0.0\n- Remove deprecated Pyspark MLlib linear method support.  including LogisticRegressionWithSGD.  LinearRegressionWithSGD.  LassoWithSGD\n- Remove 'runs' argument in KMeans.train() method.  which has been a no-op since 2.0.0\n- Remove deprecated ChiSqSelector isSorted protected method\n- Remove deprecated 'yarn-cluster' and 'yarn-client' master argument in favor of 'yarn' and deploy mode 'cluster'.  etc\n\nNotes:\n\n- I was not able to remove deprecated DataFrameReader.json(RDD) in favor of DataFrameReader.json(Dataset); the former was deprecated in 2.2.0.  but.  it is still needed to support Pyspark's .json() method.  which can't use a Dataset.\n- Looks like SQLContext.createExternalTable was not actually deprecated in Pyspark.  but.  almost certainly was meant to be? Catalog.createExternalTable was.\n- I afterwards noted that the toDegrees.  toRadians functions were almost removed fully in SPARK-25908.  but Felix suggested keeping just the R version as they hadn't been technically deprecated. I'd like to revisit that. Do we really want the inconsistency? I'm not against reverting it again.  but then that implies leaving SQLContext.createExternalTable just in Pyspark too.  which seems weird.\n- I *kept* LogisticRegressionWithSGD.  LinearRegressionWithSGD.  LassoWithSGD.  RidgeRegressionWithSGD in Pyspark.  though deprecated.  as it is hard to remove them (still used by StreamingLogisticRegressionWithSGD?) and they are not fully removed in Scala. Maybe should not have been deprecated.\n\n\n Why are the changes needed?\n\nDeprecated items are easiest to remove in a major release.  so we should do so as much as possible for Spark 3. This does not target items deprecated 'recently' as of Spark 2.3.  which is still 18 months old.\n\n\n Does this PR introduce any user-facing change?\n\nYes.  in that deprecated items are removed from some public APIs.\n\n\n How was this patch tested?\n\nExisting tests.\n\nCloses #25684 from srowen/SPARK-28980.\n\nLead-authored-by: Sean Owen <sean.owen@databricks.com>\nCo-authored-by: HyukjinKwon <gurwls223@apache.org>\nSigned-off-by: Sean Owen <sean.owen@databricks.com>\n","date":"2019-09-09 23:19:40","modifiedFileCount":"8","status":"M","submitter":"Sean Owen"}]
