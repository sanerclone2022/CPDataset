[{"authorTime":"2019-03-04 14:09:20","codes":[{"authorDate":"2018-10-22 18:29:14","commitOrder":2,"curCode":"  public void handle(ContainerAllocatorEvent event) {\n    int qSize = eventQueue.size();\n    if (qSize != 0 && qSize % 1000 == 0) {\n      LOG.info(\"Size of event-queue in RMContainerAllocator is \" + qSize);\n    }\n    int remCapacity = eventQueue.remainingCapacity();\n    if (remCapacity < 1000) {\n      LOG.warn(\"Very low remaining capacity in the event-queue \"\n          + \"of RMContainerAllocator: \" + remCapacity);\n    }\n    try {\n      eventQueue.put(event);\n    } catch (InterruptedException e) {\n      throw new YarnRuntimeException(e);\n    }\n  }\n","date":"2018-10-25 01:52:05","endLine":373,"groupId":"4541","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"handle","params":"(ContainerAllocatorEventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/e4/59cb52f05cabcdcb0ca8e8ee9a02b9985c0618.src","preCode":"  public void handle(ContainerAllocatorEvent event) {\n    int qSize = eventQueue.size();\n    if (qSize != 0 && qSize % 1000 == 0) {\n      LOG.info(\"Size of event-queue in RMContainerAllocator is \" + qSize);\n    }\n    int remCapacity = eventQueue.remainingCapacity();\n    if (remCapacity < 1000) {\n      LOG.warn(\"Very low remaining capacity in the event-queue \"\n          + \"of RMContainerAllocator: \" + remCapacity);\n    }\n    try {\n      eventQueue.put(event);\n    } catch (InterruptedException e) {\n      throw new YarnRuntimeException(e);\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"NB"},{"authorDate":"2019-03-04 14:09:20","commitOrder":2,"curCode":"    public void handle(Event event) {\n      if (blockNewEvents) {\n        return;\n      }\n      drained = false;\n\n      \n      int qSize = eventQueue.size();\n      if (qSize != 0 && qSize % 1000 == 0\n          && lastEventQueueSizeLogged != qSize) {\n        lastEventQueueSizeLogged = qSize;\n        LOG.info(\"Size of event-queue is \" + qSize);\n      }\n      int remCapacity = eventQueue.remainingCapacity();\n      if (remCapacity < 1000) {\n        LOG.warn(\"Very low remaining capacity in the event-queue: \"\n            + remCapacity);\n      }\n      try {\n        eventQueue.put(event);\n      } catch (InterruptedException e) {\n        if (!stopped) {\n          LOG.warn(\"AsyncDispatcher thread interrupted\", e);\n        }\n        \r\n        \r\n        drained = eventQueue.isEmpty();\n        throw new YarnRuntimeException(e);\n      }\n    };\n","date":"2019-03-04 15:59:20","endLine":280,"groupId":"33131","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"handle","params":"(Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/33/3faa5de7da36b9f9632f93a93ce070cadf7ae9.src","preCode":"    public void handle(Event event) {\n      if (blockNewEvents) {\n        return;\n      }\n      drained = false;\n\n      \n      int qSize = eventQueue.size();\n      if (qSize != 0 && qSize % 1000 == 0\n          && lastEventQueueSizeLogged != qSize) {\n        lastEventQueueSizeLogged = qSize;\n        LOG.info(\"Size of event-queue is \" + qSize);\n      }\n      int remCapacity = eventQueue.remainingCapacity();\n      if (remCapacity < 1000) {\n        LOG.warn(\"Very low remaining capacity in the event-queue: \"\n            + remCapacity);\n      }\n      try {\n        eventQueue.put(event);\n      } catch (InterruptedException e) {\n        if (!stopped) {\n          LOG.warn(\"AsyncDispatcher thread interrupted\", e);\n        }\n        \r\n        \r\n        drained = eventQueue.isEmpty();\n        throw new YarnRuntimeException(e);\n      }\n    };\n","realPath":"hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"B"}],"commitId":"bd8d299ded742813cabd4b4e7ce1e33e0d1f9509","commitMessage":"@@@YARN-7477. Moving logging APIs over to slf4j in hadoop-yarn-common. Contributed by Prabhu Joseph.\n","date":"2019-03-04 15:59:20","modifiedFileCount":"68","status":"M","submitter":"Akira Ajisaka"},{"authorTime":"2019-09-05 16:20:05","codes":[{"authorDate":"2018-10-22 18:29:14","commitOrder":3,"curCode":"  public void handle(ContainerAllocatorEvent event) {\n    int qSize = eventQueue.size();\n    if (qSize != 0 && qSize % 1000 == 0) {\n      LOG.info(\"Size of event-queue in RMContainerAllocator is \" + qSize);\n    }\n    int remCapacity = eventQueue.remainingCapacity();\n    if (remCapacity < 1000) {\n      LOG.warn(\"Very low remaining capacity in the event-queue \"\n          + \"of RMContainerAllocator: \" + remCapacity);\n    }\n    try {\n      eventQueue.put(event);\n    } catch (InterruptedException e) {\n      throw new YarnRuntimeException(e);\n    }\n  }\n","date":"2018-10-25 01:52:05","endLine":373,"groupId":"4541","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"handle","params":"(ContainerAllocatorEventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/e4/59cb52f05cabcdcb0ca8e8ee9a02b9985c0618.src","preCode":"  public void handle(ContainerAllocatorEvent event) {\n    int qSize = eventQueue.size();\n    if (qSize != 0 && qSize % 1000 == 0) {\n      LOG.info(\"Size of event-queue in RMContainerAllocator is \" + qSize);\n    }\n    int remCapacity = eventQueue.remainingCapacity();\n    if (remCapacity < 1000) {\n      LOG.warn(\"Very low remaining capacity in the event-queue \"\n          + \"of RMContainerAllocator: \" + remCapacity);\n    }\n    try {\n      eventQueue.put(event);\n    } catch (InterruptedException e) {\n      throw new YarnRuntimeException(e);\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"N"},{"authorDate":"2019-09-05 16:20:05","commitOrder":3,"curCode":"    public void handle(Event event) {\n      if (blockNewEvents) {\n        return;\n      }\n      drained = false;\n\n      \n      int qSize = eventQueue.size();\n      if (qSize != 0 && qSize % 1000 == 0\n          && lastEventQueueSizeLogged != qSize) {\n        lastEventQueueSizeLogged = qSize;\n        LOG.info(\"Size of event-queue is \" + qSize);\n      }\n      if (qSize != 0 && qSize % detailsInterval == 0\n              && lastEventDetailsQueueSizeLogged != qSize) {\n        lastEventDetailsQueueSizeLogged = qSize;\n        printEventQueueDetails(eventQueue);\n        printTrigger = true;\n      }\n      int remCapacity = eventQueue.remainingCapacity();\n      if (remCapacity < 1000) {\n        LOG.warn(\"Very low remaining capacity in the event-queue: \"\n            + remCapacity);\n      }\n      try {\n        eventQueue.put(event);\n      } catch (InterruptedException e) {\n        if (!stopped) {\n          LOG.warn(\"AsyncDispatcher thread interrupted\", e);\n        }\n        \r\n        \r\n        drained = eventQueue.isEmpty();\n        throw new YarnRuntimeException(e);\n      }\n    };\n","date":"2019-09-05 16:20:05","endLine":317,"groupId":"34134","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"handle","params":"(Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/15/168e9041bdfa2c76a32a39167104edd8af447e.src","preCode":"    public void handle(Event event) {\n      if (blockNewEvents) {\n        return;\n      }\n      drained = false;\n\n      \n      int qSize = eventQueue.size();\n      if (qSize != 0 && qSize % 1000 == 0\n          && lastEventQueueSizeLogged != qSize) {\n        lastEventQueueSizeLogged = qSize;\n        LOG.info(\"Size of event-queue is \" + qSize);\n      }\n      int remCapacity = eventQueue.remainingCapacity();\n      if (remCapacity < 1000) {\n        LOG.warn(\"Very low remaining capacity in the event-queue: \"\n            + remCapacity);\n      }\n      try {\n        eventQueue.put(event);\n      } catch (InterruptedException e) {\n        if (!stopped) {\n          LOG.warn(\"AsyncDispatcher thread interrupted\", e);\n        }\n        \r\n        \r\n        drained = eventQueue.isEmpty();\n        throw new YarnRuntimeException(e);\n      }\n    };\n","realPath":"hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"}],"commitId":"172bcd8e01bd0fa58010823eb27d6e6d81609f2a","commitMessage":"@@@YARN-8995. Log events info in AsyncDispatcher when event queue size cumulatively reaches a certain number every time. Contributed by zhuqi.\n","date":"2019-09-05 16:20:05","modifiedFileCount":"3","status":"M","submitter":"Tao Yang"},{"authorTime":"2021-03-05 20:50:45","codes":[{"authorDate":"2018-10-22 18:29:14","commitOrder":4,"curCode":"  public void handle(ContainerAllocatorEvent event) {\n    int qSize = eventQueue.size();\n    if (qSize != 0 && qSize % 1000 == 0) {\n      LOG.info(\"Size of event-queue in RMContainerAllocator is \" + qSize);\n    }\n    int remCapacity = eventQueue.remainingCapacity();\n    if (remCapacity < 1000) {\n      LOG.warn(\"Very low remaining capacity in the event-queue \"\n          + \"of RMContainerAllocator: \" + remCapacity);\n    }\n    try {\n      eventQueue.put(event);\n    } catch (InterruptedException e) {\n      throw new YarnRuntimeException(e);\n    }\n  }\n","date":"2018-10-25 01:52:05","endLine":373,"groupId":"4541","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"handle","params":"(ContainerAllocatorEventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/e4/59cb52f05cabcdcb0ca8e8ee9a02b9985c0618.src","preCode":"  public void handle(ContainerAllocatorEvent event) {\n    int qSize = eventQueue.size();\n    if (qSize != 0 && qSize % 1000 == 0) {\n      LOG.info(\"Size of event-queue in RMContainerAllocator is \" + qSize);\n    }\n    int remCapacity = eventQueue.remainingCapacity();\n    if (remCapacity < 1000) {\n      LOG.warn(\"Very low remaining capacity in the event-queue \"\n          + \"of RMContainerAllocator: \" + remCapacity);\n    }\n    try {\n      eventQueue.put(event);\n    } catch (InterruptedException e) {\n      throw new YarnRuntimeException(e);\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"N"},{"authorDate":"2021-03-05 20:50:45","commitOrder":4,"curCode":"    public void handle(Event event) {\n      if (blockNewEvents) {\n        return;\n      }\n      drained = false;\n\n      \n      int qSize = eventQueue.size();\n      if (qSize != 0 && qSize % 1000 == 0\n          && lastEventQueueSizeLogged != qSize) {\n        lastEventQueueSizeLogged = qSize;\n        LOG.info(\"Size of event-queue is \" + qSize);\n      }\n      if (qSize != 0 && qSize % detailsInterval == 0\n              && lastEventDetailsQueueSizeLogged != qSize) {\n        lastEventDetailsQueueSizeLogged = qSize;\n        printEventQueueDetails();\n        printTrigger = true;\n      }\n      int remCapacity = eventQueue.remainingCapacity();\n      if (remCapacity < 1000) {\n        LOG.warn(\"Very low remaining capacity in the event-queue: \"\n            + remCapacity);\n      }\n      try {\n        eventQueue.put(event);\n      } catch (InterruptedException e) {\n        if (!stopped) {\n          LOG.warn(\"AsyncDispatcher thread interrupted\", e);\n        }\n        \r\n        \r\n        drained = eventQueue.isEmpty();\n        throw new YarnRuntimeException(e);\n      }\n    };\n","date":"2021-03-05 20:50:45","endLine":322,"groupId":"22912","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"handle","params":"(Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/f9/deab06ff27f6ff543bb44adac4f301a5625b02.src","preCode":"    public void handle(Event event) {\n      if (blockNewEvents) {\n        return;\n      }\n      drained = false;\n\n      \n      int qSize = eventQueue.size();\n      if (qSize != 0 && qSize % 1000 == 0\n          && lastEventQueueSizeLogged != qSize) {\n        lastEventQueueSizeLogged = qSize;\n        LOG.info(\"Size of event-queue is \" + qSize);\n      }\n      if (qSize != 0 && qSize % detailsInterval == 0\n              && lastEventDetailsQueueSizeLogged != qSize) {\n        lastEventDetailsQueueSizeLogged = qSize;\n        printEventQueueDetails(eventQueue);\n        printTrigger = true;\n      }\n      int remCapacity = eventQueue.remainingCapacity();\n      if (remCapacity < 1000) {\n        LOG.warn(\"Very low remaining capacity in the event-queue: \"\n            + remCapacity);\n      }\n      try {\n        eventQueue.put(event);\n      } catch (InterruptedException e) {\n        if (!stopped) {\n          LOG.warn(\"AsyncDispatcher thread interrupted\", e);\n        }\n        \r\n        \r\n        drained = eventQueue.isEmpty();\n        throw new YarnRuntimeException(e);\n      }\n    };\n","realPath":"hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"}],"commitId":"e7cad3811fd14ff0b963423a24a9012ce5fb07a9","commitMessage":"@@@YARN-10642. Race condition: AsyncDispatcher can get stuck by the changes introduced in YARN-8995. Contributed by zhengchenyu.\n","date":"2021-03-05 20:50:45","modifiedFileCount":"2","status":"M","submitter":"Peter Bacsko"},{"authorTime":"2021-04-27 20:01:53","codes":[{"authorDate":"2018-10-22 18:29:14","commitOrder":5,"curCode":"  public void handle(ContainerAllocatorEvent event) {\n    int qSize = eventQueue.size();\n    if (qSize != 0 && qSize % 1000 == 0) {\n      LOG.info(\"Size of event-queue in RMContainerAllocator is \" + qSize);\n    }\n    int remCapacity = eventQueue.remainingCapacity();\n    if (remCapacity < 1000) {\n      LOG.warn(\"Very low remaining capacity in the event-queue \"\n          + \"of RMContainerAllocator: \" + remCapacity);\n    }\n    try {\n      eventQueue.put(event);\n    } catch (InterruptedException e) {\n      throw new YarnRuntimeException(e);\n    }\n  }\n","date":"2018-10-25 01:52:05","endLine":373,"groupId":"10416","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"handle","params":"(ContainerAllocatorEventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/e4/59cb52f05cabcdcb0ca8e8ee9a02b9985c0618.src","preCode":"  public void handle(ContainerAllocatorEvent event) {\n    int qSize = eventQueue.size();\n    if (qSize != 0 && qSize % 1000 == 0) {\n      LOG.info(\"Size of event-queue in RMContainerAllocator is \" + qSize);\n    }\n    int remCapacity = eventQueue.remainingCapacity();\n    if (remCapacity < 1000) {\n      LOG.warn(\"Very low remaining capacity in the event-queue \"\n          + \"of RMContainerAllocator: \" + remCapacity);\n    }\n    try {\n      eventQueue.put(event);\n    } catch (InterruptedException e) {\n      throw new YarnRuntimeException(e);\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"N"},{"authorDate":"2021-04-27 20:01:53","commitOrder":5,"curCode":"    public void handle(Event event) {\n      if (blockNewEvents) {\n        return;\n      }\n      drained = false;\n\n      \n      int qSize = eventQueue.size();\n      if (qSize != 0 && qSize % 1000 == 0\n          && lastEventQueueSizeLogged != qSize) {\n        lastEventQueueSizeLogged = qSize;\n        LOG.info(\"Size of event-queue is \" + qSize);\n      }\n      if (qSize != 0 && qSize % detailsInterval == 0\n              && lastEventDetailsQueueSizeLogged != qSize) {\n        lastEventDetailsQueueSizeLogged = qSize;\n        printEventDetailsExecutor.submit(this::printEventQueueDetails);\n        printTrigger = true;\n      }\n      int remCapacity = eventQueue.remainingCapacity();\n      if (remCapacity < 1000) {\n        LOG.warn(\"Very low remaining capacity in the event-queue: \"\n            + remCapacity);\n      }\n      try {\n        eventQueue.put(event);\n      } catch (InterruptedException e) {\n        if (!stopped) {\n          LOG.warn(\"AsyncDispatcher thread interrupted\", e);\n        }\n        \r\n        \r\n        drained = eventQueue.isEmpty();\n        throw new YarnRuntimeException(e);\n      }\n    };\n","date":"2021-04-27 20:01:53","endLine":357,"groupId":"10416","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"handle","params":"(Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/ba/6bb435ec25bdbff1de01051a8a6f3513d5a009.src","preCode":"    public void handle(Event event) {\n      if (blockNewEvents) {\n        return;\n      }\n      drained = false;\n\n      \n      int qSize = eventQueue.size();\n      if (qSize != 0 && qSize % 1000 == 0\n          && lastEventQueueSizeLogged != qSize) {\n        lastEventQueueSizeLogged = qSize;\n        LOG.info(\"Size of event-queue is \" + qSize);\n      }\n      if (qSize != 0 && qSize % detailsInterval == 0\n              && lastEventDetailsQueueSizeLogged != qSize) {\n        lastEventDetailsQueueSizeLogged = qSize;\n        printEventQueueDetails();\n        printTrigger = true;\n      }\n      int remCapacity = eventQueue.remainingCapacity();\n      if (remCapacity < 1000) {\n        LOG.warn(\"Very low remaining capacity in the event-queue: \"\n            + remCapacity);\n      }\n      try {\n        eventQueue.put(event);\n      } catch (InterruptedException e) {\n        if (!stopped) {\n          LOG.warn(\"AsyncDispatcher thread interrupted\", e);\n        }\n        \r\n        \r\n        drained = eventQueue.isEmpty();\n        throw new YarnRuntimeException(e);\n      }\n    };\n","realPath":"hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"M"}],"commitId":"a967ab06f2e802f30ed34eb4ceb2742e4df8be52","commitMessage":"@@@YARN-10739. GenericEventHandler.printEventQueueDetails causes RM recovery to take too much time. Contributed by Qi Zhu.\n","date":"2021-04-27 20:01:53","modifiedFileCount":"2","status":"M","submitter":"Peter Bacsko"}]
