[{"authorTime":"2018-01-31 17:42:42","codes":[{"authorDate":"2018-01-31 17:42:42","commitOrder":1,"curCode":"  public void testMapReduceScheduling() throws Exception {\n\n    LOG.info(\"Running testMapReduceScheduling\");\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, SystemClock.getInstance());\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 1024);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    \r\n    ContainerRequestEvent event1 = createReq(jobId, 1, 2048, new String[] {\n        \"h1\", \"h2\" }, true, false);\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 = createReq(jobId, 2, 3000,\n        new String[] { \"h1\" }, false, true);\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerRequestEvent event3 = createReq(jobId, 3, 2048,\n        new String[] { \"h3\" }, false, false);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    checkAssignments(new ContainerRequestEvent[] { event1, event3 },\n        assigned, false);\n\n    \r\n    for (TaskAttemptContainerAssignedEvent assig : assigned) {\n      Assert.assertFalse(\"Assigned count not correct\", \"h1\".equals(assig\n          .getContainer().getNodeId().getHost()));\n    }\n  }\n","date":"2018-01-31 17:42:42","endLine":922,"groupId":"14605","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMapReduceScheduling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/78/75917b68eec03cc7f44ed43633ed880e626905.src","preCode":"  public void testMapReduceScheduling() throws Exception {\n\n    LOG.info(\"Running testMapReduceScheduling\");\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, SystemClock.getInstance());\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 1024);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    \r\n    ContainerRequestEvent event1 = createReq(jobId, 1, 2048, new String[] {\n        \"h1\", \"h2\" }, true, false);\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 = createReq(jobId, 2, 3000,\n        new String[] { \"h1\" }, false, true);\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerRequestEvent event3 = createReq(jobId, 3, 2048,\n        new String[] { \"h3\" }, false, false);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    checkAssignments(new ContainerRequestEvent[] { event1, event3 },\n        assigned, false);\n\n    \r\n    for (TaskAttemptContainerAssignedEvent assig : assigned) {\n      Assert.assertFalse(\"Assigned count not correct\", \"h1\".equals(assig\n          .getContainer().getNodeId().getHost()));\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":849,"status":"B"},{"authorDate":"2018-01-31 17:42:42","commitOrder":1,"curCode":"  public void testAttemptNotFoundCausesRMCommunicatorException()\n      throws Exception {\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    rm.killApp(app.getApplicationId());\n    rm.waitForState(app.getApplicationId(), RMAppState.KILLED);\n    allocator.schedule();\n  }\n","date":"2018-01-31 17:42:42","endLine":3101,"groupId":"14605","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAttemptNotFoundCausesRMCommunicatorException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/78/75917b68eec03cc7f44ed43633ed880e626905.src","preCode":"  public void testAttemptNotFoundCausesRMCommunicatorException()\n      throws Exception {\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    rm.killApp(app.getApplicationId());\n    rm.waitForState(app.getApplicationId(), RMAppState.KILLED);\n    allocator.schedule();\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":3069,"status":"B"}],"commitId":"8d1e2c6409a44f4515a1549ae82c7e2597e96467","commitMessage":"@@@Merge branch 'YARN-6592' into trunk\n","date":"2018-01-31 17:42:42","modifiedFileCount":"83","status":"B","submitter":"Arun Suresh"},{"authorTime":"2018-01-31 17:42:42","codes":[{"authorDate":"2018-05-11 00:31:59","commitOrder":2,"curCode":"  public void testMapReduceScheduling() throws Exception {\n\n    LOG.info(\"Running testMapReduceScheduling\");\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, SystemClock.getInstance());\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 1024);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    \r\n    ContainerRequestEvent event1 = createRequest(jobId, 1,\n            Resource.newInstance(2048, 1),\n            new String[] {\"h1\", \"h2\"}, true, false);\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 = createRequest(jobId, 2,\n            Resource.newInstance(3000, 1),\n            new String[] {\"h1\"}, false, true);\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerRequestEvent event3 = createRequest(jobId, 3,\n            Resource.newInstance(2048, 1),\n            new String[] {\"h3\"}, false, false);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    checkAssignments(new ContainerRequestEvent[] {event1, event3},\n        assigned, false);\n\n    \r\n    for (TaskAttemptContainerAssignedEvent assig : assigned) {\n      Assert.assertFalse(\"Assigned count not correct\", \"h1\".equals(assig\n          .getContainer().getNodeId().getHost()));\n    }\n  }\n","date":"2018-05-11 00:31:59","endLine":948,"groupId":"14605","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMapReduceScheduling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/42/7e6ea228f07be943dfedeb58106a10db30d900.src","preCode":"  public void testMapReduceScheduling() throws Exception {\n\n    LOG.info(\"Running testMapReduceScheduling\");\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, SystemClock.getInstance());\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 1024);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    \r\n    ContainerRequestEvent event1 = createReq(jobId, 1, 2048, new String[] {\n        \"h1\", \"h2\" }, true, false);\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 = createReq(jobId, 2, 3000,\n        new String[] { \"h1\" }, false, true);\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerRequestEvent event3 = createReq(jobId, 3, 2048,\n        new String[] { \"h3\" }, false, false);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    checkAssignments(new ContainerRequestEvent[] { event1, event3 },\n        assigned, false);\n\n    \r\n    for (TaskAttemptContainerAssignedEvent assig : assigned) {\n      Assert.assertFalse(\"Assigned count not correct\", \"h1\".equals(assig\n          .getContainer().getNodeId().getHost()));\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":872,"status":"M"},{"authorDate":"2018-01-31 17:42:42","commitOrder":2,"curCode":"  public void testAttemptNotFoundCausesRMCommunicatorException()\n      throws Exception {\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    rm.killApp(app.getApplicationId());\n    rm.waitForState(app.getApplicationId(), RMAppState.KILLED);\n    allocator.schedule();\n  }\n","date":"2018-01-31 17:42:42","endLine":3101,"groupId":"14605","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAttemptNotFoundCausesRMCommunicatorException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/78/75917b68eec03cc7f44ed43633ed880e626905.src","preCode":"  public void testAttemptNotFoundCausesRMCommunicatorException()\n      throws Exception {\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    rm.killApp(app.getApplicationId());\n    rm.waitForState(app.getApplicationId(), RMAppState.KILLED);\n    allocator.schedule();\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":3069,"status":"N"}],"commitId":"c8b53c43644b4ad22d5385c22cad8ed573c0b1ba","commitMessage":"@@@YARN-8202. DefaultAMSProcessor should properly check units of requested custom resource types against minimum/maximum allocation (snemeth via rkanter)\n","date":"2018-05-11 00:31:59","modifiedFileCount":"6","status":"M","submitter":"Robert Kanter"},{"authorTime":"2019-12-05 15:56:23","codes":[{"authorDate":"2019-12-05 15:56:23","commitOrder":3,"curCode":"  public void testMapReduceScheduling() throws Exception {\n\n    LOG.info(\"Running testMapReduceScheduling\");\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = MockRMAppSubmitter.submitWithMemory(1024, rm);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, SystemClock.getInstance());\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 1024);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    \r\n    ContainerRequestEvent event1 = createRequest(jobId, 1,\n            Resource.newInstance(2048, 1),\n            new String[] {\"h1\", \"h2\"}, true, false);\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 = createRequest(jobId, 2,\n            Resource.newInstance(3000, 1),\n            new String[] {\"h1\"}, false, true);\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerRequestEvent event3 = createRequest(jobId, 3,\n            Resource.newInstance(2048, 1),\n            new String[] {\"h3\"}, false, false);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    checkAssignments(new ContainerRequestEvent[] {event1, event3},\n        assigned, false);\n\n    \r\n    for (TaskAttemptContainerAssignedEvent assig : assigned) {\n      Assert.assertFalse(\"Assigned count not correct\", \"h1\".equals(assig\n          .getContainer().getNodeId().getHost()));\n    }\n  }\n","date":"2019-12-05 15:56:23","endLine":950,"groupId":"1087","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMapReduceScheduling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/75/798876ddaaa7cafee2d3dfa054c4a14d743fab.src","preCode":"  public void testMapReduceScheduling() throws Exception {\n\n    LOG.info(\"Running testMapReduceScheduling\");\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, SystemClock.getInstance());\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 1024);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    \r\n    ContainerRequestEvent event1 = createRequest(jobId, 1,\n            Resource.newInstance(2048, 1),\n            new String[] {\"h1\", \"h2\"}, true, false);\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 = createRequest(jobId, 2,\n            Resource.newInstance(3000, 1),\n            new String[] {\"h1\"}, false, true);\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerRequestEvent event3 = createRequest(jobId, 3,\n            Resource.newInstance(2048, 1),\n            new String[] {\"h3\"}, false, false);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    checkAssignments(new ContainerRequestEvent[] {event1, event3},\n        assigned, false);\n\n    \r\n    for (TaskAttemptContainerAssignedEvent assig : assigned) {\n      Assert.assertFalse(\"Assigned count not correct\", \"h1\".equals(assig\n          .getContainer().getNodeId().getHost()));\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":874,"status":"M"},{"authorDate":"2019-12-05 15:56:23","commitOrder":3,"curCode":"  public void testAttemptNotFoundCausesRMCommunicatorException()\n      throws Exception {\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = MockRMAppSubmitter.submitWithMemory(1024, rm);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    rm.killApp(app.getApplicationId());\n    rm.waitForState(app.getApplicationId(), RMAppState.KILLED);\n    allocator.schedule();\n  }\n","date":"2019-12-05 15:56:23","endLine":3169,"groupId":"1087","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAttemptNotFoundCausesRMCommunicatorException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/75/798876ddaaa7cafee2d3dfa054c4a14d743fab.src","preCode":"  public void testAttemptNotFoundCausesRMCommunicatorException()\n      throws Exception {\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    rm.killApp(app.getApplicationId());\n    rm.waitForState(app.getApplicationId(), RMAppState.KILLED);\n    allocator.schedule();\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":3137,"status":"M"}],"commitId":"682e6fdeda68b7244e92d32cd35fe317c9b32ede","commitMessage":"@@@YARN-9052. Replace all MockRM submit method definitions with a builder. Contributed by Szilard Nemeth.\n","date":"2019-12-05 15:56:23","modifiedFileCount":"86","status":"M","submitter":"Sunil G"}]
