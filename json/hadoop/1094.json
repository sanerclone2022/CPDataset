[{"authorTime":"2018-01-31 17:42:42","codes":[{"authorDate":"2018-01-31 17:42:42","commitOrder":1,"curCode":"  public void testReportedAppProgress() throws Exception {\n\n    LOG.info(\"Running testReportedAppProgress\");\n\n    Configuration conf = new Configuration();\n    final MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n    DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext()\n        .getDispatcher();\n\n    \r\n    RMApp rmApp = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 21504);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    MRApp mrApp = new MRApp(appAttemptId, ContainerId.newContainerId(\n      appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) {\n      @Override\n      protected Dispatcher createDispatcher() {\n        return new DrainDispatcher();\n      }\n      protected ContainerAllocator createContainerAllocator(\n          ClientService clientService, AppContext context) {\n        return new MyContainerAllocator(rm, appAttemptId, context);\n      };\n    };\n\n    Assert.assertEquals(0.0, rmApp.getProgress(), 0.0);\n\n    mrApp.submit(conf);\n    Job job = mrApp.getContext().getAllJobs().entrySet().iterator().next()\n        .getValue();\n\n    DrainDispatcher amDispatcher = (DrainDispatcher) mrApp.getDispatcher();\n\n    MyContainerAllocator allocator = (MyContainerAllocator) mrApp\n      .getContainerAllocator();\n\n    mrApp.waitForInternalState((JobImpl) job, JobStateInternal.RUNNING);\n\n    amDispatcher.await();\n    \r\n    for (Task t : job.getTasks().values()) {\n      if (t.getType() == TaskType.MAP) {\n        mrApp.waitForInternalState((TaskAttemptImpl) t.getAttempts().values()\n            .iterator().next(), TaskAttemptStateInternal.UNASSIGNED);\n      }\n    }\n    amDispatcher.await();\n\n    allocator.schedule();\n    rm.drainEvents();\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    for (Task t : job.getTasks().values()) {\n      if (t.getType() == TaskType.MAP) {\n        mrApp.waitForState(t, TaskState.RUNNING);\n      }\n    }\n\n    allocator.schedule(); \r\n    rm.drainEvents();\n    Assert.assertEquals(0.05f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.05f, rmApp.getProgress(), 0.001f);\n\n    \r\n    Iterator<Task> it = job.getTasks().values().iterator();\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 1);\n    allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(0.095f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.095f, rmApp.getProgress(), 0.001f);\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 7);\n    allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(0.41f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.41f, rmApp.getProgress(), 0.001f);\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2);\n\n    allocator.schedule();\n    rm.drainEvents();\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    for (Task t : job.getTasks().values()) {\n      if (t.getType() == TaskType.REDUCE) {\n        mrApp.waitForState(t, TaskState.RUNNING);\n      }\n    }\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2);\n\n    allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(0.59f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.59f, rmApp.getProgress(), 0.001f);\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 8);\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    Assert.assertEquals(0.95f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.95f, rmApp.getProgress(), 0.001f);\n  }\n","date":"2018-01-31 17:42:42","endLine":1100,"groupId":"27625","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReportedAppProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/78/75917b68eec03cc7f44ed43633ed880e626905.src","preCode":"  public void testReportedAppProgress() throws Exception {\n\n    LOG.info(\"Running testReportedAppProgress\");\n\n    Configuration conf = new Configuration();\n    final MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n    DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext()\n        .getDispatcher();\n\n    \r\n    RMApp rmApp = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 21504);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    MRApp mrApp = new MRApp(appAttemptId, ContainerId.newContainerId(\n      appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) {\n      @Override\n      protected Dispatcher createDispatcher() {\n        return new DrainDispatcher();\n      }\n      protected ContainerAllocator createContainerAllocator(\n          ClientService clientService, AppContext context) {\n        return new MyContainerAllocator(rm, appAttemptId, context);\n      };\n    };\n\n    Assert.assertEquals(0.0, rmApp.getProgress(), 0.0);\n\n    mrApp.submit(conf);\n    Job job = mrApp.getContext().getAllJobs().entrySet().iterator().next()\n        .getValue();\n\n    DrainDispatcher amDispatcher = (DrainDispatcher) mrApp.getDispatcher();\n\n    MyContainerAllocator allocator = (MyContainerAllocator) mrApp\n      .getContainerAllocator();\n\n    mrApp.waitForInternalState((JobImpl) job, JobStateInternal.RUNNING);\n\n    amDispatcher.await();\n    \r\n    for (Task t : job.getTasks().values()) {\n      if (t.getType() == TaskType.MAP) {\n        mrApp.waitForInternalState((TaskAttemptImpl) t.getAttempts().values()\n            .iterator().next(), TaskAttemptStateInternal.UNASSIGNED);\n      }\n    }\n    amDispatcher.await();\n\n    allocator.schedule();\n    rm.drainEvents();\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    for (Task t : job.getTasks().values()) {\n      if (t.getType() == TaskType.MAP) {\n        mrApp.waitForState(t, TaskState.RUNNING);\n      }\n    }\n\n    allocator.schedule(); \r\n    rm.drainEvents();\n    Assert.assertEquals(0.05f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.05f, rmApp.getProgress(), 0.001f);\n\n    \r\n    Iterator<Task> it = job.getTasks().values().iterator();\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 1);\n    allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(0.095f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.095f, rmApp.getProgress(), 0.001f);\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 7);\n    allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(0.41f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.41f, rmApp.getProgress(), 0.001f);\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2);\n\n    allocator.schedule();\n    rm.drainEvents();\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    for (Task t : job.getTasks().values()) {\n      if (t.getType() == TaskType.REDUCE) {\n        mrApp.waitForState(t, TaskState.RUNNING);\n      }\n    }\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2);\n\n    allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(0.59f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.59f, rmApp.getProgress(), 0.001f);\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 8);\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    Assert.assertEquals(0.95f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.95f, rmApp.getProgress(), 0.001f);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":976,"status":"B"},{"authorDate":"2018-01-31 17:42:42","commitOrder":1,"curCode":"  public void testUnregistrationOnlyIfRegistered() throws Exception {\n    Configuration conf = new Configuration();\n    final MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp rmApp = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"127.0.0.1:1234\", 11264);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    final ApplicationAttemptId appAttemptId =\n        rmApp.getCurrentAppAttempt().getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    MRApp mrApp =\n        new MRApp(appAttemptId, ContainerId.newContainerId(appAttemptId, 0), 10,\n            0, false, this.getClass().getName(), true, 1) {\n          @Override\n          protected Dispatcher createDispatcher() {\n            return new DrainDispatcher();\n          }\n\n          protected ContainerAllocator createContainerAllocator(\n              ClientService clientService, AppContext context) {\n            return new MyContainerAllocator(rm, appAttemptId, context);\n          };\n        };\n\n    mrApp.submit(conf);\n    DrainDispatcher amDispatcher = (DrainDispatcher) mrApp.getDispatcher();\n    MyContainerAllocator allocator =\n        (MyContainerAllocator) mrApp.getContainerAllocator();\n    amDispatcher.await();\n    Assert.assertTrue(allocator.isApplicationMasterRegistered());\n    mrApp.stop();\n    Assert.assertTrue(allocator.isUnregistered());\n  }\n","date":"2018-01-31 17:42:42","endLine":2485,"groupId":"24798","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnregistrationOnlyIfRegistered","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/78/75917b68eec03cc7f44ed43633ed880e626905.src","preCode":"  public void testUnregistrationOnlyIfRegistered() throws Exception {\n    Configuration conf = new Configuration();\n    final MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp rmApp = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"127.0.0.1:1234\", 11264);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    final ApplicationAttemptId appAttemptId =\n        rmApp.getCurrentAppAttempt().getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    MRApp mrApp =\n        new MRApp(appAttemptId, ContainerId.newContainerId(appAttemptId, 0), 10,\n            0, false, this.getClass().getName(), true, 1) {\n          @Override\n          protected Dispatcher createDispatcher() {\n            return new DrainDispatcher();\n          }\n\n          protected ContainerAllocator createContainerAllocator(\n              ClientService clientService, AppContext context) {\n            return new MyContainerAllocator(rm, appAttemptId, context);\n          };\n        };\n\n    mrApp.submit(conf);\n    DrainDispatcher amDispatcher = (DrainDispatcher) mrApp.getDispatcher();\n    MyContainerAllocator allocator =\n        (MyContainerAllocator) mrApp.getContainerAllocator();\n    amDispatcher.await();\n    Assert.assertTrue(allocator.isApplicationMasterRegistered());\n    mrApp.stop();\n    Assert.assertTrue(allocator.isUnregistered());\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":2445,"status":"B"}],"commitId":"8d1e2c6409a44f4515a1549ae82c7e2597e96467","commitMessage":"@@@Merge branch 'YARN-6592' into trunk\n","date":"2018-01-31 17:42:42","modifiedFileCount":"83","status":"B","submitter":"Arun Suresh"},{"authorTime":"2019-12-05 15:56:23","codes":[{"authorDate":"2019-12-05 15:56:23","commitOrder":2,"curCode":"  public void testReportedAppProgress() throws Exception {\n\n    LOG.info(\"Running testReportedAppProgress\");\n\n    Configuration conf = new Configuration();\n    final MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n    DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext()\n        .getDispatcher();\n\n    \r\n    RMApp rmApp = MockRMAppSubmitter.submitWithMemory(1024, rm);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 21504);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    MRApp mrApp = new MRApp(appAttemptId, ContainerId.newContainerId(\n      appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) {\n      @Override\n      protected Dispatcher createDispatcher() {\n        return new DrainDispatcher();\n      }\n      protected ContainerAllocator createContainerAllocator(\n          ClientService clientService, AppContext context) {\n        return new MyContainerAllocator(rm, appAttemptId, context);\n      };\n    };\n\n    Assert.assertEquals(0.0, rmApp.getProgress(), 0.0);\n\n    mrApp.submit(conf);\n    Job job = mrApp.getContext().getAllJobs().entrySet().iterator().next()\n        .getValue();\n\n    DrainDispatcher amDispatcher = (DrainDispatcher) mrApp.getDispatcher();\n\n    MyContainerAllocator allocator = (MyContainerAllocator) mrApp\n      .getContainerAllocator();\n\n    mrApp.waitForInternalState((JobImpl) job, JobStateInternal.RUNNING);\n\n    amDispatcher.await();\n    \r\n    for (Task t : job.getTasks().values()) {\n      if (t.getType() == TaskType.MAP) {\n        mrApp.waitForInternalState((TaskAttemptImpl) t.getAttempts().values()\n            .iterator().next(), TaskAttemptStateInternal.UNASSIGNED);\n      }\n    }\n    amDispatcher.await();\n\n    allocator.schedule();\n    rm.drainEvents();\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    for (Task t : job.getTasks().values()) {\n      if (t.getType() == TaskType.MAP) {\n        mrApp.waitForState(t, TaskState.RUNNING);\n      }\n    }\n\n    allocator.schedule(); \r\n    rm.drainEvents();\n    Assert.assertEquals(0.05f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.05f, rmApp.getProgress(), 0.001f);\n\n    \r\n    Iterator<Task> it = job.getTasks().values().iterator();\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 1);\n    allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(0.095f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.095f, rmApp.getProgress(), 0.001f);\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 7);\n    allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(0.41f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.41f, rmApp.getProgress(), 0.001f);\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2);\n\n    allocator.schedule();\n    rm.drainEvents();\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    for (Task t : job.getTasks().values()) {\n      if (t.getType() == TaskType.REDUCE) {\n        mrApp.waitForState(t, TaskState.RUNNING);\n      }\n    }\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2);\n\n    allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(0.59f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.59f, rmApp.getProgress(), 0.001f);\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 8);\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    Assert.assertEquals(0.95f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.95f, rmApp.getProgress(), 0.001f);\n  }\n","date":"2019-12-05 15:56:23","endLine":1128,"groupId":"1094","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReportedAppProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/75/798876ddaaa7cafee2d3dfa054c4a14d743fab.src","preCode":"  public void testReportedAppProgress() throws Exception {\n\n    LOG.info(\"Running testReportedAppProgress\");\n\n    Configuration conf = new Configuration();\n    final MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n    DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext()\n        .getDispatcher();\n\n    \r\n    RMApp rmApp = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 21504);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    MRApp mrApp = new MRApp(appAttemptId, ContainerId.newContainerId(\n      appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) {\n      @Override\n      protected Dispatcher createDispatcher() {\n        return new DrainDispatcher();\n      }\n      protected ContainerAllocator createContainerAllocator(\n          ClientService clientService, AppContext context) {\n        return new MyContainerAllocator(rm, appAttemptId, context);\n      };\n    };\n\n    Assert.assertEquals(0.0, rmApp.getProgress(), 0.0);\n\n    mrApp.submit(conf);\n    Job job = mrApp.getContext().getAllJobs().entrySet().iterator().next()\n        .getValue();\n\n    DrainDispatcher amDispatcher = (DrainDispatcher) mrApp.getDispatcher();\n\n    MyContainerAllocator allocator = (MyContainerAllocator) mrApp\n      .getContainerAllocator();\n\n    mrApp.waitForInternalState((JobImpl) job, JobStateInternal.RUNNING);\n\n    amDispatcher.await();\n    \r\n    for (Task t : job.getTasks().values()) {\n      if (t.getType() == TaskType.MAP) {\n        mrApp.waitForInternalState((TaskAttemptImpl) t.getAttempts().values()\n            .iterator().next(), TaskAttemptStateInternal.UNASSIGNED);\n      }\n    }\n    amDispatcher.await();\n\n    allocator.schedule();\n    rm.drainEvents();\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    for (Task t : job.getTasks().values()) {\n      if (t.getType() == TaskType.MAP) {\n        mrApp.waitForState(t, TaskState.RUNNING);\n      }\n    }\n\n    allocator.schedule(); \r\n    rm.drainEvents();\n    Assert.assertEquals(0.05f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.05f, rmApp.getProgress(), 0.001f);\n\n    \r\n    Iterator<Task> it = job.getTasks().values().iterator();\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 1);\n    allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(0.095f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.095f, rmApp.getProgress(), 0.001f);\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 7);\n    allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(0.41f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.41f, rmApp.getProgress(), 0.001f);\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2);\n\n    allocator.schedule();\n    rm.drainEvents();\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    for (Task t : job.getTasks().values()) {\n      if (t.getType() == TaskType.REDUCE) {\n        mrApp.waitForState(t, TaskState.RUNNING);\n      }\n    }\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2);\n\n    allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(0.59f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.59f, rmApp.getProgress(), 0.001f);\n\n    \r\n    finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 8);\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    Assert.assertEquals(0.95f, job.getProgress(), 0.001f);\n    Assert.assertEquals(0.95f, rmApp.getProgress(), 0.001f);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":1004,"status":"M"},{"authorDate":"2019-12-05 15:56:23","commitOrder":2,"curCode":"  public void testUnregistrationOnlyIfRegistered() throws Exception {\n    Configuration conf = new Configuration();\n    final MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp rmApp = MockRMAppSubmitter.submitWithMemory(1024, rm);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"127.0.0.1:1234\", 11264);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    final ApplicationAttemptId appAttemptId =\n        rmApp.getCurrentAppAttempt().getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    MRApp mrApp =\n        new MRApp(appAttemptId, ContainerId.newContainerId(appAttemptId, 0), 10,\n            0, false, this.getClass().getName(), true, 1) {\n          @Override\n          protected Dispatcher createDispatcher() {\n            return new DrainDispatcher();\n          }\n\n          protected ContainerAllocator createContainerAllocator(\n              ClientService clientService, AppContext context) {\n            return new MyContainerAllocator(rm, appAttemptId, context);\n          };\n        };\n\n    mrApp.submit(conf);\n    DrainDispatcher amDispatcher = (DrainDispatcher) mrApp.getDispatcher();\n    MyContainerAllocator allocator =\n        (MyContainerAllocator) mrApp.getContainerAllocator();\n    amDispatcher.await();\n    Assert.assertTrue(allocator.isApplicationMasterRegistered());\n    mrApp.stop();\n    Assert.assertTrue(allocator.isUnregistered());\n  }\n","date":"2019-12-05 15:56:23","endLine":2534,"groupId":"1094","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnregistrationOnlyIfRegistered","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/75/798876ddaaa7cafee2d3dfa054c4a14d743fab.src","preCode":"  public void testUnregistrationOnlyIfRegistered() throws Exception {\n    Configuration conf = new Configuration();\n    final MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp rmApp = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"127.0.0.1:1234\", 11264);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    final ApplicationAttemptId appAttemptId =\n        rmApp.getCurrentAppAttempt().getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    MRApp mrApp =\n        new MRApp(appAttemptId, ContainerId.newContainerId(appAttemptId, 0), 10,\n            0, false, this.getClass().getName(), true, 1) {\n          @Override\n          protected Dispatcher createDispatcher() {\n            return new DrainDispatcher();\n          }\n\n          protected ContainerAllocator createContainerAllocator(\n              ClientService clientService, AppContext context) {\n            return new MyContainerAllocator(rm, appAttemptId, context);\n          };\n        };\n\n    mrApp.submit(conf);\n    DrainDispatcher amDispatcher = (DrainDispatcher) mrApp.getDispatcher();\n    MyContainerAllocator allocator =\n        (MyContainerAllocator) mrApp.getContainerAllocator();\n    amDispatcher.await();\n    Assert.assertTrue(allocator.isApplicationMasterRegistered());\n    mrApp.stop();\n    Assert.assertTrue(allocator.isUnregistered());\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":2494,"status":"M"}],"commitId":"682e6fdeda68b7244e92d32cd35fe317c9b32ede","commitMessage":"@@@YARN-9052. Replace all MockRM submit method definitions with a builder. Contributed by Szilard Nemeth.\n","date":"2019-12-05 15:56:23","modifiedFileCount":"86","status":"M","submitter":"Sunil G"}]
