[{"authorTime":"2018-01-31 17:42:42","codes":[{"authorDate":"2018-01-31 17:42:42","commitOrder":1,"curCode":"  public void testResource() throws Exception {\n\n    LOG.info(\"Running testResource\");\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 10240);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 = createReq(jobId, 1, 1024,\n        new String[] { \"h1\" });\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 = createReq(jobId, 2, 2048,\n        new String[] { \"h2\" });\n    allocator.sendRequest(event2);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    checkAssignments(new ContainerRequestEvent[] { event1, event2 },\n        assigned, false);\n  }\n","date":"2018-01-31 17:42:42","endLine":409,"groupId":"14603","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/78/75917b68eec03cc7f44ed43633ed880e626905.src","preCode":"  public void testResource() throws Exception {\n\n    LOG.info(\"Running testResource\");\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 10240);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 = createReq(jobId, 1, 1024,\n        new String[] { \"h1\" });\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 = createReq(jobId, 2, 2048,\n        new String[] { \"h2\" });\n    allocator.sendRequest(event2);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    checkAssignments(new ContainerRequestEvent[] { event1, event2 },\n        assigned, false);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"B"},{"authorDate":"2018-01-31 17:42:42","commitOrder":1,"curCode":"  public void testBlackListedNodes() throws Exception {\n    \n    LOG.info(\"Running testBlackListedNodes\");\n\n    Configuration conf = new Configuration();\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE, true);\n    conf.setInt(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER, 1);\n    conf.setInt(\n        MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT, -1);\n    \n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n    \n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 10240);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 = createReq(jobId, 1, 1024,\n        new String[] { \"h1\" });\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 = createReq(jobId, 2, 1024,\n        new String[] { \"h2\" });\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerRequestEvent event3 = createReq(jobId, 3, 1024,\n        new String[] { \"h3\" });\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    ContainerFailedEvent f1 = createFailEvent(jobId, 1, \"h1\", false);            \n    allocator.sendFailure(f1);\n    ContainerFailedEvent f2 = createFailEvent(jobId, 1, \"h2\", false);            \n    allocator.sendFailure(f2);\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n    assertBlacklistAdditionsAndRemovals(2, 0, rm);\n\n    \r\n    nodeManager1.nodeHeartbeat(false);\n    nodeManager2.nodeHeartbeat(false);\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    assertBlacklistAdditionsAndRemovals(0, 0, rm);\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());    \n\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    assertBlacklistAdditionsAndRemovals(0, 0, rm);\n        \n    Assert.assertTrue(\"No of assignments must be 3\", assigned.size() == 3);\n    \n    \r\n    for (TaskAttemptContainerAssignedEvent assig : assigned) {\n      Assert.assertTrue(\"Assigned container host not correct\", \"h3\".equals(assig\n          .getContainer().getNodeId().getHost()));\n    }\n  }\n","date":"2018-01-31 17:42:42","endLine":1410,"groupId":"14603","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlackListedNodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/78/75917b68eec03cc7f44ed43633ed880e626905.src","preCode":"  public void testBlackListedNodes() throws Exception {\n    \n    LOG.info(\"Running testBlackListedNodes\");\n\n    Configuration conf = new Configuration();\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE, true);\n    conf.setInt(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER, 1);\n    conf.setInt(\n        MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT, -1);\n    \n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n    \n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 10240);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 = createReq(jobId, 1, 1024,\n        new String[] { \"h1\" });\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 = createReq(jobId, 2, 1024,\n        new String[] { \"h2\" });\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerRequestEvent event3 = createReq(jobId, 3, 1024,\n        new String[] { \"h3\" });\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    ContainerFailedEvent f1 = createFailEvent(jobId, 1, \"h1\", false);            \n    allocator.sendFailure(f1);\n    ContainerFailedEvent f2 = createFailEvent(jobId, 1, \"h2\", false);            \n    allocator.sendFailure(f2);\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n    assertBlacklistAdditionsAndRemovals(2, 0, rm);\n\n    \r\n    nodeManager1.nodeHeartbeat(false);\n    nodeManager2.nodeHeartbeat(false);\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    assertBlacklistAdditionsAndRemovals(0, 0, rm);\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());    \n\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    assertBlacklistAdditionsAndRemovals(0, 0, rm);\n        \n    Assert.assertTrue(\"No of assignments must be 3\", assigned.size() == 3);\n    \n    \r\n    for (TaskAttemptContainerAssignedEvent assig : assigned) {\n      Assert.assertTrue(\"Assigned container host not correct\", \"h3\".equals(assig\n          .getContainer().getNodeId().getHost()));\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":1309,"status":"B"}],"commitId":"8d1e2c6409a44f4515a1549ae82c7e2597e96467","commitMessage":"@@@Merge branch 'YARN-6592' into trunk\n","date":"2018-01-31 17:42:42","modifiedFileCount":"83","status":"B","submitter":"Arun Suresh"},{"authorTime":"2018-05-11 00:31:59","codes":[{"authorDate":"2018-05-11 00:31:59","commitOrder":2,"curCode":"  public void testResource() throws Exception {\n\n    LOG.info(\"Running testResource\");\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 10240);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 = ContainerRequestCreator.createRequest(\n            jobId, 1, Resource.newInstance(1024, 1),\n        new String[] {\"h1\"});\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 = ContainerRequestCreator.createRequest(\n            jobId, 2, Resource.newInstance(1024, 1),\n        new String[] {\"h2\"});\n    allocator.sendRequest(event2);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    checkAssignments(new ContainerRequestEvent[] {event1, event2},\n        assigned, false);\n  }\n","date":"2018-05-11 00:31:59","endLine":414,"groupId":"14603","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/42/7e6ea228f07be943dfedeb58106a10db30d900.src","preCode":"  public void testResource() throws Exception {\n\n    LOG.info(\"Running testResource\");\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 10240);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 = createReq(jobId, 1, 1024,\n        new String[] { \"h1\" });\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 = createReq(jobId, 2, 2048,\n        new String[] { \"h2\" });\n    allocator.sendRequest(event2);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    checkAssignments(new ContainerRequestEvent[] { event1, event2 },\n        assigned, false);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"M"},{"authorDate":"2018-05-11 00:31:59","commitOrder":2,"curCode":"  public void testBlackListedNodes() throws Exception {\n\n    LOG.info(\"Running testBlackListedNodes\");\n\n    Configuration conf = new Configuration();\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE, true);\n    conf.setInt(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER, 1);\n    conf.setInt(\n        MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT, -1);\n\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 10240);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 =\n            ContainerRequestCreator.createRequest(jobId, 1,\n                    Resource.newInstance(1024, 1),\n                    new String[] {\"h1\"});\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 =\n            ContainerRequestCreator.createRequest(jobId, 2,\n                    Resource.newInstance(1024, 1),\n                    new String[] {\"h2\"});\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerRequestEvent event3 =\n            ContainerRequestCreator.createRequest(jobId, 3,\n                    Resource.newInstance(1024, 1),\n                    new String[] {\"h3\"});\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    ContainerFailedEvent f1 = createFailEvent(jobId, 1, \"h1\", false);\n    allocator.sendFailure(f1);\n    ContainerFailedEvent f2 = createFailEvent(jobId, 1, \"h2\", false);\n    allocator.sendFailure(f2);\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n    assertBlacklistAdditionsAndRemovals(2, 0, rm);\n\n    \r\n    nodeManager1.nodeHeartbeat(false);\n    nodeManager2.nodeHeartbeat(false);\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    assertBlacklistAdditionsAndRemovals(0, 0, rm);\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    assertBlacklistAdditionsAndRemovals(0, 0, rm);\n\n    Assert.assertTrue(\"No of assignments must be 3\", assigned.size() == 3);\n\n    \r\n    for (TaskAttemptContainerAssignedEvent assig : assigned) {\n      Assert.assertTrue(\"Assigned container host not correct\", \"h3\".equals(assig\n          .getContainer().getNodeId().getHost()));\n    }\n  }\n","date":"2018-05-11 00:31:59","endLine":1446,"groupId":"14603","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlackListedNodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/42/7e6ea228f07be943dfedeb58106a10db30d900.src","preCode":"  public void testBlackListedNodes() throws Exception {\n    \n    LOG.info(\"Running testBlackListedNodes\");\n\n    Configuration conf = new Configuration();\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE, true);\n    conf.setInt(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER, 1);\n    conf.setInt(\n        MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT, -1);\n    \n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n    \n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 10240);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 = createReq(jobId, 1, 1024,\n        new String[] { \"h1\" });\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 = createReq(jobId, 2, 1024,\n        new String[] { \"h2\" });\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerRequestEvent event3 = createReq(jobId, 3, 1024,\n        new String[] { \"h3\" });\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    ContainerFailedEvent f1 = createFailEvent(jobId, 1, \"h1\", false);            \n    allocator.sendFailure(f1);\n    ContainerFailedEvent f2 = createFailEvent(jobId, 1, \"h2\", false);            \n    allocator.sendFailure(f2);\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n    assertBlacklistAdditionsAndRemovals(2, 0, rm);\n\n    \r\n    nodeManager1.nodeHeartbeat(false);\n    nodeManager2.nodeHeartbeat(false);\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    assertBlacklistAdditionsAndRemovals(0, 0, rm);\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());    \n\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    assertBlacklistAdditionsAndRemovals(0, 0, rm);\n        \n    Assert.assertTrue(\"No of assignments must be 3\", assigned.size() == 3);\n    \n    \r\n    for (TaskAttemptContainerAssignedEvent assig : assigned) {\n      Assert.assertTrue(\"Assigned container host not correct\", \"h3\".equals(assig\n          .getContainer().getNodeId().getHost()));\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":1339,"status":"M"}],"commitId":"c8b53c43644b4ad22d5385c22cad8ed573c0b1ba","commitMessage":"@@@YARN-8202. DefaultAMSProcessor should properly check units of requested custom resource types against minimum/maximum allocation (snemeth via rkanter)\n","date":"2018-05-11 00:31:59","modifiedFileCount":"6","status":"M","submitter":"Robert Kanter"},{"authorTime":"2019-12-05 15:56:23","codes":[{"authorDate":"2019-12-05 15:56:23","commitOrder":3,"curCode":"  public void testResource() throws Exception {\n\n    LOG.info(\"Running testResource\");\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = MockRMAppSubmitter.submitWithMemory(1024, rm);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 10240);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 = ContainerRequestCreator.createRequest(\n            jobId, 1, Resource.newInstance(1024, 1),\n        new String[] {\"h1\"});\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 = ContainerRequestCreator.createRequest(\n            jobId, 2, Resource.newInstance(1024, 1),\n        new String[] {\"h2\"});\n    allocator.sendRequest(event2);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    checkAssignments(new ContainerRequestEvent[] {event1, event2},\n        assigned, false);\n  }\n","date":"2019-12-05 15:56:23","endLine":416,"groupId":"1090","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/75/798876ddaaa7cafee2d3dfa054c4a14d743fab.src","preCode":"  public void testResource() throws Exception {\n\n    LOG.info(\"Running testResource\");\n\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 10240);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 = ContainerRequestCreator.createRequest(\n            jobId, 1, Resource.newInstance(1024, 1),\n        new String[] {\"h1\"});\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 = ContainerRequestCreator.createRequest(\n            jobId, 2, Resource.newInstance(1024, 1),\n        new String[] {\"h2\"});\n    allocator.sendRequest(event2);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    checkAssignments(new ContainerRequestEvent[] {event1, event2},\n        assigned, false);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"M"},{"authorDate":"2019-12-05 15:56:23","commitOrder":3,"curCode":"  public void testBlackListedNodes() throws Exception {\n\n    LOG.info(\"Running testBlackListedNodes\");\n\n    Configuration conf = new Configuration();\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE, true);\n    conf.setInt(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER, 1);\n    conf.setInt(\n        MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT, -1);\n\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = MockRMAppSubmitter.submitWithMemory(1024, rm);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 10240);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 =\n            ContainerRequestCreator.createRequest(jobId, 1,\n                    Resource.newInstance(1024, 1),\n                    new String[] {\"h1\"});\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 =\n            ContainerRequestCreator.createRequest(jobId, 2,\n                    Resource.newInstance(1024, 1),\n                    new String[] {\"h2\"});\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerRequestEvent event3 =\n            ContainerRequestCreator.createRequest(jobId, 3,\n                    Resource.newInstance(1024, 1),\n                    new String[] {\"h3\"});\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    ContainerFailedEvent f1 = createFailEvent(jobId, 1, \"h1\", false);\n    allocator.sendFailure(f1);\n    ContainerFailedEvent f2 = createFailEvent(jobId, 1, \"h2\", false);\n    allocator.sendFailure(f2);\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n    assertBlacklistAdditionsAndRemovals(2, 0, rm);\n\n    \r\n    nodeManager1.nodeHeartbeat(false);\n    nodeManager2.nodeHeartbeat(false);\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    assertBlacklistAdditionsAndRemovals(0, 0, rm);\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    assertBlacklistAdditionsAndRemovals(0, 0, rm);\n\n    Assert.assertTrue(\"No of assignments must be 3\", assigned.size() == 3);\n\n    \r\n    for (TaskAttemptContainerAssignedEvent assig : assigned) {\n      Assert.assertTrue(\"Assigned container host not correct\", \"h3\".equals(assig\n          .getContainer().getNodeId().getHost()));\n    }\n  }\n","date":"2019-12-05 15:56:23","endLine":1448,"groupId":"1090","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlackListedNodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/75/798876ddaaa7cafee2d3dfa054c4a14d743fab.src","preCode":"  public void testBlackListedNodes() throws Exception {\n\n    LOG.info(\"Running testBlackListedNodes\");\n\n    Configuration conf = new Configuration();\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE, true);\n    conf.setInt(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER, 1);\n    conf.setInt(\n        MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT, -1);\n\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n\n    \r\n    MockNM nodeManager1 = rm.registerNode(\"h1:1234\", 10240);\n    MockNM nodeManager2 = rm.registerNode(\"h2:1234\", 10240);\n    MockNM nodeManager3 = rm.registerNode(\"h3:1234\", 10240);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 =\n            ContainerRequestCreator.createRequest(jobId, 1,\n                    Resource.newInstance(1024, 1),\n                    new String[] {\"h1\"});\n    allocator.sendRequest(event1);\n\n    \r\n    ContainerRequestEvent event2 =\n            ContainerRequestCreator.createRequest(jobId, 2,\n                    Resource.newInstance(1024, 1),\n                    new String[] {\"h2\"});\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerRequestEvent event3 =\n            ContainerRequestCreator.createRequest(jobId, 3,\n                    Resource.newInstance(1024, 1),\n                    new String[] {\"h3\"});\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    \r\n    ContainerFailedEvent f1 = createFailEvent(jobId, 1, \"h1\", false);\n    allocator.sendFailure(f1);\n    ContainerFailedEvent f2 = createFailEvent(jobId, 1, \"h2\", false);\n    allocator.sendFailure(f2);\n\n    \r\n    nodeManager1.nodeHeartbeat(true); \r\n    nodeManager2.nodeHeartbeat(true); \r\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n    rm.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n    assertBlacklistAdditionsAndRemovals(2, 0, rm);\n\n    \r\n    nodeManager1.nodeHeartbeat(false);\n    nodeManager2.nodeHeartbeat(false);\n    rm.drainEvents();\n\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    assertBlacklistAdditionsAndRemovals(0, 0, rm);\n    Assert.assertEquals(\"No of assignments must be 0\", 0, assigned.size());\n\n    nodeManager3.nodeHeartbeat(true); \r\n    rm.drainEvents();\n    assigned = allocator.schedule();\n    rm.drainEvents();\n    assertBlacklistAdditionsAndRemovals(0, 0, rm);\n\n    Assert.assertTrue(\"No of assignments must be 3\", assigned.size() == 3);\n\n    \r\n    for (TaskAttemptContainerAssignedEvent assig : assigned) {\n      Assert.assertTrue(\"Assigned container host not correct\", \"h3\".equals(assig\n          .getContainer().getNodeId().getHost()));\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":1341,"status":"M"}],"commitId":"682e6fdeda68b7244e92d32cd35fe317c9b32ede","commitMessage":"@@@YARN-9052. Replace all MockRM submit method definitions with a builder. Contributed by Szilard Nemeth.\n","date":"2019-12-05 15:56:23","modifiedFileCount":"86","status":"M","submitter":"Sunil G"}]
