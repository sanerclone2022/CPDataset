[{"authorTime":"2018-01-31 17:42:42","codes":[{"authorDate":"2018-01-31 17:42:42","commitOrder":1,"curCode":"  public void testRMContainerAllocatorResendsRequestsOnRMRestart()\n      throws Exception {\n\n    Configuration conf = new Configuration();\n    conf.set(YarnConfiguration.RECOVERY_ENABLED, \"true\");\n    conf.set(YarnConfiguration.RM_STORE, MemoryRMStateStore.class.getName());\n    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, true);\n    conf.setLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS, 0);\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE, true);\n    conf.setInt(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER, 1);\n    conf.setInt(\n        MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT, -1);\n\n    MyResourceManager rm1 = new MyResourceManager(conf);\n    rm1.start();\n\n    \r\n    RMApp app = rm1.submitApp(1024);\n    rm1.drainEvents();\n\n    MockNM nm1 = new MockNM(\"h1:1234\", 15120, rm1.getResourceTrackerService());\n    nm1.registerNode();\n    nm1.nodeHeartbeat(true); \r\n    rm1.drainEvents();\n\n    ApplicationAttemptId appAttemptId =\n        app.getCurrentAppAttempt().getAppAttemptId();\n    rm1.sendAMLaunched(appAttemptId);\n    rm1.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator =\n        new MyContainerAllocator(rm1, conf, appAttemptId, mockJob);\n\n    \r\n    \r\n    \r\n    \r\n    ContainerRequestEvent event1 =\n        createReq(jobId, 1, 1024, new String[] { \"h1\" });\n    allocator.sendRequest(event1);\n\n    ContainerRequestEvent event2 =\n        createReq(jobId, 2, 2048, new String[] { \"h1\", \"h2\" });\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerFailedEvent f1 = createFailEvent(jobId, 1, \"h2\", false);\n    allocator.sendFailure(f1);\n\n    \r\n    List<TaskAttemptContainerAssignedEvent> assignedContainers =\n        allocator.schedule();\n    rm1.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    \r\n    assertAsksAndReleases(3, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(1, 0, rm1);\n\n    nm1.nodeHeartbeat(true); \r\n    rm1.drainEvents();\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm1.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 2\", 2,\n        assignedContainers.size());\n    assertAsksAndReleases(0, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    assignedContainers = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    assertAsksAndReleases(3, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    \r\n    \r\n    \r\n    ContainerRequestEvent event3 =\n        createReq(jobId, 3, 1000, new String[] { \"h1\" });\n    allocator.sendRequest(event3);\n\n    \r\n    ContainerAllocatorEvent deallocate1 =\n        createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate1);\n\n    assignedContainers = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    assertAsksAndReleases(3, 1, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    \r\n    MyResourceManager rm2 = new MyResourceManager(conf, rm1.getRMStateStore());\n    rm2.start();\n    nm1.setResourceTrackerService(rm2.getResourceTrackerService());\n    allocator.updateSchedulerProxy(rm2);\n\n    \r\n    NodeHeartbeatResponse hbResponse = nm1.nodeHeartbeat(true);\n    Assert.assertEquals(NodeAction.RESYNC, hbResponse.getNodeAction());\n\n    \r\n    nm1 = new MockNM(\"h1:1234\", 10240, rm2.getResourceTrackerService());\n    nm1.registerNode();\n    nm1.nodeHeartbeat(true);\n    rm2.drainEvents();\n\n    \r\n    \r\n    \r\n\n    \r\n    ContainerAllocatorEvent deallocate2 =\n        createDeallocateEvent(jobId, 2, false);\n    allocator.sendDeallocate(deallocate2);\n\n    \r\n    ContainerFailedEvent f2 = createFailEvent(jobId, 1, \"h3\", false);\n    allocator.sendFailure(f2);\n\n    ContainerRequestEvent event4 =\n        createReq(jobId, 4, 2000, new String[] { \"h1\", \"h2\" });\n    allocator.sendRequest(event4);\n\n    \r\n    allocator.schedule();\n    rm2.drainEvents();\n\n    \r\n    \r\n    \r\n    ContainerRequestEvent event5 =\n        createReq(jobId, 5, 3000, new String[] { \"h1\", \"h2\", \"h3\" });\n    allocator.sendRequest(event5);\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm2.drainEvents();\n    assertAsksAndReleases(3, 2, rm2);\n    assertBlacklistAdditionsAndRemovals(2, 0, rm2);\n\n    nm1.nodeHeartbeat(true);\n    rm2.drainEvents();\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm2.drainEvents();\n\n    Assert.assertEquals(\"Number of container should be 3\", 3,\n        assignedContainers.size());\n\n    for (TaskAttemptContainerAssignedEvent assig : assignedContainers) {\n      Assert.assertTrue(\"Assigned count not correct\",\n          \"h1\".equals(assig.getContainer().getNodeId().getHost()));\n    }\n\n    rm1.stop();\n    rm2.stop();\n\n  }\n","date":"2018-01-31 17:42:42","endLine":2669,"groupId":"24614","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRMContainerAllocatorResendsRequestsOnRMRestart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/78/75917b68eec03cc7f44ed43633ed880e626905.src","preCode":"  public void testRMContainerAllocatorResendsRequestsOnRMRestart()\n      throws Exception {\n\n    Configuration conf = new Configuration();\n    conf.set(YarnConfiguration.RECOVERY_ENABLED, \"true\");\n    conf.set(YarnConfiguration.RM_STORE, MemoryRMStateStore.class.getName());\n    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, true);\n    conf.setLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS, 0);\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE, true);\n    conf.setInt(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER, 1);\n    conf.setInt(\n        MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT, -1);\n\n    MyResourceManager rm1 = new MyResourceManager(conf);\n    rm1.start();\n\n    \r\n    RMApp app = rm1.submitApp(1024);\n    rm1.drainEvents();\n\n    MockNM nm1 = new MockNM(\"h1:1234\", 15120, rm1.getResourceTrackerService());\n    nm1.registerNode();\n    nm1.nodeHeartbeat(true); \r\n    rm1.drainEvents();\n\n    ApplicationAttemptId appAttemptId =\n        app.getCurrentAppAttempt().getAppAttemptId();\n    rm1.sendAMLaunched(appAttemptId);\n    rm1.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator =\n        new MyContainerAllocator(rm1, conf, appAttemptId, mockJob);\n\n    \r\n    \r\n    \r\n    \r\n    ContainerRequestEvent event1 =\n        createReq(jobId, 1, 1024, new String[] { \"h1\" });\n    allocator.sendRequest(event1);\n\n    ContainerRequestEvent event2 =\n        createReq(jobId, 2, 2048, new String[] { \"h1\", \"h2\" });\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerFailedEvent f1 = createFailEvent(jobId, 1, \"h2\", false);\n    allocator.sendFailure(f1);\n\n    \r\n    List<TaskAttemptContainerAssignedEvent> assignedContainers =\n        allocator.schedule();\n    rm1.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    \r\n    assertAsksAndReleases(3, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(1, 0, rm1);\n\n    nm1.nodeHeartbeat(true); \r\n    rm1.drainEvents();\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm1.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 2\", 2,\n        assignedContainers.size());\n    assertAsksAndReleases(0, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    assignedContainers = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    assertAsksAndReleases(3, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    \r\n    \r\n    \r\n    ContainerRequestEvent event3 =\n        createReq(jobId, 3, 1000, new String[] { \"h1\" });\n    allocator.sendRequest(event3);\n\n    \r\n    ContainerAllocatorEvent deallocate1 =\n        createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate1);\n\n    assignedContainers = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    assertAsksAndReleases(3, 1, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    \r\n    MyResourceManager rm2 = new MyResourceManager(conf, rm1.getRMStateStore());\n    rm2.start();\n    nm1.setResourceTrackerService(rm2.getResourceTrackerService());\n    allocator.updateSchedulerProxy(rm2);\n\n    \r\n    NodeHeartbeatResponse hbResponse = nm1.nodeHeartbeat(true);\n    Assert.assertEquals(NodeAction.RESYNC, hbResponse.getNodeAction());\n\n    \r\n    nm1 = new MockNM(\"h1:1234\", 10240, rm2.getResourceTrackerService());\n    nm1.registerNode();\n    nm1.nodeHeartbeat(true);\n    rm2.drainEvents();\n\n    \r\n    \r\n    \r\n\n    \r\n    ContainerAllocatorEvent deallocate2 =\n        createDeallocateEvent(jobId, 2, false);\n    allocator.sendDeallocate(deallocate2);\n\n    \r\n    ContainerFailedEvent f2 = createFailEvent(jobId, 1, \"h3\", false);\n    allocator.sendFailure(f2);\n\n    ContainerRequestEvent event4 =\n        createReq(jobId, 4, 2000, new String[] { \"h1\", \"h2\" });\n    allocator.sendRequest(event4);\n\n    \r\n    allocator.schedule();\n    rm2.drainEvents();\n\n    \r\n    \r\n    \r\n    ContainerRequestEvent event5 =\n        createReq(jobId, 5, 3000, new String[] { \"h1\", \"h2\", \"h3\" });\n    allocator.sendRequest(event5);\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm2.drainEvents();\n    assertAsksAndReleases(3, 2, rm2);\n    assertBlacklistAdditionsAndRemovals(2, 0, rm2);\n\n    nm1.nodeHeartbeat(true);\n    rm2.drainEvents();\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm2.drainEvents();\n\n    Assert.assertEquals(\"Number of container should be 3\", 3,\n        assignedContainers.size());\n\n    for (TaskAttemptContainerAssignedEvent assig : assignedContainers) {\n      Assert.assertTrue(\"Assigned count not correct\",\n          \"h1\".equals(assig.getContainer().getNodeId().getHost()));\n    }\n\n    rm1.stop();\n    rm2.stop();\n\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":2500,"status":"B"},{"authorDate":"2018-01-31 17:42:42","commitOrder":1,"curCode":"  public static void setup() throws Exception {\n    conf.setBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_TOKEN_SERVICE_USE_IP, false);\n    SecurityUtil.setConfiguration(conf);\n\n    conf.set(YarnConfiguration.RECOVERY_ENABLED, \"true\");\n    conf.set(YarnConfiguration.RM_STORE, MemoryRMStateStore.class.getName());\n    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, true);\n    conf.setLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS, 0);\n    conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, \"0.0.0.0:0\");\n  }\n","date":"2018-01-31 17:42:42","endLine":97,"groupId":"26963","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/11/d703d890dc0a93033cb185ef0e1c874d3d1c2e.src","preCode":"  public static void setup() throws Exception {\n    conf.setBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_TOKEN_SERVICE_USE_IP, false);\n    SecurityUtil.setConfiguration(conf);\n\n    conf.set(YarnConfiguration.RECOVERY_ENABLED, \"true\");\n    conf.set(YarnConfiguration.RM_STORE, MemoryRMStateStore.class.getName());\n    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, true);\n    conf.setLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS, 0);\n    conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, \"0.0.0.0:0\");\n  }\n","realPath":"hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestAMRMClientOnRMRestart.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"}],"commitId":"8d1e2c6409a44f4515a1549ae82c7e2597e96467","commitMessage":"@@@Merge branch 'YARN-6592' into trunk\n","date":"2018-01-31 17:42:42","modifiedFileCount":"83","status":"B","submitter":"Arun Suresh"},{"authorTime":"2018-01-31 17:42:42","codes":[{"authorDate":"2018-05-11 00:31:59","commitOrder":2,"curCode":"  public void testRMContainerAllocatorResendsRequestsOnRMRestart()\n      throws Exception {\n\n    Configuration conf = new Configuration();\n    conf.set(YarnConfiguration.RECOVERY_ENABLED, \"true\");\n    conf.set(YarnConfiguration.RM_STORE, MemoryRMStateStore.class.getName());\n    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, true);\n    conf.setLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS, 0);\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE, true);\n    conf.setInt(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER, 1);\n    conf.setInt(\n        MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT, -1);\n\n    MyResourceManager rm1 = new MyResourceManager(conf);\n    rm1.start();\n\n    \r\n    RMApp app = rm1.submitApp(1024);\n    rm1.drainEvents();\n\n    MockNM nm1 = new MockNM(\"h1:1234\", 15120, rm1.getResourceTrackerService());\n    nm1.registerNode();\n    nm1.nodeHeartbeat(true); \r\n    rm1.drainEvents();\n\n    ApplicationAttemptId appAttemptId =\n        app.getCurrentAppAttempt().getAppAttemptId();\n    rm1.sendAMLaunched(appAttemptId);\n    rm1.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator =\n        new MyContainerAllocator(rm1, conf, appAttemptId, mockJob);\n\n    \r\n    \r\n    \r\n    \r\n    ContainerRequestEvent event1 =\n            ContainerRequestCreator.createRequest(jobId, 1,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h1\"});\n    allocator.sendRequest(event1);\n\n    ContainerRequestEvent event2 =\n        ContainerRequestCreator.createRequest(jobId, 2,\n                Resource.newInstance(2048, 1),\n                new String[] {\"h1\", \"h2\"});\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerFailedEvent f1 = createFailEvent(jobId, 1, \"h2\", false);\n    allocator.sendFailure(f1);\n\n    \r\n    List<TaskAttemptContainerAssignedEvent> assignedContainers =\n        allocator.schedule();\n    rm1.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    \r\n    assertAsksAndReleases(3, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(1, 0, rm1);\n\n    nm1.nodeHeartbeat(true); \r\n    rm1.drainEvents();\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm1.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 2\", 2,\n        assignedContainers.size());\n    assertAsksAndReleases(0, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    assignedContainers = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    assertAsksAndReleases(3, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    \r\n    \r\n    \r\n    ContainerRequestEvent event3 =\n            ContainerRequestCreator.createRequest(jobId, 3,\n                    Resource.newInstance(1000, 1),\n                    new String[]{\"h1\"});\n    allocator.sendRequest(event3);\n\n    \r\n    ContainerAllocatorEvent deallocate1 =\n        createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate1);\n\n    assignedContainers = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    assertAsksAndReleases(3, 1, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    \r\n    MyResourceManager rm2 = new MyResourceManager(conf, rm1.getRMStateStore());\n    rm2.start();\n    nm1.setResourceTrackerService(rm2.getResourceTrackerService());\n    allocator.updateSchedulerProxy(rm2);\n\n    \r\n    NodeHeartbeatResponse hbResponse = nm1.nodeHeartbeat(true);\n    Assert.assertEquals(NodeAction.RESYNC, hbResponse.getNodeAction());\n\n    \r\n    nm1 = new MockNM(\"h1:1234\", 10240, rm2.getResourceTrackerService());\n    nm1.registerNode();\n    nm1.nodeHeartbeat(true);\n    rm2.drainEvents();\n\n    \r\n    \r\n    \r\n\n    \r\n    ContainerAllocatorEvent deallocate2 =\n        createDeallocateEvent(jobId, 2, false);\n    allocator.sendDeallocate(deallocate2);\n\n    \r\n    ContainerFailedEvent f2 = createFailEvent(jobId, 1, \"h3\", false);\n    allocator.sendFailure(f2);\n\n    ContainerRequestEvent event4 =\n            ContainerRequestCreator.createRequest(jobId, 4,\n                    Resource.newInstance(2000, 1),\n                    new String[]{\"h1\", \"h2\"});\n    allocator.sendRequest(event4);\n\n    \r\n    allocator.schedule();\n    rm2.drainEvents();\n\n    \r\n    \r\n    \r\n    ContainerRequestEvent event5 =\n            ContainerRequestCreator.createRequest(jobId, 5,\n                    Resource.newInstance(3000, 1),\n                    new String[]{\"h1\", \"h2\", \"h3\"});\n    allocator.sendRequest(event5);\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm2.drainEvents();\n    assertAsksAndReleases(3, 2, rm2);\n    assertBlacklistAdditionsAndRemovals(2, 0, rm2);\n\n    nm1.nodeHeartbeat(true);\n    rm2.drainEvents();\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm2.drainEvents();\n\n    Assert.assertEquals(\"Number of container should be 3\", 3,\n        assignedContainers.size());\n\n    for (TaskAttemptContainerAssignedEvent assig : assignedContainers) {\n      Assert.assertTrue(\"Assigned count not correct\",\n          \"h1\".equals(assig.getContainer().getNodeId().getHost()));\n    }\n\n    rm1.stop();\n    rm2.stop();\n\n  }\n","date":"2018-05-11 00:31:59","endLine":2690,"groupId":"26963","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRMContainerAllocatorResendsRequestsOnRMRestart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/42/7e6ea228f07be943dfedeb58106a10db30d900.src","preCode":"  public void testRMContainerAllocatorResendsRequestsOnRMRestart()\n      throws Exception {\n\n    Configuration conf = new Configuration();\n    conf.set(YarnConfiguration.RECOVERY_ENABLED, \"true\");\n    conf.set(YarnConfiguration.RM_STORE, MemoryRMStateStore.class.getName());\n    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, true);\n    conf.setLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS, 0);\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE, true);\n    conf.setInt(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER, 1);\n    conf.setInt(\n        MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT, -1);\n\n    MyResourceManager rm1 = new MyResourceManager(conf);\n    rm1.start();\n\n    \r\n    RMApp app = rm1.submitApp(1024);\n    rm1.drainEvents();\n\n    MockNM nm1 = new MockNM(\"h1:1234\", 15120, rm1.getResourceTrackerService());\n    nm1.registerNode();\n    nm1.nodeHeartbeat(true); \r\n    rm1.drainEvents();\n\n    ApplicationAttemptId appAttemptId =\n        app.getCurrentAppAttempt().getAppAttemptId();\n    rm1.sendAMLaunched(appAttemptId);\n    rm1.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator =\n        new MyContainerAllocator(rm1, conf, appAttemptId, mockJob);\n\n    \r\n    \r\n    \r\n    \r\n    ContainerRequestEvent event1 =\n        createReq(jobId, 1, 1024, new String[] { \"h1\" });\n    allocator.sendRequest(event1);\n\n    ContainerRequestEvent event2 =\n        createReq(jobId, 2, 2048, new String[] { \"h1\", \"h2\" });\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerFailedEvent f1 = createFailEvent(jobId, 1, \"h2\", false);\n    allocator.sendFailure(f1);\n\n    \r\n    List<TaskAttemptContainerAssignedEvent> assignedContainers =\n        allocator.schedule();\n    rm1.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    \r\n    assertAsksAndReleases(3, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(1, 0, rm1);\n\n    nm1.nodeHeartbeat(true); \r\n    rm1.drainEvents();\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm1.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 2\", 2,\n        assignedContainers.size());\n    assertAsksAndReleases(0, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    assignedContainers = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    assertAsksAndReleases(3, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    \r\n    \r\n    \r\n    ContainerRequestEvent event3 =\n        createReq(jobId, 3, 1000, new String[] { \"h1\" });\n    allocator.sendRequest(event3);\n\n    \r\n    ContainerAllocatorEvent deallocate1 =\n        createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate1);\n\n    assignedContainers = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    assertAsksAndReleases(3, 1, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    \r\n    MyResourceManager rm2 = new MyResourceManager(conf, rm1.getRMStateStore());\n    rm2.start();\n    nm1.setResourceTrackerService(rm2.getResourceTrackerService());\n    allocator.updateSchedulerProxy(rm2);\n\n    \r\n    NodeHeartbeatResponse hbResponse = nm1.nodeHeartbeat(true);\n    Assert.assertEquals(NodeAction.RESYNC, hbResponse.getNodeAction());\n\n    \r\n    nm1 = new MockNM(\"h1:1234\", 10240, rm2.getResourceTrackerService());\n    nm1.registerNode();\n    nm1.nodeHeartbeat(true);\n    rm2.drainEvents();\n\n    \r\n    \r\n    \r\n\n    \r\n    ContainerAllocatorEvent deallocate2 =\n        createDeallocateEvent(jobId, 2, false);\n    allocator.sendDeallocate(deallocate2);\n\n    \r\n    ContainerFailedEvent f2 = createFailEvent(jobId, 1, \"h3\", false);\n    allocator.sendFailure(f2);\n\n    ContainerRequestEvent event4 =\n        createReq(jobId, 4, 2000, new String[] { \"h1\", \"h2\" });\n    allocator.sendRequest(event4);\n\n    \r\n    allocator.schedule();\n    rm2.drainEvents();\n\n    \r\n    \r\n    \r\n    ContainerRequestEvent event5 =\n        createReq(jobId, 5, 3000, new String[] { \"h1\", \"h2\", \"h3\" });\n    allocator.sendRequest(event5);\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm2.drainEvents();\n    assertAsksAndReleases(3, 2, rm2);\n    assertBlacklistAdditionsAndRemovals(2, 0, rm2);\n\n    nm1.nodeHeartbeat(true);\n    rm2.drainEvents();\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm2.drainEvents();\n\n    Assert.assertEquals(\"Number of container should be 3\", 3,\n        assignedContainers.size());\n\n    for (TaskAttemptContainerAssignedEvent assig : assignedContainers) {\n      Assert.assertTrue(\"Assigned count not correct\",\n          \"h1\".equals(assig.getContainer().getNodeId().getHost()));\n    }\n\n    rm1.stop();\n    rm2.stop();\n\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":2511,"status":"M"},{"authorDate":"2018-01-31 17:42:42","commitOrder":2,"curCode":"  public static void setup() throws Exception {\n    conf.setBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_TOKEN_SERVICE_USE_IP, false);\n    SecurityUtil.setConfiguration(conf);\n\n    conf.set(YarnConfiguration.RECOVERY_ENABLED, \"true\");\n    conf.set(YarnConfiguration.RM_STORE, MemoryRMStateStore.class.getName());\n    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, true);\n    conf.setLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS, 0);\n    conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, \"0.0.0.0:0\");\n  }\n","date":"2018-01-31 17:42:42","endLine":97,"groupId":"26963","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/11/d703d890dc0a93033cb185ef0e1c874d3d1c2e.src","preCode":"  public static void setup() throws Exception {\n    conf.setBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_TOKEN_SERVICE_USE_IP, false);\n    SecurityUtil.setConfiguration(conf);\n\n    conf.set(YarnConfiguration.RECOVERY_ENABLED, \"true\");\n    conf.set(YarnConfiguration.RM_STORE, MemoryRMStateStore.class.getName());\n    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, true);\n    conf.setLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS, 0);\n    conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, \"0.0.0.0:0\");\n  }\n","realPath":"hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestAMRMClientOnRMRestart.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"N"}],"commitId":"c8b53c43644b4ad22d5385c22cad8ed573c0b1ba","commitMessage":"@@@YARN-8202. DefaultAMSProcessor should properly check units of requested custom resource types against minimum/maximum allocation (snemeth via rkanter)\n","date":"2018-05-11 00:31:59","modifiedFileCount":"6","status":"M","submitter":"Robert Kanter"},{"authorTime":"2018-01-31 17:42:42","codes":[{"authorDate":"2019-12-05 15:56:23","commitOrder":3,"curCode":"  public void testRMContainerAllocatorResendsRequestsOnRMRestart()\n      throws Exception {\n\n    Configuration conf = new Configuration();\n    conf.set(YarnConfiguration.RECOVERY_ENABLED, \"true\");\n    conf.set(YarnConfiguration.RM_STORE, MemoryRMStateStore.class.getName());\n    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, true);\n    conf.setLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS, 0);\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE, true);\n    conf.setInt(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER, 1);\n    conf.setInt(\n        MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT, -1);\n\n    MyResourceManager rm1 = new MyResourceManager(conf);\n    rm1.start();\n\n    \r\n    RMApp app = MockRMAppSubmitter.submitWithMemory(1024, rm1);\n    rm1.drainEvents();\n\n    MockNM nm1 = new MockNM(\"h1:1234\", 15120, rm1.getResourceTrackerService());\n    nm1.registerNode();\n    nm1.nodeHeartbeat(true); \r\n    rm1.drainEvents();\n\n    ApplicationAttemptId appAttemptId =\n        app.getCurrentAppAttempt().getAppAttemptId();\n    rm1.sendAMLaunched(appAttemptId);\n    rm1.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator =\n        new MyContainerAllocator(rm1, conf, appAttemptId, mockJob);\n\n    \r\n    \r\n    \r\n    \r\n    ContainerRequestEvent event1 =\n            ContainerRequestCreator.createRequest(jobId, 1,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h1\"});\n    allocator.sendRequest(event1);\n\n    ContainerRequestEvent event2 =\n        ContainerRequestCreator.createRequest(jobId, 2,\n                Resource.newInstance(2048, 1),\n                new String[] {\"h1\", \"h2\"});\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerFailedEvent f1 = createFailEvent(jobId, 1, \"h2\", false);\n    allocator.sendFailure(f1);\n\n    \r\n    List<TaskAttemptContainerAssignedEvent> assignedContainers =\n        allocator.schedule();\n    rm1.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    \r\n    assertAsksAndReleases(3, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(1, 0, rm1);\n\n    nm1.nodeHeartbeat(true); \r\n    rm1.drainEvents();\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm1.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 2\", 2,\n        assignedContainers.size());\n    assertAsksAndReleases(0, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    assignedContainers = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    assertAsksAndReleases(3, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    \r\n    \r\n    \r\n    ContainerRequestEvent event3 =\n            ContainerRequestCreator.createRequest(jobId, 3,\n                    Resource.newInstance(1000, 1),\n                    new String[]{\"h1\"});\n    allocator.sendRequest(event3);\n\n    \r\n    ContainerAllocatorEvent deallocate1 =\n        createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate1);\n\n    assignedContainers = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    assertAsksAndReleases(3, 1, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    \r\n    MyResourceManager rm2 = new MyResourceManager(conf, rm1.getRMStateStore());\n    rm2.start();\n    nm1.setResourceTrackerService(rm2.getResourceTrackerService());\n    allocator.updateSchedulerProxy(rm2);\n\n    \r\n    NodeHeartbeatResponse hbResponse = nm1.nodeHeartbeat(true);\n    Assert.assertEquals(NodeAction.RESYNC, hbResponse.getNodeAction());\n\n    \r\n    nm1 = new MockNM(\"h1:1234\", 10240, rm2.getResourceTrackerService());\n    nm1.registerNode();\n    nm1.nodeHeartbeat(true);\n    rm2.drainEvents();\n\n    \r\n    \r\n    \r\n\n    \r\n    ContainerAllocatorEvent deallocate2 =\n        createDeallocateEvent(jobId, 2, false);\n    allocator.sendDeallocate(deallocate2);\n\n    \r\n    ContainerFailedEvent f2 = createFailEvent(jobId, 1, \"h3\", false);\n    allocator.sendFailure(f2);\n\n    ContainerRequestEvent event4 =\n            ContainerRequestCreator.createRequest(jobId, 4,\n                    Resource.newInstance(2000, 1),\n                    new String[]{\"h1\", \"h2\"});\n    allocator.sendRequest(event4);\n\n    \r\n    allocator.schedule();\n    rm2.drainEvents();\n\n    \r\n    \r\n    \r\n    ContainerRequestEvent event5 =\n            ContainerRequestCreator.createRequest(jobId, 5,\n                    Resource.newInstance(3000, 1),\n                    new String[]{\"h1\", \"h2\", \"h3\"});\n    allocator.sendRequest(event5);\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm2.drainEvents();\n    assertAsksAndReleases(3, 2, rm2);\n    assertBlacklistAdditionsAndRemovals(2, 0, rm2);\n\n    nm1.nodeHeartbeat(true);\n    rm2.drainEvents();\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm2.drainEvents();\n\n    Assert.assertEquals(\"Number of container should be 3\", 3,\n        assignedContainers.size());\n\n    for (TaskAttemptContainerAssignedEvent assig : assignedContainers) {\n      Assert.assertTrue(\"Assigned count not correct\",\n          \"h1\".equals(assig.getContainer().getNodeId().getHost()));\n    }\n\n    rm1.stop();\n    rm2.stop();\n\n  }\n","date":"2019-12-05 15:56:23","endLine":2728,"groupId":"1097","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRMContainerAllocatorResendsRequestsOnRMRestart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/75/798876ddaaa7cafee2d3dfa054c4a14d743fab.src","preCode":"  public void testRMContainerAllocatorResendsRequestsOnRMRestart()\n      throws Exception {\n\n    Configuration conf = new Configuration();\n    conf.set(YarnConfiguration.RECOVERY_ENABLED, \"true\");\n    conf.set(YarnConfiguration.RM_STORE, MemoryRMStateStore.class.getName());\n    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, true);\n    conf.setLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS, 0);\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE, true);\n    conf.setInt(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER, 1);\n    conf.setInt(\n        MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT, -1);\n\n    MyResourceManager rm1 = new MyResourceManager(conf);\n    rm1.start();\n\n    \r\n    RMApp app = rm1.submitApp(1024);\n    rm1.drainEvents();\n\n    MockNM nm1 = new MockNM(\"h1:1234\", 15120, rm1.getResourceTrackerService());\n    nm1.registerNode();\n    nm1.nodeHeartbeat(true); \r\n    rm1.drainEvents();\n\n    ApplicationAttemptId appAttemptId =\n        app.getCurrentAppAttempt().getAppAttemptId();\n    rm1.sendAMLaunched(appAttemptId);\n    rm1.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator =\n        new MyContainerAllocator(rm1, conf, appAttemptId, mockJob);\n\n    \r\n    \r\n    \r\n    \r\n    ContainerRequestEvent event1 =\n            ContainerRequestCreator.createRequest(jobId, 1,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h1\"});\n    allocator.sendRequest(event1);\n\n    ContainerRequestEvent event2 =\n        ContainerRequestCreator.createRequest(jobId, 2,\n                Resource.newInstance(2048, 1),\n                new String[] {\"h1\", \"h2\"});\n    allocator.sendRequest(event2);\n\n    \r\n    ContainerFailedEvent f1 = createFailEvent(jobId, 1, \"h2\", false);\n    allocator.sendFailure(f1);\n\n    \r\n    List<TaskAttemptContainerAssignedEvent> assignedContainers =\n        allocator.schedule();\n    rm1.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    \r\n    assertAsksAndReleases(3, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(1, 0, rm1);\n\n    nm1.nodeHeartbeat(true); \r\n    rm1.drainEvents();\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm1.drainEvents();\n    Assert.assertEquals(\"No of assignments must be 2\", 2,\n        assignedContainers.size());\n    assertAsksAndReleases(0, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    assignedContainers = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    assertAsksAndReleases(3, 0, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    \r\n    \r\n    \r\n    ContainerRequestEvent event3 =\n            ContainerRequestCreator.createRequest(jobId, 3,\n                    Resource.newInstance(1000, 1),\n                    new String[]{\"h1\"});\n    allocator.sendRequest(event3);\n\n    \r\n    ContainerAllocatorEvent deallocate1 =\n        createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate1);\n\n    assignedContainers = allocator.schedule();\n    Assert.assertEquals(\"No of assignments must be 0\", 0,\n        assignedContainers.size());\n    assertAsksAndReleases(3, 1, rm1);\n    assertBlacklistAdditionsAndRemovals(0, 0, rm1);\n\n    \r\n    MyResourceManager rm2 = new MyResourceManager(conf, rm1.getRMStateStore());\n    rm2.start();\n    nm1.setResourceTrackerService(rm2.getResourceTrackerService());\n    allocator.updateSchedulerProxy(rm2);\n\n    \r\n    NodeHeartbeatResponse hbResponse = nm1.nodeHeartbeat(true);\n    Assert.assertEquals(NodeAction.RESYNC, hbResponse.getNodeAction());\n\n    \r\n    nm1 = new MockNM(\"h1:1234\", 10240, rm2.getResourceTrackerService());\n    nm1.registerNode();\n    nm1.nodeHeartbeat(true);\n    rm2.drainEvents();\n\n    \r\n    \r\n    \r\n\n    \r\n    ContainerAllocatorEvent deallocate2 =\n        createDeallocateEvent(jobId, 2, false);\n    allocator.sendDeallocate(deallocate2);\n\n    \r\n    ContainerFailedEvent f2 = createFailEvent(jobId, 1, \"h3\", false);\n    allocator.sendFailure(f2);\n\n    ContainerRequestEvent event4 =\n            ContainerRequestCreator.createRequest(jobId, 4,\n                    Resource.newInstance(2000, 1),\n                    new String[]{\"h1\", \"h2\"});\n    allocator.sendRequest(event4);\n\n    \r\n    allocator.schedule();\n    rm2.drainEvents();\n\n    \r\n    \r\n    \r\n    ContainerRequestEvent event5 =\n            ContainerRequestCreator.createRequest(jobId, 5,\n                    Resource.newInstance(3000, 1),\n                    new String[]{\"h1\", \"h2\", \"h3\"});\n    allocator.sendRequest(event5);\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm2.drainEvents();\n    assertAsksAndReleases(3, 2, rm2);\n    assertBlacklistAdditionsAndRemovals(2, 0, rm2);\n\n    nm1.nodeHeartbeat(true);\n    rm2.drainEvents();\n\n    \r\n    assignedContainers = allocator.schedule();\n    rm2.drainEvents();\n\n    Assert.assertEquals(\"Number of container should be 3\", 3,\n        assignedContainers.size());\n\n    for (TaskAttemptContainerAssignedEvent assig : assignedContainers) {\n      Assert.assertTrue(\"Assigned count not correct\",\n          \"h1\".equals(assig.getContainer().getNodeId().getHost()));\n    }\n\n    rm1.stop();\n    rm2.stop();\n\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":2549,"status":"M"},{"authorDate":"2018-01-31 17:42:42","commitOrder":3,"curCode":"  public static void setup() throws Exception {\n    conf.setBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_TOKEN_SERVICE_USE_IP, false);\n    SecurityUtil.setConfiguration(conf);\n\n    conf.set(YarnConfiguration.RECOVERY_ENABLED, \"true\");\n    conf.set(YarnConfiguration.RM_STORE, MemoryRMStateStore.class.getName());\n    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, true);\n    conf.setLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS, 0);\n    conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, \"0.0.0.0:0\");\n  }\n","date":"2018-01-31 17:42:42","endLine":97,"groupId":"1097","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/11/d703d890dc0a93033cb185ef0e1c874d3d1c2e.src","preCode":"  public static void setup() throws Exception {\n    conf.setBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_TOKEN_SERVICE_USE_IP, false);\n    SecurityUtil.setConfiguration(conf);\n\n    conf.set(YarnConfiguration.RECOVERY_ENABLED, \"true\");\n    conf.set(YarnConfiguration.RM_STORE, MemoryRMStateStore.class.getName());\n    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,\n        YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, true);\n    conf.setLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS, 0);\n    conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, \"0.0.0.0:0\");\n  }\n","realPath":"hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestAMRMClientOnRMRestart.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"N"}],"commitId":"682e6fdeda68b7244e92d32cd35fe317c9b32ede","commitMessage":"@@@YARN-9052. Replace all MockRM submit method definitions with a builder. Contributed by Szilard Nemeth.\n","date":"2019-12-05 15:56:23","modifiedFileCount":"86","status":"M","submitter":"Sunil G"}]
