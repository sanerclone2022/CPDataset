[{"authorTime":"2018-12-20 09:09:50","codes":[{"authorDate":"2018-01-27 04:36:45","commitOrder":2,"curCode":"  public void testFetchFailureAttemptFinishTime() throws Exception{\n    ApplicationId appId = ApplicationId.newInstance(1, 2);\n    ApplicationAttemptId appAttemptId =\n    ApplicationAttemptId.newInstance(appId, 0);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 1);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 1, TaskType.MAP);\n    TaskAttemptId attemptId = MRBuilderUtils.newTaskAttemptId(taskId, 0);\n    TaskId reducetaskId = MRBuilderUtils.newTaskId(jobId, 1, TaskType.REDUCE);\n    TaskAttemptId reduceTAId =\n        MRBuilderUtils.newTaskAttemptId(reducetaskId, 0);\n    Path jobFile = mock(Path.class);\n\n    MockEventHandler eventHandler = new MockEventHandler();\n    TaskAttemptListener taListener = mock(TaskAttemptListener.class);\n    when(taListener.getAddress()).thenReturn(\n        new InetSocketAddress(\"localhost\", 0));\n\n    JobConf jobConf = new JobConf();\n    jobConf.setClass(\"fs.file.impl\", StubbedFS.class, FileSystem.class);\n    jobConf.setBoolean(\"fs.file.impl.disable.cache\", true);\n    jobConf.set(JobConf.MAPRED_MAP_TASK_ENV, \"\");\n    jobConf.set(MRJobConfig.APPLICATION_ATTEMPT_ID, \"10\");\n\n    TaskSplitMetaInfo splits = mock(TaskSplitMetaInfo.class);\n    when(splits.getLocations()).thenReturn(new String[] {\"127.0.0.1\"});\n\n    AppContext appCtx = mock(AppContext.class);\n    ClusterInfo clusterInfo = mock(ClusterInfo.class);\n    when(appCtx.getClusterInfo()).thenReturn(clusterInfo);\n    setupTaskAttemptFinishingMonitor(eventHandler, jobConf, appCtx);\n\n    TaskAttemptImpl taImpl =\n      new MapTaskAttemptImpl(taskId, 1, eventHandler, jobFile, 1,\n      splits, jobConf, taListener,mock(Token.class), new Credentials(),\n      SystemClock.getInstance(), appCtx);\n\n    NodeId nid = NodeId.newInstance(\"127.0.0.1\", 0);\n    ContainerId contId = ContainerId.newContainerId(appAttemptId, 3);\n    Container container = mock(Container.class);\n    when(container.getId()).thenReturn(contId);\n    when(container.getNodeId()).thenReturn(nid);\n    when(container.getNodeHttpAddress()).thenReturn(\"localhost:0\");\n\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_SCHEDULE));\n    taImpl.handle(new TaskAttemptContainerAssignedEvent(attemptId,\n        container, mock(Map.class)));\n    taImpl.handle(new TaskAttemptContainerLaunchedEvent(attemptId, 0));\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_DONE));\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_CONTAINER_COMPLETED));\n\n    assertEquals(\"Task attempt is not in succeeded state\", taImpl.getState(),\n        TaskAttemptState.SUCCEEDED);\n\n    assertTrue(\"Task Attempt finish time is not greater than 0\",\n        taImpl.getFinishTime() > 0);\n\n    Long finishTime = taImpl.getFinishTime();\n    Thread.sleep(5);\n    taImpl.handle(new TaskAttemptTooManyFetchFailureEvent(attemptId,\n        reduceTAId, \"Host\"));\n\n    assertEquals(\"Task attempt is not in Too Many Fetch Failure state\",\n        taImpl.getState(), TaskAttemptState.FAILED);\n\n    assertEquals(\"After TA_TOO_MANY_FETCH_FAILURE,\"\n        + \" Task attempt finish time is not the same \",\n        finishTime, Long.valueOf(taImpl.getFinishTime()));\n  }\n","date":"2018-01-27 04:36:45","endLine":1073,"groupId":"32169","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchFailureAttemptFinishTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/43/571a9b824e21a78cc9dd0cdc7d9e09f085f2d7.src","preCode":"  public void testFetchFailureAttemptFinishTime() throws Exception{\n    ApplicationId appId = ApplicationId.newInstance(1, 2);\n    ApplicationAttemptId appAttemptId =\n    ApplicationAttemptId.newInstance(appId, 0);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 1);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 1, TaskType.MAP);\n    TaskAttemptId attemptId = MRBuilderUtils.newTaskAttemptId(taskId, 0);\n    TaskId reducetaskId = MRBuilderUtils.newTaskId(jobId, 1, TaskType.REDUCE);\n    TaskAttemptId reduceTAId =\n        MRBuilderUtils.newTaskAttemptId(reducetaskId, 0);\n    Path jobFile = mock(Path.class);\n\n    MockEventHandler eventHandler = new MockEventHandler();\n    TaskAttemptListener taListener = mock(TaskAttemptListener.class);\n    when(taListener.getAddress()).thenReturn(\n        new InetSocketAddress(\"localhost\", 0));\n\n    JobConf jobConf = new JobConf();\n    jobConf.setClass(\"fs.file.impl\", StubbedFS.class, FileSystem.class);\n    jobConf.setBoolean(\"fs.file.impl.disable.cache\", true);\n    jobConf.set(JobConf.MAPRED_MAP_TASK_ENV, \"\");\n    jobConf.set(MRJobConfig.APPLICATION_ATTEMPT_ID, \"10\");\n\n    TaskSplitMetaInfo splits = mock(TaskSplitMetaInfo.class);\n    when(splits.getLocations()).thenReturn(new String[] {\"127.0.0.1\"});\n\n    AppContext appCtx = mock(AppContext.class);\n    ClusterInfo clusterInfo = mock(ClusterInfo.class);\n    when(appCtx.getClusterInfo()).thenReturn(clusterInfo);\n    setupTaskAttemptFinishingMonitor(eventHandler, jobConf, appCtx);\n\n    TaskAttemptImpl taImpl =\n      new MapTaskAttemptImpl(taskId, 1, eventHandler, jobFile, 1,\n      splits, jobConf, taListener,mock(Token.class), new Credentials(),\n      SystemClock.getInstance(), appCtx);\n\n    NodeId nid = NodeId.newInstance(\"127.0.0.1\", 0);\n    ContainerId contId = ContainerId.newContainerId(appAttemptId, 3);\n    Container container = mock(Container.class);\n    when(container.getId()).thenReturn(contId);\n    when(container.getNodeId()).thenReturn(nid);\n    when(container.getNodeHttpAddress()).thenReturn(\"localhost:0\");\n\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_SCHEDULE));\n    taImpl.handle(new TaskAttemptContainerAssignedEvent(attemptId,\n        container, mock(Map.class)));\n    taImpl.handle(new TaskAttemptContainerLaunchedEvent(attemptId, 0));\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_DONE));\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_CONTAINER_COMPLETED));\n\n    assertEquals(\"Task attempt is not in succeeded state\", taImpl.getState(),\n        TaskAttemptState.SUCCEEDED);\n\n    assertTrue(\"Task Attempt finish time is not greater than 0\",\n        taImpl.getFinishTime() > 0);\n\n    Long finishTime = taImpl.getFinishTime();\n    Thread.sleep(5);\n    taImpl.handle(new TaskAttemptTooManyFetchFailureEvent(attemptId,\n        reduceTAId, \"Host\"));\n\n    assertEquals(\"Task attempt is not in Too Many Fetch Failure state\",\n        taImpl.getState(), TaskAttemptState.FAILED);\n\n    assertEquals(\"After TA_TOO_MANY_FETCH_FAILURE,\"\n        + \" Task attempt finish time is not the same \",\n        finishTime, Long.valueOf(taImpl.getFinishTime()));\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestTaskAttempt.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":1003,"status":"NB"},{"authorDate":"2018-12-20 09:09:50","commitOrder":2,"curCode":"  private TaskAttemptImpl createCommonTaskAttemptImpl(\n      MockEventHandler eventHandler, JobConf jobConf) {\n    ApplicationId appId = ApplicationId.newInstance(1, 2);\n    ApplicationAttemptId appAttemptId =\n        ApplicationAttemptId.newInstance(appId, 0);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 1);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 1, TaskType.MAP);\n    TaskAttemptId attemptId = MRBuilderUtils.newTaskAttemptId(taskId, 0);\n    Path jobFile = mock(Path.class);\n\n    TaskAttemptListener taListener = mock(TaskAttemptListener.class);\n    when(taListener.getAddress()).thenReturn(new InetSocketAddress(\"localhost\", 0));\n\n    jobConf.setClass(\"fs.file.impl\", StubbedFS.class, FileSystem.class);\n    jobConf.setBoolean(\"fs.file.impl.disable.cache\", true);\n    jobConf.set(JobConf.MAPRED_MAP_TASK_ENV, \"\");\n    jobConf.set(MRJobConfig.APPLICATION_ATTEMPT_ID, \"10\");\n\n    TaskSplitMetaInfo splits = mock(TaskSplitMetaInfo.class);\n    when(splits.getLocations()).thenReturn(new String[] {\"127.0.0.1\"});\n\n    AppContext appCtx = mock(AppContext.class);\n    ClusterInfo clusterInfo = mock(ClusterInfo.class);\n    when(appCtx.getClusterInfo()).thenReturn(clusterInfo);\n    setupTaskAttemptFinishingMonitor(eventHandler, jobConf, appCtx);\n\n    TaskAttemptImpl taImpl =\n        new MapTaskAttemptImpl(taskId, 1, eventHandler, jobFile, 1,\n            splits, jobConf, taListener,\n            mock(Token.class), new Credentials(),\n            SystemClock.getInstance(), appCtx);\n\n    NodeId nid = NodeId.newInstance(\"127.0.0.1\", 0);\n    ContainerId contId = ContainerId.newInstance(appAttemptId, 3);\n    Container container = mock(Container.class);\n    when(container.getId()).thenReturn(contId);\n    when(container.getNodeId()).thenReturn(nid);\n    when(container.getNodeHttpAddress()).thenReturn(\"localhost:0\");\n\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_SCHEDULE));\n    taImpl.handle(new TaskAttemptContainerAssignedEvent(attemptId,\n        container, mock(Map.class)));\n    taImpl.handle(new TaskAttemptContainerLaunchedEvent(attemptId, 0));\n    return taImpl;\n  }\n","date":"2018-12-20 09:09:50","endLine":1877,"groupId":"32169","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createCommonTaskAttemptImpl","params":"(MockEventHandlereventHandler@JobConfjobConf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/11/f16a8046a65839d2bfaf5ed79ec5edfa7882df.src","preCode":"  private TaskAttemptImpl createCommonTaskAttemptImpl(\n      MockEventHandler eventHandler, JobConf jobConf) {\n    ApplicationId appId = ApplicationId.newInstance(1, 2);\n    ApplicationAttemptId appAttemptId =\n        ApplicationAttemptId.newInstance(appId, 0);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 1);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 1, TaskType.MAP);\n    TaskAttemptId attemptId = MRBuilderUtils.newTaskAttemptId(taskId, 0);\n    Path jobFile = mock(Path.class);\n\n    TaskAttemptListener taListener = mock(TaskAttemptListener.class);\n    when(taListener.getAddress()).thenReturn(new InetSocketAddress(\"localhost\", 0));\n\n    jobConf.setClass(\"fs.file.impl\", StubbedFS.class, FileSystem.class);\n    jobConf.setBoolean(\"fs.file.impl.disable.cache\", true);\n    jobConf.set(JobConf.MAPRED_MAP_TASK_ENV, \"\");\n    jobConf.set(MRJobConfig.APPLICATION_ATTEMPT_ID, \"10\");\n\n    TaskSplitMetaInfo splits = mock(TaskSplitMetaInfo.class);\n    when(splits.getLocations()).thenReturn(new String[] {\"127.0.0.1\"});\n\n    AppContext appCtx = mock(AppContext.class);\n    ClusterInfo clusterInfo = mock(ClusterInfo.class);\n    when(appCtx.getClusterInfo()).thenReturn(clusterInfo);\n    setupTaskAttemptFinishingMonitor(eventHandler, jobConf, appCtx);\n\n    TaskAttemptImpl taImpl =\n        new MapTaskAttemptImpl(taskId, 1, eventHandler, jobFile, 1,\n            splits, jobConf, taListener,\n            mock(Token.class), new Credentials(),\n            SystemClock.getInstance(), appCtx);\n\n    NodeId nid = NodeId.newInstance(\"127.0.0.1\", 0);\n    ContainerId contId = ContainerId.newInstance(appAttemptId, 3);\n    Container container = mock(Container.class);\n    when(container.getId()).thenReturn(contId);\n    when(container.getNodeId()).thenReturn(nid);\n    when(container.getNodeHttpAddress()).thenReturn(\"localhost:0\");\n\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_SCHEDULE));\n    taImpl.handle(new TaskAttemptContainerAssignedEvent(attemptId,\n        container, mock(Map.class)));\n    taImpl.handle(new TaskAttemptContainerLaunchedEvent(attemptId, 0));\n    return taImpl;\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestTaskAttempt.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":1832,"status":"B"}],"commitId":"499c70eda5f6315cf7e13a4b3bbefc7e187bc457","commitMessage":"@@@MAPREDUCE-7166. map-only job should ignore node lost event when task is already succeeded. Contributed by Lei Li.\n","date":"2018-12-20 09:09:50","modifiedFileCount":"2","status":"M","submitter":"Akira Ajisaka"},{"authorTime":"2018-12-20 09:09:50","codes":[{"authorDate":"2019-08-12 19:54:13","commitOrder":3,"curCode":"  public void testFetchFailureAttemptFinishTime() throws Exception{\n    ApplicationId appId = ApplicationId.newInstance(1, 2);\n    ApplicationAttemptId appAttemptId =\n    ApplicationAttemptId.newInstance(appId, 0);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 1);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 1, TaskType.MAP);\n    TaskAttemptId attemptId = MRBuilderUtils.newTaskAttemptId(taskId, 0);\n    TaskId reducetaskId = MRBuilderUtils.newTaskId(jobId, 1, TaskType.REDUCE);\n    TaskAttemptId reduceTAId =\n        MRBuilderUtils.newTaskAttemptId(reducetaskId, 0);\n    Path jobFile = mock(Path.class);\n\n    MockEventHandler eventHandler = new MockEventHandler();\n    TaskAttemptListener taListener = mock(TaskAttemptListener.class);\n    when(taListener.getAddress()).thenReturn(\n        new InetSocketAddress(\"localhost\", 0));\n\n    JobConf jobConf = new JobConf();\n    jobConf.setClass(\"fs.file.impl\", StubbedFS.class, FileSystem.class);\n    jobConf.setBoolean(\"fs.file.impl.disable.cache\", true);\n    jobConf.set(JobConf.MAPRED_MAP_TASK_ENV, \"\");\n    jobConf.set(MRJobConfig.APPLICATION_ATTEMPT_ID, \"10\");\n\n    TaskSplitMetaInfo splits = mock(TaskSplitMetaInfo.class);\n    when(splits.getLocations()).thenReturn(new String[] {\"127.0.0.1\"});\n\n    AppContext appCtx = mock(AppContext.class);\n    ClusterInfo clusterInfo = mock(ClusterInfo.class);\n    when(appCtx.getClusterInfo()).thenReturn(clusterInfo);\n    setupTaskAttemptFinishingMonitor(eventHandler, jobConf, appCtx);\n\n    TaskAttemptImpl taImpl =\n      new MapTaskAttemptImpl(taskId, 1, eventHandler, jobFile, 1,\n      splits, jobConf, taListener,mock(Token.class), new Credentials(),\n      SystemClock.getInstance(), appCtx);\n\n    NodeId nid = NodeId.newInstance(\"127.0.0.1\", 0);\n    ContainerId contId = ContainerId.newContainerId(appAttemptId, 3);\n    Container container = mock(Container.class);\n    when(container.getId()).thenReturn(contId);\n    when(container.getNodeId()).thenReturn(nid);\n    when(container.getNodeHttpAddress()).thenReturn(\"localhost:0\");\n\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_SCHEDULE));\n    taImpl.handle(new TaskAttemptContainerAssignedEvent(attemptId,\n        container, mock(Map.class)));\n    taImpl.handle(new TaskAttemptContainerLaunchedEvent(attemptId, 0));\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_DONE));\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_CONTAINER_COMPLETED));\n\n    assertThat(taImpl.getState())\n        .withFailMessage(\"Task attempt is not in SUCCEEDED state\")\n        .isEqualTo(TaskAttemptState.SUCCEEDED);\n\n    assertTrue(\"Task Attempt finish time is not greater than 0\",\n        taImpl.getFinishTime() > 0);\n\n    Long finishTime = taImpl.getFinishTime();\n    Thread.sleep(5);\n    taImpl.handle(new TaskAttemptTooManyFetchFailureEvent(attemptId,\n        reduceTAId, \"Host\"));\n\n    assertThat(taImpl.getState())\n        .withFailMessage(\"Task attempt is not in FAILED state\")\n        .isEqualTo(TaskAttemptState.FAILED);\n\n    assertEquals(\"After TA_TOO_MANY_FETCH_FAILURE,\"\n        + \" Task attempt finish time is not the same \",\n        finishTime, Long.valueOf(taImpl.getFinishTime()));\n  }\n","date":"2019-08-12 19:54:28","endLine":1084,"groupId":"10336","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchFailureAttemptFinishTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/d0/9531c641c0ccbfce7d83a3d258ec03fe3c7e58.src","preCode":"  public void testFetchFailureAttemptFinishTime() throws Exception{\n    ApplicationId appId = ApplicationId.newInstance(1, 2);\n    ApplicationAttemptId appAttemptId =\n    ApplicationAttemptId.newInstance(appId, 0);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 1);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 1, TaskType.MAP);\n    TaskAttemptId attemptId = MRBuilderUtils.newTaskAttemptId(taskId, 0);\n    TaskId reducetaskId = MRBuilderUtils.newTaskId(jobId, 1, TaskType.REDUCE);\n    TaskAttemptId reduceTAId =\n        MRBuilderUtils.newTaskAttemptId(reducetaskId, 0);\n    Path jobFile = mock(Path.class);\n\n    MockEventHandler eventHandler = new MockEventHandler();\n    TaskAttemptListener taListener = mock(TaskAttemptListener.class);\n    when(taListener.getAddress()).thenReturn(\n        new InetSocketAddress(\"localhost\", 0));\n\n    JobConf jobConf = new JobConf();\n    jobConf.setClass(\"fs.file.impl\", StubbedFS.class, FileSystem.class);\n    jobConf.setBoolean(\"fs.file.impl.disable.cache\", true);\n    jobConf.set(JobConf.MAPRED_MAP_TASK_ENV, \"\");\n    jobConf.set(MRJobConfig.APPLICATION_ATTEMPT_ID, \"10\");\n\n    TaskSplitMetaInfo splits = mock(TaskSplitMetaInfo.class);\n    when(splits.getLocations()).thenReturn(new String[] {\"127.0.0.1\"});\n\n    AppContext appCtx = mock(AppContext.class);\n    ClusterInfo clusterInfo = mock(ClusterInfo.class);\n    when(appCtx.getClusterInfo()).thenReturn(clusterInfo);\n    setupTaskAttemptFinishingMonitor(eventHandler, jobConf, appCtx);\n\n    TaskAttemptImpl taImpl =\n      new MapTaskAttemptImpl(taskId, 1, eventHandler, jobFile, 1,\n      splits, jobConf, taListener,mock(Token.class), new Credentials(),\n      SystemClock.getInstance(), appCtx);\n\n    NodeId nid = NodeId.newInstance(\"127.0.0.1\", 0);\n    ContainerId contId = ContainerId.newContainerId(appAttemptId, 3);\n    Container container = mock(Container.class);\n    when(container.getId()).thenReturn(contId);\n    when(container.getNodeId()).thenReturn(nid);\n    when(container.getNodeHttpAddress()).thenReturn(\"localhost:0\");\n\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_SCHEDULE));\n    taImpl.handle(new TaskAttemptContainerAssignedEvent(attemptId,\n        container, mock(Map.class)));\n    taImpl.handle(new TaskAttemptContainerLaunchedEvent(attemptId, 0));\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_DONE));\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_CONTAINER_COMPLETED));\n\n    assertEquals(\"Task attempt is not in succeeded state\", taImpl.getState(),\n        TaskAttemptState.SUCCEEDED);\n\n    assertTrue(\"Task Attempt finish time is not greater than 0\",\n        taImpl.getFinishTime() > 0);\n\n    Long finishTime = taImpl.getFinishTime();\n    Thread.sleep(5);\n    taImpl.handle(new TaskAttemptTooManyFetchFailureEvent(attemptId,\n        reduceTAId, \"Host\"));\n\n    assertEquals(\"Task attempt is not in Too Many Fetch Failure state\",\n        taImpl.getState(), TaskAttemptState.FAILED);\n\n    assertEquals(\"After TA_TOO_MANY_FETCH_FAILURE,\"\n        + \" Task attempt finish time is not the same \",\n        finishTime, Long.valueOf(taImpl.getFinishTime()));\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestTaskAttempt.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":1012,"status":"M"},{"authorDate":"2018-12-20 09:09:50","commitOrder":3,"curCode":"  private TaskAttemptImpl createCommonTaskAttemptImpl(\n      MockEventHandler eventHandler, JobConf jobConf) {\n    ApplicationId appId = ApplicationId.newInstance(1, 2);\n    ApplicationAttemptId appAttemptId =\n        ApplicationAttemptId.newInstance(appId, 0);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 1);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 1, TaskType.MAP);\n    TaskAttemptId attemptId = MRBuilderUtils.newTaskAttemptId(taskId, 0);\n    Path jobFile = mock(Path.class);\n\n    TaskAttemptListener taListener = mock(TaskAttemptListener.class);\n    when(taListener.getAddress()).thenReturn(new InetSocketAddress(\"localhost\", 0));\n\n    jobConf.setClass(\"fs.file.impl\", StubbedFS.class, FileSystem.class);\n    jobConf.setBoolean(\"fs.file.impl.disable.cache\", true);\n    jobConf.set(JobConf.MAPRED_MAP_TASK_ENV, \"\");\n    jobConf.set(MRJobConfig.APPLICATION_ATTEMPT_ID, \"10\");\n\n    TaskSplitMetaInfo splits = mock(TaskSplitMetaInfo.class);\n    when(splits.getLocations()).thenReturn(new String[] {\"127.0.0.1\"});\n\n    AppContext appCtx = mock(AppContext.class);\n    ClusterInfo clusterInfo = mock(ClusterInfo.class);\n    when(appCtx.getClusterInfo()).thenReturn(clusterInfo);\n    setupTaskAttemptFinishingMonitor(eventHandler, jobConf, appCtx);\n\n    TaskAttemptImpl taImpl =\n        new MapTaskAttemptImpl(taskId, 1, eventHandler, jobFile, 1,\n            splits, jobConf, taListener,\n            mock(Token.class), new Credentials(),\n            SystemClock.getInstance(), appCtx);\n\n    NodeId nid = NodeId.newInstance(\"127.0.0.1\", 0);\n    ContainerId contId = ContainerId.newInstance(appAttemptId, 3);\n    Container container = mock(Container.class);\n    when(container.getId()).thenReturn(contId);\n    when(container.getNodeId()).thenReturn(nid);\n    when(container.getNodeHttpAddress()).thenReturn(\"localhost:0\");\n\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_SCHEDULE));\n    taImpl.handle(new TaskAttemptContainerAssignedEvent(attemptId,\n        container, mock(Map.class)));\n    taImpl.handle(new TaskAttemptContainerLaunchedEvent(attemptId, 0));\n    return taImpl;\n  }\n","date":"2018-12-20 09:09:50","endLine":1877,"groupId":"10336","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createCommonTaskAttemptImpl","params":"(MockEventHandlereventHandler@JobConfjobConf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/11/f16a8046a65839d2bfaf5ed79ec5edfa7882df.src","preCode":"  private TaskAttemptImpl createCommonTaskAttemptImpl(\n      MockEventHandler eventHandler, JobConf jobConf) {\n    ApplicationId appId = ApplicationId.newInstance(1, 2);\n    ApplicationAttemptId appAttemptId =\n        ApplicationAttemptId.newInstance(appId, 0);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 1);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 1, TaskType.MAP);\n    TaskAttemptId attemptId = MRBuilderUtils.newTaskAttemptId(taskId, 0);\n    Path jobFile = mock(Path.class);\n\n    TaskAttemptListener taListener = mock(TaskAttemptListener.class);\n    when(taListener.getAddress()).thenReturn(new InetSocketAddress(\"localhost\", 0));\n\n    jobConf.setClass(\"fs.file.impl\", StubbedFS.class, FileSystem.class);\n    jobConf.setBoolean(\"fs.file.impl.disable.cache\", true);\n    jobConf.set(JobConf.MAPRED_MAP_TASK_ENV, \"\");\n    jobConf.set(MRJobConfig.APPLICATION_ATTEMPT_ID, \"10\");\n\n    TaskSplitMetaInfo splits = mock(TaskSplitMetaInfo.class);\n    when(splits.getLocations()).thenReturn(new String[] {\"127.0.0.1\"});\n\n    AppContext appCtx = mock(AppContext.class);\n    ClusterInfo clusterInfo = mock(ClusterInfo.class);\n    when(appCtx.getClusterInfo()).thenReturn(clusterInfo);\n    setupTaskAttemptFinishingMonitor(eventHandler, jobConf, appCtx);\n\n    TaskAttemptImpl taImpl =\n        new MapTaskAttemptImpl(taskId, 1, eventHandler, jobFile, 1,\n            splits, jobConf, taListener,\n            mock(Token.class), new Credentials(),\n            SystemClock.getInstance(), appCtx);\n\n    NodeId nid = NodeId.newInstance(\"127.0.0.1\", 0);\n    ContainerId contId = ContainerId.newInstance(appAttemptId, 3);\n    Container container = mock(Container.class);\n    when(container.getId()).thenReturn(contId);\n    when(container.getNodeId()).thenReturn(nid);\n    when(container.getNodeHttpAddress()).thenReturn(\"localhost:0\");\n\n    taImpl.handle(new TaskAttemptEvent(attemptId,\n        TaskAttemptEventType.TA_SCHEDULE));\n    taImpl.handle(new TaskAttemptContainerAssignedEvent(attemptId,\n        container, mock(Map.class)));\n    taImpl.handle(new TaskAttemptContainerLaunchedEvent(attemptId, 0));\n    return taImpl;\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestTaskAttempt.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":1832,"status":"N"}],"commitId":"ac6c4f0b290477017798491a4bd77fa9f107871c","commitMessage":"@@@MAPREDUCE-7197. Fix order of actual and expected expression in assert statements. Contributed by Adam Antal\n","date":"2019-08-12 19:54:28","modifiedFileCount":"75","status":"M","submitter":"Szilard Nemeth"}]
