[{"authorTime":"2018-01-27 04:36:45","codes":[{"authorDate":"2018-01-27 04:36:45","commitOrder":1,"curCode":"  public void testJobNoTasks() {\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.NUM_REDUCES, 0);\n    conf.set(MRJobConfig.MR_AM_STAGING_DIR, stagingDir);\n    conf.set(MRJobConfig.WORKFLOW_ID, \"testId\");\n    conf.set(MRJobConfig.WORKFLOW_NAME, \"testName\");\n    conf.set(MRJobConfig.WORKFLOW_NODE_NAME, \"testNodeName\");\n    conf.set(MRJobConfig.WORKFLOW_ADJACENCY_PREFIX_STRING + \"key1\", \"value1\");\n    conf.set(MRJobConfig.WORKFLOW_ADJACENCY_PREFIX_STRING + \"key2\", \"value2\");\n    conf.set(MRJobConfig.WORKFLOW_TAGS, \"tag1,tag2\");\n    \n \n    AsyncDispatcher dispatcher = new AsyncDispatcher();\n    dispatcher.init(conf);\n    dispatcher.start();\n    OutputCommitter committer = mock(OutputCommitter.class);\n    CommitterEventHandler commitHandler =\n        createCommitterEventHandler(dispatcher, committer);\n    commitHandler.init(conf);\n    commitHandler.start();\n\n    JobSubmittedEventHandler jseHandler = new JobSubmittedEventHandler(\"testId\",\n        \"testName\", \"testNodeName\", \"\\\"key2\\\"=\\\"value2\\\" \\\"key1\\\"=\\\"value1\\\" \",\n        \"tag1,tag2\");\n    dispatcher.register(EventType.class, jseHandler);\n    JobImpl job = createStubbedJob(conf, dispatcher, 0, null);\n    job.handle(new JobEvent(job.getID(), JobEventType.JOB_INIT));\n    assertJobState(job, JobStateInternal.INITED);\n    job.handle(new JobStartEvent(job.getID()));\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n    dispatcher.stop();\n    commitHandler.stop();\n    try {\n      Assert.assertTrue(jseHandler.getAssertValue());\n    } catch (InterruptedException e) {\n      Assert.fail(\"Workflow related attributes are not tested properly\");\n    }\n  }\n","date":"2018-01-27 04:36:45","endLine":175,"groupId":"16102","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJobNoTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/85/92b20dad2da58fb37a12996a1dde43be403212.src","preCode":"  public void testJobNoTasks() {\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.NUM_REDUCES, 0);\n    conf.set(MRJobConfig.MR_AM_STAGING_DIR, stagingDir);\n    conf.set(MRJobConfig.WORKFLOW_ID, \"testId\");\n    conf.set(MRJobConfig.WORKFLOW_NAME, \"testName\");\n    conf.set(MRJobConfig.WORKFLOW_NODE_NAME, \"testNodeName\");\n    conf.set(MRJobConfig.WORKFLOW_ADJACENCY_PREFIX_STRING + \"key1\", \"value1\");\n    conf.set(MRJobConfig.WORKFLOW_ADJACENCY_PREFIX_STRING + \"key2\", \"value2\");\n    conf.set(MRJobConfig.WORKFLOW_TAGS, \"tag1,tag2\");\n    \n \n    AsyncDispatcher dispatcher = new AsyncDispatcher();\n    dispatcher.init(conf);\n    dispatcher.start();\n    OutputCommitter committer = mock(OutputCommitter.class);\n    CommitterEventHandler commitHandler =\n        createCommitterEventHandler(dispatcher, committer);\n    commitHandler.init(conf);\n    commitHandler.start();\n\n    JobSubmittedEventHandler jseHandler = new JobSubmittedEventHandler(\"testId\",\n        \"testName\", \"testNodeName\", \"\\\"key2\\\"=\\\"value2\\\" \\\"key1\\\"=\\\"value1\\\" \",\n        \"tag1,tag2\");\n    dispatcher.register(EventType.class, jseHandler);\n    JobImpl job = createStubbedJob(conf, dispatcher, 0, null);\n    job.handle(new JobEvent(job.getID(), JobEventType.JOB_INIT));\n    assertJobState(job, JobStateInternal.INITED);\n    job.handle(new JobStartEvent(job.getID()));\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n    dispatcher.stop();\n    commitHandler.stop();\n    try {\n      Assert.assertTrue(jseHandler.getAssertValue());\n    } catch (InterruptedException e) {\n      Assert.fail(\"Workflow related attributes are not tested properly\");\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestJobImpl.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"},{"authorDate":"2018-01-27 04:36:45","commitOrder":1,"curCode":"  public void testCheckJobCompleteSuccess() throws Exception {\n    Configuration conf = new Configuration();\n    conf.set(MRJobConfig.MR_AM_STAGING_DIR, stagingDir);\n    AsyncDispatcher dispatcher = new AsyncDispatcher();\n    dispatcher.init(conf);\n    dispatcher.start();\n    CyclicBarrier syncBarrier = new CyclicBarrier(2);\n    OutputCommitter committer = new TestingOutputCommitter(syncBarrier, true);\n    CommitterEventHandler commitHandler =\n        createCommitterEventHandler(dispatcher, committer);\n    commitHandler.init(conf);\n    commitHandler.start();\n\n    JobImpl job = createRunningStubbedJob(conf, dispatcher, 2, null);\n    completeJobTasks(job);\n    assertJobState(job, JobStateInternal.COMMITTING);\n\n    job.handle(new JobEvent(job.getID(),\n        JobEventType.JOB_TASK_ATTEMPT_COMPLETED));\n    assertJobState(job, JobStateInternal.COMMITTING);\n\n    job.handle(new JobEvent(job.getID(),\n        JobEventType.JOB_MAP_TASK_RESCHEDULED));\n    assertJobState(job, JobStateInternal.COMMITTING);\n\n    \r\n    syncBarrier.await();\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n    \n    job.handle(new JobEvent(job.getID(),\n        JobEventType.JOB_TASK_ATTEMPT_COMPLETED));\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n\n    job.handle(new JobEvent(job.getID(), \n        JobEventType.JOB_MAP_TASK_RESCHEDULED));\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n    \n    dispatcher.stop();\n    commitHandler.stop();\n  }\n","date":"2018-01-27 04:36:45","endLine":242,"groupId":"16102","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckJobCompleteSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/85/92b20dad2da58fb37a12996a1dde43be403212.src","preCode":"  public void testCheckJobCompleteSuccess() throws Exception {\n    Configuration conf = new Configuration();\n    conf.set(MRJobConfig.MR_AM_STAGING_DIR, stagingDir);\n    AsyncDispatcher dispatcher = new AsyncDispatcher();\n    dispatcher.init(conf);\n    dispatcher.start();\n    CyclicBarrier syncBarrier = new CyclicBarrier(2);\n    OutputCommitter committer = new TestingOutputCommitter(syncBarrier, true);\n    CommitterEventHandler commitHandler =\n        createCommitterEventHandler(dispatcher, committer);\n    commitHandler.init(conf);\n    commitHandler.start();\n\n    JobImpl job = createRunningStubbedJob(conf, dispatcher, 2, null);\n    completeJobTasks(job);\n    assertJobState(job, JobStateInternal.COMMITTING);\n\n    job.handle(new JobEvent(job.getID(),\n        JobEventType.JOB_TASK_ATTEMPT_COMPLETED));\n    assertJobState(job, JobStateInternal.COMMITTING);\n\n    job.handle(new JobEvent(job.getID(),\n        JobEventType.JOB_MAP_TASK_RESCHEDULED));\n    assertJobState(job, JobStateInternal.COMMITTING);\n\n    \r\n    syncBarrier.await();\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n    \n    job.handle(new JobEvent(job.getID(),\n        JobEventType.JOB_TASK_ATTEMPT_COMPLETED));\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n\n    job.handle(new JobEvent(job.getID(), \n        JobEventType.JOB_MAP_TASK_RESCHEDULED));\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n    \n    dispatcher.stop();\n    commitHandler.stop();\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestJobImpl.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"B"}],"commitId":"a37e7f0ad8b68c7ed16c242bedf62f4cde48d6fd","commitMessage":"@@@MAPREDUCE-7022. Fast fail rogue jobs based on task scratch dir size. Contributed by Johan Gustavsson\n","date":"2018-01-27 04:36:45","modifiedFileCount":"19","status":"B","submitter":"Jason Lowe"},{"authorTime":"2020-05-19 13:36:36","codes":[{"authorDate":"2018-01-27 04:36:45","commitOrder":2,"curCode":"  public void testJobNoTasks() {\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.NUM_REDUCES, 0);\n    conf.set(MRJobConfig.MR_AM_STAGING_DIR, stagingDir);\n    conf.set(MRJobConfig.WORKFLOW_ID, \"testId\");\n    conf.set(MRJobConfig.WORKFLOW_NAME, \"testName\");\n    conf.set(MRJobConfig.WORKFLOW_NODE_NAME, \"testNodeName\");\n    conf.set(MRJobConfig.WORKFLOW_ADJACENCY_PREFIX_STRING + \"key1\", \"value1\");\n    conf.set(MRJobConfig.WORKFLOW_ADJACENCY_PREFIX_STRING + \"key2\", \"value2\");\n    conf.set(MRJobConfig.WORKFLOW_TAGS, \"tag1,tag2\");\n    \n \n    AsyncDispatcher dispatcher = new AsyncDispatcher();\n    dispatcher.init(conf);\n    dispatcher.start();\n    OutputCommitter committer = mock(OutputCommitter.class);\n    CommitterEventHandler commitHandler =\n        createCommitterEventHandler(dispatcher, committer);\n    commitHandler.init(conf);\n    commitHandler.start();\n\n    JobSubmittedEventHandler jseHandler = new JobSubmittedEventHandler(\"testId\",\n        \"testName\", \"testNodeName\", \"\\\"key2\\\"=\\\"value2\\\" \\\"key1\\\"=\\\"value1\\\" \",\n        \"tag1,tag2\");\n    dispatcher.register(EventType.class, jseHandler);\n    JobImpl job = createStubbedJob(conf, dispatcher, 0, null);\n    job.handle(new JobEvent(job.getID(), JobEventType.JOB_INIT));\n    assertJobState(job, JobStateInternal.INITED);\n    job.handle(new JobStartEvent(job.getID()));\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n    dispatcher.stop();\n    commitHandler.stop();\n    try {\n      Assert.assertTrue(jseHandler.getAssertValue());\n    } catch (InterruptedException e) {\n      Assert.fail(\"Workflow related attributes are not tested properly\");\n    }\n  }\n","date":"2018-01-27 04:36:45","endLine":175,"groupId":"10308","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJobNoTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/85/92b20dad2da58fb37a12996a1dde43be403212.src","preCode":"  public void testJobNoTasks() {\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.NUM_REDUCES, 0);\n    conf.set(MRJobConfig.MR_AM_STAGING_DIR, stagingDir);\n    conf.set(MRJobConfig.WORKFLOW_ID, \"testId\");\n    conf.set(MRJobConfig.WORKFLOW_NAME, \"testName\");\n    conf.set(MRJobConfig.WORKFLOW_NODE_NAME, \"testNodeName\");\n    conf.set(MRJobConfig.WORKFLOW_ADJACENCY_PREFIX_STRING + \"key1\", \"value1\");\n    conf.set(MRJobConfig.WORKFLOW_ADJACENCY_PREFIX_STRING + \"key2\", \"value2\");\n    conf.set(MRJobConfig.WORKFLOW_TAGS, \"tag1,tag2\");\n    \n \n    AsyncDispatcher dispatcher = new AsyncDispatcher();\n    dispatcher.init(conf);\n    dispatcher.start();\n    OutputCommitter committer = mock(OutputCommitter.class);\n    CommitterEventHandler commitHandler =\n        createCommitterEventHandler(dispatcher, committer);\n    commitHandler.init(conf);\n    commitHandler.start();\n\n    JobSubmittedEventHandler jseHandler = new JobSubmittedEventHandler(\"testId\",\n        \"testName\", \"testNodeName\", \"\\\"key2\\\"=\\\"value2\\\" \\\"key1\\\"=\\\"value1\\\" \",\n        \"tag1,tag2\");\n    dispatcher.register(EventType.class, jseHandler);\n    JobImpl job = createStubbedJob(conf, dispatcher, 0, null);\n    job.handle(new JobEvent(job.getID(), JobEventType.JOB_INIT));\n    assertJobState(job, JobStateInternal.INITED);\n    job.handle(new JobStartEvent(job.getID()));\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n    dispatcher.stop();\n    commitHandler.stop();\n    try {\n      Assert.assertTrue(jseHandler.getAssertValue());\n    } catch (InterruptedException e) {\n      Assert.fail(\"Workflow related attributes are not tested properly\");\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestJobImpl.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"},{"authorDate":"2020-05-19 13:36:36","commitOrder":2,"curCode":"  public void testCheckJobCompleteSuccess() throws Exception {\n    Configuration conf = new Configuration();\n    conf.set(MRJobConfig.MR_AM_STAGING_DIR, stagingDir);\n    DrainDispatcher dispatcher = new DrainDispatcher();\n    dispatcher.init(conf);\n    dispatcher.start();\n    CyclicBarrier syncBarrier = new CyclicBarrier(2);\n    OutputCommitter committer = new TestingOutputCommitter(syncBarrier, true);\n    CommitterEventHandler commitHandler =\n        createCommitterEventHandler(dispatcher, committer);\n    commitHandler.init(conf);\n    commitHandler.start();\n\n    JobImpl job = createRunningStubbedJob(conf, dispatcher, 2, null);\n    completeJobTasks(job);\n    assertJobState(job, JobStateInternal.COMMITTING);\n\n    job.handle(new JobEvent(job.getID(),\n        JobEventType.JOB_TASK_ATTEMPT_COMPLETED));\n    assertJobState(job, JobStateInternal.COMMITTING);\n\n    job.handle(new JobEvent(job.getID(),\n        JobEventType.JOB_MAP_TASK_RESCHEDULED));\n    assertJobState(job, JobStateInternal.COMMITTING);\n\n    job.handle(new JobEvent(job.getID(),\n        JobEventType.JOB_TASK_COMPLETED));\n    dispatcher.await();\n    assertJobState(job, JobStateInternal.COMMITTING);\n\n    \r\n    syncBarrier.await();\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n    \n    job.handle(new JobEvent(job.getID(),\n        JobEventType.JOB_TASK_ATTEMPT_COMPLETED));\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n\n    job.handle(new JobEvent(job.getID(), \n        JobEventType.JOB_MAP_TASK_RESCHEDULED));\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n\n    job.handle(new JobEvent(job.getID(),\n        JobEventType.JOB_TASK_COMPLETED));\n    dispatcher.await();\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n    \n    dispatcher.stop();\n    commitHandler.stop();\n  }\n","date":"2020-05-19 13:36:36","endLine":252,"groupId":"10308","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckJobCompleteSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/12/2fb9bf3d0403ff8df316d50c33b6b560991cf2.src","preCode":"  public void testCheckJobCompleteSuccess() throws Exception {\n    Configuration conf = new Configuration();\n    conf.set(MRJobConfig.MR_AM_STAGING_DIR, stagingDir);\n    AsyncDispatcher dispatcher = new AsyncDispatcher();\n    dispatcher.init(conf);\n    dispatcher.start();\n    CyclicBarrier syncBarrier = new CyclicBarrier(2);\n    OutputCommitter committer = new TestingOutputCommitter(syncBarrier, true);\n    CommitterEventHandler commitHandler =\n        createCommitterEventHandler(dispatcher, committer);\n    commitHandler.init(conf);\n    commitHandler.start();\n\n    JobImpl job = createRunningStubbedJob(conf, dispatcher, 2, null);\n    completeJobTasks(job);\n    assertJobState(job, JobStateInternal.COMMITTING);\n\n    job.handle(new JobEvent(job.getID(),\n        JobEventType.JOB_TASK_ATTEMPT_COMPLETED));\n    assertJobState(job, JobStateInternal.COMMITTING);\n\n    job.handle(new JobEvent(job.getID(),\n        JobEventType.JOB_MAP_TASK_RESCHEDULED));\n    assertJobState(job, JobStateInternal.COMMITTING);\n\n    \r\n    syncBarrier.await();\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n    \n    job.handle(new JobEvent(job.getID(),\n        JobEventType.JOB_TASK_ATTEMPT_COMPLETED));\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n\n    job.handle(new JobEvent(job.getID(), \n        JobEventType.JOB_MAP_TASK_RESCHEDULED));\n    assertJobState(job, JobStateInternal.SUCCEEDED);\n    \n    dispatcher.stop();\n    commitHandler.stop();\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TestJobImpl.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"d4e36409d40d9f0783234a3b98394962ae0da87e","commitMessage":"@@@MAPREDUCE-6826. Job fails with InvalidStateTransitonException: Invalid event: JOB_TASK_COMPLETED at SUCCEEDED/COMMITTING. Contributed by Bilwa S T.\n","date":"2020-05-19 13:36:36","modifiedFileCount":"2","status":"M","submitter":"Surendra Singh Lilhore"}]
