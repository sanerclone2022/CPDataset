[{"authorTime":"2018-01-31 17:42:42","codes":[{"authorDate":"2018-01-31 17:42:42","commitOrder":1,"curCode":"  public void testUnsupportedMapContainerRequirement() throws Exception {\n    final Resource maxContainerSupported = Resource.newInstance(1, 1);\n\n    final ApplicationId appId = ApplicationId.newInstance(1, 1);\n    final ApplicationAttemptId appAttemptId =\n        ApplicationAttemptId.newInstance(appId, 1);\n    final JobId jobId =\n        MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n\n    final MockScheduler mockScheduler = new MockScheduler(appAttemptId);\n    final Configuration conf = new Configuration();\n\n    final MyContainerAllocator allocator = new MyContainerAllocator(null,\n        conf, appAttemptId, mock(Job.class), SystemClock.getInstance()) {\n      @Override\n      protected void register() {\n      }\n      @Override\n      protected ApplicationMasterProtocol createSchedulerProxy() {\n        return mockScheduler;\n      }\n      @Override\n      protected Resource getMaxContainerCapability() {\n        return maxContainerSupported;\n      }\n    };\n\n    ContainerRequestEvent mapRequestEvt = createReq(jobId, 0,\n        (int) (maxContainerSupported.getMemorySize() + 10),\n        maxContainerSupported.getVirtualCores(),\n        new String[0], false, false);\n    allocator.sendRequests(Arrays.asList(mapRequestEvt));\n    allocator.schedule();\n\n    Assert.assertEquals(0, mockScheduler.lastAnyAskMap);\n  }\n","date":"2018-01-31 17:42:42","endLine":2707,"groupId":"14627","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnsupportedMapContainerRequirement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/78/75917b68eec03cc7f44ed43633ed880e626905.src","preCode":"  public void testUnsupportedMapContainerRequirement() throws Exception {\n    final Resource maxContainerSupported = Resource.newInstance(1, 1);\n\n    final ApplicationId appId = ApplicationId.newInstance(1, 1);\n    final ApplicationAttemptId appAttemptId =\n        ApplicationAttemptId.newInstance(appId, 1);\n    final JobId jobId =\n        MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n\n    final MockScheduler mockScheduler = new MockScheduler(appAttemptId);\n    final Configuration conf = new Configuration();\n\n    final MyContainerAllocator allocator = new MyContainerAllocator(null,\n        conf, appAttemptId, mock(Job.class), SystemClock.getInstance()) {\n      @Override\n      protected void register() {\n      }\n      @Override\n      protected ApplicationMasterProtocol createSchedulerProxy() {\n        return mockScheduler;\n      }\n      @Override\n      protected Resource getMaxContainerCapability() {\n        return maxContainerSupported;\n      }\n    };\n\n    ContainerRequestEvent mapRequestEvt = createReq(jobId, 0,\n        (int) (maxContainerSupported.getMemorySize() + 10),\n        maxContainerSupported.getVirtualCores(),\n        new String[0], false, false);\n    allocator.sendRequests(Arrays.asList(mapRequestEvt));\n    allocator.schedule();\n\n    Assert.assertEquals(0, mockScheduler.lastAnyAskMap);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":2672,"status":"B"},{"authorDate":"2018-01-31 17:42:42","commitOrder":1,"curCode":"  public void testUnsupportedReduceContainerRequirement() throws Exception {\n    final Resource maxContainerSupported = Resource.newInstance(1, 1);\n\n    final ApplicationId appId = ApplicationId.newInstance(1, 1);\n    final ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(\n        appId, 1);\n    final JobId jobId =\n        MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n\n    final MockScheduler mockScheduler = new MockScheduler(appAttemptId);\n    final Configuration conf = new Configuration();\n\n    final MyContainerAllocator allocator = new MyContainerAllocator(null,\n        conf, appAttemptId, mock(Job.class), SystemClock.getInstance()) {\n      @Override\n      protected void register() {\n      }\n      @Override\n      protected ApplicationMasterProtocol createSchedulerProxy() {\n        return mockScheduler;\n      }\n      @Override\n      protected Resource getMaxContainerCapability() {\n        return maxContainerSupported;\n      }\n    };\n\n    ContainerRequestEvent reduceRequestEvt = createReq(jobId, 0,\n        (int) (maxContainerSupported.getMemorySize() + 10),\n        maxContainerSupported.getVirtualCores(),\n        new String[0], false, true);\n    allocator.sendRequests(Arrays.asList(reduceRequestEvt));\n    \r\n    \r\n    \r\n    allocator.scheduleAllReduces();\n    allocator.schedule();\n\n    Assert.assertEquals(0, mockScheduler.lastAnyAskReduce);\n  }\n","date":"2018-01-31 17:42:42","endLine":2749,"groupId":"14627","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnsupportedReduceContainerRequirement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/78/75917b68eec03cc7f44ed43633ed880e626905.src","preCode":"  public void testUnsupportedReduceContainerRequirement() throws Exception {\n    final Resource maxContainerSupported = Resource.newInstance(1, 1);\n\n    final ApplicationId appId = ApplicationId.newInstance(1, 1);\n    final ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(\n        appId, 1);\n    final JobId jobId =\n        MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n\n    final MockScheduler mockScheduler = new MockScheduler(appAttemptId);\n    final Configuration conf = new Configuration();\n\n    final MyContainerAllocator allocator = new MyContainerAllocator(null,\n        conf, appAttemptId, mock(Job.class), SystemClock.getInstance()) {\n      @Override\n      protected void register() {\n      }\n      @Override\n      protected ApplicationMasterProtocol createSchedulerProxy() {\n        return mockScheduler;\n      }\n      @Override\n      protected Resource getMaxContainerCapability() {\n        return maxContainerSupported;\n      }\n    };\n\n    ContainerRequestEvent reduceRequestEvt = createReq(jobId, 0,\n        (int) (maxContainerSupported.getMemorySize() + 10),\n        maxContainerSupported.getVirtualCores(),\n        new String[0], false, true);\n    allocator.sendRequests(Arrays.asList(reduceRequestEvt));\n    \r\n    \r\n    \r\n    allocator.scheduleAllReduces();\n    allocator.schedule();\n\n    Assert.assertEquals(0, mockScheduler.lastAnyAskReduce);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":2710,"status":"B"}],"commitId":"8d1e2c6409a44f4515a1549ae82c7e2597e96467","commitMessage":"@@@Merge branch 'YARN-6592' into trunk\n","date":"2018-01-31 17:42:42","modifiedFileCount":"83","status":"B","submitter":"Arun Suresh"},{"authorTime":"2018-05-11 00:31:59","codes":[{"authorDate":"2018-05-11 00:31:59","commitOrder":2,"curCode":"  public void testUnsupportedMapContainerRequirement() throws Exception {\n    final Resource maxContainerSupported = Resource.newInstance(1, 1);\n\n    final ApplicationId appId = ApplicationId.newInstance(1, 1);\n    final ApplicationAttemptId appAttemptId =\n        ApplicationAttemptId.newInstance(appId, 1);\n    final JobId jobId =\n        MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n\n    final MockScheduler mockScheduler = new MockScheduler(appAttemptId);\n    final Configuration conf = new Configuration();\n\n    final MyContainerAllocator allocator = new MyContainerAllocator(null,\n        conf, appAttemptId, mock(Job.class), SystemClock.getInstance()) {\n      @Override\n      protected void register() {\n      }\n      @Override\n      protected ApplicationMasterProtocol createSchedulerProxy() {\n        return mockScheduler;\n      }\n      @Override\n      protected Resource getMaxContainerCapability() {\n        return maxContainerSupported;\n      }\n    };\n\n    final int memory = (int) (maxContainerSupported.getMemorySize() + 10);\n    ContainerRequestEvent mapRequestEvt = createRequest(jobId, 0,\n            Resource.newInstance(memory,\n            maxContainerSupported.getVirtualCores()),\n        new String[0], false, false);\n    allocator.sendRequests(Arrays.asList(mapRequestEvt));\n    allocator.schedule();\n\n    Assert.assertEquals(0, mockScheduler.lastAnyAskMap);\n  }\n","date":"2018-05-11 00:31:59","endLine":2729,"groupId":"1098","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnsupportedMapContainerRequirement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/42/7e6ea228f07be943dfedeb58106a10db30d900.src","preCode":"  public void testUnsupportedMapContainerRequirement() throws Exception {\n    final Resource maxContainerSupported = Resource.newInstance(1, 1);\n\n    final ApplicationId appId = ApplicationId.newInstance(1, 1);\n    final ApplicationAttemptId appAttemptId =\n        ApplicationAttemptId.newInstance(appId, 1);\n    final JobId jobId =\n        MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n\n    final MockScheduler mockScheduler = new MockScheduler(appAttemptId);\n    final Configuration conf = new Configuration();\n\n    final MyContainerAllocator allocator = new MyContainerAllocator(null,\n        conf, appAttemptId, mock(Job.class), SystemClock.getInstance()) {\n      @Override\n      protected void register() {\n      }\n      @Override\n      protected ApplicationMasterProtocol createSchedulerProxy() {\n        return mockScheduler;\n      }\n      @Override\n      protected Resource getMaxContainerCapability() {\n        return maxContainerSupported;\n      }\n    };\n\n    ContainerRequestEvent mapRequestEvt = createReq(jobId, 0,\n        (int) (maxContainerSupported.getMemorySize() + 10),\n        maxContainerSupported.getVirtualCores(),\n        new String[0], false, false);\n    allocator.sendRequests(Arrays.asList(mapRequestEvt));\n    allocator.schedule();\n\n    Assert.assertEquals(0, mockScheduler.lastAnyAskMap);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":2693,"status":"M"},{"authorDate":"2018-05-11 00:31:59","commitOrder":2,"curCode":"  public void testUnsupportedReduceContainerRequirement() throws Exception {\n    final Resource maxContainerSupported = Resource.newInstance(1, 1);\n\n    final ApplicationId appId = ApplicationId.newInstance(1, 1);\n    final ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(\n        appId, 1);\n    final JobId jobId =\n        MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n\n    final MockScheduler mockScheduler = new MockScheduler(appAttemptId);\n    final Configuration conf = new Configuration();\n\n    final MyContainerAllocator allocator = new MyContainerAllocator(null,\n        conf, appAttemptId, mock(Job.class), SystemClock.getInstance()) {\n      @Override\n      protected void register() {\n      }\n      @Override\n      protected ApplicationMasterProtocol createSchedulerProxy() {\n        return mockScheduler;\n      }\n      @Override\n      protected Resource getMaxContainerCapability() {\n        return maxContainerSupported;\n      }\n    };\n\n    final int memory = (int) (maxContainerSupported.getMemorySize() + 10);\n    ContainerRequestEvent reduceRequestEvt = createRequest(jobId, 0,\n            Resource.newInstance(memory,\n            maxContainerSupported.getVirtualCores()),\n            new String[0], false, true);\n    allocator.sendRequests(Arrays.asList(reduceRequestEvt));\n    \r\n    \r\n    \r\n    allocator.scheduleAllReduces();\n    allocator.schedule();\n\n    Assert.assertEquals(0, mockScheduler.lastAnyAskReduce);\n  }\n","date":"2018-05-11 00:31:59","endLine":2772,"groupId":"1098","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnsupportedReduceContainerRequirement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/42/7e6ea228f07be943dfedeb58106a10db30d900.src","preCode":"  public void testUnsupportedReduceContainerRequirement() throws Exception {\n    final Resource maxContainerSupported = Resource.newInstance(1, 1);\n\n    final ApplicationId appId = ApplicationId.newInstance(1, 1);\n    final ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(\n        appId, 1);\n    final JobId jobId =\n        MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n\n    final MockScheduler mockScheduler = new MockScheduler(appAttemptId);\n    final Configuration conf = new Configuration();\n\n    final MyContainerAllocator allocator = new MyContainerAllocator(null,\n        conf, appAttemptId, mock(Job.class), SystemClock.getInstance()) {\n      @Override\n      protected void register() {\n      }\n      @Override\n      protected ApplicationMasterProtocol createSchedulerProxy() {\n        return mockScheduler;\n      }\n      @Override\n      protected Resource getMaxContainerCapability() {\n        return maxContainerSupported;\n      }\n    };\n\n    ContainerRequestEvent reduceRequestEvt = createReq(jobId, 0,\n        (int) (maxContainerSupported.getMemorySize() + 10),\n        maxContainerSupported.getVirtualCores(),\n        new String[0], false, true);\n    allocator.sendRequests(Arrays.asList(reduceRequestEvt));\n    \r\n    \r\n    \r\n    allocator.scheduleAllReduces();\n    allocator.schedule();\n\n    Assert.assertEquals(0, mockScheduler.lastAnyAskReduce);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":2732,"status":"M"}],"commitId":"c8b53c43644b4ad22d5385c22cad8ed573c0b1ba","commitMessage":"@@@YARN-8202. DefaultAMSProcessor should properly check units of requested custom resource types against minimum/maximum allocation (snemeth via rkanter)\n","date":"2018-05-11 00:31:59","modifiedFileCount":"6","status":"M","submitter":"Robert Kanter"}]
