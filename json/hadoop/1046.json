[{"authorTime":"2018-01-20 04:56:17","codes":[{"authorDate":"2018-01-20 04:56:17","commitOrder":1,"curCode":"  public void testCrashed() throws Exception {\n\n    int runCount = 0;\n    long am1StartTimeEst = System.currentTimeMillis();\n    MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount);\n    Configuration conf = new Configuration();\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    Job job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    long jobStartTime = job.getReport().getStartTime();\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n    Iterator<Task> it = job.getTasks().values().iterator();\n    Task mapTask1 = it.next();\n    Task mapTask2 = it.next();\n    Task reduceTask = it.next();\n    \n    \r\n    app.waitForState(mapTask1, TaskState.RUNNING);\n    app.waitForState(mapTask2, TaskState.RUNNING);\n    \n    TaskAttempt task1Attempt1 = mapTask1.getAttempts().values().iterator().next();\n    TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next();\n    \n    \r\n    \r\n    app.waitForState(task1Attempt1, TaskAttemptState.RUNNING);\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n    \n    app.waitForState(reduceTask, TaskState.RUNNING);\n\n    \r\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            task1Attempt1.getID(),\n            TaskAttemptEventType.TA_FAILMSG));\n    \n    app.waitForState(task1Attempt1, TaskAttemptState.FAILED);\n\n    int timeOut = 0;\n    while (mapTask1.getAttempts().size() != 2 && timeOut++ < 10) {\n      Thread.sleep(2000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Assert.assertEquals(2, mapTask1.getAttempts().size());\n    Iterator<TaskAttempt> itr = mapTask1.getAttempts().values().iterator();\n    itr.next();\n    TaskAttempt task1Attempt2 = itr.next();\n\n    \r\n    waitForContainerAssignment(task1Attempt2);\n\n    \r\n    \r\n    \r\n    app.getContext().getEventHandler().handle(\n      new TaskAttemptEvent(task1Attempt2.getID(),\n        TaskAttemptEventType.TA_CONTAINER_LAUNCH_FAILED));\n    app.waitForState(task1Attempt2, TaskAttemptState.FAILED);\n\n    timeOut = 0;\n    while (mapTask1.getAttempts().size() != 3 && timeOut++ < 10) {\n      Thread.sleep(2000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Assert.assertEquals(3, mapTask1.getAttempts().size());\n    itr = mapTask1.getAttempts().values().iterator();\n    itr.next();\n    itr.next();\n    TaskAttempt task1Attempt3 = itr.next();\n    \n    app.waitForState(task1Attempt3, TaskAttemptState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            task1Attempt3.getID(),\n            TaskAttemptEventType.TA_KILL));\n    \n    app.waitForState(task1Attempt3, TaskAttemptState.KILLED);\n\n    timeOut = 0;\n    while (mapTask1.getAttempts().size() != 4 && timeOut++ < 10) {\n      Thread.sleep(2000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Assert.assertEquals(4, mapTask1.getAttempts().size());\n    itr = mapTask1.getAttempts().values().iterator();\n    itr.next();\n    itr.next();\n    itr.next();\n    TaskAttempt task1Attempt4 = itr.next();\n    \n    app.waitForState(task1Attempt4, TaskAttemptState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            task1Attempt4.getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    \r\n\n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n    long task1StartTime = mapTask1.getReport().getStartTime();\n    long task1FinishTime = mapTask1.getReport().getFinishTime();\n    \n    \r\n    app.stop();\n\n    \r\n    \r\n    long am2StartTimeEst = System.currentTimeMillis();\n    app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount);\n    conf = new Configuration();\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true);\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n    it = job.getTasks().values().iterator();\n    mapTask1 = it.next();\n    mapTask2 = it.next();\n    reduceTask = it.next();\n    \n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n    \n    app.waitForState(mapTask2, TaskState.RUNNING);\n    \n    task2Attempt = mapTask2.getAttempts().values().iterator().next();\n    \r\n    \r\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n    \n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            mapTask2.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n    \n    \r\n    app.waitForState(mapTask2, TaskState.SUCCEEDED);\n    \n    \r\n    app.waitForState(reduceTask, TaskState.RUNNING);\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            reduceTask.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n    \n    app.waitForState(job, JobState.SUCCEEDED);\n    app.verifyCompleted();\n    Assert.assertEquals(\"Job Start time not correct\",\n        jobStartTime, job.getReport().getStartTime());\n    Assert.assertEquals(\"Task Start time not correct\",\n        task1StartTime, mapTask1.getReport().getStartTime());\n    Assert.assertEquals(\"Task Finish time not correct\",\n        task1FinishTime, mapTask1.getReport().getFinishTime());\n    Assert.assertEquals(2, job.getAMInfos().size());\n    int attemptNum = 1;\n    \r\n    for (AMInfo amInfo : job.getAMInfos()) {\n      Assert.assertEquals(attemptNum++, amInfo.getAppAttemptId()\n          .getAttemptId());\n      Assert.assertEquals(amInfo.getAppAttemptId(), amInfo.getContainerId()\n          .getApplicationAttemptId());\n      Assert.assertEquals(MRApp.NM_HOST, amInfo.getNodeManagerHost());\n      Assert.assertEquals(MRApp.NM_PORT, amInfo.getNodeManagerPort());\n      Assert.assertEquals(MRApp.NM_HTTP_PORT, amInfo.getNodeManagerHttpPort());\n    }\n    long am1StartTimeReal = job.getAMInfos().get(0).getStartTime();\n    long am2StartTimeReal = job.getAMInfos().get(1).getStartTime();\n    Assert.assertTrue(am1StartTimeReal >= am1StartTimeEst\n        && am1StartTimeReal <= am2StartTimeEst);\n    Assert.assertTrue(am2StartTimeReal >= am2StartTimeEst\n        && am2StartTimeReal <= System.currentTimeMillis());\n    \r\n    \r\n  }\n","date":"2018-01-20 04:56:17","endLine":323,"groupId":"40612","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCrashed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/89/3c4a07334a40f2664d3861125c68f8bdc683d4.src","preCode":"  public void testCrashed() throws Exception {\n\n    int runCount = 0;\n    long am1StartTimeEst = System.currentTimeMillis();\n    MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount);\n    Configuration conf = new Configuration();\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    Job job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    long jobStartTime = job.getReport().getStartTime();\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n    Iterator<Task> it = job.getTasks().values().iterator();\n    Task mapTask1 = it.next();\n    Task mapTask2 = it.next();\n    Task reduceTask = it.next();\n    \n    \r\n    app.waitForState(mapTask1, TaskState.RUNNING);\n    app.waitForState(mapTask2, TaskState.RUNNING);\n    \n    TaskAttempt task1Attempt1 = mapTask1.getAttempts().values().iterator().next();\n    TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next();\n    \n    \r\n    \r\n    app.waitForState(task1Attempt1, TaskAttemptState.RUNNING);\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n    \n    app.waitForState(reduceTask, TaskState.RUNNING);\n\n    \r\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            task1Attempt1.getID(),\n            TaskAttemptEventType.TA_FAILMSG));\n    \n    app.waitForState(task1Attempt1, TaskAttemptState.FAILED);\n\n    int timeOut = 0;\n    while (mapTask1.getAttempts().size() != 2 && timeOut++ < 10) {\n      Thread.sleep(2000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Assert.assertEquals(2, mapTask1.getAttempts().size());\n    Iterator<TaskAttempt> itr = mapTask1.getAttempts().values().iterator();\n    itr.next();\n    TaskAttempt task1Attempt2 = itr.next();\n\n    \r\n    waitForContainerAssignment(task1Attempt2);\n\n    \r\n    \r\n    \r\n    app.getContext().getEventHandler().handle(\n      new TaskAttemptEvent(task1Attempt2.getID(),\n        TaskAttemptEventType.TA_CONTAINER_LAUNCH_FAILED));\n    app.waitForState(task1Attempt2, TaskAttemptState.FAILED);\n\n    timeOut = 0;\n    while (mapTask1.getAttempts().size() != 3 && timeOut++ < 10) {\n      Thread.sleep(2000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Assert.assertEquals(3, mapTask1.getAttempts().size());\n    itr = mapTask1.getAttempts().values().iterator();\n    itr.next();\n    itr.next();\n    TaskAttempt task1Attempt3 = itr.next();\n    \n    app.waitForState(task1Attempt3, TaskAttemptState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            task1Attempt3.getID(),\n            TaskAttemptEventType.TA_KILL));\n    \n    app.waitForState(task1Attempt3, TaskAttemptState.KILLED);\n\n    timeOut = 0;\n    while (mapTask1.getAttempts().size() != 4 && timeOut++ < 10) {\n      Thread.sleep(2000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Assert.assertEquals(4, mapTask1.getAttempts().size());\n    itr = mapTask1.getAttempts().values().iterator();\n    itr.next();\n    itr.next();\n    itr.next();\n    TaskAttempt task1Attempt4 = itr.next();\n    \n    app.waitForState(task1Attempt4, TaskAttemptState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            task1Attempt4.getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    \r\n\n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n    long task1StartTime = mapTask1.getReport().getStartTime();\n    long task1FinishTime = mapTask1.getReport().getFinishTime();\n    \n    \r\n    app.stop();\n\n    \r\n    \r\n    long am2StartTimeEst = System.currentTimeMillis();\n    app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount);\n    conf = new Configuration();\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true);\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n    it = job.getTasks().values().iterator();\n    mapTask1 = it.next();\n    mapTask2 = it.next();\n    reduceTask = it.next();\n    \n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n    \n    app.waitForState(mapTask2, TaskState.RUNNING);\n    \n    task2Attempt = mapTask2.getAttempts().values().iterator().next();\n    \r\n    \r\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n    \n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            mapTask2.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n    \n    \r\n    app.waitForState(mapTask2, TaskState.SUCCEEDED);\n    \n    \r\n    app.waitForState(reduceTask, TaskState.RUNNING);\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            reduceTask.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n    \n    app.waitForState(job, JobState.SUCCEEDED);\n    app.verifyCompleted();\n    Assert.assertEquals(\"Job Start time not correct\",\n        jobStartTime, job.getReport().getStartTime());\n    Assert.assertEquals(\"Task Start time not correct\",\n        task1StartTime, mapTask1.getReport().getStartTime());\n    Assert.assertEquals(\"Task Finish time not correct\",\n        task1FinishTime, mapTask1.getReport().getFinishTime());\n    Assert.assertEquals(2, job.getAMInfos().size());\n    int attemptNum = 1;\n    \r\n    for (AMInfo amInfo : job.getAMInfos()) {\n      Assert.assertEquals(attemptNum++, amInfo.getAppAttemptId()\n          .getAttemptId());\n      Assert.assertEquals(amInfo.getAppAttemptId(), amInfo.getContainerId()\n          .getApplicationAttemptId());\n      Assert.assertEquals(MRApp.NM_HOST, amInfo.getNodeManagerHost());\n      Assert.assertEquals(MRApp.NM_PORT, amInfo.getNodeManagerPort());\n      Assert.assertEquals(MRApp.NM_HTTP_PORT, amInfo.getNodeManagerHttpPort());\n    }\n    long am1StartTimeReal = job.getAMInfos().get(0).getStartTime();\n    long am2StartTimeReal = job.getAMInfos().get(1).getStartTime();\n    Assert.assertTrue(am1StartTimeReal >= am1StartTimeEst\n        && am1StartTimeReal <= am2StartTimeEst);\n    Assert.assertTrue(am2StartTimeReal >= am2StartTimeEst\n        && am2StartTimeReal <= System.currentTimeMillis());\n    \r\n    \r\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRecovery.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"B"},{"authorDate":"2018-01-20 04:56:17","commitOrder":1,"curCode":"  public void testSpeculative() throws Exception {\n\n    int runCount = 0;\n    long am1StartTimeEst = System.currentTimeMillis();\n    MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount);\n    Configuration conf = new Configuration();\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    Job job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    long jobStartTime = job.getReport().getStartTime();\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n\n    Iterator<Task> it = job.getTasks().values().iterator();\n    Task mapTask1 = it.next();\n    Task mapTask2 = it.next();\n    Task reduceTask = it.next();\n\n    \r\n    app.waitForState(mapTask1, TaskState.RUNNING);\n    app.waitForState(mapTask2, TaskState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskEvent(mapTask1.getID(), TaskEventType.T_ADD_SPEC_ATTEMPT));\n    int timeOut = 0;\n    while (mapTask1.getAttempts().size() != 2 && timeOut++ < 10) {\n      Thread.sleep(1000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Iterator<TaskAttempt> t1it = mapTask1.getAttempts().values().iterator();\n    TaskAttempt task1Attempt1 = t1it.next();\n    TaskAttempt task1Attempt2 = t1it.next();\n    TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next();\n\n    \r\n    waitForContainerAssignment(task1Attempt2);\n    ContainerId t1a2contId = task1Attempt2.getAssignedContainerID();\n\n    LOG.info(t1a2contId.toString());\n    LOG.info(task1Attempt1.getID().toString());\n    LOG.info(task1Attempt2.getID().toString());\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptContainerLaunchedEvent(task1Attempt2.getID(), runCount));\n\n    \r\n    \r\n    app.waitForState(task1Attempt1, TaskAttemptState.RUNNING);\n    app.waitForState(task1Attempt2, TaskAttemptState.RUNNING);\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n\n    app.waitForState(reduceTask, TaskState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            task1Attempt1.getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    app.waitForState(task1Attempt1, TaskAttemptState.SUCCEEDED);\n\n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n    long task1StartTime = mapTask1.getReport().getStartTime();\n    long task1FinishTime = mapTask1.getReport().getFinishTime();\n\n    \r\n    app.stop();\n\n    \r\n    \r\n    long am2StartTimeEst = System.currentTimeMillis();\n    app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount);\n    conf = new Configuration();\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true);\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n    it = job.getTasks().values().iterator();\n    mapTask1 = it.next();\n    mapTask2 = it.next();\n    reduceTask = it.next();\n\n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n\n    app.waitForState(mapTask2, TaskState.RUNNING);\n\n    task2Attempt = mapTask2.getAttempts().values().iterator().next();\n    \r\n    \r\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            mapTask2.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    \r\n    app.waitForState(mapTask2, TaskState.SUCCEEDED);\n\n    \r\n    app.waitForState(reduceTask, TaskState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            reduceTask.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    app.waitForState(job, JobState.SUCCEEDED);\n    app.verifyCompleted();\n    Assert.assertEquals(\"Job Start time not correct\",\n        jobStartTime, job.getReport().getStartTime());\n    Assert.assertEquals(\"Task Start time not correct\",\n        task1StartTime, mapTask1.getReport().getStartTime());\n    Assert.assertEquals(\"Task Finish time not correct\",\n        task1FinishTime, mapTask1.getReport().getFinishTime());\n    Assert.assertEquals(2, job.getAMInfos().size());\n    int attemptNum = 1;\n    \r\n    for (AMInfo amInfo : job.getAMInfos()) {\n      Assert.assertEquals(attemptNum++, amInfo.getAppAttemptId()\n          .getAttemptId());\n      Assert.assertEquals(amInfo.getAppAttemptId(), amInfo.getContainerId()\n          .getApplicationAttemptId());\n      Assert.assertEquals(MRApp.NM_HOST, amInfo.getNodeManagerHost());\n      Assert.assertEquals(MRApp.NM_PORT, amInfo.getNodeManagerPort());\n      Assert.assertEquals(MRApp.NM_HTTP_PORT, amInfo.getNodeManagerHttpPort());\n    }\n    long am1StartTimeReal = job.getAMInfos().get(0).getStartTime();\n    long am2StartTimeReal = job.getAMInfos().get(1).getStartTime();\n    Assert.assertTrue(am1StartTimeReal >= am1StartTimeEst\n        && am1StartTimeReal <= am2StartTimeEst);\n    Assert.assertTrue(am2StartTimeReal >= am2StartTimeEst\n        && am2StartTimeReal <= System.currentTimeMillis());\n\n  }\n","date":"2018-01-20 04:56:17","endLine":1477,"groupId":"40618","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpeculative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/89/3c4a07334a40f2664d3861125c68f8bdc683d4.src","preCode":"  public void testSpeculative() throws Exception {\n\n    int runCount = 0;\n    long am1StartTimeEst = System.currentTimeMillis();\n    MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount);\n    Configuration conf = new Configuration();\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    Job job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    long jobStartTime = job.getReport().getStartTime();\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n\n    Iterator<Task> it = job.getTasks().values().iterator();\n    Task mapTask1 = it.next();\n    Task mapTask2 = it.next();\n    Task reduceTask = it.next();\n\n    \r\n    app.waitForState(mapTask1, TaskState.RUNNING);\n    app.waitForState(mapTask2, TaskState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskEvent(mapTask1.getID(), TaskEventType.T_ADD_SPEC_ATTEMPT));\n    int timeOut = 0;\n    while (mapTask1.getAttempts().size() != 2 && timeOut++ < 10) {\n      Thread.sleep(1000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Iterator<TaskAttempt> t1it = mapTask1.getAttempts().values().iterator();\n    TaskAttempt task1Attempt1 = t1it.next();\n    TaskAttempt task1Attempt2 = t1it.next();\n    TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next();\n\n    \r\n    waitForContainerAssignment(task1Attempt2);\n    ContainerId t1a2contId = task1Attempt2.getAssignedContainerID();\n\n    LOG.info(t1a2contId.toString());\n    LOG.info(task1Attempt1.getID().toString());\n    LOG.info(task1Attempt2.getID().toString());\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptContainerLaunchedEvent(task1Attempt2.getID(), runCount));\n\n    \r\n    \r\n    app.waitForState(task1Attempt1, TaskAttemptState.RUNNING);\n    app.waitForState(task1Attempt2, TaskAttemptState.RUNNING);\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n\n    app.waitForState(reduceTask, TaskState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            task1Attempt1.getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    app.waitForState(task1Attempt1, TaskAttemptState.SUCCEEDED);\n\n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n    long task1StartTime = mapTask1.getReport().getStartTime();\n    long task1FinishTime = mapTask1.getReport().getFinishTime();\n\n    \r\n    app.stop();\n\n    \r\n    \r\n    long am2StartTimeEst = System.currentTimeMillis();\n    app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount);\n    conf = new Configuration();\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true);\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n    it = job.getTasks().values().iterator();\n    mapTask1 = it.next();\n    mapTask2 = it.next();\n    reduceTask = it.next();\n\n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n\n    app.waitForState(mapTask2, TaskState.RUNNING);\n\n    task2Attempt = mapTask2.getAttempts().values().iterator().next();\n    \r\n    \r\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            mapTask2.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    \r\n    app.waitForState(mapTask2, TaskState.SUCCEEDED);\n\n    \r\n    app.waitForState(reduceTask, TaskState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            reduceTask.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    app.waitForState(job, JobState.SUCCEEDED);\n    app.verifyCompleted();\n    Assert.assertEquals(\"Job Start time not correct\",\n        jobStartTime, job.getReport().getStartTime());\n    Assert.assertEquals(\"Task Start time not correct\",\n        task1StartTime, mapTask1.getReport().getStartTime());\n    Assert.assertEquals(\"Task Finish time not correct\",\n        task1FinishTime, mapTask1.getReport().getFinishTime());\n    Assert.assertEquals(2, job.getAMInfos().size());\n    int attemptNum = 1;\n    \r\n    for (AMInfo amInfo : job.getAMInfos()) {\n      Assert.assertEquals(attemptNum++, amInfo.getAppAttemptId()\n          .getAttemptId());\n      Assert.assertEquals(amInfo.getAppAttemptId(), amInfo.getContainerId()\n          .getApplicationAttemptId());\n      Assert.assertEquals(MRApp.NM_HOST, amInfo.getNodeManagerHost());\n      Assert.assertEquals(MRApp.NM_PORT, amInfo.getNodeManagerPort());\n      Assert.assertEquals(MRApp.NM_HTTP_PORT, amInfo.getNodeManagerHttpPort());\n    }\n    long am1StartTimeReal = job.getAMInfos().get(0).getStartTime();\n    long am2StartTimeReal = job.getAMInfos().get(1).getStartTime();\n    Assert.assertTrue(am1StartTimeReal >= am1StartTimeEst\n        && am1StartTimeReal <= am2StartTimeEst);\n    Assert.assertTrue(am2StartTimeReal >= am2StartTimeEst\n        && am2StartTimeReal <= System.currentTimeMillis());\n\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRecovery.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":1327,"status":"B"}],"commitId":"cce71dceef9e82d31fe8ec59648b2a4a50c8869a","commitMessage":"@@@MAPREDUCE-6984. MR AM to clean up temporary files from previous attempt in case of no recovery. (Gergo Repas via Haibo Chen)\n","date":"2018-01-20 04:56:17","modifiedFileCount":"2","status":"B","submitter":"Haibo Chen"},{"authorTime":"2018-01-20 04:56:17","codes":[{"authorDate":"2018-01-27 04:36:45","commitOrder":2,"curCode":"  public void testCrashed() throws Exception {\n\n    int runCount = 0;\n    long am1StartTimeEst = System.currentTimeMillis();\n    MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount);\n    Configuration conf = new Configuration();\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    Job job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    long jobStartTime = job.getReport().getStartTime();\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n    Iterator<Task> it = job.getTasks().values().iterator();\n    Task mapTask1 = it.next();\n    Task mapTask2 = it.next();\n    Task reduceTask = it.next();\n    \n    \r\n    app.waitForState(mapTask1, TaskState.RUNNING);\n    app.waitForState(mapTask2, TaskState.RUNNING);\n    \n    TaskAttempt task1Attempt1 = mapTask1.getAttempts().values().iterator().next();\n    TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next();\n    \n    \r\n    \r\n    app.waitForState(task1Attempt1, TaskAttemptState.RUNNING);\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n    \n    app.waitForState(reduceTask, TaskState.RUNNING);\n\n    \r\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptFailEvent(\n            task1Attempt1.getID()));\n    \n    app.waitForState(task1Attempt1, TaskAttemptState.FAILED);\n\n    int timeOut = 0;\n    while (mapTask1.getAttempts().size() != 2 && timeOut++ < 10) {\n      Thread.sleep(2000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Assert.assertEquals(2, mapTask1.getAttempts().size());\n    Iterator<TaskAttempt> itr = mapTask1.getAttempts().values().iterator();\n    itr.next();\n    TaskAttempt task1Attempt2 = itr.next();\n\n    \r\n    waitForContainerAssignment(task1Attempt2);\n\n    \r\n    \r\n    \r\n    app.getContext().getEventHandler().handle(\n      new TaskAttemptEvent(task1Attempt2.getID(),\n        TaskAttemptEventType.TA_CONTAINER_LAUNCH_FAILED));\n    app.waitForState(task1Attempt2, TaskAttemptState.FAILED);\n\n    timeOut = 0;\n    while (mapTask1.getAttempts().size() != 3 && timeOut++ < 10) {\n      Thread.sleep(2000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Assert.assertEquals(3, mapTask1.getAttempts().size());\n    itr = mapTask1.getAttempts().values().iterator();\n    itr.next();\n    itr.next();\n    TaskAttempt task1Attempt3 = itr.next();\n    \n    app.waitForState(task1Attempt3, TaskAttemptState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            task1Attempt3.getID(),\n            TaskAttemptEventType.TA_KILL));\n    \n    app.waitForState(task1Attempt3, TaskAttemptState.KILLED);\n\n    timeOut = 0;\n    while (mapTask1.getAttempts().size() != 4 && timeOut++ < 10) {\n      Thread.sleep(2000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Assert.assertEquals(4, mapTask1.getAttempts().size());\n    itr = mapTask1.getAttempts().values().iterator();\n    itr.next();\n    itr.next();\n    itr.next();\n    TaskAttempt task1Attempt4 = itr.next();\n    \n    app.waitForState(task1Attempt4, TaskAttemptState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            task1Attempt4.getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    \r\n\n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n    long task1StartTime = mapTask1.getReport().getStartTime();\n    long task1FinishTime = mapTask1.getReport().getFinishTime();\n    \n    \r\n    app.stop();\n\n    \r\n    \r\n    long am2StartTimeEst = System.currentTimeMillis();\n    app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount);\n    conf = new Configuration();\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true);\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n    it = job.getTasks().values().iterator();\n    mapTask1 = it.next();\n    mapTask2 = it.next();\n    reduceTask = it.next();\n    \n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n    \n    app.waitForState(mapTask2, TaskState.RUNNING);\n    \n    task2Attempt = mapTask2.getAttempts().values().iterator().next();\n    \r\n    \r\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n    \n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            mapTask2.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n    \n    \r\n    app.waitForState(mapTask2, TaskState.SUCCEEDED);\n    \n    \r\n    app.waitForState(reduceTask, TaskState.RUNNING);\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            reduceTask.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n    \n    app.waitForState(job, JobState.SUCCEEDED);\n    app.verifyCompleted();\n    Assert.assertEquals(\"Job Start time not correct\",\n        jobStartTime, job.getReport().getStartTime());\n    Assert.assertEquals(\"Task Start time not correct\",\n        task1StartTime, mapTask1.getReport().getStartTime());\n    Assert.assertEquals(\"Task Finish time not correct\",\n        task1FinishTime, mapTask1.getReport().getFinishTime());\n    Assert.assertEquals(2, job.getAMInfos().size());\n    int attemptNum = 1;\n    \r\n    for (AMInfo amInfo : job.getAMInfos()) {\n      Assert.assertEquals(attemptNum++, amInfo.getAppAttemptId()\n          .getAttemptId());\n      Assert.assertEquals(amInfo.getAppAttemptId(), amInfo.getContainerId()\n          .getApplicationAttemptId());\n      Assert.assertEquals(MRApp.NM_HOST, amInfo.getNodeManagerHost());\n      Assert.assertEquals(MRApp.NM_PORT, amInfo.getNodeManagerPort());\n      Assert.assertEquals(MRApp.NM_HTTP_PORT, amInfo.getNodeManagerHttpPort());\n    }\n    long am1StartTimeReal = job.getAMInfos().get(0).getStartTime();\n    long am2StartTimeReal = job.getAMInfos().get(1).getStartTime();\n    Assert.assertTrue(am1StartTimeReal >= am1StartTimeEst\n        && am1StartTimeReal <= am2StartTimeEst);\n    Assert.assertTrue(am2StartTimeReal >= am2StartTimeEst\n        && am2StartTimeReal <= System.currentTimeMillis());\n    \r\n    \r\n  }\n","date":"2018-01-27 04:36:45","endLine":324,"groupId":"1046","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCrashed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/b2/807c1f4e32c57df9b6feef491660d82f7939f8.src","preCode":"  public void testCrashed() throws Exception {\n\n    int runCount = 0;\n    long am1StartTimeEst = System.currentTimeMillis();\n    MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount);\n    Configuration conf = new Configuration();\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    Job job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    long jobStartTime = job.getReport().getStartTime();\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n    Iterator<Task> it = job.getTasks().values().iterator();\n    Task mapTask1 = it.next();\n    Task mapTask2 = it.next();\n    Task reduceTask = it.next();\n    \n    \r\n    app.waitForState(mapTask1, TaskState.RUNNING);\n    app.waitForState(mapTask2, TaskState.RUNNING);\n    \n    TaskAttempt task1Attempt1 = mapTask1.getAttempts().values().iterator().next();\n    TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next();\n    \n    \r\n    \r\n    app.waitForState(task1Attempt1, TaskAttemptState.RUNNING);\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n    \n    app.waitForState(reduceTask, TaskState.RUNNING);\n\n    \r\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            task1Attempt1.getID(),\n            TaskAttemptEventType.TA_FAILMSG));\n    \n    app.waitForState(task1Attempt1, TaskAttemptState.FAILED);\n\n    int timeOut = 0;\n    while (mapTask1.getAttempts().size() != 2 && timeOut++ < 10) {\n      Thread.sleep(2000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Assert.assertEquals(2, mapTask1.getAttempts().size());\n    Iterator<TaskAttempt> itr = mapTask1.getAttempts().values().iterator();\n    itr.next();\n    TaskAttempt task1Attempt2 = itr.next();\n\n    \r\n    waitForContainerAssignment(task1Attempt2);\n\n    \r\n    \r\n    \r\n    app.getContext().getEventHandler().handle(\n      new TaskAttemptEvent(task1Attempt2.getID(),\n        TaskAttemptEventType.TA_CONTAINER_LAUNCH_FAILED));\n    app.waitForState(task1Attempt2, TaskAttemptState.FAILED);\n\n    timeOut = 0;\n    while (mapTask1.getAttempts().size() != 3 && timeOut++ < 10) {\n      Thread.sleep(2000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Assert.assertEquals(3, mapTask1.getAttempts().size());\n    itr = mapTask1.getAttempts().values().iterator();\n    itr.next();\n    itr.next();\n    TaskAttempt task1Attempt3 = itr.next();\n    \n    app.waitForState(task1Attempt3, TaskAttemptState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            task1Attempt3.getID(),\n            TaskAttemptEventType.TA_KILL));\n    \n    app.waitForState(task1Attempt3, TaskAttemptState.KILLED);\n\n    timeOut = 0;\n    while (mapTask1.getAttempts().size() != 4 && timeOut++ < 10) {\n      Thread.sleep(2000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Assert.assertEquals(4, mapTask1.getAttempts().size());\n    itr = mapTask1.getAttempts().values().iterator();\n    itr.next();\n    itr.next();\n    itr.next();\n    TaskAttempt task1Attempt4 = itr.next();\n    \n    app.waitForState(task1Attempt4, TaskAttemptState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            task1Attempt4.getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    \r\n\n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n    long task1StartTime = mapTask1.getReport().getStartTime();\n    long task1FinishTime = mapTask1.getReport().getFinishTime();\n    \n    \r\n    app.stop();\n\n    \r\n    \r\n    long am2StartTimeEst = System.currentTimeMillis();\n    app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount);\n    conf = new Configuration();\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true);\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n    it = job.getTasks().values().iterator();\n    mapTask1 = it.next();\n    mapTask2 = it.next();\n    reduceTask = it.next();\n    \n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n    \n    app.waitForState(mapTask2, TaskState.RUNNING);\n    \n    task2Attempt = mapTask2.getAttempts().values().iterator().next();\n    \r\n    \r\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n    \n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            mapTask2.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n    \n    \r\n    app.waitForState(mapTask2, TaskState.SUCCEEDED);\n    \n    \r\n    app.waitForState(reduceTask, TaskState.RUNNING);\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            reduceTask.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n    \n    app.waitForState(job, JobState.SUCCEEDED);\n    app.verifyCompleted();\n    Assert.assertEquals(\"Job Start time not correct\",\n        jobStartTime, job.getReport().getStartTime());\n    Assert.assertEquals(\"Task Start time not correct\",\n        task1StartTime, mapTask1.getReport().getStartTime());\n    Assert.assertEquals(\"Task Finish time not correct\",\n        task1FinishTime, mapTask1.getReport().getFinishTime());\n    Assert.assertEquals(2, job.getAMInfos().size());\n    int attemptNum = 1;\n    \r\n    for (AMInfo amInfo : job.getAMInfos()) {\n      Assert.assertEquals(attemptNum++, amInfo.getAppAttemptId()\n          .getAttemptId());\n      Assert.assertEquals(amInfo.getAppAttemptId(), amInfo.getContainerId()\n          .getApplicationAttemptId());\n      Assert.assertEquals(MRApp.NM_HOST, amInfo.getNodeManagerHost());\n      Assert.assertEquals(MRApp.NM_PORT, amInfo.getNodeManagerPort());\n      Assert.assertEquals(MRApp.NM_HTTP_PORT, amInfo.getNodeManagerHttpPort());\n    }\n    long am1StartTimeReal = job.getAMInfos().get(0).getStartTime();\n    long am2StartTimeReal = job.getAMInfos().get(1).getStartTime();\n    Assert.assertTrue(am1StartTimeReal >= am1StartTimeEst\n        && am1StartTimeReal <= am2StartTimeEst);\n    Assert.assertTrue(am2StartTimeReal >= am2StartTimeEst\n        && am2StartTimeReal <= System.currentTimeMillis());\n    \r\n    \r\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRecovery.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2018-01-20 04:56:17","commitOrder":2,"curCode":"  public void testSpeculative() throws Exception {\n\n    int runCount = 0;\n    long am1StartTimeEst = System.currentTimeMillis();\n    MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount);\n    Configuration conf = new Configuration();\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    Job job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    long jobStartTime = job.getReport().getStartTime();\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n\n    Iterator<Task> it = job.getTasks().values().iterator();\n    Task mapTask1 = it.next();\n    Task mapTask2 = it.next();\n    Task reduceTask = it.next();\n\n    \r\n    app.waitForState(mapTask1, TaskState.RUNNING);\n    app.waitForState(mapTask2, TaskState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskEvent(mapTask1.getID(), TaskEventType.T_ADD_SPEC_ATTEMPT));\n    int timeOut = 0;\n    while (mapTask1.getAttempts().size() != 2 && timeOut++ < 10) {\n      Thread.sleep(1000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Iterator<TaskAttempt> t1it = mapTask1.getAttempts().values().iterator();\n    TaskAttempt task1Attempt1 = t1it.next();\n    TaskAttempt task1Attempt2 = t1it.next();\n    TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next();\n\n    \r\n    waitForContainerAssignment(task1Attempt2);\n    ContainerId t1a2contId = task1Attempt2.getAssignedContainerID();\n\n    LOG.info(t1a2contId.toString());\n    LOG.info(task1Attempt1.getID().toString());\n    LOG.info(task1Attempt2.getID().toString());\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptContainerLaunchedEvent(task1Attempt2.getID(), runCount));\n\n    \r\n    \r\n    app.waitForState(task1Attempt1, TaskAttemptState.RUNNING);\n    app.waitForState(task1Attempt2, TaskAttemptState.RUNNING);\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n\n    app.waitForState(reduceTask, TaskState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            task1Attempt1.getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    app.waitForState(task1Attempt1, TaskAttemptState.SUCCEEDED);\n\n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n    long task1StartTime = mapTask1.getReport().getStartTime();\n    long task1FinishTime = mapTask1.getReport().getFinishTime();\n\n    \r\n    app.stop();\n\n    \r\n    \r\n    long am2StartTimeEst = System.currentTimeMillis();\n    app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount);\n    conf = new Configuration();\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true);\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n    it = job.getTasks().values().iterator();\n    mapTask1 = it.next();\n    mapTask2 = it.next();\n    reduceTask = it.next();\n\n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n\n    app.waitForState(mapTask2, TaskState.RUNNING);\n\n    task2Attempt = mapTask2.getAttempts().values().iterator().next();\n    \r\n    \r\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            mapTask2.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    \r\n    app.waitForState(mapTask2, TaskState.SUCCEEDED);\n\n    \r\n    app.waitForState(reduceTask, TaskState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            reduceTask.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    app.waitForState(job, JobState.SUCCEEDED);\n    app.verifyCompleted();\n    Assert.assertEquals(\"Job Start time not correct\",\n        jobStartTime, job.getReport().getStartTime());\n    Assert.assertEquals(\"Task Start time not correct\",\n        task1StartTime, mapTask1.getReport().getStartTime());\n    Assert.assertEquals(\"Task Finish time not correct\",\n        task1FinishTime, mapTask1.getReport().getFinishTime());\n    Assert.assertEquals(2, job.getAMInfos().size());\n    int attemptNum = 1;\n    \r\n    for (AMInfo amInfo : job.getAMInfos()) {\n      Assert.assertEquals(attemptNum++, amInfo.getAppAttemptId()\n          .getAttemptId());\n      Assert.assertEquals(amInfo.getAppAttemptId(), amInfo.getContainerId()\n          .getApplicationAttemptId());\n      Assert.assertEquals(MRApp.NM_HOST, amInfo.getNodeManagerHost());\n      Assert.assertEquals(MRApp.NM_PORT, amInfo.getNodeManagerPort());\n      Assert.assertEquals(MRApp.NM_HTTP_PORT, amInfo.getNodeManagerHttpPort());\n    }\n    long am1StartTimeReal = job.getAMInfos().get(0).getStartTime();\n    long am2StartTimeReal = job.getAMInfos().get(1).getStartTime();\n    Assert.assertTrue(am1StartTimeReal >= am1StartTimeEst\n        && am1StartTimeReal <= am2StartTimeEst);\n    Assert.assertTrue(am2StartTimeReal >= am2StartTimeEst\n        && am2StartTimeReal <= System.currentTimeMillis());\n\n  }\n","date":"2018-01-20 04:56:17","endLine":1477,"groupId":"1046","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpeculative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/89/3c4a07334a40f2664d3861125c68f8bdc683d4.src","preCode":"  public void testSpeculative() throws Exception {\n\n    int runCount = 0;\n    long am1StartTimeEst = System.currentTimeMillis();\n    MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount);\n    Configuration conf = new Configuration();\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    Job job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    long jobStartTime = job.getReport().getStartTime();\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n\n    Iterator<Task> it = job.getTasks().values().iterator();\n    Task mapTask1 = it.next();\n    Task mapTask2 = it.next();\n    Task reduceTask = it.next();\n\n    \r\n    app.waitForState(mapTask1, TaskState.RUNNING);\n    app.waitForState(mapTask2, TaskState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskEvent(mapTask1.getID(), TaskEventType.T_ADD_SPEC_ATTEMPT));\n    int timeOut = 0;\n    while (mapTask1.getAttempts().size() != 2 && timeOut++ < 10) {\n      Thread.sleep(1000);\n      LOG.info(\"Waiting for next attempt to start\");\n    }\n    Iterator<TaskAttempt> t1it = mapTask1.getAttempts().values().iterator();\n    TaskAttempt task1Attempt1 = t1it.next();\n    TaskAttempt task1Attempt2 = t1it.next();\n    TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next();\n\n    \r\n    waitForContainerAssignment(task1Attempt2);\n    ContainerId t1a2contId = task1Attempt2.getAssignedContainerID();\n\n    LOG.info(t1a2contId.toString());\n    LOG.info(task1Attempt1.getID().toString());\n    LOG.info(task1Attempt2.getID().toString());\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptContainerLaunchedEvent(task1Attempt2.getID(), runCount));\n\n    \r\n    \r\n    app.waitForState(task1Attempt1, TaskAttemptState.RUNNING);\n    app.waitForState(task1Attempt2, TaskAttemptState.RUNNING);\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n\n    app.waitForState(reduceTask, TaskState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            task1Attempt1.getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    app.waitForState(task1Attempt1, TaskAttemptState.SUCCEEDED);\n\n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n    long task1StartTime = mapTask1.getReport().getStartTime();\n    long task1FinishTime = mapTask1.getReport().getFinishTime();\n\n    \r\n    app.stop();\n\n    \r\n    \r\n    long am2StartTimeEst = System.currentTimeMillis();\n    app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount);\n    conf = new Configuration();\n    conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true);\n    conf.setBoolean(\"mapred.mapper.new-api\", true);\n    conf.setBoolean(\"mapred.reducer.new-api\", true);\n    conf.set(FileOutputFormat.OUTDIR, outputDir.toString());\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n    job = app.submit(conf);\n    app.waitForState(job, JobState.RUNNING);\n    \r\n    Assert.assertEquals(\"No of tasks not correct\",\n       3, job.getTasks().size());\n    it = job.getTasks().values().iterator();\n    mapTask1 = it.next();\n    mapTask2 = it.next();\n    reduceTask = it.next();\n\n    \r\n    app.waitForState(mapTask1, TaskState.SUCCEEDED);\n\n    app.waitForState(mapTask2, TaskState.RUNNING);\n\n    task2Attempt = mapTask2.getAttempts().values().iterator().next();\n    \r\n    \r\n    app.waitForState(task2Attempt, TaskAttemptState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            mapTask2.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    \r\n    app.waitForState(mapTask2, TaskState.SUCCEEDED);\n\n    \r\n    app.waitForState(reduceTask, TaskState.RUNNING);\n\n    \r\n    app.getContext().getEventHandler().handle(\n        new TaskAttemptEvent(\n            reduceTask.getAttempts().values().iterator().next().getID(),\n            TaskAttemptEventType.TA_DONE));\n\n    app.waitForState(job, JobState.SUCCEEDED);\n    app.verifyCompleted();\n    Assert.assertEquals(\"Job Start time not correct\",\n        jobStartTime, job.getReport().getStartTime());\n    Assert.assertEquals(\"Task Start time not correct\",\n        task1StartTime, mapTask1.getReport().getStartTime());\n    Assert.assertEquals(\"Task Finish time not correct\",\n        task1FinishTime, mapTask1.getReport().getFinishTime());\n    Assert.assertEquals(2, job.getAMInfos().size());\n    int attemptNum = 1;\n    \r\n    for (AMInfo amInfo : job.getAMInfos()) {\n      Assert.assertEquals(attemptNum++, amInfo.getAppAttemptId()\n          .getAttemptId());\n      Assert.assertEquals(amInfo.getAppAttemptId(), amInfo.getContainerId()\n          .getApplicationAttemptId());\n      Assert.assertEquals(MRApp.NM_HOST, amInfo.getNodeManagerHost());\n      Assert.assertEquals(MRApp.NM_PORT, amInfo.getNodeManagerPort());\n      Assert.assertEquals(MRApp.NM_HTTP_PORT, amInfo.getNodeManagerHttpPort());\n    }\n    long am1StartTimeReal = job.getAMInfos().get(0).getStartTime();\n    long am2StartTimeReal = job.getAMInfos().get(1).getStartTime();\n    Assert.assertTrue(am1StartTimeReal >= am1StartTimeEst\n        && am1StartTimeReal <= am2StartTimeEst);\n    Assert.assertTrue(am2StartTimeReal >= am2StartTimeEst\n        && am2StartTimeReal <= System.currentTimeMillis());\n\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestRecovery.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":1327,"status":"N"}],"commitId":"a37e7f0ad8b68c7ed16c242bedf62f4cde48d6fd","commitMessage":"@@@MAPREDUCE-7022. Fast fail rogue jobs based on task scratch dir size. Contributed by Johan Gustavsson\n","date":"2018-01-27 04:36:45","modifiedFileCount":"19","status":"M","submitter":"Jason Lowe"}]
