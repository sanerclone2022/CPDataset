[{"authorTime":"2019-01-25 07:43:21","codes":[{"authorDate":"2019-01-25 07:43:21","commitOrder":1,"curCode":"  public void testPoolSize() throws InterruptedException {\n\n    ApplicationId appId = ApplicationId.newInstance(12345, 67);\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(\n      appId, 3);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 8);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 9, TaskType.MAP);\n\n    AppContext context = mock(AppContext.class);\n    CustomContainerLauncher containerLauncher = new CustomContainerLauncher(\n      context);\n    containerLauncher.init(new Configuration());\n    containerLauncher.start();\n\n    ThreadPoolExecutor threadPool = containerLauncher.getThreadPool();\n\n    \r\n    Assert.assertEquals(containerLauncher.initialPoolSize,\n        MRJobConfig.DEFAULT_MR_AM_CONTAINERLAUNCHER_THREADPOOL_INITIAL_SIZE);\n    Assert.assertEquals(0, threadPool.getPoolSize());\n    Assert.assertEquals(containerLauncher.initialPoolSize,\n      threadPool.getCorePoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    containerLauncher.expectedCorePoolSize = containerLauncher.initialPoolSize;\n    for (int i = 0; i < 10; i++) {\n      ContainerId containerId = ContainerId.newContainerId(appAttemptId, i);\n      TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId, i);\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 10);\n    Assert.assertEquals(10, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    containerLauncher.finishEventHandling = true;\n    int timeOut = 0;\n    while (containerLauncher.numEventsProcessed.get() < 10 && timeOut++ < 200) {\n      LOG.info(\"Waiting for number of events processed to become \" + 10\n          + \". It is now \" + containerLauncher.numEventsProcessed.get()\n          + \". Timeout is \" + timeOut);\n      Thread.sleep(1000);\n    }\n    Assert.assertEquals(10, containerLauncher.numEventsProcessed.get());\n    containerLauncher.finishEventHandling = false;\n    for (int i = 0; i < 10; i++) {\n      ContainerId containerId = ContainerId.newContainerId(appAttemptId,\n          i + 10);\n      TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId,\n          i + 10);\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 20);\n    Assert.assertEquals(10, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    \r\n    \r\n    containerLauncher.expectedCorePoolSize = 11 + containerLauncher.initialPoolSize;\n    containerLauncher.finishEventHandling = false;\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 21);\n    TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId, 21);\n    containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n      containerId, \"host11:1234\", null,\n      ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    waitForEvents(containerLauncher, 21);\n    Assert.assertEquals(11, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    containerLauncher.stop();\n\n    \r\n    \r\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.MR_AM_CONTAINERLAUNCHER_THREADPOOL_INITIAL_SIZE,\n        20);\n    containerLauncher = new CustomContainerLauncher(context);\n    containerLauncher.init(conf);\n    Assert.assertEquals(containerLauncher.initialPoolSize, 20);\n  }\n","date":"2019-01-25 07:43:21","endLine":194,"groupId":"13776","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPoolSize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/22/2c2ae39b8e9588f9da285fb2577192de8cc75d.src","preCode":"  public void testPoolSize() throws InterruptedException {\n\n    ApplicationId appId = ApplicationId.newInstance(12345, 67);\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(\n      appId, 3);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 8);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 9, TaskType.MAP);\n\n    AppContext context = mock(AppContext.class);\n    CustomContainerLauncher containerLauncher = new CustomContainerLauncher(\n      context);\n    containerLauncher.init(new Configuration());\n    containerLauncher.start();\n\n    ThreadPoolExecutor threadPool = containerLauncher.getThreadPool();\n\n    \r\n    Assert.assertEquals(containerLauncher.initialPoolSize,\n        MRJobConfig.DEFAULT_MR_AM_CONTAINERLAUNCHER_THREADPOOL_INITIAL_SIZE);\n    Assert.assertEquals(0, threadPool.getPoolSize());\n    Assert.assertEquals(containerLauncher.initialPoolSize,\n      threadPool.getCorePoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    containerLauncher.expectedCorePoolSize = containerLauncher.initialPoolSize;\n    for (int i = 0; i < 10; i++) {\n      ContainerId containerId = ContainerId.newContainerId(appAttemptId, i);\n      TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId, i);\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 10);\n    Assert.assertEquals(10, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    containerLauncher.finishEventHandling = true;\n    int timeOut = 0;\n    while (containerLauncher.numEventsProcessed.get() < 10 && timeOut++ < 200) {\n      LOG.info(\"Waiting for number of events processed to become \" + 10\n          + \". It is now \" + containerLauncher.numEventsProcessed.get()\n          + \". Timeout is \" + timeOut);\n      Thread.sleep(1000);\n    }\n    Assert.assertEquals(10, containerLauncher.numEventsProcessed.get());\n    containerLauncher.finishEventHandling = false;\n    for (int i = 0; i < 10; i++) {\n      ContainerId containerId = ContainerId.newContainerId(appAttemptId,\n          i + 10);\n      TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId,\n          i + 10);\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 20);\n    Assert.assertEquals(10, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    \r\n    \r\n    containerLauncher.expectedCorePoolSize = 11 + containerLauncher.initialPoolSize;\n    containerLauncher.finishEventHandling = false;\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 21);\n    TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId, 21);\n    containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n      containerId, \"host11:1234\", null,\n      ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    waitForEvents(containerLauncher, 21);\n    Assert.assertEquals(11, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    containerLauncher.stop();\n\n    \r\n    \r\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.MR_AM_CONTAINERLAUNCHER_THREADPOOL_INITIAL_SIZE,\n        20);\n    containerLauncher = new CustomContainerLauncher(context);\n    containerLauncher.init(conf);\n    Assert.assertEquals(containerLauncher.initialPoolSize, 20);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/launcher/TestContainerLauncher.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"},{"authorDate":"2019-01-25 07:43:21","commitOrder":1,"curCode":"  public void testPoolLimits() throws InterruptedException {\n    ApplicationId appId = ApplicationId.newInstance(12345, 67);\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(\n      appId, 3);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 8);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 9, TaskType.MAP);\n    TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId, 0);\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 10);\n\n    AppContext context = mock(AppContext.class);\n    CustomContainerLauncher containerLauncher = new CustomContainerLauncher(\n      context);\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.MR_AM_CONTAINERLAUNCHER_THREAD_COUNT_LIMIT, 12);\n    containerLauncher.init(conf);\n    containerLauncher.start();\n\n    ThreadPoolExecutor threadPool = containerLauncher.getThreadPool();\n\n    \r\n    containerLauncher.expectedCorePoolSize = containerLauncher.initialPoolSize;\n    for (int i = 0; i < 10; i++) {\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 10);\n    Assert.assertEquals(10, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    containerLauncher.expectedCorePoolSize = 12 ;\n    for (int i = 1; i <= 4; i++) {\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host1\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 12);\n    Assert.assertEquals(12, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    containerLauncher.finishEventHandling = true;\n    waitForEvents(containerLauncher, 14);\n    Assert.assertEquals(12, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    containerLauncher.stop();\n  }\n","date":"2019-01-25 07:43:21","endLine":245,"groupId":"13777","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPoolLimits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/22/2c2ae39b8e9588f9da285fb2577192de8cc75d.src","preCode":"  public void testPoolLimits() throws InterruptedException {\n    ApplicationId appId = ApplicationId.newInstance(12345, 67);\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(\n      appId, 3);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 8);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 9, TaskType.MAP);\n    TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId, 0);\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 10);\n\n    AppContext context = mock(AppContext.class);\n    CustomContainerLauncher containerLauncher = new CustomContainerLauncher(\n      context);\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.MR_AM_CONTAINERLAUNCHER_THREAD_COUNT_LIMIT, 12);\n    containerLauncher.init(conf);\n    containerLauncher.start();\n\n    ThreadPoolExecutor threadPool = containerLauncher.getThreadPool();\n\n    \r\n    containerLauncher.expectedCorePoolSize = containerLauncher.initialPoolSize;\n    for (int i = 0; i < 10; i++) {\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 10);\n    Assert.assertEquals(10, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    containerLauncher.expectedCorePoolSize = 12 ;\n    for (int i = 1; i <= 4; i++) {\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host1\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 12);\n    Assert.assertEquals(12, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    containerLauncher.finishEventHandling = true;\n    waitForEvents(containerLauncher, 14);\n    Assert.assertEquals(12, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    containerLauncher.stop();\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/launcher/TestContainerLauncher.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"B"}],"commitId":"a33ef4fd311784dc15401eb54c82e78528c4f961","commitMessage":"@@@YARN-8867. Added resource localization status to YARN service status call.\n           Contributed by Chandni Singh\n","date":"2019-01-25 07:43:21","modifiedFileCount":"33","status":"B","submitter":"Eric Yang"},{"authorTime":"2019-01-25 07:43:21","codes":[{"authorDate":"2019-08-12 19:54:13","commitOrder":2,"curCode":"  public void testPoolSize() throws InterruptedException {\n\n    ApplicationId appId = ApplicationId.newInstance(12345, 67);\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(\n      appId, 3);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 8);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 9, TaskType.MAP);\n\n    AppContext context = mock(AppContext.class);\n    CustomContainerLauncher containerLauncher = new CustomContainerLauncher(\n      context);\n    containerLauncher.init(new Configuration());\n    containerLauncher.start();\n\n    ThreadPoolExecutor threadPool = containerLauncher.getThreadPool();\n\n    \r\n    assertThat(containerLauncher.initialPoolSize).isEqualTo(\n        MRJobConfig.DEFAULT_MR_AM_CONTAINERLAUNCHER_THREADPOOL_INITIAL_SIZE);\n    Assert.assertEquals(0, threadPool.getPoolSize());\n    Assert.assertEquals(containerLauncher.initialPoolSize,\n      threadPool.getCorePoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    containerLauncher.expectedCorePoolSize = containerLauncher.initialPoolSize;\n    for (int i = 0; i < 10; i++) {\n      ContainerId containerId = ContainerId.newContainerId(appAttemptId, i);\n      TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId, i);\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 10);\n    Assert.assertEquals(10, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    containerLauncher.finishEventHandling = true;\n    int timeOut = 0;\n    while (containerLauncher.numEventsProcessed.get() < 10 && timeOut++ < 200) {\n      LOG.info(\"Waiting for number of events processed to become \" + 10\n          + \". It is now \" + containerLauncher.numEventsProcessed.get()\n          + \". Timeout is \" + timeOut);\n      Thread.sleep(1000);\n    }\n    Assert.assertEquals(10, containerLauncher.numEventsProcessed.get());\n    containerLauncher.finishEventHandling = false;\n    for (int i = 0; i < 10; i++) {\n      ContainerId containerId = ContainerId.newContainerId(appAttemptId,\n          i + 10);\n      TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId,\n          i + 10);\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 20);\n    Assert.assertEquals(10, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    \r\n    \r\n    containerLauncher.expectedCorePoolSize = 11 + containerLauncher.initialPoolSize;\n    containerLauncher.finishEventHandling = false;\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 21);\n    TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId, 21);\n    containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n      containerId, \"host11:1234\", null,\n      ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    waitForEvents(containerLauncher, 21);\n    Assert.assertEquals(11, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    containerLauncher.stop();\n\n    \r\n    \r\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.MR_AM_CONTAINERLAUNCHER_THREADPOOL_INITIAL_SIZE,\n        20);\n    containerLauncher = new CustomContainerLauncher(context);\n    containerLauncher.init(conf);\n    assertThat(containerLauncher.initialPoolSize).isEqualTo(20);\n  }\n","date":"2019-08-12 19:54:28","endLine":195,"groupId":"1076","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testPoolSize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/dd/a93b682b3fc3a9c9d19f427a07be3dea2e6ae1.src","preCode":"  public void testPoolSize() throws InterruptedException {\n\n    ApplicationId appId = ApplicationId.newInstance(12345, 67);\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(\n      appId, 3);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 8);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 9, TaskType.MAP);\n\n    AppContext context = mock(AppContext.class);\n    CustomContainerLauncher containerLauncher = new CustomContainerLauncher(\n      context);\n    containerLauncher.init(new Configuration());\n    containerLauncher.start();\n\n    ThreadPoolExecutor threadPool = containerLauncher.getThreadPool();\n\n    \r\n    Assert.assertEquals(containerLauncher.initialPoolSize,\n        MRJobConfig.DEFAULT_MR_AM_CONTAINERLAUNCHER_THREADPOOL_INITIAL_SIZE);\n    Assert.assertEquals(0, threadPool.getPoolSize());\n    Assert.assertEquals(containerLauncher.initialPoolSize,\n      threadPool.getCorePoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    containerLauncher.expectedCorePoolSize = containerLauncher.initialPoolSize;\n    for (int i = 0; i < 10; i++) {\n      ContainerId containerId = ContainerId.newContainerId(appAttemptId, i);\n      TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId, i);\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 10);\n    Assert.assertEquals(10, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    containerLauncher.finishEventHandling = true;\n    int timeOut = 0;\n    while (containerLauncher.numEventsProcessed.get() < 10 && timeOut++ < 200) {\n      LOG.info(\"Waiting for number of events processed to become \" + 10\n          + \". It is now \" + containerLauncher.numEventsProcessed.get()\n          + \". Timeout is \" + timeOut);\n      Thread.sleep(1000);\n    }\n    Assert.assertEquals(10, containerLauncher.numEventsProcessed.get());\n    containerLauncher.finishEventHandling = false;\n    for (int i = 0; i < 10; i++) {\n      ContainerId containerId = ContainerId.newContainerId(appAttemptId,\n          i + 10);\n      TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId,\n          i + 10);\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 20);\n    Assert.assertEquals(10, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    \r\n    \r\n    containerLauncher.expectedCorePoolSize = 11 + containerLauncher.initialPoolSize;\n    containerLauncher.finishEventHandling = false;\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 21);\n    TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId, 21);\n    containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n      containerId, \"host11:1234\", null,\n      ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    waitForEvents(containerLauncher, 21);\n    Assert.assertEquals(11, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    containerLauncher.stop();\n\n    \r\n    \r\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.MR_AM_CONTAINERLAUNCHER_THREADPOOL_INITIAL_SIZE,\n        20);\n    containerLauncher = new CustomContainerLauncher(context);\n    containerLauncher.init(conf);\n    Assert.assertEquals(containerLauncher.initialPoolSize, 20);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/launcher/TestContainerLauncher.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2019-01-25 07:43:21","commitOrder":2,"curCode":"  public void testPoolLimits() throws InterruptedException {\n    ApplicationId appId = ApplicationId.newInstance(12345, 67);\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(\n      appId, 3);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 8);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 9, TaskType.MAP);\n    TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId, 0);\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 10);\n\n    AppContext context = mock(AppContext.class);\n    CustomContainerLauncher containerLauncher = new CustomContainerLauncher(\n      context);\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.MR_AM_CONTAINERLAUNCHER_THREAD_COUNT_LIMIT, 12);\n    containerLauncher.init(conf);\n    containerLauncher.start();\n\n    ThreadPoolExecutor threadPool = containerLauncher.getThreadPool();\n\n    \r\n    containerLauncher.expectedCorePoolSize = containerLauncher.initialPoolSize;\n    for (int i = 0; i < 10; i++) {\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 10);\n    Assert.assertEquals(10, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    containerLauncher.expectedCorePoolSize = 12 ;\n    for (int i = 1; i <= 4; i++) {\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host1\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 12);\n    Assert.assertEquals(12, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    containerLauncher.finishEventHandling = true;\n    waitForEvents(containerLauncher, 14);\n    Assert.assertEquals(12, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    containerLauncher.stop();\n  }\n","date":"2019-01-25 07:43:21","endLine":245,"groupId":"1076","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPoolLimits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/22/2c2ae39b8e9588f9da285fb2577192de8cc75d.src","preCode":"  public void testPoolLimits() throws InterruptedException {\n    ApplicationId appId = ApplicationId.newInstance(12345, 67);\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(\n      appId, 3);\n    JobId jobId = MRBuilderUtils.newJobId(appId, 8);\n    TaskId taskId = MRBuilderUtils.newTaskId(jobId, 9, TaskType.MAP);\n    TaskAttemptId taskAttemptId = MRBuilderUtils.newTaskAttemptId(taskId, 0);\n    ContainerId containerId = ContainerId.newContainerId(appAttemptId, 10);\n\n    AppContext context = mock(AppContext.class);\n    CustomContainerLauncher containerLauncher = new CustomContainerLauncher(\n      context);\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.MR_AM_CONTAINERLAUNCHER_THREAD_COUNT_LIMIT, 12);\n    containerLauncher.init(conf);\n    containerLauncher.start();\n\n    ThreadPoolExecutor threadPool = containerLauncher.getThreadPool();\n\n    \r\n    containerLauncher.expectedCorePoolSize = containerLauncher.initialPoolSize;\n    for (int i = 0; i < 10; i++) {\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 10);\n    Assert.assertEquals(10, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    containerLauncher.expectedCorePoolSize = 12 ;\n    for (int i = 1; i <= 4; i++) {\n      containerLauncher.handle(new ContainerLauncherEvent(taskAttemptId,\n        containerId, \"host1\" + i + \":1234\", null,\n        ContainerLauncher.EventType.CONTAINER_REMOTE_LAUNCH));\n    }\n    waitForEvents(containerLauncher, 12);\n    Assert.assertEquals(12, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    \r\n    containerLauncher.finishEventHandling = true;\n    waitForEvents(containerLauncher, 14);\n    Assert.assertEquals(12, threadPool.getPoolSize());\n    Assert.assertNull(containerLauncher.foundErrors);\n\n    containerLauncher.stop();\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/launcher/TestContainerLauncher.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"N"}],"commitId":"ac6c4f0b290477017798491a4bd77fa9f107871c","commitMessage":"@@@MAPREDUCE-7197. Fix order of actual and expected expression in assert statements. Contributed by Adam Antal\n","date":"2019-08-12 19:54:28","modifiedFileCount":"75","status":"M","submitter":"Szilard Nemeth"}]
