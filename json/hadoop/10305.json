[{"authorTime":"2019-01-30 10:29:09","codes":[{"authorDate":"2019-01-30 10:29:09","commitOrder":1,"curCode":"   public void testPreservePatternMatchedStaging() throws IOException {\n     conf.set(MRJobConfig.MAPREDUCE_JOB_DIR, stagingJobDir);\n     \r\n     \r\n     conf.set(MRJobConfig.PRESERVE_FILES_PATTERN, \"JobDir\");\n     fs = mock(FileSystem.class);\n     when(fs.delete(any(Path.class), anyBoolean())).thenReturn(true);\n     \r\n     String user = UserGroupInformation.getCurrentUser().getShortUserName();\n     Path stagingDir = MRApps.getStagingAreaDir(conf, user);\n     when(fs.exists(stagingDir)).thenReturn(true);\n     ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 0);\n     ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\n     JobId jobid = recordFactory.newRecordInstance(JobId.class);\n     jobid.setAppId(appId);\n     ContainerAllocator mockAlloc = mock(ContainerAllocator.class);\n     Assert.assertTrue(MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS > 1);\n     MRAppMaster appMaster = new TestMRApp(attemptId, mockAlloc,\n             JobStateInternal.RUNNING, MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS);\n     appMaster.init(conf);\n     appMaster.start();\n     appMaster.shutDownJob();\n     \r\n     Assert.assertEquals(true, ((TestMRApp) appMaster).getTestIsLastAMRetry());\n     verify(fs, times(0)).delete(stagingJobPath, true);\n   }\n","date":"2019-01-30 10:29:56","endLine":309,"groupId":"30775","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreservePatternMatchedStaging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/2e/fa9103f166e18a1729c872850915c5a2c0e6b6.src","preCode":"   public void testPreservePatternMatchedStaging() throws IOException {\n     conf.set(MRJobConfig.MAPREDUCE_JOB_DIR, stagingJobDir);\n     \r\n     \r\n     conf.set(MRJobConfig.PRESERVE_FILES_PATTERN, \"JobDir\");\n     fs = mock(FileSystem.class);\n     when(fs.delete(any(Path.class), anyBoolean())).thenReturn(true);\n     \r\n     String user = UserGroupInformation.getCurrentUser().getShortUserName();\n     Path stagingDir = MRApps.getStagingAreaDir(conf, user);\n     when(fs.exists(stagingDir)).thenReturn(true);\n     ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 0);\n     ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\n     JobId jobid = recordFactory.newRecordInstance(JobId.class);\n     jobid.setAppId(appId);\n     ContainerAllocator mockAlloc = mock(ContainerAllocator.class);\n     Assert.assertTrue(MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS > 1);\n     MRAppMaster appMaster = new TestMRApp(attemptId, mockAlloc,\n             JobStateInternal.RUNNING, MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS);\n     appMaster.init(conf);\n     appMaster.start();\n     appMaster.shutDownJob();\n     \r\n     Assert.assertEquals(true, ((TestMRApp) appMaster).getTestIsLastAMRetry());\n     verify(fs, times(0)).delete(stagingJobPath, true);\n   }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestStagingCleanup.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"B"},{"authorDate":"2019-01-30 10:29:09","commitOrder":1,"curCode":"  public void testPreservePatternMatchedAndFailedStaging() throws IOException {\n    conf.set(MRJobConfig.MAPREDUCE_JOB_DIR, stagingJobDir);\n    \r\n    \r\n    conf.set(MRJobConfig.PRESERVE_FILES_PATTERN, \"JobDir\");\n    conf.setBoolean(MRJobConfig.PRESERVE_FAILED_TASK_FILES, true);\n    fs = mock(FileSystem.class);\n    when(fs.delete(any(Path.class), anyBoolean())).thenReturn(true);\n    \r\n    String user = UserGroupInformation.getCurrentUser().getShortUserName();\n    Path stagingDir = MRApps.getStagingAreaDir(conf, user);\n    when(fs.exists(stagingDir)).thenReturn(true);\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 0);\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\n    JobId jobid = recordFactory.newRecordInstance(JobId.class);\n    jobid.setAppId(appId);\n    ContainerAllocator mockAlloc = mock(ContainerAllocator.class);\n    Assert.assertTrue(MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS > 1);\n    MRAppMaster appMaster = new TestMRApp(attemptId, mockAlloc,\n            JobStateInternal.RUNNING, MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS);\n    appMaster.init(conf);\n    appMaster.start();\n    appMaster.shutDownJob();\n    \r\n    Assert.assertEquals(true, ((TestMRApp) appMaster).getTestIsLastAMRetry());\n    verify(fs, times(0)).delete(stagingJobPath, true);\n  }\n","date":"2019-01-30 10:29:56","endLine":366,"groupId":"30775","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreservePatternMatchedAndFailedStaging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/2e/fa9103f166e18a1729c872850915c5a2c0e6b6.src","preCode":"  public void testPreservePatternMatchedAndFailedStaging() throws IOException {\n    conf.set(MRJobConfig.MAPREDUCE_JOB_DIR, stagingJobDir);\n    \r\n    \r\n    conf.set(MRJobConfig.PRESERVE_FILES_PATTERN, \"JobDir\");\n    conf.setBoolean(MRJobConfig.PRESERVE_FAILED_TASK_FILES, true);\n    fs = mock(FileSystem.class);\n    when(fs.delete(any(Path.class), anyBoolean())).thenReturn(true);\n    \r\n    String user = UserGroupInformation.getCurrentUser().getShortUserName();\n    Path stagingDir = MRApps.getStagingAreaDir(conf, user);\n    when(fs.exists(stagingDir)).thenReturn(true);\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 0);\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\n    JobId jobid = recordFactory.newRecordInstance(JobId.class);\n    jobid.setAppId(appId);\n    ContainerAllocator mockAlloc = mock(ContainerAllocator.class);\n    Assert.assertTrue(MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS > 1);\n    MRAppMaster appMaster = new TestMRApp(attemptId, mockAlloc,\n            JobStateInternal.RUNNING, MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS);\n    appMaster.init(conf);\n    appMaster.start();\n    appMaster.shutDownJob();\n    \r\n    Assert.assertEquals(true, ((TestMRApp) appMaster).getTestIsLastAMRetry());\n    verify(fs, times(0)).delete(stagingJobPath, true);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestStagingCleanup.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"B"}],"commitId":"1129288cf5045e17b0e761a0d75f40bf2fe6de03","commitMessage":"@@@HADOOP-14178. Move Mockito up to version 2.23.4. Contributed by Akira Ajisaka and Masatake Iwasaki.\n","date":"2019-01-30 10:29:56","modifiedFileCount":"290","status":"B","submitter":"Akira Ajisaka"},{"authorTime":"2019-08-12 19:54:13","codes":[{"authorDate":"2019-08-12 19:54:13","commitOrder":2,"curCode":"   public void testPreservePatternMatchedStaging() throws IOException {\n     conf.set(MRJobConfig.MAPREDUCE_JOB_DIR, stagingJobDir);\n     \r\n     \r\n     conf.set(MRJobConfig.PRESERVE_FILES_PATTERN, \"JobDir\");\n     fs = mock(FileSystem.class);\n     when(fs.delete(any(Path.class), anyBoolean())).thenReturn(true);\n     \r\n     String user = UserGroupInformation.getCurrentUser().getShortUserName();\n     Path stagingDir = MRApps.getStagingAreaDir(conf, user);\n     when(fs.exists(stagingDir)).thenReturn(true);\n     ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 0);\n     ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\n     JobId jobid = recordFactory.newRecordInstance(JobId.class);\n     jobid.setAppId(appId);\n     ContainerAllocator mockAlloc = mock(ContainerAllocator.class);\n     Assert.assertTrue(MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS > 1);\n     MRAppMaster appMaster = new TestMRApp(attemptId, mockAlloc,\n             JobStateInternal.RUNNING, MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS);\n     appMaster.init(conf);\n     appMaster.start();\n     appMaster.shutDownJob();\n     \r\n     assertTrue(((TestMRApp) appMaster).getTestIsLastAMRetry());\n     verify(fs, times(0)).delete(stagingJobPath, true);\n   }\n","date":"2019-08-12 19:54:28","endLine":310,"groupId":"10305","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testPreservePatternMatchedStaging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/1f/0ce2309e28528bd05c12032c8ea014167b53f8.src","preCode":"   public void testPreservePatternMatchedStaging() throws IOException {\n     conf.set(MRJobConfig.MAPREDUCE_JOB_DIR, stagingJobDir);\n     \r\n     \r\n     conf.set(MRJobConfig.PRESERVE_FILES_PATTERN, \"JobDir\");\n     fs = mock(FileSystem.class);\n     when(fs.delete(any(Path.class), anyBoolean())).thenReturn(true);\n     \r\n     String user = UserGroupInformation.getCurrentUser().getShortUserName();\n     Path stagingDir = MRApps.getStagingAreaDir(conf, user);\n     when(fs.exists(stagingDir)).thenReturn(true);\n     ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 0);\n     ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\n     JobId jobid = recordFactory.newRecordInstance(JobId.class);\n     jobid.setAppId(appId);\n     ContainerAllocator mockAlloc = mock(ContainerAllocator.class);\n     Assert.assertTrue(MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS > 1);\n     MRAppMaster appMaster = new TestMRApp(attemptId, mockAlloc,\n             JobStateInternal.RUNNING, MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS);\n     appMaster.init(conf);\n     appMaster.start();\n     appMaster.shutDownJob();\n     \r\n     Assert.assertEquals(true, ((TestMRApp) appMaster).getTestIsLastAMRetry());\n     verify(fs, times(0)).delete(stagingJobPath, true);\n   }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestStagingCleanup.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"},{"authorDate":"2019-08-12 19:54:13","commitOrder":2,"curCode":"  public void testPreservePatternMatchedAndFailedStaging() throws IOException {\n    conf.set(MRJobConfig.MAPREDUCE_JOB_DIR, stagingJobDir);\n    \r\n    \r\n    conf.set(MRJobConfig.PRESERVE_FILES_PATTERN, \"JobDir\");\n    conf.setBoolean(MRJobConfig.PRESERVE_FAILED_TASK_FILES, true);\n    fs = mock(FileSystem.class);\n    when(fs.delete(any(Path.class), anyBoolean())).thenReturn(true);\n    \r\n    String user = UserGroupInformation.getCurrentUser().getShortUserName();\n    Path stagingDir = MRApps.getStagingAreaDir(conf, user);\n    when(fs.exists(stagingDir)).thenReturn(true);\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 0);\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\n    JobId jobid = recordFactory.newRecordInstance(JobId.class);\n    jobid.setAppId(appId);\n    ContainerAllocator mockAlloc = mock(ContainerAllocator.class);\n    Assert.assertTrue(MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS > 1);\n    MRAppMaster appMaster = new TestMRApp(attemptId, mockAlloc,\n            JobStateInternal.RUNNING, MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS);\n    appMaster.init(conf);\n    appMaster.start();\n    appMaster.shutDownJob();\n    \r\n    assertTrue(((TestMRApp) appMaster).getTestIsLastAMRetry());\n    verify(fs, times(0)).delete(stagingJobPath, true);\n  }\n","date":"2019-08-12 19:54:28","endLine":367,"groupId":"10305","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testPreservePatternMatchedAndFailedStaging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/1f/0ce2309e28528bd05c12032c8ea014167b53f8.src","preCode":"  public void testPreservePatternMatchedAndFailedStaging() throws IOException {\n    conf.set(MRJobConfig.MAPREDUCE_JOB_DIR, stagingJobDir);\n    \r\n    \r\n    conf.set(MRJobConfig.PRESERVE_FILES_PATTERN, \"JobDir\");\n    conf.setBoolean(MRJobConfig.PRESERVE_FAILED_TASK_FILES, true);\n    fs = mock(FileSystem.class);\n    when(fs.delete(any(Path.class), anyBoolean())).thenReturn(true);\n    \r\n    String user = UserGroupInformation.getCurrentUser().getShortUserName();\n    Path stagingDir = MRApps.getStagingAreaDir(conf, user);\n    when(fs.exists(stagingDir)).thenReturn(true);\n    ApplicationId appId = ApplicationId.newInstance(System.currentTimeMillis(), 0);\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\n    JobId jobid = recordFactory.newRecordInstance(JobId.class);\n    jobid.setAppId(appId);\n    ContainerAllocator mockAlloc = mock(ContainerAllocator.class);\n    Assert.assertTrue(MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS > 1);\n    MRAppMaster appMaster = new TestMRApp(attemptId, mockAlloc,\n            JobStateInternal.RUNNING, MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS);\n    appMaster.init(conf);\n    appMaster.start();\n    appMaster.shutDownJob();\n    \r\n    Assert.assertEquals(true, ((TestMRApp) appMaster).getTestIsLastAMRetry());\n    verify(fs, times(0)).delete(stagingJobPath, true);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/TestStagingCleanup.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":341,"status":"M"}],"commitId":"ac6c4f0b290477017798491a4bd77fa9f107871c","commitMessage":"@@@MAPREDUCE-7197. Fix order of actual and expected expression in assert statements. Contributed by Adam Antal\n","date":"2019-08-12 19:54:28","modifiedFileCount":"75","status":"M","submitter":"Szilard Nemeth"}]
