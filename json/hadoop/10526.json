[{"authorTime":"2018-05-02 15:14:28","codes":[{"authorDate":"2018-05-02 15:14:28","commitOrder":1,"curCode":"  private void testBinaryCredentials(boolean hasScheme) throws Exception {\n    Path TEST_ROOT_DIR =\n        new Path(System.getProperty(\"test.build.data\",\"test/build/data\"));\n    \r\n    String binaryTokenFile = hasScheme\n        ? FileSystem.getLocal(conf).makeQualified(\n            new Path(TEST_ROOT_DIR, \"tokenFile\")).toString()\n        : FileSystem.getLocal(conf).makeQualified(\n            new Path(TEST_ROOT_DIR, \"tokenFile\")).toUri().getPath();\n\n    MockFileSystem fs1 = createFileSystemForServiceName(\"service1\");\n    MockFileSystem fs2 = createFileSystemForServiceName(\"service2\");\n    MockFileSystem fs3 = createFileSystemForServiceName(\"service3\");\n    \n    \r\n    Credentials creds = new Credentials();\n    Token<?> token1 = fs1.getDelegationToken(renewer);\n    Token<?> token2 = fs2.getDelegationToken(renewer);\n    creds.addToken(token1.getService(), token1);\n    creds.addToken(token2.getService(), token2);\n    \r\n    conf.set(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY, binaryTokenFile);\n    creds.writeTokenStorageFile(new Path(binaryTokenFile), conf);\n    \n    \r\n    creds = new Credentials();\n    Token<?> newerToken1 = fs1.getDelegationToken(renewer);\n    assertNotSame(newerToken1, token1);\n    creds.addToken(newerToken1.getService(), newerToken1);\n    checkToken(creds, newerToken1);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs1, creds, conf, renewer);\n    checkToken(creds, newerToken1, token2);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs2, creds, conf, renewer);\n    checkToken(creds, newerToken1, token2);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs3, creds, conf, renewer);\n    Token<?> token3 = creds.getToken(new Text(fs3.getCanonicalServiceName()));\n    assertTrue(token3 != null);\n    checkToken(creds, newerToken1, token2, token3);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs1, creds, conf, renewer);\n    TokenCache.obtainTokensForNamenodesInternal(fs2, creds, conf, renewer);\n    TokenCache.obtainTokensForNamenodesInternal(fs3, creds, conf, renewer);\n    checkToken(creds, newerToken1, token2, token3);\n  }\n","date":"2018-05-02 15:14:28","endLine":126,"groupId":"16325","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBinaryCredentials","params":"(booleanhasScheme)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/a4/4e5331f4d9305a7fbe06638dbc6f4350038e41.src","preCode":"  private void testBinaryCredentials(boolean hasScheme) throws Exception {\n    Path TEST_ROOT_DIR =\n        new Path(System.getProperty(\"test.build.data\",\"test/build/data\"));\n    \r\n    String binaryTokenFile = hasScheme\n        ? FileSystem.getLocal(conf).makeQualified(\n            new Path(TEST_ROOT_DIR, \"tokenFile\")).toString()\n        : FileSystem.getLocal(conf).makeQualified(\n            new Path(TEST_ROOT_DIR, \"tokenFile\")).toUri().getPath();\n\n    MockFileSystem fs1 = createFileSystemForServiceName(\"service1\");\n    MockFileSystem fs2 = createFileSystemForServiceName(\"service2\");\n    MockFileSystem fs3 = createFileSystemForServiceName(\"service3\");\n    \n    \r\n    Credentials creds = new Credentials();\n    Token<?> token1 = fs1.getDelegationToken(renewer);\n    Token<?> token2 = fs2.getDelegationToken(renewer);\n    creds.addToken(token1.getService(), token1);\n    creds.addToken(token2.getService(), token2);\n    \r\n    conf.set(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY, binaryTokenFile);\n    creds.writeTokenStorageFile(new Path(binaryTokenFile), conf);\n    \n    \r\n    creds = new Credentials();\n    Token<?> newerToken1 = fs1.getDelegationToken(renewer);\n    assertNotSame(newerToken1, token1);\n    creds.addToken(newerToken1.getService(), newerToken1);\n    checkToken(creds, newerToken1);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs1, creds, conf, renewer);\n    checkToken(creds, newerToken1, token2);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs2, creds, conf, renewer);\n    checkToken(creds, newerToken1, token2);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs3, creds, conf, renewer);\n    Token<?> token3 = creds.getToken(new Text(fs3.getCanonicalServiceName()));\n    assertTrue(token3 != null);\n    checkToken(creds, newerToken1, token2, token3);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs1, creds, conf, renewer);\n    TokenCache.obtainTokensForNamenodesInternal(fs2, creds, conf, renewer);\n    TokenCache.obtainTokensForNamenodesInternal(fs3, creds, conf, renewer);\n    checkToken(creds, newerToken1, token2, token3);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapreduce/security/TestTokenCache.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2018-05-02 15:14:28","commitOrder":1,"curCode":"  public void testGetTokensForNamenodes() throws IOException,\n      URISyntaxException {\n    Path TEST_ROOT_DIR =\n        new Path(System.getProperty(\"test.build.data\", \"test/build/data\"));\n    \r\n    String binaryTokenFile =\n        FileSystem.getLocal(conf)\n          .makeQualified(new Path(TEST_ROOT_DIR, \"tokenFile\")).toUri()\n          .getPath();\n\n    MockFileSystem fs1 = createFileSystemForServiceName(\"service1\");\n    Credentials creds = new Credentials();\n    Token<?> token1 = fs1.getDelegationToken(renewer);\n    creds.addToken(token1.getService(), token1);\n    \r\n    conf.set(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY, binaryTokenFile);\n    creds.writeTokenStorageFile(new Path(binaryTokenFile), conf);\n    TokenCache.obtainTokensForNamenodesInternal(fs1, creds, conf, renewer);\n    String fs_addr = fs1.getCanonicalServiceName();\n    Token<?> nnt = TokenCache.getDelegationToken(creds, fs_addr);\n    assertNotNull(\"Token for nn is null\", nnt);\n  }\n","date":"2018-05-02 15:14:28","endLine":209,"groupId":"29463","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTokensForNamenodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/a4/4e5331f4d9305a7fbe06638dbc6f4350038e41.src","preCode":"  public void testGetTokensForNamenodes() throws IOException,\n      URISyntaxException {\n    Path TEST_ROOT_DIR =\n        new Path(System.getProperty(\"test.build.data\", \"test/build/data\"));\n    \r\n    String binaryTokenFile =\n        FileSystem.getLocal(conf)\n          .makeQualified(new Path(TEST_ROOT_DIR, \"tokenFile\")).toUri()\n          .getPath();\n\n    MockFileSystem fs1 = createFileSystemForServiceName(\"service1\");\n    Credentials creds = new Credentials();\n    Token<?> token1 = fs1.getDelegationToken(renewer);\n    creds.addToken(token1.getService(), token1);\n    \r\n    conf.set(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY, binaryTokenFile);\n    creds.writeTokenStorageFile(new Path(binaryTokenFile), conf);\n    TokenCache.obtainTokensForNamenodesInternal(fs1, creds, conf, renewer);\n    String fs_addr = fs1.getCanonicalServiceName();\n    Token<?> nnt = TokenCache.getDelegationToken(creds, fs_addr);\n    assertNotNull(\"Token for nn is null\", nnt);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapreduce/security/TestTokenCache.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"B"}],"commitId":"1a95a4524a8c6c7be601ce8b92640a6a76164a2c","commitMessage":"@@@MAPREDUCE-7073. Optimize TokenCache#obtainTokensForNamenodesInternal\n\nSigned-off-by: Akira Ajisaka <aajisaka@apache.org>\n","date":"2018-05-02 15:14:28","modifiedFileCount":"2","status":"B","submitter":"Bibin A Chundatt"},{"authorTime":"2018-05-02 15:14:28","codes":[{"authorDate":"2019-08-12 19:54:13","commitOrder":2,"curCode":"  private void testBinaryCredentials(boolean hasScheme) throws Exception {\n    Path TEST_ROOT_DIR =\n        new Path(System.getProperty(\"test.build.data\",\"test/build/data\"));\n    \r\n    String binaryTokenFile = hasScheme\n        ? FileSystem.getLocal(conf).makeQualified(\n            new Path(TEST_ROOT_DIR, \"tokenFile\")).toString()\n        : FileSystem.getLocal(conf).makeQualified(\n            new Path(TEST_ROOT_DIR, \"tokenFile\")).toUri().getPath();\n\n    MockFileSystem fs1 = createFileSystemForServiceName(\"service1\");\n    MockFileSystem fs2 = createFileSystemForServiceName(\"service2\");\n    MockFileSystem fs3 = createFileSystemForServiceName(\"service3\");\n    \n    \r\n    Credentials creds = new Credentials();\n    Token<?> token1 = fs1.getDelegationToken(renewer);\n    Token<?> token2 = fs2.getDelegationToken(renewer);\n    creds.addToken(token1.getService(), token1);\n    creds.addToken(token2.getService(), token2);\n    \r\n    conf.set(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY, binaryTokenFile);\n    creds.writeTokenStorageFile(new Path(binaryTokenFile), conf);\n    \n    \r\n    creds = new Credentials();\n    Token<?> newerToken1 = fs1.getDelegationToken(renewer);\n    assertNotSame(newerToken1, token1);\n    creds.addToken(newerToken1.getService(), newerToken1);\n    checkToken(creds, newerToken1);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs1, creds, conf, renewer);\n    checkToken(creds, newerToken1, token2);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs2, creds, conf, renewer);\n    checkToken(creds, newerToken1, token2);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs3, creds, conf, renewer);\n    Token<?> token3 = creds.getToken(new Text(fs3.getCanonicalServiceName()));\n    assertThat(token3).isNotNull();\n    checkToken(creds, newerToken1, token2, token3);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs1, creds, conf, renewer);\n    TokenCache.obtainTokensForNamenodesInternal(fs2, creds, conf, renewer);\n    TokenCache.obtainTokensForNamenodesInternal(fs3, creds, conf, renewer);\n    checkToken(creds, newerToken1, token2, token3);\n  }\n","date":"2019-08-12 19:54:28","endLine":127,"groupId":"10526","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testBinaryCredentials","params":"(booleanhasScheme)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/c4/31c075e72fd4be6c137fde9bce91e3dbbb0f89.src","preCode":"  private void testBinaryCredentials(boolean hasScheme) throws Exception {\n    Path TEST_ROOT_DIR =\n        new Path(System.getProperty(\"test.build.data\",\"test/build/data\"));\n    \r\n    String binaryTokenFile = hasScheme\n        ? FileSystem.getLocal(conf).makeQualified(\n            new Path(TEST_ROOT_DIR, \"tokenFile\")).toString()\n        : FileSystem.getLocal(conf).makeQualified(\n            new Path(TEST_ROOT_DIR, \"tokenFile\")).toUri().getPath();\n\n    MockFileSystem fs1 = createFileSystemForServiceName(\"service1\");\n    MockFileSystem fs2 = createFileSystemForServiceName(\"service2\");\n    MockFileSystem fs3 = createFileSystemForServiceName(\"service3\");\n    \n    \r\n    Credentials creds = new Credentials();\n    Token<?> token1 = fs1.getDelegationToken(renewer);\n    Token<?> token2 = fs2.getDelegationToken(renewer);\n    creds.addToken(token1.getService(), token1);\n    creds.addToken(token2.getService(), token2);\n    \r\n    conf.set(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY, binaryTokenFile);\n    creds.writeTokenStorageFile(new Path(binaryTokenFile), conf);\n    \n    \r\n    creds = new Credentials();\n    Token<?> newerToken1 = fs1.getDelegationToken(renewer);\n    assertNotSame(newerToken1, token1);\n    creds.addToken(newerToken1.getService(), newerToken1);\n    checkToken(creds, newerToken1);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs1, creds, conf, renewer);\n    checkToken(creds, newerToken1, token2);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs2, creds, conf, renewer);\n    checkToken(creds, newerToken1, token2);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs3, creds, conf, renewer);\n    Token<?> token3 = creds.getToken(new Text(fs3.getCanonicalServiceName()));\n    assertTrue(token3 != null);\n    checkToken(creds, newerToken1, token2, token3);\n    \n    \r\n    TokenCache.obtainTokensForNamenodesInternal(fs1, creds, conf, renewer);\n    TokenCache.obtainTokensForNamenodesInternal(fs2, creds, conf, renewer);\n    TokenCache.obtainTokensForNamenodesInternal(fs3, creds, conf, renewer);\n    checkToken(creds, newerToken1, token2, token3);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapreduce/security/TestTokenCache.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2018-05-02 15:14:28","commitOrder":2,"curCode":"  public void testGetTokensForNamenodes() throws IOException,\n      URISyntaxException {\n    Path TEST_ROOT_DIR =\n        new Path(System.getProperty(\"test.build.data\", \"test/build/data\"));\n    \r\n    String binaryTokenFile =\n        FileSystem.getLocal(conf)\n          .makeQualified(new Path(TEST_ROOT_DIR, \"tokenFile\")).toUri()\n          .getPath();\n\n    MockFileSystem fs1 = createFileSystemForServiceName(\"service1\");\n    Credentials creds = new Credentials();\n    Token<?> token1 = fs1.getDelegationToken(renewer);\n    creds.addToken(token1.getService(), token1);\n    \r\n    conf.set(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY, binaryTokenFile);\n    creds.writeTokenStorageFile(new Path(binaryTokenFile), conf);\n    TokenCache.obtainTokensForNamenodesInternal(fs1, creds, conf, renewer);\n    String fs_addr = fs1.getCanonicalServiceName();\n    Token<?> nnt = TokenCache.getDelegationToken(creds, fs_addr);\n    assertNotNull(\"Token for nn is null\", nnt);\n  }\n","date":"2018-05-02 15:14:28","endLine":209,"groupId":"10526","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTokensForNamenodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/a4/4e5331f4d9305a7fbe06638dbc6f4350038e41.src","preCode":"  public void testGetTokensForNamenodes() throws IOException,\n      URISyntaxException {\n    Path TEST_ROOT_DIR =\n        new Path(System.getProperty(\"test.build.data\", \"test/build/data\"));\n    \r\n    String binaryTokenFile =\n        FileSystem.getLocal(conf)\n          .makeQualified(new Path(TEST_ROOT_DIR, \"tokenFile\")).toUri()\n          .getPath();\n\n    MockFileSystem fs1 = createFileSystemForServiceName(\"service1\");\n    Credentials creds = new Credentials();\n    Token<?> token1 = fs1.getDelegationToken(renewer);\n    creds.addToken(token1.getService(), token1);\n    \r\n    conf.set(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY, binaryTokenFile);\n    creds.writeTokenStorageFile(new Path(binaryTokenFile), conf);\n    TokenCache.obtainTokensForNamenodesInternal(fs1, creds, conf, renewer);\n    String fs_addr = fs1.getCanonicalServiceName();\n    Token<?> nnt = TokenCache.getDelegationToken(creds, fs_addr);\n    assertNotNull(\"Token for nn is null\", nnt);\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapreduce/security/TestTokenCache.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"N"}],"commitId":"ac6c4f0b290477017798491a4bd77fa9f107871c","commitMessage":"@@@MAPREDUCE-7197. Fix order of actual and expected expression in assert statements. Contributed by Adam Antal\n","date":"2019-08-12 19:54:28","modifiedFileCount":"75","status":"M","submitter":"Szilard Nemeth"}]
