[{"authorTime":"2018-01-31 17:42:42","codes":[{"authorDate":"2018-01-31 17:42:42","commitOrder":1,"curCode":"  public void testNonAggressivelyPreemptReducers() throws Exception {\n    LOG.info(\"Running testNonAggressivelyPreemptReducers\");\n\n    final int preemptThreshold = 2; \r\n    Configuration conf = new Configuration();\n    conf.setInt(\n        MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        preemptThreshold);\n\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    ControlledClock clock = new ControlledClock(null);\n    clock.setTime(1);\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, clock);\n    allocator.setMapResourceRequest(BuilderUtils.newResource(1024, 1));\n    allocator.setReduceResourceRequest(BuilderUtils.newResource(1024, 1));\n    RMContainerAllocator.AssignedRequests assignedRequests =\n        allocator.getAssignedRequests();\n    RMContainerAllocator.ScheduledRequests scheduledRequests =\n        allocator.getScheduledRequests();\n    ContainerRequestEvent event1 =\n        createReq(jobId, 1, 2048, new String[] { \"h1\" }, false, false);\n    scheduledRequests.maps.put(mock(TaskAttemptId.class),\n        new RMContainerRequestor.ContainerRequest(event1, null, clock.getTime()));\n    assignedRequests.reduces.put(mock(TaskAttemptId.class),\n        mock(Container.class));\n\n    clock.setTime(clock.getTime() + 1);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is aggressively preeempted\", 0,\n        assignedRequests.preemptionWaitingReduces.size());\n\n    clock.setTime(clock.getTime() + (preemptThreshold) * 1000);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is not preeempted\", 1,\n        assignedRequests.preemptionWaitingReduces.size());\n  }\n","date":"2018-01-31 17:42:42","endLine":565,"groupId":"24789","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonAggressivelyPreemptReducers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/78/75917b68eec03cc7f44ed43633ed880e626905.src","preCode":"  public void testNonAggressivelyPreemptReducers() throws Exception {\n    LOG.info(\"Running testNonAggressivelyPreemptReducers\");\n\n    final int preemptThreshold = 2; \r\n    Configuration conf = new Configuration();\n    conf.setInt(\n        MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        preemptThreshold);\n\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    ControlledClock clock = new ControlledClock(null);\n    clock.setTime(1);\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, clock);\n    allocator.setMapResourceRequest(BuilderUtils.newResource(1024, 1));\n    allocator.setReduceResourceRequest(BuilderUtils.newResource(1024, 1));\n    RMContainerAllocator.AssignedRequests assignedRequests =\n        allocator.getAssignedRequests();\n    RMContainerAllocator.ScheduledRequests scheduledRequests =\n        allocator.getScheduledRequests();\n    ContainerRequestEvent event1 =\n        createReq(jobId, 1, 2048, new String[] { \"h1\" }, false, false);\n    scheduledRequests.maps.put(mock(TaskAttemptId.class),\n        new RMContainerRequestor.ContainerRequest(event1, null, clock.getTime()));\n    assignedRequests.reduces.put(mock(TaskAttemptId.class),\n        mock(Container.class));\n\n    clock.setTime(clock.getTime() + 1);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is aggressively preeempted\", 0,\n        assignedRequests.preemptionWaitingReduces.size());\n\n    clock.setTime(clock.getTime() + (preemptThreshold) * 1000);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is not preeempted\", 1,\n        assignedRequests.preemptionWaitingReduces.size());\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":509,"status":"B"},{"authorDate":"2018-01-31 17:42:42","commitOrder":1,"curCode":"  public void testUnconditionalPreemptReducers() throws Exception {\n    LOG.info(\"Running testForcePreemptReducers\");\n\n    int forcePreemptThresholdSecs = 2;\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        2 * forcePreemptThresholdSecs);\n    conf.setInt(MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n        forcePreemptThresholdSecs);\n\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(8192, 8));\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    ControlledClock clock = new ControlledClock(null);\n    clock.setTime(1);\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, clock);\n    allocator.setMapResourceRequest(BuilderUtils.newResource(1024, 1));\n    allocator.setReduceResourceRequest(BuilderUtils.newResource(1024, 1));\n    RMContainerAllocator.AssignedRequests assignedRequests =\n        allocator.getAssignedRequests();\n    RMContainerAllocator.ScheduledRequests scheduledRequests =\n        allocator.getScheduledRequests();\n    ContainerRequestEvent event1 =\n        createReq(jobId, 1, 2048, new String[] { \"h1\" }, false, false);\n    scheduledRequests.maps.put(mock(TaskAttemptId.class),\n        new RMContainerRequestor.ContainerRequest(event1, null, clock.getTime()));\n    assignedRequests.reduces.put(mock(TaskAttemptId.class),\n        mock(Container.class));\n\n    clock.setTime(clock.getTime() + 1);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is preeempted too soon\", 0,\n        assignedRequests.preemptionWaitingReduces.size());\n\n    clock.setTime(clock.getTime() + 1000 * forcePreemptThresholdSecs);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is not preeempted\", 1,\n        assignedRequests.preemptionWaitingReduces.size());\n  }\n","date":"2018-01-31 17:42:42","endLine":626,"groupId":"24789","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnconditionalPreemptReducers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/78/75917b68eec03cc7f44ed43633ed880e626905.src","preCode":"  public void testUnconditionalPreemptReducers() throws Exception {\n    LOG.info(\"Running testForcePreemptReducers\");\n\n    int forcePreemptThresholdSecs = 2;\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        2 * forcePreemptThresholdSecs);\n    conf.setInt(MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n        forcePreemptThresholdSecs);\n\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(8192, 8));\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    ControlledClock clock = new ControlledClock(null);\n    clock.setTime(1);\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, clock);\n    allocator.setMapResourceRequest(BuilderUtils.newResource(1024, 1));\n    allocator.setReduceResourceRequest(BuilderUtils.newResource(1024, 1));\n    RMContainerAllocator.AssignedRequests assignedRequests =\n        allocator.getAssignedRequests();\n    RMContainerAllocator.ScheduledRequests scheduledRequests =\n        allocator.getScheduledRequests();\n    ContainerRequestEvent event1 =\n        createReq(jobId, 1, 2048, new String[] { \"h1\" }, false, false);\n    scheduledRequests.maps.put(mock(TaskAttemptId.class),\n        new RMContainerRequestor.ContainerRequest(event1, null, clock.getTime()));\n    assignedRequests.reduces.put(mock(TaskAttemptId.class),\n        mock(Container.class));\n\n    clock.setTime(clock.getTime() + 1);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is preeempted too soon\", 0,\n        assignedRequests.preemptionWaitingReduces.size());\n\n    clock.setTime(clock.getTime() + 1000 * forcePreemptThresholdSecs);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is not preeempted\", 1,\n        assignedRequests.preemptionWaitingReduces.size());\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":568,"status":"B"}],"commitId":"8d1e2c6409a44f4515a1549ae82c7e2597e96467","commitMessage":"@@@Merge branch 'YARN-6592' into trunk\n","date":"2018-01-31 17:42:42","modifiedFileCount":"83","status":"B","submitter":"Arun Suresh"},{"authorTime":"2018-05-11 00:31:59","codes":[{"authorDate":"2018-05-11 00:31:59","commitOrder":2,"curCode":"  public void testNonAggressivelyPreemptReducers() throws Exception {\n    LOG.info(\"Running testNonAggressivelyPreemptReducers\");\n\n    final int preemptThreshold = 2; \r\n    Configuration conf = new Configuration();\n    conf.setInt(\n        MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        preemptThreshold);\n\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    ControlledClock clock = new ControlledClock(null);\n    clock.setTime(1);\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, clock);\n    allocator.setMapResourceRequest(BuilderUtils.newResource(1024, 1));\n    allocator.setReduceResourceRequest(BuilderUtils.newResource(1024, 1));\n    RMContainerAllocator.AssignedRequests assignedRequests =\n        allocator.getAssignedRequests();\n    RMContainerAllocator.ScheduledRequests scheduledRequests =\n        allocator.getScheduledRequests();\n    ContainerRequestEvent event1 =\n        createRequest(jobId, 1,\n                Resource.newInstance(2048, 1),\n                new String[] {\"h1\"}, false, false);\n    scheduledRequests.maps.put(mock(TaskAttemptId.class),\n        new RMContainerRequestor.ContainerRequest(event1, null,\n                clock.getTime()));\n    assignedRequests.reduces.put(mock(TaskAttemptId.class),\n        mock(Container.class));\n\n    clock.setTime(clock.getTime() + 1);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is aggressively preeempted\", 0,\n        assignedRequests.preemptionWaitingReduces.size());\n\n    clock.setTime(clock.getTime() + (preemptThreshold) * 1000);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is not preeempted\", 1,\n            assignedRequests.preemptionWaitingReduces.size());\n  }\n","date":"2018-05-11 00:31:59","endLine":578,"groupId":"24789","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonAggressivelyPreemptReducers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/42/7e6ea228f07be943dfedeb58106a10db30d900.src","preCode":"  public void testNonAggressivelyPreemptReducers() throws Exception {\n    LOG.info(\"Running testNonAggressivelyPreemptReducers\");\n\n    final int preemptThreshold = 2; \r\n    Configuration conf = new Configuration();\n    conf.setInt(\n        MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        preemptThreshold);\n\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    ControlledClock clock = new ControlledClock(null);\n    clock.setTime(1);\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, clock);\n    allocator.setMapResourceRequest(BuilderUtils.newResource(1024, 1));\n    allocator.setReduceResourceRequest(BuilderUtils.newResource(1024, 1));\n    RMContainerAllocator.AssignedRequests assignedRequests =\n        allocator.getAssignedRequests();\n    RMContainerAllocator.ScheduledRequests scheduledRequests =\n        allocator.getScheduledRequests();\n    ContainerRequestEvent event1 =\n        createReq(jobId, 1, 2048, new String[] { \"h1\" }, false, false);\n    scheduledRequests.maps.put(mock(TaskAttemptId.class),\n        new RMContainerRequestor.ContainerRequest(event1, null, clock.getTime()));\n    assignedRequests.reduces.put(mock(TaskAttemptId.class),\n        mock(Container.class));\n\n    clock.setTime(clock.getTime() + 1);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is aggressively preeempted\", 0,\n        assignedRequests.preemptionWaitingReduces.size());\n\n    clock.setTime(clock.getTime() + (preemptThreshold) * 1000);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is not preeempted\", 1,\n        assignedRequests.preemptionWaitingReduces.size());\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":519,"status":"M"},{"authorDate":"2018-05-11 00:31:59","commitOrder":2,"curCode":"  public void testUnconditionalPreemptReducers() throws Exception {\n    LOG.info(\"Running testForcePreemptReducers\");\n\n    int forcePreemptThresholdSecs = 2;\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        2 * forcePreemptThresholdSecs);\n    conf.setInt(MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n        forcePreemptThresholdSecs);\n\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(8192, 8));\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    ControlledClock clock = new ControlledClock(null);\n    clock.setTime(1);\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, clock);\n    allocator.setMapResourceRequest(BuilderUtils.newResource(1024, 1));\n    allocator.setReduceResourceRequest(BuilderUtils.newResource(1024, 1));\n    RMContainerAllocator.AssignedRequests assignedRequests =\n        allocator.getAssignedRequests();\n    RMContainerAllocator.ScheduledRequests scheduledRequests =\n        allocator.getScheduledRequests();\n    ContainerRequestEvent event1 =\n        createRequest(jobId, 1,\n                Resource.newInstance(2048, 1),\n                new String[] {\"h1\"}, false, false);\n    scheduledRequests.maps.put(mock(TaskAttemptId.class),\n        new RMContainerRequestor.ContainerRequest(event1, null,\n                clock.getTime()));\n    assignedRequests.reduces.put(mock(TaskAttemptId.class),\n        mock(Container.class));\n\n    clock.setTime(clock.getTime() + 1);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is preeempted too soon\", 0,\n        assignedRequests.preemptionWaitingReduces.size());\n\n    clock.setTime(clock.getTime() + 1000 * forcePreemptThresholdSecs);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is not preeempted\", 1,\n        assignedRequests.preemptionWaitingReduces.size());\n  }\n","date":"2018-05-11 00:31:59","endLine":642,"groupId":"24789","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnconditionalPreemptReducers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/42/7e6ea228f07be943dfedeb58106a10db30d900.src","preCode":"  public void testUnconditionalPreemptReducers() throws Exception {\n    LOG.info(\"Running testForcePreemptReducers\");\n\n    int forcePreemptThresholdSecs = 2;\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        2 * forcePreemptThresholdSecs);\n    conf.setInt(MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n        forcePreemptThresholdSecs);\n\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(8192, 8));\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    ControlledClock clock = new ControlledClock(null);\n    clock.setTime(1);\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, clock);\n    allocator.setMapResourceRequest(BuilderUtils.newResource(1024, 1));\n    allocator.setReduceResourceRequest(BuilderUtils.newResource(1024, 1));\n    RMContainerAllocator.AssignedRequests assignedRequests =\n        allocator.getAssignedRequests();\n    RMContainerAllocator.ScheduledRequests scheduledRequests =\n        allocator.getScheduledRequests();\n    ContainerRequestEvent event1 =\n        createReq(jobId, 1, 2048, new String[] { \"h1\" }, false, false);\n    scheduledRequests.maps.put(mock(TaskAttemptId.class),\n        new RMContainerRequestor.ContainerRequest(event1, null, clock.getTime()));\n    assignedRequests.reduces.put(mock(TaskAttemptId.class),\n        mock(Container.class));\n\n    clock.setTime(clock.getTime() + 1);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is preeempted too soon\", 0,\n        assignedRequests.preemptionWaitingReduces.size());\n\n    clock.setTime(clock.getTime() + 1000 * forcePreemptThresholdSecs);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is not preeempted\", 1,\n        assignedRequests.preemptionWaitingReduces.size());\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":581,"status":"M"}],"commitId":"c8b53c43644b4ad22d5385c22cad8ed573c0b1ba","commitMessage":"@@@YARN-8202. DefaultAMSProcessor should properly check units of requested custom resource types against minimum/maximum allocation (snemeth via rkanter)\n","date":"2018-05-11 00:31:59","modifiedFileCount":"6","status":"M","submitter":"Robert Kanter"},{"authorTime":"2019-12-05 15:56:23","codes":[{"authorDate":"2019-12-05 15:56:23","commitOrder":3,"curCode":"  public void testNonAggressivelyPreemptReducers() throws Exception {\n    LOG.info(\"Running testNonAggressivelyPreemptReducers\");\n\n    final int preemptThreshold = 2; \r\n    Configuration conf = new Configuration();\n    conf.setInt(\n        MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        preemptThreshold);\n\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = MockRMAppSubmitter.submitWithMemory(1024, rm);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    ControlledClock clock = new ControlledClock(null);\n    clock.setTime(1);\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, clock);\n    allocator.setMapResourceRequest(BuilderUtils.newResource(1024, 1));\n    allocator.setReduceResourceRequest(BuilderUtils.newResource(1024, 1));\n    RMContainerAllocator.AssignedRequests assignedRequests =\n        allocator.getAssignedRequests();\n    RMContainerAllocator.ScheduledRequests scheduledRequests =\n        allocator.getScheduledRequests();\n    ContainerRequestEvent event1 =\n        createRequest(jobId, 1,\n                Resource.newInstance(2048, 1),\n                new String[] {\"h1\"}, false, false);\n    scheduledRequests.maps.put(mock(TaskAttemptId.class),\n        new RMContainerRequestor.ContainerRequest(event1, null,\n                clock.getTime()));\n    assignedRequests.reduces.put(mock(TaskAttemptId.class),\n        mock(Container.class));\n\n    clock.setTime(clock.getTime() + 1);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is aggressively preeempted\", 0,\n        assignedRequests.preemptionWaitingReduces.size());\n\n    clock.setTime(clock.getTime() + (preemptThreshold) * 1000);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is not preeempted\", 1,\n            assignedRequests.preemptionWaitingReduces.size());\n  }\n","date":"2019-12-05 15:56:23","endLine":580,"groupId":"1092","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonAggressivelyPreemptReducers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/75/798876ddaaa7cafee2d3dfa054c4a14d743fab.src","preCode":"  public void testNonAggressivelyPreemptReducers() throws Exception {\n    LOG.info(\"Running testNonAggressivelyPreemptReducers\");\n\n    final int preemptThreshold = 2; \r\n    Configuration conf = new Configuration();\n    conf.setInt(\n        MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        preemptThreshold);\n\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    ControlledClock clock = new ControlledClock(null);\n    clock.setTime(1);\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, clock);\n    allocator.setMapResourceRequest(BuilderUtils.newResource(1024, 1));\n    allocator.setReduceResourceRequest(BuilderUtils.newResource(1024, 1));\n    RMContainerAllocator.AssignedRequests assignedRequests =\n        allocator.getAssignedRequests();\n    RMContainerAllocator.ScheduledRequests scheduledRequests =\n        allocator.getScheduledRequests();\n    ContainerRequestEvent event1 =\n        createRequest(jobId, 1,\n                Resource.newInstance(2048, 1),\n                new String[] {\"h1\"}, false, false);\n    scheduledRequests.maps.put(mock(TaskAttemptId.class),\n        new RMContainerRequestor.ContainerRequest(event1, null,\n                clock.getTime()));\n    assignedRequests.reduces.put(mock(TaskAttemptId.class),\n        mock(Container.class));\n\n    clock.setTime(clock.getTime() + 1);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is aggressively preeempted\", 0,\n        assignedRequests.preemptionWaitingReduces.size());\n\n    clock.setTime(clock.getTime() + (preemptThreshold) * 1000);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is not preeempted\", 1,\n            assignedRequests.preemptionWaitingReduces.size());\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":521,"status":"M"},{"authorDate":"2019-12-05 15:56:23","commitOrder":3,"curCode":"  public void testUnconditionalPreemptReducers() throws Exception {\n    LOG.info(\"Running testForcePreemptReducers\");\n\n    int forcePreemptThresholdSecs = 2;\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        2 * forcePreemptThresholdSecs);\n    conf.setInt(MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n        forcePreemptThresholdSecs);\n\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(8192, 8));\n\n    \r\n    RMApp app = MockRMAppSubmitter.submitWithMemory(1024, rm);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    ControlledClock clock = new ControlledClock(null);\n    clock.setTime(1);\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, clock);\n    allocator.setMapResourceRequest(BuilderUtils.newResource(1024, 1));\n    allocator.setReduceResourceRequest(BuilderUtils.newResource(1024, 1));\n    RMContainerAllocator.AssignedRequests assignedRequests =\n        allocator.getAssignedRequests();\n    RMContainerAllocator.ScheduledRequests scheduledRequests =\n        allocator.getScheduledRequests();\n    ContainerRequestEvent event1 =\n        createRequest(jobId, 1,\n                Resource.newInstance(2048, 1),\n                new String[] {\"h1\"}, false, false);\n    scheduledRequests.maps.put(mock(TaskAttemptId.class),\n        new RMContainerRequestor.ContainerRequest(event1, null,\n                clock.getTime()));\n    assignedRequests.reduces.put(mock(TaskAttemptId.class),\n        mock(Container.class));\n\n    clock.setTime(clock.getTime() + 1);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is preeempted too soon\", 0,\n        assignedRequests.preemptionWaitingReduces.size());\n\n    clock.setTime(clock.getTime() + 1000 * forcePreemptThresholdSecs);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is not preeempted\", 1,\n        assignedRequests.preemptionWaitingReduces.size());\n  }\n","date":"2019-12-05 15:56:23","endLine":644,"groupId":"1092","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnconditionalPreemptReducers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/75/798876ddaaa7cafee2d3dfa054c4a14d743fab.src","preCode":"  public void testUnconditionalPreemptReducers() throws Exception {\n    LOG.info(\"Running testForcePreemptReducers\");\n\n    int forcePreemptThresholdSecs = 2;\n    Configuration conf = new Configuration();\n    conf.setInt(MRJobConfig.MR_JOB_REDUCER_PREEMPT_DELAY_SEC,\n        2 * forcePreemptThresholdSecs);\n    conf.setInt(MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,\n        forcePreemptThresholdSecs);\n\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(8192, 8));\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    ControlledClock clock = new ControlledClock(null);\n    clock.setTime(1);\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob, clock);\n    allocator.setMapResourceRequest(BuilderUtils.newResource(1024, 1));\n    allocator.setReduceResourceRequest(BuilderUtils.newResource(1024, 1));\n    RMContainerAllocator.AssignedRequests assignedRequests =\n        allocator.getAssignedRequests();\n    RMContainerAllocator.ScheduledRequests scheduledRequests =\n        allocator.getScheduledRequests();\n    ContainerRequestEvent event1 =\n        createRequest(jobId, 1,\n                Resource.newInstance(2048, 1),\n                new String[] {\"h1\"}, false, false);\n    scheduledRequests.maps.put(mock(TaskAttemptId.class),\n        new RMContainerRequestor.ContainerRequest(event1, null,\n                clock.getTime()));\n    assignedRequests.reduces.put(mock(TaskAttemptId.class),\n        mock(Container.class));\n\n    clock.setTime(clock.getTime() + 1);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is preeempted too soon\", 0,\n        assignedRequests.preemptionWaitingReduces.size());\n\n    clock.setTime(clock.getTime() + 1000 * forcePreemptThresholdSecs);\n    allocator.preemptReducesIfNeeded();\n    Assert.assertEquals(\"The reducer is not preeempted\", 1,\n        assignedRequests.preemptionWaitingReduces.size());\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":583,"status":"M"}],"commitId":"682e6fdeda68b7244e92d32cd35fe317c9b32ede","commitMessage":"@@@YARN-9052. Replace all MockRM submit method definitions with a builder. Contributed by Szilard Nemeth.\n","date":"2019-12-05 15:56:23","modifiedFileCount":"86","status":"M","submitter":"Sunil G"}]
