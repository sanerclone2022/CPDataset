[{"authorTime":"2018-01-31 17:42:42","codes":[{"authorDate":"2018-01-31 17:42:42","commitOrder":1,"curCode":"  public void testUpdateAskOnRampDownAllReduces() throws Exception {\n    LOG.info(\"Running testUpdateAskOnRampDownAllReduces\");\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 1260);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n    \r\n    ControlledClock clock = (ControlledClock)allocator.getContext().getClock();\n    clock.setTime(System.currentTimeMillis());\n\n    \r\n    MockNM nodeManager = rm.registerNode(\"h1:1234\", 1024);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 =\n        createReq(jobId, 1, 1024, new String[] { \"h1\" });\n    allocator.sendRequest(event1);\n    ContainerRequestEvent event2 =\n        createReq(jobId, 2, 1024, new String[] { \"h2\" });\n    allocator.sendRequest(event2);\n    ContainerRequestEvent event3 =\n        createReq(jobId, 3, 1024, new String[] { \"h2\" }, false, true);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    clock.setTime(System.currentTimeMillis() + 500000L);\n\n    \r\n    ContainerRequestEvent event4 =\n        createReq(jobId, 4, 1024, new String[] { \"h3\" }, false, true);\n    allocator.sendRequest(event4);\n\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    nodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(1024, 1));\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    Assert.assertEquals(1, allocator.getAssignedRequests().maps.size());\n    \r\n    ContainerAllocatorEvent deallocate = createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate);\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(1, allocator.getNumOfPendingReduces());\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().maps.size());\n    Assert.assertEquals(0, allocator.getAssignedRequests().maps.size());\n\n    Assert.assertEquals(6, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      boolean isReduce =\n          req.getPriority().equals(RMContainerAllocator.PRIORITY_REDUCE);\n      if (isReduce) {\n        \r\n        Assert.assertTrue((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\") ||\n            req.getResourceName().equals(\"h2\")) && req.getNumContainers() == 1);\n      } else { \r\n        \r\n        Assert.assertTrue(((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\")) &&\n            req.getNumContainers() == 1) || (req.getResourceName().equals(\"h1\")\n            && req.getNumContainers() == 0));\n      }\n    }\n    \r\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(0, 0));\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    \r\n    \r\n    Assert.assertEquals(0, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(2, allocator.getNumOfPendingReduces());\n    Assert.assertEquals(3, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      Assert.assertEquals(\n          RMContainerAllocator.PRIORITY_REDUCE, req.getPriority());\n      Assert.assertTrue(req.getResourceName().equals(\"*\") ||\n          req.getResourceName().equals(\"/default-rack\") ||\n          req.getResourceName().equals(\"h2\"));\n      Assert.assertEquals(Resource.newInstance(1024, 1), req.getCapability());\n      Assert.assertEquals(0, req.getNumContainers());\n    }\n  }\n","date":"2018-01-31 17:42:42","endLine":3221,"groupId":"14631","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateAskOnRampDownAllReduces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/78/75917b68eec03cc7f44ed43633ed880e626905.src","preCode":"  public void testUpdateAskOnRampDownAllReduces() throws Exception {\n    LOG.info(\"Running testUpdateAskOnRampDownAllReduces\");\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 1260);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n    \r\n    ControlledClock clock = (ControlledClock)allocator.getContext().getClock();\n    clock.setTime(System.currentTimeMillis());\n\n    \r\n    MockNM nodeManager = rm.registerNode(\"h1:1234\", 1024);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 =\n        createReq(jobId, 1, 1024, new String[] { \"h1\" });\n    allocator.sendRequest(event1);\n    ContainerRequestEvent event2 =\n        createReq(jobId, 2, 1024, new String[] { \"h2\" });\n    allocator.sendRequest(event2);\n    ContainerRequestEvent event3 =\n        createReq(jobId, 3, 1024, new String[] { \"h2\" }, false, true);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    clock.setTime(System.currentTimeMillis() + 500000L);\n\n    \r\n    ContainerRequestEvent event4 =\n        createReq(jobId, 4, 1024, new String[] { \"h3\" }, false, true);\n    allocator.sendRequest(event4);\n\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    nodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(1024, 1));\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    Assert.assertEquals(1, allocator.getAssignedRequests().maps.size());\n    \r\n    ContainerAllocatorEvent deallocate = createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate);\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(1, allocator.getNumOfPendingReduces());\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().maps.size());\n    Assert.assertEquals(0, allocator.getAssignedRequests().maps.size());\n\n    Assert.assertEquals(6, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      boolean isReduce =\n          req.getPriority().equals(RMContainerAllocator.PRIORITY_REDUCE);\n      if (isReduce) {\n        \r\n        Assert.assertTrue((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\") ||\n            req.getResourceName().equals(\"h2\")) && req.getNumContainers() == 1);\n      } else { \r\n        \r\n        Assert.assertTrue(((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\")) &&\n            req.getNumContainers() == 1) || (req.getResourceName().equals(\"h1\")\n            && req.getNumContainers() == 0));\n      }\n    }\n    \r\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(0, 0));\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    \r\n    \r\n    Assert.assertEquals(0, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(2, allocator.getNumOfPendingReduces());\n    Assert.assertEquals(3, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      Assert.assertEquals(\n          RMContainerAllocator.PRIORITY_REDUCE, req.getPriority());\n      Assert.assertTrue(req.getResourceName().equals(\"*\") ||\n          req.getResourceName().equals(\"/default-rack\") ||\n          req.getResourceName().equals(\"h2\"));\n      Assert.assertEquals(Resource.newInstance(1024, 1), req.getCapability());\n      Assert.assertEquals(0, req.getNumContainers());\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":3104,"status":"B"},{"authorDate":"2018-01-31 17:42:42","commitOrder":1,"curCode":"  public void testAvoidAskMoreReducersWhenReducerPreemptionIsRequired()\n      throws Exception {\n    LOG.info(\"Running testAvoidAskMoreReducersWhenReducerPreemptionIsRequired\");\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 1260);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n    \r\n    ControlledClock clock = (ControlledClock)allocator.getContext().getClock();\n    clock.setTime(System.currentTimeMillis());\n\n    \r\n    MockNM nodeManager = rm.registerNode(\"h1:1234\", 1024);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 =\n        createReq(jobId, 1, 1024, new String[] { \"h1\" });\n    allocator.sendRequest(event1);\n    ContainerRequestEvent event2 =\n        createReq(jobId, 2, 1024, new String[] { \"h2\" });\n    allocator.sendRequest(event2);\n    ContainerRequestEvent event3 =\n        createReq(jobId, 3, 1024, new String[] { \"h2\" }, false, true);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    clock.setTime(System.currentTimeMillis() + 500000L);\n\n    \r\n    ContainerRequestEvent event4 =\n        createReq(jobId, 4, 1024, new String[] { \"h3\" }, false, true);\n    allocator.sendRequest(event4);\n\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    nodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(1024, 1));\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    Assert.assertEquals(1, allocator.getAssignedRequests().maps.size());\n    \r\n    ContainerAllocatorEvent deallocate = createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate);\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(1, allocator.getNumOfPendingReduces());\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().maps.size());\n    Assert.assertEquals(0, allocator.getAssignedRequests().maps.size());\n\n    Assert.assertEquals(6, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      boolean isReduce =\n          req.getPriority().equals(RMContainerAllocator.PRIORITY_REDUCE);\n      if (isReduce) {\n        \r\n        Assert.assertTrue((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\") ||\n            req.getResourceName().equals(\"h2\")) && req.getNumContainers() == 1);\n      } else { \r\n        \r\n        Assert.assertTrue(((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\")) &&\n            req.getNumContainers() == 1) || (req.getResourceName().equals(\"h1\")\n            && req.getNumContainers() == 0));\n      }\n    }\n\n    clock.setTime(System.currentTimeMillis() + 500000L + 10 * 60 * 1000);\n\n    \r\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(2048, 0));\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    \r\n    \r\n    Assert.assertEquals(0, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(2, allocator.getNumOfPendingReduces());\n    Assert.assertEquals(3, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      Assert.assertEquals(\n          RMContainerAllocator.PRIORITY_REDUCE, req.getPriority());\n      Assert.assertTrue(req.getResourceName().equals(\"*\") ||\n          req.getResourceName().equals(\"/default-rack\") ||\n          req.getResourceName().equals(\"h2\"));\n      Assert.assertEquals(Resource.newInstance(1024, 1), req.getCapability());\n      Assert.assertEquals(0, req.getNumContainers());\n    }\n  }\n","date":"2018-01-31 17:42:42","endLine":3388,"groupId":"14631","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvoidAskMoreReducersWhenReducerPreemptionIsRequired","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/78/75917b68eec03cc7f44ed43633ed880e626905.src","preCode":"  public void testAvoidAskMoreReducersWhenReducerPreemptionIsRequired()\n      throws Exception {\n    LOG.info(\"Running testAvoidAskMoreReducersWhenReducerPreemptionIsRequired\");\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 1260);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n    \r\n    ControlledClock clock = (ControlledClock)allocator.getContext().getClock();\n    clock.setTime(System.currentTimeMillis());\n\n    \r\n    MockNM nodeManager = rm.registerNode(\"h1:1234\", 1024);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 =\n        createReq(jobId, 1, 1024, new String[] { \"h1\" });\n    allocator.sendRequest(event1);\n    ContainerRequestEvent event2 =\n        createReq(jobId, 2, 1024, new String[] { \"h2\" });\n    allocator.sendRequest(event2);\n    ContainerRequestEvent event3 =\n        createReq(jobId, 3, 1024, new String[] { \"h2\" }, false, true);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    clock.setTime(System.currentTimeMillis() + 500000L);\n\n    \r\n    ContainerRequestEvent event4 =\n        createReq(jobId, 4, 1024, new String[] { \"h3\" }, false, true);\n    allocator.sendRequest(event4);\n\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    nodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(1024, 1));\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    Assert.assertEquals(1, allocator.getAssignedRequests().maps.size());\n    \r\n    ContainerAllocatorEvent deallocate = createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate);\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(1, allocator.getNumOfPendingReduces());\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().maps.size());\n    Assert.assertEquals(0, allocator.getAssignedRequests().maps.size());\n\n    Assert.assertEquals(6, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      boolean isReduce =\n          req.getPriority().equals(RMContainerAllocator.PRIORITY_REDUCE);\n      if (isReduce) {\n        \r\n        Assert.assertTrue((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\") ||\n            req.getResourceName().equals(\"h2\")) && req.getNumContainers() == 1);\n      } else { \r\n        \r\n        Assert.assertTrue(((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\")) &&\n            req.getNumContainers() == 1) || (req.getResourceName().equals(\"h1\")\n            && req.getNumContainers() == 0));\n      }\n    }\n\n    clock.setTime(System.currentTimeMillis() + 500000L + 10 * 60 * 1000);\n\n    \r\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(2048, 0));\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    \r\n    \r\n    Assert.assertEquals(0, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(2, allocator.getNumOfPendingReduces());\n    Assert.assertEquals(3, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      Assert.assertEquals(\n          RMContainerAllocator.PRIORITY_REDUCE, req.getPriority());\n      Assert.assertTrue(req.getResourceName().equals(\"*\") ||\n          req.getResourceName().equals(\"/default-rack\") ||\n          req.getResourceName().equals(\"h2\"));\n      Assert.assertEquals(Resource.newInstance(1024, 1), req.getCapability());\n      Assert.assertEquals(0, req.getNumContainers());\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":3267,"status":"B"}],"commitId":"8d1e2c6409a44f4515a1549ae82c7e2597e96467","commitMessage":"@@@Merge branch 'YARN-6592' into trunk\n","date":"2018-01-31 17:42:42","modifiedFileCount":"83","status":"B","submitter":"Arun Suresh"},{"authorTime":"2018-05-11 00:31:59","codes":[{"authorDate":"2018-05-11 00:31:59","commitOrder":2,"curCode":"  public void testUpdateAskOnRampDownAllReduces() throws Exception {\n    LOG.info(\"Running testUpdateAskOnRampDownAllReduces\");\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 1260);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n    \r\n    ControlledClock clock = (ControlledClock)allocator.getContext().getClock();\n    clock.setTime(System.currentTimeMillis());\n\n    \r\n    MockNM nodeManager = rm.registerNode(\"h1:1234\", 1024);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 =\n            ContainerRequestCreator.createRequest(jobId, 1,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h1\"});\n    allocator.sendRequest(event1);\n    ContainerRequestEvent event2 =\n            ContainerRequestCreator.createRequest(jobId, 2,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h2\"});\n    allocator.sendRequest(event2);\n    ContainerRequestEvent event3 =\n            createRequest(jobId, 3,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h2\"}, false, true);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    clock.setTime(System.currentTimeMillis() + 500000L);\n\n    \r\n    ContainerRequestEvent event4 =\n        createRequest(jobId, 4, Resource.newInstance(1024, 1),\n                new String[] {\"h3\"}, false, true);\n    allocator.sendRequest(event4);\n\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    nodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(1024, 1));\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    Assert.assertEquals(1, allocator.getAssignedRequests().maps.size());\n    \r\n    ContainerAllocatorEvent deallocate = createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate);\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(1, allocator.getNumOfPendingReduces());\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().maps.size());\n    Assert.assertEquals(0, allocator.getAssignedRequests().maps.size());\n\n    Assert.assertEquals(6, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      boolean isReduce =\n          req.getPriority().equals(RMContainerAllocator.PRIORITY_REDUCE);\n      if (isReduce) {\n        \r\n        Assert.assertTrue((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\") ||\n            req.getResourceName().equals(\"h2\")) && req.getNumContainers() == 1);\n      } else { \r\n        \r\n        Assert.assertTrue(((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\")) &&\n            req.getNumContainers() == 1) || (req.getResourceName().equals(\"h1\")\n            && req.getNumContainers() == 0));\n      }\n    }\n    \r\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(0, 0));\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    \r\n    \r\n    Assert.assertEquals(0, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(2, allocator.getNumOfPendingReduces());\n    Assert.assertEquals(3, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      Assert.assertEquals(\n          RMContainerAllocator.PRIORITY_REDUCE, req.getPriority());\n      Assert.assertTrue(req.getResourceName().equals(\"*\") ||\n          req.getResourceName().equals(\"/default-rack\") ||\n          req.getResourceName().equals(\"h2\"));\n      Assert.assertEquals(Resource.newInstance(1024, 1), req.getCapability());\n      Assert.assertEquals(0, req.getNumContainers());\n    }\n  }\n","date":"2018-05-11 00:31:59","endLine":3258,"groupId":"14631","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateAskOnRampDownAllReduces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/42/7e6ea228f07be943dfedeb58106a10db30d900.src","preCode":"  public void testUpdateAskOnRampDownAllReduces() throws Exception {\n    LOG.info(\"Running testUpdateAskOnRampDownAllReduces\");\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 1260);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n    \r\n    ControlledClock clock = (ControlledClock)allocator.getContext().getClock();\n    clock.setTime(System.currentTimeMillis());\n\n    \r\n    MockNM nodeManager = rm.registerNode(\"h1:1234\", 1024);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 =\n        createReq(jobId, 1, 1024, new String[] { \"h1\" });\n    allocator.sendRequest(event1);\n    ContainerRequestEvent event2 =\n        createReq(jobId, 2, 1024, new String[] { \"h2\" });\n    allocator.sendRequest(event2);\n    ContainerRequestEvent event3 =\n        createReq(jobId, 3, 1024, new String[] { \"h2\" }, false, true);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    clock.setTime(System.currentTimeMillis() + 500000L);\n\n    \r\n    ContainerRequestEvent event4 =\n        createReq(jobId, 4, 1024, new String[] { \"h3\" }, false, true);\n    allocator.sendRequest(event4);\n\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    nodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(1024, 1));\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    Assert.assertEquals(1, allocator.getAssignedRequests().maps.size());\n    \r\n    ContainerAllocatorEvent deallocate = createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate);\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(1, allocator.getNumOfPendingReduces());\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().maps.size());\n    Assert.assertEquals(0, allocator.getAssignedRequests().maps.size());\n\n    Assert.assertEquals(6, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      boolean isReduce =\n          req.getPriority().equals(RMContainerAllocator.PRIORITY_REDUCE);\n      if (isReduce) {\n        \r\n        Assert.assertTrue((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\") ||\n            req.getResourceName().equals(\"h2\")) && req.getNumContainers() == 1);\n      } else { \r\n        \r\n        Assert.assertTrue(((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\")) &&\n            req.getNumContainers() == 1) || (req.getResourceName().equals(\"h1\")\n            && req.getNumContainers() == 0));\n      }\n    }\n    \r\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(0, 0));\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    \r\n    \r\n    Assert.assertEquals(0, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(2, allocator.getNumOfPendingReduces());\n    Assert.assertEquals(3, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      Assert.assertEquals(\n          RMContainerAllocator.PRIORITY_REDUCE, req.getPriority());\n      Assert.assertTrue(req.getResourceName().equals(\"*\") ||\n          req.getResourceName().equals(\"/default-rack\") ||\n          req.getResourceName().equals(\"h2\"));\n      Assert.assertEquals(Resource.newInstance(1024, 1), req.getCapability());\n      Assert.assertEquals(0, req.getNumContainers());\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":3134,"status":"M"},{"authorDate":"2018-05-11 00:31:59","commitOrder":2,"curCode":"  public void testAvoidAskMoreReducersWhenReducerPreemptionIsRequired()\n      throws Exception {\n    LOG.info(\"Running testAvoidAskMoreReducersWhenReducerPreemptionIsRequired\");\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 1260);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n    \r\n    ControlledClock clock = (ControlledClock)allocator.getContext().getClock();\n    clock.setTime(System.currentTimeMillis());\n\n    \r\n    MockNM nodeManager = rm.registerNode(\"h1:1234\", 1024);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 =\n            ContainerRequestCreator.createRequest(jobId, 1,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h1\"});\n    allocator.sendRequest(event1);\n    ContainerRequestEvent event2 =\n            ContainerRequestCreator.createRequest(jobId, 2,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h2\"});\n    allocator.sendRequest(event2);\n    ContainerRequestEvent event3 =\n            createRequest(jobId, 3, Resource.newInstance(1024, 1),\n                    new String[]{\"h2\"}, false, true);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    clock.setTime(System.currentTimeMillis() + 500000L);\n\n    \r\n    ContainerRequestEvent event4 =\n            createRequest(jobId, 4, Resource.newInstance(1024, 1),\n                    new String[]{\"h3\"}, false, true);\n    allocator.sendRequest(event4);\n\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    nodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(1024, 1));\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    Assert.assertEquals(1, allocator.getAssignedRequests().maps.size());\n    \r\n    ContainerAllocatorEvent deallocate = createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate);\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(1, allocator.getNumOfPendingReduces());\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().maps.size());\n    Assert.assertEquals(0, allocator.getAssignedRequests().maps.size());\n\n    Assert.assertEquals(6, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      boolean isReduce =\n          req.getPriority().equals(RMContainerAllocator.PRIORITY_REDUCE);\n      if (isReduce) {\n        \r\n        Assert.assertTrue((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\") ||\n            req.getResourceName().equals(\"h2\")) && req.getNumContainers() == 1);\n      } else { \r\n        \r\n        Assert.assertTrue(((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\")) &&\n            req.getNumContainers() == 1) || (req.getResourceName().equals(\"h1\")\n            && req.getNumContainers() == 0));\n      }\n    }\n\n    clock.setTime(System.currentTimeMillis() + 500000L + 10 * 60 * 1000);\n\n    \r\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(2048, 0));\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    \r\n    \r\n    Assert.assertEquals(0, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(2, allocator.getNumOfPendingReduces());\n    Assert.assertEquals(3, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      Assert.assertEquals(\n          RMContainerAllocator.PRIORITY_REDUCE, req.getPriority());\n      Assert.assertTrue(req.getResourceName().equals(\"*\") ||\n          req.getResourceName().equals(\"/default-rack\") ||\n          req.getResourceName().equals(\"h2\"));\n      Assert.assertEquals(Resource.newInstance(1024, 1), req.getCapability());\n      Assert.assertEquals(0, req.getNumContainers());\n    }\n  }\n","date":"2018-05-11 00:31:59","endLine":3431,"groupId":"14631","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvoidAskMoreReducersWhenReducerPreemptionIsRequired","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/42/7e6ea228f07be943dfedeb58106a10db30d900.src","preCode":"  public void testAvoidAskMoreReducersWhenReducerPreemptionIsRequired()\n      throws Exception {\n    LOG.info(\"Running testAvoidAskMoreReducersWhenReducerPreemptionIsRequired\");\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 1260);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n    \r\n    ControlledClock clock = (ControlledClock)allocator.getContext().getClock();\n    clock.setTime(System.currentTimeMillis());\n\n    \r\n    MockNM nodeManager = rm.registerNode(\"h1:1234\", 1024);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 =\n        createReq(jobId, 1, 1024, new String[] { \"h1\" });\n    allocator.sendRequest(event1);\n    ContainerRequestEvent event2 =\n        createReq(jobId, 2, 1024, new String[] { \"h2\" });\n    allocator.sendRequest(event2);\n    ContainerRequestEvent event3 =\n        createReq(jobId, 3, 1024, new String[] { \"h2\" }, false, true);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    clock.setTime(System.currentTimeMillis() + 500000L);\n\n    \r\n    ContainerRequestEvent event4 =\n        createReq(jobId, 4, 1024, new String[] { \"h3\" }, false, true);\n    allocator.sendRequest(event4);\n\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    nodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(1024, 1));\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    Assert.assertEquals(1, allocator.getAssignedRequests().maps.size());\n    \r\n    ContainerAllocatorEvent deallocate = createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate);\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(1, allocator.getNumOfPendingReduces());\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().maps.size());\n    Assert.assertEquals(0, allocator.getAssignedRequests().maps.size());\n\n    Assert.assertEquals(6, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      boolean isReduce =\n          req.getPriority().equals(RMContainerAllocator.PRIORITY_REDUCE);\n      if (isReduce) {\n        \r\n        Assert.assertTrue((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\") ||\n            req.getResourceName().equals(\"h2\")) && req.getNumContainers() == 1);\n      } else { \r\n        \r\n        Assert.assertTrue(((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\")) &&\n            req.getNumContainers() == 1) || (req.getResourceName().equals(\"h1\")\n            && req.getNumContainers() == 0));\n      }\n    }\n\n    clock.setTime(System.currentTimeMillis() + 500000L + 10 * 60 * 1000);\n\n    \r\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(2048, 0));\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    \r\n    \r\n    Assert.assertEquals(0, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(2, allocator.getNumOfPendingReduces());\n    Assert.assertEquals(3, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      Assert.assertEquals(\n          RMContainerAllocator.PRIORITY_REDUCE, req.getPriority());\n      Assert.assertTrue(req.getResourceName().equals(\"*\") ||\n          req.getResourceName().equals(\"/default-rack\") ||\n          req.getResourceName().equals(\"h2\"));\n      Assert.assertEquals(Resource.newInstance(1024, 1), req.getCapability());\n      Assert.assertEquals(0, req.getNumContainers());\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":3304,"status":"M"}],"commitId":"c8b53c43644b4ad22d5385c22cad8ed573c0b1ba","commitMessage":"@@@YARN-8202. DefaultAMSProcessor should properly check units of requested custom resource types against minimum/maximum allocation (snemeth via rkanter)\n","date":"2018-05-11 00:31:59","modifiedFileCount":"6","status":"M","submitter":"Robert Kanter"},{"authorTime":"2019-12-05 15:56:23","codes":[{"authorDate":"2019-12-05 15:56:23","commitOrder":3,"curCode":"  public void testUpdateAskOnRampDownAllReduces() throws Exception {\n    LOG.info(\"Running testUpdateAskOnRampDownAllReduces\");\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = MockRMAppSubmitter.submitWithMemory(1024, rm);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 1260);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n    \r\n    ControlledClock clock = (ControlledClock)allocator.getContext().getClock();\n    clock.setTime(System.currentTimeMillis());\n\n    \r\n    MockNM nodeManager = rm.registerNode(\"h1:1234\", 1024);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 =\n            ContainerRequestCreator.createRequest(jobId, 1,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h1\"});\n    allocator.sendRequest(event1);\n    ContainerRequestEvent event2 =\n            ContainerRequestCreator.createRequest(jobId, 2,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h2\"});\n    allocator.sendRequest(event2);\n    ContainerRequestEvent event3 =\n            createRequest(jobId, 3,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h2\"}, false, true);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    clock.setTime(System.currentTimeMillis() + 500000L);\n\n    \r\n    ContainerRequestEvent event4 =\n        createRequest(jobId, 4, Resource.newInstance(1024, 1),\n                new String[] {\"h3\"}, false, true);\n    allocator.sendRequest(event4);\n\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    nodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(1024, 1));\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    Assert.assertEquals(1, allocator.getAssignedRequests().maps.size());\n    \r\n    ContainerAllocatorEvent deallocate = createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate);\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(1, allocator.getNumOfPendingReduces());\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().maps.size());\n    Assert.assertEquals(0, allocator.getAssignedRequests().maps.size());\n\n    Assert.assertEquals(6, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      boolean isReduce =\n          req.getPriority().equals(RMContainerAllocator.PRIORITY_REDUCE);\n      if (isReduce) {\n        \r\n        Assert.assertTrue((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\") ||\n            req.getResourceName().equals(\"h2\")) && req.getNumContainers() == 1);\n      } else { \r\n        \r\n        Assert.assertTrue(((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\")) &&\n            req.getNumContainers() == 1) || (req.getResourceName().equals(\"h1\")\n            && req.getNumContainers() == 0));\n      }\n    }\n    \r\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(0, 0));\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    \r\n    \r\n    Assert.assertEquals(0, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(2, allocator.getNumOfPendingReduces());\n    Assert.assertEquals(3, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      Assert.assertEquals(\n          RMContainerAllocator.PRIORITY_REDUCE, req.getPriority());\n      Assert.assertTrue(req.getResourceName().equals(\"*\") ||\n          req.getResourceName().equals(\"/default-rack\") ||\n          req.getResourceName().equals(\"h2\"));\n      Assert.assertEquals(Resource.newInstance(1024, 1), req.getCapability());\n      Assert.assertEquals(0, req.getNumContainers());\n    }\n  }\n","date":"2019-12-05 15:56:23","endLine":3296,"groupId":"10100","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateAskOnRampDownAllReduces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/75/798876ddaaa7cafee2d3dfa054c4a14d743fab.src","preCode":"  public void testUpdateAskOnRampDownAllReduces() throws Exception {\n    LOG.info(\"Running testUpdateAskOnRampDownAllReduces\");\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 1260);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n    \r\n    ControlledClock clock = (ControlledClock)allocator.getContext().getClock();\n    clock.setTime(System.currentTimeMillis());\n\n    \r\n    MockNM nodeManager = rm.registerNode(\"h1:1234\", 1024);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 =\n            ContainerRequestCreator.createRequest(jobId, 1,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h1\"});\n    allocator.sendRequest(event1);\n    ContainerRequestEvent event2 =\n            ContainerRequestCreator.createRequest(jobId, 2,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h2\"});\n    allocator.sendRequest(event2);\n    ContainerRequestEvent event3 =\n            createRequest(jobId, 3,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h2\"}, false, true);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    clock.setTime(System.currentTimeMillis() + 500000L);\n\n    \r\n    ContainerRequestEvent event4 =\n        createRequest(jobId, 4, Resource.newInstance(1024, 1),\n                new String[] {\"h3\"}, false, true);\n    allocator.sendRequest(event4);\n\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    nodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(1024, 1));\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    Assert.assertEquals(1, allocator.getAssignedRequests().maps.size());\n    \r\n    ContainerAllocatorEvent deallocate = createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate);\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(1, allocator.getNumOfPendingReduces());\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().maps.size());\n    Assert.assertEquals(0, allocator.getAssignedRequests().maps.size());\n\n    Assert.assertEquals(6, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      boolean isReduce =\n          req.getPriority().equals(RMContainerAllocator.PRIORITY_REDUCE);\n      if (isReduce) {\n        \r\n        Assert.assertTrue((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\") ||\n            req.getResourceName().equals(\"h2\")) && req.getNumContainers() == 1);\n      } else { \r\n        \r\n        Assert.assertTrue(((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\")) &&\n            req.getNumContainers() == 1) || (req.getResourceName().equals(\"h1\")\n            && req.getNumContainers() == 0));\n      }\n    }\n    \r\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(0, 0));\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    \r\n    \r\n    Assert.assertEquals(0, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(2, allocator.getNumOfPendingReduces());\n    Assert.assertEquals(3, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      Assert.assertEquals(\n          RMContainerAllocator.PRIORITY_REDUCE, req.getPriority());\n      Assert.assertTrue(req.getResourceName().equals(\"*\") ||\n          req.getResourceName().equals(\"/default-rack\") ||\n          req.getResourceName().equals(\"h2\"));\n      Assert.assertEquals(Resource.newInstance(1024, 1), req.getCapability());\n      Assert.assertEquals(0, req.getNumContainers());\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":3172,"status":"M"},{"authorDate":"2019-12-05 15:56:23","commitOrder":3,"curCode":"  public void testAvoidAskMoreReducersWhenReducerPreemptionIsRequired()\n      throws Exception {\n    LOG.info(\"Running testAvoidAskMoreReducersWhenReducerPreemptionIsRequired\");\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = MockRMAppSubmitter.submitWithMemory(1024, rm);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 1260);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n    \r\n    ControlledClock clock = (ControlledClock)allocator.getContext().getClock();\n    clock.setTime(System.currentTimeMillis());\n\n    \r\n    MockNM nodeManager = rm.registerNode(\"h1:1234\", 1024);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 =\n            ContainerRequestCreator.createRequest(jobId, 1,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h1\"});\n    allocator.sendRequest(event1);\n    ContainerRequestEvent event2 =\n            ContainerRequestCreator.createRequest(jobId, 2,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h2\"});\n    allocator.sendRequest(event2);\n    ContainerRequestEvent event3 =\n            createRequest(jobId, 3, Resource.newInstance(1024, 1),\n                    new String[]{\"h2\"}, false, true);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    clock.setTime(System.currentTimeMillis() + 500000L);\n\n    \r\n    ContainerRequestEvent event4 =\n            createRequest(jobId, 4, Resource.newInstance(1024, 1),\n                    new String[]{\"h3\"}, false, true);\n    allocator.sendRequest(event4);\n\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    nodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(1024, 1));\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    Assert.assertEquals(1, allocator.getAssignedRequests().maps.size());\n    \r\n    ContainerAllocatorEvent deallocate = createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate);\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(1, allocator.getNumOfPendingReduces());\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().maps.size());\n    Assert.assertEquals(0, allocator.getAssignedRequests().maps.size());\n\n    Assert.assertEquals(6, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      boolean isReduce =\n          req.getPriority().equals(RMContainerAllocator.PRIORITY_REDUCE);\n      if (isReduce) {\n        \r\n        Assert.assertTrue((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\") ||\n            req.getResourceName().equals(\"h2\")) && req.getNumContainers() == 1);\n      } else { \r\n        \r\n        Assert.assertTrue(((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\")) &&\n            req.getNumContainers() == 1) || (req.getResourceName().equals(\"h1\")\n            && req.getNumContainers() == 0));\n      }\n    }\n\n    clock.setTime(System.currentTimeMillis() + 500000L + 10 * 60 * 1000);\n\n    \r\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(2048, 0));\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    \r\n    \r\n    Assert.assertEquals(0, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(2, allocator.getNumOfPendingReduces());\n    Assert.assertEquals(3, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      Assert.assertEquals(\n          RMContainerAllocator.PRIORITY_REDUCE, req.getPriority());\n      Assert.assertTrue(req.getResourceName().equals(\"*\") ||\n          req.getResourceName().equals(\"/default-rack\") ||\n          req.getResourceName().equals(\"h2\"));\n      Assert.assertEquals(Resource.newInstance(1024, 1), req.getCapability());\n      Assert.assertEquals(0, req.getNumContainers());\n    }\n  }\n","date":"2019-12-05 15:56:23","endLine":3469,"groupId":"10100","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvoidAskMoreReducersWhenReducerPreemptionIsRequired","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hadoop-10-0.7/blobInfo/CC_OUT/blobs/75/798876ddaaa7cafee2d3dfa054c4a14d743fab.src","preCode":"  public void testAvoidAskMoreReducersWhenReducerPreemptionIsRequired()\n      throws Exception {\n    LOG.info(\"Running testAvoidAskMoreReducersWhenReducerPreemptionIsRequired\");\n    Configuration conf = new Configuration();\n    MyResourceManager rm = new MyResourceManager(conf);\n    rm.start();\n\n    \r\n    RMApp app = rm.submitApp(1024);\n    rm.drainEvents();\n\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 1260);\n    amNodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt()\n        .getAppAttemptId();\n    rm.sendAMLaunched(appAttemptId);\n    rm.drainEvents();\n\n    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);\n    Job mockJob = mock(Job.class);\n    when(mockJob.getReport()).thenReturn(\n        MRBuilderUtils.newJobReport(jobId, \"job\", \"user\", JobState.RUNNING, 0,\n            0, 0, 0, 0, 0, 0, \"jobfile\", null, false, \"\"));\n    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf,\n        appAttemptId, mockJob);\n    \r\n    ControlledClock clock = (ControlledClock)allocator.getContext().getClock();\n    clock.setTime(System.currentTimeMillis());\n\n    \r\n    MockNM nodeManager = rm.registerNode(\"h1:1234\", 1024);\n    rm.drainEvents();\n\n    \r\n    ContainerRequestEvent event1 =\n            ContainerRequestCreator.createRequest(jobId, 1,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h1\"});\n    allocator.sendRequest(event1);\n    ContainerRequestEvent event2 =\n            ContainerRequestCreator.createRequest(jobId, 2,\n                    Resource.newInstance(1024, 1),\n                    new String[]{\"h2\"});\n    allocator.sendRequest(event2);\n    ContainerRequestEvent event3 =\n            createRequest(jobId, 3, Resource.newInstance(1024, 1),\n                    new String[]{\"h2\"}, false, true);\n    allocator.sendRequest(event3);\n\n    \r\n    \r\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    clock.setTime(System.currentTimeMillis() + 500000L);\n\n    \r\n    ContainerRequestEvent event4 =\n            createRequest(jobId, 4, Resource.newInstance(1024, 1),\n                    new String[]{\"h3\"}, false, true);\n    allocator.sendRequest(event4);\n\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    nodeManager.nodeHeartbeat(true);\n    rm.drainEvents();\n\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(1024, 1));\n    allocator.schedule();\n    rm.drainEvents();\n\n    \r\n    Assert.assertEquals(1, allocator.getAssignedRequests().maps.size());\n    \r\n    ContainerAllocatorEvent deallocate = createDeallocateEvent(jobId, 1, false);\n    allocator.sendDeallocate(deallocate);\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(1, allocator.getNumOfPendingReduces());\n    \r\n    Assert.assertEquals(1, allocator.getScheduledRequests().maps.size());\n    Assert.assertEquals(0, allocator.getAssignedRequests().maps.size());\n\n    Assert.assertEquals(6, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      boolean isReduce =\n          req.getPriority().equals(RMContainerAllocator.PRIORITY_REDUCE);\n      if (isReduce) {\n        \r\n        Assert.assertTrue((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\") ||\n            req.getResourceName().equals(\"h2\")) && req.getNumContainers() == 1);\n      } else { \r\n        \r\n        Assert.assertTrue(((req.getResourceName().equals(\"*\") ||\n            req.getResourceName().equals(\"/default-rack\")) &&\n            req.getNumContainers() == 1) || (req.getResourceName().equals(\"h1\")\n            && req.getNumContainers() == 0));\n      }\n    }\n\n    clock.setTime(System.currentTimeMillis() + 500000L + 10 * 60 * 1000);\n\n    \r\n    rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(2048, 0));\n    allocator.schedule();\n    rm.drainEvents();\n    \r\n    \r\n    \r\n    Assert.assertEquals(0, allocator.getScheduledRequests().reduces.size());\n    Assert.assertEquals(2, allocator.getNumOfPendingReduces());\n    Assert.assertEquals(3, allocator.getAsk().size());\n    for (ResourceRequest req : allocator.getAsk()) {\n      Assert.assertEquals(\n          RMContainerAllocator.PRIORITY_REDUCE, req.getPriority());\n      Assert.assertTrue(req.getResourceName().equals(\"*\") ||\n          req.getResourceName().equals(\"/default-rack\") ||\n          req.getResourceName().equals(\"h2\"));\n      Assert.assertEquals(Resource.newInstance(1024, 1), req.getCapability());\n      Assert.assertEquals(0, req.getNumContainers());\n    }\n  }\n","realPath":"hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/rm/TestRMContainerAllocator.java","repoName":"hadoop","snippetEndLine":0,"snippetStartLine":0,"startLine":3342,"status":"M"}],"commitId":"682e6fdeda68b7244e92d32cd35fe317c9b32ede","commitMessage":"@@@YARN-9052. Replace all MockRM submit method definitions with a builder. Contributed by Szilard Nemeth.\n","date":"2019-12-05 15:56:23","modifiedFileCount":"86","status":"M","submitter":"Sunil G"}]
