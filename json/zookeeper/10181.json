[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testNormalRun() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l)\n                    throws IOException {\n                Assert.assertEquals(0, l.self.getAcceptedEpoch());\n                Assert.assertEquals(0, l.self.getCurrentEpoch());\n                \n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte liBytes[] = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li,\n                        ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0,\n                        liBytes, null);\n                oa.writeRecord(qp, null);\n                \n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.LEADERINFO, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                Assert.assertEquals(ByteBuffer.wrap(qp.getData()).getInt(),\n                        0x10000);\n                Assert.assertEquals(1, l.self.getAcceptedEpoch());\n                Assert.assertEquals(0, l.self.getCurrentEpoch());\n                \n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n                \n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.NEWLEADER, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                Assert.assertEquals(1, l.self.getAcceptedEpoch());\n                Assert.assertEquals(1, l.self.getCurrentEpoch());\n                \n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.UPTODATE, qp.getType());\n            }\n        });\n    }\n","date":"2018-10-05 20:25:43","endLine":883,"groupId":"1765","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormalRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/bd9d88222077beb805541ba9fd2c22644bce83.src","preCode":"    public void testNormalRun() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l)\n                    throws IOException {\n                Assert.assertEquals(0, l.self.getAcceptedEpoch());\n                Assert.assertEquals(0, l.self.getCurrentEpoch());\n                \n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte liBytes[] = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li,\n                        ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0,\n                        liBytes, null);\n                oa.writeRecord(qp, null);\n                \n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.LEADERINFO, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                Assert.assertEquals(ByteBuffer.wrap(qp.getData()).getInt(),\n                        0x10000);\n                Assert.assertEquals(1, l.self.getAcceptedEpoch());\n                Assert.assertEquals(0, l.self.getCurrentEpoch());\n                \n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n                \n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.NEWLEADER, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                Assert.assertEquals(1, l.self.getAcceptedEpoch());\n                Assert.assertEquals(1, l.self.getCurrentEpoch());\n                \n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.UPTODATE, qp.getType());\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":840,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testTxnTimeout() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l)\n                    throws IOException, InterruptedException, org.apache.zookeeper.server.quorum.Leader.XidRolloverException {\n                Assert.assertEquals(0, l.self.getAcceptedEpoch());\n                Assert.assertEquals(0, l.self.getCurrentEpoch());\n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte liBytes[] = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li,\n                        ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0,\n                        liBytes, null);\n                oa.writeRecord(qp, null);\n                \n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.LEADERINFO, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                Assert.assertEquals(ByteBuffer.wrap(qp.getData()).getInt(),\n                        0x10000);\n                Assert.assertEquals(1, l.self.getAcceptedEpoch());\n                Assert.assertEquals(0, l.self.getCurrentEpoch());\n                \n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n                \n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.NEWLEADER, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                Assert.assertEquals(1, l.self.getAcceptedEpoch());\n                Assert.assertEquals(1, l.self.getCurrentEpoch());\n                \n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.UPTODATE, qp.getType());\n\n                long zxid = l.zk.getZxid();\n                l.propose(new Request(1, 1, ZooDefs.OpCode.create,\n                            new TxnHeader(1, 1, zxid, 1, ZooDefs.OpCode.create),\n                            new CreateTxn(\"/test\", \"hola\".getBytes(), null, true, 0), zxid));\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.PROPOSAL, qp.getType());\n\n                LOG.info(\"Proposal sent.\");\n\n                for (int i = 0; i < (2 * ZabUtils.SYNC_LIMIT) + 2; i++) {\n                    try {\n                        ia.readRecord(qp, null);\n                        LOG.info(\"Ping received: \" + i);\n                        qp = new  QuorumPacket(Leader.PING, qp.getZxid(), \"\".getBytes(), null);\n                        oa.writeRecord(qp, null);\n                    } catch (EOFException e) {\n                        return;\n                    }\n                }\n                Assert.fail(\"Connection hasn't been closed by leader after transaction times out.\");\n            }\n        });\n    }\n","date":"2018-10-05 20:25:43","endLine":950,"groupId":"1765","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTxnTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/bd9d88222077beb805541ba9fd2c22644bce83.src","preCode":"    public void testTxnTimeout() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l)\n                    throws IOException, InterruptedException, org.apache.zookeeper.server.quorum.Leader.XidRolloverException {\n                Assert.assertEquals(0, l.self.getAcceptedEpoch());\n                Assert.assertEquals(0, l.self.getCurrentEpoch());\n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte liBytes[] = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li,\n                        ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0,\n                        liBytes, null);\n                oa.writeRecord(qp, null);\n                \n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.LEADERINFO, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                Assert.assertEquals(ByteBuffer.wrap(qp.getData()).getInt(),\n                        0x10000);\n                Assert.assertEquals(1, l.self.getAcceptedEpoch());\n                Assert.assertEquals(0, l.self.getCurrentEpoch());\n                \n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n                \n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.NEWLEADER, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                Assert.assertEquals(1, l.self.getAcceptedEpoch());\n                Assert.assertEquals(1, l.self.getCurrentEpoch());\n                \n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.UPTODATE, qp.getType());\n\n                long zxid = l.zk.getZxid();\n                l.propose(new Request(1, 1, ZooDefs.OpCode.create,\n                            new TxnHeader(1, 1, zxid, 1, ZooDefs.OpCode.create),\n                            new CreateTxn(\"/test\", \"hola\".getBytes(), null, true, 0), zxid));\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.PROPOSAL, qp.getType());\n\n                LOG.info(\"Proposal sent.\");\n\n                for (int i = 0; i < (2 * ZabUtils.SYNC_LIMIT) + 2; i++) {\n                    try {\n                        ia.readRecord(qp, null);\n                        LOG.info(\"Ping received: \" + i);\n                        qp = new  QuorumPacket(Leader.PING, qp.getZxid(), \"\".getBytes(), null);\n                        oa.writeRecord(qp, null);\n                    } catch (EOFException e) {\n                        return;\n                    }\n                }\n                Assert.fail(\"Connection hasn't been closed by leader after transaction times out.\");\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":886,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testNormalRun() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l) throws IOException {\n                assertEquals(0, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte[] liBytes = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li, ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0, liBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.LEADERINFO, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(ByteBuffer.wrap(qp.getData()).getInt(), 0x10000);\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.NEWLEADER, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(1, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.UPTODATE, qp.getType());\n            }\n        });\n    }\n","date":"2019-08-17 23:13:15","endLine":864,"groupId":"1866","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormalRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/7f81f265db319f5227680702d6a4be01a76445.src","preCode":"    public void testNormalRun() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l)\n                    throws IOException {\n                Assert.assertEquals(0, l.self.getAcceptedEpoch());\n                Assert.assertEquals(0, l.self.getCurrentEpoch());\n                \n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte liBytes[] = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li,\n                        ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0,\n                        liBytes, null);\n                oa.writeRecord(qp, null);\n                \n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.LEADERINFO, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                Assert.assertEquals(ByteBuffer.wrap(qp.getData()).getInt(),\n                        0x10000);\n                Assert.assertEquals(1, l.self.getAcceptedEpoch());\n                Assert.assertEquals(0, l.self.getCurrentEpoch());\n                \n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n                \n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.NEWLEADER, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                Assert.assertEquals(1, l.self.getAcceptedEpoch());\n                Assert.assertEquals(1, l.self.getCurrentEpoch());\n                \n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.UPTODATE, qp.getType());\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":825,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testTxnTimeout() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l) throws IOException, InterruptedException, org.apache.zookeeper.server.quorum.Leader.XidRolloverException {\n                assertEquals(0, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte[] liBytes = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li, ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0, liBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.LEADERINFO, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(ByteBuffer.wrap(qp.getData()).getInt(), 0x10000);\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.NEWLEADER, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(1, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.UPTODATE, qp.getType());\n\n                long zxid = l.zk.getZxid();\n                l.propose(new Request(1, 1, ZooDefs.OpCode.create, new TxnHeader(1, 1, zxid, 1, ZooDefs.OpCode.create), new CreateTxn(\"/test\", \"hola\".getBytes(), null, true, 0), zxid));\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.PROPOSAL, qp.getType());\n\n                LOG.info(\"Proposal sent.\");\n\n                for (int i = 0; i < (2 * ZabUtils.SYNC_LIMIT) + 2; i++) {\n                    try {\n                        ia.readRecord(qp, null);\n                        LOG.info(\"Ping received: \" + i);\n                        qp = new QuorumPacket(Leader.PING, qp.getZxid(), \"\".getBytes(), null);\n                        oa.writeRecord(qp, null);\n                    } catch (EOFException e) {\n                        return;\n                    }\n                }\n                fail(\"Connection hasn't been closed by leader after transaction times out.\");\n            }\n        });\n    }\n","date":"2019-08-17 23:13:15","endLine":925,"groupId":"1866","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTxnTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/7f81f265db319f5227680702d6a4be01a76445.src","preCode":"    public void testTxnTimeout() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l)\n                    throws IOException, InterruptedException, org.apache.zookeeper.server.quorum.Leader.XidRolloverException {\n                Assert.assertEquals(0, l.self.getAcceptedEpoch());\n                Assert.assertEquals(0, l.self.getCurrentEpoch());\n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte liBytes[] = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li,\n                        ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0,\n                        liBytes, null);\n                oa.writeRecord(qp, null);\n                \n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.LEADERINFO, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                Assert.assertEquals(ByteBuffer.wrap(qp.getData()).getInt(),\n                        0x10000);\n                Assert.assertEquals(1, l.self.getAcceptedEpoch());\n                Assert.assertEquals(0, l.self.getCurrentEpoch());\n                \n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n                \n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.NEWLEADER, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                Assert.assertEquals(1, l.self.getAcceptedEpoch());\n                Assert.assertEquals(1, l.self.getCurrentEpoch());\n                \n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.UPTODATE, qp.getType());\n\n                long zxid = l.zk.getZxid();\n                l.propose(new Request(1, 1, ZooDefs.OpCode.create,\n                            new TxnHeader(1, 1, zxid, 1, ZooDefs.OpCode.create),\n                            new CreateTxn(\"/test\", \"hola\".getBytes(), null, true, 0), zxid));\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.PROPOSAL, qp.getType());\n\n                LOG.info(\"Proposal sent.\");\n\n                for (int i = 0; i < (2 * ZabUtils.SYNC_LIMIT) + 2; i++) {\n                    try {\n                        ia.readRecord(qp, null);\n                        LOG.info(\"Ping received: \" + i);\n                        qp = new  QuorumPacket(Leader.PING, qp.getZxid(), \"\".getBytes(), null);\n                        oa.writeRecord(qp, null);\n                    } catch (EOFException e) {\n                        return;\n                    }\n                }\n                Assert.fail(\"Connection hasn't been closed by leader after transaction times out.\");\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":867,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testNormalRun() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l) throws IOException {\n                assertEquals(0, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte[] liBytes = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li, ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0, liBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.LEADERINFO, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(ByteBuffer.wrap(qp.getData()).getInt(), 0x10000);\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.NEWLEADER, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(1, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.UPTODATE, qp.getType());\n            }\n        });\n    }\n","date":"2019-08-17 23:13:15","endLine":864,"groupId":"1866","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormalRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/7f81f265db319f5227680702d6a4be01a76445.src","preCode":"    public void testNormalRun() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l) throws IOException {\n                assertEquals(0, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte[] liBytes = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li, ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0, liBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.LEADERINFO, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(ByteBuffer.wrap(qp.getData()).getInt(), 0x10000);\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.NEWLEADER, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(1, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.UPTODATE, qp.getType());\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":825,"status":"N"},{"authorDate":"2019-10-10 20:37:45","commitOrder":3,"curCode":"    public void testTxnTimeout() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l) throws IOException, InterruptedException, org.apache.zookeeper.server.quorum.Leader.XidRolloverException {\n                assertEquals(0, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte[] liBytes = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li, ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0, liBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.LEADERINFO, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(ByteBuffer.wrap(qp.getData()).getInt(), 0x10000);\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.NEWLEADER, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(1, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.UPTODATE, qp.getType());\n\n                long zxid = l.zk.getZxid();\n                l.propose(new Request(1, 1, ZooDefs.OpCode.create, new TxnHeader(1, 1, zxid, 1, ZooDefs.OpCode.create), new CreateTxn(\"/test\", \"hola\".getBytes(), null, true, 0), zxid));\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.PROPOSAL, qp.getType());\n\n                LOG.info(\"Proposal sent.\");\n\n                for (int i = 0; i < (2 * ZabUtils.SYNC_LIMIT) + 2; i++) {\n                    try {\n                        ia.readRecord(qp, null);\n                        LOG.info(\"Ping received: {}\", i);\n                        qp = new QuorumPacket(Leader.PING, qp.getZxid(), \"\".getBytes(), null);\n                        oa.writeRecord(qp, null);\n                    } catch (EOFException e) {\n                        return;\n                    }\n                }\n                fail(\"Connection hasn't been closed by leader after transaction times out.\");\n            }\n        });\n    }\n","date":"2019-10-10 20:37:45","endLine":925,"groupId":"1866","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTxnTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/53/02416edb092d2f584561e1996ed537e2568cc8.src","preCode":"    public void testTxnTimeout() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l) throws IOException, InterruptedException, org.apache.zookeeper.server.quorum.Leader.XidRolloverException {\n                assertEquals(0, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte[] liBytes = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li, ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0, liBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.LEADERINFO, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(ByteBuffer.wrap(qp.getData()).getInt(), 0x10000);\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.NEWLEADER, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(1, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.UPTODATE, qp.getType());\n\n                long zxid = l.zk.getZxid();\n                l.propose(new Request(1, 1, ZooDefs.OpCode.create, new TxnHeader(1, 1, zxid, 1, ZooDefs.OpCode.create), new CreateTxn(\"/test\", \"hola\".getBytes(), null, true, 0), zxid));\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.PROPOSAL, qp.getType());\n\n                LOG.info(\"Proposal sent.\");\n\n                for (int i = 0; i < (2 * ZabUtils.SYNC_LIMIT) + 2; i++) {\n                    try {\n                        ia.readRecord(qp, null);\n                        LOG.info(\"Ping received: \" + i);\n                        qp = new QuorumPacket(Leader.PING, qp.getZxid(), \"\".getBytes(), null);\n                        oa.writeRecord(qp, null);\n                    } catch (EOFException e) {\n                        return;\n                    }\n                }\n                fail(\"Connection hasn't been closed by leader after transaction times out.\");\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":867,"status":"M"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"},{"authorTime":"2019-12-17 20:48:25","codes":[{"authorDate":"2019-12-17 20:48:25","commitOrder":4,"curCode":"    public void testNormalRun() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l) throws IOException {\n                assertEquals(0, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte[] liBytes = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li, ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0, liBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.LEADERINFO, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(ByteBuffer.wrap(qp.getData()).getInt(), 0x10000);\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.NEWLEADER, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertCurrentEpochGotUpdated(1, l.self, ClientBase.CONNECTION_TIMEOUT);\n\n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.UPTODATE, qp.getType());\n            }\n        });\n    }\n","date":"2019-12-17 20:48:25","endLine":865,"groupId":"10181","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormalRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/9f/8486e3dcfa418adf61d66ae72e2ec2408297b2.src","preCode":"    public void testNormalRun() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l) throws IOException {\n                assertEquals(0, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte[] liBytes = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li, ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0, liBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.LEADERINFO, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(ByteBuffer.wrap(qp.getData()).getInt(), 0x10000);\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.NEWLEADER, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(1, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.UPTODATE, qp.getType());\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":826,"status":"M"},{"authorDate":"2019-12-17 20:48:25","commitOrder":4,"curCode":"    public void testTxnTimeout() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l) throws IOException, InterruptedException, org.apache.zookeeper.server.quorum.Leader.XidRolloverException {\n                assertEquals(0, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte[] liBytes = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li, ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0, liBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.LEADERINFO, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(ByteBuffer.wrap(qp.getData()).getInt(), 0x10000);\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.NEWLEADER, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertCurrentEpochGotUpdated(1, l.self, ClientBase.CONNECTION_TIMEOUT);\n\n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.UPTODATE, qp.getType());\n\n                long zxid = l.zk.getZxid();\n                l.propose(new Request(1, 1, ZooDefs.OpCode.create, new TxnHeader(1, 1, zxid, 1, ZooDefs.OpCode.create), new CreateTxn(\"/test\", \"hola\".getBytes(), null, true, 0), zxid));\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.PROPOSAL, qp.getType());\n\n                LOG.info(\"Proposal sent.\");\n\n                for (int i = 0; i < (2 * ZabUtils.SYNC_LIMIT) + 2; i++) {\n                    try {\n                        ia.readRecord(qp, null);\n                        LOG.info(\"Ping received: {}\", i);\n                        qp = new QuorumPacket(Leader.PING, qp.getZxid(), \"\".getBytes(), null);\n                        oa.writeRecord(qp, null);\n                    } catch (EOFException e) {\n                        return;\n                    }\n                }\n                fail(\"Connection hasn't been closed by leader after transaction times out.\");\n            }\n        });\n    }\n","date":"2019-12-17 20:48:25","endLine":926,"groupId":"10181","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTxnTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/9f/8486e3dcfa418adf61d66ae72e2ec2408297b2.src","preCode":"    public void testTxnTimeout() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l) throws IOException, InterruptedException, org.apache.zookeeper.server.quorum.Leader.XidRolloverException {\n                assertEquals(0, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte[] liBytes = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li, ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0, liBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.LEADERINFO, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(ByteBuffer.wrap(qp.getData()).getInt(), 0x10000);\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(0, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.DIFF, qp.getType());\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.NEWLEADER, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(1, l.self.getCurrentEpoch());\n\n                qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.UPTODATE, qp.getType());\n\n                long zxid = l.zk.getZxid();\n                l.propose(new Request(1, 1, ZooDefs.OpCode.create, new TxnHeader(1, 1, zxid, 1, ZooDefs.OpCode.create), new CreateTxn(\"/test\", \"hola\".getBytes(), null, true, 0), zxid));\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.PROPOSAL, qp.getType());\n\n                LOG.info(\"Proposal sent.\");\n\n                for (int i = 0; i < (2 * ZabUtils.SYNC_LIMIT) + 2; i++) {\n                    try {\n                        ia.readRecord(qp, null);\n                        LOG.info(\"Ping received: {}\", i);\n                        qp = new QuorumPacket(Leader.PING, qp.getZxid(), \"\".getBytes(), null);\n                        oa.writeRecord(qp, null);\n                    } catch (EOFException e) {\n                        return;\n                    }\n                }\n                fail(\"Connection hasn't been closed by leader after transaction times out.\");\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":868,"status":"M"}],"commitId":"19d85670a3c87565bc63a5f84169e4c6c72e2915","commitMessage":"@@@ZOOKEEPER-2307: ZooKeeper not starting because acceptedEpoch is less than the currentEpoch\n\nUpdate acceptedEpoch and currentEpoch in file first then in memory.\n\nAuthor: Mohammad Arshad <arshad@apache.org>\n\nReviewers: andor@apache.org\n\nCloses #1145 from arshadmohammad/ZOOKEEPER-2307-epochUpdate and squashes the following commits:\n\nb05bc1f1c [Mohammad Arshad] review comment fix\nc8d620f39 [Mohammad Arshad] ZOOKEEPER-2307:ZooKeeper not starting because acceptedEpoch is less than the currentEpoch\n","date":"2019-12-17 20:48:25","modifiedFileCount":"2","status":"M","submitter":"Mohammad Arshad"}]
