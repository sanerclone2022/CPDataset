[{"authorTime":"2019-06-06 06:01:42","codes":[{"authorDate":"2019-06-06 06:01:42","commitOrder":2,"curCode":"    public void testDeleteRecursive()\n        throws IOException, InterruptedException, KeeperException\n    {\n        final ZooKeeper zk = createClient();\n        setupDataTree(zk);\n\n        Assert.assertTrue(ZKUtil.deleteRecursive(zk, \"/a/c\", 1000));\n        List<String> children = zk.getChildren(\"/a\", false);\n        Assert.assertEquals(\"1 children - c should be deleted \", 1, children.size());\n        Assert.assertTrue(children.contains(\"b\"));\n\n        Assert.assertTrue(ZKUtil.deleteRecursive(zk, \"/a\", 1000));\n        Assert.assertNull(zk.exists(\"/a\", null));\n    }\n","date":"2019-06-06 06:01:42","endLine":68,"groupId":"2253","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteRecursive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3c/85409d54c4bfeed7df46e3a9a4920b007ed533.src","preCode":"    public void testDeleteRecursive()\n        throws IOException, InterruptedException, KeeperException\n    {\n        final ZooKeeper zk = createClient();\n        setupDataTree(zk);\n\n        Assert.assertTrue(ZKUtil.deleteRecursive(zk, \"/a/c\", 1000));\n        List<String> children = zk.getChildren(\"/a\", false);\n        Assert.assertEquals(\"1 children - c should be deleted \", 1, children.size());\n        Assert.assertTrue(children.contains(\"b\"));\n\n        Assert.assertTrue(ZKUtil.deleteRecursive(zk, \"/a\", 1000));\n        Assert.assertNull(zk.exists(\"/a\", null));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"MB"},{"authorDate":"2019-06-06 06:01:42","commitOrder":2,"curCode":"    public void testDeleteRecursiveFail()\n            throws IOException, InterruptedException, KeeperException\n    {\n        final ZooKeeper zk = createClient();\n        setupDataTree(zk);\n\n        ACL deleteProtection = new ACL(ZooDefs.Perms.DELETE,\n                new Id(\"digest\", \"user:tl+z3z0vO6PfPfEENfLF96E6pM0=\"));\n        List<ACL> acls = Arrays.asList(\n                new ACL(ZooDefs.Perms.READ, Ids.ANYONE_ID_UNSAFE),\n                deleteProtection\n        );\n\n        \r\n        zk.create(\"/a/c/0/surprise\", \"\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        Assert.assertEquals(1, zk.getACL(\"/a/c/0\", new Stat()).size());\n        zk.setACL(\"/a/c/0\", acls, -1);\n        Assert.assertEquals(2, zk.getACL(\"/a/c/0\", new Stat()).size());\n\n        Assert.assertFalse(ZKUtil.deleteRecursive(zk, \"/a/c\", 1000));\n        List<String> children = zk.getChildren(\"/a\", false);\n        Assert.assertEquals(\"2 children - c should fail to be deleted \", 2, children.size());\n        Assert.assertTrue(children.contains(\"b\"));\n\n        Assert.assertTrue(ZKUtil.deleteRecursive(zk, \"/a/b\", 1000));\n        children = zk.getChildren(\"/a\", false);\n        Assert.assertEquals(\"1 children - b should be deleted \", 1, children.size());\n\n        \r\n        zk.addAuthInfo(deleteProtection.getId().getScheme(), \"user:test\".getBytes());\n\n        Assert.assertTrue(ZKUtil.deleteRecursive(zk, \"/a\", 1000));\n        Assert.assertNull(zk.exists(\"/a\", null));\n    }\n","date":"2019-06-06 06:01:42","endLine":104,"groupId":"2253","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteRecursiveFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3c/85409d54c4bfeed7df46e3a9a4920b007ed533.src","preCode":"    public void testDeleteRecursiveFail()\n            throws IOException, InterruptedException, KeeperException\n    {\n        final ZooKeeper zk = createClient();\n        setupDataTree(zk);\n\n        ACL deleteProtection = new ACL(ZooDefs.Perms.DELETE,\n                new Id(\"digest\", \"user:tl+z3z0vO6PfPfEENfLF96E6pM0=\"));\n        List<ACL> acls = Arrays.asList(\n                new ACL(ZooDefs.Perms.READ, Ids.ANYONE_ID_UNSAFE),\n                deleteProtection\n        );\n\n        \r\n        zk.create(\"/a/c/0/surprise\", \"\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        Assert.assertEquals(1, zk.getACL(\"/a/c/0\", new Stat()).size());\n        zk.setACL(\"/a/c/0\", acls, -1);\n        Assert.assertEquals(2, zk.getACL(\"/a/c/0\", new Stat()).size());\n\n        Assert.assertFalse(ZKUtil.deleteRecursive(zk, \"/a/c\", 1000));\n        List<String> children = zk.getChildren(\"/a\", false);\n        Assert.assertEquals(\"2 children - c should fail to be deleted \", 2, children.size());\n        Assert.assertTrue(children.contains(\"b\"));\n\n        Assert.assertTrue(ZKUtil.deleteRecursive(zk, \"/a/b\", 1000));\n        children = zk.getChildren(\"/a\", false);\n        Assert.assertEquals(\"1 children - b should be deleted \", 1, children.size());\n\n        \r\n        zk.addAuthInfo(deleteProtection.getId().getScheme(), \"user:test\".getBytes());\n\n        Assert.assertTrue(ZKUtil.deleteRecursive(zk, \"/a\", 1000));\n        Assert.assertNull(zk.exists(\"/a\", null));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"}],"commitId":"39c40bea3a04cda70a6f9e8caad64b26d4d046e6","commitMessage":"@@@ZOOKEEPER-3354: Improve efficiency of DeleteAllCommand\n\nAuthor: Brian Nixon <nixon@fb.com>\n\nReviewers: andor@apache.org.  szepet95@gmail.com.  eolivelli@apache.org\n\nCloses #899 from enixon/delete-all\n","date":"2019-06-06 06:01:42","modifiedFileCount":"3","status":"M","submitter":"Brian Nixon"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testDeleteRecursive() throws IOException, InterruptedException, KeeperException {\n        final ZooKeeper zk = createClient();\n        setupDataTree(zk);\n\n        assertTrue(ZKUtil.deleteRecursive(zk, \"/a/c\", 1000));\n        List<String> children = zk.getChildren(\"/a\", false);\n        assertEquals(\"1 children - c should be deleted \", 1, children.size());\n        assertTrue(children.contains(\"b\"));\n\n        assertTrue(ZKUtil.deleteRecursive(zk, \"/a\", 1000));\n        assertNull(zk.exists(\"/a\", null));\n    }\n","date":"2019-08-17 23:13:15","endLine":74,"groupId":"582","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteRecursive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d1/9f627e069855c66c71e7f1f184e877352d7e0c.src","preCode":"    public void testDeleteRecursive()\n        throws IOException, InterruptedException, KeeperException\n    {\n        final ZooKeeper zk = createClient();\n        setupDataTree(zk);\n\n        Assert.assertTrue(ZKUtil.deleteRecursive(zk, \"/a/c\", 1000));\n        List<String> children = zk.getChildren(\"/a\", false);\n        Assert.assertEquals(\"1 children - c should be deleted \", 1, children.size());\n        Assert.assertTrue(children.contains(\"b\"));\n\n        Assert.assertTrue(ZKUtil.deleteRecursive(zk, \"/a\", 1000));\n        Assert.assertNull(zk.exists(\"/a\", null));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testDeleteRecursiveFail() throws IOException, InterruptedException, KeeperException {\n        final ZooKeeper zk = createClient();\n        setupDataTree(zk);\n\n        ACL deleteProtection = new ACL(ZooDefs.Perms.DELETE, new Id(\"digest\", \"user:tl+z3z0vO6PfPfEENfLF96E6pM0=\"));\n        List<ACL> acls = Arrays.asList(new ACL(ZooDefs.Perms.READ, Ids.ANYONE_ID_UNSAFE), deleteProtection);\n\n        \r\n        zk.create(\"/a/c/0/surprise\", \"\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        assertEquals(1, zk.getACL(\"/a/c/0\", new Stat()).size());\n        zk.setACL(\"/a/c/0\", acls, -1);\n        assertEquals(2, zk.getACL(\"/a/c/0\", new Stat()).size());\n\n        assertFalse(ZKUtil.deleteRecursive(zk, \"/a/c\", 1000));\n        List<String> children = zk.getChildren(\"/a\", false);\n        assertEquals(\"2 children - c should fail to be deleted \", 2, children.size());\n        assertTrue(children.contains(\"b\"));\n\n        assertTrue(ZKUtil.deleteRecursive(zk, \"/a/b\", 1000));\n        children = zk.getChildren(\"/a\", false);\n        assertEquals(\"1 children - b should be deleted \", 1, children.size());\n\n        \r\n        zk.addAuthInfo(deleteProtection.getId().getScheme(), \"user:test\".getBytes());\n\n        assertTrue(ZKUtil.deleteRecursive(zk, \"/a\", 1000));\n        assertNull(zk.exists(\"/a\", null));\n    }\n","date":"2019-08-17 23:13:15","endLine":104,"groupId":"439","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteRecursiveFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d1/9f627e069855c66c71e7f1f184e877352d7e0c.src","preCode":"    public void testDeleteRecursiveFail()\n            throws IOException, InterruptedException, KeeperException\n    {\n        final ZooKeeper zk = createClient();\n        setupDataTree(zk);\n\n        ACL deleteProtection = new ACL(ZooDefs.Perms.DELETE,\n                new Id(\"digest\", \"user:tl+z3z0vO6PfPfEENfLF96E6pM0=\"));\n        List<ACL> acls = Arrays.asList(\n                new ACL(ZooDefs.Perms.READ, Ids.ANYONE_ID_UNSAFE),\n                deleteProtection\n        );\n\n        \r\n        zk.create(\"/a/c/0/surprise\", \"\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        Assert.assertEquals(1, zk.getACL(\"/a/c/0\", new Stat()).size());\n        zk.setACL(\"/a/c/0\", acls, -1);\n        Assert.assertEquals(2, zk.getACL(\"/a/c/0\", new Stat()).size());\n\n        Assert.assertFalse(ZKUtil.deleteRecursive(zk, \"/a/c\", 1000));\n        List<String> children = zk.getChildren(\"/a\", false);\n        Assert.assertEquals(\"2 children - c should fail to be deleted \", 2, children.size());\n        Assert.assertTrue(children.contains(\"b\"));\n\n        Assert.assertTrue(ZKUtil.deleteRecursive(zk, \"/a/b\", 1000));\n        children = zk.getChildren(\"/a\", false);\n        Assert.assertEquals(\"1 children - b should be deleted \", 1, children.size());\n\n        \r\n        zk.addAuthInfo(deleteProtection.getId().getScheme(), \"user:test\".getBytes());\n\n        Assert.assertTrue(ZKUtil.deleteRecursive(zk, \"/a\", 1000));\n        Assert.assertNull(zk.exists(\"/a\", null));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testDeleteRecursive() throws IOException, InterruptedException, KeeperException {\n        final ZooKeeper zk = createClient();\n        setupDataTree(zk);\n\n        assertTrue(ZKUtil.deleteRecursive(zk, \"/a/c\", 1000));\n        List<String> children = zk.getChildren(\"/a\", false);\n        assertEquals(1, children.size(), \"1 children - c should be deleted \");\n        assertTrue(children.contains(\"b\"));\n\n        assertTrue(ZKUtil.deleteRecursive(zk, \"/a\", 1000));\n        assertNull(zk.exists(\"/a\", null));\n    }\n","date":"2020-08-04 21:01:52","endLine":74,"groupId":"10331","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteRecursive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/70/74896bcffb7d251e264f265e231f1e21560870.src","preCode":"    public void testDeleteRecursive() throws IOException, InterruptedException, KeeperException {\n        final ZooKeeper zk = createClient();\n        setupDataTree(zk);\n\n        assertTrue(ZKUtil.deleteRecursive(zk, \"/a/c\", 1000));\n        List<String> children = zk.getChildren(\"/a\", false);\n        assertEquals(\"1 children - c should be deleted \", 1, children.size());\n        assertTrue(children.contains(\"b\"));\n\n        assertTrue(ZKUtil.deleteRecursive(zk, \"/a\", 1000));\n        assertNull(zk.exists(\"/a\", null));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testDeleteRecursiveFail() throws IOException, InterruptedException, KeeperException {\n        final ZooKeeper zk = createClient();\n        setupDataTree(zk);\n\n        ACL deleteProtection = new ACL(ZooDefs.Perms.DELETE, new Id(\"digest\", \"user:tl+z3z0vO6PfPfEENfLF96E6pM0=\"));\n        List<ACL> acls = Arrays.asList(new ACL(ZooDefs.Perms.READ, Ids.ANYONE_ID_UNSAFE), deleteProtection);\n\n        \r\n        zk.create(\"/a/c/0/surprise\", \"\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        assertEquals(1, zk.getACL(\"/a/c/0\", new Stat()).size());\n        zk.setACL(\"/a/c/0\", acls, -1);\n        assertEquals(2, zk.getACL(\"/a/c/0\", new Stat()).size());\n\n        assertFalse(ZKUtil.deleteRecursive(zk, \"/a/c\", 1000));\n        List<String> children = zk.getChildren(\"/a\", false);\n        assertEquals(2, children.size(), \"2 children - c should fail to be deleted \");\n        assertTrue(children.contains(\"b\"));\n\n        assertTrue(ZKUtil.deleteRecursive(zk, \"/a/b\", 1000));\n        children = zk.getChildren(\"/a\", false);\n        assertEquals(1, children.size(), \"1 children - b should be deleted \");\n\n        \r\n        zk.addAuthInfo(deleteProtection.getId().getScheme(), \"user:test\".getBytes());\n\n        assertTrue(ZKUtil.deleteRecursive(zk, \"/a\", 1000));\n        assertNull(zk.exists(\"/a\", null));\n    }\n","date":"2020-08-04 21:01:52","endLine":104,"groupId":"10331","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteRecursiveFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/70/74896bcffb7d251e264f265e231f1e21560870.src","preCode":"    public void testDeleteRecursiveFail() throws IOException, InterruptedException, KeeperException {\n        final ZooKeeper zk = createClient();\n        setupDataTree(zk);\n\n        ACL deleteProtection = new ACL(ZooDefs.Perms.DELETE, new Id(\"digest\", \"user:tl+z3z0vO6PfPfEENfLF96E6pM0=\"));\n        List<ACL> acls = Arrays.asList(new ACL(ZooDefs.Perms.READ, Ids.ANYONE_ID_UNSAFE), deleteProtection);\n\n        \r\n        zk.create(\"/a/c/0/surprise\", \"\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        assertEquals(1, zk.getACL(\"/a/c/0\", new Stat()).size());\n        zk.setACL(\"/a/c/0\", acls, -1);\n        assertEquals(2, zk.getACL(\"/a/c/0\", new Stat()).size());\n\n        assertFalse(ZKUtil.deleteRecursive(zk, \"/a/c\", 1000));\n        List<String> children = zk.getChildren(\"/a\", false);\n        assertEquals(\"2 children - c should fail to be deleted \", 2, children.size());\n        assertTrue(children.contains(\"b\"));\n\n        assertTrue(ZKUtil.deleteRecursive(zk, \"/a/b\", 1000));\n        children = zk.getChildren(\"/a\", false);\n        assertEquals(\"1 children - b should be deleted \", 1, children.size());\n\n        \r\n        zk.addAuthInfo(deleteProtection.getId().getScheme(), \"user:test\".getBytes());\n\n        assertTrue(ZKUtil.deleteRecursive(zk, \"/a\", 1000));\n        assertNull(zk.exists(\"/a\", null));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
