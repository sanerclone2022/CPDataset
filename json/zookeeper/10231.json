[{"authorTime":"2019-06-14 15:06:42","codes":[{"authorDate":"2019-06-14 15:06:42","commitOrder":1,"curCode":"    public void testCnxManagerSpinLock() throws Exception {\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if(listener != null){\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: \" + port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        InetSocketAddress otherAddr = peers.get(Long.valueOf(2)).electionAddr;\n        DataOutputStream dout = new DataOutputStream(sc.socket().getOutputStream());\n        dout.writeLong(QuorumCnxManager.PROTOCOL_VERSION);\n        dout.writeLong(2);\n        String addr = otherAddr.getHostString()+ \":\" + otherAddr.getPort();\n        byte[] addr_bytes = addr.getBytes();\n        dout.writeInt(addr_bytes.length);\n        dout.write(addr_bytes);\n        dout.flush();\n        \n\n        ByteBuffer msgBuffer = ByteBuffer.wrap(new byte[4]);\n        msgBuffer.putInt(-20);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Thread.sleep(1000);\n\n        try{\n            \r\n\r\n\r\n\n            for(int i = 0; i < 100; i++){\n                msgBuffer.position(0);\n                sc.write(msgBuffer);\n            }\n            Assert.fail(\"Socket has not been closed\");\n        } catch (Exception e) {\n            LOG.info(\"Socket has been closed as expected\");\n        }\n        peer.shutdown();\n        cnxManager.halt();\n        Assert.assertFalse(cnxManager.listener.isAlive());\n    }\n","date":"2019-06-14 15:06:42","endLine":291,"groupId":"1925","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCnxManagerSpinLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d3/a631b7f5d51de567ae06f679cc3a1ba228aec5.src","preCode":"    public void testCnxManagerSpinLock() throws Exception {\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if(listener != null){\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: \" + port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        InetSocketAddress otherAddr = peers.get(Long.valueOf(2)).electionAddr;\n        DataOutputStream dout = new DataOutputStream(sc.socket().getOutputStream());\n        dout.writeLong(QuorumCnxManager.PROTOCOL_VERSION);\n        dout.writeLong(2);\n        String addr = otherAddr.getHostString()+ \":\" + otherAddr.getPort();\n        byte[] addr_bytes = addr.getBytes();\n        dout.writeInt(addr_bytes.length);\n        dout.write(addr_bytes);\n        dout.flush();\n        \n\n        ByteBuffer msgBuffer = ByteBuffer.wrap(new byte[4]);\n        msgBuffer.putInt(-20);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Thread.sleep(1000);\n\n        try{\n            \r\n\r\n\r\n\n            for(int i = 0; i < 100; i++){\n                msgBuffer.position(0);\n                sc.write(msgBuffer);\n            }\n            Assert.fail(\"Socket has not been closed\");\n        } catch (Exception e) {\n            LOG.info(\"Socket has been closed as expected\");\n        }\n        peer.shutdown();\n        cnxManager.halt();\n        Assert.assertFalse(cnxManager.listener.isAlive());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CnxManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"B"},{"authorDate":"2019-06-14 15:06:42","commitOrder":1,"curCode":"    public void testCnxManagerNPE() throws Exception {\n        \r\n        peers.get(2L).type = LearnerType.OBSERVER;\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1],\n                peerClientPort[1], 3, 1, 1000, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: \" + port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        \r\n\r\n\r\n\n        byte[] msgBytes = new byte[8];\n        ByteBuffer msgBuffer = ByteBuffer.wrap(msgBytes);\n        msgBuffer.putLong(2L);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        msgBuffer = ByteBuffer.wrap(new byte[8]);\n        \r\n        msgBuffer.putInt(4);\n        \r\n        msgBuffer.putInt(5);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Message m = cnxManager.pollRecvQueue(1000, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(m);\n\n        peer.shutdown();\n        cnxManager.halt();\n        Assert.assertFalse(cnxManager.listener.isAlive());\n    }\n","date":"2019-06-14 15:06:42","endLine":345,"groupId":"1927","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCnxManagerNPE","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d3/a631b7f5d51de567ae06f679cc3a1ba228aec5.src","preCode":"    public void testCnxManagerNPE() throws Exception {\n        \r\n        peers.get(2L).type = LearnerType.OBSERVER;\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1],\n                peerClientPort[1], 3, 1, 1000, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: \" + port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        \r\n\r\n\r\n\n        byte[] msgBytes = new byte[8];\n        ByteBuffer msgBuffer = ByteBuffer.wrap(msgBytes);\n        msgBuffer.putLong(2L);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        msgBuffer = ByteBuffer.wrap(new byte[8]);\n        \r\n        msgBuffer.putInt(4);\n        \r\n        msgBuffer.putInt(5);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Message m = cnxManager.pollRecvQueue(1000, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(m);\n\n        peer.shutdown();\n        cnxManager.halt();\n        Assert.assertFalse(cnxManager.listener.isAlive());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CnxManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"B"}],"commitId":"5874a0f355417024ce8ebe03ab2f6eaf5b9a228c","commitMessage":"@@@ZOOKEEPER-3296: Explicitly closing the sslsocket when it failed handshake to prevent issue where peers cannot join quorum\n\nThe quorum connection manager is handling connections sequentially with a default listen backlog queue size 50.  during the network loss.  there are socket read timed out.  which is syncLimit * tickTime.  and almost all the following connect requests in the backlog queue will timed out from the other side before it's being processed.\n\nThose timed out learners will try to connect to a different server.  and leaves the connect requests on server side without sending the close_notify packet. The server is slowly consuming from these queue with syncLimit * tickTime timeout for each of those requests which haven't sent notify_close packet. Any new connect requests will be queued up again when there is spot in the listen backlog queue.  but timed out before the server handles it.  and it can never successfully finish any new connection.  and it failed to join the quorum.\n\nPlease check the Jira for more details.\n\nAuthor: Fangmin Lyu <fangmin@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Andor Moln?r <andor@apache.org>\n\nCloses #843 from lvfangmin/ZOOKEEPER-3296\n","date":"2019-06-14 15:06:42","modifiedFileCount":"2","status":"B","submitter":"Fangmin Lyu"},{"authorTime":"2019-07-12 23:01:44","codes":[{"authorDate":"2019-07-12 23:01:44","commitOrder":2,"curCode":"    public void testCnxManagerSpinLock() throws Exception {\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if(listener != null){\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: \" + port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        InetSocketAddress otherAddr = peers.get(Long.valueOf(2)).electionAddr;\n        DataOutputStream dout = new DataOutputStream(sc.socket().getOutputStream());\n        dout.writeLong(QuorumCnxManager.PROTOCOL_VERSION);\n        dout.writeLong(2);\n        String addr = otherAddr.getHostString()+ \":\" + otherAddr.getPort();\n        byte[] addr_bytes = addr.getBytes();\n        dout.writeInt(addr_bytes.length);\n        dout.write(addr_bytes);\n        dout.flush();\n        \n\n        ByteBuffer msgBuffer = ByteBuffer.wrap(new byte[4]);\n        msgBuffer.putInt(-20);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Thread.sleep(1000);\n\n        try{\n            \r\n\r\n\r\n\n            for(int i = 0; i < 100; i++){\n                msgBuffer.position(0);\n                sc.write(msgBuffer);\n            }\n            Assert.fail(\"Socket has not been closed\");\n        } catch (Exception e) {\n            LOG.info(\"Socket has been closed as expected\");\n        }\n        peer.shutdown();\n        cnxManager.halt();\n        Assert.assertFalse(cnxManager.listener.isAlive());\n    }\n","date":"2019-07-12 23:01:44","endLine":291,"groupId":"1925","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCnxManagerSpinLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/87/8e41b4c008dbbc3d9d613c0d304105411100af.src","preCode":"    public void testCnxManagerSpinLock() throws Exception {\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if(listener != null){\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: \" + port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        InetSocketAddress otherAddr = peers.get(Long.valueOf(2)).electionAddr;\n        DataOutputStream dout = new DataOutputStream(sc.socket().getOutputStream());\n        dout.writeLong(QuorumCnxManager.PROTOCOL_VERSION);\n        dout.writeLong(2);\n        String addr = otherAddr.getHostString()+ \":\" + otherAddr.getPort();\n        byte[] addr_bytes = addr.getBytes();\n        dout.writeInt(addr_bytes.length);\n        dout.write(addr_bytes);\n        dout.flush();\n        \n\n        ByteBuffer msgBuffer = ByteBuffer.wrap(new byte[4]);\n        msgBuffer.putInt(-20);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Thread.sleep(1000);\n\n        try{\n            \r\n\r\n\r\n\n            for(int i = 0; i < 100; i++){\n                msgBuffer.position(0);\n                sc.write(msgBuffer);\n            }\n            Assert.fail(\"Socket has not been closed\");\n        } catch (Exception e) {\n            LOG.info(\"Socket has been closed as expected\");\n        }\n        peer.shutdown();\n        cnxManager.halt();\n        Assert.assertFalse(cnxManager.listener.isAlive());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CnxManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2019-07-12 23:01:44","commitOrder":2,"curCode":"    public void testCnxManagerNPE() throws Exception {\n        \r\n        peers.get(2L).type = LearnerType.OBSERVER;\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1],\n                peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: \" + port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        \r\n\r\n\r\n\n        byte[] msgBytes = new byte[8];\n        ByteBuffer msgBuffer = ByteBuffer.wrap(msgBytes);\n        msgBuffer.putLong(2L);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        msgBuffer = ByteBuffer.wrap(new byte[8]);\n        \r\n        msgBuffer.putInt(4);\n        \r\n        msgBuffer.putInt(5);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Message m = cnxManager.pollRecvQueue(1000, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(m);\n\n        peer.shutdown();\n        cnxManager.halt();\n        Assert.assertFalse(cnxManager.listener.isAlive());\n    }\n","date":"2019-07-12 23:01:44","endLine":345,"groupId":"1927","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCnxManagerNPE","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/87/8e41b4c008dbbc3d9d613c0d304105411100af.src","preCode":"    public void testCnxManagerNPE() throws Exception {\n        \r\n        peers.get(2L).type = LearnerType.OBSERVER;\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1],\n                peerClientPort[1], 3, 1, 1000, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: \" + port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        \r\n\r\n\r\n\n        byte[] msgBytes = new byte[8];\n        ByteBuffer msgBuffer = ByteBuffer.wrap(msgBytes);\n        msgBuffer.putLong(2L);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        msgBuffer = ByteBuffer.wrap(new byte[8]);\n        \r\n        msgBuffer.putInt(4);\n        \r\n        msgBuffer.putInt(5);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Message m = cnxManager.pollRecvQueue(1000, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(m);\n\n        peer.shutdown();\n        cnxManager.halt();\n        Assert.assertFalse(cnxManager.listener.isAlive());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CnxManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"}],"commitId":"43ce772db000721546fcd13dd8523002dfa97741","commitMessage":"@@@ZOOKEEPER-3398: Learner.connectToLeader() may take too long to time-out\n\nAfter leader election happens.  the followers will connect to the leader which is facilitated by the Learner.connectToLeader() method.\n\nLearner.connectToLeader() is relying on the initLimit configuration value to time-out in case the network connection is unreliable. This config may have a high value that could leave the ensemble retrying and waiting in the state of not having quorum for too long. The follower will retry up to 5 times.\n\nThis patch introduces a new configuration directive that will allow Zookeeper to use different time-out value `connectToLeaderLimit` which then could be set to lower value than `initLimit`.\n\nTest plan:\n- ant clean\n- ant test-core-java\n\nNOTE: Lots of whitespace changes.  hope it helps.\n\nAuthor: Vladimir Ivic <vladimir.ivic@me.com>\n\nReviewers: eolivelli@apache.org.  hanm@apache.org.  andor@apache.org\n\nCloses #953 from vladimirivic/ZOOKEEPER-3398 and squashes the following commits:\n\nda4ecd055 [Vladimir Ivic] Removed redundant test.  chaning LearnerTest.connectToLearnerMasterLimitTest() params and assertions\n6c413311c [Vladimir Ivic] Updating the tests with the new timeout parameter\n5a89cbd7e [Vladimir Ivic] Rewriting timeout logic inside Leader.connectToLeader\n99c065616 [Vladimir Ivic] Adding config connectToLearnerMasterLimit to prevent long connect timeout\n","date":"2019-07-12 23:01:44","modifiedFileCount":"23","status":"M","submitter":"Vladimir Ivic"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testCnxManagerSpinLock() throws Exception {\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: \" + port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        InetSocketAddress otherAddr = peers.get(Long.valueOf(2)).electionAddr;\n        DataOutputStream dout = new DataOutputStream(sc.socket().getOutputStream());\n        dout.writeLong(QuorumCnxManager.PROTOCOL_VERSION);\n        dout.writeLong(2);\n        String addr = otherAddr.getHostString() + \":\" + otherAddr.getPort();\n        byte[] addr_bytes = addr.getBytes();\n        dout.writeInt(addr_bytes.length);\n        dout.write(addr_bytes);\n        dout.flush();\n\n        ByteBuffer msgBuffer = ByteBuffer.wrap(new byte[4]);\n        msgBuffer.putInt(-20);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Thread.sleep(1000);\n\n        try {\n            \r\n\r\n\r\n\n            for (int i = 0; i < 100; i++) {\n                msgBuffer.position(0);\n                sc.write(msgBuffer);\n            }\n            fail(\"Socket has not been closed\");\n        } catch (Exception e) {\n            LOG.info(\"Socket has been closed as expected\");\n        }\n        peer.shutdown();\n        cnxManager.halt();\n        assertFalse(cnxManager.listener.isAlive());\n    }\n","date":"2019-08-17 23:13:15","endLine":289,"groupId":"1925","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCnxManagerSpinLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/01/3ca53f8fc3867874c84b4b50ace8e197c9fa2d.src","preCode":"    public void testCnxManagerSpinLock() throws Exception {\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if(listener != null){\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: \" + port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        InetSocketAddress otherAddr = peers.get(Long.valueOf(2)).electionAddr;\n        DataOutputStream dout = new DataOutputStream(sc.socket().getOutputStream());\n        dout.writeLong(QuorumCnxManager.PROTOCOL_VERSION);\n        dout.writeLong(2);\n        String addr = otherAddr.getHostString()+ \":\" + otherAddr.getPort();\n        byte[] addr_bytes = addr.getBytes();\n        dout.writeInt(addr_bytes.length);\n        dout.write(addr_bytes);\n        dout.flush();\n        \n\n        ByteBuffer msgBuffer = ByteBuffer.wrap(new byte[4]);\n        msgBuffer.putInt(-20);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Thread.sleep(1000);\n\n        try{\n            \r\n\r\n\r\n\n            for(int i = 0; i < 100; i++){\n                msgBuffer.position(0);\n                sc.write(msgBuffer);\n            }\n            Assert.fail(\"Socket has not been closed\");\n        } catch (Exception e) {\n            LOG.info(\"Socket has been closed as expected\");\n        }\n        peer.shutdown();\n        cnxManager.halt();\n        Assert.assertFalse(cnxManager.listener.isAlive());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CnxManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testCnxManagerNPE() throws Exception {\n        \r\n        peers.get(2L).type = LearnerType.OBSERVER;\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: \" + port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        \r\n\r\n\r\n\n        byte[] msgBytes = new byte[8];\n        ByteBuffer msgBuffer = ByteBuffer.wrap(msgBytes);\n        msgBuffer.putLong(2L);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        msgBuffer = ByteBuffer.wrap(new byte[8]);\n        \r\n        msgBuffer.putInt(4);\n        \r\n        msgBuffer.putInt(5);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Message m = cnxManager.pollRecvQueue(1000, TimeUnit.MILLISECONDS);\n        assertNotNull(m);\n\n        peer.shutdown();\n        cnxManager.halt();\n        assertFalse(cnxManager.listener.isAlive());\n    }\n","date":"2019-08-17 23:13:15","endLine":370,"groupId":"1927","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCnxManagerNPE","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/01/3ca53f8fc3867874c84b4b50ace8e197c9fa2d.src","preCode":"    public void testCnxManagerNPE() throws Exception {\n        \r\n        peers.get(2L).type = LearnerType.OBSERVER;\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1],\n                peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: \" + port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        \r\n\r\n\r\n\n        byte[] msgBytes = new byte[8];\n        ByteBuffer msgBuffer = ByteBuffer.wrap(msgBytes);\n        msgBuffer.putLong(2L);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        msgBuffer = ByteBuffer.wrap(new byte[8]);\n        \r\n        msgBuffer.putInt(4);\n        \r\n        msgBuffer.putInt(5);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Message m = cnxManager.pollRecvQueue(1000, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(m);\n\n        peer.shutdown();\n        cnxManager.halt();\n        Assert.assertFalse(cnxManager.listener.isAlive());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CnxManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2019-10-10 20:37:45","commitOrder":4,"curCode":"    public void testCnxManagerSpinLock() throws Exception {\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: {}\", port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        InetSocketAddress otherAddr = peers.get(2L).electionAddr;\n        DataOutputStream dout = new DataOutputStream(sc.socket().getOutputStream());\n        dout.writeLong(QuorumCnxManager.PROTOCOL_VERSION);\n        dout.writeLong(2);\n        String addr = otherAddr.getHostString() + \":\" + otherAddr.getPort();\n        byte[] addr_bytes = addr.getBytes();\n        dout.writeInt(addr_bytes.length);\n        dout.write(addr_bytes);\n        dout.flush();\n\n        ByteBuffer msgBuffer = ByteBuffer.wrap(new byte[4]);\n        msgBuffer.putInt(-20);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Thread.sleep(1000);\n\n        try {\n            \r\n\r\n\r\n\n            for (int i = 0; i < 100; i++) {\n                msgBuffer.position(0);\n                sc.write(msgBuffer);\n            }\n            fail(\"Socket has not been closed\");\n        } catch (Exception e) {\n            LOG.info(\"Socket has been closed as expected\");\n        }\n        peer.shutdown();\n        cnxManager.halt();\n        assertFalse(cnxManager.listener.isAlive());\n    }\n","date":"2019-10-10 20:37:45","endLine":289,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCnxManagerSpinLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/38/f9eca598fe50f861133b4a86c5a0ba6504c27f.src","preCode":"    public void testCnxManagerSpinLock() throws Exception {\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: \" + port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        InetSocketAddress otherAddr = peers.get(Long.valueOf(2)).electionAddr;\n        DataOutputStream dout = new DataOutputStream(sc.socket().getOutputStream());\n        dout.writeLong(QuorumCnxManager.PROTOCOL_VERSION);\n        dout.writeLong(2);\n        String addr = otherAddr.getHostString() + \":\" + otherAddr.getPort();\n        byte[] addr_bytes = addr.getBytes();\n        dout.writeInt(addr_bytes.length);\n        dout.write(addr_bytes);\n        dout.flush();\n\n        ByteBuffer msgBuffer = ByteBuffer.wrap(new byte[4]);\n        msgBuffer.putInt(-20);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Thread.sleep(1000);\n\n        try {\n            \r\n\r\n\r\n\n            for (int i = 0; i < 100; i++) {\n                msgBuffer.position(0);\n                sc.write(msgBuffer);\n            }\n            fail(\"Socket has not been closed\");\n        } catch (Exception e) {\n            LOG.info(\"Socket has been closed as expected\");\n        }\n        peer.shutdown();\n        cnxManager.halt();\n        assertFalse(cnxManager.listener.isAlive());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CnxManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"},{"authorDate":"2019-10-10 20:37:45","commitOrder":4,"curCode":"    public void testCnxManagerNPE() throws Exception {\n        \r\n        peers.get(2L).type = LearnerType.OBSERVER;\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: {}\", port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        \r\n\r\n\r\n\n        byte[] msgBytes = new byte[8];\n        ByteBuffer msgBuffer = ByteBuffer.wrap(msgBytes);\n        msgBuffer.putLong(2L);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        msgBuffer = ByteBuffer.wrap(new byte[8]);\n        \r\n        msgBuffer.putInt(4);\n        \r\n        msgBuffer.putInt(5);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Message m = cnxManager.pollRecvQueue(1000, TimeUnit.MILLISECONDS);\n        assertNotNull(m);\n\n        peer.shutdown();\n        cnxManager.halt();\n        assertFalse(cnxManager.listener.isAlive());\n    }\n","date":"2019-10-10 20:37:45","endLine":370,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCnxManagerNPE","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/38/f9eca598fe50f861133b4a86c5a0ba6504c27f.src","preCode":"    public void testCnxManagerNPE() throws Exception {\n        \r\n        peers.get(2L).type = LearnerType.OBSERVER;\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: \" + port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        \r\n\r\n\r\n\n        byte[] msgBytes = new byte[8];\n        ByteBuffer msgBuffer = ByteBuffer.wrap(msgBytes);\n        msgBuffer.putLong(2L);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        msgBuffer = ByteBuffer.wrap(new byte[8]);\n        \r\n        msgBuffer.putInt(4);\n        \r\n        msgBuffer.putInt(5);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Message m = cnxManager.pollRecvQueue(1000, TimeUnit.MILLISECONDS);\n        assertNotNull(m);\n\n        peer.shutdown();\n        cnxManager.halt();\n        assertFalse(cnxManager.listener.isAlive());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CnxManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"},{"authorTime":"2019-11-29 21:49:13","codes":[{"authorDate":"2019-11-29 21:49:13","commitOrder":5,"curCode":"    public void testCnxManagerSpinLock() throws Exception {\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n\n        InetSocketAddress address = peers.get(peer.getId()).electionAddr.getReachableOrOne();\n        LOG.info(\"Election port: {}\", address.getPort());\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(address, 5000);\n\n        InetSocketAddress otherAddr = peers.get(2L).electionAddr.getReachableOrOne();\n        DataOutputStream dout = new DataOutputStream(sc.socket().getOutputStream());\n        dout.writeLong(QuorumCnxManager.PROTOCOL_VERSION);\n        dout.writeLong(2);\n        String addr = otherAddr.getHostString() + \":\" + otherAddr.getPort();\n        byte[] addr_bytes = addr.getBytes();\n        dout.writeInt(addr_bytes.length);\n        dout.write(addr_bytes);\n        dout.flush();\n\n        ByteBuffer msgBuffer = ByteBuffer.wrap(new byte[4]);\n        msgBuffer.putInt(-20);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Thread.sleep(1000);\n\n        try {\n            \r\n\r\n\r\n\n            for (int i = 0; i < 100; i++) {\n                msgBuffer.position(0);\n                sc.write(msgBuffer);\n            }\n            fail(\"Socket has not been closed\");\n        } catch (Exception e) {\n            LOG.info(\"Socket has been closed as expected\");\n        }\n        peer.shutdown();\n        cnxManager.halt();\n        assertFalse(cnxManager.listener.isAlive());\n    }\n","date":"2019-11-29 21:49:13","endLine":295,"groupId":"3122","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCnxManagerSpinLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/37/1fc390e3dd6d3a17fe1bdef5750332bcb1f1a2.src","preCode":"    public void testCnxManagerSpinLock() throws Exception {\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: {}\", port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        InetSocketAddress otherAddr = peers.get(2L).electionAddr;\n        DataOutputStream dout = new DataOutputStream(sc.socket().getOutputStream());\n        dout.writeLong(QuorumCnxManager.PROTOCOL_VERSION);\n        dout.writeLong(2);\n        String addr = otherAddr.getHostString() + \":\" + otherAddr.getPort();\n        byte[] addr_bytes = addr.getBytes();\n        dout.writeInt(addr_bytes.length);\n        dout.write(addr_bytes);\n        dout.flush();\n\n        ByteBuffer msgBuffer = ByteBuffer.wrap(new byte[4]);\n        msgBuffer.putInt(-20);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Thread.sleep(1000);\n\n        try {\n            \r\n\r\n\r\n\n            for (int i = 0; i < 100; i++) {\n                msgBuffer.position(0);\n                sc.write(msgBuffer);\n            }\n            fail(\"Socket has not been closed\");\n        } catch (Exception e) {\n            LOG.info(\"Socket has been closed as expected\");\n        }\n        peer.shutdown();\n        cnxManager.halt();\n        assertFalse(cnxManager.listener.isAlive());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CnxManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2019-11-29 21:49:13","commitOrder":5,"curCode":"    public void testCnxManagerNPE() throws Exception {\n        \r\n        peers.get(2L).type = LearnerType.OBSERVER;\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n        InetSocketAddress address = peers.get(peer.getId()).electionAddr.getReachableOrOne();\n        LOG.info(\"Election port: {}\", address.getPort());\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(address, 5000);\n\n        \r\n\r\n\r\n\n        byte[] msgBytes = new byte[8];\n        ByteBuffer msgBuffer = ByteBuffer.wrap(msgBytes);\n        msgBuffer.putLong(2L);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        msgBuffer = ByteBuffer.wrap(new byte[8]);\n        \r\n        msgBuffer.putInt(4);\n        \r\n        msgBuffer.putInt(5);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Message m = cnxManager.pollRecvQueue(1000, TimeUnit.MILLISECONDS);\n        assertNotNull(m);\n\n        peer.shutdown();\n        cnxManager.halt();\n        assertFalse(cnxManager.listener.isAlive());\n    }\n","date":"2019-11-29 21:49:13","endLine":376,"groupId":"1927","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCnxManagerNPE","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/37/1fc390e3dd6d3a17fe1bdef5750332bcb1f1a2.src","preCode":"    public void testCnxManagerNPE() throws Exception {\n        \r\n        peers.get(2L).type = LearnerType.OBSERVER;\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n        int port = peers.get(peer.getId()).electionAddr.getPort();\n        LOG.info(\"Election port: {}\", port);\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n\n        \r\n\r\n\r\n\n        byte[] msgBytes = new byte[8];\n        ByteBuffer msgBuffer = ByteBuffer.wrap(msgBytes);\n        msgBuffer.putLong(2L);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        msgBuffer = ByteBuffer.wrap(new byte[8]);\n        \r\n        msgBuffer.putInt(4);\n        \r\n        msgBuffer.putInt(5);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Message m = cnxManager.pollRecvQueue(1000, TimeUnit.MILLISECONDS);\n        assertNotNull(m);\n\n        peer.shutdown();\n        cnxManager.halt();\n        assertFalse(cnxManager.listener.isAlive());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CnxManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"}],"commitId":"815c8f2130b8b43e11abe52b226707f707a93581","commitMessage":"@@@ZOOKEEPER-3188: Improve resilience to network\n\nThis PR is the rebase of the [previous pull request](https://github.com/apache/zookeeper/pull/730).  so all the kudos should go to the original authors...\n\nIn [ZOOKEEPER-3188](https://issues.apache.org/jira/browse/ZOOKEEPER-3188) we add ability to specify several addresses for quorum operations. Also added reconnection attempts if connection to leader lost.\n\nIn this PR I rebased the changes on the current master.  resolving some minor conflicts with:\n- [ZOOKEEPER-3296](https://issues.apache.org/jira/browse/ZOOKEEPER-3296): Explicitly closing the sslsocket when it failed handshake to prevent issue where peers cannot join quorum\n- [ZOOKEEPER-3320](https://issues.apache.org/jira/browse/ZOOKEEPER-3320): Leader election port stop listen when hostname unresolvable for some time\n- [ZOOKEEPER-3385](https://issues.apache.org/jira/browse/ZOOKEEPER-3385): Add admin command to display leader\n- [ZOOKEEPER-3386](https://issues.apache.org/jira/browse/ZOOKEEPER-3386): Add admin command to display voting view\n- [ZOOKEEPER-3398](https://issues.apache.org/jira/browse/ZOOKEEPER-3398): Learner.connectToLeader() may take too long to time-out\n\nI still want to test the feature manually (e.g. using docker containers with multiple virtual networks / interfaces). The steps to the manual test could be recorded in the [google docs](https://docs.google.com/document/d/1iGVwxeHp57qogwfdodCh9b32P2_kOQaJZ2GDo7j36fI/edit?usp=sharing) as well.\n\nAlso I think we could add a few more unit tests where we are using multiple addresses. The current tests are using a single address only.\n\nAlso the Zookeeper documentation needs to be changed (e.g. by a follow-up Jira?) to promote the new feature and the new config format (possibly including also the admin command documentation in relation with [ZOOKEEPER-3386](https://issues.apache.org/jira/browse/ZOOKEEPER-3386) and [ZOOKEEPER-3461](https://issues.apache.org/jira/browse/ZOOKEEPER-3461))\n\nAuthor: Mate Szalay-Beko <szalay.beko.mate@gmail.com>\nAuthor: Mate Szalay-Beko <mszalay@cloudera.com>\n\nReviewers: eolivelli@apache.org.  andor@apache.org\n\nCloses #1048 from symat/ZOOKEEPER-3188 and squashes the following commits:\n\n3c6fc52d7 [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n356882d46 [Mate Szalay-Beko] ZOOKEEPER-3188: document new configuration format for using multiple addresses\n45b6c0fdb [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n4b6bcea48 [Mate Szalay-Beko] ZOOKEEPER-3188: MultiAddress unit tests for Quorum TLS and Kerberos/Digest authentication\n40bc44c23 [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\nf875f5c67 [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n31805e79b [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n0f95678ca [Mate Szalay-Beko] ZOOKEEPER-3188: skip unreachable addresses when Learner connects to Leader\ne232c55da [Mate Szalay-Beko] ZOOKEEPER-3188: fix flaky unit MultiAddress unit test\ne892d8d8e [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n6f2ab755f [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n2eedf2687 [Mate Szalay-Beko] ZOOKEEPER-3188: fix PR commits; handle case when Leader can not bind to port on startup\n483d2fc9c [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\na5d6bcb97 [Mate Szalay-Beko] ZOOKEEPER-3188: support for dynamic reconfig + add more unit tests\ned31d2ce9 [Mate Szalay-Beko] ZOOKEEPER-3188: better shutdown for executors (following PR comments)\n8713a5bbf [Mate Szalay-Beko] ZOOKEEPER-3188: add fixes for PR comments\n05eae83c0 [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\ne823af4b1 [Mate Szalay-Beko] Merge remote-tracking branch 'origin/master' into ZOOKEEPER-3188\nde7bad2a6 [Mate Szalay-Beko] Merge remote-tracking branch 'origin/master' into ZOOKEEPER-3188\nda98a8da6 [Mate Szalay-Beko] ZOOKEEPER-3188: fix JDK-13 warning\n5bd1f4e2c [Mate Szalay-Beko] ZOOKEEPER-3188: supress spotbugs warning\n42a52a688 [Mate Szalay-Beko] ZOOKEEPER-3188: improve based on code review comments\n6c4220a0d [Mate Szalay-Beko] ZOOKEEPER-3188: fix SendWorker.asyncValidateIfSocketIsStillReachable\n5b22432c1 [Mate Szalay-Beko] ZOOKEEPER-3188: fix LeaderElection to work with multiple election addresses\n7bfbe7e5c [Mate Szalay-Beko] ZOOKEEPER-3188: Improve resilience to network\n","date":"2019-11-29 21:49:13","modifiedFileCount":"26","status":"M","submitter":"Mate Szalay-Beko"},{"authorTime":"2019-11-29 21:49:13","codes":[{"authorDate":"2020-02-16 17:25:14","commitOrder":6,"curCode":"    public void testCnxManagerSpinLock() throws Exception {\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n\n        InetSocketAddress address = peers.get(peer.getId()).electionAddr.getReachableOrOne();\n        LOG.info(\"Election port: {}\", address.getPort());\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(address, 5000);\n\n        InetSocketAddress otherAddr = peers.get(2L).electionAddr.getReachableOrOne();\n        DataOutputStream dout = new DataOutputStream(sc.socket().getOutputStream());\n        dout.writeLong(QuorumCnxManager.PROTOCOL_VERSION_V1);\n        dout.writeLong(2);\n        String addr = otherAddr.getHostString() + \":\" + otherAddr.getPort();\n        byte[] addr_bytes = addr.getBytes();\n        dout.writeInt(addr_bytes.length);\n        dout.write(addr_bytes);\n        dout.flush();\n\n        ByteBuffer msgBuffer = ByteBuffer.wrap(new byte[4]);\n        msgBuffer.putInt(-20);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Thread.sleep(1000);\n\n        try {\n            \r\n\r\n\r\n\n            for (int i = 0; i < 100; i++) {\n                msgBuffer.position(0);\n                sc.write(msgBuffer);\n            }\n            fail(\"Socket has not been closed\");\n        } catch (Exception e) {\n            LOG.info(\"Socket has been closed as expected\");\n        }\n        peer.shutdown();\n        cnxManager.halt();\n        assertFalse(cnxManager.listener.isAlive());\n    }\n","date":"2020-02-16 17:25:14","endLine":295,"groupId":"10231","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCnxManagerSpinLock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/26/9b6a881027d4a6f1018ff30039da90fe790788.src","preCode":"    public void testCnxManagerSpinLock() throws Exception {\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n\n        InetSocketAddress address = peers.get(peer.getId()).electionAddr.getReachableOrOne();\n        LOG.info(\"Election port: {}\", address.getPort());\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(address, 5000);\n\n        InetSocketAddress otherAddr = peers.get(2L).electionAddr.getReachableOrOne();\n        DataOutputStream dout = new DataOutputStream(sc.socket().getOutputStream());\n        dout.writeLong(QuorumCnxManager.PROTOCOL_VERSION);\n        dout.writeLong(2);\n        String addr = otherAddr.getHostString() + \":\" + otherAddr.getPort();\n        byte[] addr_bytes = addr.getBytes();\n        dout.writeInt(addr_bytes.length);\n        dout.write(addr_bytes);\n        dout.flush();\n\n        ByteBuffer msgBuffer = ByteBuffer.wrap(new byte[4]);\n        msgBuffer.putInt(-20);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Thread.sleep(1000);\n\n        try {\n            \r\n\r\n\r\n\n            for (int i = 0; i < 100; i++) {\n                msgBuffer.position(0);\n                sc.write(msgBuffer);\n            }\n            fail(\"Socket has not been closed\");\n        } catch (Exception e) {\n            LOG.info(\"Socket has been closed as expected\");\n        }\n        peer.shutdown();\n        cnxManager.halt();\n        assertFalse(cnxManager.listener.isAlive());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CnxManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2019-11-29 21:49:13","commitOrder":6,"curCode":"    public void testCnxManagerNPE() throws Exception {\n        \r\n        peers.get(2L).type = LearnerType.OBSERVER;\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n        InetSocketAddress address = peers.get(peer.getId()).electionAddr.getReachableOrOne();\n        LOG.info(\"Election port: {}\", address.getPort());\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(address, 5000);\n\n        \r\n\r\n\r\n\n        byte[] msgBytes = new byte[8];\n        ByteBuffer msgBuffer = ByteBuffer.wrap(msgBytes);\n        msgBuffer.putLong(2L);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        msgBuffer = ByteBuffer.wrap(new byte[8]);\n        \r\n        msgBuffer.putInt(4);\n        \r\n        msgBuffer.putInt(5);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Message m = cnxManager.pollRecvQueue(1000, TimeUnit.MILLISECONDS);\n        assertNotNull(m);\n\n        peer.shutdown();\n        cnxManager.halt();\n        assertFalse(cnxManager.listener.isAlive());\n    }\n","date":"2019-11-29 21:49:13","endLine":376,"groupId":"10231","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCnxManagerNPE","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/37/1fc390e3dd6d3a17fe1bdef5750332bcb1f1a2.src","preCode":"    public void testCnxManagerNPE() throws Exception {\n        \r\n        peers.get(2L).type = LearnerType.OBSERVER;\n        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2);\n        QuorumCnxManager cnxManager = peer.createCnxnManager();\n        QuorumCnxManager.Listener listener = cnxManager.listener;\n        if (listener != null) {\n            listener.start();\n        } else {\n            LOG.error(\"Null listener when initializing cnx manager\");\n        }\n        InetSocketAddress address = peers.get(peer.getId()).electionAddr.getReachableOrOne();\n        LOG.info(\"Election port: {}\", address.getPort());\n\n        Thread.sleep(1000);\n\n        SocketChannel sc = SocketChannel.open();\n        sc.socket().connect(address, 5000);\n\n        \r\n\r\n\r\n\n        byte[] msgBytes = new byte[8];\n        ByteBuffer msgBuffer = ByteBuffer.wrap(msgBytes);\n        msgBuffer.putLong(2L);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        msgBuffer = ByteBuffer.wrap(new byte[8]);\n        \r\n        msgBuffer.putInt(4);\n        \r\n        msgBuffer.putInt(5);\n        msgBuffer.position(0);\n        sc.write(msgBuffer);\n\n        Message m = cnxManager.pollRecvQueue(1000, TimeUnit.MILLISECONDS);\n        assertNotNull(m);\n\n        peer.shutdown();\n        cnxManager.halt();\n        assertFalse(cnxManager.listener.isAlive());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CnxManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"N"}],"commitId":"3aa922c5737c9ef0879f290181cb281261c965e0","commitMessage":"@@@ZOOKEEPER-3720: Fix rolling upgrade failure (invalid protocol version)\n\nThe multi-address feature introduced in ZOOKEEPER-3188 required\nchanges in the Quorum protocol as we had to send all addresses in\nthe connection initiation message to enable the receiving side to\nchoose a reachable address in case of network failure.\n\nThe new code can handle both the old and the new protocol versions to\navoid 'invalid protocol' error e.g. during rolling restarts. However. \nthe new protocol version still can not be used during rolling upgrade\nif the old servers are not supporting this protocol. In this case the\nold and the new servers would form two distinct partitions until all\nthe servers get upgraded. To support rolling upgrades too.  we want to\ndisable the MultiAddress feature by default and use the old protocol.\n\nIf the user would like enable the MultiAddress feature on a 3.6.0\ncluster.  she/he can do it either by 1) starting the cluster from\nscratch (without rolling upgrade).  or 2) performing a rolling upgrade\nwithout the MultiAddress feature enabled then doing a rolling restart\nwith a new configuration where the MultiAddress feature is enabled.\nDuring the rolling restart there will be no partitions.  as all the\nservers in the cluster now will run ZooKeeper version 3.6.0 which\nunderstands now both protocols.\n\nThe changes in this patch:\n- introducing new config property: multiAddress.enabled.  disabled\nby default\n- updating QuorumCnxManager to be able to use both protocol versions\nand to use the old one if MultiAddress is disabled\n- failing with ConfigException if the user provides multiple\naddresses in the config while having MultiAddress disabled\n- updating the existing MultiAddress related tests to enable the\nfeature first\n- add some new tests\n- update the documentation\n\nTesting:\n- I ran all the unit tests\n- Using https://github.com/symat/zk-rolling-upgrade-test\n  - I tested rolling upgrade from 3.5.6\n  - I tested rolling restart to enable the MultiAddress feature\n- Using https://github.com/symat/zookeeper-docker-test\n  - I tested the MultiAddress feature by disabling some virtual\n    interfaces and waiting for the cluster to recover\n\nAuthor: Mate Szalay-Beko <szalay.beko.mate@gmail.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Norbert Kalmar <nkalmar@apache.org>.  Andor Molnar <andor@apache.org>\n\nCloses #1251 from symat/ZOOKEEPER-3720\n","date":"2020-02-16 17:25:14","modifiedFileCount":"14","status":"M","submitter":"Mate Szalay-Beko"}]
