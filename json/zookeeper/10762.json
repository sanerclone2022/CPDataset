[{"authorTime":"2019-06-26 16:57:46","codes":[{"authorDate":"2019-06-26 16:57:46","commitOrder":14,"curCode":"    public void processRequest(Request request) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Processing request:: \" + request);\n        }\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            \r\n            rc = zks.processTxn(request);\n\n            \r\n            \r\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty()\n                       && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid\n                                 + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            \r\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId) ||\n                    closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency > 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code\n                            .get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"{}\",request);\n            }\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse() ;\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult ;\n\n                    switch (subTxnResult.type) {\n                        case OpCode.check:\n                            subResult = new CheckResult();\n                            break;\n                        case OpCode.create:\n                            subResult = new CreateResult(subTxnResult.path);\n                            break;\n                        case OpCode.create2:\n                        case OpCode.createTTL:\n                        case OpCode.createContainer:\n                            subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                            break;\n                        case OpCode.delete:\n                        case OpCode.deleteContainer:\n                            subResult = new DeleteResult();\n                            break;\n                        case OpCode.setData:\n                            subResult = new SetDataResult(subTxnResult.stat);\n                            break;\n                        case OpCode.error:\n                            subResult = new ErrorResult(subTxnResult.err) ;\n                            if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                                throw new SessionMovedException();\n                            }\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse)rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for(Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch(readOp.getType()) {\n                            case OpCode.getChildren:\n                                rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                                break;\n                            case OpCode.getData:\n                                rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                GetDataResponse gdr = (GetDataResponse) rec;\n                                subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                                break;\n                            default:\n                                throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse)rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(((QuorumZooKeeperServer)zks).self.getQuorumVerifier().toString().getBytes(), rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest\n                        .getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(), cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN,\n                        request.authInfo, path, null);\n\n                Stat stat = new Stat();\n                List<ACL> acl =\n                        zks.getZKDatabase().getACL(path, stat);\n                try {\n                    PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                            ZooDefs.Perms.ADMIN,\n                            request.authInfo, path, null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new\n                        GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n             }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        path, stat, getChildren2Request\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(\n                        path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(\n                        path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p: allEphems) {\n                        if(p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr =\n            new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse)rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\",e);\n        }\n    }\n","date":"2019-06-26 16:57:46","endLine":588,"groupId":"3352","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/81/f1145ba096f9cf61c707f23782c524309564b5.src","preCode":"    public void processRequest(Request request) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Processing request:: \" + request);\n        }\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            \r\n            rc = zks.processTxn(request);\n\n            \r\n            \r\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty()\n                       && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid\n                                 + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            \r\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId) ||\n                    closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency > 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code\n                            .get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"{}\",request);\n            }\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse() ;\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult ;\n\n                    switch (subTxnResult.type) {\n                        case OpCode.check:\n                            subResult = new CheckResult();\n                            break;\n                        case OpCode.create:\n                            subResult = new CreateResult(subTxnResult.path);\n                            break;\n                        case OpCode.create2:\n                        case OpCode.createTTL:\n                        case OpCode.createContainer:\n                            subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                            break;\n                        case OpCode.delete:\n                        case OpCode.deleteContainer:\n                            subResult = new DeleteResult();\n                            break;\n                        case OpCode.setData:\n                            subResult = new SetDataResult(subTxnResult.stat);\n                            break;\n                        case OpCode.error:\n                            subResult = new ErrorResult(subTxnResult.err) ;\n                            if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                                throw new SessionMovedException();\n                            }\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse)rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for(Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch(readOp.getType()) {\n                            case OpCode.getChildren:\n                                rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                                break;\n                            case OpCode.getData:\n                                rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                GetDataResponse gdr = (GetDataResponse) rec;\n                                subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                                break;\n                            default:\n                                throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse)rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(((QuorumZooKeeperServer)zks).self.getQuorumVerifier().toString().getBytes(), rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest\n                        .getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(), cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN,\n                        request.authInfo, path, null);\n\n                Stat stat = new Stat();\n                List<ACL> acl =\n                        zks.getZKDatabase().getACL(path, stat);\n                try {\n                    PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                            ZooDefs.Perms.ADMIN,\n                            request.authInfo, path, null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new\n                        GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n             }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        path, stat, getChildren2Request\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(\n                        path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(\n                        path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p: allEphems) {\n                        if(p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr =\n            new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse)rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\",e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"MB"},{"authorDate":"2019-06-26 16:57:46","commitOrder":14,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        PrepRequestProcessor.checkACL(zks, cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-06-26 16:57:46","endLine":619,"groupId":"222","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/81/f1145ba096f9cf61c707f23782c524309564b5.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        PrepRequestProcessor.checkACL(zks, cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"B"}],"commitId":"1b074d6a8a448e1d3d50383a7d6f2e21d5cf1dfc","commitMessage":"@@@ZOOKEEPER-3402: Add multiRead operation\n\nSo.  the possibility of the multi version of getChildren.  getData.  and a common multiRead interface was already mentioned and briefly discussed in the conversation thread of #922.\nThis patch introduces the concept of multiRead operation.\nNote: This is a 'work-in-progress'.  not every comment is added.  and test cases should be extended as well. Currently.  the aim is to decide whether this direction is something that the community would get behind or should fin.\nI've faced more design decision while implementing this (note: I wanted to keep the backward compatibility at all cost).  the more important ones were the following:\n1. Whether the new read operations should be part of Op or should we create new descendant classes of `Op` like `ReadOp` and `WriteOp`. In this case.  I believe it would be unnecessary to create new classes since it would create a lot of code duplication (despite the common ancestor) and the flow of the processing would not be as clean as in the initial state. However.  by simply adding an OpKind enum to the class enables us to ensure the type-safety behavior (read and write operations should not mix) and still preserve the clean processing flow.\n2. At which point of request processing should we capture the mixed (transaction and read operation) multi requests? It seems pretty clear to catch them client side and not create extra work for the server.\n3. Do we even need a `multiRead` operation or this whole improvement could be just part of multi? Well.  the main problem is the following: currently.  on server side (and in general.  everywhere in ZooKeeper) the fact that multi only contains transactions is a heavily used and built upon it. The whole `multi` processing flow should be rewritten from zero and also the server would get a significant extra work for that. So yeah.  it seems pretty clear to me that introducing the `multiRead` operation is beneficial.\n\nHope these thoughts make sense! Any observations.  questions are welcome!\n\nAuthor: szepet <szepet95@gmail.com>\nAuthor: Peter Szecsi <szepet95@gmail.com>\n\nReviewers: fangmin@apache.org.  andor@apache.org\n\nCloses #959 from szepet/ZOOKEEPER-3402 and squashes the following commits:\n\n2f128ef11 [szepet] rephrase exception\n660351cce [Peter Szecsi] Rename MultiTransactionRecord to MultiOperationRecord\n71a6d2e22 [Peter Szecsi] address some review comments\n3cec54850 [szepet] make sure not to expose the internal representation in GetDataResult\nd4c6764ee [szepet] ZOOKEEPER-3402: Add multiRead operation\n","date":"2019-06-26 16:57:46","modifiedFileCount":"11","status":"M","submitter":"szepet"},{"authorTime":"2019-06-26 16:57:46","codes":[{"authorDate":"2019-07-09 05:26:11","commitOrder":15,"curCode":"    public void processRequest(Request request) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Processing request:: \" + request);\n        }\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            \r\n            rc = zks.processTxn(request);\n\n            \r\n            \r\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty()\n                       && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid\n                                 + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            \r\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId) ||\n                    closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency > 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code\n                            .get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"{}\",request);\n            }\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse() ;\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult ;\n\n                    switch (subTxnResult.type) {\n                        case OpCode.check:\n                            subResult = new CheckResult();\n                            break;\n                        case OpCode.create:\n                            subResult = new CreateResult(subTxnResult.path);\n                            break;\n                        case OpCode.create2:\n                        case OpCode.createTTL:\n                        case OpCode.createContainer:\n                            subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                            break;\n                        case OpCode.delete:\n                        case OpCode.deleteContainer:\n                            subResult = new DeleteResult();\n                            break;\n                        case OpCode.setData:\n                            subResult = new SetDataResult(subTxnResult.stat);\n                            break;\n                        case OpCode.error:\n                            subResult = new ErrorResult(subTxnResult.err) ;\n                            if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                                throw new SessionMovedException();\n                            }\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse)rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for(Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch(readOp.getType()) {\n                            case OpCode.getChildren:\n                                rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                                break;\n                            case OpCode.getData:\n                                rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                GetDataResponse gdr = (GetDataResponse) rec;\n                                subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                                break;\n                            default:\n                                throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse)rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(((QuorumZooKeeperServer)zks).self.getQuorumVerifier().toString().getBytes(), rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest\n                        .getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(), cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN,\n                        request.authInfo, path, null);\n\n                Stat stat = new Stat();\n                List<ACL> acl =\n                        zks.getZKDatabase().getACL(path, stat);\n                try {\n                    PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                            ZooDefs.Perms.ADMIN,\n                            request.authInfo, path, null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new\n                        GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n             }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        path, stat, getChildren2Request\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(\n                        path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(\n                        path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p: allEphems) {\n                        if(p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr =\n            new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse)rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\",e);\n        }\n    }\n","date":"2019-07-09 05:26:11","endLine":593,"groupId":"3352","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/cd/0c0eb6321d65996d725134f6cbefb21c16ab4c.src","preCode":"    public void processRequest(Request request) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Processing request:: \" + request);\n        }\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            \r\n            rc = zks.processTxn(request);\n\n            \r\n            \r\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty()\n                       && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid\n                                 + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            \r\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId) ||\n                    closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency > 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code\n                            .get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"{}\",request);\n            }\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse() ;\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult ;\n\n                    switch (subTxnResult.type) {\n                        case OpCode.check:\n                            subResult = new CheckResult();\n                            break;\n                        case OpCode.create:\n                            subResult = new CreateResult(subTxnResult.path);\n                            break;\n                        case OpCode.create2:\n                        case OpCode.createTTL:\n                        case OpCode.createContainer:\n                            subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                            break;\n                        case OpCode.delete:\n                        case OpCode.deleteContainer:\n                            subResult = new DeleteResult();\n                            break;\n                        case OpCode.setData:\n                            subResult = new SetDataResult(subTxnResult.stat);\n                            break;\n                        case OpCode.error:\n                            subResult = new ErrorResult(subTxnResult.err) ;\n                            if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                                throw new SessionMovedException();\n                            }\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse)rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for(Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch(readOp.getType()) {\n                            case OpCode.getChildren:\n                                rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                                break;\n                            case OpCode.getData:\n                                rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                GetDataResponse gdr = (GetDataResponse) rec;\n                                subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                                break;\n                            default:\n                                throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse)rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(((QuorumZooKeeperServer)zks).self.getQuorumVerifier().toString().getBytes(), rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest\n                        .getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(), cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN,\n                        request.authInfo, path, null);\n\n                Stat stat = new Stat();\n                List<ACL> acl =\n                        zks.getZKDatabase().getACL(path, stat);\n                try {\n                    PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                            ZooDefs.Perms.ADMIN,\n                            request.authInfo, path, null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new\n                        GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n             }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        path, stat, getChildren2Request\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(\n                        path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(\n                        path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p: allEphems) {\n                        if(p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr =\n            new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse)rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\",e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2019-06-26 16:57:46","commitOrder":15,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        PrepRequestProcessor.checkACL(zks, cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-06-26 16:57:46","endLine":619,"groupId":"222","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/81/f1145ba096f9cf61c707f23782c524309564b5.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        PrepRequestProcessor.checkACL(zks, cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"N"}],"commitId":"7b3de52cdb15068aa343879ae283f4e456c68f39","commitMessage":"@@@ZOOKEEPER-3243: Add server-side request throttling\n\nAuthor: Jie Huang <jiehuang@fb.com>\nAuthor: Joseph Blomstedt <jdb@fb.com>\n\nReviewers: Michael Han <hanm@apache.org>\n\nCloses #986 from jhuan31/ZOOKEEPER-3243\n","date":"2019-07-09 05:26:11","modifiedFileCount":"9","status":"M","submitter":"Jie Huang"},{"authorTime":"2019-06-26 16:57:46","codes":[{"authorDate":"2019-08-01 13:28:24","commitOrder":16,"curCode":"    public void processRequest(Request request) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Processing request:: \" + request);\n        }\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            \r\n            rc = zks.processTxn(request);\n\n            \r\n            \r\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty()\n                       && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid\n                                 + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            \r\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId) ||\n                    closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency > 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code\n                            .get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"{}\",request);\n            }\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse() ;\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult ;\n\n                    switch (subTxnResult.type) {\n                        case OpCode.check:\n                            subResult = new CheckResult();\n                            break;\n                        case OpCode.create:\n                            subResult = new CreateResult(subTxnResult.path);\n                            break;\n                        case OpCode.create2:\n                        case OpCode.createTTL:\n                        case OpCode.createContainer:\n                            subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                            break;\n                        case OpCode.delete:\n                        case OpCode.deleteContainer:\n                            subResult = new DeleteResult();\n                            break;\n                        case OpCode.setData:\n                            subResult = new SetDataResult(subTxnResult.stat);\n                            break;\n                        case OpCode.error:\n                            subResult = new ErrorResult(subTxnResult.err) ;\n                            if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                                throw new SessionMovedException();\n                            }\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse)rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for(Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch(readOp.getType()) {\n                            case OpCode.getChildren:\n                                rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                                break;\n                            case OpCode.getData:\n                                rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                GetDataResponse gdr = (GetDataResponse) rec;\n                                subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                                break;\n                            default:\n                                throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse)rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(((QuorumZooKeeperServer)zks).self.getQuorumVerifier().toString().getBytes(), rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest\n                        .getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(), cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN,\n                        request.authInfo, path, null);\n\n                Stat stat = new Stat();\n                List<ACL> acl =\n                        zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                            ZooDefs.Perms.ADMIN,\n                            request.authInfo, path, null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new\n                        GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n             }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        path, stat, getChildren2Request\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(\n                        path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(\n                        path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p: allEphems) {\n                        if(p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr =\n            new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse)rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\",e);\n        }\n    }\n","date":"2019-08-01 13:28:24","endLine":606,"groupId":"2209","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d2/10d70445d4d99a1cb159fff9b59f9dbbefdc24.src","preCode":"    public void processRequest(Request request) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Processing request:: \" + request);\n        }\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            \r\n            rc = zks.processTxn(request);\n\n            \r\n            \r\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty()\n                       && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid\n                                 + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            \r\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId) ||\n                    closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency > 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code\n                            .get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"{}\",request);\n            }\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse() ;\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult ;\n\n                    switch (subTxnResult.type) {\n                        case OpCode.check:\n                            subResult = new CheckResult();\n                            break;\n                        case OpCode.create:\n                            subResult = new CreateResult(subTxnResult.path);\n                            break;\n                        case OpCode.create2:\n                        case OpCode.createTTL:\n                        case OpCode.createContainer:\n                            subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                            break;\n                        case OpCode.delete:\n                        case OpCode.deleteContainer:\n                            subResult = new DeleteResult();\n                            break;\n                        case OpCode.setData:\n                            subResult = new SetDataResult(subTxnResult.stat);\n                            break;\n                        case OpCode.error:\n                            subResult = new ErrorResult(subTxnResult.err) ;\n                            if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                                throw new SessionMovedException();\n                            }\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse)rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for(Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch(readOp.getType()) {\n                            case OpCode.getChildren:\n                                rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                                break;\n                            case OpCode.getData:\n                                rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                GetDataResponse gdr = (GetDataResponse) rec;\n                                subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                                break;\n                            default:\n                                throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse)rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(((QuorumZooKeeperServer)zks).self.getQuorumVerifier().toString().getBytes(), rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest\n                        .getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(), cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN,\n                        request.authInfo, path, null);\n\n                Stat stat = new Stat();\n                List<ACL> acl =\n                        zks.getZKDatabase().getACL(path, stat);\n                try {\n                    PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                            ZooDefs.Perms.ADMIN,\n                            request.authInfo, path, null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new\n                        GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n             }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        path, stat, getChildren2Request\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(\n                        path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(\n                        path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p: allEphems) {\n                        if(p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr =\n            new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse)rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\",e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2019-06-26 16:57:46","commitOrder":16,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        PrepRequestProcessor.checkACL(zks, cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-06-26 16:57:46","endLine":619,"groupId":"222","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/81/f1145ba096f9cf61c707f23782c524309564b5.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        PrepRequestProcessor.checkACL(zks, cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"N"}],"commitId":"6d636025d1c6a10840a27caee9e8933f1dbcbaf0","commitMessage":"@@@ZOOKEEPER-3430: Observability improvement: provide top N read / write path queries.\n\nWe would like to have a better understanding of the type of workloads hit ZK.  and one aspect of such understanding is to be able to answer queries of top N read and top N write request path. Knowing the hot request paths will allow us better optimize for such workloads.  for example.  enabling path specific caching.  or change the path structure (e.g. break a long path to hierarchical paths).\n\nThis commit adds a RequestPathMetricsCollector which will collect path requests stats and answers such queries. There are also a set of new Java system properties that make this collector highly configurable.  including disable it totally (the default option is on.).\n\nThe stats can also be queried through commands.  which I will add in a different pull request once this landed.  since this one is already big.\n\nAuthor: Michael Han <lhan@twitter.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>\n\nCloses #989 from hanm/twitter/065e164bfbbf467a28602da76e9443faacaec1c8\n","date":"2019-08-01 13:28:24","modifiedFileCount":"3","status":"M","submitter":"Michael Han"},{"authorTime":"2019-08-01 13:31:29","codes":[{"authorDate":"2019-08-01 13:31:29","commitOrder":17,"curCode":"    public void processRequest(Request request) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Processing request:: \" + request);\n        }\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            \r\n            rc = zks.processTxn(request);\n\n            \r\n            \r\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty()\n                       && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid\n                                 + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            \r\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId) ||\n                    closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency > 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code\n                            .get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"{}\",request);\n            }\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse() ;\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult ;\n\n                    switch (subTxnResult.type) {\n                        case OpCode.check:\n                            subResult = new CheckResult();\n                            break;\n                        case OpCode.create:\n                            subResult = new CreateResult(subTxnResult.path);\n                            break;\n                        case OpCode.create2:\n                        case OpCode.createTTL:\n                        case OpCode.createContainer:\n                            subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                            break;\n                        case OpCode.delete:\n                        case OpCode.deleteContainer:\n                            subResult = new DeleteResult();\n                            break;\n                        case OpCode.setData:\n                            subResult = new SetDataResult(subTxnResult.stat);\n                            break;\n                        case OpCode.error:\n                            subResult = new ErrorResult(subTxnResult.err) ;\n                            if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                                throw new SessionMovedException();\n                            }\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse)rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for(Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch(readOp.getType()) {\n                            case OpCode.getChildren:\n                                rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                                break;\n                            case OpCode.getData:\n                                rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                GetDataResponse gdr = (GetDataResponse) rec;\n                                subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                                break;\n                            default:\n                                throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse)rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(((QuorumZooKeeperServer)zks).self.getQuorumVerifier().toString().getBytes(), rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest\n                        .getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(), cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN,\n                        request.authInfo, path, null);\n\n                Stat stat = new Stat();\n                List<ACL> acl =\n                        zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                            ZooDefs.Perms.ADMIN,\n                            request.authInfo, path, null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new\n                        GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n             }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        path, stat, getChildren2Request\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(\n                        path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(\n                        path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p: allEphems) {\n                        if(p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr =\n            new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse)rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\",e);\n        }\n    }\n","date":"2019-08-01 13:31:29","endLine":606,"groupId":"2209","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/96/2a2675f787d79c6f6e11fd70400211f4784929.src","preCode":"    public void processRequest(Request request) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Processing request:: \" + request);\n        }\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            \r\n            rc = zks.processTxn(request);\n\n            \r\n            \r\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty()\n                       && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid\n                                 + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            \r\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId) ||\n                    closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency > 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code\n                            .get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"{}\",request);\n            }\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse() ;\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult ;\n\n                    switch (subTxnResult.type) {\n                        case OpCode.check:\n                            subResult = new CheckResult();\n                            break;\n                        case OpCode.create:\n                            subResult = new CreateResult(subTxnResult.path);\n                            break;\n                        case OpCode.create2:\n                        case OpCode.createTTL:\n                        case OpCode.createContainer:\n                            subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                            break;\n                        case OpCode.delete:\n                        case OpCode.deleteContainer:\n                            subResult = new DeleteResult();\n                            break;\n                        case OpCode.setData:\n                            subResult = new SetDataResult(subTxnResult.stat);\n                            break;\n                        case OpCode.error:\n                            subResult = new ErrorResult(subTxnResult.err) ;\n                            if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                                throw new SessionMovedException();\n                            }\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse)rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for(Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch(readOp.getType()) {\n                            case OpCode.getChildren:\n                                rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                                break;\n                            case OpCode.getData:\n                                rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                GetDataResponse gdr = (GetDataResponse) rec;\n                                subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                                break;\n                            default:\n                                throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse)rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(((QuorumZooKeeperServer)zks).self.getQuorumVerifier().toString().getBytes(), rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest\n                        .getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(), cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN,\n                        request.authInfo, path, null);\n\n                Stat stat = new Stat();\n                List<ACL> acl =\n                        zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                            ZooDefs.Perms.ADMIN,\n                            request.authInfo, path, null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new\n                        GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n             }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                PrepRequestProcessor.checkACL(zks, request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        path, stat, getChildren2Request\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(\n                        path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(\n                        path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p: allEphems) {\n                        if(p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr =\n            new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse)rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\",e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2019-08-01 13:31:29","commitOrder":17,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-01 13:31:29","endLine":637,"groupId":"1740","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/96/2a2675f787d79c6f6e11fd70400211f4784929.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        PrepRequestProcessor.checkACL(zks, cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"M"}],"commitId":"b2f5548bd5757edbf1887838a487a90523ed2b52","commitMessage":"@@@ZOOKEEPER-3418: Improve quorum throughput through eager ACL checks of requests on local servers.\n\nServing write requests that change the state of the system requires quorum operations.  and in some cases.  the quorum operations can be avoided if the requests are doomed to fail. ACL check failure is such a case. To optimize for this case.  we elevate the ACL check logic and perform eager ACL check on local server (where the requests are received).  and fail fast.  before sending the requests to leader.\n\nAs with any features.  there is a feature flag that can control this feature on.  or off (default). This feature is also forward compatible in that for new any new Op code (and some existing Op code we did not explicit check against).  they will pass the check and (potentially) fail on leader side.  instead of being prematurely filtered out on local server.\n\nThe end result is better throughput and stability of the quorum for certain workloads.\n\nAuthor: Michael Han <lhan@twitter.com>\n\nReviewers: Andor Molnar <andor@apache.org>.  Enrico Olivelli <eolivelli@apache.org>\n\nCloses #971 from hanm/twitter/5c6bbfac811d29228fd97a4621fd6ba547fed178\n","date":"2019-08-01 13:31:29","modifiedFileCount":"9","status":"M","submitter":"Michael Han"},{"authorTime":"2019-08-01 13:31:29","codes":[{"authorDate":"2019-08-03 14:42:39","commitOrder":18,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            \r\n            rc = zks.processTxn(request);\n\n            \r\n            \r\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty()\n                       && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid\n                                 + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            \r\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId) ||\n                    closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency > 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code\n                            .get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\",request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse() ;\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult ;\n\n                    switch (subTxnResult.type) {\n                        case OpCode.check:\n                            subResult = new CheckResult();\n                            break;\n                        case OpCode.create:\n                            subResult = new CreateResult(subTxnResult.path);\n                            break;\n                        case OpCode.create2:\n                        case OpCode.createTTL:\n                        case OpCode.createContainer:\n                            subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                            break;\n                        case OpCode.delete:\n                        case OpCode.deleteContainer:\n                            subResult = new DeleteResult();\n                            break;\n                        case OpCode.setData:\n                            subResult = new SetDataResult(subTxnResult.stat);\n                            break;\n                        case OpCode.error:\n                            subResult = new ErrorResult(subTxnResult.err) ;\n                            if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                                throw new SessionMovedException();\n                            }\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse)rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for(Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch(readOp.getType()) {\n                            case OpCode.getChildren:\n                                rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                                break;\n                            case OpCode.getData:\n                                rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                GetDataResponse gdr = (GetDataResponse) rec;\n                                subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                                break;\n                            default:\n                                throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse)rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(((QuorumZooKeeperServer)zks).self.getQuorumVerifier().toString().getBytes(), rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest\n                        .getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(), cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN,\n                        request.authInfo, path, null);\n\n                Stat stat = new Stat();\n                List<ACL> acl =\n                        zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                            ZooDefs.Perms.ADMIN,\n                            request.authInfo, path, null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new\n                        GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n             }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        path, stat, getChildren2Request\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(\n                        path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(\n                        path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p: allEphems) {\n                        if(p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr =\n            new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse)rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\",e);\n        }\n    }\n","date":"2019-08-03 14:42:39","endLine":603,"groupId":"2209","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/52/8c4baa1583e9812e7d95ffe413f511d9a0dad9.src","preCode":"    public void processRequest(Request request) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Processing request:: \" + request);\n        }\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            \r\n            rc = zks.processTxn(request);\n\n            \r\n            \r\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty()\n                       && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid\n                                 + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            \r\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId) ||\n                    closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency > 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code\n                            .get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"{}\",request);\n            }\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse() ;\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult ;\n\n                    switch (subTxnResult.type) {\n                        case OpCode.check:\n                            subResult = new CheckResult();\n                            break;\n                        case OpCode.create:\n                            subResult = new CreateResult(subTxnResult.path);\n                            break;\n                        case OpCode.create2:\n                        case OpCode.createTTL:\n                        case OpCode.createContainer:\n                            subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                            break;\n                        case OpCode.delete:\n                        case OpCode.deleteContainer:\n                            subResult = new DeleteResult();\n                            break;\n                        case OpCode.setData:\n                            subResult = new SetDataResult(subTxnResult.stat);\n                            break;\n                        case OpCode.error:\n                            subResult = new ErrorResult(subTxnResult.err) ;\n                            if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                                throw new SessionMovedException();\n                            }\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse)rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for(Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch(readOp.getType()) {\n                            case OpCode.getChildren:\n                                rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                                break;\n                            case OpCode.getData:\n                                rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                GetDataResponse gdr = (GetDataResponse) rec;\n                                subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                                break;\n                            default:\n                                throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse)rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(((QuorumZooKeeperServer)zks).self.getQuorumVerifier().toString().getBytes(), rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest\n                        .getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(), cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN,\n                        request.authInfo, path, null);\n\n                Stat stat = new Stat();\n                List<ACL> acl =\n                        zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                            ZooDefs.Perms.ADMIN,\n                            request.authInfo, path, null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new\n                        GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n             }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        path, stat, getChildren2Request\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(\n                        path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(\n                        path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p: allEphems) {\n                        if(p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr =\n            new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse)rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\",e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2019-08-01 13:31:29","commitOrder":18,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-01 13:31:29","endLine":637,"groupId":"1740","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/96/2a2675f787d79c6f6e11fd70400211f4784929.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"N"}],"commitId":"d84b7a682eb4601005db9fac886079b1a9a4d4b0","commitMessage":"@@@ZOOKEEPER-3339: Improve Debug and Trace Log Statements\n\nAuthor: Beluga Behr <dam6923@gmail.com>\n\nReviewers: andor@apache.org.  nkalmar@apache.org.  maoling@apache.org.  fangmin@apache.org\n\nCloses #878 from belugabehr/ZOOKEEPER-3339\n","date":"2019-08-03 14:42:39","modifiedFileCount":"33","status":"M","submitter":"Beluga Behr"},{"authorTime":"2019-08-01 13:31:29","codes":[{"authorDate":"2019-08-06 23:11:26","commitOrder":19,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            \r\n            rc = zks.processTxn(request);\n\n            \r\n            \r\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty()\n                       && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid\n                                 + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            \r\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId) ||\n                    closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code\n                            .get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\",request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse() ;\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult ;\n\n                    switch (subTxnResult.type) {\n                        case OpCode.check:\n                            subResult = new CheckResult();\n                            break;\n                        case OpCode.create:\n                            subResult = new CreateResult(subTxnResult.path);\n                            break;\n                        case OpCode.create2:\n                        case OpCode.createTTL:\n                        case OpCode.createContainer:\n                            subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                            break;\n                        case OpCode.delete:\n                        case OpCode.deleteContainer:\n                            subResult = new DeleteResult();\n                            break;\n                        case OpCode.setData:\n                            subResult = new SetDataResult(subTxnResult.stat);\n                            break;\n                        case OpCode.error:\n                            subResult = new ErrorResult(subTxnResult.err) ;\n                            if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                                throw new SessionMovedException();\n                            }\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse)rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for(Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch(readOp.getType()) {\n                            case OpCode.getChildren:\n                                rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                                break;\n                            case OpCode.getData:\n                                rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                GetDataResponse gdr = (GetDataResponse) rec;\n                                subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                                break;\n                            default:\n                                throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse)rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(((QuorumZooKeeperServer)zks).self.getQuorumVerifier().toString().getBytes(), rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest\n                        .getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(), cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN,\n                        request.authInfo, path, null);\n\n                Stat stat = new Stat();\n                List<ACL> acl =\n                        zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                            ZooDefs.Perms.ADMIN,\n                            request.authInfo, path, null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new\n                        GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n             }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        path, stat, getChildren2Request\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(\n                        path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(\n                        path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p: allEphems) {\n                        if(p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr =\n            new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse)rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\",e);\n        }\n    }\n","date":"2019-08-06 23:11:26","endLine":603,"groupId":"2209","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3d/393a87fc49e2fe5364bd172a321ea4a378d7eb.src","preCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            \r\n            rc = zks.processTxn(request);\n\n            \r\n            \r\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty()\n                       && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid\n                                 + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            \r\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId) ||\n                    closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency > 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code\n                            .get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\",request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse() ;\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult ;\n\n                    switch (subTxnResult.type) {\n                        case OpCode.check:\n                            subResult = new CheckResult();\n                            break;\n                        case OpCode.create:\n                            subResult = new CreateResult(subTxnResult.path);\n                            break;\n                        case OpCode.create2:\n                        case OpCode.createTTL:\n                        case OpCode.createContainer:\n                            subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                            break;\n                        case OpCode.delete:\n                        case OpCode.deleteContainer:\n                            subResult = new DeleteResult();\n                            break;\n                        case OpCode.setData:\n                            subResult = new SetDataResult(subTxnResult.stat);\n                            break;\n                        case OpCode.error:\n                            subResult = new ErrorResult(subTxnResult.err) ;\n                            if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                                throw new SessionMovedException();\n                            }\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse)rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for(Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch(readOp.getType()) {\n                            case OpCode.getChildren:\n                                rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                                break;\n                            case OpCode.getData:\n                                rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                GetDataResponse gdr = (GetDataResponse) rec;\n                                subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                                break;\n                            default:\n                                throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse)rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(((QuorumZooKeeperServer)zks).self.getQuorumVerifier().toString().getBytes(), rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest\n                        .getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(), cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN,\n                        request.authInfo, path, null);\n\n                Stat stat = new Stat();\n                List<ACL> acl =\n                        zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                            ZooDefs.Perms.ADMIN,\n                            request.authInfo, path, null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new\n                        GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n             }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        path, stat, getChildren2Request\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(\n                        path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(\n                        path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p: allEphems) {\n                        if(p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr =\n            new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse)rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\",e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2019-08-01 13:31:29","commitOrder":19,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-01 13:31:29","endLine":637,"groupId":"1740","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/96/2a2675f787d79c6f6e11fd70400211f4784929.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"N"}],"commitId":"9fa18ab0e1ce07b3cc61e8758e27d393253b81fb","commitMessage":"@@@ZOOKEEPER-3470: fix flaky LearnerMetricsTest\n\nThis PR is about fixing the flaky unit test: `LearnerMetricsTest`.\nThe code changes are:\n- Replacing the `Thread.sleep(200)` with polling the metrics until the assertion succeed or timeout (this seems help in some flaky scenario)\n- Fixing the `ZKTestCase.waitFor` method\n- We are also logging the 0 millisec latency values now on the server side. We calculate these latency values between different hosts (as the difference between the server wall time and the wall time in the request header).  so 0 values are possible. And in case of unittests (where all the hosts are using the same clock) it can happen relatively frequently. This situation also caused some of the flakiness. In the previous implementation the 0 latency values were not counted.  so the assertion on these counters values were failing in the end of the testcase.\n\nAuthor: Mate Szalay-Beko <szalay.beko.mate@gmail.com>\n\nReviewers: eolivelli@apache.org.  andor@apache.org\n\nCloses #1040 from symat/ZOOKEEPER-3470 and squashes the following commits:\n\n65a8b5795 [Mate Szalay-Beko] ZOOKEEPER-3470: implement PR comments\n7fdf78041 [Mate Szalay-Beko] ZOOKEEPER-3470: fix flaky LearnerMetricsTest\n","date":"2019-08-06 23:11:26","modifiedFileCount":"5","status":"M","submitter":"Mate Szalay-Beko"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-06 23:11:26","commitOrder":20,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            \r\n            rc = zks.processTxn(request);\n\n            \r\n            \r\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty()\n                       && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid\n                                 + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            \r\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId) ||\n                    closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code\n                            .get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\",request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse() ;\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult ;\n\n                    switch (subTxnResult.type) {\n                        case OpCode.check:\n                            subResult = new CheckResult();\n                            break;\n                        case OpCode.create:\n                            subResult = new CreateResult(subTxnResult.path);\n                            break;\n                        case OpCode.create2:\n                        case OpCode.createTTL:\n                        case OpCode.createContainer:\n                            subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                            break;\n                        case OpCode.delete:\n                        case OpCode.deleteContainer:\n                            subResult = new DeleteResult();\n                            break;\n                        case OpCode.setData:\n                            subResult = new SetDataResult(subTxnResult.stat);\n                            break;\n                        case OpCode.error:\n                            subResult = new ErrorResult(subTxnResult.err) ;\n                            if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                                throw new SessionMovedException();\n                            }\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse)rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for(Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch(readOp.getType()) {\n                            case OpCode.getChildren:\n                                rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                                break;\n                            case OpCode.getData:\n                                rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                GetDataResponse gdr = (GetDataResponse) rec;\n                                subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                                break;\n                            default:\n                                throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse)rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(((QuorumZooKeeperServer)zks).self.getQuorumVerifier().toString().getBytes(), rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest\n                        .getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(), cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN,\n                        request.authInfo, path, null);\n\n                Stat stat = new Stat();\n                List<ACL> acl =\n                        zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                            ZooDefs.Perms.ADMIN,\n                            request.authInfo, path, null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new\n                        GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n             }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        path, stat, getChildren2Request\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(\n                        path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(\n                        path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p: allEphems) {\n                        if(p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr =\n            new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse)rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\",e);\n        }\n    }\n","date":"2019-08-06 23:11:26","endLine":603,"groupId":"2209","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3d/393a87fc49e2fe5364bd172a321ea4a378d7eb.src","preCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            \r\n            rc = zks.processTxn(request);\n\n            \r\n            \r\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty()\n                       && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid\n                                 + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            \r\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId) ||\n                    closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code\n                            .get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\",request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse() ;\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult ;\n\n                    switch (subTxnResult.type) {\n                        case OpCode.check:\n                            subResult = new CheckResult();\n                            break;\n                        case OpCode.create:\n                            subResult = new CreateResult(subTxnResult.path);\n                            break;\n                        case OpCode.create2:\n                        case OpCode.createTTL:\n                        case OpCode.createContainer:\n                            subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                            break;\n                        case OpCode.delete:\n                        case OpCode.deleteContainer:\n                            subResult = new DeleteResult();\n                            break;\n                        case OpCode.setData:\n                            subResult = new SetDataResult(subTxnResult.stat);\n                            break;\n                        case OpCode.error:\n                            subResult = new ErrorResult(subTxnResult.err) ;\n                            if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                                throw new SessionMovedException();\n                            }\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse)rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for(Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch(readOp.getType()) {\n                            case OpCode.getChildren:\n                                rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                                break;\n                            case OpCode.getData:\n                                rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                                GetDataResponse gdr = (GetDataResponse) rec;\n                                subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                                break;\n                            default:\n                                throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse)rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(((QuorumZooKeeperServer)zks).self.getQuorumVerifier().toString().getBytes(), rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest\n                        .getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(), cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN,\n                        request.authInfo, path, null);\n\n                Stat stat = new Stat();\n                List<ACL> acl =\n                        zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                            ZooDefs.Perms.ADMIN,\n                            request.authInfo, path, null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new\n                        GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n             }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(request.cnxn, zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.READ,\n                        request.authInfo, path, null);\n                List<String> children = zks.getZKDatabase().getChildren(\n                        path, stat, getChildren2Request\n                                .getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(\n                        path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(\n                        path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\",\n                            path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p: allEphems) {\n                        if(p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr =\n            new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse)rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\",e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"N"},{"authorDate":"2019-08-17 23:13:15","commitOrder":20,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-17 23:13:15","endLine":624,"groupId":"1740","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/9cdf1b3c63f51075e868feebab2c2bffee7a3e.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-09-10 10:26:38","commitOrder":21,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n\n        ProcessTxnResult rc = zks.processTxn(request);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId)\n                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","date":"2019-09-10 10:26:38","endLine":571,"groupId":"2209","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fa/ccc3619468436ff3f51dc0ae466ccb7a243300.src","preCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        synchronized (zks.outstandingChanges) {\n            \r\n            rc = zks.processTxn(request);\n\n            \r\n            \r\n            if (request.getHdr() != null) {\n                TxnHeader hdr = request.getHdr();\n                long zxid = hdr.getZxid();\n                while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.peek().zxid <= zxid) {\n                    ChangeRecord cr = zks.outstandingChanges.remove();\n                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);\n                    if (cr.zxid < zxid) {\n                        LOG.warn(\"Zxid outstanding \" + cr.zxid + \" is less than current \" + zxid);\n                    }\n                    if (zks.outstandingChangesForPath.get(cr.path) == cr) {\n                        zks.outstandingChangesForPath.remove(cr.path);\n                    }\n                }\n            }\n\n            \r\n            if (request.isQuorum()) {\n                zks.getZKDatabase().addCommittedProposal(request);\n            }\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId)\n                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":21,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-17 23:13:15","endLine":624,"groupId":"1740","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/9cdf1b3c63f51075e868feebab2c2bffee7a3e.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"N"}],"commitId":"dd96bec98db2b747958f9bcd0ea9f64d43eac17e","commitMessage":"@@@ZOOKEEPER-3484: Improve the throughput by optimizing the synchronizat?\n\n?ion around outstandingChanges\n\nRefactored the `synchronized(outstandingChanges)` block into ZooKeeperServer.java.  and return early for read requests.\n\nAuthor: Yisong Yue <yisongyue@fb.com>\n\nReviewers: maoling <maoling199210191@sina.com>.  Michael Han <hanm@apache.org>\n\nCloses #1042 from yisong-yue/ZOOKEEPER-3484\n","date":"2019-09-10 10:26:38","modifiedFileCount":"2","status":"M","submitter":"Yisong Yue"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-09-17 05:26:05","commitOrder":22,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n\n        ProcessTxnResult rc = zks.processTxn(request);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId)\n                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","date":"2019-09-17 05:26:05","endLine":574,"groupId":"2209","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/dc/b3d26570cfbeb6ff968ff09c049e98eb0750b0.src","preCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n\n        ProcessTxnResult rc = zks.processTxn(request);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId)\n                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        zks.decInProcess();\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":22,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-17 23:13:15","endLine":624,"groupId":"1740","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/9cdf1b3c63f51075e868feebab2c2bffee7a3e.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"N"}],"commitId":"1ca627b5a3105d80ed4d851c6e9f1a1e2ac7d64a","commitMessage":"@@@ZOOKEEPER-3503: Add server side large request throttling\n\nWith this change.  a ZooKeeper server has two new settings:\nzookeeper.largeRequestThreshold\nzookeeper.largeRequestMaxBytes\n\nAny request that is larger than largeRequestThreshold is considered a large request.  and will only be allowed if the number of bytes associated with inflight large requests is currently below the largeRequestMaxBytes limit.\n\nThis check is performed in the connection layer based on the length header of a request.  before allocating the necessary byte buffer and reading data off the TCP socket. This ensures the limit is enforced before allocating data that's ultimately just going to discarded.\n\nWhenever a large request is allowed.  its size is added to an atomic counter which represents the number of large request bytes inflight and this counter is the one tested against the max. Whenever a large request is completed or dropped.  the counter is decremented as necessary.\n\nAuthor: Jie Huang <jiehuang@fb.com>\nAuthor: Joseph Blomstedt <jdb@fb.com>\n\nReviewers: Michael Han <hanm@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1051 from jhuan31/ZOOKEEPER-3503\n","date":"2019-09-17 05:26:05","modifiedFileCount":"10","status":"M","submitter":"Jie Huang"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-10-10 20:37:45","commitOrder":23,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n\n        ProcessTxnResult rc = zks.processTxn(request);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId)\n                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","date":"2019-10-10 20:37:45","endLine":574,"groupId":"2209","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/93/d70d869436d2c3ff28125b39eca4e8a703484f.src","preCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n\n        ProcessTxnResult rc = zks.processTxn(request);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId)\n                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process \" + request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":23,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-17 23:13:15","endLine":624,"groupId":"1740","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/9cdf1b3c63f51075e868feebab2c2bffee7a3e.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"N"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-11-09 00:30:25","commitOrder":24,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n\n        ProcessTxnResult rc = zks.processTxn(request);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId)\n                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","date":"2019-11-09 00:30:25","endLine":605,"groupId":"1919","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/79/a69771805c30c50e87a66879f1970885573f4f.src","preCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n\n        ProcessTxnResult rc = zks.processTxn(request);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId)\n                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       cnxn);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":24,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-17 23:13:15","endLine":624,"groupId":"1740","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/9cdf1b3c63f51075e868feebab2c2bffee7a3e.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"N"}],"commitId":"553639378d5cf86c2488afff4586e5e4cce38061","commitMessage":"@@@ZOOKEEPER-1416 - Persistent.  recursive watchers\n\n\n Background\n\nNote: this is a port of https://github.com/apache/zookeeper/pull/136\n\nImplementation for a persistent.  recursive watch addition for ZK. These watches are set via a new method.  addPersistentWatch() and are removed via the existing watcher removal methods. Persistent.  recursive watches have these characteristics: a) Once set.  they do not auto-remove when triggered; b) they trigger for all event types (child.  data.  etc.) on the node they are registered for and any child znode recursively; c) they are efficiently implemented by using the existing watch internals. A new class PathIterator walks up the path parent-by-parent when checking if a watcher applies.\n\n\n Implementation Details\n\n- A new enum manages the different \"modes\" for watchers: `WatcherMode`.\n- For traditional.  \"standard\" watchers.  the code path is almost exactly the same. There is very little overhead other than a bit of extra checks in `WatchManager`\n- Given how this is implemented it was difficult to add support when `WatchManagerOptimized` is used. I'm open to adding it for that version but it will take work. We should consider not supporting persistent/recursive watchers when WatchManagerOptimized is used. I notice that `WatchManagerOptimized` is not even mentioned in the docs.\n- The mode for a given watcher/path pair is held in a map inside of `WatcherModeManager`. The absence of an entry means Standard. This way.  there's no overhead for old.  standard watchers.\n- `PathParentIterator` is the \"meat\" of the implementation. Rather than set watchers on every ZNode implied by a recursive watcher. WatchManager passes any paths it processes through PathParentIterator which iterates up each parent znode looking for watchers.\n- The remainder of the changes are scaffolding to match how other watchers are used as well as Jute/API changes to set persistent/recursive watchers\n\n\n Testing\n\nThe tests were written years ago. I think they're comprehensive but reviewers should pay attention to anything that was missed. There is much ZooKeeper knowledge that's only in the heads of ZK committers.\n\n- `PersistentWatcherTest` - tests persistent.  non-recursive watchers\n- `PersistentRecursiveWatcherTest` - tests persistent.  recursive watchers\n- `PathParentIteratorTest`- exercises edges of PathParentIterator\n\nAuthor: randgalt <jordan@jordanzimmerman.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache. org>.  Norbert Kalmar <nkalmar@apache.org>.  Andor Moln?r <andor@apache.org>.  Justin Mao Ling <maoling199210191@sina.com>\n\nCloses #1106 from Randgalt/ZOOKEEPER-1416\n","date":"2019-11-09 00:30:25","modifiedFileCount":"14","status":"M","submitter":"randgalt"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-11-11 20:59:08","commitOrder":25,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n\n        ProcessTxnResult rc = zks.processTxn(request);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId)\n                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n            AuditHelper.addAuditLog(request, rc);\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","date":"2019-11-11 20:59:08","endLine":607,"groupId":"1919","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0f/fa5af25ea0ffb1d0b9d53bf5d04dfb240078f6.src","preCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n\n        ProcessTxnResult rc = zks.processTxn(request);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId)\n                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":25,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-17 23:13:15","endLine":624,"groupId":"1740","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/9cdf1b3c63f51075e868feebab2c2bffee7a3e.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"N"}],"commitId":"794adf11220151496a1ff877df3d2627719c9505","commitMessage":"@@@ZOOKEEPER-1260: Audit logging in ZooKeeper servers.\n\nAuthor: Mohammad Arshad <arshad@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Andor Molnar <andor@apache.org>\n\nCloses #1133 from arshadmohammad/ZOOKEEPER-1260-AuditLog-master\n","date":"2019-11-11 20:59:08","modifiedFileCount":"12","status":"M","submitter":"Mohammad Arshad"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-11-18 16:05:38","commitOrder":26,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n\n        ProcessTxnResult rc = zks.processTxn(request);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId)\n                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n            AuditHelper.addAuditLog(request, rc);\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (path == null || rsp == null) {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            } else {\n                int opCode = request.type;\n                Stat stat = null;\n                \r\n                \r\n                \r\n                switch (opCode) {\n                    case OpCode.getData : {\n                        GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                        stat = getDataResponse.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    case OpCode.getChildren2 : {\n                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;\n                        stat = getChildren2Response.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    default:\n                        cnxn.sendResponse(hdr, rsp, \"response\");\n                }\n            }\n\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","date":"2019-11-18 16:05:38","endLine":620,"groupId":"1919","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ee/758b272daf671a4330bee51fe92d282204d061.src","preCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n\n        ProcessTxnResult rc = zks.processTxn(request);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId)\n                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n            AuditHelper.addAuditLog(request, rc);\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (request.type == OpCode.getData && path != null && rsp != null) {\n                \r\n                \r\n                \r\n                GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                Stat stat = null;\n                if (getDataResponse.getStat() != null) {\n                    stat = getDataResponse.getStat();\n                }\n                cnxn.sendResponse(hdr, rsp, \"response\", path, stat);\n            } else {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            }\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":26,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-17 23:13:15","endLine":624,"groupId":"1740","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/9cdf1b3c63f51075e868feebab2c2bffee7a3e.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"N"}],"commitId":"945167c338d4a26c18bdaf49fb9000186a5f7025","commitMessage":"@@@ZOOKEEPER-3560: Add response cache to serve get children (2) requests.\n\nZOOKEEPER-3180 introduces response cache but it only covers getData requests. This commit is to extend the response cache based on the infrastructure set up by ZOOKEEPER-3180 to so the response of get children requests can also be served out of cache. Some design decisions:\n\n* Only OpCode.getChildren2 is supported.  as OpCode.getChildren does not have associated stats and current cache infra relies on stats to invalidate cache.\n\n* The children list is stored in a separate response cache object so it does not pollute the existing data cache that's serving getData requests.  and this separation also allows potential separate tuning of each cache based on workload characteristics.\n\n* As a result of cache object separation.  new server metrics is added to measure cache hit / miss for get children requests.  that's separated from get data requests.\n\nSimilar as ZOOKEEPER-3180.  the get children response cache is enabled by default.  with a default cache size of 400.  and can be disabled (together with get data response cache.).\n\nAuthor: Michael Han <lhan@twitter.com>\nAuthor: Michael Han <hanm@apache.org>\n\nReviewers: eolivelli@apache.org.  andor@apache.org.  enixon@apache.org\n\nCloses #1098 from hanm/cache\n","date":"2019-11-18 16:05:38","modifiedFileCount":"10","status":"M","submitter":"Michael Han"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-11-21 12:58:30","commitOrder":27,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n\n        ProcessTxnResult rc = zks.processTxn(request);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId)\n                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n            AuditHelper.addAuditLog(request, rc);\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(ClientCnxn.PING_XID, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (path == null || rsp == null) {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            } else {\n                int opCode = request.type;\n                Stat stat = null;\n                \r\n                \r\n                \r\n                switch (opCode) {\n                    case OpCode.getData : {\n                        GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                        stat = getDataResponse.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    case OpCode.getChildren2 : {\n                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;\n                        stat = getChildren2Response.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    default:\n                        cnxn.sendResponse(hdr, rsp, \"response\");\n                }\n            }\n\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","date":"2019-11-21 12:58:30","endLine":621,"groupId":"1919","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/9f/fde55c10cf5c103b4c39377ec19b42ef4910d8.src","preCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n\n        ProcessTxnResult rc = zks.processTxn(request);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId)\n                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n            AuditHelper.addAuditLog(request, rc);\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(-2, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (path == null || rsp == null) {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            } else {\n                int opCode = request.type;\n                Stat stat = null;\n                \r\n                \r\n                \r\n                switch (opCode) {\n                    case OpCode.getData : {\n                        GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                        stat = getDataResponse.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    case OpCode.getChildren2 : {\n                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;\n                        stat = getChildren2Response.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    default:\n                        cnxn.sendResponse(hdr, rsp, \"response\");\n                }\n            }\n\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":27,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-17 23:13:15","endLine":624,"groupId":"1740","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/9cdf1b3c63f51075e868feebab2c2bffee7a3e.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"N"}],"commitId":"ae68c7d50e4057ef3f9b99ac0cd0200a8bd5f235","commitMessage":"@@@ZOOKEEPER-3570: make the special client xid constant\n\n- more details in the [ZOOKEEPER-3570](https://issues.apache.org/jira/browse/ZOOKEEPER-3570)\n\nAuthor: maoling <maoling199210191@sina.com>\n\nReviewers: Fangmin Lyu <fangmin@apache.org>.  Brian Nixon <enixon@apache.org>\n\nCloses #1136 from maoling/ZOOKEEPER-3570\n","date":"2019-11-21 12:58:30","modifiedFileCount":"5","status":"M","submitter":"maoling"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2020-03-25 10:38:46","commitOrder":28,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        if (!request.isThrottled()) {\n          rc = applyRequest(request);\n        }\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            if (request.isThrottled()) {\n              throw KeeperException.create(Code.THROTTLEDOP);\n            }\n\n            AuditHelper.addAuditLog(request, rc);\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(ClientCnxn.PING_XID, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (path == null || rsp == null) {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            } else {\n                int opCode = request.type;\n                Stat stat = null;\n                \r\n                \r\n                \r\n                switch (opCode) {\n                    case OpCode.getData : {\n                        GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                        stat = getDataResponse.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    case OpCode.getChildren2 : {\n                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;\n                        stat = getChildren2Response.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    default:\n                        cnxn.sendResponse(hdr, rsp, \"response\");\n                }\n            }\n\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","date":"2020-03-25 10:38:46","endLine":634,"groupId":"1919","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/6a/d61feddf05c3d8e6f62993921376116e9da2d0.src","preCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n\n        ProcessTxnResult rc = zks.processTxn(request);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (request.type == OpCode.closeSession && connClosedByClient(request)) {\n            \r\n            \r\n            \r\n            if (closeSession(zks.serverCnxnFactory, request.sessionId)\n                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {\n                return;\n            }\n        }\n\n        if (request.getHdr() != null) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();\n            if (propagationLatency >= 0) {\n                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);\n            }\n        }\n\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n            AuditHelper.addAuditLog(request, rc);\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(ClientCnxn.PING_XID, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (path == null || rsp == null) {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            } else {\n                int opCode = request.type;\n                Stat stat = null;\n                \r\n                \r\n                \r\n                switch (opCode) {\n                    case OpCode.getData : {\n                        GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                        stat = getDataResponse.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    case OpCode.getChildren2 : {\n                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;\n                        stat = getChildren2Response.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    default:\n                        cnxn.sendResponse(hdr, rsp, \"response\");\n                }\n            }\n\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":28,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-17 23:13:15","endLine":624,"groupId":"1740","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/9cdf1b3c63f51075e868feebab2c2bffee7a3e.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"N"}],"commitId":"e87bad6774e7269ef21a156aff9dad089ef54794","commitMessage":"@@@ZOOKEEPER-3683: Discard requests that are delayed longer than a confi?\n\n?gured threshold\n\nAuthor: Jie Huang <jiehuang@fb.com>\nAuthor: Ivailo Nedelchev <nedelchev@fb.com>\n\nReviewers: Michael Han <hanm@apache.org>.  Allan Lyu <fangmin@apache.org>.  Damien Diederen <dd@crosstwine.com>\n\nCloses #1211 from jhuan31/ZOOKEEPER-3683\n","date":"2020-03-25 10:38:46","modifiedFileCount":"17","status":"M","submitter":"Jie Huang"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2020-03-27 05:12:18","commitOrder":29,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        if (LOG.isTraceEnabled()) {\n            long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n            if (request.type == OpCode.ping) {\n                traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n            }\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        if (!request.isThrottled()) {\n          rc = applyRequest(request);\n        }\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            if (request.isThrottled()) {\n              throw KeeperException.create(Code.THROTTLEDOP);\n            }\n\n            AuditHelper.addAuditLog(request, rc);\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(ClientCnxn.PING_XID, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (path == null || rsp == null) {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            } else {\n                int opCode = request.type;\n                Stat stat = null;\n                \r\n                \r\n                \r\n                switch (opCode) {\n                    case OpCode.getData : {\n                        GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                        stat = getDataResponse.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    case OpCode.getChildren2 : {\n                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;\n                        stat = getChildren2Response.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    default:\n                        cnxn.sendResponse(hdr, rsp, \"response\");\n                }\n            }\n\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","date":"2020-03-27 05:12:18","endLine":633,"groupId":"1919","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a4/87626dee6fbd8afb64525ed5edf5f5a9432ef5.src","preCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        \r\n        long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n        if (request.type == OpCode.ping) {\n            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n        }\n        if (LOG.isTraceEnabled()) {\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        if (!request.isThrottled()) {\n          rc = applyRequest(request);\n        }\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            if (request.isThrottled()) {\n              throw KeeperException.create(Code.THROTTLEDOP);\n            }\n\n            AuditHelper.addAuditLog(request, rc);\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(ClientCnxn.PING_XID, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (path == null || rsp == null) {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            } else {\n                int opCode = request.type;\n                Stat stat = null;\n                \r\n                \r\n                \r\n                switch (opCode) {\n                    case OpCode.getData : {\n                        GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                        stat = getDataResponse.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    case OpCode.getChildren2 : {\n                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;\n                        stat = getChildren2Response.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    default:\n                        cnxn.sendResponse(hdr, rsp, \"response\");\n                }\n            }\n\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":29,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-17 23:13:15","endLine":624,"groupId":"1740","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/9cdf1b3c63f51075e868feebab2c2bffee7a3e.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"N"}],"commitId":"6c7a273bc1c553be34dc7b9e658c6c16b8a023ef","commitMessage":"@@@ZOOKEEPER-3728: move traceMask calculation logic into the trace log i?\n\n?n the FinalRequestProcessor#processRequest\n\nAuthor: Brittany Barnes <60981978+blb93@users.noreply.github.com>\nAuthor: Brittany Barnes <brittany.barnes@ibm.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Justin Ling Mao <maoling199210191@sina.com>.  Luciano Resende <lresende@apache.org>\n\nCloses #1271 from blb93/ZOOKEEPER-3728\n","date":"2020-03-27 05:12:18","modifiedFileCount":"1","status":"M","submitter":"Brittany Barnes"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2020-05-28 11:43:25","commitOrder":30,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        if (LOG.isTraceEnabled()) {\n            long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n            if (request.type == OpCode.ping) {\n                traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n            }\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        if (!request.isThrottled()) {\n          rc = applyRequest(request);\n        }\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        int responseSize = 0;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            if (request.isThrottled()) {\n              throw KeeperException.create(Code.THROTTLEDOP);\n            }\n\n            AuditHelper.addAuditLog(request, rc);\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                responseSize = cnxn.sendResponse(new ReplyHeader(ClientCnxn.PING_XID, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (path == null || rsp == null) {\n                responseSize = cnxn.sendResponse(hdr, rsp, \"response\");\n            } else {\n                int opCode = request.type;\n                Stat stat = null;\n                \r\n                \r\n                \r\n                switch (opCode) {\n                    case OpCode.getData : {\n                        GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                        stat = getDataResponse.getStat();\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    case OpCode.getChildren2 : {\n                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;\n                        stat = getChildren2Response.getStat();\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    default:\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\");\n                }\n            }\n\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        } finally {\n            ServerMetrics.getMetrics().RESPONSE_BYTES.add(responseSize);\n        }\n    }\n","date":"2020-05-28 11:43:25","endLine":636,"groupId":"1919","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a2/3e90371e35cc39ed2ba77e87ac71309191ca31.src","preCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        if (LOG.isTraceEnabled()) {\n            long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n            if (request.type == OpCode.ping) {\n                traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n            }\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        if (!request.isThrottled()) {\n          rc = applyRequest(request);\n        }\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            if (request.isThrottled()) {\n              throw KeeperException.create(Code.THROTTLEDOP);\n            }\n\n            AuditHelper.addAuditLog(request, rc);\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                cnxn.sendResponse(new ReplyHeader(ClientCnxn.PING_XID, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (path == null || rsp == null) {\n                cnxn.sendResponse(hdr, rsp, \"response\");\n            } else {\n                int opCode = request.type;\n                Stat stat = null;\n                \r\n                \r\n                \r\n                switch (opCode) {\n                    case OpCode.getData : {\n                        GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                        stat = getDataResponse.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    case OpCode.getChildren2 : {\n                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;\n                        stat = getChildren2Response.getStat();\n                        cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    default:\n                        cnxn.sendResponse(hdr, rsp, \"response\");\n                }\n            }\n\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":30,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-17 23:13:15","endLine":624,"groupId":"1740","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/9cdf1b3c63f51075e868feebab2c2bffee7a3e.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"N"}],"commitId":"b1e67ca2807f836592ec0106c0c38e3ce997ee8e","commitMessage":"@@@ZOOKEEPER-3847: Add a couple metrics to help track Netty memory usage\n\nAuthor: Jie Huang <jiehuang@fb.com>\n\nReviewers: Michael Han <hanm@apache.org>\n\nCloses #1367 from jhuan31/ZOOKEEPER-3847\n","date":"2020-05-28 11:43:25","modifiedFileCount":"7","status":"M","submitter":"Jie Huang"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2020-10-06 18:39:37","commitOrder":31,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        if (LOG.isTraceEnabled()) {\n            long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n            if (request.type == OpCode.ping) {\n                traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n            }\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        if (!request.isThrottled()) {\n          rc = applyRequest(request);\n        }\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        int responseSize = 0;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            if (request.isThrottled()) {\n              throw KeeperException.create(Code.THROTTLEDOP);\n            }\n\n            AuditHelper.addAuditLog(request, rc);\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                responseSize = cnxn.sendResponse(new ReplyHeader(ClientCnxn.PING_XID, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (prefixPath == null || prefixPath.trim().isEmpty() || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (path == null || rsp == null) {\n                responseSize = cnxn.sendResponse(hdr, rsp, \"response\");\n            } else {\n                int opCode = request.type;\n                Stat stat = null;\n                \r\n                \r\n                \r\n                switch (opCode) {\n                    case OpCode.getData : {\n                        GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                        stat = getDataResponse.getStat();\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    case OpCode.getChildren2 : {\n                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;\n                        stat = getChildren2Response.getStat();\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    default:\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\");\n                }\n            }\n\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        } finally {\n            ServerMetrics.getMetrics().RESPONSE_BYTES.add(responseSize);\n        }\n    }\n","date":"2020-10-06 18:39:37","endLine":635,"groupId":"1919","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/26/d5bafa82204e4b57d2128e3fb94911f00e2eab.src","preCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        if (LOG.isTraceEnabled()) {\n            long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n            if (request.type == OpCode.ping) {\n                traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n            }\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        if (!request.isThrottled()) {\n          rc = applyRequest(request);\n        }\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        int responseSize = 0;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            if (request.isThrottled()) {\n              throw KeeperException.create(Code.THROTTLEDOP);\n            }\n\n            AuditHelper.addAuditLog(request, rc);\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                responseSize = cnxn.sendResponse(new ReplyHeader(ClientCnxn.PING_XID, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (StringUtils.isBlank(prefixPath) || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (path == null || rsp == null) {\n                responseSize = cnxn.sendResponse(hdr, rsp, \"response\");\n            } else {\n                int opCode = request.type;\n                Stat stat = null;\n                \r\n                \r\n                \r\n                switch (opCode) {\n                    case OpCode.getData : {\n                        GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                        stat = getDataResponse.getStat();\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    case OpCode.getChildren2 : {\n                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;\n                        stat = getChildren2Response.getStat();\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    default:\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\");\n                }\n            }\n\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        } finally {\n            ServerMetrics.getMetrics().RESPONSE_BYTES.add(responseSize);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":31,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-17 23:13:15","endLine":624,"groupId":"1740","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/9cdf1b3c63f51075e868feebab2c2bffee7a3e.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"N"}],"commitId":"d3282c62ddb30a8ce265dcebca0e106c51f07ca3","commitMessage":"@@@ZOOKEEPER-3952: Remove commons-lang from ZooKeeper\n\nRemoved commons-lang from main project.  replaced functionality with standard Java code.\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Christopher Tubbs <ctubbsii@apache.org>.  Enrico Olivelli <eolivelli@apache.org>.  Mate Szalay-Beko <symat@apache.org>.  tison <wander4096@gmail.com>\n\nCloses #1478 from tamaashu/ZOOKEEPER-3952\n","date":"2020-10-06 18:39:37","modifiedFileCount":"2","status":"M","submitter":"Tamas Penzes"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2020-10-25 23:02:24","commitOrder":32,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        if (LOG.isTraceEnabled()) {\n            long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n            if (request.type == OpCode.ping) {\n                traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n            }\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        if (!request.isThrottled()) {\n          rc = applyRequest(request);\n        }\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        int responseSize = 0;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            if (request.isThrottled()) {\n              throw KeeperException.create(Code.THROTTLEDOP);\n            }\n\n            AuditHelper.addAuditLog(request, rc);\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                responseSize = cnxn.sendResponse(new ReplyHeader(ClientCnxn.PING_XID, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.whoAmI: {\n                lastOp = \"HOMI\";\n                rsp = new WhoAmIResponse(AuthUtil.getClientInfos(request.authInfo));\n                break;\n             }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (prefixPath == null || prefixPath.trim().isEmpty() || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (path == null || rsp == null) {\n                responseSize = cnxn.sendResponse(hdr, rsp, \"response\");\n            } else {\n                int opCode = request.type;\n                Stat stat = null;\n                \r\n                \r\n                \r\n                switch (opCode) {\n                    case OpCode.getData : {\n                        GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                        stat = getDataResponse.getStat();\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    case OpCode.getChildren2 : {\n                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;\n                        stat = getChildren2Response.getStat();\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    default:\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\");\n                }\n            }\n\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        } finally {\n            ServerMetrics.getMetrics().RESPONSE_BYTES.add(responseSize);\n        }\n    }\n","date":"2020-10-25 23:02:24","endLine":642,"groupId":"1919","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/88/9e7ede4c1c2f3925b1a43e5fd673e9183a5192.src","preCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        if (LOG.isTraceEnabled()) {\n            long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n            if (request.type == OpCode.ping) {\n                traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n            }\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        if (!request.isThrottled()) {\n          rc = applyRequest(request);\n        }\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        int responseSize = 0;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            if (request.isThrottled()) {\n              throw KeeperException.create(Code.THROTTLEDOP);\n            }\n\n            AuditHelper.addAuditLog(request, rc);\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                responseSize = cnxn.sendResponse(new ReplyHeader(ClientCnxn.PING_XID, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (prefixPath == null || prefixPath.trim().isEmpty() || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (path == null || rsp == null) {\n                responseSize = cnxn.sendResponse(hdr, rsp, \"response\");\n            } else {\n                int opCode = request.type;\n                Stat stat = null;\n                \r\n                \r\n                \r\n                switch (opCode) {\n                    case OpCode.getData : {\n                        GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                        stat = getDataResponse.getStat();\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    case OpCode.getChildren2 : {\n                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;\n                        stat = getChildren2Response.getStat();\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    default:\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\");\n                }\n            }\n\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        } finally {\n            ServerMetrics.getMetrics().RESPONSE_BYTES.add(responseSize);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":32,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-17 23:13:15","endLine":624,"groupId":"1740","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/9cdf1b3c63f51075e868feebab2c2bffee7a3e.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"N"}],"commitId":"a6ca5f307e20df1e62ce5415d84235ec00f57286","commitMessage":"@@@ZOOKEEPER-3969: Add whoami API and Cli command\n\nAuthor: Mohammad Arshad <arshad@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Damien Diederen <dd@crosstwine.com>.  Mate Szalay-Beko <symat@apache.org>\n\nCloses #1504 from arshadmohammad/whoami-master\n","date":"2020-10-25 23:02:24","modifiedFileCount":"8","status":"M","submitter":"Mohammad Arshad"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2020-10-30 19:03:41","commitOrder":33,"curCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        if (LOG.isTraceEnabled()) {\n            long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n            if (request.type == OpCode.ping) {\n                traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n            }\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        if (!request.isThrottled()) {\n          rc = applyRequest(request);\n        }\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        int responseSize = 0;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            if (request.isThrottled()) {\n              throw KeeperException.create(Code.THROTTLEDOP);\n            }\n\n            AuditHelper.addAuditLog(request, rc);\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                responseSize = cnxn.sendResponse(new ReplyHeader(ClientCnxn.PING_XID, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(UTF_8),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.whoAmI: {\n                lastOp = \"HOMI\";\n                rsp = new WhoAmIResponse(AuthUtil.getClientInfos(request.authInfo));\n                break;\n             }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (prefixPath == null || prefixPath.trim().isEmpty() || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (path == null || rsp == null) {\n                responseSize = cnxn.sendResponse(hdr, rsp, \"response\");\n            } else {\n                int opCode = request.type;\n                Stat stat = null;\n                \r\n                \r\n                \r\n                switch (opCode) {\n                    case OpCode.getData : {\n                        GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                        stat = getDataResponse.getStat();\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    case OpCode.getChildren2 : {\n                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;\n                        stat = getChildren2Response.getStat();\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    default:\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\");\n                }\n            }\n\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        } finally {\n            ServerMetrics.getMetrics().RESPONSE_BYTES.add(responseSize);\n        }\n    }\n","date":"2020-10-30 19:03:41","endLine":643,"groupId":"10762","id":39,"instanceNumber":1,"isCurCommit":1,"methodName":"processRequest","params":"(Requestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/6d/b245e060d60724dd2d83e60db4241d068118c9.src","preCode":"    public void processRequest(Request request) {\n        LOG.debug(\"Processing request:: {}\", request);\n\n        if (LOG.isTraceEnabled()) {\n            long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n            if (request.type == OpCode.ping) {\n                traceMask = ZooTrace.SERVER_PING_TRACE_MASK;\n            }\n            ZooTrace.logRequest(LOG, traceMask, 'E', request, \"\");\n        }\n        ProcessTxnResult rc = null;\n        if (!request.isThrottled()) {\n          rc = applyRequest(request);\n        }\n        if (request.cnxn == null) {\n            return;\n        }\n        ServerCnxn cnxn = request.cnxn;\n\n        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();\n\n        String lastOp = \"NA\";\n        \r\n        \r\n        zks.decInProcess();\n        zks.requestFinished(request);\n        Code err = Code.OK;\n        Record rsp = null;\n        String path = null;\n        int responseSize = 0;\n        try {\n            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {\n                AuditHelper.addAuditLog(request, rc, true);\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (request.getException() != null) {\n                    throw request.getException();\n                } else {\n                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));\n                }\n            }\n\n            KeeperException ke = request.getException();\n            if (ke instanceof SessionMovedException) {\n                throw ke;\n            }\n            if (ke != null && request.type != OpCode.multi) {\n                throw ke;\n            }\n\n            LOG.debug(\"{}\", request);\n\n            if (request.isStale()) {\n                ServerMetrics.getMetrics().STALE_REPLIES.add(1);\n            }\n\n            if (request.isThrottled()) {\n              throw KeeperException.create(Code.THROTTLEDOP);\n            }\n\n            AuditHelper.addAuditLog(request, rc);\n\n            switch (request.type) {\n            case OpCode.ping: {\n                lastOp = \"PING\";\n                updateStats(request, lastOp, lastZxid);\n\n                responseSize = cnxn.sendResponse(new ReplyHeader(ClientCnxn.PING_XID, lastZxid, 0), null, \"response\");\n                return;\n            }\n            case OpCode.createSession: {\n                lastOp = \"SESS\";\n                updateStats(request, lastOp, lastZxid);\n\n                zks.finishSessionInit(request.cnxn, true);\n                return;\n            }\n            case OpCode.multi: {\n                lastOp = \"MULT\";\n                rsp = new MultiResponse();\n\n                for (ProcessTxnResult subTxnResult : rc.multiResult) {\n\n                    OpResult subResult;\n\n                    switch (subTxnResult.type) {\n                    case OpCode.check:\n                        subResult = new CheckResult();\n                        break;\n                    case OpCode.create:\n                        subResult = new CreateResult(subTxnResult.path);\n                        break;\n                    case OpCode.create2:\n                    case OpCode.createTTL:\n                    case OpCode.createContainer:\n                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);\n                        break;\n                    case OpCode.delete:\n                    case OpCode.deleteContainer:\n                        subResult = new DeleteResult();\n                        break;\n                    case OpCode.setData:\n                        subResult = new SetDataResult(subTxnResult.stat);\n                        break;\n                    case OpCode.error:\n                        subResult = new ErrorResult(subTxnResult.err);\n                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {\n                            throw new SessionMovedException();\n                        }\n                        break;\n                    default:\n                        throw new IOException(\"Invalid type of op\");\n                    }\n\n                    ((MultiResponse) rsp).add(subResult);\n                }\n\n                break;\n            }\n            case OpCode.multiRead: {\n                lastOp = \"MLTR\";\n                MultiOperationRecord multiReadRecord = new MultiOperationRecord();\n                ByteBufferInputStream.byteBuffer2Record(request.request, multiReadRecord);\n                rsp = new MultiResponse();\n                OpResult subResult;\n                for (Op readOp : multiReadRecord) {\n                    try {\n                        Record rec;\n                        switch (readOp.getType()) {\n                        case OpCode.getChildren:\n                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());\n                            break;\n                        case OpCode.getData:\n                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);\n                            GetDataResponse gdr = (GetDataResponse) rec;\n                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());\n                            break;\n                        default:\n                            throw new IOException(\"Invalid type of readOp\");\n                        }\n                    } catch (KeeperException e) {\n                        subResult = new ErrorResult(e.code().intValue());\n                    }\n                    ((MultiResponse) rsp).add(subResult);\n                }\n                break;\n            }\n            case OpCode.create: {\n                lastOp = \"CREA\";\n                rsp = new CreateResponse(rc.path);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.create2:\n            case OpCode.createTTL:\n            case OpCode.createContainer: {\n                lastOp = \"CREA\";\n                rsp = new Create2Response(rc.path, rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.delete:\n            case OpCode.deleteContainer: {\n                lastOp = \"DELE\";\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.setData: {\n                lastOp = \"SETD\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.reconfig: {\n                lastOp = \"RECO\";\n                rsp = new GetDataResponse(\n                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(),\n                    rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.setACL: {\n                lastOp = \"SETA\";\n                rsp = new SetACLResponse(rc.stat);\n                err = Code.get(rc.err);\n                requestPathMetricsCollector.registerRequest(request.type, rc.path);\n                break;\n            }\n            case OpCode.closeSession: {\n                lastOp = \"CLOS\";\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.sync: {\n                lastOp = \"SYNC\";\n                SyncRequest syncRequest = new SyncRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, syncRequest);\n                rsp = new SyncResponse(syncRequest.getPath());\n                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());\n                break;\n            }\n            case OpCode.check: {\n                lastOp = \"CHEC\";\n                rsp = new SetDataResponse(rc.stat);\n                err = Code.get(rc.err);\n                break;\n            }\n            case OpCode.exists: {\n                lastOp = \"EXIS\";\n                \r\n                ExistsRequest existsRequest = new ExistsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, existsRequest);\n                path = existsRequest.getPath();\n                if (path.indexOf('\\0') != -1) {\n                    throw new KeeperException.BadArgumentsException();\n                }\n                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);\n                rsp = new ExistsResponse(stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getData: {\n                lastOp = \"GETD\";\n                GetDataRequest getDataRequest = new GetDataRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);\n                path = getDataRequest.getPath();\n                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.setWatches: {\n                lastOp = \"SETW\";\n                SetWatches setWatches = new SetWatches();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase()\n                   .setWatches(\n                       relativeZxid,\n                       setWatches.getDataWatches(),\n                       setWatches.getExistWatches(),\n                       setWatches.getChildWatches(),\n                       Collections.emptyList(),\n                       Collections.emptyList(),\n                       cnxn);\n                break;\n            }\n            case OpCode.setWatches2: {\n                lastOp = \"STW2\";\n                SetWatches2 setWatches = new SetWatches2();\n                \r\n                request.request.rewind();\n                ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);\n                long relativeZxid = setWatches.getRelativeZxid();\n                zks.getZKDatabase().setWatches(relativeZxid,\n                        setWatches.getDataWatches(),\n                        setWatches.getExistWatches(),\n                        setWatches.getChildWatches(),\n                        setWatches.getPersistentWatches(),\n                        setWatches.getPersistentRecursiveWatches(),\n                        cnxn);\n                break;\n            }\n            case OpCode.addWatch: {\n                lastOp = \"ADDW\";\n                AddWatchRequest addWatcherRequest = new AddWatchRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request,\n                        addWatcherRequest);\n                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());\n                rsp = new ErrorResponse(0);\n                break;\n            }\n            case OpCode.getACL: {\n                lastOp = \"GETA\";\n                GetACLRequest getACLRequest = new GetACLRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getACLRequest);\n                path = getACLRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,\n                    null);\n\n                Stat stat = new Stat();\n                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);\n                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());\n\n                try {\n                    zks.checkACL(\n                        request.cnxn,\n                        zks.getZKDatabase().aclForNode(n),\n                        ZooDefs.Perms.ADMIN,\n                        request.authInfo,\n                        path,\n                        null);\n                    rsp = new GetACLResponse(acl, stat);\n                } catch (KeeperException.NoAuthException e) {\n                    List<ACL> acl1 = new ArrayList<ACL>(acl.size());\n                    for (ACL a : acl) {\n                        if (\"digest\".equals(a.getId().getScheme())) {\n                            Id id = a.getId();\n                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll(\":.*\", \":x\"));\n                            acl1.add(new ACL(a.getPerms(), id1));\n                        } else {\n                            acl1.add(a);\n                        }\n                    }\n                    rsp = new GetACLResponse(acl1, stat);\n                }\n                break;\n            }\n            case OpCode.getChildren: {\n                lastOp = \"GETC\";\n                GetChildrenRequest getChildrenRequest = new GetChildrenRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);\n                path = getChildrenRequest.getPath();\n                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.getAllChildrenNumber: {\n                lastOp = \"GETACN\";\n                GetAllChildrenNumberRequest getAllChildrenNumberRequest = new GetAllChildrenNumberRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getAllChildrenNumberRequest);\n                path = getAllChildrenNumberRequest.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo,\n                    path,\n                    null);\n                int number = zks.getZKDatabase().getAllChildrenNumber(path);\n                rsp = new GetAllChildrenNumberResponse(number);\n                break;\n            }\n            case OpCode.getChildren2: {\n                lastOp = \"GETC\";\n                GetChildren2Request getChildren2Request = new GetChildren2Request();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getChildren2Request);\n                Stat stat = new Stat();\n                path = getChildren2Request.getPath();\n                DataNode n = zks.getZKDatabase().getNode(path);\n                if (n == null) {\n                    throw new KeeperException.NoNodeException();\n                }\n                zks.checkACL(\n                    request.cnxn,\n                    zks.getZKDatabase().aclForNode(n),\n                    ZooDefs.Perms.READ,\n                    request.authInfo, path,\n                    null);\n                List<String> children = zks.getZKDatabase()\n                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);\n                rsp = new GetChildren2Response(children, stat);\n                requestPathMetricsCollector.registerRequest(request.type, path);\n                break;\n            }\n            case OpCode.checkWatches: {\n                lastOp = \"CHKW\";\n                CheckWatchesRequest checkWatches = new CheckWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, checkWatches);\n                WatcherType type = WatcherType.fromInt(checkWatches.getType());\n                path = checkWatches.getPath();\n                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);\n                if (!containsWatcher) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());\n                break;\n            }\n            case OpCode.removeWatches: {\n                lastOp = \"REMW\";\n                RemoveWatchesRequest removeWatches = new RemoveWatchesRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, removeWatches);\n                WatcherType type = WatcherType.fromInt(removeWatches.getType());\n                path = removeWatches.getPath();\n                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);\n                if (!removed) {\n                    String msg = String.format(Locale.ENGLISH, \"%s (type: %s)\", path, type);\n                    throw new KeeperException.NoWatcherException(msg);\n                }\n                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());\n                break;\n            }\n            case OpCode.whoAmI: {\n                lastOp = \"HOMI\";\n                rsp = new WhoAmIResponse(AuthUtil.getClientInfos(request.authInfo));\n                break;\n             }\n            case OpCode.getEphemerals: {\n                lastOp = \"GETE\";\n                GetEphemeralsRequest getEphemerals = new GetEphemeralsRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, getEphemerals);\n                String prefixPath = getEphemerals.getPrefixPath();\n                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);\n                List<String> ephemerals = new ArrayList<>();\n                if (prefixPath == null || prefixPath.trim().isEmpty() || \"/\".equals(prefixPath.trim())) {\n                    ephemerals.addAll(allEphems);\n                } else {\n                    for (String p : allEphems) {\n                        if (p.startsWith(prefixPath)) {\n                            ephemerals.add(p);\n                        }\n                    }\n                }\n                rsp = new GetEphemeralsResponse(ephemerals);\n                break;\n            }\n            }\n        } catch (SessionMovedException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            cnxn.sendCloseSession();\n            return;\n        } catch (KeeperException e) {\n            err = e.code();\n        } catch (Exception e) {\n            \r\n            \r\n            LOG.error(\"Failed to process {}\", request, e);\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            bb.rewind();\n            while (bb.hasRemaining()) {\n                sb.append(Integer.toHexString(bb.get() & 0xff));\n            }\n            LOG.error(\"Dumping request buffer: 0x{}\", sb.toString());\n            err = Code.MARSHALLINGERROR;\n        }\n\n        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());\n\n        updateStats(request, lastOp, lastZxid);\n\n        try {\n            if (path == null || rsp == null) {\n                responseSize = cnxn.sendResponse(hdr, rsp, \"response\");\n            } else {\n                int opCode = request.type;\n                Stat stat = null;\n                \r\n                \r\n                \r\n                switch (opCode) {\n                    case OpCode.getData : {\n                        GetDataResponse getDataResponse = (GetDataResponse) rsp;\n                        stat = getDataResponse.getStat();\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    case OpCode.getChildren2 : {\n                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;\n                        stat = getChildren2Response.getStat();\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\", path, stat, opCode);\n                        break;\n                    }\n                    default:\n                        responseSize = cnxn.sendResponse(hdr, rsp, \"response\");\n                }\n            }\n\n            if (request.type == OpCode.closeSession) {\n                cnxn.sendCloseSession();\n            }\n        } catch (IOException e) {\n            LOG.error(\"FIXMSG\", e);\n        } finally {\n            ServerMetrics.getMetrics().RESPONSE_BYTES.add(responseSize);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":33,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-17 23:13:15","endLine":624,"groupId":"10762","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/9cdf1b3c63f51075e868feebab2c2bffee7a3e.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"N"}],"commitId":"8654e7ed37717df79eb06f75de43eafe4f47b175","commitMessage":"@@@ZOOKEEPER-3342: Use StandardCharsets\n\n> Encodes this String into a sequence of bytes using the platform's default charset.  storing the result into a new byte array.  The behavior of this method when this string cannot be encoded in the default charset is unspecified.\n\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/String.html#getBytes--\n\n1.  Since this is a distributed system.  it is always possible that different nodes have different default charsets defined.  I think it's most safe to specify it explicitly across all nodes for safety sake.  You could for example see a situation where an upgrade JVM uses a different default and during a rolling upgrade of the JVM.  different nodes now have a different default.\n2.  The default charset is usually \"ISO-8859-1\".  UTF-8 covers more of our international friends.\n3. Explicitly specifying the CharSet yields slight performance gains\n4. Explicitly specifying the CharSet removes the need for try/catch blocks of UnsupportedEncodingException\n\nhttps://blog.codecentric.de/en/2014/04/faster-cleaner-code-since-java-7/\n\nAuthor: David Mollitor <dmollitor@apache.org>\nAuthor: Beluga Behr <dam6923@gmail.com>\nAuthor: David Mollitor <dam6923@gmail.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Andor Molnar <anmolnar@apache.org>\n\nCloses #882 from belugabehr/ZOOKEEPER-3342\n","date":"2020-10-30 19:03:41","modifiedFileCount":"32","status":"M","submitter":"David Mollitor"}]
