[{"authorTime":"2019-08-01 13:28:24","codes":[{"authorDate":"2019-08-01 13:28:24","commitOrder":1,"curCode":"    public void testCollectStats() throws InterruptedException {\n        RequestPathMetricsCollector requestPathMetricsCollector =\n            new RequestPathMetricsCollector(true);\n        RequestPathMetricsCollector.PathStatsQueue pathStatsQueue =\n            requestPathMetricsCollector.new PathStatsQueue(getChildren);\n        pathStatsQueue.start();\n        Thread path7 = new Thread(() -> {\n            for(int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 100000; j++) {\n                    pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5/path6/path7\"\n                        + \"_\" + i + \"_\" + j);\n                }\n            }\n        });\n        path7.start();\n        Thread path6 = new Thread(() -> {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5/path6\");\n            for(int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 10000; j++) {\n                    pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5/path6\"\n                        + \"_\" + i + \"_\" + j);\n                }\n            }\n        });\n        path6.start();\n        for(int i = 0; i < 1; i++) {\n            pathStatsQueue.registerRequest(\"/path1\");\n        }        \n        for(int i = 0; i < 10; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2\"+\"_\"+i);\n        }\n        for(int i = 0; i < 100; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3\"+\"_\"+i);\n        }\n        for(int i = 0; i < 1000; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3/path4\"+\"_\"+i);\n        }\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        for(int i = 0; i < 10000; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5\"+\"_\"+i);\n        }\n        path6.join();\n        path7.join();\n        Map<String, Integer> newSlot = pathStatsQueue.collectStats(1);\n        Assert.assertEquals(newSlot.size(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1\").intValue(), 1111112);\n        \r\n        newSlot = pathStatsQueue.collectStats(2);\n        Assert.assertEquals(newSlot.size(), 12);\n        Assert.assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1/path2\").intValue(), 1111101);\n        \r\n        newSlot = pathStatsQueue.collectStats(3);\n        Assert.assertEquals(newSlot.size(), 112);\n        Assert.assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3\").intValue(), 1111001);\n        \r\n        newSlot = pathStatsQueue.collectStats(4);\n        Assert.assertEquals(newSlot.size(), 1112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4\").intValue(), 1110001);\n        \r\n        newSlot = pathStatsQueue.collectStats(5);\n        Assert.assertEquals(newSlot.size(), 11112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5\").intValue(), 1100001);\n        \r\n        newSlot = pathStatsQueue.collectStats(6);\n        Assert.assertEquals(newSlot.size(), 111112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5/path6\").intValue(),\n            1000001);\n    }\n","date":"2019-08-01 13:28:24","endLine":254,"groupId":"3815","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCollectStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/1e/d8a4ed1607bfed08c1e3a1c42a253bf093a4f4.src","preCode":"    public void testCollectStats() throws InterruptedException {\n        RequestPathMetricsCollector requestPathMetricsCollector =\n            new RequestPathMetricsCollector(true);\n        RequestPathMetricsCollector.PathStatsQueue pathStatsQueue =\n            requestPathMetricsCollector.new PathStatsQueue(getChildren);\n        pathStatsQueue.start();\n        Thread path7 = new Thread(() -> {\n            for(int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 100000; j++) {\n                    pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5/path6/path7\"\n                        + \"_\" + i + \"_\" + j);\n                }\n            }\n        });\n        path7.start();\n        Thread path6 = new Thread(() -> {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5/path6\");\n            for(int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 10000; j++) {\n                    pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5/path6\"\n                        + \"_\" + i + \"_\" + j);\n                }\n            }\n        });\n        path6.start();\n        for(int i = 0; i < 1; i++) {\n            pathStatsQueue.registerRequest(\"/path1\");\n        }        \n        for(int i = 0; i < 10; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2\"+\"_\"+i);\n        }\n        for(int i = 0; i < 100; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3\"+\"_\"+i);\n        }\n        for(int i = 0; i < 1000; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3/path4\"+\"_\"+i);\n        }\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        for(int i = 0; i < 10000; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5\"+\"_\"+i);\n        }\n        path6.join();\n        path7.join();\n        Map<String, Integer> newSlot = pathStatsQueue.collectStats(1);\n        Assert.assertEquals(newSlot.size(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1\").intValue(), 1111112);\n        \r\n        newSlot = pathStatsQueue.collectStats(2);\n        Assert.assertEquals(newSlot.size(), 12);\n        Assert.assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1/path2\").intValue(), 1111101);\n        \r\n        newSlot = pathStatsQueue.collectStats(3);\n        Assert.assertEquals(newSlot.size(), 112);\n        Assert.assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3\").intValue(), 1111001);\n        \r\n        newSlot = pathStatsQueue.collectStats(4);\n        Assert.assertEquals(newSlot.size(), 1112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4\").intValue(), 1110001);\n        \r\n        newSlot = pathStatsQueue.collectStats(5);\n        Assert.assertEquals(newSlot.size(), 11112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5\").intValue(), 1100001);\n        \r\n        newSlot = pathStatsQueue.collectStats(6);\n        Assert.assertEquals(newSlot.size(), 111112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5/path6\").intValue(),\n            1000001);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"B"},{"authorDate":"2019-08-01 13:28:24","commitOrder":1,"curCode":"    public void testAggregate() throws InterruptedException {\n        RequestPathMetricsCollector requestPathMetricsCollector =\n            new RequestPathMetricsCollector(true);\n        Thread path7 = new Thread(() -> {\n            for(int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 100000; j++) {\n                    requestPathMetricsCollector.registerRequest(getData,\n                        \"/path1/path2/path3/path4/path5/path6/path7\" + \"_\" + i + \"_\" + j);\n                }\n            }\n        });\n        path7.start();\n        Thread path6 = new Thread(() -> {\n            requestPathMetricsCollector.registerRequest(getChildren2,\n                \"/path1/path2/path3/path4/path5/path6\");\n            for(int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 10000; j++) {\n                    requestPathMetricsCollector.registerRequest(getChildren,\n                        \"/path1/path2/path3/path4/path5/path6\" + \"_\" + i + \"_\" + j);\n                }\n            }\n        });\n        path6.start();\n        for(int i = 0; i < 1; i++) {\n            requestPathMetricsCollector.registerRequest(create2,\n                \"/path1\");\n        }\n        for(int i = 0; i < 10; i++) {\n            requestPathMetricsCollector.registerRequest(create,\n                \"/path1/path2\"+\"_\"+i);\n        }\n        for(int i = 0; i < 100; i++) {\n            requestPathMetricsCollector.registerRequest(delete,\n                \"/path1/path2/path3\"+\"_\"+i);\n        }\n        for(int i = 0; i < 1000; i++) {\n            requestPathMetricsCollector.registerRequest(setData,\n                \"/path1/path2/path3/path4\"+\"_\"+i);\n        }\n        for(int i = 0; i < 10000; i++) {\n            requestPathMetricsCollector.registerRequest(exists,\n                \"/path1/path2/path3/path4/path5\"+\"_\"+i);\n        }\n        path6.join();\n        path7.join();\n        Map<String, Integer> newSlot = requestPathMetricsCollector.aggregatePaths(2,\n            queue -> true);\n        Assert.assertEquals(newSlot.size(), 12);\n        Assert.assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1/path2\").intValue(), 1111101);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(3, queue -> true);\n        Assert.assertEquals(newSlot.size(), 112);\n        Assert.assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3\").intValue(), 1111001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(4, queue -> true);\n        Assert.assertEquals(newSlot.size(), 1112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4\").intValue(), 1110001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(5, queue -> true);\n        Assert.assertEquals(newSlot.size(), 11112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5\").intValue(), 1100001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(6, queue -> true);\n        Assert.assertEquals(newSlot.size(), 111112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5/path6\").intValue(), 1000001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(7, queue -> true);\n        Assert.assertEquals(newSlot.size(), 111112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5/path6\").intValue(), 1000001);\n        \r\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(4, queue -> !queue.isWriteOperation());\n        Assert.assertEquals(newSlot.size(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4\").intValue(), 1110001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(4, queue -> queue.isWriteOperation());\n        Assert.assertEquals(newSlot.size(), 1111);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(3, queue -> queue.isWriteOperation());\n        Assert.assertEquals(newSlot.size(), 112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3\").intValue(), 1000);\n    }\n","date":"2019-08-01 13:28:24","endLine":350,"groupId":"362","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/1e/d8a4ed1607bfed08c1e3a1c42a253bf093a4f4.src","preCode":"    public void testAggregate() throws InterruptedException {\n        RequestPathMetricsCollector requestPathMetricsCollector =\n            new RequestPathMetricsCollector(true);\n        Thread path7 = new Thread(() -> {\n            for(int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 100000; j++) {\n                    requestPathMetricsCollector.registerRequest(getData,\n                        \"/path1/path2/path3/path4/path5/path6/path7\" + \"_\" + i + \"_\" + j);\n                }\n            }\n        });\n        path7.start();\n        Thread path6 = new Thread(() -> {\n            requestPathMetricsCollector.registerRequest(getChildren2,\n                \"/path1/path2/path3/path4/path5/path6\");\n            for(int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 10000; j++) {\n                    requestPathMetricsCollector.registerRequest(getChildren,\n                        \"/path1/path2/path3/path4/path5/path6\" + \"_\" + i + \"_\" + j);\n                }\n            }\n        });\n        path6.start();\n        for(int i = 0; i < 1; i++) {\n            requestPathMetricsCollector.registerRequest(create2,\n                \"/path1\");\n        }\n        for(int i = 0; i < 10; i++) {\n            requestPathMetricsCollector.registerRequest(create,\n                \"/path1/path2\"+\"_\"+i);\n        }\n        for(int i = 0; i < 100; i++) {\n            requestPathMetricsCollector.registerRequest(delete,\n                \"/path1/path2/path3\"+\"_\"+i);\n        }\n        for(int i = 0; i < 1000; i++) {\n            requestPathMetricsCollector.registerRequest(setData,\n                \"/path1/path2/path3/path4\"+\"_\"+i);\n        }\n        for(int i = 0; i < 10000; i++) {\n            requestPathMetricsCollector.registerRequest(exists,\n                \"/path1/path2/path3/path4/path5\"+\"_\"+i);\n        }\n        path6.join();\n        path7.join();\n        Map<String, Integer> newSlot = requestPathMetricsCollector.aggregatePaths(2,\n            queue -> true);\n        Assert.assertEquals(newSlot.size(), 12);\n        Assert.assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1/path2\").intValue(), 1111101);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(3, queue -> true);\n        Assert.assertEquals(newSlot.size(), 112);\n        Assert.assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3\").intValue(), 1111001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(4, queue -> true);\n        Assert.assertEquals(newSlot.size(), 1112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4\").intValue(), 1110001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(5, queue -> true);\n        Assert.assertEquals(newSlot.size(), 11112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5\").intValue(), 1100001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(6, queue -> true);\n        Assert.assertEquals(newSlot.size(), 111112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5/path6\").intValue(), 1000001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(7, queue -> true);\n        Assert.assertEquals(newSlot.size(), 111112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5/path6\").intValue(), 1000001);\n        \r\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(4, queue -> !queue.isWriteOperation());\n        Assert.assertEquals(newSlot.size(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4\").intValue(), 1110001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(4, queue -> queue.isWriteOperation());\n        Assert.assertEquals(newSlot.size(), 1111);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(3, queue -> queue.isWriteOperation());\n        Assert.assertEquals(newSlot.size(), 112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3\").intValue(), 1000);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"B"}],"commitId":"6d636025d1c6a10840a27caee9e8933f1dbcbaf0","commitMessage":"@@@ZOOKEEPER-3430: Observability improvement: provide top N read / write path queries.\n\nWe would like to have a better understanding of the type of workloads hit ZK.  and one aspect of such understanding is to be able to answer queries of top N read and top N write request path. Knowing the hot request paths will allow us better optimize for such workloads.  for example.  enabling path specific caching.  or change the path structure (e.g. break a long path to hierarchical paths).\n\nThis commit adds a RequestPathMetricsCollector which will collect path requests stats and answers such queries. There are also a set of new Java system properties that make this collector highly configurable.  including disable it totally (the default option is on.).\n\nThe stats can also be queried through commands.  which I will add in a different pull request once this landed.  since this one is already big.\n\nAuthor: Michael Han <lhan@twitter.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>\n\nCloses #989 from hanm/twitter/065e164bfbbf467a28602da76e9443faacaec1c8\n","date":"2019-08-01 13:28:24","modifiedFileCount":"3","status":"B","submitter":"Michael Han"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testCollectStats() throws InterruptedException {\n        RequestPathMetricsCollector requestPathMetricsCollector = new RequestPathMetricsCollector(true);\n        RequestPathMetricsCollector.PathStatsQueue pathStatsQueue = requestPathMetricsCollector.new PathStatsQueue(getChildren);\n        pathStatsQueue.start();\n        Thread path7 = new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 100000; j++) {\n                    pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5/path6/path7\" + \"_\" + i + \"_\" + j);\n                }\n            }\n        });\n        path7.start();\n        Thread path6 = new Thread(() -> {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5/path6\");\n            for (int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 10000; j++) {\n                    pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5/path6\" + \"_\" + i + \"_\" + j);\n                }\n            }\n        });\n        path6.start();\n        for (int i = 0; i < 1; i++) {\n            pathStatsQueue.registerRequest(\"/path1\");\n        }\n        for (int i = 0; i < 10; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2\" + \"_\" + i);\n        }\n        for (int i = 0; i < 100; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3\" + \"_\" + i);\n        }\n        for (int i = 0; i < 1000; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3/path4\" + \"_\" + i);\n        }\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        for (int i = 0; i < 10000; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5\" + \"_\" + i);\n        }\n        path6.join();\n        path7.join();\n        Map<String, Integer> newSlot = pathStatsQueue.collectStats(1);\n        assertEquals(newSlot.size(), 1);\n        assertEquals(newSlot.get(\"/path1\").intValue(), 1111112);\n        \r\n        newSlot = pathStatsQueue.collectStats(2);\n        assertEquals(newSlot.size(), 12);\n        assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        assertEquals(newSlot.get(\"/path1/path2\").intValue(), 1111101);\n        \r\n        newSlot = pathStatsQueue.collectStats(3);\n        assertEquals(newSlot.size(), 112);\n        assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        assertEquals(newSlot.get(\"/path1/path2/path3\").intValue(), 1111001);\n        \r\n        newSlot = pathStatsQueue.collectStats(4);\n        assertEquals(newSlot.size(), 1112);\n        assertEquals(newSlot.get(\"/path1/path2/path3/path4\").intValue(), 1110001);\n        \r\n        newSlot = pathStatsQueue.collectStats(5);\n        assertEquals(newSlot.size(), 11112);\n        assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5\").intValue(), 1100001);\n        \r\n        newSlot = pathStatsQueue.collectStats(6);\n        assertEquals(newSlot.size(), 111112);\n        assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5/path6\").intValue(), 1000001);\n    }\n","date":"2019-08-17 23:13:15","endLine":242,"groupId":"10272","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCollectStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/fc92c000c01ace42f061ad6ac094be8288d56e.src","preCode":"    public void testCollectStats() throws InterruptedException {\n        RequestPathMetricsCollector requestPathMetricsCollector =\n            new RequestPathMetricsCollector(true);\n        RequestPathMetricsCollector.PathStatsQueue pathStatsQueue =\n            requestPathMetricsCollector.new PathStatsQueue(getChildren);\n        pathStatsQueue.start();\n        Thread path7 = new Thread(() -> {\n            for(int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 100000; j++) {\n                    pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5/path6/path7\"\n                        + \"_\" + i + \"_\" + j);\n                }\n            }\n        });\n        path7.start();\n        Thread path6 = new Thread(() -> {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5/path6\");\n            for(int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 10000; j++) {\n                    pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5/path6\"\n                        + \"_\" + i + \"_\" + j);\n                }\n            }\n        });\n        path6.start();\n        for(int i = 0; i < 1; i++) {\n            pathStatsQueue.registerRequest(\"/path1\");\n        }        \n        for(int i = 0; i < 10; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2\"+\"_\"+i);\n        }\n        for(int i = 0; i < 100; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3\"+\"_\"+i);\n        }\n        for(int i = 0; i < 1000; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3/path4\"+\"_\"+i);\n        }\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        for(int i = 0; i < 10000; i++) {\n            pathStatsQueue.registerRequest(\"/path1/path2/path3/path4/path5\"+\"_\"+i);\n        }\n        path6.join();\n        path7.join();\n        Map<String, Integer> newSlot = pathStatsQueue.collectStats(1);\n        Assert.assertEquals(newSlot.size(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1\").intValue(), 1111112);\n        \r\n        newSlot = pathStatsQueue.collectStats(2);\n        Assert.assertEquals(newSlot.size(), 12);\n        Assert.assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1/path2\").intValue(), 1111101);\n        \r\n        newSlot = pathStatsQueue.collectStats(3);\n        Assert.assertEquals(newSlot.size(), 112);\n        Assert.assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3\").intValue(), 1111001);\n        \r\n        newSlot = pathStatsQueue.collectStats(4);\n        Assert.assertEquals(newSlot.size(), 1112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4\").intValue(), 1110001);\n        \r\n        newSlot = pathStatsQueue.collectStats(5);\n        Assert.assertEquals(newSlot.size(), 11112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5\").intValue(), 1100001);\n        \r\n        newSlot = pathStatsQueue.collectStats(6);\n        Assert.assertEquals(newSlot.size(), 111112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5/path6\").intValue(),\n            1000001);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testAggregate() throws InterruptedException {\n        RequestPathMetricsCollector requestPathMetricsCollector = new RequestPathMetricsCollector(true);\n        Thread path7 = new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 100000; j++) {\n                    requestPathMetricsCollector.registerRequest(getData, \"/path1/path2/path3/path4/path5/path6/path7\"\n                                                                                 + \"_\"\n                                                                                 + i\n                                                                                 + \"_\"\n                                                                                 + j);\n                }\n            }\n        });\n        path7.start();\n        Thread path6 = new Thread(() -> {\n            requestPathMetricsCollector.registerRequest(getChildren2, \"/path1/path2/path3/path4/path5/path6\");\n            for (int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 10000; j++) {\n                    requestPathMetricsCollector.registerRequest(getChildren, \"/path1/path2/path3/path4/path5/path6\"\n                                                                                     + \"_\"\n                                                                                     + i\n                                                                                     + \"_\"\n                                                                                     + j);\n                }\n            }\n        });\n        path6.start();\n        for (int i = 0; i < 1; i++) {\n            requestPathMetricsCollector.registerRequest(create2, \"/path1\");\n        }\n        for (int i = 0; i < 10; i++) {\n            requestPathMetricsCollector.registerRequest(create, \"/path1/path2\" + \"_\" + i);\n        }\n        for (int i = 0; i < 100; i++) {\n            requestPathMetricsCollector.registerRequest(delete, \"/path1/path2/path3\" + \"_\" + i);\n        }\n        for (int i = 0; i < 1000; i++) {\n            requestPathMetricsCollector.registerRequest(setData, \"/path1/path2/path3/path4\" + \"_\" + i);\n        }\n        for (int i = 0; i < 10000; i++) {\n            requestPathMetricsCollector.registerRequest(exists, \"/path1/path2/path3/path4/path5\" + \"_\" + i);\n        }\n        path6.join();\n        path7.join();\n        Map<String, Integer> newSlot = requestPathMetricsCollector.aggregatePaths(2, queue -> true);\n        assertEquals(newSlot.size(), 12);\n        assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        assertEquals(newSlot.get(\"/path1/path2\").intValue(), 1111101);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(3, queue -> true);\n        assertEquals(newSlot.size(), 112);\n        assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        assertEquals(newSlot.get(\"/path1/path2/path3\").intValue(), 1111001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(4, queue -> true);\n        assertEquals(newSlot.size(), 1112);\n        assertEquals(newSlot.get(\"/path1/path2/path3/path4\").intValue(), 1110001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(5, queue -> true);\n        assertEquals(newSlot.size(), 11112);\n        assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5\").intValue(), 1100001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(6, queue -> true);\n        assertEquals(newSlot.size(), 111112);\n        assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5/path6\").intValue(), 1000001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(7, queue -> true);\n        assertEquals(newSlot.size(), 111112);\n        assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5/path6\").intValue(), 1000001);\n        \r\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(4, queue -> !queue.isWriteOperation());\n        assertEquals(newSlot.size(), 1);\n        assertEquals(newSlot.get(\"/path1/path2/path3/path4\").intValue(), 1110001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(4, queue -> queue.isWriteOperation());\n        assertEquals(newSlot.size(), 1111);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(3, queue -> queue.isWriteOperation());\n        assertEquals(newSlot.size(), 112);\n        assertEquals(newSlot.get(\"/path1/path2/path3\").intValue(), 1000);\n    }\n","date":"2019-08-17 23:13:15","endLine":336,"groupId":"10272","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/fc92c000c01ace42f061ad6ac094be8288d56e.src","preCode":"    public void testAggregate() throws InterruptedException {\n        RequestPathMetricsCollector requestPathMetricsCollector =\n            new RequestPathMetricsCollector(true);\n        Thread path7 = new Thread(() -> {\n            for(int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 100000; j++) {\n                    requestPathMetricsCollector.registerRequest(getData,\n                        \"/path1/path2/path3/path4/path5/path6/path7\" + \"_\" + i + \"_\" + j);\n                }\n            }\n        });\n        path7.start();\n        Thread path6 = new Thread(() -> {\n            requestPathMetricsCollector.registerRequest(getChildren2,\n                \"/path1/path2/path3/path4/path5/path6\");\n            for(int i = 0; i < 10; i++) {\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                for (int j = 0; j < 10000; j++) {\n                    requestPathMetricsCollector.registerRequest(getChildren,\n                        \"/path1/path2/path3/path4/path5/path6\" + \"_\" + i + \"_\" + j);\n                }\n            }\n        });\n        path6.start();\n        for(int i = 0; i < 1; i++) {\n            requestPathMetricsCollector.registerRequest(create2,\n                \"/path1\");\n        }\n        for(int i = 0; i < 10; i++) {\n            requestPathMetricsCollector.registerRequest(create,\n                \"/path1/path2\"+\"_\"+i);\n        }\n        for(int i = 0; i < 100; i++) {\n            requestPathMetricsCollector.registerRequest(delete,\n                \"/path1/path2/path3\"+\"_\"+i);\n        }\n        for(int i = 0; i < 1000; i++) {\n            requestPathMetricsCollector.registerRequest(setData,\n                \"/path1/path2/path3/path4\"+\"_\"+i);\n        }\n        for(int i = 0; i < 10000; i++) {\n            requestPathMetricsCollector.registerRequest(exists,\n                \"/path1/path2/path3/path4/path5\"+\"_\"+i);\n        }\n        path6.join();\n        path7.join();\n        Map<String, Integer> newSlot = requestPathMetricsCollector.aggregatePaths(2,\n            queue -> true);\n        Assert.assertEquals(newSlot.size(), 12);\n        Assert.assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1/path2\").intValue(), 1111101);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(3, queue -> true);\n        Assert.assertEquals(newSlot.size(), 112);\n        Assert.assertEquals(newSlot.get(\"/path1\").intValue(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3\").intValue(), 1111001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(4, queue -> true);\n        Assert.assertEquals(newSlot.size(), 1112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4\").intValue(), 1110001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(5, queue -> true);\n        Assert.assertEquals(newSlot.size(), 11112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5\").intValue(), 1100001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(6, queue -> true);\n        Assert.assertEquals(newSlot.size(), 111112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5/path6\").intValue(), 1000001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(7, queue -> true);\n        Assert.assertEquals(newSlot.size(), 111112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4/path5/path6\").intValue(), 1000001);\n        \r\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(4, queue -> !queue.isWriteOperation());\n        Assert.assertEquals(newSlot.size(), 1);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3/path4\").intValue(), 1110001);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(4, queue -> queue.isWriteOperation());\n        Assert.assertEquals(newSlot.size(), 1111);\n        \r\n        newSlot = requestPathMetricsCollector.aggregatePaths(3, queue -> queue.isWriteOperation());\n        Assert.assertEquals(newSlot.size(), 112);\n        Assert.assertEquals(newSlot.get(\"/path1/path2/path3\").intValue(), 1000);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"}]
