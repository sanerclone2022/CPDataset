[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testPurgeTxnLogWithDataDir()\n            throws Exception {\n        tmpDir = ClientBase.createTmpDir();\n        File dataDir = new File(tmpDir, \"dataDir\");\n        File dataLogDir = new File(tmpDir, \"dataLogDir\");\n\n        File dataDirVersion2 = new File(dataDir, \"version-2\");\n        dataDirVersion2.mkdirs();\n        File dataLogDirVersion2 = new File(dataLogDir, \"version-2\");\n        dataLogDirVersion2.mkdirs();\n\n        \r\n        int totalFiles = 20;\n\n        \r\n        \r\n        for (int i = 0; i < totalFiles; i++) {\n            \r\n            File logFile = new File(dataLogDirVersion2, \"log.\"\n                    + Long.toHexString(i));\n            logFile.createNewFile();\n            \r\n            File snapFile = new File(dataDirVersion2, \"snapshot.\"\n                    + Long.toHexString(i));\n            snapFile.createNewFile();\n        }\n\n        int numberOfSnapFilesToKeep = 10;\n        \r\n        String[] args = new String[] { dataLogDir.getAbsolutePath(),\n                dataDir.getAbsolutePath(), \"-n\",\n                Integer.toString(numberOfSnapFilesToKeep) };\n        PurgeTxnLog.main(args);\n\n        assertEquals(numberOfSnapFilesToKeep, dataDirVersion2.listFiles().length);\n        \r\n        assertEquals(numberOfSnapFilesToKeep, dataLogDirVersion2.listFiles().length);\n        ClientBase.recursiveDelete(tmpDir);\n\n    }\n","date":"2018-10-05 20:25:43","endLine":389,"groupId":"4752","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPurgeTxnLogWithDataDir","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/78/98e6eaafeab60440558acd6eea55983410298b.src","preCode":"    public void testPurgeTxnLogWithDataDir()\n            throws Exception {\n        tmpDir = ClientBase.createTmpDir();\n        File dataDir = new File(tmpDir, \"dataDir\");\n        File dataLogDir = new File(tmpDir, \"dataLogDir\");\n\n        File dataDirVersion2 = new File(dataDir, \"version-2\");\n        dataDirVersion2.mkdirs();\n        File dataLogDirVersion2 = new File(dataLogDir, \"version-2\");\n        dataLogDirVersion2.mkdirs();\n\n        \r\n        int totalFiles = 20;\n\n        \r\n        \r\n        for (int i = 0; i < totalFiles; i++) {\n            \r\n            File logFile = new File(dataLogDirVersion2, \"log.\"\n                    + Long.toHexString(i));\n            logFile.createNewFile();\n            \r\n            File snapFile = new File(dataDirVersion2, \"snapshot.\"\n                    + Long.toHexString(i));\n            snapFile.createNewFile();\n        }\n\n        int numberOfSnapFilesToKeep = 10;\n        \r\n        String[] args = new String[] { dataLogDir.getAbsolutePath(),\n                dataDir.getAbsolutePath(), \"-n\",\n                Integer.toString(numberOfSnapFilesToKeep) };\n        PurgeTxnLog.main(args);\n\n        assertEquals(numberOfSnapFilesToKeep, dataDirVersion2.listFiles().length);\n        \r\n        assertEquals(numberOfSnapFilesToKeep, dataLogDirVersion2.listFiles().length);\n        ClientBase.recursiveDelete(tmpDir);\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/PurgeTxnTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":350,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testPurgeTxnLogWithoutDataDir()\n            throws Exception {\n        tmpDir = ClientBase.createTmpDir();\n        File dataDir = new File(tmpDir, \"dataDir\");\n        File dataLogDir = new File(tmpDir, \"dataLogDir\");\n\n        File dataDirVersion2 = new File(dataDir, \"version-2\");\n        dataDirVersion2.mkdirs();\n        File dataLogDirVersion2 = new File(dataLogDir, \"version-2\");\n        dataLogDirVersion2.mkdirs();\n\n        \r\n        int totalFiles = 20;\n\n        \r\n        for (int i = 0; i < totalFiles; i++) {\n            \r\n            File logFile = new File(dataLogDirVersion2, \"log.\"\n                    + Long.toHexString(i));\n            logFile.createNewFile();\n            \r\n            File snapFile = new File(dataLogDirVersion2, \"snapshot.\"\n                    + Long.toHexString(i));\n            snapFile.createNewFile();\n        }\n\n        int numberOfSnapFilesToKeep = 10;\n        \r\n        String[] args = new String[] { dataLogDir.getAbsolutePath(), \"-n\",\n                Integer.toString(numberOfSnapFilesToKeep) };\n        PurgeTxnLog.main(args);\n        assertEquals(numberOfSnapFilesToKeep * 2, \r\n                dataLogDirVersion2.listFiles().length);\n        ClientBase.recursiveDelete(tmpDir);\n\n    }\n","date":"2018-10-05 20:25:43","endLine":431,"groupId":"4752","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPurgeTxnLogWithoutDataDir","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/78/98e6eaafeab60440558acd6eea55983410298b.src","preCode":"    public void testPurgeTxnLogWithoutDataDir()\n            throws Exception {\n        tmpDir = ClientBase.createTmpDir();\n        File dataDir = new File(tmpDir, \"dataDir\");\n        File dataLogDir = new File(tmpDir, \"dataLogDir\");\n\n        File dataDirVersion2 = new File(dataDir, \"version-2\");\n        dataDirVersion2.mkdirs();\n        File dataLogDirVersion2 = new File(dataLogDir, \"version-2\");\n        dataLogDirVersion2.mkdirs();\n\n        \r\n        int totalFiles = 20;\n\n        \r\n        for (int i = 0; i < totalFiles; i++) {\n            \r\n            File logFile = new File(dataLogDirVersion2, \"log.\"\n                    + Long.toHexString(i));\n            logFile.createNewFile();\n            \r\n            File snapFile = new File(dataLogDirVersion2, \"snapshot.\"\n                    + Long.toHexString(i));\n            snapFile.createNewFile();\n        }\n\n        int numberOfSnapFilesToKeep = 10;\n        \r\n        String[] args = new String[] { dataLogDir.getAbsolutePath(), \"-n\",\n                Integer.toString(numberOfSnapFilesToKeep) };\n        PurgeTxnLog.main(args);\n        assertEquals(numberOfSnapFilesToKeep * 2, \r\n                dataLogDirVersion2.listFiles().length);\n        ClientBase.recursiveDelete(tmpDir);\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/PurgeTxnTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2020-01-30 16:43:09","codes":[{"authorDate":"2020-01-30 16:43:09","commitOrder":2,"curCode":"    public void testPurgeTxnLogWithDataDir() throws Exception {\n        File dataDir = new File(tmpDir, \"dataDir\");\n        File dataLogDir = new File(tmpDir, \"dataLogDir\");\n\n        File dataDirVersion2 = new File(dataDir, \"version-2\");\n        dataDirVersion2.mkdirs();\n        File dataLogDirVersion2 = new File(dataLogDir, \"version-2\");\n        dataLogDirVersion2.mkdirs();\n\n        \r\n        int totalFiles = 20;\n\n        \r\n        \r\n        for (int i = 0; i < totalFiles; i++) {\n            \r\n            File logFile = new File(dataLogDirVersion2, \"log.\" + Long.toHexString(i));\n            logFile.createNewFile();\n            \r\n            File snapFile = new File(dataDirVersion2, \"snapshot.\" + Long.toHexString(i));\n            snapFile.createNewFile();\n            makeValidSnapshot(snapFile);\n        }\n\n        int numberOfSnapFilesToKeep = 10;\n        \r\n        String[] args = new String[]{dataLogDir.getAbsolutePath(), dataDir.getAbsolutePath(), \"-n\", Integer.toString(numberOfSnapFilesToKeep)};\n        PurgeTxnLog.main(args);\n\n        assertEquals(numberOfSnapFilesToKeep, dataDirVersion2.listFiles().length);\n        \r\n        assertEquals(numberOfSnapFilesToKeep, dataLogDirVersion2.listFiles().length);\n    }\n","date":"2020-01-30 16:43:09","endLine":369,"groupId":"1089","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPurgeTxnLogWithDataDir","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/29/c1027949e6031e450b9681c5d40e9f428217cc.src","preCode":"    public void testPurgeTxnLogWithDataDir() throws Exception {\n        tmpDir = ClientBase.createTmpDir();\n        File dataDir = new File(tmpDir, \"dataDir\");\n        File dataLogDir = new File(tmpDir, \"dataLogDir\");\n\n        File dataDirVersion2 = new File(dataDir, \"version-2\");\n        dataDirVersion2.mkdirs();\n        File dataLogDirVersion2 = new File(dataLogDir, \"version-2\");\n        dataLogDirVersion2.mkdirs();\n\n        \r\n        int totalFiles = 20;\n\n        \r\n        \r\n        for (int i = 0; i < totalFiles; i++) {\n            \r\n            File logFile = new File(dataLogDirVersion2, \"log.\" + Long.toHexString(i));\n            logFile.createNewFile();\n            \r\n            File snapFile = new File(dataDirVersion2, \"snapshot.\" + Long.toHexString(i));\n            snapFile.createNewFile();\n        }\n\n        int numberOfSnapFilesToKeep = 10;\n        \r\n        String[] args = new String[]{dataLogDir.getAbsolutePath(), dataDir.getAbsolutePath(), \"-n\", Integer.toString(numberOfSnapFilesToKeep)};\n        PurgeTxnLog.main(args);\n\n        assertEquals(numberOfSnapFilesToKeep, dataDirVersion2.listFiles().length);\n        \r\n        assertEquals(numberOfSnapFilesToKeep, dataLogDirVersion2.listFiles().length);\n        ClientBase.recursiveDelete(tmpDir);\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/PurgeTxnTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"M"},{"authorDate":"2020-01-30 16:43:09","commitOrder":2,"curCode":"    public void testPurgeTxnLogWithoutDataDir() throws Exception {\n        File dataDir = new File(tmpDir, \"dataDir\");\n        File dataLogDir = new File(tmpDir, \"dataLogDir\");\n\n        File dataDirVersion2 = new File(dataDir, \"version-2\");\n        dataDirVersion2.mkdirs();\n        File dataLogDirVersion2 = new File(dataLogDir, \"version-2\");\n        dataLogDirVersion2.mkdirs();\n\n        \r\n        int totalFiles = 20;\n\n        \r\n        for (int i = 0; i < totalFiles; i++) {\n            \r\n            File logFile = new File(dataLogDirVersion2, \"log.\" + Long.toHexString(i));\n            logFile.createNewFile();\n            \r\n            File snapFile = new File(dataLogDirVersion2, \"snapshot.\" + Long.toHexString(i));\n            snapFile.createNewFile();\n            makeValidSnapshot(snapFile);\n        }\n\n        int numberOfSnapFilesToKeep = 10;\n        \r\n        String[] args = new String[]{dataLogDir.getAbsolutePath(), \"-n\", Integer.toString(numberOfSnapFilesToKeep)};\n        PurgeTxnLog.main(args);\n        assertEquals(\n                numberOfSnapFilesToKeep\n                        * 2, \r\n                dataLogDirVersion2.listFiles().length);\n    }\n","date":"2020-01-30 16:43:09","endLine":407,"groupId":"1089","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPurgeTxnLogWithoutDataDir","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/29/c1027949e6031e450b9681c5d40e9f428217cc.src","preCode":"    public void testPurgeTxnLogWithoutDataDir() throws Exception {\n        tmpDir = ClientBase.createTmpDir();\n        File dataDir = new File(tmpDir, \"dataDir\");\n        File dataLogDir = new File(tmpDir, \"dataLogDir\");\n\n        File dataDirVersion2 = new File(dataDir, \"version-2\");\n        dataDirVersion2.mkdirs();\n        File dataLogDirVersion2 = new File(dataLogDir, \"version-2\");\n        dataLogDirVersion2.mkdirs();\n\n        \r\n        int totalFiles = 20;\n\n        \r\n        for (int i = 0; i < totalFiles; i++) {\n            \r\n            File logFile = new File(dataLogDirVersion2, \"log.\" + Long.toHexString(i));\n            logFile.createNewFile();\n            \r\n            File snapFile = new File(dataLogDirVersion2, \"snapshot.\" + Long.toHexString(i));\n            snapFile.createNewFile();\n        }\n\n        int numberOfSnapFilesToKeep = 10;\n        \r\n        String[] args = new String[]{dataLogDir.getAbsolutePath(), \"-n\", Integer.toString(numberOfSnapFilesToKeep)};\n        PurgeTxnLog.main(args);\n        assertEquals(\n                numberOfSnapFilesToKeep\n                        * 2, \r\n                dataLogDirVersion2.listFiles().length);\n        ClientBase.recursiveDelete(tmpDir);\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/PurgeTxnTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"}],"commitId":"2abdfbc261d4ba2f9d17b51f2b46ab748a7d451f","commitMessage":"@@@ZOOKEEPER-3231: Purge task may lost data when the recent snapshots are all invalid\n\n- Purge task uses `FileTxnSnapLog#findNRecentSnapshot`.  which's likely to lost data when the recent 3 snapshots are all invalid(a new valid snapshot has not generated yet) and at the same time.  Purge task(`e.g ./zkCleanup.sh -n 3`) has started a new round work to clean up the preceding snapshots. we will lose all the data.that's a small probability events.  but it's reproducible.\n- Overall.  using `snaplog.findNValidSnapshots` to make sure the purge task tries to retain N valid snapshots(rather than N snapshots) to avoid a risk of data loss.\n- For the unit test.  it's not easy to use the `mock` way for the following reasons:\n   - when we want to test the `dataDir` which some Snapshots are valid.  others not.Just writing a little data contents to the snapshot to make it valid/invalid has a better flexibility.\n   - too much code changes in the `PurgeTxnTest.java`(pass the original UT) and `FileTxnSnapLog.java`(have some handles)\n- more details in the [ZOOKEEPER-3231](https://issues.apache.org/jira/browse/ZOOKEEPER-3231)\n\nAuthor: maoling <maoling199210191@sina.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1079 from maoling/ZOOKEEPER-3231 and squashes the following commits:\n\n674175bef [maoling] setUp() & tearDown().\n472dfd33c [maoling] ZOOKEEPER-3231:Purge task may lost data when the recent snapshots are all invalid\n","date":"2020-01-30 16:43:09","modifiedFileCount":"4","status":"M","submitter":"maoling"}]
