[{"authorTime":"2019-11-09 00:30:25","codes":[{"authorDate":"2019-11-09 00:30:25","commitOrder":1,"curCode":"    public void testBasicAsync()\n            throws IOException, InterruptedException, KeeperException {\n        CountdownWatcher watcher = new CountdownWatcher() {\n            @Override\n            public synchronized void process(WatchedEvent event) {\n                super.process(event);\n                events.add(event);\n            }\n        };\n        try (ZooKeeper zk = createClient(watcher, hostPort)) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            AsyncCallback.VoidCallback cb = (rc, path, ctx) -> {\n                if (rc == 0) {\n                    latch.countDown();\n                }\n            };\n            zk.addWatch(\"/a/b\", persistentWatcher, PERSISTENT, cb, null);\n            Assert.assertTrue(latch.await(5, TimeUnit.SECONDS));\n            events.clear(); \r\n            internalTestBasic(zk);\n        }\n    }\n","date":"2019-11-09 00:30:25","endLine":102,"groupId":"437","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/bf/fa8e0a2db283200fe9b3d9d16073bde807eefb.src","preCode":"    public void testBasicAsync()\n            throws IOException, InterruptedException, KeeperException {\n        CountdownWatcher watcher = new CountdownWatcher() {\n            @Override\n            public synchronized void process(WatchedEvent event) {\n                super.process(event);\n                events.add(event);\n            }\n        };\n        try (ZooKeeper zk = createClient(watcher, hostPort)) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            AsyncCallback.VoidCallback cb = (rc, path, ctx) -> {\n                if (rc == 0) {\n                    latch.countDown();\n                }\n            };\n            zk.addWatch(\"/a/b\", persistentWatcher, PERSISTENT, cb, null);\n            Assert.assertTrue(latch.await(5, TimeUnit.SECONDS));\n            events.clear(); \r\n            internalTestBasic(zk);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/PersistentWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"},{"authorDate":"2019-11-09 00:30:25","commitOrder":1,"curCode":"    public void testAsyncDefaultWatcher()\n            throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient(new CountdownWatcher(), hostPort)) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            AsyncCallback.VoidCallback cb = (rc, path, ctx) -> {\n                if (rc == 0) {\n                    latch.countDown();\n                }\n            };\n            zk.addWatch(\"/a/b\", persistentWatcher, PERSISTENT, cb, null);\n            Assert.assertTrue(latch.await(5, TimeUnit.SECONDS));\n            internalTestBasic(zk);\n        }\n    }\n","date":"2019-11-09 00:30:25","endLine":118,"groupId":"437","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsyncDefaultWatcher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/bf/fa8e0a2db283200fe9b3d9d16073bde807eefb.src","preCode":"    public void testAsyncDefaultWatcher()\n            throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient(new CountdownWatcher(), hostPort)) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            AsyncCallback.VoidCallback cb = (rc, path, ctx) -> {\n                if (rc == 0) {\n                    latch.countDown();\n                }\n            };\n            zk.addWatch(\"/a/b\", persistentWatcher, PERSISTENT, cb, null);\n            Assert.assertTrue(latch.await(5, TimeUnit.SECONDS));\n            internalTestBasic(zk);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/PersistentWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"}],"commitId":"553639378d5cf86c2488afff4586e5e4cce38061","commitMessage":"@@@ZOOKEEPER-1416 - Persistent.  recursive watchers\n\n\n Background\n\nNote: this is a port of https://github.com/apache/zookeeper/pull/136\n\nImplementation for a persistent.  recursive watch addition for ZK. These watches are set via a new method.  addPersistentWatch() and are removed via the existing watcher removal methods. Persistent.  recursive watches have these characteristics: a) Once set.  they do not auto-remove when triggered; b) they trigger for all event types (child.  data.  etc.) on the node they are registered for and any child znode recursively; c) they are efficiently implemented by using the existing watch internals. A new class PathIterator walks up the path parent-by-parent when checking if a watcher applies.\n\n\n Implementation Details\n\n- A new enum manages the different \"modes\" for watchers: `WatcherMode`.\n- For traditional.  \"standard\" watchers.  the code path is almost exactly the same. There is very little overhead other than a bit of extra checks in `WatchManager`\n- Given how this is implemented it was difficult to add support when `WatchManagerOptimized` is used. I'm open to adding it for that version but it will take work. We should consider not supporting persistent/recursive watchers when WatchManagerOptimized is used. I notice that `WatchManagerOptimized` is not even mentioned in the docs.\n- The mode for a given watcher/path pair is held in a map inside of `WatcherModeManager`. The absence of an entry means Standard. This way.  there's no overhead for old.  standard watchers.\n- `PathParentIterator` is the \"meat\" of the implementation. Rather than set watchers on every ZNode implied by a recursive watcher. WatchManager passes any paths it processes through PathParentIterator which iterates up each parent znode looking for watchers.\n- The remainder of the changes are scaffolding to match how other watchers are used as well as Jute/API changes to set persistent/recursive watchers\n\n\n Testing\n\nThe tests were written years ago. I think they're comprehensive but reviewers should pay attention to anything that was missed. There is much ZooKeeper knowledge that's only in the heads of ZK committers.\n\n- `PersistentWatcherTest` - tests persistent.  non-recursive watchers\n- `PersistentRecursiveWatcherTest` - tests persistent.  recursive watchers\n- `PathParentIteratorTest`- exercises edges of PathParentIterator\n\nAuthor: randgalt <jordan@jordanzimmerman.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache. org>.  Norbert Kalmar <nkalmar@apache.org>.  Andor Moln?r <andor@apache.org>.  Justin Mao Ling <maoling199210191@sina.com>\n\nCloses #1106 from Randgalt/ZOOKEEPER-1416\n","date":"2019-11-09 00:30:25","modifiedFileCount":"14","status":"B","submitter":"randgalt"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":2,"curCode":"    public void testBasicAsync()\n            throws IOException, InterruptedException, KeeperException {\n        CountdownWatcher watcher = new CountdownWatcher() {\n            @Override\n            public synchronized void process(WatchedEvent event) {\n                super.process(event);\n                events.add(event);\n            }\n        };\n        try (ZooKeeper zk = createClient(watcher, hostPort)) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            AsyncCallback.VoidCallback cb = (rc, path, ctx) -> {\n                if (rc == 0) {\n                    latch.countDown();\n                }\n            };\n            zk.addWatch(\"/a/b\", persistentWatcher, PERSISTENT, cb, null);\n            assertTrue(latch.await(5, TimeUnit.SECONDS));\n            events.clear(); \r\n            internalTestBasic(zk);\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":104,"groupId":"437","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/4e/6a0ff1154e126a370181d2a6788a685fdaefd7.src","preCode":"    public void testBasicAsync()\n            throws IOException, InterruptedException, KeeperException {\n        CountdownWatcher watcher = new CountdownWatcher() {\n            @Override\n            public synchronized void process(WatchedEvent event) {\n                super.process(event);\n                events.add(event);\n            }\n        };\n        try (ZooKeeper zk = createClient(watcher, hostPort)) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            AsyncCallback.VoidCallback cb = (rc, path, ctx) -> {\n                if (rc == 0) {\n                    latch.countDown();\n                }\n            };\n            zk.addWatch(\"/a/b\", persistentWatcher, PERSISTENT, cb, null);\n            Assert.assertTrue(latch.await(5, TimeUnit.SECONDS));\n            events.clear(); \r\n            internalTestBasic(zk);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/PersistentWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":2,"curCode":"    public void testAsyncDefaultWatcher()\n            throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient(new CountdownWatcher(), hostPort)) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            AsyncCallback.VoidCallback cb = (rc, path, ctx) -> {\n                if (rc == 0) {\n                    latch.countDown();\n                }\n            };\n            zk.addWatch(\"/a/b\", persistentWatcher, PERSISTENT, cb, null);\n            assertTrue(latch.await(5, TimeUnit.SECONDS));\n            internalTestBasic(zk);\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":120,"groupId":"437","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsyncDefaultWatcher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/4e/6a0ff1154e126a370181d2a6788a685fdaefd7.src","preCode":"    public void testAsyncDefaultWatcher()\n            throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient(new CountdownWatcher(), hostPort)) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            AsyncCallback.VoidCallback cb = (rc, path, ctx) -> {\n                if (rc == 0) {\n                    latch.countDown();\n                }\n            };\n            zk.addWatch(\"/a/b\", persistentWatcher, PERSISTENT, cb, null);\n            Assert.assertTrue(latch.await(5, TimeUnit.SECONDS));\n            internalTestBasic(zk);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/PersistentWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"},{"authorTime":"2020-10-28 18:18:26","codes":[{"authorDate":"2020-10-28 18:18:26","commitOrder":3,"curCode":"    public void testBasicAsync()\n            throws IOException, InterruptedException, KeeperException {\n        CountdownWatcher watcher = new CountdownWatcher() {\n            @Override\n            public synchronized void process(WatchedEvent event) {\n                super.process(event);\n                events.add(event);\n            }\n        };\n        try (ZooKeeper zk = createClient(watcher, hostPort)) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            AsyncCallback.VoidCallback cb = (rc, path, ctx) -> {\n                if (rc == KeeperException.Code.OK.intValue()) {\n                    latch.countDown();\n                }\n            };\n            zk.addWatch(\"/a/b\", persistentWatcher, PERSISTENT, cb, null);\n            assertTrue(latch.await(5, TimeUnit.SECONDS));\n            events.clear(); \r\n            internalTestBasic(zk);\n        }\n    }\n","date":"2020-10-28 18:18:26","endLine":104,"groupId":"10578","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/75/4ba76ae84ace9e38a652d1bf18442cd7084252.src","preCode":"    public void testBasicAsync()\n            throws IOException, InterruptedException, KeeperException {\n        CountdownWatcher watcher = new CountdownWatcher() {\n            @Override\n            public synchronized void process(WatchedEvent event) {\n                super.process(event);\n                events.add(event);\n            }\n        };\n        try (ZooKeeper zk = createClient(watcher, hostPort)) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            AsyncCallback.VoidCallback cb = (rc, path, ctx) -> {\n                if (rc == 0) {\n                    latch.countDown();\n                }\n            };\n            zk.addWatch(\"/a/b\", persistentWatcher, PERSISTENT, cb, null);\n            assertTrue(latch.await(5, TimeUnit.SECONDS));\n            events.clear(); \r\n            internalTestBasic(zk);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/PersistentWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2020-10-28 18:18:26","commitOrder":3,"curCode":"    public void testAsyncDefaultWatcher()\n            throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient(new CountdownWatcher(), hostPort)) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            AsyncCallback.VoidCallback cb = (rc, path, ctx) -> {\n                if (rc == KeeperException.Code.OK.intValue()) {\n                    latch.countDown();\n                }\n            };\n            zk.addWatch(\"/a/b\", persistentWatcher, PERSISTENT, cb, null);\n            assertTrue(latch.await(5, TimeUnit.SECONDS));\n            internalTestBasic(zk);\n        }\n    }\n","date":"2020-10-28 18:18:26","endLine":120,"groupId":"10578","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsyncDefaultWatcher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/75/4ba76ae84ace9e38a652d1bf18442cd7084252.src","preCode":"    public void testAsyncDefaultWatcher()\n            throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient(new CountdownWatcher(), hostPort)) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            AsyncCallback.VoidCallback cb = (rc, path, ctx) -> {\n                if (rc == 0) {\n                    latch.countDown();\n                }\n            };\n            zk.addWatch(\"/a/b\", persistentWatcher, PERSISTENT, cb, null);\n            assertTrue(latch.await(5, TimeUnit.SECONDS));\n            internalTestBasic(zk);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/PersistentWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"b59bf6b40d9948e4a9034b6342b7f98a71d8d616","commitMessage":"@@@ZOOKEEPER-3926: Remove hardcoded comparisons to more maintainable an?\n\n?d readable comparisons.\n\nThere are many more such instances in some tests etc but didn't change them here as the coding guidelines suggested to only make changes related to what is asked in the jira. Can take those up in a new Jira if this is accepted by the maintainers as worthwhile.\n\nAuthor: Ghatage <ghatageanup@gmail.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Damien Diederen <ddiederen@apache.org>\n\nCloses #1497 from Ghatage/ZOOKEEPER-3926\n","date":"2020-10-28 18:18:26","modifiedFileCount":"7","status":"M","submitter":"Anup Ghatage"}]
