[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    private static void serializeTree(int depth, int width, int len)\n            throws InterruptedException, IOException, KeeperException.NodeExistsException, KeeperException.NoNodeException {\n        DataTree tree = new DataTree();\n        createNodes(tree, \"/\", depth, width, tree.getNode(\"/\").stat.getCversion(), new byte[len]);\n        int count = tree.getNodeCount();\n\n        BinaryOutputArchive oa =\n            BinaryOutputArchive.getArchive(new NullOutputStream());\n        System.gc();\n        long start = System.nanoTime();\n        tree.serialize(oa, \"test\");\n        long end = System.nanoTime();\n        long durationms = (end - start)/1000000L;\n        long pernodeus = ((end - start)/1000L)/count;\n        LOG.info(\"Serialized \" + count + \" nodes in \"\n                + durationms + \" ms (\" + pernodeus + \"us/node), depth=\"\n                + depth + \" width=\" + width + \" datalen=\" + len);\n    }\n","date":"2018-10-05 20:25:43","endLine":76,"groupId":"4703","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeTree","params":"(intdepth@intwidth@intlen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/43/982322dfe872f568e0801ef3def547a011a1ba.src","preCode":"    private static void serializeTree(int depth, int width, int len)\n            throws InterruptedException, IOException, KeeperException.NodeExistsException, KeeperException.NoNodeException {\n        DataTree tree = new DataTree();\n        createNodes(tree, \"/\", depth, width, tree.getNode(\"/\").stat.getCversion(), new byte[len]);\n        int count = tree.getNodeCount();\n\n        BinaryOutputArchive oa =\n            BinaryOutputArchive.getArchive(new NullOutputStream());\n        System.gc();\n        long start = System.nanoTime();\n        tree.serialize(oa, \"test\");\n        long end = System.nanoTime();\n        long durationms = (end - start)/1000000L;\n        long pernodeus = ((end - start)/1000L)/count;\n        LOG.info(\"Serialized \" + count + \" nodes in \"\n                + durationms + \" ms (\" + pernodeus + \"us/node), depth=\"\n                + depth + \" width=\" + width + \" datalen=\" + len);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/SerializationPerfTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    private static void deserializeTree(int depth, int width, int len)\n            throws InterruptedException, IOException, KeeperException.NodeExistsException, KeeperException.NoNodeException {\n        BinaryInputArchive ia;\n        int count;\n        {\n            DataTree tree = new DataTree();\n            SerializationPerfTest.createNodes(tree, \"/\", depth, width, tree.getNode(\"/\").stat.getCversion(), new byte[len]);\n            count = tree.getNodeCount();\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            BinaryOutputArchive oa = BinaryOutputArchive.getArchive(baos);\n            tree.serialize(oa, \"test\");\n            baos.flush();\n\n            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n            ia = BinaryInputArchive.getArchive(bais);\n        }\n\n        DataTree dserTree = new DataTree();\n\n        System.gc();\n        long start = System.nanoTime();\n        dserTree.deserialize(ia, \"test\");\n        long end = System.nanoTime();\n        long durationms = (end - start) / 1000000L;\n        long pernodeus = ((end - start) / 1000L) / count;\n\n        Assert.assertEquals(count, dserTree.getNodeCount());\n\n        LOG.info(\"Deserialized \" + count + \" nodes in \" + durationms\n                + \" ms (\" + pernodeus + \"us/node), depth=\" + depth + \" width=\"\n                + width + \" datalen=\" + len);\n    }\n","date":"2018-10-05 20:25:43","endLine":69,"groupId":"893","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeTree","params":"(intdepth@intwidth@intlen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b9/f1df8cc4de845783515ee9d7010f4f3d8327d1.src","preCode":"    private static void deserializeTree(int depth, int width, int len)\n            throws InterruptedException, IOException, KeeperException.NodeExistsException, KeeperException.NoNodeException {\n        BinaryInputArchive ia;\n        int count;\n        {\n            DataTree tree = new DataTree();\n            SerializationPerfTest.createNodes(tree, \"/\", depth, width, tree.getNode(\"/\").stat.getCversion(), new byte[len]);\n            count = tree.getNodeCount();\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            BinaryOutputArchive oa = BinaryOutputArchive.getArchive(baos);\n            tree.serialize(oa, \"test\");\n            baos.flush();\n\n            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n            ia = BinaryInputArchive.getArchive(bais);\n        }\n\n        DataTree dserTree = new DataTree();\n\n        System.gc();\n        long start = System.nanoTime();\n        dserTree.deserialize(ia, \"test\");\n        long end = System.nanoTime();\n        long durationms = (end - start) / 1000000L;\n        long pernodeus = ((end - start) / 1000L) / count;\n\n        Assert.assertEquals(count, dserTree.getNodeCount());\n\n        LOG.info(\"Deserialized \" + count + \" nodes in \" + durationms\n                + \" ms (\" + pernodeus + \"us/node), depth=\" + depth + \" width=\"\n                + width + \" datalen=\" + len);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/DeserializationPerfTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":2,"curCode":"    private static void serializeTree(int depth, int width, int len)\n            throws InterruptedException, IOException, KeeperException.NodeExistsException, KeeperException.NoNodeException {\n        DataTree tree = new DataTree();\n        createNodes(tree, \"/\", depth, width, tree.getNode(\"/\").stat.getCversion(), new byte[len]);\n        int count = tree.getNodeCount();\n\n        BinaryOutputArchive oa =\n            BinaryOutputArchive.getArchive(new NullOutputStream());\n        System.gc();\n        long start = System.nanoTime();\n        tree.serialize(oa, \"test\");\n        long end = System.nanoTime();\n        long durationms = (end - start)/1000000L;\n        long pernodeus = ((end - start)/1000L)/count;\n        LOG.info(\"Serialized \" + count + \" nodes in \"\n                + durationms + \" ms (\" + pernodeus + \"us/node), depth=\"\n                + depth + \" width=\" + width + \" datalen=\" + len);\n    }\n","date":"2018-10-05 20:25:43","endLine":76,"groupId":"4703","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeTree","params":"(intdepth@intwidth@intlen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/43/982322dfe872f568e0801ef3def547a011a1ba.src","preCode":"    private static void serializeTree(int depth, int width, int len)\n            throws InterruptedException, IOException, KeeperException.NodeExistsException, KeeperException.NoNodeException {\n        DataTree tree = new DataTree();\n        createNodes(tree, \"/\", depth, width, tree.getNode(\"/\").stat.getCversion(), new byte[len]);\n        int count = tree.getNodeCount();\n\n        BinaryOutputArchive oa =\n            BinaryOutputArchive.getArchive(new NullOutputStream());\n        System.gc();\n        long start = System.nanoTime();\n        tree.serialize(oa, \"test\");\n        long end = System.nanoTime();\n        long durationms = (end - start)/1000000L;\n        long pernodeus = ((end - start)/1000L)/count;\n        LOG.info(\"Serialized \" + count + \" nodes in \"\n                + durationms + \" ms (\" + pernodeus + \"us/node), depth=\"\n                + depth + \" width=\" + width + \" datalen=\" + len);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/SerializationPerfTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"N"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    private static void deserializeTree(int depth, int width, int len) throws InterruptedException, IOException, KeeperException.NodeExistsException, KeeperException.NoNodeException {\n        BinaryInputArchive ia;\n        int count;\n        {\n            DataTree tree = new DataTree();\n            SerializationPerfTest.createNodes(tree, \"/\", depth, width, tree.getNode(\"/\").stat.getCversion(), new byte[len]);\n            count = tree.getNodeCount();\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            BinaryOutputArchive oa = BinaryOutputArchive.getArchive(baos);\n            tree.serialize(oa, \"test\");\n            baos.flush();\n\n            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n            ia = BinaryInputArchive.getArchive(bais);\n        }\n\n        DataTree dserTree = new DataTree();\n\n        System.gc();\n        long start = System.nanoTime();\n        dserTree.deserialize(ia, \"test\");\n        long end = System.nanoTime();\n        long durationms = (end - start) / 1000000L;\n        long pernodeus = ((end - start) / 1000L) / count;\n\n        assertEquals(count, dserTree.getNodeCount());\n\n        LOG.info(\"Deserialized \"\n                         + count\n                         + \" nodes in \"\n                         + durationms\n                         + \" ms (\"\n                         + pernodeus\n                         + \"us/node), depth=\"\n                         + depth\n                         + \" width=\"\n                         + width\n                         + \" datalen=\"\n                         + len);\n    }\n","date":"2019-08-17 23:13:15","endLine":77,"groupId":"893","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeTree","params":"(intdepth@intwidth@intlen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/7b/12b8452e9172c91ee54b69dde63203e589e595.src","preCode":"    private static void deserializeTree(int depth, int width, int len)\n            throws InterruptedException, IOException, KeeperException.NodeExistsException, KeeperException.NoNodeException {\n        BinaryInputArchive ia;\n        int count;\n        {\n            DataTree tree = new DataTree();\n            SerializationPerfTest.createNodes(tree, \"/\", depth, width, tree.getNode(\"/\").stat.getCversion(), new byte[len]);\n            count = tree.getNodeCount();\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            BinaryOutputArchive oa = BinaryOutputArchive.getArchive(baos);\n            tree.serialize(oa, \"test\");\n            baos.flush();\n\n            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n            ia = BinaryInputArchive.getArchive(bais);\n        }\n\n        DataTree dserTree = new DataTree();\n\n        System.gc();\n        long start = System.nanoTime();\n        dserTree.deserialize(ia, \"test\");\n        long end = System.nanoTime();\n        long durationms = (end - start) / 1000000L;\n        long pernodeus = ((end - start) / 1000L) / count;\n\n        Assert.assertEquals(count, dserTree.getNodeCount());\n\n        LOG.info(\"Deserialized \" + count + \" nodes in \" + durationms\n                + \" ms (\" + pernodeus + \"us/node), depth=\" + depth + \" width=\"\n                + width + \" datalen=\" + len);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/DeserializationPerfTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2019-10-10 20:37:45","commitOrder":3,"curCode":"    private static void serializeTree(int depth, int width, int len) throws InterruptedException, IOException, KeeperException.NodeExistsException, KeeperException.NoNodeException {\n        DataTree tree = new DataTree();\n        createNodes(tree, \"/\", depth, width, tree.getNode(\"/\").stat.getCversion(), new byte[len]);\n        int count = tree.getNodeCount();\n\n        BinaryOutputArchive oa = BinaryOutputArchive.getArchive(new NullOutputStream());\n        System.gc();\n        long start = System.nanoTime();\n        tree.serialize(oa, \"test\");\n        long end = System.nanoTime();\n        long durationms = (end - start) / 1000000L;\n        long pernodeus = ((end - start) / 1000L) / count;\n        LOG.info(\n            \"Serialized {} nodes in {} ms ({}us/node), depth={} width={} datalen={}\",\n            count,\n            durationms,\n            pernodeus,\n            depth,\n            width,\n            len);\n    }\n","date":"2019-10-10 20:37:45","endLine":80,"groupId":"1061","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeTree","params":"(intdepth@intwidth@intlen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/1f/f0a76f6d40643a674fbdedfb5d907252282d99.src","preCode":"    private static void serializeTree(int depth, int width, int len) throws InterruptedException, IOException, KeeperException.NodeExistsException, KeeperException.NoNodeException {\n        DataTree tree = new DataTree();\n        createNodes(tree, \"/\", depth, width, tree.getNode(\"/\").stat.getCversion(), new byte[len]);\n        int count = tree.getNodeCount();\n\n        BinaryOutputArchive oa = BinaryOutputArchive.getArchive(new NullOutputStream());\n        System.gc();\n        long start = System.nanoTime();\n        tree.serialize(oa, \"test\");\n        long end = System.nanoTime();\n        long durationms = (end - start) / 1000000L;\n        long pernodeus = ((end - start) / 1000L) / count;\n        LOG.info(\"Serialized \"\n                 + count + \" nodes in \"\n                 + durationms + \" ms (\"\n                 + pernodeus + \"us/node), depth=\" + depth\n                 + \" width=\" + width\n                 + \" datalen=\" + len);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/SerializationPerfTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2019-10-10 20:37:45","commitOrder":3,"curCode":"    private static void deserializeTree(int depth, int width, int len) throws InterruptedException, IOException, KeeperException.NodeExistsException, KeeperException.NoNodeException {\n        BinaryInputArchive ia;\n        int count;\n        {\n            DataTree tree = new DataTree();\n            SerializationPerfTest.createNodes(tree, \"/\", depth, width, tree.getNode(\"/\").stat.getCversion(), new byte[len]);\n            count = tree.getNodeCount();\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            BinaryOutputArchive oa = BinaryOutputArchive.getArchive(baos);\n            tree.serialize(oa, \"test\");\n            baos.flush();\n\n            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n            ia = BinaryInputArchive.getArchive(bais);\n        }\n\n        DataTree dserTree = new DataTree();\n\n        System.gc();\n        long start = System.nanoTime();\n        dserTree.deserialize(ia, \"test\");\n        long end = System.nanoTime();\n        long durationms = (end - start) / 1000000L;\n        long pernodeus = ((end - start) / 1000L) / count;\n\n        assertEquals(count, dserTree.getNodeCount());\n\n        LOG.info(\n            \"Deserialized {} nodes in {} ms ({}us/node), depth={} width={} datalen={}\",\n            count,\n            durationms,\n            pernodeus,\n            depth,\n            width,\n            len);\n    }\n","date":"2019-10-10 20:37:45","endLine":73,"groupId":"1061","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeTree","params":"(intdepth@intwidth@intlen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/06/4b53e0898520b3b4b84c65e31babe297807691.src","preCode":"    private static void deserializeTree(int depth, int width, int len) throws InterruptedException, IOException, KeeperException.NodeExistsException, KeeperException.NoNodeException {\n        BinaryInputArchive ia;\n        int count;\n        {\n            DataTree tree = new DataTree();\n            SerializationPerfTest.createNodes(tree, \"/\", depth, width, tree.getNode(\"/\").stat.getCversion(), new byte[len]);\n            count = tree.getNodeCount();\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            BinaryOutputArchive oa = BinaryOutputArchive.getArchive(baos);\n            tree.serialize(oa, \"test\");\n            baos.flush();\n\n            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n            ia = BinaryInputArchive.getArchive(bais);\n        }\n\n        DataTree dserTree = new DataTree();\n\n        System.gc();\n        long start = System.nanoTime();\n        dserTree.deserialize(ia, \"test\");\n        long end = System.nanoTime();\n        long durationms = (end - start) / 1000000L;\n        long pernodeus = ((end - start) / 1000L) / count;\n\n        assertEquals(count, dserTree.getNodeCount());\n\n        LOG.info(\"Deserialized \"\n                         + count\n                         + \" nodes in \"\n                         + durationms\n                         + \" ms (\"\n                         + pernodeus\n                         + \"us/node), depth=\"\n                         + depth\n                         + \" width=\"\n                         + width\n                         + \" datalen=\"\n                         + len);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/DeserializationPerfTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"}]
