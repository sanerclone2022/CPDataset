[{"authorTime":"2020-05-29 20:59:47","codes":[{"authorDate":"2020-10-13 20:43:12","commitOrder":13,"curCode":"    public static QuorumPeer createFromConfig(QuorumPeerConfig config) throws IOException {\n        QuorumPeer quorumPeer = new QuorumPeer();\n        quorumPeer.setTxnFactory(new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));\n        quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());\n        quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());\n        quorumPeer.setElectionType(config.getElectionAlg());\n        quorumPeer.setMyid(config.getServerId());\n        quorumPeer.setTickTime(config.getTickTime());\n        quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());\n        quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n        quorumPeer.setInitLimit(config.getInitLimit());\n        quorumPeer.setSyncLimit(config.getSyncLimit());\n        quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());\n        quorumPeer.setObserverMasterPort(config.getObserverMasterPort());\n        quorumPeer.setConfigFileName(config.getConfigFilename());\n        quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());\n        quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));\n        quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);\n        if (config.getLastSeenQuorumVerifier() != null) {\n            quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);\n        }\n        quorumPeer.initConfigInZKDatabase();\n        quorumPeer.setSslQuorum(config.isSslQuorum());\n        quorumPeer.setUsePortUnification(config.shouldUsePortUnification());\n        quorumPeer.setLearnerType(config.getPeerType());\n        quorumPeer.setSyncEnabled(config.getSyncEnabled());\n        quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());\n        if (config.sslQuorumReloadCertFiles) {\n            quorumPeer.getX509Util().enableCertFileReloading();\n        }\n        quorumPeer.setMultiAddressEnabled(config.isMultiAddressEnabled());\n        quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());\n        quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());\n\n        \r\n        quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);\n        if (quorumPeer.isQuorumSaslAuthEnabled()) {\n            quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);\n            quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);\n            quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);\n            quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);\n            quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);\n        }\n        quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);\n\n        if (config.jvmPauseMonitorToRun) {\n            quorumPeer.setJvmPauseMonitor(new JvmPauseMonitor(config));\n        }\n\n        return quorumPeer;\n    }\n","date":"2020-10-13 20:43:12","endLine":2621,"groupId":"3644","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createFromConfig","params":"(QuorumPeerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ad/5c8c34e0e11c73add798d29174e51439158530.src","preCode":"    public static QuorumPeer createFromConfig(QuorumPeerConfig config) throws IOException {\n        QuorumPeer quorumPeer = new QuorumPeer();\n        quorumPeer.setTxnFactory(new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));\n        quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());\n        quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());\n        quorumPeer.setElectionType(config.getElectionAlg());\n        quorumPeer.setMyid(config.getServerId());\n        quorumPeer.setTickTime(config.getTickTime());\n        quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());\n        quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n        quorumPeer.setInitLimit(config.getInitLimit());\n        quorumPeer.setSyncLimit(config.getSyncLimit());\n        quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());\n        quorumPeer.setObserverMasterPort(config.getObserverMasterPort());\n        quorumPeer.setConfigFileName(config.getConfigFilename());\n        quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());\n        quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));\n        quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);\n        if (config.getLastSeenQuorumVerifier() != null) {\n            quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);\n        }\n        quorumPeer.initConfigInZKDatabase();\n        quorumPeer.setSslQuorum(config.isSslQuorum());\n        quorumPeer.setUsePortUnification(config.shouldUsePortUnification());\n        quorumPeer.setLearnerType(config.getPeerType());\n        quorumPeer.setSyncEnabled(config.getSyncEnabled());\n        quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());\n        if (config.sslQuorumReloadCertFiles) {\n            quorumPeer.getX509Util().enableCertFileReloading();\n        }\n        quorumPeer.setMultiAddressEnabled(config.isMultiAddressEnabled());\n        quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());\n        quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());\n\n        \r\n        quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);\n        if (quorumPeer.isQuorumSaslAuthEnabled()) {\n            quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);\n            quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);\n            quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);\n            quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);\n            quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);\n        }\n        quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);\n\n        if (config.jvmPauseMonitorToRun) {\n            quorumPeer.setJvmPauseMonitor(new JvmPauseMonitor(config));\n        }\n\n        return quorumPeer;\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":2571,"status":"B"},{"authorDate":"2020-05-29 20:59:47","commitOrder":13,"curCode":"    public void runFromConfig(QuorumPeerConfig config) throws IOException, AdminServerException {\n        try {\n            ManagedUtil.registerLog4jMBeans();\n        } catch (JMException e) {\n            LOG.warn(\"Unable to register log4j JMX control\", e);\n        }\n\n        LOG.info(\"Starting quorum peer, myid=\" + config.getServerId());\n        MetricsProvider metricsProvider;\n        try {\n            metricsProvider = MetricsProviderBootstrap.startMetricsProvider(\n                config.getMetricsProviderClassName(),\n                config.getMetricsProviderConfiguration());\n        } catch (MetricsProviderLifeCycleException error) {\n            throw new IOException(\"Cannot boot MetricsProvider \" + config.getMetricsProviderClassName(), error);\n        }\n        try {\n            ServerMetrics.metricsProviderInitialized(metricsProvider);\n            ServerCnxnFactory cnxnFactory = null;\n            ServerCnxnFactory secureCnxnFactory = null;\n\n            if (config.getClientPortAddress() != null) {\n                cnxnFactory = ServerCnxnFactory.createFactory();\n                cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), false);\n            }\n\n            if (config.getSecureClientPortAddress() != null) {\n                secureCnxnFactory = ServerCnxnFactory.createFactory();\n                secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), true);\n            }\n\n            quorumPeer = getQuorumPeer();\n            quorumPeer.setTxnFactory(new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));\n            quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());\n            quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());\n            \r\n            quorumPeer.setElectionType(config.getElectionAlg());\n            quorumPeer.setMyid(config.getServerId());\n            quorumPeer.setTickTime(config.getTickTime());\n            quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());\n            quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n            quorumPeer.setInitLimit(config.getInitLimit());\n            quorumPeer.setSyncLimit(config.getSyncLimit());\n            quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());\n            quorumPeer.setObserverMasterPort(config.getObserverMasterPort());\n            quorumPeer.setConfigFileName(config.getConfigFilename());\n            quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());\n            quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));\n            quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);\n            if (config.getLastSeenQuorumVerifier() != null) {\n                quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);\n            }\n            quorumPeer.initConfigInZKDatabase();\n            quorumPeer.setCnxnFactory(cnxnFactory);\n            quorumPeer.setSecureCnxnFactory(secureCnxnFactory);\n            quorumPeer.setSslQuorum(config.isSslQuorum());\n            quorumPeer.setUsePortUnification(config.shouldUsePortUnification());\n            quorumPeer.setLearnerType(config.getPeerType());\n            quorumPeer.setSyncEnabled(config.getSyncEnabled());\n            quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());\n            if (config.sslQuorumReloadCertFiles) {\n                quorumPeer.getX509Util().enableCertFileReloading();\n            }\n            quorumPeer.setMultiAddressEnabled(config.isMultiAddressEnabled());\n            quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());\n            quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());\n\n            \r\n            quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);\n            if (quorumPeer.isQuorumSaslAuthEnabled()) {\n                quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);\n                quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);\n                quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);\n                quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);\n                quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);\n            }\n            quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);\n            quorumPeer.initialize();\n\n            if (config.jvmPauseMonitorToRun) {\n                quorumPeer.setJvmPauseMonitor(new JvmPauseMonitor(config));\n            }\n\n            quorumPeer.start();\n            ZKAuditProvider.addZKStartStopAuditLog();\n            quorumPeer.join();\n        } catch (InterruptedException e) {\n            \r\n            LOG.warn(\"Quorum Peer interrupted\", e);\n        } finally {\n            if (metricsProvider != null) {\n                try {\n                    metricsProvider.stop();\n                } catch (Throwable error) {\n                    LOG.warn(\"Error while stopping metrics\", error);\n                }\n            }\n        }\n    }\n","date":"2020-05-29 20:59:47","endLine":242,"groupId":"3644","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"runFromConfig","params":"(QuorumPeerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/81/140b60982af3afa98dfc6db68e9d68972adcbb.src","preCode":"    public void runFromConfig(QuorumPeerConfig config) throws IOException, AdminServerException {\n        try {\n            ManagedUtil.registerLog4jMBeans();\n        } catch (JMException e) {\n            LOG.warn(\"Unable to register log4j JMX control\", e);\n        }\n\n        LOG.info(\"Starting quorum peer, myid=\" + config.getServerId());\n        MetricsProvider metricsProvider;\n        try {\n            metricsProvider = MetricsProviderBootstrap.startMetricsProvider(\n                config.getMetricsProviderClassName(),\n                config.getMetricsProviderConfiguration());\n        } catch (MetricsProviderLifeCycleException error) {\n            throw new IOException(\"Cannot boot MetricsProvider \" + config.getMetricsProviderClassName(), error);\n        }\n        try {\n            ServerMetrics.metricsProviderInitialized(metricsProvider);\n            ServerCnxnFactory cnxnFactory = null;\n            ServerCnxnFactory secureCnxnFactory = null;\n\n            if (config.getClientPortAddress() != null) {\n                cnxnFactory = ServerCnxnFactory.createFactory();\n                cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), false);\n            }\n\n            if (config.getSecureClientPortAddress() != null) {\n                secureCnxnFactory = ServerCnxnFactory.createFactory();\n                secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), true);\n            }\n\n            quorumPeer = getQuorumPeer();\n            quorumPeer.setTxnFactory(new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));\n            quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());\n            quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());\n            \r\n            quorumPeer.setElectionType(config.getElectionAlg());\n            quorumPeer.setMyid(config.getServerId());\n            quorumPeer.setTickTime(config.getTickTime());\n            quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());\n            quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n            quorumPeer.setInitLimit(config.getInitLimit());\n            quorumPeer.setSyncLimit(config.getSyncLimit());\n            quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());\n            quorumPeer.setObserverMasterPort(config.getObserverMasterPort());\n            quorumPeer.setConfigFileName(config.getConfigFilename());\n            quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());\n            quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));\n            quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);\n            if (config.getLastSeenQuorumVerifier() != null) {\n                quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);\n            }\n            quorumPeer.initConfigInZKDatabase();\n            quorumPeer.setCnxnFactory(cnxnFactory);\n            quorumPeer.setSecureCnxnFactory(secureCnxnFactory);\n            quorumPeer.setSslQuorum(config.isSslQuorum());\n            quorumPeer.setUsePortUnification(config.shouldUsePortUnification());\n            quorumPeer.setLearnerType(config.getPeerType());\n            quorumPeer.setSyncEnabled(config.getSyncEnabled());\n            quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());\n            if (config.sslQuorumReloadCertFiles) {\n                quorumPeer.getX509Util().enableCertFileReloading();\n            }\n            quorumPeer.setMultiAddressEnabled(config.isMultiAddressEnabled());\n            quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());\n            quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());\n\n            \r\n            quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);\n            if (quorumPeer.isQuorumSaslAuthEnabled()) {\n                quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);\n                quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);\n                quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);\n                quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);\n                quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);\n            }\n            quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);\n            quorumPeer.initialize();\n\n            if (config.jvmPauseMonitorToRun) {\n                quorumPeer.setJvmPauseMonitor(new JvmPauseMonitor(config));\n            }\n\n            quorumPeer.start();\n            ZKAuditProvider.addZKStartStopAuditLog();\n            quorumPeer.join();\n        } catch (InterruptedException e) {\n            \r\n            LOG.warn(\"Quorum Peer interrupted\", e);\n        } finally {\n            if (metricsProvider != null) {\n                try {\n                    metricsProvider.stop();\n                } catch (Throwable error) {\n                    LOG.warn(\"Error while stopping metrics\", error);\n                }\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"NB"}],"commitId":"4432f5b44359f56007f1ea5be5de2a9829c97e5c","commitMessage":"@@@ZOOKEEPER-3948: Introduce a deterministic runtime behavior injection framework for ZooKeeperServer testing.\n\nWe'd like to understand how applications built on top of ZooKeeper behave under various faulty conditions.  which is important to build resilient end to end solutions and avoid ZooKeeper being single point of failure. We'd also like to achieve this in both unit tests (in process) and integration tests (in and out of process). Traditional methods of using external fault injection mechanisms are non deterministic and requires non trivial set up and hard to integrate with unit tests.  so here we introduce the ZooKeeperController service which solves both.\n\nThe basic idea here is to create a controllable ZooKeeperServer which accepts various control commands (such as - delay request.  drop request.  eat request.  expire session.  shutdown.  trigger leader election.  and so on).  and reacting based on incoming commands. The controllable server and production server share the same underlying machineries (quorum peers.  ZooKeeper server.  etc) but code paths are separate.  thus this feature has no production impact.\n\nThis controller system is currently composed of following pieces:\n\nCommandClient: a convenient HTTP client to send control commands to controller service.\nCommandListener: an embed HTTP server listening incoming commands and dispatch to controller service.\nController Service: the service that's responsible to create controllable ZK server and the controller.\nZooKeeperServerController: the controller that changes the behavior of ZK server runtime.\nControllable Cnx / Factory: controllable connection that accept behavior change requests.\nIn future more control commands and controllable components can be added on top of this framework.\n\nThis can be used in either unit tests / integration tests as an in process embedded controllable ZooKeeper server.  or as an out of process stand alone controllable ZooKeeper process.\n\nAuthor: Michael Han <hanm@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1467 from hanm/ZOOKEEPER-3948\n","date":"2020-10-13 20:43:12","modifiedFileCount":"3","status":"M","submitter":"Michael Han"},{"authorTime":"2020-11-03 00:58:08","codes":[{"authorDate":"2020-10-13 20:43:12","commitOrder":14,"curCode":"    public static QuorumPeer createFromConfig(QuorumPeerConfig config) throws IOException {\n        QuorumPeer quorumPeer = new QuorumPeer();\n        quorumPeer.setTxnFactory(new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));\n        quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());\n        quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());\n        quorumPeer.setElectionType(config.getElectionAlg());\n        quorumPeer.setMyid(config.getServerId());\n        quorumPeer.setTickTime(config.getTickTime());\n        quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());\n        quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n        quorumPeer.setInitLimit(config.getInitLimit());\n        quorumPeer.setSyncLimit(config.getSyncLimit());\n        quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());\n        quorumPeer.setObserverMasterPort(config.getObserverMasterPort());\n        quorumPeer.setConfigFileName(config.getConfigFilename());\n        quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());\n        quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));\n        quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);\n        if (config.getLastSeenQuorumVerifier() != null) {\n            quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);\n        }\n        quorumPeer.initConfigInZKDatabase();\n        quorumPeer.setSslQuorum(config.isSslQuorum());\n        quorumPeer.setUsePortUnification(config.shouldUsePortUnification());\n        quorumPeer.setLearnerType(config.getPeerType());\n        quorumPeer.setSyncEnabled(config.getSyncEnabled());\n        quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());\n        if (config.sslQuorumReloadCertFiles) {\n            quorumPeer.getX509Util().enableCertFileReloading();\n        }\n        quorumPeer.setMultiAddressEnabled(config.isMultiAddressEnabled());\n        quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());\n        quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());\n\n        \r\n        quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);\n        if (quorumPeer.isQuorumSaslAuthEnabled()) {\n            quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);\n            quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);\n            quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);\n            quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);\n            quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);\n        }\n        quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);\n\n        if (config.jvmPauseMonitorToRun) {\n            quorumPeer.setJvmPauseMonitor(new JvmPauseMonitor(config));\n        }\n\n        return quorumPeer;\n    }\n","date":"2020-10-13 20:43:12","endLine":2621,"groupId":"3644","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createFromConfig","params":"(QuorumPeerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ad/5c8c34e0e11c73add798d29174e51439158530.src","preCode":"    public static QuorumPeer createFromConfig(QuorumPeerConfig config) throws IOException {\n        QuorumPeer quorumPeer = new QuorumPeer();\n        quorumPeer.setTxnFactory(new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));\n        quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());\n        quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());\n        quorumPeer.setElectionType(config.getElectionAlg());\n        quorumPeer.setMyid(config.getServerId());\n        quorumPeer.setTickTime(config.getTickTime());\n        quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());\n        quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n        quorumPeer.setInitLimit(config.getInitLimit());\n        quorumPeer.setSyncLimit(config.getSyncLimit());\n        quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());\n        quorumPeer.setObserverMasterPort(config.getObserverMasterPort());\n        quorumPeer.setConfigFileName(config.getConfigFilename());\n        quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());\n        quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));\n        quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);\n        if (config.getLastSeenQuorumVerifier() != null) {\n            quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);\n        }\n        quorumPeer.initConfigInZKDatabase();\n        quorumPeer.setSslQuorum(config.isSslQuorum());\n        quorumPeer.setUsePortUnification(config.shouldUsePortUnification());\n        quorumPeer.setLearnerType(config.getPeerType());\n        quorumPeer.setSyncEnabled(config.getSyncEnabled());\n        quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());\n        if (config.sslQuorumReloadCertFiles) {\n            quorumPeer.getX509Util().enableCertFileReloading();\n        }\n        quorumPeer.setMultiAddressEnabled(config.isMultiAddressEnabled());\n        quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());\n        quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());\n\n        \r\n        quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);\n        if (quorumPeer.isQuorumSaslAuthEnabled()) {\n            quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);\n            quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);\n            quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);\n            quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);\n            quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);\n        }\n        quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);\n\n        if (config.jvmPauseMonitorToRun) {\n            quorumPeer.setJvmPauseMonitor(new JvmPauseMonitor(config));\n        }\n\n        return quorumPeer;\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":2571,"status":"N"},{"authorDate":"2020-11-03 00:58:08","commitOrder":14,"curCode":"    public void runFromConfig(QuorumPeerConfig config) throws IOException, AdminServerException {\n        try {\n            ManagedUtil.registerLog4jMBeans();\n        } catch (JMException e) {\n            LOG.warn(\"Unable to register log4j JMX control\", e);\n        }\n\n        LOG.info(\"Starting quorum peer, myid=\" + config.getServerId());\n        MetricsProvider metricsProvider;\n        try {\n            metricsProvider = MetricsProviderBootstrap.startMetricsProvider(\n                config.getMetricsProviderClassName(),\n                config.getMetricsProviderConfiguration());\n        } catch (MetricsProviderLifeCycleException error) {\n            throw new IOException(\"Cannot boot MetricsProvider \" + config.getMetricsProviderClassName(), error);\n        }\n        try {\n            ServerMetrics.metricsProviderInitialized(metricsProvider);\n            ProviderRegistry.initialize();\n            ServerCnxnFactory cnxnFactory = null;\n            ServerCnxnFactory secureCnxnFactory = null;\n\n            if (config.getClientPortAddress() != null) {\n                cnxnFactory = ServerCnxnFactory.createFactory();\n                cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), false);\n            }\n\n            if (config.getSecureClientPortAddress() != null) {\n                secureCnxnFactory = ServerCnxnFactory.createFactory();\n                secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), true);\n            }\n\n            quorumPeer = getQuorumPeer();\n            quorumPeer.setTxnFactory(new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));\n            quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());\n            quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());\n            \r\n            quorumPeer.setElectionType(config.getElectionAlg());\n            quorumPeer.setMyid(config.getServerId());\n            quorumPeer.setTickTime(config.getTickTime());\n            quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());\n            quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n            quorumPeer.setInitLimit(config.getInitLimit());\n            quorumPeer.setSyncLimit(config.getSyncLimit());\n            quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());\n            quorumPeer.setObserverMasterPort(config.getObserverMasterPort());\n            quorumPeer.setConfigFileName(config.getConfigFilename());\n            quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());\n            quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));\n            quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);\n            if (config.getLastSeenQuorumVerifier() != null) {\n                quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);\n            }\n            quorumPeer.initConfigInZKDatabase();\n            quorumPeer.setCnxnFactory(cnxnFactory);\n            quorumPeer.setSecureCnxnFactory(secureCnxnFactory);\n            quorumPeer.setSslQuorum(config.isSslQuorum());\n            quorumPeer.setUsePortUnification(config.shouldUsePortUnification());\n            quorumPeer.setLearnerType(config.getPeerType());\n            quorumPeer.setSyncEnabled(config.getSyncEnabled());\n            quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());\n            if (config.sslQuorumReloadCertFiles) {\n                quorumPeer.getX509Util().enableCertFileReloading();\n            }\n            quorumPeer.setMultiAddressEnabled(config.isMultiAddressEnabled());\n            quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());\n            quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());\n\n            \r\n            quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);\n            if (quorumPeer.isQuorumSaslAuthEnabled()) {\n                quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);\n                quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);\n                quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);\n                quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);\n                quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);\n            }\n            quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);\n            quorumPeer.initialize();\n\n            if (config.jvmPauseMonitorToRun) {\n                quorumPeer.setJvmPauseMonitor(new JvmPauseMonitor(config));\n            }\n\n            quorumPeer.start();\n            ZKAuditProvider.addZKStartStopAuditLog();\n            quorumPeer.join();\n        } catch (InterruptedException e) {\n            \r\n            LOG.warn(\"Quorum Peer interrupted\", e);\n        } finally {\n            if (metricsProvider != null) {\n                try {\n                    metricsProvider.stop();\n                } catch (Throwable error) {\n                    LOG.warn(\"Error while stopping metrics\", error);\n                }\n            }\n        }\n    }\n","date":"2020-11-03 00:58:08","endLine":244,"groupId":"3644","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"runFromConfig","params":"(QuorumPeerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/76/df5e46d8b60b93b4c9188abb3995c57185e130.src","preCode":"    public void runFromConfig(QuorumPeerConfig config) throws IOException, AdminServerException {\n        try {\n            ManagedUtil.registerLog4jMBeans();\n        } catch (JMException e) {\n            LOG.warn(\"Unable to register log4j JMX control\", e);\n        }\n\n        LOG.info(\"Starting quorum peer, myid=\" + config.getServerId());\n        MetricsProvider metricsProvider;\n        try {\n            metricsProvider = MetricsProviderBootstrap.startMetricsProvider(\n                config.getMetricsProviderClassName(),\n                config.getMetricsProviderConfiguration());\n        } catch (MetricsProviderLifeCycleException error) {\n            throw new IOException(\"Cannot boot MetricsProvider \" + config.getMetricsProviderClassName(), error);\n        }\n        try {\n            ServerMetrics.metricsProviderInitialized(metricsProvider);\n            ServerCnxnFactory cnxnFactory = null;\n            ServerCnxnFactory secureCnxnFactory = null;\n\n            if (config.getClientPortAddress() != null) {\n                cnxnFactory = ServerCnxnFactory.createFactory();\n                cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), false);\n            }\n\n            if (config.getSecureClientPortAddress() != null) {\n                secureCnxnFactory = ServerCnxnFactory.createFactory();\n                secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), true);\n            }\n\n            quorumPeer = getQuorumPeer();\n            quorumPeer.setTxnFactory(new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));\n            quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());\n            quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());\n            \r\n            quorumPeer.setElectionType(config.getElectionAlg());\n            quorumPeer.setMyid(config.getServerId());\n            quorumPeer.setTickTime(config.getTickTime());\n            quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());\n            quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n            quorumPeer.setInitLimit(config.getInitLimit());\n            quorumPeer.setSyncLimit(config.getSyncLimit());\n            quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());\n            quorumPeer.setObserverMasterPort(config.getObserverMasterPort());\n            quorumPeer.setConfigFileName(config.getConfigFilename());\n            quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());\n            quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));\n            quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);\n            if (config.getLastSeenQuorumVerifier() != null) {\n                quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);\n            }\n            quorumPeer.initConfigInZKDatabase();\n            quorumPeer.setCnxnFactory(cnxnFactory);\n            quorumPeer.setSecureCnxnFactory(secureCnxnFactory);\n            quorumPeer.setSslQuorum(config.isSslQuorum());\n            quorumPeer.setUsePortUnification(config.shouldUsePortUnification());\n            quorumPeer.setLearnerType(config.getPeerType());\n            quorumPeer.setSyncEnabled(config.getSyncEnabled());\n            quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());\n            if (config.sslQuorumReloadCertFiles) {\n                quorumPeer.getX509Util().enableCertFileReloading();\n            }\n            quorumPeer.setMultiAddressEnabled(config.isMultiAddressEnabled());\n            quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());\n            quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());\n\n            \r\n            quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);\n            if (quorumPeer.isQuorumSaslAuthEnabled()) {\n                quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);\n                quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);\n                quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);\n                quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);\n                quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);\n            }\n            quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);\n            quorumPeer.initialize();\n\n            if (config.jvmPauseMonitorToRun) {\n                quorumPeer.setJvmPauseMonitor(new JvmPauseMonitor(config));\n            }\n\n            quorumPeer.start();\n            ZKAuditProvider.addZKStartStopAuditLog();\n            quorumPeer.join();\n        } catch (InterruptedException e) {\n            \r\n            LOG.warn(\"Quorum Peer interrupted\", e);\n        } finally {\n            if (metricsProvider != null) {\n                try {\n                    metricsProvider.stop();\n                } catch (Throwable error) {\n                    LOG.warn(\"Error while stopping metrics\", error);\n                }\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"392846c534c51a57aa678691d411ad7d8d68e29a","commitMessage":"@@@ZOOKEEPER-3696: Support alternative algorithms for ACL digest\n\n- [SHA1](https://shattered.io/) can be cracked now and it's not safe enough to use it.  `SHA2` shares the the same algorithm idea with `SHA1`.  its broken would be only a matter of time.  so they created `SHA3` which's safe up to now.\n\n- The default value is: `SHA1` which will be deprecated in the future for security issues. Set this property the same value in all the servers.\n\n- How to support other more algorithms?\n\n    - modify the `java.security` configuration file under `$JAVA_HOME/jre/lib/security/java.security` by specifying:\n             `security.provider.<n>=<provider class name>`.\n\n             ```\n             For example:\n             set zookeeper.DigestAuthenticationProvider.digestAlg=RipeMD160\n             security.provider.3=org.bouncycastle.jce.provider.BouncyCastleProvider\n             ```\n\n    - copy the jar file to `$JAVA_HOME/jre/lib/ext/`.\n\n             ```\n             For example:\n             copy bcprov-jdk15on-1.60.jar to $JAVA_HOME/jre/lib/ext/\n             ```\n\n- For the same digest algorithm and input.  the output of digest is the constant. You can use some online tools to play with it. Some UTs had covered it.\n\n- The unit cases have tested three algorithms: `SHA1`.  `SHA-256`.  `SHA3-256`(other algorithms share the same principle.  so ignore them).  and I also do a manual test to `RipeMD160`\n\n- For the invalid algorithm parameter\n```\n Caused by: java.lang.RuntimeException: don't support this ACL digest algorithm: SHA3-996 in the current environment\n\tat org.apache.zookeeper.server.auth.DigestAuthenticationProvider.<clinit>(DigestAuthenticationProvider.java:52)\n\t... 6 more\n```\n\n- How to migrate from one digest algorithm to another? For example: migrate from SHA1 to SHA3\n```\n# Before I have SHA1 for digest\nsuperDigest=super:D/InIHSb7yEEbrWz8b9l71RjZJU=\" //super:test\n\n[zk: 127.0.0.1:2180(CONNECTED) 0] addauth digest username1:password1\n[zk: 127.0.0.1:2180(CONNECTED) 2] setAcl /myapp-1 auth:username1:password1:crwad\n\n# After I transfer to SHA3.  you will get Auth Exception when getData of a\nznode which already had a digest auth of old algorithm.\n\nStep ONE:  Regenerate `superDigest` when migrating to new algorithm which is always a good practice for users to survive from any uncomfortable auth issue.\nreset my superDigest to super:cRy/KPYuDpW/dtsepniTMpuiuupnWgdU9txltIfv3hA=\n[zk: 127.0.0.1:2180(CONNECTED) 0] addauth digest super:test\n[zk: 127.0.0.1:2180(CONNECTED) 1] get /myapp-1\nnull\n\nStep TWO: re-setACl for that znode.\n[zk: 127.0.0.1:2180(CONNECTED) 0] addauth digest super:test\n[zk: 127.0.0.1:2180(CONNECTED) 1] addauth digest username1:password1\n# sometime use setAcl -R to setAcl recursively or you can also set ACL to 'world. 'anyone\n(open to anyone)\n[zk: 127.0.0.1:2180(CONNECTED) 2] setAcl /myapp-1 auth:username1:password1:crwad\n```\n\n- [TODO]: `ZOOKEEPER-3976: write a script to encapsulate DigestAuthenticationProvider#main as a tool to generate the digest with the algorithm users appoint`\n\n- more details in the [ZOOKEEPER-3696](https://issues.apache.org/jira/browse/ZOOKEEPER-3696)\n\nAuthor: maoling <maoling199210191@sina.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Andor Molnar <andor@apache.org>.  Mate Szalay-Beko <symat@apache.org>\n\nThis patch had conflicts when merged.  resolved by\nCommitter: Mate Szalay-Beko <symat@apache.org>\n\nCloses #1318 from maoling/ZOOKEEPER-3696\n","date":"2020-11-03 00:58:08","modifiedFileCount":"4","status":"M","submitter":"maoling"},{"authorTime":"2020-12-25 01:12:37","codes":[{"authorDate":"2020-10-13 20:43:12","commitOrder":15,"curCode":"    public static QuorumPeer createFromConfig(QuorumPeerConfig config) throws IOException {\n        QuorumPeer quorumPeer = new QuorumPeer();\n        quorumPeer.setTxnFactory(new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));\n        quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());\n        quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());\n        quorumPeer.setElectionType(config.getElectionAlg());\n        quorumPeer.setMyid(config.getServerId());\n        quorumPeer.setTickTime(config.getTickTime());\n        quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());\n        quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n        quorumPeer.setInitLimit(config.getInitLimit());\n        quorumPeer.setSyncLimit(config.getSyncLimit());\n        quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());\n        quorumPeer.setObserverMasterPort(config.getObserverMasterPort());\n        quorumPeer.setConfigFileName(config.getConfigFilename());\n        quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());\n        quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));\n        quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);\n        if (config.getLastSeenQuorumVerifier() != null) {\n            quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);\n        }\n        quorumPeer.initConfigInZKDatabase();\n        quorumPeer.setSslQuorum(config.isSslQuorum());\n        quorumPeer.setUsePortUnification(config.shouldUsePortUnification());\n        quorumPeer.setLearnerType(config.getPeerType());\n        quorumPeer.setSyncEnabled(config.getSyncEnabled());\n        quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());\n        if (config.sslQuorumReloadCertFiles) {\n            quorumPeer.getX509Util().enableCertFileReloading();\n        }\n        quorumPeer.setMultiAddressEnabled(config.isMultiAddressEnabled());\n        quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());\n        quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());\n\n        \r\n        quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);\n        if (quorumPeer.isQuorumSaslAuthEnabled()) {\n            quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);\n            quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);\n            quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);\n            quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);\n            quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);\n        }\n        quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);\n\n        if (config.jvmPauseMonitorToRun) {\n            quorumPeer.setJvmPauseMonitor(new JvmPauseMonitor(config));\n        }\n\n        return quorumPeer;\n    }\n","date":"2020-10-13 20:43:12","endLine":2621,"groupId":"10740","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createFromConfig","params":"(QuorumPeerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ad/5c8c34e0e11c73add798d29174e51439158530.src","preCode":"    public static QuorumPeer createFromConfig(QuorumPeerConfig config) throws IOException {\n        QuorumPeer quorumPeer = new QuorumPeer();\n        quorumPeer.setTxnFactory(new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));\n        quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());\n        quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());\n        quorumPeer.setElectionType(config.getElectionAlg());\n        quorumPeer.setMyid(config.getServerId());\n        quorumPeer.setTickTime(config.getTickTime());\n        quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());\n        quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n        quorumPeer.setInitLimit(config.getInitLimit());\n        quorumPeer.setSyncLimit(config.getSyncLimit());\n        quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());\n        quorumPeer.setObserverMasterPort(config.getObserverMasterPort());\n        quorumPeer.setConfigFileName(config.getConfigFilename());\n        quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());\n        quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));\n        quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);\n        if (config.getLastSeenQuorumVerifier() != null) {\n            quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);\n        }\n        quorumPeer.initConfigInZKDatabase();\n        quorumPeer.setSslQuorum(config.isSslQuorum());\n        quorumPeer.setUsePortUnification(config.shouldUsePortUnification());\n        quorumPeer.setLearnerType(config.getPeerType());\n        quorumPeer.setSyncEnabled(config.getSyncEnabled());\n        quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());\n        if (config.sslQuorumReloadCertFiles) {\n            quorumPeer.getX509Util().enableCertFileReloading();\n        }\n        quorumPeer.setMultiAddressEnabled(config.isMultiAddressEnabled());\n        quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());\n        quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());\n\n        \r\n        quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);\n        if (quorumPeer.isQuorumSaslAuthEnabled()) {\n            quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);\n            quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);\n            quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);\n            quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);\n            quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);\n        }\n        quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);\n\n        if (config.jvmPauseMonitorToRun) {\n            quorumPeer.setJvmPauseMonitor(new JvmPauseMonitor(config));\n        }\n\n        return quorumPeer;\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":2571,"status":"N"},{"authorDate":"2020-12-25 01:12:37","commitOrder":15,"curCode":"    public void runFromConfig(QuorumPeerConfig config) throws IOException, AdminServerException {\n        try {\n            ManagedUtil.registerLog4jMBeans();\n        } catch (JMException e) {\n            LOG.warn(\"Unable to register log4j JMX control\", e);\n        }\n\n        LOG.info(\"Starting quorum peer, myid=\" + config.getServerId());\n        final MetricsProvider metricsProvider;\n        try {\n            metricsProvider = MetricsProviderBootstrap.startMetricsProvider(\n                config.getMetricsProviderClassName(),\n                config.getMetricsProviderConfiguration());\n        } catch (MetricsProviderLifeCycleException error) {\n            throw new IOException(\"Cannot boot MetricsProvider \" + config.getMetricsProviderClassName(), error);\n        }\n        try {\n            ServerMetrics.metricsProviderInitialized(metricsProvider);\n            ProviderRegistry.initialize();\n            ServerCnxnFactory cnxnFactory = null;\n            ServerCnxnFactory secureCnxnFactory = null;\n\n            if (config.getClientPortAddress() != null) {\n                cnxnFactory = ServerCnxnFactory.createFactory();\n                cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), false);\n            }\n\n            if (config.getSecureClientPortAddress() != null) {\n                secureCnxnFactory = ServerCnxnFactory.createFactory();\n                secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), true);\n            }\n\n            quorumPeer = getQuorumPeer();\n            quorumPeer.setTxnFactory(new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));\n            quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());\n            quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());\n            \r\n            quorumPeer.setElectionType(config.getElectionAlg());\n            quorumPeer.setMyid(config.getServerId());\n            quorumPeer.setTickTime(config.getTickTime());\n            quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());\n            quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n            quorumPeer.setInitLimit(config.getInitLimit());\n            quorumPeer.setSyncLimit(config.getSyncLimit());\n            quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());\n            quorumPeer.setObserverMasterPort(config.getObserverMasterPort());\n            quorumPeer.setConfigFileName(config.getConfigFilename());\n            quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());\n            quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));\n            quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);\n            if (config.getLastSeenQuorumVerifier() != null) {\n                quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);\n            }\n            quorumPeer.initConfigInZKDatabase();\n            quorumPeer.setCnxnFactory(cnxnFactory);\n            quorumPeer.setSecureCnxnFactory(secureCnxnFactory);\n            quorumPeer.setSslQuorum(config.isSslQuorum());\n            quorumPeer.setUsePortUnification(config.shouldUsePortUnification());\n            quorumPeer.setLearnerType(config.getPeerType());\n            quorumPeer.setSyncEnabled(config.getSyncEnabled());\n            quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());\n            if (config.sslQuorumReloadCertFiles) {\n                quorumPeer.getX509Util().enableCertFileReloading();\n            }\n            quorumPeer.setMultiAddressEnabled(config.isMultiAddressEnabled());\n            quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());\n            quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());\n\n            \r\n            quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);\n            if (quorumPeer.isQuorumSaslAuthEnabled()) {\n                quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);\n                quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);\n                quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);\n                quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);\n                quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);\n            }\n            quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);\n            quorumPeer.initialize();\n\n            if (config.jvmPauseMonitorToRun) {\n                quorumPeer.setJvmPauseMonitor(new JvmPauseMonitor(config));\n            }\n\n            quorumPeer.start();\n            ZKAuditProvider.addZKStartStopAuditLog();\n            quorumPeer.join();\n        } catch (InterruptedException e) {\n            \r\n            LOG.warn(\"Quorum Peer interrupted\", e);\n        } finally {\n            try {\n                metricsProvider.stop();\n            } catch (Throwable error) {\n                LOG.warn(\"Error while stopping metrics\", error);\n            }\n        }\n    }\n","date":"2020-12-25 01:12:37","endLine":242,"groupId":"10740","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"runFromConfig","params":"(QuorumPeerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/5e/d2d42863a729777afb47bfb02bf5659f88047a.src","preCode":"    public void runFromConfig(QuorumPeerConfig config) throws IOException, AdminServerException {\n        try {\n            ManagedUtil.registerLog4jMBeans();\n        } catch (JMException e) {\n            LOG.warn(\"Unable to register log4j JMX control\", e);\n        }\n\n        LOG.info(\"Starting quorum peer, myid=\" + config.getServerId());\n        MetricsProvider metricsProvider;\n        try {\n            metricsProvider = MetricsProviderBootstrap.startMetricsProvider(\n                config.getMetricsProviderClassName(),\n                config.getMetricsProviderConfiguration());\n        } catch (MetricsProviderLifeCycleException error) {\n            throw new IOException(\"Cannot boot MetricsProvider \" + config.getMetricsProviderClassName(), error);\n        }\n        try {\n            ServerMetrics.metricsProviderInitialized(metricsProvider);\n            ProviderRegistry.initialize();\n            ServerCnxnFactory cnxnFactory = null;\n            ServerCnxnFactory secureCnxnFactory = null;\n\n            if (config.getClientPortAddress() != null) {\n                cnxnFactory = ServerCnxnFactory.createFactory();\n                cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), false);\n            }\n\n            if (config.getSecureClientPortAddress() != null) {\n                secureCnxnFactory = ServerCnxnFactory.createFactory();\n                secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), true);\n            }\n\n            quorumPeer = getQuorumPeer();\n            quorumPeer.setTxnFactory(new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));\n            quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());\n            quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());\n            \r\n            quorumPeer.setElectionType(config.getElectionAlg());\n            quorumPeer.setMyid(config.getServerId());\n            quorumPeer.setTickTime(config.getTickTime());\n            quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());\n            quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n            quorumPeer.setInitLimit(config.getInitLimit());\n            quorumPeer.setSyncLimit(config.getSyncLimit());\n            quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());\n            quorumPeer.setObserverMasterPort(config.getObserverMasterPort());\n            quorumPeer.setConfigFileName(config.getConfigFilename());\n            quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());\n            quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));\n            quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);\n            if (config.getLastSeenQuorumVerifier() != null) {\n                quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);\n            }\n            quorumPeer.initConfigInZKDatabase();\n            quorumPeer.setCnxnFactory(cnxnFactory);\n            quorumPeer.setSecureCnxnFactory(secureCnxnFactory);\n            quorumPeer.setSslQuorum(config.isSslQuorum());\n            quorumPeer.setUsePortUnification(config.shouldUsePortUnification());\n            quorumPeer.setLearnerType(config.getPeerType());\n            quorumPeer.setSyncEnabled(config.getSyncEnabled());\n            quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());\n            if (config.sslQuorumReloadCertFiles) {\n                quorumPeer.getX509Util().enableCertFileReloading();\n            }\n            quorumPeer.setMultiAddressEnabled(config.isMultiAddressEnabled());\n            quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());\n            quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());\n\n            \r\n            quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);\n            if (quorumPeer.isQuorumSaslAuthEnabled()) {\n                quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);\n                quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);\n                quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);\n                quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);\n                quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);\n            }\n            quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);\n            quorumPeer.initialize();\n\n            if (config.jvmPauseMonitorToRun) {\n                quorumPeer.setJvmPauseMonitor(new JvmPauseMonitor(config));\n            }\n\n            quorumPeer.start();\n            ZKAuditProvider.addZKStartStopAuditLog();\n            quorumPeer.join();\n        } catch (InterruptedException e) {\n            \r\n            LOG.warn(\"Quorum Peer interrupted\", e);\n        } finally {\n            if (metricsProvider != null) {\n                try {\n                    metricsProvider.stop();\n                } catch (Throwable error) {\n                    LOG.warn(\"Error while stopping metrics\", error);\n                }\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"a67272a0ad8b1138c61306a02563fc39a0c79101","commitMessage":"@@@ZOOKEEPER-4033: Remove unnecessary judgment of null\n\nAuthor: lan <1728209643@qq.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Damien Diederen <ddiederen@apache.org>\n\nCloses #1562 from lanicc/ZOOKEEPER-4033\n","date":"2020-12-25 01:12:37","modifiedFileCount":"1","status":"M","submitter":"lan"}]
