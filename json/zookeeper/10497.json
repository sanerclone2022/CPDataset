[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testOutputStreamSuccess() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new OutputStreamStatement() {\n            @Override\n            public void write(OutputStream os) throws IOException {\n                os.write(\"after\".getBytes(\"ASCII\"));\n                assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n            }\n        });\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        \r\n        assertEquals(\"after\", getContent(target));\n        target.delete();\n    }\n","date":"2018-10-19 20:39:50","endLine":64,"groupId":"919","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOutputStreamSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/47/7ac8e333165e0cbab78efa8ca5b8075b69c4e7.src","preCode":"    public void testOutputStreamSuccess() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new OutputStreamStatement() {\n            @Override\n            public void write(OutputStream os) throws IOException {\n                os.write(\"after\".getBytes(\"ASCII\"));\n                assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n            }\n        });\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        \r\n        assertEquals(\"after\", getContent(target));\n        target.delete();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/AtomicFileWritingIdiomTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testWriterSuccess() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new WriterStatement() {\n            @Override\n            public void write(Writer os) throws IOException {\n                os.write(\"after\");\n                assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n            }\n        });\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        \r\n        assertEquals(\"after\", getContent(target));\n        target.delete();\n    }\n","date":"2018-10-19 20:39:50","endLine":83,"groupId":"920","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriterSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/47/7ac8e333165e0cbab78efa8ca5b8075b69c4e7.src","preCode":"    public void testWriterSuccess() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new WriterStatement() {\n            @Override\n            public void write(Writer os) throws IOException {\n                os.write(\"after\");\n                assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n            }\n        });\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        \r\n        assertEquals(\"after\", getContent(target));\n        target.delete();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/AtomicFileWritingIdiomTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testOutputStreamSuccess() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new OutputStreamStatement() {\n            @Override\n            public void write(OutputStream os) throws IOException {\n                os.write(\"after\".getBytes(StandardCharsets.US_ASCII));\n                assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n            }\n        });\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        \r\n        assertEquals(\"after\", getContent(target));\n        target.delete();\n    }\n","date":"2019-08-17 23:13:15","endLine":64,"groupId":"919","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOutputStreamSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d1/28ecc84b995a8468a48a139e29659befe9cda6.src","preCode":"    public void testOutputStreamSuccess() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new OutputStreamStatement() {\n            @Override\n            public void write(OutputStream os) throws IOException {\n                os.write(\"after\".getBytes(\"ASCII\"));\n                assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n            }\n        });\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        \r\n        assertEquals(\"after\", getContent(target));\n        target.delete();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/AtomicFileWritingIdiomTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2018-10-19 20:39:50","commitOrder":2,"curCode":"    public void testWriterSuccess() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new WriterStatement() {\n            @Override\n            public void write(Writer os) throws IOException {\n                os.write(\"after\");\n                assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n            }\n        });\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        \r\n        assertEquals(\"after\", getContent(target));\n        target.delete();\n    }\n","date":"2018-10-19 20:39:50","endLine":83,"groupId":"920","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriterSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/47/7ac8e333165e0cbab78efa8ca5b8075b69c4e7.src","preCode":"    public void testWriterSuccess() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new WriterStatement() {\n            @Override\n            public void write(Writer os) throws IOException {\n                os.write(\"after\");\n                assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n            }\n        });\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        \r\n        assertEquals(\"after\", getContent(target));\n        target.delete();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/AtomicFileWritingIdiomTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testOutputStreamSuccess() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new OutputStreamStatement() {\n            @Override\n            public void write(OutputStream os) throws IOException {\n                os.write(\"after\".getBytes(StandardCharsets.US_ASCII));\n                assertTrue(tmp.exists(), \"implementation of AtomicFileOutputStream has changed, update the test\");\n            }\n        });\n        assertFalse(tmp.exists(), \"tmp file should have been deleted\");\n        \r\n        assertEquals(\"after\", getContent(target));\n        target.delete();\n    }\n","date":"2020-08-04 21:01:52","endLine":64,"groupId":"1211","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testOutputStreamSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/92/3fc0855c181609e2bd5b8febb87a2bc21d634a.src","preCode":"    public void testOutputStreamSuccess() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new OutputStreamStatement() {\n            @Override\n            public void write(OutputStream os) throws IOException {\n                os.write(\"after\".getBytes(StandardCharsets.US_ASCII));\n                assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n            }\n        });\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        \r\n        assertEquals(\"after\", getContent(target));\n        target.delete();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/AtomicFileWritingIdiomTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testWriterSuccess() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new WriterStatement() {\n            @Override\n            public void write(Writer os) throws IOException {\n                os.write(\"after\");\n                assertTrue(tmp.exists(), \"implementation of AtomicFileOutputStream has changed, update the test\");\n            }\n        });\n        assertFalse(tmp.exists(), \"tmp file should have been deleted\");\n        \r\n        assertEquals(\"after\", getContent(target));\n        target.delete();\n    }\n","date":"2020-08-04 21:01:52","endLine":83,"groupId":"1901","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriterSuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/92/3fc0855c181609e2bd5b8febb87a2bc21d634a.src","preCode":"    public void testWriterSuccess() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new WriterStatement() {\n            @Override\n            public void write(Writer os) throws IOException {\n                os.write(\"after\");\n                assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n            }\n        });\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        \r\n        assertEquals(\"after\", getContent(target));\n        target.delete();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/AtomicFileWritingIdiomTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"},{"authorTime":"2021-06-27 15:44:14","codes":[{"authorDate":"2021-06-27 15:44:14","commitOrder":4,"curCode":"    public void testOutputStreamSuccess(@TempDir File tmpdir) throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new OutputStreamStatement() {\n            @Override\n            public void write(OutputStream os) throws IOException {\n                os.write(\"after\".getBytes(StandardCharsets.US_ASCII));\n                assertTrue(tmp.exists(), \"implementation of AtomicFileOutputStream has changed, update the test\");\n            }\n        });\n        assertFalse(tmp.exists(), \"tmp file should have been deleted\");\n        \r\n        assertEquals(\"after\", getContent(target));\n    }\n","date":"2021-06-27 15:44:14","endLine":56,"groupId":"10497","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testOutputStreamSuccess","params":"(@TempDirFiletmpdir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/31/26f005111f02fbe6cb58aeb58b0ec0353cedb5.src","preCode":"    public void testOutputStreamSuccess() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new OutputStreamStatement() {\n            @Override\n            public void write(OutputStream os) throws IOException {\n                os.write(\"after\".getBytes(StandardCharsets.US_ASCII));\n                assertTrue(tmp.exists(), \"implementation of AtomicFileOutputStream has changed, update the test\");\n            }\n        });\n        assertFalse(tmp.exists(), \"tmp file should have been deleted\");\n        \r\n        assertEquals(\"after\", getContent(target));\n        target.delete();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/AtomicFileWritingIdiomTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2021-06-27 15:44:14","commitOrder":4,"curCode":"    public void testWriterSuccess(@TempDir File tmpdir) throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new WriterStatement() {\n            @Override\n            public void write(Writer os) throws IOException {\n                os.write(\"after\");\n                assertTrue(tmp.exists(), \"implementation of AtomicFileOutputStream has changed, update the test\");\n            }\n        });\n        assertFalse(tmp.exists(), \"tmp file should have been deleted\");\n        \r\n        assertEquals(\"after\", getContent(target));\n    }\n","date":"2021-06-27 15:44:14","endLine":74,"groupId":"10497","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testWriterSuccess","params":"(@TempDirFiletmpdir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/31/26f005111f02fbe6cb58aeb58b0ec0353cedb5.src","preCode":"    public void testWriterSuccess() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        new AtomicFileWritingIdiom(target, new WriterStatement() {\n            @Override\n            public void write(Writer os) throws IOException {\n                os.write(\"after\");\n                assertTrue(tmp.exists(), \"implementation of AtomicFileOutputStream has changed, update the test\");\n            }\n        });\n        assertFalse(tmp.exists(), \"tmp file should have been deleted\");\n        \r\n        assertEquals(\"after\", getContent(target));\n        target.delete();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/AtomicFileWritingIdiomTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"16187c48a1d9b339866b81e69c522021b031c4c3","commitMessage":"@@@ZOOKEEPER-4319: Refactored AtomicFileWritingIdiomTest to use TempDir annotation\n\nThis is a test refactoring. No original assertion was changed nor the original code presented any failing steps.\n\n**Problem:**\nTests that manipulate external file resources need to guarantee resource integrity and availability. Test suite design and maintainability may suffer from the addition of assurance steps to guarantee parallel execution scenarios and resource leakage from failed previous executions.\n\n**Solution:**\nThe use of tempdir annotation assures a temporary directory being created and cleaned up for every test method execution.  thus simplifying test maintenance steps.\n\nAuthor: Elvys Soares <eas5@cin.ufpe.br>\n\nReviewers: maoling <maoling@apache.org>\n\nCloses #1702 from eas5/test_improvement\n","date":"2021-06-27 15:44:14","modifiedFileCount":"1","status":"M","submitter":"Elvys Soares"}]
