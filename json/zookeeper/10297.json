[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testStandalone() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT = PortAssignment.unique();\n\n        MainThread main = new MainThread(CLIENT_PORT, true, null);\n        main.start();\n\n        Assert.assertTrue(\"waiting for server being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT,\n                        CONNECTION_TIMEOUT));\n\n        clientConnected = new CountDownLatch(1);\n        ZooKeeper zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT,\n                ClientBase.CONNECTION_TIMEOUT, this);\n        Assert.assertTrue(\"Failed to establish zkclient connection!\",\n                clientConnected.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS));\n\n        zk.create(\"/foo\", \"foobar\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        Assert.assertEquals(new String(zk.getData(\"/foo\", null, null)), \"foobar\");\n        zk.close();\n\n        main.shutdown();\n        main.join();\n        main.deleteDirs();\n\n        Assert.assertTrue(\"waiting for server down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT,\n                        ClientBase.CONNECTION_TIMEOUT));\n    }\n","date":"2018-10-05 20:25:43","endLine":326,"groupId":"1190","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStandalone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f1/24fcd7b5aaedc746ed5e7d28797615590ee1b8.src","preCode":"    public void testStandalone() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT = PortAssignment.unique();\n\n        MainThread main = new MainThread(CLIENT_PORT, true, null);\n        main.start();\n\n        Assert.assertTrue(\"waiting for server being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT,\n                        CONNECTION_TIMEOUT));\n\n        clientConnected = new CountDownLatch(1);\n        ZooKeeper zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT,\n                ClientBase.CONNECTION_TIMEOUT, this);\n        Assert.assertTrue(\"Failed to establish zkclient connection!\",\n                clientConnected.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS));\n\n        zk.create(\"/foo\", \"foobar\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        Assert.assertEquals(new String(zk.getData(\"/foo\", null, null)), \"foobar\");\n        zk.close();\n\n        main.shutdown();\n        main.join();\n        main.deleteDirs();\n\n        Assert.assertTrue(\"waiting for server down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT,\n                        ClientBase.CONNECTION_TIMEOUT));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testFaultyMetricsProviderOnStop()\n            throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT = PortAssignment.unique();\n        MetricsProviderWithErrorInStop.stopCalled.set(false);\n        final String configs = \"metricsProvider.className=\"+MetricsProviderWithErrorInStop.class.getName()+\"\\n\";\n        MainThread main = new MainThread(CLIENT_PORT, true, configs);\n        main.start();\n\n        Assert.assertTrue(\"waiting for server being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT,\n                        CONNECTION_TIMEOUT));\n\n        clientConnected = new CountDownLatch(1);\n        ZooKeeper zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT,\n                ClientBase.CONNECTION_TIMEOUT, this);\n        Assert.assertTrue(\"Failed to establish zkclient connection!\",\n                clientConnected.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS));\n\n        zk.create(\"/foo\", \"foobar\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        Assert.assertEquals(new String(zk.getData(\"/foo\", null, null)), \"foobar\");\n        zk.close();\n\n        main.shutdown();\n        main.join();\n        main.deleteDirs();\n\n        Assert.assertTrue(\"waiting for server down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT,\n                        ClientBase.CONNECTION_TIMEOUT));\n        Assert.assertTrue(MetricsProviderWithErrorInStop.stopCalled.get());\n    }\n","date":"2018-10-05 20:25:43","endLine":456,"groupId":"1190","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFaultyMetricsProviderOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f1/24fcd7b5aaedc746ed5e7d28797615590ee1b8.src","preCode":"    public void testFaultyMetricsProviderOnStop()\n            throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT = PortAssignment.unique();\n        MetricsProviderWithErrorInStop.stopCalled.set(false);\n        final String configs = \"metricsProvider.className=\"+MetricsProviderWithErrorInStop.class.getName()+\"\\n\";\n        MainThread main = new MainThread(CLIENT_PORT, true, configs);\n        main.start();\n\n        Assert.assertTrue(\"waiting for server being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT,\n                        CONNECTION_TIMEOUT));\n\n        clientConnected = new CountDownLatch(1);\n        ZooKeeper zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT,\n                ClientBase.CONNECTION_TIMEOUT, this);\n        Assert.assertTrue(\"Failed to establish zkclient connection!\",\n                clientConnected.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS));\n\n        zk.create(\"/foo\", \"foobar\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        Assert.assertEquals(new String(zk.getData(\"/foo\", null, null)), \"foobar\");\n        zk.close();\n\n        main.shutdown();\n        main.join();\n        main.deleteDirs();\n\n        Assert.assertTrue(\"waiting for server down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT,\n                        ClientBase.CONNECTION_TIMEOUT));\n        Assert.assertTrue(MetricsProviderWithErrorInStop.stopCalled.get());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testStandalone() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT = PortAssignment.unique();\n\n        MainThread main = new MainThread(CLIENT_PORT, true, null);\n        main.start();\n\n        assertTrue(\n                \"waiting for server being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT, CONNECTION_TIMEOUT));\n\n        clientConnected = new CountDownLatch(1);\n        ZooKeeper zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT, this);\n        assertTrue(\"Failed to establish zkclient connection!\", clientConnected.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS));\n\n        zk.create(\"/foo\", \"foobar\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        assertEquals(new String(zk.getData(\"/foo\", null, null)), \"foobar\");\n        zk.close();\n\n        main.shutdown();\n        main.join();\n        main.deleteDirs();\n\n        assertTrue(\n                \"waiting for server down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT));\n    }\n","date":"2019-08-17 23:13:15","endLine":322,"groupId":"486","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStandalone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b7/df9323f87141d2aabf664a895ab6620ca8395a.src","preCode":"    public void testStandalone() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT = PortAssignment.unique();\n\n        MainThread main = new MainThread(CLIENT_PORT, true, null);\n        main.start();\n\n        Assert.assertTrue(\"waiting for server being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT,\n                        CONNECTION_TIMEOUT));\n\n        clientConnected = new CountDownLatch(1);\n        ZooKeeper zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT,\n                ClientBase.CONNECTION_TIMEOUT, this);\n        Assert.assertTrue(\"Failed to establish zkclient connection!\",\n                clientConnected.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS));\n\n        zk.create(\"/foo\", \"foobar\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        Assert.assertEquals(new String(zk.getData(\"/foo\", null, null)), \"foobar\");\n        zk.close();\n\n        main.shutdown();\n        main.join();\n        main.deleteDirs();\n\n        Assert.assertTrue(\"waiting for server down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT,\n                        ClientBase.CONNECTION_TIMEOUT));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testFaultyMetricsProviderOnStop() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT = PortAssignment.unique();\n        MetricsProviderWithErrorInStop.stopCalled.set(false);\n        final String configs = \"metricsProvider.className=\" + MetricsProviderWithErrorInStop.class.getName() + \"\\n\";\n        MainThread main = new MainThread(CLIENT_PORT, true, configs);\n        main.start();\n\n        assertTrue(\n                \"waiting for server being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT, CONNECTION_TIMEOUT));\n\n        clientConnected = new CountDownLatch(1);\n        ZooKeeper zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT, this);\n        assertTrue(\"Failed to establish zkclient connection!\", clientConnected.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS));\n\n        zk.create(\"/foo\", \"foobar\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        assertEquals(new String(zk.getData(\"/foo\", null, null)), \"foobar\");\n        zk.close();\n\n        main.shutdown();\n        main.join();\n        main.deleteDirs();\n\n        assertTrue(\n                \"waiting for server down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT));\n        assertTrue(MetricsProviderWithErrorInStop.stopCalled.get());\n    }\n","date":"2019-08-17 23:13:15","endLine":448,"groupId":"486","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFaultyMetricsProviderOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b7/df9323f87141d2aabf664a895ab6620ca8395a.src","preCode":"    public void testFaultyMetricsProviderOnStop()\n            throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT = PortAssignment.unique();\n        MetricsProviderWithErrorInStop.stopCalled.set(false);\n        final String configs = \"metricsProvider.className=\"+MetricsProviderWithErrorInStop.class.getName()+\"\\n\";\n        MainThread main = new MainThread(CLIENT_PORT, true, configs);\n        main.start();\n\n        Assert.assertTrue(\"waiting for server being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT,\n                        CONNECTION_TIMEOUT));\n\n        clientConnected = new CountDownLatch(1);\n        ZooKeeper zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT,\n                ClientBase.CONNECTION_TIMEOUT, this);\n        Assert.assertTrue(\"Failed to establish zkclient connection!\",\n                clientConnected.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS));\n\n        zk.create(\"/foo\", \"foobar\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        Assert.assertEquals(new String(zk.getData(\"/foo\", null, null)), \"foobar\");\n        zk.close();\n\n        main.shutdown();\n        main.join();\n        main.deleteDirs();\n\n        Assert.assertTrue(\"waiting for server down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT,\n                        ClientBase.CONNECTION_TIMEOUT));\n        Assert.assertTrue(MetricsProviderWithErrorInStop.stopCalled.get());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testStandalone() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT = PortAssignment.unique();\n\n        MainThread main = new MainThread(CLIENT_PORT, true, null);\n        main.start();\n\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT, CONNECTION_TIMEOUT),\n                \"waiting for server being up\");\n\n        clientConnected = new CountDownLatch(1);\n        ZooKeeper zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT, this);\n        assertTrue(clientConnected.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS), \"Failed to establish zkclient connection!\");\n\n        zk.create(\"/foo\", \"foobar\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        assertEquals(new String(zk.getData(\"/foo\", null, null)), \"foobar\");\n        zk.close();\n\n        main.shutdown();\n        main.join();\n        main.deleteDirs();\n\n        assertTrue(ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT),\n                \"waiting for server down\");\n    }\n","date":"2020-08-04 21:01:52","endLine":318,"groupId":"10297","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testStandalone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/da/821296ea1989026669e827c4baa969132dca94.src","preCode":"    public void testStandalone() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT = PortAssignment.unique();\n\n        MainThread main = new MainThread(CLIENT_PORT, true, null);\n        main.start();\n\n        assertTrue(\n                \"waiting for server being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT, CONNECTION_TIMEOUT));\n\n        clientConnected = new CountDownLatch(1);\n        ZooKeeper zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT, this);\n        assertTrue(\"Failed to establish zkclient connection!\", clientConnected.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS));\n\n        zk.create(\"/foo\", \"foobar\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        assertEquals(new String(zk.getData(\"/foo\", null, null)), \"foobar\");\n        zk.close();\n\n        main.shutdown();\n        main.join();\n        main.deleteDirs();\n\n        assertTrue(\n                \"waiting for server down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testFaultyMetricsProviderOnStop() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT = PortAssignment.unique();\n        MetricsProviderWithErrorInStop.stopCalled.set(false);\n        final String configs = \"metricsProvider.className=\" + MetricsProviderWithErrorInStop.class.getName() + \"\\n\";\n        MainThread main = new MainThread(CLIENT_PORT, true, configs);\n        main.start();\n\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT, CONNECTION_TIMEOUT),\n                \"waiting for server being up\");\n\n        clientConnected = new CountDownLatch(1);\n        ZooKeeper zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT, this);\n        assertTrue(clientConnected.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS), \"Failed to establish zkclient connection!\");\n\n        zk.create(\"/foo\", \"foobar\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        assertEquals(new String(zk.getData(\"/foo\", null, null)), \"foobar\");\n        zk.close();\n\n        main.shutdown();\n        main.join();\n        main.deleteDirs();\n\n        assertTrue(ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT),\n                \"waiting for server down\");\n        assertTrue(MetricsProviderWithErrorInStop.stopCalled.get());\n    }\n","date":"2020-08-04 21:01:52","endLine":442,"groupId":"10297","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFaultyMetricsProviderOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/da/821296ea1989026669e827c4baa969132dca94.src","preCode":"    public void testFaultyMetricsProviderOnStop() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT = PortAssignment.unique();\n        MetricsProviderWithErrorInStop.stopCalled.set(false);\n        final String configs = \"metricsProvider.className=\" + MetricsProviderWithErrorInStop.class.getName() + \"\\n\";\n        MainThread main = new MainThread(CLIENT_PORT, true, configs);\n        main.start();\n\n        assertTrue(\n                \"waiting for server being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT, CONNECTION_TIMEOUT));\n\n        clientConnected = new CountDownLatch(1);\n        ZooKeeper zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT, this);\n        assertTrue(\"Failed to establish zkclient connection!\", clientConnected.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS));\n\n        zk.create(\"/foo\", \"foobar\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        assertEquals(new String(zk.getData(\"/foo\", null, null)), \"foobar\");\n        zk.close();\n\n        main.shutdown();\n        main.join();\n        main.deleteDirs();\n\n        assertTrue(\n                \"waiting for server down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT));\n        assertTrue(MetricsProviderWithErrorInStop.stopCalled.get());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":415,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
