[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testSessionMoved() throws Exception {\n        String hostPorts[] = qb.hostPort.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[0],\n                ClientBase.CONNECTION_TIMEOUT, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for(int i = 0; i < hostPorts.length*2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew =\n                new DisconnectableZooKeeper(hostPorts[(i+1)%hostPorts.length],\n                    ClientBase.CONNECTION_TIMEOUT,\n                    new Watcher() {public void process(WatchedEvent event) {\n                    }},\n                    zk.getSessionId(),\n                    zk.getSessionPasswd());\n            zknew.setData(\"/\", new byte[1], -1);\n            final int result[] = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                    public void processResult(int rc, String path, Object ctx) {\n                        synchronized(result) { result[0] = rc; result.notify(); }\n                    }\n                }, null);\n            synchronized(result) {\n                if(result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(hostPorts[(i+1)%hostPorts.length] + \" Sync returned \" + result[0]);\n            Assert.assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                Assert.fail(\"Should have lost the connection\");\n            } catch(KeeperException.ConnectionLossException e) {\n            }\n            zk = zknew;\n        }\n        zk.close();\n    }\n","date":"2018-10-19 20:39:50","endLine":237,"groupId":"324","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSessionMoved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/20/388d8902ebacdab9f778aeb4c7ad238453e005.src","preCode":"    public void testSessionMoved() throws Exception {\n        String hostPorts[] = qb.hostPort.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[0],\n                ClientBase.CONNECTION_TIMEOUT, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for(int i = 0; i < hostPorts.length*2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew =\n                new DisconnectableZooKeeper(hostPorts[(i+1)%hostPorts.length],\n                    ClientBase.CONNECTION_TIMEOUT,\n                    new Watcher() {public void process(WatchedEvent event) {\n                    }},\n                    zk.getSessionId(),\n                    zk.getSessionPasswd());\n            zknew.setData(\"/\", new byte[1], -1);\n            final int result[] = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                    public void processResult(int rc, String path, Object ctx) {\n                        synchronized(result) { result[0] = rc; result.notify(); }\n                    }\n                }, null);\n            synchronized(result) {\n                if(result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(hostPorts[(i+1)%hostPorts.length] + \" Sync returned \" + result[0]);\n            Assert.assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                Assert.fail(\"Should have lost the connection\");\n            } catch(KeeperException.ConnectionLossException e) {\n            }\n            zk = zknew;\n        }\n        zk.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testSessionMove() throws Exception {\n        String hostPorts[] = HOSTPORT.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[0],\n                CONNECTION_TIMEOUT, new MyWatcher(\"0\"));\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE,\n                CreateMode.EPHEMERAL);\n        \r\n        for(int i = 0; i < hostPorts.length*2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(\n                    hostPorts[(i+1)%hostPorts.length],\n                    CONNECTION_TIMEOUT,\n                    new MyWatcher(Integer.toString(i+1)),\n                    zk.getSessionId(),\n                    zk.getSessionPasswd());\n            final int result[] = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                    public void processResult(int rc, String path, Object ctx) {\n                        synchronized(result) { result[0] = rc; result.notify(); }\n                    }\n                }, null);\n            synchronized(result) {\n                if(result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(hostPorts[(i+1)%hostPorts.length] + \" Sync returned \" + result[0]);\n            Assert.assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            zknew.setData(\"/\", new byte[1], -1);\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                Assert.fail(\"Should have lost the connection\");\n            } catch(KeeperException.ConnectionLossException e) {\n                LOG.info(\"Got connection loss exception as expected\");\n            }\n            \r\n            zk = zknew;\n        }\n        zk.close();\n    }\n","date":"2018-10-19 20:39:50","endLine":287,"groupId":"1936","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSessionMove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/88/9b65e430b7125b170ecfd44881e933049f3a28.src","preCode":"    public void testSessionMove() throws Exception {\n        String hostPorts[] = HOSTPORT.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[0],\n                CONNECTION_TIMEOUT, new MyWatcher(\"0\"));\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE,\n                CreateMode.EPHEMERAL);\n        \r\n        for(int i = 0; i < hostPorts.length*2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(\n                    hostPorts[(i+1)%hostPorts.length],\n                    CONNECTION_TIMEOUT,\n                    new MyWatcher(Integer.toString(i+1)),\n                    zk.getSessionId(),\n                    zk.getSessionPasswd());\n            final int result[] = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                    public void processResult(int rc, String path, Object ctx) {\n                        synchronized(result) { result[0] = rc; result.notify(); }\n                    }\n                }, null);\n            synchronized(result) {\n                if(result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(hostPorts[(i+1)%hostPorts.length] + \" Sync returned \" + result[0]);\n            Assert.assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            zknew.setData(\"/\", new byte[1], -1);\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                Assert.fail(\"Should have lost the connection\");\n            } catch(KeeperException.ConnectionLossException e) {\n                LOG.info(\"Got connection loss exception as expected\");\n            }\n            \r\n            zk = zknew;\n        }\n        zk.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testSessionMoved() throws Exception {\n        String[] hostPorts = qb.hostPort.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[0], ClientBase.CONNECTION_TIMEOUT, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for (int i = 0; i < hostPorts.length * 2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[(i + 1)\n                                                                                          % hostPorts.length], ClientBase.CONNECTION_TIMEOUT, new Watcher() {\n                public void process(WatchedEvent event) {\n                }\n            }, zk.getSessionId(), zk.getSessionPasswd());\n            zknew.setData(\"/\", new byte[1], -1);\n            final int[] result = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                public void processResult(int rc, String path, Object ctx) {\n                    synchronized (result) {\n                        result[0] = rc;\n                        result.notify();\n                    }\n                }\n            }, null);\n            synchronized (result) {\n                if (result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(hostPorts[(i + 1) % hostPorts.length] + \" Sync returned \" + result[0]);\n            assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                fail(\"Should have lost the connection\");\n            } catch (KeeperException.ConnectionLossException e) {\n            }\n            zk = zknew;\n        }\n        zk.close();\n    }\n","date":"2019-08-17 23:13:15","endLine":240,"groupId":"324","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSessionMoved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f3/9548b02b15895131bac7e4ad16b3f89c82a9ba.src","preCode":"    public void testSessionMoved() throws Exception {\n        String hostPorts[] = qb.hostPort.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[0],\n                ClientBase.CONNECTION_TIMEOUT, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for(int i = 0; i < hostPorts.length*2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew =\n                new DisconnectableZooKeeper(hostPorts[(i+1)%hostPorts.length],\n                    ClientBase.CONNECTION_TIMEOUT,\n                    new Watcher() {public void process(WatchedEvent event) {\n                    }},\n                    zk.getSessionId(),\n                    zk.getSessionPasswd());\n            zknew.setData(\"/\", new byte[1], -1);\n            final int result[] = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                    public void processResult(int rc, String path, Object ctx) {\n                        synchronized(result) { result[0] = rc; result.notify(); }\n                    }\n                }, null);\n            synchronized(result) {\n                if(result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(hostPorts[(i+1)%hostPorts.length] + \" Sync returned \" + result[0]);\n            Assert.assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                Assert.fail(\"Should have lost the connection\");\n            } catch(KeeperException.ConnectionLossException e) {\n            }\n            zk = zknew;\n        }\n        zk.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testSessionMove() throws Exception {\n        String[] hostPorts = HOSTPORT.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[0], CONNECTION_TIMEOUT, new MyWatcher(\"0\"));\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for (int i = 0; i < hostPorts.length * 2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[(i + 1)\n                                                                                          % hostPorts.length], CONNECTION_TIMEOUT, new MyWatcher(Integer.toString(\n                    i\n                            + 1)), zk.getSessionId(), zk.getSessionPasswd());\n            final int[] result = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                public void processResult(int rc, String path, Object ctx) {\n                    synchronized (result) {\n                        result[0] = rc;\n                        result.notify();\n                    }\n                }\n            }, null);\n            synchronized (result) {\n                if (result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(hostPorts[(i + 1) % hostPorts.length] + \" Sync returned \" + result[0]);\n            assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            zknew.setData(\"/\", new byte[1], -1);\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                fail(\"Should have lost the connection\");\n            } catch (KeeperException.ConnectionLossException e) {\n                LOG.info(\"Got connection loss exception as expected\");\n            }\n            \r\n            zk = zknew;\n        }\n        zk.close();\n    }\n","date":"2019-08-17 23:13:15","endLine":274,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSessionMove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ff/b896a239a10ce78e062c5a860b8c994a83c7c8.src","preCode":"    public void testSessionMove() throws Exception {\n        String hostPorts[] = HOSTPORT.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[0],\n                CONNECTION_TIMEOUT, new MyWatcher(\"0\"));\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE,\n                CreateMode.EPHEMERAL);\n        \r\n        for(int i = 0; i < hostPorts.length*2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(\n                    hostPorts[(i+1)%hostPorts.length],\n                    CONNECTION_TIMEOUT,\n                    new MyWatcher(Integer.toString(i+1)),\n                    zk.getSessionId(),\n                    zk.getSessionPasswd());\n            final int result[] = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                    public void processResult(int rc, String path, Object ctx) {\n                        synchronized(result) { result[0] = rc; result.notify(); }\n                    }\n                }, null);\n            synchronized(result) {\n                if(result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(hostPorts[(i+1)%hostPorts.length] + \" Sync returned \" + result[0]);\n            Assert.assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            zknew.setData(\"/\", new byte[1], -1);\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                Assert.fail(\"Should have lost the connection\");\n            } catch(KeeperException.ConnectionLossException e) {\n                LOG.info(\"Got connection loss exception as expected\");\n            }\n            \r\n            zk = zknew;\n        }\n        zk.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-09-18 17:20:31","commitOrder":3,"curCode":"    public void testSessionMoved() throws Exception {\n        String[] hostPorts = qb.hostPort.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(\n            hostPorts[0],\n            ClientBase.CONNECTION_TIMEOUT,\n            DummyWatcher.INSTANCE);\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for (int i = 0; i < hostPorts.length * 2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(\n                hostPorts[(i + 1) % hostPorts.length],\n                ClientBase.CONNECTION_TIMEOUT,\n                DummyWatcher.INSTANCE,\n                zk.getSessionId(),\n                zk.getSessionPasswd());\n            zknew.setData(\"/\", new byte[1], -1);\n            final int[] result = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                public void processResult(int rc, String path, Object ctx) {\n                    synchronized (result) {\n                        result[0] = rc;\n                        result.notify();\n                    }\n                }\n            }, null);\n            synchronized (result) {\n                if (result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(hostPorts[(i + 1) % hostPorts.length] + \" Sync returned \" + result[0]);\n            assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                fail(\"Should have lost the connection\");\n            } catch (KeeperException.ConnectionLossException e) {\n            }\n            zk = zknew;\n        }\n        zk.close();\n    }\n","date":"2019-09-18 17:20:31","endLine":242,"groupId":"4492","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSessionMoved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/86/6c602327175891e808736e044261d10226f58e.src","preCode":"    public void testSessionMoved() throws Exception {\n        String[] hostPorts = qb.hostPort.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[0], ClientBase.CONNECTION_TIMEOUT, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for (int i = 0; i < hostPorts.length * 2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[(i + 1)\n                                                                                          % hostPorts.length], ClientBase.CONNECTION_TIMEOUT, new Watcher() {\n                public void process(WatchedEvent event) {\n                }\n            }, zk.getSessionId(), zk.getSessionPasswd());\n            zknew.setData(\"/\", new byte[1], -1);\n            final int[] result = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                public void processResult(int rc, String path, Object ctx) {\n                    synchronized (result) {\n                        result[0] = rc;\n                        result.notify();\n                    }\n                }\n            }, null);\n            synchronized (result) {\n                if (result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(hostPorts[(i + 1) % hostPorts.length] + \" Sync returned \" + result[0]);\n            assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                fail(\"Should have lost the connection\");\n            } catch (KeeperException.ConnectionLossException e) {\n            }\n            zk = zknew;\n        }\n        zk.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testSessionMove() throws Exception {\n        String[] hostPorts = HOSTPORT.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[0], CONNECTION_TIMEOUT, new MyWatcher(\"0\"));\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for (int i = 0; i < hostPorts.length * 2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[(i + 1)\n                                                                                          % hostPorts.length], CONNECTION_TIMEOUT, new MyWatcher(Integer.toString(\n                    i\n                            + 1)), zk.getSessionId(), zk.getSessionPasswd());\n            final int[] result = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                public void processResult(int rc, String path, Object ctx) {\n                    synchronized (result) {\n                        result[0] = rc;\n                        result.notify();\n                    }\n                }\n            }, null);\n            synchronized (result) {\n                if (result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(hostPorts[(i + 1) % hostPorts.length] + \" Sync returned \" + result[0]);\n            assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            zknew.setData(\"/\", new byte[1], -1);\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                fail(\"Should have lost the connection\");\n            } catch (KeeperException.ConnectionLossException e) {\n                LOG.info(\"Got connection loss exception as expected\");\n            }\n            \r\n            zk = zknew;\n        }\n        zk.close();\n    }\n","date":"2019-08-17 23:13:15","endLine":274,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSessionMove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ff/b896a239a10ce78e062c5a860b8c994a83c7c8.src","preCode":"    public void testSessionMove() throws Exception {\n        String[] hostPorts = HOSTPORT.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[0], CONNECTION_TIMEOUT, new MyWatcher(\"0\"));\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for (int i = 0; i < hostPorts.length * 2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[(i + 1)\n                                                                                          % hostPorts.length], CONNECTION_TIMEOUT, new MyWatcher(Integer.toString(\n                    i\n                            + 1)), zk.getSessionId(), zk.getSessionPasswd());\n            final int[] result = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                public void processResult(int rc, String path, Object ctx) {\n                    synchronized (result) {\n                        result[0] = rc;\n                        result.notify();\n                    }\n                }\n            }, null);\n            synchronized (result) {\n                if (result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(hostPorts[(i + 1) % hostPorts.length] + \" Sync returned \" + result[0]);\n            assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            zknew.setData(\"/\", new byte[1], -1);\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                fail(\"Should have lost the connection\");\n            } catch (KeeperException.ConnectionLossException e) {\n                LOG.info(\"Got connection loss exception as expected\");\n            }\n            \r\n            zk = zknew;\n        }\n        zk.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"N"}],"commitId":"7b8b37617bd86989f94510acac32e7fa94058a6b","commitMessage":"@@@ZOOKEEPER-3523: Replace dummy watcher with a unified singleton\n\nRevisit subclasses of `Watcher` and replace dummy implement with a global singleton `Watcher.DUMMY_WATCHER`.\n\nA followup could be use separated `Watcher` in tests instead of implement `Watcher` for `XXXTests`. It would be better to keep test case \"class\" alone IMO.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Michael Han <hanm@apache.org>.  Enrico Olivelli <eolivelli@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1064 from TisonKun/ZOOKEEPER-3523\n","date":"2019-09-18 17:20:31","modifiedFileCount":"16","status":"M","submitter":"tison"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2019-10-10 20:37:45","commitOrder":4,"curCode":"    public void testSessionMoved() throws Exception {\n        String[] hostPorts = qb.hostPort.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(\n            hostPorts[0],\n            ClientBase.CONNECTION_TIMEOUT,\n            DummyWatcher.INSTANCE);\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for (int i = 0; i < hostPorts.length * 2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(\n                hostPorts[(i + 1) % hostPorts.length],\n                ClientBase.CONNECTION_TIMEOUT,\n                DummyWatcher.INSTANCE,\n                zk.getSessionId(),\n                zk.getSessionPasswd());\n            zknew.setData(\"/\", new byte[1], -1);\n            final int[] result = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                public void processResult(int rc, String path, Object ctx) {\n                    synchronized (result) {\n                        result[0] = rc;\n                        result.notify();\n                    }\n                }\n            }, null);\n            synchronized (result) {\n                if (result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(\"{} Sync returned {}\", hostPorts[(i + 1) % hostPorts.length], result[0]);\n            assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                fail(\"Should have lost the connection\");\n            } catch (KeeperException.ConnectionLossException e) {\n            }\n            zk = zknew;\n        }\n        zk.close();\n    }\n","date":"2019-10-10 20:37:45","endLine":242,"groupId":"4492","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSessionMoved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/7a/3a5f00372d9e197b7150221aa57c4afd453849.src","preCode":"    public void testSessionMoved() throws Exception {\n        String[] hostPorts = qb.hostPort.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(\n            hostPorts[0],\n            ClientBase.CONNECTION_TIMEOUT,\n            DummyWatcher.INSTANCE);\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for (int i = 0; i < hostPorts.length * 2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(\n                hostPorts[(i + 1) % hostPorts.length],\n                ClientBase.CONNECTION_TIMEOUT,\n                DummyWatcher.INSTANCE,\n                zk.getSessionId(),\n                zk.getSessionPasswd());\n            zknew.setData(\"/\", new byte[1], -1);\n            final int[] result = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                public void processResult(int rc, String path, Object ctx) {\n                    synchronized (result) {\n                        result[0] = rc;\n                        result.notify();\n                    }\n                }\n            }, null);\n            synchronized (result) {\n                if (result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(hostPorts[(i + 1) % hostPorts.length] + \" Sync returned \" + result[0]);\n            assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                fail(\"Should have lost the connection\");\n            } catch (KeeperException.ConnectionLossException e) {\n            }\n            zk = zknew;\n        }\n        zk.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2019-10-10 20:37:45","commitOrder":4,"curCode":"    public void testSessionMove() throws Exception {\n        String[] hostPorts = HOSTPORT.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[0], CONNECTION_TIMEOUT, new MyWatcher(\"0\"));\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for (int i = 0; i < hostPorts.length * 2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[(i + 1)\n                                                                                          % hostPorts.length], CONNECTION_TIMEOUT, new MyWatcher(Integer.toString(\n                    i\n                            + 1)), zk.getSessionId(), zk.getSessionPasswd());\n            final int[] result = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                public void processResult(int rc, String path, Object ctx) {\n                    synchronized (result) {\n                        result[0] = rc;\n                        result.notify();\n                    }\n                }\n            }, null);\n            synchronized (result) {\n                if (result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(\"{} Sync returned {}\", hostPorts[(i + 1) % hostPorts.length], result[0]);\n            assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            zknew.setData(\"/\", new byte[1], -1);\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                fail(\"Should have lost the connection\");\n            } catch (KeeperException.ConnectionLossException e) {\n                LOG.info(\"Got connection loss exception as expected\");\n            }\n            \r\n            zk = zknew;\n        }\n        zk.close();\n    }\n","date":"2019-10-10 20:37:45","endLine":274,"groupId":"1530","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSessionMove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/9a/5376b6344c3b149afc13c505a1f2d07c0c80d4.src","preCode":"    public void testSessionMove() throws Exception {\n        String[] hostPorts = HOSTPORT.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[0], CONNECTION_TIMEOUT, new MyWatcher(\"0\"));\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for (int i = 0; i < hostPorts.length * 2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[(i + 1)\n                                                                                          % hostPorts.length], CONNECTION_TIMEOUT, new MyWatcher(Integer.toString(\n                    i\n                            + 1)), zk.getSessionId(), zk.getSessionPasswd());\n            final int[] result = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                public void processResult(int rc, String path, Object ctx) {\n                    synchronized (result) {\n                        result[0] = rc;\n                        result.notify();\n                    }\n                }\n            }, null);\n            synchronized (result) {\n                if (result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(hostPorts[(i + 1) % hostPorts.length] + \" Sync returned \" + result[0]);\n            assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            zknew.setData(\"/\", new byte[1], -1);\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                fail(\"Should have lost the connection\");\n            } catch (KeeperException.ConnectionLossException e) {\n                LOG.info(\"Got connection loss exception as expected\");\n            }\n            \r\n            zk = zknew;\n        }\n        zk.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"},{"authorTime":"2019-12-28 23:17:54","codes":[{"authorDate":"2019-12-28 23:17:54","commitOrder":5,"curCode":"    public void testSessionMoved() throws Exception {\n        String[] hostPorts = qb.hostPort.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(\n            hostPorts[0],\n            ClientBase.CONNECTION_TIMEOUT,\n            DummyWatcher.INSTANCE);\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for (int i = 0; i < hostPorts.length * 2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(\n                hostPorts[(i + 1) % hostPorts.length],\n                ClientBase.CONNECTION_TIMEOUT,\n                DummyWatcher.INSTANCE,\n                zk.getSessionId(),\n                zk.getSessionPasswd());\n            zknew.setData(\"/\", new byte[1], -1);\n            final int[] result = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", (rc, path, ctx) -> {\n                synchronized (result) {\n                    result[0] = rc;\n                    result.notify();\n                }\n            }, null);\n            synchronized (result) {\n                if (result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(\"{} Sync returned {}\", hostPorts[(i + 1) % hostPorts.length], result[0]);\n            assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                fail(\"Should have lost the connection\");\n            } catch (KeeperException.ConnectionLossException e) {\n            }\n            zk = zknew;\n        }\n        zk.close();\n    }\n","date":"2019-12-28 23:17:54","endLine":234,"groupId":"10565","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSessionMoved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c6/09c5c3fcdc0292044c60e10df5677d46b13554.src","preCode":"    public void testSessionMoved() throws Exception {\n        String[] hostPorts = qb.hostPort.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(\n            hostPorts[0],\n            ClientBase.CONNECTION_TIMEOUT,\n            DummyWatcher.INSTANCE);\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for (int i = 0; i < hostPorts.length * 2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(\n                hostPorts[(i + 1) % hostPorts.length],\n                ClientBase.CONNECTION_TIMEOUT,\n                DummyWatcher.INSTANCE,\n                zk.getSessionId(),\n                zk.getSessionPasswd());\n            zknew.setData(\"/\", new byte[1], -1);\n            final int[] result = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                public void processResult(int rc, String path, Object ctx) {\n                    synchronized (result) {\n                        result[0] = rc;\n                        result.notify();\n                    }\n                }\n            }, null);\n            synchronized (result) {\n                if (result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(\"{} Sync returned {}\", hostPorts[(i + 1) % hostPorts.length], result[0]);\n            assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                fail(\"Should have lost the connection\");\n            } catch (KeeperException.ConnectionLossException e) {\n            }\n            zk = zknew;\n        }\n        zk.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"},{"authorDate":"2019-12-28 23:17:54","commitOrder":5,"curCode":"    public void testSessionMove() throws Exception {\n        String[] hostPorts = HOSTPORT.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[0], CONNECTION_TIMEOUT, new MyWatcher(\"0\"));\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for (int i = 0; i < hostPorts.length * 2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[(i + 1)\n                                                                                          % hostPorts.length], CONNECTION_TIMEOUT, new MyWatcher(Integer.toString(\n                    i\n                            + 1)), zk.getSessionId(), zk.getSessionPasswd());\n            final int[] result = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", (rc, path, ctx) -> {\n                synchronized (result) {\n                    result[0] = rc;\n                    result.notify();\n                }\n            }, null);\n            synchronized (result) {\n                if (result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(\"{} Sync returned {}\", hostPorts[(i + 1) % hostPorts.length], result[0]);\n            assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            zknew.setData(\"/\", new byte[1], -1);\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                fail(\"Should have lost the connection\");\n            } catch (KeeperException.ConnectionLossException e) {\n                LOG.info(\"Got connection loss exception as expected\");\n            }\n            \r\n            zk = zknew;\n        }\n        zk.close();\n    }\n","date":"2019-12-28 23:17:54","endLine":272,"groupId":"10565","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSessionMove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d2/ab579062c264b681feec9532728f0cf1b9747b.src","preCode":"    public void testSessionMove() throws Exception {\n        String[] hostPorts = HOSTPORT.split(\",\");\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[0], CONNECTION_TIMEOUT, new MyWatcher(\"0\"));\n        zk.create(\"/sessionMoveTest\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        \r\n        for (int i = 0; i < hostPorts.length * 2; i++) {\n            zk.dontReconnect();\n            \r\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[(i + 1)\n                                                                                          % hostPorts.length], CONNECTION_TIMEOUT, new MyWatcher(Integer.toString(\n                    i\n                            + 1)), zk.getSessionId(), zk.getSessionPasswd());\n            final int[] result = new int[1];\n            result[0] = Integer.MAX_VALUE;\n            zknew.sync(\"/\", new AsyncCallback.VoidCallback() {\n                public void processResult(int rc, String path, Object ctx) {\n                    synchronized (result) {\n                        result[0] = rc;\n                        result.notify();\n                    }\n                }\n            }, null);\n            synchronized (result) {\n                if (result[0] == Integer.MAX_VALUE) {\n                    result.wait(5000);\n                }\n            }\n            LOG.info(\"{} Sync returned {}\", hostPorts[(i + 1) % hostPorts.length], result[0]);\n            assertTrue(result[0] == KeeperException.Code.OK.intValue());\n            zknew.setData(\"/\", new byte[1], -1);\n            try {\n                zk.setData(\"/\", new byte[1], -1);\n                fail(\"Should have lost the connection\");\n            } catch (KeeperException.ConnectionLossException e) {\n                LOG.info(\"Got connection loss exception as expected\");\n            }\n            \r\n            zk = zknew;\n        }\n        zk.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"}],"commitId":"d784e4dc8e042bd622500f861163bb315fa856fe","commitMessage":"@@@ZOOKEEPER-3582: refactor the async api call to lambda style\n\nAuthor: ZWShuai91 <17610028856@163.com>\n\nReviewers: eolivelli@apache.org.  andor@apache.org\n\nCloses #1142 from ZWShuai91/ZOOKEEPER-3582\n","date":"2019-12-28 23:17:54","modifiedFileCount":"15","status":"M","submitter":"ZWShuai91"}]
