[{"authorTime":"2020-11-19 02:18:12","codes":[{"authorDate":"2020-11-19 02:18:12","commitOrder":1,"curCode":"    public void testStart() throws Exception {\n        Path baseDir1 = baseDir.resolve(\"server1\");\n        Path baseDir2 = baseDir.resolve(\"server2\");\n        Path baseDir3 = baseDir.resolve(\"server3\");\n\n        int clientport1 = PortAssignment.unique();\n        int clientport2 = PortAssignment.unique();\n        int clientport3 = PortAssignment.unique();\n\n        int port4 = PortAssignment.unique();\n        int port5 = PortAssignment.unique();\n        int port6 = PortAssignment.unique();\n\n        int port7 = PortAssignment.unique();\n        int port8 = PortAssignment.unique();\n        int port9 = PortAssignment.unique();\n\n        Properties config = new Properties();\n        config.put(\"host\", \"localhost\");\n        config.put(\"ticktime\", \"10\");\n        config.put(\"initLimit\", \"4000\");\n        config.put(\"syncLimit\", \"5\");\n        config.put(\"server.1\", \"localhost:\" + port4 + \":\" + port7);\n        config.put(\"server.2\", \"localhost:\" + port5 + \":\" + port8);\n        config.put(\"server.3\", \"localhost:\" + port6 + \":\" + port9);\n\n\n        final Properties configZookeeper1 = new Properties();\n        configZookeeper1.putAll(config);\n        configZookeeper1.put(\"clientPort\", clientport1 + \"\");\n\n        final Properties configZookeeper2 = new Properties();\n        configZookeeper2.putAll(config);\n        configZookeeper2.put(\"clientPort\", clientport2 + \"\");\n\n        final Properties configZookeeper3 =  new Properties();\n        configZookeeper3.putAll(config);\n        configZookeeper3.put(\"clientPort\", clientport3 + \"\");\n\n        Files.createDirectories(baseDir1.resolve(\"data\"));\n        Files.write(baseDir1.resolve(\"data\").resolve(\"myid\"), \"1\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir2.resolve(\"data\"));\n        Files.write(baseDir2.resolve(\"data\").resolve(\"myid\"), \"2\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir3.resolve(\"data\"));\n        Files.write(baseDir3.resolve(\"data\").resolve(\"myid\"), \"3\".getBytes(\"ASCII\"));\n\n        try (ZooKeeperServerEmbedded zkServer1 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper1).baseDir(baseDir1).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer2 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper2).baseDir(baseDir2).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer3 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper3).baseDir(baseDir3).exitHandler(ExitHandler.LOG_ONLY).build();) {\n            zkServer1.start();\n            zkServer2.start();\n            zkServer3.start();\n\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport1, 60000));\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport2, 60000));\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport3, 60000));\n            for (int i = 0; i < 100; i++) {\n                ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n                System.out.println(\"status:\" + status);\n                if (status.isLeader() && !status.isStandaloneMode() && status.getPeers().size() == 3) {\n                    break;\n                }\n                Thread.sleep(100);\n            }\n            ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n            assertTrue(status.isLeader());\n            assertTrue(!status.isStandaloneMode());\n            assertEquals(3, status.getPeers().size());\n\n        }\n    }\n","date":"2020-11-19 02:18:12","endLine":121,"groupId":"4465","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/09/0c9fce04942366a63f83a453e1e5097433ec7e.src","preCode":"    public void testStart() throws Exception {\n        Path baseDir1 = baseDir.resolve(\"server1\");\n        Path baseDir2 = baseDir.resolve(\"server2\");\n        Path baseDir3 = baseDir.resolve(\"server3\");\n\n        int clientport1 = PortAssignment.unique();\n        int clientport2 = PortAssignment.unique();\n        int clientport3 = PortAssignment.unique();\n\n        int port4 = PortAssignment.unique();\n        int port5 = PortAssignment.unique();\n        int port6 = PortAssignment.unique();\n\n        int port7 = PortAssignment.unique();\n        int port8 = PortAssignment.unique();\n        int port9 = PortAssignment.unique();\n\n        Properties config = new Properties();\n        config.put(\"host\", \"localhost\");\n        config.put(\"ticktime\", \"10\");\n        config.put(\"initLimit\", \"4000\");\n        config.put(\"syncLimit\", \"5\");\n        config.put(\"server.1\", \"localhost:\" + port4 + \":\" + port7);\n        config.put(\"server.2\", \"localhost:\" + port5 + \":\" + port8);\n        config.put(\"server.3\", \"localhost:\" + port6 + \":\" + port9);\n\n\n        final Properties configZookeeper1 = new Properties();\n        configZookeeper1.putAll(config);\n        configZookeeper1.put(\"clientPort\", clientport1 + \"\");\n\n        final Properties configZookeeper2 = new Properties();\n        configZookeeper2.putAll(config);\n        configZookeeper2.put(\"clientPort\", clientport2 + \"\");\n\n        final Properties configZookeeper3 =  new Properties();\n        configZookeeper3.putAll(config);\n        configZookeeper3.put(\"clientPort\", clientport3 + \"\");\n\n        Files.createDirectories(baseDir1.resolve(\"data\"));\n        Files.write(baseDir1.resolve(\"data\").resolve(\"myid\"), \"1\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir2.resolve(\"data\"));\n        Files.write(baseDir2.resolve(\"data\").resolve(\"myid\"), \"2\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir3.resolve(\"data\"));\n        Files.write(baseDir3.resolve(\"data\").resolve(\"myid\"), \"3\".getBytes(\"ASCII\"));\n\n        try (ZooKeeperServerEmbedded zkServer1 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper1).baseDir(baseDir1).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer2 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper2).baseDir(baseDir2).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer3 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper3).baseDir(baseDir3).exitHandler(ExitHandler.LOG_ONLY).build();) {\n            zkServer1.start();\n            zkServer2.start();\n            zkServer3.start();\n\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport1, 60000));\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport2, 60000));\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport3, 60000));\n            for (int i = 0; i < 100; i++) {\n                ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n                System.out.println(\"status:\" + status);\n                if (status.isLeader() && !status.isStandaloneMode() && status.getPeers().size() == 3) {\n                    break;\n                }\n                Thread.sleep(100);\n            }\n            ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n            assertTrue(status.isLeader());\n            assertTrue(!status.isStandaloneMode());\n            assertEquals(3, status.getPeers().size());\n\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/embedded/ZookeeperServerClusterTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2020-11-19 02:18:12","commitOrder":1,"curCode":"    public void testStart() throws Exception {\n        Path baseDir1 = baseDir.resolve(\"server1\");\n        Path baseDir2 = baseDir.resolve(\"server2\");\n        Path baseDir3 = baseDir.resolve(\"server3\");\n\n        int clientport1 = PortAssignment.unique();\n        int clientport2 = PortAssignment.unique();\n        int clientport3 = PortAssignment.unique();\n\n        int port4 = PortAssignment.unique();\n        int port5 = PortAssignment.unique();\n        int port6 = PortAssignment.unique();\n\n        int port7 = PortAssignment.unique();\n        int port8 = PortAssignment.unique();\n        int port9 = PortAssignment.unique();\n\n        Properties config = new Properties();\n        config.put(\"host\", \"localhost\");\n        config.put(\"ticktime\", \"10\");\n        config.put(\"initLimit\", \"4000\");\n        config.put(\"syncLimit\", \"5\");\n\n        config.put(\"server.1\", \"localhost:\" + port4 + \":\" + port7);\n        config.put(\"server.2\", \"localhost:\" + port5 + \":\" + port8);\n        config.put(\"server.3\", \"localhost:\" + port6 + \":\" + port9);\n\n        config.put(\"quorum.auth.enableSasl\", \"true\");\n        config.put(\"quorum.auth.learnerRequireSasl\", \"true\");\n        config.put(\"quorum.auth.serverRequireSasl\", \"true\");\n        config.put(\"quorum.auth.learner.loginContext\", \"QuorumLearner\");\n        config.put(\"quorum.auth.server.loginContext\", \"QuorumServer\");\n        config.put(\"quorum.auth.kerberos.servicePrincipal\", \"servicename/_HOST\");\n        config.put(\"quorum.cnxn.threads.size\", \"20\");\n\n        final Properties configZookeeper1 = new Properties();\n        configZookeeper1.putAll(config);\n        configZookeeper1.put(\"clientPort\", clientport1 + \"\");\n\n        final Properties configZookeeper2 = new Properties();\n        configZookeeper2.putAll(config);\n        configZookeeper2.put(\"clientPort\", clientport2 + \"\");\n\n        final Properties configZookeeper3 = new Properties();\n        configZookeeper3.putAll(config);\n        configZookeeper3.put(\"clientPort\", clientport3 + \"\");\n\n        Files.createDirectories(baseDir1.resolve(\"data\"));\n        Files.write(baseDir1.resolve(\"data\").resolve(\"myid\"), \"1\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir2.resolve(\"data\"));\n        Files.write(baseDir2.resolve(\"data\").resolve(\"myid\"), \"2\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir3.resolve(\"data\"));\n        Files.write(baseDir3.resolve(\"data\").resolve(\"myid\"), \"3\".getBytes(\"ASCII\"));\n\n        try (ZooKeeperServerEmbedded zkServer1 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper1).baseDir(baseDir1).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer2 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper2).baseDir(baseDir2).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer3 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper3).baseDir(baseDir3).exitHandler(ExitHandler.LOG_ONLY).build();) {\n            zkServer1.start();\n            zkServer2.start();\n            zkServer3.start();\n\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport1, 60000));\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport2, 60000));\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport3, 60000));\n\n            for (int i = 0; i < 100; i++) {\n                ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n                System.out.println(\"status:\" + status);\n                if (status.isLeader() && !status.isStandaloneMode() && status.getPeers().size() == 3) {\n                    break;\n                }\n                Thread.sleep(100);\n            }\n            ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n            assertTrue(status.isLeader());\n            assertTrue(!status.isStandaloneMode());\n            assertEquals(3, status.getPeers().size());\n        }\n    }\n","date":"2020-11-19 02:18:12","endLine":139,"groupId":"4465","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/92/3d88802bf9fe36cab3bcf026a6ae015c2b9c2c.src","preCode":"    public void testStart() throws Exception {\n        Path baseDir1 = baseDir.resolve(\"server1\");\n        Path baseDir2 = baseDir.resolve(\"server2\");\n        Path baseDir3 = baseDir.resolve(\"server3\");\n\n        int clientport1 = PortAssignment.unique();\n        int clientport2 = PortAssignment.unique();\n        int clientport3 = PortAssignment.unique();\n\n        int port4 = PortAssignment.unique();\n        int port5 = PortAssignment.unique();\n        int port6 = PortAssignment.unique();\n\n        int port7 = PortAssignment.unique();\n        int port8 = PortAssignment.unique();\n        int port9 = PortAssignment.unique();\n\n        Properties config = new Properties();\n        config.put(\"host\", \"localhost\");\n        config.put(\"ticktime\", \"10\");\n        config.put(\"initLimit\", \"4000\");\n        config.put(\"syncLimit\", \"5\");\n\n        config.put(\"server.1\", \"localhost:\" + port4 + \":\" + port7);\n        config.put(\"server.2\", \"localhost:\" + port5 + \":\" + port8);\n        config.put(\"server.3\", \"localhost:\" + port6 + \":\" + port9);\n\n        config.put(\"quorum.auth.enableSasl\", \"true\");\n        config.put(\"quorum.auth.learnerRequireSasl\", \"true\");\n        config.put(\"quorum.auth.serverRequireSasl\", \"true\");\n        config.put(\"quorum.auth.learner.loginContext\", \"QuorumLearner\");\n        config.put(\"quorum.auth.server.loginContext\", \"QuorumServer\");\n        config.put(\"quorum.auth.kerberos.servicePrincipal\", \"servicename/_HOST\");\n        config.put(\"quorum.cnxn.threads.size\", \"20\");\n\n        final Properties configZookeeper1 = new Properties();\n        configZookeeper1.putAll(config);\n        configZookeeper1.put(\"clientPort\", clientport1 + \"\");\n\n        final Properties configZookeeper2 = new Properties();\n        configZookeeper2.putAll(config);\n        configZookeeper2.put(\"clientPort\", clientport2 + \"\");\n\n        final Properties configZookeeper3 = new Properties();\n        configZookeeper3.putAll(config);\n        configZookeeper3.put(\"clientPort\", clientport3 + \"\");\n\n        Files.createDirectories(baseDir1.resolve(\"data\"));\n        Files.write(baseDir1.resolve(\"data\").resolve(\"myid\"), \"1\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir2.resolve(\"data\"));\n        Files.write(baseDir2.resolve(\"data\").resolve(\"myid\"), \"2\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir3.resolve(\"data\"));\n        Files.write(baseDir3.resolve(\"data\").resolve(\"myid\"), \"3\".getBytes(\"ASCII\"));\n\n        try (ZooKeeperServerEmbedded zkServer1 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper1).baseDir(baseDir1).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer2 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper2).baseDir(baseDir2).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer3 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper3).baseDir(baseDir3).exitHandler(ExitHandler.LOG_ONLY).build();) {\n            zkServer1.start();\n            zkServer2.start();\n            zkServer3.start();\n\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport1, 60000));\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport2, 60000));\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport3, 60000));\n\n            for (int i = 0; i < 100; i++) {\n                ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n                System.out.println(\"status:\" + status);\n                if (status.isLeader() && !status.isStandaloneMode() && status.getPeers().size() == 3) {\n                    break;\n                }\n                Thread.sleep(100);\n            }\n            ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n            assertTrue(status.isLeader());\n            assertTrue(!status.isStandaloneMode());\n            assertEquals(3, status.getPeers().size());\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/embedded/ZookeeperServerClusterMutualAuthTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"}],"commitId":"12b4e6821997534e1ff58e2e29b9df0beab817d3","commitMessage":"@@@ZOOKEEPER-3874: Official API to start ZooKeeper server from Java\n\nCreate an Official API to start a ZooKeeper server node from Java code.\nThe idea is not to run ZooKeeper server inside the same process of an application.  but only to have a standard Launcher that can be used from Java and not a bash script.\n\nSee more context here\nhttps://issues.apache.org/jira/browse/ZOOKEEPER-3874\n\nThis is how a Java launcher will look like for tests:\n```\n        int clientPort = PortAssignment.unique();\n        final Properties configZookeeper = new Properties();\n        configZookeeper.put(\"clientPort\".  clientPort + \"\");\n        configZookeeper.put(\"host\".  \"localhost\");\n        configZookeeper.put(\"..........................\");\n        try (ZooKeeperServerEmbedded zkServer = ZooKeeperServerEmbedded\n                .builder()\n                .baseDir(baseDir)\n                .configuration(configZookeeper)\n                .exitHandler(ExitHandler.LOG_ONLY)\n                .build()) {\n            zkServer.start();\n            //// wait.....\n      }\n```\n\nThis feature does not overlap with Curator TestingServer.  this feature is meant to be used a fundation for projects like TestingServer but also to run ZooKeeper server nodes in production.\n\nThis code is running in production at https://www.mag-news.com and https://emailsuccess.com.  in such products we are using a Java based process manager\n\nAuthor: Enrico Olivelli <eolivelli@apache.org>\nAuthor: Enrico Olivelli <eolivelli@gmail.com>\n\nReviewers: Damien Diederen <ddiederen@apache.org>\n\nCloses #1526 from eolivelli/fix/ZOOKEEPER-3874-embedded-api\n","date":"2020-11-19 02:18:12","modifiedFileCount":"8","status":"B","submitter":"Enrico Olivelli"},{"authorTime":"2021-06-14 02:53:47","codes":[{"authorDate":"2021-06-14 02:53:47","commitOrder":2,"curCode":"    public void testStart() throws Exception {\n        Path baseDir1 = baseDir.resolve(\"server1\");\n        Path baseDir2 = baseDir.resolve(\"server2\");\n        Path baseDir3 = baseDir.resolve(\"server3\");\n\n        int clientport1 = PortAssignment.unique();\n        int clientport2 = PortAssignment.unique();\n        int clientport3 = PortAssignment.unique();\n\n        int port4 = PortAssignment.unique();\n        int port5 = PortAssignment.unique();\n        int port6 = PortAssignment.unique();\n\n        int port7 = PortAssignment.unique();\n        int port8 = PortAssignment.unique();\n        int port9 = PortAssignment.unique();\n\n        Properties config = new Properties();\n        config.put(\"host\", \"localhost\");\n        config.put(\"ticktime\", \"10\");\n        config.put(\"initLimit\", \"4000\");\n        config.put(\"syncLimit\", \"5\");\n        config.put(\"server.1\", \"localhost:\" + port4 + \":\" + port7);\n        config.put(\"server.2\", \"localhost:\" + port5 + \":\" + port8);\n        config.put(\"server.3\", \"localhost:\" + port6 + \":\" + port9);\n\n\n        final Properties configZookeeper1 = new Properties();\n        configZookeeper1.putAll(config);\n        configZookeeper1.put(\"clientPort\", clientport1 + \"\");\n\n        final Properties configZookeeper2 = new Properties();\n        configZookeeper2.putAll(config);\n        configZookeeper2.put(\"clientPort\", clientport2 + \"\");\n\n        final Properties configZookeeper3 =  new Properties();\n        configZookeeper3.putAll(config);\n        configZookeeper3.put(\"clientPort\", clientport3 + \"\");\n\n        Files.createDirectories(baseDir1.resolve(\"data\"));\n        Files.write(baseDir1.resolve(\"data\").resolve(\"myid\"), \"1\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir2.resolve(\"data\"));\n        Files.write(baseDir2.resolve(\"data\").resolve(\"myid\"), \"2\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir3.resolve(\"data\"));\n        Files.write(baseDir3.resolve(\"data\").resolve(\"myid\"), \"3\".getBytes(\"ASCII\"));\n\n        try (ZooKeeperServerEmbedded zkServer1 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper1).baseDir(baseDir1).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer2 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper2).baseDir(baseDir2).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer3 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper3).baseDir(baseDir3).exitHandler(ExitHandler.LOG_ONLY).build();) {\n            zkServer1.start();\n            zkServer2.start();\n            zkServer3.start();\n\n            assertTrue(ClientBase.waitForServerUp(zkServer1.getConnectionString(), 60000));\n            assertTrue(ClientBase.waitForServerUp(zkServer2.getConnectionString(), 60000));\n            assertTrue(ClientBase.waitForServerUp(zkServer3.getConnectionString(), 60000));\n            for (int i = 0; i < 100; i++) {\n                ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n                System.out.println(\"status:\" + status);\n                if (status.isLeader() && !status.isStandaloneMode() && status.getPeers().size() == 3) {\n                    break;\n                }\n                Thread.sleep(100);\n            }\n            ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n            assertTrue(status.isLeader());\n            assertTrue(!status.isStandaloneMode());\n            assertEquals(3, status.getPeers().size());\n\n        }\n    }\n","date":"2021-06-14 02:53:47","endLine":121,"groupId":"10322","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/df/bdfc3611f6a75640b0a499c24f2ec590b563a4.src","preCode":"    public void testStart() throws Exception {\n        Path baseDir1 = baseDir.resolve(\"server1\");\n        Path baseDir2 = baseDir.resolve(\"server2\");\n        Path baseDir3 = baseDir.resolve(\"server3\");\n\n        int clientport1 = PortAssignment.unique();\n        int clientport2 = PortAssignment.unique();\n        int clientport3 = PortAssignment.unique();\n\n        int port4 = PortAssignment.unique();\n        int port5 = PortAssignment.unique();\n        int port6 = PortAssignment.unique();\n\n        int port7 = PortAssignment.unique();\n        int port8 = PortAssignment.unique();\n        int port9 = PortAssignment.unique();\n\n        Properties config = new Properties();\n        config.put(\"host\", \"localhost\");\n        config.put(\"ticktime\", \"10\");\n        config.put(\"initLimit\", \"4000\");\n        config.put(\"syncLimit\", \"5\");\n        config.put(\"server.1\", \"localhost:\" + port4 + \":\" + port7);\n        config.put(\"server.2\", \"localhost:\" + port5 + \":\" + port8);\n        config.put(\"server.3\", \"localhost:\" + port6 + \":\" + port9);\n\n\n        final Properties configZookeeper1 = new Properties();\n        configZookeeper1.putAll(config);\n        configZookeeper1.put(\"clientPort\", clientport1 + \"\");\n\n        final Properties configZookeeper2 = new Properties();\n        configZookeeper2.putAll(config);\n        configZookeeper2.put(\"clientPort\", clientport2 + \"\");\n\n        final Properties configZookeeper3 =  new Properties();\n        configZookeeper3.putAll(config);\n        configZookeeper3.put(\"clientPort\", clientport3 + \"\");\n\n        Files.createDirectories(baseDir1.resolve(\"data\"));\n        Files.write(baseDir1.resolve(\"data\").resolve(\"myid\"), \"1\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir2.resolve(\"data\"));\n        Files.write(baseDir2.resolve(\"data\").resolve(\"myid\"), \"2\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir3.resolve(\"data\"));\n        Files.write(baseDir3.resolve(\"data\").resolve(\"myid\"), \"3\".getBytes(\"ASCII\"));\n\n        try (ZooKeeperServerEmbedded zkServer1 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper1).baseDir(baseDir1).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer2 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper2).baseDir(baseDir2).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer3 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper3).baseDir(baseDir3).exitHandler(ExitHandler.LOG_ONLY).build();) {\n            zkServer1.start();\n            zkServer2.start();\n            zkServer3.start();\n\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport1, 60000));\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport2, 60000));\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport3, 60000));\n            for (int i = 0; i < 100; i++) {\n                ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n                System.out.println(\"status:\" + status);\n                if (status.isLeader() && !status.isStandaloneMode() && status.getPeers().size() == 3) {\n                    break;\n                }\n                Thread.sleep(100);\n            }\n            ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n            assertTrue(status.isLeader());\n            assertTrue(!status.isStandaloneMode());\n            assertEquals(3, status.getPeers().size());\n\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/embedded/ZookeeperServerClusterTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2021-06-14 02:53:47","commitOrder":2,"curCode":"    public void testStart() throws Exception {\n        Path baseDir1 = baseDir.resolve(\"server1\");\n        Path baseDir2 = baseDir.resolve(\"server2\");\n        Path baseDir3 = baseDir.resolve(\"server3\");\n\n        int clientport1 = PortAssignment.unique();\n        int clientport2 = PortAssignment.unique();\n        int clientport3 = PortAssignment.unique();\n\n        int port4 = PortAssignment.unique();\n        int port5 = PortAssignment.unique();\n        int port6 = PortAssignment.unique();\n\n        int port7 = PortAssignment.unique();\n        int port8 = PortAssignment.unique();\n        int port9 = PortAssignment.unique();\n\n        Properties config = new Properties();\n        config.put(\"host\", \"localhost\");\n        config.put(\"ticktime\", \"10\");\n        config.put(\"initLimit\", \"4000\");\n        config.put(\"syncLimit\", \"5\");\n\n        config.put(\"server.1\", \"localhost:\" + port4 + \":\" + port7);\n        config.put(\"server.2\", \"localhost:\" + port5 + \":\" + port8);\n        config.put(\"server.3\", \"localhost:\" + port6 + \":\" + port9);\n\n        config.put(\"quorum.auth.enableSasl\", \"true\");\n        config.put(\"quorum.auth.learnerRequireSasl\", \"true\");\n        config.put(\"quorum.auth.serverRequireSasl\", \"true\");\n        config.put(\"quorum.auth.learner.loginContext\", \"QuorumLearner\");\n        config.put(\"quorum.auth.server.loginContext\", \"QuorumServer\");\n        config.put(\"quorum.auth.kerberos.servicePrincipal\", \"servicename/_HOST\");\n        config.put(\"quorum.cnxn.threads.size\", \"20\");\n\n        final Properties configZookeeper1 = new Properties();\n        configZookeeper1.putAll(config);\n        configZookeeper1.put(\"clientPort\", clientport1 + \"\");\n\n        final Properties configZookeeper2 = new Properties();\n        configZookeeper2.putAll(config);\n        configZookeeper2.put(\"clientPort\", clientport2 + \"\");\n\n        final Properties configZookeeper3 = new Properties();\n        configZookeeper3.putAll(config);\n        configZookeeper3.put(\"clientPort\", clientport3 + \"\");\n\n        Files.createDirectories(baseDir1.resolve(\"data\"));\n        Files.write(baseDir1.resolve(\"data\").resolve(\"myid\"), \"1\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir2.resolve(\"data\"));\n        Files.write(baseDir2.resolve(\"data\").resolve(\"myid\"), \"2\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir3.resolve(\"data\"));\n        Files.write(baseDir3.resolve(\"data\").resolve(\"myid\"), \"3\".getBytes(\"ASCII\"));\n\n        try (ZooKeeperServerEmbedded zkServer1 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper1).baseDir(baseDir1).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer2 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper2).baseDir(baseDir2).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer3 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper3).baseDir(baseDir3).exitHandler(ExitHandler.LOG_ONLY).build();) {\n            zkServer1.start();\n            zkServer2.start();\n            zkServer3.start();\n\n            assertTrue(ClientBase.waitForServerUp(zkServer1.getConnectionString(), 60000));\n            assertTrue(ClientBase.waitForServerUp(zkServer2.getConnectionString(), 60000));\n            assertTrue(ClientBase.waitForServerUp(zkServer3.getConnectionString(), 60000));\n\n            for (int i = 0; i < 100; i++) {\n                ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n                System.out.println(\"status:\" + status);\n                if (status.isLeader() && !status.isStandaloneMode() && status.getPeers().size() == 3) {\n                    break;\n                }\n                Thread.sleep(100);\n            }\n            ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n            assertTrue(status.isLeader());\n            assertTrue(!status.isStandaloneMode());\n            assertEquals(3, status.getPeers().size());\n        }\n    }\n","date":"2021-06-14 02:53:47","endLine":139,"groupId":"10322","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/10/22c25c1278dac5a1caf4f09c987029975d13fb.src","preCode":"    public void testStart() throws Exception {\n        Path baseDir1 = baseDir.resolve(\"server1\");\n        Path baseDir2 = baseDir.resolve(\"server2\");\n        Path baseDir3 = baseDir.resolve(\"server3\");\n\n        int clientport1 = PortAssignment.unique();\n        int clientport2 = PortAssignment.unique();\n        int clientport3 = PortAssignment.unique();\n\n        int port4 = PortAssignment.unique();\n        int port5 = PortAssignment.unique();\n        int port6 = PortAssignment.unique();\n\n        int port7 = PortAssignment.unique();\n        int port8 = PortAssignment.unique();\n        int port9 = PortAssignment.unique();\n\n        Properties config = new Properties();\n        config.put(\"host\", \"localhost\");\n        config.put(\"ticktime\", \"10\");\n        config.put(\"initLimit\", \"4000\");\n        config.put(\"syncLimit\", \"5\");\n\n        config.put(\"server.1\", \"localhost:\" + port4 + \":\" + port7);\n        config.put(\"server.2\", \"localhost:\" + port5 + \":\" + port8);\n        config.put(\"server.3\", \"localhost:\" + port6 + \":\" + port9);\n\n        config.put(\"quorum.auth.enableSasl\", \"true\");\n        config.put(\"quorum.auth.learnerRequireSasl\", \"true\");\n        config.put(\"quorum.auth.serverRequireSasl\", \"true\");\n        config.put(\"quorum.auth.learner.loginContext\", \"QuorumLearner\");\n        config.put(\"quorum.auth.server.loginContext\", \"QuorumServer\");\n        config.put(\"quorum.auth.kerberos.servicePrincipal\", \"servicename/_HOST\");\n        config.put(\"quorum.cnxn.threads.size\", \"20\");\n\n        final Properties configZookeeper1 = new Properties();\n        configZookeeper1.putAll(config);\n        configZookeeper1.put(\"clientPort\", clientport1 + \"\");\n\n        final Properties configZookeeper2 = new Properties();\n        configZookeeper2.putAll(config);\n        configZookeeper2.put(\"clientPort\", clientport2 + \"\");\n\n        final Properties configZookeeper3 = new Properties();\n        configZookeeper3.putAll(config);\n        configZookeeper3.put(\"clientPort\", clientport3 + \"\");\n\n        Files.createDirectories(baseDir1.resolve(\"data\"));\n        Files.write(baseDir1.resolve(\"data\").resolve(\"myid\"), \"1\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir2.resolve(\"data\"));\n        Files.write(baseDir2.resolve(\"data\").resolve(\"myid\"), \"2\".getBytes(\"ASCII\"));\n        Files.createDirectories(baseDir3.resolve(\"data\"));\n        Files.write(baseDir3.resolve(\"data\").resolve(\"myid\"), \"3\".getBytes(\"ASCII\"));\n\n        try (ZooKeeperServerEmbedded zkServer1 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper1).baseDir(baseDir1).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer2 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper2).baseDir(baseDir2).exitHandler(ExitHandler.LOG_ONLY).build();\n                ZooKeeperServerEmbedded zkServer3 = ZooKeeperServerEmbedded.builder().configuration(configZookeeper3).baseDir(baseDir3).exitHandler(ExitHandler.LOG_ONLY).build();) {\n            zkServer1.start();\n            zkServer2.start();\n            zkServer3.start();\n\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport1, 60000));\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport2, 60000));\n            assertTrue(ClientBase.waitForServerUp(\"localhost:\" + clientport3, 60000));\n\n            for (int i = 0; i < 100; i++) {\n                ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n                System.out.println(\"status:\" + status);\n                if (status.isLeader() && !status.isStandaloneMode() && status.getPeers().size() == 3) {\n                    break;\n                }\n                Thread.sleep(100);\n            }\n            ZookeeperServeInfo.ServerInfo status = ZookeeperServeInfo.getStatus(\"ReplicatedServer*\");\n            assertTrue(status.isLeader());\n            assertTrue(!status.isStandaloneMode());\n            assertEquals(3, status.getPeers().size());\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/embedded/ZookeeperServerClusterMutualAuthTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"5e6e15ac40cfd2cadac3e718e494a3c13b934b8d","commitMessage":"@@@ZOOKEEPER-4312: ZooKeeperServerEmbedded: enhance server start/stop for testability\n\nsee https://issues.apache.org/jira/browse/ZOOKEEPER-4312\n\nZooKeeperServerEmbedded works well for running ZooKeeper but it lacks support for a few little features in order to use it for tests.\n\nI saw these problems while working on the port of Curator Testing Server to ZooKeeperServerEmbedded.\n\nThere is no wait to wait for the server to be up-and-running\nWhen you \"close()\" the server.  it does not wait for the ports to be closed\nThere is no wait to have the ConnectString for the server\n\nAuthor: Enrico Olivelli <eolivelli@apache.org>\n\nReviewers: Damien Diederen <ddiederen@apache.org>\n\nCloses #1710 from eolivelli/impl/embedded-2\n","date":"2021-06-14 02:53:47","modifiedFileCount":"8","status":"M","submitter":"Enrico Olivelli"}]
