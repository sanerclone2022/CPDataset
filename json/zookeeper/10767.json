[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public synchronized WatchesReport getWatches() {\n        Map<Long, Set<String>> id2paths = new HashMap<Long, Set<String>>();\n        for (Entry<Watcher, Set<String>> e: watch2Paths.entrySet()) {\n            Long id = ((ServerCnxn) e.getKey()).getSessionId();\n            Set<String> paths = new HashSet<String>(e.getValue());\n            id2paths.put(id, paths);\n        }\n        return new WatchesReport(id2paths);\n    }\n","date":"2018-10-05 20:25:43","endLine":220,"groupId":"3829","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getWatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3e/14f6ead09f4c2b21a82aad508a85044ff5fd34.src","preCode":"    public synchronized WatchesReport getWatches() {\n        Map<Long, Set<String>> id2paths = new HashMap<Long, Set<String>>();\n        for (Entry<Watcher, Set<String>> e: watch2Paths.entrySet()) {\n            Long id = ((ServerCnxn) e.getKey()).getSessionId();\n            Set<String> paths = new HashSet<String>(e.getValue());\n            id2paths.put(id, paths);\n        }\n        return new WatchesReport(id2paths);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public WatchesReport getWatches() {\n        Map<Long, Set<String>> id2paths = new HashMap<Long, Set<String>>();\n        for (Entry<Watcher, Set<String>> e: getWatcher2PathesMap().entrySet()) {\n            Long id = ((ServerCnxn) e.getKey()).getSessionId();\n            Set<String> paths = new HashSet<String>(e.getValue());\n            id2paths.put(id, paths);\n        }\n        return new WatchesReport(id2paths);\n    }\n","date":"2018-10-05 20:25:43","endLine":295,"groupId":"3829","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getWatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/6a/bb760749eac81d79f075f45ae17defc783b1d7.src","preCode":"    public WatchesReport getWatches() {\n        Map<Long, Set<String>> id2paths = new HashMap<Long, Set<String>>();\n        for (Entry<Watcher, Set<String>> e: getWatcher2PathesMap().entrySet()) {\n            Long id = ((ServerCnxn) e.getKey()).getSessionId();\n            Set<String> paths = new HashSet<String>(e.getValue());\n            id2paths.put(id, paths);\n        }\n        return new WatchesReport(id2paths);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2019-11-09 00:30:25","commitOrder":2,"curCode":"    public synchronized WatchesReport getWatches() {\n        Map<Long, Set<String>> id2paths = new HashMap<>();\n        for (Entry<Watcher, Set<String>> e : watch2Paths.entrySet()) {\n            Long id = ((ServerCnxn) e.getKey()).getSessionId();\n            Set<String> paths = new HashSet<>(e.getValue());\n            id2paths.put(id, paths);\n        }\n        return new WatchesReport(id2paths);\n    }\n","date":"2019-11-09 00:30:25","endLine":281,"groupId":"10767","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getWatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c5/b133059b2175b066855d2377b1b2d29eec3270.src","preCode":"    public synchronized WatchesReport getWatches() {\n        Map<Long, Set<String>> id2paths = new HashMap<Long, Set<String>>();\n        for (Entry<Watcher, Set<String>> e : watch2Paths.entrySet()) {\n            Long id = ((ServerCnxn) e.getKey()).getSessionId();\n            Set<String> paths = new HashSet<String>(e.getValue());\n            id2paths.put(id, paths);\n        }\n        return new WatchesReport(id2paths);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"},{"authorDate":"2018-10-05 20:25:43","commitOrder":2,"curCode":"    public WatchesReport getWatches() {\n        Map<Long, Set<String>> id2paths = new HashMap<Long, Set<String>>();\n        for (Entry<Watcher, Set<String>> e: getWatcher2PathesMap().entrySet()) {\n            Long id = ((ServerCnxn) e.getKey()).getSessionId();\n            Set<String> paths = new HashSet<String>(e.getValue());\n            id2paths.put(id, paths);\n        }\n        return new WatchesReport(id2paths);\n    }\n","date":"2018-10-05 20:25:43","endLine":295,"groupId":"10767","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getWatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/6a/bb760749eac81d79f075f45ae17defc783b1d7.src","preCode":"    public WatchesReport getWatches() {\n        Map<Long, Set<String>> id2paths = new HashMap<Long, Set<String>>();\n        for (Entry<Watcher, Set<String>> e: getWatcher2PathesMap().entrySet()) {\n            Long id = ((ServerCnxn) e.getKey()).getSessionId();\n            Set<String> paths = new HashSet<String>(e.getValue());\n            id2paths.put(id, paths);\n        }\n        return new WatchesReport(id2paths);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"N"}],"commitId":"553639378d5cf86c2488afff4586e5e4cce38061","commitMessage":"@@@ZOOKEEPER-1416 - Persistent.  recursive watchers\n\n\n Background\n\nNote: this is a port of https://github.com/apache/zookeeper/pull/136\n\nImplementation for a persistent.  recursive watch addition for ZK. These watches are set via a new method.  addPersistentWatch() and are removed via the existing watcher removal methods. Persistent.  recursive watches have these characteristics: a) Once set.  they do not auto-remove when triggered; b) they trigger for all event types (child.  data.  etc.) on the node they are registered for and any child znode recursively; c) they are efficiently implemented by using the existing watch internals. A new class PathIterator walks up the path parent-by-parent when checking if a watcher applies.\n\n\n Implementation Details\n\n- A new enum manages the different \"modes\" for watchers: `WatcherMode`.\n- For traditional.  \"standard\" watchers.  the code path is almost exactly the same. There is very little overhead other than a bit of extra checks in `WatchManager`\n- Given how this is implemented it was difficult to add support when `WatchManagerOptimized` is used. I'm open to adding it for that version but it will take work. We should consider not supporting persistent/recursive watchers when WatchManagerOptimized is used. I notice that `WatchManagerOptimized` is not even mentioned in the docs.\n- The mode for a given watcher/path pair is held in a map inside of `WatcherModeManager`. The absence of an entry means Standard. This way.  there's no overhead for old.  standard watchers.\n- `PathParentIterator` is the \"meat\" of the implementation. Rather than set watchers on every ZNode implied by a recursive watcher. WatchManager passes any paths it processes through PathParentIterator which iterates up each parent znode looking for watchers.\n- The remainder of the changes are scaffolding to match how other watchers are used as well as Jute/API changes to set persistent/recursive watchers\n\n\n Testing\n\nThe tests were written years ago. I think they're comprehensive but reviewers should pay attention to anything that was missed. There is much ZooKeeper knowledge that's only in the heads of ZK committers.\n\n- `PersistentWatcherTest` - tests persistent.  non-recursive watchers\n- `PersistentRecursiveWatcherTest` - tests persistent.  recursive watchers\n- `PathParentIteratorTest`- exercises edges of PathParentIterator\n\nAuthor: randgalt <jordan@jordanzimmerman.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache. org>.  Norbert Kalmar <nkalmar@apache.org>.  Andor Moln?r <andor@apache.org>.  Justin Mao Ling <maoling199210191@sina.com>\n\nCloses #1106 from Randgalt/ZOOKEEPER-1416\n","date":"2019-11-09 00:30:25","modifiedFileCount":"14","status":"M","submitter":"randgalt"}]
