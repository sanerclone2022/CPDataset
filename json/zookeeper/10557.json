[{"authorTime":"2019-07-25 00:00:02","codes":[{"authorDate":"2019-07-25 00:00:02","commitOrder":1,"curCode":"  public void testClientOpWithValidSASLAuth() throws Exception {\n    ZooKeeper zk = null;\n    CountdownWatcher watcher = new CountdownWatcher();\n    try {\n      zk = createClient(watcher);\n      zk.create(\"/foobar\", null, Ids.CREATOR_ALL_ACL, CreateMode.PERSISTENT);\n    } catch(KeeperException e) {\n      Assert.fail(\"Client operation should succeed with valid SASL configuration.\");\n    } finally {\n      if (zk != null) {\n        zk.close();\n      }\n    }\n  }\n","date":"2019-07-25 00:00:02","endLine":60,"groupId":"4338","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testClientOpWithValidSASLAuth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/54/b0c5830a5d5aa29edf0277cc124e97380d12d7.src","preCode":"  public void testClientOpWithValidSASLAuth() throws Exception {\n    ZooKeeper zk = null;\n    CountdownWatcher watcher = new CountdownWatcher();\n    try {\n      zk = createClient(watcher);\n      zk.create(\"/foobar\", null, Ids.CREATOR_ALL_ACL, CreateMode.PERSISTENT);\n    } catch(KeeperException e) {\n      Assert.fail(\"Client operation should succeed with valid SASL configuration.\");\n    } finally {\n      if (zk != null) {\n        zk.close();\n      }\n    }\n  }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SaslAuthRequiredTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2019-07-25 00:00:02","commitOrder":1,"curCode":"  public void testClientOpWithFailedSASLAuth() throws Exception {\n    ZooKeeper zk = null;\n    CountdownWatcher watcher = new CountdownWatcher();\n    try {\n      zk = createClient(watcher);\n      zk.create(\"/bar\", null, Ids.CREATOR_ALL_ACL, CreateMode.PERSISTENT);\n      Assert.fail(\"Client with wrong SASL config should not pass SASL authentication.\");\n    } catch(KeeperException e) {\n      Assert.assertTrue(e.code() == KeeperException.Code.AUTHFAILED);\n      \r\n      watcher.waitForDisconnected(SaslTestUtil.CLIENT_DISCONNECT_TIMEOUT);\n    } finally {\n      if (zk != null) {\n        zk.close();\n      }\n    }\n  }\n","date":"2019-07-25 00:00:02","endLine":63,"groupId":"119","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testClientOpWithFailedSASLAuth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f6/c6e33a88ac3a84a1f94300f4fb36b57e79b3ea.src","preCode":"  public void testClientOpWithFailedSASLAuth() throws Exception {\n    ZooKeeper zk = null;\n    CountdownWatcher watcher = new CountdownWatcher();\n    try {\n      zk = createClient(watcher);\n      zk.create(\"/bar\", null, Ids.CREATOR_ALL_ACL, CreateMode.PERSISTENT);\n      Assert.fail(\"Client with wrong SASL config should not pass SASL authentication.\");\n    } catch(KeeperException e) {\n      Assert.assertTrue(e.code() == KeeperException.Code.AUTHFAILED);\n      \r\n      watcher.waitForDisconnected(SaslTestUtil.CLIENT_DISCONNECT_TIMEOUT);\n    } finally {\n      if (zk != null) {\n        zk.close();\n      }\n    }\n  }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SaslAuthRequiredFailWrongSASLTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"}],"commitId":"513df3da671c9937417bb7d92a55402520ba1292","commitMessage":"@@@ZOOKEEPER-1634: hardening security by teaching server to enforce client authentication.\n\n## Motivation\nPreviously ZooKeeper server is open to the world as the server does not enforce client authentication - anonymous clients are allowed to establish session with server. This behavior raises a couple of issues from the perspective of performance and security for example:\n* It is easy to launch a DDoS attack to server.  by having a fleet of anonymous clients connect to the ensemble.  as each session would consume valuable resources (socket.  memory.  etc) from server.\n* It is cumbersome to enforce certain security models with the presence of anonymous clients login - for example as clients are not trusted the root ACL has to be disabled for writes to world.  among other configurations an admin has to do to secure a cluster in a multi-tenant environment.\n\nSo the goal here is to address such issue by hardening ZooKeeper security to provide a more confined access option that user could opt-in.  which in addition to the existing ACLs together could lead to more secured / resource optimal ensemble.\n\n## Design Abstract\n* Introduce a new server side Java property that if set.  ZooKeeper server will only accept connections and requests from clients that have authenticated with server via SASL.\n* Clients that are not configured with SASL authentication.  or configured with SASL but fail authentication (i.e. with invalid credential) will not be able to establish a session with server. A typed error code (-124) will be delivered in such case.  both Java and C client will close the session with server thereafter.  without further attempts on retrying to reconnect.\n* This feature overrules the server property \"zookeeper.allowSaslFailedClients\". So even if server is configured to allow clients that fail SASL authentication to login.  client will not be able to establish a session with server if this feature is enabled.\n* Only support SASL because only SASL authentication has the property that no operations will happen until SASL authentication process finished. Thus.  the decision of whether to close the session or not can be quickly made on server side upon receiving a client connection request. We could later add support for other auth scheme via add_auth_info if that's desired (if we do.  then a session has to be maintained until add_auth_info is invoked.).\n* As a side benefit.  this PR fixes an issue mentioned in ZOOKEEPER-2346 by correctly propagate events from server to client side so a SASL auth failure will manifest as an auth / config failure rather than generic ConnectionLoss event.\n\nJIRA: https://issues.apache.org/jira/browse/ZOOKEEPER-1634\nThe PR also covers (or part of):\nhttps://issues.apache.org/jira/browse/ZOOKEEPER-2462\nhttps://issues.apache.org/jira/browse/ZOOKEEPER-2526\nhttps://issues.apache.org/jira/browse/ZOOKEEPER-2346\n\nAuthor: Michael Han <lhan@twitter.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Andor Molnar <andor@apache.org>\n\nCloses #118 from hanm/ZOOKEEPER-1634\n","date":"2019-07-25 00:00:02","modifiedFileCount":"2","status":"B","submitter":"Michael Han"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testClientOpWithValidSASLAuth() throws Exception {\n        ZooKeeper zk = null;\n        CountdownWatcher watcher = new CountdownWatcher();\n        try {\n            zk = createClient(watcher);\n            zk.create(\"/foobar\", null, Ids.CREATOR_ALL_ACL, CreateMode.PERSISTENT);\n        } catch (KeeperException e) {\n            fail(\"Client operation should succeed with valid SASL configuration.\");\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":60,"groupId":"10557","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testClientOpWithValidSASLAuth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/17/3a3cbf38510d4af7cd329100cc672c1ef3dd31.src","preCode":"  public void testClientOpWithValidSASLAuth() throws Exception {\n    ZooKeeper zk = null;\n    CountdownWatcher watcher = new CountdownWatcher();\n    try {\n      zk = createClient(watcher);\n      zk.create(\"/foobar\", null, Ids.CREATOR_ALL_ACL, CreateMode.PERSISTENT);\n    } catch(KeeperException e) {\n      Assert.fail(\"Client operation should succeed with valid SASL configuration.\");\n    } finally {\n      if (zk != null) {\n        zk.close();\n      }\n    }\n  }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SaslAuthRequiredTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testClientOpWithFailedSASLAuth() throws Exception {\n        ZooKeeper zk = null;\n        CountdownWatcher watcher = new CountdownWatcher();\n        try {\n            zk = createClient(watcher);\n            zk.create(\"/bar\", null, Ids.CREATOR_ALL_ACL, CreateMode.PERSISTENT);\n            fail(\"Client with wrong SASL config should not pass SASL authentication.\");\n        } catch (KeeperException e) {\n            assertTrue(e.code() == KeeperException.Code.AUTHFAILED);\n            \r\n            watcher.waitForDisconnected(SaslTestUtil.CLIENT_DISCONNECT_TIMEOUT);\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":64,"groupId":"10557","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testClientOpWithFailedSASLAuth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/1f/ed4d93c2549cf3e42070bddb9dc0b0c586db2b.src","preCode":"  public void testClientOpWithFailedSASLAuth() throws Exception {\n    ZooKeeper zk = null;\n    CountdownWatcher watcher = new CountdownWatcher();\n    try {\n      zk = createClient(watcher);\n      zk.create(\"/bar\", null, Ids.CREATOR_ALL_ACL, CreateMode.PERSISTENT);\n      Assert.fail(\"Client with wrong SASL config should not pass SASL authentication.\");\n    } catch(KeeperException e) {\n      Assert.assertTrue(e.code() == KeeperException.Code.AUTHFAILED);\n      \r\n      watcher.waitForDisconnected(SaslTestUtil.CLIENT_DISCONNECT_TIMEOUT);\n    } finally {\n      if (zk != null) {\n        zk.close();\n      }\n    }\n  }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SaslAuthRequiredFailWrongSASLTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"}]
