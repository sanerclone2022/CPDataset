[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    void startServers(boolean withObservers) throws Exception {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        Map<Long,QuorumServer> peers = new HashMap<Long,QuorumServer>();\n        peers.put(Long.valueOf(1), new QuorumServer(1,\n                new InetSocketAddress(LOCALADDR, port1),\n                new InetSocketAddress(LOCALADDR, portLE1),\n                new InetSocketAddress(LOCALADDR, portClient1),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(2), new QuorumServer(2,\n                new InetSocketAddress(LOCALADDR, port2),\n                new InetSocketAddress(LOCALADDR, portLE2),\n                new InetSocketAddress(LOCALADDR, portClient2),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(3), new QuorumServer(3,\n                new InetSocketAddress(LOCALADDR, port3),\n                new InetSocketAddress(LOCALADDR, portLE3),\n                new InetSocketAddress(LOCALADDR, portClient3),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(4), new QuorumServer(4,\n                new InetSocketAddress(LOCALADDR, port4),\n                new InetSocketAddress(LOCALADDR, portLE4),\n                new InetSocketAddress(LOCALADDR, portClient4),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(5), new QuorumServer(5,\n                new InetSocketAddress(LOCALADDR, port5),\n                new InetSocketAddress(LOCALADDR, portLE5),\n                new InetSocketAddress(LOCALADDR, portClient5),\n                LearnerType.PARTICIPANT));\n\n        if (withObservers) {\n            peers.get(Long.valueOf(4)).type = LearnerType.OBSERVER;\n            peers.get(Long.valueOf(5)).type = LearnerType.OBSERVER;\n        }\n\n        LOG.info(\"creating QuorumPeer 1 port \" + portClient1);\n        s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit);\n        Assert.assertEquals(portClient1, s1.getClientPort());\n        LOG.info(\"creating QuorumPeer 2 port \" + portClient2);\n        s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit);\n        Assert.assertEquals(portClient2, s2.getClientPort());\n        LOG.info(\"creating QuorumPeer 3 port \" + portClient3);\n        s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit);\n        Assert.assertEquals(portClient3, s3.getClientPort());\n        LOG.info(\"creating QuorumPeer 4 port \" + portClient4);\n        s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit);\n        Assert.assertEquals(portClient4, s4.getClientPort());\n        LOG.info(\"creating QuorumPeer 5 port \" + portClient5);\n        s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit);\n        Assert.assertEquals(portClient5, s5.getClientPort());\n\n        if (withObservers) {\n            s4.setLearnerType(LearnerType.OBSERVER);\n            s5.setLearnerType(LearnerType.OBSERVER);\n        }\n\n        LOG.info(\"QuorumPeer 1 voting view: \" + s1.getVotingView());\n        LOG.info(\"QuorumPeer 2 voting view: \" + s2.getVotingView());\n        LOG.info(\"QuorumPeer 3 voting view: \" + s3.getVotingView());\n        LOG.info(\"QuorumPeer 4 voting view: \" + s4.getVotingView());\n        LOG.info(\"QuorumPeer 5 voting view: \" + s5.getVotingView());\n\n        s1.enableLocalSessions(localSessionsEnabled);\n        s2.enableLocalSessions(localSessionsEnabled);\n        s3.enableLocalSessions(localSessionsEnabled);\n        s4.enableLocalSessions(localSessionsEnabled);\n        s5.enableLocalSessions(localSessionsEnabled);\n        s1.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s2.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s3.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s4.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s5.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n\n        LOG.info(\"start QuorumPeer 1\");\n        s1.start();\n        LOG.info(\"start QuorumPeer 2\");\n        s2.start();\n        LOG.info(\"start QuorumPeer 3\");\n        s3.start();\n        LOG.info(\"start QuorumPeer 4\");\n        s4.start();\n        LOG.info(\"start QuorumPeer 5\");\n        s5.start();\n        LOG.info(\"started QuorumPeer 5\");\n\n        LOG.info (\"Checking ports \" + hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            Assert.assertTrue(\"waiting for server up\",\n                       ClientBase.waitForServerUp(hp,\n                                    CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is accepting client connections\");\n        }\n\n        \r\n        JMXEnv.dump();\n        \r\n        Set<String> ensureNames = new LinkedHashSet<String>();\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"InMemoryDataTree\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i\n                 + \",name1=replica.\" + i + \",name2=\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 5; j++) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i\n                     + \",name1=replica.\" + j);\n            }\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n        }\n        JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n    }\n","date":"2018-10-19 20:39:50","endLine":251,"groupId":"4380","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startServers","params":"(booleanwithObservers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fc/aa9b68385350fef2f00a1ef84cf40bfe4eb070.src","preCode":"    void startServers(boolean withObservers) throws Exception {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        Map<Long,QuorumServer> peers = new HashMap<Long,QuorumServer>();\n        peers.put(Long.valueOf(1), new QuorumServer(1,\n                new InetSocketAddress(LOCALADDR, port1),\n                new InetSocketAddress(LOCALADDR, portLE1),\n                new InetSocketAddress(LOCALADDR, portClient1),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(2), new QuorumServer(2,\n                new InetSocketAddress(LOCALADDR, port2),\n                new InetSocketAddress(LOCALADDR, portLE2),\n                new InetSocketAddress(LOCALADDR, portClient2),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(3), new QuorumServer(3,\n                new InetSocketAddress(LOCALADDR, port3),\n                new InetSocketAddress(LOCALADDR, portLE3),\n                new InetSocketAddress(LOCALADDR, portClient3),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(4), new QuorumServer(4,\n                new InetSocketAddress(LOCALADDR, port4),\n                new InetSocketAddress(LOCALADDR, portLE4),\n                new InetSocketAddress(LOCALADDR, portClient4),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(5), new QuorumServer(5,\n                new InetSocketAddress(LOCALADDR, port5),\n                new InetSocketAddress(LOCALADDR, portLE5),\n                new InetSocketAddress(LOCALADDR, portClient5),\n                LearnerType.PARTICIPANT));\n\n        if (withObservers) {\n            peers.get(Long.valueOf(4)).type = LearnerType.OBSERVER;\n            peers.get(Long.valueOf(5)).type = LearnerType.OBSERVER;\n        }\n\n        LOG.info(\"creating QuorumPeer 1 port \" + portClient1);\n        s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit);\n        Assert.assertEquals(portClient1, s1.getClientPort());\n        LOG.info(\"creating QuorumPeer 2 port \" + portClient2);\n        s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit);\n        Assert.assertEquals(portClient2, s2.getClientPort());\n        LOG.info(\"creating QuorumPeer 3 port \" + portClient3);\n        s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit);\n        Assert.assertEquals(portClient3, s3.getClientPort());\n        LOG.info(\"creating QuorumPeer 4 port \" + portClient4);\n        s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit);\n        Assert.assertEquals(portClient4, s4.getClientPort());\n        LOG.info(\"creating QuorumPeer 5 port \" + portClient5);\n        s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit);\n        Assert.assertEquals(portClient5, s5.getClientPort());\n\n        if (withObservers) {\n            s4.setLearnerType(LearnerType.OBSERVER);\n            s5.setLearnerType(LearnerType.OBSERVER);\n        }\n\n        LOG.info(\"QuorumPeer 1 voting view: \" + s1.getVotingView());\n        LOG.info(\"QuorumPeer 2 voting view: \" + s2.getVotingView());\n        LOG.info(\"QuorumPeer 3 voting view: \" + s3.getVotingView());\n        LOG.info(\"QuorumPeer 4 voting view: \" + s4.getVotingView());\n        LOG.info(\"QuorumPeer 5 voting view: \" + s5.getVotingView());\n\n        s1.enableLocalSessions(localSessionsEnabled);\n        s2.enableLocalSessions(localSessionsEnabled);\n        s3.enableLocalSessions(localSessionsEnabled);\n        s4.enableLocalSessions(localSessionsEnabled);\n        s5.enableLocalSessions(localSessionsEnabled);\n        s1.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s2.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s3.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s4.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s5.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n\n        LOG.info(\"start QuorumPeer 1\");\n        s1.start();\n        LOG.info(\"start QuorumPeer 2\");\n        s2.start();\n        LOG.info(\"start QuorumPeer 3\");\n        s3.start();\n        LOG.info(\"start QuorumPeer 4\");\n        s4.start();\n        LOG.info(\"start QuorumPeer 5\");\n        s5.start();\n        LOG.info(\"started QuorumPeer 5\");\n\n        LOG.info (\"Checking ports \" + hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            Assert.assertTrue(\"waiting for server up\",\n                       ClientBase.waitForServerUp(hp,\n                                    CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is accepting client connections\");\n        }\n\n        \r\n        JMXEnv.dump();\n        \r\n        Set<String> ensureNames = new LinkedHashSet<String>();\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"InMemoryDataTree\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i\n                 + \",name1=replica.\" + i + \",name2=\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 5; j++) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i\n                     + \",name1=replica.\" + j);\n            }\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n        }\n        JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void setupServer(int i) throws IOException {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n\n        if(peers == null){\n            peers = new HashMap<Long,QuorumServer>();\n\n            peers.put(Long.valueOf(1), new QuorumServer(1,\n                new InetSocketAddress(LOCALADDR, port1),\n                new InetSocketAddress(LOCALADDR, portLE1),\n                new InetSocketAddress(LOCALADDR, portClient1),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(2), new QuorumServer(2,\n                new InetSocketAddress(LOCALADDR, port2),\n                new InetSocketAddress(LOCALADDR, portLE2),\n                new InetSocketAddress(LOCALADDR, portClient2),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(3), new QuorumServer(3,\n                new InetSocketAddress(LOCALADDR, port3),\n                new InetSocketAddress(LOCALADDR, portLE3),\n                new InetSocketAddress(LOCALADDR, portClient3),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(4), new QuorumServer(4,\n                new InetSocketAddress(LOCALADDR, port4),\n                new InetSocketAddress(LOCALADDR, portLE4),\n                new InetSocketAddress(LOCALADDR, portClient4),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(5), new QuorumServer(5,\n                new InetSocketAddress(LOCALADDR, port5),\n                new InetSocketAddress(LOCALADDR, portLE5),\n                new InetSocketAddress(LOCALADDR, portClient5),\n                LearnerType.PARTICIPANT));\n        }\n\n        switch(i){\n        case 1:\n            LOG.info(\"creating QuorumPeer 1 port \" + portClient1);\n            s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit);\n            Assert.assertEquals(portClient1, s1.getClientPort());\n            break;\n        case 2:\n            LOG.info(\"creating QuorumPeer 2 port \" + portClient2);\n            s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit);\n            Assert.assertEquals(portClient2, s2.getClientPort());\n            break;\n        case 3:\n            LOG.info(\"creating QuorumPeer 3 port \" + portClient3);\n            s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit);\n            Assert.assertEquals(portClient3, s3.getClientPort());\n            break;\n        case 4:\n            LOG.info(\"creating QuorumPeer 4 port \" + portClient4);\n            s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit);\n            Assert.assertEquals(portClient4, s4.getClientPort());\n            break;\n        case 5:\n            LOG.info(\"creating QuorumPeer 5 port \" + portClient5);\n            s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit);\n            Assert.assertEquals(portClient5, s5.getClientPort());\n        }\n    }\n","date":"2018-10-19 20:39:50","endLine":359,"groupId":"2523","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setupServer","params":"(inti)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fc/aa9b68385350fef2f00a1ef84cf40bfe4eb070.src","preCode":"    public void setupServer(int i) throws IOException {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n\n        if(peers == null){\n            peers = new HashMap<Long,QuorumServer>();\n\n            peers.put(Long.valueOf(1), new QuorumServer(1,\n                new InetSocketAddress(LOCALADDR, port1),\n                new InetSocketAddress(LOCALADDR, portLE1),\n                new InetSocketAddress(LOCALADDR, portClient1),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(2), new QuorumServer(2,\n                new InetSocketAddress(LOCALADDR, port2),\n                new InetSocketAddress(LOCALADDR, portLE2),\n                new InetSocketAddress(LOCALADDR, portClient2),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(3), new QuorumServer(3,\n                new InetSocketAddress(LOCALADDR, port3),\n                new InetSocketAddress(LOCALADDR, portLE3),\n                new InetSocketAddress(LOCALADDR, portClient3),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(4), new QuorumServer(4,\n                new InetSocketAddress(LOCALADDR, port4),\n                new InetSocketAddress(LOCALADDR, portLE4),\n                new InetSocketAddress(LOCALADDR, portClient4),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(5), new QuorumServer(5,\n                new InetSocketAddress(LOCALADDR, port5),\n                new InetSocketAddress(LOCALADDR, portLE5),\n                new InetSocketAddress(LOCALADDR, portClient5),\n                LearnerType.PARTICIPANT));\n        }\n\n        switch(i){\n        case 1:\n            LOG.info(\"creating QuorumPeer 1 port \" + portClient1);\n            s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit);\n            Assert.assertEquals(portClient1, s1.getClientPort());\n            break;\n        case 2:\n            LOG.info(\"creating QuorumPeer 2 port \" + portClient2);\n            s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit);\n            Assert.assertEquals(portClient2, s2.getClientPort());\n            break;\n        case 3:\n            LOG.info(\"creating QuorumPeer 3 port \" + portClient3);\n            s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit);\n            Assert.assertEquals(portClient3, s3.getClientPort());\n            break;\n        case 4:\n            LOG.info(\"creating QuorumPeer 4 port \" + portClient4);\n            s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit);\n            Assert.assertEquals(portClient4, s4.getClientPort());\n            break;\n        case 5:\n            LOG.info(\"creating QuorumPeer 5 port \" + portClient5);\n            s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit);\n            Assert.assertEquals(portClient5, s5.getClientPort());\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-07-12 23:01:44","codes":[{"authorDate":"2019-07-12 23:01:44","commitOrder":2,"curCode":"    void startServers(boolean withObservers) throws Exception {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n        Map<Long,QuorumServer> peers = new HashMap<Long,QuorumServer>();\n        peers.put(Long.valueOf(1), new QuorumServer(1,\n                new InetSocketAddress(LOCALADDR, port1),\n                new InetSocketAddress(LOCALADDR, portLE1),\n                new InetSocketAddress(LOCALADDR, portClient1),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(2), new QuorumServer(2,\n                new InetSocketAddress(LOCALADDR, port2),\n                new InetSocketAddress(LOCALADDR, portLE2),\n                new InetSocketAddress(LOCALADDR, portClient2),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(3), new QuorumServer(3,\n                new InetSocketAddress(LOCALADDR, port3),\n                new InetSocketAddress(LOCALADDR, portLE3),\n                new InetSocketAddress(LOCALADDR, portClient3),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(4), new QuorumServer(4,\n                new InetSocketAddress(LOCALADDR, port4),\n                new InetSocketAddress(LOCALADDR, portLE4),\n                new InetSocketAddress(LOCALADDR, portClient4),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(5), new QuorumServer(5,\n                new InetSocketAddress(LOCALADDR, port5),\n                new InetSocketAddress(LOCALADDR, portLE5),\n                new InetSocketAddress(LOCALADDR, portClient5),\n                LearnerType.PARTICIPANT));\n\n        if (withObservers) {\n            peers.get(Long.valueOf(4)).type = LearnerType.OBSERVER;\n            peers.get(Long.valueOf(5)).type = LearnerType.OBSERVER;\n        }\n\n        LOG.info(\"creating QuorumPeer 1 port \" + portClient1);\n        s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        Assert.assertEquals(portClient1, s1.getClientPort());\n        LOG.info(\"creating QuorumPeer 2 port \" + portClient2);\n        s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        Assert.assertEquals(portClient2, s2.getClientPort());\n        LOG.info(\"creating QuorumPeer 3 port \" + portClient3);\n        s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        Assert.assertEquals(portClient3, s3.getClientPort());\n        LOG.info(\"creating QuorumPeer 4 port \" + portClient4);\n        s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        Assert.assertEquals(portClient4, s4.getClientPort());\n        LOG.info(\"creating QuorumPeer 5 port \" + portClient5);\n        s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        Assert.assertEquals(portClient5, s5.getClientPort());\n\n        if (withObservers) {\n            s4.setLearnerType(LearnerType.OBSERVER);\n            s5.setLearnerType(LearnerType.OBSERVER);\n        }\n\n        LOG.info(\"QuorumPeer 1 voting view: \" + s1.getVotingView());\n        LOG.info(\"QuorumPeer 2 voting view: \" + s2.getVotingView());\n        LOG.info(\"QuorumPeer 3 voting view: \" + s3.getVotingView());\n        LOG.info(\"QuorumPeer 4 voting view: \" + s4.getVotingView());\n        LOG.info(\"QuorumPeer 5 voting view: \" + s5.getVotingView());\n\n        s1.enableLocalSessions(localSessionsEnabled);\n        s2.enableLocalSessions(localSessionsEnabled);\n        s3.enableLocalSessions(localSessionsEnabled);\n        s4.enableLocalSessions(localSessionsEnabled);\n        s5.enableLocalSessions(localSessionsEnabled);\n        s1.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s2.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s3.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s4.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s5.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n\n        LOG.info(\"start QuorumPeer 1\");\n        s1.start();\n        LOG.info(\"start QuorumPeer 2\");\n        s2.start();\n        LOG.info(\"start QuorumPeer 3\");\n        s3.start();\n        LOG.info(\"start QuorumPeer 4\");\n        s4.start();\n        LOG.info(\"start QuorumPeer 5\");\n        s5.start();\n        LOG.info(\"started QuorumPeer 5\");\n\n        LOG.info (\"Checking ports \" + hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            Assert.assertTrue(\"waiting for server up\",\n                       ClientBase.waitForServerUp(hp,\n                                    CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is accepting client connections\");\n        }\n\n        \r\n        JMXEnv.dump();\n        \r\n        Set<String> ensureNames = new LinkedHashSet<String>();\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"InMemoryDataTree\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i\n                 + \",name1=replica.\" + i + \",name2=\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 5; j++) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i\n                     + \",name1=replica.\" + j);\n            }\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n        }\n        JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n    }\n","date":"2019-07-12 23:01:44","endLine":252,"groupId":"4380","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startServers","params":"(booleanwithObservers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a2/b0615d6ca997ec74f75f90922b8586e8275ffb.src","preCode":"    void startServers(boolean withObservers) throws Exception {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        Map<Long,QuorumServer> peers = new HashMap<Long,QuorumServer>();\n        peers.put(Long.valueOf(1), new QuorumServer(1,\n                new InetSocketAddress(LOCALADDR, port1),\n                new InetSocketAddress(LOCALADDR, portLE1),\n                new InetSocketAddress(LOCALADDR, portClient1),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(2), new QuorumServer(2,\n                new InetSocketAddress(LOCALADDR, port2),\n                new InetSocketAddress(LOCALADDR, portLE2),\n                new InetSocketAddress(LOCALADDR, portClient2),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(3), new QuorumServer(3,\n                new InetSocketAddress(LOCALADDR, port3),\n                new InetSocketAddress(LOCALADDR, portLE3),\n                new InetSocketAddress(LOCALADDR, portClient3),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(4), new QuorumServer(4,\n                new InetSocketAddress(LOCALADDR, port4),\n                new InetSocketAddress(LOCALADDR, portLE4),\n                new InetSocketAddress(LOCALADDR, portClient4),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(5), new QuorumServer(5,\n                new InetSocketAddress(LOCALADDR, port5),\n                new InetSocketAddress(LOCALADDR, portLE5),\n                new InetSocketAddress(LOCALADDR, portClient5),\n                LearnerType.PARTICIPANT));\n\n        if (withObservers) {\n            peers.get(Long.valueOf(4)).type = LearnerType.OBSERVER;\n            peers.get(Long.valueOf(5)).type = LearnerType.OBSERVER;\n        }\n\n        LOG.info(\"creating QuorumPeer 1 port \" + portClient1);\n        s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit);\n        Assert.assertEquals(portClient1, s1.getClientPort());\n        LOG.info(\"creating QuorumPeer 2 port \" + portClient2);\n        s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit);\n        Assert.assertEquals(portClient2, s2.getClientPort());\n        LOG.info(\"creating QuorumPeer 3 port \" + portClient3);\n        s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit);\n        Assert.assertEquals(portClient3, s3.getClientPort());\n        LOG.info(\"creating QuorumPeer 4 port \" + portClient4);\n        s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit);\n        Assert.assertEquals(portClient4, s4.getClientPort());\n        LOG.info(\"creating QuorumPeer 5 port \" + portClient5);\n        s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit);\n        Assert.assertEquals(portClient5, s5.getClientPort());\n\n        if (withObservers) {\n            s4.setLearnerType(LearnerType.OBSERVER);\n            s5.setLearnerType(LearnerType.OBSERVER);\n        }\n\n        LOG.info(\"QuorumPeer 1 voting view: \" + s1.getVotingView());\n        LOG.info(\"QuorumPeer 2 voting view: \" + s2.getVotingView());\n        LOG.info(\"QuorumPeer 3 voting view: \" + s3.getVotingView());\n        LOG.info(\"QuorumPeer 4 voting view: \" + s4.getVotingView());\n        LOG.info(\"QuorumPeer 5 voting view: \" + s5.getVotingView());\n\n        s1.enableLocalSessions(localSessionsEnabled);\n        s2.enableLocalSessions(localSessionsEnabled);\n        s3.enableLocalSessions(localSessionsEnabled);\n        s4.enableLocalSessions(localSessionsEnabled);\n        s5.enableLocalSessions(localSessionsEnabled);\n        s1.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s2.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s3.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s4.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s5.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n\n        LOG.info(\"start QuorumPeer 1\");\n        s1.start();\n        LOG.info(\"start QuorumPeer 2\");\n        s2.start();\n        LOG.info(\"start QuorumPeer 3\");\n        s3.start();\n        LOG.info(\"start QuorumPeer 4\");\n        s4.start();\n        LOG.info(\"start QuorumPeer 5\");\n        s5.start();\n        LOG.info(\"started QuorumPeer 5\");\n\n        LOG.info (\"Checking ports \" + hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            Assert.assertTrue(\"waiting for server up\",\n                       ClientBase.waitForServerUp(hp,\n                                    CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is accepting client connections\");\n        }\n\n        \r\n        JMXEnv.dump();\n        \r\n        Set<String> ensureNames = new LinkedHashSet<String>();\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"InMemoryDataTree\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i\n                 + \",name1=replica.\" + i + \",name2=\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 5; j++) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i\n                     + \",name1=replica.\" + j);\n            }\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n        }\n        JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2019-07-12 23:01:44","commitOrder":2,"curCode":"    public void setupServer(int i) throws IOException {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n\n        if(peers == null){\n            peers = new HashMap<Long,QuorumServer>();\n\n            peers.put(Long.valueOf(1), new QuorumServer(1,\n                new InetSocketAddress(LOCALADDR, port1),\n                new InetSocketAddress(LOCALADDR, portLE1),\n                new InetSocketAddress(LOCALADDR, portClient1),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(2), new QuorumServer(2,\n                new InetSocketAddress(LOCALADDR, port2),\n                new InetSocketAddress(LOCALADDR, portLE2),\n                new InetSocketAddress(LOCALADDR, portClient2),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(3), new QuorumServer(3,\n                new InetSocketAddress(LOCALADDR, port3),\n                new InetSocketAddress(LOCALADDR, portLE3),\n                new InetSocketAddress(LOCALADDR, portClient3),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(4), new QuorumServer(4,\n                new InetSocketAddress(LOCALADDR, port4),\n                new InetSocketAddress(LOCALADDR, portLE4),\n                new InetSocketAddress(LOCALADDR, portClient4),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(5), new QuorumServer(5,\n                new InetSocketAddress(LOCALADDR, port5),\n                new InetSocketAddress(LOCALADDR, portLE5),\n                new InetSocketAddress(LOCALADDR, portClient5),\n                LearnerType.PARTICIPANT));\n        }\n\n        switch(i){\n        case 1:\n            LOG.info(\"creating QuorumPeer 1 port \" + portClient1);\n            s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            Assert.assertEquals(portClient1, s1.getClientPort());\n            break;\n        case 2:\n            LOG.info(\"creating QuorumPeer 2 port \" + portClient2);\n            s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            Assert.assertEquals(portClient2, s2.getClientPort());\n            break;\n        case 3:\n            LOG.info(\"creating QuorumPeer 3 port \" + portClient3);\n            s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            Assert.assertEquals(portClient3, s3.getClientPort());\n            break;\n        case 4:\n            LOG.info(\"creating QuorumPeer 4 port \" + portClient4);\n            s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            Assert.assertEquals(portClient4, s4.getClientPort());\n            break;\n        case 5:\n            LOG.info(\"creating QuorumPeer 5 port \" + portClient5);\n            s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            Assert.assertEquals(portClient5, s5.getClientPort());\n        }\n    }\n","date":"2019-07-12 23:01:44","endLine":361,"groupId":"597","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setupServer","params":"(inti)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a2/b0615d6ca997ec74f75f90922b8586e8275ffb.src","preCode":"    public void setupServer(int i) throws IOException {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n\n        if(peers == null){\n            peers = new HashMap<Long,QuorumServer>();\n\n            peers.put(Long.valueOf(1), new QuorumServer(1,\n                new InetSocketAddress(LOCALADDR, port1),\n                new InetSocketAddress(LOCALADDR, portLE1),\n                new InetSocketAddress(LOCALADDR, portClient1),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(2), new QuorumServer(2,\n                new InetSocketAddress(LOCALADDR, port2),\n                new InetSocketAddress(LOCALADDR, portLE2),\n                new InetSocketAddress(LOCALADDR, portClient2),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(3), new QuorumServer(3,\n                new InetSocketAddress(LOCALADDR, port3),\n                new InetSocketAddress(LOCALADDR, portLE3),\n                new InetSocketAddress(LOCALADDR, portClient3),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(4), new QuorumServer(4,\n                new InetSocketAddress(LOCALADDR, port4),\n                new InetSocketAddress(LOCALADDR, portLE4),\n                new InetSocketAddress(LOCALADDR, portClient4),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(5), new QuorumServer(5,\n                new InetSocketAddress(LOCALADDR, port5),\n                new InetSocketAddress(LOCALADDR, portLE5),\n                new InetSocketAddress(LOCALADDR, portClient5),\n                LearnerType.PARTICIPANT));\n        }\n\n        switch(i){\n        case 1:\n            LOG.info(\"creating QuorumPeer 1 port \" + portClient1);\n            s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit);\n            Assert.assertEquals(portClient1, s1.getClientPort());\n            break;\n        case 2:\n            LOG.info(\"creating QuorumPeer 2 port \" + portClient2);\n            s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit);\n            Assert.assertEquals(portClient2, s2.getClientPort());\n            break;\n        case 3:\n            LOG.info(\"creating QuorumPeer 3 port \" + portClient3);\n            s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit);\n            Assert.assertEquals(portClient3, s3.getClientPort());\n            break;\n        case 4:\n            LOG.info(\"creating QuorumPeer 4 port \" + portClient4);\n            s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit);\n            Assert.assertEquals(portClient4, s4.getClientPort());\n            break;\n        case 5:\n            LOG.info(\"creating QuorumPeer 5 port \" + portClient5);\n            s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit);\n            Assert.assertEquals(portClient5, s5.getClientPort());\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"}],"commitId":"43ce772db000721546fcd13dd8523002dfa97741","commitMessage":"@@@ZOOKEEPER-3398: Learner.connectToLeader() may take too long to time-out\n\nAfter leader election happens.  the followers will connect to the leader which is facilitated by the Learner.connectToLeader() method.\n\nLearner.connectToLeader() is relying on the initLimit configuration value to time-out in case the network connection is unreliable. This config may have a high value that could leave the ensemble retrying and waiting in the state of not having quorum for too long. The follower will retry up to 5 times.\n\nThis patch introduces a new configuration directive that will allow Zookeeper to use different time-out value `connectToLeaderLimit` which then could be set to lower value than `initLimit`.\n\nTest plan:\n- ant clean\n- ant test-core-java\n\nNOTE: Lots of whitespace changes.  hope it helps.\n\nAuthor: Vladimir Ivic <vladimir.ivic@me.com>\n\nReviewers: eolivelli@apache.org.  hanm@apache.org.  andor@apache.org\n\nCloses #953 from vladimirivic/ZOOKEEPER-3398 and squashes the following commits:\n\nda4ecd055 [Vladimir Ivic] Removed redundant test.  chaning LearnerTest.connectToLearnerMasterLimitTest() params and assertions\n6c413311c [Vladimir Ivic] Updating the tests with the new timeout parameter\n5a89cbd7e [Vladimir Ivic] Rewriting timeout logic inside Leader.connectToLeader\n99c065616 [Vladimir Ivic] Adding config connectToLearnerMasterLimit to prevent long connect timeout\n","date":"2019-07-12 23:01:44","modifiedFileCount":"23","status":"M","submitter":"Vladimir Ivic"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    void startServers(boolean withObservers) throws Exception {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n        Map<Long, QuorumServer> peers = new HashMap<Long, QuorumServer>();\n        peers.put(Long.valueOf(1), new QuorumServer(1, new InetSocketAddress(LOCALADDR, port1), new InetSocketAddress(LOCALADDR, portLE1), new InetSocketAddress(LOCALADDR, portClient1), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(2), new QuorumServer(2, new InetSocketAddress(LOCALADDR, port2), new InetSocketAddress(LOCALADDR, portLE2), new InetSocketAddress(LOCALADDR, portClient2), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(3), new QuorumServer(3, new InetSocketAddress(LOCALADDR, port3), new InetSocketAddress(LOCALADDR, portLE3), new InetSocketAddress(LOCALADDR, portClient3), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(4), new QuorumServer(4, new InetSocketAddress(LOCALADDR, port4), new InetSocketAddress(LOCALADDR, portLE4), new InetSocketAddress(LOCALADDR, portClient4), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(5), new QuorumServer(5, new InetSocketAddress(LOCALADDR, port5), new InetSocketAddress(LOCALADDR, portLE5), new InetSocketAddress(LOCALADDR, portClient5), LearnerType.PARTICIPANT));\n\n        if (withObservers) {\n            peers.get(Long.valueOf(4)).type = LearnerType.OBSERVER;\n            peers.get(Long.valueOf(5)).type = LearnerType.OBSERVER;\n        }\n\n        LOG.info(\"creating QuorumPeer 1 port \" + portClient1);\n        s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient1, s1.getClientPort());\n        LOG.info(\"creating QuorumPeer 2 port \" + portClient2);\n        s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient2, s2.getClientPort());\n        LOG.info(\"creating QuorumPeer 3 port \" + portClient3);\n        s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient3, s3.getClientPort());\n        LOG.info(\"creating QuorumPeer 4 port \" + portClient4);\n        s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient4, s4.getClientPort());\n        LOG.info(\"creating QuorumPeer 5 port \" + portClient5);\n        s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient5, s5.getClientPort());\n\n        if (withObservers) {\n            s4.setLearnerType(LearnerType.OBSERVER);\n            s5.setLearnerType(LearnerType.OBSERVER);\n        }\n\n        LOG.info(\"QuorumPeer 1 voting view: \" + s1.getVotingView());\n        LOG.info(\"QuorumPeer 2 voting view: \" + s2.getVotingView());\n        LOG.info(\"QuorumPeer 3 voting view: \" + s3.getVotingView());\n        LOG.info(\"QuorumPeer 4 voting view: \" + s4.getVotingView());\n        LOG.info(\"QuorumPeer 5 voting view: \" + s5.getVotingView());\n\n        s1.enableLocalSessions(localSessionsEnabled);\n        s2.enableLocalSessions(localSessionsEnabled);\n        s3.enableLocalSessions(localSessionsEnabled);\n        s4.enableLocalSessions(localSessionsEnabled);\n        s5.enableLocalSessions(localSessionsEnabled);\n        s1.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s2.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s3.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s4.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s5.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n\n        LOG.info(\"start QuorumPeer 1\");\n        s1.start();\n        LOG.info(\"start QuorumPeer 2\");\n        s2.start();\n        LOG.info(\"start QuorumPeer 3\");\n        s3.start();\n        LOG.info(\"start QuorumPeer 4\");\n        s4.start();\n        LOG.info(\"start QuorumPeer 5\");\n        s5.start();\n        LOG.info(\"started QuorumPeer 5\");\n\n        LOG.info(\"Checking ports \" + hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"waiting for server up\", ClientBase.waitForServerUp(hp, CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is accepting client connections\");\n        }\n\n        \r\n        JMXEnv.dump();\n        \r\n        Set<String> ensureNames = new LinkedHashSet<String>();\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"InMemoryDataTree\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 5; j++) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n            }\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n        }\n        JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n    }\n","date":"2019-08-17 23:13:15","endLine":233,"groupId":"4380","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"startServers","params":"(booleanwithObservers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/73/4e5935f34e521c48715ef530fc4f5092fa6afa.src","preCode":"    void startServers(boolean withObservers) throws Exception {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n        Map<Long,QuorumServer> peers = new HashMap<Long,QuorumServer>();\n        peers.put(Long.valueOf(1), new QuorumServer(1,\n                new InetSocketAddress(LOCALADDR, port1),\n                new InetSocketAddress(LOCALADDR, portLE1),\n                new InetSocketAddress(LOCALADDR, portClient1),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(2), new QuorumServer(2,\n                new InetSocketAddress(LOCALADDR, port2),\n                new InetSocketAddress(LOCALADDR, portLE2),\n                new InetSocketAddress(LOCALADDR, portClient2),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(3), new QuorumServer(3,\n                new InetSocketAddress(LOCALADDR, port3),\n                new InetSocketAddress(LOCALADDR, portLE3),\n                new InetSocketAddress(LOCALADDR, portClient3),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(4), new QuorumServer(4,\n                new InetSocketAddress(LOCALADDR, port4),\n                new InetSocketAddress(LOCALADDR, portLE4),\n                new InetSocketAddress(LOCALADDR, portClient4),\n                LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(5), new QuorumServer(5,\n                new InetSocketAddress(LOCALADDR, port5),\n                new InetSocketAddress(LOCALADDR, portLE5),\n                new InetSocketAddress(LOCALADDR, portClient5),\n                LearnerType.PARTICIPANT));\n\n        if (withObservers) {\n            peers.get(Long.valueOf(4)).type = LearnerType.OBSERVER;\n            peers.get(Long.valueOf(5)).type = LearnerType.OBSERVER;\n        }\n\n        LOG.info(\"creating QuorumPeer 1 port \" + portClient1);\n        s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        Assert.assertEquals(portClient1, s1.getClientPort());\n        LOG.info(\"creating QuorumPeer 2 port \" + portClient2);\n        s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        Assert.assertEquals(portClient2, s2.getClientPort());\n        LOG.info(\"creating QuorumPeer 3 port \" + portClient3);\n        s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        Assert.assertEquals(portClient3, s3.getClientPort());\n        LOG.info(\"creating QuorumPeer 4 port \" + portClient4);\n        s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        Assert.assertEquals(portClient4, s4.getClientPort());\n        LOG.info(\"creating QuorumPeer 5 port \" + portClient5);\n        s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        Assert.assertEquals(portClient5, s5.getClientPort());\n\n        if (withObservers) {\n            s4.setLearnerType(LearnerType.OBSERVER);\n            s5.setLearnerType(LearnerType.OBSERVER);\n        }\n\n        LOG.info(\"QuorumPeer 1 voting view: \" + s1.getVotingView());\n        LOG.info(\"QuorumPeer 2 voting view: \" + s2.getVotingView());\n        LOG.info(\"QuorumPeer 3 voting view: \" + s3.getVotingView());\n        LOG.info(\"QuorumPeer 4 voting view: \" + s4.getVotingView());\n        LOG.info(\"QuorumPeer 5 voting view: \" + s5.getVotingView());\n\n        s1.enableLocalSessions(localSessionsEnabled);\n        s2.enableLocalSessions(localSessionsEnabled);\n        s3.enableLocalSessions(localSessionsEnabled);\n        s4.enableLocalSessions(localSessionsEnabled);\n        s5.enableLocalSessions(localSessionsEnabled);\n        s1.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s2.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s3.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s4.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s5.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n\n        LOG.info(\"start QuorumPeer 1\");\n        s1.start();\n        LOG.info(\"start QuorumPeer 2\");\n        s2.start();\n        LOG.info(\"start QuorumPeer 3\");\n        s3.start();\n        LOG.info(\"start QuorumPeer 4\");\n        s4.start();\n        LOG.info(\"start QuorumPeer 5\");\n        s5.start();\n        LOG.info(\"started QuorumPeer 5\");\n\n        LOG.info (\"Checking ports \" + hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            Assert.assertTrue(\"waiting for server up\",\n                       ClientBase.waitForServerUp(hp,\n                                    CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is accepting client connections\");\n        }\n\n        \r\n        JMXEnv.dump();\n        \r\n        Set<String> ensureNames = new LinkedHashSet<String>();\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"InMemoryDataTree\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i\n                 + \",name1=replica.\" + i + \",name2=\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 5; j++) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i\n                     + \",name1=replica.\" + j);\n            }\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n        }\n        JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void setupServer(int i) throws IOException {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n\n        if (peers == null) {\n            peers = new HashMap<Long, QuorumServer>();\n\n            peers.put(Long.valueOf(1), new QuorumServer(1, new InetSocketAddress(LOCALADDR, port1), new InetSocketAddress(LOCALADDR, portLE1), new InetSocketAddress(LOCALADDR, portClient1), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(2), new QuorumServer(2, new InetSocketAddress(LOCALADDR, port2), new InetSocketAddress(LOCALADDR, portLE2), new InetSocketAddress(LOCALADDR, portClient2), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(3), new QuorumServer(3, new InetSocketAddress(LOCALADDR, port3), new InetSocketAddress(LOCALADDR, portLE3), new InetSocketAddress(LOCALADDR, portClient3), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(4), new QuorumServer(4, new InetSocketAddress(LOCALADDR, port4), new InetSocketAddress(LOCALADDR, portLE4), new InetSocketAddress(LOCALADDR, portClient4), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(5), new QuorumServer(5, new InetSocketAddress(LOCALADDR, port5), new InetSocketAddress(LOCALADDR, portLE5), new InetSocketAddress(LOCALADDR, portClient5), LearnerType.PARTICIPANT));\n        }\n\n        switch (i) {\n        case 1:\n            LOG.info(\"creating QuorumPeer 1 port \" + portClient1);\n            s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient1, s1.getClientPort());\n            break;\n        case 2:\n            LOG.info(\"creating QuorumPeer 2 port \" + portClient2);\n            s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient2, s2.getClientPort());\n            break;\n        case 3:\n            LOG.info(\"creating QuorumPeer 3 port \" + portClient3);\n            s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient3, s3.getClientPort());\n            break;\n        case 4:\n            LOG.info(\"creating QuorumPeer 4 port \" + portClient4);\n            s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient4, s4.getClientPort());\n            break;\n        case 5:\n            LOG.info(\"creating QuorumPeer 5 port \" + portClient5);\n            s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient5, s5.getClientPort());\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":331,"groupId":"597","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setupServer","params":"(inti)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/73/4e5935f34e521c48715ef530fc4f5092fa6afa.src","preCode":"    public void setupServer(int i) throws IOException {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n\n        if(peers == null){\n            peers = new HashMap<Long,QuorumServer>();\n\n            peers.put(Long.valueOf(1), new QuorumServer(1,\n                new InetSocketAddress(LOCALADDR, port1),\n                new InetSocketAddress(LOCALADDR, portLE1),\n                new InetSocketAddress(LOCALADDR, portClient1),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(2), new QuorumServer(2,\n                new InetSocketAddress(LOCALADDR, port2),\n                new InetSocketAddress(LOCALADDR, portLE2),\n                new InetSocketAddress(LOCALADDR, portClient2),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(3), new QuorumServer(3,\n                new InetSocketAddress(LOCALADDR, port3),\n                new InetSocketAddress(LOCALADDR, portLE3),\n                new InetSocketAddress(LOCALADDR, portClient3),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(4), new QuorumServer(4,\n                new InetSocketAddress(LOCALADDR, port4),\n                new InetSocketAddress(LOCALADDR, portLE4),\n                new InetSocketAddress(LOCALADDR, portClient4),\n                LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(5), new QuorumServer(5,\n                new InetSocketAddress(LOCALADDR, port5),\n                new InetSocketAddress(LOCALADDR, portLE5),\n                new InetSocketAddress(LOCALADDR, portClient5),\n                LearnerType.PARTICIPANT));\n        }\n\n        switch(i){\n        case 1:\n            LOG.info(\"creating QuorumPeer 1 port \" + portClient1);\n            s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            Assert.assertEquals(portClient1, s1.getClientPort());\n            break;\n        case 2:\n            LOG.info(\"creating QuorumPeer 2 port \" + portClient2);\n            s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            Assert.assertEquals(portClient2, s2.getClientPort());\n            break;\n        case 3:\n            LOG.info(\"creating QuorumPeer 3 port \" + portClient3);\n            s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            Assert.assertEquals(portClient3, s3.getClientPort());\n            break;\n        case 4:\n            LOG.info(\"creating QuorumPeer 4 port \" + portClient4);\n            s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            Assert.assertEquals(portClient4, s4.getClientPort());\n            break;\n        case 5:\n            LOG.info(\"creating QuorumPeer 5 port \" + portClient5);\n            s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            Assert.assertEquals(portClient5, s5.getClientPort());\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2019-10-10 20:37:45","commitOrder":4,"curCode":"    void startServers(boolean withObservers) throws Exception {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n        Map<Long, QuorumServer> peers = new HashMap<Long, QuorumServer>();\n        peers.put(Long.valueOf(1), new QuorumServer(1, new InetSocketAddress(LOCALADDR, port1), new InetSocketAddress(LOCALADDR, portLE1), new InetSocketAddress(LOCALADDR, portClient1), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(2), new QuorumServer(2, new InetSocketAddress(LOCALADDR, port2), new InetSocketAddress(LOCALADDR, portLE2), new InetSocketAddress(LOCALADDR, portClient2), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(3), new QuorumServer(3, new InetSocketAddress(LOCALADDR, port3), new InetSocketAddress(LOCALADDR, portLE3), new InetSocketAddress(LOCALADDR, portClient3), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(4), new QuorumServer(4, new InetSocketAddress(LOCALADDR, port4), new InetSocketAddress(LOCALADDR, portLE4), new InetSocketAddress(LOCALADDR, portClient4), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(5), new QuorumServer(5, new InetSocketAddress(LOCALADDR, port5), new InetSocketAddress(LOCALADDR, portLE5), new InetSocketAddress(LOCALADDR, portClient5), LearnerType.PARTICIPANT));\n\n        if (withObservers) {\n            peers.get(Long.valueOf(4)).type = LearnerType.OBSERVER;\n            peers.get(Long.valueOf(5)).type = LearnerType.OBSERVER;\n        }\n\n        LOG.info(\"creating QuorumPeer 1 port {}\", portClient1);\n        s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient1, s1.getClientPort());\n        LOG.info(\"creating QuorumPeer 2 port {}\", portClient2);\n        s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient2, s2.getClientPort());\n        LOG.info(\"creating QuorumPeer 3 port {}\", portClient3);\n        s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient3, s3.getClientPort());\n        LOG.info(\"creating QuorumPeer 4 port {}\", portClient4);\n        s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient4, s4.getClientPort());\n        LOG.info(\"creating QuorumPeer 5 port {}\", portClient5);\n        s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient5, s5.getClientPort());\n\n        if (withObservers) {\n            s4.setLearnerType(LearnerType.OBSERVER);\n            s5.setLearnerType(LearnerType.OBSERVER);\n        }\n\n        LOG.info(\"QuorumPeer 1 voting view: {}\", s1.getVotingView());\n        LOG.info(\"QuorumPeer 2 voting view: {}\", s2.getVotingView());\n        LOG.info(\"QuorumPeer 3 voting view: {}\", s3.getVotingView());\n        LOG.info(\"QuorumPeer 4 voting view: {}\", s4.getVotingView());\n        LOG.info(\"QuorumPeer 5 voting view: {}\", s5.getVotingView());\n\n        s1.enableLocalSessions(localSessionsEnabled);\n        s2.enableLocalSessions(localSessionsEnabled);\n        s3.enableLocalSessions(localSessionsEnabled);\n        s4.enableLocalSessions(localSessionsEnabled);\n        s5.enableLocalSessions(localSessionsEnabled);\n        s1.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s2.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s3.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s4.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s5.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n\n        LOG.info(\"start QuorumPeer 1\");\n        s1.start();\n        LOG.info(\"start QuorumPeer 2\");\n        s2.start();\n        LOG.info(\"start QuorumPeer 3\");\n        s3.start();\n        LOG.info(\"start QuorumPeer 4\");\n        s4.start();\n        LOG.info(\"start QuorumPeer 5\");\n        s5.start();\n        LOG.info(\"started QuorumPeer 5\");\n\n        LOG.info(\"Checking ports {}\", hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"waiting for server up\", ClientBase.waitForServerUp(hp, CONNECTION_TIMEOUT));\n            LOG.info(\"{} is accepting client connections\", hp);\n        }\n\n        \r\n        JMXEnv.dump();\n        \r\n        Set<String> ensureNames = new LinkedHashSet<String>();\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"InMemoryDataTree\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 5; j++) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n            }\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n        }\n        JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n    }\n","date":"2019-10-10 20:37:45","endLine":233,"groupId":"3257","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"startServers","params":"(booleanwithObservers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b9/1aa19e915d0311fa9855d3ed1ebe4ccfcd15f2.src","preCode":"    void startServers(boolean withObservers) throws Exception {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n        Map<Long, QuorumServer> peers = new HashMap<Long, QuorumServer>();\n        peers.put(Long.valueOf(1), new QuorumServer(1, new InetSocketAddress(LOCALADDR, port1), new InetSocketAddress(LOCALADDR, portLE1), new InetSocketAddress(LOCALADDR, portClient1), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(2), new QuorumServer(2, new InetSocketAddress(LOCALADDR, port2), new InetSocketAddress(LOCALADDR, portLE2), new InetSocketAddress(LOCALADDR, portClient2), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(3), new QuorumServer(3, new InetSocketAddress(LOCALADDR, port3), new InetSocketAddress(LOCALADDR, portLE3), new InetSocketAddress(LOCALADDR, portClient3), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(4), new QuorumServer(4, new InetSocketAddress(LOCALADDR, port4), new InetSocketAddress(LOCALADDR, portLE4), new InetSocketAddress(LOCALADDR, portClient4), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(5), new QuorumServer(5, new InetSocketAddress(LOCALADDR, port5), new InetSocketAddress(LOCALADDR, portLE5), new InetSocketAddress(LOCALADDR, portClient5), LearnerType.PARTICIPANT));\n\n        if (withObservers) {\n            peers.get(Long.valueOf(4)).type = LearnerType.OBSERVER;\n            peers.get(Long.valueOf(5)).type = LearnerType.OBSERVER;\n        }\n\n        LOG.info(\"creating QuorumPeer 1 port \" + portClient1);\n        s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient1, s1.getClientPort());\n        LOG.info(\"creating QuorumPeer 2 port \" + portClient2);\n        s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient2, s2.getClientPort());\n        LOG.info(\"creating QuorumPeer 3 port \" + portClient3);\n        s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient3, s3.getClientPort());\n        LOG.info(\"creating QuorumPeer 4 port \" + portClient4);\n        s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient4, s4.getClientPort());\n        LOG.info(\"creating QuorumPeer 5 port \" + portClient5);\n        s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient5, s5.getClientPort());\n\n        if (withObservers) {\n            s4.setLearnerType(LearnerType.OBSERVER);\n            s5.setLearnerType(LearnerType.OBSERVER);\n        }\n\n        LOG.info(\"QuorumPeer 1 voting view: \" + s1.getVotingView());\n        LOG.info(\"QuorumPeer 2 voting view: \" + s2.getVotingView());\n        LOG.info(\"QuorumPeer 3 voting view: \" + s3.getVotingView());\n        LOG.info(\"QuorumPeer 4 voting view: \" + s4.getVotingView());\n        LOG.info(\"QuorumPeer 5 voting view: \" + s5.getVotingView());\n\n        s1.enableLocalSessions(localSessionsEnabled);\n        s2.enableLocalSessions(localSessionsEnabled);\n        s3.enableLocalSessions(localSessionsEnabled);\n        s4.enableLocalSessions(localSessionsEnabled);\n        s5.enableLocalSessions(localSessionsEnabled);\n        s1.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s2.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s3.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s4.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s5.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n\n        LOG.info(\"start QuorumPeer 1\");\n        s1.start();\n        LOG.info(\"start QuorumPeer 2\");\n        s2.start();\n        LOG.info(\"start QuorumPeer 3\");\n        s3.start();\n        LOG.info(\"start QuorumPeer 4\");\n        s4.start();\n        LOG.info(\"start QuorumPeer 5\");\n        s5.start();\n        LOG.info(\"started QuorumPeer 5\");\n\n        LOG.info(\"Checking ports \" + hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"waiting for server up\", ClientBase.waitForServerUp(hp, CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is accepting client connections\");\n        }\n\n        \r\n        JMXEnv.dump();\n        \r\n        Set<String> ensureNames = new LinkedHashSet<String>();\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"InMemoryDataTree\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 5; j++) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n            }\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n        }\n        JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2019-10-10 20:37:45","commitOrder":4,"curCode":"    public void setupServer(int i) throws IOException {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n\n        if (peers == null) {\n            peers = new HashMap<Long, QuorumServer>();\n\n            peers.put(Long.valueOf(1), new QuorumServer(1, new InetSocketAddress(LOCALADDR, port1), new InetSocketAddress(LOCALADDR, portLE1), new InetSocketAddress(LOCALADDR, portClient1), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(2), new QuorumServer(2, new InetSocketAddress(LOCALADDR, port2), new InetSocketAddress(LOCALADDR, portLE2), new InetSocketAddress(LOCALADDR, portClient2), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(3), new QuorumServer(3, new InetSocketAddress(LOCALADDR, port3), new InetSocketAddress(LOCALADDR, portLE3), new InetSocketAddress(LOCALADDR, portClient3), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(4), new QuorumServer(4, new InetSocketAddress(LOCALADDR, port4), new InetSocketAddress(LOCALADDR, portLE4), new InetSocketAddress(LOCALADDR, portClient4), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(5), new QuorumServer(5, new InetSocketAddress(LOCALADDR, port5), new InetSocketAddress(LOCALADDR, portLE5), new InetSocketAddress(LOCALADDR, portClient5), LearnerType.PARTICIPANT));\n        }\n\n        switch (i) {\n        case 1:\n            LOG.info(\"creating QuorumPeer 1 port {}\", portClient1);\n            s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient1, s1.getClientPort());\n            break;\n        case 2:\n            LOG.info(\"creating QuorumPeer 2 port {}\", portClient2);\n            s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient2, s2.getClientPort());\n            break;\n        case 3:\n            LOG.info(\"creating QuorumPeer 3 port {}\", portClient3);\n            s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient3, s3.getClientPort());\n            break;\n        case 4:\n            LOG.info(\"creating QuorumPeer 4 port {}\", portClient4);\n            s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient4, s4.getClientPort());\n            break;\n        case 5:\n            LOG.info(\"creating QuorumPeer 5 port {}\", portClient5);\n            s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient5, s5.getClientPort());\n        }\n    }\n","date":"2019-10-10 20:37:45","endLine":331,"groupId":"597","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setupServer","params":"(inti)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b9/1aa19e915d0311fa9855d3ed1ebe4ccfcd15f2.src","preCode":"    public void setupServer(int i) throws IOException {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n\n        if (peers == null) {\n            peers = new HashMap<Long, QuorumServer>();\n\n            peers.put(Long.valueOf(1), new QuorumServer(1, new InetSocketAddress(LOCALADDR, port1), new InetSocketAddress(LOCALADDR, portLE1), new InetSocketAddress(LOCALADDR, portClient1), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(2), new QuorumServer(2, new InetSocketAddress(LOCALADDR, port2), new InetSocketAddress(LOCALADDR, portLE2), new InetSocketAddress(LOCALADDR, portClient2), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(3), new QuorumServer(3, new InetSocketAddress(LOCALADDR, port3), new InetSocketAddress(LOCALADDR, portLE3), new InetSocketAddress(LOCALADDR, portClient3), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(4), new QuorumServer(4, new InetSocketAddress(LOCALADDR, port4), new InetSocketAddress(LOCALADDR, portLE4), new InetSocketAddress(LOCALADDR, portClient4), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(5), new QuorumServer(5, new InetSocketAddress(LOCALADDR, port5), new InetSocketAddress(LOCALADDR, portLE5), new InetSocketAddress(LOCALADDR, portClient5), LearnerType.PARTICIPANT));\n        }\n\n        switch (i) {\n        case 1:\n            LOG.info(\"creating QuorumPeer 1 port \" + portClient1);\n            s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient1, s1.getClientPort());\n            break;\n        case 2:\n            LOG.info(\"creating QuorumPeer 2 port \" + portClient2);\n            s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient2, s2.getClientPort());\n            break;\n        case 3:\n            LOG.info(\"creating QuorumPeer 3 port \" + portClient3);\n            s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient3, s3.getClientPort());\n            break;\n        case 4:\n            LOG.info(\"creating QuorumPeer 4 port \" + portClient4);\n            s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient4, s4.getClientPort());\n            break;\n        case 5:\n            LOG.info(\"creating QuorumPeer 5 port \" + portClient5);\n            s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient5, s5.getClientPort());\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":5,"curCode":"    void startServers(boolean withObservers) throws Exception {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n        Map<Long, QuorumServer> peers = new HashMap<Long, QuorumServer>();\n        peers.put(Long.valueOf(1), new QuorumServer(1, new InetSocketAddress(LOCALADDR, port1), new InetSocketAddress(LOCALADDR, portLE1), new InetSocketAddress(LOCALADDR, portClient1), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(2), new QuorumServer(2, new InetSocketAddress(LOCALADDR, port2), new InetSocketAddress(LOCALADDR, portLE2), new InetSocketAddress(LOCALADDR, portClient2), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(3), new QuorumServer(3, new InetSocketAddress(LOCALADDR, port3), new InetSocketAddress(LOCALADDR, portLE3), new InetSocketAddress(LOCALADDR, portClient3), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(4), new QuorumServer(4, new InetSocketAddress(LOCALADDR, port4), new InetSocketAddress(LOCALADDR, portLE4), new InetSocketAddress(LOCALADDR, portClient4), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(5), new QuorumServer(5, new InetSocketAddress(LOCALADDR, port5), new InetSocketAddress(LOCALADDR, portLE5), new InetSocketAddress(LOCALADDR, portClient5), LearnerType.PARTICIPANT));\n\n        if (withObservers) {\n            peers.get(Long.valueOf(4)).type = LearnerType.OBSERVER;\n            peers.get(Long.valueOf(5)).type = LearnerType.OBSERVER;\n        }\n\n        LOG.info(\"creating QuorumPeer 1 port {}\", portClient1);\n        s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient1, s1.getClientPort());\n        LOG.info(\"creating QuorumPeer 2 port {}\", portClient2);\n        s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient2, s2.getClientPort());\n        LOG.info(\"creating QuorumPeer 3 port {}\", portClient3);\n        s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient3, s3.getClientPort());\n        LOG.info(\"creating QuorumPeer 4 port {}\", portClient4);\n        s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient4, s4.getClientPort());\n        LOG.info(\"creating QuorumPeer 5 port {}\", portClient5);\n        s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient5, s5.getClientPort());\n\n        if (withObservers) {\n            s4.setLearnerType(LearnerType.OBSERVER);\n            s5.setLearnerType(LearnerType.OBSERVER);\n        }\n\n        LOG.info(\"QuorumPeer 1 voting view: {}\", s1.getVotingView());\n        LOG.info(\"QuorumPeer 2 voting view: {}\", s2.getVotingView());\n        LOG.info(\"QuorumPeer 3 voting view: {}\", s3.getVotingView());\n        LOG.info(\"QuorumPeer 4 voting view: {}\", s4.getVotingView());\n        LOG.info(\"QuorumPeer 5 voting view: {}\", s5.getVotingView());\n\n        s1.enableLocalSessions(localSessionsEnabled);\n        s2.enableLocalSessions(localSessionsEnabled);\n        s3.enableLocalSessions(localSessionsEnabled);\n        s4.enableLocalSessions(localSessionsEnabled);\n        s5.enableLocalSessions(localSessionsEnabled);\n        s1.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s2.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s3.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s4.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s5.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n\n        LOG.info(\"start QuorumPeer 1\");\n        s1.start();\n        LOG.info(\"start QuorumPeer 2\");\n        s2.start();\n        LOG.info(\"start QuorumPeer 3\");\n        s3.start();\n        LOG.info(\"start QuorumPeer 4\");\n        s4.start();\n        LOG.info(\"start QuorumPeer 5\");\n        s5.start();\n        LOG.info(\"started QuorumPeer 5\");\n\n        LOG.info(\"Checking ports {}\", hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(ClientBase.waitForServerUp(hp, CONNECTION_TIMEOUT), \"waiting for server up\");\n            LOG.info(\"{} is accepting client connections\", hp);\n        }\n\n        \r\n        JMXEnv.dump();\n        \r\n        Set<String> ensureNames = new LinkedHashSet<String>();\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"InMemoryDataTree\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 5; j++) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n            }\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n        }\n        JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n    }\n","date":"2020-08-04 21:01:52","endLine":230,"groupId":"3257","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"startServers","params":"(booleanwithObservers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/02/e5e0a034ceddf6d71ff59dfb7ee0ea3e5edfac.src","preCode":"    void startServers(boolean withObservers) throws Exception {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n        Map<Long, QuorumServer> peers = new HashMap<Long, QuorumServer>();\n        peers.put(Long.valueOf(1), new QuorumServer(1, new InetSocketAddress(LOCALADDR, port1), new InetSocketAddress(LOCALADDR, portLE1), new InetSocketAddress(LOCALADDR, portClient1), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(2), new QuorumServer(2, new InetSocketAddress(LOCALADDR, port2), new InetSocketAddress(LOCALADDR, portLE2), new InetSocketAddress(LOCALADDR, portClient2), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(3), new QuorumServer(3, new InetSocketAddress(LOCALADDR, port3), new InetSocketAddress(LOCALADDR, portLE3), new InetSocketAddress(LOCALADDR, portClient3), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(4), new QuorumServer(4, new InetSocketAddress(LOCALADDR, port4), new InetSocketAddress(LOCALADDR, portLE4), new InetSocketAddress(LOCALADDR, portClient4), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(5), new QuorumServer(5, new InetSocketAddress(LOCALADDR, port5), new InetSocketAddress(LOCALADDR, portLE5), new InetSocketAddress(LOCALADDR, portClient5), LearnerType.PARTICIPANT));\n\n        if (withObservers) {\n            peers.get(Long.valueOf(4)).type = LearnerType.OBSERVER;\n            peers.get(Long.valueOf(5)).type = LearnerType.OBSERVER;\n        }\n\n        LOG.info(\"creating QuorumPeer 1 port {}\", portClient1);\n        s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient1, s1.getClientPort());\n        LOG.info(\"creating QuorumPeer 2 port {}\", portClient2);\n        s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient2, s2.getClientPort());\n        LOG.info(\"creating QuorumPeer 3 port {}\", portClient3);\n        s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient3, s3.getClientPort());\n        LOG.info(\"creating QuorumPeer 4 port {}\", portClient4);\n        s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient4, s4.getClientPort());\n        LOG.info(\"creating QuorumPeer 5 port {}\", portClient5);\n        s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient5, s5.getClientPort());\n\n        if (withObservers) {\n            s4.setLearnerType(LearnerType.OBSERVER);\n            s5.setLearnerType(LearnerType.OBSERVER);\n        }\n\n        LOG.info(\"QuorumPeer 1 voting view: {}\", s1.getVotingView());\n        LOG.info(\"QuorumPeer 2 voting view: {}\", s2.getVotingView());\n        LOG.info(\"QuorumPeer 3 voting view: {}\", s3.getVotingView());\n        LOG.info(\"QuorumPeer 4 voting view: {}\", s4.getVotingView());\n        LOG.info(\"QuorumPeer 5 voting view: {}\", s5.getVotingView());\n\n        s1.enableLocalSessions(localSessionsEnabled);\n        s2.enableLocalSessions(localSessionsEnabled);\n        s3.enableLocalSessions(localSessionsEnabled);\n        s4.enableLocalSessions(localSessionsEnabled);\n        s5.enableLocalSessions(localSessionsEnabled);\n        s1.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s2.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s3.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s4.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s5.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n\n        LOG.info(\"start QuorumPeer 1\");\n        s1.start();\n        LOG.info(\"start QuorumPeer 2\");\n        s2.start();\n        LOG.info(\"start QuorumPeer 3\");\n        s3.start();\n        LOG.info(\"start QuorumPeer 4\");\n        s4.start();\n        LOG.info(\"start QuorumPeer 5\");\n        s5.start();\n        LOG.info(\"started QuorumPeer 5\");\n\n        LOG.info(\"Checking ports {}\", hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"waiting for server up\", ClientBase.waitForServerUp(hp, CONNECTION_TIMEOUT));\n            LOG.info(\"{} is accepting client connections\", hp);\n        }\n\n        \r\n        JMXEnv.dump();\n        \r\n        Set<String> ensureNames = new LinkedHashSet<String>();\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"InMemoryDataTree\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 5; j++) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n            }\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n        }\n        JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2019-10-10 20:37:45","commitOrder":5,"curCode":"    public void setupServer(int i) throws IOException {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n\n        if (peers == null) {\n            peers = new HashMap<Long, QuorumServer>();\n\n            peers.put(Long.valueOf(1), new QuorumServer(1, new InetSocketAddress(LOCALADDR, port1), new InetSocketAddress(LOCALADDR, portLE1), new InetSocketAddress(LOCALADDR, portClient1), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(2), new QuorumServer(2, new InetSocketAddress(LOCALADDR, port2), new InetSocketAddress(LOCALADDR, portLE2), new InetSocketAddress(LOCALADDR, portClient2), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(3), new QuorumServer(3, new InetSocketAddress(LOCALADDR, port3), new InetSocketAddress(LOCALADDR, portLE3), new InetSocketAddress(LOCALADDR, portClient3), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(4), new QuorumServer(4, new InetSocketAddress(LOCALADDR, port4), new InetSocketAddress(LOCALADDR, portLE4), new InetSocketAddress(LOCALADDR, portClient4), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(5), new QuorumServer(5, new InetSocketAddress(LOCALADDR, port5), new InetSocketAddress(LOCALADDR, portLE5), new InetSocketAddress(LOCALADDR, portClient5), LearnerType.PARTICIPANT));\n        }\n\n        switch (i) {\n        case 1:\n            LOG.info(\"creating QuorumPeer 1 port {}\", portClient1);\n            s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient1, s1.getClientPort());\n            break;\n        case 2:\n            LOG.info(\"creating QuorumPeer 2 port {}\", portClient2);\n            s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient2, s2.getClientPort());\n            break;\n        case 3:\n            LOG.info(\"creating QuorumPeer 3 port {}\", portClient3);\n            s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient3, s3.getClientPort());\n            break;\n        case 4:\n            LOG.info(\"creating QuorumPeer 4 port {}\", portClient4);\n            s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient4, s4.getClientPort());\n            break;\n        case 5:\n            LOG.info(\"creating QuorumPeer 5 port {}\", portClient5);\n            s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient5, s5.getClientPort());\n        }\n    }\n","date":"2019-10-10 20:37:45","endLine":331,"groupId":"597","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setupServer","params":"(inti)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b9/1aa19e915d0311fa9855d3ed1ebe4ccfcd15f2.src","preCode":"    public void setupServer(int i) throws IOException {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n\n        if (peers == null) {\n            peers = new HashMap<Long, QuorumServer>();\n\n            peers.put(Long.valueOf(1), new QuorumServer(1, new InetSocketAddress(LOCALADDR, port1), new InetSocketAddress(LOCALADDR, portLE1), new InetSocketAddress(LOCALADDR, portClient1), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(2), new QuorumServer(2, new InetSocketAddress(LOCALADDR, port2), new InetSocketAddress(LOCALADDR, portLE2), new InetSocketAddress(LOCALADDR, portClient2), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(3), new QuorumServer(3, new InetSocketAddress(LOCALADDR, port3), new InetSocketAddress(LOCALADDR, portLE3), new InetSocketAddress(LOCALADDR, portClient3), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(4), new QuorumServer(4, new InetSocketAddress(LOCALADDR, port4), new InetSocketAddress(LOCALADDR, portLE4), new InetSocketAddress(LOCALADDR, portClient4), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(5), new QuorumServer(5, new InetSocketAddress(LOCALADDR, port5), new InetSocketAddress(LOCALADDR, portLE5), new InetSocketAddress(LOCALADDR, portClient5), LearnerType.PARTICIPANT));\n        }\n\n        switch (i) {\n        case 1:\n            LOG.info(\"creating QuorumPeer 1 port {}\", portClient1);\n            s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient1, s1.getClientPort());\n            break;\n        case 2:\n            LOG.info(\"creating QuorumPeer 2 port {}\", portClient2);\n            s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient2, s2.getClientPort());\n            break;\n        case 3:\n            LOG.info(\"creating QuorumPeer 3 port {}\", portClient3);\n            s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient3, s3.getClientPort());\n            break;\n        case 4:\n            LOG.info(\"creating QuorumPeer 4 port {}\", portClient4);\n            s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient4, s4.getClientPort());\n            break;\n        case 5:\n            LOG.info(\"creating QuorumPeer 5 port {}\", portClient5);\n            s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient5, s5.getClientPort());\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"N"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2021-03-02 12:51:05","commitOrder":6,"curCode":"    void startServers(boolean withObservers, boolean withOracle) throws Exception {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n        Map<Long, QuorumServer> peers = new HashMap<Long, QuorumServer>();\n        peers.put(Long.valueOf(1), new QuorumServer(1, new InetSocketAddress(LOCALADDR, port1), new InetSocketAddress(LOCALADDR, portLE1), new InetSocketAddress(LOCALADDR, portClient1), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(2), new QuorumServer(2, new InetSocketAddress(LOCALADDR, port2), new InetSocketAddress(LOCALADDR, portLE2), new InetSocketAddress(LOCALADDR, portClient2), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(3), new QuorumServer(3, new InetSocketAddress(LOCALADDR, port3), new InetSocketAddress(LOCALADDR, portLE3), new InetSocketAddress(LOCALADDR, portClient3), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(4), new QuorumServer(4, new InetSocketAddress(LOCALADDR, port4), new InetSocketAddress(LOCALADDR, portLE4), new InetSocketAddress(LOCALADDR, portClient4), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(5), new QuorumServer(5, new InetSocketAddress(LOCALADDR, port5), new InetSocketAddress(LOCALADDR, portLE5), new InetSocketAddress(LOCALADDR, portClient5), LearnerType.PARTICIPANT));\n\n        if (withObservers) {\n            peers.get(Long.valueOf(4)).type = LearnerType.OBSERVER;\n            peers.get(Long.valueOf(5)).type = LearnerType.OBSERVER;\n        }\n\n        if (!withOracle) {\n            LOG.info(\"creating QuorumPeer 1 port {}\", portClient1);\n            s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient1, s1.getClientPort());\n            LOG.info(\"creating QuorumPeer 2 port {}\", portClient2);\n            s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient2, s2.getClientPort());\n            LOG.info(\"creating QuorumPeer 3 port {}\", portClient3);\n            s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient3, s3.getClientPort());\n            LOG.info(\"creating QuorumPeer 4 port {}\", portClient4);\n            s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient4, s4.getClientPort());\n            LOG.info(\"creating QuorumPeer 5 port {}\", portClient5);\n            s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient5, s5.getClientPort());\n        } else {\n            LOG.info(\"creating QuorumPeer 1 port {}\", portClient1);\n            s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit, oraclePath_0 + mastership);\n            assertEquals(portClient1, s1.getClientPort());\n            LOG.info(\"creating QuorumPeer 2 port {}\", portClient2);\n            s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit, oraclePath_1 + mastership);\n            assertEquals(portClient2, s2.getClientPort());\n            LOG.info(\"creating QuorumPeer 3 port {}\", portClient3);\n            s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit, oraclePath_2 + mastership);\n            assertEquals(portClient3, s3.getClientPort());\n            LOG.info(\"creating QuorumPeer 4 port {}\", portClient4);\n            s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit, oraclePath_3 + mastership);\n            assertEquals(portClient4, s4.getClientPort());\n            LOG.info(\"creating QuorumPeer 5 port {}\", portClient5);\n            s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit, oraclePath_4 + mastership);\n            assertEquals(portClient5, s5.getClientPort());\n        }\n\n        if (withObservers) {\n            s4.setLearnerType(LearnerType.OBSERVER);\n            s5.setLearnerType(LearnerType.OBSERVER);\n        }\n\n        LOG.info(\"QuorumPeer 1 voting view: {}\", s1.getVotingView());\n        LOG.info(\"QuorumPeer 2 voting view: {}\", s2.getVotingView());\n        LOG.info(\"QuorumPeer 3 voting view: {}\", s3.getVotingView());\n        LOG.info(\"QuorumPeer 4 voting view: {}\", s4.getVotingView());\n        LOG.info(\"QuorumPeer 5 voting view: {}\", s5.getVotingView());\n\n        s1.enableLocalSessions(localSessionsEnabled);\n        s2.enableLocalSessions(localSessionsEnabled);\n        s3.enableLocalSessions(localSessionsEnabled);\n        s4.enableLocalSessions(localSessionsEnabled);\n        s5.enableLocalSessions(localSessionsEnabled);\n        s1.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s2.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s3.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s4.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s5.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n\n        LOG.info(\"start QuorumPeer 1\");\n        s1.start();\n        LOG.info(\"start QuorumPeer 2\");\n        s2.start();\n        LOG.info(\"start QuorumPeer 3\");\n        s3.start();\n        LOG.info(\"start QuorumPeer 4\");\n        s4.start();\n        LOG.info(\"start QuorumPeer 5\");\n        s5.start();\n        LOG.info(\"started QuorumPeer 5\");\n\n        LOG.info(\"Checking ports {}\", hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(ClientBase.waitForServerUp(hp, CONNECTION_TIMEOUT), \"waiting for server up\");\n            LOG.info(\"{} is accepting client connections\", hp);\n        }\n\n        \r\n        JMXEnv.dump();\n        \r\n        Set<String> ensureNames = new LinkedHashSet<String>();\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"InMemoryDataTree\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 5; j++) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n            }\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n        }\n        JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n    }\n","date":"2021-03-02 12:51:05","endLine":290,"groupId":"10508","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"startServers","params":"(booleanwithObservers@booleanwithOracle)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c2/396a6403dbfd9ac0c04101bdc935e87129d027.src","preCode":"    void startServers(boolean withObservers) throws Exception {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n        Map<Long, QuorumServer> peers = new HashMap<Long, QuorumServer>();\n        peers.put(Long.valueOf(1), new QuorumServer(1, new InetSocketAddress(LOCALADDR, port1), new InetSocketAddress(LOCALADDR, portLE1), new InetSocketAddress(LOCALADDR, portClient1), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(2), new QuorumServer(2, new InetSocketAddress(LOCALADDR, port2), new InetSocketAddress(LOCALADDR, portLE2), new InetSocketAddress(LOCALADDR, portClient2), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(3), new QuorumServer(3, new InetSocketAddress(LOCALADDR, port3), new InetSocketAddress(LOCALADDR, portLE3), new InetSocketAddress(LOCALADDR, portClient3), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(4), new QuorumServer(4, new InetSocketAddress(LOCALADDR, port4), new InetSocketAddress(LOCALADDR, portLE4), new InetSocketAddress(LOCALADDR, portClient4), LearnerType.PARTICIPANT));\n        peers.put(Long.valueOf(5), new QuorumServer(5, new InetSocketAddress(LOCALADDR, port5), new InetSocketAddress(LOCALADDR, portLE5), new InetSocketAddress(LOCALADDR, portClient5), LearnerType.PARTICIPANT));\n\n        if (withObservers) {\n            peers.get(Long.valueOf(4)).type = LearnerType.OBSERVER;\n            peers.get(Long.valueOf(5)).type = LearnerType.OBSERVER;\n        }\n\n        LOG.info(\"creating QuorumPeer 1 port {}\", portClient1);\n        s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient1, s1.getClientPort());\n        LOG.info(\"creating QuorumPeer 2 port {}\", portClient2);\n        s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient2, s2.getClientPort());\n        LOG.info(\"creating QuorumPeer 3 port {}\", portClient3);\n        s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient3, s3.getClientPort());\n        LOG.info(\"creating QuorumPeer 4 port {}\", portClient4);\n        s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient4, s4.getClientPort());\n        LOG.info(\"creating QuorumPeer 5 port {}\", portClient5);\n        s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n        assertEquals(portClient5, s5.getClientPort());\n\n        if (withObservers) {\n            s4.setLearnerType(LearnerType.OBSERVER);\n            s5.setLearnerType(LearnerType.OBSERVER);\n        }\n\n        LOG.info(\"QuorumPeer 1 voting view: {}\", s1.getVotingView());\n        LOG.info(\"QuorumPeer 2 voting view: {}\", s2.getVotingView());\n        LOG.info(\"QuorumPeer 3 voting view: {}\", s3.getVotingView());\n        LOG.info(\"QuorumPeer 4 voting view: {}\", s4.getVotingView());\n        LOG.info(\"QuorumPeer 5 voting view: {}\", s5.getVotingView());\n\n        s1.enableLocalSessions(localSessionsEnabled);\n        s2.enableLocalSessions(localSessionsEnabled);\n        s3.enableLocalSessions(localSessionsEnabled);\n        s4.enableLocalSessions(localSessionsEnabled);\n        s5.enableLocalSessions(localSessionsEnabled);\n        s1.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s2.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s3.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s4.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n        s5.enableLocalSessionsUpgrading(localSessionsUpgradingEnabled);\n\n        LOG.info(\"start QuorumPeer 1\");\n        s1.start();\n        LOG.info(\"start QuorumPeer 2\");\n        s2.start();\n        LOG.info(\"start QuorumPeer 3\");\n        s3.start();\n        LOG.info(\"start QuorumPeer 4\");\n        s4.start();\n        LOG.info(\"start QuorumPeer 5\");\n        s5.start();\n        LOG.info(\"started QuorumPeer 5\");\n\n        LOG.info(\"Checking ports {}\", hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(ClientBase.waitForServerUp(hp, CONNECTION_TIMEOUT), \"waiting for server up\");\n            LOG.info(\"{} is accepting client connections\", hp);\n        }\n\n        \r\n        JMXEnv.dump();\n        \r\n        Set<String> ensureNames = new LinkedHashSet<String>();\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"InMemoryDataTree\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n        }\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 5; j++) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n            }\n        }\n        for (int i = 1; i <= 5; i++) {\n            ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n        }\n        JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"},{"authorDate":"2019-10-10 20:37:45","commitOrder":6,"curCode":"    public void setupServer(int i) throws IOException {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n\n        if (peers == null) {\n            peers = new HashMap<Long, QuorumServer>();\n\n            peers.put(Long.valueOf(1), new QuorumServer(1, new InetSocketAddress(LOCALADDR, port1), new InetSocketAddress(LOCALADDR, portLE1), new InetSocketAddress(LOCALADDR, portClient1), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(2), new QuorumServer(2, new InetSocketAddress(LOCALADDR, port2), new InetSocketAddress(LOCALADDR, portLE2), new InetSocketAddress(LOCALADDR, portClient2), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(3), new QuorumServer(3, new InetSocketAddress(LOCALADDR, port3), new InetSocketAddress(LOCALADDR, portLE3), new InetSocketAddress(LOCALADDR, portClient3), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(4), new QuorumServer(4, new InetSocketAddress(LOCALADDR, port4), new InetSocketAddress(LOCALADDR, portLE4), new InetSocketAddress(LOCALADDR, portClient4), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(5), new QuorumServer(5, new InetSocketAddress(LOCALADDR, port5), new InetSocketAddress(LOCALADDR, portLE5), new InetSocketAddress(LOCALADDR, portClient5), LearnerType.PARTICIPANT));\n        }\n\n        switch (i) {\n        case 1:\n            LOG.info(\"creating QuorumPeer 1 port {}\", portClient1);\n            s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient1, s1.getClientPort());\n            break;\n        case 2:\n            LOG.info(\"creating QuorumPeer 2 port {}\", portClient2);\n            s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient2, s2.getClientPort());\n            break;\n        case 3:\n            LOG.info(\"creating QuorumPeer 3 port {}\", portClient3);\n            s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient3, s3.getClientPort());\n            break;\n        case 4:\n            LOG.info(\"creating QuorumPeer 4 port {}\", portClient4);\n            s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient4, s4.getClientPort());\n            break;\n        case 5:\n            LOG.info(\"creating QuorumPeer 5 port {}\", portClient5);\n            s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient5, s5.getClientPort());\n        }\n    }\n","date":"2019-10-10 20:37:45","endLine":331,"groupId":"10508","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setupServer","params":"(inti)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b9/1aa19e915d0311fa9855d3ed1ebe4ccfcd15f2.src","preCode":"    public void setupServer(int i) throws IOException {\n        int tickTime = 2000;\n        int initLimit = 3;\n        int syncLimit = 3;\n        int connectToLearnerMasterLimit = 3;\n\n        if (peers == null) {\n            peers = new HashMap<Long, QuorumServer>();\n\n            peers.put(Long.valueOf(1), new QuorumServer(1, new InetSocketAddress(LOCALADDR, port1), new InetSocketAddress(LOCALADDR, portLE1), new InetSocketAddress(LOCALADDR, portClient1), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(2), new QuorumServer(2, new InetSocketAddress(LOCALADDR, port2), new InetSocketAddress(LOCALADDR, portLE2), new InetSocketAddress(LOCALADDR, portClient2), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(3), new QuorumServer(3, new InetSocketAddress(LOCALADDR, port3), new InetSocketAddress(LOCALADDR, portLE3), new InetSocketAddress(LOCALADDR, portClient3), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(4), new QuorumServer(4, new InetSocketAddress(LOCALADDR, port4), new InetSocketAddress(LOCALADDR, portLE4), new InetSocketAddress(LOCALADDR, portClient4), LearnerType.PARTICIPANT));\n            peers.put(Long.valueOf(5), new QuorumServer(5, new InetSocketAddress(LOCALADDR, port5), new InetSocketAddress(LOCALADDR, portLE5), new InetSocketAddress(LOCALADDR, portClient5), LearnerType.PARTICIPANT));\n        }\n\n        switch (i) {\n        case 1:\n            LOG.info(\"creating QuorumPeer 1 port {}\", portClient1);\n            s1 = new QuorumPeer(peers, s1dir, s1dir, portClient1, 3, 1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient1, s1.getClientPort());\n            break;\n        case 2:\n            LOG.info(\"creating QuorumPeer 2 port {}\", portClient2);\n            s2 = new QuorumPeer(peers, s2dir, s2dir, portClient2, 3, 2, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient2, s2.getClientPort());\n            break;\n        case 3:\n            LOG.info(\"creating QuorumPeer 3 port {}\", portClient3);\n            s3 = new QuorumPeer(peers, s3dir, s3dir, portClient3, 3, 3, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient3, s3.getClientPort());\n            break;\n        case 4:\n            LOG.info(\"creating QuorumPeer 4 port {}\", portClient4);\n            s4 = new QuorumPeer(peers, s4dir, s4dir, portClient4, 3, 4, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient4, s4.getClientPort());\n            break;\n        case 5:\n            LOG.info(\"creating QuorumPeer 5 port {}\", portClient5);\n            s5 = new QuorumPeer(peers, s5dir, s5dir, portClient5, 3, 5, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);\n            assertEquals(portClient5, s5.getClientPort());\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"N"}],"commitId":"b4f9aab099880ba8ef08eaff697debe6cdeae057","commitMessage":"@@@ZOOKEEPER-3922: The introduction of the oracle.  a failure detector.\n\nThe introduction of the oracle makes ZooKeeper fault-tolerant in two-node systems.\n\nThe major changes are:\n1. QuorumPeerConfig.java\n- The changes allow users to enable the oracle and provide essential information.\n- Create QuorumOracleMaj if configured.\n2. FastLeaderElection.java\n- A re-check mechanism checks the current received votes once the timeout expires.\n- Add another case when receiving a LEADING notification for a node to locate the existed leader in two-node systems.\n3. Leader.java\n- Add a re-validation of outstanding proposals mechanism after the only follower goes away\n- Add another handling case when the quorum is not maintainable. It queries the Oracle for maintaining the quorum along.\n4. QuorumVerifier.java\n- Add methods for QuorumOracleMaj.java\n5. QuorumOracleMaj.java (This is a new file.)\n- A sub-class of QuorumMaj\n- It default reads a file that contains a binary value to behave as an Oracle.\n\nAuthor: Ching-Chan Lee <leechingchankyo@gmail.com>\n\nReviewers: Benjamin Reed <breed@apache.org>.  Michael Han <hanm@apache.org>\n\nCloses #1444 from chingchan1996/ZOOKEEPER-3922\n","date":"2021-03-02 12:51:05","modifiedFileCount":"18","status":"M","submitter":"Ching-Chan Lee"}]
