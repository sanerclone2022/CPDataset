[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-16 22:22:07","commitOrder":2,"curCode":"    private X509Certificate createSelfSignedCertifcate(KeyPair keyPair) throws Exception {\n        X500NameBuilder nameBuilder = new X500NameBuilder(BCStyle.INSTANCE);\n        nameBuilder.addRDN(BCStyle.CN, HOSTNAME);\n        BigInteger serialNumber = new BigInteger(128, new Random());\n\n        X509v3CertificateBuilder certificateBuilder =\n                new JcaX509v3CertificateBuilder(nameBuilder.build(), serialNumber, certStartTime, certEndTime,\n                        nameBuilder.build(), keyPair.getPublic())\n                .addExtension(Extension.basicConstraints, true, new BasicConstraints(0))\n                .addExtension(Extension.keyUsage, true,\n                        new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n\n        return new JcaX509CertificateConverter().getCertificate(certificateBuilder.build(contentSigner));\n    }\n","date":"2018-10-16 22:22:07","endLine":288,"groupId":"1220","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createSelfSignedCertifcate","params":"(KeyPairkeyPair)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b0/88f47b16cdafac4d3b3ba2913c0996b140fbcd.src","preCode":"    private X509Certificate createSelfSignedCertifcate(KeyPair keyPair) throws Exception {\n        X500NameBuilder nameBuilder = new X500NameBuilder(BCStyle.INSTANCE);\n        nameBuilder.addRDN(BCStyle.CN, HOSTNAME);\n        BigInteger serialNumber = new BigInteger(128, new Random());\n\n        X509v3CertificateBuilder certificateBuilder =\n                new JcaX509v3CertificateBuilder(nameBuilder.build(), serialNumber, certStartTime, certEndTime,\n                        nameBuilder.build(), keyPair.getPublic())\n                .addExtension(Extension.basicConstraints, true, new BasicConstraints(0))\n                .addExtension(Extension.keyUsage, true,\n                        new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n\n        return new JcaX509CertificateConverter().getCertificate(certificateBuilder.build(contentSigner));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumSSLTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"NB"},{"authorDate":"2018-10-19 20:39:50","commitOrder":2,"curCode":"    private X509Certificate[] createSelfSignedCertifcateChain(String ipAddress, String hostname) throws Exception {\n        X500NameBuilder nameBuilder = new X500NameBuilder(BCStyle.INSTANCE);\n        nameBuilder.addRDN(BCStyle.CN, \"NOT_LOCALHOST\");\n        Date notBefore = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.setTime(notBefore);\n        cal.add(Calendar.YEAR, 1);\n        Date notAfter = cal.getTime();\n        BigInteger serialNumber = new BigInteger(128, new Random());\n\n        X509v3CertificateBuilder certificateBuilder =\n                new JcaX509v3CertificateBuilder(nameBuilder.build(), serialNumber, notBefore, notAfter, nameBuilder.build(), keyPair.getPublic())\n                        .addExtension(Extension.basicConstraints, true, new BasicConstraints(0))\n                        .addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n\n        List<GeneralName> generalNames = new ArrayList<>();\n        if (ipAddress != null) {\n            generalNames.add(new GeneralName(GeneralName.iPAddress, ipAddress));\n        }\n        if (hostname != null) {\n            generalNames.add(new GeneralName(GeneralName.dNSName, hostname));\n        }\n\n        if (!generalNames.isEmpty()) {\n            certificateBuilder.addExtension(Extension.subjectAlternativeName,  true,  new GeneralNames(generalNames.toArray(new GeneralName[] {})));\n        }\n\n        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(keyPair.getPrivate());\n\n        return new X509Certificate[] { new JcaX509CertificateConverter().getCertificate(certificateBuilder.build(contentSigner)) };\n    }\n","date":"2018-10-19 20:39:50","endLine":143,"groupId":"2043","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createSelfSignedCertifcateChain","params":"(StringipAddress@Stringhostname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/32/f250b41530a4b31845330c3071f9dc0d587bd2.src","preCode":"    private X509Certificate[] createSelfSignedCertifcateChain(String ipAddress, String hostname) throws Exception {\n        X500NameBuilder nameBuilder = new X500NameBuilder(BCStyle.INSTANCE);\n        nameBuilder.addRDN(BCStyle.CN, \"NOT_LOCALHOST\");\n        Date notBefore = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.setTime(notBefore);\n        cal.add(Calendar.YEAR, 1);\n        Date notAfter = cal.getTime();\n        BigInteger serialNumber = new BigInteger(128, new Random());\n\n        X509v3CertificateBuilder certificateBuilder =\n                new JcaX509v3CertificateBuilder(nameBuilder.build(), serialNumber, notBefore, notAfter, nameBuilder.build(), keyPair.getPublic())\n                        .addExtension(Extension.basicConstraints, true, new BasicConstraints(0))\n                        .addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n\n        List<GeneralName> generalNames = new ArrayList<>();\n        if (ipAddress != null) {\n            generalNames.add(new GeneralName(GeneralName.iPAddress, ipAddress));\n        }\n        if (hostname != null) {\n            generalNames.add(new GeneralName(GeneralName.dNSName, hostname));\n        }\n\n        if (!generalNames.isEmpty()) {\n            certificateBuilder.addExtension(Extension.subjectAlternativeName,  true,  new GeneralNames(generalNames.toArray(new GeneralName[] {})));\n        }\n\n        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(keyPair.getPrivate());\n\n        return new X509Certificate[] { new JcaX509CertificateConverter().getCertificate(certificateBuilder.build(contentSigner)) };\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKTrustManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"M","submitter":"Norbert Kalmar"},{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    private X509Certificate createSelfSignedCertifcate(KeyPair keyPair) throws Exception {\n        X500NameBuilder nameBuilder = new X500NameBuilder(BCStyle.INSTANCE);\n        nameBuilder.addRDN(BCStyle.CN, HOSTNAME);\n        BigInteger serialNumber = new BigInteger(128, new Random());\n\n        JcaX509v3CertificateBuilder jcaX509v3CertificateBuilder = new JcaX509v3CertificateBuilder(\n            nameBuilder.build(),\n            serialNumber,\n            certStartTime,\n            certEndTime,\n            nameBuilder.build(),\n            keyPair.getPublic());\n        X509v3CertificateBuilder certificateBuilder = jcaX509v3CertificateBuilder\n            .addExtension(Extension.basicConstraints, true, new BasicConstraints(0))\n            .addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n\n        return new JcaX509CertificateConverter().getCertificate(certificateBuilder.build(contentSigner));\n    }\n","date":"2019-08-17 23:13:15","endLine":291,"groupId":"10153","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createSelfSignedCertifcate","params":"(KeyPairkeyPair)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/dc/d9fcee6e9fa7640f839d54a9fdff896c4a1bb7.src","preCode":"    private X509Certificate createSelfSignedCertifcate(KeyPair keyPair) throws Exception {\n        X500NameBuilder nameBuilder = new X500NameBuilder(BCStyle.INSTANCE);\n        nameBuilder.addRDN(BCStyle.CN, HOSTNAME);\n        BigInteger serialNumber = new BigInteger(128, new Random());\n\n        X509v3CertificateBuilder certificateBuilder =\n                new JcaX509v3CertificateBuilder(nameBuilder.build(), serialNumber, certStartTime, certEndTime,\n                        nameBuilder.build(), keyPair.getPublic())\n                .addExtension(Extension.basicConstraints, true, new BasicConstraints(0))\n                .addExtension(Extension.keyUsage, true,\n                        new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n\n        return new JcaX509CertificateConverter().getCertificate(certificateBuilder.build(contentSigner));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumSSLTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2018-10-19 20:39:50","commitOrder":3,"curCode":"    private X509Certificate[] createSelfSignedCertifcateChain(String ipAddress, String hostname) throws Exception {\n        X500NameBuilder nameBuilder = new X500NameBuilder(BCStyle.INSTANCE);\n        nameBuilder.addRDN(BCStyle.CN, \"NOT_LOCALHOST\");\n        Date notBefore = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.setTime(notBefore);\n        cal.add(Calendar.YEAR, 1);\n        Date notAfter = cal.getTime();\n        BigInteger serialNumber = new BigInteger(128, new Random());\n\n        X509v3CertificateBuilder certificateBuilder =\n                new JcaX509v3CertificateBuilder(nameBuilder.build(), serialNumber, notBefore, notAfter, nameBuilder.build(), keyPair.getPublic())\n                        .addExtension(Extension.basicConstraints, true, new BasicConstraints(0))\n                        .addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n\n        List<GeneralName> generalNames = new ArrayList<>();\n        if (ipAddress != null) {\n            generalNames.add(new GeneralName(GeneralName.iPAddress, ipAddress));\n        }\n        if (hostname != null) {\n            generalNames.add(new GeneralName(GeneralName.dNSName, hostname));\n        }\n\n        if (!generalNames.isEmpty()) {\n            certificateBuilder.addExtension(Extension.subjectAlternativeName,  true,  new GeneralNames(generalNames.toArray(new GeneralName[] {})));\n        }\n\n        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(keyPair.getPrivate());\n\n        return new X509Certificate[] { new JcaX509CertificateConverter().getCertificate(certificateBuilder.build(contentSigner)) };\n    }\n","date":"2018-10-19 20:39:50","endLine":143,"groupId":"10153","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createSelfSignedCertifcateChain","params":"(StringipAddress@Stringhostname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/32/f250b41530a4b31845330c3071f9dc0d587bd2.src","preCode":"    private X509Certificate[] createSelfSignedCertifcateChain(String ipAddress, String hostname) throws Exception {\n        X500NameBuilder nameBuilder = new X500NameBuilder(BCStyle.INSTANCE);\n        nameBuilder.addRDN(BCStyle.CN, \"NOT_LOCALHOST\");\n        Date notBefore = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.setTime(notBefore);\n        cal.add(Calendar.YEAR, 1);\n        Date notAfter = cal.getTime();\n        BigInteger serialNumber = new BigInteger(128, new Random());\n\n        X509v3CertificateBuilder certificateBuilder =\n                new JcaX509v3CertificateBuilder(nameBuilder.build(), serialNumber, notBefore, notAfter, nameBuilder.build(), keyPair.getPublic())\n                        .addExtension(Extension.basicConstraints, true, new BasicConstraints(0))\n                        .addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n\n        List<GeneralName> generalNames = new ArrayList<>();\n        if (ipAddress != null) {\n            generalNames.add(new GeneralName(GeneralName.iPAddress, ipAddress));\n        }\n        if (hostname != null) {\n            generalNames.add(new GeneralName(GeneralName.dNSName, hostname));\n        }\n\n        if (!generalNames.isEmpty()) {\n            certificateBuilder.addExtension(Extension.subjectAlternativeName,  true,  new GeneralNames(generalNames.toArray(new GeneralName[] {})));\n        }\n\n        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(keyPair.getPrivate());\n\n        return new X509Certificate[] { new JcaX509CertificateConverter().getCertificate(certificateBuilder.build(contentSigner)) };\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKTrustManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"N"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"}]
