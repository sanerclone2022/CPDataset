[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testCascadingDeletion()\n            throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar/one\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.delete(\"/foo/bar/one\", -1);  \r\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer()\n                .getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100);\n        containerManager.checkContainers();\n        Thread.sleep(1000);\n        containerManager\n                .checkContainers();\n        Thread.sleep(1000);\n\n        Assert.assertNull(\"Container should have been deleted\", zk.exists(\"/foo/bar\", false));\n        Assert.assertNull(\"Container should have been deleted\", zk.exists(\"/foo\", false));\n    }\n","date":"2018-10-05 20:25:43","endLine":184,"groupId":"4302","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCascadingDeletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/48/89684f79c1e780a4fb623ee7fdf181d9f37be6.src","preCode":"    public void testCascadingDeletion()\n            throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar/one\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.delete(\"/foo/bar/one\", -1);  \r\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer()\n                .getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100);\n        containerManager.checkContainers();\n        Thread.sleep(1000);\n        containerManager\n                .checkContainers();\n        Thread.sleep(1000);\n\n        Assert.assertNull(\"Container should have been deleted\", zk.exists(\"/foo/bar\", false));\n        Assert.assertNull(\"Container should have been deleted\", zk.exists(\"/foo\", false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateContainerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testFalseEmpty()\n            throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer()\n                .getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100) {\n            @Override\n            protected Collection<String> getCandidates() {\n                return Collections.singletonList(\"/foo\");\n            }\n        };\n        containerManager.checkContainers();\n        Thread.sleep(1000);\n\n        Assert.assertNotNull(\"Container should have not been deleted\", zk.exists(\"/foo\", false));\n    }\n","date":"2018-10-05 20:25:43","endLine":203,"groupId":"4304","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFalseEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/48/89684f79c1e780a4fb623ee7fdf181d9f37be6.src","preCode":"    public void testFalseEmpty()\n            throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer()\n                .getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100) {\n            @Override\n            protected Collection<String> getCandidates() {\n                return Collections.singletonList(\"/foo\");\n            }\n        };\n        containerManager.checkContainers();\n        Thread.sleep(1000);\n\n        Assert.assertNotNull(\"Container should have not been deleted\", zk.exists(\"/foo\", false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateContainerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testCascadingDeletion() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar/one\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.delete(\"/foo/bar/one\", -1);  \r\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100);\n        containerManager.checkContainers();\n        Thread.sleep(1000);\n        containerManager.checkContainers();\n        Thread.sleep(1000);\n\n        assertNull(\"Container should have been deleted\", zk.exists(\"/foo/bar\", false));\n        assertNull(\"Container should have been deleted\", zk.exists(\"/foo\", false));\n    }\n","date":"2019-08-17 23:13:15","endLine":180,"groupId":"4302","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCascadingDeletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/83/c7f0b3db91920a0673549f8d24efc7c936a438.src","preCode":"    public void testCascadingDeletion()\n            throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar/one\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.delete(\"/foo/bar/one\", -1);  \r\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer()\n                .getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100);\n        containerManager.checkContainers();\n        Thread.sleep(1000);\n        containerManager\n                .checkContainers();\n        Thread.sleep(1000);\n\n        Assert.assertNull(\"Container should have been deleted\", zk.exists(\"/foo/bar\", false));\n        Assert.assertNull(\"Container should have been deleted\", zk.exists(\"/foo\", false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateContainerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testFalseEmpty() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100) {\n            @Override\n            protected Collection<String> getCandidates() {\n                return Collections.singletonList(\"/foo\");\n            }\n        };\n        containerManager.checkContainers();\n        Thread.sleep(1000);\n\n        assertNotNull(\"Container should have not been deleted\", zk.exists(\"/foo\", false));\n    }\n","date":"2019-08-17 23:13:15","endLine":197,"groupId":"4304","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFalseEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/83/c7f0b3db91920a0673549f8d24efc7c936a438.src","preCode":"    public void testFalseEmpty()\n            throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer()\n                .getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100) {\n            @Override\n            protected Collection<String> getCandidates() {\n                return Collections.singletonList(\"/foo\");\n            }\n        };\n        containerManager.checkContainers();\n        Thread.sleep(1000);\n\n        Assert.assertNotNull(\"Container should have not been deleted\", zk.exists(\"/foo\", false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateContainerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-11-25 22:37:51","codes":[{"authorDate":"2019-11-25 22:37:51","commitOrder":3,"curCode":"    public void testCascadingDeletion() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar/one\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.delete(\"/foo/bar/one\", -1);  \r\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100);\n        containerManager.checkContainers();\n        assertTrue(completedContainerDeletions.tryAcquire(1, TimeUnit.SECONDS));\n        containerManager.checkContainers();\n        assertTrue(completedContainerDeletions.tryAcquire(1, TimeUnit.SECONDS));\n\n        assertNull(\"Container should have been deleted\", zk.exists(\"/foo/bar\", false));\n        assertNull(\"Container should have been deleted\", zk.exists(\"/foo\", false));\n    }\n","date":"2019-11-25 22:37:51","endLine":192,"groupId":"4302","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCascadingDeletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/f9bcce210679412d40f55b12494b8d6b1150fa.src","preCode":"    public void testCascadingDeletion() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar/one\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.delete(\"/foo/bar/one\", -1);  \r\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100);\n        containerManager.checkContainers();\n        Thread.sleep(1000);\n        containerManager.checkContainers();\n        Thread.sleep(1000);\n\n        assertNull(\"Container should have been deleted\", zk.exists(\"/foo/bar\", false));\n        assertNull(\"Container should have been deleted\", zk.exists(\"/foo\", false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateContainerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2019-11-25 22:37:51","commitOrder":3,"curCode":"    public void testFalseEmpty() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100) {\n            @Override\n            protected Collection<String> getCandidates() {\n                return Collections.singletonList(\"/foo\");\n            }\n        };\n        containerManager.checkContainers();\n\n        assertTrue(completedContainerDeletions.tryAcquire(1, TimeUnit.SECONDS));\n        assertNotNull(\"Container should have not been deleted\", zk.exists(\"/foo\", false));\n    }\n","date":"2019-11-25 22:37:51","endLine":209,"groupId":"4304","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFalseEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/f9bcce210679412d40f55b12494b8d6b1150fa.src","preCode":"    public void testFalseEmpty() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100) {\n            @Override\n            protected Collection<String> getCandidates() {\n                return Collections.singletonList(\"/foo\");\n            }\n        };\n        containerManager.checkContainers();\n        Thread.sleep(1000);\n\n        assertNotNull(\"Container should have not been deleted\", zk.exists(\"/foo\", false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateContainerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"4132b64b36ea43909888fdaf34268a243f2c7420","commitMessage":"@@@ZOOKEEPER-3546 - Allow optional deletion of never used Container Nodes\n\nEdge cases can cause Container Nodes to never be deleted. i.e. if the container node is created and then the client that create the node crashes the container will not get deleted unless another client creates a node inside of it. This is because the initial implementation does not delete container nodes with a cversion of 0. This PR adds a new system property.  \"znode.container.maxNeverUsedIntervalMs\".  that can be set to delete containers with a cversion of 0 that have been retained for a period of time. This is a backward compatible change as the default value for this is Long.MAX_VALUE - i.e. never.\n\nAuthor: randgalt <jordan@jordanzimmerman.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Fangmin Lyu <fangmin@apache.org>\n\nCloses #1138 from Randgalt/ZOOKEEPER-3546-allow-delete-of-never-used-containers\n","date":"2019-11-25 22:37:51","modifiedFileCount":"4","status":"M","submitter":"randgalt"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testCascadingDeletion() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar/one\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.delete(\"/foo/bar/one\", -1);  \r\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100);\n        containerManager.checkContainers();\n        assertTrue(completedContainerDeletions.tryAcquire(1, TimeUnit.SECONDS));\n        containerManager.checkContainers();\n        assertTrue(completedContainerDeletions.tryAcquire(1, TimeUnit.SECONDS));\n\n        assertNull(zk.exists(\"/foo/bar\", false), \"Container should have been deleted\");\n        assertNull(zk.exists(\"/foo\", false), \"Container should have been deleted\");\n    }\n","date":"2020-08-04 21:01:52","endLine":202,"groupId":"1042","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testCascadingDeletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/67/22473f2a579ff8db91bc1cee84ff9028d690c9.src","preCode":"    public void testCascadingDeletion() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar/one\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.delete(\"/foo/bar/one\", -1);  \r\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100);\n        containerManager.checkContainers();\n        assertTrue(completedContainerDeletions.tryAcquire(1, TimeUnit.SECONDS));\n        containerManager.checkContainers();\n        assertTrue(completedContainerDeletions.tryAcquire(1, TimeUnit.SECONDS));\n\n        assertNull(\"Container should have been deleted\", zk.exists(\"/foo/bar\", false));\n        assertNull(\"Container should have been deleted\", zk.exists(\"/foo\", false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateContainerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testFalseEmpty() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100) {\n            @Override protected Collection<String> getCandidates() {\n                return Collections.singletonList(\"/foo\");\n            }\n        };\n        containerManager.checkContainers();\n\n        assertTrue(completedContainerDeletions.tryAcquire(1, TimeUnit.SECONDS));\n        assertNotNull(zk.exists(\"/foo\", false), \"Container should have not been deleted\");\n    }\n","date":"2020-08-04 21:01:52","endLine":219,"groupId":"1042","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testFalseEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/67/22473f2a579ff8db91bc1cee84ff9028d690c9.src","preCode":"    public void testFalseEmpty() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        zk.create(\"/foo/bar\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100) {\n            @Override\n            protected Collection<String> getCandidates() {\n                return Collections.singletonList(\"/foo\");\n            }\n        };\n        containerManager.checkContainers();\n\n        assertTrue(completedContainerDeletions.tryAcquire(1, TimeUnit.SECONDS));\n        assertNotNull(\"Container should have not been deleted\", zk.exists(\"/foo\", false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateContainerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
