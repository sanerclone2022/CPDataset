[{"authorTime":"2020-05-29 20:59:47","codes":[{"authorDate":"2020-05-29 20:59:47","commitOrder":1,"curCode":"    public void testRollingRestartWithExtendedMembershipConfig() throws Exception {\n        \r\n\n        \r\n        int serverCount = 3;\n        String config = generateNewQuorumConfig(serverCount);\n        QuorumPeerTestBase.MainThread[] mt = new QuorumPeerTestBase.MainThread[serverCount];\n        List<String> joiningServers = new ArrayList<>();\n        for (int i = 0; i < serverCount; i++) {\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            joiningServers.add(serverAddress.get(i));\n        }\n        for (int i = 0; i < serverCount; i++) {\n            assertTrue(\"waiting for server \" + i + \" being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT));\n        }\n        for (int i = 0; i < serverCount; i++) {\n            verifyQuorumConfig(i, joiningServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        List<String> newServers = new ArrayList<>(joiningServers);\n        config = updateExistingQuorumConfig(Arrays.asList(3), new ArrayList<>());\n        newServers.add(serverAddress.get(3));\n        serverCount = serverAddress.size();\n        assertEquals(\"Server count should be 4 after config update.\", serverCount, 4);\n\n        \r\n        mt = Arrays.copyOf(mt, mt.length + 1);\n        mt[3] = new QuorumPeerTestBase.MainThread(3, clientPorts.get(3), config, false);\n        mt[3].start();\n        assertTrue(\"waiting for server 3 being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(3), CONNECTION_TIMEOUT));\n        verifyQuorumConfig(3, newServers, null);\n        verifyQuorumMembers(mt[3]);\n\n        \r\n        for (int i = 0; i < 3; i++) {\n            mt[i].shutdown();\n\n            assertTrue(String.format(\"Timeout during waiting for server %d to go down\", i),\n                       ClientBase.waitForServerDown(\"127.0.0.1:\" + clientPorts.get(i), ClientBase.CONNECTION_TIMEOUT));\n\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            assertTrue(\"waiting for server \" + i + \" being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT));\n            verifyQuorumConfig(i, newServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        for (int i = 0; i < 4; ++i) {\n            ZooKeeper zk = ClientBase.createZKClient(\"127.0.0.1:\" + clientPorts.get(i));\n            ReconfigTest.testNormalOperation(zk, zk, false);\n        }\n\n        for (int i = 0; i < 4; ++i) {\n            mt[i].shutdown();\n        }\n    }\n","date":"2020-05-29 20:59:47","endLine":272,"groupId":"2082","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRollingRestartWithExtendedMembershipConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/95/22da7e534f5293c9bff14dc5c195f28ba38d14.src","preCode":"    public void testRollingRestartWithExtendedMembershipConfig() throws Exception {\n        \r\n\n        \r\n        int serverCount = 3;\n        String config = generateNewQuorumConfig(serverCount);\n        QuorumPeerTestBase.MainThread[] mt = new QuorumPeerTestBase.MainThread[serverCount];\n        List<String> joiningServers = new ArrayList<>();\n        for (int i = 0; i < serverCount; i++) {\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            joiningServers.add(serverAddress.get(i));\n        }\n        for (int i = 0; i < serverCount; i++) {\n            assertTrue(\"waiting for server \" + i + \" being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT));\n        }\n        for (int i = 0; i < serverCount; i++) {\n            verifyQuorumConfig(i, joiningServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        List<String> newServers = new ArrayList<>(joiningServers);\n        config = updateExistingQuorumConfig(Arrays.asList(3), new ArrayList<>());\n        newServers.add(serverAddress.get(3));\n        serverCount = serverAddress.size();\n        assertEquals(\"Server count should be 4 after config update.\", serverCount, 4);\n\n        \r\n        mt = Arrays.copyOf(mt, mt.length + 1);\n        mt[3] = new QuorumPeerTestBase.MainThread(3, clientPorts.get(3), config, false);\n        mt[3].start();\n        assertTrue(\"waiting for server 3 being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(3), CONNECTION_TIMEOUT));\n        verifyQuorumConfig(3, newServers, null);\n        verifyQuorumMembers(mt[3]);\n\n        \r\n        for (int i = 0; i < 3; i++) {\n            mt[i].shutdown();\n\n            assertTrue(String.format(\"Timeout during waiting for server %d to go down\", i),\n                       ClientBase.waitForServerDown(\"127.0.0.1:\" + clientPorts.get(i), ClientBase.CONNECTION_TIMEOUT));\n\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            assertTrue(\"waiting for server \" + i + \" being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT));\n            verifyQuorumConfig(i, newServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        for (int i = 0; i < 4; ++i) {\n            ZooKeeper zk = ClientBase.createZKClient(\"127.0.0.1:\" + clientPorts.get(i));\n            ReconfigTest.testNormalOperation(zk, zk, false);\n        }\n\n        for (int i = 0; i < 4; ++i) {\n            mt[i].shutdown();\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"B"},{"authorDate":"2020-05-29 20:59:47","commitOrder":1,"curCode":"    public void testRollingRestartWithHostAddedAndRemoved() throws Exception {\n        \r\n        \r\n\n        \r\n        int serverCount = 3;\n        String config = generateNewQuorumConfig(serverCount);\n        QuorumPeerTestBase.MainThread[] mt = new QuorumPeerTestBase.MainThread[serverCount];\n        List<String> originalServers = new ArrayList<>();\n        for (int i = 0; i < serverCount; i++) {\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            originalServers.add(serverAddress.get(i));\n        }\n        for (int i = 0; i < serverCount; i++) {\n            assertTrue(\"waiting for server \" + i + \" being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT));\n        }\n        for (int i = 0; i < serverCount; i++) {\n            verifyQuorumConfig(i, originalServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        mt[2].shutdown();\n        assertTrue(String.format(\"Timeout during waiting for server %d to go down\", 2),\n                   ClientBase.waitForServerDown(\"127.0.0.1:\" + clientPorts.get(2), ClientBase.CONNECTION_TIMEOUT));\n        String leavingServer = originalServers.get(2);\n\n        \r\n        config = updateExistingQuorumConfig(Arrays.asList(3), Arrays.asList(2));\n        List<String> newServers = new ArrayList<>(serverAddress.values());\n        serverCount = serverAddress.size();\n        assertEquals(\"Server count should be 3 after config update.\", serverCount, 3);\n\n\n        \r\n        mt = Arrays.copyOf(mt, mt.length + 1);\n        mt[3] = new QuorumPeerTestBase.MainThread(3, clientPorts.get(3), config, false);\n        mt[3].start();\n        assertTrue(\"waiting for server 3 being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(3), CONNECTION_TIMEOUT));\n        verifyQuorumConfig(3, newServers, Arrays.asList(leavingServer));\n        verifyQuorumMembers(mt[3]);\n\n        \r\n        for (int i = 0; i < 2; i++) {\n            mt[i].shutdown();\n\n            assertTrue(String.format(\"Timeout during waiting for server %d to go down\", i),\n                       ClientBase.waitForServerDown(\"127.0.0.1:\" + clientPorts.get(i), ClientBase.CONNECTION_TIMEOUT));\n\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            assertTrue(\"waiting for server \" + i + \" being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT));\n            verifyQuorumConfig(i, newServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        for (int i : serverAddress.keySet()) {\n            ZooKeeper zk = ClientBase.createZKClient(\"127.0.0.1:\" + clientPorts.get(i));\n            ReconfigTest.testNormalOperation(zk, zk, false);\n        }\n\n        for (int i : serverAddress.keySet()) {\n            mt[i].shutdown();\n        }\n    }\n","date":"2020-05-29 20:59:47","endLine":341,"groupId":"2082","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRollingRestartWithHostAddedAndRemoved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/95/22da7e534f5293c9bff14dc5c195f28ba38d14.src","preCode":"    public void testRollingRestartWithHostAddedAndRemoved() throws Exception {\n        \r\n        \r\n\n        \r\n        int serverCount = 3;\n        String config = generateNewQuorumConfig(serverCount);\n        QuorumPeerTestBase.MainThread[] mt = new QuorumPeerTestBase.MainThread[serverCount];\n        List<String> originalServers = new ArrayList<>();\n        for (int i = 0; i < serverCount; i++) {\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            originalServers.add(serverAddress.get(i));\n        }\n        for (int i = 0; i < serverCount; i++) {\n            assertTrue(\"waiting for server \" + i + \" being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT));\n        }\n        for (int i = 0; i < serverCount; i++) {\n            verifyQuorumConfig(i, originalServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        mt[2].shutdown();\n        assertTrue(String.format(\"Timeout during waiting for server %d to go down\", 2),\n                   ClientBase.waitForServerDown(\"127.0.0.1:\" + clientPorts.get(2), ClientBase.CONNECTION_TIMEOUT));\n        String leavingServer = originalServers.get(2);\n\n        \r\n        config = updateExistingQuorumConfig(Arrays.asList(3), Arrays.asList(2));\n        List<String> newServers = new ArrayList<>(serverAddress.values());\n        serverCount = serverAddress.size();\n        assertEquals(\"Server count should be 3 after config update.\", serverCount, 3);\n\n\n        \r\n        mt = Arrays.copyOf(mt, mt.length + 1);\n        mt[3] = new QuorumPeerTestBase.MainThread(3, clientPorts.get(3), config, false);\n        mt[3].start();\n        assertTrue(\"waiting for server 3 being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(3), CONNECTION_TIMEOUT));\n        verifyQuorumConfig(3, newServers, Arrays.asList(leavingServer));\n        verifyQuorumMembers(mt[3]);\n\n        \r\n        for (int i = 0; i < 2; i++) {\n            mt[i].shutdown();\n\n            assertTrue(String.format(\"Timeout during waiting for server %d to go down\", i),\n                       ClientBase.waitForServerDown(\"127.0.0.1:\" + clientPorts.get(i), ClientBase.CONNECTION_TIMEOUT));\n\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            assertTrue(\"waiting for server \" + i + \" being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT));\n            verifyQuorumConfig(i, newServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        for (int i : serverAddress.keySet()) {\n            ZooKeeper zk = ClientBase.createZKClient(\"127.0.0.1:\" + clientPorts.get(i));\n            ReconfigTest.testNormalOperation(zk, zk, false);\n        }\n\n        for (int i : serverAddress.keySet()) {\n            mt[i].shutdown();\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"B"}],"commitId":"e91455c1e3c50405666cd8afad71d99dceb7b340","commitMessage":"@@@ZOOKEEPER-3829: fix rolling restart when dynamic reconfig is disabled\n\nIn four different Jira tickets (ZOOKEEPER-3829.  ZOOKEEPER-3830.  ZOOKEEPER-3814.  ZOOKEEPER-3842) we saw different errors when dynamic reconfig was disabled and we used rolling restart to change the quorum membership configuration. These rolling restart sequences was working fine on 3.4 but caused errors in 3.5 or 3.6.\n\nIn worst case the rolling restart leads to the scenario that we had an elected leader which was up but unable to commit any changes. This happens.  when the quorum is extended with a new member in the following sequence:\n* start server.1.  server.2.  server.3 (with config: 1. 2. 3)\n* start server.4 (with config 1. 2. 3. 4)\n* stop server.1.  then restart it with config 1. 2. 3. 4\n* stop server.2.  then restart it with config 1. 2. 3. 4\n* stop server.3.  then restart it with config 1. 2. 3. 4\n* at this point leader is server.4.  but it can not commit any transaction\n\nAn other error we saw was when we changed a host name of an existing member (removing server.5 and add a new host as server.6). In this case we found in the logs of the new server (server.6) that it is still tried to connect to the old invalid server (server.5).  although it was missing from it's config. The same problem remained even after making a full rolling-restart on all the nodes.\n\nIn this patch I try to fix these issues without breaking anything. The patch contains the following changes:\n* We are making sure that neither the committed.  nor the last seen config gets updated if dynamic reconfig is disabled.\n* It is not possible now to start the leader without the ability of committing transaction.  when dynamic reconfig is disabled (this is only needed to avoid a reconfig edge-case).\n* I added a testcase simulating the enablement of dynamic reconfig using rolling restart\n* I added a few more unit tests to cover rolling restart scenarios. (the tests are failing without the patch but succeeding after applying it).\n* The enablement / disablement of reconfig is getting initialized now in the QuorumPeer and gets propagated to the other classes. This was needed for the rolling restart tests to be able to enable/disable reconfig only for the newly created servers without affecting the servers running already in the same JVM.\n\nI also tested the changes with docker.  using: https://github.com/symat/zookeeper-docker-test\n\ntarget branches: 3.5.  3.6.  master\n\nAuthor: Mate Szalay-Beko <symat@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1356 from symat/ZOOKEEPER-3829\n","date":"2020-05-29 20:59:47","modifiedFileCount":"13","status":"B","submitter":"Mate Szalay-Beko"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":2,"curCode":"    public void testRollingRestartWithExtendedMembershipConfig() throws Exception {\n        \r\n\n        \r\n        int serverCount = 3;\n        String config = generateNewQuorumConfig(serverCount);\n        QuorumPeerTestBase.MainThread[] mt = new QuorumPeerTestBase.MainThread[serverCount];\n        List<String> joiningServers = new ArrayList<>();\n        for (int i = 0; i < serverCount; i++) {\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            joiningServers.add(serverAddress.get(i));\n        }\n        for (int i = 0; i < serverCount; i++) {\n            assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT), \"waiting for server \" + i + \" being up\");\n        }\n        for (int i = 0; i < serverCount; i++) {\n            verifyQuorumConfig(i, joiningServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        List<String> newServers = new ArrayList<>(joiningServers);\n        config = updateExistingQuorumConfig(Arrays.asList(3), new ArrayList<>());\n        newServers.add(serverAddress.get(3));\n        serverCount = serverAddress.size();\n        assertEquals(serverCount, 4, \"Server count should be 4 after config update.\");\n\n        \r\n        mt = Arrays.copyOf(mt, mt.length + 1);\n        mt[3] = new QuorumPeerTestBase.MainThread(3, clientPorts.get(3), config, false);\n        mt[3].start();\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(3), CONNECTION_TIMEOUT), \"waiting for server 3 being up\");\n        verifyQuorumConfig(3, newServers, null);\n        verifyQuorumMembers(mt[3]);\n\n        \r\n        for (int i = 0; i < 3; i++) {\n            mt[i].shutdown();\n\n            assertTrue(ClientBase.waitForServerDown(\"127.0.0.1:\" + clientPorts.get(i), ClientBase.CONNECTION_TIMEOUT),\n                    String.format(\"Timeout during waiting for server %d to go down\", i));\n\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT), \"waiting for server \" + i + \" being up\");\n            verifyQuorumConfig(i, newServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        for (int i = 0; i < 4; ++i) {\n            ZooKeeper zk = ClientBase.createZKClient(\"127.0.0.1:\" + clientPorts.get(i));\n            ReconfigTest.testNormalOperation(zk, zk, false);\n        }\n\n        for (int i = 0; i < 4; ++i) {\n            mt[i].shutdown();\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":277,"groupId":"10237","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testRollingRestartWithExtendedMembershipConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/62/db39b413fdff692eb02fb1a0c17a4c7dc08ed9.src","preCode":"    public void testRollingRestartWithExtendedMembershipConfig() throws Exception {\n        \r\n\n        \r\n        int serverCount = 3;\n        String config = generateNewQuorumConfig(serverCount);\n        QuorumPeerTestBase.MainThread[] mt = new QuorumPeerTestBase.MainThread[serverCount];\n        List<String> joiningServers = new ArrayList<>();\n        for (int i = 0; i < serverCount; i++) {\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            joiningServers.add(serverAddress.get(i));\n        }\n        for (int i = 0; i < serverCount; i++) {\n            assertTrue(\"waiting for server \" + i + \" being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT));\n        }\n        for (int i = 0; i < serverCount; i++) {\n            verifyQuorumConfig(i, joiningServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        List<String> newServers = new ArrayList<>(joiningServers);\n        config = updateExistingQuorumConfig(Arrays.asList(3), new ArrayList<>());\n        newServers.add(serverAddress.get(3));\n        serverCount = serverAddress.size();\n        assertEquals(\"Server count should be 4 after config update.\", serverCount, 4);\n\n        \r\n        mt = Arrays.copyOf(mt, mt.length + 1);\n        mt[3] = new QuorumPeerTestBase.MainThread(3, clientPorts.get(3), config, false);\n        mt[3].start();\n        assertTrue(\"waiting for server 3 being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(3), CONNECTION_TIMEOUT));\n        verifyQuorumConfig(3, newServers, null);\n        verifyQuorumMembers(mt[3]);\n\n        \r\n        for (int i = 0; i < 3; i++) {\n            mt[i].shutdown();\n\n            assertTrue(String.format(\"Timeout during waiting for server %d to go down\", i),\n                       ClientBase.waitForServerDown(\"127.0.0.1:\" + clientPorts.get(i), ClientBase.CONNECTION_TIMEOUT));\n\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            assertTrue(\"waiting for server \" + i + \" being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT));\n            verifyQuorumConfig(i, newServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        for (int i = 0; i < 4; ++i) {\n            ZooKeeper zk = ClientBase.createZKClient(\"127.0.0.1:\" + clientPorts.get(i));\n            ReconfigTest.testNormalOperation(zk, zk, false);\n        }\n\n        for (int i = 0; i < 4; ++i) {\n            mt[i].shutdown();\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":2,"curCode":"    public void testRollingRestartWithHostAddedAndRemoved() throws Exception {\n        \r\n        \r\n\n        \r\n        int serverCount = 3;\n        String config = generateNewQuorumConfig(serverCount);\n        QuorumPeerTestBase.MainThread[] mt = new QuorumPeerTestBase.MainThread[serverCount];\n        List<String> originalServers = new ArrayList<>();\n        for (int i = 0; i < serverCount; i++) {\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            originalServers.add(serverAddress.get(i));\n        }\n        for (int i = 0; i < serverCount; i++) {\n            assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT), \"waiting for server \" + i + \" being up\");\n        }\n        for (int i = 0; i < serverCount; i++) {\n            verifyQuorumConfig(i, originalServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        mt[2].shutdown();\n        assertTrue(ClientBase.waitForServerDown(\"127.0.0.1:\" + clientPorts.get(2), ClientBase.CONNECTION_TIMEOUT),\n                String.format(\"Timeout during waiting for server %d to go down\", 2));\n        String leavingServer = originalServers.get(2);\n\n        \r\n        config = updateExistingQuorumConfig(Arrays.asList(3), Arrays.asList(2));\n        List<String> newServers = new ArrayList<>(serverAddress.values());\n        serverCount = serverAddress.size();\n        assertEquals(serverCount, 3, \"Server count should be 3 after config update.\");\n\n\n        \r\n        mt = Arrays.copyOf(mt, mt.length + 1);\n        mt[3] = new QuorumPeerTestBase.MainThread(3, clientPorts.get(3), config, false);\n        mt[3].start();\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(3), CONNECTION_TIMEOUT), \"waiting for server 3 being up\");\n        verifyQuorumConfig(3, newServers, Arrays.asList(leavingServer));\n        verifyQuorumMembers(mt[3]);\n\n        \r\n        for (int i = 0; i < 2; i++) {\n            mt[i].shutdown();\n\n            assertTrue(ClientBase.waitForServerDown(\"127.0.0.1:\" + clientPorts.get(i), ClientBase.CONNECTION_TIMEOUT),\n                    String.format(\"Timeout during waiting for server %d to go down\", i));\n\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT), \"waiting for server \" + i + \" being up\");\n            verifyQuorumConfig(i, newServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        for (int i : serverAddress.keySet()) {\n            ZooKeeper zk = ClientBase.createZKClient(\"127.0.0.1:\" + clientPorts.get(i));\n            ReconfigTest.testNormalOperation(zk, zk, false);\n        }\n\n        for (int i : serverAddress.keySet()) {\n            mt[i].shutdown();\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":346,"groupId":"10237","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testRollingRestartWithHostAddedAndRemoved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/62/db39b413fdff692eb02fb1a0c17a4c7dc08ed9.src","preCode":"    public void testRollingRestartWithHostAddedAndRemoved() throws Exception {\n        \r\n        \r\n\n        \r\n        int serverCount = 3;\n        String config = generateNewQuorumConfig(serverCount);\n        QuorumPeerTestBase.MainThread[] mt = new QuorumPeerTestBase.MainThread[serverCount];\n        List<String> originalServers = new ArrayList<>();\n        for (int i = 0; i < serverCount; i++) {\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            originalServers.add(serverAddress.get(i));\n        }\n        for (int i = 0; i < serverCount; i++) {\n            assertTrue(\"waiting for server \" + i + \" being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT));\n        }\n        for (int i = 0; i < serverCount; i++) {\n            verifyQuorumConfig(i, originalServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        mt[2].shutdown();\n        assertTrue(String.format(\"Timeout during waiting for server %d to go down\", 2),\n                   ClientBase.waitForServerDown(\"127.0.0.1:\" + clientPorts.get(2), ClientBase.CONNECTION_TIMEOUT));\n        String leavingServer = originalServers.get(2);\n\n        \r\n        config = updateExistingQuorumConfig(Arrays.asList(3), Arrays.asList(2));\n        List<String> newServers = new ArrayList<>(serverAddress.values());\n        serverCount = serverAddress.size();\n        assertEquals(\"Server count should be 3 after config update.\", serverCount, 3);\n\n\n        \r\n        mt = Arrays.copyOf(mt, mt.length + 1);\n        mt[3] = new QuorumPeerTestBase.MainThread(3, clientPorts.get(3), config, false);\n        mt[3].start();\n        assertTrue(\"waiting for server 3 being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(3), CONNECTION_TIMEOUT));\n        verifyQuorumConfig(3, newServers, Arrays.asList(leavingServer));\n        verifyQuorumMembers(mt[3]);\n\n        \r\n        for (int i = 0; i < 2; i++) {\n            mt[i].shutdown();\n\n            assertTrue(String.format(\"Timeout during waiting for server %d to go down\", i),\n                       ClientBase.waitForServerDown(\"127.0.0.1:\" + clientPorts.get(i), ClientBase.CONNECTION_TIMEOUT));\n\n            mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false);\n            mt[i].start();\n            assertTrue(\"waiting for server \" + i + \" being up\", ClientBase.waitForServerUp(\"127.0.0.1:\" + clientPorts.get(i), CONNECTION_TIMEOUT));\n            verifyQuorumConfig(i, newServers, null);\n            verifyQuorumMembers(mt[i]);\n        }\n\n        \r\n        for (int i : serverAddress.keySet()) {\n            ZooKeeper zk = ClientBase.createZKClient(\"127.0.0.1:\" + clientPorts.get(i));\n            ReconfigTest.testNormalOperation(zk, zk, false);\n        }\n\n        for (int i : serverAddress.keySet()) {\n            mt[i].shutdown();\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReconfigRollingRestartCompatibilityTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
