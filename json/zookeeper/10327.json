[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testAddAndTriggerWatcher() throws IOException {\n        IWatchManager manager = getWatchManager();\n        int paths = 1;\n        int watchers = 10000;\n\n        \r\n        \r\n        AtomicInteger watchTriggered = new AtomicInteger();\n        List<WatcherTriggerWorker> triggerWorkers =\n                new ArrayList<WatcherTriggerWorker>();\n        for (int i = 0; i < 5; i++) {\n            WatcherTriggerWorker worker =\n                    new WatcherTriggerWorker(manager, paths, watchTriggered);\n            triggerWorkers.add(worker);\n            worker.start();\n        }\n\n        \r\n        \r\n        AtomicInteger watchesAdded = new AtomicInteger();\n        List<AddWatcherWorker> addWorkers = new ArrayList<AddWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            AddWatcherWorker worker = new AddWatcherWorker(\n                    manager, paths, watchers, watchesAdded);\n            addWorkers.add(worker);\n            worker.start();\n        }\n\n        while (watchesAdded.get() < 100000) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {}\n        }\n\n        \r\n        for (AddWatcherWorker worker: addWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        \r\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        \r\n        for (WatcherTriggerWorker worker: triggerWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        Assert.assertTrue(watchesAdded.get() > 0);\n        Assert.assertEquals(watchesAdded.get(), watchTriggered.get());\n    }\n","date":"2018-10-05 20:25:43","endLine":281,"groupId":"526","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddAndTriggerWatcher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f6/a229b32514b874ae46accef9ed92cd24088c4e.src","preCode":"    public void testAddAndTriggerWatcher() throws IOException {\n        IWatchManager manager = getWatchManager();\n        int paths = 1;\n        int watchers = 10000;\n\n        \r\n        \r\n        AtomicInteger watchTriggered = new AtomicInteger();\n        List<WatcherTriggerWorker> triggerWorkers =\n                new ArrayList<WatcherTriggerWorker>();\n        for (int i = 0; i < 5; i++) {\n            WatcherTriggerWorker worker =\n                    new WatcherTriggerWorker(manager, paths, watchTriggered);\n            triggerWorkers.add(worker);\n            worker.start();\n        }\n\n        \r\n        \r\n        AtomicInteger watchesAdded = new AtomicInteger();\n        List<AddWatcherWorker> addWorkers = new ArrayList<AddWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            AddWatcherWorker worker = new AddWatcherWorker(\n                    manager, paths, watchers, watchesAdded);\n            addWorkers.add(worker);\n            worker.start();\n        }\n\n        while (watchesAdded.get() < 100000) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {}\n        }\n\n        \r\n        for (AddWatcherWorker worker: addWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        \r\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        \r\n        for (WatcherTriggerWorker worker: triggerWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        Assert.assertTrue(watchesAdded.get() > 0);\n        Assert.assertEquals(watchesAdded.get(), watchTriggered.get());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testRemoveWatcherOnPath() throws IOException {\n        IWatchManager manager = getWatchManager();\n        int paths = 10;\n        int watchers = 10000;\n\n        \r\n        \r\n        AtomicInteger watchesRemoved = new AtomicInteger();\n        List<RemoveWatcherWorker> removeWorkers =\n                new ArrayList<RemoveWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            RemoveWatcherWorker worker =\n                    new RemoveWatcherWorker(manager, paths, watchers, watchesRemoved);\n            removeWorkers.add(worker);\n            worker.start();\n        }\n\n        \r\n        \r\n        AtomicInteger watchesAdded = new AtomicInteger();\n        List<AddWatcherWorker> addWorkers = new ArrayList<AddWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            AddWatcherWorker worker = new AddWatcherWorker(\n                    manager, paths, watchers, watchesAdded);\n            addWorkers.add(worker);\n            worker.start();\n        }\n\n        while (watchesAdded.get() < 100000) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {}\n        }\n\n        \r\n        for (RemoveWatcherWorker worker: removeWorkers) {\n            worker.shutdown();\n        }\n        for (AddWatcherWorker worker: addWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        \r\n        Assert.assertTrue(watchesAdded.get() > 0);\n        Assert.assertTrue(watchesRemoved.get() > 0);\n        Assert.assertTrue(manager.size() > 0);\n        Assert.assertEquals(\n                watchesAdded.get(), watchesRemoved.get() + manager.size());\n    }\n","date":"2018-10-05 20:25:43","endLine":341,"groupId":"527","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveWatcherOnPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f6/a229b32514b874ae46accef9ed92cd24088c4e.src","preCode":"    public void testRemoveWatcherOnPath() throws IOException {\n        IWatchManager manager = getWatchManager();\n        int paths = 10;\n        int watchers = 10000;\n\n        \r\n        \r\n        AtomicInteger watchesRemoved = new AtomicInteger();\n        List<RemoveWatcherWorker> removeWorkers =\n                new ArrayList<RemoveWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            RemoveWatcherWorker worker =\n                    new RemoveWatcherWorker(manager, paths, watchers, watchesRemoved);\n            removeWorkers.add(worker);\n            worker.start();\n        }\n\n        \r\n        \r\n        AtomicInteger watchesAdded = new AtomicInteger();\n        List<AddWatcherWorker> addWorkers = new ArrayList<AddWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            AddWatcherWorker worker = new AddWatcherWorker(\n                    manager, paths, watchers, watchesAdded);\n            addWorkers.add(worker);\n            worker.start();\n        }\n\n        while (watchesAdded.get() < 100000) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {}\n        }\n\n        \r\n        for (RemoveWatcherWorker worker: removeWorkers) {\n            worker.shutdown();\n        }\n        for (AddWatcherWorker worker: addWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        \r\n        Assert.assertTrue(watchesAdded.get() > 0);\n        Assert.assertTrue(watchesRemoved.get() > 0);\n        Assert.assertTrue(manager.size() > 0);\n        Assert.assertEquals(\n                watchesAdded.get(), watchesRemoved.get() + manager.size());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testAddAndTriggerWatcher() throws IOException {\n        IWatchManager manager = getWatchManager();\n        int paths = 1;\n        int watchers = 10000;\n\n        \r\n        \r\n        AtomicInteger watchTriggered = new AtomicInteger();\n        List<WatcherTriggerWorker> triggerWorkers = new ArrayList<WatcherTriggerWorker>();\n        for (int i = 0; i < 5; i++) {\n            WatcherTriggerWorker worker = new WatcherTriggerWorker(manager, paths, watchTriggered);\n            triggerWorkers.add(worker);\n            worker.start();\n        }\n\n        \r\n        \r\n        AtomicInteger watchesAdded = new AtomicInteger();\n        List<AddWatcherWorker> addWorkers = new ArrayList<AddWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            AddWatcherWorker worker = new AddWatcherWorker(manager, paths, watchers, watchesAdded);\n            addWorkers.add(worker);\n            worker.start();\n        }\n\n        while (watchesAdded.get() < 100000) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        \r\n        for (AddWatcherWorker worker : addWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        \r\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n        }\n\n        \r\n        for (WatcherTriggerWorker worker : triggerWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        assertTrue(watchesAdded.get() > 0);\n        assertEquals(watchesAdded.get(), watchTriggered.get());\n    }\n","date":"2019-08-17 23:13:15","endLine":285,"groupId":"526","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddAndTriggerWatcher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0c/e0a59a0dac3890231ae8f736fe0a854072d83e.src","preCode":"    public void testAddAndTriggerWatcher() throws IOException {\n        IWatchManager manager = getWatchManager();\n        int paths = 1;\n        int watchers = 10000;\n\n        \r\n        \r\n        AtomicInteger watchTriggered = new AtomicInteger();\n        List<WatcherTriggerWorker> triggerWorkers =\n                new ArrayList<WatcherTriggerWorker>();\n        for (int i = 0; i < 5; i++) {\n            WatcherTriggerWorker worker =\n                    new WatcherTriggerWorker(manager, paths, watchTriggered);\n            triggerWorkers.add(worker);\n            worker.start();\n        }\n\n        \r\n        \r\n        AtomicInteger watchesAdded = new AtomicInteger();\n        List<AddWatcherWorker> addWorkers = new ArrayList<AddWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            AddWatcherWorker worker = new AddWatcherWorker(\n                    manager, paths, watchers, watchesAdded);\n            addWorkers.add(worker);\n            worker.start();\n        }\n\n        while (watchesAdded.get() < 100000) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {}\n        }\n\n        \r\n        for (AddWatcherWorker worker: addWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        \r\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        \r\n        for (WatcherTriggerWorker worker: triggerWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        Assert.assertTrue(watchesAdded.get() > 0);\n        Assert.assertEquals(watchesAdded.get(), watchTriggered.get());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testRemoveWatcherOnPath() throws IOException {\n        IWatchManager manager = getWatchManager();\n        int paths = 10;\n        int watchers = 10000;\n\n        \r\n        \r\n        AtomicInteger watchesRemoved = new AtomicInteger();\n        List<RemoveWatcherWorker> removeWorkers = new ArrayList<RemoveWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            RemoveWatcherWorker worker = new RemoveWatcherWorker(manager, paths, watchers, watchesRemoved);\n            removeWorkers.add(worker);\n            worker.start();\n        }\n\n        \r\n        \r\n        AtomicInteger watchesAdded = new AtomicInteger();\n        List<AddWatcherWorker> addWorkers = new ArrayList<AddWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            AddWatcherWorker worker = new AddWatcherWorker(manager, paths, watchers, watchesAdded);\n            addWorkers.add(worker);\n            worker.start();\n        }\n\n        while (watchesAdded.get() < 100000) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        \r\n        for (RemoveWatcherWorker worker : removeWorkers) {\n            worker.shutdown();\n        }\n        for (AddWatcherWorker worker : addWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n        }\n\n        \r\n        assertTrue(watchesAdded.get() > 0);\n        assertTrue(watchesRemoved.get() > 0);\n        assertTrue(manager.size() > 0);\n        assertEquals(watchesAdded.get(), watchesRemoved.get() + manager.size());\n    }\n","date":"2019-08-17 23:13:15","endLine":343,"groupId":"527","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveWatcherOnPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0c/e0a59a0dac3890231ae8f736fe0a854072d83e.src","preCode":"    public void testRemoveWatcherOnPath() throws IOException {\n        IWatchManager manager = getWatchManager();\n        int paths = 10;\n        int watchers = 10000;\n\n        \r\n        \r\n        AtomicInteger watchesRemoved = new AtomicInteger();\n        List<RemoveWatcherWorker> removeWorkers =\n                new ArrayList<RemoveWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            RemoveWatcherWorker worker =\n                    new RemoveWatcherWorker(manager, paths, watchers, watchesRemoved);\n            removeWorkers.add(worker);\n            worker.start();\n        }\n\n        \r\n        \r\n        AtomicInteger watchesAdded = new AtomicInteger();\n        List<AddWatcherWorker> addWorkers = new ArrayList<AddWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            AddWatcherWorker worker = new AddWatcherWorker(\n                    manager, paths, watchers, watchesAdded);\n            addWorkers.add(worker);\n            worker.start();\n        }\n\n        while (watchesAdded.get() < 100000) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {}\n        }\n\n        \r\n        for (RemoveWatcherWorker worker: removeWorkers) {\n            worker.shutdown();\n        }\n        for (AddWatcherWorker worker: addWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        \r\n        Assert.assertTrue(watchesAdded.get() > 0);\n        Assert.assertTrue(watchesRemoved.get() > 0);\n        Assert.assertTrue(manager.size() > 0);\n        Assert.assertEquals(\n                watchesAdded.get(), watchesRemoved.get() + manager.size());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testAddAndTriggerWatcher(String className) throws IOException {\n        IWatchManager manager = getWatchManager(className);\n        int paths = 1;\n        int watchers = 10000;\n\n        \r\n        \r\n        AtomicInteger watchTriggered = new AtomicInteger();\n        List<WatcherTriggerWorker> triggerWorkers = new ArrayList<WatcherTriggerWorker>();\n        for (int i = 0; i < 5; i++) {\n            WatcherTriggerWorker worker = new WatcherTriggerWorker(manager, paths, watchTriggered);\n            triggerWorkers.add(worker);\n            worker.start();\n        }\n\n        \r\n        \r\n        AtomicInteger watchesAdded = new AtomicInteger();\n        List<AddWatcherWorker> addWorkers = new ArrayList<AddWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            AddWatcherWorker worker = new AddWatcherWorker(manager, paths, watchers, watchesAdded);\n            addWorkers.add(worker);\n            worker.start();\n        }\n\n        while (watchesAdded.get() < 100000) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        \r\n        for (AddWatcherWorker worker : addWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        \r\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n        }\n\n        \r\n        for (WatcherTriggerWorker worker : triggerWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        assertTrue(watchesAdded.get() > 0);\n        assertEquals(watchesAdded.get(), watchTriggered.get());\n    }\n","date":"2020-08-04 21:01:52","endLine":283,"groupId":"10327","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testAddAndTriggerWatcher","params":"(StringclassName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/bd/613a44488fe55ae0864ba1e22883e888b7f2c4.src","preCode":"    public void testAddAndTriggerWatcher() throws IOException {\n        IWatchManager manager = getWatchManager();\n        int paths = 1;\n        int watchers = 10000;\n\n        \r\n        \r\n        AtomicInteger watchTriggered = new AtomicInteger();\n        List<WatcherTriggerWorker> triggerWorkers = new ArrayList<WatcherTriggerWorker>();\n        for (int i = 0; i < 5; i++) {\n            WatcherTriggerWorker worker = new WatcherTriggerWorker(manager, paths, watchTriggered);\n            triggerWorkers.add(worker);\n            worker.start();\n        }\n\n        \r\n        \r\n        AtomicInteger watchesAdded = new AtomicInteger();\n        List<AddWatcherWorker> addWorkers = new ArrayList<AddWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            AddWatcherWorker worker = new AddWatcherWorker(manager, paths, watchers, watchesAdded);\n            addWorkers.add(worker);\n            worker.start();\n        }\n\n        while (watchesAdded.get() < 100000) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        \r\n        for (AddWatcherWorker worker : addWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        \r\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n        }\n\n        \r\n        for (WatcherTriggerWorker worker : triggerWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        assertTrue(watchesAdded.get() > 0);\n        assertEquals(watchesAdded.get(), watchTriggered.get());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testRemoveWatcherOnPath(String className) throws IOException {\n        IWatchManager manager = getWatchManager(className);\n        int paths = 10;\n        int watchers = 10000;\n\n        \r\n        \r\n        AtomicInteger watchesRemoved = new AtomicInteger();\n        List<RemoveWatcherWorker> removeWorkers = new ArrayList<RemoveWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            RemoveWatcherWorker worker = new RemoveWatcherWorker(manager, paths, watchers, watchesRemoved);\n            removeWorkers.add(worker);\n            worker.start();\n        }\n\n        \r\n        \r\n        AtomicInteger watchesAdded = new AtomicInteger();\n        List<AddWatcherWorker> addWorkers = new ArrayList<AddWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            AddWatcherWorker worker = new AddWatcherWorker(manager, paths, watchers, watchesAdded);\n            addWorkers.add(worker);\n            worker.start();\n        }\n\n        while (watchesAdded.get() < 100000) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        \r\n        for (RemoveWatcherWorker worker : removeWorkers) {\n            worker.shutdown();\n        }\n        for (AddWatcherWorker worker : addWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n        }\n\n        \r\n        assertTrue(watchesAdded.get() > 0);\n        assertTrue(watchesRemoved.get() > 0);\n        assertTrue(manager.size() > 0);\n        assertEquals(watchesAdded.get(), watchesRemoved.get() + manager.size());\n    }\n","date":"2020-08-04 21:01:52","endLine":343,"groupId":"10327","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testRemoveWatcherOnPath","params":"(StringclassName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/bd/613a44488fe55ae0864ba1e22883e888b7f2c4.src","preCode":"    public void testRemoveWatcherOnPath() throws IOException {\n        IWatchManager manager = getWatchManager();\n        int paths = 10;\n        int watchers = 10000;\n\n        \r\n        \r\n        AtomicInteger watchesRemoved = new AtomicInteger();\n        List<RemoveWatcherWorker> removeWorkers = new ArrayList<RemoveWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            RemoveWatcherWorker worker = new RemoveWatcherWorker(manager, paths, watchers, watchesRemoved);\n            removeWorkers.add(worker);\n            worker.start();\n        }\n\n        \r\n        \r\n        AtomicInteger watchesAdded = new AtomicInteger();\n        List<AddWatcherWorker> addWorkers = new ArrayList<AddWatcherWorker>();\n        for (int i = 0; i < 5; i++) {\n            AddWatcherWorker worker = new AddWatcherWorker(manager, paths, watchers, watchesAdded);\n            addWorkers.add(worker);\n            worker.start();\n        }\n\n        while (watchesAdded.get() < 100000) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n            }\n        }\n\n        \r\n        for (RemoveWatcherWorker worker : removeWorkers) {\n            worker.shutdown();\n        }\n        for (AddWatcherWorker worker : addWorkers) {\n            worker.shutdown();\n        }\n\n        \r\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n        }\n\n        \r\n        assertTrue(watchesAdded.get() > 0);\n        assertTrue(watchesRemoved.get() > 0);\n        assertTrue(manager.size() > 0);\n        assertEquals(watchesAdded.get(), watchesRemoved.get() + manager.size());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
