[{"authorTime":"2018-12-06 17:56:21","codes":[{"authorDate":"2018-12-06 17:56:21","commitOrder":1,"curCode":"    public void testLookingNormal() {\n        Map<Long, Vote> votes = new HashMap<Long, Vote>();\n        votes.put(0L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING));\n        votes.put(1L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING));\n        votes.put(3L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING));\n        votes.put(4L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LEADING));\n\n        Assert.assertTrue(fle.getVoteTracker(votes, \n                new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING)).hasAllQuorums());\n    }\n","date":"2018-12-06 17:56:21","endLine":93,"groupId":"2210","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLookingNormal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/45/5d04f02b0223ef0e54742c7595102a06a7fa4d.src","preCode":"    public void testLookingNormal() {\n        Map<Long, Vote> votes = new HashMap<Long, Vote>();\n        votes.put(0L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING));\n        votes.put(1L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING));\n        votes.put(3L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING));\n        votes.put(4L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LEADING));\n\n        Assert.assertTrue(fle.getVoteTracker(votes, \n                new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING)).hasAllQuorums());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/FLEOutOfElectionTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"},{"authorDate":"2018-12-06 17:56:21","commitOrder":1,"curCode":"    public void testLookingDiffRounds() {\n        HashMap<Long, Vote> votes = new HashMap<Long, Vote>();\n        votes.put(0L, new Vote(4L, ZxidUtils.makeZxid(1, 1), 1, 1, ServerState.LOOKING));\n        votes.put(1L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.LOOKING));\n        votes.put(3L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 3, 2, ServerState.LOOKING));\n        votes.put(4L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 3, 2, ServerState.LEADING));\n\n        Assert.assertFalse(fle.getVoteTracker(votes,\n                new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.LOOKING)).hasAllQuorums());\n    }\n","date":"2018-12-06 17:56:21","endLine":105,"groupId":"2210","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLookingDiffRounds","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/45/5d04f02b0223ef0e54742c7595102a06a7fa4d.src","preCode":"    public void testLookingDiffRounds() {\n        HashMap<Long, Vote> votes = new HashMap<Long, Vote>();\n        votes.put(0L, new Vote(4L, ZxidUtils.makeZxid(1, 1), 1, 1, ServerState.LOOKING));\n        votes.put(1L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.LOOKING));\n        votes.put(3L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 3, 2, ServerState.LOOKING));\n        votes.put(4L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 3, 2, ServerState.LEADING));\n\n        Assert.assertFalse(fle.getVoteTracker(votes,\n                new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.LOOKING)).hasAllQuorums());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/FLEOutOfElectionTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"}],"commitId":"b7403b790ff8729f817680afcdef38cb98b87720","commitMessage":"@@@ZOOKEEPER-1818: Correctly handle potential inconsistent zxid/electionEpoch and peerEpoch during leader election\n\nThis is similar to the 3.4 implementation in Jira ZOOKEEPER-1817.  main differences with that:\n\n1. removed bcVote.  in Vote.equals it will skip compare peerEpoch when one of the version is 0x0.\n2. added detailed scenarios which we tried to solve with peerEpoch update and the change in Vote.equals.\n3. removed ooePredicate with inlined one.  since master code is tracking voteSet..\n4. improved the tests to make it cleaner.\n\nAuthor: Fangmin Lyu <fangmin@apache.org>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #703 from lvfangmin/ZOOKEEPER-1818 and squashes the following commits:\n\n022fcbb78 [Fangmin Lyu] update the comment in the test\nb51e124c4 [Fangmin Lyu] update comment about the JIRA references\nccccac2aa [Fangmin Lyu] Correctly handle potential inconsitent zxid/electionEpoch and peerEpoch during leader election\n","date":"2018-12-06 17:56:21","modifiedFileCount":"3","status":"B","submitter":"Fangmin Lyu"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testLookingNormal() {\n        Map<Long, Vote> votes = new HashMap<Long, Vote>();\n        votes.put(0L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING));\n        votes.put(1L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING));\n        votes.put(3L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING));\n        votes.put(4L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LEADING));\n\n        assertTrue(fle.getVoteTracker(votes, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING)).hasAllQuorums());\n    }\n","date":"2019-08-17 23:13:15","endLine":85,"groupId":"10243","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLookingNormal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b1/b6662786820931ab053fc20407769b1d4f39ae.src","preCode":"    public void testLookingNormal() {\n        Map<Long, Vote> votes = new HashMap<Long, Vote>();\n        votes.put(0L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING));\n        votes.put(1L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING));\n        votes.put(3L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING));\n        votes.put(4L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LEADING));\n\n        Assert.assertTrue(fle.getVoteTracker(votes, \n                new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING)).hasAllQuorums());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/FLEOutOfElectionTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testLookingDiffRounds() {\n        HashMap<Long, Vote> votes = new HashMap<Long, Vote>();\n        votes.put(0L, new Vote(4L, ZxidUtils.makeZxid(1, 1), 1, 1, ServerState.LOOKING));\n        votes.put(1L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.LOOKING));\n        votes.put(3L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 3, 2, ServerState.LOOKING));\n        votes.put(4L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 3, 2, ServerState.LEADING));\n\n        assertFalse(fle.getVoteTracker(votes, new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.LOOKING)).hasAllQuorums());\n    }\n","date":"2019-08-17 23:13:15","endLine":96,"groupId":"10243","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLookingDiffRounds","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b1/b6662786820931ab053fc20407769b1d4f39ae.src","preCode":"    public void testLookingDiffRounds() {\n        HashMap<Long, Vote> votes = new HashMap<Long, Vote>();\n        votes.put(0L, new Vote(4L, ZxidUtils.makeZxid(1, 1), 1, 1, ServerState.LOOKING));\n        votes.put(1L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.LOOKING));\n        votes.put(3L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 3, 2, ServerState.LOOKING));\n        votes.put(4L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 3, 2, ServerState.LEADING));\n\n        Assert.assertFalse(fle.getVoteTracker(votes,\n                new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.LOOKING)).hasAllQuorums());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/FLEOutOfElectionTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"}]
