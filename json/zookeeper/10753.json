[{"authorTime":"2019-08-03 14:42:39","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":5,"curCode":"    private byte[] createSaslToken(\n        final byte[] saslToken,\n        final SaslClient saslClient,\n        final Login login) throws SaslException {\n        if (saslToken == null) {\n            throw new SaslException(\"Error in authenticating with a Zookeeper Quorum member: the quorum member's saslToken is null.\");\n        }\n        if (login.getSubject() != null) {\n            synchronized (login) {\n                try {\n                    final byte[] retval = Subject.doAs(login.getSubject(), new PrivilegedExceptionAction<byte[]>() {\n                        public byte[] run() throws SaslException {\n                            LOG.debug(\"saslClient.evaluateChallenge(len={})\", saslToken.length);\n                            return saslClient.evaluateChallenge(saslToken);\n                        }\n                    });\n                    return retval;\n                } catch (PrivilegedActionException e) {\n                    String error = \"An error: (\" + e + \") occurred when evaluating Zookeeper Quorum Member's received SASL token.\";\n                    \r\n                    \r\n                    \r\n                    final String UNKNOWN_SERVER_ERROR_TEXT = \"(Mechanism level: Server not found in Kerberos database (7) - UNKNOWN_SERVER)\";\n                    if (e.toString().indexOf(UNKNOWN_SERVER_ERROR_TEXT) > -1) {\n                        error += \" This may be caused by Java's being unable to resolve the Zookeeper Quorum Member's\"\n                                 + \" hostname correctly. You may want to try to adding\"\n                                 + \" '-Dsun.net.spi.nameservice.provider.1=dns,sun' to your server's JVMFLAGS environment.\";\n                    }\n                    LOG.error(error);\n                    throw new SaslException(error);\n                }\n            }\n        } else {\n            throw new SaslException(\"Cannot make SASL token without subject defined. \"\n                                    + \"For diagnosis, please look for WARNs and ERRORs in your log related to the Login class.\");\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":203,"groupId":"550","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createSaslToken","params":"(finalbyte[]saslToken@finalSaslClientsaslClient@finalLoginlogin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/bd/d7b7ca70e5b4531e2857e47d111ef6bc005957.src","preCode":"    private byte[] createSaslToken(\n        final byte[] saslToken,\n        final SaslClient saslClient,\n        final Login login) throws SaslException {\n        if (saslToken == null) {\n            throw new SaslException(\"Error in authenticating with a Zookeeper Quorum member: the quorum member's saslToken is null.\");\n        }\n        if (login.getSubject() != null) {\n            synchronized (login) {\n                try {\n                    final byte[] retval = Subject.doAs(login.getSubject(), new PrivilegedExceptionAction<byte[]>() {\n                        public byte[] run() throws SaslException {\n                            LOG.debug(\"saslClient.evaluateChallenge(len={})\", saslToken.length);\n                            return saslClient.evaluateChallenge(saslToken);\n                        }\n                    });\n                    return retval;\n                } catch (PrivilegedActionException e) {\n                    String error = \"An error: (\" + e + \") occurred when evaluating Zookeeper Quorum Member's received SASL token.\";\n                    \r\n                    \r\n                    \r\n                    final String UNKNOWN_SERVER_ERROR_TEXT = \"(Mechanism level: Server not found in Kerberos database (7) - UNKNOWN_SERVER)\";\n                    if (e.toString().indexOf(UNKNOWN_SERVER_ERROR_TEXT) > -1) {\n                        error += \" This may be caused by Java's being unable to resolve the Zookeeper Quorum Member's\"\n                                 + \" hostname correctly. You may want to try to adding\"\n                                 + \" '-Dsun.net.spi.nameservice.provider.1=dns,sun' to your server's JVMFLAGS environment.\";\n                    }\n                    LOG.error(error);\n                    throw new SaslException(error);\n                }\n            }\n        } else {\n            throw new SaslException(\"Cannot make SASL token without subject defined. \"\n                                    + \"For diagnosis, please look for WARNs and ERRORs in your log related to the Login class.\");\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumAuthLearner.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"MB"},{"authorDate":"2019-08-03 14:42:39","commitOrder":5,"curCode":"    private byte[] createSaslToken(final byte[] saslToken) throws SaslException {\n        if (saslToken == null) {\n            \r\n            saslState = SaslState.FAILED;\n            throw new SaslException(\"Error in authenticating with a Zookeeper Quorum member: the quorum member's saslToken is null.\");\n        }\n\n        Subject subject = login.getSubject();\n        if (subject != null) {\n            synchronized(login) {\n                try {\n                    final byte[] retval =\n                        Subject.doAs(subject, new PrivilegedExceptionAction<byte[]>() {\n                                public byte[] run() throws SaslException {\n                                    LOG.debug(\"saslClient.evaluateChallenge(len={})\", saslToken.length);\n                                    return saslClient.evaluateChallenge(saslToken);\n                                }\n                            });\n                    return retval;\n                }\n                catch (PrivilegedActionException e) {\n                    String error = \"An error: (\" + e + \") occurred when evaluating Zookeeper Quorum Member's \" +\n                      \" received SASL token.\";\n                    \r\n                    \r\n                    final String UNKNOWN_SERVER_ERROR_TEXT =\n                      \"(Mechanism level: Server not found in Kerberos database (7) - UNKNOWN_SERVER)\";\n                    if (e.toString().contains(UNKNOWN_SERVER_ERROR_TEXT)) {\n                        error += \" This may be caused by Java's being unable to resolve the Zookeeper Quorum Member's\" +\n                          \" hostname correctly. You may want to try to adding\" +\n                          \" '-Dsun.net.spi.nameservice.provider.1=dns,sun' to your client's JVMFLAGS environment.\";\n                    }\n                    error += \" Zookeeper Client will go to AUTH_FAILED state.\";\n                    LOG.error(error);\n                    saslState = SaslState.FAILED;\n                    throw new SaslException(error);\n                }\n            }\n        }\n        else {\n            throw new SaslException(\"Cannot make SASL token without subject defined. \" +\n              \"For diagnosis, please look for WARNs and ERRORs in your log related to the Login class.\");\n        }\n    }\n","date":"2019-08-03 14:42:39","endLine":353,"groupId":"64","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createSaslToken","params":"(finalbyte[]saslToken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b8/c2aaa8fef85961a69f3776bed9f0b87d7b2811.src","preCode":"    private byte[] createSaslToken(final byte[] saslToken) throws SaslException {\n        if (saslToken == null) {\n            \r\n            saslState = SaslState.FAILED;\n            throw new SaslException(\"Error in authenticating with a Zookeeper Quorum member: the quorum member's saslToken is null.\");\n        }\n\n        Subject subject = login.getSubject();\n        if (subject != null) {\n            synchronized(login) {\n                try {\n                    final byte[] retval =\n                        Subject.doAs(subject, new PrivilegedExceptionAction<byte[]>() {\n                                public byte[] run() throws SaslException {\n                                    LOG.debug(\"saslClient.evaluateChallenge(len={})\", saslToken.length);\n                                    return saslClient.evaluateChallenge(saslToken);\n                                }\n                            });\n                    return retval;\n                }\n                catch (PrivilegedActionException e) {\n                    String error = \"An error: (\" + e + \") occurred when evaluating Zookeeper Quorum Member's \" +\n                      \" received SASL token.\";\n                    \r\n                    \r\n                    final String UNKNOWN_SERVER_ERROR_TEXT =\n                      \"(Mechanism level: Server not found in Kerberos database (7) - UNKNOWN_SERVER)\";\n                    if (e.toString().contains(UNKNOWN_SERVER_ERROR_TEXT)) {\n                        error += \" This may be caused by Java's being unable to resolve the Zookeeper Quorum Member's\" +\n                          \" hostname correctly. You may want to try to adding\" +\n                          \" '-Dsun.net.spi.nameservice.provider.1=dns,sun' to your client's JVMFLAGS environment.\";\n                    }\n                    error += \" Zookeeper Client will go to AUTH_FAILED state.\";\n                    LOG.error(error);\n                    saslState = SaslState.FAILED;\n                    throw new SaslException(error);\n                }\n            }\n        }\n        else {\n            throw new SaslException(\"Cannot make SASL token without subject defined. \" +\n              \"For diagnosis, please look for WARNs and ERRORs in your log related to the Login class.\");\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"NB"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-02-04 17:39:02","codes":[{"authorDate":"2020-02-04 17:39:02","commitOrder":6,"curCode":"    private byte[] createSaslToken(\n        final byte[] saslToken,\n        final SaslClient saslClient,\n        final Login login) throws SaslException {\n        if (saslToken == null) {\n            throw new SaslException(\"Error in authenticating with a Zookeeper Quorum member: the quorum member's saslToken is null.\");\n        }\n        if (login.getSubject() != null) {\n            synchronized (login) {\n                try {\n                    final byte[] retval = Subject.doAs(login.getSubject(), new PrivilegedExceptionAction<byte[]>() {\n                        public byte[] run() throws SaslException {\n                            LOG.debug(\"saslClient.evaluateChallenge(len={})\", saslToken.length);\n                            return saslClient.evaluateChallenge(saslToken);\n                        }\n                    });\n                    return retval;\n                } catch (PrivilegedActionException e) {\n                    String error = \"An error: (\" + e + \") occurred when evaluating Zookeeper Quorum Member's received SASL token.\";\n                    \r\n                    \r\n                    \r\n                    final String UNKNOWN_SERVER_ERROR_TEXT = \"(Mechanism level: Server not found in Kerberos database (7) - UNKNOWN_SERVER)\";\n                    if (e.toString().indexOf(UNKNOWN_SERVER_ERROR_TEXT) > -1) {\n                        error += \" This may be caused by Java's being unable to resolve the Zookeeper Quorum Member's\"\n                                 + \" hostname correctly. You may want to try to adding\"\n                                 + \" '-Dsun.net.spi.nameservice.provider.1=dns,sun' to your server's JVMFLAGS environment.\";\n                    }\n                    LOG.error(error);\n                    throw new SaslException(error, e);\n                }\n            }\n        } else {\n            throw new SaslException(\"Cannot make SASL token without subject defined. \"\n                                    + \"For diagnosis, please look for WARNs and ERRORs in your log related to the Login class.\");\n        }\n    }\n","date":"2020-02-04 17:39:02","endLine":205,"groupId":"10753","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"createSaslToken","params":"(finalbyte[]saslToken@finalSaslClientsaslClient@finalLoginlogin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/12/cec788a65179f9ce6328a3d622085327afd552.src","preCode":"    private byte[] createSaslToken(\n        final byte[] saslToken,\n        final SaslClient saslClient,\n        final Login login) throws SaslException {\n        if (saslToken == null) {\n            throw new SaslException(\"Error in authenticating with a Zookeeper Quorum member: the quorum member's saslToken is null.\");\n        }\n        if (login.getSubject() != null) {\n            synchronized (login) {\n                try {\n                    final byte[] retval = Subject.doAs(login.getSubject(), new PrivilegedExceptionAction<byte[]>() {\n                        public byte[] run() throws SaslException {\n                            LOG.debug(\"saslClient.evaluateChallenge(len={})\", saslToken.length);\n                            return saslClient.evaluateChallenge(saslToken);\n                        }\n                    });\n                    return retval;\n                } catch (PrivilegedActionException e) {\n                    String error = \"An error: (\" + e + \") occurred when evaluating Zookeeper Quorum Member's received SASL token.\";\n                    \r\n                    \r\n                    \r\n                    final String UNKNOWN_SERVER_ERROR_TEXT = \"(Mechanism level: Server not found in Kerberos database (7) - UNKNOWN_SERVER)\";\n                    if (e.toString().indexOf(UNKNOWN_SERVER_ERROR_TEXT) > -1) {\n                        error += \" This may be caused by Java's being unable to resolve the Zookeeper Quorum Member's\"\n                                 + \" hostname correctly. You may want to try to adding\"\n                                 + \" '-Dsun.net.spi.nameservice.provider.1=dns,sun' to your server's JVMFLAGS environment.\";\n                    }\n                    LOG.error(error);\n                    throw new SaslException(error);\n                }\n            }\n        } else {\n            throw new SaslException(\"Cannot make SASL token without subject defined. \"\n                                    + \"For diagnosis, please look for WARNs and ERRORs in your log related to the Login class.\");\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumAuthLearner.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"},{"authorDate":"2020-02-04 17:39:02","commitOrder":6,"curCode":"    private byte[] createSaslToken(final byte[] saslToken) throws SaslException {\n        if (saslToken == null) {\n            \r\n            saslState = SaslState.FAILED;\n            throw new SaslException(\"Error in authenticating with a Zookeeper Quorum member: the quorum member's saslToken is null.\");\n        }\n\n        Subject subject = login.getSubject();\n        if (subject != null) {\n            synchronized (login) {\n                try {\n                    final byte[] retval = Subject.doAs(subject, new PrivilegedExceptionAction<byte[]>() {\n                        public byte[] run() throws SaslException {\n                            LOG.debug(\"saslClient.evaluateChallenge(len={})\", saslToken.length);\n                            return saslClient.evaluateChallenge(saslToken);\n                        }\n                    });\n                    return retval;\n                } catch (PrivilegedActionException e) {\n                    String error = \"An error: (\" + e + \") occurred when evaluating Zookeeper Quorum Member's \"\n                                   + \" received SASL token.\";\n                    \r\n                    \r\n                    final String UNKNOWN_SERVER_ERROR_TEXT = \"(Mechanism level: Server not found in Kerberos database (7) - UNKNOWN_SERVER)\";\n                    if (e.toString().contains(UNKNOWN_SERVER_ERROR_TEXT)) {\n                        error += \" This may be caused by Java's being unable to resolve the Zookeeper Quorum Member's\"\n                                 + \" hostname correctly. You may want to try to adding\"\n                                 + \" '-Dsun.net.spi.nameservice.provider.1=dns,sun' to your client's JVMFLAGS environment.\";\n                    }\n                    error += \" Zookeeper Client will go to AUTH_FAILED state.\";\n                    LOG.error(error);\n                    saslState = SaslState.FAILED;\n                    throw new SaslException(error, e);\n                }\n            }\n        } else {\n            throw new SaslException(\"Cannot make SASL token without subject defined. \"\n                                    + \"For diagnosis, please look for WARNs and ERRORs in your log related to the Login class.\");\n        }\n    }\n","date":"2020-02-04 17:39:02","endLine":345,"groupId":"10753","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"createSaslToken","params":"(finalbyte[]saslToken)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b0/598bca87fb5b06b375092573edf42ec1378991.src","preCode":"    private byte[] createSaslToken(final byte[] saslToken) throws SaslException {\n        if (saslToken == null) {\n            \r\n            saslState = SaslState.FAILED;\n            throw new SaslException(\"Error in authenticating with a Zookeeper Quorum member: the quorum member's saslToken is null.\");\n        }\n\n        Subject subject = login.getSubject();\n        if (subject != null) {\n            synchronized (login) {\n                try {\n                    final byte[] retval = Subject.doAs(subject, new PrivilegedExceptionAction<byte[]>() {\n                        public byte[] run() throws SaslException {\n                            LOG.debug(\"saslClient.evaluateChallenge(len={})\", saslToken.length);\n                            return saslClient.evaluateChallenge(saslToken);\n                        }\n                    });\n                    return retval;\n                } catch (PrivilegedActionException e) {\n                    String error = \"An error: (\" + e + \") occurred when evaluating Zookeeper Quorum Member's \"\n                                   + \" received SASL token.\";\n                    \r\n                    \r\n                    final String UNKNOWN_SERVER_ERROR_TEXT = \"(Mechanism level: Server not found in Kerberos database (7) - UNKNOWN_SERVER)\";\n                    if (e.toString().contains(UNKNOWN_SERVER_ERROR_TEXT)) {\n                        error += \" This may be caused by Java's being unable to resolve the Zookeeper Quorum Member's\"\n                                 + \" hostname correctly. You may want to try to adding\"\n                                 + \" '-Dsun.net.spi.nameservice.provider.1=dns,sun' to your client's JVMFLAGS environment.\";\n                    }\n                    error += \" Zookeeper Client will go to AUTH_FAILED state.\";\n                    LOG.error(error);\n                    saslState = SaslState.FAILED;\n                    throw new SaslException(error);\n                }\n            }\n        } else {\n            throw new SaslException(\"Cannot make SASL token without subject defined. \"\n                                    + \"For diagnosis, please look for WARNs and ERRORs in your log related to the Login class.\");\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"M"}],"commitId":"6763f73cb64d87145e8e642d9e4fcc1e0d509216","commitMessage":"@@@ZOOKEEPER-3715: fix Kerberos test failures for new JDK versions\n\nUsing OpenJDK 8u.242 or OpenJDK 11.0.6.  we have some kerberos exceptions\nwhen running the following.  Kerberos Authentication related tests:\n-?QuorumKerberosAuthTest\n-?QuorumKerberosHostBasedAuthTest\n-?SaslKerberosAuthOverSSLTest\n\nAfter trying this with different JDK versions.  we see that?the problem\nseems to appear:\n- between OpenJDK 8u.232 and 8u.242 for java 8\n- and between?11.0.3 and 11.0.6 for java 11\n\nThere are a lot of kerberos related changes after 8u.232:\nsee?https://hg.openjdk.java.net/jdk8u/jdk8u/jdk\n\nI didn't really found the root cause of the issue.  but the problem disappeared\nafter upgrading the Apache Kerby. Kerby is used only by the tests to start a local\nembedded KDC server. I also checked the dependencies of the new Kerby version\nand there is nothing to exclude there as far as I saw.\n\nI also improved the logging of errors during Kerberos authentication problems by\nprinting out some more exceptions.\n\nAuthor: Mate Szalay-Beko <szalay.beko.mate@gmail.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1244 from symat/ZOOKEEPER-3715\n","date":"2020-02-04 17:39:02","modifiedFileCount":"2","status":"M","submitter":"Mate Szalay-Beko"}]
