[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"  private void delete_create_get_set_test_1() throws\n          IOException, InterruptedException, KeeperException {\n    checkRoot();\n    ZooKeeper zk = new ZooKeeper(hostPort, 10000, this);\n    String parentName = testDirOnZK;\n    String nodeName = parentName + \"/benwashere\";\n    try {\n      zk.delete(nodeName, -1);\n    } catch (KeeperException ke) {\n      Code code = ke.code();\n      boolean valid = code == KeeperException.Code.NONODE\n          || code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        Assert.fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n    try {\n      zk.create(nodeName, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n    } catch (KeeperException ke) {\n      Code code = ke.code();\n      boolean valid = code == KeeperException.Code.NODEEXISTS;\n      if (!valid) {\n        Assert.fail(\"Unexpected exception code for create: \" + ke.getMessage());\n      }\n    }\n    try {\n      zk.setData(nodeName, \"hi\".getBytes(), 5700);\n      Assert.fail(\"Should have gotten BadVersion exception\");\n    } catch (KeeperException ke) {\n      if (ke.code() != Code.BADVERSION) {\n        Assert.fail(\"Should have gotten BadVersion exception\");\n      }\n    }\n    zk.setData(nodeName, \"hi\".getBytes(), -1);\n    Stat st = new Stat();\n    byte[] bytes = zk.getData(nodeName, false, st);\n    String retrieved = new String(bytes);\n    if (!\"hi\".equals(retrieved)) {\n      Assert.fail(\"The retrieved data [\" + retrieved\n          + \"] is differented than the expected [hi]\");\n    }\n    try {\n      zk.delete(nodeName, 6800);\n      Assert.fail(\"Should have gotten BadVersion exception\");\n    } catch (KeeperException ke) {\n      Code code = ke.code();\n      boolean valid = code == KeeperException.Code.NOTEMPTY\n          || code == KeeperException.Code.BADVERSION;\n      if (!valid) {\n        Assert.fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n    try {\n      zk.delete(nodeName, -1);\n    } catch (KeeperException ke) {\n      Code code = ke.code();\n      boolean valid = code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        Assert.fail(\"Unexpected exception code for delete: \" + code);\n      }\n    }\n    deleteZKDir(zk, nodeName);\n    zk.close();\n  }\n","date":"2018-10-19 20:39:50","endLine":399,"groupId":"1025","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"delete_create_get_set_test_1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a0/cba912cfa556d491514073dc001d60459efe81.src","preCode":"  private void delete_create_get_set_test_1() throws\n          IOException, InterruptedException, KeeperException {\n    checkRoot();\n    ZooKeeper zk = new ZooKeeper(hostPort, 10000, this);\n    String parentName = testDirOnZK;\n    String nodeName = parentName + \"/benwashere\";\n    try {\n      zk.delete(nodeName, -1);\n    } catch (KeeperException ke) {\n      Code code = ke.code();\n      boolean valid = code == KeeperException.Code.NONODE\n          || code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        Assert.fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n    try {\n      zk.create(nodeName, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n    } catch (KeeperException ke) {\n      Code code = ke.code();\n      boolean valid = code == KeeperException.Code.NODEEXISTS;\n      if (!valid) {\n        Assert.fail(\"Unexpected exception code for create: \" + ke.getMessage());\n      }\n    }\n    try {\n      zk.setData(nodeName, \"hi\".getBytes(), 5700);\n      Assert.fail(\"Should have gotten BadVersion exception\");\n    } catch (KeeperException ke) {\n      if (ke.code() != Code.BADVERSION) {\n        Assert.fail(\"Should have gotten BadVersion exception\");\n      }\n    }\n    zk.setData(nodeName, \"hi\".getBytes(), -1);\n    Stat st = new Stat();\n    byte[] bytes = zk.getData(nodeName, false, st);\n    String retrieved = new String(bytes);\n    if (!\"hi\".equals(retrieved)) {\n      Assert.fail(\"The retrieved data [\" + retrieved\n          + \"] is differented than the expected [hi]\");\n    }\n    try {\n      zk.delete(nodeName, 6800);\n      Assert.fail(\"Should have gotten BadVersion exception\");\n    } catch (KeeperException ke) {\n      Code code = ke.code();\n      boolean valid = code == KeeperException.Code.NOTEMPTY\n          || code == KeeperException.Code.BADVERSION;\n      if (!valid) {\n        Assert.fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n    try {\n      zk.delete(nodeName, -1);\n    } catch (KeeperException ke) {\n      Code code = ke.code();\n      boolean valid = code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        Assert.fail(\"Unexpected exception code for delete: \" + code);\n      }\n    }\n    deleteZKDir(zk, nodeName);\n    zk.close();\n  }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ZooKeeperTestClient.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"  private void deleteNodeIfExists(ZooKeeper zk, String nodeName)\n      throws InterruptedException {\n    try {\n      zk.delete(nodeName, -1);\n    } catch (KeeperException ke) {\n      Code code = ke.code();\n      boolean valid = code == KeeperException.Code.NONODE ||\n                      code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        Assert.fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n  }\n","date":"2018-10-19 20:39:50","endLine":413,"groupId":"1025","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteNodeIfExists","params":"(ZooKeeperzk@StringnodeName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a0/cba912cfa556d491514073dc001d60459efe81.src","preCode":"  private void deleteNodeIfExists(ZooKeeper zk, String nodeName)\n      throws InterruptedException {\n    try {\n      zk.delete(nodeName, -1);\n    } catch (KeeperException ke) {\n      Code code = ke.code();\n      boolean valid = code == KeeperException.Code.NONODE ||\n                      code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        Assert.fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n  }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ZooKeeperTestClient.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    private void delete_create_get_set_test_1() throws IOException, InterruptedException, KeeperException {\n        checkRoot();\n        ZooKeeper zk = new ZooKeeper(hostPort, 10000, this);\n        String parentName = testDirOnZK;\n        String nodeName = parentName + \"/benwashere\";\n        try {\n            zk.delete(nodeName, -1);\n        } catch (KeeperException ke) {\n            Code code = ke.code();\n            boolean valid = code == KeeperException.Code.NONODE || code == KeeperException.Code.NOTEMPTY;\n            if (!valid) {\n                fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n            }\n        }\n        try {\n            zk.create(nodeName, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        } catch (KeeperException ke) {\n            Code code = ke.code();\n            boolean valid = code == KeeperException.Code.NODEEXISTS;\n            if (!valid) {\n                fail(\"Unexpected exception code for create: \" + ke.getMessage());\n            }\n        }\n        try {\n            zk.setData(nodeName, \"hi\".getBytes(), 5700);\n            fail(\"Should have gotten BadVersion exception\");\n        } catch (KeeperException ke) {\n            if (ke.code() != Code.BADVERSION) {\n                fail(\"Should have gotten BadVersion exception\");\n            }\n        }\n        zk.setData(nodeName, \"hi\".getBytes(), -1);\n        Stat st = new Stat();\n        byte[] bytes = zk.getData(nodeName, false, st);\n        String retrieved = new String(bytes);\n        if (!\"hi\".equals(retrieved)) {\n            fail(\"The retrieved data [\" + retrieved + \"] is differented than the expected [hi]\");\n        }\n        try {\n            zk.delete(nodeName, 6800);\n            fail(\"Should have gotten BadVersion exception\");\n        } catch (KeeperException ke) {\n            Code code = ke.code();\n            boolean valid = code == KeeperException.Code.NOTEMPTY || code == KeeperException.Code.BADVERSION;\n            if (!valid) {\n                fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n            }\n        }\n        try {\n            zk.delete(nodeName, -1);\n        } catch (KeeperException ke) {\n            Code code = ke.code();\n            boolean valid = code == KeeperException.Code.NOTEMPTY;\n            if (!valid) {\n                fail(\"Unexpected exception code for delete: \" + code);\n            }\n        }\n        deleteZKDir(zk, nodeName);\n        zk.close();\n    }\n","date":"2019-08-17 23:13:15","endLine":391,"groupId":"10548","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"delete_create_get_set_test_1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/42/f0ebee7516b9ef1c0fff5c633b52093d48a56f.src","preCode":"  private void delete_create_get_set_test_1() throws\n          IOException, InterruptedException, KeeperException {\n    checkRoot();\n    ZooKeeper zk = new ZooKeeper(hostPort, 10000, this);\n    String parentName = testDirOnZK;\n    String nodeName = parentName + \"/benwashere\";\n    try {\n      zk.delete(nodeName, -1);\n    } catch (KeeperException ke) {\n      Code code = ke.code();\n      boolean valid = code == KeeperException.Code.NONODE\n          || code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        Assert.fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n    try {\n      zk.create(nodeName, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n    } catch (KeeperException ke) {\n      Code code = ke.code();\n      boolean valid = code == KeeperException.Code.NODEEXISTS;\n      if (!valid) {\n        Assert.fail(\"Unexpected exception code for create: \" + ke.getMessage());\n      }\n    }\n    try {\n      zk.setData(nodeName, \"hi\".getBytes(), 5700);\n      Assert.fail(\"Should have gotten BadVersion exception\");\n    } catch (KeeperException ke) {\n      if (ke.code() != Code.BADVERSION) {\n        Assert.fail(\"Should have gotten BadVersion exception\");\n      }\n    }\n    zk.setData(nodeName, \"hi\".getBytes(), -1);\n    Stat st = new Stat();\n    byte[] bytes = zk.getData(nodeName, false, st);\n    String retrieved = new String(bytes);\n    if (!\"hi\".equals(retrieved)) {\n      Assert.fail(\"The retrieved data [\" + retrieved\n          + \"] is differented than the expected [hi]\");\n    }\n    try {\n      zk.delete(nodeName, 6800);\n      Assert.fail(\"Should have gotten BadVersion exception\");\n    } catch (KeeperException ke) {\n      Code code = ke.code();\n      boolean valid = code == KeeperException.Code.NOTEMPTY\n          || code == KeeperException.Code.BADVERSION;\n      if (!valid) {\n        Assert.fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n    try {\n      zk.delete(nodeName, -1);\n    } catch (KeeperException ke) {\n      Code code = ke.code();\n      boolean valid = code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        Assert.fail(\"Unexpected exception code for delete: \" + code);\n      }\n    }\n    deleteZKDir(zk, nodeName);\n    zk.close();\n  }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ZooKeeperTestClient.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    private void deleteNodeIfExists(ZooKeeper zk, String nodeName) throws InterruptedException {\n        try {\n            zk.delete(nodeName, -1);\n        } catch (KeeperException ke) {\n            Code code = ke.code();\n            boolean valid = code == KeeperException.Code.NONODE || code == KeeperException.Code.NOTEMPTY;\n            if (!valid) {\n                fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n            }\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":403,"groupId":"10548","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteNodeIfExists","params":"(ZooKeeperzk@StringnodeName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/42/f0ebee7516b9ef1c0fff5c633b52093d48a56f.src","preCode":"  private void deleteNodeIfExists(ZooKeeper zk, String nodeName)\n      throws InterruptedException {\n    try {\n      zk.delete(nodeName, -1);\n    } catch (KeeperException ke) {\n      Code code = ke.code();\n      boolean valid = code == KeeperException.Code.NONODE ||\n                      code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        Assert.fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n  }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ZooKeeperTestClient.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"}]
