[{"authorTime":"2019-06-04 16:55:09","codes":[{"authorDate":"2019-06-04 16:55:09","commitOrder":1,"curCode":"    protected void unregisterMetrics() {\n\n        MetricsContext rootContext = ServerMetrics\n                .getMetrics()\n                .getMetricsProvider()\n                .getRootContext();\n\n        rootContext.unregisterGauge(\"avg_latency\");\n\n        rootContext.unregisterGauge(\"max_latency\");\n        rootContext.unregisterGauge(\"min_latency\");\n\n        rootContext.unregisterGauge(\"packets_received\");\n        rootContext.unregisterGauge(\"packets_sent\");\n        rootContext.unregisterGauge(\"num_alive_connections\");\n\n        rootContext.unregisterGauge(\"outstanding_requests\");\n        rootContext.unregisterGauge(\"uptime\");\n\n        rootContext.unregisterGauge(\"znode_count\");\n\n        rootContext.unregisterGauge(\"watch_count\");\n        rootContext.unregisterGauge(\"ephemerals_count\");\n        rootContext.unregisterGauge(\"approximate_data_size\");\n\n        rootContext.unregisterGauge(\"global_sessions\");\n        rootContext.unregisterGauge(\"local_sessions\");\n\n        rootContext.unregisterGauge(\"open_file_descriptor_count\");\n        rootContext.unregisterGauge(\"max_file_descriptor_count\");\n        rootContext.unregisterGauge(\"connection_drop_probability\");\n\n        rootContext.unregisterGauge(\"last_client_response_size\");\n        rootContext.unregisterGauge(\"max_client_response_size\");\n        rootContext.unregisterGauge(\"min_client_response_size\");\n\n    }\n","date":"2019-06-04 16:55:09","endLine":1531,"groupId":"2506","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unregisterMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/51/17bd8bf4f6ecc259247f64ffa69c57d87600fc.src","preCode":"    protected void unregisterMetrics() {\n\n        MetricsContext rootContext = ServerMetrics\n                .getMetrics()\n                .getMetricsProvider()\n                .getRootContext();\n\n        rootContext.unregisterGauge(\"avg_latency\");\n\n        rootContext.unregisterGauge(\"max_latency\");\n        rootContext.unregisterGauge(\"min_latency\");\n\n        rootContext.unregisterGauge(\"packets_received\");\n        rootContext.unregisterGauge(\"packets_sent\");\n        rootContext.unregisterGauge(\"num_alive_connections\");\n\n        rootContext.unregisterGauge(\"outstanding_requests\");\n        rootContext.unregisterGauge(\"uptime\");\n\n        rootContext.unregisterGauge(\"znode_count\");\n\n        rootContext.unregisterGauge(\"watch_count\");\n        rootContext.unregisterGauge(\"ephemerals_count\");\n        rootContext.unregisterGauge(\"approximate_data_size\");\n\n        rootContext.unregisterGauge(\"global_sessions\");\n        rootContext.unregisterGauge(\"local_sessions\");\n\n        rootContext.unregisterGauge(\"open_file_descriptor_count\");\n        rootContext.unregisterGauge(\"max_file_descriptor_count\");\n        rootContext.unregisterGauge(\"connection_drop_probability\");\n\n        rootContext.unregisterGauge(\"last_client_response_size\");\n        rootContext.unregisterGauge(\"max_client_response_size\");\n        rootContext.unregisterGauge(\"min_client_response_size\");\n\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":1495,"status":"B"},{"authorDate":"2019-06-04 16:55:09","commitOrder":1,"curCode":"    protected void unregisterMetrics() {\n        super.unregisterMetrics();\n\n        MetricsContext rootContext = ServerMetrics\n                .getMetrics()\n                .getMetricsProvider()\n                .getRootContext();\n        rootContext.unregisterGauge(\"learners\");\n        rootContext.unregisterGauge(\"synced_followers\");\n        rootContext.unregisterGauge(\"synced_non_voting_followers\");\n        rootContext.unregisterGauge(\"synced_observers\");\n        rootContext.unregisterGauge(\"pending_syncs\");\n        rootContext.unregisterGauge(\"leader_uptime\");\n\n        rootContext.unregisterGauge(\"last_proposal_size\");\n        rootContext.unregisterGauge(\"max_proposal_size\");\n        rootContext.unregisterGauge(\"min_proposal_size\");\n    }\n","date":"2019-06-04 16:55:09","endLine":155,"groupId":"2506","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unregisterMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/74/a738f258b946af4fe642534986dce83627e7cf.src","preCode":"    protected void unregisterMetrics() {\n        super.unregisterMetrics();\n\n        MetricsContext rootContext = ServerMetrics\n                .getMetrics()\n                .getMetricsProvider()\n                .getRootContext();\n        rootContext.unregisterGauge(\"learners\");\n        rootContext.unregisterGauge(\"synced_followers\");\n        rootContext.unregisterGauge(\"synced_non_voting_followers\");\n        rootContext.unregisterGauge(\"synced_observers\");\n        rootContext.unregisterGauge(\"pending_syncs\");\n        rootContext.unregisterGauge(\"leader_uptime\");\n\n        rootContext.unregisterGauge(\"last_proposal_size\");\n        rootContext.unregisterGauge(\"max_proposal_size\");\n        rootContext.unregisterGauge(\"min_proposal_size\");\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"}],"commitId":"6af151a7e44760c33165e58d3b33a4d2760283a4","commitMessage":"@@@ZOOKEEPER-3366: Pluggable metrics system for ZooKeeper - move remaining metrics to MetricsProvider\n\nMigrate all remaining metrics to MetricsProvider.\nWe are introducing now *Gauges* which are callbacks to be called when the Provider needs to publish current values.  a Gauge is a numeric value that can go up and down.\n\nAs during the lifecycle of a ZK server process we can have several ZooKeeperServer instances (we have several subclasses).  depending on the role of the local peer.  sometimes we have to clean up unused Gauges.\nThe old approach  in 4lw and on http admin  API was to hard code metrics.  with multiple 'instanceof' conditions.\nSo we introduce ZooKeeperServer#registerMetrics and ZooKeeperServer#unregisterMetrics: these overridable functions enable each  ZooKeeperServer subclass to declare specific Gauges.\nWe are also introducing ZooKeeperServer#collectMonitorValues in order to push non-metrics to monitor commands (admin and 4lw).  like \"server state\" or \"version\".\n\nAuthor: Enrico Olivelli <eolivelli@apache.org>\n\nReviewers: Norbert Kalmar <nkalmar@apache.org>\n\nCloses #918 from eolivelli/fix/other-metrics\n","date":"2019-06-04 16:55:09","modifiedFileCount":"15","status":"B","submitter":"Enrico Olivelli"},{"authorTime":"2019-06-04 16:55:09","codes":[{"authorDate":"2020-11-16 18:00:18","commitOrder":2,"curCode":"    protected void unregisterMetrics() {\n\n        MetricsContext rootContext = ServerMetrics.getMetrics().getMetricsProvider().getRootContext();\n\n        rootContext.unregisterGauge(\"avg_latency\");\n\n        rootContext.unregisterGauge(\"max_latency\");\n        rootContext.unregisterGauge(\"min_latency\");\n\n        rootContext.unregisterGauge(\"packets_received\");\n        rootContext.unregisterGauge(\"packets_sent\");\n        rootContext.unregisterGauge(\"num_alive_connections\");\n\n        rootContext.unregisterGauge(\"outstanding_requests\");\n        rootContext.unregisterGauge(\"uptime\");\n\n        rootContext.unregisterGauge(\"znode_count\");\n\n        rootContext.unregisterGauge(\"watch_count\");\n        rootContext.unregisterGauge(\"ephemerals_count\");\n        rootContext.unregisterGauge(\"approximate_data_size\");\n\n        rootContext.unregisterGauge(\"global_sessions\");\n        rootContext.unregisterGauge(\"local_sessions\");\n\n        rootContext.unregisterGauge(\"open_file_descriptor_count\");\n        rootContext.unregisterGauge(\"max_file_descriptor_count\");\n        rootContext.unregisterGauge(\"connection_drop_probability\");\n\n        rootContext.unregisterGauge(\"last_client_response_size\");\n        rootContext.unregisterGauge(\"max_client_response_size\");\n        rootContext.unregisterGauge(\"min_client_response_size\");\n\n        rootContext.unregisterGauge(\"auth_failed_count\");\n        rootContext.unregisterGauge(\"non_mtls_remote_conn_count\");\n        rootContext.unregisterGauge(\"non_mtls_local_conn_count\");\n\n\n    }\n","date":"2020-11-16 18:00:18","endLine":1940,"groupId":"2506","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unregisterMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/00/d6ed8f00c2e4f1760f9649c45cc3f30f20ecab.src","preCode":"    protected void unregisterMetrics() {\n\n        MetricsContext rootContext = ServerMetrics.getMetrics().getMetricsProvider().getRootContext();\n\n        rootContext.unregisterGauge(\"avg_latency\");\n\n        rootContext.unregisterGauge(\"max_latency\");\n        rootContext.unregisterGauge(\"min_latency\");\n\n        rootContext.unregisterGauge(\"packets_received\");\n        rootContext.unregisterGauge(\"packets_sent\");\n        rootContext.unregisterGauge(\"num_alive_connections\");\n\n        rootContext.unregisterGauge(\"outstanding_requests\");\n        rootContext.unregisterGauge(\"uptime\");\n\n        rootContext.unregisterGauge(\"znode_count\");\n\n        rootContext.unregisterGauge(\"watch_count\");\n        rootContext.unregisterGauge(\"ephemerals_count\");\n        rootContext.unregisterGauge(\"approximate_data_size\");\n\n        rootContext.unregisterGauge(\"global_sessions\");\n        rootContext.unregisterGauge(\"local_sessions\");\n\n        rootContext.unregisterGauge(\"open_file_descriptor_count\");\n        rootContext.unregisterGauge(\"max_file_descriptor_count\");\n        rootContext.unregisterGauge(\"connection_drop_probability\");\n\n        rootContext.unregisterGauge(\"last_client_response_size\");\n        rootContext.unregisterGauge(\"max_client_response_size\");\n        rootContext.unregisterGauge(\"min_client_response_size\");\n\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":1902,"status":"M"},{"authorDate":"2019-06-04 16:55:09","commitOrder":2,"curCode":"    protected void unregisterMetrics() {\n        super.unregisterMetrics();\n\n        MetricsContext rootContext = ServerMetrics\n                .getMetrics()\n                .getMetricsProvider()\n                .getRootContext();\n        rootContext.unregisterGauge(\"learners\");\n        rootContext.unregisterGauge(\"synced_followers\");\n        rootContext.unregisterGauge(\"synced_non_voting_followers\");\n        rootContext.unregisterGauge(\"synced_observers\");\n        rootContext.unregisterGauge(\"pending_syncs\");\n        rootContext.unregisterGauge(\"leader_uptime\");\n\n        rootContext.unregisterGauge(\"last_proposal_size\");\n        rootContext.unregisterGauge(\"max_proposal_size\");\n        rootContext.unregisterGauge(\"min_proposal_size\");\n    }\n","date":"2019-06-04 16:55:09","endLine":155,"groupId":"2506","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unregisterMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/74/a738f258b946af4fe642534986dce83627e7cf.src","preCode":"    protected void unregisterMetrics() {\n        super.unregisterMetrics();\n\n        MetricsContext rootContext = ServerMetrics\n                .getMetrics()\n                .getMetricsProvider()\n                .getRootContext();\n        rootContext.unregisterGauge(\"learners\");\n        rootContext.unregisterGauge(\"synced_followers\");\n        rootContext.unregisterGauge(\"synced_non_voting_followers\");\n        rootContext.unregisterGauge(\"synced_observers\");\n        rootContext.unregisterGauge(\"pending_syncs\");\n        rootContext.unregisterGauge(\"leader_uptime\");\n\n        rootContext.unregisterGauge(\"last_proposal_size\");\n        rootContext.unregisterGauge(\"max_proposal_size\");\n        rootContext.unregisterGauge(\"min_proposal_size\");\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"b842cd4b463a7c3674963f6f66fc392293c1334c","commitMessage":"@@@ZOOKEEPER-3978: Adding additional security metrics to zookeeper\n\nThis is same as https://github.com/apache/zookeeper/pull/1513 for master branch with additional changes using junit5 jupiter lib.\n\nThe changes include adding 3 metrics for security for zookeeper for better monitoring\n\nMonitoring all authN and AuthZ errors\nMonitoring all local non mtls local connections counts\nMonitoring all remote non mtls connection counts.\n\nAuthor: Pooja Malik <pmalik@salesforce.com>\n\nReviewers: Michael Han <hanm@apache.org>.  Enrico Olivelli <eolivelli@apache.org>.  Damien Diederen <ddiederen@apache.org>\n\nCloses #1523 from p-malik/zk_sec_master\n","date":"2020-11-16 18:00:18","modifiedFileCount":"11","status":"M","submitter":"Pooja Malik"},{"authorTime":"2019-06-04 16:55:09","codes":[{"authorDate":"2021-07-29 17:35:47","commitOrder":3,"curCode":"    protected void unregisterMetrics() {\n\n        MetricsContext rootContext = ServerMetrics.getMetrics().getMetricsProvider().getRootContext();\n\n        rootContext.unregisterGauge(\"avg_latency\");\n\n        rootContext.unregisterGauge(\"max_latency\");\n        rootContext.unregisterGauge(\"min_latency\");\n\n        rootContext.unregisterGauge(\"packets_received\");\n        rootContext.unregisterGauge(\"packets_sent\");\n        rootContext.unregisterGauge(\"num_alive_connections\");\n\n        rootContext.unregisterGauge(\"outstanding_requests\");\n        rootContext.unregisterGauge(\"uptime\");\n\n        rootContext.unregisterGauge(\"znode_count\");\n\n        rootContext.unregisterGauge(\"watch_count\");\n        rootContext.unregisterGauge(\"ephemerals_count\");\n        rootContext.unregisterGauge(\"approximate_data_size\");\n\n        rootContext.unregisterGauge(\"global_sessions\");\n        rootContext.unregisterGauge(\"local_sessions\");\n\n        rootContext.unregisterGauge(\"open_file_descriptor_count\");\n        rootContext.unregisterGauge(\"max_file_descriptor_count\");\n        rootContext.unregisterGauge(\"connection_drop_probability\");\n\n        rootContext.unregisterGauge(\"last_client_response_size\");\n        rootContext.unregisterGauge(\"max_client_response_size\");\n        rootContext.unregisterGauge(\"min_client_response_size\");\n\n        rootContext.unregisterGauge(\"auth_failed_count\");\n        rootContext.unregisterGauge(\"non_mtls_remote_conn_count\");\n        rootContext.unregisterGauge(\"non_mtls_local_conn_count\");\n\n        rootContext.unregisterGaugeSet(QuotaMetricsUtils.QUOTA_COUNT_LIMIT_PER_NAMESPACE);\n        rootContext.unregisterGaugeSet(QuotaMetricsUtils.QUOTA_BYTES_LIMIT_PER_NAMESPACE);\n        rootContext.unregisterGaugeSet(QuotaMetricsUtils.QUOTA_COUNT_USAGE_PER_NAMESPACE);\n        rootContext.unregisterGaugeSet(QuotaMetricsUtils.QUOTA_BYTES_USAGE_PER_NAMESPACE);\n    }\n","date":"2021-07-29 17:35:47","endLine":1970,"groupId":"10718","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"unregisterMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/86/c13aea386ae2ad915bed96df0625100cff4982.src","preCode":"    protected void unregisterMetrics() {\n\n        MetricsContext rootContext = ServerMetrics.getMetrics().getMetricsProvider().getRootContext();\n\n        rootContext.unregisterGauge(\"avg_latency\");\n\n        rootContext.unregisterGauge(\"max_latency\");\n        rootContext.unregisterGauge(\"min_latency\");\n\n        rootContext.unregisterGauge(\"packets_received\");\n        rootContext.unregisterGauge(\"packets_sent\");\n        rootContext.unregisterGauge(\"num_alive_connections\");\n\n        rootContext.unregisterGauge(\"outstanding_requests\");\n        rootContext.unregisterGauge(\"uptime\");\n\n        rootContext.unregisterGauge(\"znode_count\");\n\n        rootContext.unregisterGauge(\"watch_count\");\n        rootContext.unregisterGauge(\"ephemerals_count\");\n        rootContext.unregisterGauge(\"approximate_data_size\");\n\n        rootContext.unregisterGauge(\"global_sessions\");\n        rootContext.unregisterGauge(\"local_sessions\");\n\n        rootContext.unregisterGauge(\"open_file_descriptor_count\");\n        rootContext.unregisterGauge(\"max_file_descriptor_count\");\n        rootContext.unregisterGauge(\"connection_drop_probability\");\n\n        rootContext.unregisterGauge(\"last_client_response_size\");\n        rootContext.unregisterGauge(\"max_client_response_size\");\n        rootContext.unregisterGauge(\"min_client_response_size\");\n\n        rootContext.unregisterGauge(\"auth_failed_count\");\n        rootContext.unregisterGauge(\"non_mtls_remote_conn_count\");\n        rootContext.unregisterGauge(\"non_mtls_local_conn_count\");\n\n\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":1929,"status":"M"},{"authorDate":"2019-06-04 16:55:09","commitOrder":3,"curCode":"    protected void unregisterMetrics() {\n        super.unregisterMetrics();\n\n        MetricsContext rootContext = ServerMetrics\n                .getMetrics()\n                .getMetricsProvider()\n                .getRootContext();\n        rootContext.unregisterGauge(\"learners\");\n        rootContext.unregisterGauge(\"synced_followers\");\n        rootContext.unregisterGauge(\"synced_non_voting_followers\");\n        rootContext.unregisterGauge(\"synced_observers\");\n        rootContext.unregisterGauge(\"pending_syncs\");\n        rootContext.unregisterGauge(\"leader_uptime\");\n\n        rootContext.unregisterGauge(\"last_proposal_size\");\n        rootContext.unregisterGauge(\"max_proposal_size\");\n        rootContext.unregisterGauge(\"min_proposal_size\");\n    }\n","date":"2019-06-04 16:55:09","endLine":155,"groupId":"10718","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unregisterMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/74/a738f258b946af4fe642534986dce83627e7cf.src","preCode":"    protected void unregisterMetrics() {\n        super.unregisterMetrics();\n\n        MetricsContext rootContext = ServerMetrics\n                .getMetrics()\n                .getMetricsProvider()\n                .getRootContext();\n        rootContext.unregisterGauge(\"learners\");\n        rootContext.unregisterGauge(\"synced_followers\");\n        rootContext.unregisterGauge(\"synced_non_voting_followers\");\n        rootContext.unregisterGauge(\"synced_observers\");\n        rootContext.unregisterGauge(\"pending_syncs\");\n        rootContext.unregisterGauge(\"leader_uptime\");\n\n        rootContext.unregisterGauge(\"last_proposal_size\");\n        rootContext.unregisterGauge(\"max_proposal_size\");\n        rootContext.unregisterGauge(\"min_proposal_size\");\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"b05ea1a8454d806394e1ecdfca550e8c709d4c21","commitMessage":"@@@ZOOKEEPER-4211: Expose Per Namespace Quota Metrics to Prometheus\n\nMotivation\n\nIn 3.7.  Quota limit can be enforced and the quota related stats are captured.  From the \"listquota\" CLI command.  we can the quota limit and usage info. This is an addition to that so we can collect the quota metrics per top namespace and expose them to the Prometheus for monitor and alert purpose.\n\nSummary of Changes\n\n- added 5 quota metrics\n- added GaugeSet metric type to group gauge metrics by key\n- changed PrometheusMetricsProvider to to support the GaugeSet\n- changed ZookeeperServer and DataTree to collect/publish quota metrics\n\nAuthor: liwang <liwang@apple.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Damien Diederen <ddiederen@apache.org>\n\nCloses #1644 from li4wang/ZOOKEEPER-4211\n","date":"2021-07-29 17:35:47","modifiedFileCount":"14","status":"M","submitter":"liwang"}]
