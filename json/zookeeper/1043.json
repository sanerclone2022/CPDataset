[{"authorTime":"2019-11-25 22:37:51","codes":[{"authorDate":"2019-11-25 22:37:51","commitOrder":1,"curCode":"    public void testMaxNeverUsedInterval() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        AtomicLong elapsed = new AtomicLong(0);\n        AtomicInteger deletesQty = new AtomicInteger(0);\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100, 1000) {\n            @Override\n            protected void postDeleteRequest(Request request) throws RequestProcessor.RequestProcessorException {\n                deletesQty.incrementAndGet();\n                super.postDeleteRequest(request);\n            }\n\n            @Override\n            protected long getElapsed(DataNode node) {\n                return elapsed.get();\n            }\n        };\n        containerManager.checkContainers(); \r\n        assertEquals(deletesQty.get(), 0);\n        assertNotNull(\"Container should not have been deleted\", zk.exists(\"/foo\", false));\n\n        elapsed.set(10000);\n        containerManager.checkContainers(); \r\n        assertTrue(completedContainerDeletions.tryAcquire(1, TimeUnit.SECONDS));\n        assertNull(\"Container should have been deleted\", zk.exists(\"/foo\", false));\n    }\n","date":"2019-11-25 22:37:51","endLine":277,"groupId":"1185","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxNeverUsedInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/f9bcce210679412d40f55b12494b8d6b1150fa.src","preCode":"    public void testMaxNeverUsedInterval() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        AtomicLong elapsed = new AtomicLong(0);\n        AtomicInteger deletesQty = new AtomicInteger(0);\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100, 1000) {\n            @Override\n            protected void postDeleteRequest(Request request) throws RequestProcessor.RequestProcessorException {\n                deletesQty.incrementAndGet();\n                super.postDeleteRequest(request);\n            }\n\n            @Override\n            protected long getElapsed(DataNode node) {\n                return elapsed.get();\n            }\n        };\n        containerManager.checkContainers(); \r\n        assertEquals(deletesQty.get(), 0);\n        assertNotNull(\"Container should not have been deleted\", zk.exists(\"/foo\", false));\n\n        elapsed.set(10000);\n        containerManager.checkContainers(); \r\n        assertTrue(completedContainerDeletions.tryAcquire(1, TimeUnit.SECONDS));\n        assertNull(\"Container should have been deleted\", zk.exists(\"/foo\", false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateContainerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"B"},{"authorDate":"2019-11-25 22:37:51","commitOrder":1,"curCode":"    public void testZeroMaxNeverUsedInterval() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        AtomicInteger deletesQty = new AtomicInteger(0);\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100, 0) {\n            @Override\n            protected void postDeleteRequest(Request request) throws RequestProcessor.RequestProcessorException {\n                deletesQty.incrementAndGet();\n                super.postDeleteRequest(request);\n            }\n\n            @Override\n            protected long getElapsed(DataNode node) {\n                return 10000;   \r\n            }\n        };\n        containerManager.checkContainers(); \r\n        assertEquals(deletesQty.get(), 0);\n        assertNotNull(\"Container should not have been deleted\", zk.exists(\"/foo\", false));\n    }\n","date":"2019-11-25 22:37:51","endLine":298,"groupId":"2297","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testZeroMaxNeverUsedInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/f9bcce210679412d40f55b12494b8d6b1150fa.src","preCode":"    public void testZeroMaxNeverUsedInterval() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        AtomicInteger deletesQty = new AtomicInteger(0);\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100, 0) {\n            @Override\n            protected void postDeleteRequest(Request request) throws RequestProcessor.RequestProcessorException {\n                deletesQty.incrementAndGet();\n                super.postDeleteRequest(request);\n            }\n\n            @Override\n            protected long getElapsed(DataNode node) {\n                return 10000;   \r\n            }\n        };\n        containerManager.checkContainers(); \r\n        assertEquals(deletesQty.get(), 0);\n        assertNotNull(\"Container should not have been deleted\", zk.exists(\"/foo\", false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateContainerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"B"}],"commitId":"4132b64b36ea43909888fdaf34268a243f2c7420","commitMessage":"@@@ZOOKEEPER-3546 - Allow optional deletion of never used Container Nodes\n\nEdge cases can cause Container Nodes to never be deleted. i.e. if the container node is created and then the client that create the node crashes the container will not get deleted unless another client creates a node inside of it. This is because the initial implementation does not delete container nodes with a cversion of 0. This PR adds a new system property.  \"znode.container.maxNeverUsedIntervalMs\".  that can be set to delete containers with a cversion of 0 that have been retained for a period of time. This is a backward compatible change as the default value for this is Long.MAX_VALUE - i.e. never.\n\nAuthor: randgalt <jordan@jordanzimmerman.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Fangmin Lyu <fangmin@apache.org>\n\nCloses #1138 from Randgalt/ZOOKEEPER-3546-allow-delete-of-never-used-containers\n","date":"2019-11-25 22:37:51","modifiedFileCount":"4","status":"B","submitter":"randgalt"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":2,"curCode":"    public void testMaxNeverUsedInterval() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        AtomicLong elapsed = new AtomicLong(0);\n        AtomicInteger deletesQty = new AtomicInteger(0);\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100, 1000) {\n            @Override\n            protected void postDeleteRequest(Request request) throws RequestProcessor.RequestProcessorException {\n                deletesQty.incrementAndGet();\n                super.postDeleteRequest(request);\n            }\n\n            @Override\n            protected long getElapsed(DataNode node) {\n                return elapsed.get();\n            }\n        };\n        containerManager.checkContainers(); \r\n        assertEquals(deletesQty.get(), 0);\n        assertNotNull(zk.exists(\"/foo\", false), \"Container should not have been deleted\");\n\n        elapsed.set(10000);\n        containerManager.checkContainers(); \r\n        assertTrue(completedContainerDeletions.tryAcquire(1, TimeUnit.SECONDS));\n        assertNull(zk.exists(\"/foo\", false), \"Container should have been deleted\");\n    }\n","date":"2020-08-04 21:01:52","endLine":289,"groupId":"1043","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testMaxNeverUsedInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/67/22473f2a579ff8db91bc1cee84ff9028d690c9.src","preCode":"    public void testMaxNeverUsedInterval() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        AtomicLong elapsed = new AtomicLong(0);\n        AtomicInteger deletesQty = new AtomicInteger(0);\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100, 1000) {\n            @Override\n            protected void postDeleteRequest(Request request) throws RequestProcessor.RequestProcessorException {\n                deletesQty.incrementAndGet();\n                super.postDeleteRequest(request);\n            }\n\n            @Override\n            protected long getElapsed(DataNode node) {\n                return elapsed.get();\n            }\n        };\n        containerManager.checkContainers(); \r\n        assertEquals(deletesQty.get(), 0);\n        assertNotNull(\"Container should not have been deleted\", zk.exists(\"/foo\", false));\n\n        elapsed.set(10000);\n        containerManager.checkContainers(); \r\n        assertTrue(completedContainerDeletions.tryAcquire(1, TimeUnit.SECONDS));\n        assertNull(\"Container should have been deleted\", zk.exists(\"/foo\", false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateContainerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":2,"curCode":"    public void testZeroMaxNeverUsedInterval() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        AtomicInteger deletesQty = new AtomicInteger(0);\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100, 0) {\n            @Override protected void postDeleteRequest(Request request) throws RequestProcessor.RequestProcessorException {\n                deletesQty.incrementAndGet();\n                super.postDeleteRequest(request);\n            }\n\n            @Override protected long getElapsed(DataNode node) {\n                return 10000;   \r\n            }\n        };\n        containerManager.checkContainers(); \r\n        assertEquals(deletesQty.get(), 0);\n        assertNotNull(zk.exists(\"/foo\", false), \"Container should not have been deleted\");\n    }\n","date":"2020-08-04 21:01:52","endLine":309,"groupId":"1043","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testZeroMaxNeverUsedInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/67/22473f2a579ff8db91bc1cee84ff9028d690c9.src","preCode":"    public void testZeroMaxNeverUsedInterval() throws KeeperException, InterruptedException {\n        zk.create(\"/foo\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER);\n        AtomicInteger deletesQty = new AtomicInteger(0);\n        ContainerManager containerManager = new ContainerManager(serverFactory.getZooKeeperServer().getZKDatabase(), serverFactory.getZooKeeperServer().firstProcessor, 1, 100, 0) {\n            @Override\n            protected void postDeleteRequest(Request request) throws RequestProcessor.RequestProcessorException {\n                deletesQty.incrementAndGet();\n                super.postDeleteRequest(request);\n            }\n\n            @Override\n            protected long getElapsed(DataNode node) {\n                return 10000;   \r\n            }\n        };\n        containerManager.checkContainers(); \r\n        assertEquals(deletesQty.get(), 0);\n        assertNotNull(\"Container should not have been deleted\", zk.exists(\"/foo\", false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateContainerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
