[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void noCrashOnCommittedRequestsOfUnseenRequestTest() throws Exception {\n        final String path = \"/noCrash/OnCommittedRequests/OfUnseenRequestTest\";\n        final int numberofReads = 10;\n        final int sessionid = 0x123456;\n        final int firstCXid = 0x100;\n        int readReqId = firstCXid;\n        processor.stoppedMainLoop = true;\n        HashSet<Request> localRequests = new HashSet<Request>();\n        \r\n        Request firstCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, readReqId++);\n        processor.queuedRequests.add(firstCommittedReq);\n        localRequests.add(firstCommittedReq);\n\n        \r\n        for (; readReqId <= numberofReads+firstCXid; ++readReqId) {\n            Request readReq = newRequest(new GetDataRequest(path, false),\n                    OpCode.getData, sessionid, readReqId);\n            processor.queuedRequests.add(readReq);\n            localRequests.add(readReq);\n        }\n\n        \r\n        Assert.assertTrue(processor.queuedRequests.containsAll(localRequests));\n        processor.initThreads(defaultSizeOfThreadPool);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.isEmpty());\n\n        \r\n        \r\n        Request preSessionCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, firstCXid - 2);\n        processor.committedRequests.add(preSessionCommittedReq);\n        processor.committedRequests.add(firstCommittedReq);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.peek() == preSessionCommittedReq);\n\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.containsAll(localRequests));\n    }\n","date":"2018-10-05 20:25:43","endLine":440,"groupId":"2015","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"noCrashOnCommittedRequestsOfUnseenRequestTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0e/002b9d1f230d700754490858dc01c911b597f8.src","preCode":"    public void noCrashOnCommittedRequestsOfUnseenRequestTest() throws Exception {\n        final String path = \"/noCrash/OnCommittedRequests/OfUnseenRequestTest\";\n        final int numberofReads = 10;\n        final int sessionid = 0x123456;\n        final int firstCXid = 0x100;\n        int readReqId = firstCXid;\n        processor.stoppedMainLoop = true;\n        HashSet<Request> localRequests = new HashSet<Request>();\n        \r\n        Request firstCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, readReqId++);\n        processor.queuedRequests.add(firstCommittedReq);\n        localRequests.add(firstCommittedReq);\n\n        \r\n        for (; readReqId <= numberofReads+firstCXid; ++readReqId) {\n            Request readReq = newRequest(new GetDataRequest(path, false),\n                    OpCode.getData, sessionid, readReqId);\n            processor.queuedRequests.add(readReq);\n            localRequests.add(readReq);\n        }\n\n        \r\n        Assert.assertTrue(processor.queuedRequests.containsAll(localRequests));\n        processor.initThreads(defaultSizeOfThreadPool);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.isEmpty());\n\n        \r\n        \r\n        Request preSessionCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, firstCXid - 2);\n        processor.committedRequests.add(preSessionCommittedReq);\n        processor.committedRequests.add(firstCommittedReq);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.peek() == preSessionCommittedReq);\n\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.containsAll(localRequests));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorConcurrencyTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":388,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void noCrashOnOutofOrderCommittedRequestTest() throws Exception {\n        final String path = \"/noCrash/OnCommittedRequests/OfUnSeenRequestTest\";\n        final int sessionid = 0x123456;\n        final int lastCXid = 0x100;\n        final int numberofReads = 10;\n        int readReqId = lastCXid;\n        processor.stoppedMainLoop = true;\n        HashSet<Request> localRequests = new HashSet<Request>();\n\n        \r\n        Request orphanCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, lastCXid);\n        processor.queuedRequests.add(orphanCommittedReq);\n        localRequests.add(orphanCommittedReq);\n\n        \r\n        for (; readReqId <= numberofReads+lastCXid; ++readReqId) {\n            Request readReq = newRequest(new GetDataRequest(path, false),\n                    OpCode.getData, sessionid, readReqId);\n            processor.queuedRequests.add(readReq);\n            localRequests.add(readReq);\n        }\n\n        \r\n        processor.initThreads(defaultSizeOfThreadPool);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.isEmpty());\n\n        \r\n        \r\n        Request otherSessionCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, lastCXid+10);\n        processor.committedRequests.add(otherSessionCommittedReq);\n        processor.committedRequests.add(orphanCommittedReq);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.size() == 1);\n        Assert.assertTrue(processedRequests.contains(otherSessionCommittedReq));\n\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.containsAll(localRequests));\n    }\n","date":"2018-10-05 20:25:43","endLine":504,"groupId":"2016","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"noCrashOnOutofOrderCommittedRequestTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0e/002b9d1f230d700754490858dc01c911b597f8.src","preCode":"    public void noCrashOnOutofOrderCommittedRequestTest() throws Exception {\n        final String path = \"/noCrash/OnCommittedRequests/OfUnSeenRequestTest\";\n        final int sessionid = 0x123456;\n        final int lastCXid = 0x100;\n        final int numberofReads = 10;\n        int readReqId = lastCXid;\n        processor.stoppedMainLoop = true;\n        HashSet<Request> localRequests = new HashSet<Request>();\n\n        \r\n        Request orphanCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, lastCXid);\n        processor.queuedRequests.add(orphanCommittedReq);\n        localRequests.add(orphanCommittedReq);\n\n        \r\n        for (; readReqId <= numberofReads+lastCXid; ++readReqId) {\n            Request readReq = newRequest(new GetDataRequest(path, false),\n                    OpCode.getData, sessionid, readReqId);\n            processor.queuedRequests.add(readReq);\n            localRequests.add(readReq);\n        }\n\n        \r\n        processor.initThreads(defaultSizeOfThreadPool);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.isEmpty());\n\n        \r\n        \r\n        Request otherSessionCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, lastCXid+10);\n        processor.committedRequests.add(otherSessionCommittedReq);\n        processor.committedRequests.add(orphanCommittedReq);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.size() == 1);\n        Assert.assertTrue(processedRequests.contains(otherSessionCommittedReq));\n\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.containsAll(localRequests));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorConcurrencyTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-07-30 08:31:09","codes":[{"authorDate":"2019-07-30 08:31:09","commitOrder":2,"curCode":"    public void noCrashOnCommittedRequestsOfUnseenRequestTest() throws Exception {\n        final String path = \"/noCrash/OnCommittedRequests/OfUnseenRequestTest\";\n        final int numberofReads = 10;\n        final int sessionid = 0x123456;\n        final int firstCXid = 0x100;\n        int readReqId = firstCXid;\n        processor.stoppedMainLoop = true;\n        HashSet<Request> localRequests = new HashSet<Request>();\n        \r\n        Request firstCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, readReqId++);\n        processor.queuedRequests.add(firstCommittedReq);\n        processor.queuedWriteRequests.add(firstCommittedReq);\n        localRequests.add(firstCommittedReq);\n\n        \r\n        for (; readReqId <= numberofReads+firstCXid; ++readReqId) {\n            Request readReq = newRequest(new GetDataRequest(path, false),\n                    OpCode.getData, sessionid, readReqId);\n            processor.queuedRequests.add(readReq);\n            localRequests.add(readReq);\n        }\n\n        \r\n        Assert.assertTrue(processor.queuedRequests.containsAll(localRequests));\n        processor.initThreads(defaultSizeOfThreadPool);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.isEmpty());\n\n        \r\n        \r\n        Request preSessionCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, firstCXid - 2);\n        processor.committedRequests.add(preSessionCommittedReq);\n        processor.committedRequests.add(firstCommittedReq);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.peek() == preSessionCommittedReq);\n\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.containsAll(localRequests));\n    }\n","date":"2019-07-30 08:31:09","endLine":598,"groupId":"2015","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"noCrashOnCommittedRequestsOfUnseenRequestTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/95/889ef1dde2cb03f23ec5ef693b2f0b627fe881.src","preCode":"    public void noCrashOnCommittedRequestsOfUnseenRequestTest() throws Exception {\n        final String path = \"/noCrash/OnCommittedRequests/OfUnseenRequestTest\";\n        final int numberofReads = 10;\n        final int sessionid = 0x123456;\n        final int firstCXid = 0x100;\n        int readReqId = firstCXid;\n        processor.stoppedMainLoop = true;\n        HashSet<Request> localRequests = new HashSet<Request>();\n        \r\n        Request firstCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, readReqId++);\n        processor.queuedRequests.add(firstCommittedReq);\n        localRequests.add(firstCommittedReq);\n\n        \r\n        for (; readReqId <= numberofReads+firstCXid; ++readReqId) {\n            Request readReq = newRequest(new GetDataRequest(path, false),\n                    OpCode.getData, sessionid, readReqId);\n            processor.queuedRequests.add(readReq);\n            localRequests.add(readReq);\n        }\n\n        \r\n        Assert.assertTrue(processor.queuedRequests.containsAll(localRequests));\n        processor.initThreads(defaultSizeOfThreadPool);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.isEmpty());\n\n        \r\n        \r\n        Request preSessionCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, firstCXid - 2);\n        processor.committedRequests.add(preSessionCommittedReq);\n        processor.committedRequests.add(firstCommittedReq);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.peek() == preSessionCommittedReq);\n\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.containsAll(localRequests));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorConcurrencyTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"M"},{"authorDate":"2019-07-30 08:31:09","commitOrder":2,"curCode":"    public void noCrashOnOutofOrderCommittedRequestTest() throws Exception {\n        final String path = \"/noCrash/OnCommittedRequests/OfUnSeenRequestTest\";\n        final int sessionid = 0x123456;\n        final int lastCXid = 0x100;\n        final int numberofReads = 10;\n        int readReqId = lastCXid;\n        processor.stoppedMainLoop = true;\n        HashSet<Request> localRequests = new HashSet<Request>();\n\n        \r\n        Request orphanCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, lastCXid);\n        processor.queuedRequests.add(orphanCommittedReq);\n        processor.queuedWriteRequests.add(orphanCommittedReq);\n        localRequests.add(orphanCommittedReq);\n\n        \r\n        for (; readReqId <= numberofReads+lastCXid; ++readReqId) {\n            Request readReq = newRequest(new GetDataRequest(path, false),\n                    OpCode.getData, sessionid, readReqId);\n            processor.queuedRequests.add(readReq);\n            localRequests.add(readReq);\n        }\n\n        \r\n        processor.initThreads(defaultSizeOfThreadPool);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.isEmpty());\n\n        \r\n        \r\n        Request otherSessionCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, lastCXid+10);\n        processor.committedRequests.add(otherSessionCommittedReq);\n        processor.committedRequests.add(orphanCommittedReq);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.size() == 1);\n        Assert.assertTrue(processedRequests.contains(otherSessionCommittedReq));\n\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.containsAll(localRequests));\n    }\n","date":"2019-07-30 08:31:09","endLine":663,"groupId":"2016","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"noCrashOnOutofOrderCommittedRequestTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/95/889ef1dde2cb03f23ec5ef693b2f0b627fe881.src","preCode":"    public void noCrashOnOutofOrderCommittedRequestTest() throws Exception {\n        final String path = \"/noCrash/OnCommittedRequests/OfUnSeenRequestTest\";\n        final int sessionid = 0x123456;\n        final int lastCXid = 0x100;\n        final int numberofReads = 10;\n        int readReqId = lastCXid;\n        processor.stoppedMainLoop = true;\n        HashSet<Request> localRequests = new HashSet<Request>();\n\n        \r\n        Request orphanCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, lastCXid);\n        processor.queuedRequests.add(orphanCommittedReq);\n        localRequests.add(orphanCommittedReq);\n\n        \r\n        for (; readReqId <= numberofReads+lastCXid; ++readReqId) {\n            Request readReq = newRequest(new GetDataRequest(path, false),\n                    OpCode.getData, sessionid, readReqId);\n            processor.queuedRequests.add(readReq);\n            localRequests.add(readReq);\n        }\n\n        \r\n        processor.initThreads(defaultSizeOfThreadPool);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.isEmpty());\n\n        \r\n        \r\n        Request otherSessionCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, lastCXid+10);\n        processor.committedRequests.add(otherSessionCommittedReq);\n        processor.committedRequests.add(orphanCommittedReq);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.size() == 1);\n        Assert.assertTrue(processedRequests.contains(otherSessionCommittedReq));\n\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.containsAll(localRequests));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorConcurrencyTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"M"}],"commitId":"a6b38f83218791f8d9fabc52c865dcccf07026cc","commitMessage":"@@@ZOOKEEPER-3359: Batch commits in the CommitProcessor\n\nAuthor: Brian Nixon <nixon@fb.com>\n\nReviewers: Michael Han <hanm@apache.org>.  Norbert Kalmar <nkalmar@yahoo.com>.  Enrico Olivelli <eolivelli@gmail.com>\n\nCloses #905 from enixon/commit-proc-batch\n","date":"2019-07-30 08:31:09","modifiedFileCount":"5","status":"M","submitter":"Brian Nixon"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void noCrashOnCommittedRequestsOfUnseenRequestTest() throws Exception {\n        final String path = \"/noCrash/OnCommittedRequests/OfUnseenRequestTest\";\n        final int numberofReads = 10;\n        final int sessionid = 0x123456;\n        final int firstCXid = 0x100;\n        int readReqId = firstCXid;\n        processor.stoppedMainLoop = true;\n        HashSet<Request> localRequests = new HashSet<Request>();\n        \r\n        Request firstCommittedReq = newRequest(\n            new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n            OpCode.create,\n            sessionid,\n            readReqId++);\n        processor.queuedRequests.add(firstCommittedReq);\n        processor.queuedWriteRequests.add(firstCommittedReq);\n        localRequests.add(firstCommittedReq);\n\n        \r\n        for (; readReqId <= numberofReads + firstCXid; ++readReqId) {\n            Request readReq = newRequest(new GetDataRequest(path, false), OpCode.getData, sessionid, readReqId);\n            processor.queuedRequests.add(readReq);\n            localRequests.add(readReq);\n        }\n\n        \r\n        assertTrue(processor.queuedRequests.containsAll(localRequests));\n        processor.initThreads(defaultSizeOfThreadPool);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        assertTrue(processedRequests.isEmpty());\n\n        \r\n        \r\n        Request preSessionCommittedReq = newRequest(\n            new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n            OpCode.create,\n            sessionid,\n            firstCXid - 2);\n        processor.committedRequests.add(preSessionCommittedReq);\n        processor.committedRequests.add(firstCommittedReq);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        assertTrue(processedRequests.peek() == preSessionCommittedReq);\n\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        assertTrue(processedRequests.containsAll(localRequests));\n    }\n","date":"2019-08-17 23:13:15","endLine":582,"groupId":"10186","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"noCrashOnCommittedRequestsOfUnseenRequestTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/7d/342a0d756220a2edfd6694eec19eec1aadbbcc.src","preCode":"    public void noCrashOnCommittedRequestsOfUnseenRequestTest() throws Exception {\n        final String path = \"/noCrash/OnCommittedRequests/OfUnseenRequestTest\";\n        final int numberofReads = 10;\n        final int sessionid = 0x123456;\n        final int firstCXid = 0x100;\n        int readReqId = firstCXid;\n        processor.stoppedMainLoop = true;\n        HashSet<Request> localRequests = new HashSet<Request>();\n        \r\n        Request firstCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, readReqId++);\n        processor.queuedRequests.add(firstCommittedReq);\n        processor.queuedWriteRequests.add(firstCommittedReq);\n        localRequests.add(firstCommittedReq);\n\n        \r\n        for (; readReqId <= numberofReads+firstCXid; ++readReqId) {\n            Request readReq = newRequest(new GetDataRequest(path, false),\n                    OpCode.getData, sessionid, readReqId);\n            processor.queuedRequests.add(readReq);\n            localRequests.add(readReq);\n        }\n\n        \r\n        Assert.assertTrue(processor.queuedRequests.containsAll(localRequests));\n        processor.initThreads(defaultSizeOfThreadPool);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.isEmpty());\n\n        \r\n        \r\n        Request preSessionCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, firstCXid - 2);\n        processor.committedRequests.add(preSessionCommittedReq);\n        processor.committedRequests.add(firstCommittedReq);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.peek() == preSessionCommittedReq);\n\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.containsAll(localRequests));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorConcurrencyTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":528,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void noCrashOnOutofOrderCommittedRequestTest() throws Exception {\n        final String path = \"/noCrash/OnCommittedRequests/OfUnSeenRequestTest\";\n        final int sessionid = 0x123456;\n        final int lastCXid = 0x100;\n        final int numberofReads = 10;\n        int readReqId = lastCXid;\n        processor.stoppedMainLoop = true;\n        HashSet<Request> localRequests = new HashSet<Request>();\n\n        \r\n        Request orphanCommittedReq = newRequest(\n            new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n            OpCode.create,\n            sessionid,\n            lastCXid);\n        processor.queuedRequests.add(orphanCommittedReq);\n        processor.queuedWriteRequests.add(orphanCommittedReq);\n        localRequests.add(orphanCommittedReq);\n\n        \r\n        for (; readReqId <= numberofReads + lastCXid; ++readReqId) {\n            Request readReq = newRequest(new GetDataRequest(path, false), OpCode.getData, sessionid, readReqId);\n            processor.queuedRequests.add(readReq);\n            localRequests.add(readReq);\n        }\n\n        \r\n        processor.initThreads(defaultSizeOfThreadPool);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        assertTrue(processedRequests.isEmpty());\n\n        \r\n        \r\n        Request otherSessionCommittedReq = newRequest(\n            new CreateRequest(\n                path,\n                new byte[0],\n                Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n            OpCode.create,\n            sessionid,\n            lastCXid + 10);\n        processor.committedRequests.add(otherSessionCommittedReq);\n        processor.committedRequests.add(orphanCommittedReq);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        assertTrue(processedRequests.size() == 1);\n        assertTrue(processedRequests.contains(otherSessionCommittedReq));\n\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        assertTrue(processedRequests.containsAll(localRequests));\n    }\n","date":"2019-08-17 23:13:15","endLine":652,"groupId":"10186","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"noCrashOnOutofOrderCommittedRequestTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/7d/342a0d756220a2edfd6694eec19eec1aadbbcc.src","preCode":"    public void noCrashOnOutofOrderCommittedRequestTest() throws Exception {\n        final String path = \"/noCrash/OnCommittedRequests/OfUnSeenRequestTest\";\n        final int sessionid = 0x123456;\n        final int lastCXid = 0x100;\n        final int numberofReads = 10;\n        int readReqId = lastCXid;\n        processor.stoppedMainLoop = true;\n        HashSet<Request> localRequests = new HashSet<Request>();\n\n        \r\n        Request orphanCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, lastCXid);\n        processor.queuedRequests.add(orphanCommittedReq);\n        processor.queuedWriteRequests.add(orphanCommittedReq);\n        localRequests.add(orphanCommittedReq);\n\n        \r\n        for (; readReqId <= numberofReads+lastCXid; ++readReqId) {\n            Request readReq = newRequest(new GetDataRequest(path, false),\n                    OpCode.getData, sessionid, readReqId);\n            processor.queuedRequests.add(readReq);\n            localRequests.add(readReq);\n        }\n\n        \r\n        processor.initThreads(defaultSizeOfThreadPool);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.isEmpty());\n\n        \r\n        \r\n        Request otherSessionCommittedReq = newRequest(\n                new CreateRequest(path, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT_SEQUENTIAL.toFlag()),\n                OpCode.create, sessionid, lastCXid+10);\n        processor.committedRequests.add(otherSessionCommittedReq);\n        processor.committedRequests.add(orphanCommittedReq);\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.size() == 1);\n        Assert.assertTrue(processedRequests.contains(otherSessionCommittedReq));\n\n        processor.run();\n        Thread.sleep(1000);\n\n        \r\n        Assert.assertTrue(processedRequests.containsAll(localRequests));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorConcurrencyTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"}]
