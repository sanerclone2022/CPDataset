[{"authorTime":"2018-11-27 17:02:24","codes":[{"authorDate":"2018-11-27 17:02:24","commitOrder":1,"curCode":"    public void testConnectWithSSLToStrictServer() throws Exception {\n        UnifiedServerThread serverThread = new UnifiedServerThread(\n                x509Util, localServerAddress, false, DATA_TO_CLIENT);\n        serverThread.start();\n\n        Socket sslSocket = connectWithSSL();\n        try {\n            sslSocket.getOutputStream().write(DATA_FROM_CLIENT);\n            sslSocket.getOutputStream().flush();\n            byte[] buf = new byte[DATA_TO_CLIENT.length];\n            int bytesRead = sslSocket.getInputStream().read(buf, 0, buf.length);\n            Assert.assertEquals(buf.length, bytesRead);\n            Assert.assertArrayEquals(DATA_TO_CLIENT, buf);\n\n            synchronized (handshakeCompletedLock) {\n                if (!handshakeCompleted) {\n                    handshakeCompletedLock.wait(TIMEOUT);\n                }\n                Assert.assertTrue(handshakeCompleted);\n            }\n\n            Assert.assertArrayEquals(DATA_FROM_CLIENT, serverThread.getDataFromClient(0));\n        } finally {\n            forceClose(sslSocket);\n            serverThread.shutdown(TIMEOUT);\n        }\n    }\n","date":"2018-11-27 17:02:24","endLine":334,"groupId":"658","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectWithSSLToStrictServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/5e/4e619da94e9bf5adcff1e316be48981c43160d.src","preCode":"    public void testConnectWithSSLToStrictServer() throws Exception {\n        UnifiedServerThread serverThread = new UnifiedServerThread(\n                x509Util, localServerAddress, false, DATA_TO_CLIENT);\n        serverThread.start();\n\n        Socket sslSocket = connectWithSSL();\n        try {\n            sslSocket.getOutputStream().write(DATA_FROM_CLIENT);\n            sslSocket.getOutputStream().flush();\n            byte[] buf = new byte[DATA_TO_CLIENT.length];\n            int bytesRead = sslSocket.getInputStream().read(buf, 0, buf.length);\n            Assert.assertEquals(buf.length, bytesRead);\n            Assert.assertArrayEquals(DATA_TO_CLIENT, buf);\n\n            synchronized (handshakeCompletedLock) {\n                if (!handshakeCompleted) {\n                    handshakeCompletedLock.wait(TIMEOUT);\n                }\n                Assert.assertTrue(handshakeCompleted);\n            }\n\n            Assert.assertArrayEquals(DATA_FROM_CLIENT, serverThread.getDataFromClient(0));\n        } finally {\n            forceClose(sslSocket);\n            serverThread.shutdown(TIMEOUT);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"B"},{"authorDate":"2018-11-27 17:02:24","commitOrder":1,"curCode":"    public void testConnectWithoutSSLToNonStrictServerPartialWrite() throws Exception {\n        UnifiedServerThread serverThread = new UnifiedServerThread(\n                x509Util, localServerAddress, true, DATA_TO_CLIENT);\n        serverThread.start();\n\n        Socket socket = connectWithoutSSL();\n        try {\n            \r\n            \r\n            \r\n            socket.getOutputStream().write(DATA_FROM_CLIENT, 0, 2);\n            socket.getOutputStream().flush();\n            Thread.sleep(TIMEOUT / 2);\n            socket.getOutputStream().write(DATA_FROM_CLIENT, 2, DATA_FROM_CLIENT.length - 2);\n            socket.getOutputStream().flush();\n            byte[] buf = new byte[DATA_TO_CLIENT.length];\n            int bytesRead = socket.getInputStream().read(buf, 0, buf.length);\n            Assert.assertEquals(buf.length, bytesRead);\n            Assert.assertArrayEquals(DATA_TO_CLIENT, buf);\n            Assert.assertArrayEquals(DATA_FROM_CLIENT, serverThread.getDataFromClient(0));\n        } finally {\n            forceClose(socket);\n            serverThread.shutdown(TIMEOUT);\n        }\n    }\n","date":"2018-11-27 17:02:24","endLine":391,"groupId":"658","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConnectWithoutSSLToNonStrictServerPartialWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/5e/4e619da94e9bf5adcff1e316be48981c43160d.src","preCode":"    public void testConnectWithoutSSLToNonStrictServerPartialWrite() throws Exception {\n        UnifiedServerThread serverThread = new UnifiedServerThread(\n                x509Util, localServerAddress, true, DATA_TO_CLIENT);\n        serverThread.start();\n\n        Socket socket = connectWithoutSSL();\n        try {\n            \r\n            \r\n            \r\n            socket.getOutputStream().write(DATA_FROM_CLIENT, 0, 2);\n            socket.getOutputStream().flush();\n            Thread.sleep(TIMEOUT / 2);\n            socket.getOutputStream().write(DATA_FROM_CLIENT, 2, DATA_FROM_CLIENT.length - 2);\n            socket.getOutputStream().flush();\n            byte[] buf = new byte[DATA_TO_CLIENT.length];\n            int bytesRead = socket.getInputStream().read(buf, 0, buf.length);\n            Assert.assertEquals(buf.length, bytesRead);\n            Assert.assertArrayEquals(DATA_TO_CLIENT, buf);\n            Assert.assertArrayEquals(DATA_FROM_CLIENT, serverThread.getDataFromClient(0));\n        } finally {\n            forceClose(socket);\n            serverThread.shutdown(TIMEOUT);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":367,"status":"B"}],"commitId":"64104eaeaa6508f052edfd39c24243a8e26039dc","commitMessage":"@@@ZOOKEEPER-3172: Quorum TLS - fix port unification to allow rolling upgrades\n\nFix numerous problems with UnifiedServerSocket.  such as hanging the accept() thread when the client doesn't send any data or crashing if less than 5 bytes are read from the socket in the initial read.\n\nRe-enable the \"portUnification\" config option.\n\n## Fixed networking issues/bugs in UnifiedServerSocket\n\n- don't crash the `accept()` thread if the client closes the connection without sending any data\n- don't corrupt the connection if the client sends fewer than 5 bytes for the initial read\n- delay the detection of TLS vs. plaintext mode until a socket stream is read from or written to. This prevents the `accept()` thread from getting blocked on a `read()` operation from the newly connected socket.\n- prepending 5 bytes to `PrependableSocket` and then trying to read >5 bytes would only return the first 5 bytes.  even if more bytes were available. This is fixed.\n\nAuthor: Ilya Maykov <ilyam@fb.com>\n\nReviewers: andor@apache.org\n\nCloses #679 from ivmaykov/ZOOKEEPER-3172\n","date":"2018-11-27 17:02:24","modifiedFileCount":"12","status":"B","submitter":"Ilya Maykov"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testConnectWithSSLToStrictServer() throws Exception {\n        UnifiedServerThread serverThread = new UnifiedServerThread(x509Util, localServerAddress, false, DATA_TO_CLIENT);\n        serverThread.start();\n\n        Socket sslSocket = connectWithSSL();\n        try {\n            sslSocket.getOutputStream().write(DATA_FROM_CLIENT);\n            sslSocket.getOutputStream().flush();\n            byte[] buf = new byte[DATA_TO_CLIENT.length];\n            int bytesRead = sslSocket.getInputStream().read(buf, 0, buf.length);\n            assertEquals(buf.length, bytesRead);\n            assertArrayEquals(DATA_TO_CLIENT, buf);\n\n            synchronized (handshakeCompletedLock) {\n                if (!handshakeCompleted) {\n                    handshakeCompletedLock.wait(TIMEOUT);\n                }\n                assertTrue(handshakeCompleted);\n            }\n\n            assertArrayEquals(DATA_FROM_CLIENT, serverThread.getDataFromClient(0));\n        } finally {\n            forceClose(sslSocket);\n            serverThread.shutdown(TIMEOUT);\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":327,"groupId":"658","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectWithSSLToStrictServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/7e/4fa69ad2cffa5cbd632a3c74131b76589315ca.src","preCode":"    public void testConnectWithSSLToStrictServer() throws Exception {\n        UnifiedServerThread serverThread = new UnifiedServerThread(\n                x509Util, localServerAddress, false, DATA_TO_CLIENT);\n        serverThread.start();\n\n        Socket sslSocket = connectWithSSL();\n        try {\n            sslSocket.getOutputStream().write(DATA_FROM_CLIENT);\n            sslSocket.getOutputStream().flush();\n            byte[] buf = new byte[DATA_TO_CLIENT.length];\n            int bytesRead = sslSocket.getInputStream().read(buf, 0, buf.length);\n            Assert.assertEquals(buf.length, bytesRead);\n            Assert.assertArrayEquals(DATA_TO_CLIENT, buf);\n\n            synchronized (handshakeCompletedLock) {\n                if (!handshakeCompleted) {\n                    handshakeCompletedLock.wait(TIMEOUT);\n                }\n                Assert.assertTrue(handshakeCompleted);\n            }\n\n            Assert.assertArrayEquals(DATA_FROM_CLIENT, serverThread.getDataFromClient(0));\n        } finally {\n            forceClose(sslSocket);\n            serverThread.shutdown(TIMEOUT);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testConnectWithoutSSLToNonStrictServerPartialWrite() throws Exception {\n        UnifiedServerThread serverThread = new UnifiedServerThread(x509Util, localServerAddress, true, DATA_TO_CLIENT);\n        serverThread.start();\n\n        Socket socket = connectWithoutSSL();\n        try {\n            \r\n            \r\n            \r\n            socket.getOutputStream().write(DATA_FROM_CLIENT, 0, 2);\n            socket.getOutputStream().flush();\n            Thread.sleep(TIMEOUT / 2);\n            socket.getOutputStream().write(DATA_FROM_CLIENT, 2, DATA_FROM_CLIENT.length - 2);\n            socket.getOutputStream().flush();\n            byte[] buf = new byte[DATA_TO_CLIENT.length];\n            int bytesRead = socket.getInputStream().read(buf, 0, buf.length);\n            assertEquals(buf.length, bytesRead);\n            assertArrayEquals(DATA_TO_CLIENT, buf);\n            assertArrayEquals(DATA_FROM_CLIENT, serverThread.getDataFromClient(0));\n        } finally {\n            forceClose(socket);\n            serverThread.shutdown(TIMEOUT);\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":382,"groupId":"658","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConnectWithoutSSLToNonStrictServerPartialWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/7e/4fa69ad2cffa5cbd632a3c74131b76589315ca.src","preCode":"    public void testConnectWithoutSSLToNonStrictServerPartialWrite() throws Exception {\n        UnifiedServerThread serverThread = new UnifiedServerThread(\n                x509Util, localServerAddress, true, DATA_TO_CLIENT);\n        serverThread.start();\n\n        Socket socket = connectWithoutSSL();\n        try {\n            \r\n            \r\n            \r\n            socket.getOutputStream().write(DATA_FROM_CLIENT, 0, 2);\n            socket.getOutputStream().flush();\n            Thread.sleep(TIMEOUT / 2);\n            socket.getOutputStream().write(DATA_FROM_CLIENT, 2, DATA_FROM_CLIENT.length - 2);\n            socket.getOutputStream().flush();\n            byte[] buf = new byte[DATA_TO_CLIENT.length];\n            int bytesRead = socket.getInputStream().read(buf, 0, buf.length);\n            Assert.assertEquals(buf.length, bytesRead);\n            Assert.assertArrayEquals(DATA_TO_CLIENT, buf);\n            Assert.assertArrayEquals(DATA_FROM_CLIENT, serverThread.getDataFromClient(0));\n        } finally {\n            forceClose(socket);\n            serverThread.shutdown(TIMEOUT);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testConnectWithSSLToStrictServer(\n        final X509KeyType caKeyType, final X509KeyType certKeyType, final Boolean hostnameVerification, final Integer paramIndex\n    ) throws Exception {\n        init(caKeyType, certKeyType, hostnameVerification, paramIndex);\n        setUp();\n        UnifiedServerThread serverThread = new UnifiedServerThread(x509Util, localServerAddress, false, DATA_TO_CLIENT);\n        serverThread.start();\n\n        Socket sslSocket = connectWithSSL();\n        try {\n            sslSocket.getOutputStream().write(DATA_FROM_CLIENT);\n            sslSocket.getOutputStream().flush();\n            byte[] buf = new byte[DATA_TO_CLIENT.length];\n            int bytesRead = sslSocket.getInputStream().read(buf, 0, buf.length);\n            assertEquals(buf.length, bytesRead);\n            assertArrayEquals(DATA_TO_CLIENT, buf);\n\n            synchronized (handshakeCompletedLock) {\n                if (!handshakeCompleted) {\n                    handshakeCompletedLock.wait(TIMEOUT);\n                }\n                assertTrue(handshakeCompleted);\n            }\n\n            assertArrayEquals(DATA_FROM_CLIENT, serverThread.getDataFromClient(0));\n        } finally {\n            forceClose(sslSocket);\n            serverThread.shutdown(TIMEOUT);\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":333,"groupId":"10210","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testConnectWithSSLToStrictServer","params":"(finalX509KeyTypecaKeyType@finalX509KeyTypecertKeyType@finalBooleanhostnameVerification@finalIntegerparamIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fa/710f4658fedb35ccb787544a653bc8e26782ef.src","preCode":"    public void testConnectWithSSLToStrictServer() throws Exception {\n        UnifiedServerThread serverThread = new UnifiedServerThread(x509Util, localServerAddress, false, DATA_TO_CLIENT);\n        serverThread.start();\n\n        Socket sslSocket = connectWithSSL();\n        try {\n            sslSocket.getOutputStream().write(DATA_FROM_CLIENT);\n            sslSocket.getOutputStream().flush();\n            byte[] buf = new byte[DATA_TO_CLIENT.length];\n            int bytesRead = sslSocket.getInputStream().read(buf, 0, buf.length);\n            assertEquals(buf.length, bytesRead);\n            assertArrayEquals(DATA_TO_CLIENT, buf);\n\n            synchronized (handshakeCompletedLock) {\n                if (!handshakeCompleted) {\n                    handshakeCompletedLock.wait(TIMEOUT);\n                }\n                assertTrue(handshakeCompleted);\n            }\n\n            assertArrayEquals(DATA_FROM_CLIENT, serverThread.getDataFromClient(0));\n        } finally {\n            forceClose(sslSocket);\n            serverThread.shutdown(TIMEOUT);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testConnectWithoutSSLToNonStrictServerPartialWrite(\n        final X509KeyType caKeyType, final X509KeyType certKeyType, final Boolean hostnameVerification, final Integer paramIndex\n    ) throws Exception {\n        init(caKeyType, certKeyType, hostnameVerification, paramIndex);\n        setUp();\n        UnifiedServerThread serverThread = new UnifiedServerThread(x509Util, localServerAddress, true, DATA_TO_CLIENT);\n        serverThread.start();\n\n        Socket socket = connectWithoutSSL();\n        try {\n            \r\n            \r\n            \r\n            socket.getOutputStream().write(DATA_FROM_CLIENT, 0, 2);\n            socket.getOutputStream().flush();\n            Thread.sleep(TIMEOUT / 2);\n            socket.getOutputStream().write(DATA_FROM_CLIENT, 2, DATA_FROM_CLIENT.length - 2);\n            socket.getOutputStream().flush();\n            byte[] buf = new byte[DATA_TO_CLIENT.length];\n            int bytesRead = socket.getInputStream().read(buf, 0, buf.length);\n            assertEquals(buf.length, bytesRead);\n            assertArrayEquals(DATA_TO_CLIENT, buf);\n            assertArrayEquals(DATA_FROM_CLIENT, serverThread.getDataFromClient(0));\n        } finally {\n            forceClose(socket);\n            serverThread.shutdown(TIMEOUT);\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":398,"groupId":"10210","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testConnectWithoutSSLToNonStrictServerPartialWrite","params":"(finalX509KeyTypecaKeyType@finalX509KeyTypecertKeyType@finalBooleanhostnameVerification@finalIntegerparamIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fa/710f4658fedb35ccb787544a653bc8e26782ef.src","preCode":"    public void testConnectWithoutSSLToNonStrictServerPartialWrite() throws Exception {\n        UnifiedServerThread serverThread = new UnifiedServerThread(x509Util, localServerAddress, true, DATA_TO_CLIENT);\n        serverThread.start();\n\n        Socket socket = connectWithoutSSL();\n        try {\n            \r\n            \r\n            \r\n            socket.getOutputStream().write(DATA_FROM_CLIENT, 0, 2);\n            socket.getOutputStream().flush();\n            Thread.sleep(TIMEOUT / 2);\n            socket.getOutputStream().write(DATA_FROM_CLIENT, 2, DATA_FROM_CLIENT.length - 2);\n            socket.getOutputStream().flush();\n            byte[] buf = new byte[DATA_TO_CLIENT.length];\n            int bytesRead = socket.getInputStream().read(buf, 0, buf.length);\n            assertEquals(buf.length, bytesRead);\n            assertArrayEquals(DATA_TO_CLIENT, buf);\n            assertArrayEquals(DATA_FROM_CLIENT, serverThread.getDataFromClient(0));\n        } finally {\n            forceClose(socket);\n            serverThread.shutdown(TIMEOUT);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":371,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
