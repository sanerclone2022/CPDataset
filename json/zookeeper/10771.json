[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public static void ruok(String host, int port) {\n        Socket s = null;\n        try {\n            byte[] reqBytes = new byte[4];\n            ByteBuffer req = ByteBuffer.wrap(reqBytes);\n            req.putInt(ByteBuffer.wrap(\"ruok\".getBytes()).getInt());\n            s = new Socket();\n            s.setSoLinger(false, 10);\n            s.setSoTimeout(20000);\n            s.connect(new InetSocketAddress(host, port));\n\n            InputStream is = s.getInputStream();\n            OutputStream os = s.getOutputStream();\n\n            os.write(reqBytes);\n\n            byte[] resBytes = new byte[4];\n\n            int rc = is.read(resBytes);\n            String retv = new String(resBytes);\n            System.out.println(\"rc=\" + rc + \" retv=\" + retv);\n        } catch (IOException e) {\n            LOG.warn(\"Unexpected exception\", e);\n        } finally {\n            if (s != null) {\n                try {\n                    s.close();\n                } catch (IOException e) {\n                    LOG.warn(\"Unexpected exception\", e);\n                }\n            }\n        }\n    }\n","date":"2018-10-19 20:39:50","endLine":68,"groupId":"1002","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"ruok","params":"(Stringhost@intport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/5e/fa53e903121625e83f364e90259a8395bb254e.src","preCode":"    public static void ruok(String host, int port) {\n        Socket s = null;\n        try {\n            byte[] reqBytes = new byte[4];\n            ByteBuffer req = ByteBuffer.wrap(reqBytes);\n            req.putInt(ByteBuffer.wrap(\"ruok\".getBytes()).getInt());\n            s = new Socket();\n            s.setSoLinger(false, 10);\n            s.setSoTimeout(20000);\n            s.connect(new InetSocketAddress(host, port));\n\n            InputStream is = s.getInputStream();\n            OutputStream os = s.getOutputStream();\n\n            os.write(reqBytes);\n\n            byte[] resBytes = new byte[4];\n\n            int rc = is.read(resBytes);\n            String retv = new String(resBytes);\n            System.out.println(\"rc=\" + rc + \" retv=\" + retv);\n        } catch (IOException e) {\n            LOG.warn(\"Unexpected exception\", e);\n        } finally {\n            if (s != null) {\n                try {\n                    s.close();\n                } catch (IOException e) {\n                    LOG.warn(\"Unexpected exception\", e);\n                }\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public static void dump(String host, int port) {\n        Socket s = null;\n        try {\n            byte[] reqBytes = new byte[4];\n            ByteBuffer req = ByteBuffer.wrap(reqBytes);\n            req.putInt(ByteBuffer.wrap(\"dump\".getBytes()).getInt());\n            s = new Socket();\n            s.setSoLinger(false, 10);\n            s.setSoTimeout(20000);\n            s.connect(new InetSocketAddress(host, port));\n\n            InputStream is = s.getInputStream();\n            OutputStream os = s.getOutputStream();\n\n            os.write(reqBytes);\n\n            byte[] resBytes = new byte[1024];\n\n            int rc = is.read(resBytes);\n            String retv = new String(resBytes);\n            System.out.println(\"rc=\" + rc + \" retv=\" + retv);\n        } catch (IOException e) {\n            LOG.warn(\"Unexpected exception\", e);\n        } finally {\n            if (s != null) {\n                try {\n                    s.close();\n                } catch (IOException e) {\n                    LOG.warn(\"Unexpected exception\", e);\n                }\n            }\n        }\n    }\n","date":"2018-10-19 20:39:50","endLine":102,"groupId":"1002","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"dump","params":"(Stringhost@intport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/5e/fa53e903121625e83f364e90259a8395bb254e.src","preCode":"    public static void dump(String host, int port) {\n        Socket s = null;\n        try {\n            byte[] reqBytes = new byte[4];\n            ByteBuffer req = ByteBuffer.wrap(reqBytes);\n            req.putInt(ByteBuffer.wrap(\"dump\".getBytes()).getInt());\n            s = new Socket();\n            s.setSoLinger(false, 10);\n            s.setSoTimeout(20000);\n            s.connect(new InetSocketAddress(host, port));\n\n            InputStream is = s.getInputStream();\n            OutputStream os = s.getOutputStream();\n\n            os.write(reqBytes);\n\n            byte[] resBytes = new byte[1024];\n\n            int rc = is.read(resBytes);\n            String retv = new String(resBytes);\n            System.out.println(\"rc=\" + rc + \" retv=\" + retv);\n        } catch (IOException e) {\n            LOG.warn(\"Unexpected exception\", e);\n        } finally {\n            if (s != null) {\n                try {\n                    s.close();\n                } catch (IOException e) {\n                    LOG.warn(\"Unexpected exception\", e);\n                }\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2020-10-30 19:03:41","codes":[{"authorDate":"2020-10-30 19:03:41","commitOrder":2,"curCode":"    public static void ruok(String host, int port) {\n        Socket s = null;\n        try {\n            byte[] reqBytes = new byte[4];\n            ByteBuffer req = ByteBuffer.wrap(reqBytes);\n            req.putInt(ByteBuffer.wrap(\"ruok\".getBytes()).getInt());\n            s = new Socket();\n            s.setSoLinger(false, 10);\n            s.setSoTimeout(20000);\n            s.connect(new InetSocketAddress(host, port));\n\n            InputStream is = s.getInputStream();\n            OutputStream os = s.getOutputStream();\n\n            os.write(reqBytes);\n\n            byte[] resBytes = new byte[4];\n\n            int rc = is.read(resBytes);\n            String retv = new String(resBytes, UTF_8);\n            System.out.println(\"rc=\" + rc + \" retv=\" + retv);\n        } catch (IOException e) {\n            LOG.warn(\"Unexpected exception\", e);\n        } finally {\n            if (s != null) {\n                try {\n                    s.close();\n                } catch (IOException e) {\n                    LOG.warn(\"Unexpected exception\", e);\n                }\n            }\n        }\n    }\n","date":"2020-10-30 19:03:41","endLine":69,"groupId":"10771","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"ruok","params":"(Stringhost@intport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a0/8810f28f6f021adb5ada1a5c0998515f9d1758.src","preCode":"    public static void ruok(String host, int port) {\n        Socket s = null;\n        try {\n            byte[] reqBytes = new byte[4];\n            ByteBuffer req = ByteBuffer.wrap(reqBytes);\n            req.putInt(ByteBuffer.wrap(\"ruok\".getBytes()).getInt());\n            s = new Socket();\n            s.setSoLinger(false, 10);\n            s.setSoTimeout(20000);\n            s.connect(new InetSocketAddress(host, port));\n\n            InputStream is = s.getInputStream();\n            OutputStream os = s.getOutputStream();\n\n            os.write(reqBytes);\n\n            byte[] resBytes = new byte[4];\n\n            int rc = is.read(resBytes);\n            String retv = new String(resBytes);\n            System.out.println(\"rc=\" + rc + \" retv=\" + retv);\n        } catch (IOException e) {\n            LOG.warn(\"Unexpected exception\", e);\n        } finally {\n            if (s != null) {\n                try {\n                    s.close();\n                } catch (IOException e) {\n                    LOG.warn(\"Unexpected exception\", e);\n                }\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2020-10-30 19:03:41","commitOrder":2,"curCode":"    public static void dump(String host, int port) {\n        Socket s = null;\n        try {\n            byte[] reqBytes = new byte[4];\n            ByteBuffer req = ByteBuffer.wrap(reqBytes);\n            req.putInt(ByteBuffer.wrap(\"dump\".getBytes()).getInt());\n            s = new Socket();\n            s.setSoLinger(false, 10);\n            s.setSoTimeout(20000);\n            s.connect(new InetSocketAddress(host, port));\n\n            InputStream is = s.getInputStream();\n            OutputStream os = s.getOutputStream();\n\n            os.write(reqBytes);\n\n            byte[] resBytes = new byte[1024];\n\n            int rc = is.read(resBytes);\n            String retv = new String(resBytes, UTF_8);\n            System.out.println(\"rc=\" + rc + \" retv=\" + retv);\n        } catch (IOException e) {\n            LOG.warn(\"Unexpected exception\", e);\n        } finally {\n            if (s != null) {\n                try {\n                    s.close();\n                } catch (IOException e) {\n                    LOG.warn(\"Unexpected exception\", e);\n                }\n            }\n        }\n    }\n","date":"2020-10-30 19:03:41","endLine":103,"groupId":"10771","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"dump","params":"(Stringhost@intport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a0/8810f28f6f021adb5ada1a5c0998515f9d1758.src","preCode":"    public static void dump(String host, int port) {\n        Socket s = null;\n        try {\n            byte[] reqBytes = new byte[4];\n            ByteBuffer req = ByteBuffer.wrap(reqBytes);\n            req.putInt(ByteBuffer.wrap(\"dump\".getBytes()).getInt());\n            s = new Socket();\n            s.setSoLinger(false, 10);\n            s.setSoTimeout(20000);\n            s.connect(new InetSocketAddress(host, port));\n\n            InputStream is = s.getInputStream();\n            OutputStream os = s.getOutputStream();\n\n            os.write(reqBytes);\n\n            byte[] resBytes = new byte[1024];\n\n            int rc = is.read(resBytes);\n            String retv = new String(resBytes);\n            System.out.println(\"rc=\" + rc + \" retv=\" + retv);\n        } catch (IOException e) {\n            LOG.warn(\"Unexpected exception\", e);\n        } finally {\n            if (s != null) {\n                try {\n                    s.close();\n                } catch (IOException e) {\n                    LOG.warn(\"Unexpected exception\", e);\n                }\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"8654e7ed37717df79eb06f75de43eafe4f47b175","commitMessage":"@@@ZOOKEEPER-3342: Use StandardCharsets\n\n> Encodes this String into a sequence of bytes using the platform's default charset.  storing the result into a new byte array.  The behavior of this method when this string cannot be encoded in the default charset is unspecified.\n\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/String.html#getBytes--\n\n1.  Since this is a distributed system.  it is always possible that different nodes have different default charsets defined.  I think it's most safe to specify it explicitly across all nodes for safety sake.  You could for example see a situation where an upgrade JVM uses a different default and during a rolling upgrade of the JVM.  different nodes now have a different default.\n2.  The default charset is usually \"ISO-8859-1\".  UTF-8 covers more of our international friends.\n3. Explicitly specifying the CharSet yields slight performance gains\n4. Explicitly specifying the CharSet removes the need for try/catch blocks of UnsupportedEncodingException\n\nhttps://blog.codecentric.de/en/2014/04/faster-cleaner-code-since-java-7/\n\nAuthor: David Mollitor <dmollitor@apache.org>\nAuthor: Beluga Behr <dam6923@gmail.com>\nAuthor: David Mollitor <dam6923@gmail.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Andor Molnar <anmolnar@apache.org>\n\nCloses #882 from belugabehr/ZOOKEEPER-3342\n","date":"2020-10-30 19:03:41","modifiedFileCount":"32","status":"M","submitter":"David Mollitor"}]
