[{"authorTime":"2019-06-26 16:57:46","codes":[{"authorDate":"2019-06-26 16:57:46","commitOrder":1,"curCode":"    private Record handleGetChildrenRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetChildrenRequest getChildrenRequest = (GetChildrenRequest) request;\n        String path = getChildrenRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        PrepRequestProcessor.checkACL(zks, cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        List<String> children = zks.getZKDatabase().getChildren(path, null,\n                getChildrenRequest.getWatch() ? cnxn : null);\n        return new GetChildrenResponse(children);\n    }\n","date":"2019-06-26 16:57:46","endLine":603,"groupId":"2998","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"handleGetChildrenRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/81/f1145ba096f9cf61c707f23782c524309564b5.src","preCode":"    private Record handleGetChildrenRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetChildrenRequest getChildrenRequest = (GetChildrenRequest) request;\n        String path = getChildrenRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        PrepRequestProcessor.checkACL(zks, cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        List<String> children = zks.getZKDatabase().getChildren(path, null,\n                getChildrenRequest.getWatch() ? cnxn : null);\n        return new GetChildrenResponse(children);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":590,"status":"B"},{"authorDate":"2019-06-26 16:57:46","commitOrder":1,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        PrepRequestProcessor.checkACL(zks, cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-06-26 16:57:46","endLine":619,"groupId":"222","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/81/f1145ba096f9cf61c707f23782c524309564b5.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        PrepRequestProcessor.checkACL(zks, cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"B"}],"commitId":"1b074d6a8a448e1d3d50383a7d6f2e21d5cf1dfc","commitMessage":"@@@ZOOKEEPER-3402: Add multiRead operation\n\nSo.  the possibility of the multi version of getChildren.  getData.  and a common multiRead interface was already mentioned and briefly discussed in the conversation thread of #922.\nThis patch introduces the concept of multiRead operation.\nNote: This is a 'work-in-progress'.  not every comment is added.  and test cases should be extended as well. Currently.  the aim is to decide whether this direction is something that the community would get behind or should fin.\nI've faced more design decision while implementing this (note: I wanted to keep the backward compatibility at all cost).  the more important ones were the following:\n1. Whether the new read operations should be part of Op or should we create new descendant classes of `Op` like `ReadOp` and `WriteOp`. In this case.  I believe it would be unnecessary to create new classes since it would create a lot of code duplication (despite the common ancestor) and the flow of the processing would not be as clean as in the initial state. However.  by simply adding an OpKind enum to the class enables us to ensure the type-safety behavior (read and write operations should not mix) and still preserve the clean processing flow.\n2. At which point of request processing should we capture the mixed (transaction and read operation) multi requests? It seems pretty clear to catch them client side and not create extra work for the server.\n3. Do we even need a `multiRead` operation or this whole improvement could be just part of multi? Well.  the main problem is the following: currently.  on server side (and in general.  everywhere in ZooKeeper) the fact that multi only contains transactions is a heavily used and built upon it. The whole `multi` processing flow should be rewritten from zero and also the server would get a significant extra work for that. So yeah.  it seems pretty clear to me that introducing the `multiRead` operation is beneficial.\n\nHope these thoughts make sense! Any observations.  questions are welcome!\n\nAuthor: szepet <szepet95@gmail.com>\nAuthor: Peter Szecsi <szepet95@gmail.com>\n\nReviewers: fangmin@apache.org.  andor@apache.org\n\nCloses #959 from szepet/ZOOKEEPER-3402 and squashes the following commits:\n\n2f128ef11 [szepet] rephrase exception\n660351cce [Peter Szecsi] Rename MultiTransactionRecord to MultiOperationRecord\n71a6d2e22 [Peter Szecsi] address some review comments\n3cec54850 [szepet] make sure not to expose the internal representation in GetDataResult\nd4c6764ee [szepet] ZOOKEEPER-3402: Add multiRead operation\n","date":"2019-06-26 16:57:46","modifiedFileCount":"11","status":"B","submitter":"szepet"},{"authorTime":"2019-08-01 13:31:29","codes":[{"authorDate":"2019-08-01 13:31:29","commitOrder":2,"curCode":"    private Record handleGetChildrenRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetChildrenRequest getChildrenRequest = (GetChildrenRequest) request;\n        String path = getChildrenRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        List<String> children = zks.getZKDatabase().getChildren(path, null,\n                getChildrenRequest.getWatch() ? cnxn : null);\n        return new GetChildrenResponse(children);\n    }\n","date":"2019-08-01 13:31:29","endLine":621,"groupId":"878","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"handleGetChildrenRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/96/2a2675f787d79c6f6e11fd70400211f4784929.src","preCode":"    private Record handleGetChildrenRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetChildrenRequest getChildrenRequest = (GetChildrenRequest) request;\n        String path = getChildrenRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        PrepRequestProcessor.checkACL(zks, cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        List<String> children = zks.getZKDatabase().getChildren(path, null,\n                getChildrenRequest.getWatch() ? cnxn : null);\n        return new GetChildrenResponse(children);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":608,"status":"M"},{"authorDate":"2019-08-01 13:31:29","commitOrder":2,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-01 13:31:29","endLine":637,"groupId":"1740","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/96/2a2675f787d79c6f6e11fd70400211f4784929.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        PrepRequestProcessor.checkACL(zks, cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"M"}],"commitId":"b2f5548bd5757edbf1887838a487a90523ed2b52","commitMessage":"@@@ZOOKEEPER-3418: Improve quorum throughput through eager ACL checks of requests on local servers.\n\nServing write requests that change the state of the system requires quorum operations.  and in some cases.  the quorum operations can be avoided if the requests are doomed to fail. ACL check failure is such a case. To optimize for this case.  we elevate the ACL check logic and perform eager ACL check on local server (where the requests are received).  and fail fast.  before sending the requests to leader.\n\nAs with any features.  there is a feature flag that can control this feature on.  or off (default). This feature is also forward compatible in that for new any new Op code (and some existing Op code we did not explicit check against).  they will pass the check and (potentially) fail on leader side.  instead of being prematurely filtered out on local server.\n\nThe end result is better throughput and stability of the quorum for certain workloads.\n\nAuthor: Michael Han <lhan@twitter.com>\n\nReviewers: Andor Molnar <andor@apache.org>.  Enrico Olivelli <eolivelli@apache.org>\n\nCloses #971 from hanm/twitter/5c6bbfac811d29228fd97a4621fd6ba547fed178\n","date":"2019-08-01 13:31:29","modifiedFileCount":"9","status":"M","submitter":"Michael Han"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-01 13:31:29","commitOrder":3,"curCode":"    private Record handleGetChildrenRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetChildrenRequest getChildrenRequest = (GetChildrenRequest) request;\n        String path = getChildrenRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        List<String> children = zks.getZKDatabase().getChildren(path, null,\n                getChildrenRequest.getWatch() ? cnxn : null);\n        return new GetChildrenResponse(children);\n    }\n","date":"2019-08-01 13:31:29","endLine":621,"groupId":"10763","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"handleGetChildrenRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/96/2a2675f787d79c6f6e11fd70400211f4784929.src","preCode":"    private Record handleGetChildrenRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetChildrenRequest getChildrenRequest = (GetChildrenRequest) request;\n        String path = getChildrenRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        List<String> children = zks.getZKDatabase().getChildren(path, null,\n                getChildrenRequest.getWatch() ? cnxn : null);\n        return new GetChildrenResponse(children);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":608,"status":"N"},{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","date":"2019-08-17 23:13:15","endLine":624,"groupId":"10763","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"handleGetDataRequest","params":"(Recordrequest@ServerCnxncnxn@List<Id>authInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ec/9cdf1b3c63f51075e868feebab2c2bffee7a3e.src","preCode":"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo)\n            throws KeeperException, IOException {\n        GetDataRequest getDataRequest = (GetDataRequest) request;\n        String path = getDataRequest.getPath();\n        DataNode n = zks.getZKDatabase().getNode(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n),\n                ZooDefs.Perms.READ, authInfo, path, null);\n        Stat stat = new Stat();\n        byte b[] = zks.getZKDatabase().getData(path, stat,\n                getDataRequest.getWatch() ? cnxn : null);\n        return new GetDataResponse(b, stat);\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"}]
