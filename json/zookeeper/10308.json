[{"authorTime":"2018-11-23 00:56:01","codes":[{"authorDate":"2018-11-23 00:56:01","commitOrder":2,"curCode":"    public void testClientResponseStatsUpdate() throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient()) {\n            BufferStats clientResponseStats = serverFactory.getZooKeeperServer().serverStats().getClientResponseStats();\n            assertThat(\"Last client response size should be initialized with INIT_VALUE\",\n                    clientResponseStats.getLastBufferSize(), equalTo(BufferStats.INIT_VALUE));\n\n            zk.create(\"/a\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n\n            assertThat(\"Last client response size should be greater than 0 after client request was performed\",\n                    clientResponseStats.getLastBufferSize(), greaterThan(0));\n\n            byte[] contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"unexpected data\", \"test\".getBytes(), contents);\n        }\n    }\n","date":"2018-11-23 00:56:01","endLine":128,"groupId":"745","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testClientResponseStatsUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/7c/51a1276daec0f6d4bf0a1b93582bc0d9aebd20.src","preCode":"    public void testClientResponseStatsUpdate() throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient()) {\n            BufferStats clientResponseStats = serverFactory.getZooKeeperServer().serverStats().getClientResponseStats();\n            assertThat(\"Last client response size should be initialized with INIT_VALUE\",\n                    clientResponseStats.getLastBufferSize(), equalTo(BufferStats.INIT_VALUE));\n\n            zk.create(\"/a\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n\n            assertThat(\"Last client response size should be greater than 0 after client request was performed\",\n                    clientResponseStats.getLastBufferSize(), greaterThan(0));\n\n            byte[] contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"unexpected data\", \"test\".getBytes(), contents);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"MB"},{"authorDate":"2018-11-23 00:56:01","commitOrder":2,"curCode":"    public void testServerSideThrottling() throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient()) {\n            BufferStats clientResponseStats = serverFactory.getZooKeeperServer().serverStats().getClientResponseStats();\n            assertThat(\"Last client response size should be initialized with INIT_VALUE\",\n                    clientResponseStats.getLastBufferSize(), equalTo(BufferStats.INIT_VALUE));\n\n            zk.create(\"/a\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n\n            assertThat(\"Last client response size should be greater than 0 after client request was performed\",\n                    clientResponseStats.getLastBufferSize(), greaterThan(0));\n\n            for (final ServerCnxn cnxn : serverFactory.cnxns) {\n                final NettyServerCnxn nettyCnxn = ((NettyServerCnxn) cnxn);\n                \r\n                nettyCnxn.disableRecv();\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.getChannel().read();\n                    }\n                }, 1, TimeUnit.SECONDS);\n\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.enableRecv();\n                    }\n                }, 2, TimeUnit.SECONDS);\n            }\n\n            byte[] contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"unexpected data\", \"test\".getBytes(), contents);\n\n            \r\n            \r\n            for (final ServerCnxn cnxn : serverFactory.cnxns) {\n                final NettyServerCnxn nettyCnxn = ((NettyServerCnxn) cnxn);\n                \r\n                nettyCnxn.disableRecv();\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.enableRecv();\n                    }\n                }, 2, TimeUnit.SECONDS);\n            }\n\n            contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"unexpected data\", \"test\".getBytes(), contents);\n        }\n    }\n","date":"2018-11-23 00:56:01","endLine":185,"groupId":"745","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testServerSideThrottling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/7c/51a1276daec0f6d4bf0a1b93582bc0d9aebd20.src","preCode":"    public void testServerSideThrottling() throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient()) {\n            BufferStats clientResponseStats = serverFactory.getZooKeeperServer().serverStats().getClientResponseStats();\n            assertThat(\"Last client response size should be initialized with INIT_VALUE\",\n                    clientResponseStats.getLastBufferSize(), equalTo(BufferStats.INIT_VALUE));\n\n            zk.create(\"/a\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n\n            assertThat(\"Last client response size should be greater than 0 after client request was performed\",\n                    clientResponseStats.getLastBufferSize(), greaterThan(0));\n\n            for (final ServerCnxn cnxn : serverFactory.cnxns) {\n                final NettyServerCnxn nettyCnxn = ((NettyServerCnxn) cnxn);\n                \r\n                nettyCnxn.disableRecv();\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.getChannel().read();\n                    }\n                }, 1, TimeUnit.SECONDS);\n\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.enableRecv();\n                    }\n                }, 2, TimeUnit.SECONDS);\n            }\n\n            byte[] contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"unexpected data\", \"test\".getBytes(), contents);\n\n            \r\n            \r\n            for (final ServerCnxn cnxn : serverFactory.cnxns) {\n                final NettyServerCnxn nettyCnxn = ((NettyServerCnxn) cnxn);\n                \r\n                nettyCnxn.disableRecv();\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.enableRecv();\n                    }\n                }, 2, TimeUnit.SECONDS);\n            }\n\n            contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"unexpected data\", \"test\".getBytes(), contents);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"}],"commitId":"caca062767c36525e6ecead2ae0f34c447394809","commitMessage":"@@@ZOOKEEPER-3152: Port ZK netty stack to netty4\n\nSummary: Ported the client connection netty stack from netty3 to netty4. This includes both the server side (NettyServerCnxn and friends) and the client side (ClientCnxnSocketNetty).\n\nTest Plan: Modified `FourLetterWordsTest` and `NettyServerCnxnTest`.  plus manual testing on a regional ensemble.\n\nFB Reviewers: nixon\n\nAuthor: Ilya Maykov <ilyam@fb.com>\n\nReviewers: andor@apache.org\n\nCloses #669 from ivmaykov/ZOOKEEPER-3152\n","date":"2018-11-23 00:56:01","modifiedFileCount":"12","status":"M","submitter":"Ilya Maykov"},{"authorTime":"2019-02-12 22:25:17","codes":[{"authorDate":"2019-02-12 22:25:17","commitOrder":3,"curCode":"    public void testClientResponseStatsUpdate() throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient()) {\n            BufferStats clientResponseStats = serverFactory.getZooKeeperServer().serverStats().getClientResponseStats();\n            assertThat(\"Last client response size should be initialized with INIT_VALUE\",\n                    clientResponseStats.getLastBufferSize(), equalTo(BufferStats.INIT_VALUE));\n\n            zk.create(\"/a\", \"test\".getBytes(StandardCharsets.UTF_8), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n\n            assertThat(\"Last client response size should be greater than 0 after client request was performed\",\n                    clientResponseStats.getLastBufferSize(), greaterThan(0));\n\n            byte[] contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"unexpected data\", \"test\".getBytes(StandardCharsets.UTF_8), contents);\n        }\n    }\n","date":"2019-02-12 22:25:17","endLine":129,"groupId":"745","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testClientResponseStatsUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fd/3480421343b2c62fe1079cbc88fbf4c0ce86c8.src","preCode":"    public void testClientResponseStatsUpdate() throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient()) {\n            BufferStats clientResponseStats = serverFactory.getZooKeeperServer().serverStats().getClientResponseStats();\n            assertThat(\"Last client response size should be initialized with INIT_VALUE\",\n                    clientResponseStats.getLastBufferSize(), equalTo(BufferStats.INIT_VALUE));\n\n            zk.create(\"/a\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n\n            assertThat(\"Last client response size should be greater than 0 after client request was performed\",\n                    clientResponseStats.getLastBufferSize(), greaterThan(0));\n\n            byte[] contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"unexpected data\", \"test\".getBytes(), contents);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2019-02-12 22:25:17","commitOrder":3,"curCode":"    public void testServerSideThrottling() throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient()) {\n            BufferStats clientResponseStats = serverFactory.getZooKeeperServer().serverStats().getClientResponseStats();\n            assertThat(\"Last client response size should be initialized with INIT_VALUE\",\n                    clientResponseStats.getLastBufferSize(), equalTo(BufferStats.INIT_VALUE));\n\n            zk.create(\"/a\", \"test\".getBytes(StandardCharsets.UTF_8), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n\n            assertThat(\"Last client response size should be greater than 0 after client request was performed\",\n                    clientResponseStats.getLastBufferSize(), greaterThan(0));\n\n            for (final ServerCnxn cnxn : serverFactory.cnxns) {\n                final NettyServerCnxn nettyCnxn = ((NettyServerCnxn) cnxn);\n                \r\n                nettyCnxn.disableRecv();\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.getChannel().read();\n                    }\n                }, 1, TimeUnit.SECONDS);\n\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.enableRecv();\n                    }\n                }, 2, TimeUnit.SECONDS);\n            }\n\n            byte[] contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"unexpected data\", \"test\".getBytes(StandardCharsets.UTF_8), contents);\n\n            \r\n            \r\n            for (final ServerCnxn cnxn : serverFactory.cnxns) {\n                final NettyServerCnxn nettyCnxn = ((NettyServerCnxn) cnxn);\n                \r\n                nettyCnxn.disableRecv();\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.enableRecv();\n                    }\n                }, 2, TimeUnit.SECONDS);\n            }\n\n            contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"unexpected data\", \"test\".getBytes(StandardCharsets.UTF_8), contents);\n        }\n    }\n","date":"2019-02-12 22:25:17","endLine":186,"groupId":"745","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testServerSideThrottling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fd/3480421343b2c62fe1079cbc88fbf4c0ce86c8.src","preCode":"    public void testServerSideThrottling() throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient()) {\n            BufferStats clientResponseStats = serverFactory.getZooKeeperServer().serverStats().getClientResponseStats();\n            assertThat(\"Last client response size should be initialized with INIT_VALUE\",\n                    clientResponseStats.getLastBufferSize(), equalTo(BufferStats.INIT_VALUE));\n\n            zk.create(\"/a\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n\n            assertThat(\"Last client response size should be greater than 0 after client request was performed\",\n                    clientResponseStats.getLastBufferSize(), greaterThan(0));\n\n            for (final ServerCnxn cnxn : serverFactory.cnxns) {\n                final NettyServerCnxn nettyCnxn = ((NettyServerCnxn) cnxn);\n                \r\n                nettyCnxn.disableRecv();\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.getChannel().read();\n                    }\n                }, 1, TimeUnit.SECONDS);\n\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.enableRecv();\n                    }\n                }, 2, TimeUnit.SECONDS);\n            }\n\n            byte[] contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"unexpected data\", \"test\".getBytes(), contents);\n\n            \r\n            \r\n            for (final ServerCnxn cnxn : serverFactory.cnxns) {\n                final NettyServerCnxn nettyCnxn = ((NettyServerCnxn) cnxn);\n                \r\n                nettyCnxn.disableRecv();\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.enableRecv();\n                    }\n                }, 2, TimeUnit.SECONDS);\n            }\n\n            contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"unexpected data\", \"test\".getBytes(), contents);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"c2b63926c1249c454319bffe15a7b9f340e0526f","commitMessage":"@@@ZOOKEEPER-3272: Clean up netty4 code per Norman Maurer's review comments\n\nNetty4 code clean-up per the discussion in PR #753.\n\nAuthor: Ilya Maykov <ilyam@fb.com>\n\nReviewers: norman_maurer@apple.com.  andor@apache.org\n\nCloses #809 from ivmaykov/ZOOKEEPER-3272 and squashes the following commits:\n\n26d2b338f [Ilya Maykov] Merge branch 'master' into ZOOKEEPER-3272\n201449641 [Ilya Maykov] Address code review comments\na162c54b0 [Ilya Maykov] ZOOKEEPER-3272: Clean up netty4 code per Norman Maurer's review comments\n","date":"2019-02-12 22:25:17","modifiedFileCount":"5","status":"M","submitter":"Ilya Maykov"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testClientResponseStatsUpdate() throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient()) {\n            BufferStats clientResponseStats = serverFactory.getZooKeeperServer().serverStats().getClientResponseStats();\n            assertThat(\"Last client response size should be initialized with INIT_VALUE\", clientResponseStats.getLastBufferSize(), equalTo(BufferStats.INIT_VALUE));\n\n            zk.create(\"/a\", \"test\".getBytes(StandardCharsets.UTF_8), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n            assertThat(\"Last client response size should be greater than 0 after client request was performed\", clientResponseStats.getLastBufferSize(), greaterThan(0));\n\n            byte[] contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"test\".getBytes(StandardCharsets.UTF_8), contents, \"unexpected data\");\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":153,"groupId":"10308","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testClientResponseStatsUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/cd/7842fa3093f7980b2edf3e836dab09146cb78d.src","preCode":"    public void testClientResponseStatsUpdate() throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient()) {\n            BufferStats clientResponseStats = serverFactory.getZooKeeperServer().serverStats().getClientResponseStats();\n            assertThat(\"Last client response size should be initialized with INIT_VALUE\", clientResponseStats.getLastBufferSize(), equalTo(BufferStats.INIT_VALUE));\n\n            zk.create(\"/a\", \"test\".getBytes(StandardCharsets.UTF_8), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n            assertThat(\"Last client response size should be greater than 0 after client request was performed\", clientResponseStats.getLastBufferSize(), greaterThan(0));\n\n            byte[] contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"unexpected data\", \"test\".getBytes(StandardCharsets.UTF_8), contents);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testServerSideThrottling() throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient()) {\n            BufferStats clientResponseStats = serverFactory.getZooKeeperServer().serverStats().getClientResponseStats();\n            assertThat(\"Last client response size should be initialized with INIT_VALUE\", clientResponseStats.getLastBufferSize(), equalTo(BufferStats.INIT_VALUE));\n\n            zk.create(\"/a\", \"test\".getBytes(StandardCharsets.UTF_8), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n            assertThat(\"Last client response size should be greater than 0 after client request was performed\", clientResponseStats.getLastBufferSize(), greaterThan(0));\n\n            for (final ServerCnxn cnxn : serverFactory.cnxns) {\n                final NettyServerCnxn nettyCnxn = ((NettyServerCnxn) cnxn);\n                \r\n                nettyCnxn.disableRecv();\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.getChannel().read();\n                    }\n                }, 1, TimeUnit.SECONDS);\n\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.enableRecv();\n                    }\n                }, 2, TimeUnit.SECONDS);\n            }\n\n            byte[] contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"test\".getBytes(StandardCharsets.UTF_8), contents, \"unexpected data\");\n\n            \r\n            \r\n            for (final ServerCnxn cnxn : serverFactory.cnxns) {\n                final NettyServerCnxn nettyCnxn = ((NettyServerCnxn) cnxn);\n                \r\n                nettyCnxn.disableRecv();\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.enableRecv();\n                    }\n                }, 2, TimeUnit.SECONDS);\n            }\n\n            contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"test\".getBytes(StandardCharsets.UTF_8), contents, \"unexpected data\");\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":207,"groupId":"10308","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testServerSideThrottling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/cd/7842fa3093f7980b2edf3e836dab09146cb78d.src","preCode":"    public void testServerSideThrottling() throws IOException, InterruptedException, KeeperException {\n        try (ZooKeeper zk = createClient()) {\n            BufferStats clientResponseStats = serverFactory.getZooKeeperServer().serverStats().getClientResponseStats();\n            assertThat(\"Last client response size should be initialized with INIT_VALUE\", clientResponseStats.getLastBufferSize(), equalTo(BufferStats.INIT_VALUE));\n\n            zk.create(\"/a\", \"test\".getBytes(StandardCharsets.UTF_8), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n            assertThat(\"Last client response size should be greater than 0 after client request was performed\", clientResponseStats.getLastBufferSize(), greaterThan(0));\n\n            for (final ServerCnxn cnxn : serverFactory.cnxns) {\n                final NettyServerCnxn nettyCnxn = ((NettyServerCnxn) cnxn);\n                \r\n                nettyCnxn.disableRecv();\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.getChannel().read();\n                    }\n                }, 1, TimeUnit.SECONDS);\n\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.enableRecv();\n                    }\n                }, 2, TimeUnit.SECONDS);\n            }\n\n            byte[] contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"unexpected data\", \"test\".getBytes(StandardCharsets.UTF_8), contents);\n\n            \r\n            \r\n            for (final ServerCnxn cnxn : serverFactory.cnxns) {\n                final NettyServerCnxn nettyCnxn = ((NettyServerCnxn) cnxn);\n                \r\n                nettyCnxn.disableRecv();\n                \r\n                nettyCnxn.getChannel().eventLoop().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        nettyCnxn.enableRecv();\n                    }\n                }, 2, TimeUnit.SECONDS);\n            }\n\n            contents = zk.getData(\"/a\", null, null);\n            assertArrayEquals(\"unexpected data\", \"test\".getBytes(StandardCharsets.UTF_8), contents);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
