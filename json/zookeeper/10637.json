[{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testMultiGetData() throws Exception {\n        zk.create(\"/node1\", \"data1\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/node2\", \"data2\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        List<OpResult> multiData = multi(zk, Arrays.asList(Op.getData(\"/node1\"), Op.getData(\"/node2\")));\n        assertEquals(multiData.size(), 2);\n        assertArrayEquals(((OpResult.GetDataResult) multiData.get(0)).getData(), \"data1\".getBytes());\n        assertArrayEquals(((OpResult.GetDataResult) multiData.get(1)).getData(), \"data2\".getBytes());\n    }\n","date":"2019-08-17 23:13:15","endLine":853,"groupId":"4360","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiGetData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/2e/48600da00aac97ff91a16afb6f720b988581bb.src","preCode":"    public void testMultiGetData() throws Exception {\n        zk.create(\"/node1\", \"data1\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/node2\", \"data2\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        List<OpResult> multiData = multi(zk, Arrays.asList(Op.getData(\"/node1\"), Op.getData(\"/node2\")));\n        assertEquals(multiData.size(), 2);\n        assertArrayEquals(((OpResult.GetDataResult) multiData.get(0)).getData(), \"data1\".getBytes());\n        assertArrayEquals(((OpResult.GetDataResult) multiData.get(1)).getData(), \"data2\".getBytes());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/MultiOperationTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":845,"status":"MB"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testMultiRead() throws Exception {\n        zk.create(\"/node1\", \"data1\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/node2\", \"data2\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        zk.create(\"/node1/node1\", \"data11\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/node1/node2\", \"data12\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        List<OpResult> multiRead = multi(zk, Arrays.asList(\n                Op.getChildren(\"/node1\"),\n                Op.getData(\"/node1\"),\n                Op.getChildren(\"/node2\"),\n                Op.getData(\"/node2\")));\n        assertEquals(multiRead.size(), 4);\n        assertTrue(multiRead.get(0) instanceof OpResult.GetChildrenResult);\n        List<String> childrenList = ((OpResult.GetChildrenResult) multiRead.get(0)).getChildren();\n        assertEquals(childrenList.size(), 2);\n        assertEquals(new TreeSet<String>(childrenList), new TreeSet<String>(Arrays.asList(\"node1\", \"node2\")));\n\n        assertArrayEquals(((OpResult.GetDataResult) multiRead.get(1)).getData(), \"data1\".getBytes());\n        Stat stat = ((OpResult.GetDataResult) multiRead.get(1)).getStat();\n        assertEquals(stat.getMzxid(), stat.getCzxid());\n        assertEquals(stat.getCtime(), stat.getMtime());\n        assertEquals(2, stat.getCversion());\n        assertEquals(0, stat.getVersion());\n        assertEquals(0, stat.getAversion());\n        assertEquals(0, stat.getEphemeralOwner());\n        assertEquals(5, stat.getDataLength());\n        assertEquals(2, stat.getNumChildren());\n\n        assertTrue(multiRead.get(2) instanceof OpResult.GetChildrenResult);\n        childrenList = ((OpResult.GetChildrenResult) multiRead.get(2)).getChildren();\n        assertTrue(childrenList.isEmpty());\n\n        assertArrayEquals(((OpResult.GetDataResult) multiRead.get(3)).getData(), \"data2\".getBytes());\n        stat = ((OpResult.GetDataResult) multiRead.get(3)).getStat();\n        assertEquals(stat.getMzxid(), stat.getCzxid());\n        assertEquals(stat.getMzxid(), stat.getPzxid());\n        assertEquals(stat.getCtime(), stat.getMtime());\n        assertEquals(0, stat.getCversion());\n        assertEquals(0, stat.getVersion());\n        assertEquals(0, stat.getAversion());\n        assertEquals(zk.getSessionId(), stat.getEphemeralOwner());\n        assertEquals(5, stat.getDataLength());\n        assertEquals(0, stat.getNumChildren());\n    }\n","date":"2019-08-17 23:13:15","endLine":899,"groupId":"3803","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/2e/48600da00aac97ff91a16afb6f720b988581bb.src","preCode":"    public void testMultiRead() throws Exception {\n        zk.create(\"/node1\", \"data1\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/node2\", \"data2\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        zk.create(\"/node1/node1\", \"data11\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/node1/node2\", \"data12\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        List<OpResult> multiRead = multi(zk, Arrays.asList(\n                Op.getChildren(\"/node1\"),\n                Op.getData(\"/node1\"),\n                Op.getChildren(\"/node2\"),\n                Op.getData(\"/node2\")));\n        assertEquals(multiRead.size(), 4);\n        assertTrue(multiRead.get(0) instanceof OpResult.GetChildrenResult);\n        List<String> childrenList = ((OpResult.GetChildrenResult) multiRead.get(0)).getChildren();\n        assertEquals(childrenList.size(), 2);\n        assertEquals(new TreeSet<String>(childrenList), new TreeSet<String>(Arrays.asList(\"node1\", \"node2\")));\n\n        assertArrayEquals(((OpResult.GetDataResult) multiRead.get(1)).getData(), \"data1\".getBytes());\n        Stat stat = ((OpResult.GetDataResult) multiRead.get(1)).getStat();\n        assertEquals(stat.getMzxid(), stat.getCzxid());\n        assertEquals(stat.getCtime(), stat.getMtime());\n        assertEquals(2, stat.getCversion());\n        assertEquals(0, stat.getVersion());\n        assertEquals(0, stat.getAversion());\n        assertEquals(0, stat.getEphemeralOwner());\n        assertEquals(5, stat.getDataLength());\n        assertEquals(2, stat.getNumChildren());\n\n        assertTrue(multiRead.get(2) instanceof OpResult.GetChildrenResult);\n        childrenList = ((OpResult.GetChildrenResult) multiRead.get(2)).getChildren();\n        assertTrue(childrenList.isEmpty());\n\n        assertArrayEquals(((OpResult.GetDataResult) multiRead.get(3)).getData(), \"data2\".getBytes());\n        stat = ((OpResult.GetDataResult) multiRead.get(3)).getStat();\n        assertEquals(stat.getMzxid(), stat.getCzxid());\n        assertEquals(stat.getMzxid(), stat.getPzxid());\n        assertEquals(stat.getCtime(), stat.getMtime());\n        assertEquals(0, stat.getCversion());\n        assertEquals(0, stat.getVersion());\n        assertEquals(0, stat.getAversion());\n        assertEquals(zk.getSessionId(), stat.getEphemeralOwner());\n        assertEquals(5, stat.getDataLength());\n        assertEquals(0, stat.getNumChildren());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/MultiOperationTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":856,"status":"MB"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testMultiGetData(boolean useAsync) throws Exception {\n        zk.create(\"/node1\", \"data1\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/node2\", \"data2\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        List<OpResult> multiData = multi(zk, Arrays.asList(Op.getData(\"/node1\"), Op.getData(\"/node2\")), useAsync);\n        assertEquals(multiData.size(), 2);\n        assertArrayEquals(((OpResult.GetDataResult) multiData.get(0)).getData(), \"data1\".getBytes());\n        assertArrayEquals(((OpResult.GetDataResult) multiData.get(1)).getData(), \"data2\".getBytes());\n    }\n","date":"2020-08-04 21:01:52","endLine":889,"groupId":"10637","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testMultiGetData","params":"(booleanuseAsync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/4f/f593222fe15df710f0d422f0f59b71e3793137.src","preCode":"    public void testMultiGetData() throws Exception {\n        zk.create(\"/node1\", \"data1\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/node2\", \"data2\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        List<OpResult> multiData = multi(zk, Arrays.asList(Op.getData(\"/node1\"), Op.getData(\"/node2\")));\n        assertEquals(multiData.size(), 2);\n        assertArrayEquals(((OpResult.GetDataResult) multiData.get(0)).getData(), \"data1\".getBytes());\n        assertArrayEquals(((OpResult.GetDataResult) multiData.get(1)).getData(), \"data2\".getBytes());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/MultiOperationTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":881,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testMultiRead(boolean useAsync) throws Exception {\n        zk.create(\"/node1\", \"data1\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/node2\", \"data2\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        zk.create(\"/node1/node1\", \"data11\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/node1/node2\", \"data12\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        List<OpResult> multiRead = multi(zk, Arrays.asList(\n                Op.getChildren(\"/node1\"),\n                Op.getData(\"/node1\"),\n                Op.getChildren(\"/node2\"),\n                Op.getData(\"/node2\")),\n                useAsync);\n        assertEquals(multiRead.size(), 4);\n        assertTrue(multiRead.get(0) instanceof OpResult.GetChildrenResult);\n        List<String> childrenList = ((OpResult.GetChildrenResult) multiRead.get(0)).getChildren();\n        assertEquals(childrenList.size(), 2);\n        assertEquals(new TreeSet<String>(childrenList), new TreeSet<String>(Arrays.asList(\"node1\", \"node2\")));\n\n        assertArrayEquals(((OpResult.GetDataResult) multiRead.get(1)).getData(), \"data1\".getBytes());\n        Stat stat = ((OpResult.GetDataResult) multiRead.get(1)).getStat();\n        assertEquals(stat.getMzxid(), stat.getCzxid());\n        assertEquals(stat.getCtime(), stat.getMtime());\n        assertEquals(2, stat.getCversion());\n        assertEquals(0, stat.getVersion());\n        assertEquals(0, stat.getAversion());\n        assertEquals(0, stat.getEphemeralOwner());\n        assertEquals(5, stat.getDataLength());\n        assertEquals(2, stat.getNumChildren());\n\n        assertTrue(multiRead.get(2) instanceof OpResult.GetChildrenResult);\n        childrenList = ((OpResult.GetChildrenResult) multiRead.get(2)).getChildren();\n        assertTrue(childrenList.isEmpty());\n\n        assertArrayEquals(((OpResult.GetDataResult) multiRead.get(3)).getData(), \"data2\".getBytes());\n        stat = ((OpResult.GetDataResult) multiRead.get(3)).getStat();\n        assertEquals(stat.getMzxid(), stat.getCzxid());\n        assertEquals(stat.getMzxid(), stat.getPzxid());\n        assertEquals(stat.getCtime(), stat.getMtime());\n        assertEquals(0, stat.getCversion());\n        assertEquals(0, stat.getVersion());\n        assertEquals(0, stat.getAversion());\n        assertEquals(zk.getSessionId(), stat.getEphemeralOwner());\n        assertEquals(5, stat.getDataLength());\n        assertEquals(0, stat.getNumChildren());\n    }\n","date":"2020-08-04 21:01:52","endLine":937,"groupId":"10637","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testMultiRead","params":"(booleanuseAsync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/4f/f593222fe15df710f0d422f0f59b71e3793137.src","preCode":"    public void testMultiRead() throws Exception {\n        zk.create(\"/node1\", \"data1\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/node2\", \"data2\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        zk.create(\"/node1/node1\", \"data11\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/node1/node2\", \"data12\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        List<OpResult> multiRead = multi(zk, Arrays.asList(\n                Op.getChildren(\"/node1\"),\n                Op.getData(\"/node1\"),\n                Op.getChildren(\"/node2\"),\n                Op.getData(\"/node2\")));\n        assertEquals(multiRead.size(), 4);\n        assertTrue(multiRead.get(0) instanceof OpResult.GetChildrenResult);\n        List<String> childrenList = ((OpResult.GetChildrenResult) multiRead.get(0)).getChildren();\n        assertEquals(childrenList.size(), 2);\n        assertEquals(new TreeSet<String>(childrenList), new TreeSet<String>(Arrays.asList(\"node1\", \"node2\")));\n\n        assertArrayEquals(((OpResult.GetDataResult) multiRead.get(1)).getData(), \"data1\".getBytes());\n        Stat stat = ((OpResult.GetDataResult) multiRead.get(1)).getStat();\n        assertEquals(stat.getMzxid(), stat.getCzxid());\n        assertEquals(stat.getCtime(), stat.getMtime());\n        assertEquals(2, stat.getCversion());\n        assertEquals(0, stat.getVersion());\n        assertEquals(0, stat.getAversion());\n        assertEquals(0, stat.getEphemeralOwner());\n        assertEquals(5, stat.getDataLength());\n        assertEquals(2, stat.getNumChildren());\n\n        assertTrue(multiRead.get(2) instanceof OpResult.GetChildrenResult);\n        childrenList = ((OpResult.GetChildrenResult) multiRead.get(2)).getChildren();\n        assertTrue(childrenList.isEmpty());\n\n        assertArrayEquals(((OpResult.GetDataResult) multiRead.get(3)).getData(), \"data2\".getBytes());\n        stat = ((OpResult.GetDataResult) multiRead.get(3)).getStat();\n        assertEquals(stat.getMzxid(), stat.getCzxid());\n        assertEquals(stat.getMzxid(), stat.getPzxid());\n        assertEquals(stat.getCtime(), stat.getMtime());\n        assertEquals(0, stat.getCversion());\n        assertEquals(0, stat.getVersion());\n        assertEquals(0, stat.getAversion());\n        assertEquals(zk.getSessionId(), stat.getEphemeralOwner());\n        assertEquals(5, stat.getDataLength());\n        assertEquals(0, stat.getNumChildren());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/MultiOperationTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":893,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
