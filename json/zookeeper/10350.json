[{"authorTime":"2018-11-07 09:29:49","codes":[{"authorDate":"2018-11-07 09:29:49","commitOrder":1,"curCode":"    private File getTrustStoreJksFile() throws IOException {\n        if (trustStoreJksFile == null) {\n            try {\n                File trustStoreJksFile = File.createTempFile(\n                        TRUST_STORE_PREFIX, KeyStoreFileType.JKS.getDefaultFileExtension(), tempDir);\n                trustStoreJksFile.deleteOnExit();\n                final FileOutputStream trustStoreOutputStream = new FileOutputStream(trustStoreJksFile);\n                try {\n                    byte[] bytes = X509TestHelpers.certToJavaTrustStoreBytes(trustStoreCertificate, trustStorePassword);\n                    trustStoreOutputStream.write(bytes);\n                    trustStoreOutputStream.flush();\n                } finally {\n                    trustStoreOutputStream.close();\n                }\n                this.trustStoreJksFile = trustStoreJksFile;\n            } catch (GeneralSecurityException e) {\n                throw new IOException(e);\n            }\n        }\n        return trustStoreJksFile;\n    }\n","date":"2018-11-07 09:29:49","endLine":200,"groupId":"2394","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getTrustStoreJksFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/5a/86bb4a7a877a3215f7e11f0cb4a848cd3c2dae.src","preCode":"    private File getTrustStoreJksFile() throws IOException {\n        if (trustStoreJksFile == null) {\n            try {\n                File trustStoreJksFile = File.createTempFile(\n                        TRUST_STORE_PREFIX, KeyStoreFileType.JKS.getDefaultFileExtension(), tempDir);\n                trustStoreJksFile.deleteOnExit();\n                final FileOutputStream trustStoreOutputStream = new FileOutputStream(trustStoreJksFile);\n                try {\n                    byte[] bytes = X509TestHelpers.certToJavaTrustStoreBytes(trustStoreCertificate, trustStorePassword);\n                    trustStoreOutputStream.write(bytes);\n                    trustStoreOutputStream.flush();\n                } finally {\n                    trustStoreOutputStream.close();\n                }\n                this.trustStoreJksFile = trustStoreJksFile;\n            } catch (GeneralSecurityException e) {\n                throw new IOException(e);\n            }\n        }\n        return trustStoreJksFile;\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/X509TestContext.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"},{"authorDate":"2018-11-07 09:29:49","commitOrder":1,"curCode":"    private File getKeyStoreJksFile() throws IOException {\n        if (keyStoreJksFile == null) {\n            try {\n                File keyStoreJksFile = File.createTempFile(\n                        KEY_STORE_PREFIX, KeyStoreFileType.JKS.getDefaultFileExtension(), tempDir);\n                keyStoreJksFile.deleteOnExit();\n                final FileOutputStream keyStoreOutputStream = new FileOutputStream(keyStoreJksFile);\n                try {\n                    byte[] bytes = X509TestHelpers.certAndPrivateKeyToJavaKeyStoreBytes(\n                            keyStoreCertificate, keyStoreKeyPair.getPrivate(), keyStorePassword);\n                    keyStoreOutputStream.write(bytes);\n                    keyStoreOutputStream.flush();\n                } finally {\n                    keyStoreOutputStream.close();\n                }\n                this.keyStoreJksFile = keyStoreJksFile;\n            } catch (GeneralSecurityException e) {\n                throw new IOException(e);\n            }\n        }\n        return keyStoreJksFile;\n    }\n","date":"2018-11-07 09:29:49","endLine":281,"groupId":"2394","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getKeyStoreJksFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/5a/86bb4a7a877a3215f7e11f0cb4a848cd3c2dae.src","preCode":"    private File getKeyStoreJksFile() throws IOException {\n        if (keyStoreJksFile == null) {\n            try {\n                File keyStoreJksFile = File.createTempFile(\n                        KEY_STORE_PREFIX, KeyStoreFileType.JKS.getDefaultFileExtension(), tempDir);\n                keyStoreJksFile.deleteOnExit();\n                final FileOutputStream keyStoreOutputStream = new FileOutputStream(keyStoreJksFile);\n                try {\n                    byte[] bytes = X509TestHelpers.certAndPrivateKeyToJavaKeyStoreBytes(\n                            keyStoreCertificate, keyStoreKeyPair.getPrivate(), keyStorePassword);\n                    keyStoreOutputStream.write(bytes);\n                    keyStoreOutputStream.flush();\n                } finally {\n                    keyStoreOutputStream.close();\n                }\n                this.keyStoreJksFile = keyStoreJksFile;\n            } catch (GeneralSecurityException e) {\n                throw new IOException(e);\n            }\n        }\n        return keyStoreJksFile;\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/X509TestContext.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"B"}],"commitId":"03286f29d29f4c1d3496ce87d1441df91422220e","commitMessage":"@@@ZOOKEEPER-3173: Quorum TLS - support PEM trust/key stores\n\nAdd support for loading key and trust stores from PEM files.\n\nUnfortunately.  this PR includes 2 JIRAs.  because it was quite difficult\nto untangle the two features as they were developed at the same time\noriginally:\n\n- ZOOKEEPER-3173: Quorum TLS - support PEM trust/key stores\n- ZOOKEEPER-3175: Quorum TLS - test improvements\n\n## Added support for PEM formatted key stores and trust stores\n- key store and trust store files can now be in PEM format as well as JKS.\n- Added config properties to tell ZK what type of trust/key store to load:\n- `zookeeper.ssl.keyStore.type` and `zookeeper.ssl.trustStore.type` for ClientX509Util\n- `zookeeper.ssl.quorum.keyStore.type` and `zookeeper.ssl.quorum.trustStore.type` for QuorumX509Util\n- store type properties could have the values \"JKS\".  \"PEM\".  or not set\n- leaving the type properties unset will cause auto-detection of the store type based on the file extension (\".jks\" or \".pem\")\n\n## Added test utilities for easily creating X509 certs and using them in unit tests\n- added new class `X509TestContext` and its friend.  `X509TestHelpers`\n- rewrote some existing unit tests to use these classes.  and added new tests that use them\n- some existing tests (i.e. `QuorumSSLTest`) should probably be ported to use this as well.  haven't got around to it yet\n\nAuthor: Ilya Maykov <ilyam@fb.com>\n\nReviewers: andor@apache.org\n\nCloses #678 from ivmaykov/ZOOKEEPER-3173\n","date":"2018-11-07 09:29:49","modifiedFileCount":"4","status":"B","submitter":"Ilya Maykov"},{"authorTime":"2019-07-15 20:46:48","codes":[{"authorDate":"2019-07-15 20:46:48","commitOrder":2,"curCode":"    private File getTrustStoreJksFile() throws IOException {\n        if (trustStoreJksFile == null) {\n            File trustStoreJksFile = File.createTempFile(\n                TRUST_STORE_PREFIX, KeyStoreFileType.JKS.getDefaultFileExtension(), tempDir);\n            trustStoreJksFile.deleteOnExit();\n            try (final FileOutputStream trustStoreOutputStream = new FileOutputStream(trustStoreJksFile)) {\n                byte[] bytes = X509TestHelpers.certToJavaTrustStoreBytes(trustStoreCertificate, trustStorePassword);\n                trustStoreOutputStream.write(bytes);\n                trustStoreOutputStream.flush();\n            } catch (GeneralSecurityException e) {\n                throw new IOException(e);\n            }\n            this.trustStoreJksFile = trustStoreJksFile;\n        }\n        return trustStoreJksFile;\n    }\n","date":"2019-07-15 20:46:48","endLine":200,"groupId":"10350","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getTrustStoreJksFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3a/899f44c79fb1a9e63319a9e81bf5cc2b844b1c.src","preCode":"    private File getTrustStoreJksFile() throws IOException {\n        if (trustStoreJksFile == null) {\n            try {\n                File trustStoreJksFile = File.createTempFile(\n                        TRUST_STORE_PREFIX, KeyStoreFileType.JKS.getDefaultFileExtension(), tempDir);\n                trustStoreJksFile.deleteOnExit();\n                final FileOutputStream trustStoreOutputStream = new FileOutputStream(trustStoreJksFile);\n                try {\n                    byte[] bytes = X509TestHelpers.certToJavaTrustStoreBytes(trustStoreCertificate, trustStorePassword);\n                    trustStoreOutputStream.write(bytes);\n                    trustStoreOutputStream.flush();\n                } finally {\n                    trustStoreOutputStream.close();\n                }\n                this.trustStoreJksFile = trustStoreJksFile;\n            } catch (GeneralSecurityException e) {\n                throw new IOException(e);\n            }\n        }\n        return trustStoreJksFile;\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/X509TestContext.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2019-07-15 20:46:48","commitOrder":2,"curCode":"    private File getKeyStoreJksFile() throws IOException {\n        if (keyStoreJksFile == null) {\n            File keyStoreJksFile = File.createTempFile(\n                KEY_STORE_PREFIX, KeyStoreFileType.JKS.getDefaultFileExtension(), tempDir);\n            keyStoreJksFile.deleteOnExit();\n            try (final FileOutputStream keyStoreOutputStream = new FileOutputStream(keyStoreJksFile)) {\n                byte[] bytes = X509TestHelpers.certAndPrivateKeyToJavaKeyStoreBytes(\n                    keyStoreCertificate, keyStoreKeyPair.getPrivate(), keyStorePassword);\n                keyStoreOutputStream.write(bytes);\n                keyStoreOutputStream.flush();\n            } catch (GeneralSecurityException e) {\n                throw new IOException(e);\n            }\n            this.keyStoreJksFile = keyStoreJksFile;\n        }\n        return keyStoreJksFile;\n    }\n","date":"2019-07-15 20:46:48","endLine":295,"groupId":"10350","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getKeyStoreJksFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3a/899f44c79fb1a9e63319a9e81bf5cc2b844b1c.src","preCode":"    private File getKeyStoreJksFile() throws IOException {\n        if (keyStoreJksFile == null) {\n            try {\n                File keyStoreJksFile = File.createTempFile(\n                        KEY_STORE_PREFIX, KeyStoreFileType.JKS.getDefaultFileExtension(), tempDir);\n                keyStoreJksFile.deleteOnExit();\n                final FileOutputStream keyStoreOutputStream = new FileOutputStream(keyStoreJksFile);\n                try {\n                    byte[] bytes = X509TestHelpers.certAndPrivateKeyToJavaKeyStoreBytes(\n                            keyStoreCertificate, keyStoreKeyPair.getPrivate(), keyStorePassword);\n                    keyStoreOutputStream.write(bytes);\n                    keyStoreOutputStream.flush();\n                } finally {\n                    keyStoreOutputStream.close();\n                }\n                this.keyStoreJksFile = keyStoreJksFile;\n            } catch (GeneralSecurityException e) {\n                throw new IOException(e);\n            }\n        }\n        return keyStoreJksFile;\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/X509TestContext.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"1c83846615701e88749690f06993a6e77452b83c","commitMessage":"@@@ZOOKEEPER-3443: Add support of PKCS12 trust/key stores\n\nThis commit adds support of PKCS12 trust store and key store type.\nThe existing mechanism for trust/key store types that support JKS and\nPEM were extended with PKCS12.\n\nThe implementations of JKSFileLoader and PKCS12FileLoader were almost\nidentical so most of it were abstracted away in\nStandardTypeFileKeyStoreLoader.\n\nAuthor: Ivan Yurchenko <ivanyu@aiven.io>\n\nReviewers: eolivelli@apache.org.  andor@apache.org\n\nCloses #1003 from ivanyu/ZOOKEEPER-3443\n","date":"2019-07-15 20:46:48","modifiedFileCount":"8","status":"M","submitter":"Ivan Yurchenko"}]
