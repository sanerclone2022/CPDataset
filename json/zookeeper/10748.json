[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK,\n                            'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getFollower().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"FollowerRequestProcessor exited loop!\");\n    }\n","date":"2018-10-05 20:25:43","endLine":111,"groupId":"2095","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c6/23eba888ca6fa91eced97b662d7280ebadb919.src","preCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK,\n                            'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getFollower().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"FollowerRequestProcessor exited loop!\");\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK,\n                            'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getObserver().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"ObserverRequestProcessor exited loop!\");\n    }\n","date":"2018-10-05 20:25:43","endLine":120,"groupId":"2095","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/85/a5212e557768e3cdb44deead530f8485d0bb10.src","preCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK,\n                            'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getObserver().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"ObserverRequestProcessor exited loop!\");\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-01 13:31:29","codes":[{"authorDate":"2019-08-01 13:31:29","commitOrder":2,"curCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK,\n                            'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n\n                \r\n                if (!zks.authWriteRequest(request)) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getFollower().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"FollowerRequestProcessor exited loop!\");\n    }\n","date":"2019-08-01 13:31:29","endLine":117,"groupId":"2095","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ca/96405eb49144dd1e848a020f6095208166d0e2.src","preCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK,\n                            'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getFollower().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"FollowerRequestProcessor exited loop!\");\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2019-08-01 13:31:29","commitOrder":2,"curCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK,\n                            'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n\n                \r\n                if (!zks.authWriteRequest(request)) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getObserver().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"ObserverRequestProcessor exited loop!\");\n    }\n","date":"2019-08-01 13:31:29","endLine":126,"groupId":"2095","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/7d/b833f74d77abf049799b066c8784bdb160c61d.src","preCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK,\n                            'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getObserver().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"ObserverRequestProcessor exited loop!\");\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"b2f5548bd5757edbf1887838a487a90523ed2b52","commitMessage":"@@@ZOOKEEPER-3418: Improve quorum throughput through eager ACL checks of requests on local servers.\n\nServing write requests that change the state of the system requires quorum operations.  and in some cases.  the quorum operations can be avoided if the requests are doomed to fail. ACL check failure is such a case. To optimize for this case.  we elevate the ACL check logic and perform eager ACL check on local server (where the requests are received).  and fail fast.  before sending the requests to leader.\n\nAs with any features.  there is a feature flag that can control this feature on.  or off (default). This feature is also forward compatible in that for new any new Op code (and some existing Op code we did not explicit check against).  they will pass the check and (potentially) fail on leader side.  instead of being prematurely filtered out on local server.\n\nThe end result is better throughput and stability of the quorum for certain workloads.\n\nAuthor: Michael Han <lhan@twitter.com>\n\nReviewers: Andor Molnar <andor@apache.org>.  Enrico Olivelli <eolivelli@apache.org>\n\nCloses #971 from hanm/twitter/5c6bbfac811d29228fd97a4621fd6ba547fed178\n","date":"2019-08-01 13:31:29","modifiedFileCount":"9","status":"M","submitter":"Michael Han"},{"authorTime":"2020-03-25 10:38:46","codes":[{"authorDate":"2020-03-25 10:38:46","commitOrder":3,"curCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK, 'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n\n                \r\n                if (!zks.authWriteRequest(request)) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n                if (request.isThrottled()) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getFollower().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"FollowerRequestProcessor exited loop!\");\n    }\n","date":"2020-03-25 10:38:46","endLine":116,"groupId":"2095","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/db/51aee495d6f9de1105283bba58346cc81879f5.src","preCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK, 'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n\n                \r\n                if (!zks.authWriteRequest(request)) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getFollower().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"FollowerRequestProcessor exited loop!\");\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2020-03-25 10:38:46","commitOrder":3,"curCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK, 'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n\n                \r\n                if (!zks.authWriteRequest(request)) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n\n                if (request.isThrottled()) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getObserver().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"ObserverRequestProcessor exited loop!\");\n    }\n","date":"2020-03-25 10:38:46","endLine":125,"groupId":"2095","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/00/75ce404a884ec4e3e6e231f329fec3b0ce8253.src","preCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK, 'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n\n                \r\n                if (!zks.authWriteRequest(request)) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getObserver().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"ObserverRequestProcessor exited loop!\");\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"e87bad6774e7269ef21a156aff9dad089ef54794","commitMessage":"@@@ZOOKEEPER-3683: Discard requests that are delayed longer than a confi?\n\n?gured threshold\n\nAuthor: Jie Huang <jiehuang@fb.com>\nAuthor: Ivailo Nedelchev <nedelchev@fb.com>\n\nReviewers: Michael Han <hanm@apache.org>.  Allan Lyu <fangmin@apache.org>.  Damien Diederen <dd@crosstwine.com>\n\nCloses #1211 from jhuan31/ZOOKEEPER-3683\n","date":"2020-03-25 10:38:46","modifiedFileCount":"17","status":"M","submitter":"Jie Huang"},{"authorTime":"2020-03-25 10:38:46","codes":[{"authorDate":"2020-05-06 03:20:35","commitOrder":4,"curCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK, 'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n\n                \r\n                if (!zks.authWriteRequest(request)) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                maybeSendRequestToNextProcessor(request);\n\n                if (request.isThrottled()) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getFollower().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"FollowerRequestProcessor exited loop!\");\n    }\n","date":"2020-05-06 03:20:35","endLine":125,"groupId":"2095","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/90/c4d4903448e59193754ed3aaf0198ca5995b31.src","preCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK, 'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n\n                \r\n                if (!zks.authWriteRequest(request)) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n                if (request.isThrottled()) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getFollower().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"FollowerRequestProcessor exited loop!\");\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2020-03-25 10:38:46","commitOrder":4,"curCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK, 'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n\n                \r\n                if (!zks.authWriteRequest(request)) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n\n                if (request.isThrottled()) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getObserver().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"ObserverRequestProcessor exited loop!\");\n    }\n","date":"2020-03-25 10:38:46","endLine":125,"groupId":"2095","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/00/75ce404a884ec4e3e6e231f329fec3b0ce8253.src","preCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK, 'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n\n                \r\n                if (!zks.authWriteRequest(request)) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n\n                if (request.isThrottled()) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getObserver().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"ObserverRequestProcessor exited loop!\");\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"05cd214a0cc9c870de373b54cfeb47a2a75efd28","commitMessage":"@@@ZOOKEEPER-3796: Skip Learner Request made to ObserverMaster from going\n\n... to next processor\n\nAuthor: mayank99 <mayank99@devvm2541.prn3.facebook.com>\nAuthor: mayank99fb <63824268+mayank99fb@users.noreply.github.com>\n\nReviewers: Andor Molnar <andor@apache.org>.  Enrico Olivelli <eolivelli@apache.org>.  Mate Szalay-Beko <symat@apache.org>\n\nCloses #1322 from mayank99fb/ZOOKEEPER-3796\n","date":"2020-05-06 03:20:35","modifiedFileCount":"4","status":"M","submitter":"Mayank Tuteja"},{"authorTime":"2020-06-24 15:05:45","codes":[{"authorDate":"2020-06-24 15:05:45","commitOrder":5,"curCode":"    public void run() {\n        try {\n            while (!finished) {\n                ServerMetrics.getMetrics().LEARNER_REQUEST_PROCESSOR_QUEUE_SIZE.add(queuedRequests.size());\n\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK, 'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n\n                \r\n                if (!zks.authWriteRequest(request)) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                maybeSendRequestToNextProcessor(request);\n\n                if (request.isThrottled()) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getFollower().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (RuntimeException e) { \r\n            handleException(this.getName(), e);\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"FollowerRequestProcessor exited loop!\");\n    }\n","date":"2020-06-24 15:05:45","endLine":129,"groupId":"10748","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/58/ca9905dfe8cb4d7be777ee9a52df08d2a6b1f5.src","preCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK, 'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n\n                \r\n                if (!zks.authWriteRequest(request)) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                maybeSendRequestToNextProcessor(request);\n\n                if (request.isThrottled()) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getFollower().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getFollower().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"FollowerRequestProcessor exited loop!\");\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2020-06-24 15:05:45","commitOrder":5,"curCode":"    public void run() {\n        try {\n            while (!finished) {\n                ServerMetrics.getMetrics().LEARNER_REQUEST_PROCESSOR_QUEUE_SIZE.add(queuedRequests.size());\n\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK, 'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n\n                \r\n                if (!zks.authWriteRequest(request)) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n\n                if (request.isThrottled()) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getObserver().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (RuntimeException e) { \r\n            handleException(this.getName(), e);\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"ObserverRequestProcessor exited loop!\");\n    }\n","date":"2020-06-24 15:05:45","endLine":130,"groupId":"10748","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0e/7071b91b7e4266c018d7bfbb9a75645bc0b2be.src","preCode":"    public void run() {\n        try {\n            while (!finished) {\n                Request request = queuedRequests.take();\n                if (LOG.isTraceEnabled()) {\n                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK, 'F', request, \"\");\n                }\n                if (request == Request.requestOfDeath) {\n                    break;\n                }\n\n                \r\n                if (!zks.authWriteRequest(request)) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                nextProcessor.processRequest(request);\n\n                if (request.isThrottled()) {\n                    continue;\n                }\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                switch (request.type) {\n                case OpCode.sync:\n                    zks.pendingSyncs.add(request);\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.create:\n                case OpCode.create2:\n                case OpCode.createTTL:\n                case OpCode.createContainer:\n                case OpCode.delete:\n                case OpCode.deleteContainer:\n                case OpCode.setData:\n                case OpCode.reconfig:\n                case OpCode.setACL:\n                case OpCode.multi:\n                case OpCode.check:\n                    zks.getObserver().request(request);\n                    break;\n                case OpCode.createSession:\n                case OpCode.closeSession:\n                    \r\n                    if (!request.isLocalSession()) {\n                        zks.getObserver().request(request);\n                    }\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            handleException(this.getName(), e);\n        }\n        LOG.info(\"ObserverRequestProcessor exited loop!\");\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverRequestProcessor.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"ac8534494c0f731e15d5a23ad099effc2d3119aa","commitMessage":"@@@ZOOKEEPER-3859: Add a couple request processor metrics\n\nAuthor: Jie Huang <jiehuang@fb.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Michael Han <hanm@apache.org>\n\nCloses #1379 from jhuan31/ZOOKEEPER-3859\n","date":"2020-06-24 15:05:45","modifiedFileCount":"4","status":"M","submitter":"Jie Huang"}]
