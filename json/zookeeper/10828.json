[{"authorTime":"2020-01-22 01:14:37","codes":[{"authorDate":"2020-01-22 01:14:37","commitOrder":1,"curCode":"    public void testOrderWithDifferentPrefixIncludingSessionId() throws Exception {\n        String[] names = {\n            \"x-242681582799028564-0000000002\",\n            \"x-170623981976748329-0000000003\",\n            \"x-98566387950223723-0000000001\"\n        };\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        Assert.assertEquals(\"x-98566387950223723-0000000001\", zname.getName());\n        Assert.assertEquals(\"x-98566387950223723\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"x-242681582799028564-0000000002\", zname.getName());\n        Assert.assertEquals(\"x-242681582799028564\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"x-170623981976748329-0000000003\", zname.getName());\n        Assert.assertEquals(\"x-170623981976748329\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(3), zname.getSequence().get());\n    }\n","date":"2020-01-22 01:14:37","endLine":128,"groupId":"3764","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrderWithDifferentPrefixIncludingSessionId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/dc2c29b062d0d7a5d18753d93a7a0a058d7519.src","preCode":"    public void testOrderWithDifferentPrefixIncludingSessionId() throws Exception {\n        String[] names = {\n            \"x-242681582799028564-0000000002\",\n            \"x-170623981976748329-0000000003\",\n            \"x-98566387950223723-0000000001\"\n        };\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        Assert.assertEquals(\"x-98566387950223723-0000000001\", zname.getName());\n        Assert.assertEquals(\"x-98566387950223723\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"x-242681582799028564-0000000002\", zname.getName());\n        Assert.assertEquals(\"x-242681582799028564\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"x-170623981976748329-0000000003\", zname.getName());\n        Assert.assertEquals(\"x-170623981976748329\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(3), zname.getSequence().get());\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"},{"authorDate":"2020-01-22 01:14:37","commitOrder":1,"curCode":"    public void testOrderWithExtraPrefixes() throws Exception {\n        String[] names = {\"r-1-3-2\", \"r-2-2-1\", \"r-3-1-3\"};\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        Assert.assertEquals(\"r-2-2-1\", zname.getName());\n        Assert.assertEquals(\"r-2-2\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"r-1-3-2\", zname.getName());\n        Assert.assertEquals(\"r-1-3\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"r-3-1-3\", zname.getName());\n        Assert.assertEquals(\"r-3-1\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(3), zname.getSequence().get());\n    }\n","date":"2020-01-22 01:14:37","endLine":154,"groupId":"3764","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrderWithExtraPrefixes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/dc2c29b062d0d7a5d18753d93a7a0a058d7519.src","preCode":"    public void testOrderWithExtraPrefixes() throws Exception {\n        String[] names = {\"r-1-3-2\", \"r-2-2-1\", \"r-3-1-3\"};\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        Assert.assertEquals(\"r-2-2-1\", zname.getName());\n        Assert.assertEquals(\"r-2-2\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"r-1-3-2\", zname.getName());\n        Assert.assertEquals(\"r-1-3\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"r-3-1-3\", zname.getName());\n        Assert.assertEquals(\"r-3-1\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(3), zname.getSequence().get());\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"}],"commitId":"ee69a5565215bb95fe10d88f52dba80a7a7fb929","commitMessage":"@@@ZOOKEEPER-3663: Clean Up ZNodeName Class\n\nAuthor: David Mollitor <dmollitor@apache.org>\n\nReviewers: eolivelli@apache.org.  andor@apache.org\n\nCloses #1193 from belugabehr/ZOOKEEPER-3663\n","date":"2020-01-22 01:14:37","modifiedFileCount":"2","status":"B","submitter":"David Mollitor"},{"authorTime":"2020-08-07 18:46:19","codes":[{"authorDate":"2020-08-07 18:46:19","commitOrder":2,"curCode":"    public void testOrderWithDifferentPrefixIncludingSessionId() throws Exception {\n        String[] names = {\n            \"x-242681582799028564-0000000002\",\n            \"x-170623981976748329-0000000003\",\n            \"x-98566387950223723-0000000001\"\n        };\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        assertEquals(\"x-98566387950223723-0000000001\", zname.getName());\n        assertEquals(\"x-98566387950223723\", zname.getPrefix());\n        assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        assertEquals(\"x-242681582799028564-0000000002\", zname.getName());\n        assertEquals(\"x-242681582799028564\", zname.getPrefix());\n        assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        assertEquals(\"x-170623981976748329-0000000003\", zname.getName());\n        assertEquals(\"x-170623981976748329\", zname.getPrefix());\n        assertEquals(Integer.valueOf(3), zname.getSequence().get());\n    }\n","date":"2020-08-07 18:46:45","endLine":130,"groupId":"10828","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testOrderWithDifferentPrefixIncludingSessionId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/c76cc6205af41a28ea41b0e1532e16e86e1ebf.src","preCode":"    public void testOrderWithDifferentPrefixIncludingSessionId() throws Exception {\n        String[] names = {\n            \"x-242681582799028564-0000000002\",\n            \"x-170623981976748329-0000000003\",\n            \"x-98566387950223723-0000000001\"\n        };\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        Assert.assertEquals(\"x-98566387950223723-0000000001\", zname.getName());\n        Assert.assertEquals(\"x-98566387950223723\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"x-242681582799028564-0000000002\", zname.getName());\n        Assert.assertEquals(\"x-242681582799028564\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"x-170623981976748329-0000000003\", zname.getName());\n        Assert.assertEquals(\"x-170623981976748329\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(3), zname.getSequence().get());\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2020-08-07 18:46:19","commitOrder":2,"curCode":"    public void testOrderWithExtraPrefixes() throws Exception {\n        String[] names = {\"r-1-3-2\", \"r-2-2-1\", \"r-3-1-3\"};\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        assertEquals(\"r-2-2-1\", zname.getName());\n        assertEquals(\"r-2-2\", zname.getPrefix());\n        assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        assertEquals(\"r-1-3-2\", zname.getName());\n        assertEquals(\"r-1-3\", zname.getPrefix());\n        assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        assertEquals(\"r-3-1-3\", zname.getName());\n        assertEquals(\"r-3-1\", zname.getPrefix());\n        assertEquals(Integer.valueOf(3), zname.getSequence().get());\n    }\n","date":"2020-08-07 18:46:45","endLine":156,"groupId":"10828","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testOrderWithExtraPrefixes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/c76cc6205af41a28ea41b0e1532e16e86e1ebf.src","preCode":"    public void testOrderWithExtraPrefixes() throws Exception {\n        String[] names = {\"r-1-3-2\", \"r-2-2-1\", \"r-3-1-3\"};\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        Assert.assertEquals(\"r-2-2-1\", zname.getName());\n        Assert.assertEquals(\"r-2-2\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"r-1-3-2\", zname.getName());\n        Assert.assertEquals(\"r-1-3\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"r-3-1-3\", zname.getName());\n        Assert.assertEquals(\"r-3-1\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(3), zname.getSequence().get());\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"08ae49dee4d698fb8c926f3842acdcb0f5b3c58e","commitMessage":"@@@ZOOKEEPER-3854: Upgrade jUnit in ZooKeeper-Recipes\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Norbert Kalmar <nkalmar@apache.org>.  Mate Szalay-Beko <symat@apache.org>\n\nCloses #1423 from tamaashu/ZOOKEEPER-3854\n","date":"2020-08-07 18:46:45","modifiedFileCount":"4","status":"M","submitter":"Tamas Penzes"}]
