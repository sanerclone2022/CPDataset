[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testLeaderConversation(LeaderConversation conversation) throws Exception {\n        Socket pair[] = getSocketPair();\n        Socket leaderSocket = pair[0];\n        Socket followerSocket = pair[1];\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        LeadThread leadThread = null;\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n            leadThread = new LeadThread(leader);\n            leadThread.start();\n\n            while(leader.cnxAcceptor == null || !leader.cnxAcceptor.isAlive()) {\n                Thread.sleep(20);\n            }\n            \n            LearnerHandler lh = new LearnerHandler(leaderSocket,\n                    new BufferedInputStream(leaderSocket.getInputStream()),\n                    leader);\n            lh.start();\n            leaderSocket.setSoTimeout(4000);\n\n            InputArchive ia = BinaryInputArchive.getArchive(followerSocket\n                    .getInputStream());\n            OutputArchive oa = BinaryOutputArchive.getArchive(followerSocket\n                    .getOutputStream());\n\n            conversation.converseWithLeader(ia, oa, leader);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            if (leadThread != null) {\n                leadThread.interrupt();\n                leadThread.join();\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","date":"2018-10-05 20:25:43","endLine":340,"groupId":"3374","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeaderConversation","params":"(LeaderConversationconversation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/bd9d88222077beb805541ba9fd2c22644bce83.src","preCode":"    public void testLeaderConversation(LeaderConversation conversation) throws Exception {\n        Socket pair[] = getSocketPair();\n        Socket leaderSocket = pair[0];\n        Socket followerSocket = pair[1];\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        LeadThread leadThread = null;\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n            leadThread = new LeadThread(leader);\n            leadThread.start();\n\n            while(leader.cnxAcceptor == null || !leader.cnxAcceptor.isAlive()) {\n                Thread.sleep(20);\n            }\n            \n            LearnerHandler lh = new LearnerHandler(leaderSocket,\n                    new BufferedInputStream(leaderSocket.getInputStream()),\n                    leader);\n            lh.start();\n            leaderSocket.setSoTimeout(4000);\n\n            InputArchive ia = BinaryInputArchive.getArchive(followerSocket\n                    .getInputStream());\n            OutputArchive oa = BinaryOutputArchive.getArchive(followerSocket\n                    .getOutputStream());\n\n            conversation.converseWithLeader(ia, oa, leader);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            if (leadThread != null) {\n                leadThread.interrupt();\n                leadThread.join();\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testPopulatedLeaderConversation(PopulatedLeaderConversation conversation, int ops) throws Exception {\n        Socket pair[] = getSocketPair();\n        Socket leaderSocket = pair[0];\n        Socket followerSocket = pair[1];\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        LeadThread leadThread = null;\n        Leader leader = null;\n        try {              \n            \r\n            FileTxnSnapLog snapLog = new FileTxnSnapLog(tmpDir, tmpDir);\n            ZKDatabase zkDb = new ZKDatabase(snapLog);\n            \n            Assert.assertTrue(ops >= 1);\n            long zxid = ZxidUtils.makeZxid(1, 0);            \n            for(int i = 1; i <= ops; i++){\n                zxid = ZxidUtils.makeZxid(1, i);\n                String path = \"/foo-\"+ i;\n                zkDb.processTxn(new TxnHeader(13,1000+i,zxid,30+i,ZooDefs.OpCode.create), \n                                                new CreateTxn(path, \"fpjwasalsohere\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                Stat stat = new Stat();\n                Assert.assertEquals(\"fpjwasalsohere\", new String(zkDb.getData(path, stat, null)));\n            }                \n            Assert.assertTrue(zxid > ZxidUtils.makeZxid(1, 0));\n            \n            \r\n            snapLog.save(zkDb.getDataTree(), zkDb.getSessionWithTimeOuts(), false);\n            snapLog.close();\n            \n            QuorumPeer peer = createQuorumPeer(tmpDir);\n                        \n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n            \n            \r\n            peer.setAcceptedEpoch(1);\n            peer.setCurrentEpoch(1);\n\n            \n            leadThread = new LeadThread(leader);\n            leadThread.start();\n\n            while(leader.cnxAcceptor == null || !leader.cnxAcceptor.isAlive()) {\n                Thread.sleep(20);\n            }\n\n            LearnerHandler lh = new LearnerHandler(leaderSocket,\n                    new BufferedInputStream(leaderSocket.getInputStream()),\n                    leader);\n            lh.start();\n            leaderSocket.setSoTimeout(4000);\n\n            InputArchive ia = BinaryInputArchive.getArchive(followerSocket\n                    .getInputStream());\n            OutputArchive oa = BinaryOutputArchive.getArchive(followerSocket\n                    .getOutputStream());\n\n            conversation.converseWithLeader(ia, oa, leader, zxid);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            if (leadThread != null) {\n                leadThread.interrupt();\n                leadThread.join();\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","date":"2018-10-05 20:25:43","endLine":411,"groupId":"3375","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPopulatedLeaderConversation","params":"(PopulatedLeaderConversationconversation@intops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/bd9d88222077beb805541ba9fd2c22644bce83.src","preCode":"    public void testPopulatedLeaderConversation(PopulatedLeaderConversation conversation, int ops) throws Exception {\n        Socket pair[] = getSocketPair();\n        Socket leaderSocket = pair[0];\n        Socket followerSocket = pair[1];\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        LeadThread leadThread = null;\n        Leader leader = null;\n        try {              \n            \r\n            FileTxnSnapLog snapLog = new FileTxnSnapLog(tmpDir, tmpDir);\n            ZKDatabase zkDb = new ZKDatabase(snapLog);\n            \n            Assert.assertTrue(ops >= 1);\n            long zxid = ZxidUtils.makeZxid(1, 0);            \n            for(int i = 1; i <= ops; i++){\n                zxid = ZxidUtils.makeZxid(1, i);\n                String path = \"/foo-\"+ i;\n                zkDb.processTxn(new TxnHeader(13,1000+i,zxid,30+i,ZooDefs.OpCode.create), \n                                                new CreateTxn(path, \"fpjwasalsohere\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                Stat stat = new Stat();\n                Assert.assertEquals(\"fpjwasalsohere\", new String(zkDb.getData(path, stat, null)));\n            }                \n            Assert.assertTrue(zxid > ZxidUtils.makeZxid(1, 0));\n            \n            \r\n            snapLog.save(zkDb.getDataTree(), zkDb.getSessionWithTimeOuts(), false);\n            snapLog.close();\n            \n            QuorumPeer peer = createQuorumPeer(tmpDir);\n                        \n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n            \n            \r\n            peer.setAcceptedEpoch(1);\n            peer.setCurrentEpoch(1);\n\n            \n            leadThread = new LeadThread(leader);\n            leadThread.start();\n\n            while(leader.cnxAcceptor == null || !leader.cnxAcceptor.isAlive()) {\n                Thread.sleep(20);\n            }\n\n            LearnerHandler lh = new LearnerHandler(leaderSocket,\n                    new BufferedInputStream(leaderSocket.getInputStream()),\n                    leader);\n            lh.start();\n            leaderSocket.setSoTimeout(4000);\n\n            InputArchive ia = BinaryInputArchive.getArchive(followerSocket\n                    .getInputStream());\n            OutputArchive oa = BinaryOutputArchive.getArchive(followerSocket\n                    .getOutputStream());\n\n            conversation.converseWithLeader(ia, oa, leader, zxid);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            if (leadThread != null) {\n                leadThread.interrupt();\n                leadThread.join();\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testLeaderConversation(LeaderConversation conversation) throws Exception {\n        Socket[] pair = getSocketPair();\n        Socket leaderSocket = pair[0];\n        Socket followerSocket = pair[1];\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        LeadThread leadThread = null;\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n            leadThread = new LeadThread(leader);\n            leadThread.start();\n\n            while (leader.cnxAcceptor == null || !leader.cnxAcceptor.isAlive()) {\n                Thread.sleep(20);\n            }\n\n            LearnerHandler lh = new LearnerHandler(leaderSocket, new BufferedInputStream(leaderSocket.getInputStream()), leader);\n            lh.start();\n            leaderSocket.setSoTimeout(4000);\n\n            InputArchive ia = BinaryInputArchive.getArchive(followerSocket.getInputStream());\n            OutputArchive oa = BinaryOutputArchive.getArchive(followerSocket.getOutputStream());\n\n            conversation.converseWithLeader(ia, oa, leader);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            if (leadThread != null) {\n                leadThread.interrupt();\n                leadThread.join();\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":342,"groupId":"3374","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeaderConversation","params":"(LeaderConversationconversation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/7f81f265db319f5227680702d6a4be01a76445.src","preCode":"    public void testLeaderConversation(LeaderConversation conversation) throws Exception {\n        Socket pair[] = getSocketPair();\n        Socket leaderSocket = pair[0];\n        Socket followerSocket = pair[1];\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        LeadThread leadThread = null;\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n            leadThread = new LeadThread(leader);\n            leadThread.start();\n\n            while(leader.cnxAcceptor == null || !leader.cnxAcceptor.isAlive()) {\n                Thread.sleep(20);\n            }\n            \n            LearnerHandler lh = new LearnerHandler(leaderSocket,\n                    new BufferedInputStream(leaderSocket.getInputStream()),\n                    leader);\n            lh.start();\n            leaderSocket.setSoTimeout(4000);\n\n            InputArchive ia = BinaryInputArchive.getArchive(followerSocket\n                    .getInputStream());\n            OutputArchive oa = BinaryOutputArchive.getArchive(followerSocket\n                    .getOutputStream());\n\n            conversation.converseWithLeader(ia, oa, leader);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            if (leadThread != null) {\n                leadThread.interrupt();\n                leadThread.join();\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testPopulatedLeaderConversation(PopulatedLeaderConversation conversation, int ops) throws Exception {\n        Socket[] pair = getSocketPair();\n        Socket leaderSocket = pair[0];\n        Socket followerSocket = pair[1];\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        LeadThread leadThread = null;\n        Leader leader = null;\n        try {\n            \r\n            FileTxnSnapLog snapLog = new FileTxnSnapLog(tmpDir, tmpDir);\n            ZKDatabase zkDb = new ZKDatabase(snapLog);\n\n            assertTrue(ops >= 1);\n            long zxid = ZxidUtils.makeZxid(1, 0);\n            for (int i = 1; i <= ops; i++) {\n                zxid = ZxidUtils.makeZxid(1, i);\n                String path = \"/foo-\" + i;\n                zkDb.processTxn(new TxnHeader(13, 1000 + i, zxid, 30\n                                                                          + i, ZooDefs.OpCode.create), new CreateTxn(path, \"fpjwasalsohere\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                Stat stat = new Stat();\n                assertEquals(\"fpjwasalsohere\", new String(zkDb.getData(path, stat, null)));\n            }\n            assertTrue(zxid > ZxidUtils.makeZxid(1, 0));\n\n            \r\n            snapLog.save(zkDb.getDataTree(), zkDb.getSessionWithTimeOuts(), false);\n            snapLog.close();\n\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n\n            \r\n            peer.setAcceptedEpoch(1);\n            peer.setCurrentEpoch(1);\n\n            leadThread = new LeadThread(leader);\n            leadThread.start();\n\n            while (leader.cnxAcceptor == null || !leader.cnxAcceptor.isAlive()) {\n                Thread.sleep(20);\n            }\n\n            LearnerHandler lh = new LearnerHandler(leaderSocket, new BufferedInputStream(leaderSocket.getInputStream()), leader);\n            lh.start();\n            leaderSocket.setSoTimeout(4000);\n\n            InputArchive ia = BinaryInputArchive.getArchive(followerSocket.getInputStream());\n            OutputArchive oa = BinaryOutputArchive.getArchive(followerSocket.getOutputStream());\n\n            conversation.converseWithLeader(ia, oa, leader, zxid);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            if (leadThread != null) {\n                leadThread.interrupt();\n                leadThread.join();\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":408,"groupId":"3204","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPopulatedLeaderConversation","params":"(PopulatedLeaderConversationconversation@intops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/7f81f265db319f5227680702d6a4be01a76445.src","preCode":"    public void testPopulatedLeaderConversation(PopulatedLeaderConversation conversation, int ops) throws Exception {\n        Socket pair[] = getSocketPair();\n        Socket leaderSocket = pair[0];\n        Socket followerSocket = pair[1];\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        LeadThread leadThread = null;\n        Leader leader = null;\n        try {              \n            \r\n            FileTxnSnapLog snapLog = new FileTxnSnapLog(tmpDir, tmpDir);\n            ZKDatabase zkDb = new ZKDatabase(snapLog);\n            \n            Assert.assertTrue(ops >= 1);\n            long zxid = ZxidUtils.makeZxid(1, 0);            \n            for(int i = 1; i <= ops; i++){\n                zxid = ZxidUtils.makeZxid(1, i);\n                String path = \"/foo-\"+ i;\n                zkDb.processTxn(new TxnHeader(13,1000+i,zxid,30+i,ZooDefs.OpCode.create), \n                                                new CreateTxn(path, \"fpjwasalsohere\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                Stat stat = new Stat();\n                Assert.assertEquals(\"fpjwasalsohere\", new String(zkDb.getData(path, stat, null)));\n            }                \n            Assert.assertTrue(zxid > ZxidUtils.makeZxid(1, 0));\n            \n            \r\n            snapLog.save(zkDb.getDataTree(), zkDb.getSessionWithTimeOuts(), false);\n            snapLog.close();\n            \n            QuorumPeer peer = createQuorumPeer(tmpDir);\n                        \n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n            \n            \r\n            peer.setAcceptedEpoch(1);\n            peer.setCurrentEpoch(1);\n\n            \n            leadThread = new LeadThread(leader);\n            leadThread.start();\n\n            while(leader.cnxAcceptor == null || !leader.cnxAcceptor.isAlive()) {\n                Thread.sleep(20);\n            }\n\n            LearnerHandler lh = new LearnerHandler(leaderSocket,\n                    new BufferedInputStream(leaderSocket.getInputStream()),\n                    leader);\n            lh.start();\n            leaderSocket.setSoTimeout(4000);\n\n            InputArchive ia = BinaryInputArchive.getArchive(followerSocket\n                    .getInputStream());\n            OutputArchive oa = BinaryOutputArchive.getArchive(followerSocket\n                    .getOutputStream());\n\n            conversation.converseWithLeader(ia, oa, leader, zxid);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            if (leadThread != null) {\n                leadThread.interrupt();\n                leadThread.join();\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-12-28 05:33:26","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testLeaderConversation(LeaderConversation conversation) throws Exception {\n        Socket[] pair = getSocketPair();\n        Socket leaderSocket = pair[0];\n        Socket followerSocket = pair[1];\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        LeadThread leadThread = null;\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n            leadThread = new LeadThread(leader);\n            leadThread.start();\n\n            while (leader.cnxAcceptor == null || !leader.cnxAcceptor.isAlive()) {\n                Thread.sleep(20);\n            }\n\n            LearnerHandler lh = new LearnerHandler(leaderSocket, new BufferedInputStream(leaderSocket.getInputStream()), leader);\n            lh.start();\n            leaderSocket.setSoTimeout(4000);\n\n            InputArchive ia = BinaryInputArchive.getArchive(followerSocket.getInputStream());\n            OutputArchive oa = BinaryOutputArchive.getArchive(followerSocket.getOutputStream());\n\n            conversation.converseWithLeader(ia, oa, leader);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            if (leadThread != null) {\n                leadThread.interrupt();\n                leadThread.join();\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":342,"groupId":"10177","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeaderConversation","params":"(LeaderConversationconversation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/7f81f265db319f5227680702d6a4be01a76445.src","preCode":"    public void testLeaderConversation(LeaderConversation conversation) throws Exception {\n        Socket[] pair = getSocketPair();\n        Socket leaderSocket = pair[0];\n        Socket followerSocket = pair[1];\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        LeadThread leadThread = null;\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n            leadThread = new LeadThread(leader);\n            leadThread.start();\n\n            while (leader.cnxAcceptor == null || !leader.cnxAcceptor.isAlive()) {\n                Thread.sleep(20);\n            }\n\n            LearnerHandler lh = new LearnerHandler(leaderSocket, new BufferedInputStream(leaderSocket.getInputStream()), leader);\n            lh.start();\n            leaderSocket.setSoTimeout(4000);\n\n            InputArchive ia = BinaryInputArchive.getArchive(followerSocket.getInputStream());\n            OutputArchive oa = BinaryOutputArchive.getArchive(followerSocket.getOutputStream());\n\n            conversation.converseWithLeader(ia, oa, leader);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            if (leadThread != null) {\n                leadThread.interrupt();\n                leadThread.join();\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"N"},{"authorDate":"2019-12-28 05:33:26","commitOrder":3,"curCode":"    public void testPopulatedLeaderConversation(PopulatedLeaderConversation conversation, int ops) throws Exception {\n        Socket[] pair = getSocketPair();\n        Socket leaderSocket = pair[0];\n        Socket followerSocket = pair[1];\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        LeadThread leadThread = null;\n        Leader leader = null;\n        try {\n            \r\n            FileTxnSnapLog snapLog = new FileTxnSnapLog(tmpDir, tmpDir);\n            ZKDatabase zkDb = new ZKDatabase(snapLog);\n\n            assertTrue(ops >= 1);\n            long zxid = ZxidUtils.makeZxid(1, 0);\n            for (int i = 1; i <= ops; i++) {\n                zxid = ZxidUtils.makeZxid(1, i);\n                String path = \"/foo-\" + i;\n                zkDb.processTxn(new TxnHeader(13, 1000 + i, zxid, 30 + i, ZooDefs.OpCode.create),\n                        new CreateTxn(path, \"fpjwasalsohere\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1), null);\n                Stat stat = new Stat();\n                assertEquals(\"fpjwasalsohere\", new String(zkDb.getData(path, stat, null)));\n            }\n            assertTrue(zxid > ZxidUtils.makeZxid(1, 0));\n\n            \r\n            snapLog.save(zkDb.getDataTree(), zkDb.getSessionWithTimeOuts(), false);\n            snapLog.close();\n\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n\n            \r\n            peer.setAcceptedEpoch(1);\n            peer.setCurrentEpoch(1);\n\n            leadThread = new LeadThread(leader);\n            leadThread.start();\n\n            while (leader.cnxAcceptor == null || !leader.cnxAcceptor.isAlive()) {\n                Thread.sleep(20);\n            }\n\n            LearnerHandler lh = new LearnerHandler(leaderSocket, new BufferedInputStream(leaderSocket.getInputStream()), leader);\n            lh.start();\n            leaderSocket.setSoTimeout(4000);\n\n            InputArchive ia = BinaryInputArchive.getArchive(followerSocket.getInputStream());\n            OutputArchive oa = BinaryOutputArchive.getArchive(followerSocket.getOutputStream());\n\n            conversation.converseWithLeader(ia, oa, leader, zxid);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            if (leadThread != null) {\n                leadThread.interrupt();\n                leadThread.join();\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","date":"2019-12-28 05:33:26","endLine":409,"groupId":"10177","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPopulatedLeaderConversation","params":"(PopulatedLeaderConversationconversation@intops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b8/630ae13195f0fd833061588750b41539fbf8d1.src","preCode":"    public void testPopulatedLeaderConversation(PopulatedLeaderConversation conversation, int ops) throws Exception {\n        Socket[] pair = getSocketPair();\n        Socket leaderSocket = pair[0];\n        Socket followerSocket = pair[1];\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        LeadThread leadThread = null;\n        Leader leader = null;\n        try {\n            \r\n            FileTxnSnapLog snapLog = new FileTxnSnapLog(tmpDir, tmpDir);\n            ZKDatabase zkDb = new ZKDatabase(snapLog);\n\n            assertTrue(ops >= 1);\n            long zxid = ZxidUtils.makeZxid(1, 0);\n            for (int i = 1; i <= ops; i++) {\n                zxid = ZxidUtils.makeZxid(1, i);\n                String path = \"/foo-\" + i;\n                zkDb.processTxn(new TxnHeader(13, 1000 + i, zxid, 30\n                                                                          + i, ZooDefs.OpCode.create), new CreateTxn(path, \"fpjwasalsohere\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                Stat stat = new Stat();\n                assertEquals(\"fpjwasalsohere\", new String(zkDb.getData(path, stat, null)));\n            }\n            assertTrue(zxid > ZxidUtils.makeZxid(1, 0));\n\n            \r\n            snapLog.save(zkDb.getDataTree(), zkDb.getSessionWithTimeOuts(), false);\n            snapLog.close();\n\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n\n            \r\n            peer.setAcceptedEpoch(1);\n            peer.setCurrentEpoch(1);\n\n            leadThread = new LeadThread(leader);\n            leadThread.start();\n\n            while (leader.cnxAcceptor == null || !leader.cnxAcceptor.isAlive()) {\n                Thread.sleep(20);\n            }\n\n            LearnerHandler lh = new LearnerHandler(leaderSocket, new BufferedInputStream(leaderSocket.getInputStream()), leader);\n            lh.start();\n            leaderSocket.setSoTimeout(4000);\n\n            InputArchive ia = BinaryInputArchive.getArchive(followerSocket.getInputStream());\n            OutputArchive oa = BinaryOutputArchive.getArchive(followerSocket.getOutputStream());\n\n            conversation.converseWithLeader(ia, oa, leader, zxid);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            if (leadThread != null) {\n                leadThread.interrupt();\n                leadThread.join();\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"M"}],"commitId":"2805e8982c0e8964e5f8d86f4b01a293d75d4aed","commitMessage":"@@@ZOOKEEPER-3512: Real time data consistency check during broadcast time\n\nThis is the 2nd part of data consistency based on digest.  it checks the DataTree digest on every txn during broadcast time.\n\nAuthor: Fangmin Lyu <fangmin@apache.org>\nAuthor: Enrico Olivelli <eolivelli@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Andor Molnar <andor@apache.org>.  Michael Han <hanm@apache.org>\n\nCloses #1059 from lvfangmin/ZOOKEEPER-3512\n","date":"2019-12-28 05:33:26","modifiedFileCount":"43","status":"M","submitter":"Fangmin Lyu"}]
