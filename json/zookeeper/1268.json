[{"authorTime":"2019-04-14 22:05:59","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":2,"curCode":"    private Request createRequest(Record record, int opCode) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        \r\n        List<Id> ids = Arrays.asList(Ids.ANYONE_ID_UNSAFE);\n        return new Request(null, 1l, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), ids);\n    }\n","date":"2018-10-05 20:25:43","endLine":113,"groupId":"3831","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createRequest","params":"(Recordrecord@intopCode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/39/9545580b22819416f472872589d2a39e8c8ea1.src","preCode":"    private Request createRequest(Record record, int opCode) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        \r\n        List<Id> ids = Arrays.asList(Ids.ANYONE_ID_UNSAFE);\n        return new Request(null, 1l, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), ids);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"NB"},{"authorDate":"2019-04-14 22:05:59","commitOrder":2,"curCode":"    private Request createRequest(Record record, int opCode) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        return new Request(null, 1l, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), null);\n    }\n","date":"2019-04-14 22:05:59","endLine":88,"groupId":"240","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createRequest","params":"(Recordrecord@intopCode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/75/b1d6c90d9e151ec8a90b5dadbe16f22bf9954a.src","preCode":"    private Request createRequest(Record record, int opCode) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        return new Request(null, 1l, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), null);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorMetricsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"}],"commitId":"bbc39c42bba74add9a625adca3ee52fb1cd02335","commitMessage":"@@@ZOOKEEPER-3310: Add metrics for prep processor\n\nAuthor: Jie Huang <jiehuang@fb.com>\n\nReviewers: andor@apache.org\n\nCloses #855 from jhuan31/ZOOKEEPER-3310 and squashes the following commits:\n\n5875158b4 [Jie Huang] remove sleep in tests\n2033456bb [Jie Huang] Reconstructed unit test. Add left out metric\n245663d88 [Jie Huang] ZOOKEEPER-3310: Add metrics for prep processor\n","date":"2019-04-14 22:05:59","modifiedFileCount":"4","status":"M","submitter":"Jie Huang"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    private Request createRequest(Record record, int opCode) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        \r\n        List<Id> ids = Arrays.asList(Ids.ANYONE_ID_UNSAFE);\n        return new Request(null, 1L, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), ids);\n    }\n","date":"2019-08-17 23:13:15","endLine":114,"groupId":"3831","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createRequest","params":"(Recordrecord@intopCode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/8a/acaac4e091e325dd572781b86cea51bb7e6e71.src","preCode":"    private Request createRequest(Record record, int opCode) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        \r\n        List<Id> ids = Arrays.asList(Ids.ANYONE_ID_UNSAFE);\n        return new Request(null, 1l, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), ids);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    private Request createRequest(Record record, int opCode) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        return new Request(null, 1L, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), null);\n    }\n","date":"2019-08-17 23:13:15","endLine":100,"groupId":"240","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createRequest","params":"(Recordrecord@intopCode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/7a/a74d321de31925cc9a00af7c264c11197bb6bb.src","preCode":"    private Request createRequest(Record record, int opCode) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        return new Request(null, 1l, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), null);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorMetricsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-09-11 16:27:28","commitOrder":4,"curCode":"    private Request createRequest(Record record, int opCode, long sessionId) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        \r\n        List<Id> ids = Arrays.asList(Ids.ANYONE_ID_UNSAFE);\n        return new Request(null, sessionId, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), ids);\n    }\n","date":"2019-09-11 16:27:28","endLine":119,"groupId":"3831","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createRequest","params":"(Recordrecord@intopCode@longsessionId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/26/4601de076f8ea91524145c7b3b70dba2d93db3.src","preCode":"    private Request createRequest(Record record, int opCode) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        \r\n        List<Id> ids = Arrays.asList(Ids.ANYONE_ID_UNSAFE);\n        return new Request(null, 1L, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), ids);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":4,"curCode":"    private Request createRequest(Record record, int opCode) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        return new Request(null, 1L, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), null);\n    }\n","date":"2019-08-17 23:13:15","endLine":100,"groupId":"240","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createRequest","params":"(Recordrecord@intopCode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/7a/a74d321de31925cc9a00af7c264c11197bb6bb.src","preCode":"    private Request createRequest(Record record, int opCode) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        return new Request(null, 1L, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), null);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorMetricsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"42ea26b75105484ef0504396332c276952224158","commitMessage":"@@@ZOOKEEPER-3145: Fix potential watch missing issue due to stale pzxid when replaying CloseSession txn with fuzzy snapshot\n\nCurrently.  the CloseSession txn is not idempotent.  executing the CloseSession twice won't get the same result.  which could cause pzxid inconsistent.  which in turn cause watches missing.\n\nFor more details.  please check the description in ZOOKEEPER-3145.\n\nAuthor: Fangmin Lyu <allenlyu@fb.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Andor Moln?r <andor@apache.org>\n\nCloses #622 from lvfangmin/ZOOKEEPER-3145\n","date":"2019-09-11 16:27:28","modifiedFileCount":"6","status":"M","submitter":"Fangmin Lyu"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-12-28 05:33:26","commitOrder":5,"curCode":"    private Request createRequest(Record record, int opCode, long sessionId, boolean admin) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        \r\n        List<Id> ids = Arrays.asList(admin ? new Id(\"super\", \"super user\") : Ids.ANYONE_ID_UNSAFE);\n        return new Request(null, sessionId, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), ids);\n    }\n","date":"2019-12-28 05:33:26","endLine":140,"groupId":"1268","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createRequest","params":"(Recordrecord@intopCode@longsessionId@booleanadmin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/48/e58905f845d104c9fad067be948ea1b4ce05f6.src","preCode":"    private Request createRequest(Record record, int opCode, long sessionId) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        \r\n        List<Id> ids = Arrays.asList(Ids.ANYONE_ID_UNSAFE);\n        return new Request(null, sessionId, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), ids);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":5,"curCode":"    private Request createRequest(Record record, int opCode) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        return new Request(null, 1L, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), null);\n    }\n","date":"2019-08-17 23:13:15","endLine":100,"groupId":"1268","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createRequest","params":"(Recordrecord@intopCode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/7a/a74d321de31925cc9a00af7c264c11197bb6bb.src","preCode":"    private Request createRequest(Record record, int opCode) throws IOException {\n        \r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        record.serialize(boa, \"request\");\n        baos.close();\n        return new Request(null, 1L, 0, opCode, ByteBuffer.wrap(baos.toByteArray()), null);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorMetricsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"2805e8982c0e8964e5f8d86f4b01a293d75d4aed","commitMessage":"@@@ZOOKEEPER-3512: Real time data consistency check during broadcast time\n\nThis is the 2nd part of data consistency based on digest.  it checks the DataTree digest on every txn during broadcast time.\n\nAuthor: Fangmin Lyu <fangmin@apache.org>\nAuthor: Enrico Olivelli <eolivelli@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Andor Molnar <andor@apache.org>.  Michael Han <hanm@apache.org>\n\nCloses #1059 from lvfangmin/ZOOKEEPER-3512\n","date":"2019-12-28 05:33:26","modifiedFileCount":"43","status":"M","submitter":"Fangmin Lyu"}]
