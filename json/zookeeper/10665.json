[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testLearnerSessionTracker() throws Exception {\n        Expirer expirer = new Expirer(1);\n        \r\n        LearnerSessionTracker tracker = new LearnerSessionTracker(expirer,\n                sessionsWithTimeouts, TICK_TIME, expirer.sid, true,\n                testZKSListener());\n\n        \r\n        long sessionId = 0xb100ded;\n        try {\n            tracker.checkSession(sessionId, null);\n            Assert.fail(\"Unknown session should have failed\");\n        } catch (SessionExpiredException e) {\n            \r\n        }\n\n        \r\n        sessionsWithTimeouts.put(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail\");\n        }\n\n        \r\n        sessionId = tracker.createSession(CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Local session should not fail\");\n        }\n\n        \r\n        sessionsWithTimeouts.put(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Session during upgrade should not fail\");\n        }\n\n        \r\n        tracker = new LearnerSessionTracker(expirer, sessionsWithTimeouts,\n                TICK_TIME, expirer.sid, false, testZKSListener());\n\n        \r\n        sessionId = 0xdeadbeef;\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Should not get any exception\");\n        }\n\n    }\n","date":"2018-10-19 20:39:50","endLine":128,"groupId":"909","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLearnerSessionTracker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d8/c9bb9b9ddb7f33eca7b1650d8d0c0ad1203aba.src","preCode":"    public void testLearnerSessionTracker() throws Exception {\n        Expirer expirer = new Expirer(1);\n        \r\n        LearnerSessionTracker tracker = new LearnerSessionTracker(expirer,\n                sessionsWithTimeouts, TICK_TIME, expirer.sid, true,\n                testZKSListener());\n\n        \r\n        long sessionId = 0xb100ded;\n        try {\n            tracker.checkSession(sessionId, null);\n            Assert.fail(\"Unknown session should have failed\");\n        } catch (SessionExpiredException e) {\n            \r\n        }\n\n        \r\n        sessionsWithTimeouts.put(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail\");\n        }\n\n        \r\n        sessionId = tracker.createSession(CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Local session should not fail\");\n        }\n\n        \r\n        sessionsWithTimeouts.put(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Session during upgrade should not fail\");\n        }\n\n        \r\n        tracker = new LearnerSessionTracker(expirer, sessionsWithTimeouts,\n                TICK_TIME, expirer.sid, false, testZKSListener());\n\n        \r\n        sessionId = 0xdeadbeef;\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Should not get any exception\");\n        }\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionTrackerCheckTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testLeaderSessionTracker() throws Exception {\n        Expirer expirer = new Expirer(2);\n        \r\n        LeaderSessionTracker tracker = new LeaderSessionTracker(expirer,\n                sessionsWithTimeouts, TICK_TIME, expirer.sid, true,\n                testZKSListener());\n\n        \r\n        long sessionId = ((expirer.sid + 1) << 56) + 1;\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"local session from other server should not fail\");\n        }\n\n        \r\n        tracker.trackSession(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail\");\n        }\n        try {\n            tracker.checkGlobalSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail \" + e);\n        }\n\n        \r\n        sessionId = tracker.createSession(CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Local session on the leader should not fail\");\n        }\n\n        \r\n        tracker.trackSession(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Session during upgrade should not fail\");\n        }\n        try {\n            tracker.checkGlobalSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail \" + e);\n        }\n\n        \r\n        tracker = new LeaderSessionTracker(expirer, sessionsWithTimeouts,\n                TICK_TIME, expirer.sid, false, testZKSListener());\n\n        \r\n        sessionId = 0xdeadbeef;\n        tracker.trackSession(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail\");\n        }\n        try {\n            tracker.checkGlobalSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail\");\n        }\n\n        \r\n        sessionId = ((expirer.sid + 1) << 56) + 2;\n        try {\n            tracker.checkSession(sessionId, null);\n            Assert.fail(\"local session from other server should fail\");\n        } catch (SessionExpiredException e) {\n            \r\n        }\n\n        \r\n        sessionId = ((expirer.sid) << 56) + 2;\n        try {\n            tracker.checkSession(sessionId, null);\n            Assert.fail(\"local session from the leader should fail\");\n        } catch (SessionExpiredException e) {\n            \r\n        }\n\n    }\n","date":"2018-10-19 20:39:50","endLine":216,"groupId":"2557","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeaderSessionTracker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d8/c9bb9b9ddb7f33eca7b1650d8d0c0ad1203aba.src","preCode":"    public void testLeaderSessionTracker() throws Exception {\n        Expirer expirer = new Expirer(2);\n        \r\n        LeaderSessionTracker tracker = new LeaderSessionTracker(expirer,\n                sessionsWithTimeouts, TICK_TIME, expirer.sid, true,\n                testZKSListener());\n\n        \r\n        long sessionId = ((expirer.sid + 1) << 56) + 1;\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"local session from other server should not fail\");\n        }\n\n        \r\n        tracker.trackSession(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail\");\n        }\n        try {\n            tracker.checkGlobalSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail \" + e);\n        }\n\n        \r\n        sessionId = tracker.createSession(CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Local session on the leader should not fail\");\n        }\n\n        \r\n        tracker.trackSession(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Session during upgrade should not fail\");\n        }\n        try {\n            tracker.checkGlobalSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail \" + e);\n        }\n\n        \r\n        tracker = new LeaderSessionTracker(expirer, sessionsWithTimeouts,\n                TICK_TIME, expirer.sid, false, testZKSListener());\n\n        \r\n        sessionId = 0xdeadbeef;\n        tracker.trackSession(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail\");\n        }\n        try {\n            tracker.checkGlobalSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail\");\n        }\n\n        \r\n        sessionId = ((expirer.sid + 1) << 56) + 2;\n        try {\n            tracker.checkSession(sessionId, null);\n            Assert.fail(\"local session from other server should fail\");\n        } catch (SessionExpiredException e) {\n            \r\n        }\n\n        \r\n        sessionId = ((expirer.sid) << 56) + 2;\n        try {\n            tracker.checkSession(sessionId, null);\n            Assert.fail(\"local session from the leader should fail\");\n        } catch (SessionExpiredException e) {\n            \r\n        }\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionTrackerCheckTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testLearnerSessionTracker() throws Exception {\n        Expirer expirer = new Expirer(1);\n        \r\n        LearnerSessionTracker tracker = new LearnerSessionTracker(expirer, sessionsWithTimeouts, TICK_TIME, expirer.sid, true, testZKSListener());\n\n        \r\n        long sessionId = 0xb100ded;\n        try {\n            tracker.checkSession(sessionId, null);\n            fail(\"Unknown session should have failed\");\n        } catch (SessionExpiredException e) {\n            \r\n        }\n\n        \r\n        sessionsWithTimeouts.put(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            fail(\"Global session should not fail\");\n        }\n\n        \r\n        sessionId = tracker.createSession(CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            fail(\"Local session should not fail\");\n        }\n\n        \r\n        sessionsWithTimeouts.put(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            fail(\"Session during upgrade should not fail\");\n        }\n\n        \r\n        tracker = new LearnerSessionTracker(expirer, sessionsWithTimeouts, TICK_TIME, expirer.sid, false, testZKSListener());\n\n        \r\n        sessionId = 0xdeadbeef;\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            fail(\"Should not get any exception\");\n        }\n\n    }\n","date":"2019-08-17 23:13:15","endLine":124,"groupId":"10665","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLearnerSessionTracker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a0/d5c915ef3d32f1f9f232776718410f4d355181.src","preCode":"    public void testLearnerSessionTracker() throws Exception {\n        Expirer expirer = new Expirer(1);\n        \r\n        LearnerSessionTracker tracker = new LearnerSessionTracker(expirer,\n                sessionsWithTimeouts, TICK_TIME, expirer.sid, true,\n                testZKSListener());\n\n        \r\n        long sessionId = 0xb100ded;\n        try {\n            tracker.checkSession(sessionId, null);\n            Assert.fail(\"Unknown session should have failed\");\n        } catch (SessionExpiredException e) {\n            \r\n        }\n\n        \r\n        sessionsWithTimeouts.put(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail\");\n        }\n\n        \r\n        sessionId = tracker.createSession(CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Local session should not fail\");\n        }\n\n        \r\n        sessionsWithTimeouts.put(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Session during upgrade should not fail\");\n        }\n\n        \r\n        tracker = new LearnerSessionTracker(expirer, sessionsWithTimeouts,\n                TICK_TIME, expirer.sid, false, testZKSListener());\n\n        \r\n        sessionId = 0xdeadbeef;\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Should not get any exception\");\n        }\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionTrackerCheckTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testLeaderSessionTracker() throws Exception {\n        Expirer expirer = new Expirer(2);\n        \r\n        LeaderSessionTracker tracker = new LeaderSessionTracker(expirer, sessionsWithTimeouts, TICK_TIME, expirer.sid, true, testZKSListener());\n\n        \r\n        long sessionId = ((expirer.sid + 1) << 56) + 1;\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            fail(\"local session from other server should not fail\");\n        }\n\n        \r\n        tracker.trackSession(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            fail(\"Global session should not fail\");\n        }\n        try {\n            tracker.checkGlobalSession(sessionId, null);\n        } catch (Exception e) {\n            fail(\"Global session should not fail \" + e);\n        }\n\n        \r\n        sessionId = tracker.createSession(CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            fail(\"Local session on the leader should not fail\");\n        }\n\n        \r\n        tracker.trackSession(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            fail(\"Session during upgrade should not fail\");\n        }\n        try {\n            tracker.checkGlobalSession(sessionId, null);\n        } catch (Exception e) {\n            fail(\"Global session should not fail \" + e);\n        }\n\n        \r\n        tracker = new LeaderSessionTracker(expirer, sessionsWithTimeouts, TICK_TIME, expirer.sid, false, testZKSListener());\n\n        \r\n        sessionId = 0xdeadbeef;\n        tracker.trackSession(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            fail(\"Global session should not fail\");\n        }\n        try {\n            tracker.checkGlobalSession(sessionId, null);\n        } catch (Exception e) {\n            fail(\"Global session should not fail\");\n        }\n\n        \r\n        sessionId = ((expirer.sid + 1) << 56) + 2;\n        try {\n            tracker.checkSession(sessionId, null);\n            fail(\"local session from other server should fail\");\n        } catch (SessionExpiredException e) {\n            \r\n        }\n\n        \r\n        sessionId = ((expirer.sid) << 56) + 2;\n        try {\n            tracker.checkSession(sessionId, null);\n            fail(\"local session from the leader should fail\");\n        } catch (SessionExpiredException e) {\n            \r\n        }\n\n    }\n","date":"2019-08-17 23:13:15","endLine":209,"groupId":"10665","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeaderSessionTracker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a0/d5c915ef3d32f1f9f232776718410f4d355181.src","preCode":"    public void testLeaderSessionTracker() throws Exception {\n        Expirer expirer = new Expirer(2);\n        \r\n        LeaderSessionTracker tracker = new LeaderSessionTracker(expirer,\n                sessionsWithTimeouts, TICK_TIME, expirer.sid, true,\n                testZKSListener());\n\n        \r\n        long sessionId = ((expirer.sid + 1) << 56) + 1;\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"local session from other server should not fail\");\n        }\n\n        \r\n        tracker.trackSession(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail\");\n        }\n        try {\n            tracker.checkGlobalSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail \" + e);\n        }\n\n        \r\n        sessionId = tracker.createSession(CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Local session on the leader should not fail\");\n        }\n\n        \r\n        tracker.trackSession(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Session during upgrade should not fail\");\n        }\n        try {\n            tracker.checkGlobalSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail \" + e);\n        }\n\n        \r\n        tracker = new LeaderSessionTracker(expirer, sessionsWithTimeouts,\n                TICK_TIME, expirer.sid, false, testZKSListener());\n\n        \r\n        sessionId = 0xdeadbeef;\n        tracker.trackSession(sessionId, CONNECTION_TIMEOUT);\n        try {\n            tracker.checkSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail\");\n        }\n        try {\n            tracker.checkGlobalSession(sessionId, null);\n        } catch (Exception e) {\n            Assert.fail(\"Global session should not fail\");\n        }\n\n        \r\n        sessionId = ((expirer.sid + 1) << 56) + 2;\n        try {\n            tracker.checkSession(sessionId, null);\n            Assert.fail(\"local session from other server should fail\");\n        } catch (SessionExpiredException e) {\n            \r\n        }\n\n        \r\n        sessionId = ((expirer.sid) << 56) + 2;\n        try {\n            tracker.checkSession(sessionId, null);\n            Assert.fail(\"local session from the leader should fail\");\n        } catch (SessionExpiredException e) {\n            \r\n        }\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionTrackerCheckTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"}]
