[{"authorTime":"2020-01-22 01:14:37","codes":[{"authorDate":"2020-01-22 01:14:37","commitOrder":1,"curCode":"    public void testOrderWithSamePrefix() throws Exception {\n        final String[] names = {\"x-3\", \"x-5\", \"x-11\", \"x-1\"};\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        Assert.assertEquals(\"x-1\", zname.getName());\n        Assert.assertEquals(\"x\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"x-3\", zname.getName());\n        Assert.assertEquals(\"x\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(3), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"x-5\", zname.getName());\n        Assert.assertEquals(\"x\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(5), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"x-11\", zname.getName());\n        Assert.assertEquals(\"x\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(11), zname.getSequence().get());\n    }\n","date":"2020-01-22 01:14:37","endLine":62,"groupId":"3760","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrderWithSamePrefix","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/dc2c29b062d0d7a5d18753d93a7a0a058d7519.src","preCode":"    public void testOrderWithSamePrefix() throws Exception {\n        final String[] names = {\"x-3\", \"x-5\", \"x-11\", \"x-1\"};\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        Assert.assertEquals(\"x-1\", zname.getName());\n        Assert.assertEquals(\"x\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"x-3\", zname.getName());\n        Assert.assertEquals(\"x\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(3), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"x-5\", zname.getName());\n        Assert.assertEquals(\"x\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(5), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"x-11\", zname.getName());\n        Assert.assertEquals(\"x\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(11), zname.getSequence().get());\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"B"},{"authorDate":"2020-01-22 01:14:37","commitOrder":1,"curCode":"    public void testOrderWithDifferentPrefixes() throws Exception {\n        final String[] names = {\"r-3\", \"r-2\", \"r-1\", \"w-2\", \"w-1\"};\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        Assert.assertEquals(\"r-1\", zname.getName());\n        Assert.assertEquals(\"r\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"w-1\", zname.getName());\n        Assert.assertEquals(\"w\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"r-2\", zname.getName());\n        Assert.assertEquals(\"r\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"w-2\", zname.getName());\n        Assert.assertEquals(\"w\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"r-3\", zname.getName());\n        Assert.assertEquals(\"r\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(3), zname.getSequence().get());\n    }\n","date":"2020-01-22 01:14:37","endLine":98,"groupId":"3760","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrderWithDifferentPrefixes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/dc2c29b062d0d7a5d18753d93a7a0a058d7519.src","preCode":"    public void testOrderWithDifferentPrefixes() throws Exception {\n        final String[] names = {\"r-3\", \"r-2\", \"r-1\", \"w-2\", \"w-1\"};\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        Assert.assertEquals(\"r-1\", zname.getName());\n        Assert.assertEquals(\"r\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"w-1\", zname.getName());\n        Assert.assertEquals(\"w\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"r-2\", zname.getName());\n        Assert.assertEquals(\"r\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"w-2\", zname.getName());\n        Assert.assertEquals(\"w\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"r-3\", zname.getName());\n        Assert.assertEquals(\"r\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(3), zname.getSequence().get());\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"}],"commitId":"ee69a5565215bb95fe10d88f52dba80a7a7fb929","commitMessage":"@@@ZOOKEEPER-3663: Clean Up ZNodeName Class\n\nAuthor: David Mollitor <dmollitor@apache.org>\n\nReviewers: eolivelli@apache.org.  andor@apache.org\n\nCloses #1193 from belugabehr/ZOOKEEPER-3663\n","date":"2020-01-22 01:14:37","modifiedFileCount":"2","status":"B","submitter":"David Mollitor"},{"authorTime":"2020-08-07 18:46:19","codes":[{"authorDate":"2020-08-07 18:46:19","commitOrder":2,"curCode":"    public void testOrderWithSamePrefix() throws Exception {\n        final String[] names = {\"x-3\", \"x-5\", \"x-11\", \"x-1\"};\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        assertEquals(\"x-1\", zname.getName());\n        assertEquals(\"x\", zname.getPrefix());\n        assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        assertEquals(\"x-3\", zname.getName());\n        assertEquals(\"x\", zname.getPrefix());\n        assertEquals(Integer.valueOf(3), zname.getSequence().get());\n\n        zname = it.next();\n        assertEquals(\"x-5\", zname.getName());\n        assertEquals(\"x\", zname.getPrefix());\n        assertEquals(Integer.valueOf(5), zname.getSequence().get());\n\n        zname = it.next();\n        assertEquals(\"x-11\", zname.getName());\n        assertEquals(\"x\", zname.getPrefix());\n        assertEquals(Integer.valueOf(11), zname.getSequence().get());\n    }\n","date":"2020-08-07 18:46:45","endLine":64,"groupId":"10827","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testOrderWithSamePrefix","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/c76cc6205af41a28ea41b0e1532e16e86e1ebf.src","preCode":"    public void testOrderWithSamePrefix() throws Exception {\n        final String[] names = {\"x-3\", \"x-5\", \"x-11\", \"x-1\"};\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        Assert.assertEquals(\"x-1\", zname.getName());\n        Assert.assertEquals(\"x\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"x-3\", zname.getName());\n        Assert.assertEquals(\"x\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(3), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"x-5\", zname.getName());\n        Assert.assertEquals(\"x\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(5), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"x-11\", zname.getName());\n        Assert.assertEquals(\"x\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(11), zname.getSequence().get());\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2020-08-07 18:46:19","commitOrder":2,"curCode":"    public void testOrderWithDifferentPrefixes() throws Exception {\n        final String[] names = {\"r-3\", \"r-2\", \"r-1\", \"w-2\", \"w-1\"};\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        assertEquals(\"r-1\", zname.getName());\n        assertEquals(\"r\", zname.getPrefix());\n        assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        assertEquals(\"w-1\", zname.getName());\n        assertEquals(\"w\", zname.getPrefix());\n        assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        assertEquals(\"r-2\", zname.getName());\n        assertEquals(\"r\", zname.getPrefix());\n        assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        assertEquals(\"w-2\", zname.getName());\n        assertEquals(\"w\", zname.getPrefix());\n        assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        assertEquals(\"r-3\", zname.getName());\n        assertEquals(\"r\", zname.getPrefix());\n        assertEquals(Integer.valueOf(3), zname.getSequence().get());\n    }\n","date":"2020-08-07 18:46:45","endLine":100,"groupId":"10827","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testOrderWithDifferentPrefixes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/c76cc6205af41a28ea41b0e1532e16e86e1ebf.src","preCode":"    public void testOrderWithDifferentPrefixes() throws Exception {\n        final String[] names = {\"r-3\", \"r-2\", \"r-1\", \"w-2\", \"w-1\"};\n        ZNodeName zname;\n\n        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()\n            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());\n\n        final Iterator<ZNodeName> it = nodeNames.iterator();\n\n        zname = it.next();\n        Assert.assertEquals(\"r-1\", zname.getName());\n        Assert.assertEquals(\"r\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"w-1\", zname.getName());\n        Assert.assertEquals(\"w\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"r-2\", zname.getName());\n        Assert.assertEquals(\"r\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"w-2\", zname.getName());\n        Assert.assertEquals(\"w\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(2), zname.getSequence().get());\n\n        zname = it.next();\n        Assert.assertEquals(\"r-3\", zname.getName());\n        Assert.assertEquals(\"r\", zname.getPrefix());\n        Assert.assertEquals(Integer.valueOf(3), zname.getSequence().get());\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"08ae49dee4d698fb8c926f3842acdcb0f5b3c58e","commitMessage":"@@@ZOOKEEPER-3854: Upgrade jUnit in ZooKeeper-Recipes\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Norbert Kalmar <nkalmar@apache.org>.  Mate Szalay-Beko <symat@apache.org>\n\nCloses #1423 from tamaashu/ZOOKEEPER-3854\n","date":"2020-08-07 18:46:45","modifiedFileCount":"4","status":"M","submitter":"Tamas Penzes"}]
