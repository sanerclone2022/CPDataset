[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"        public MainThread(int clientPort) throws IOException {\n            super(\"Standalone server with clientPort:\" + clientPort);\n            File tmpDir = ClientBase.createTmpDir();\n            confFile = new File(tmpDir, \"zoo.cfg\");\n\n            FileWriter fwriter = new FileWriter(confFile);\n            fwriter.write(\"tickTime=2000\\n\");\n            fwriter.write(\"initLimit=10\\n\");\n            fwriter.write(\"syncLimit=5\\n\");\n            fwriter.write(\"snapCount=1\\n\");\n\n            File dataDir = new File(tmpDir, \"data\");\n            if (!dataDir.mkdir()) {\n                throw new IOException(\"unable to mkdir \" + dataDir);\n            }\n            \n            \r\n            String dir = PathUtils.normalizeFileSystemPath(dataDir.toString());\n            fwriter.write(\"dataDir=\" + dir + \"\\n\");\n            \n            fwriter.write(\"clientPort=\" + clientPort + \"\\n\");\n            fwriter.flush();\n            fwriter.close();\n\n            main = new TestMain();\n        }\n","date":"2018-10-05 20:25:43","endLine":75,"groupId":"3066","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"MainThread","params":"(intclientPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/cd/5af81d1cd66d8b66067c4b9e870e92f6e1b22d.src","preCode":"        public MainThread(int clientPort) throws IOException {\n            super(\"Standalone server with clientPort:\" + clientPort);\n            File tmpDir = ClientBase.createTmpDir();\n            confFile = new File(tmpDir, \"zoo.cfg\");\n\n            FileWriter fwriter = new FileWriter(confFile);\n            fwriter.write(\"tickTime=2000\\n\");\n            fwriter.write(\"initLimit=10\\n\");\n            fwriter.write(\"syncLimit=5\\n\");\n            fwriter.write(\"snapCount=1\\n\");\n\n            File dataDir = new File(tmpDir, \"data\");\n            if (!dataDir.mkdir()) {\n                throw new IOException(\"unable to mkdir \" + dataDir);\n            }\n            \n            \r\n            String dir = PathUtils.normalizeFileSystemPath(dataDir.toString());\n            fwriter.write(\"dataDir=\" + dir + \"\\n\");\n            \n            fwriter.write(\"clientPort=\" + clientPort + \"\\n\");\n            fwriter.flush();\n            fwriter.close();\n\n            main = new TestMain();\n        }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/InvalidSnapCountTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"        public MainThread(int myid, int clientPort, int adminServerPort, Integer secureClientPort,\n                          String quorumCfgSection, String configs, String peerType, boolean writeDynamicConfigFile, String version)\n                throws IOException {\n            tmpDir = ClientBase.createTmpDir();\n            LOG.info(\"id = \" + myid + \" tmpDir = \" + tmpDir + \" clientPort = \"\n                    + clientPort + \" adminServerPort = \" + adminServerPort);\n\n            File dataDir = new File(tmpDir, \"data\");\n            if (!dataDir.mkdir()) {\n                throw new IOException(\"Unable to mkdir \" + dataDir);\n            }\n\n            confFile = new File(tmpDir, \"zoo.cfg\");\n\n            FileWriter fwriter = new FileWriter(confFile);\n            fwriter.write(\"tickTime=4000\\n\");\n            fwriter.write(\"initLimit=10\\n\");\n            fwriter.write(\"syncLimit=5\\n\");\n            if(configs != null){\n                fwriter.write(configs);\n            }\n\n            \r\n            String dir = PathUtils.normalizeFileSystemPath(dataDir.toString());\n\n            fwriter.write(\"dataDir=\" + dir + \"\\n\");\n            fwriter.write(\"admin.serverPort=\" + adminServerPort + \"\\n\");\n\n            \r\n            \r\n            \r\n            if (clientPort != UNSET_STATIC_CLIENTPORT) {\n                fwriter.write(\"clientPort=\" + clientPort + \"\\n\");\n            }\n\n            if (secureClientPort != null) {\n                fwriter.write(\"secureClientPort=\" + secureClientPort + \"\\n\");\n            }\n            \n            if (peerType != null) {\n                fwriter.write(\"peerType=\" + peerType + \"\\n\");\n            }\n\n            if (writeDynamicConfigFile) {\n                String dynamicConfigFilename = createDynamicFile(quorumCfgSection, version);\n                fwriter.write(\"dynamicConfigFile=\" + dynamicConfigFilename + \"\\n\");\n            } else {\n                fwriter.write(quorumCfgSection);\n            }\n            fwriter.flush();\n            fwriter.close();\n\n            File myidFile = new File(dataDir, \"myid\");\n            fwriter = new FileWriter(myidFile);\n            fwriter.write(Integer.toString(myid));\n            fwriter.flush();\n            fwriter.close();\n\n            ClientBase.createInitializeFile(dataDir);\n        }\n","date":"2018-10-05 20:25:43","endLine":254,"groupId":"3363","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"MainThread","params":"(intmyid@intclientPort@intadminServerPort@IntegersecureClientPort@StringquorumCfgSection@Stringconfigs@StringpeerType@booleanwriteDynamicConfigFile@Stringversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a3/57a6ed161209fa7da891a553aa7683346c564b.src","preCode":"        public MainThread(int myid, int clientPort, int adminServerPort, Integer secureClientPort,\n                          String quorumCfgSection, String configs, String peerType, boolean writeDynamicConfigFile, String version)\n                throws IOException {\n            tmpDir = ClientBase.createTmpDir();\n            LOG.info(\"id = \" + myid + \" tmpDir = \" + tmpDir + \" clientPort = \"\n                    + clientPort + \" adminServerPort = \" + adminServerPort);\n\n            File dataDir = new File(tmpDir, \"data\");\n            if (!dataDir.mkdir()) {\n                throw new IOException(\"Unable to mkdir \" + dataDir);\n            }\n\n            confFile = new File(tmpDir, \"zoo.cfg\");\n\n            FileWriter fwriter = new FileWriter(confFile);\n            fwriter.write(\"tickTime=4000\\n\");\n            fwriter.write(\"initLimit=10\\n\");\n            fwriter.write(\"syncLimit=5\\n\");\n            if(configs != null){\n                fwriter.write(configs);\n            }\n\n            \r\n            String dir = PathUtils.normalizeFileSystemPath(dataDir.toString());\n\n            fwriter.write(\"dataDir=\" + dir + \"\\n\");\n            fwriter.write(\"admin.serverPort=\" + adminServerPort + \"\\n\");\n\n            \r\n            \r\n            \r\n            if (clientPort != UNSET_STATIC_CLIENTPORT) {\n                fwriter.write(\"clientPort=\" + clientPort + \"\\n\");\n            }\n\n            if (secureClientPort != null) {\n                fwriter.write(\"secureClientPort=\" + secureClientPort + \"\\n\");\n            }\n            \n            if (peerType != null) {\n                fwriter.write(\"peerType=\" + peerType + \"\\n\");\n            }\n\n            if (writeDynamicConfigFile) {\n                String dynamicConfigFilename = createDynamicFile(quorumCfgSection, version);\n                fwriter.write(\"dynamicConfigFile=\" + dynamicConfigFilename + \"\\n\");\n            } else {\n                fwriter.write(quorumCfgSection);\n            }\n            fwriter.flush();\n            fwriter.close();\n\n            File myidFile = new File(dataDir, \"myid\");\n            fwriter = new FileWriter(myidFile);\n            fwriter.write(Integer.toString(myid));\n            fwriter.flush();\n            fwriter.close();\n\n            ClientBase.createInitializeFile(dataDir);\n        }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTestBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-07-12 23:01:44","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":2,"curCode":"        public MainThread(int clientPort) throws IOException {\n            super(\"Standalone server with clientPort:\" + clientPort);\n            File tmpDir = ClientBase.createTmpDir();\n            confFile = new File(tmpDir, \"zoo.cfg\");\n\n            FileWriter fwriter = new FileWriter(confFile);\n            fwriter.write(\"tickTime=2000\\n\");\n            fwriter.write(\"initLimit=10\\n\");\n            fwriter.write(\"syncLimit=5\\n\");\n            fwriter.write(\"snapCount=1\\n\");\n\n            File dataDir = new File(tmpDir, \"data\");\n            if (!dataDir.mkdir()) {\n                throw new IOException(\"unable to mkdir \" + dataDir);\n            }\n            \n            \r\n            String dir = PathUtils.normalizeFileSystemPath(dataDir.toString());\n            fwriter.write(\"dataDir=\" + dir + \"\\n\");\n            \n            fwriter.write(\"clientPort=\" + clientPort + \"\\n\");\n            fwriter.flush();\n            fwriter.close();\n\n            main = new TestMain();\n        }\n","date":"2018-10-05 20:25:43","endLine":75,"groupId":"3066","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"MainThread","params":"(intclientPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/cd/5af81d1cd66d8b66067c4b9e870e92f6e1b22d.src","preCode":"        public MainThread(int clientPort) throws IOException {\n            super(\"Standalone server with clientPort:\" + clientPort);\n            File tmpDir = ClientBase.createTmpDir();\n            confFile = new File(tmpDir, \"zoo.cfg\");\n\n            FileWriter fwriter = new FileWriter(confFile);\n            fwriter.write(\"tickTime=2000\\n\");\n            fwriter.write(\"initLimit=10\\n\");\n            fwriter.write(\"syncLimit=5\\n\");\n            fwriter.write(\"snapCount=1\\n\");\n\n            File dataDir = new File(tmpDir, \"data\");\n            if (!dataDir.mkdir()) {\n                throw new IOException(\"unable to mkdir \" + dataDir);\n            }\n            \n            \r\n            String dir = PathUtils.normalizeFileSystemPath(dataDir.toString());\n            fwriter.write(\"dataDir=\" + dir + \"\\n\");\n            \n            fwriter.write(\"clientPort=\" + clientPort + \"\\n\");\n            fwriter.flush();\n            fwriter.close();\n\n            main = new TestMain();\n        }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/InvalidSnapCountTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2019-07-12 23:01:44","commitOrder":2,"curCode":"        public MainThread(int myid, int clientPort, int adminServerPort, Integer secureClientPort,\n                          String quorumCfgSection, String configs, String peerType, boolean writeDynamicConfigFile, String version)\n                throws IOException {\n            tmpDir = ClientBase.createTmpDir();\n            LOG.info(\"id = \" + myid + \" tmpDir = \" + tmpDir + \" clientPort = \"\n                    + clientPort + \" adminServerPort = \" + adminServerPort);\n\n            File dataDir = new File(tmpDir, \"data\");\n            if (!dataDir.mkdir()) {\n                throw new IOException(\"Unable to mkdir \" + dataDir);\n            }\n\n            confFile = new File(tmpDir, \"zoo.cfg\");\n\n            FileWriter fwriter = new FileWriter(confFile);\n            fwriter.write(\"tickTime=4000\\n\");\n            fwriter.write(\"initLimit=10\\n\");\n            fwriter.write(\"syncLimit=5\\n\");\n            fwriter.write(\"connectToLearnerMasterLimit=5\\n\");\n            if(configs != null){\n                fwriter.write(configs);\n            }\n\n            \r\n            String dir = PathUtils.normalizeFileSystemPath(dataDir.toString());\n\n            fwriter.write(\"dataDir=\" + dir + \"\\n\");\n            fwriter.write(\"admin.serverPort=\" + adminServerPort + \"\\n\");\n\n            \r\n            \r\n            \r\n            if (clientPort != UNSET_STATIC_CLIENTPORT) {\n                fwriter.write(\"clientPort=\" + clientPort + \"\\n\");\n            }\n\n            if (secureClientPort != null) {\n                fwriter.write(\"secureClientPort=\" + secureClientPort + \"\\n\");\n            }\n            \n            if (peerType != null) {\n                fwriter.write(\"peerType=\" + peerType + \"\\n\");\n            }\n\n            if (writeDynamicConfigFile) {\n                String dynamicConfigFilename = createDynamicFile(quorumCfgSection, version);\n                fwriter.write(\"dynamicConfigFile=\" + dynamicConfigFilename + \"\\n\");\n            } else {\n                fwriter.write(quorumCfgSection);\n            }\n            fwriter.flush();\n            fwriter.close();\n\n            File myidFile = new File(dataDir, \"myid\");\n            fwriter = new FileWriter(myidFile);\n            fwriter.write(Integer.toString(myid));\n            fwriter.flush();\n            fwriter.close();\n\n            ClientBase.createInitializeFile(dataDir);\n        }\n","date":"2019-07-12 23:01:44","endLine":275,"groupId":"3363","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"MainThread","params":"(intmyid@intclientPort@intadminServerPort@IntegersecureClientPort@StringquorumCfgSection@Stringconfigs@StringpeerType@booleanwriteDynamicConfigFile@Stringversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/45/6a3ef9aa4c350c132a0dd2d1cff2e9e4949543.src","preCode":"        public MainThread(int myid, int clientPort, int adminServerPort, Integer secureClientPort,\n                          String quorumCfgSection, String configs, String peerType, boolean writeDynamicConfigFile, String version)\n                throws IOException {\n            tmpDir = ClientBase.createTmpDir();\n            LOG.info(\"id = \" + myid + \" tmpDir = \" + tmpDir + \" clientPort = \"\n                    + clientPort + \" adminServerPort = \" + adminServerPort);\n\n            File dataDir = new File(tmpDir, \"data\");\n            if (!dataDir.mkdir()) {\n                throw new IOException(\"Unable to mkdir \" + dataDir);\n            }\n\n            confFile = new File(tmpDir, \"zoo.cfg\");\n\n            FileWriter fwriter = new FileWriter(confFile);\n            fwriter.write(\"tickTime=4000\\n\");\n            fwriter.write(\"initLimit=10\\n\");\n            fwriter.write(\"syncLimit=5\\n\");\n            if(configs != null){\n                fwriter.write(configs);\n            }\n\n            \r\n            String dir = PathUtils.normalizeFileSystemPath(dataDir.toString());\n\n            fwriter.write(\"dataDir=\" + dir + \"\\n\");\n            fwriter.write(\"admin.serverPort=\" + adminServerPort + \"\\n\");\n\n            \r\n            \r\n            \r\n            if (clientPort != UNSET_STATIC_CLIENTPORT) {\n                fwriter.write(\"clientPort=\" + clientPort + \"\\n\");\n            }\n\n            if (secureClientPort != null) {\n                fwriter.write(\"secureClientPort=\" + secureClientPort + \"\\n\");\n            }\n            \n            if (peerType != null) {\n                fwriter.write(\"peerType=\" + peerType + \"\\n\");\n            }\n\n            if (writeDynamicConfigFile) {\n                String dynamicConfigFilename = createDynamicFile(quorumCfgSection, version);\n                fwriter.write(\"dynamicConfigFile=\" + dynamicConfigFilename + \"\\n\");\n            } else {\n                fwriter.write(quorumCfgSection);\n            }\n            fwriter.flush();\n            fwriter.close();\n\n            File myidFile = new File(dataDir, \"myid\");\n            fwriter = new FileWriter(myidFile);\n            fwriter.write(Integer.toString(myid));\n            fwriter.flush();\n            fwriter.close();\n\n            ClientBase.createInitializeFile(dataDir);\n        }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTestBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"43ce772db000721546fcd13dd8523002dfa97741","commitMessage":"@@@ZOOKEEPER-3398: Learner.connectToLeader() may take too long to time-out\n\nAfter leader election happens.  the followers will connect to the leader which is facilitated by the Learner.connectToLeader() method.\n\nLearner.connectToLeader() is relying on the initLimit configuration value to time-out in case the network connection is unreliable. This config may have a high value that could leave the ensemble retrying and waiting in the state of not having quorum for too long. The follower will retry up to 5 times.\n\nThis patch introduces a new configuration directive that will allow Zookeeper to use different time-out value `connectToLeaderLimit` which then could be set to lower value than `initLimit`.\n\nTest plan:\n- ant clean\n- ant test-core-java\n\nNOTE: Lots of whitespace changes.  hope it helps.\n\nAuthor: Vladimir Ivic <vladimir.ivic@me.com>\n\nReviewers: eolivelli@apache.org.  hanm@apache.org.  andor@apache.org\n\nCloses #953 from vladimirivic/ZOOKEEPER-3398 and squashes the following commits:\n\nda4ecd055 [Vladimir Ivic] Removed redundant test.  chaning LearnerTest.connectToLearnerMasterLimitTest() params and assertions\n6c413311c [Vladimir Ivic] Updating the tests with the new timeout parameter\n5a89cbd7e [Vladimir Ivic] Rewriting timeout logic inside Leader.connectToLeader\n99c065616 [Vladimir Ivic] Adding config connectToLearnerMasterLimit to prevent long connect timeout\n","date":"2019-07-12 23:01:44","modifiedFileCount":"23","status":"M","submitter":"Vladimir Ivic"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":3,"curCode":"        public MainThread(int clientPort) throws IOException {\n            super(\"Standalone server with clientPort:\" + clientPort);\n            File tmpDir = ClientBase.createTmpDir();\n            confFile = new File(tmpDir, \"zoo.cfg\");\n\n            FileWriter fwriter = new FileWriter(confFile);\n            fwriter.write(\"tickTime=2000\\n\");\n            fwriter.write(\"initLimit=10\\n\");\n            fwriter.write(\"syncLimit=5\\n\");\n            fwriter.write(\"snapCount=1\\n\");\n\n            File dataDir = new File(tmpDir, \"data\");\n            if (!dataDir.mkdir()) {\n                throw new IOException(\"unable to mkdir \" + dataDir);\n            }\n            \n            \r\n            String dir = PathUtils.normalizeFileSystemPath(dataDir.toString());\n            fwriter.write(\"dataDir=\" + dir + \"\\n\");\n            \n            fwriter.write(\"clientPort=\" + clientPort + \"\\n\");\n            fwriter.flush();\n            fwriter.close();\n\n            main = new TestMain();\n        }\n","date":"2018-10-05 20:25:43","endLine":75,"groupId":"1270","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"MainThread","params":"(intclientPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/cd/5af81d1cd66d8b66067c4b9e870e92f6e1b22d.src","preCode":"        public MainThread(int clientPort) throws IOException {\n            super(\"Standalone server with clientPort:\" + clientPort);\n            File tmpDir = ClientBase.createTmpDir();\n            confFile = new File(tmpDir, \"zoo.cfg\");\n\n            FileWriter fwriter = new FileWriter(confFile);\n            fwriter.write(\"tickTime=2000\\n\");\n            fwriter.write(\"initLimit=10\\n\");\n            fwriter.write(\"syncLimit=5\\n\");\n            fwriter.write(\"snapCount=1\\n\");\n\n            File dataDir = new File(tmpDir, \"data\");\n            if (!dataDir.mkdir()) {\n                throw new IOException(\"unable to mkdir \" + dataDir);\n            }\n            \n            \r\n            String dir = PathUtils.normalizeFileSystemPath(dataDir.toString());\n            fwriter.write(\"dataDir=\" + dir + \"\\n\");\n            \n            fwriter.write(\"clientPort=\" + clientPort + \"\\n\");\n            fwriter.flush();\n            fwriter.close();\n\n            main = new TestMain();\n        }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/InvalidSnapCountTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2019-10-10 20:37:45","commitOrder":3,"curCode":"        public MainThread(int myid, int clientPort, int adminServerPort, Integer secureClientPort, String quorumCfgSection, String configs, String peerType, boolean writeDynamicConfigFile, String version) throws IOException {\n            tmpDir = ClientBase.createTmpDir();\n            LOG.info(\"id = {} tmpDir = {} clientPort = {} adminServerPort = {}\", myid, tmpDir, clientPort, adminServerPort);\n\n            File dataDir = new File(tmpDir, \"data\");\n            if (!dataDir.mkdir()) {\n                throw new IOException(\"Unable to mkdir \" + dataDir);\n            }\n\n            confFile = new File(tmpDir, \"zoo.cfg\");\n\n            FileWriter fwriter = new FileWriter(confFile);\n            fwriter.write(\"tickTime=4000\\n\");\n            fwriter.write(\"initLimit=10\\n\");\n            fwriter.write(\"syncLimit=5\\n\");\n            fwriter.write(\"connectToLearnerMasterLimit=5\\n\");\n            if (configs != null) {\n                fwriter.write(configs);\n            }\n\n            \r\n            String dir = PathUtils.normalizeFileSystemPath(dataDir.toString());\n\n            fwriter.write(\"dataDir=\" + dir + \"\\n\");\n            fwriter.write(\"admin.serverPort=\" + adminServerPort + \"\\n\");\n\n            \r\n            \r\n            \r\n            if (clientPort != UNSET_STATIC_CLIENTPORT) {\n                fwriter.write(\"clientPort=\" + clientPort + \"\\n\");\n            }\n\n            if (secureClientPort != null) {\n                fwriter.write(\"secureClientPort=\" + secureClientPort + \"\\n\");\n            }\n\n            if (peerType != null) {\n                fwriter.write(\"peerType=\" + peerType + \"\\n\");\n            }\n\n            if (writeDynamicConfigFile) {\n                String dynamicConfigFilename = createDynamicFile(quorumCfgSection, version);\n                fwriter.write(\"dynamicConfigFile=\" + dynamicConfigFilename + \"\\n\");\n            } else {\n                fwriter.write(quorumCfgSection);\n            }\n            fwriter.flush();\n            fwriter.close();\n\n            File myidFile = new File(dataDir, \"myid\");\n            fwriter = new FileWriter(myidFile);\n            fwriter.write(Integer.toString(myid));\n            fwriter.flush();\n            fwriter.close();\n\n            ClientBase.createInitializeFile(dataDir);\n        }\n","date":"2019-10-10 20:37:45","endLine":260,"groupId":"1270","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"MainThread","params":"(intmyid@intclientPort@intadminServerPort@IntegersecureClientPort@StringquorumCfgSection@Stringconfigs@StringpeerType@booleanwriteDynamicConfigFile@Stringversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d2/e582211ebed82c51e6065be78151409750b38b.src","preCode":"        public MainThread(int myid, int clientPort, int adminServerPort, Integer secureClientPort, String quorumCfgSection, String configs, String peerType, boolean writeDynamicConfigFile, String version) throws IOException {\n            tmpDir = ClientBase.createTmpDir();\n            LOG.info(\"id = \" + myid\n                     + \" tmpDir = \" + tmpDir\n                     + \" clientPort = \" + clientPort\n                     + \" adminServerPort = \" + adminServerPort);\n\n            File dataDir = new File(tmpDir, \"data\");\n            if (!dataDir.mkdir()) {\n                throw new IOException(\"Unable to mkdir \" + dataDir);\n            }\n\n            confFile = new File(tmpDir, \"zoo.cfg\");\n\n            FileWriter fwriter = new FileWriter(confFile);\n            fwriter.write(\"tickTime=4000\\n\");\n            fwriter.write(\"initLimit=10\\n\");\n            fwriter.write(\"syncLimit=5\\n\");\n            fwriter.write(\"connectToLearnerMasterLimit=5\\n\");\n            if (configs != null) {\n                fwriter.write(configs);\n            }\n\n            \r\n            String dir = PathUtils.normalizeFileSystemPath(dataDir.toString());\n\n            fwriter.write(\"dataDir=\" + dir + \"\\n\");\n            fwriter.write(\"admin.serverPort=\" + adminServerPort + \"\\n\");\n\n            \r\n            \r\n            \r\n            if (clientPort != UNSET_STATIC_CLIENTPORT) {\n                fwriter.write(\"clientPort=\" + clientPort + \"\\n\");\n            }\n\n            if (secureClientPort != null) {\n                fwriter.write(\"secureClientPort=\" + secureClientPort + \"\\n\");\n            }\n\n            if (peerType != null) {\n                fwriter.write(\"peerType=\" + peerType + \"\\n\");\n            }\n\n            if (writeDynamicConfigFile) {\n                String dynamicConfigFilename = createDynamicFile(quorumCfgSection, version);\n                fwriter.write(\"dynamicConfigFile=\" + dynamicConfigFilename + \"\\n\");\n            } else {\n                fwriter.write(quorumCfgSection);\n            }\n            fwriter.flush();\n            fwriter.close();\n\n            File myidFile = new File(dataDir, \"myid\");\n            fwriter = new FileWriter(myidFile);\n            fwriter.write(Integer.toString(myid));\n            fwriter.flush();\n            fwriter.close();\n\n            ClientBase.createInitializeFile(dataDir);\n        }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTestBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"}]
