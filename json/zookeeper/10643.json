[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testUpdateLoadBalancing() throws UnknownHostException {\n        \r\n        boolean disconnectRequired;\n        HostProvider[] hostProviderArray = new HostProvider[numClients];\n        InetSocketAddress[] curHostForEachClient = new InetSocketAddress[numClients];\n        int[] numClientsPerHost = new int[9];\n\n        \r\n        for (int i = 0; i < numClients; i++) {\n            hostProviderArray[i] = getHostProvider((byte) 9);\n            curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 9));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 9));\n            numClientsPerHost[i] = 0; \r\n        }\n\n        \r\n        Collection<InetSocketAddress> newList = getServerAddresses((byte) 8);\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 8; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 8));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 8));\n            numClientsPerHost[i] = 0; \r\n        }\n        assertTrue(numClientsPerHost[8] == 0);\n\n        \r\n        newList = getServerAddresses((byte) 6);\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 6; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 6));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 6));\n            numClientsPerHost[i] = 0; \r\n        }\n        assertTrue(numClientsPerHost[6] == 0);\n        assertTrue(numClientsPerHost[7] == 0);\n        assertTrue(numClientsPerHost[8] == 0);\n\n        \r\n        \r\n        newList = new ArrayList<InetSocketAddress>(8);\n        for (byte i = 9; i > 1; i--) {\n            newList.add(new InetSocketAddress(InetAddress.getByAddress(new byte[]{10, 10, 10, i}), 1234 + i));\n        }\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        assertTrue(numClientsPerHost[0] == 0);\n\n        for (int i = 1; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 8));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 8));\n            numClientsPerHost[i] = 0; \r\n        }\n\n        \r\n        newList = getServerAddresses((byte) 9);\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 9));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 9));\n        }\n    }\n","date":"2018-10-19 20:39:50","endLine":355,"groupId":"469","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateLoadBalancing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/99/8d6e59fc540d57fa77631b415feb07b082a8f4.src","preCode":"    public void testUpdateLoadBalancing() throws UnknownHostException {\n        \r\n        boolean disconnectRequired;\n        HostProvider[] hostProviderArray = new HostProvider[numClients];\n        InetSocketAddress[] curHostForEachClient = new InetSocketAddress[numClients];\n        int[] numClientsPerHost = new int[9];\n\n        \r\n        for (int i = 0; i < numClients; i++) {\n            hostProviderArray[i] = getHostProvider((byte) 9);\n            curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 9));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 9));\n            numClientsPerHost[i] = 0; \r\n        }\n\n        \r\n        Collection<InetSocketAddress> newList = getServerAddresses((byte) 8);\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 8; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 8));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 8));\n            numClientsPerHost[i] = 0; \r\n        }\n        assertTrue(numClientsPerHost[8] == 0);\n\n        \r\n        newList = getServerAddresses((byte) 6);\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 6; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 6));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 6));\n            numClientsPerHost[i] = 0; \r\n        }\n        assertTrue(numClientsPerHost[6] == 0);\n        assertTrue(numClientsPerHost[7] == 0);\n        assertTrue(numClientsPerHost[8] == 0);\n\n        \r\n        \r\n        newList = new ArrayList<InetSocketAddress>(8);\n        for (byte i = 9; i > 1; i--) {\n            newList.add(new InetSocketAddress(InetAddress.getByAddress(new byte[]{10, 10, 10, i}), 1234 + i));\n        }\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        assertTrue(numClientsPerHost[0] == 0);\n\n        for (int i = 1; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 8));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 8));\n            numClientsPerHost[i] = 0; \r\n        }\n\n        \r\n        newList = getServerAddresses((byte) 9);\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 9));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 9));\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/StaticHostProviderTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testReconfigDuringReconfigMode() throws UnknownHostException {\n        \r\n        boolean disconnectRequired;\n        StaticHostProvider[] hostProviderArray = new StaticHostProvider[numClients];\n        InetSocketAddress[] curHostForEachClient = new InetSocketAddress[numClients];\n        int[] numClientsPerHost = new int[9];\n\n        \r\n        for (int i = 0; i < numClients; i++) {\n            hostProviderArray[i] = getHostProvider((byte) 9);\n            curHostForEachClient[i] = hostProviderArray[i].next(0);\n        }\n\n        \r\n        Collection<InetSocketAddress> newList = getServerAddresses((byte) 7);\n\n        for (int i = 0; i < numClients; i++) {\n            \r\n            hostProviderArray[i].updateServerList(newList,\n                    curHostForEachClient[i]);\n        }\n\n        \r\n        \r\n        newList = getServerAddresses((byte) 9);\n\n        for (int i = 0; i < numClients; i++) {\n            InetSocketAddress myServer = (i < (numClients / 2)) ? null\n                    : curHostForEachClient[i];\n            \r\n            \r\n            \r\n            \r\n            disconnectRequired = hostProviderArray[i].updateServerList(newList,\n                    myServer);\n            if (disconnectRequired)\n                curHostForEachClient[i] = hostProviderArray[i].next(0);\n            else {\n                \r\n                \r\n                curHostForEachClient[i] = hostProviderArray[i]\n                        .getServerAtCurrentIndex();\n            }\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 9));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 9));\n        }\n    }\n","date":"2018-10-19 20:39:50","endLine":478,"groupId":"3752","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigDuringReconfigMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/99/8d6e59fc540d57fa77631b415feb07b082a8f4.src","preCode":"    public void testReconfigDuringReconfigMode() throws UnknownHostException {\n        \r\n        boolean disconnectRequired;\n        StaticHostProvider[] hostProviderArray = new StaticHostProvider[numClients];\n        InetSocketAddress[] curHostForEachClient = new InetSocketAddress[numClients];\n        int[] numClientsPerHost = new int[9];\n\n        \r\n        for (int i = 0; i < numClients; i++) {\n            hostProviderArray[i] = getHostProvider((byte) 9);\n            curHostForEachClient[i] = hostProviderArray[i].next(0);\n        }\n\n        \r\n        Collection<InetSocketAddress> newList = getServerAddresses((byte) 7);\n\n        for (int i = 0; i < numClients; i++) {\n            \r\n            hostProviderArray[i].updateServerList(newList,\n                    curHostForEachClient[i]);\n        }\n\n        \r\n        \r\n        newList = getServerAddresses((byte) 9);\n\n        for (int i = 0; i < numClients; i++) {\n            InetSocketAddress myServer = (i < (numClients / 2)) ? null\n                    : curHostForEachClient[i];\n            \r\n            \r\n            \r\n            \r\n            disconnectRequired = hostProviderArray[i].updateServerList(newList,\n                    myServer);\n            if (disconnectRequired)\n                curHostForEachClient[i] = hostProviderArray[i].next(0);\n            else {\n                \r\n                \r\n                curHostForEachClient[i] = hostProviderArray[i]\n                        .getServerAtCurrentIndex();\n            }\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 9));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 9));\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/StaticHostProviderTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testUpdateLoadBalancing() throws UnknownHostException {\n        \r\n        boolean disconnectRequired;\n        HostProvider[] hostProviderArray = new HostProvider[numClients];\n        InetSocketAddress[] curHostForEachClient = new InetSocketAddress[numClients];\n        int[] numClientsPerHost = new int[9];\n\n        \r\n        for (int i = 0; i < numClients; i++) {\n            hostProviderArray[i] = getHostProvider((byte) 9);\n            curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 9));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 9));\n            numClientsPerHost[i] = 0; \r\n        }\n\n        \r\n        Collection<InetSocketAddress> newList = getServerAddresses((byte) 8);\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) {\n                curHostForEachClient[i] = hostProviderArray[i].next(0);\n            }\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 8; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 8));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 8));\n            numClientsPerHost[i] = 0; \r\n        }\n        assertTrue(numClientsPerHost[8] == 0);\n\n        \r\n        newList = getServerAddresses((byte) 6);\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) {\n                curHostForEachClient[i] = hostProviderArray[i].next(0);\n            }\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 6; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 6));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 6));\n            numClientsPerHost[i] = 0; \r\n        }\n        assertTrue(numClientsPerHost[6] == 0);\n        assertTrue(numClientsPerHost[7] == 0);\n        assertTrue(numClientsPerHost[8] == 0);\n\n        \r\n        \r\n        newList = new ArrayList<InetSocketAddress>(8);\n        for (byte i = 9; i > 1; i--) {\n            newList.add(new InetSocketAddress(InetAddress.getByAddress(new byte[]{10, 10, 10, i}), 1234 + i));\n        }\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) {\n                curHostForEachClient[i] = hostProviderArray[i].next(0);\n            }\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        assertTrue(numClientsPerHost[0] == 0);\n\n        for (int i = 1; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 8));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 8));\n            numClientsPerHost[i] = 0; \r\n        }\n\n        \r\n        newList = getServerAddresses((byte) 9);\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) {\n                curHostForEachClient[i] = hostProviderArray[i].next(0);\n            }\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 9));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 9));\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":363,"groupId":"10643","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateLoadBalancing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/70/95c14f092bec0c8caa89aaaf29e3c552a7b18f.src","preCode":"    public void testUpdateLoadBalancing() throws UnknownHostException {\n        \r\n        boolean disconnectRequired;\n        HostProvider[] hostProviderArray = new HostProvider[numClients];\n        InetSocketAddress[] curHostForEachClient = new InetSocketAddress[numClients];\n        int[] numClientsPerHost = new int[9];\n\n        \r\n        for (int i = 0; i < numClients; i++) {\n            hostProviderArray[i] = getHostProvider((byte) 9);\n            curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 9));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 9));\n            numClientsPerHost[i] = 0; \r\n        }\n\n        \r\n        Collection<InetSocketAddress> newList = getServerAddresses((byte) 8);\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 8; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 8));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 8));\n            numClientsPerHost[i] = 0; \r\n        }\n        assertTrue(numClientsPerHost[8] == 0);\n\n        \r\n        newList = getServerAddresses((byte) 6);\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 6; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 6));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 6));\n            numClientsPerHost[i] = 0; \r\n        }\n        assertTrue(numClientsPerHost[6] == 0);\n        assertTrue(numClientsPerHost[7] == 0);\n        assertTrue(numClientsPerHost[8] == 0);\n\n        \r\n        \r\n        newList = new ArrayList<InetSocketAddress>(8);\n        for (byte i = 9; i > 1; i--) {\n            newList.add(new InetSocketAddress(InetAddress.getByAddress(new byte[]{10, 10, 10, i}), 1234 + i));\n        }\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        assertTrue(numClientsPerHost[0] == 0);\n\n        for (int i = 1; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 8));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 8));\n            numClientsPerHost[i] = 0; \r\n        }\n\n        \r\n        newList = getServerAddresses((byte) 9);\n\n        for (int i = 0; i < numClients; i++) {\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n            if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 9));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 9));\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/StaticHostProviderTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testReconfigDuringReconfigMode() throws UnknownHostException {\n        \r\n        boolean disconnectRequired;\n        StaticHostProvider[] hostProviderArray = new StaticHostProvider[numClients];\n        InetSocketAddress[] curHostForEachClient = new InetSocketAddress[numClients];\n        int[] numClientsPerHost = new int[9];\n\n        \r\n        for (int i = 0; i < numClients; i++) {\n            hostProviderArray[i] = getHostProvider((byte) 9);\n            curHostForEachClient[i] = hostProviderArray[i].next(0);\n        }\n\n        \r\n        Collection<InetSocketAddress> newList = getServerAddresses((byte) 7);\n\n        for (int i = 0; i < numClients; i++) {\n            \r\n            hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n        }\n\n        \r\n        \r\n        newList = getServerAddresses((byte) 9);\n\n        for (int i = 0; i < numClients; i++) {\n            InetSocketAddress myServer = (i < (numClients / 2)) ? null : curHostForEachClient[i];\n            \r\n            \r\n            \r\n            \r\n            disconnectRequired = hostProviderArray[i].updateServerList(newList, myServer);\n            if (disconnectRequired) {\n                curHostForEachClient[i] = hostProviderArray[i].next(0);\n            } else {\n                \r\n                \r\n                curHostForEachClient[i] = hostProviderArray[i].getServerAtCurrentIndex();\n            }\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 9));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 9));\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":479,"groupId":"10643","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigDuringReconfigMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/70/95c14f092bec0c8caa89aaaf29e3c552a7b18f.src","preCode":"    public void testReconfigDuringReconfigMode() throws UnknownHostException {\n        \r\n        boolean disconnectRequired;\n        StaticHostProvider[] hostProviderArray = new StaticHostProvider[numClients];\n        InetSocketAddress[] curHostForEachClient = new InetSocketAddress[numClients];\n        int[] numClientsPerHost = new int[9];\n\n        \r\n        for (int i = 0; i < numClients; i++) {\n            hostProviderArray[i] = getHostProvider((byte) 9);\n            curHostForEachClient[i] = hostProviderArray[i].next(0);\n        }\n\n        \r\n        Collection<InetSocketAddress> newList = getServerAddresses((byte) 7);\n\n        for (int i = 0; i < numClients; i++) {\n            \r\n            hostProviderArray[i].updateServerList(newList,\n                    curHostForEachClient[i]);\n        }\n\n        \r\n        \r\n        newList = getServerAddresses((byte) 9);\n\n        for (int i = 0; i < numClients; i++) {\n            InetSocketAddress myServer = (i < (numClients / 2)) ? null\n                    : curHostForEachClient[i];\n            \r\n            \r\n            \r\n            \r\n            disconnectRequired = hostProviderArray[i].updateServerList(newList,\n                    myServer);\n            if (disconnectRequired)\n                curHostForEachClient[i] = hostProviderArray[i].next(0);\n            else {\n                \r\n                \r\n                curHostForEachClient[i] = hostProviderArray[i]\n                        .getServerAtCurrentIndex();\n            }\n            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n            hostProviderArray[i].onConnected();\n        }\n\n        for (int i = 0; i < 9; i++) {\n            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 9));\n            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 9));\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/StaticHostProviderTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"}]
