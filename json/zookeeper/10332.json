[{"authorTime":"2019-06-06 06:01:42","codes":[{"authorDate":"2019-06-06 06:01:42","commitOrder":1,"curCode":"    private void setupDataTree(ZooKeeper zk) throws KeeperException, InterruptedException {\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        for (int i = 1000; i < 3000; ++i) {\n            zk.create(\"/a/b/v/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        for (int i = 0; i < 500; ++i) {\n            zk.create(\"/a/c/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        Assert.assertEquals(\"2 children - b & c should be present \", 2, children.size());\n        Assert.assertTrue(children.contains(\"b\"));\n        Assert.assertTrue(children.contains(\"c\"));\n    }\n","date":"2019-06-06 06:01:42","endLine":138,"groupId":"2406","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupDataTree","params":"(ZooKeeperzk)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3c/85409d54c4bfeed7df46e3a9a4920b007ed533.src","preCode":"    private void setupDataTree(ZooKeeper zk) throws KeeperException, InterruptedException {\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        for (int i = 1000; i < 3000; ++i) {\n            zk.create(\"/a/b/v/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        for (int i = 0; i < 500; ++i) {\n            zk.create(\"/a/c/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        Assert.assertEquals(\"2 children - b & c should be present \", 2, children.size());\n        Assert.assertTrue(children.contains(\"b\"));\n        Assert.assertTrue(children.contains(\"c\"));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2019-06-06 06:01:42","commitOrder":1,"curCode":"    public void testDeleteRecursiveCli() throws IOException, InterruptedException, CliException, KeeperException {\n        final ZooKeeper zk = createClient();\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/1\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        Assert.assertEquals(\"2 children - b & c should be present \", children\n                .size(), 2);\n        Assert.assertTrue(children.contains(\"b\"));\n        Assert.assertTrue(children.contains(\"c\"));\n\n        ZooKeeperMain zkMain = new ZooKeeperMain(zk);\n        \r\n        \r\n        String cmdstring0 = \"rmr /a/b/v\";\n        String cmdstring1 = \"deleteall /a\";\n        zkMain.cl.parseCommand(cmdstring0);\n        Assert.assertFalse(zkMain.processZKCmd(zkMain.cl));\n        Assert.assertEquals(null, zk.exists(\"/a/b/v\", null));\n        zkMain.cl.parseCommand(cmdstring1);\n        Assert.assertFalse(zkMain.processZKCmd(zkMain.cl));\n        Assert.assertNull(zk.exists(\"/a\", null));\n    }\n","date":"2019-06-06 06:01:42","endLine":181,"groupId":"868","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteRecursiveCli","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3c/85409d54c4bfeed7df46e3a9a4920b007ed533.src","preCode":"    public void testDeleteRecursiveCli() throws IOException, InterruptedException, CliException, KeeperException {\n        final ZooKeeper zk = createClient();\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/1\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        Assert.assertEquals(\"2 children - b & c should be present \", children\n                .size(), 2);\n        Assert.assertTrue(children.contains(\"b\"));\n        Assert.assertTrue(children.contains(\"c\"));\n\n        ZooKeeperMain zkMain = new ZooKeeperMain(zk);\n        \r\n        \r\n        String cmdstring0 = \"rmr /a/b/v\";\n        String cmdstring1 = \"deleteall /a\";\n        zkMain.cl.parseCommand(cmdstring0);\n        Assert.assertFalse(zkMain.processZKCmd(zkMain.cl));\n        Assert.assertEquals(null, zk.exists(\"/a/b/v\", null));\n        zkMain.cl.parseCommand(cmdstring1);\n        Assert.assertFalse(zkMain.processZKCmd(zkMain.cl));\n        Assert.assertNull(zk.exists(\"/a\", null));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"}],"commitId":"39c40bea3a04cda70a6f9e8caad64b26d4d046e6","commitMessage":"@@@ZOOKEEPER-3354: Improve efficiency of DeleteAllCommand\n\nAuthor: Brian Nixon <nixon@fb.com>\n\nReviewers: andor@apache.org.  szepet95@gmail.com.  eolivelli@apache.org\n\nCloses #899 from enixon/delete-all\n","date":"2019-06-06 06:01:42","modifiedFileCount":"3","status":"B","submitter":"Brian Nixon"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    private void setupDataTree(ZooKeeper zk) throws KeeperException, InterruptedException {\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        for (int i = 1000; i < 3000; ++i) {\n            zk.create(\"/a/b/v/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        for (int i = 0; i < 500; ++i) {\n            zk.create(\"/a/c/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        assertEquals(\"2 children - b & c should be present \", 2, children.size());\n        assertTrue(children.contains(\"b\"));\n        assertTrue(children.contains(\"c\"));\n    }\n","date":"2019-08-17 23:13:15","endLine":131,"groupId":"2406","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupDataTree","params":"(ZooKeeperzk)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d1/9f627e069855c66c71e7f1f184e877352d7e0c.src","preCode":"    private void setupDataTree(ZooKeeper zk) throws KeeperException, InterruptedException {\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        for (int i = 1000; i < 3000; ++i) {\n            zk.create(\"/a/b/v/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        for (int i = 0; i < 500; ++i) {\n            zk.create(\"/a/c/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        Assert.assertEquals(\"2 children - b & c should be present \", 2, children.size());\n        Assert.assertTrue(children.contains(\"b\"));\n        Assert.assertTrue(children.contains(\"c\"));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testDeleteRecursiveCli() throws IOException, InterruptedException, CliException, KeeperException {\n        final ZooKeeper zk = createClient();\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/1\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        assertEquals(\"2 children - b & c should be present \", children.size(), 2);\n        assertTrue(children.contains(\"b\"));\n        assertTrue(children.contains(\"c\"));\n\n        ZooKeeperMain zkMain = new ZooKeeperMain(zk);\n        \r\n        \r\n        String cmdstring0 = \"rmr /a/b/v\";\n        String cmdstring1 = \"deleteall /a\";\n        zkMain.cl.parseCommand(cmdstring0);\n        assertFalse(zkMain.processZKCmd(zkMain.cl));\n        assertEquals(null, zk.exists(\"/a/b/v\", null));\n        zkMain.cl.parseCommand(cmdstring1);\n        assertFalse(zkMain.processZKCmd(zkMain.cl));\n        assertNull(zk.exists(\"/a\", null));\n    }\n","date":"2019-08-17 23:13:15","endLine":167,"groupId":"868","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteRecursiveCli","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d1/9f627e069855c66c71e7f1f184e877352d7e0c.src","preCode":"    public void testDeleteRecursiveCli() throws IOException, InterruptedException, CliException, KeeperException {\n        final ZooKeeper zk = createClient();\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/1\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        Assert.assertEquals(\"2 children - b & c should be present \", children\n                .size(), 2);\n        Assert.assertTrue(children.contains(\"b\"));\n        Assert.assertTrue(children.contains(\"c\"));\n\n        ZooKeeperMain zkMain = new ZooKeeperMain(zk);\n        \r\n        \r\n        String cmdstring0 = \"rmr /a/b/v\";\n        String cmdstring1 = \"deleteall /a\";\n        zkMain.cl.parseCommand(cmdstring0);\n        Assert.assertFalse(zkMain.processZKCmd(zkMain.cl));\n        Assert.assertEquals(null, zk.exists(\"/a/b/v\", null));\n        zkMain.cl.parseCommand(cmdstring1);\n        Assert.assertFalse(zkMain.processZKCmd(zkMain.cl));\n        Assert.assertNull(zk.exists(\"/a\", null));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-01-10 05:56:39","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    private void setupDataTree(ZooKeeper zk) throws KeeperException, InterruptedException {\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        for (int i = 1000; i < 3000; ++i) {\n            zk.create(\"/a/b/v/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        for (int i = 0; i < 500; ++i) {\n            zk.create(\"/a/c/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        assertEquals(\"2 children - b & c should be present \", 2, children.size());\n        assertTrue(children.contains(\"b\"));\n        assertTrue(children.contains(\"c\"));\n    }\n","date":"2019-08-17 23:13:15","endLine":131,"groupId":"2406","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setupDataTree","params":"(ZooKeeperzk)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d1/9f627e069855c66c71e7f1f184e877352d7e0c.src","preCode":"    private void setupDataTree(ZooKeeper zk) throws KeeperException, InterruptedException {\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        for (int i = 1000; i < 3000; ++i) {\n            zk.create(\"/a/b/v/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        for (int i = 0; i < 500; ++i) {\n            zk.create(\"/a/c/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        assertEquals(\"2 children - b & c should be present \", 2, children.size());\n        assertTrue(children.contains(\"b\"));\n        assertTrue(children.contains(\"c\"));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2020-01-10 05:56:39","commitOrder":3,"curCode":"    public void testDeleteRecursiveCli() throws IOException, InterruptedException, CliException, KeeperException {\n        final ZooKeeper zk = createClient();\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/1\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        assertEquals(\"2 children - b & c should be present \", children.size(), 2);\n        assertTrue(children.contains(\"b\"));\n        assertTrue(children.contains(\"c\"));\n\n        ZooKeeperMain zkMain = new ZooKeeperMain(zk);\n        String cmdstring1 = \"deleteall /a\";\n        zkMain.cl.parseCommand(cmdstring1);\n        assertFalse(zkMain.processZKCmd(zkMain.cl));\n        assertNull(zk.exists(\"/a\", null));\n    }\n","date":"2020-01-10 05:56:39","endLine":161,"groupId":"868","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteRecursiveCli","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/44/67a1ac471fd7d303af5e3537377a0c6a93da3b.src","preCode":"    public void testDeleteRecursiveCli() throws IOException, InterruptedException, CliException, KeeperException {\n        final ZooKeeper zk = createClient();\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/1\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        assertEquals(\"2 children - b & c should be present \", children.size(), 2);\n        assertTrue(children.contains(\"b\"));\n        assertTrue(children.contains(\"c\"));\n\n        ZooKeeperMain zkMain = new ZooKeeperMain(zk);\n        \r\n        \r\n        String cmdstring0 = \"rmr /a/b/v\";\n        String cmdstring1 = \"deleteall /a\";\n        zkMain.cl.parseCommand(cmdstring0);\n        assertFalse(zkMain.processZKCmd(zkMain.cl));\n        assertEquals(null, zk.exists(\"/a/b/v\", null));\n        zkMain.cl.parseCommand(cmdstring1);\n        assertFalse(zkMain.processZKCmd(zkMain.cl));\n        assertNull(zk.exists(\"/a\", null));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"27b92caefd57a60309af06ebce29e56954ca9aac","commitMessage":"@@@ZOOKEEPER-3411: Remove deprecated ls2 and rmr command\n\nRemoved Ls2Command.java.  DeleteAllCommand.printdeprecatedwarning().  statements creating new objects for ls2 and rmr in ZookeeperMain.java. Updated zookeeperCLI.md and ZookeeperTest.java.\n\nPlease do let me know if any additional changes are needed\n\nAuthor: ravowlga123 <ravowlga@gmail.com>\n\nReviewers: andor@apache.org\n\nCloses #1175 from ravowlga123/ZOOKEEPER-3411\n","date":"2020-01-10 05:56:39","modifiedFileCount":"3","status":"M","submitter":"ravowlga123"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    private void setupDataTree(ZooKeeper zk) throws KeeperException, InterruptedException {\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        for (int i = 1000; i < 3000; ++i) {\n            zk.create(\"/a/b/v/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        for (int i = 0; i < 500; ++i) {\n            zk.create(\"/a/c/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        assertEquals(2, children.size(), \"2 children - b & c should be present \");\n        assertTrue(children.contains(\"b\"));\n        assertTrue(children.contains(\"c\"));\n    }\n","date":"2020-08-04 21:01:52","endLine":131,"groupId":"10332","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setupDataTree","params":"(ZooKeeperzk)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/70/74896bcffb7d251e264f265e231f1e21560870.src","preCode":"    private void setupDataTree(ZooKeeper zk) throws KeeperException, InterruptedException {\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        for (int i = 1000; i < 3000; ++i) {\n            zk.create(\"/a/b/v/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        for (int i = 0; i < 500; ++i) {\n            zk.create(\"/a/c/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        assertEquals(\"2 children - b & c should be present \", 2, children.size());\n        assertTrue(children.contains(\"b\"));\n        assertTrue(children.contains(\"c\"));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testDeleteRecursiveCli() throws IOException, InterruptedException, CliException, KeeperException {\n        final ZooKeeper zk = createClient();\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/1\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        assertEquals(children.size(), 2, \"2 children - b & c should be present \");\n        assertTrue(children.contains(\"b\"));\n        assertTrue(children.contains(\"c\"));\n\n        ZooKeeperMain zkMain = new ZooKeeperMain(zk);\n        String cmdstring1 = \"deleteall /a\";\n        zkMain.cl.parseCommand(cmdstring1);\n        assertFalse(zkMain.processZKCmd(zkMain.cl));\n        assertNull(zk.exists(\"/a\", null));\n    }\n","date":"2020-08-04 21:01:52","endLine":161,"groupId":"10332","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteRecursiveCli","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/70/74896bcffb7d251e264f265e231f1e21560870.src","preCode":"    public void testDeleteRecursiveCli() throws IOException, InterruptedException, CliException, KeeperException {\n        final ZooKeeper zk = createClient();\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/1\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/c/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        List<String> children = zk.getChildren(\"/a\", false);\n\n        assertEquals(\"2 children - b & c should be present \", children.size(), 2);\n        assertTrue(children.contains(\"b\"));\n        assertTrue(children.contains(\"c\"));\n\n        ZooKeeperMain zkMain = new ZooKeeperMain(zk);\n        String cmdstring1 = \"deleteall /a\";\n        zkMain.cl.parseCommand(cmdstring1);\n        assertFalse(zkMain.processZKCmd(zkMain.cl));\n        assertNull(zk.exists(\"/a\", null));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
