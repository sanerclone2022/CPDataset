[{"authorTime":"2018-12-09 10:16:58","codes":[{"authorDate":"2018-12-09 10:16:58","commitOrder":1,"curCode":"    public void testObserver() throws Exception {\n        \r\n        latch = new CountDownLatch(2);\n        setUp(-1);\n        q3.start();\n        Assert.assertTrue(\"waiting for server 3 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS,\n                        CONNECTION_TIMEOUT));\n\n        if (testObserverMaster) {\n            int masterPort = q3.getQuorumPeer().observer.getSocket().getPort();\n            LOG.info(\"port \" + masterPort + \" \" + OM_PORT);\n            Assert.assertEquals(\"observer failed to connect to observer master\", masterPort, OM_PORT);\n        }\n\n        zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT_OBS,\n                ClientBase.CONNECTION_TIMEOUT, this);\n        zk.create(\"/obstest\", \"test\".getBytes(),Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        \r\n        Assert.assertEquals(new String(zk.getData(\"/obstest\", null, null)), \"test\");\n\n        \r\n        zk.sync(\"/\", null, null);\n        zk.setData(\"/obstest\", \"test2\".getBytes(), -1);\n        zk.getChildren(\"/\", false);\n\n        Assert.assertEquals(zk.getState(), States.CONNECTED);\n\n        LOG.info(\"Shutting down server 2\");\n        \r\n        q2.shutdown();\n\n        Assert.assertTrue(\"Waiting for server 2 to shut down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\"+CLIENT_PORT_QP2,\n                        ClientBase.CONNECTION_TIMEOUT));\n\n        LOG.info(\"Server 2 down\");\n\n        \r\n        latch.await();\n        Assert.assertNotSame(\"Client is still connected to non-quorate cluster\",\n                KeeperState.SyncConnected,lastEvent.getState());\n\n        LOG.info(\"Latch returned\");\n\n        try {\n            Assert.assertNotEquals(\"Shouldn't get a response when cluster not quorate!\",\n                    \"test\", new String(zk.getData(\"/obstest\", null, null)));\n        }\n        catch (ConnectionLossException c) {\n            LOG.info(\"Connection loss exception caught - ensemble not quorate (this is expected)\");\n        }\n\n        latch = new CountDownLatch(1);\n\n        LOG.info(\"Restarting server 2\");\n\n        \r\n        \r\n        q2.start();\n\n        LOG.info(\"Waiting for server 2 to come up\");\n        Assert.assertTrue(\"waiting for server 2 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2,\n                        CONNECTION_TIMEOUT));\n\n        LOG.info(\"Server 2 started, waiting for latch\");\n\n        latch.await();\n        \r\n        \r\n        Assert.assertTrue(\"Client didn't reconnect to quorate ensemble (state was\" +\n                        lastEvent.getState() + \")\",\n                (KeeperState.SyncConnected==lastEvent.getState() ||\n                        KeeperState.Expired==lastEvent.getState()));\n\n        LOG.info(\"perform a revalidation test\");\n        int leaderProxyPort = PortAssignment.unique();\n        int obsProxyPort = PortAssignment.unique();\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        ZooKeeper client = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort),\n                ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        client.create(\"/revalidtest\", \"test\".getBytes(),Ids.OPEN_ACL_UNSAFE,\n                CreateMode.EPHEMERAL);\n        Assert.assertNotNull(\"Read-after write failed\", client.exists(\"/revalidtest\", null));\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        Assert.assertEquals(new String(client.getData(\"/revalidtest\", null, null)), \"test\");\n        client.close();\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","date":"2018-12-09 10:16:58","endLine":387,"groupId":"2425","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testObserver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/4c/ec0efc51e9f5b64cfb160d51b555e58d7761bf.src","preCode":"    public void testObserver() throws Exception {\n        \r\n        latch = new CountDownLatch(2);\n        setUp(-1);\n        q3.start();\n        Assert.assertTrue(\"waiting for server 3 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS,\n                        CONNECTION_TIMEOUT));\n\n        if (testObserverMaster) {\n            int masterPort = q3.getQuorumPeer().observer.getSocket().getPort();\n            LOG.info(\"port \" + masterPort + \" \" + OM_PORT);\n            Assert.assertEquals(\"observer failed to connect to observer master\", masterPort, OM_PORT);\n        }\n\n        zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT_OBS,\n                ClientBase.CONNECTION_TIMEOUT, this);\n        zk.create(\"/obstest\", \"test\".getBytes(),Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        \r\n        Assert.assertEquals(new String(zk.getData(\"/obstest\", null, null)), \"test\");\n\n        \r\n        zk.sync(\"/\", null, null);\n        zk.setData(\"/obstest\", \"test2\".getBytes(), -1);\n        zk.getChildren(\"/\", false);\n\n        Assert.assertEquals(zk.getState(), States.CONNECTED);\n\n        LOG.info(\"Shutting down server 2\");\n        \r\n        q2.shutdown();\n\n        Assert.assertTrue(\"Waiting for server 2 to shut down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\"+CLIENT_PORT_QP2,\n                        ClientBase.CONNECTION_TIMEOUT));\n\n        LOG.info(\"Server 2 down\");\n\n        \r\n        latch.await();\n        Assert.assertNotSame(\"Client is still connected to non-quorate cluster\",\n                KeeperState.SyncConnected,lastEvent.getState());\n\n        LOG.info(\"Latch returned\");\n\n        try {\n            Assert.assertNotEquals(\"Shouldn't get a response when cluster not quorate!\",\n                    \"test\", new String(zk.getData(\"/obstest\", null, null)));\n        }\n        catch (ConnectionLossException c) {\n            LOG.info(\"Connection loss exception caught - ensemble not quorate (this is expected)\");\n        }\n\n        latch = new CountDownLatch(1);\n\n        LOG.info(\"Restarting server 2\");\n\n        \r\n        \r\n        q2.start();\n\n        LOG.info(\"Waiting for server 2 to come up\");\n        Assert.assertTrue(\"waiting for server 2 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2,\n                        CONNECTION_TIMEOUT));\n\n        LOG.info(\"Server 2 started, waiting for latch\");\n\n        latch.await();\n        \r\n        \r\n        Assert.assertTrue(\"Client didn't reconnect to quorate ensemble (state was\" +\n                        lastEvent.getState() + \")\",\n                (KeeperState.SyncConnected==lastEvent.getState() ||\n                        KeeperState.Expired==lastEvent.getState()));\n\n        LOG.info(\"perform a revalidation test\");\n        int leaderProxyPort = PortAssignment.unique();\n        int obsProxyPort = PortAssignment.unique();\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        ZooKeeper client = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort),\n                ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        client.create(\"/revalidtest\", \"test\".getBytes(),Ids.OPEN_ACL_UNSAFE,\n                CreateMode.EPHEMERAL);\n        Assert.assertNotNull(\"Read-after write failed\", client.exists(\"/revalidtest\", null));\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        Assert.assertEquals(new String(client.getData(\"/revalidtest\", null, null)), \"test\");\n        client.close();\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ObserverMasterTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"B"},{"authorDate":"2018-12-09 10:16:58","commitOrder":1,"curCode":"    public void testRevalidation() throws Exception {\n        setUp(-1);\n        q3.start();\n        Assert.assertTrue(\"waiting for server 3 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS,\n                        CONNECTION_TIMEOUT));\n        final int leaderProxyPort = PortAssignment.unique();\n        final int obsProxyPort = PortAssignment.unique();\n\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        zk = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort),\n                ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        zk.create(\"/revalidtest\", \"test\".getBytes(),Ids.OPEN_ACL_UNSAFE,\n                CreateMode.EPHEMERAL);\n        Assert.assertNotNull(\"Read-after write failed\", zk.exists(\"/revalidtest\", null));\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        Assert.assertEquals(new String(zk.getData(\"/revalidtest\", null, null)), \"test\");\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","date":"2018-12-09 10:16:58","endLine":422,"groupId":"2456","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRevalidation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/4c/ec0efc51e9f5b64cfb160d51b555e58d7761bf.src","preCode":"    public void testRevalidation() throws Exception {\n        setUp(-1);\n        q3.start();\n        Assert.assertTrue(\"waiting for server 3 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS,\n                        CONNECTION_TIMEOUT));\n        final int leaderProxyPort = PortAssignment.unique();\n        final int obsProxyPort = PortAssignment.unique();\n\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        zk = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort),\n                ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        zk.create(\"/revalidtest\", \"test\".getBytes(),Ids.OPEN_ACL_UNSAFE,\n                CreateMode.EPHEMERAL);\n        Assert.assertNotNull(\"Read-after write failed\", zk.exists(\"/revalidtest\", null));\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        Assert.assertEquals(new String(zk.getData(\"/revalidtest\", null, null)), \"test\");\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ObserverMasterTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"B"}],"commitId":"b2513c114931dc377bac5e1d39e2f81c6e8cf17e","commitMessage":"@@@ZOOKEEPER-3140: Allow Followers to host Observers\n\nCreates a new abstraction.  LearnerMaster.  to represent the portions of the Leader logic that are used in LearnerHandler. Leader implements LearnerMaster and a new class ObserverMaster implements LearnerMaster. Followers have the option of instantiating a ObserverMaster thread when they assume their role and so support Learner traffic.\n\nA new parameter 'observerMasterPort' is used to control which Follower instances host Observers.\n\nAuthor: Brian Nixon <nixon@fb.com>\n\nReviewers: fangmin@apache.org.  hanm@apache.org.  eolivelli@gmail.com\n\nCloses #628 from enixon/learner-master\n","date":"2018-12-09 10:16:58","modifiedFileCount":"21","status":"B","submitter":"Brian Nixon"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testObserver() throws Exception {\n        \r\n        latch = new CountDownLatch(2);\n        setUp(-1);\n        q3.start();\n        assertTrue(\n                \"waiting for server 3 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS, CONNECTION_TIMEOUT));\n\n        if (testObserverMaster) {\n            int masterPort = q3.getQuorumPeer().observer.getSocket().getPort();\n            LOG.info(\"port \" + masterPort + \" \" + OM_PORT);\n            assertEquals(\"observer failed to connect to observer master\", masterPort, OM_PORT);\n        }\n\n        zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT_OBS, ClientBase.CONNECTION_TIMEOUT, this);\n        zk.create(\"/obstest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        \r\n        assertEquals(new String(zk.getData(\"/obstest\", null, null)), \"test\");\n\n        \r\n        zk.sync(\"/\", null, null);\n        zk.setData(\"/obstest\", \"test2\".getBytes(), -1);\n        zk.getChildren(\"/\", false);\n\n        assertEquals(zk.getState(), States.CONNECTED);\n\n        LOG.info(\"Shutting down server 2\");\n        \r\n        q2.shutdown();\n\n        assertTrue(\n                \"Waiting for server 2 to shut down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT_QP2, ClientBase.CONNECTION_TIMEOUT));\n\n        LOG.info(\"Server 2 down\");\n\n        \r\n        latch.await();\n        assertNotSame(\"Client is still connected to non-quorate cluster\", KeeperState.SyncConnected, lastEvent.getState());\n\n        LOG.info(\"Latch returned\");\n\n        try {\n            assertNotEquals(\"Shouldn't get a response when cluster not quorate!\", \"test\", new String(zk.getData(\"/obstest\", null, null)));\n        } catch (ConnectionLossException c) {\n            LOG.info(\"Connection loss exception caught - ensemble not quorate (this is expected)\");\n        }\n\n        latch = new CountDownLatch(1);\n\n        LOG.info(\"Restarting server 2\");\n\n        \r\n        \r\n        q2.start();\n\n        LOG.info(\"Waiting for server 2 to come up\");\n        assertTrue(\n                \"waiting for server 2 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT));\n\n        LOG.info(\"Server 2 started, waiting for latch\");\n\n        latch.await();\n        \r\n        \r\n        assertTrue(\"Client didn't reconnect to quorate ensemble (state was\"\n                                  + lastEvent.getState()\n                                  + \")\", (KeeperState.SyncConnected == lastEvent.getState()\n                                                  || KeeperState.Expired == lastEvent.getState()));\n\n        LOG.info(\"perform a revalidation test\");\n        int leaderProxyPort = PortAssignment.unique();\n        int obsProxyPort = PortAssignment.unique();\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        ZooKeeper client = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort), ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        client.create(\"/revalidtest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        assertNotNull(\"Read-after write failed\", client.exists(\"/revalidtest\", null));\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        assertEquals(new String(client.getData(\"/revalidtest\", null, null)), \"test\");\n        client.close();\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","date":"2019-08-17 23:13:15","endLine":376,"groupId":"2317","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testObserver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/1b/cf5835ea8d0580ed1f05808f86157d9ce2ce1c.src","preCode":"    public void testObserver() throws Exception {\n        \r\n        latch = new CountDownLatch(2);\n        setUp(-1);\n        q3.start();\n        Assert.assertTrue(\"waiting for server 3 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS,\n                        CONNECTION_TIMEOUT));\n\n        if (testObserverMaster) {\n            int masterPort = q3.getQuorumPeer().observer.getSocket().getPort();\n            LOG.info(\"port \" + masterPort + \" \" + OM_PORT);\n            Assert.assertEquals(\"observer failed to connect to observer master\", masterPort, OM_PORT);\n        }\n\n        zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT_OBS,\n                ClientBase.CONNECTION_TIMEOUT, this);\n        zk.create(\"/obstest\", \"test\".getBytes(),Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        \r\n        Assert.assertEquals(new String(zk.getData(\"/obstest\", null, null)), \"test\");\n\n        \r\n        zk.sync(\"/\", null, null);\n        zk.setData(\"/obstest\", \"test2\".getBytes(), -1);\n        zk.getChildren(\"/\", false);\n\n        Assert.assertEquals(zk.getState(), States.CONNECTED);\n\n        LOG.info(\"Shutting down server 2\");\n        \r\n        q2.shutdown();\n\n        Assert.assertTrue(\"Waiting for server 2 to shut down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\"+CLIENT_PORT_QP2,\n                        ClientBase.CONNECTION_TIMEOUT));\n\n        LOG.info(\"Server 2 down\");\n\n        \r\n        latch.await();\n        Assert.assertNotSame(\"Client is still connected to non-quorate cluster\",\n                KeeperState.SyncConnected,lastEvent.getState());\n\n        LOG.info(\"Latch returned\");\n\n        try {\n            Assert.assertNotEquals(\"Shouldn't get a response when cluster not quorate!\",\n                    \"test\", new String(zk.getData(\"/obstest\", null, null)));\n        }\n        catch (ConnectionLossException c) {\n            LOG.info(\"Connection loss exception caught - ensemble not quorate (this is expected)\");\n        }\n\n        latch = new CountDownLatch(1);\n\n        LOG.info(\"Restarting server 2\");\n\n        \r\n        \r\n        q2.start();\n\n        LOG.info(\"Waiting for server 2 to come up\");\n        Assert.assertTrue(\"waiting for server 2 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2,\n                        CONNECTION_TIMEOUT));\n\n        LOG.info(\"Server 2 started, waiting for latch\");\n\n        latch.await();\n        \r\n        \r\n        Assert.assertTrue(\"Client didn't reconnect to quorate ensemble (state was\" +\n                        lastEvent.getState() + \")\",\n                (KeeperState.SyncConnected==lastEvent.getState() ||\n                        KeeperState.Expired==lastEvent.getState()));\n\n        LOG.info(\"perform a revalidation test\");\n        int leaderProxyPort = PortAssignment.unique();\n        int obsProxyPort = PortAssignment.unique();\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        ZooKeeper client = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort),\n                ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        client.create(\"/revalidtest\", \"test\".getBytes(),Ids.OPEN_ACL_UNSAFE,\n                CreateMode.EPHEMERAL);\n        Assert.assertNotNull(\"Read-after write failed\", client.exists(\"/revalidtest\", null));\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        Assert.assertEquals(new String(client.getData(\"/revalidtest\", null, null)), \"test\");\n        client.close();\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ObserverMasterTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testRevalidation() throws Exception {\n        setUp(-1);\n        q3.start();\n        assertTrue(\n                \"waiting for server 3 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS, CONNECTION_TIMEOUT));\n        final int leaderProxyPort = PortAssignment.unique();\n        final int obsProxyPort = PortAssignment.unique();\n\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        zk = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort), ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        zk.create(\"/revalidtest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        assertNotNull(\"Read-after write failed\", zk.exists(\"/revalidtest\", null));\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        assertEquals(new String(zk.getData(\"/revalidtest\", null, null)), \"test\");\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","date":"2019-08-17 23:13:15","endLine":409,"groupId":"2456","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRevalidation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/1b/cf5835ea8d0580ed1f05808f86157d9ce2ce1c.src","preCode":"    public void testRevalidation() throws Exception {\n        setUp(-1);\n        q3.start();\n        Assert.assertTrue(\"waiting for server 3 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS,\n                        CONNECTION_TIMEOUT));\n        final int leaderProxyPort = PortAssignment.unique();\n        final int obsProxyPort = PortAssignment.unique();\n\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        zk = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort),\n                ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        zk.create(\"/revalidtest\", \"test\".getBytes(),Ids.OPEN_ACL_UNSAFE,\n                CreateMode.EPHEMERAL);\n        Assert.assertNotNull(\"Read-after write failed\", zk.exists(\"/revalidtest\", null));\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        Assert.assertEquals(new String(zk.getData(\"/revalidtest\", null, null)), \"test\");\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ObserverMasterTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":379,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-10-10 20:37:45","commitOrder":3,"curCode":"    public void testObserver() throws Exception {\n        \r\n        latch = new CountDownLatch(2);\n        setUp(-1);\n        q3.start();\n        assertTrue(\n                \"waiting for server 3 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS, CONNECTION_TIMEOUT));\n\n        if (testObserverMaster) {\n            int masterPort = q3.getQuorumPeer().observer.getSocket().getPort();\n            LOG.info(\"port {} {}\", masterPort, OM_PORT);\n            assertEquals(\"observer failed to connect to observer master\", masterPort, OM_PORT);\n        }\n\n        zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT_OBS, ClientBase.CONNECTION_TIMEOUT, this);\n        zk.create(\"/obstest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        \r\n        assertEquals(new String(zk.getData(\"/obstest\", null, null)), \"test\");\n\n        \r\n        zk.sync(\"/\", null, null);\n        zk.setData(\"/obstest\", \"test2\".getBytes(), -1);\n        zk.getChildren(\"/\", false);\n\n        assertEquals(zk.getState(), States.CONNECTED);\n\n        LOG.info(\"Shutting down server 2\");\n        \r\n        q2.shutdown();\n\n        assertTrue(\n                \"Waiting for server 2 to shut down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT_QP2, ClientBase.CONNECTION_TIMEOUT));\n\n        LOG.info(\"Server 2 down\");\n\n        \r\n        latch.await();\n        assertNotSame(\"Client is still connected to non-quorate cluster\", KeeperState.SyncConnected, lastEvent.getState());\n\n        LOG.info(\"Latch returned\");\n\n        try {\n            assertNotEquals(\"Shouldn't get a response when cluster not quorate!\", \"test\", new String(zk.getData(\"/obstest\", null, null)));\n        } catch (ConnectionLossException c) {\n            LOG.info(\"Connection loss exception caught - ensemble not quorate (this is expected)\");\n        }\n\n        latch = new CountDownLatch(1);\n\n        LOG.info(\"Restarting server 2\");\n\n        \r\n        \r\n        q2.start();\n\n        LOG.info(\"Waiting for server 2 to come up\");\n        assertTrue(\n                \"waiting for server 2 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT));\n\n        LOG.info(\"Server 2 started, waiting for latch\");\n\n        latch.await();\n        \r\n        \r\n        assertTrue(\"Client didn't reconnect to quorate ensemble (state was\"\n                                  + lastEvent.getState()\n                                  + \")\", (KeeperState.SyncConnected == lastEvent.getState()\n                                                  || KeeperState.Expired == lastEvent.getState()));\n\n        LOG.info(\"perform a revalidation test\");\n        int leaderProxyPort = PortAssignment.unique();\n        int obsProxyPort = PortAssignment.unique();\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        ZooKeeper client = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort), ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        client.create(\"/revalidtest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        assertNotNull(\"Read-after write failed\", client.exists(\"/revalidtest\", null));\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        assertEquals(new String(client.getData(\"/revalidtest\", null, null)), \"test\");\n        client.close();\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","date":"2019-10-10 20:37:45","endLine":377,"groupId":"2317","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testObserver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ee/54a7ae57b946dcb53f3b8f91330b368e3dcac9.src","preCode":"    public void testObserver() throws Exception {\n        \r\n        latch = new CountDownLatch(2);\n        setUp(-1);\n        q3.start();\n        assertTrue(\n                \"waiting for server 3 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS, CONNECTION_TIMEOUT));\n\n        if (testObserverMaster) {\n            int masterPort = q3.getQuorumPeer().observer.getSocket().getPort();\n            LOG.info(\"port \" + masterPort + \" \" + OM_PORT);\n            assertEquals(\"observer failed to connect to observer master\", masterPort, OM_PORT);\n        }\n\n        zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT_OBS, ClientBase.CONNECTION_TIMEOUT, this);\n        zk.create(\"/obstest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        \r\n        assertEquals(new String(zk.getData(\"/obstest\", null, null)), \"test\");\n\n        \r\n        zk.sync(\"/\", null, null);\n        zk.setData(\"/obstest\", \"test2\".getBytes(), -1);\n        zk.getChildren(\"/\", false);\n\n        assertEquals(zk.getState(), States.CONNECTED);\n\n        LOG.info(\"Shutting down server 2\");\n        \r\n        q2.shutdown();\n\n        assertTrue(\n                \"Waiting for server 2 to shut down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT_QP2, ClientBase.CONNECTION_TIMEOUT));\n\n        LOG.info(\"Server 2 down\");\n\n        \r\n        latch.await();\n        assertNotSame(\"Client is still connected to non-quorate cluster\", KeeperState.SyncConnected, lastEvent.getState());\n\n        LOG.info(\"Latch returned\");\n\n        try {\n            assertNotEquals(\"Shouldn't get a response when cluster not quorate!\", \"test\", new String(zk.getData(\"/obstest\", null, null)));\n        } catch (ConnectionLossException c) {\n            LOG.info(\"Connection loss exception caught - ensemble not quorate (this is expected)\");\n        }\n\n        latch = new CountDownLatch(1);\n\n        LOG.info(\"Restarting server 2\");\n\n        \r\n        \r\n        q2.start();\n\n        LOG.info(\"Waiting for server 2 to come up\");\n        assertTrue(\n                \"waiting for server 2 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT));\n\n        LOG.info(\"Server 2 started, waiting for latch\");\n\n        latch.await();\n        \r\n        \r\n        assertTrue(\"Client didn't reconnect to quorate ensemble (state was\"\n                                  + lastEvent.getState()\n                                  + \")\", (KeeperState.SyncConnected == lastEvent.getState()\n                                                  || KeeperState.Expired == lastEvent.getState()));\n\n        LOG.info(\"perform a revalidation test\");\n        int leaderProxyPort = PortAssignment.unique();\n        int obsProxyPort = PortAssignment.unique();\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        ZooKeeper client = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort), ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        client.create(\"/revalidtest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        assertNotNull(\"Read-after write failed\", client.exists(\"/revalidtest\", null));\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        assertEquals(new String(client.getData(\"/revalidtest\", null, null)), \"test\");\n        client.close();\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ObserverMasterTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testRevalidation() throws Exception {\n        setUp(-1);\n        q3.start();\n        assertTrue(\n                \"waiting for server 3 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS, CONNECTION_TIMEOUT));\n        final int leaderProxyPort = PortAssignment.unique();\n        final int obsProxyPort = PortAssignment.unique();\n\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        zk = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort), ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        zk.create(\"/revalidtest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        assertNotNull(\"Read-after write failed\", zk.exists(\"/revalidtest\", null));\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        assertEquals(new String(zk.getData(\"/revalidtest\", null, null)), \"test\");\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","date":"2019-08-17 23:13:15","endLine":409,"groupId":"2456","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRevalidation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/1b/cf5835ea8d0580ed1f05808f86157d9ce2ce1c.src","preCode":"    public void testRevalidation() throws Exception {\n        setUp(-1);\n        q3.start();\n        assertTrue(\n                \"waiting for server 3 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS, CONNECTION_TIMEOUT));\n        final int leaderProxyPort = PortAssignment.unique();\n        final int obsProxyPort = PortAssignment.unique();\n\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        zk = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort), ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        zk.create(\"/revalidtest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        assertNotNull(\"Read-after write failed\", zk.exists(\"/revalidtest\", null));\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        assertEquals(new String(zk.getData(\"/revalidtest\", null, null)), \"test\");\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ObserverMasterTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":379,"status":"N"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testObserver(boolean testObserverMaster) throws Exception {\n        \r\n        latch = new CountDownLatch(2);\n        setUp(-1, testObserverMaster);\n        q3.start();\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS, CONNECTION_TIMEOUT),\n                \"waiting for server 3 being up\");\n\n        if (testObserverMaster) {\n            int masterPort = q3.getQuorumPeer().observer.getSocket().getPort();\n            LOG.info(\"port {} {}\", masterPort, OM_PORT);\n            assertEquals(masterPort, OM_PORT, \"observer failed to connect to observer master\");\n        }\n\n        zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT_OBS, ClientBase.CONNECTION_TIMEOUT, this);\n        zk.create(\"/obstest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        \r\n        assertEquals(new String(zk.getData(\"/obstest\", null, null)), \"test\");\n\n        \r\n        zk.sync(\"/\", null, null);\n        zk.setData(\"/obstest\", \"test2\".getBytes(), -1);\n        zk.getChildren(\"/\", false);\n\n        assertEquals(zk.getState(), States.CONNECTED);\n\n        LOG.info(\"Shutting down server 2\");\n        \r\n        q2.shutdown();\n\n        assertTrue(ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT_QP2, ClientBase.CONNECTION_TIMEOUT),\n                \"Waiting for server 2 to shut down\");\n\n        LOG.info(\"Server 2 down\");\n\n        \r\n        latch.await();\n        assertNotSame(KeeperState.SyncConnected, lastEvent.getState(), \"Client is still connected to non-quorate cluster\");\n\n        LOG.info(\"Latch returned\");\n\n        try {\n            assertNotEquals(\"Shouldn't get a response when cluster not quorate!\", \"test\", new String(zk.getData(\"/obstest\", null, null)));\n        } catch (ConnectionLossException c) {\n            LOG.info(\"Connection loss exception caught - ensemble not quorate (this is expected)\");\n        }\n\n        latch = new CountDownLatch(1);\n\n        LOG.info(\"Restarting server 2\");\n\n        \r\n        \r\n        q2.start();\n\n        LOG.info(\"Waiting for server 2 to come up\");\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT),\n                \"waiting for server 2 being up\");\n\n        LOG.info(\"Server 2 started, waiting for latch\");\n\n        latch.await();\n        \r\n        \r\n        assertTrue((KeeperState.SyncConnected == lastEvent.getState() || KeeperState.Expired == lastEvent.getState()),\n                \"Client didn't reconnect to quorate ensemble (state was\" + lastEvent.getState() + \")\");\n\n        LOG.info(\"perform a revalidation test\");\n        int leaderProxyPort = PortAssignment.unique();\n        int obsProxyPort = PortAssignment.unique();\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        ZooKeeper client = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort), ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        client.create(\"/revalidtest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        assertNotNull(client.exists(\"/revalidtest\", null), \"Read-after write failed\");\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        assertEquals(new String(client.getData(\"/revalidtest\", null, null)), \"test\");\n        client.close();\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","date":"2020-08-04 21:01:52","endLine":173,"groupId":"1371","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testObserver","params":"(booleantestObserverMaster)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/2d/2bea7686d6bb115ac2d1a45fcb02160d6cf2ca.src","preCode":"    public void testObserver() throws Exception {\n        \r\n        latch = new CountDownLatch(2);\n        setUp(-1);\n        q3.start();\n        assertTrue(\n                \"waiting for server 3 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS, CONNECTION_TIMEOUT));\n\n        if (testObserverMaster) {\n            int masterPort = q3.getQuorumPeer().observer.getSocket().getPort();\n            LOG.info(\"port {} {}\", masterPort, OM_PORT);\n            assertEquals(\"observer failed to connect to observer master\", masterPort, OM_PORT);\n        }\n\n        zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT_OBS, ClientBase.CONNECTION_TIMEOUT, this);\n        zk.create(\"/obstest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        \r\n        assertEquals(new String(zk.getData(\"/obstest\", null, null)), \"test\");\n\n        \r\n        zk.sync(\"/\", null, null);\n        zk.setData(\"/obstest\", \"test2\".getBytes(), -1);\n        zk.getChildren(\"/\", false);\n\n        assertEquals(zk.getState(), States.CONNECTED);\n\n        LOG.info(\"Shutting down server 2\");\n        \r\n        q2.shutdown();\n\n        assertTrue(\n                \"Waiting for server 2 to shut down\",\n                ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT_QP2, ClientBase.CONNECTION_TIMEOUT));\n\n        LOG.info(\"Server 2 down\");\n\n        \r\n        latch.await();\n        assertNotSame(\"Client is still connected to non-quorate cluster\", KeeperState.SyncConnected, lastEvent.getState());\n\n        LOG.info(\"Latch returned\");\n\n        try {\n            assertNotEquals(\"Shouldn't get a response when cluster not quorate!\", \"test\", new String(zk.getData(\"/obstest\", null, null)));\n        } catch (ConnectionLossException c) {\n            LOG.info(\"Connection loss exception caught - ensemble not quorate (this is expected)\");\n        }\n\n        latch = new CountDownLatch(1);\n\n        LOG.info(\"Restarting server 2\");\n\n        \r\n        \r\n        q2.start();\n\n        LOG.info(\"Waiting for server 2 to come up\");\n        assertTrue(\n                \"waiting for server 2 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT));\n\n        LOG.info(\"Server 2 started, waiting for latch\");\n\n        latch.await();\n        \r\n        \r\n        assertTrue(\"Client didn't reconnect to quorate ensemble (state was\"\n                                  + lastEvent.getState()\n                                  + \")\", (KeeperState.SyncConnected == lastEvent.getState()\n                                                  || KeeperState.Expired == lastEvent.getState()));\n\n        LOG.info(\"perform a revalidation test\");\n        int leaderProxyPort = PortAssignment.unique();\n        int obsProxyPort = PortAssignment.unique();\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        ZooKeeper client = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort), ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        client.create(\"/revalidtest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        assertNotNull(\"Read-after write failed\", client.exists(\"/revalidtest\", null));\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        assertEquals(new String(client.getData(\"/revalidtest\", null, null)), \"test\");\n        client.close();\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ObserverMasterTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testRevalidation(boolean testObserverMaster) throws Exception {\n        setUp(-1, testObserverMaster);\n        q3.start();\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS, CONNECTION_TIMEOUT),\n                \"waiting for server 3 being up\");\n        final int leaderProxyPort = PortAssignment.unique();\n        final int obsProxyPort = PortAssignment.unique();\n\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        zk = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort), ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        zk.create(\"/revalidtest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        assertNotNull(zk.exists(\"/revalidtest\", null), \"Read-after write failed\");\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        assertEquals(new String(zk.getData(\"/revalidtest\", null, null)), \"test\");\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","date":"2020-08-04 21:01:52","endLine":206,"groupId":"1374","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRevalidation","params":"(booleantestObserverMaster)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/2d/2bea7686d6bb115ac2d1a45fcb02160d6cf2ca.src","preCode":"    public void testRevalidation() throws Exception {\n        setUp(-1);\n        q3.start();\n        assertTrue(\n                \"waiting for server 3 being up\",\n                ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS, CONNECTION_TIMEOUT));\n        final int leaderProxyPort = PortAssignment.unique();\n        final int obsProxyPort = PortAssignment.unique();\n\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        zk = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort), ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        zk.create(\"/revalidtest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        assertNotNull(\"Read-after write failed\", zk.exists(\"/revalidtest\", null));\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        assertEquals(new String(zk.getData(\"/revalidtest\", null, null)), \"test\");\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ObserverMasterTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2021-06-30 14:53:49","commitOrder":5,"curCode":"    public void testObserver(boolean testObserverMaster) throws Exception {\n        \r\n        latch = new CountDownLatch(2);\n        setUp(-1, testObserverMaster);\n        q3.start();\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS, CONNECTION_TIMEOUT),\n                \"waiting for server 3 being up\");\n\n        validateObserverSyncTimeMetrics();\n\n        if (testObserverMaster) {\n            int masterPort = q3.getQuorumPeer().observer.getSocket().getPort();\n            LOG.info(\"port {} {}\", masterPort, OM_PORT);\n            assertEquals(masterPort, OM_PORT, \"observer failed to connect to observer master\");\n        }\n\n        zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT_OBS, ClientBase.CONNECTION_TIMEOUT, this);\n        zk.create(\"/obstest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        \r\n        assertEquals(new String(zk.getData(\"/obstest\", null, null)), \"test\");\n\n        \r\n        zk.sync(\"/\", null, null);\n        zk.setData(\"/obstest\", \"test2\".getBytes(), -1);\n        zk.getChildren(\"/\", false);\n\n        assertEquals(zk.getState(), States.CONNECTED);\n\n        LOG.info(\"Shutting down server 2\");\n        \r\n        q2.shutdown();\n\n        assertTrue(ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT_QP2, ClientBase.CONNECTION_TIMEOUT),\n                \"Waiting for server 2 to shut down\");\n\n        LOG.info(\"Server 2 down\");\n\n        \r\n        latch.await();\n        assertNotSame(KeeperState.SyncConnected, lastEvent.getState(), \"Client is still connected to non-quorate cluster\");\n\n        LOG.info(\"Latch returned\");\n\n        try {\n            assertNotEquals(\"Shouldn't get a response when cluster not quorate!\", \"test\", new String(zk.getData(\"/obstest\", null, null)));\n        } catch (ConnectionLossException c) {\n            LOG.info(\"Connection loss exception caught - ensemble not quorate (this is expected)\");\n        }\n\n        latch = new CountDownLatch(1);\n\n        LOG.info(\"Restarting server 2\");\n\n        \r\n        \r\n        q2.start();\n\n        LOG.info(\"Waiting for server 2 to come up\");\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT),\n                \"waiting for server 2 being up\");\n\n        LOG.info(\"Server 2 started, waiting for latch\");\n\n        latch.await();\n        \r\n        \r\n        assertTrue((KeeperState.SyncConnected == lastEvent.getState() || KeeperState.Expired == lastEvent.getState()),\n                \"Client didn't reconnect to quorate ensemble (state was\" + lastEvent.getState() + \")\");\n\n        LOG.info(\"perform a revalidation test\");\n        int leaderProxyPort = PortAssignment.unique();\n        int obsProxyPort = PortAssignment.unique();\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        ZooKeeper client = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort), ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        client.create(\"/revalidtest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        assertNotNull(client.exists(\"/revalidtest\", null), \"Read-after write failed\");\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        assertEquals(new String(client.getData(\"/revalidtest\", null, null)), \"test\");\n        client.close();\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","date":"2021-06-30 14:53:49","endLine":176,"groupId":"10554","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testObserver","params":"(booleantestObserverMaster)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/4b/a33c7a854ba464fa7638154e20b3d18923e199.src","preCode":"    public void testObserver(boolean testObserverMaster) throws Exception {\n        \r\n        latch = new CountDownLatch(2);\n        setUp(-1, testObserverMaster);\n        q3.start();\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS, CONNECTION_TIMEOUT),\n                \"waiting for server 3 being up\");\n\n        if (testObserverMaster) {\n            int masterPort = q3.getQuorumPeer().observer.getSocket().getPort();\n            LOG.info(\"port {} {}\", masterPort, OM_PORT);\n            assertEquals(masterPort, OM_PORT, \"observer failed to connect to observer master\");\n        }\n\n        zk = new ZooKeeper(\"127.0.0.1:\" + CLIENT_PORT_OBS, ClientBase.CONNECTION_TIMEOUT, this);\n        zk.create(\"/obstest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        \r\n        assertEquals(new String(zk.getData(\"/obstest\", null, null)), \"test\");\n\n        \r\n        zk.sync(\"/\", null, null);\n        zk.setData(\"/obstest\", \"test2\".getBytes(), -1);\n        zk.getChildren(\"/\", false);\n\n        assertEquals(zk.getState(), States.CONNECTED);\n\n        LOG.info(\"Shutting down server 2\");\n        \r\n        q2.shutdown();\n\n        assertTrue(ClientBase.waitForServerDown(\"127.0.0.1:\" + CLIENT_PORT_QP2, ClientBase.CONNECTION_TIMEOUT),\n                \"Waiting for server 2 to shut down\");\n\n        LOG.info(\"Server 2 down\");\n\n        \r\n        latch.await();\n        assertNotSame(KeeperState.SyncConnected, lastEvent.getState(), \"Client is still connected to non-quorate cluster\");\n\n        LOG.info(\"Latch returned\");\n\n        try {\n            assertNotEquals(\"Shouldn't get a response when cluster not quorate!\", \"test\", new String(zk.getData(\"/obstest\", null, null)));\n        } catch (ConnectionLossException c) {\n            LOG.info(\"Connection loss exception caught - ensemble not quorate (this is expected)\");\n        }\n\n        latch = new CountDownLatch(1);\n\n        LOG.info(\"Restarting server 2\");\n\n        \r\n        \r\n        q2.start();\n\n        LOG.info(\"Waiting for server 2 to come up\");\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT),\n                \"waiting for server 2 being up\");\n\n        LOG.info(\"Server 2 started, waiting for latch\");\n\n        latch.await();\n        \r\n        \r\n        assertTrue((KeeperState.SyncConnected == lastEvent.getState() || KeeperState.Expired == lastEvent.getState()),\n                \"Client didn't reconnect to quorate ensemble (state was\" + lastEvent.getState() + \")\");\n\n        LOG.info(\"perform a revalidation test\");\n        int leaderProxyPort = PortAssignment.unique();\n        int obsProxyPort = PortAssignment.unique();\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        ZooKeeper client = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort), ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        client.create(\"/revalidtest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        assertNotNull(client.exists(\"/revalidtest\", null), \"Read-after write failed\");\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        assertEquals(new String(client.getData(\"/revalidtest\", null, null)), \"test\");\n        client.close();\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ObserverMasterTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":5,"curCode":"    public void testRevalidation(boolean testObserverMaster) throws Exception {\n        setUp(-1, testObserverMaster);\n        q3.start();\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS, CONNECTION_TIMEOUT),\n                \"waiting for server 3 being up\");\n        final int leaderProxyPort = PortAssignment.unique();\n        final int obsProxyPort = PortAssignment.unique();\n\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        zk = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort), ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        zk.create(\"/revalidtest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        assertNotNull(zk.exists(\"/revalidtest\", null), \"Read-after write failed\");\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        assertEquals(new String(zk.getData(\"/revalidtest\", null, null)), \"test\");\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","date":"2020-08-04 21:01:52","endLine":206,"groupId":"10554","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRevalidation","params":"(booleantestObserverMaster)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/2d/2bea7686d6bb115ac2d1a45fcb02160d6cf2ca.src","preCode":"    public void testRevalidation(boolean testObserverMaster) throws Exception {\n        setUp(-1, testObserverMaster);\n        q3.start();\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_OBS, CONNECTION_TIMEOUT),\n                \"waiting for server 3 being up\");\n        final int leaderProxyPort = PortAssignment.unique();\n        final int obsProxyPort = PortAssignment.unique();\n\n        int leaderPort = q1.getQuorumPeer().leader == null ? CLIENT_PORT_QP2 : CLIENT_PORT_QP1;\n        PortForwarder leaderPF = new PortForwarder(leaderProxyPort, leaderPort);\n\n        latch = new CountDownLatch(1);\n        zk = new ZooKeeper(String.format(\"127.0.0.1:%d,127.0.0.1:%d\", leaderProxyPort, obsProxyPort), ClientBase.CONNECTION_TIMEOUT, this);\n        latch.await();\n        zk.create(\"/revalidtest\", \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        assertNotNull(zk.exists(\"/revalidtest\", null), \"Read-after write failed\");\n\n        latch = new CountDownLatch(2);\n        PortForwarder obsPF = new PortForwarder(obsProxyPort, CLIENT_PORT_OBS);\n        try {\n            leaderPF.shutdown();\n        } catch (Exception e) {\n            \r\n        }\n        latch.await();\n        assertEquals(new String(zk.getData(\"/revalidtest\", null, null)), \"test\");\n        obsPF.shutdown();\n\n        shutdown();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ObserverMasterTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"N"}],"commitId":"2d3065606a444c0b711c1809ce296db2ba56cb0c","commitMessage":"@@@ZOOKEEPER-4284: Add metrics for observer sync time\n\nMotivation\n\n- With enabling the feature of followers hosting observers.  we would need a metric to measure the observer sync time just like what we have for the follower sync time.\n\nChanges\n\n- Added the \"observer_sync_time\" metrics\n- Added unit test on the metrics\n\nAuthor: liwang <liwang@apple.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Michael Han <hanm@apache.org>.  Damien Diederen <ddiederen@apache.org>\n\nCloses #1691 from li4wang/ZOOKEEPER-4284\n","date":"2021-06-30 14:53:49","modifiedFileCount":"3","status":"M","submitter":"liwang"}]
