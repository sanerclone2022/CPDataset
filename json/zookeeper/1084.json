[{"authorTime":"2020-01-30 16:43:09","codes":[{"authorDate":"2019-12-04 02:12:30","commitOrder":4,"curCode":"    private void testSerializeDeserialize(StreamMode mode, String fileSuffix, boolean fsync) throws IOException {\n        SnapStream.setStreamMode(mode);\n\n        \r\n        File tmpDir = createTmpDir();\n        File file = new File(tmpDir, \"snapshot.180000e3a2\" + fileSuffix);\n        CheckedOutputStream os = SnapStream.getOutputStream(file, fsync);\n        OutputArchive oa = BinaryOutputArchive.getArchive(os);\n        FileHeader header = new FileHeader(FileSnap.SNAP_MAGIC, 2, 1);\n        header.serialize(oa, \"fileheader\");\n        SnapStream.sealStream(os, oa);\n        os.flush();\n        os.close();\n\n        assertTrue(SnapStream.isValidSnapshot(file));\n\n        \r\n        CheckedInputStream is = SnapStream.getInputStream(file);\n        InputArchive ia = BinaryInputArchive.getArchive(is);\n        FileHeader restoredHeader = new FileHeader();\n        restoredHeader.deserialize(ia, \"fileheader\");\n        assertEquals(\"magic not the same\", restoredHeader, header);\n        SnapStream.checkSealIntegrity(is, ia);\n    }\n","date":"2019-12-04 02:12:30","endLine":109,"groupId":"2519","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerializeDeserialize","params":"(StreamModemode@StringfileSuffix@booleanfsync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/65/457803679bc80243de1a046e3ff4c6f5af30ca.src","preCode":"    private void testSerializeDeserialize(StreamMode mode, String fileSuffix, boolean fsync) throws IOException {\n        SnapStream.setStreamMode(mode);\n\n        \r\n        File tmpDir = createTmpDir();\n        File file = new File(tmpDir, \"snapshot.180000e3a2\" + fileSuffix);\n        CheckedOutputStream os = SnapStream.getOutputStream(file, fsync);\n        OutputArchive oa = BinaryOutputArchive.getArchive(os);\n        FileHeader header = new FileHeader(FileSnap.SNAP_MAGIC, 2, 1);\n        header.serialize(oa, \"fileheader\");\n        SnapStream.sealStream(os, oa);\n        os.flush();\n        os.close();\n\n        assertTrue(SnapStream.isValidSnapshot(file));\n\n        \r\n        CheckedInputStream is = SnapStream.getInputStream(file);\n        InputArchive ia = BinaryInputArchive.getArchive(is);\n        FileHeader restoredHeader = new FileHeader();\n        restoredHeader.deserialize(ia, \"fileheader\");\n        assertEquals(\"magic not the same\", restoredHeader, header);\n        SnapStream.checkSealIntegrity(is, ia);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"NB"},{"authorDate":"2020-01-30 16:43:09","commitOrder":4,"curCode":"    private void makeValidSnapshot(File snapFile) throws IOException {\n        SnapStream.setStreamMode(SnapStream.StreamMode.CHECKED);\n        CheckedOutputStream os = SnapStream.getOutputStream(snapFile);\n        OutputArchive oa = BinaryOutputArchive.getArchive(os);\n        FileHeader header = new FileHeader(FileSnap.SNAP_MAGIC, 2, 1);\n        header.serialize(oa, \"fileheader\");\n        SnapStream.sealStream(os, oa);\n        os.flush();\n        os.close();\n\n        assertTrue(SnapStream.isValidSnapshot(snapFile));\n    }\n","date":"2020-01-30 16:43:09","endLine":609,"groupId":"2519","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"makeValidSnapshot","params":"(FilesnapFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/29/c1027949e6031e450b9681c5d40e9f428217cc.src","preCode":"    private void makeValidSnapshot(File snapFile) throws IOException {\n        SnapStream.setStreamMode(SnapStream.StreamMode.CHECKED);\n        CheckedOutputStream os = SnapStream.getOutputStream(snapFile);\n        OutputArchive oa = BinaryOutputArchive.getArchive(os);\n        FileHeader header = new FileHeader(FileSnap.SNAP_MAGIC, 2, 1);\n        header.serialize(oa, \"fileheader\");\n        SnapStream.sealStream(os, oa);\n        os.flush();\n        os.close();\n\n        assertTrue(SnapStream.isValidSnapshot(snapFile));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/PurgeTxnTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":598,"status":"B"}],"commitId":"2abdfbc261d4ba2f9d17b51f2b46ab748a7d451f","commitMessage":"@@@ZOOKEEPER-3231: Purge task may lost data when the recent snapshots are all invalid\n\n- Purge task uses `FileTxnSnapLog#findNRecentSnapshot`.  which's likely to lost data when the recent 3 snapshots are all invalid(a new valid snapshot has not generated yet) and at the same time.  Purge task(`e.g ./zkCleanup.sh -n 3`) has started a new round work to clean up the preceding snapshots. we will lose all the data.that's a small probability events.  but it's reproducible.\n- Overall.  using `snaplog.findNValidSnapshots` to make sure the purge task tries to retain N valid snapshots(rather than N snapshots) to avoid a risk of data loss.\n- For the unit test.  it's not easy to use the `mock` way for the following reasons:\n   - when we want to test the `dataDir` which some Snapshots are valid.  others not.Just writing a little data contents to the snapshot to make it valid/invalid has a better flexibility.\n   - too much code changes in the `PurgeTxnTest.java`(pass the original UT) and `FileTxnSnapLog.java`(have some handles)\n- more details in the [ZOOKEEPER-3231](https://issues.apache.org/jira/browse/ZOOKEEPER-3231)\n\nAuthor: maoling <maoling199210191@sina.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1079 from maoling/ZOOKEEPER-3231 and squashes the following commits:\n\n674175bef [maoling] setUp() & tearDown().\n472dfd33c [maoling] ZOOKEEPER-3231:Purge task may lost data when the recent snapshots are all invalid\n","date":"2020-01-30 16:43:09","modifiedFileCount":"4","status":"M","submitter":"maoling"},{"authorTime":"2020-01-31 19:01:23","codes":[{"authorDate":"2019-12-04 02:12:30","commitOrder":5,"curCode":"    private void testSerializeDeserialize(StreamMode mode, String fileSuffix, boolean fsync) throws IOException {\n        SnapStream.setStreamMode(mode);\n\n        \r\n        File tmpDir = createTmpDir();\n        File file = new File(tmpDir, \"snapshot.180000e3a2\" + fileSuffix);\n        CheckedOutputStream os = SnapStream.getOutputStream(file, fsync);\n        OutputArchive oa = BinaryOutputArchive.getArchive(os);\n        FileHeader header = new FileHeader(FileSnap.SNAP_MAGIC, 2, 1);\n        header.serialize(oa, \"fileheader\");\n        SnapStream.sealStream(os, oa);\n        os.flush();\n        os.close();\n\n        assertTrue(SnapStream.isValidSnapshot(file));\n\n        \r\n        CheckedInputStream is = SnapStream.getInputStream(file);\n        InputArchive ia = BinaryInputArchive.getArchive(is);\n        FileHeader restoredHeader = new FileHeader();\n        restoredHeader.deserialize(ia, \"fileheader\");\n        assertEquals(\"magic not the same\", restoredHeader, header);\n        SnapStream.checkSealIntegrity(is, ia);\n    }\n","date":"2019-12-04 02:12:30","endLine":109,"groupId":"2519","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerializeDeserialize","params":"(StreamModemode@StringfileSuffix@booleanfsync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/65/457803679bc80243de1a046e3ff4c6f5af30ca.src","preCode":"    private void testSerializeDeserialize(StreamMode mode, String fileSuffix, boolean fsync) throws IOException {\n        SnapStream.setStreamMode(mode);\n\n        \r\n        File tmpDir = createTmpDir();\n        File file = new File(tmpDir, \"snapshot.180000e3a2\" + fileSuffix);\n        CheckedOutputStream os = SnapStream.getOutputStream(file, fsync);\n        OutputArchive oa = BinaryOutputArchive.getArchive(os);\n        FileHeader header = new FileHeader(FileSnap.SNAP_MAGIC, 2, 1);\n        header.serialize(oa, \"fileheader\");\n        SnapStream.sealStream(os, oa);\n        os.flush();\n        os.close();\n\n        assertTrue(SnapStream.isValidSnapshot(file));\n\n        \r\n        CheckedInputStream is = SnapStream.getInputStream(file);\n        InputArchive ia = BinaryInputArchive.getArchive(is);\n        FileHeader restoredHeader = new FileHeader();\n        restoredHeader.deserialize(ia, \"fileheader\");\n        assertEquals(\"magic not the same\", restoredHeader, header);\n        SnapStream.checkSealIntegrity(is, ia);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"N"},{"authorDate":"2020-01-31 19:01:23","commitOrder":5,"curCode":"    private void makeValidSnapshot(File snapFile) throws IOException {\n        SnapStream.setStreamMode(SnapStream.StreamMode.CHECKED);\n        CheckedOutputStream os = SnapStream.getOutputStream(snapFile, true);\n        OutputArchive oa = BinaryOutputArchive.getArchive(os);\n        FileHeader header = new FileHeader(FileSnap.SNAP_MAGIC, 2, 1);\n        header.serialize(oa, \"fileheader\");\n        SnapStream.sealStream(os, oa);\n        os.flush();\n        os.close();\n\n        assertTrue(SnapStream.isValidSnapshot(snapFile));\n    }\n","date":"2020-01-31 19:01:23","endLine":609,"groupId":"2519","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"makeValidSnapshot","params":"(FilesnapFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/84/d907649cf54dde59f0b91bb60fa761ea3783e4.src","preCode":"    private void makeValidSnapshot(File snapFile) throws IOException {\n        SnapStream.setStreamMode(SnapStream.StreamMode.CHECKED);\n        CheckedOutputStream os = SnapStream.getOutputStream(snapFile);\n        OutputArchive oa = BinaryOutputArchive.getArchive(os);\n        FileHeader header = new FileHeader(FileSnap.SNAP_MAGIC, 2, 1);\n        header.serialize(oa, \"fileheader\");\n        SnapStream.sealStream(os, oa);\n        os.flush();\n        os.close();\n\n        assertTrue(SnapStream.isValidSnapshot(snapFile));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/PurgeTxnTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":598,"status":"M"}],"commitId":"111437694b67398bd83a5459b451ff78440579df","commitMessage":"@@@ZOOKEEPER-3710: [trivial bug] fix compile error in PurgeTxnTest introduced by ZOOKEEPER-3231\n\n- Link to [PR-1079](https://github.com/apache/zookeeper/pull/1079#issuecomment-580275886)\n- more details in the [ZOOKEEPER-3710](https://issues.apache.org/jira/browse/ZOOKEEPER-3710)\n\nAuthor: maoling <maoling199210191@sina.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1239 from maoling/ZOOKEEPER-3710\n","date":"2020-01-31 19:01:23","modifiedFileCount":"1","status":"M","submitter":"maoling"},{"authorTime":"2020-01-31 19:01:23","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":6,"curCode":"    private void testSerializeDeserialize(StreamMode mode, String fileSuffix, boolean fsync) throws IOException {\n        SnapStream.setStreamMode(mode);\n\n        \r\n        File tmpDir = createTmpDir();\n        File file = new File(tmpDir, \"snapshot.180000e3a2\" + fileSuffix);\n        CheckedOutputStream os = SnapStream.getOutputStream(file, fsync);\n        OutputArchive oa = BinaryOutputArchive.getArchive(os);\n        FileHeader header = new FileHeader(FileSnap.SNAP_MAGIC, 2, 1);\n        header.serialize(oa, \"fileheader\");\n        SnapStream.sealStream(os, oa);\n        os.flush();\n        os.close();\n\n        assertTrue(SnapStream.isValidSnapshot(file));\n\n        \r\n        CheckedInputStream is = SnapStream.getInputStream(file);\n        InputArchive ia = BinaryInputArchive.getArchive(is);\n        FileHeader restoredHeader = new FileHeader();\n        restoredHeader.deserialize(ia, \"fileheader\");\n        assertEquals(restoredHeader, header, \"magic not the same\");\n        SnapStream.checkSealIntegrity(is, ia);\n    }\n","date":"2020-08-04 21:01:52","endLine":109,"groupId":"1084","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testSerializeDeserialize","params":"(StreamModemode@StringfileSuffix@booleanfsync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/92/92c38b3b49ccdc665ab5f1b22fa4e3534bb0d3.src","preCode":"    private void testSerializeDeserialize(StreamMode mode, String fileSuffix, boolean fsync) throws IOException {\n        SnapStream.setStreamMode(mode);\n\n        \r\n        File tmpDir = createTmpDir();\n        File file = new File(tmpDir, \"snapshot.180000e3a2\" + fileSuffix);\n        CheckedOutputStream os = SnapStream.getOutputStream(file, fsync);\n        OutputArchive oa = BinaryOutputArchive.getArchive(os);\n        FileHeader header = new FileHeader(FileSnap.SNAP_MAGIC, 2, 1);\n        header.serialize(oa, \"fileheader\");\n        SnapStream.sealStream(os, oa);\n        os.flush();\n        os.close();\n\n        assertTrue(SnapStream.isValidSnapshot(file));\n\n        \r\n        CheckedInputStream is = SnapStream.getInputStream(file);\n        InputArchive ia = BinaryInputArchive.getArchive(is);\n        FileHeader restoredHeader = new FileHeader();\n        restoredHeader.deserialize(ia, \"fileheader\");\n        assertEquals(\"magic not the same\", restoredHeader, header);\n        SnapStream.checkSealIntegrity(is, ia);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2020-01-31 19:01:23","commitOrder":6,"curCode":"    private void makeValidSnapshot(File snapFile) throws IOException {\n        SnapStream.setStreamMode(SnapStream.StreamMode.CHECKED);\n        CheckedOutputStream os = SnapStream.getOutputStream(snapFile, true);\n        OutputArchive oa = BinaryOutputArchive.getArchive(os);\n        FileHeader header = new FileHeader(FileSnap.SNAP_MAGIC, 2, 1);\n        header.serialize(oa, \"fileheader\");\n        SnapStream.sealStream(os, oa);\n        os.flush();\n        os.close();\n\n        assertTrue(SnapStream.isValidSnapshot(snapFile));\n    }\n","date":"2020-01-31 19:01:23","endLine":609,"groupId":"1084","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"makeValidSnapshot","params":"(FilesnapFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/84/d907649cf54dde59f0b91bb60fa761ea3783e4.src","preCode":"    private void makeValidSnapshot(File snapFile) throws IOException {\n        SnapStream.setStreamMode(SnapStream.StreamMode.CHECKED);\n        CheckedOutputStream os = SnapStream.getOutputStream(snapFile, true);\n        OutputArchive oa = BinaryOutputArchive.getArchive(os);\n        FileHeader header = new FileHeader(FileSnap.SNAP_MAGIC, 2, 1);\n        header.serialize(oa, \"fileheader\");\n        SnapStream.sealStream(os, oa);\n        os.flush();\n        os.close();\n\n        assertTrue(SnapStream.isValidSnapshot(snapFile));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/PurgeTxnTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":598,"status":"N"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
