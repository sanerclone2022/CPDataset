[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testMinMaxSessionTimeOut() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT_QP1 = PortAssignment.unique();\n        final int CLIENT_PORT_QP2 = PortAssignment.unique();\n\n        String quorumCfgSection = \"server.1=127.0.0.1:\"\n                + PortAssignment.unique() + \":\" + PortAssignment.unique()\n                + \"\\nserver.2=127.0.0.1:\" + PortAssignment.unique() + \":\"\n                + PortAssignment.unique();\n\n        final int minSessionTimeOut = 10000;\n        final int maxSessionTimeOut = 15000;\n        final String configs = \"maxSessionTimeout=\" + maxSessionTimeOut + \"\\n\"\n                + \"minSessionTimeout=\" + minSessionTimeOut + \"\\n\";\n\n        MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection,\n                configs);\n        MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgSection,\n                configs);\n        q1.start();\n        q2.start();\n\n        Assert.assertTrue(\"waiting for server 1 being up\", ClientBase\n                .waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP1,\n                        CONNECTION_TIMEOUT));\n        Assert.assertTrue(\"waiting for server 2 being up\", ClientBase\n                .waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2,\n                        CONNECTION_TIMEOUT));\n\n        QuorumPeer quorumPeer = q1.main.quorumPeer;\n\n        Assert.assertEquals(\"minimumSessionTimeOut is not considered\",\n                minSessionTimeOut, quorumPeer.getMinSessionTimeout());\n        Assert.assertEquals(\"maximumSessionTimeOut is not considered\",\n                maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n    }\n","date":"2018-10-05 20:25:43","endLine":908,"groupId":"773","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMinMaxSessionTimeOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0f/abaf7785d6e795c5acbfa325007494a15a3dc9.src","preCode":"    public void testMinMaxSessionTimeOut() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT_QP1 = PortAssignment.unique();\n        final int CLIENT_PORT_QP2 = PortAssignment.unique();\n\n        String quorumCfgSection = \"server.1=127.0.0.1:\"\n                + PortAssignment.unique() + \":\" + PortAssignment.unique()\n                + \"\\nserver.2=127.0.0.1:\" + PortAssignment.unique() + \":\"\n                + PortAssignment.unique();\n\n        final int minSessionTimeOut = 10000;\n        final int maxSessionTimeOut = 15000;\n        final String configs = \"maxSessionTimeout=\" + maxSessionTimeOut + \"\\n\"\n                + \"minSessionTimeout=\" + minSessionTimeOut + \"\\n\";\n\n        MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection,\n                configs);\n        MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgSection,\n                configs);\n        q1.start();\n        q2.start();\n\n        Assert.assertTrue(\"waiting for server 1 being up\", ClientBase\n                .waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP1,\n                        CONNECTION_TIMEOUT));\n        Assert.assertTrue(\"waiting for server 2 being up\", ClientBase\n                .waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2,\n                        CONNECTION_TIMEOUT));\n\n        QuorumPeer quorumPeer = q1.main.quorumPeer;\n\n        Assert.assertEquals(\"minimumSessionTimeOut is not considered\",\n                minSessionTimeOut, quorumPeer.getMinSessionTimeout());\n        Assert.assertEquals(\"maximumSessionTimeOut is not considered\",\n                maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":872,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testWithOnlyMinSessionTimeout() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT_QP1 = PortAssignment.unique();\n        final int CLIENT_PORT_QP2 = PortAssignment.unique();\n\n        String quorumCfgSection = \"server.1=127.0.0.1:\"\n                + PortAssignment.unique() + \":\" + PortAssignment.unique()\n                + \"\\nserver.2=127.0.0.1:\" + PortAssignment.unique() + \":\"\n                + PortAssignment.unique();\n\n        final int minSessionTimeOut = 15000;\n        final String configs = \"minSessionTimeout=\" + minSessionTimeOut + \"\\n\";\n\n        MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection,\n                configs);\n        MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgSection,\n                configs);\n        q1.start();\n        q2.start();\n\n        Assert.assertTrue(\"waiting for server 1 being up\", ClientBase\n                .waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP1,\n                        CONNECTION_TIMEOUT));\n        Assert.assertTrue(\"waiting for server 2 being up\", ClientBase\n                .waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2,\n                        CONNECTION_TIMEOUT));\n\n        QuorumPeer quorumPeer = q1.main.quorumPeer;\n        final int maxSessionTimeOut = quorumPeer.tickTime * 20;\n\n        Assert.assertEquals(\"minimumSessionTimeOut is not considered\",\n                minSessionTimeOut, quorumPeer.getMinSessionTimeout());\n        Assert.assertEquals(\"maximumSessionTimeOut is wrong\",\n                maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n    }\n","date":"2018-10-05 20:25:43","endLine":950,"groupId":"774","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithOnlyMinSessionTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0f/abaf7785d6e795c5acbfa325007494a15a3dc9.src","preCode":"    public void testWithOnlyMinSessionTimeout() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT_QP1 = PortAssignment.unique();\n        final int CLIENT_PORT_QP2 = PortAssignment.unique();\n\n        String quorumCfgSection = \"server.1=127.0.0.1:\"\n                + PortAssignment.unique() + \":\" + PortAssignment.unique()\n                + \"\\nserver.2=127.0.0.1:\" + PortAssignment.unique() + \":\"\n                + PortAssignment.unique();\n\n        final int minSessionTimeOut = 15000;\n        final String configs = \"minSessionTimeout=\" + minSessionTimeOut + \"\\n\";\n\n        MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection,\n                configs);\n        MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgSection,\n                configs);\n        q1.start();\n        q2.start();\n\n        Assert.assertTrue(\"waiting for server 1 being up\", ClientBase\n                .waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP1,\n                        CONNECTION_TIMEOUT));\n        Assert.assertTrue(\"waiting for server 2 being up\", ClientBase\n                .waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2,\n                        CONNECTION_TIMEOUT));\n\n        QuorumPeer quorumPeer = q1.main.quorumPeer;\n        final int maxSessionTimeOut = quorumPeer.tickTime * 20;\n\n        Assert.assertEquals(\"minimumSessionTimeOut is not considered\",\n                minSessionTimeOut, quorumPeer.getMinSessionTimeout());\n        Assert.assertEquals(\"maximumSessionTimeOut is wrong\",\n                maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":915,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testMinMaxSessionTimeOut() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT_QP1 = PortAssignment.unique();\n        final int CLIENT_PORT_QP2 = PortAssignment.unique();\n\n        String quorumCfgSection = \"server.1=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique()\n                                  + \"\\nserver.2=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique();\n\n        final int minSessionTimeOut = 10000;\n        final int maxSessionTimeOut = 15000;\n        final String configs = \"maxSessionTimeout=\" + maxSessionTimeOut + \"\\n\"\n                               + \"minSessionTimeout=\" + minSessionTimeOut + \"\\n\";\n\n        MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection, configs);\n        MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgSection, configs);\n        q1.start();\n        q2.start();\n\n        assertTrue(\n            \"waiting for server 1 being up\",\n            ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP1, CONNECTION_TIMEOUT));\n        assertTrue(\n            \"waiting for server 2 being up\",\n            ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT));\n\n        QuorumPeer quorumPeer = q1.main.quorumPeer;\n\n        assertEquals(\"minimumSessionTimeOut is not considered\", minSessionTimeOut, quorumPeer.getMinSessionTimeout());\n        assertEquals(\"maximumSessionTimeOut is not considered\", maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n    }\n","date":"2019-08-17 23:13:15","endLine":731,"groupId":"773","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMinMaxSessionTimeOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a5/cf9b8a97c0dc856188d5641ba86f413233582f.src","preCode":"    public void testMinMaxSessionTimeOut() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT_QP1 = PortAssignment.unique();\n        final int CLIENT_PORT_QP2 = PortAssignment.unique();\n\n        String quorumCfgSection = \"server.1=127.0.0.1:\"\n                + PortAssignment.unique() + \":\" + PortAssignment.unique()\n                + \"\\nserver.2=127.0.0.1:\" + PortAssignment.unique() + \":\"\n                + PortAssignment.unique();\n\n        final int minSessionTimeOut = 10000;\n        final int maxSessionTimeOut = 15000;\n        final String configs = \"maxSessionTimeout=\" + maxSessionTimeOut + \"\\n\"\n                + \"minSessionTimeout=\" + minSessionTimeOut + \"\\n\";\n\n        MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection,\n                configs);\n        MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgSection,\n                configs);\n        q1.start();\n        q2.start();\n\n        Assert.assertTrue(\"waiting for server 1 being up\", ClientBase\n                .waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP1,\n                        CONNECTION_TIMEOUT));\n        Assert.assertTrue(\"waiting for server 2 being up\", ClientBase\n                .waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2,\n                        CONNECTION_TIMEOUT));\n\n        QuorumPeer quorumPeer = q1.main.quorumPeer;\n\n        Assert.assertEquals(\"minimumSessionTimeOut is not considered\",\n                minSessionTimeOut, quorumPeer.getMinSessionTimeout());\n        Assert.assertEquals(\"maximumSessionTimeOut is not considered\",\n                maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":701,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testWithOnlyMinSessionTimeout() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT_QP1 = PortAssignment.unique();\n        final int CLIENT_PORT_QP2 = PortAssignment.unique();\n\n        String quorumCfgSection = \"server.1=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique()\n                                  + \"\\nserver.2=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique();\n\n        final int minSessionTimeOut = 15000;\n        final String configs = \"minSessionTimeout=\" + minSessionTimeOut + \"\\n\";\n\n        MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection, configs);\n        MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgSection, configs);\n        q1.start();\n        q2.start();\n\n        assertTrue(\n            \"waiting for server 1 being up\",\n            ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP1, CONNECTION_TIMEOUT));\n        assertTrue(\n            \"waiting for server 2 being up\",\n            ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT));\n\n        QuorumPeer quorumPeer = q1.main.quorumPeer;\n        final int maxSessionTimeOut = quorumPeer.tickTime * 20;\n\n        assertEquals(\"minimumSessionTimeOut is not considered\", minSessionTimeOut, quorumPeer.getMinSessionTimeout());\n        assertEquals(\"maximumSessionTimeOut is wrong\", maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n    }\n","date":"2019-08-17 23:13:15","endLine":767,"groupId":"4637","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithOnlyMinSessionTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a5/cf9b8a97c0dc856188d5641ba86f413233582f.src","preCode":"    public void testWithOnlyMinSessionTimeout() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT_QP1 = PortAssignment.unique();\n        final int CLIENT_PORT_QP2 = PortAssignment.unique();\n\n        String quorumCfgSection = \"server.1=127.0.0.1:\"\n                + PortAssignment.unique() + \":\" + PortAssignment.unique()\n                + \"\\nserver.2=127.0.0.1:\" + PortAssignment.unique() + \":\"\n                + PortAssignment.unique();\n\n        final int minSessionTimeOut = 15000;\n        final String configs = \"minSessionTimeout=\" + minSessionTimeOut + \"\\n\";\n\n        MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection,\n                configs);\n        MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgSection,\n                configs);\n        q1.start();\n        q2.start();\n\n        Assert.assertTrue(\"waiting for server 1 being up\", ClientBase\n                .waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP1,\n                        CONNECTION_TIMEOUT));\n        Assert.assertTrue(\"waiting for server 2 being up\", ClientBase\n                .waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2,\n                        CONNECTION_TIMEOUT));\n\n        QuorumPeer quorumPeer = q1.main.quorumPeer;\n        final int maxSessionTimeOut = quorumPeer.tickTime * 20;\n\n        Assert.assertEquals(\"minimumSessionTimeOut is not considered\",\n                minSessionTimeOut, quorumPeer.getMinSessionTimeout());\n        Assert.assertEquals(\"maximumSessionTimeOut is wrong\",\n                maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":738,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testMinMaxSessionTimeOut() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT_QP1 = PortAssignment.unique();\n        final int CLIENT_PORT_QP2 = PortAssignment.unique();\n\n        String quorumCfgSection = \"server.1=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique()\n                                  + \"\\nserver.2=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique();\n\n        final int minSessionTimeOut = 10000;\n        final int maxSessionTimeOut = 15000;\n        final String configs = \"maxSessionTimeout=\" + maxSessionTimeOut + \"\\n\"\n                               + \"minSessionTimeout=\" + minSessionTimeOut + \"\\n\";\n\n        MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection, configs);\n        MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgSection, configs);\n        q1.start();\n        q2.start();\n\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP1, CONNECTION_TIMEOUT),\n                \"waiting for server 1 being up\");\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT),\n                \"waiting for server 2 being up\");\n\n        QuorumPeer quorumPeer = q1.main.quorumPeer;\n\n        assertEquals(minSessionTimeOut, quorumPeer.getMinSessionTimeout(), \"minimumSessionTimeOut is not considered\");\n        assertEquals(maxSessionTimeOut, quorumPeer.getMaxSessionTimeout(), \"maximumSessionTimeOut is not considered\");\n    }\n","date":"2020-08-04 21:01:52","endLine":703,"groupId":"10145","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMinMaxSessionTimeOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/79/3a305801148494ef0e66e09bd55092d1494738.src","preCode":"    public void testMinMaxSessionTimeOut() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT_QP1 = PortAssignment.unique();\n        final int CLIENT_PORT_QP2 = PortAssignment.unique();\n\n        String quorumCfgSection = \"server.1=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique()\n                                  + \"\\nserver.2=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique();\n\n        final int minSessionTimeOut = 10000;\n        final int maxSessionTimeOut = 15000;\n        final String configs = \"maxSessionTimeout=\" + maxSessionTimeOut + \"\\n\"\n                               + \"minSessionTimeout=\" + minSessionTimeOut + \"\\n\";\n\n        MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection, configs);\n        MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgSection, configs);\n        q1.start();\n        q2.start();\n\n        assertTrue(\n            \"waiting for server 1 being up\",\n            ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP1, CONNECTION_TIMEOUT));\n        assertTrue(\n            \"waiting for server 2 being up\",\n            ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT));\n\n        QuorumPeer quorumPeer = q1.main.quorumPeer;\n\n        assertEquals(\"minimumSessionTimeOut is not considered\", minSessionTimeOut, quorumPeer.getMinSessionTimeout());\n        assertEquals(\"maximumSessionTimeOut is not considered\", maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":675,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testWithOnlyMinSessionTimeout() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT_QP1 = PortAssignment.unique();\n        final int CLIENT_PORT_QP2 = PortAssignment.unique();\n\n        String quorumCfgSection = \"server.1=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique()\n                                  + \"\\nserver.2=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique();\n\n        final int minSessionTimeOut = 15000;\n        final String configs = \"minSessionTimeout=\" + minSessionTimeOut + \"\\n\";\n\n        MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection, configs);\n        MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgSection, configs);\n        q1.start();\n        q2.start();\n\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP1, CONNECTION_TIMEOUT),\n                \"waiting for server 1 being up\");\n        assertTrue(ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT),\n                \"waiting for server 2 being up\");\n\n        QuorumPeer quorumPeer = q1.main.quorumPeer;\n        final int maxSessionTimeOut = quorumPeer.tickTime * 20;\n\n        assertEquals(minSessionTimeOut, quorumPeer.getMinSessionTimeout(), \"minimumSessionTimeOut is not considered\");\n        assertEquals(maxSessionTimeOut, quorumPeer.getMaxSessionTimeout(), \"maximumSessionTimeOut is wrong\");\n    }\n","date":"2020-08-04 21:01:52","endLine":737,"groupId":"10145","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithOnlyMinSessionTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/79/3a305801148494ef0e66e09bd55092d1494738.src","preCode":"    public void testWithOnlyMinSessionTimeout() throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT_QP1 = PortAssignment.unique();\n        final int CLIENT_PORT_QP2 = PortAssignment.unique();\n\n        String quorumCfgSection = \"server.1=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique()\n                                  + \"\\nserver.2=127.0.0.1:\" + PortAssignment.unique() + \":\" + PortAssignment.unique();\n\n        final int minSessionTimeOut = 15000;\n        final String configs = \"minSessionTimeout=\" + minSessionTimeOut + \"\\n\";\n\n        MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection, configs);\n        MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgSection, configs);\n        q1.start();\n        q2.start();\n\n        assertTrue(\n            \"waiting for server 1 being up\",\n            ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP1, CONNECTION_TIMEOUT));\n        assertTrue(\n            \"waiting for server 2 being up\",\n            ClientBase.waitForServerUp(\"127.0.0.1:\" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT));\n\n        QuorumPeer quorumPeer = q1.main.quorumPeer;\n        final int maxSessionTimeOut = quorumPeer.tickTime * 20;\n\n        assertEquals(\"minimumSessionTimeOut is not considered\", minSessionTimeOut, quorumPeer.getMinSessionTimeout());\n        assertEquals(\"maximumSessionTimeOut is wrong\", maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":710,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
