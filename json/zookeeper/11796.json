[{"authorTime":"2019-11-09 00:30:25","codes":[{"authorDate":"2019-11-09 00:30:25","commitOrder":1,"curCode":"    public void addWatch(String basePath, Watcher watcher, AddWatchMode mode)\n            throws KeeperException, InterruptedException {\n        PathUtils.validatePath(basePath);\n        String serverPath = prependChroot(basePath);\n\n        RequestHeader h = new RequestHeader();\n        h.setType(ZooDefs.OpCode.addWatch);\n        AddWatchRequest request = new AddWatchRequest(serverPath, mode.getMode());\n        ReplyHeader r = cnxn.submitRequest(h, request, new ErrorResponse(),\n                new AddWatchRegistration(watcher, basePath, mode));\n        if (r.getErr() != 0) {\n            throw KeeperException.create(KeeperException.Code.get(r.getErr()),\n                    basePath);\n        }\n    }\n","date":"2019-11-09 00:30:25","endLine":3184,"groupId":"1134","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addWatch","params":"(StringbasePath@Watcherwatcher@AddWatchModemode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f6/f165deaf455a654311c75cce65b680d4971af8.src","preCode":"    public void addWatch(String basePath, Watcher watcher, AddWatchMode mode)\n            throws KeeperException, InterruptedException {\n        PathUtils.validatePath(basePath);\n        String serverPath = prependChroot(basePath);\n\n        RequestHeader h = new RequestHeader();\n        h.setType(ZooDefs.OpCode.addWatch);\n        AddWatchRequest request = new AddWatchRequest(serverPath, mode.getMode());\n        ReplyHeader r = cnxn.submitRequest(h, request, new ErrorResponse(),\n                new AddWatchRegistration(watcher, basePath, mode));\n        if (r.getErr() != 0) {\n            throw KeeperException.create(KeeperException.Code.get(r.getErr()),\n                    basePath);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":3170,"status":"B"},{"authorDate":"2019-11-09 00:30:25","commitOrder":1,"curCode":"    public void addWatch(String basePath, Watcher watcher, AddWatchMode mode,\n                         VoidCallback cb, Object ctx) {\n        PathUtils.validatePath(basePath);\n        String serverPath = prependChroot(basePath);\n\n        RequestHeader h = new RequestHeader();\n        h.setType(ZooDefs.OpCode.addWatch);\n        AddWatchRequest request = new AddWatchRequest(serverPath, mode.getMode());\n        cnxn.queuePacket(h, new ReplyHeader(), request, new ErrorResponse(), cb,\n                basePath, serverPath, ctx, new AddWatchRegistration(watcher, basePath, mode));\n    }\n","date":"2019-11-09 00:30:25","endLine":3225,"groupId":"1902","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addWatch","params":"(StringbasePath@Watcherwatcher@AddWatchModemode@VoidCallbackcb@Objectctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f6/f165deaf455a654311c75cce65b680d4971af8.src","preCode":"    public void addWatch(String basePath, Watcher watcher, AddWatchMode mode,\n                         VoidCallback cb, Object ctx) {\n        PathUtils.validatePath(basePath);\n        String serverPath = prependChroot(basePath);\n\n        RequestHeader h = new RequestHeader();\n        h.setType(ZooDefs.OpCode.addWatch);\n        AddWatchRequest request = new AddWatchRequest(serverPath, mode.getMode());\n        cnxn.queuePacket(h, new ReplyHeader(), request, new ErrorResponse(), cb,\n                basePath, serverPath, ctx, new AddWatchRegistration(watcher, basePath, mode));\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":3215,"status":"B"}],"commitId":"553639378d5cf86c2488afff4586e5e4cce38061","commitMessage":"@@@ZOOKEEPER-1416 - Persistent.  recursive watchers\n\n\n Background\n\nNote: this is a port of https://github.com/apache/zookeeper/pull/136\n\nImplementation for a persistent.  recursive watch addition for ZK. These watches are set via a new method.  addPersistentWatch() and are removed via the existing watcher removal methods. Persistent.  recursive watches have these characteristics: a) Once set.  they do not auto-remove when triggered; b) they trigger for all event types (child.  data.  etc.) on the node they are registered for and any child znode recursively; c) they are efficiently implemented by using the existing watch internals. A new class PathIterator walks up the path parent-by-parent when checking if a watcher applies.\n\n\n Implementation Details\n\n- A new enum manages the different \"modes\" for watchers: `WatcherMode`.\n- For traditional.  \"standard\" watchers.  the code path is almost exactly the same. There is very little overhead other than a bit of extra checks in `WatchManager`\n- Given how this is implemented it was difficult to add support when `WatchManagerOptimized` is used. I'm open to adding it for that version but it will take work. We should consider not supporting persistent/recursive watchers when WatchManagerOptimized is used. I notice that `WatchManagerOptimized` is not even mentioned in the docs.\n- The mode for a given watcher/path pair is held in a map inside of `WatcherModeManager`. The absence of an entry means Standard. This way.  there's no overhead for old.  standard watchers.\n- `PathParentIterator` is the \"meat\" of the implementation. Rather than set watchers on every ZNode implied by a recursive watcher. WatchManager passes any paths it processes through PathParentIterator which iterates up each parent znode looking for watchers.\n- The remainder of the changes are scaffolding to match how other watchers are used as well as Jute/API changes to set persistent/recursive watchers\n\n\n Testing\n\nThe tests were written years ago. I think they're comprehensive but reviewers should pay attention to anything that was missed. There is much ZooKeeper knowledge that's only in the heads of ZK committers.\n\n- `PersistentWatcherTest` - tests persistent.  non-recursive watchers\n- `PersistentRecursiveWatcherTest` - tests persistent.  recursive watchers\n- `PathParentIteratorTest`- exercises edges of PathParentIterator\n\nAuthor: randgalt <jordan@jordanzimmerman.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache. org>.  Norbert Kalmar <nkalmar@apache.org>.  Andor Moln?r <andor@apache.org>.  Justin Mao Ling <maoling199210191@sina.com>\n\nCloses #1106 from Randgalt/ZOOKEEPER-1416\n","date":"2019-11-09 00:30:25","modifiedFileCount":"14","status":"B","submitter":"randgalt"},{"authorTime":"2020-11-09 19:20:11","codes":[{"authorDate":"2020-11-09 19:20:11","commitOrder":2,"curCode":"    public void addWatch(String basePath, Watcher watcher, AddWatchMode mode)\n            throws KeeperException, InterruptedException {\n        PathUtils.validatePath(basePath);\n        validateWatcher(watcher);\n        String serverPath = prependChroot(basePath);\n\n        RequestHeader h = new RequestHeader();\n        h.setType(ZooDefs.OpCode.addWatch);\n        AddWatchRequest request = new AddWatchRequest(serverPath, mode.getMode());\n        ReplyHeader r = cnxn.submitRequest(h, request, new ErrorResponse(),\n                new AddWatchRegistration(watcher, basePath, mode));\n        if (r.getErr() != 0) {\n            throw KeeperException.create(KeeperException.Code.get(r.getErr()),\n                    basePath);\n        }\n    }\n","date":"2020-11-09 19:20:11","endLine":2821,"groupId":"11796","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addWatch","params":"(StringbasePath@Watcherwatcher@AddWatchModemode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/9f/ba7a5ebd4f3185f7bd329dfc732197bff8dffe.src","preCode":"    public void addWatch(String basePath, Watcher watcher, AddWatchMode mode)\n            throws KeeperException, InterruptedException {\n        PathUtils.validatePath(basePath);\n        String serverPath = prependChroot(basePath);\n\n        RequestHeader h = new RequestHeader();\n        h.setType(ZooDefs.OpCode.addWatch);\n        AddWatchRequest request = new AddWatchRequest(serverPath, mode.getMode());\n        ReplyHeader r = cnxn.submitRequest(h, request, new ErrorResponse(),\n                new AddWatchRegistration(watcher, basePath, mode));\n        if (r.getErr() != 0) {\n            throw KeeperException.create(KeeperException.Code.get(r.getErr()),\n                    basePath);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":2806,"status":"M"},{"authorDate":"2020-11-09 19:20:11","commitOrder":2,"curCode":"    public void addWatch(\n            String basePath,\n            Watcher watcher, AddWatchMode mode,\n            VoidCallback cb,\n            Object ctx\n    ) {\n        PathUtils.validatePath(basePath);\n        validateWatcher(watcher);\n        String serverPath = prependChroot(basePath);\n\n        RequestHeader h = new RequestHeader();\n        h.setType(ZooDefs.OpCode.addWatch);\n        AddWatchRequest request = new AddWatchRequest(serverPath, mode.getMode());\n        cnxn.queuePacket(h, new ReplyHeader(), request, new ErrorResponse(), cb,\n                basePath, serverPath, ctx, new AddWatchRegistration(watcher, basePath, mode));\n    }\n","date":"2020-11-09 19:20:11","endLine":2869,"groupId":"11796","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addWatch","params":"(StringbasePath@Watcherwatcher@AddWatchModemode@VoidCallbackcb@Objectctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/9f/ba7a5ebd4f3185f7bd329dfc732197bff8dffe.src","preCode":"    public void addWatch(\n            String basePath,\n            Watcher watcher, AddWatchMode mode,\n            VoidCallback cb,\n            Object ctx\n    ) {\n        PathUtils.validatePath(basePath);\n        String serverPath = prependChroot(basePath);\n\n        RequestHeader h = new RequestHeader();\n        h.setType(ZooDefs.OpCode.addWatch);\n        AddWatchRequest request = new AddWatchRequest(serverPath, mode.getMode());\n        cnxn.queuePacket(h, new ReplyHeader(), request, new ErrorResponse(), cb,\n                basePath, serverPath, ctx, new AddWatchRegistration(watcher, basePath, mode));\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":2854,"status":"M"}],"commitId":"c9a1b595f9afd07ce6359810a5ca8e4f4088c5a2","commitMessage":"@@@ZOOKEEPER-3992: addWatch api should check the null watch\n\n```\npublic void addWatch(String basePath.  Watcher watcher.  AddWatchMode mode)\n        throws KeeperException.  InterruptedException {\n    PathUtils.validatePath(basePath);\n    String serverPath = prependChroot(basePath);\n\n    RequestHeader h = new RequestHeader();\n    h.setType(ZooDefs.OpCode.addWatch);\n    AddWatchRequest request = new AddWatchRequest(serverPath.  mode.getMode());\n    ReplyHeader r = cnxn.submitRequest(h.  request.  new ErrorResponse(). \n```\nwe need to validateWatcher(watcher) to avoid the case:\n```\nzk.addWatch(\"/a/b\".  null.  PERSISTENT_RECURSIVE);\n```\n\nAuthor: Matteo Minardi <matteo.minardi@diennea.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Damien Diederen <ddiederen@apache.org>\n\nCloses #1529 from mino181295/fix/ZOOKEEPER-3992/addwatch-check-null\n","date":"2020-11-09 19:20:11","modifiedFileCount":"2","status":"M","submitter":"Matteo Minardi"}]
