[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testLeaderInConnectingFollowers() throws Exception {    \n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n            peer.setAcceptedEpoch(5);\n            \n            FollowerMockThread f1 = new FollowerMockThread(1, leader, true);\n            FollowerMockThread f2 = new FollowerMockThread(2, leader, true);\n            f1.start();\n            f2.start();\n            \n            \r\n            \r\n            \r\n            f1.join(leader.self.getInitLimit()*leader.self.getTickTime() + 5000);\n            f2.join(leader.self.getInitLimit()*leader.self.getTickTime() + 5000);\n                \n            \r\n            \r\n            \r\n            try {\n            \tlong epoch = leader.getEpochToPropose(leader.self.getId(), leader.self.getAcceptedEpoch());\n            \tAssert.assertEquals(\"leader got wrong epoch from getEpochToPropose\", 6, epoch);\t\n            } catch (Exception e){ \n            \tAssert.fail(\"leader timed out in getEpochToPropose\");\n            }\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","date":"2018-10-05 20:25:43","endLine":175,"groupId":"3946","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeaderInConnectingFollowers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/bd9d88222077beb805541ba9fd2c22644bce83.src","preCode":"    public void testLeaderInConnectingFollowers() throws Exception {    \n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n            peer.setAcceptedEpoch(5);\n            \n            FollowerMockThread f1 = new FollowerMockThread(1, leader, true);\n            FollowerMockThread f2 = new FollowerMockThread(2, leader, true);\n            f1.start();\n            f2.start();\n            \n            \r\n            \r\n            \r\n            f1.join(leader.self.getInitLimit()*leader.self.getTickTime() + 5000);\n            f2.join(leader.self.getInitLimit()*leader.self.getTickTime() + 5000);\n                \n            \r\n            \r\n            \r\n            try {\n            \tlong epoch = leader.getEpochToPropose(leader.self.getId(), leader.self.getAcceptedEpoch());\n            \tAssert.assertEquals(\"leader got wrong epoch from getEpochToPropose\", 6, epoch);\t\n            } catch (Exception e){ \n            \tAssert.fail(\"leader timed out in getEpochToPropose\");\n            }\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testLeaderInElectingFollowers() throws Exception {    \n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;            \n            \n            FollowerMockThread f1 = new FollowerMockThread(1, leader, false);\n            FollowerMockThread f2 = new FollowerMockThread(2, leader, false);\n\n            \r\n            leader.leaderStateSummary = new StateSummary(leader.self.getCurrentEpoch(), leader.zk.getLastProcessedZxid());\n            \n            f1.start();\n            f2.start();         \n            \n            \r\n            \r\n            f1.join(leader.self.getInitLimit()*leader.self.getTickTime() + 5000);\n            f2.join(leader.self.getInitLimit()*leader.self.getTickTime() + 5000);\n                        \n            \r\n            Assert.assertTrue(f1.msg + \" without waiting for leader\", f1.msg == null);            \n            Assert.assertTrue(f2.msg + \" without waiting for leader\", f2.msg == null);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","date":"2018-10-05 20:25:43","endLine":264,"groupId":"1228","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeaderInElectingFollowers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/bd9d88222077beb805541ba9fd2c22644bce83.src","preCode":"    public void testLeaderInElectingFollowers() throws Exception {    \n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;            \n            \n            FollowerMockThread f1 = new FollowerMockThread(1, leader, false);\n            FollowerMockThread f2 = new FollowerMockThread(2, leader, false);\n\n            \r\n            leader.leaderStateSummary = new StateSummary(leader.self.getCurrentEpoch(), leader.zk.getLastProcessedZxid());\n            \n            f1.start();\n            f2.start();         \n            \n            \r\n            \r\n            f1.join(leader.self.getInitLimit()*leader.self.getTickTime() + 5000);\n            f2.join(leader.self.getInitLimit()*leader.self.getTickTime() + 5000);\n                        \n            \r\n            Assert.assertTrue(f1.msg + \" without waiting for leader\", f1.msg == null);            \n            Assert.assertTrue(f2.msg + \" without waiting for leader\", f2.msg == null);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testLeaderInConnectingFollowers() throws Exception {\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n            peer.setAcceptedEpoch(5);\n\n            FollowerMockThread f1 = new FollowerMockThread(1, leader, true);\n            FollowerMockThread f2 = new FollowerMockThread(2, leader, true);\n            f1.start();\n            f2.start();\n\n            \r\n            \r\n            \r\n            f1.join(leader.self.getInitLimit() * leader.self.getTickTime() + 5000);\n            f2.join(leader.self.getInitLimit() * leader.self.getTickTime() + 5000);\n\n            \r\n            \r\n            \r\n            try {\n                long epoch = leader.getEpochToPropose(leader.self.getId(), leader.self.getAcceptedEpoch());\n                assertEquals(\"leader got wrong epoch from getEpochToPropose\", 6, epoch);\n            } catch (Exception e) {\n                fail(\"leader timed out in getEpochToPropose\");\n            }\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":175,"groupId":"3946","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeaderInConnectingFollowers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/7f81f265db319f5227680702d6a4be01a76445.src","preCode":"    public void testLeaderInConnectingFollowers() throws Exception {    \n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n            peer.setAcceptedEpoch(5);\n            \n            FollowerMockThread f1 = new FollowerMockThread(1, leader, true);\n            FollowerMockThread f2 = new FollowerMockThread(2, leader, true);\n            f1.start();\n            f2.start();\n            \n            \r\n            \r\n            \r\n            f1.join(leader.self.getInitLimit()*leader.self.getTickTime() + 5000);\n            f2.join(leader.self.getInitLimit()*leader.self.getTickTime() + 5000);\n                \n            \r\n            \r\n            \r\n            try {\n            \tlong epoch = leader.getEpochToPropose(leader.self.getId(), leader.self.getAcceptedEpoch());\n            \tAssert.assertEquals(\"leader got wrong epoch from getEpochToPropose\", 6, epoch);\t\n            } catch (Exception e){ \n            \tAssert.fail(\"leader timed out in getEpochToPropose\");\n            }\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testLeaderInElectingFollowers() throws Exception {\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n\n            FollowerMockThread f1 = new FollowerMockThread(1, leader, false);\n            FollowerMockThread f2 = new FollowerMockThread(2, leader, false);\n\n            \r\n            leader.leaderStateSummary = new StateSummary(leader.self.getCurrentEpoch(), leader.zk.getLastProcessedZxid());\n\n            f1.start();\n            f2.start();\n\n            \r\n            \r\n            f1.join(leader.self.getInitLimit() * leader.self.getTickTime() + 5000);\n            f2.join(leader.self.getInitLimit() * leader.self.getTickTime() + 5000);\n\n            \r\n            assertTrue(f1.msg + \" without waiting for leader\", f1.msg == null);\n            assertTrue(f2.msg + \" without waiting for leader\", f2.msg == null);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":263,"groupId":"1228","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeaderInElectingFollowers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/7f81f265db319f5227680702d6a4be01a76445.src","preCode":"    public void testLeaderInElectingFollowers() throws Exception {    \n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;            \n            \n            FollowerMockThread f1 = new FollowerMockThread(1, leader, false);\n            FollowerMockThread f2 = new FollowerMockThread(2, leader, false);\n\n            \r\n            leader.leaderStateSummary = new StateSummary(leader.self.getCurrentEpoch(), leader.zk.getLastProcessedZxid());\n            \n            f1.start();\n            f2.start();         \n            \n            \r\n            \r\n            f1.join(leader.self.getInitLimit()*leader.self.getTickTime() + 5000);\n            f2.join(leader.self.getInitLimit()*leader.self.getTickTime() + 5000);\n                        \n            \r\n            Assert.assertTrue(f1.msg + \" without waiting for leader\", f1.msg == null);            \n            Assert.assertTrue(f2.msg + \" without waiting for leader\", f2.msg == null);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testLeaderInConnectingFollowers() throws Exception {\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n            peer.setAcceptedEpoch(5);\n\n            FollowerMockThread f1 = new FollowerMockThread(1, leader, true);\n            FollowerMockThread f2 = new FollowerMockThread(2, leader, true);\n            f1.start();\n            f2.start();\n\n            \r\n            \r\n            \r\n            f1.join(leader.self.getInitLimit() * leader.self.getTickTime() + 5000);\n            f2.join(leader.self.getInitLimit() * leader.self.getTickTime() + 5000);\n\n            \r\n            \r\n            \r\n            try {\n                long epoch = leader.getEpochToPropose(leader.self.getId(), leader.self.getAcceptedEpoch());\n                assertEquals(6, epoch, \"leader got wrong epoch from getEpochToPropose\");\n            } catch (Exception e) {\n                fail(\"leader timed out in getEpochToPropose\");\n            }\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":176,"groupId":"10176","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testLeaderInConnectingFollowers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3b/dbcd908dcf81014ebea86b07afcbe081b0cdeb.src","preCode":"    public void testLeaderInConnectingFollowers() throws Exception {\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n            peer.setAcceptedEpoch(5);\n\n            FollowerMockThread f1 = new FollowerMockThread(1, leader, true);\n            FollowerMockThread f2 = new FollowerMockThread(2, leader, true);\n            f1.start();\n            f2.start();\n\n            \r\n            \r\n            \r\n            f1.join(leader.self.getInitLimit() * leader.self.getTickTime() + 5000);\n            f2.join(leader.self.getInitLimit() * leader.self.getTickTime() + 5000);\n\n            \r\n            \r\n            \r\n            try {\n                long epoch = leader.getEpochToPropose(leader.self.getId(), leader.self.getAcceptedEpoch());\n                assertEquals(\"leader got wrong epoch from getEpochToPropose\", 6, epoch);\n            } catch (Exception e) {\n                fail(\"leader timed out in getEpochToPropose\");\n            }\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testLeaderInElectingFollowers() throws Exception {\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n\n            FollowerMockThread f1 = new FollowerMockThread(1, leader, false);\n            FollowerMockThread f2 = new FollowerMockThread(2, leader, false);\n\n            \r\n            leader.leaderStateSummary = new StateSummary(leader.self.getCurrentEpoch(), leader.zk.getLastProcessedZxid());\n\n            f1.start();\n            f2.start();\n\n            \r\n            \r\n            f1.join(leader.self.getInitLimit() * leader.self.getTickTime() + 5000);\n            f2.join(leader.self.getInitLimit() * leader.self.getTickTime() + 5000);\n\n            \r\n            assertTrue(f1.msg == null, f1.msg + \" without waiting for leader\");\n            assertTrue(f2.msg == null, f2.msg + \" without waiting for leader\");\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":264,"groupId":"10176","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testLeaderInElectingFollowers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3b/dbcd908dcf81014ebea86b07afcbe081b0cdeb.src","preCode":"    public void testLeaderInElectingFollowers() throws Exception {\n        File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n        tmpDir.delete();\n        tmpDir.mkdir();\n        Leader leader = null;\n        try {\n            QuorumPeer peer = createQuorumPeer(tmpDir);\n            leader = createLeader(tmpDir, peer);\n            peer.leader = leader;\n\n            FollowerMockThread f1 = new FollowerMockThread(1, leader, false);\n            FollowerMockThread f2 = new FollowerMockThread(2, leader, false);\n\n            \r\n            leader.leaderStateSummary = new StateSummary(leader.self.getCurrentEpoch(), leader.zk.getLastProcessedZxid());\n\n            f1.start();\n            f2.start();\n\n            \r\n            \r\n            f1.join(leader.self.getInitLimit() * leader.self.getTickTime() + 5000);\n            f2.join(leader.self.getInitLimit() * leader.self.getTickTime() + 5000);\n\n            \r\n            assertTrue(f1.msg + \" without waiting for leader\", f1.msg == null);\n            assertTrue(f2.msg + \" without waiting for leader\", f2.msg == null);\n        } finally {\n            if (leader != null) {\n                leader.shutdown(\"end of test\");\n            }\n            TestUtils.deleteFileRecursively(tmpDir);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
