[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public Stat setData(String path, byte data[], int version, long zxid,\n            long time) throws KeeperException.NoNodeException {\n        Stat s = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        byte lastdata[] = null;\n        synchronized (n) {\n            lastdata = n.data;\n            n.data = data;\n            n.stat.setMtime(time);\n            n.stat.setMzxid(zxid);\n            n.stat.setVersion(version);\n            n.copyStat(s);\n        }\n        \r\n        String lastPrefix = getMaxPrefixWithQuota(path);\n        if(lastPrefix != null) {\n          this.updateBytes(lastPrefix, (data == null ? 0 : data.length)\n              - (lastdata == null ? 0 : lastdata.length));\n        }\n        nodeDataSize.addAndGet(getNodeSize(path, data) - getNodeSize(path, lastdata));\n        dataWatches.triggerWatch(path, EventType.NodeDataChanged);\n        return s;\n    }\n","date":"2018-10-05 20:25:43","endLine":660,"groupId":"2550","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setData","params":"(Stringpath@bytedata[]@intversion@longzxid@longtime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c2/4396a702aeba29e590733edfe6103b16cbf306.src","preCode":"    public Stat setData(String path, byte data[], int version, long zxid,\n            long time) throws KeeperException.NoNodeException {\n        Stat s = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        byte lastdata[] = null;\n        synchronized (n) {\n            lastdata = n.data;\n            n.data = data;\n            n.stat.setMtime(time);\n            n.stat.setMzxid(zxid);\n            n.stat.setVersion(version);\n            n.copyStat(s);\n        }\n        \r\n        String lastPrefix = getMaxPrefixWithQuota(path);\n        if(lastPrefix != null) {\n          this.updateBytes(lastPrefix, (data == null ? 0 : data.length)\n              - (lastdata == null ? 0 : lastdata.length));\n        }\n        nodeDataSize.addAndGet(getNodeSize(path, data) - getNodeSize(path, lastdata));\n        dataWatches.triggerWatch(path, EventType.NodeDataChanged);\n        return s;\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":635,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public Stat setACL(String path, List<ACL> acl, int version)\n            throws KeeperException.NoNodeException {\n        Stat stat = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        synchronized (n) {\n            aclCache.removeUsage(n.acl);\n            n.stat.setAversion(version);\n            n.acl = aclCache.convertAcls(acl);\n            n.copyStat(stat);\n            return stat;\n        }\n    }\n","date":"2018-10-05 20:25:43","endLine":746,"groupId":"725","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setACL","params":"(Stringpath@List<ACL>acl@intversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c2/4396a702aeba29e590733edfe6103b16cbf306.src","preCode":"    public Stat setACL(String path, List<ACL> acl, int version)\n            throws KeeperException.NoNodeException {\n        Stat stat = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        synchronized (n) {\n            aclCache.removeUsage(n.acl);\n            n.stat.setAversion(version);\n            n.acl = aclCache.convertAcls(acl);\n            n.copyStat(stat);\n            return stat;\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":732,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2019-01-31 00:02:39","commitOrder":2,"curCode":"    public Stat setData(String path, byte data[], int version, long zxid,\n            long time) throws KeeperException.NoNodeException {\n        Stat s = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        byte lastdata[] = null;\n        synchronized (n) {\n            lastdata = n.data;\n            n.data = data;\n            n.stat.setMtime(time);\n            n.stat.setMzxid(zxid);\n            n.stat.setVersion(version);\n            n.copyStat(s);\n        }\n        \r\n        String lastPrefix = getMaxPrefixWithQuota(path);\n        if(lastPrefix != null) {\n            long dataBytes = data == null ? 0 : data.length;\n            this.updateCountBytes(lastPrefix, dataBytes\n                    - (lastdata == null ? 0 : lastdata.length), 0);\n        }\n        nodeDataSize.addAndGet(getNodeSize(path, data) - getNodeSize(path, lastdata));\n        dataWatches.triggerWatch(path, EventType.NodeDataChanged);\n        return s;\n    }\n","date":"2019-01-31 00:02:39","endLine":634,"groupId":"2550","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setData","params":"(Stringpath@bytedata[]@intversion@longzxid@longtime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a3/64264847a4584cf9291cf47aba3308c206cb1b.src","preCode":"    public Stat setData(String path, byte data[], int version, long zxid,\n            long time) throws KeeperException.NoNodeException {\n        Stat s = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        byte lastdata[] = null;\n        synchronized (n) {\n            lastdata = n.data;\n            n.data = data;\n            n.stat.setMtime(time);\n            n.stat.setMzxid(zxid);\n            n.stat.setVersion(version);\n            n.copyStat(s);\n        }\n        \r\n        String lastPrefix = getMaxPrefixWithQuota(path);\n        if(lastPrefix != null) {\n          this.updateBytes(lastPrefix, (data == null ? 0 : data.length)\n              - (lastdata == null ? 0 : lastdata.length));\n        }\n        nodeDataSize.addAndGet(getNodeSize(path, data) - getNodeSize(path, lastdata));\n        dataWatches.triggerWatch(path, EventType.NodeDataChanged);\n        return s;\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":608,"status":"M"},{"authorDate":"2018-10-05 20:25:43","commitOrder":2,"curCode":"    public Stat setACL(String path, List<ACL> acl, int version)\n            throws KeeperException.NoNodeException {\n        Stat stat = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        synchronized (n) {\n            aclCache.removeUsage(n.acl);\n            n.stat.setAversion(version);\n            n.acl = aclCache.convertAcls(acl);\n            n.copyStat(stat);\n            return stat;\n        }\n    }\n","date":"2018-10-05 20:25:43","endLine":746,"groupId":"725","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setACL","params":"(Stringpath@List<ACL>acl@intversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c2/4396a702aeba29e590733edfe6103b16cbf306.src","preCode":"    public Stat setACL(String path, List<ACL> acl, int version)\n            throws KeeperException.NoNodeException {\n        Stat stat = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        synchronized (n) {\n            aclCache.removeUsage(n.acl);\n            n.stat.setAversion(version);\n            n.acl = aclCache.convertAcls(acl);\n            n.copyStat(stat);\n            return stat;\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":732,"status":"N"}],"commitId":"29f95b18d9539c3f8932fee31798ca7332cb2ec6","commitMessage":"@@@ZOOKEEPER-3257: Merge count and byte update of Stat\n\nAuthor: Brian Nixon <nixon@fb.com>\n\nReviewers: fangmin@apache.org.  andor@apache.org\n\nCloses #789 from enixon/count-and-byte and squashes the following commits:\n\n428c12925 [Brian Nixon] remove stray comment\na1c755574 [Brian Nixon] ZOOKEEPER-3257: Merge count and byte update of Stat\n","date":"2019-01-31 00:02:39","modifiedFileCount":"1","status":"M","submitter":"Brian Nixon"},{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2019-04-12 18:29:32","commitOrder":3,"curCode":"    public Stat setData(String path, byte data[], int version, long zxid,\n            long time) throws KeeperException.NoNodeException {\n        Stat s = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        byte lastdata[] = null;\n        synchronized (n) {\n            lastdata = n.data;\n            n.data = data;\n            n.stat.setMtime(time);\n            n.stat.setMzxid(zxid);\n            n.stat.setVersion(version);\n            n.copyStat(s);\n        }\n        \r\n        String lastPrefix = getMaxPrefixWithQuota(path);\n        long dataBytes = data == null ? 0 : data.length;\n        if(lastPrefix != null) {\n            this.updateCountBytes(lastPrefix, dataBytes\n                    - (lastdata == null ? 0 : lastdata.length), 0);\n        }\n        nodeDataSize.addAndGet(getNodeSize(path, data) - getNodeSize(path, lastdata));\n\n        updateWriteStat(path, dataBytes);\n        dataWatches.triggerWatch(path, EventType.NodeDataChanged);\n        return s;\n    }\n","date":"2019-04-12 18:29:32","endLine":645,"groupId":"1049","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setData","params":"(Stringpath@bytedata[]@intversion@longzxid@longtime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/70/6912cc30f9998b6177d4bc133a1791ff241c8f.src","preCode":"    public Stat setData(String path, byte data[], int version, long zxid,\n            long time) throws KeeperException.NoNodeException {\n        Stat s = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        byte lastdata[] = null;\n        synchronized (n) {\n            lastdata = n.data;\n            n.data = data;\n            n.stat.setMtime(time);\n            n.stat.setMzxid(zxid);\n            n.stat.setVersion(version);\n            n.copyStat(s);\n        }\n        \r\n        String lastPrefix = getMaxPrefixWithQuota(path);\n        if(lastPrefix != null) {\n            long dataBytes = data == null ? 0 : data.length;\n            this.updateCountBytes(lastPrefix, dataBytes\n                    - (lastdata == null ? 0 : lastdata.length), 0);\n        }\n        nodeDataSize.addAndGet(getNodeSize(path, data) - getNodeSize(path, lastdata));\n        dataWatches.triggerWatch(path, EventType.NodeDataChanged);\n        return s;\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":617,"status":"M"},{"authorDate":"2018-10-05 20:25:43","commitOrder":3,"curCode":"    public Stat setACL(String path, List<ACL> acl, int version)\n            throws KeeperException.NoNodeException {\n        Stat stat = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        synchronized (n) {\n            aclCache.removeUsage(n.acl);\n            n.stat.setAversion(version);\n            n.acl = aclCache.convertAcls(acl);\n            n.copyStat(stat);\n            return stat;\n        }\n    }\n","date":"2018-10-05 20:25:43","endLine":746,"groupId":"725","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setACL","params":"(Stringpath@List<ACL>acl@intversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c2/4396a702aeba29e590733edfe6103b16cbf306.src","preCode":"    public Stat setACL(String path, List<ACL> acl, int version)\n            throws KeeperException.NoNodeException {\n        Stat stat = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        synchronized (n) {\n            aclCache.removeUsage(n.acl);\n            n.stat.setAversion(version);\n            n.acl = aclCache.convertAcls(acl);\n            n.copyStat(stat);\n            return stat;\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":732,"status":"N"}],"commitId":"ff132ab9dd3dd83df1dbfae5bc9f0cc53f6a4d45","commitMessage":"@@@ZOOKEEPER-3324: Add read/write metrics for top level znodes\n\nanother example of Set metrics.\n\nAuthor: Jie Huang <jiehuang@fb.com>\n\nReviewers: andor@apache.org\n\nCloses #860 from jhuan31/ZOOKEEPER-3324\n","date":"2019-04-12 18:29:32","modifiedFileCount":"3","status":"M","submitter":"Jie Huang"},{"authorTime":"2019-08-01 01:06:04","codes":[{"authorDate":"2019-08-01 01:06:04","commitOrder":4,"curCode":"    public Stat setData(String path, byte data[], int version, long zxid,\n            long time) throws KeeperException.NoNodeException {\n        Stat s = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        byte lastdata[] = null;\n        synchronized (n) {\n            lastdata = n.data;\n            nodes.preChange(path, n);\n            n.data = data;\n            n.stat.setMtime(time);\n            n.stat.setMzxid(zxid);\n            n.stat.setVersion(version);\n            n.copyStat(s);\n            nodes.postChange(path, n);\n        }\n        \r\n        String lastPrefix = getMaxPrefixWithQuota(path);\n        long dataBytes = data == null ? 0 : data.length;\n        if(lastPrefix != null) {\n            this.updateCountBytes(lastPrefix, dataBytes\n                    - (lastdata == null ? 0 : lastdata.length), 0);\n        }\n        nodeDataSize.addAndGet(getNodeSize(path, data) - getNodeSize(path, lastdata));\n\n        updateWriteStat(path, dataBytes);\n        dataWatches.triggerWatch(path, EventType.NodeDataChanged);\n        return s;\n    }\n","date":"2019-08-01 01:06:04","endLine":686,"groupId":"4620","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setData","params":"(Stringpath@bytedata[]@intversion@longzxid@longtime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0f/fad0ffdb12fa83f0b7119f142507906555c32f.src","preCode":"    public Stat setData(String path, byte data[], int version, long zxid,\n            long time) throws KeeperException.NoNodeException {\n        Stat s = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        byte lastdata[] = null;\n        synchronized (n) {\n            lastdata = n.data;\n            n.data = data;\n            n.stat.setMtime(time);\n            n.stat.setMzxid(zxid);\n            n.stat.setVersion(version);\n            n.copyStat(s);\n        }\n        \r\n        String lastPrefix = getMaxPrefixWithQuota(path);\n        long dataBytes = data == null ? 0 : data.length;\n        if(lastPrefix != null) {\n            this.updateCountBytes(lastPrefix, dataBytes\n                    - (lastdata == null ? 0 : lastdata.length), 0);\n        }\n        nodeDataSize.addAndGet(getNodeSize(path, data) - getNodeSize(path, lastdata));\n\n        updateWriteStat(path, dataBytes);\n        dataWatches.triggerWatch(path, EventType.NodeDataChanged);\n        return s;\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":656,"status":"M"},{"authorDate":"2019-08-01 01:06:04","commitOrder":4,"curCode":"    public Stat setACL(String path, List<ACL> acl, int version)\n            throws KeeperException.NoNodeException {\n        Stat stat = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        synchronized (n) {\n            aclCache.removeUsage(n.acl);\n            nodes.preChange(path, n);\n            n.stat.setAversion(version);\n            n.acl = aclCache.convertAcls(acl);\n            n.copyStat(stat);\n            nodes.postChange(path, n);\n            return stat;\n        }\n    }\n","date":"2019-08-01 01:06:04","endLine":795,"groupId":"725","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setACL","params":"(Stringpath@List<ACL>acl@intversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0f/fad0ffdb12fa83f0b7119f142507906555c32f.src","preCode":"    public Stat setACL(String path, List<ACL> acl, int version)\n            throws KeeperException.NoNodeException {\n        Stat stat = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        synchronized (n) {\n            aclCache.removeUsage(n.acl);\n            n.stat.setAversion(version);\n            n.acl = aclCache.convertAcls(acl);\n            n.copyStat(stat);\n            return stat;\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":779,"status":"M"}],"commitId":"ee04684b259fe00fe3dd8d3b697ba011c71e120b","commitMessage":"@@@ZOOKEEPER-3150: Add tree digest check and verify data integrity when loading from disk\n\nJira ZOOKEEPER-3114 will be divided into two parts:\n\n1. data integrity check when loading snapshot/txns from disk\n2. real time data consistency check when syncing and following leader\n\nThis is the first part.  which is going to check the data integrity by calculating the hash value of data tree.  and compare the value when reload the snapshot/txns from disk.\n\nAuthor: Fangmin Lyu <fangmin@apache.org>\nAuthor: Fangmin Lyu <allenlyu@fb.com>\n\nReviewers: Michael Han <hanm@apache.org>.  Enrico Olivelli <eolivelli@gmail.com>.  Edward Ribeiro\n\nCloses #632 from lvfangmin/ZOOKEEPER-3150\n","date":"2019-08-01 01:06:04","modifiedFileCount":"15","status":"M","submitter":"Fangmin Lyu"},{"authorTime":"2019-08-01 01:06:04","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":5,"curCode":"    public Stat setData(String path, byte[] data, int version, long zxid, long time) throws KeeperException.NoNodeException {\n        Stat s = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        byte[] lastdata = null;\n        synchronized (n) {\n            lastdata = n.data;\n            nodes.preChange(path, n);\n            n.data = data;\n            n.stat.setMtime(time);\n            n.stat.setMzxid(zxid);\n            n.stat.setVersion(version);\n            n.copyStat(s);\n            nodes.postChange(path, n);\n        }\n        \r\n        String lastPrefix = getMaxPrefixWithQuota(path);\n        long dataBytes = data == null ? 0 : data.length;\n        if (lastPrefix != null) {\n            this.updateCountBytes(lastPrefix, dataBytes - (lastdata == null ? 0 : lastdata.length), 0);\n        }\n        nodeDataSize.addAndGet(getNodeSize(path, data) - getNodeSize(path, lastdata));\n\n        updateWriteStat(path, dataBytes);\n        dataWatches.triggerWatch(path, EventType.NodeDataChanged);\n        return s;\n    }\n","date":"2019-08-17 23:13:15","endLine":669,"groupId":"4620","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setData","params":"(Stringpath@byte[]data@intversion@longzxid@longtime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/09/a8f4b43eb41d0ea425697ed6cdfd18bd0bcd4e.src","preCode":"    public Stat setData(String path, byte data[], int version, long zxid,\n            long time) throws KeeperException.NoNodeException {\n        Stat s = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        byte lastdata[] = null;\n        synchronized (n) {\n            lastdata = n.data;\n            nodes.preChange(path, n);\n            n.data = data;\n            n.stat.setMtime(time);\n            n.stat.setMzxid(zxid);\n            n.stat.setVersion(version);\n            n.copyStat(s);\n            nodes.postChange(path, n);\n        }\n        \r\n        String lastPrefix = getMaxPrefixWithQuota(path);\n        long dataBytes = data == null ? 0 : data.length;\n        if(lastPrefix != null) {\n            this.updateCountBytes(lastPrefix, dataBytes\n                    - (lastdata == null ? 0 : lastdata.length), 0);\n        }\n        nodeDataSize.addAndGet(getNodeSize(path, data) - getNodeSize(path, lastdata));\n\n        updateWriteStat(path, dataBytes);\n        dataWatches.triggerWatch(path, EventType.NodeDataChanged);\n        return s;\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":641,"status":"M"},{"authorDate":"2019-08-01 01:06:04","commitOrder":5,"curCode":"    public Stat setACL(String path, List<ACL> acl, int version)\n            throws KeeperException.NoNodeException {\n        Stat stat = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        synchronized (n) {\n            aclCache.removeUsage(n.acl);\n            nodes.preChange(path, n);\n            n.stat.setAversion(version);\n            n.acl = aclCache.convertAcls(acl);\n            n.copyStat(stat);\n            nodes.postChange(path, n);\n            return stat;\n        }\n    }\n","date":"2019-08-01 01:06:04","endLine":795,"groupId":"725","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setACL","params":"(Stringpath@List<ACL>acl@intversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0f/fad0ffdb12fa83f0b7119f142507906555c32f.src","preCode":"    public Stat setACL(String path, List<ACL> acl, int version)\n            throws KeeperException.NoNodeException {\n        Stat stat = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        synchronized (n) {\n            aclCache.removeUsage(n.acl);\n            nodes.preChange(path, n);\n            n.stat.setAversion(version);\n            n.acl = aclCache.convertAcls(acl);\n            n.copyStat(stat);\n            nodes.postChange(path, n);\n            return stat;\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":779,"status":"N"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-08-01 01:06:04","codes":[{"authorDate":"2021-01-19 16:05:37","commitOrder":6,"curCode":"    public Stat setData(String path, byte[] data, int version, long zxid, long time) throws KeeperException.NoNodeException {\n        Stat s = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        byte[] lastdata = null;\n        synchronized (n) {\n            lastdata = n.data;\n            nodes.preChange(path, n);\n            n.data = data;\n            n.stat.setMtime(time);\n            n.stat.setMzxid(zxid);\n            n.stat.setVersion(version);\n            n.copyStat(s);\n            nodes.postChange(path, n);\n        }\n\n        \r\n        String lastPrefix = getMaxPrefixWithQuota(path);\n        long bytesDiff = (data == null ? 0 : data.length) - (lastdata == null ? 0 : lastdata.length);\n        \r\n        long dataBytes = data == null ? 0 : data.length;\n        if (lastPrefix != null) {\n            updateQuotaStat(lastPrefix, bytesDiff, 0);\n        }\n        nodeDataSize.addAndGet(getNodeSize(path, data) - getNodeSize(path, lastdata));\n\n        updateWriteStat(path, dataBytes);\n        dataWatches.triggerWatch(path, EventType.NodeDataChanged);\n        return s;\n    }\n","date":"2021-01-19 16:05:37","endLine":662,"groupId":"10722","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"setData","params":"(Stringpath@byte[]data@intversion@longzxid@longtime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/7e/2e843f520eddac8d98798eb9719093bac20017.src","preCode":"    public Stat setData(String path, byte[] data, int version, long zxid, long time) throws KeeperException.NoNodeException {\n        Stat s = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        byte[] lastdata = null;\n        synchronized (n) {\n            lastdata = n.data;\n            nodes.preChange(path, n);\n            n.data = data;\n            n.stat.setMtime(time);\n            n.stat.setMzxid(zxid);\n            n.stat.setVersion(version);\n            n.copyStat(s);\n            nodes.postChange(path, n);\n        }\n        \r\n        String lastPrefix = getMaxPrefixWithQuota(path);\n        long dataBytes = data == null ? 0 : data.length;\n        if (lastPrefix != null) {\n            this.updateCountBytes(lastPrefix, dataBytes - (lastdata == null ? 0 : lastdata.length), 0);\n        }\n        nodeDataSize.addAndGet(getNodeSize(path, data) - getNodeSize(path, lastdata));\n\n        updateWriteStat(path, dataBytes);\n        dataWatches.triggerWatch(path, EventType.NodeDataChanged);\n        return s;\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"M"},{"authorDate":"2019-08-01 01:06:04","commitOrder":6,"curCode":"    public Stat setACL(String path, List<ACL> acl, int version)\n            throws KeeperException.NoNodeException {\n        Stat stat = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        synchronized (n) {\n            aclCache.removeUsage(n.acl);\n            nodes.preChange(path, n);\n            n.stat.setAversion(version);\n            n.acl = aclCache.convertAcls(acl);\n            n.copyStat(stat);\n            nodes.postChange(path, n);\n            return stat;\n        }\n    }\n","date":"2019-08-01 01:06:04","endLine":795,"groupId":"10722","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setACL","params":"(Stringpath@List<ACL>acl@intversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0f/fad0ffdb12fa83f0b7119f142507906555c32f.src","preCode":"    public Stat setACL(String path, List<ACL> acl, int version)\n            throws KeeperException.NoNodeException {\n        Stat stat = new Stat();\n        DataNode n = nodes.get(path);\n        if (n == null) {\n            throw new KeeperException.NoNodeException();\n        }\n        synchronized (n) {\n            aclCache.removeUsage(n.acl);\n            nodes.preChange(path, n);\n            n.stat.setAversion(version);\n            n.acl = aclCache.convertAcls(acl);\n            n.copyStat(stat);\n            nodes.postChange(path, n);\n            return stat;\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":779,"status":"N"}],"commitId":"190a227aa9d4655ebfe6ba9f5c2da426da8c5d98","commitMessage":"@@@ZOOKEEPER-3301: Enforce the quota limit\n\n- Thanks for the original work from ZOOKEEPER-1383.  ZOOKEEPER-2593.  ZOOKEEPER-451.  especially the work from ZOOKEEPER-1383 contributed by [Thawan Kooburat](https://issues.apache.org/jira/secure/ViewProfile.jspa?name=thawan)(I also sign off his name in the commit message) which also implemented the very valuable throughput quota.In the further.  we will also do this.\n- `zookeeper.enforeQuota`. When enabled and the client exceeds the total bytes or children count hard quota under a znode.  the server will reject the request and reply the client a `QuotaExceededException` by force. The default value is: false.\n- the checkQuota involves the `create()` and `setData()` api.  not including the `delete()`.\n- When users set the quota which's less than the existing stats.  we give a thoughtful warning info.\n- the following code in the StatsTrack has a bad augmentability:\n\n  >             if (split.length != 2) {\n  >                 throw new IllegalArgumentException(\"invalid string \" + stats);\n  >             }\n\n   we do a trick to solve it for the expansibility.  but we will get a little strange quota info(`Output quota for /c2 count=-1. bytes=-1=;byteHardLimit=-1;countHardLimit=5`) when using `listquota`. some UTs has covered it.\n- the logic about `checkQuota` should be put in the `PrepRequestProcessor`.  other than `DataTree`.\n  we will get the following two negative effects if putting `checkQuota` in the `DataTree`:\n  - 1. When the write request has exceeded the quota.  the corresponding transaction log will load into disk successfully.It's not good.  although it has any data inconsistency issue.  because when the server restart.  so long as the transaction logs are applied in the same order.  the exceeded nodes will not be applied into the state machine.\n  - 2. the client will be blocking and waiting for the response.  because when throwing `QuotaExceededException` in the the `DataTree`.  the` rc.stat` will be `null` and `BinaryOutputArchive#writeRecord` will throw `NPE`.\n  - 3. Overall.  the pre-check about the write request should be done in the `PrepRequestProcessor`(at least before `SyncRequestProcessor`)(Look at an example from `checkACL()`)\n- more detail in the [ZOOKEEPER-3301](https://issues.apache.org/jira/browse/ZOOKEEPER-3301).\n- [Added in 2020-02-25] use `RateLogger` to replace `LOG` to avoid quota exceed logs flooding the disk\n- A `TODO` improvement is: only users have admin permission can write to `/zookeeper/quota`(just like `/zookeeper/config`) to avoid some users' misoperation\n\nAuthor: maoling <maoling199210191@sina.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Damien Diederen <ddiederen@apache.org>.  Enrico Olivelli <eolivelli@apache.org>.  Michael Han <hanm@apache.org>\n\nCloses #934 from maoling/ZOOKEEPER-3301\n","date":"2021-01-19 16:05:37","modifiedFileCount":"14","status":"M","submitter":"maoling"}]
