[{"authorTime":"2019-11-25 22:37:51","codes":[{"authorDate":"2019-11-25 22:37:51","commitOrder":7,"curCode":"    public void runFromConfig(ServerConfig config) throws IOException, AdminServerException {\n        LOG.info(\"Starting server\");\n        FileTxnSnapLog txnLog = null;\n        try {\n            try {\n                metricsProvider = MetricsProviderBootstrap.startMetricsProvider(\n                    config.getMetricsProviderClassName(),\n                    config.getMetricsProviderConfiguration());\n            } catch (MetricsProviderLifeCycleException error) {\n                throw new IOException(\"Cannot boot MetricsProvider \" + config.getMetricsProviderClassName(), error);\n            }\n            ServerMetrics.metricsProviderInitialized(metricsProvider);\n            \r\n            \r\n            \r\n            \r\n            txnLog = new FileTxnSnapLog(config.dataLogDir, config.dataDir);\n            JvmPauseMonitor jvmPauseMonitor = null;\n            if (config.jvmPauseMonitorToRun) {\n                jvmPauseMonitor = new JvmPauseMonitor(config);\n            }\n            final ZooKeeperServer zkServer = new ZooKeeperServer(jvmPauseMonitor, txnLog, config.tickTime, config.minSessionTimeout, config.maxSessionTimeout, config.listenBacklog, null, config.initialConfig);\n            txnLog.setServerStats(zkServer.serverStats());\n\n            \r\n            \r\n            final CountDownLatch shutdownLatch = new CountDownLatch(1);\n            zkServer.registerServerShutdownHandler(new ZooKeeperServerShutdownHandler(shutdownLatch));\n\n            \r\n            adminServer = AdminServerFactory.createAdminServer();\n            adminServer.setZooKeeperServer(zkServer);\n            adminServer.start();\n\n            boolean needStartZKServer = true;\n            if (config.getClientPortAddress() != null) {\n                cnxnFactory = ServerCnxnFactory.createFactory();\n                cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), false);\n                cnxnFactory.startup(zkServer);\n                \r\n                needStartZKServer = false;\n            }\n            if (config.getSecureClientPortAddress() != null) {\n                secureCnxnFactory = ServerCnxnFactory.createFactory();\n                secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), true);\n                secureCnxnFactory.startup(zkServer, needStartZKServer);\n            }\n\n            containerManager = new ContainerManager(\n                zkServer.getZKDatabase(),\n                zkServer.firstProcessor,\n                Integer.getInteger(\"znode.container.checkIntervalMs\", (int) TimeUnit.MINUTES.toMillis(1)),\n                Integer.getInteger(\"znode.container.maxPerMinute\", 10000),\n                Long.getLong(\"znode.container.maxNeverUsedIntervalMs\", 0)\n            );\n            containerManager.start();\n            ZKAuditProvider.addZKStartStopAuditLog();\n\n            \r\n            \r\n            shutdownLatch.await();\n\n            shutdown();\n\n            if (cnxnFactory != null) {\n                cnxnFactory.join();\n            }\n            if (secureCnxnFactory != null) {\n                secureCnxnFactory.join();\n            }\n            if (zkServer.canShutdown()) {\n                zkServer.shutdown(true);\n            }\n        } catch (InterruptedException e) {\n            \r\n            LOG.warn(\"Server interrupted\", e);\n        } finally {\n            if (txnLog != null) {\n                txnLog.close();\n            }\n            if (metricsProvider != null) {\n                try {\n                    metricsProvider.stop();\n                } catch (Throwable error) {\n                    LOG.warn(\"Error while stopping metrics\", error);\n                }\n            }\n        }\n    }\n","date":"2019-11-25 22:37:51","endLine":208,"groupId":"3429","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runFromConfig","params":"(ServerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3b/87312a2fcab121805b529712c8fbcd96b6507e.src","preCode":"    public void runFromConfig(ServerConfig config) throws IOException, AdminServerException {\n        LOG.info(\"Starting server\");\n        FileTxnSnapLog txnLog = null;\n        try {\n            try {\n                metricsProvider = MetricsProviderBootstrap.startMetricsProvider(\n                    config.getMetricsProviderClassName(),\n                    config.getMetricsProviderConfiguration());\n            } catch (MetricsProviderLifeCycleException error) {\n                throw new IOException(\"Cannot boot MetricsProvider \" + config.getMetricsProviderClassName(), error);\n            }\n            ServerMetrics.metricsProviderInitialized(metricsProvider);\n            \r\n            \r\n            \r\n            \r\n            txnLog = new FileTxnSnapLog(config.dataLogDir, config.dataDir);\n            JvmPauseMonitor jvmPauseMonitor = null;\n            if (config.jvmPauseMonitorToRun) {\n                jvmPauseMonitor = new JvmPauseMonitor(config);\n            }\n            final ZooKeeperServer zkServer = new ZooKeeperServer(jvmPauseMonitor, txnLog, config.tickTime, config.minSessionTimeout, config.maxSessionTimeout, config.listenBacklog, null, config.initialConfig);\n            txnLog.setServerStats(zkServer.serverStats());\n\n            \r\n            \r\n            final CountDownLatch shutdownLatch = new CountDownLatch(1);\n            zkServer.registerServerShutdownHandler(new ZooKeeperServerShutdownHandler(shutdownLatch));\n\n            \r\n            adminServer = AdminServerFactory.createAdminServer();\n            adminServer.setZooKeeperServer(zkServer);\n            adminServer.start();\n\n            boolean needStartZKServer = true;\n            if (config.getClientPortAddress() != null) {\n                cnxnFactory = ServerCnxnFactory.createFactory();\n                cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), false);\n                cnxnFactory.startup(zkServer);\n                \r\n                needStartZKServer = false;\n            }\n            if (config.getSecureClientPortAddress() != null) {\n                secureCnxnFactory = ServerCnxnFactory.createFactory();\n                secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), true);\n                secureCnxnFactory.startup(zkServer, needStartZKServer);\n            }\n\n            containerManager = new ContainerManager(\n                zkServer.getZKDatabase(),\n                zkServer.firstProcessor,\n                Integer.getInteger(\"znode.container.checkIntervalMs\", (int) TimeUnit.MINUTES.toMillis(1)),\n                Integer.getInteger(\"znode.container.maxPerMinute\", 10000),\n                Long.getLong(\"znode.container.maxNeverUsedIntervalMs\", 0)\n            );\n            containerManager.start();\n            ZKAuditProvider.addZKStartStopAuditLog();\n\n            \r\n            \r\n            shutdownLatch.await();\n\n            shutdown();\n\n            if (cnxnFactory != null) {\n                cnxnFactory.join();\n            }\n            if (secureCnxnFactory != null) {\n                secureCnxnFactory.join();\n            }\n            if (zkServer.canShutdown()) {\n                zkServer.shutdown(true);\n            }\n        } catch (InterruptedException e) {\n            \r\n            LOG.warn(\"Server interrupted\", e);\n        } finally {\n            if (txnLog != null) {\n                txnLog.close();\n            }\n            if (metricsProvider != null) {\n                try {\n                    metricsProvider.stop();\n                } catch (Throwable error) {\n                    LOG.warn(\"Error while stopping metrics\", error);\n                }\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"MB"},{"authorDate":"2019-11-25 22:37:51","commitOrder":7,"curCode":"    private synchronized void setupContainerManager() {\n        containerManager = new ContainerManager(\n            getZKDatabase(),\n            prepRequestProcessor,\n            Integer.getInteger(\"znode.container.checkIntervalMs\", (int) TimeUnit.MINUTES.toMillis(1)),\n            Integer.getInteger(\"znode.container.maxPerMinute\", 10000),\n            Long.getLong(\"znode.container.maxNeverUsedIntervalMs\", 0)\n        );\n    }\n","date":"2019-11-25 22:37:51","endLine":87,"groupId":"3429","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setupContainerManager","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/27/de4519177485a80e35eeed43f0a371e043c161.src","preCode":"    private synchronized void setupContainerManager() {\n        containerManager = new ContainerManager(\n            getZKDatabase(),\n            prepRequestProcessor,\n            Integer.getInteger(\"znode.container.checkIntervalMs\", (int) TimeUnit.MINUTES.toMillis(1)),\n            Integer.getInteger(\"znode.container.maxPerMinute\", 10000),\n            Long.getLong(\"znode.container.maxNeverUsedIntervalMs\", 0)\n        );\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"}],"commitId":"4132b64b36ea43909888fdaf34268a243f2c7420","commitMessage":"@@@ZOOKEEPER-3546 - Allow optional deletion of never used Container Nodes\n\nEdge cases can cause Container Nodes to never be deleted. i.e. if the container node is created and then the client that create the node crashes the container will not get deleted unless another client creates a node inside of it. This is because the initial implementation does not delete container nodes with a cversion of 0. This PR adds a new system property.  \"znode.container.maxNeverUsedIntervalMs\".  that can be set to delete containers with a cversion of 0 that have been retained for a period of time. This is a backward compatible change as the default value for this is Long.MAX_VALUE - i.e. never.\n\nAuthor: randgalt <jordan@jordanzimmerman.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Fangmin Lyu <fangmin@apache.org>\n\nCloses #1138 from Randgalt/ZOOKEEPER-3546-allow-delete-of-never-used-containers\n","date":"2019-11-25 22:37:51","modifiedFileCount":"4","status":"M","submitter":"randgalt"},{"authorTime":"2019-11-25 22:37:51","codes":[{"authorDate":"2020-11-03 00:58:08","commitOrder":8,"curCode":"    public void runFromConfig(ServerConfig config) throws IOException, AdminServerException {\n        LOG.info(\"Starting server\");\n        FileTxnSnapLog txnLog = null;\n        try {\n            try {\n                metricsProvider = MetricsProviderBootstrap.startMetricsProvider(\n                    config.getMetricsProviderClassName(),\n                    config.getMetricsProviderConfiguration());\n            } catch (MetricsProviderLifeCycleException error) {\n                throw new IOException(\"Cannot boot MetricsProvider \" + config.getMetricsProviderClassName(), error);\n            }\n            ServerMetrics.metricsProviderInitialized(metricsProvider);\n            ProviderRegistry.initialize();\n            \r\n            \r\n            \r\n            \r\n            txnLog = new FileTxnSnapLog(config.dataLogDir, config.dataDir);\n            JvmPauseMonitor jvmPauseMonitor = null;\n            if (config.jvmPauseMonitorToRun) {\n                jvmPauseMonitor = new JvmPauseMonitor(config);\n            }\n            final ZooKeeperServer zkServer = new ZooKeeperServer(jvmPauseMonitor, txnLog, config.tickTime, config.minSessionTimeout, config.maxSessionTimeout, config.listenBacklog, null, config.initialConfig);\n            txnLog.setServerStats(zkServer.serverStats());\n\n            \r\n            \r\n            final CountDownLatch shutdownLatch = new CountDownLatch(1);\n            zkServer.registerServerShutdownHandler(new ZooKeeperServerShutdownHandler(shutdownLatch));\n\n            \r\n            adminServer = AdminServerFactory.createAdminServer();\n            adminServer.setZooKeeperServer(zkServer);\n            adminServer.start();\n\n            boolean needStartZKServer = true;\n            if (config.getClientPortAddress() != null) {\n                cnxnFactory = ServerCnxnFactory.createFactory();\n                cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), false);\n                cnxnFactory.startup(zkServer);\n                \r\n                needStartZKServer = false;\n            }\n            if (config.getSecureClientPortAddress() != null) {\n                secureCnxnFactory = ServerCnxnFactory.createFactory();\n                secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), true);\n                secureCnxnFactory.startup(zkServer, needStartZKServer);\n            }\n\n            containerManager = new ContainerManager(\n                zkServer.getZKDatabase(),\n                zkServer.firstProcessor,\n                Integer.getInteger(\"znode.container.checkIntervalMs\", (int) TimeUnit.MINUTES.toMillis(1)),\n                Integer.getInteger(\"znode.container.maxPerMinute\", 10000),\n                Long.getLong(\"znode.container.maxNeverUsedIntervalMs\", 0)\n            );\n            containerManager.start();\n            ZKAuditProvider.addZKStartStopAuditLog();\n\n            \r\n            \r\n            shutdownLatch.await();\n\n            shutdown();\n\n            if (cnxnFactory != null) {\n                cnxnFactory.join();\n            }\n            if (secureCnxnFactory != null) {\n                secureCnxnFactory.join();\n            }\n            if (zkServer.canShutdown()) {\n                zkServer.shutdown(true);\n            }\n        } catch (InterruptedException e) {\n            \r\n            LOG.warn(\"Server interrupted\", e);\n        } finally {\n            if (txnLog != null) {\n                txnLog.close();\n            }\n            if (metricsProvider != null) {\n                try {\n                    metricsProvider.stop();\n                } catch (Throwable error) {\n                    LOG.warn(\"Error while stopping metrics\", error);\n                }\n            }\n        }\n    }\n","date":"2020-11-03 00:58:08","endLine":211,"groupId":"3429","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runFromConfig","params":"(ServerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ab/b4d0d49ea3001e6caf470aa80f42e01e87e337.src","preCode":"    public void runFromConfig(ServerConfig config) throws IOException, AdminServerException {\n        LOG.info(\"Starting server\");\n        FileTxnSnapLog txnLog = null;\n        try {\n            try {\n                metricsProvider = MetricsProviderBootstrap.startMetricsProvider(\n                    config.getMetricsProviderClassName(),\n                    config.getMetricsProviderConfiguration());\n            } catch (MetricsProviderLifeCycleException error) {\n                throw new IOException(\"Cannot boot MetricsProvider \" + config.getMetricsProviderClassName(), error);\n            }\n            ServerMetrics.metricsProviderInitialized(metricsProvider);\n            \r\n            \r\n            \r\n            \r\n            txnLog = new FileTxnSnapLog(config.dataLogDir, config.dataDir);\n            JvmPauseMonitor jvmPauseMonitor = null;\n            if (config.jvmPauseMonitorToRun) {\n                jvmPauseMonitor = new JvmPauseMonitor(config);\n            }\n            final ZooKeeperServer zkServer = new ZooKeeperServer(jvmPauseMonitor, txnLog, config.tickTime, config.minSessionTimeout, config.maxSessionTimeout, config.listenBacklog, null, config.initialConfig);\n            txnLog.setServerStats(zkServer.serverStats());\n\n            \r\n            \r\n            final CountDownLatch shutdownLatch = new CountDownLatch(1);\n            zkServer.registerServerShutdownHandler(new ZooKeeperServerShutdownHandler(shutdownLatch));\n\n            \r\n            adminServer = AdminServerFactory.createAdminServer();\n            adminServer.setZooKeeperServer(zkServer);\n            adminServer.start();\n\n            boolean needStartZKServer = true;\n            if (config.getClientPortAddress() != null) {\n                cnxnFactory = ServerCnxnFactory.createFactory();\n                cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), false);\n                cnxnFactory.startup(zkServer);\n                \r\n                needStartZKServer = false;\n            }\n            if (config.getSecureClientPortAddress() != null) {\n                secureCnxnFactory = ServerCnxnFactory.createFactory();\n                secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), true);\n                secureCnxnFactory.startup(zkServer, needStartZKServer);\n            }\n\n            containerManager = new ContainerManager(\n                zkServer.getZKDatabase(),\n                zkServer.firstProcessor,\n                Integer.getInteger(\"znode.container.checkIntervalMs\", (int) TimeUnit.MINUTES.toMillis(1)),\n                Integer.getInteger(\"znode.container.maxPerMinute\", 10000),\n                Long.getLong(\"znode.container.maxNeverUsedIntervalMs\", 0)\n            );\n            containerManager.start();\n            ZKAuditProvider.addZKStartStopAuditLog();\n\n            \r\n            \r\n            shutdownLatch.await();\n\n            shutdown();\n\n            if (cnxnFactory != null) {\n                cnxnFactory.join();\n            }\n            if (secureCnxnFactory != null) {\n                secureCnxnFactory.join();\n            }\n            if (zkServer.canShutdown()) {\n                zkServer.shutdown(true);\n            }\n        } catch (InterruptedException e) {\n            \r\n            LOG.warn(\"Server interrupted\", e);\n        } finally {\n            if (txnLog != null) {\n                txnLog.close();\n            }\n            if (metricsProvider != null) {\n                try {\n                    metricsProvider.stop();\n                } catch (Throwable error) {\n                    LOG.warn(\"Error while stopping metrics\", error);\n                }\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2019-11-25 22:37:51","commitOrder":8,"curCode":"    private synchronized void setupContainerManager() {\n        containerManager = new ContainerManager(\n            getZKDatabase(),\n            prepRequestProcessor,\n            Integer.getInteger(\"znode.container.checkIntervalMs\", (int) TimeUnit.MINUTES.toMillis(1)),\n            Integer.getInteger(\"znode.container.maxPerMinute\", 10000),\n            Long.getLong(\"znode.container.maxNeverUsedIntervalMs\", 0)\n        );\n    }\n","date":"2019-11-25 22:37:51","endLine":87,"groupId":"3429","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setupContainerManager","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/27/de4519177485a80e35eeed43f0a371e043c161.src","preCode":"    private synchronized void setupContainerManager() {\n        containerManager = new ContainerManager(\n            getZKDatabase(),\n            prepRequestProcessor,\n            Integer.getInteger(\"znode.container.checkIntervalMs\", (int) TimeUnit.MINUTES.toMillis(1)),\n            Integer.getInteger(\"znode.container.maxPerMinute\", 10000),\n            Long.getLong(\"znode.container.maxNeverUsedIntervalMs\", 0)\n        );\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"N"}],"commitId":"392846c534c51a57aa678691d411ad7d8d68e29a","commitMessage":"@@@ZOOKEEPER-3696: Support alternative algorithms for ACL digest\n\n- [SHA1](https://shattered.io/) can be cracked now and it's not safe enough to use it.  `SHA2` shares the the same algorithm idea with `SHA1`.  its broken would be only a matter of time.  so they created `SHA3` which's safe up to now.\n\n- The default value is: `SHA1` which will be deprecated in the future for security issues. Set this property the same value in all the servers.\n\n- How to support other more algorithms?\n\n    - modify the `java.security` configuration file under `$JAVA_HOME/jre/lib/security/java.security` by specifying:\n             `security.provider.<n>=<provider class name>`.\n\n             ```\n             For example:\n             set zookeeper.DigestAuthenticationProvider.digestAlg=RipeMD160\n             security.provider.3=org.bouncycastle.jce.provider.BouncyCastleProvider\n             ```\n\n    - copy the jar file to `$JAVA_HOME/jre/lib/ext/`.\n\n             ```\n             For example:\n             copy bcprov-jdk15on-1.60.jar to $JAVA_HOME/jre/lib/ext/\n             ```\n\n- For the same digest algorithm and input.  the output of digest is the constant. You can use some online tools to play with it. Some UTs had covered it.\n\n- The unit cases have tested three algorithms: `SHA1`.  `SHA-256`.  `SHA3-256`(other algorithms share the same principle.  so ignore them).  and I also do a manual test to `RipeMD160`\n\n- For the invalid algorithm parameter\n```\n Caused by: java.lang.RuntimeException: don't support this ACL digest algorithm: SHA3-996 in the current environment\n\tat org.apache.zookeeper.server.auth.DigestAuthenticationProvider.<clinit>(DigestAuthenticationProvider.java:52)\n\t... 6 more\n```\n\n- How to migrate from one digest algorithm to another? For example: migrate from SHA1 to SHA3\n```\n# Before I have SHA1 for digest\nsuperDigest=super:D/InIHSb7yEEbrWz8b9l71RjZJU=\" //super:test\n\n[zk: 127.0.0.1:2180(CONNECTED) 0] addauth digest username1:password1\n[zk: 127.0.0.1:2180(CONNECTED) 2] setAcl /myapp-1 auth:username1:password1:crwad\n\n# After I transfer to SHA3.  you will get Auth Exception when getData of a\nznode which already had a digest auth of old algorithm.\n\nStep ONE:  Regenerate `superDigest` when migrating to new algorithm which is always a good practice for users to survive from any uncomfortable auth issue.\nreset my superDigest to super:cRy/KPYuDpW/dtsepniTMpuiuupnWgdU9txltIfv3hA=\n[zk: 127.0.0.1:2180(CONNECTED) 0] addauth digest super:test\n[zk: 127.0.0.1:2180(CONNECTED) 1] get /myapp-1\nnull\n\nStep TWO: re-setACl for that znode.\n[zk: 127.0.0.1:2180(CONNECTED) 0] addauth digest super:test\n[zk: 127.0.0.1:2180(CONNECTED) 1] addauth digest username1:password1\n# sometime use setAcl -R to setAcl recursively or you can also set ACL to 'world. 'anyone\n(open to anyone)\n[zk: 127.0.0.1:2180(CONNECTED) 2] setAcl /myapp-1 auth:username1:password1:crwad\n```\n\n- [TODO]: `ZOOKEEPER-3976: write a script to encapsulate DigestAuthenticationProvider#main as a tool to generate the digest with the algorithm users appoint`\n\n- more details in the [ZOOKEEPER-3696](https://issues.apache.org/jira/browse/ZOOKEEPER-3696)\n\nAuthor: maoling <maoling199210191@sina.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Andor Molnar <andor@apache.org>.  Mate Szalay-Beko <symat@apache.org>\n\nThis patch had conflicts when merged.  resolved by\nCommitter: Mate Szalay-Beko <symat@apache.org>\n\nCloses #1318 from maoling/ZOOKEEPER-3696\n","date":"2020-11-03 00:58:08","modifiedFileCount":"4","status":"M","submitter":"maoling"},{"authorTime":"2019-11-25 22:37:51","codes":[{"authorDate":"2021-06-14 02:53:47","commitOrder":9,"curCode":"    public void runFromConfig(ServerConfig config) throws IOException, AdminServerException {\n        LOG.info(\"Starting server\");\n        FileTxnSnapLog txnLog = null;\n        try {\n            try {\n                metricsProvider = MetricsProviderBootstrap.startMetricsProvider(\n                    config.getMetricsProviderClassName(),\n                    config.getMetricsProviderConfiguration());\n            } catch (MetricsProviderLifeCycleException error) {\n                throw new IOException(\"Cannot boot MetricsProvider \" + config.getMetricsProviderClassName(), error);\n            }\n            ServerMetrics.metricsProviderInitialized(metricsProvider);\n            ProviderRegistry.initialize();\n            \r\n            \r\n            \r\n            \r\n            txnLog = new FileTxnSnapLog(config.dataLogDir, config.dataDir);\n            JvmPauseMonitor jvmPauseMonitor = null;\n            if (config.jvmPauseMonitorToRun) {\n                jvmPauseMonitor = new JvmPauseMonitor(config);\n            }\n            final ZooKeeperServer zkServer = new ZooKeeperServer(jvmPauseMonitor, txnLog, config.tickTime, config.minSessionTimeout, config.maxSessionTimeout, config.listenBacklog, null, config.initialConfig);\n            txnLog.setServerStats(zkServer.serverStats());\n\n            \r\n            \r\n            final CountDownLatch shutdownLatch = new CountDownLatch(1);\n            zkServer.registerServerShutdownHandler(new ZooKeeperServerShutdownHandler(shutdownLatch));\n\n            \r\n            adminServer = AdminServerFactory.createAdminServer();\n            adminServer.setZooKeeperServer(zkServer);\n            adminServer.start();\n\n            boolean needStartZKServer = true;\n            if (config.getClientPortAddress() != null) {\n                cnxnFactory = ServerCnxnFactory.createFactory();\n                cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), false);\n                cnxnFactory.startup(zkServer);\n                \r\n                needStartZKServer = false;\n            }\n            if (config.getSecureClientPortAddress() != null) {\n                secureCnxnFactory = ServerCnxnFactory.createFactory();\n                secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), true);\n                secureCnxnFactory.startup(zkServer, needStartZKServer);\n            }\n\n            containerManager = new ContainerManager(\n                zkServer.getZKDatabase(),\n                zkServer.firstProcessor,\n                Integer.getInteger(\"znode.container.checkIntervalMs\", (int) TimeUnit.MINUTES.toMillis(1)),\n                Integer.getInteger(\"znode.container.maxPerMinute\", 10000),\n                Long.getLong(\"znode.container.maxNeverUsedIntervalMs\", 0)\n            );\n            containerManager.start();\n            ZKAuditProvider.addZKStartStopAuditLog();\n\n            serverStarted();\n\n            \r\n            \r\n            shutdownLatch.await();\n\n            shutdown();\n\n            if (cnxnFactory != null) {\n                cnxnFactory.join();\n            }\n            if (secureCnxnFactory != null) {\n                secureCnxnFactory.join();\n            }\n            if (zkServer.canShutdown()) {\n                zkServer.shutdown(true);\n            }\n        } catch (InterruptedException e) {\n            \r\n            LOG.warn(\"Server interrupted\", e);\n        } finally {\n            if (txnLog != null) {\n                txnLog.close();\n            }\n            if (metricsProvider != null) {\n                try {\n                    metricsProvider.stop();\n                } catch (Throwable error) {\n                    LOG.warn(\"Error while stopping metrics\", error);\n                }\n            }\n        }\n    }\n","date":"2021-06-14 02:53:47","endLine":213,"groupId":"10739","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"runFromConfig","params":"(ServerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/7b/d30baa6e934a5705d723be3af705e22a158536.src","preCode":"    public void runFromConfig(ServerConfig config) throws IOException, AdminServerException {\n        LOG.info(\"Starting server\");\n        FileTxnSnapLog txnLog = null;\n        try {\n            try {\n                metricsProvider = MetricsProviderBootstrap.startMetricsProvider(\n                    config.getMetricsProviderClassName(),\n                    config.getMetricsProviderConfiguration());\n            } catch (MetricsProviderLifeCycleException error) {\n                throw new IOException(\"Cannot boot MetricsProvider \" + config.getMetricsProviderClassName(), error);\n            }\n            ServerMetrics.metricsProviderInitialized(metricsProvider);\n            ProviderRegistry.initialize();\n            \r\n            \r\n            \r\n            \r\n            txnLog = new FileTxnSnapLog(config.dataLogDir, config.dataDir);\n            JvmPauseMonitor jvmPauseMonitor = null;\n            if (config.jvmPauseMonitorToRun) {\n                jvmPauseMonitor = new JvmPauseMonitor(config);\n            }\n            final ZooKeeperServer zkServer = new ZooKeeperServer(jvmPauseMonitor, txnLog, config.tickTime, config.minSessionTimeout, config.maxSessionTimeout, config.listenBacklog, null, config.initialConfig);\n            txnLog.setServerStats(zkServer.serverStats());\n\n            \r\n            \r\n            final CountDownLatch shutdownLatch = new CountDownLatch(1);\n            zkServer.registerServerShutdownHandler(new ZooKeeperServerShutdownHandler(shutdownLatch));\n\n            \r\n            adminServer = AdminServerFactory.createAdminServer();\n            adminServer.setZooKeeperServer(zkServer);\n            adminServer.start();\n\n            boolean needStartZKServer = true;\n            if (config.getClientPortAddress() != null) {\n                cnxnFactory = ServerCnxnFactory.createFactory();\n                cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), false);\n                cnxnFactory.startup(zkServer);\n                \r\n                needStartZKServer = false;\n            }\n            if (config.getSecureClientPortAddress() != null) {\n                secureCnxnFactory = ServerCnxnFactory.createFactory();\n                secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), true);\n                secureCnxnFactory.startup(zkServer, needStartZKServer);\n            }\n\n            containerManager = new ContainerManager(\n                zkServer.getZKDatabase(),\n                zkServer.firstProcessor,\n                Integer.getInteger(\"znode.container.checkIntervalMs\", (int) TimeUnit.MINUTES.toMillis(1)),\n                Integer.getInteger(\"znode.container.maxPerMinute\", 10000),\n                Long.getLong(\"znode.container.maxNeverUsedIntervalMs\", 0)\n            );\n            containerManager.start();\n            ZKAuditProvider.addZKStartStopAuditLog();\n\n            \r\n            \r\n            shutdownLatch.await();\n\n            shutdown();\n\n            if (cnxnFactory != null) {\n                cnxnFactory.join();\n            }\n            if (secureCnxnFactory != null) {\n                secureCnxnFactory.join();\n            }\n            if (zkServer.canShutdown()) {\n                zkServer.shutdown(true);\n            }\n        } catch (InterruptedException e) {\n            \r\n            LOG.warn(\"Server interrupted\", e);\n        } finally {\n            if (txnLog != null) {\n                txnLog.close();\n            }\n            if (metricsProvider != null) {\n                try {\n                    metricsProvider.stop();\n                } catch (Throwable error) {\n                    LOG.warn(\"Error while stopping metrics\", error);\n                }\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2019-11-25 22:37:51","commitOrder":9,"curCode":"    private synchronized void setupContainerManager() {\n        containerManager = new ContainerManager(\n            getZKDatabase(),\n            prepRequestProcessor,\n            Integer.getInteger(\"znode.container.checkIntervalMs\", (int) TimeUnit.MINUTES.toMillis(1)),\n            Integer.getInteger(\"znode.container.maxPerMinute\", 10000),\n            Long.getLong(\"znode.container.maxNeverUsedIntervalMs\", 0)\n        );\n    }\n","date":"2019-11-25 22:37:51","endLine":87,"groupId":"10739","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setupContainerManager","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/27/de4519177485a80e35eeed43f0a371e043c161.src","preCode":"    private synchronized void setupContainerManager() {\n        containerManager = new ContainerManager(\n            getZKDatabase(),\n            prepRequestProcessor,\n            Integer.getInteger(\"znode.container.checkIntervalMs\", (int) TimeUnit.MINUTES.toMillis(1)),\n            Integer.getInteger(\"znode.container.maxPerMinute\", 10000),\n            Long.getLong(\"znode.container.maxNeverUsedIntervalMs\", 0)\n        );\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"N"}],"commitId":"5e6e15ac40cfd2cadac3e718e494a3c13b934b8d","commitMessage":"@@@ZOOKEEPER-4312: ZooKeeperServerEmbedded: enhance server start/stop for testability\n\nsee https://issues.apache.org/jira/browse/ZOOKEEPER-4312\n\nZooKeeperServerEmbedded works well for running ZooKeeper but it lacks support for a few little features in order to use it for tests.\n\nI saw these problems while working on the port of Curator Testing Server to ZooKeeperServerEmbedded.\n\nThere is no wait to wait for the server to be up-and-running\nWhen you \"close()\" the server.  it does not wait for the ports to be closed\nThere is no wait to have the ConnectString for the server\n\nAuthor: Enrico Olivelli <eolivelli@apache.org>\n\nReviewers: Damien Diederen <ddiederen@apache.org>\n\nCloses #1710 from eolivelli/impl/embedded-2\n","date":"2021-06-14 02:53:47","modifiedFileCount":"8","status":"M","submitter":"Enrico Olivelli"}]
