[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testBadTTLs() throws InterruptedException, KeeperException {\n        RequestHeader h = new RequestHeader(1, ZooDefs.OpCode.createTTL);\n\n        String path = \"/bad_ttl\";\n        CreateTTLRequest request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                                                        CreateMode.PERSISTENT_WITH_TTL.toFlag(), -100);\n        CreateResponse response = new CreateResponse();\n        ReplyHeader r = zk.submitRequest(h, request, response, null);\n        Assert.assertEquals(\"An invalid CreateTTLRequest should throw BadArguments\",\n                            r.getErr(), Code.BADARGUMENTS.intValue());\n        Assert.assertNull(\"An invalid CreateTTLRequest should not result in znode creation\",\n                          zk.exists(path, false));\n\n        request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT_WITH_TTL.toFlag(), EphemeralType.TTL.maxValue() + 1);\n        response = new CreateResponse();\n        r = zk.submitRequest(h, request, response, null);\n        Assert.assertEquals(\"An invalid CreateTTLRequest should throw BadArguments\",\n                r.getErr(), Code.BADARGUMENTS.intValue());\n        Assert.assertNull(\"An invalid CreateTTLRequest should not result in znode creation\",\n                zk.exists(path, false));\n    }\n","date":"2018-10-05 20:25:43","endLine":102,"groupId":"494","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadTTLs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/24/40030cc995fc5e1e4199cac87d310da688580b.src","preCode":"    public void testBadTTLs() throws InterruptedException, KeeperException {\n        RequestHeader h = new RequestHeader(1, ZooDefs.OpCode.createTTL);\n\n        String path = \"/bad_ttl\";\n        CreateTTLRequest request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                                                        CreateMode.PERSISTENT_WITH_TTL.toFlag(), -100);\n        CreateResponse response = new CreateResponse();\n        ReplyHeader r = zk.submitRequest(h, request, response, null);\n        Assert.assertEquals(\"An invalid CreateTTLRequest should throw BadArguments\",\n                            r.getErr(), Code.BADARGUMENTS.intValue());\n        Assert.assertNull(\"An invalid CreateTTLRequest should not result in znode creation\",\n                          zk.exists(path, false));\n\n        request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT_WITH_TTL.toFlag(), EphemeralType.TTL.maxValue() + 1);\n        response = new CreateResponse();\n        r = zk.submitRequest(h, request, response, null);\n        Assert.assertEquals(\"An invalid CreateTTLRequest should throw BadArguments\",\n                r.getErr(), Code.BADARGUMENTS.intValue());\n        Assert.assertNull(\"An invalid CreateTTLRequest should not result in znode creation\",\n                zk.exists(path, false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateTTLTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testMaxTTLs() throws InterruptedException, KeeperException {\n        RequestHeader h = new RequestHeader(1, ZooDefs.OpCode.createTTL);\n\n        String path = \"/bad_ttl\";\n        CreateTTLRequest request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                                                        CreateMode.PERSISTENT_WITH_TTL.toFlag(), EphemeralType.TTL.maxValue());\n        CreateResponse response = new CreateResponse();\n        ReplyHeader r = zk.submitRequest(h, request, response, null);\n        Assert.assertEquals(\"EphemeralType.getMaxTTL() should succeed\",\n                            r.getErr(), Code.OK.intValue());\n        Assert.assertNotNull(\"Node should exist\",\n                          zk.exists(path, false));\n    }\n","date":"2018-10-05 20:25:43","endLine":117,"groupId":"7","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxTTLs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/24/40030cc995fc5e1e4199cac87d310da688580b.src","preCode":"    public void testMaxTTLs() throws InterruptedException, KeeperException {\n        RequestHeader h = new RequestHeader(1, ZooDefs.OpCode.createTTL);\n\n        String path = \"/bad_ttl\";\n        CreateTTLRequest request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                                                        CreateMode.PERSISTENT_WITH_TTL.toFlag(), EphemeralType.TTL.maxValue());\n        CreateResponse response = new CreateResponse();\n        ReplyHeader r = zk.submitRequest(h, request, response, null);\n        Assert.assertEquals(\"EphemeralType.getMaxTTL() should succeed\",\n                            r.getErr(), Code.OK.intValue());\n        Assert.assertNotNull(\"Node should exist\",\n                          zk.exists(path, false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateTTLTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testBadTTLs() throws InterruptedException, KeeperException {\n        RequestHeader h = new RequestHeader(1, ZooDefs.OpCode.createTTL);\n\n        String path = \"/bad_ttl\";\n        CreateTTLRequest request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_WITH_TTL.toFlag(), -100);\n        CreateResponse response = new CreateResponse();\n        ReplyHeader r = zk.submitRequest(h, request, response, null);\n        assertEquals(\"An invalid CreateTTLRequest should throw BadArguments\", r.getErr(), Code.BADARGUMENTS.intValue());\n        assertNull(\"An invalid CreateTTLRequest should not result in znode creation\", zk.exists(path, false));\n\n        request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_WITH_TTL.toFlag(),\n                                       EphemeralType.TTL.maxValue()\n                                               + 1);\n        response = new CreateResponse();\n        r = zk.submitRequest(h, request, response, null);\n        assertEquals(\"An invalid CreateTTLRequest should throw BadArguments\", r.getErr(), Code.BADARGUMENTS.intValue());\n        assertNull(\"An invalid CreateTTLRequest should not result in znode creation\", zk.exists(path, false));\n    }\n","date":"2019-08-17 23:13:15","endLine":102,"groupId":"494","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadTTLs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b4/c8fa02b28db9bf17dc4a5918de51bad64adf46.src","preCode":"    public void testBadTTLs() throws InterruptedException, KeeperException {\n        RequestHeader h = new RequestHeader(1, ZooDefs.OpCode.createTTL);\n\n        String path = \"/bad_ttl\";\n        CreateTTLRequest request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                                                        CreateMode.PERSISTENT_WITH_TTL.toFlag(), -100);\n        CreateResponse response = new CreateResponse();\n        ReplyHeader r = zk.submitRequest(h, request, response, null);\n        Assert.assertEquals(\"An invalid CreateTTLRequest should throw BadArguments\",\n                            r.getErr(), Code.BADARGUMENTS.intValue());\n        Assert.assertNull(\"An invalid CreateTTLRequest should not result in znode creation\",\n                          zk.exists(path, false));\n\n        request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT_WITH_TTL.toFlag(), EphemeralType.TTL.maxValue() + 1);\n        response = new CreateResponse();\n        r = zk.submitRequest(h, request, response, null);\n        Assert.assertEquals(\"An invalid CreateTTLRequest should throw BadArguments\",\n                r.getErr(), Code.BADARGUMENTS.intValue());\n        Assert.assertNull(\"An invalid CreateTTLRequest should not result in znode creation\",\n                zk.exists(path, false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateTTLTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testMaxTTLs() throws InterruptedException, KeeperException {\n        RequestHeader h = new RequestHeader(1, ZooDefs.OpCode.createTTL);\n\n        String path = \"/bad_ttl\";\n        CreateTTLRequest request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_WITH_TTL.toFlag(), EphemeralType.TTL.maxValue());\n        CreateResponse response = new CreateResponse();\n        ReplyHeader r = zk.submitRequest(h, request, response, null);\n        assertEquals(\"EphemeralType.getMaxTTL() should succeed\", r.getErr(), Code.OK.intValue());\n        assertNotNull(\"Node should exist\", zk.exists(path, false));\n    }\n","date":"2019-08-17 23:13:15","endLine":114,"groupId":"7","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxTTLs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b4/c8fa02b28db9bf17dc4a5918de51bad64adf46.src","preCode":"    public void testMaxTTLs() throws InterruptedException, KeeperException {\n        RequestHeader h = new RequestHeader(1, ZooDefs.OpCode.createTTL);\n\n        String path = \"/bad_ttl\";\n        CreateTTLRequest request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                                                        CreateMode.PERSISTENT_WITH_TTL.toFlag(), EphemeralType.TTL.maxValue());\n        CreateResponse response = new CreateResponse();\n        ReplyHeader r = zk.submitRequest(h, request, response, null);\n        Assert.assertEquals(\"EphemeralType.getMaxTTL() should succeed\",\n                            r.getErr(), Code.OK.intValue());\n        Assert.assertNotNull(\"Node should exist\",\n                          zk.exists(path, false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateTTLTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testBadTTLs() throws InterruptedException, KeeperException {\n        RequestHeader h = new RequestHeader(1, ZooDefs.OpCode.createTTL);\n\n        String path = \"/bad_ttl\";\n        CreateTTLRequest request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_WITH_TTL.toFlag(), -100);\n        CreateResponse response = new CreateResponse();\n        ReplyHeader r = zk.submitRequest(h, request, response, null);\n        assertEquals(r.getErr(), Code.BADARGUMENTS.intValue(), \"An invalid CreateTTLRequest should throw BadArguments\");\n        assertNull(zk.exists(path, false), \"An invalid CreateTTLRequest should not result in znode creation\");\n\n        request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_WITH_TTL.toFlag(),\n                                       EphemeralType.TTL.maxValue()\n                                               + 1);\n        response = new CreateResponse();\n        r = zk.submitRequest(h, request, response, null);\n        assertEquals(r.getErr(), Code.BADARGUMENTS.intValue(), \"An invalid CreateTTLRequest should throw BadArguments\");\n        assertNull(zk.exists(path, false), \"An invalid CreateTTLRequest should not result in znode creation\");\n    }\n","date":"2020-08-04 21:01:52","endLine":113,"groupId":"10291","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testBadTTLs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/2c/f5db4a592b4d15614090ec086d802e71e44e05.src","preCode":"    public void testBadTTLs() throws InterruptedException, KeeperException {\n        RequestHeader h = new RequestHeader(1, ZooDefs.OpCode.createTTL);\n\n        String path = \"/bad_ttl\";\n        CreateTTLRequest request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_WITH_TTL.toFlag(), -100);\n        CreateResponse response = new CreateResponse();\n        ReplyHeader r = zk.submitRequest(h, request, response, null);\n        assertEquals(\"An invalid CreateTTLRequest should throw BadArguments\", r.getErr(), Code.BADARGUMENTS.intValue());\n        assertNull(\"An invalid CreateTTLRequest should not result in znode creation\", zk.exists(path, false));\n\n        request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_WITH_TTL.toFlag(),\n                                       EphemeralType.TTL.maxValue()\n                                               + 1);\n        response = new CreateResponse();\n        r = zk.submitRequest(h, request, response, null);\n        assertEquals(\"An invalid CreateTTLRequest should throw BadArguments\", r.getErr(), Code.BADARGUMENTS.intValue());\n        assertNull(\"An invalid CreateTTLRequest should not result in znode creation\", zk.exists(path, false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateTTLTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testMaxTTLs() throws InterruptedException, KeeperException {\n        RequestHeader h = new RequestHeader(1, ZooDefs.OpCode.createTTL);\n\n        String path = \"/bad_ttl\";\n        CreateTTLRequest request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_WITH_TTL.toFlag(), EphemeralType.TTL.maxValue());\n        CreateResponse response = new CreateResponse();\n        ReplyHeader r = zk.submitRequest(h, request, response, null);\n        assertEquals(r.getErr(), Code.OK.intValue(), \"EphemeralType.getMaxTTL() should succeed\");\n        assertNotNull(zk.exists(path, false), \"Node should exist\");\n    }\n","date":"2020-08-04 21:01:52","endLine":125,"groupId":"10291","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testMaxTTLs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/2c/f5db4a592b4d15614090ec086d802e71e44e05.src","preCode":"    public void testMaxTTLs() throws InterruptedException, KeeperException {\n        RequestHeader h = new RequestHeader(1, ZooDefs.OpCode.createTTL);\n\n        String path = \"/bad_ttl\";\n        CreateTTLRequest request = new CreateTTLRequest(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_WITH_TTL.toFlag(), EphemeralType.TTL.maxValue());\n        CreateResponse response = new CreateResponse();\n        ReplyHeader r = zk.submitRequest(h, request, response, null);\n        assertEquals(\"EphemeralType.getMaxTTL() should succeed\", r.getErr(), Code.OK.intValue());\n        assertNotNull(\"Node should exist\", zk.exists(path, false));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CreateTTLTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
