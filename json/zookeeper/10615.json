[{"authorTime":"2019-06-26 16:57:46","codes":[{"authorDate":"2019-06-26 16:57:46","commitOrder":1,"curCode":"    public void testBlankPath() throws Exception {\n        List<Integer> expectedResultCodes = new ArrayList<Integer>();\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY\n                .intValue());\n        expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue());\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY\n                .intValue());\n        expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue());\n\n        \r\n        String expectedErr = \"Path cannot be null\";\n        List<Op> opList = Arrays.asList(Op.delete(\"/multi0\", -1),\n                Op.delete(null, 100), Op.delete(\"/multi2\", 5),\n                Op.delete(\"\", -1));\n        multiHavingErrors(zk, opList, expectedResultCodes, expectedErr);\n    }\n","date":"2019-06-26 16:57:46","endLine":328,"groupId":"3701","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlankPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/04/1f0773807d307e7817b4dada361d6bb5844ab2.src","preCode":"    public void testBlankPath() throws Exception {\n        List<Integer> expectedResultCodes = new ArrayList<Integer>();\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY\n                .intValue());\n        expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue());\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY\n                .intValue());\n        expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue());\n\n        \r\n        String expectedErr = \"Path cannot be null\";\n        List<Op> opList = Arrays.asList(Op.delete(\"/multi0\", -1),\n                Op.delete(null, 100), Op.delete(\"/multi2\", 5),\n                Op.delete(\"\", -1));\n        multiHavingErrors(zk, opList, expectedResultCodes, expectedErr);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/MultiOperationTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"B"},{"authorDate":"2019-06-26 16:57:46","commitOrder":1,"curCode":"    public void testInvalidCreateModeFlag() throws Exception {\n        List<Integer> expectedResultCodes = new ArrayList<Integer>();\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY\n                .intValue());\n        expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue());\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY\n                .intValue());\n\n        int createModeFlag = 6789;\n        List<Op> opList = Arrays.asList(Op.create(\"/multi0\", new byte[0],\n                Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT), Op.create(\n                \"/multi1\", new byte[0], Ids.OPEN_ACL_UNSAFE, createModeFlag),\n                Op.create(\"/multi2\", new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT));\n        String expectedErr = KeeperException.Code.BADARGUMENTS.name();\n        multiHavingErrors(zk, opList, expectedResultCodes, expectedErr);\n    }\n","date":"2019-06-26 16:57:46","endLine":350,"groupId":"138","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidCreateModeFlag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/04/1f0773807d307e7817b4dada361d6bb5844ab2.src","preCode":"    public void testInvalidCreateModeFlag() throws Exception {\n        List<Integer> expectedResultCodes = new ArrayList<Integer>();\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY\n                .intValue());\n        expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue());\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY\n                .intValue());\n\n        int createModeFlag = 6789;\n        List<Op> opList = Arrays.asList(Op.create(\"/multi0\", new byte[0],\n                Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT), Op.create(\n                \"/multi1\", new byte[0], Ids.OPEN_ACL_UNSAFE, createModeFlag),\n                Op.create(\"/multi2\", new byte[0], Ids.OPEN_ACL_UNSAFE,\n                        CreateMode.PERSISTENT));\n        String expectedErr = KeeperException.Code.BADARGUMENTS.name();\n        multiHavingErrors(zk, opList, expectedResultCodes, expectedErr);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/MultiOperationTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"B"}],"commitId":"1b074d6a8a448e1d3d50383a7d6f2e21d5cf1dfc","commitMessage":"@@@ZOOKEEPER-3402: Add multiRead operation\n\nSo.  the possibility of the multi version of getChildren.  getData.  and a common multiRead interface was already mentioned and briefly discussed in the conversation thread of #922.\nThis patch introduces the concept of multiRead operation.\nNote: This is a 'work-in-progress'.  not every comment is added.  and test cases should be extended as well. Currently.  the aim is to decide whether this direction is something that the community would get behind or should fin.\nI've faced more design decision while implementing this (note: I wanted to keep the backward compatibility at all cost).  the more important ones were the following:\n1. Whether the new read operations should be part of Op or should we create new descendant classes of `Op` like `ReadOp` and `WriteOp`. In this case.  I believe it would be unnecessary to create new classes since it would create a lot of code duplication (despite the common ancestor) and the flow of the processing would not be as clean as in the initial state. However.  by simply adding an OpKind enum to the class enables us to ensure the type-safety behavior (read and write operations should not mix) and still preserve the clean processing flow.\n2. At which point of request processing should we capture the mixed (transaction and read operation) multi requests? It seems pretty clear to catch them client side and not create extra work for the server.\n3. Do we even need a `multiRead` operation or this whole improvement could be just part of multi? Well.  the main problem is the following: currently.  on server side (and in general.  everywhere in ZooKeeper) the fact that multi only contains transactions is a heavily used and built upon it. The whole `multi` processing flow should be rewritten from zero and also the server would get a significant extra work for that. So yeah.  it seems pretty clear to me that introducing the `multiRead` operation is beneficial.\n\nHope these thoughts make sense! Any observations.  questions are welcome!\n\nAuthor: szepet <szepet95@gmail.com>\nAuthor: Peter Szecsi <szepet95@gmail.com>\n\nReviewers: fangmin@apache.org.  andor@apache.org\n\nCloses #959 from szepet/ZOOKEEPER-3402 and squashes the following commits:\n\n2f128ef11 [szepet] rephrase exception\n660351cce [Peter Szecsi] Rename MultiTransactionRecord to MultiOperationRecord\n71a6d2e22 [Peter Szecsi] address some review comments\n3cec54850 [szepet] make sure not to expose the internal representation in GetDataResult\nd4c6764ee [szepet] ZOOKEEPER-3402: Add multiRead operation\n","date":"2019-06-26 16:57:46","modifiedFileCount":"11","status":"B","submitter":"szepet"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":2,"curCode":"    public void testBlankPath(boolean useAsync) throws Exception {\n        List<Integer> expectedResultCodes = new ArrayList<Integer>();\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue());\n        expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue());\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue());\n        expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue());\n\n        \r\n        String expectedErr = \"Path cannot be null\";\n        List<Op> opList = Arrays.asList(\n                Op.delete(\"/multi0\", -1),\n                Op.delete(null, 100),\n                Op.delete(\"/multi2\", 5),\n                Op.delete(\"\", -1));\n        multiHavingErrors(zk, opList, expectedResultCodes, expectedErr, useAsync);\n    }\n","date":"2020-08-04 21:01:52","endLine":312,"groupId":"10615","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testBlankPath","params":"(booleanuseAsync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/4f/f593222fe15df710f0d422f0f59b71e3793137.src","preCode":"    public void testBlankPath() throws Exception {\n        List<Integer> expectedResultCodes = new ArrayList<Integer>();\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue());\n        expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue());\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue());\n        expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue());\n\n        \r\n        String expectedErr = \"Path cannot be null\";\n        List<Op> opList = Arrays.asList(\n                Op.delete(\"/multi0\", -1),\n                Op.delete(null, 100),\n                Op.delete(\"/multi2\", 5),\n                Op.delete(\"\", -1));\n        multiHavingErrors(zk, opList, expectedResultCodes, expectedErr);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/MultiOperationTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":2,"curCode":"    public void testInvalidCreateModeFlag(boolean useAsync) throws Exception {\n        List<Integer> expectedResultCodes = new ArrayList<Integer>();\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue());\n        expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue());\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue());\n\n        int createModeFlag = 6789;\n        List<Op> opList = Arrays.asList(\n                Op.create(\"/multi0\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT),\n                Op.create(\"/multi1\", new byte[0], Ids.OPEN_ACL_UNSAFE, createModeFlag),\n                Op.create(\"/multi2\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT));\n        String expectedErr = KeeperException.Code.BADARGUMENTS.name();\n        multiHavingErrors(zk, opList, expectedResultCodes, expectedErr, useAsync);\n    }\n","date":"2020-08-04 21:01:52","endLine":333,"groupId":"10615","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testInvalidCreateModeFlag","params":"(booleanuseAsync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/4f/f593222fe15df710f0d422f0f59b71e3793137.src","preCode":"    public void testInvalidCreateModeFlag() throws Exception {\n        List<Integer> expectedResultCodes = new ArrayList<Integer>();\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue());\n        expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue());\n        expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue());\n\n        int createModeFlag = 6789;\n        List<Op> opList = Arrays.asList(\n                Op.create(\"/multi0\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT),\n                Op.create(\"/multi1\", new byte[0], Ids.OPEN_ACL_UNSAFE, createModeFlag),\n                Op.create(\"/multi2\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT));\n        String expectedErr = KeeperException.Code.BADARGUMENTS.name();\n        multiHavingErrors(zk, opList, expectedResultCodes, expectedErr);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/MultiOperationTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
