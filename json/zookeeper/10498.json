[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testWriterFailure() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        boolean exception = false;\n        try {\n            new AtomicFileWritingIdiom(target, new WriterStatement() {\n                @Override\n                public void write(Writer os) throws IOException {\n                    os.write(\"after\");\n                    os.flush();\n                    assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n                    throw new RuntimeException();\n                }\n            });\n        } catch (RuntimeException ex) {\n            exception = true;\n        }\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        assertTrue(\"should have raised an exception\", exception);\n        \r\n        assertEquals(\"before\", getContent(target));\n        target.delete();\n    }\n","date":"2018-10-19 20:39:50","endLine":137,"groupId":"3159","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriterFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/47/7ac8e333165e0cbab78efa8ca5b8075b69c4e7.src","preCode":"    public void testWriterFailure() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        boolean exception = false;\n        try {\n            new AtomicFileWritingIdiom(target, new WriterStatement() {\n                @Override\n                public void write(Writer os) throws IOException {\n                    os.write(\"after\");\n                    os.flush();\n                    assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n                    throw new RuntimeException();\n                }\n            });\n        } catch (RuntimeException ex) {\n            exception = true;\n        }\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        assertTrue(\"should have raised an exception\", exception);\n        \r\n        assertEquals(\"before\", getContent(target));\n        target.delete();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/AtomicFileWritingIdiomTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testWriterFailureIOException() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        boolean exception = false;\n        try {\n            new AtomicFileWritingIdiom(target, new WriterStatement() {\n                @Override\n                public void write(Writer os) throws IOException {\n                    os.write(\"after\");\n                    os.flush();\n                    assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n                    throw new IOException();\n                }\n            });\n        } catch (IOException ex) {\n            exception = true;\n        }\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        assertTrue(\"should have raised an exception\", exception);\n        \r\n        assertEquals(\"before\", getContent(target));\n        target.delete();\n    }\n","date":"2018-10-19 20:39:50","endLine":191,"groupId":"3159","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriterFailureIOException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/47/7ac8e333165e0cbab78efa8ca5b8075b69c4e7.src","preCode":"    public void testWriterFailureIOException() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        boolean exception = false;\n        try {\n            new AtomicFileWritingIdiom(target, new WriterStatement() {\n                @Override\n                public void write(Writer os) throws IOException {\n                    os.write(\"after\");\n                    os.flush();\n                    assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n                    throw new IOException();\n                }\n            });\n        } catch (IOException ex) {\n            exception = true;\n        }\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        assertTrue(\"should have raised an exception\", exception);\n        \r\n        assertEquals(\"before\", getContent(target));\n        target.delete();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/AtomicFileWritingIdiomTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":2,"curCode":"    public void testWriterFailure() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        boolean exception = false;\n        try {\n            new AtomicFileWritingIdiom(target, new WriterStatement() {\n                @Override\n                public void write(Writer os) throws IOException {\n                    os.write(\"after\");\n                    os.flush();\n                    assertTrue(tmp.exists(), \"implementation of AtomicFileOutputStream has changed, update the test\");\n                    throw new RuntimeException();\n                }\n            });\n        } catch (RuntimeException ex) {\n            exception = true;\n        }\n        assertFalse(tmp.exists(), \"tmp file should have been deleted\");\n        assertTrue(exception, \"should have raised an exception\");\n        \r\n        assertEquals(\"before\", getContent(target));\n        target.delete();\n    }\n","date":"2020-08-04 21:01:52","endLine":137,"groupId":"1903","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriterFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/92/3fc0855c181609e2bd5b8febb87a2bc21d634a.src","preCode":"    public void testWriterFailure() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        boolean exception = false;\n        try {\n            new AtomicFileWritingIdiom(target, new WriterStatement() {\n                @Override\n                public void write(Writer os) throws IOException {\n                    os.write(\"after\");\n                    os.flush();\n                    assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n                    throw new RuntimeException();\n                }\n            });\n        } catch (RuntimeException ex) {\n            exception = true;\n        }\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        assertTrue(\"should have raised an exception\", exception);\n        \r\n        assertEquals(\"before\", getContent(target));\n        target.delete();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/AtomicFileWritingIdiomTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":2,"curCode":"    public void testWriterFailureIOException() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        boolean exception = false;\n        try {\n            new AtomicFileWritingIdiom(target, new WriterStatement() {\n                @Override\n                public void write(Writer os) throws IOException {\n                    os.write(\"after\");\n                    os.flush();\n                    assertTrue(tmp.exists(), \"implementation of AtomicFileOutputStream has changed, update the test\");\n                    throw new IOException();\n                }\n            });\n        } catch (IOException ex) {\n            exception = true;\n        }\n        assertFalse(tmp.exists(), \"tmp file should have been deleted\");\n        assertTrue(exception, \"should have raised an exception\");\n        \r\n        assertEquals(\"before\", getContent(target));\n        target.delete();\n    }\n","date":"2020-08-04 21:01:52","endLine":191,"groupId":"1903","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriterFailureIOException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/92/3fc0855c181609e2bd5b8febb87a2bc21d634a.src","preCode":"    public void testWriterFailureIOException() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        boolean exception = false;\n        try {\n            new AtomicFileWritingIdiom(target, new WriterStatement() {\n                @Override\n                public void write(Writer os) throws IOException {\n                    os.write(\"after\");\n                    os.flush();\n                    assertTrue(\"implementation of AtomicFileOutputStream has changed, update the test\", tmp.exists());\n                    throw new IOException();\n                }\n            });\n        } catch (IOException ex) {\n            exception = true;\n        }\n        assertFalse(\"tmp file should have been deleted\", tmp.exists());\n        assertTrue(\"should have raised an exception\", exception);\n        \r\n        assertEquals(\"before\", getContent(target));\n        target.delete();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/AtomicFileWritingIdiomTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"},{"authorTime":"2021-06-27 15:44:14","codes":[{"authorDate":"2021-06-27 15:44:14","commitOrder":3,"curCode":"    public void testWriterFailure(@TempDir File tmpdir) throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        boolean exception = false;\n        try {\n            new AtomicFileWritingIdiom(target, new WriterStatement() {\n                @Override\n                public void write(Writer os) throws IOException {\n                    os.write(\"after\");\n                    os.flush();\n                    assertTrue(tmp.exists(), \"implementation of AtomicFileOutputStream has changed, update the test\");\n                    throw new RuntimeException();\n                }\n            });\n        } catch (RuntimeException ex) {\n            exception = true;\n        }\n        assertFalse(tmp.exists(), \"tmp file should have been deleted\");\n        assertTrue(exception, \"should have raised an exception\");\n        \r\n        assertEquals(\"before\", getContent(target));\n    }\n","date":"2021-06-27 15:44:14","endLine":126,"groupId":"10498","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testWriterFailure","params":"(@TempDirFiletmpdir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/31/26f005111f02fbe6cb58aeb58b0ec0353cedb5.src","preCode":"    public void testWriterFailure() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        boolean exception = false;\n        try {\n            new AtomicFileWritingIdiom(target, new WriterStatement() {\n                @Override\n                public void write(Writer os) throws IOException {\n                    os.write(\"after\");\n                    os.flush();\n                    assertTrue(tmp.exists(), \"implementation of AtomicFileOutputStream has changed, update the test\");\n                    throw new RuntimeException();\n                }\n            });\n        } catch (RuntimeException ex) {\n            exception = true;\n        }\n        assertFalse(tmp.exists(), \"tmp file should have been deleted\");\n        assertTrue(exception, \"should have raised an exception\");\n        \r\n        assertEquals(\"before\", getContent(target));\n        target.delete();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/AtomicFileWritingIdiomTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2021-06-27 15:44:14","commitOrder":3,"curCode":"    public void testWriterFailureIOException(@TempDir File tmpdir) throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        boolean exception = false;\n        try {\n            new AtomicFileWritingIdiom(target, new WriterStatement() {\n                @Override\n                public void write(Writer os) throws IOException {\n                    os.write(\"after\");\n                    os.flush();\n                    assertTrue(tmp.exists(), \"implementation of AtomicFileOutputStream has changed, update the test\");\n                    throw new IOException();\n                }\n            });\n        } catch (IOException ex) {\n            exception = true;\n        }\n        assertFalse(tmp.exists(), \"tmp file should have been deleted\");\n        assertTrue(exception, \"should have raised an exception\");\n        \r\n        assertEquals(\"before\", getContent(target));\n    }\n","date":"2021-06-27 15:44:14","endLine":178,"groupId":"10498","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testWriterFailureIOException","params":"(@TempDirFiletmpdir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/31/26f005111f02fbe6cb58aeb58b0ec0353cedb5.src","preCode":"    public void testWriterFailureIOException() throws IOException {\n        File target = new File(tmpdir, \"target.txt\");\n        final File tmp = new File(tmpdir, \"target.txt.tmp\");\n        createFile(target, \"before\");\n        assertEquals(\"before\", getContent(target));\n        boolean exception = false;\n        try {\n            new AtomicFileWritingIdiom(target, new WriterStatement() {\n                @Override\n                public void write(Writer os) throws IOException {\n                    os.write(\"after\");\n                    os.flush();\n                    assertTrue(tmp.exists(), \"implementation of AtomicFileOutputStream has changed, update the test\");\n                    throw new IOException();\n                }\n            });\n        } catch (IOException ex) {\n            exception = true;\n        }\n        assertFalse(tmp.exists(), \"tmp file should have been deleted\");\n        assertTrue(exception, \"should have raised an exception\");\n        \r\n        assertEquals(\"before\", getContent(target));\n        target.delete();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/AtomicFileWritingIdiomTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"}],"commitId":"16187c48a1d9b339866b81e69c522021b031c4c3","commitMessage":"@@@ZOOKEEPER-4319: Refactored AtomicFileWritingIdiomTest to use TempDir annotation\n\nThis is a test refactoring. No original assertion was changed nor the original code presented any failing steps.\n\n**Problem:**\nTests that manipulate external file resources need to guarantee resource integrity and availability. Test suite design and maintainability may suffer from the addition of assurance steps to guarantee parallel execution scenarios and resource leakage from failed previous executions.\n\n**Solution:**\nThe use of tempdir annotation assures a temporary directory being created and cleaned up for every test method execution.  thus simplifying test maintenance steps.\n\nAuthor: Elvys Soares <eas5@cin.ufpe.br>\n\nReviewers: maoling <maoling@apache.org>\n\nCloses #1702 from eas5/test_improvement\n","date":"2021-06-27 15:44:14","modifiedFileCount":"1","status":"M","submitter":"Elvys Soares"}]
