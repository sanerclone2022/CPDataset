[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    private void testLocalSessionsWithoutEphemeral(boolean testLeader)\n            throws Exception {\n        String nodePrefix = \"/testLocalSessions-\"\n            + (testLeader ? \"leaderTest-\" : \"followerTest-\");\n        int leaderIdx = qb.getLeaderIndex();\n        Assert.assertFalse(\"No leader in quorum?\", leaderIdx == -1);\n        int followerIdx = (leaderIdx + 1) % 5;\n        int otherFollowerIdx = (leaderIdx + 2) % 5;\n        int testPeerIdx = testLeader ? leaderIdx : followerIdx;\n        String hostPorts[] = qb.hostPort.split(\",\");\n        CountdownWatcher watcher = new CountdownWatcher();\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(\n                hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        for (int i = 0; i < 5; i++) {\n            zk.create(nodePrefix + i, new byte[0],\n                      ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        long localSessionId = zk.getSessionId();\n        byte[] localSessionPwd = zk.getSessionPasswd().clone();\n\n        \r\n        \r\n        try {\n            watcher.reset();\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(\n                    hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher,\n                    localSessionId, localSessionPwd);\n\n            zknew.create(nodePrefix + \"5\", new byte[0],\n                         ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            Assert.fail(\"Connection on the same session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        } catch (KeeperException.ConnectionLossException e) {\n        }\n\n        \r\n        \r\n        if (!testLeader) {\n            try {\n                watcher.reset();\n                DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(\n                        hostPorts[leaderIdx], CONNECTION_TIMEOUT,\n                        watcher, localSessionId, localSessionPwd);\n\n                zknew.create(nodePrefix + \"5\", new byte[0],\n                             ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                             CreateMode.PERSISTENT);\n                Assert.fail(\"Connection on the same session ID should fail.\");\n            } catch (KeeperException.SessionExpiredException e) {\n            } catch (KeeperException.ConnectionLossException e) {\n            }\n        }\n\n        \r\n        \r\n        \r\n        zk.disconnect();\n\n        watcher.reset();\n        zk = new DisconnectableZooKeeper(\n                hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher,\n                localSessionId, localSessionPwd);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        zk.create(nodePrefix + \"6\", new byte[0],\n                  ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        \r\n        \r\n        zk.close();\n        try {\n            watcher.reset();\n            zk = new DisconnectableZooKeeper(\n                    hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher,\n                    localSessionId, localSessionPwd);\n\n            zk.create(nodePrefix + \"7\", new byte[0],\n                      ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            Assert.fail(\"Reconnecting to a closed session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        }\n    }\n","date":"2018-10-19 20:39:50","endLine":157,"groupId":"3089","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalSessionsWithoutEphemeral","params":"(booleantestLeader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/be/9ecb5773c0adf2dc6b77bf8320abe7da37fc91.src","preCode":"    private void testLocalSessionsWithoutEphemeral(boolean testLeader)\n            throws Exception {\n        String nodePrefix = \"/testLocalSessions-\"\n            + (testLeader ? \"leaderTest-\" : \"followerTest-\");\n        int leaderIdx = qb.getLeaderIndex();\n        Assert.assertFalse(\"No leader in quorum?\", leaderIdx == -1);\n        int followerIdx = (leaderIdx + 1) % 5;\n        int otherFollowerIdx = (leaderIdx + 2) % 5;\n        int testPeerIdx = testLeader ? leaderIdx : followerIdx;\n        String hostPorts[] = qb.hostPort.split(\",\");\n        CountdownWatcher watcher = new CountdownWatcher();\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(\n                hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        for (int i = 0; i < 5; i++) {\n            zk.create(nodePrefix + i, new byte[0],\n                      ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        long localSessionId = zk.getSessionId();\n        byte[] localSessionPwd = zk.getSessionPasswd().clone();\n\n        \r\n        \r\n        try {\n            watcher.reset();\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(\n                    hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher,\n                    localSessionId, localSessionPwd);\n\n            zknew.create(nodePrefix + \"5\", new byte[0],\n                         ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            Assert.fail(\"Connection on the same session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        } catch (KeeperException.ConnectionLossException e) {\n        }\n\n        \r\n        \r\n        if (!testLeader) {\n            try {\n                watcher.reset();\n                DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(\n                        hostPorts[leaderIdx], CONNECTION_TIMEOUT,\n                        watcher, localSessionId, localSessionPwd);\n\n                zknew.create(nodePrefix + \"5\", new byte[0],\n                             ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                             CreateMode.PERSISTENT);\n                Assert.fail(\"Connection on the same session ID should fail.\");\n            } catch (KeeperException.SessionExpiredException e) {\n            } catch (KeeperException.ConnectionLossException e) {\n            }\n        }\n\n        \r\n        \r\n        \r\n        zk.disconnect();\n\n        watcher.reset();\n        zk = new DisconnectableZooKeeper(\n                hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher,\n                localSessionId, localSessionPwd);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        zk.create(nodePrefix + \"6\", new byte[0],\n                  ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        \r\n        \r\n        zk.close();\n        try {\n            watcher.reset();\n            zk = new DisconnectableZooKeeper(\n                    hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher,\n                    localSessionId, localSessionPwd);\n\n            zk.create(nodePrefix + \"7\", new byte[0],\n                      ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            Assert.fail(\"Reconnecting to a closed session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionUpgradeTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    private void testUpgradeWithEphemeral(boolean testLeader)\n            throws Exception {\n        String nodePrefix = \"/testUpgrade-\"\n            + (testLeader ? \"leaderTest-\" : \"followerTest-\");\n        int leaderIdx = qb.getLeaderIndex();\n        Assert.assertFalse(\"No leader in quorum?\", leaderIdx == -1);\n        int followerIdx = (leaderIdx + 1) % 5;\n        int otherFollowerIdx = (leaderIdx + 2) % 5;\n        int testPeerIdx = testLeader ? leaderIdx : followerIdx;\n        String hostPorts[] = qb.hostPort.split(\",\");\n\n        CountdownWatcher watcher = new CountdownWatcher();\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(\n                hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        \r\n        for (int i = 0; i < 5; i++) {\n            zk.create(nodePrefix + i, new byte[0],\n                      ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        }\n\n        \r\n        \r\n        long localSessionId = zk.getSessionId();\n        byte[] localSessionPwd = zk.getSessionPasswd().clone();\n\n        zk.disconnect();\n        watcher.reset();\n        zk = new DisconnectableZooKeeper(\n                hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher,\n                localSessionId, localSessionPwd);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        for (int i = 0; i < 5; i++) {\n            Assert.assertNotNull(zk.exists(nodePrefix + i, null));\n        }\n\n        \r\n        \r\n        zk.close();\n\n        try {\n            watcher.reset();\n            zk = new DisconnectableZooKeeper(\n                    hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher,\n                    localSessionId, localSessionPwd);\n            zk.exists(nodePrefix + \"0\", null);\n            Assert.fail(\"Reconnecting to a closed session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        }\n\n        watcher.reset();\n        \r\n        zk = new DisconnectableZooKeeper(\n                hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n        for (int i = 0; i < 5; i++) {\n            Assert.assertNull(zk.exists(nodePrefix + i, null));\n        }\n    }\n","date":"2018-10-19 20:39:50","endLine":231,"groupId":"3244","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpgradeWithEphemeral","params":"(booleantestLeader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/be/9ecb5773c0adf2dc6b77bf8320abe7da37fc91.src","preCode":"    private void testUpgradeWithEphemeral(boolean testLeader)\n            throws Exception {\n        String nodePrefix = \"/testUpgrade-\"\n            + (testLeader ? \"leaderTest-\" : \"followerTest-\");\n        int leaderIdx = qb.getLeaderIndex();\n        Assert.assertFalse(\"No leader in quorum?\", leaderIdx == -1);\n        int followerIdx = (leaderIdx + 1) % 5;\n        int otherFollowerIdx = (leaderIdx + 2) % 5;\n        int testPeerIdx = testLeader ? leaderIdx : followerIdx;\n        String hostPorts[] = qb.hostPort.split(\",\");\n\n        CountdownWatcher watcher = new CountdownWatcher();\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(\n                hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        \r\n        for (int i = 0; i < 5; i++) {\n            zk.create(nodePrefix + i, new byte[0],\n                      ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        }\n\n        \r\n        \r\n        long localSessionId = zk.getSessionId();\n        byte[] localSessionPwd = zk.getSessionPasswd().clone();\n\n        zk.disconnect();\n        watcher.reset();\n        zk = new DisconnectableZooKeeper(\n                hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher,\n                localSessionId, localSessionPwd);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        for (int i = 0; i < 5; i++) {\n            Assert.assertNotNull(zk.exists(nodePrefix + i, null));\n        }\n\n        \r\n        \r\n        zk.close();\n\n        try {\n            watcher.reset();\n            zk = new DisconnectableZooKeeper(\n                    hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher,\n                    localSessionId, localSessionPwd);\n            zk.exists(nodePrefix + \"0\", null);\n            Assert.fail(\"Reconnecting to a closed session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        }\n\n        watcher.reset();\n        \r\n        zk = new DisconnectableZooKeeper(\n                hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n        for (int i = 0; i < 5; i++) {\n            Assert.assertNull(zk.exists(nodePrefix + i, null));\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionUpgradeTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    private void testLocalSessionsWithoutEphemeral(boolean testLeader) throws Exception {\n        String nodePrefix = \"/testLocalSessions-\" + (testLeader ? \"leaderTest-\" : \"followerTest-\");\n        int leaderIdx = qb.getLeaderIndex();\n        assertFalse(\"No leader in quorum?\", leaderIdx == -1);\n        int followerIdx = (leaderIdx + 1) % 5;\n        int otherFollowerIdx = (leaderIdx + 2) % 5;\n        int testPeerIdx = testLeader ? leaderIdx : followerIdx;\n        String[] hostPorts = qb.hostPort.split(\",\");\n        CountdownWatcher watcher = new CountdownWatcher();\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        for (int i = 0; i < 5; i++) {\n            zk.create(nodePrefix + i, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        long localSessionId = zk.getSessionId();\n        byte[] localSessionPwd = zk.getSessionPasswd().clone();\n\n        \r\n        \r\n        try {\n            watcher.reset();\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n\n            zknew.create(nodePrefix + \"5\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            fail(\"Connection on the same session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        } catch (KeeperException.ConnectionLossException e) {\n        }\n\n        \r\n        \r\n        if (!testLeader) {\n            try {\n                watcher.reset();\n                DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[leaderIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n\n                zknew.create(nodePrefix + \"5\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n                fail(\"Connection on the same session ID should fail.\");\n            } catch (KeeperException.SessionExpiredException e) {\n            } catch (KeeperException.ConnectionLossException e) {\n            }\n        }\n\n        \r\n        \r\n        \r\n        zk.disconnect();\n\n        watcher.reset();\n        zk = new DisconnectableZooKeeper(hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        zk.create(nodePrefix + \"6\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        \r\n        \r\n        zk.close();\n        try {\n            watcher.reset();\n            zk = new DisconnectableZooKeeper(hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n\n            zk.create(nodePrefix + \"7\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            fail(\"Reconnecting to a closed session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":144,"groupId":"3089","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalSessionsWithoutEphemeral","params":"(booleantestLeader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3b/8c5836f652113b052164b3cb5d78148607ea55.src","preCode":"    private void testLocalSessionsWithoutEphemeral(boolean testLeader)\n            throws Exception {\n        String nodePrefix = \"/testLocalSessions-\"\n            + (testLeader ? \"leaderTest-\" : \"followerTest-\");\n        int leaderIdx = qb.getLeaderIndex();\n        Assert.assertFalse(\"No leader in quorum?\", leaderIdx == -1);\n        int followerIdx = (leaderIdx + 1) % 5;\n        int otherFollowerIdx = (leaderIdx + 2) % 5;\n        int testPeerIdx = testLeader ? leaderIdx : followerIdx;\n        String hostPorts[] = qb.hostPort.split(\",\");\n        CountdownWatcher watcher = new CountdownWatcher();\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(\n                hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        for (int i = 0; i < 5; i++) {\n            zk.create(nodePrefix + i, new byte[0],\n                      ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        long localSessionId = zk.getSessionId();\n        byte[] localSessionPwd = zk.getSessionPasswd().clone();\n\n        \r\n        \r\n        try {\n            watcher.reset();\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(\n                    hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher,\n                    localSessionId, localSessionPwd);\n\n            zknew.create(nodePrefix + \"5\", new byte[0],\n                         ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            Assert.fail(\"Connection on the same session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        } catch (KeeperException.ConnectionLossException e) {\n        }\n\n        \r\n        \r\n        if (!testLeader) {\n            try {\n                watcher.reset();\n                DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(\n                        hostPorts[leaderIdx], CONNECTION_TIMEOUT,\n                        watcher, localSessionId, localSessionPwd);\n\n                zknew.create(nodePrefix + \"5\", new byte[0],\n                             ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                             CreateMode.PERSISTENT);\n                Assert.fail(\"Connection on the same session ID should fail.\");\n            } catch (KeeperException.SessionExpiredException e) {\n            } catch (KeeperException.ConnectionLossException e) {\n            }\n        }\n\n        \r\n        \r\n        \r\n        zk.disconnect();\n\n        watcher.reset();\n        zk = new DisconnectableZooKeeper(\n                hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher,\n                localSessionId, localSessionPwd);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        zk.create(nodePrefix + \"6\", new byte[0],\n                  ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        \r\n        \r\n        zk.close();\n        try {\n            watcher.reset();\n            zk = new DisconnectableZooKeeper(\n                    hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher,\n                    localSessionId, localSessionPwd);\n\n            zk.create(nodePrefix + \"7\", new byte[0],\n                      ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            Assert.fail(\"Reconnecting to a closed session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionUpgradeTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    private void testUpgradeWithEphemeral(boolean testLeader) throws Exception {\n        String nodePrefix = \"/testUpgrade-\" + (testLeader ? \"leaderTest-\" : \"followerTest-\");\n        int leaderIdx = qb.getLeaderIndex();\n        assertFalse(\"No leader in quorum?\", leaderIdx == -1);\n        int followerIdx = (leaderIdx + 1) % 5;\n        int otherFollowerIdx = (leaderIdx + 2) % 5;\n        int testPeerIdx = testLeader ? leaderIdx : followerIdx;\n        String[] hostPorts = qb.hostPort.split(\",\");\n\n        CountdownWatcher watcher = new CountdownWatcher();\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        \r\n        for (int i = 0; i < 5; i++) {\n            zk.create(nodePrefix + i, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        }\n\n        \r\n        \r\n        long localSessionId = zk.getSessionId();\n        byte[] localSessionPwd = zk.getSessionPasswd().clone();\n\n        zk.disconnect();\n        watcher.reset();\n        zk = new DisconnectableZooKeeper(hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        for (int i = 0; i < 5; i++) {\n            assertNotNull(zk.exists(nodePrefix + i, null));\n        }\n\n        \r\n        \r\n        zk.close();\n\n        try {\n            watcher.reset();\n            zk = new DisconnectableZooKeeper(hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n            zk.exists(nodePrefix + \"0\", null);\n            fail(\"Reconnecting to a closed session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        }\n\n        watcher.reset();\n        \r\n        zk = new DisconnectableZooKeeper(hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n        for (int i = 0; i < 5; i++) {\n            assertNull(zk.exists(nodePrefix + i, null));\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":209,"groupId":"3244","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpgradeWithEphemeral","params":"(booleantestLeader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3b/8c5836f652113b052164b3cb5d78148607ea55.src","preCode":"    private void testUpgradeWithEphemeral(boolean testLeader)\n            throws Exception {\n        String nodePrefix = \"/testUpgrade-\"\n            + (testLeader ? \"leaderTest-\" : \"followerTest-\");\n        int leaderIdx = qb.getLeaderIndex();\n        Assert.assertFalse(\"No leader in quorum?\", leaderIdx == -1);\n        int followerIdx = (leaderIdx + 1) % 5;\n        int otherFollowerIdx = (leaderIdx + 2) % 5;\n        int testPeerIdx = testLeader ? leaderIdx : followerIdx;\n        String hostPorts[] = qb.hostPort.split(\",\");\n\n        CountdownWatcher watcher = new CountdownWatcher();\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(\n                hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        \r\n        for (int i = 0; i < 5; i++) {\n            zk.create(nodePrefix + i, new byte[0],\n                      ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        }\n\n        \r\n        \r\n        long localSessionId = zk.getSessionId();\n        byte[] localSessionPwd = zk.getSessionPasswd().clone();\n\n        zk.disconnect();\n        watcher.reset();\n        zk = new DisconnectableZooKeeper(\n                hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher,\n                localSessionId, localSessionPwd);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        for (int i = 0; i < 5; i++) {\n            Assert.assertNotNull(zk.exists(nodePrefix + i, null));\n        }\n\n        \r\n        \r\n        zk.close();\n\n        try {\n            watcher.reset();\n            zk = new DisconnectableZooKeeper(\n                    hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher,\n                    localSessionId, localSessionPwd);\n            zk.exists(nodePrefix + \"0\", null);\n            Assert.fail(\"Reconnecting to a closed session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        }\n\n        watcher.reset();\n        \r\n        zk = new DisconnectableZooKeeper(\n                hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n        for (int i = 0; i < 5; i++) {\n            Assert.assertNull(zk.exists(nodePrefix + i, null));\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionUpgradeTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    private void testLocalSessionsWithoutEphemeral(boolean testLeader) throws Exception {\n        String nodePrefix = \"/testLocalSessions-\" + (testLeader ? \"leaderTest-\" : \"followerTest-\");\n        int leaderIdx = qb.getLeaderIndex();\n        assertFalse(leaderIdx == -1, \"No leader in quorum?\");\n        int followerIdx = (leaderIdx + 1) % 5;\n        int otherFollowerIdx = (leaderIdx + 2) % 5;\n        int testPeerIdx = testLeader ? leaderIdx : followerIdx;\n        String[] hostPorts = qb.hostPort.split(\",\");\n        CountdownWatcher watcher = new CountdownWatcher();\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        for (int i = 0; i < 5; i++) {\n            zk.create(nodePrefix + i, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        long localSessionId = zk.getSessionId();\n        byte[] localSessionPwd = zk.getSessionPasswd().clone();\n\n        \r\n        \r\n        try {\n            watcher.reset();\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n\n            zknew.create(nodePrefix + \"5\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            fail(\"Connection on the same session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        } catch (KeeperException.ConnectionLossException e) {\n        }\n\n        \r\n        \r\n        if (!testLeader) {\n            try {\n                watcher.reset();\n                DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[leaderIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n\n                zknew.create(nodePrefix + \"5\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n                fail(\"Connection on the same session ID should fail.\");\n            } catch (KeeperException.SessionExpiredException e) {\n            } catch (KeeperException.ConnectionLossException e) {\n            }\n        }\n\n        \r\n        \r\n        \r\n        zk.disconnect();\n\n        watcher.reset();\n        zk = new DisconnectableZooKeeper(hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        zk.create(nodePrefix + \"6\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        \r\n        \r\n        zk.close();\n        try {\n            watcher.reset();\n            zk = new DisconnectableZooKeeper(hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n\n            zk.create(nodePrefix + \"7\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            fail(\"Reconnecting to a closed session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":144,"groupId":"10652","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testLocalSessionsWithoutEphemeral","params":"(booleantestLeader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/11/4667f01dd37a2d72106ceb61c6a5c77a858a8e.src","preCode":"    private void testLocalSessionsWithoutEphemeral(boolean testLeader) throws Exception {\n        String nodePrefix = \"/testLocalSessions-\" + (testLeader ? \"leaderTest-\" : \"followerTest-\");\n        int leaderIdx = qb.getLeaderIndex();\n        assertFalse(\"No leader in quorum?\", leaderIdx == -1);\n        int followerIdx = (leaderIdx + 1) % 5;\n        int otherFollowerIdx = (leaderIdx + 2) % 5;\n        int testPeerIdx = testLeader ? leaderIdx : followerIdx;\n        String[] hostPorts = qb.hostPort.split(\",\");\n        CountdownWatcher watcher = new CountdownWatcher();\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        for (int i = 0; i < 5; i++) {\n            zk.create(nodePrefix + i, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        long localSessionId = zk.getSessionId();\n        byte[] localSessionPwd = zk.getSessionPasswd().clone();\n\n        \r\n        \r\n        try {\n            watcher.reset();\n            DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n\n            zknew.create(nodePrefix + \"5\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            fail(\"Connection on the same session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        } catch (KeeperException.ConnectionLossException e) {\n        }\n\n        \r\n        \r\n        if (!testLeader) {\n            try {\n                watcher.reset();\n                DisconnectableZooKeeper zknew = new DisconnectableZooKeeper(hostPorts[leaderIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n\n                zknew.create(nodePrefix + \"5\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n                fail(\"Connection on the same session ID should fail.\");\n            } catch (KeeperException.SessionExpiredException e) {\n            } catch (KeeperException.ConnectionLossException e) {\n            }\n        }\n\n        \r\n        \r\n        \r\n        zk.disconnect();\n\n        watcher.reset();\n        zk = new DisconnectableZooKeeper(hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        zk.create(nodePrefix + \"6\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        \r\n        \r\n        zk.close();\n        try {\n            watcher.reset();\n            zk = new DisconnectableZooKeeper(hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n\n            zk.create(nodePrefix + \"7\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            fail(\"Reconnecting to a closed session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionUpgradeTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    private void testUpgradeWithEphemeral(boolean testLeader) throws Exception {\n        String nodePrefix = \"/testUpgrade-\" + (testLeader ? \"leaderTest-\" : \"followerTest-\");\n        int leaderIdx = qb.getLeaderIndex();\n        assertFalse(leaderIdx == -1, \"No leader in quorum?\");\n        int followerIdx = (leaderIdx + 1) % 5;\n        int otherFollowerIdx = (leaderIdx + 2) % 5;\n        int testPeerIdx = testLeader ? leaderIdx : followerIdx;\n        String[] hostPorts = qb.hostPort.split(\",\");\n\n        CountdownWatcher watcher = new CountdownWatcher();\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        \r\n        for (int i = 0; i < 5; i++) {\n            zk.create(nodePrefix + i, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        }\n\n        \r\n        \r\n        long localSessionId = zk.getSessionId();\n        byte[] localSessionPwd = zk.getSessionPasswd().clone();\n\n        zk.disconnect();\n        watcher.reset();\n        zk = new DisconnectableZooKeeper(hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        for (int i = 0; i < 5; i++) {\n            assertNotNull(zk.exists(nodePrefix + i, null));\n        }\n\n        \r\n        \r\n        zk.close();\n\n        try {\n            watcher.reset();\n            zk = new DisconnectableZooKeeper(hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n            zk.exists(nodePrefix + \"0\", null);\n            fail(\"Reconnecting to a closed session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        }\n\n        watcher.reset();\n        \r\n        zk = new DisconnectableZooKeeper(hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n        for (int i = 0; i < 5; i++) {\n            assertNull(zk.exists(nodePrefix + i, null));\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":209,"groupId":"10652","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testUpgradeWithEphemeral","params":"(booleantestLeader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/11/4667f01dd37a2d72106ceb61c6a5c77a858a8e.src","preCode":"    private void testUpgradeWithEphemeral(boolean testLeader) throws Exception {\n        String nodePrefix = \"/testUpgrade-\" + (testLeader ? \"leaderTest-\" : \"followerTest-\");\n        int leaderIdx = qb.getLeaderIndex();\n        assertFalse(\"No leader in quorum?\", leaderIdx == -1);\n        int followerIdx = (leaderIdx + 1) % 5;\n        int otherFollowerIdx = (leaderIdx + 2) % 5;\n        int testPeerIdx = testLeader ? leaderIdx : followerIdx;\n        String[] hostPorts = qb.hostPort.split(\",\");\n\n        CountdownWatcher watcher = new CountdownWatcher();\n        DisconnectableZooKeeper zk = new DisconnectableZooKeeper(hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        \r\n        for (int i = 0; i < 5; i++) {\n            zk.create(nodePrefix + i, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n        }\n\n        \r\n        \r\n        long localSessionId = zk.getSessionId();\n        byte[] localSessionPwd = zk.getSessionPasswd().clone();\n\n        zk.disconnect();\n        watcher.reset();\n        zk = new DisconnectableZooKeeper(hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n\n        \r\n        for (int i = 0; i < 5; i++) {\n            assertNotNull(zk.exists(nodePrefix + i, null));\n        }\n\n        \r\n        \r\n        zk.close();\n\n        try {\n            watcher.reset();\n            zk = new DisconnectableZooKeeper(hostPorts[otherFollowerIdx], CONNECTION_TIMEOUT, watcher, localSessionId, localSessionPwd);\n            zk.exists(nodePrefix + \"0\", null);\n            fail(\"Reconnecting to a closed session ID should fail.\");\n        } catch (KeeperException.SessionExpiredException e) {\n        }\n\n        watcher.reset();\n        \r\n        zk = new DisconnectableZooKeeper(hostPorts[testPeerIdx], CONNECTION_TIMEOUT, watcher);\n        watcher.waitForConnected(CONNECTION_TIMEOUT);\n        for (int i = 0; i < 5; i++) {\n            assertNull(zk.exists(nodePrefix + i, null));\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionUpgradeTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
