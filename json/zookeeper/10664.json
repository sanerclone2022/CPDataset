[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testValidateStatOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n        \n        String resp = sendRequest(\"stat\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        \r\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^.*\\\\s\\\\d+\\\\.\\\\d+\\\\.\\\\d+-.*$\", line));\n        Assert.assertTrue(Pattern.matches(\"^Clients:$\", in.readLine()));\n\n        int count = 0;\n        while ((line = in.readLine()).length() > 0) {\n            count++;\n            Assert.assertTrue(Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+\\\\)$\", line));\n        }\n        \r\n        Assert.assertTrue(count >= 2);\n\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Latency min/avg/max: \\\\d+/\\\\d+/\\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Received: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Sent: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Connections: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Outstanding: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Zxid: 0x[\\\\da-fA-F]+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Mode: .*$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Node count: \\\\d+$\", line));\n\n        zk1.close();\n        zk2.close();\n    }\n","date":"2018-10-19 20:39:50","endLine":174,"groupId":"1379","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidateStatOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ad/71eabb3bdf262695f931ad7b823a3b10deb4ad.src","preCode":"    public void testValidateStatOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n        \n        String resp = sendRequest(\"stat\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        \r\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^.*\\\\s\\\\d+\\\\.\\\\d+\\\\.\\\\d+-.*$\", line));\n        Assert.assertTrue(Pattern.matches(\"^Clients:$\", in.readLine()));\n\n        int count = 0;\n        while ((line = in.readLine()).length() > 0) {\n            count++;\n            Assert.assertTrue(Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+\\\\)$\", line));\n        }\n        \r\n        Assert.assertTrue(count >= 2);\n\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Latency min/avg/max: \\\\d+/\\\\d+/\\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Received: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Sent: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Connections: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Outstanding: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Zxid: 0x[\\\\da-fA-F]+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Mode: .*$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Node count: \\\\d+$\", line));\n\n        zk1.close();\n        zk2.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/FourLetterWordsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testValidateConsOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n        \n        String resp = sendRequest(\"cons\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        int count = 0;\n        while ((line = in.readLine()) != null && line.length() > 0) {\n            count++;\n            Assert.assertTrue(line, Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+.*\\\\)$\", line));\n        }\n        \r\n        Assert.assertTrue(count >= 2);\n\n        zk1.close();\n        zk2.close();\n    }\n","date":"2018-10-19 20:39:50","endLine":195,"groupId":"786","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testValidateConsOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ad/71eabb3bdf262695f931ad7b823a3b10deb4ad.src","preCode":"    public void testValidateConsOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n        \n        String resp = sendRequest(\"cons\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        int count = 0;\n        while ((line = in.readLine()) != null && line.length() > 0) {\n            count++;\n            Assert.assertTrue(line, Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+.*\\\\)$\", line));\n        }\n        \r\n        Assert.assertTrue(count >= 2);\n\n        zk1.close();\n        zk2.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/FourLetterWordsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2019-01-07 21:39:13","commitOrder":2,"curCode":"    public void testValidateStatOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n        \n        String resp = sendRequest(\"stat\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        \r\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^.*\\\\s\\\\d+\\\\.\\\\d+\\\\.\\\\d+-.*$\", line));\n        Assert.assertTrue(Pattern.matches(\"^Clients:$\", in.readLine()));\n\n        int count = 0;\n        while ((line = in.readLine()).length() > 0) {\n            count++;\n            Assert.assertTrue(Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+\\\\)$\", line));\n        }\n        \r\n        Assert.assertTrue(count >= 2);\n\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Latency min/avg/max: \\\\d+/-?[0-9]*.?[0-9]*/\\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Received: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Sent: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Connections: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Outstanding: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Zxid: 0x[\\\\da-fA-F]+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Mode: .*$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Node count: \\\\d+$\", line));\n\n        zk1.close();\n        zk2.close();\n    }\n","date":"2019-01-07 21:39:13","endLine":174,"groupId":"1379","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidateStatOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/83/30da23c68b20fc6f06f56724c777cef3540915.src","preCode":"    public void testValidateStatOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n        \n        String resp = sendRequest(\"stat\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        \r\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^.*\\\\s\\\\d+\\\\.\\\\d+\\\\.\\\\d+-.*$\", line));\n        Assert.assertTrue(Pattern.matches(\"^Clients:$\", in.readLine()));\n\n        int count = 0;\n        while ((line = in.readLine()).length() > 0) {\n            count++;\n            Assert.assertTrue(Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+\\\\)$\", line));\n        }\n        \r\n        Assert.assertTrue(count >= 2);\n\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Latency min/avg/max: \\\\d+/\\\\d+/\\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Received: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Sent: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Connections: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Outstanding: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Zxid: 0x[\\\\da-fA-F]+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Mode: .*$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Node count: \\\\d+$\", line));\n\n        zk1.close();\n        zk2.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/FourLetterWordsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2018-10-19 20:39:50","commitOrder":2,"curCode":"    public void testValidateConsOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n        \n        String resp = sendRequest(\"cons\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        int count = 0;\n        while ((line = in.readLine()) != null && line.length() > 0) {\n            count++;\n            Assert.assertTrue(line, Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+.*\\\\)$\", line));\n        }\n        \r\n        Assert.assertTrue(count >= 2);\n\n        zk1.close();\n        zk2.close();\n    }\n","date":"2018-10-19 20:39:50","endLine":195,"groupId":"786","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testValidateConsOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ad/71eabb3bdf262695f931ad7b823a3b10deb4ad.src","preCode":"    public void testValidateConsOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n        \n        String resp = sendRequest(\"cons\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        int count = 0;\n        while ((line = in.readLine()) != null && line.length() > 0) {\n            count++;\n            Assert.assertTrue(line, Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+.*\\\\)$\", line));\n        }\n        \r\n        Assert.assertTrue(count >= 2);\n\n        zk1.close();\n        zk2.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/FourLetterWordsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"N"}],"commitId":"bc992480ec938a3fad4b90f75a52dd186e1b968a","commitMessage":"@@@ZOOKEEPER-2641: AvgRequestLatency metric improves to be more accurate\n\n- some original review historys were included [here ](https://github.com/apache/zookeeper/pull/629)\n- more details in [ZOOKEEPER-2641](https://issues.apache.org/jira/browse/ZOOKEEPER-2641)\n\nAuthor: maoling <maoling199210191@sina.com>\n\nReviewers: andor@apache.org\n\nCloses #748 from maoling/ZOOKEEPER-2641 and squashes the following commits:\n\ne0d4fc890 [maoling] fix the flaky test in the FourLetterWordsTest.testValidateStatOutput\n1739dbf1c [maoling] fix the flaky test in the CommandsTest.testMonitor\n01af4002e [maoling] ZOOKEEPER-2641:AvgRequestLatency metric improves to be more accurate\n","date":"2019-01-07 21:39:13","modifiedFileCount":"12","status":"M","submitter":"maoling"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testValidateStatOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n\n        String resp = sendRequest(\"stat\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        \r\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^.*\\\\s\\\\d+\\\\.\\\\d+\\\\.\\\\d+-.*$\", line));\n        assertTrue(Pattern.matches(\"^Clients:$\", in.readLine()));\n\n        int count = 0;\n        while ((line = in.readLine()).length() > 0) {\n            count++;\n            assertTrue(Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+\\\\)$\", line));\n        }\n        \r\n        assertTrue(count >= 2);\n\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Latency min/avg/max: \\\\d+/-?[0-9]*.?[0-9]*/\\\\d+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Received: \\\\d+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Sent: \\\\d+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Connections: \\\\d+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Outstanding: \\\\d+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Zxid: 0x[\\\\da-fA-F]+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Mode: .*$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Node count: \\\\d+$\", line));\n\n        zk1.close();\n        zk2.close();\n    }\n","date":"2019-08-17 23:13:15","endLine":173,"groupId":"2772","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidateStatOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/e4/ce497106b71be9f81f0309735c7a13a9635739.src","preCode":"    public void testValidateStatOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n        \n        String resp = sendRequest(\"stat\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        \r\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^.*\\\\s\\\\d+\\\\.\\\\d+\\\\.\\\\d+-.*$\", line));\n        Assert.assertTrue(Pattern.matches(\"^Clients:$\", in.readLine()));\n\n        int count = 0;\n        while ((line = in.readLine()).length() > 0) {\n            count++;\n            Assert.assertTrue(Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+\\\\)$\", line));\n        }\n        \r\n        Assert.assertTrue(count >= 2);\n\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Latency min/avg/max: \\\\d+/-?[0-9]*.?[0-9]*/\\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Received: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Sent: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Connections: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Outstanding: \\\\d+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Zxid: 0x[\\\\da-fA-F]+$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Mode: .*$\", line));\n        line = in.readLine();\n        Assert.assertTrue(Pattern.matches(\"^Node count: \\\\d+$\", line));\n\n        zk1.close();\n        zk2.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/FourLetterWordsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testValidateConsOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n\n        String resp = sendRequest(\"cons\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        int count = 0;\n        while ((line = in.readLine()) != null && line.length() > 0) {\n            count++;\n            assertTrue(line, Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+.*\\\\)$\", line));\n        }\n        \r\n        assertTrue(count >= 2);\n\n        zk1.close();\n        zk2.close();\n    }\n","date":"2019-08-17 23:13:15","endLine":194,"groupId":"786","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testValidateConsOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/e4/ce497106b71be9f81f0309735c7a13a9635739.src","preCode":"    public void testValidateConsOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n        \n        String resp = sendRequest(\"cons\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        int count = 0;\n        while ((line = in.readLine()) != null && line.length() > 0) {\n            count++;\n            Assert.assertTrue(line, Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+.*\\\\)$\", line));\n        }\n        \r\n        Assert.assertTrue(count >= 2);\n\n        zk1.close();\n        zk2.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/FourLetterWordsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":4,"curCode":"    public void testValidateStatOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n\n        String resp = sendRequest(\"stat\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        \r\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^.*\\\\s\\\\d+\\\\.\\\\d+\\\\.\\\\d+-.*$\", line));\n        assertTrue(Pattern.matches(\"^Clients:$\", in.readLine()));\n\n        int count = 0;\n        while ((line = in.readLine()).length() > 0) {\n            count++;\n            assertTrue(Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+\\\\)$\", line));\n        }\n        \r\n        assertTrue(count >= 2);\n\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Latency min/avg/max: \\\\d+/-?[0-9]*.?[0-9]*/\\\\d+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Received: \\\\d+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Sent: \\\\d+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Connections: \\\\d+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Outstanding: \\\\d+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Zxid: 0x[\\\\da-fA-F]+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Mode: .*$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Node count: \\\\d+$\", line));\n\n        zk1.close();\n        zk2.close();\n    }\n","date":"2019-08-17 23:13:15","endLine":173,"groupId":"10664","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidateStatOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/e4/ce497106b71be9f81f0309735c7a13a9635739.src","preCode":"    public void testValidateStatOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n\n        String resp = sendRequest(\"stat\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        \r\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^.*\\\\s\\\\d+\\\\.\\\\d+\\\\.\\\\d+-.*$\", line));\n        assertTrue(Pattern.matches(\"^Clients:$\", in.readLine()));\n\n        int count = 0;\n        while ((line = in.readLine()).length() > 0) {\n            count++;\n            assertTrue(Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+\\\\)$\", line));\n        }\n        \r\n        assertTrue(count >= 2);\n\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Latency min/avg/max: \\\\d+/-?[0-9]*.?[0-9]*/\\\\d+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Received: \\\\d+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Sent: \\\\d+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Connections: \\\\d+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Outstanding: \\\\d+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Zxid: 0x[\\\\da-fA-F]+$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Mode: .*$\", line));\n        line = in.readLine();\n        assertTrue(Pattern.matches(\"^Node count: \\\\d+$\", line));\n\n        zk1.close();\n        zk2.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/FourLetterWordsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"},{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testValidateConsOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n\n        String resp = sendRequest(\"cons\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        int count = 0;\n        while ((line = in.readLine()) != null && line.length() > 0) {\n            count++;\n            assertTrue(Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+.*\\\\)$\", line), line);\n        }\n        \r\n        assertTrue(count >= 2);\n\n        zk1.close();\n        zk2.close();\n    }\n","date":"2020-08-04 21:01:52","endLine":193,"groupId":"10664","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testValidateConsOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a6/5cfb410ef5daca15a55f12fe0c374f085cb387.src","preCode":"    public void testValidateConsOutput() throws Exception {\n        ZooKeeper zk1 = createClient();\n        ZooKeeper zk2 = createClient();\n\n        String resp = sendRequest(\"cons\");\n        BufferedReader in = new BufferedReader(new StringReader(resp));\n\n        String line;\n        int count = 0;\n        while ((line = in.readLine()) != null && line.length() > 0) {\n            count++;\n            assertTrue(line, Pattern.matches(\"^ /.*:\\\\d+\\\\[\\\\d+\\\\]\\\\(queued=\\\\d+,recved=\\\\d+,sent=\\\\d+.*\\\\)$\", line));\n        }\n        \r\n        assertTrue(count >= 2);\n\n        zk1.close();\n        zk2.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/FourLetterWordsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
