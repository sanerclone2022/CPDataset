[{"authorTime":"2018-12-15 14:34:54","codes":[{"authorDate":"2018-12-15 14:34:54","commitOrder":1,"curCode":"    public void testCallbackWorksOnFileChanges() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(\n                    tempDir.toPath(),\n                    event -> {\n                        LOG.info(\"Got an update: \" + event.kind() + \" \" + event.context());\n                        synchronized (events) {\n                            events.add(event);\n                            events.notifyAll();\n                        }\n                    });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            for (int i = 0; i < 3; i++) {\n                LOG.info(\"Modifying file, attempt \" + (i + 1));\n                FileUtils.writeStringToFile(\n                        tempFile,\n                        \"Hello world \" + i + \"\\n\",\n                        StandardCharsets.UTF_8,\n                        true);\n                synchronized (events) {\n                    if (events.size() < i + 1) {\n                        events.wait(3000L);\n                    }\n                    assertEquals(\"Wrong number of events\", i + 1, events.size());\n                    WatchEvent<?> event = events.get(i);\n                    assertEquals(StandardWatchEventKinds.ENTRY_MODIFY, event.kind());\n                    assertEquals(tempFile.getName(), event.context().toString());\n                }\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","date":"2018-12-15 14:34:54","endLine":104,"groupId":"2537","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCallbackWorksOnFileChanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/e4/950f38c9eca4732b09bb61719e16aad568bf6b.src","preCode":"    public void testCallbackWorksOnFileChanges() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(\n                    tempDir.toPath(),\n                    event -> {\n                        LOG.info(\"Got an update: \" + event.kind() + \" \" + event.context());\n                        synchronized (events) {\n                            events.add(event);\n                            events.notifyAll();\n                        }\n                    });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            for (int i = 0; i < 3; i++) {\n                LOG.info(\"Modifying file, attempt \" + (i + 1));\n                FileUtils.writeStringToFile(\n                        tempFile,\n                        \"Hello world \" + i + \"\\n\",\n                        StandardCharsets.UTF_8,\n                        true);\n                synchronized (events) {\n                    if (events.size() < i + 1) {\n                        events.wait(3000L);\n                    }\n                    assertEquals(\"Wrong number of events\", i + 1, events.size());\n                    WatchEvent<?> event = events.get(i);\n                    assertEquals(StandardWatchEventKinds.ENTRY_MODIFY, event.kind());\n                    assertEquals(tempFile.getName(), event.context().toString());\n                }\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2018-12-15 14:34:54","commitOrder":1,"curCode":"    public void testCallbackWorksOnFileDeleted() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(\n                    tempDir.toPath(),\n                    event -> {\n                        LOG.info(\"Got an update: \" + event.kind() + \" \" + event.context());\n                        synchronized (events) {\n                            events.add(event);\n                            events.notifyAll();\n                        }\n                    });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            tempFile.delete();\n            synchronized (events) {\n                if (events.isEmpty()) {\n                    events.wait(3000L);\n                }\n                assertFalse(events.isEmpty());\n                WatchEvent<?> event = events.get(0);\n                assertEquals(StandardWatchEventKinds.ENTRY_DELETE, event.kind());\n                assertEquals(tempFile.getName(), event.context().toString());\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","date":"2018-12-15 14:34:54","endLine":211,"groupId":"3740","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCallbackWorksOnFileDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/e4/950f38c9eca4732b09bb61719e16aad568bf6b.src","preCode":"    public void testCallbackWorksOnFileDeleted() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(\n                    tempDir.toPath(),\n                    event -> {\n                        LOG.info(\"Got an update: \" + event.kind() + \" \" + event.context());\n                        synchronized (events) {\n                            events.add(event);\n                            events.notifyAll();\n                        }\n                    });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            tempFile.delete();\n            synchronized (events) {\n                if (events.isEmpty()) {\n                    events.wait(3000L);\n                }\n                assertFalse(events.isEmpty());\n                WatchEvent<?> event = events.get(0);\n                assertEquals(StandardWatchEventKinds.ENTRY_DELETE, event.kind());\n                assertEquals(tempFile.getName(), event.context().toString());\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"e043c322f12d56da0fc88131628edf0731c0f8e4","commitMessage":"@@@ZOOKEEPER-3174: Quorum TLS - support reloading trust/key store\n\nAllow reloading SSL trust stores and key stores from disk when the files on disk change.\n\n## Added support for reloading key/trust stores when the file on disk changes\n- new property `sslQuorumReloadCertFiles` which controls the behavior for reloading the key and trust store files for `QuorumX509Util`. Reloading of key and trust store for `ClientX509Util` is not in this PR but could be added easily\n- this allows a ZK server to keep running on a machine that uses short-lived certs that refresh frequently without having to restart the ZK process.\n\nAuthor: Ilya Maykov <ilyam@fb.com>\n\nReviewers: andor@apache.org\n\nCloses #680 from ivmaykov/ZOOKEEPER-3174\n","date":"2018-12-15 14:34:54","modifiedFileCount":"18","status":"B","submitter":"Ilya Maykov"},{"authorTime":"2018-12-20 22:07:14","codes":[{"authorDate":"2018-12-20 22:07:14","commitOrder":2,"curCode":"    public void testCallbackWorksOnFileChanges() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(\n                    tempDir.toPath(),\n                    event -> {\n                        LOG.info(\"Got an update: \" + event.kind() + \" \" + event.context());\n                        \r\n                        \r\n                        \r\n                        if (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) {\n                            return;\n                        }\n                        synchronized (events) {\n                            events.add(event);\n                            events.notifyAll();\n                        }\n                    });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            for (int i = 0; i < 3; i++) {\n                LOG.info(\"Modifying file, attempt \" + (i + 1));\n                FileUtils.writeStringToFile(\n                        tempFile,\n                        \"Hello world \" + i + \"\\n\",\n                        StandardCharsets.UTF_8,\n                        true);\n                synchronized (events) {\n                    if (events.size() < i + 1) {\n                        events.wait(3000L);\n                    }\n                    assertEquals(\"Wrong number of events\", i + 1, events.size());\n                    WatchEvent<?> event = events.get(i);\n                    assertEquals(StandardWatchEventKinds.ENTRY_MODIFY, event.kind());\n                    assertEquals(tempFile.getName(), event.context().toString());\n                }\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","date":"2018-12-20 22:07:14","endLine":111,"groupId":"2537","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCallbackWorksOnFileChanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/2e/f6a8625b82edf85800d15896e554d7b4e1d2ed.src","preCode":"    public void testCallbackWorksOnFileChanges() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(\n                    tempDir.toPath(),\n                    event -> {\n                        LOG.info(\"Got an update: \" + event.kind() + \" \" + event.context());\n                        synchronized (events) {\n                            events.add(event);\n                            events.notifyAll();\n                        }\n                    });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            for (int i = 0; i < 3; i++) {\n                LOG.info(\"Modifying file, attempt \" + (i + 1));\n                FileUtils.writeStringToFile(\n                        tempFile,\n                        \"Hello world \" + i + \"\\n\",\n                        StandardCharsets.UTF_8,\n                        true);\n                synchronized (events) {\n                    if (events.size() < i + 1) {\n                        events.wait(3000L);\n                    }\n                    assertEquals(\"Wrong number of events\", i + 1, events.size());\n                    WatchEvent<?> event = events.get(i);\n                    assertEquals(StandardWatchEventKinds.ENTRY_MODIFY, event.kind());\n                    assertEquals(tempFile.getName(), event.context().toString());\n                }\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2018-12-20 22:07:14","commitOrder":2,"curCode":"    public void testCallbackWorksOnFileDeleted() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(\n                    tempDir.toPath(),\n                    event -> {\n                        LOG.info(\"Got an update: \" + event.kind() + \" \" + event.context());\n                        \r\n                        \r\n                        \r\n                        if (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) {\n                            return;\n                        }\n                        synchronized (events) {\n                            events.add(event);\n                            events.notifyAll();\n                        }\n                    });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            tempFile.delete();\n            synchronized (events) {\n                if (events.isEmpty()) {\n                    events.wait(3000L);\n                }\n                assertFalse(events.isEmpty());\n                WatchEvent<?> event = events.get(0);\n                assertEquals(StandardWatchEventKinds.ENTRY_DELETE, event.kind());\n                assertEquals(tempFile.getName(), event.context().toString());\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","date":"2018-12-20 22:07:14","endLine":230,"groupId":"3740","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCallbackWorksOnFileDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/2e/f6a8625b82edf85800d15896e554d7b4e1d2ed.src","preCode":"    public void testCallbackWorksOnFileDeleted() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(\n                    tempDir.toPath(),\n                    event -> {\n                        LOG.info(\"Got an update: \" + event.kind() + \" \" + event.context());\n                        synchronized (events) {\n                            events.add(event);\n                            events.notifyAll();\n                        }\n                    });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            tempFile.delete();\n            synchronized (events) {\n                if (events.isEmpty()) {\n                    events.wait(3000L);\n                }\n                assertFalse(events.isEmpty());\n                WatchEvent<?> event = events.get(0);\n                assertEquals(StandardWatchEventKinds.ENTRY_DELETE, event.kind());\n                assertEquals(tempFile.getName(), event.context().toString());\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"}],"commitId":"b8c8937029ca7e15116e91c6a6c436368ac0f9bb","commitMessage":"@@@ZOOKEEPER-3219: Fix flaky FileChangeWatcherTest\n\nMade some changes to handle the random ENTRY_CREATE events that occasionally fire even though the watcher is created after the file is already written to disk. Should make the test more stable.\n\nAuthor: Ilya Maykov <ilyam@fb.com>\n\nCloses #739 from ivmaykov/ZOOKEEPER-3219\n","date":"2018-12-20 22:07:14","modifiedFileCount":"1","status":"M","submitter":"Ilya Maykov"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2019-10-10 20:37:45","commitOrder":3,"curCode":"    public void testCallbackWorksOnFileChanges() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(tempDir.toPath(), event -> {\n                LOG.info(\"Got an update: {} {}\", event.kind(), event.context());\n                \r\n                \r\n                \r\n                if (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) {\n                    return;\n                }\n                synchronized (events) {\n                    events.add(event);\n                    events.notifyAll();\n                }\n            });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            for (int i = 0; i < 3; i++) {\n                LOG.info(\"Modifying file, attempt {}\", (i + 1));\n                FileUtils.writeStringToFile(tempFile, \"Hello world \" + i + \"\\n\", StandardCharsets.UTF_8, true);\n                synchronized (events) {\n                    if (events.size() < i + 1) {\n                        events.wait(3000L);\n                    }\n                    assertEquals(\"Wrong number of events\", i + 1, events.size());\n                    WatchEvent<?> event = events.get(i);\n                    assertEquals(StandardWatchEventKinds.ENTRY_MODIFY, event.kind());\n                    assertEquals(tempFile.getName(), event.context().toString());\n                }\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","date":"2019-10-10 20:37:45","endLine":104,"groupId":"2537","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCallbackWorksOnFileChanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/bb/ac072833f2d8950004796d8fdcb33d756479b2.src","preCode":"    public void testCallbackWorksOnFileChanges() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(tempDir.toPath(), event -> {\n                LOG.info(\"Got an update: \" + event.kind() + \" \" + event.context());\n                \r\n                \r\n                \r\n                if (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) {\n                    return;\n                }\n                synchronized (events) {\n                    events.add(event);\n                    events.notifyAll();\n                }\n            });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            for (int i = 0; i < 3; i++) {\n                LOG.info(\"Modifying file, attempt \" + (i + 1));\n                FileUtils.writeStringToFile(tempFile, \"Hello world \" + i + \"\\n\", StandardCharsets.UTF_8, true);\n                synchronized (events) {\n                    if (events.size() < i + 1) {\n                        events.wait(3000L);\n                    }\n                    assertEquals(\"Wrong number of events\", i + 1, events.size());\n                    WatchEvent<?> event = events.get(i);\n                    assertEquals(StandardWatchEventKinds.ENTRY_MODIFY, event.kind());\n                    assertEquals(tempFile.getName(), event.context().toString());\n                }\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2019-10-10 20:37:45","commitOrder":3,"curCode":"    public void testCallbackWorksOnFileDeleted() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(tempDir.toPath(), event -> {\n                LOG.info(\"Got an update: {} {}\", event.kind(), event.context());\n                \r\n                \r\n                \r\n                if (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) {\n                    return;\n                }\n                synchronized (events) {\n                    events.add(event);\n                    events.notifyAll();\n                }\n            });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            tempFile.delete();\n            synchronized (events) {\n                if (events.isEmpty()) {\n                    events.wait(3000L);\n                }\n                assertFalse(events.isEmpty());\n                WatchEvent<?> event = events.get(0);\n                assertEquals(StandardWatchEventKinds.ENTRY_DELETE, event.kind());\n                assertEquals(tempFile.getName(), event.context().toString());\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","date":"2019-10-10 20:37:45","endLine":217,"groupId":"3740","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCallbackWorksOnFileDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/bb/ac072833f2d8950004796d8fdcb33d756479b2.src","preCode":"    public void testCallbackWorksOnFileDeleted() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(tempDir.toPath(), event -> {\n                LOG.info(\"Got an update: \" + event.kind() + \" \" + event.context());\n                \r\n                \r\n                \r\n                if (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) {\n                    return;\n                }\n                synchronized (events) {\n                    events.add(event);\n                    events.notifyAll();\n                }\n            });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            tempFile.delete();\n            synchronized (events) {\n                if (events.isEmpty()) {\n                    events.wait(3000L);\n                }\n                assertFalse(events.isEmpty());\n                WatchEvent<?> event = events.get(0);\n                assertEquals(StandardWatchEventKinds.ENTRY_DELETE, event.kind());\n                assertEquals(tempFile.getName(), event.context().toString());\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"},{"authorTime":"2020-05-04 20:17:33","codes":[{"authorDate":"2020-05-04 20:17:33","commitOrder":4,"curCode":"    public void testCallbackWorksOnFileChanges() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(tempDir.toPath(), event -> {\n                LOG.info(\"Got an update: {} {}\", event.kind(), event.context());\n                \r\n                \r\n                \r\n                if (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) {\n                    return;\n                }\n                synchronized (events) {\n                    events.add(event);\n                    events.notifyAll();\n                }\n            });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            for (int i = 0; i < 3; i++) {\n                LOG.info(\"Modifying file, attempt {}\", (i + 1));\n                FileUtils.writeStringToFile(tempFile, \"Hello world \" + i + \"\\n\", StandardCharsets.UTF_8, true);\n                synchronized (events) {\n                    if (events.size() < i + 1) {\n                        events.wait(FS_TIMEOUT);\n                    }\n                    assertEquals(\"Wrong number of events\", i + 1, events.size());\n                    WatchEvent<?> event = events.get(i);\n                    assertEquals(StandardWatchEventKinds.ENTRY_MODIFY, event.kind());\n                    assertEquals(tempFile.getName(), event.context().toString());\n                }\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","date":"2020-05-04 20:17:33","endLine":106,"groupId":"2537","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCallbackWorksOnFileChanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/61/9ab1d9767b0be52a64f643f712396c5e8ff947.src","preCode":"    public void testCallbackWorksOnFileChanges() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(tempDir.toPath(), event -> {\n                LOG.info(\"Got an update: {} {}\", event.kind(), event.context());\n                \r\n                \r\n                \r\n                if (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) {\n                    return;\n                }\n                synchronized (events) {\n                    events.add(event);\n                    events.notifyAll();\n                }\n            });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            for (int i = 0; i < 3; i++) {\n                LOG.info(\"Modifying file, attempt {}\", (i + 1));\n                FileUtils.writeStringToFile(tempFile, \"Hello world \" + i + \"\\n\", StandardCharsets.UTF_8, true);\n                synchronized (events) {\n                    if (events.size() < i + 1) {\n                        events.wait(3000L);\n                    }\n                    assertEquals(\"Wrong number of events\", i + 1, events.size());\n                    WatchEvent<?> event = events.get(i);\n                    assertEquals(StandardWatchEventKinds.ENTRY_MODIFY, event.kind());\n                    assertEquals(tempFile.getName(), event.context().toString());\n                }\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-05-04 20:17:33","commitOrder":4,"curCode":"    public void testCallbackWorksOnFileDeleted() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(tempDir.toPath(), event -> {\n                LOG.info(\"Got an update: {} {}\", event.kind(), event.context());\n                \r\n                \r\n                \r\n                if (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) {\n                    return;\n                }\n                synchronized (events) {\n                    events.add(event);\n                    events.notifyAll();\n                }\n            });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            tempFile.delete();\n            synchronized (events) {\n                if (events.isEmpty()) {\n                    events.wait(FS_TIMEOUT);\n                }\n                assertFalse(events.isEmpty());\n                WatchEvent<?> event = events.get(0);\n                assertEquals(StandardWatchEventKinds.ENTRY_DELETE, event.kind());\n                assertEquals(tempFile.getName(), event.context().toString());\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","date":"2020-05-04 20:17:33","endLine":219,"groupId":"3740","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCallbackWorksOnFileDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/61/9ab1d9767b0be52a64f643f712396c5e8ff947.src","preCode":"    public void testCallbackWorksOnFileDeleted() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(tempDir.toPath(), event -> {\n                LOG.info(\"Got an update: {} {}\", event.kind(), event.context());\n                \r\n                \r\n                \r\n                if (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) {\n                    return;\n                }\n                synchronized (events) {\n                    events.add(event);\n                    events.notifyAll();\n                }\n            });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            tempFile.delete();\n            synchronized (events) {\n                if (events.isEmpty()) {\n                    events.wait(3000L);\n                }\n                assertFalse(events.isEmpty());\n                WatchEvent<?> event = events.get(0);\n                assertEquals(StandardWatchEventKinds.ENTRY_DELETE, event.kind());\n                assertEquals(tempFile.getName(), event.context().toString());\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"}],"commitId":"391cb4aa6b54e19a028215e1340232a114c23ed3","commitMessage":"@@@ZOOKEEPER-3813: FileChangeWatcherTest is broken on Mac\n\nThis patch will increase the FS wait timeout to give Mac OSX longer time to detect file modifications.\n\nAuthor: Andor Molnar <andor@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Christopher Tubbs.  Mate Szalay-Beko\n\nCloses #1345 from anmolnar/ZOOKEEPER-3813\n","date":"2020-05-04 20:17:33","modifiedFileCount":"1","status":"M","submitter":"Andor Molnar"},{"authorTime":"2020-05-04 20:17:33","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":5,"curCode":"    public void testCallbackWorksOnFileChanges() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(tempDir.toPath(), event -> {\n                LOG.info(\"Got an update: {} {}\", event.kind(), event.context());\n                \r\n                \r\n                \r\n                if (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) {\n                    return;\n                }\n                synchronized (events) {\n                    events.add(event);\n                    events.notifyAll();\n                }\n            });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            for (int i = 0; i < 3; i++) {\n                LOG.info(\"Modifying file, attempt {}\", (i + 1));\n                FileUtils.writeStringToFile(tempFile, \"Hello world \" + i + \"\\n\", StandardCharsets.UTF_8, true);\n                synchronized (events) {\n                    if (events.size() < i + 1) {\n                        events.wait(FS_TIMEOUT);\n                    }\n                    assertEquals(i + 1, events.size(), \"Wrong number of events\");\n                    WatchEvent<?> event = events.get(i);\n                    assertEquals(StandardWatchEventKinds.ENTRY_MODIFY, event.kind());\n                    assertEquals(tempFile.getName(), event.context().toString());\n                }\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":106,"groupId":"10428","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testCallbackWorksOnFileChanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/4a/e5ab68f9398b47c8210320cc715662343619ad.src","preCode":"    public void testCallbackWorksOnFileChanges() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(tempDir.toPath(), event -> {\n                LOG.info(\"Got an update: {} {}\", event.kind(), event.context());\n                \r\n                \r\n                \r\n                if (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) {\n                    return;\n                }\n                synchronized (events) {\n                    events.add(event);\n                    events.notifyAll();\n                }\n            });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            for (int i = 0; i < 3; i++) {\n                LOG.info(\"Modifying file, attempt {}\", (i + 1));\n                FileUtils.writeStringToFile(tempFile, \"Hello world \" + i + \"\\n\", StandardCharsets.UTF_8, true);\n                synchronized (events) {\n                    if (events.size() < i + 1) {\n                        events.wait(FS_TIMEOUT);\n                    }\n                    assertEquals(\"Wrong number of events\", i + 1, events.size());\n                    WatchEvent<?> event = events.get(i);\n                    assertEquals(StandardWatchEventKinds.ENTRY_MODIFY, event.kind());\n                    assertEquals(tempFile.getName(), event.context().toString());\n                }\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-05-04 20:17:33","commitOrder":5,"curCode":"    public void testCallbackWorksOnFileDeleted() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(tempDir.toPath(), event -> {\n                LOG.info(\"Got an update: {} {}\", event.kind(), event.context());\n                \r\n                \r\n                \r\n                if (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) {\n                    return;\n                }\n                synchronized (events) {\n                    events.add(event);\n                    events.notifyAll();\n                }\n            });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            tempFile.delete();\n            synchronized (events) {\n                if (events.isEmpty()) {\n                    events.wait(FS_TIMEOUT);\n                }\n                assertFalse(events.isEmpty());\n                WatchEvent<?> event = events.get(0);\n                assertEquals(StandardWatchEventKinds.ENTRY_DELETE, event.kind());\n                assertEquals(tempFile.getName(), event.context().toString());\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","date":"2020-05-04 20:17:33","endLine":219,"groupId":"10428","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCallbackWorksOnFileDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/61/9ab1d9767b0be52a64f643f712396c5e8ff947.src","preCode":"    public void testCallbackWorksOnFileDeleted() throws IOException, InterruptedException {\n        FileChangeWatcher watcher = null;\n        try {\n            final List<WatchEvent<?>> events = new ArrayList<>();\n            watcher = new FileChangeWatcher(tempDir.toPath(), event -> {\n                LOG.info(\"Got an update: {} {}\", event.kind(), event.context());\n                \r\n                \r\n                \r\n                if (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) {\n                    return;\n                }\n                synchronized (events) {\n                    events.add(event);\n                    events.notifyAll();\n                }\n            });\n            watcher.start();\n            watcher.waitForState(FileChangeWatcher.State.RUNNING);\n            Thread.sleep(1000L); \r\n            tempFile.delete();\n            synchronized (events) {\n                if (events.isEmpty()) {\n                    events.wait(FS_TIMEOUT);\n                }\n                assertFalse(events.isEmpty());\n                WatchEvent<?> event = events.get(0);\n                assertEquals(StandardWatchEventKinds.ENTRY_DELETE, event.kind());\n                assertEquals(tempFile.getName(), event.context().toString());\n            }\n        } finally {\n            if (watcher != null) {\n                watcher.stop();\n                watcher.waitForState(FileChangeWatcher.State.STOPPED);\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"N"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
