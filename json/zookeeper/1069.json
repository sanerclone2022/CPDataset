[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":2,"curCode":"    public void testChecksums() throws Exception {\n        File tmpDir = ClientBase.createTmpDir();\n        ClientBase.setupTestEnv();\n        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);\n        SyncRequestProcessor.setSnapCount(150);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        Assert.assertTrue(\"waiting for server being up\",\n                ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            for (int i =0; i < 2000; i++) {\n                zk.create(\"/crctest- \" + i , (\"/crctest- \" + i).getBytes(),\n                        Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        Assert.assertTrue(\"waiting for server down\",\n                   ClientBase.waitForServerDown(HOSTPORT,\n                           ClientBase.CONNECTION_TIMEOUT));\n\n        File versionDir = new File(tmpDir, \"version-2\");\n        File[] list = versionDir.listFiles();\n        \r\n        \r\n        File snapFile = null;\n        File logFile = null;\n        for (File file: list) {\n            LOG.info(\"file is \" + file);\n            if (file.getName().startsWith(\"log\")) {\n                logFile = file;\n                corruptFile(logFile);\n            }\n        }\n        FileTxnLog flog = new FileTxnLog(versionDir);\n        TxnIterator itr = flog.read(1);\n        \r\n        try {\n            while (itr.next()) {\n            }\n            Assert.assertTrue(false);\n        } catch(IOException ie) {\n            LOG.info(\"crc corruption\", ie);\n        }\n        itr.close();\n        \r\n        FileSnap snap = new FileSnap(versionDir);\n        List<File> snapFiles = snap.findNRecentSnapshots(2);\n        snapFile = snapFiles.get(0);\n        corruptFile(snapFile);\n        boolean cfile = false;\n        try {\n            cfile = getCheckSum(snap, snapFile);\n        } catch(IOException ie) {\n            \r\n            \r\n            \r\n            snapFile = snapFiles.get(1);\n            corruptFile(snapFile);\n            cfile = getCheckSum(snap, snapFile);\n        }\n        Assert.assertTrue(cfile);\n   }\n","date":"2018-10-05 20:25:43","endLine":174,"groupId":"1061","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testChecksums","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/da/4ebaffccc71e4b8a3dfe0c81a6a75b00c53b9b.src","preCode":"    public void testChecksums() throws Exception {\n        File tmpDir = ClientBase.createTmpDir();\n        ClientBase.setupTestEnv();\n        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);\n        SyncRequestProcessor.setSnapCount(150);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        Assert.assertTrue(\"waiting for server being up\",\n                ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            for (int i =0; i < 2000; i++) {\n                zk.create(\"/crctest- \" + i , (\"/crctest- \" + i).getBytes(),\n                        Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        Assert.assertTrue(\"waiting for server down\",\n                   ClientBase.waitForServerDown(HOSTPORT,\n                           ClientBase.CONNECTION_TIMEOUT));\n\n        File versionDir = new File(tmpDir, \"version-2\");\n        File[] list = versionDir.listFiles();\n        \r\n        \r\n        File snapFile = null;\n        File logFile = null;\n        for (File file: list) {\n            LOG.info(\"file is \" + file);\n            if (file.getName().startsWith(\"log\")) {\n                logFile = file;\n                corruptFile(logFile);\n            }\n        }\n        FileTxnLog flog = new FileTxnLog(versionDir);\n        TxnIterator itr = flog.read(1);\n        \r\n        try {\n            while (itr.next()) {\n            }\n            Assert.assertTrue(false);\n        } catch(IOException ie) {\n            LOG.info(\"crc corruption\", ie);\n        }\n        itr.close();\n        \r\n        FileSnap snap = new FileSnap(versionDir);\n        List<File> snapFiles = snap.findNRecentSnapshots(2);\n        snapFile = snapFiles.get(0);\n        corruptFile(snapFile);\n        boolean cfile = false;\n        try {\n            cfile = getCheckSum(snap, snapFile);\n        } catch(IOException ie) {\n            \r\n            \r\n            \r\n            snapFile = snapFiles.get(1);\n            corruptFile(snapFile);\n            cfile = getCheckSum(snap, snapFile);\n        }\n        Assert.assertTrue(cfile);\n   }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CRCTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"NB"},{"authorDate":"2018-10-19 20:39:50","commitOrder":2,"curCode":"    public void testSnapshot() throws Exception {\n        File snapDir = new File(testData, \"invalidsnap\");\n        ZooKeeperServer zks = new ZooKeeperServer(snapDir, snapDir, 3000);\n        SyncRequestProcessor.setSnapCount(1000);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        Assert.assertTrue(\"waiting for server being up\",\n                ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            \r\n            \r\n\n            Assert.assertTrue(zk.exists(\"/9/9/8\", false) != null);\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        Assert.assertTrue(\"waiting for server down\",\n                   ClientBase.waitForServerDown(HOSTPORT,\n                           ClientBase.CONNECTION_TIMEOUT));\n\n    }\n","date":"2018-10-19 20:39:50","endLine":109,"groupId":"264","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/df/32ba8e726f0d2d40db36fd7cbd5c1607ce56b9.src","preCode":"    public void testSnapshot() throws Exception {\n        File snapDir = new File(testData, \"invalidsnap\");\n        ZooKeeperServer zks = new ZooKeeperServer(snapDir, snapDir, 3000);\n        SyncRequestProcessor.setSnapCount(1000);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        Assert.assertTrue(\"waiting for server being up\",\n                ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            \r\n            \r\n\n            Assert.assertTrue(zk.exists(\"/9/9/8\", false) != null);\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        Assert.assertTrue(\"waiting for server down\",\n                   ClientBase.waitForServerDown(HOSTPORT,\n                           ClientBase.CONNECTION_TIMEOUT));\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/InvalidSnapshotTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"M","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testChecksums() throws Exception {\n        File tmpDir = ClientBase.createTmpDir();\n        ClientBase.setupTestEnv();\n        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);\n        SyncRequestProcessor.setSnapCount(150);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        assertTrue(\"waiting for server being up\", ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            for (int i = 0; i < 2000; i++) {\n                zk.create(\"/crctest- \" + i, (\"/crctest- \" + i).getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        assertTrue(\"waiting for server down\", ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT));\n\n        File versionDir = new File(tmpDir, \"version-2\");\n        File[] list = versionDir.listFiles();\n        \r\n        \r\n        File snapFile = null;\n        File logFile = null;\n        for (File file : list) {\n            LOG.info(\"file is \" + file);\n            if (file.getName().startsWith(\"log\")) {\n                logFile = file;\n                corruptFile(logFile);\n            }\n        }\n        FileTxnLog flog = new FileTxnLog(versionDir);\n        TxnIterator itr = flog.read(1);\n        \r\n        try {\n            while (itr.next()) {\n            }\n            assertTrue(false);\n        } catch (IOException ie) {\n            LOG.info(\"crc corruption\", ie);\n        }\n        itr.close();\n        \r\n        FileSnap snap = new FileSnap(versionDir);\n        List<File> snapFiles = snap.findNRecentSnapshots(2);\n        snapFile = snapFiles.get(0);\n        corruptFile(snapFile);\n        boolean cfile = false;\n        try {\n            cfile = getCheckSum(snap, snapFile);\n        } catch (IOException ie) {\n            \r\n            \r\n            \r\n            snapFile = snapFiles.get(1);\n            corruptFile(snapFile);\n            cfile = getCheckSum(snap, snapFile);\n        }\n        assertTrue(cfile);\n    }\n","date":"2019-08-17 23:13:15","endLine":167,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testChecksums","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/bc/8840729b92381888c213611f315d1336a0e38e.src","preCode":"    public void testChecksums() throws Exception {\n        File tmpDir = ClientBase.createTmpDir();\n        ClientBase.setupTestEnv();\n        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);\n        SyncRequestProcessor.setSnapCount(150);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        Assert.assertTrue(\"waiting for server being up\",\n                ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            for (int i =0; i < 2000; i++) {\n                zk.create(\"/crctest- \" + i , (\"/crctest- \" + i).getBytes(),\n                        Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        Assert.assertTrue(\"waiting for server down\",\n                   ClientBase.waitForServerDown(HOSTPORT,\n                           ClientBase.CONNECTION_TIMEOUT));\n\n        File versionDir = new File(tmpDir, \"version-2\");\n        File[] list = versionDir.listFiles();\n        \r\n        \r\n        File snapFile = null;\n        File logFile = null;\n        for (File file: list) {\n            LOG.info(\"file is \" + file);\n            if (file.getName().startsWith(\"log\")) {\n                logFile = file;\n                corruptFile(logFile);\n            }\n        }\n        FileTxnLog flog = new FileTxnLog(versionDir);\n        TxnIterator itr = flog.read(1);\n        \r\n        try {\n            while (itr.next()) {\n            }\n            Assert.assertTrue(false);\n        } catch(IOException ie) {\n            LOG.info(\"crc corruption\", ie);\n        }\n        itr.close();\n        \r\n        FileSnap snap = new FileSnap(versionDir);\n        List<File> snapFiles = snap.findNRecentSnapshots(2);\n        snapFile = snapFiles.get(0);\n        corruptFile(snapFile);\n        boolean cfile = false;\n        try {\n            cfile = getCheckSum(snap, snapFile);\n        } catch(IOException ie) {\n            \r\n            \r\n            \r\n            snapFile = snapFiles.get(1);\n            corruptFile(snapFile);\n            cfile = getCheckSum(snap, snapFile);\n        }\n        Assert.assertTrue(cfile);\n   }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CRCTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testSnapshot() throws Exception {\n        File snapDir = new File(testData, \"invalidsnap\");\n        ZooKeeperServer zks = new ZooKeeperServer(snapDir, snapDir, 3000);\n        SyncRequestProcessor.setSnapCount(1000);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        assertTrue(\"waiting for server being up\", ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            \r\n            \r\n\n            assertTrue(zk.exists(\"/9/9/8\", false) != null);\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        assertTrue(\"waiting for server down\", ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT));\n\n    }\n","date":"2019-08-17 23:13:15","endLine":103,"groupId":"1934","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/9f/458cb77769feabe3df13ab2632a4a34f4ff25f.src","preCode":"    public void testSnapshot() throws Exception {\n        File snapDir = new File(testData, \"invalidsnap\");\n        ZooKeeperServer zks = new ZooKeeperServer(snapDir, snapDir, 3000);\n        SyncRequestProcessor.setSnapCount(1000);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        Assert.assertTrue(\"waiting for server being up\",\n                ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            \r\n            \r\n\n            Assert.assertTrue(zk.exists(\"/9/9/8\", false) != null);\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        Assert.assertTrue(\"waiting for server down\",\n                   ClientBase.waitForServerDown(HOSTPORT,\n                           ClientBase.CONNECTION_TIMEOUT));\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/InvalidSnapshotTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-10-10 20:37:45","commitOrder":4,"curCode":"    public void testChecksums() throws Exception {\n        File tmpDir = ClientBase.createTmpDir();\n        ClientBase.setupTestEnv();\n        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);\n        SyncRequestProcessor.setSnapCount(150);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        assertTrue(\"waiting for server being up\", ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            for (int i = 0; i < 2000; i++) {\n                zk.create(\"/crctest- \" + i, (\"/crctest- \" + i).getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        assertTrue(\"waiting for server down\", ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT));\n\n        File versionDir = new File(tmpDir, \"version-2\");\n        File[] list = versionDir.listFiles();\n        \r\n        \r\n        File snapFile = null;\n        File logFile = null;\n        for (File file : list) {\n            LOG.info(\"file is {}\", file);\n            if (file.getName().startsWith(\"log\")) {\n                logFile = file;\n                corruptFile(logFile);\n            }\n        }\n        FileTxnLog flog = new FileTxnLog(versionDir);\n        TxnIterator itr = flog.read(1);\n        \r\n        try {\n            while (itr.next()) {\n                \r\n            }\n            fail();\n        } catch (IOException ie) {\n            LOG.warn(\"crc corruption\", ie);\n        }\n        itr.close();\n        \r\n        FileSnap snap = new FileSnap(versionDir);\n        List<File> snapFiles = snap.findNRecentSnapshots(2);\n        snapFile = snapFiles.get(0);\n        corruptFile(snapFile);\n        boolean cfile = false;\n        try {\n            cfile = getCheckSum(snap, snapFile);\n        } catch (IOException ie) {\n            \r\n            \r\n            \r\n            snapFile = snapFiles.get(1);\n            corruptFile(snapFile);\n            cfile = getCheckSum(snap, snapFile);\n        }\n        assertTrue(cfile);\n    }\n","date":"2019-10-10 20:37:45","endLine":169,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testChecksums","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c5/7a65f791214141a0b0ee231ea1193016ff7b57.src","preCode":"    public void testChecksums() throws Exception {\n        File tmpDir = ClientBase.createTmpDir();\n        ClientBase.setupTestEnv();\n        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);\n        SyncRequestProcessor.setSnapCount(150);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        assertTrue(\"waiting for server being up\", ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            for (int i = 0; i < 2000; i++) {\n                zk.create(\"/crctest- \" + i, (\"/crctest- \" + i).getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        assertTrue(\"waiting for server down\", ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT));\n\n        File versionDir = new File(tmpDir, \"version-2\");\n        File[] list = versionDir.listFiles();\n        \r\n        \r\n        File snapFile = null;\n        File logFile = null;\n        for (File file : list) {\n            LOG.info(\"file is \" + file);\n            if (file.getName().startsWith(\"log\")) {\n                logFile = file;\n                corruptFile(logFile);\n            }\n        }\n        FileTxnLog flog = new FileTxnLog(versionDir);\n        TxnIterator itr = flog.read(1);\n        \r\n        try {\n            while (itr.next()) {\n            }\n            assertTrue(false);\n        } catch (IOException ie) {\n            LOG.info(\"crc corruption\", ie);\n        }\n        itr.close();\n        \r\n        FileSnap snap = new FileSnap(versionDir);\n        List<File> snapFiles = snap.findNRecentSnapshots(2);\n        snapFile = snapFiles.get(0);\n        corruptFile(snapFile);\n        boolean cfile = false;\n        try {\n            cfile = getCheckSum(snap, snapFile);\n        } catch (IOException ie) {\n            \r\n            \r\n            \r\n            snapFile = snapFiles.get(1);\n            corruptFile(snapFile);\n            cfile = getCheckSum(snap, snapFile);\n        }\n        assertTrue(cfile);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CRCTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":4,"curCode":"    public void testSnapshot() throws Exception {\n        File snapDir = new File(testData, \"invalidsnap\");\n        ZooKeeperServer zks = new ZooKeeperServer(snapDir, snapDir, 3000);\n        SyncRequestProcessor.setSnapCount(1000);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        assertTrue(\"waiting for server being up\", ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            \r\n            \r\n\n            assertTrue(zk.exists(\"/9/9/8\", false) != null);\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        assertTrue(\"waiting for server down\", ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT));\n\n    }\n","date":"2019-08-17 23:13:15","endLine":103,"groupId":"1934","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/9f/458cb77769feabe3df13ab2632a4a34f4ff25f.src","preCode":"    public void testSnapshot() throws Exception {\n        File snapDir = new File(testData, \"invalidsnap\");\n        ZooKeeperServer zks = new ZooKeeperServer(snapDir, snapDir, 3000);\n        SyncRequestProcessor.setSnapCount(1000);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        assertTrue(\"waiting for server being up\", ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            \r\n            \r\n\n            assertTrue(zk.exists(\"/9/9/8\", false) != null);\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        assertTrue(\"waiting for server down\", ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT));\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/InvalidSnapshotTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"N"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":5,"curCode":"    public void testChecksums() throws Exception {\n        File tmpDir = ClientBase.createTmpDir();\n        ClientBase.setupTestEnv();\n        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);\n        SyncRequestProcessor.setSnapCount(150);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        assertTrue(ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT), \"waiting for server being up\");\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            for (int i = 0; i < 2000; i++) {\n                zk.create(\"/crctest- \" + i, (\"/crctest- \" + i).getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        assertTrue(ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT), \"waiting for server down\");\n\n        File versionDir = new File(tmpDir, \"version-2\");\n        File[] list = versionDir.listFiles();\n        \r\n        \r\n        File snapFile = null;\n        File logFile = null;\n        for (File file : list) {\n            LOG.info(\"file is {}\", file);\n            if (file.getName().startsWith(\"log\")) {\n                logFile = file;\n                corruptFile(logFile);\n            }\n        }\n        FileTxnLog flog = new FileTxnLog(versionDir);\n        TxnIterator itr = flog.read(1);\n        \r\n        try {\n            while (itr.next()) {\n                \r\n            }\n            fail();\n        } catch (IOException ie) {\n            LOG.warn(\"crc corruption\", ie);\n        }\n        itr.close();\n        \r\n        FileSnap snap = new FileSnap(versionDir);\n        List<File> snapFiles = snap.findNRecentSnapshots(2);\n        snapFile = snapFiles.get(0);\n        corruptFile(snapFile);\n        boolean cfile = false;\n        try {\n            cfile = getCheckSum(snap, snapFile);\n        } catch (IOException ie) {\n            \r\n            \r\n            \r\n            snapFile = snapFiles.get(1);\n            corruptFile(snapFile);\n            cfile = getCheckSum(snap, snapFile);\n        }\n        assertTrue(cfile);\n    }\n","date":"2020-08-04 21:01:52","endLine":169,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testChecksums","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/bc/fdfcc69315541cec2572c6435042f52d3c9868.src","preCode":"    public void testChecksums() throws Exception {\n        File tmpDir = ClientBase.createTmpDir();\n        ClientBase.setupTestEnv();\n        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);\n        SyncRequestProcessor.setSnapCount(150);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        assertTrue(\"waiting for server being up\", ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            for (int i = 0; i < 2000; i++) {\n                zk.create(\"/crctest- \" + i, (\"/crctest- \" + i).getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        assertTrue(\"waiting for server down\", ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT));\n\n        File versionDir = new File(tmpDir, \"version-2\");\n        File[] list = versionDir.listFiles();\n        \r\n        \r\n        File snapFile = null;\n        File logFile = null;\n        for (File file : list) {\n            LOG.info(\"file is {}\", file);\n            if (file.getName().startsWith(\"log\")) {\n                logFile = file;\n                corruptFile(logFile);\n            }\n        }\n        FileTxnLog flog = new FileTxnLog(versionDir);\n        TxnIterator itr = flog.read(1);\n        \r\n        try {\n            while (itr.next()) {\n                \r\n            }\n            fail();\n        } catch (IOException ie) {\n            LOG.warn(\"crc corruption\", ie);\n        }\n        itr.close();\n        \r\n        FileSnap snap = new FileSnap(versionDir);\n        List<File> snapFiles = snap.findNRecentSnapshots(2);\n        snapFile = snapFiles.get(0);\n        corruptFile(snapFile);\n        boolean cfile = false;\n        try {\n            cfile = getCheckSum(snap, snapFile);\n        } catch (IOException ie) {\n            \r\n            \r\n            \r\n            snapFile = snapFiles.get(1);\n            corruptFile(snapFile);\n            cfile = getCheckSum(snap, snapFile);\n        }\n        assertTrue(cfile);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CRCTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":5,"curCode":"    public void testSnapshot() throws Exception {\n        File snapDir = new File(testData, \"invalidsnap\");\n        ZooKeeperServer zks = new ZooKeeperServer(snapDir, snapDir, 3000);\n        SyncRequestProcessor.setSnapCount(1000);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        assertTrue(ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT), \"waiting for server being up\");\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            \r\n            \r\n\n            assertTrue(zk.exists(\"/9/9/8\", false) != null);\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        assertTrue(ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT), \"waiting for server down\");\n\n    }\n","date":"2020-08-04 21:01:52","endLine":91,"groupId":"2882","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/80/267054a26c019d79a665c6009e7d21f0b0b0de.src","preCode":"    public void testSnapshot() throws Exception {\n        File snapDir = new File(testData, \"invalidsnap\");\n        ZooKeeperServer zks = new ZooKeeperServer(snapDir, snapDir, 3000);\n        SyncRequestProcessor.setSnapCount(1000);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        assertTrue(\"waiting for server being up\", ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            \r\n            \r\n\n            assertTrue(zk.exists(\"/9/9/8\", false) != null);\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        assertTrue(\"waiting for server down\", ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT));\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/InvalidSnapshotTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"},{"authorTime":"2021-03-09 22:25:27","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":6,"curCode":"    public void testChecksums() throws Exception {\n        File tmpDir = ClientBase.createTmpDir();\n        ClientBase.setupTestEnv();\n        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);\n        SyncRequestProcessor.setSnapCount(150);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        assertTrue(ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT), \"waiting for server being up\");\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            for (int i = 0; i < 2000; i++) {\n                zk.create(\"/crctest- \" + i, (\"/crctest- \" + i).getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        assertTrue(ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT), \"waiting for server down\");\n\n        File versionDir = new File(tmpDir, \"version-2\");\n        File[] list = versionDir.listFiles();\n        \r\n        \r\n        File snapFile = null;\n        File logFile = null;\n        for (File file : list) {\n            LOG.info(\"file is {}\", file);\n            if (file.getName().startsWith(\"log\")) {\n                logFile = file;\n                corruptFile(logFile);\n            }\n        }\n        FileTxnLog flog = new FileTxnLog(versionDir);\n        TxnIterator itr = flog.read(1);\n        \r\n        try {\n            while (itr.next()) {\n                \r\n            }\n            fail();\n        } catch (IOException ie) {\n            LOG.warn(\"crc corruption\", ie);\n        }\n        itr.close();\n        \r\n        FileSnap snap = new FileSnap(versionDir);\n        List<File> snapFiles = snap.findNRecentSnapshots(2);\n        snapFile = snapFiles.get(0);\n        corruptFile(snapFile);\n        boolean cfile = false;\n        try {\n            cfile = getCheckSum(snap, snapFile);\n        } catch (IOException ie) {\n            \r\n            \r\n            \r\n            snapFile = snapFiles.get(1);\n            corruptFile(snapFile);\n            cfile = getCheckSum(snap, snapFile);\n        }\n        assertTrue(cfile);\n    }\n","date":"2020-08-04 21:01:52","endLine":169,"groupId":"1069","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testChecksums","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/bc/fdfcc69315541cec2572c6435042f52d3c9868.src","preCode":"    public void testChecksums() throws Exception {\n        File tmpDir = ClientBase.createTmpDir();\n        ClientBase.setupTestEnv();\n        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);\n        SyncRequestProcessor.setSnapCount(150);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        assertTrue(ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT), \"waiting for server being up\");\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            for (int i = 0; i < 2000; i++) {\n                zk.create(\"/crctest- \" + i, (\"/crctest- \" + i).getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        assertTrue(ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT), \"waiting for server down\");\n\n        File versionDir = new File(tmpDir, \"version-2\");\n        File[] list = versionDir.listFiles();\n        \r\n        \r\n        File snapFile = null;\n        File logFile = null;\n        for (File file : list) {\n            LOG.info(\"file is {}\", file);\n            if (file.getName().startsWith(\"log\")) {\n                logFile = file;\n                corruptFile(logFile);\n            }\n        }\n        FileTxnLog flog = new FileTxnLog(versionDir);\n        TxnIterator itr = flog.read(1);\n        \r\n        try {\n            while (itr.next()) {\n                \r\n            }\n            fail();\n        } catch (IOException ie) {\n            LOG.warn(\"crc corruption\", ie);\n        }\n        itr.close();\n        \r\n        FileSnap snap = new FileSnap(versionDir);\n        List<File> snapFiles = snap.findNRecentSnapshots(2);\n        snapFile = snapFiles.get(0);\n        corruptFile(snapFile);\n        boolean cfile = false;\n        try {\n            cfile = getCheckSum(snap, snapFile);\n        } catch (IOException ie) {\n            \r\n            \r\n            \r\n            snapFile = snapFiles.get(1);\n            corruptFile(snapFile);\n            cfile = getCheckSum(snap, snapFile);\n        }\n        assertTrue(cfile);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/CRCTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"N"},{"authorDate":"2021-03-09 22:25:27","commitOrder":6,"curCode":"    public void testSnapshot() throws Exception {\n        File origSnapDir = new File(testData, \"invalidsnap\");\n\n        \r\n        File snapDir = ClientBase.createTmpDir();\n        FileUtils.copyDirectory(origSnapDir, snapDir);\n\n        ZooKeeperServer zks = new ZooKeeperServer(snapDir, snapDir, 3000);\n        SyncRequestProcessor.setSnapCount(1000);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        assertTrue(ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT), \"waiting for server being up\");\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            \r\n            \r\n\n            assertTrue(zk.exists(\"/9/9/8\", false) != null);\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        assertTrue(ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT), \"waiting for server down\");\n\n    }\n","date":"2021-03-09 22:25:27","endLine":117,"groupId":"1069","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c4/7a60f357c97458f3eca5163f9ec6b6b89cb45d.src","preCode":"    public void testSnapshot() throws Exception {\n        File snapDir = new File(testData, \"invalidsnap\");\n        ZooKeeperServer zks = new ZooKeeperServer(snapDir, snapDir, 3000);\n        SyncRequestProcessor.setSnapCount(1000);\n        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n        f.startup(zks);\n        LOG.info(\"starting up the zookeeper server .. waiting\");\n        assertTrue(ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT), \"waiting for server being up\");\n        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n        try {\n            \r\n            \r\n\n            assertTrue(zk.exists(\"/9/9/8\", false) != null);\n        } finally {\n            zk.close();\n        }\n        f.shutdown();\n        zks.shutdown();\n        assertTrue(ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT), \"waiting for server down\");\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/InvalidSnapshotTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"0ab7766a8a968e03c7b3bb7c1b9d42af9eea152e","commitMessage":"@@@ZOOKEEPER-4232: InvalidSnapshotTest corrupts its own test data\n\n`InvalidSnapshotTest.testSnapshot` starts an instance of\n`ZooKeeperServer` on the version-controlled `resources/data/invalidsnap`\ndirectory.  which.  as a side-effect.  \\\"fixes\\\" the following\nsnapshot?which was broken on purpose (see ZOOKEEPER-367):\n\n`zookeeper-server/src/test/resources/data/invalidsnap/version-2/snapshot.83f`\n\nThis status quo creates a number of problems:\n\n1.  It makes the test ineffective after the first run;\n2.  The file shows as modified in version control tools.  which can be\n    annoying;\n3.  The \\\"fixed\\\" snapshot can end up being committed by mistake. \n    invalidating the test.\n\n(\\#3 is not theoretical; that \\\"fixed\\\" snapshot frequently shows up in\npull requests.  and was recently merged into master.).\n\nAuthor: Damien Diederen <dd@crosstwine.com>\n\nReviewers: Mohammad Arshad <arshad@apache.org>\n\nCloses #1622 from ztzg/ZOOKEEPER-4232-invalid-snapshot-is-invalid and squashes the following commits:\n\n8b48eea98 [Damien Diederen] ZOOKEEPER-4232: Ensure that ZOOKEEPER-367 test data fails to parse\n92507563d [Damien Diederen] ZOOKEEPER-4232: Run InvalidSnapshotTest on a copy of test data\ndcf5604b9 [Damien Diederen] ZOOKEEPER-4232: Restore test data for ZOOKEEPER-367\n","date":"2021-03-09 22:25:27","modifiedFileCount":"1","status":"M","submitter":"Damien Diederen"}]
