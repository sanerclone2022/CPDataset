[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testAddSessionAfterSessionExpiry() throws Exception {\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById\n                .get(sessionId);\n        Assert.assertNotNull(\"Sessionid:\" + sessionId\n                + \" doesn't exists in sessiontracker\", sessionImpl);\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        \r\n        sessionTrackerImpl.trackSession(sessionId, sessionTimeout);\n        try {\n            sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n            Assert.fail(\"Should throw session expiry exception \"\n                    + \"as the session has expired and closed\");\n        } catch (KeeperException.SessionExpiredException e) {\n            \r\n        }\n        Assert.assertTrue(\"Session didn't expired\", sessionImpl.isClosing());\n        Assert.assertFalse(\"Session didn't expired\", sessionTrackerImpl\n                .touchSession(sessionId, sessionTimeout));\n        Assert.assertEquals(\n                \"Duplicate session expiry request has been generated\", 1,\n                firstProcessor.getCountOfCloseSessionReq());\n    }\n","date":"2018-10-05 20:25:43","endLine":85,"groupId":"3174","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddSessionAfterSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ab/e9aa0bc561fe3f0a7a27d1dc54ab7398b6bf59.src","preCode":"    public void testAddSessionAfterSessionExpiry() throws Exception {\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById\n                .get(sessionId);\n        Assert.assertNotNull(\"Sessionid:\" + sessionId\n                + \" doesn't exists in sessiontracker\", sessionImpl);\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        \r\n        sessionTrackerImpl.trackSession(sessionId, sessionTimeout);\n        try {\n            sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n            Assert.fail(\"Should throw session expiry exception \"\n                    + \"as the session has expired and closed\");\n        } catch (KeeperException.SessionExpiredException e) {\n            \r\n        }\n        Assert.assertTrue(\"Session didn't expired\", sessionImpl.isClosing());\n        Assert.assertFalse(\"Session didn't expired\", sessionTrackerImpl\n                .touchSession(sessionId, sessionTimeout));\n        Assert.assertEquals(\n                \"Duplicate session expiry request has been generated\", 1,\n                firstProcessor.getCountOfCloseSessionReq());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/SessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testCloseSessionRequestAfterSessionExpiry() throws Exception {\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById\n                .get(sessionId);\n        Assert.assertNotNull(\"Sessionid:\" + sessionId\n                + \" doesn't exists in sessiontracker\", sessionImpl);\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        sessionTrackerImpl.removeSession(sessionId);\n        SessionImpl actualSession = sessionTrackerImpl.sessionsById\n                .get(sessionId);\n        Assert.assertNull(\"Session:\" + sessionId\n                + \" still exists after removal\", actualSession);\n    }\n","date":"2018-10-05 20:25:43","endLine":117,"groupId":"3174","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloseSessionRequestAfterSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ab/e9aa0bc561fe3f0a7a27d1dc54ab7398b6bf59.src","preCode":"    public void testCloseSessionRequestAfterSessionExpiry() throws Exception {\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById\n                .get(sessionId);\n        Assert.assertNotNull(\"Sessionid:\" + sessionId\n                + \" doesn't exists in sessiontracker\", sessionImpl);\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        sessionTrackerImpl.removeSession(sessionId);\n        SessionImpl actualSession = sessionTrackerImpl.sessionsById\n                .get(sessionId);\n        Assert.assertNull(\"Session:\" + sessionId\n                + \" still exists after removal\", actualSession);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/SessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2019-07-09 05:26:11","commitOrder":2,"curCode":"    public void testAddSessionAfterSessionExpiry() throws Exception {\n        RequestThrottler.setMaxRequests(0);\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById\n                .get(sessionId);\n        Assert.assertNotNull(\"Sessionid:\" + sessionId\n                + \" doesn't exists in sessiontracker\", sessionImpl);\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        \r\n        sessionTrackerImpl.trackSession(sessionId, sessionTimeout);\n        try {\n            sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n            Assert.fail(\"Should throw session expiry exception \"\n                    + \"as the session has expired and closed\");\n        } catch (KeeperException.SessionExpiredException e) {\n            \r\n        }\n        Assert.assertTrue(\"Session didn't expired\", sessionImpl.isClosing());\n        Assert.assertFalse(\"Session didn't expired\", sessionTrackerImpl\n                .touchSession(sessionId, sessionTimeout));\n        Assert.assertEquals(\n                \"Duplicate session expiry request has been generated\", 1,\n                firstProcessor.getCountOfCloseSessionReq());\n    }\n","date":"2019-07-09 05:26:11","endLine":88,"groupId":"3174","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddSessionAfterSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c2/e0b12000e4e50dfe4b625096e5702251e08dbd.src","preCode":"    public void testAddSessionAfterSessionExpiry() throws Exception {\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById\n                .get(sessionId);\n        Assert.assertNotNull(\"Sessionid:\" + sessionId\n                + \" doesn't exists in sessiontracker\", sessionImpl);\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        \r\n        sessionTrackerImpl.trackSession(sessionId, sessionTimeout);\n        try {\n            sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n            Assert.fail(\"Should throw session expiry exception \"\n                    + \"as the session has expired and closed\");\n        } catch (KeeperException.SessionExpiredException e) {\n            \r\n        }\n        Assert.assertTrue(\"Session didn't expired\", sessionImpl.isClosing());\n        Assert.assertFalse(\"Session didn't expired\", sessionTrackerImpl\n                .touchSession(sessionId, sessionTimeout));\n        Assert.assertEquals(\n                \"Duplicate session expiry request has been generated\", 1,\n                firstProcessor.getCountOfCloseSessionReq());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/SessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2018-10-05 20:25:43","commitOrder":2,"curCode":"    public void testCloseSessionRequestAfterSessionExpiry() throws Exception {\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById\n                .get(sessionId);\n        Assert.assertNotNull(\"Sessionid:\" + sessionId\n                + \" doesn't exists in sessiontracker\", sessionImpl);\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        sessionTrackerImpl.removeSession(sessionId);\n        SessionImpl actualSession = sessionTrackerImpl.sessionsById\n                .get(sessionId);\n        Assert.assertNull(\"Session:\" + sessionId\n                + \" still exists after removal\", actualSession);\n    }\n","date":"2018-10-05 20:25:43","endLine":117,"groupId":"3174","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloseSessionRequestAfterSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ab/e9aa0bc561fe3f0a7a27d1dc54ab7398b6bf59.src","preCode":"    public void testCloseSessionRequestAfterSessionExpiry() throws Exception {\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById\n                .get(sessionId);\n        Assert.assertNotNull(\"Sessionid:\" + sessionId\n                + \" doesn't exists in sessiontracker\", sessionImpl);\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        sessionTrackerImpl.removeSession(sessionId);\n        SessionImpl actualSession = sessionTrackerImpl.sessionsById\n                .get(sessionId);\n        Assert.assertNull(\"Session:\" + sessionId\n                + \" still exists after removal\", actualSession);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/SessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"}],"commitId":"7b3de52cdb15068aa343879ae283f4e456c68f39","commitMessage":"@@@ZOOKEEPER-3243: Add server-side request throttling\n\nAuthor: Jie Huang <jiehuang@fb.com>\nAuthor: Joseph Blomstedt <jdb@fb.com>\n\nReviewers: Michael Han <hanm@apache.org>\n\nCloses #986 from jhuan31/ZOOKEEPER-3243\n","date":"2019-07-09 05:26:11","modifiedFileCount":"9","status":"M","submitter":"Jie Huang"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testAddSessionAfterSessionExpiry() throws Exception {\n        RequestThrottler.setMaxRequests(0);\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById.get(sessionId);\n        assertNotNull(\"Sessionid:\" + sessionId + \" doesn't exists in sessiontracker\", sessionImpl);\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        \r\n        sessionTrackerImpl.trackSession(sessionId, sessionTimeout);\n        try {\n            sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n            fail(\"Should throw session expiry exception \" + \"as the session has expired and closed\");\n        } catch (KeeperException.SessionExpiredException e) {\n            \r\n        }\n        assertTrue(\"Session didn't expired\", sessionImpl.isClosing());\n        assertFalse(\"Session didn't expired\", sessionTrackerImpl.touchSession(sessionId, sessionTimeout));\n        assertEquals(\"Duplicate session expiry request has been generated\", 1, firstProcessor.getCountOfCloseSessionReq());\n    }\n","date":"2019-08-17 23:13:15","endLine":83,"groupId":"3174","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddSessionAfterSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c0/08550775876f1bb8bcfb8d25c94451662fc80e.src","preCode":"    public void testAddSessionAfterSessionExpiry() throws Exception {\n        RequestThrottler.setMaxRequests(0);\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById\n                .get(sessionId);\n        Assert.assertNotNull(\"Sessionid:\" + sessionId\n                + \" doesn't exists in sessiontracker\", sessionImpl);\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        \r\n        sessionTrackerImpl.trackSession(sessionId, sessionTimeout);\n        try {\n            sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n            Assert.fail(\"Should throw session expiry exception \"\n                    + \"as the session has expired and closed\");\n        } catch (KeeperException.SessionExpiredException e) {\n            \r\n        }\n        Assert.assertTrue(\"Session didn't expired\", sessionImpl.isClosing());\n        Assert.assertFalse(\"Session didn't expired\", sessionTrackerImpl\n                .touchSession(sessionId, sessionTimeout));\n        Assert.assertEquals(\n                \"Duplicate session expiry request has been generated\", 1,\n                firstProcessor.getCountOfCloseSessionReq());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/SessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testCloseSessionRequestAfterSessionExpiry() throws Exception {\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById.get(sessionId);\n        assertNotNull(\"Sessionid:\" + sessionId + \" doesn't exists in sessiontracker\", sessionImpl);\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        sessionTrackerImpl.removeSession(sessionId);\n        SessionImpl actualSession = sessionTrackerImpl.sessionsById.get(sessionId);\n        assertNull(\"Session:\" + sessionId + \" still exists after removal\", actualSession);\n    }\n","date":"2019-08-17 23:13:15","endLine":111,"groupId":"3174","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloseSessionRequestAfterSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c0/08550775876f1bb8bcfb8d25c94451662fc80e.src","preCode":"    public void testCloseSessionRequestAfterSessionExpiry() throws Exception {\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById\n                .get(sessionId);\n        Assert.assertNotNull(\"Sessionid:\" + sessionId\n                + \" doesn't exists in sessiontracker\", sessionImpl);\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        sessionTrackerImpl.removeSession(sessionId);\n        SessionImpl actualSession = sessionTrackerImpl.sessionsById\n                .get(sessionId);\n        Assert.assertNull(\"Session:\" + sessionId\n                + \" still exists after removal\", actualSession);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/SessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testAddSessionAfterSessionExpiry() throws Exception {\n        RequestThrottler.setMaxRequests(0);\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById.get(sessionId);\n        assertNotNull(sessionImpl, \"Sessionid:\" + sessionId + \" doesn't exists in sessiontracker\");\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        \r\n        sessionTrackerImpl.trackSession(sessionId, sessionTimeout);\n        try {\n            sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n            fail(\"Should throw session expiry exception \" + \"as the session has expired and closed\");\n        } catch (KeeperException.SessionExpiredException e) {\n            \r\n        }\n        assertTrue(sessionImpl.isClosing(), \"Session didn't expired\");\n        assertFalse(sessionTrackerImpl.touchSession(sessionId, sessionTimeout), \"Session didn't expired\");\n        assertEquals(1, firstProcessor.getCountOfCloseSessionReq(), \"Duplicate session expiry request has been generated\");\n    }\n","date":"2020-08-04 21:01:52","endLine":85,"groupId":"1092","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testAddSessionAfterSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3b/23040744110a00d57c66da15259f6bc8aa70b6.src","preCode":"    public void testAddSessionAfterSessionExpiry() throws Exception {\n        RequestThrottler.setMaxRequests(0);\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById.get(sessionId);\n        assertNotNull(\"Sessionid:\" + sessionId + \" doesn't exists in sessiontracker\", sessionImpl);\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        \r\n        sessionTrackerImpl.trackSession(sessionId, sessionTimeout);\n        try {\n            sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n            fail(\"Should throw session expiry exception \" + \"as the session has expired and closed\");\n        } catch (KeeperException.SessionExpiredException e) {\n            \r\n        }\n        assertTrue(\"Session didn't expired\", sessionImpl.isClosing());\n        assertFalse(\"Session didn't expired\", sessionTrackerImpl.touchSession(sessionId, sessionTimeout));\n        assertEquals(\"Duplicate session expiry request has been generated\", 1, firstProcessor.getCountOfCloseSessionReq());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/SessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testCloseSessionRequestAfterSessionExpiry() throws Exception {\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById.get(sessionId);\n        assertNotNull(sessionImpl, \"Sessionid:\" + sessionId + \" doesn't exists in sessiontracker\");\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        sessionTrackerImpl.removeSession(sessionId);\n        SessionImpl actualSession = sessionTrackerImpl.sessionsById.get(sessionId);\n        assertNull(actualSession, \"Session:\" + sessionId + \" still exists after removal\");\n    }\n","date":"2020-08-04 21:01:52","endLine":114,"groupId":"1092","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testCloseSessionRequestAfterSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3b/23040744110a00d57c66da15259f6bc8aa70b6.src","preCode":"    public void testCloseSessionRequestAfterSessionExpiry() throws Exception {\n        ZooKeeperServer zks = setupSessionTracker();\n\n        latch = new CountDownLatch(1);\n        zks.sessionTracker.trackSession(sessionId, sessionTimeout);\n        SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker;\n        SessionImpl sessionImpl = sessionTrackerImpl.sessionsById.get(sessionId);\n        assertNotNull(\"Sessionid:\" + sessionId + \" doesn't exists in sessiontracker\", sessionImpl);\n\n        \r\n        Object sessionOwner = new Object();\n        sessionTrackerImpl.checkSession(sessionId, sessionOwner);\n\n        \r\n        latch.await(sessionTimeout * 2, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        sessionTrackerImpl.removeSession(sessionId);\n        SessionImpl actualSession = sessionTrackerImpl.sessionsById.get(sessionId);\n        assertNull(\"Session:\" + sessionId + \" still exists after removal\", actualSession);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/SessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
