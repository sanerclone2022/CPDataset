[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testUnnecessarySnap() throws Exception {\n        testPopulatedLeaderConversation(new PopulatedLeaderConversation() {\n            @Override\n            public void converseWithLeader(InputArchive ia, OutputArchive oa,\n                    Leader l, long zxid) throws Exception {\n\n                Assert.assertEquals(1, l.self.getAcceptedEpoch());\n                Assert.assertEquals(1, l.self.getCurrentEpoch());\n\n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte liBytes[] = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li,\n                        ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 1,\n                        liBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.LEADERINFO, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(2, 0), qp.getZxid());\n                Assert.assertEquals(ByteBuffer.wrap(qp.getData()).getInt(),\n                        0x10000);\n                Assert.assertEquals(2, l.self.getAcceptedEpoch());\n                Assert.assertEquals(1, l.self.getCurrentEpoch());\n\n                byte epochBytes[] = new byte[4];\n                final ByteBuffer wrappedEpochBytes = ByteBuffer.wrap(epochBytes);\n                wrappedEpochBytes.putInt(1);\n                qp = new QuorumPacket(Leader.ACKEPOCH, zxid, epochBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.DIFF, qp.getType());\n\n            }\n        }, 2);\n    }\n","date":"2018-10-05 20:25:43","endLine":557,"groupId":"1765","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnnecessarySnap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/bd9d88222077beb805541ba9fd2c22644bce83.src","preCode":"    public void testUnnecessarySnap() throws Exception {\n        testPopulatedLeaderConversation(new PopulatedLeaderConversation() {\n            @Override\n            public void converseWithLeader(InputArchive ia, OutputArchive oa,\n                    Leader l, long zxid) throws Exception {\n\n                Assert.assertEquals(1, l.self.getAcceptedEpoch());\n                Assert.assertEquals(1, l.self.getCurrentEpoch());\n\n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte liBytes[] = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li,\n                        ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 1,\n                        liBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.LEADERINFO, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(2, 0), qp.getZxid());\n                Assert.assertEquals(ByteBuffer.wrap(qp.getData()).getInt(),\n                        0x10000);\n                Assert.assertEquals(2, l.self.getAcceptedEpoch());\n                Assert.assertEquals(1, l.self.getCurrentEpoch());\n\n                byte epochBytes[] = new byte[4];\n                final ByteBuffer wrappedEpochBytes = ByteBuffer.wrap(epochBytes);\n                wrappedEpochBytes.putInt(1);\n                qp = new QuorumPacket(Leader.ACKEPOCH, zxid, epochBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.DIFF, qp.getType());\n\n            }\n        }, 2);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":520,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testAbandonBeforeACKEpoch() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l)\n                    throws IOException, InterruptedException {\n                            \t\n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte liBytes[] = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li,\n                        ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0,\n                        liBytes, null);\n                oa.writeRecord(qp, null);\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.LEADERINFO, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                Assert.assertEquals(ByteBuffer.wrap(qp.getData()).getInt(),\n                        0x10000);                \n                Thread.sleep(l.self.getInitLimit()*l.self.getTickTime() + 5000);\n                \n                \r\n                Assert.assertEquals(0, l.self.getCurrentEpoch());\t\t\t\n            }\n        });\n    }\n","date":"2018-10-05 20:25:43","endLine":1181,"groupId":"1765","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAbandonBeforeACKEpoch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/bd9d88222077beb805541ba9fd2c22644bce83.src","preCode":"    public void testAbandonBeforeACKEpoch() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l)\n                    throws IOException, InterruptedException {\n                            \t\n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte liBytes[] = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li,\n                        ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0,\n                        liBytes, null);\n                oa.writeRecord(qp, null);\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.LEADERINFO, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                Assert.assertEquals(ByteBuffer.wrap(qp.getData()).getInt(),\n                        0x10000);                \n                Thread.sleep(l.self.getInitLimit()*l.self.getTickTime() + 5000);\n                \n                \r\n                Assert.assertEquals(0, l.self.getCurrentEpoch());\t\t\t\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":1158,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testUnnecessarySnap() throws Exception {\n        testPopulatedLeaderConversation(new PopulatedLeaderConversation() {\n            @Override\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l, long zxid) throws Exception {\n\n                assertEquals(1, l.self.getAcceptedEpoch());\n                assertEquals(1, l.self.getCurrentEpoch());\n\n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte[] liBytes = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li, ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 1, liBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.LEADERINFO, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(2, 0), qp.getZxid());\n                assertEquals(ByteBuffer.wrap(qp.getData()).getInt(), 0x10000);\n                assertEquals(2, l.self.getAcceptedEpoch());\n                assertEquals(1, l.self.getCurrentEpoch());\n\n                byte[] epochBytes = new byte[4];\n                final ByteBuffer wrappedEpochBytes = ByteBuffer.wrap(epochBytes);\n                wrappedEpochBytes.putInt(1);\n                qp = new QuorumPacket(Leader.ACKEPOCH, zxid, epochBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.DIFF, qp.getType());\n\n            }\n        }, 2);\n    }\n","date":"2019-08-17 23:13:15","endLine":543,"groupId":"10179","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnnecessarySnap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/7f81f265db319f5227680702d6a4be01a76445.src","preCode":"    public void testUnnecessarySnap() throws Exception {\n        testPopulatedLeaderConversation(new PopulatedLeaderConversation() {\n            @Override\n            public void converseWithLeader(InputArchive ia, OutputArchive oa,\n                    Leader l, long zxid) throws Exception {\n\n                Assert.assertEquals(1, l.self.getAcceptedEpoch());\n                Assert.assertEquals(1, l.self.getCurrentEpoch());\n\n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte liBytes[] = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li,\n                        ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 1,\n                        liBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.LEADERINFO, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(2, 0), qp.getZxid());\n                Assert.assertEquals(ByteBuffer.wrap(qp.getData()).getInt(),\n                        0x10000);\n                Assert.assertEquals(2, l.self.getAcceptedEpoch());\n                Assert.assertEquals(1, l.self.getCurrentEpoch());\n\n                byte epochBytes[] = new byte[4];\n                final ByteBuffer wrappedEpochBytes = ByteBuffer.wrap(epochBytes);\n                wrappedEpochBytes.putInt(1);\n                qp = new QuorumPacket(Leader.ACKEPOCH, zxid, epochBytes, null);\n                oa.writeRecord(qp, null);\n\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.DIFF, qp.getType());\n\n            }\n        }, 2);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testAbandonBeforeACKEpoch() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l) throws IOException, InterruptedException {\n                \n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte[] liBytes = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li, ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0, liBytes, null);\n                oa.writeRecord(qp, null);\n                readPacketSkippingPing(ia, qp);\n                assertEquals(Leader.LEADERINFO, qp.getType());\n                assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                assertEquals(ByteBuffer.wrap(qp.getData()).getInt(), 0x10000);\n                Thread.sleep(l.self.getInitLimit() * l.self.getTickTime() + 5000);\n\n                \r\n                assertEquals(0, l.self.getCurrentEpoch());\n            }\n        });\n    }\n","date":"2019-08-17 23:13:15","endLine":1129,"groupId":"10179","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAbandonBeforeACKEpoch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/7f81f265db319f5227680702d6a4be01a76445.src","preCode":"    public void testAbandonBeforeACKEpoch() throws Exception {\n        testLeaderConversation(new LeaderConversation() {\n            public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l)\n                    throws IOException, InterruptedException {\n                            \t\n                LearnerInfo li = new LearnerInfo(1, 0x10000, 0);\n                byte liBytes[] = new byte[20];\n                ByteBufferOutputStream.record2ByteBuffer(li,\n                        ByteBuffer.wrap(liBytes));\n                QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0,\n                        liBytes, null);\n                oa.writeRecord(qp, null);\n                readPacketSkippingPing(ia, qp);\n                Assert.assertEquals(Leader.LEADERINFO, qp.getType());\n                Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                Assert.assertEquals(ByteBuffer.wrap(qp.getData()).getInt(),\n                        0x10000);                \n                Thread.sleep(l.self.getInitLimit()*l.self.getTickTime() + 5000);\n                \n                \r\n                Assert.assertEquals(0, l.self.getCurrentEpoch());\t\t\t\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":1110,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"}]
