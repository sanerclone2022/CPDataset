[{"authorTime":"2018-10-16 22:22:07","codes":[{"authorDate":"2018-10-16 22:22:07","commitOrder":1,"curCode":"    public void setup() throws Exception {\n        ClientBase.setupTestEnv();\n\n        tmpDir = createTmpDir().getAbsolutePath();\n\n        clientPortQp1 = PortAssignment.unique();\n        clientPortQp2 = PortAssignment.unique();\n        clientPortQp3 = PortAssignment.unique();\n\n        validKeystorePath = tmpDir + \"/valid.jks\";\n        truststorePath = tmpDir + \"/truststore.jks\";\n\n        quorumConfiguration = generateQuorumConfiguration();\n\n        Security.addProvider(new BouncyCastleProvider());\n\n        certStartTime = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.setTime(certStartTime);\n        cal.add(Calendar.YEAR, 1);\n        certEndTime = cal.getTime();\n\n        rootKeyPair = createKeyPair();\n        contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(rootKeyPair.getPrivate());\n        rootCertificate = createSelfSignedCertifcate(rootKeyPair);\n\n        \r\n        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n        trustStore.load(null, PASSWORD);\n        trustStore.setCertificateEntry(rootCertificate.getSubjectDN().toString(), rootCertificate);\n        FileOutputStream outputStream = new FileOutputStream(truststorePath);\n        trustStore.store(outputStream, PASSWORD);\n        outputStream.flush();\n        outputStream.close();\n\n        defaultKeyPair = createKeyPair();\n        X509Certificate validCertificate = buildEndEntityCert(defaultKeyPair, rootCertificate, rootKeyPair.getPrivate(),\n                HOSTNAME, \"127.0.0.1\", null, null);\n        writeKeystore(validCertificate, defaultKeyPair, validKeystorePath);\n\n        setSSLSystemProperties();\n    }\n","date":"2018-10-16 22:22:07","endLine":200,"groupId":"2834","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b0/88f47b16cdafac4d3b3ba2913c0996b140fbcd.src","preCode":"    public void setup() throws Exception {\n        ClientBase.setupTestEnv();\n\n        tmpDir = createTmpDir().getAbsolutePath();\n\n        clientPortQp1 = PortAssignment.unique();\n        clientPortQp2 = PortAssignment.unique();\n        clientPortQp3 = PortAssignment.unique();\n\n        validKeystorePath = tmpDir + \"/valid.jks\";\n        truststorePath = tmpDir + \"/truststore.jks\";\n\n        quorumConfiguration = generateQuorumConfiguration();\n\n        Security.addProvider(new BouncyCastleProvider());\n\n        certStartTime = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.setTime(certStartTime);\n        cal.add(Calendar.YEAR, 1);\n        certEndTime = cal.getTime();\n\n        rootKeyPair = createKeyPair();\n        contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(rootKeyPair.getPrivate());\n        rootCertificate = createSelfSignedCertifcate(rootKeyPair);\n\n        \r\n        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n        trustStore.load(null, PASSWORD);\n        trustStore.setCertificateEntry(rootCertificate.getSubjectDN().toString(), rootCertificate);\n        FileOutputStream outputStream = new FileOutputStream(truststorePath);\n        trustStore.store(outputStream, PASSWORD);\n        outputStream.flush();\n        outputStream.close();\n\n        defaultKeyPair = createKeyPair();\n        X509Certificate validCertificate = buildEndEntityCert(defaultKeyPair, rootCertificate, rootKeyPair.getPrivate(),\n                HOSTNAME, \"127.0.0.1\", null, null);\n        writeKeystore(validCertificate, defaultKeyPair, validKeystorePath);\n\n        setSSLSystemProperties();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumSSLTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"B"},{"authorDate":"2018-10-16 22:22:07","commitOrder":1,"curCode":"    private void writeKeystore(X509Certificate certificate, KeyPair entityKeyPair, String path) throws Exception {\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n        keyStore.load(null, PASSWORD);\n        keyStore.setKeyEntry(\"alias\", entityKeyPair.getPrivate(), PASSWORD, new Certificate[] { certificate });\n        FileOutputStream outputStream = new FileOutputStream(path);\n        keyStore.store(outputStream, PASSWORD);\n        outputStream.flush();\n        outputStream.close();\n    }\n","date":"2018-10-16 22:22:07","endLine":210,"groupId":"259","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"writeKeystore","params":"(X509Certificatecertificate@KeyPairentityKeyPair@Stringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b0/88f47b16cdafac4d3b3ba2913c0996b140fbcd.src","preCode":"    private void writeKeystore(X509Certificate certificate, KeyPair entityKeyPair, String path) throws Exception {\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n        keyStore.load(null, PASSWORD);\n        keyStore.setKeyEntry(\"alias\", entityKeyPair.getPrivate(), PASSWORD, new Certificate[] { certificate });\n        FileOutputStream outputStream = new FileOutputStream(path);\n        keyStore.store(outputStream, PASSWORD);\n        outputStream.flush();\n        outputStream.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumSSLTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"B"}],"commitId":"7b679bc9dd98f06ee10bbb0978cfee5dab7b74dc","commitMessage":"@@@ZOOKEEPER-236: SSL Support for Atomic Broadcast protocol (master)\n\nCherry-picked from branch-3.5.\n\nAuthor: Andor Molnar <andor@apache.org>\nAuthor: Abraham Fine <afine@apache.org>\n\nReviewers: hanm@apache.org.  breed@apache.org\n\nCloses #655 from anmolnar/ZOOKEEPER-236_master and squashes the following commits:\n\n8c3aa11e [Andor Molnar] ZOOKEEPER-3165: Java 9: X509UtilTest.testCreateSSLContextWithoutTrustStorePassword fails\neb272749 [Abraham Fine] ZOOKEEPER-236: SSL Support for Atomic Broadcast protocol\n","date":"2018-10-16 22:22:07","modifiedFileCount":"20","status":"B","submitter":"Andor Molnar"},{"authorTime":"2018-10-16 22:22:07","codes":[{"authorDate":"2018-12-15 14:34:54","commitOrder":2,"curCode":"    public void setup() throws Exception {\n        quorumX509Util = new QuorumX509Util();\n        ClientBase.setupTestEnv();\n\n        tmpDir = createTmpDir().getAbsolutePath();\n\n        clientPortQp1 = PortAssignment.unique();\n        clientPortQp2 = PortAssignment.unique();\n        clientPortQp3 = PortAssignment.unique();\n\n        validKeystorePath = tmpDir + \"/valid.jks\";\n        truststorePath = tmpDir + \"/truststore.jks\";\n\n        quorumConfiguration = generateQuorumConfiguration();\n\n        Security.addProvider(new BouncyCastleProvider());\n\n        certStartTime = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.setTime(certStartTime);\n        cal.add(Calendar.YEAR, 1);\n        certEndTime = cal.getTime();\n\n        rootKeyPair = createKeyPair();\n        contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(rootKeyPair.getPrivate());\n        rootCertificate = createSelfSignedCertifcate(rootKeyPair);\n\n        \r\n        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n        trustStore.load(null, PASSWORD);\n        trustStore.setCertificateEntry(rootCertificate.getSubjectDN().toString(), rootCertificate);\n        FileOutputStream outputStream = new FileOutputStream(truststorePath);\n        trustStore.store(outputStream, PASSWORD);\n        outputStream.flush();\n        outputStream.close();\n\n        defaultKeyPair = createKeyPair();\n        X509Certificate validCertificate = buildEndEntityCert(defaultKeyPair, rootCertificate, rootKeyPair.getPrivate(),\n                HOSTNAME, \"127.0.0.1\", null, null);\n        writeKeystore(validCertificate, defaultKeyPair, validKeystorePath);\n\n        setSSLSystemProperties();\n    }\n","date":"2018-12-15 14:34:54","endLine":200,"groupId":"10152","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/e4/7b7ef589896fc0d0a72c9c03bfcdde30167532.src","preCode":"    public void setup() throws Exception {\n        ClientBase.setupTestEnv();\n\n        tmpDir = createTmpDir().getAbsolutePath();\n\n        clientPortQp1 = PortAssignment.unique();\n        clientPortQp2 = PortAssignment.unique();\n        clientPortQp3 = PortAssignment.unique();\n\n        validKeystorePath = tmpDir + \"/valid.jks\";\n        truststorePath = tmpDir + \"/truststore.jks\";\n\n        quorumConfiguration = generateQuorumConfiguration();\n\n        Security.addProvider(new BouncyCastleProvider());\n\n        certStartTime = new Date();\n        Calendar cal = Calendar.getInstance();\n        cal.setTime(certStartTime);\n        cal.add(Calendar.YEAR, 1);\n        certEndTime = cal.getTime();\n\n        rootKeyPair = createKeyPair();\n        contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(rootKeyPair.getPrivate());\n        rootCertificate = createSelfSignedCertifcate(rootKeyPair);\n\n        \r\n        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n        trustStore.load(null, PASSWORD);\n        trustStore.setCertificateEntry(rootCertificate.getSubjectDN().toString(), rootCertificate);\n        FileOutputStream outputStream = new FileOutputStream(truststorePath);\n        trustStore.store(outputStream, PASSWORD);\n        outputStream.flush();\n        outputStream.close();\n\n        defaultKeyPair = createKeyPair();\n        X509Certificate validCertificate = buildEndEntityCert(defaultKeyPair, rootCertificate, rootKeyPair.getPrivate(),\n                HOSTNAME, \"127.0.0.1\", null, null);\n        writeKeystore(validCertificate, defaultKeyPair, validKeystorePath);\n\n        setSSLSystemProperties();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumSSLTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2018-10-16 22:22:07","commitOrder":2,"curCode":"    private void writeKeystore(X509Certificate certificate, KeyPair entityKeyPair, String path) throws Exception {\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n        keyStore.load(null, PASSWORD);\n        keyStore.setKeyEntry(\"alias\", entityKeyPair.getPrivate(), PASSWORD, new Certificate[] { certificate });\n        FileOutputStream outputStream = new FileOutputStream(path);\n        keyStore.store(outputStream, PASSWORD);\n        outputStream.flush();\n        outputStream.close();\n    }\n","date":"2018-10-16 22:22:07","endLine":210,"groupId":"10152","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"writeKeystore","params":"(X509Certificatecertificate@KeyPairentityKeyPair@Stringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b0/88f47b16cdafac4d3b3ba2913c0996b140fbcd.src","preCode":"    private void writeKeystore(X509Certificate certificate, KeyPair entityKeyPair, String path) throws Exception {\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n        keyStore.load(null, PASSWORD);\n        keyStore.setKeyEntry(\"alias\", entityKeyPair.getPrivate(), PASSWORD, new Certificate[] { certificate });\n        FileOutputStream outputStream = new FileOutputStream(path);\n        keyStore.store(outputStream, PASSWORD);\n        outputStream.flush();\n        outputStream.close();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumSSLTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"N"}],"commitId":"e043c322f12d56da0fc88131628edf0731c0f8e4","commitMessage":"@@@ZOOKEEPER-3174: Quorum TLS - support reloading trust/key store\n\nAllow reloading SSL trust stores and key stores from disk when the files on disk change.\n\n## Added support for reloading key/trust stores when the file on disk changes\n- new property `sslQuorumReloadCertFiles` which controls the behavior for reloading the key and trust store files for `QuorumX509Util`. Reloading of key and trust store for `ClientX509Util` is not in this PR but could be added easily\n- this allows a ZK server to keep running on a machine that uses short-lived certs that refresh frequently without having to restart the ZK process.\n\nAuthor: Ilya Maykov <ilyam@fb.com>\n\nReviewers: andor@apache.org\n\nCloses #680 from ivmaykov/ZOOKEEPER-3174\n","date":"2018-12-15 14:34:54","modifiedFileCount":"18","status":"M","submitter":"Ilya Maykov"}]
