[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void startAll() throws IOException {\n        shutdownAll();\n        for (int i = 1; i <= ALL; ++i) {\n            start(i);\n            LOG.info(\"Started QuorumPeer \" + i);\n        }\n\n        LOG.info(\"Checking ports \" + hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            Assert.assertTrue(\"waiting for server up\", ClientBase.waitForServerUp(hp,\n                    ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is accepting client connections\");\n        }\n\n        \r\n        if (disableJMXTest) return;\n        \n        \r\n        try {\n            JMXEnv.dump();\n            \r\n            Set<String> ensureNames = new LinkedHashSet<String>();\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"InMemoryDataTree\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames\n                        .add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                for (int j = 1; j <= ALL; ++j) {\n                    ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n                }\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n            }\n            JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n        } catch (IOException e) {\n            LOG.warn(\"IOException during JMXEnv operation\", e);\n        } catch (InterruptedException e) {\n            LOG.warn(\"InterruptedException during JMXEnv operation\", e);\n        }\n    }\n","date":"2018-10-19 20:39:50","endLine":185,"groupId":"4241","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/31/4171d873a3adf6c9c60439dd24942a39f23fc9.src","preCode":"    public void startAll() throws IOException {\n        shutdownAll();\n        for (int i = 1; i <= ALL; ++i) {\n            start(i);\n            LOG.info(\"Started QuorumPeer \" + i);\n        }\n\n        LOG.info(\"Checking ports \" + hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            Assert.assertTrue(\"waiting for server up\", ClientBase.waitForServerUp(hp,\n                    ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is accepting client connections\");\n        }\n\n        \r\n        if (disableJMXTest) return;\n        \n        \r\n        try {\n            JMXEnv.dump();\n            \r\n            Set<String> ensureNames = new LinkedHashSet<String>();\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"InMemoryDataTree\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames\n                        .add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                for (int j = 1; j <= ALL; ++j) {\n                    ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n                }\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n            }\n            JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n        } catch (IOException e) {\n            LOG.warn(\"IOException during JMXEnv operation\", e);\n        } catch (InterruptedException e) {\n            LOG.warn(\"InterruptedException during JMXEnv operation\", e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void shutdownAll() {\n        for (int i = 1; i <= ALL; ++i) {\n            shutdown(i);\n        }\n        for (String hp : hostPort.split(\",\")) {\n            Assert.assertTrue(\"Waiting for server down\", ClientBase.waitForServerDown(hp,\n                    ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is no longer accepting client connections\");\n        }\n    }\n","date":"2018-10-19 20:39:50","endLine":245,"groupId":"761","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shutdownAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/31/4171d873a3adf6c9c60439dd24942a39f23fc9.src","preCode":"    public void shutdownAll() {\n        for (int i = 1; i <= ALL; ++i) {\n            shutdown(i);\n        }\n        for (String hp : hostPort.split(\",\")) {\n            Assert.assertTrue(\"Waiting for server down\", ClientBase.waitForServerDown(hp,\n                    ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is no longer accepting client connections\");\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void startAll() throws IOException {\n        shutdownAll();\n        for (int i = 1; i <= ALL; ++i) {\n            start(i);\n            LOG.info(\"Started QuorumPeer \" + i);\n        }\n\n        LOG.info(\"Checking ports \" + hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"waiting for server up\", ClientBase.waitForServerUp(hp, ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is accepting client connections\");\n        }\n\n        \r\n        if (disableJMXTest) {\n            return;\n        }\n\n        \r\n        try {\n            JMXEnv.dump();\n            \r\n            Set<String> ensureNames = new LinkedHashSet<String>();\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"InMemoryDataTree\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                for (int j = 1; j <= ALL; ++j) {\n                    ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n                }\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n            }\n            JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n        } catch (IOException e) {\n            LOG.warn(\"IOException during JMXEnv operation\", e);\n        } catch (InterruptedException e) {\n            LOG.warn(\"InterruptedException during JMXEnv operation\", e);\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":185,"groupId":"4241","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/46/511ebd9d12a3a7399a1bed1e90a31629970efa.src","preCode":"    public void startAll() throws IOException {\n        shutdownAll();\n        for (int i = 1; i <= ALL; ++i) {\n            start(i);\n            LOG.info(\"Started QuorumPeer \" + i);\n        }\n\n        LOG.info(\"Checking ports \" + hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            Assert.assertTrue(\"waiting for server up\", ClientBase.waitForServerUp(hp,\n                    ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is accepting client connections\");\n        }\n\n        \r\n        if (disableJMXTest) return;\n        \n        \r\n        try {\n            JMXEnv.dump();\n            \r\n            Set<String> ensureNames = new LinkedHashSet<String>();\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"InMemoryDataTree\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames\n                        .add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                for (int j = 1; j <= ALL; ++j) {\n                    ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n                }\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n            }\n            JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n        } catch (IOException e) {\n            LOG.warn(\"IOException during JMXEnv operation\", e);\n        } catch (InterruptedException e) {\n            LOG.warn(\"InterruptedException during JMXEnv operation\", e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void shutdownAll() {\n        for (int i = 1; i <= ALL; ++i) {\n            shutdown(i);\n        }\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"Waiting for server down\", ClientBase.waitForServerDown(hp, ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is no longer accepting client connections\");\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":245,"groupId":"761","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shutdownAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/46/511ebd9d12a3a7399a1bed1e90a31629970efa.src","preCode":"    public void shutdownAll() {\n        for (int i = 1; i <= ALL; ++i) {\n            shutdown(i);\n        }\n        for (String hp : hostPort.split(\",\")) {\n            Assert.assertTrue(\"Waiting for server down\", ClientBase.waitForServerDown(hp,\n                    ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is no longer accepting client connections\");\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2019-10-10 20:37:45","commitOrder":3,"curCode":"    public void startAll() throws IOException {\n        shutdownAll();\n        for (int i = 1; i <= ALL; ++i) {\n            start(i);\n            LOG.info(\"Started QuorumPeer {}\", i);\n        }\n\n        LOG.info(\"Checking ports {}\", hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"waiting for server up\", ClientBase.waitForServerUp(hp, ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(\"{} is accepting client connections\", hp);\n        }\n\n        \r\n        if (disableJMXTest) {\n            return;\n        }\n\n        \r\n        try {\n            JMXEnv.dump();\n            \r\n            Set<String> ensureNames = new LinkedHashSet<String>();\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"InMemoryDataTree\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                for (int j = 1; j <= ALL; ++j) {\n                    ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n                }\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n            }\n            JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n        } catch (IOException e) {\n            LOG.warn(\"IOException during JMXEnv operation\", e);\n        } catch (InterruptedException e) {\n            LOG.warn(\"InterruptedException during JMXEnv operation\", e);\n        }\n    }\n","date":"2019-10-10 20:37:45","endLine":185,"groupId":"4241","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"startAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d6/c016312a97c967c3eb40f01215bf34bbbcb458.src","preCode":"    public void startAll() throws IOException {\n        shutdownAll();\n        for (int i = 1; i <= ALL; ++i) {\n            start(i);\n            LOG.info(\"Started QuorumPeer \" + i);\n        }\n\n        LOG.info(\"Checking ports \" + hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"waiting for server up\", ClientBase.waitForServerUp(hp, ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is accepting client connections\");\n        }\n\n        \r\n        if (disableJMXTest) {\n            return;\n        }\n\n        \r\n        try {\n            JMXEnv.dump();\n            \r\n            Set<String> ensureNames = new LinkedHashSet<String>();\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"InMemoryDataTree\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                for (int j = 1; j <= ALL; ++j) {\n                    ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n                }\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n            }\n            JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n        } catch (IOException e) {\n            LOG.warn(\"IOException during JMXEnv operation\", e);\n        } catch (InterruptedException e) {\n            LOG.warn(\"InterruptedException during JMXEnv operation\", e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2019-10-10 20:37:45","commitOrder":3,"curCode":"    public void shutdownAll() {\n        for (int i = 1; i <= ALL; ++i) {\n            shutdown(i);\n        }\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"Waiting for server down\", ClientBase.waitForServerDown(hp, ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(\"{} is no longer accepting client connections\", hp);\n        }\n    }\n","date":"2019-10-10 20:37:45","endLine":245,"groupId":"761","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shutdownAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d6/c016312a97c967c3eb40f01215bf34bbbcb458.src","preCode":"    public void shutdownAll() {\n        for (int i = 1; i <= ALL; ++i) {\n            shutdown(i);\n        }\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"Waiting for server down\", ClientBase.waitForServerDown(hp, ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(hp + \" is no longer accepting client connections\");\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2019-11-29 21:49:13","commitOrder":4,"curCode":"    public void startAll() throws IOException {\n        shutdownAll();\n        for (int i = 1; i <= ALL; ++i) {\n            start(i);\n            LOG.info(\"Started QuorumPeer {}\", i);\n        }\n\n        LOG.info(\"Checking ports {}\", hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"waiting for server \" + hp + \" up\", ClientBase.waitForServerUp(hp, ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(\"{} is accepting client connections\", hp);\n        }\n\n        \r\n        if (disableJMXTest) {\n            return;\n        }\n\n        \r\n        try {\n            JMXEnv.dump();\n            \r\n            Set<String> ensureNames = new LinkedHashSet<String>();\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"InMemoryDataTree\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                for (int j = 1; j <= ALL; ++j) {\n                    ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n                }\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n            }\n            JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n        } catch (IOException e) {\n            LOG.warn(\"IOException during JMXEnv operation\", e);\n        } catch (InterruptedException e) {\n            LOG.warn(\"InterruptedException during JMXEnv operation\", e);\n        }\n    }\n","date":"2019-11-29 21:49:13","endLine":185,"groupId":"4241","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"startAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/14/e3beebe76bb4e641d25c2a0087cedf20ab9636.src","preCode":"    public void startAll() throws IOException {\n        shutdownAll();\n        for (int i = 1; i <= ALL; ++i) {\n            start(i);\n            LOG.info(\"Started QuorumPeer {}\", i);\n        }\n\n        LOG.info(\"Checking ports {}\", hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"waiting for server up\", ClientBase.waitForServerUp(hp, ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(\"{} is accepting client connections\", hp);\n        }\n\n        \r\n        if (disableJMXTest) {\n            return;\n        }\n\n        \r\n        try {\n            JMXEnv.dump();\n            \r\n            Set<String> ensureNames = new LinkedHashSet<String>();\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"InMemoryDataTree\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                for (int j = 1; j <= ALL; ++j) {\n                    ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n                }\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n            }\n            JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n        } catch (IOException e) {\n            LOG.warn(\"IOException during JMXEnv operation\", e);\n        } catch (InterruptedException e) {\n            LOG.warn(\"InterruptedException during JMXEnv operation\", e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2019-10-10 20:37:45","commitOrder":4,"curCode":"    public void shutdownAll() {\n        for (int i = 1; i <= ALL; ++i) {\n            shutdown(i);\n        }\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"Waiting for server down\", ClientBase.waitForServerDown(hp, ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(\"{} is no longer accepting client connections\", hp);\n        }\n    }\n","date":"2019-10-10 20:37:45","endLine":245,"groupId":"761","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shutdownAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d6/c016312a97c967c3eb40f01215bf34bbbcb458.src","preCode":"    public void shutdownAll() {\n        for (int i = 1; i <= ALL; ++i) {\n            shutdown(i);\n        }\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"Waiting for server down\", ClientBase.waitForServerDown(hp, ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(\"{} is no longer accepting client connections\", hp);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"N"}],"commitId":"815c8f2130b8b43e11abe52b226707f707a93581","commitMessage":"@@@ZOOKEEPER-3188: Improve resilience to network\n\nThis PR is the rebase of the [previous pull request](https://github.com/apache/zookeeper/pull/730).  so all the kudos should go to the original authors...\n\nIn [ZOOKEEPER-3188](https://issues.apache.org/jira/browse/ZOOKEEPER-3188) we add ability to specify several addresses for quorum operations. Also added reconnection attempts if connection to leader lost.\n\nIn this PR I rebased the changes on the current master.  resolving some minor conflicts with:\n- [ZOOKEEPER-3296](https://issues.apache.org/jira/browse/ZOOKEEPER-3296): Explicitly closing the sslsocket when it failed handshake to prevent issue where peers cannot join quorum\n- [ZOOKEEPER-3320](https://issues.apache.org/jira/browse/ZOOKEEPER-3320): Leader election port stop listen when hostname unresolvable for some time\n- [ZOOKEEPER-3385](https://issues.apache.org/jira/browse/ZOOKEEPER-3385): Add admin command to display leader\n- [ZOOKEEPER-3386](https://issues.apache.org/jira/browse/ZOOKEEPER-3386): Add admin command to display voting view\n- [ZOOKEEPER-3398](https://issues.apache.org/jira/browse/ZOOKEEPER-3398): Learner.connectToLeader() may take too long to time-out\n\nI still want to test the feature manually (e.g. using docker containers with multiple virtual networks / interfaces). The steps to the manual test could be recorded in the [google docs](https://docs.google.com/document/d/1iGVwxeHp57qogwfdodCh9b32P2_kOQaJZ2GDo7j36fI/edit?usp=sharing) as well.\n\nAlso I think we could add a few more unit tests where we are using multiple addresses. The current tests are using a single address only.\n\nAlso the Zookeeper documentation needs to be changed (e.g. by a follow-up Jira?) to promote the new feature and the new config format (possibly including also the admin command documentation in relation with [ZOOKEEPER-3386](https://issues.apache.org/jira/browse/ZOOKEEPER-3386) and [ZOOKEEPER-3461](https://issues.apache.org/jira/browse/ZOOKEEPER-3461))\n\nAuthor: Mate Szalay-Beko <szalay.beko.mate@gmail.com>\nAuthor: Mate Szalay-Beko <mszalay@cloudera.com>\n\nReviewers: eolivelli@apache.org.  andor@apache.org\n\nCloses #1048 from symat/ZOOKEEPER-3188 and squashes the following commits:\n\n3c6fc52d7 [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n356882d46 [Mate Szalay-Beko] ZOOKEEPER-3188: document new configuration format for using multiple addresses\n45b6c0fdb [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n4b6bcea48 [Mate Szalay-Beko] ZOOKEEPER-3188: MultiAddress unit tests for Quorum TLS and Kerberos/Digest authentication\n40bc44c23 [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\nf875f5c67 [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n31805e79b [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n0f95678ca [Mate Szalay-Beko] ZOOKEEPER-3188: skip unreachable addresses when Learner connects to Leader\ne232c55da [Mate Szalay-Beko] ZOOKEEPER-3188: fix flaky unit MultiAddress unit test\ne892d8d8e [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n6f2ab755f [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n2eedf2687 [Mate Szalay-Beko] ZOOKEEPER-3188: fix PR commits; handle case when Leader can not bind to port on startup\n483d2fc9c [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\na5d6bcb97 [Mate Szalay-Beko] ZOOKEEPER-3188: support for dynamic reconfig + add more unit tests\ned31d2ce9 [Mate Szalay-Beko] ZOOKEEPER-3188: better shutdown for executors (following PR comments)\n8713a5bbf [Mate Szalay-Beko] ZOOKEEPER-3188: add fixes for PR comments\n05eae83c0 [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\ne823af4b1 [Mate Szalay-Beko] Merge remote-tracking branch 'origin/master' into ZOOKEEPER-3188\nde7bad2a6 [Mate Szalay-Beko] Merge remote-tracking branch 'origin/master' into ZOOKEEPER-3188\nda98a8da6 [Mate Szalay-Beko] ZOOKEEPER-3188: fix JDK-13 warning\n5bd1f4e2c [Mate Szalay-Beko] ZOOKEEPER-3188: supress spotbugs warning\n42a52a688 [Mate Szalay-Beko] ZOOKEEPER-3188: improve based on code review comments\n6c4220a0d [Mate Szalay-Beko] ZOOKEEPER-3188: fix SendWorker.asyncValidateIfSocketIsStillReachable\n5b22432c1 [Mate Szalay-Beko] ZOOKEEPER-3188: fix LeaderElection to work with multiple election addresses\n7bfbe7e5c [Mate Szalay-Beko] ZOOKEEPER-3188: Improve resilience to network\n","date":"2019-11-29 21:49:13","modifiedFileCount":"26","status":"M","submitter":"Mate Szalay-Beko"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":5,"curCode":"    public void startAll() throws IOException {\n        shutdownAll();\n        for (int i = 1; i <= ALL; ++i) {\n            start(i);\n            LOG.info(\"Started QuorumPeer {}\", i);\n        }\n\n        LOG.info(\"Checking ports {}\", hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(ClientBase.waitForServerUp(hp, ClientBase.CONNECTION_TIMEOUT), \"waiting for server \" + hp + \" up\");\n            LOG.info(\"{} is accepting client connections\", hp);\n        }\n\n        \r\n        if (disableJMXTest) {\n            return;\n        }\n\n        \r\n        try {\n            JMXEnv.dump();\n            \r\n            Set<String> ensureNames = new LinkedHashSet<String>();\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"InMemoryDataTree\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                for (int j = 1; j <= ALL; ++j) {\n                    ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n                }\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n            }\n            JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n        } catch (IOException e) {\n            LOG.warn(\"IOException during JMXEnv operation\", e);\n        } catch (InterruptedException e) {\n            LOG.warn(\"InterruptedException during JMXEnv operation\", e);\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":189,"groupId":"10639","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"startAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/98/153b9acacc3af50c6b88e834309d92ad797539.src","preCode":"    public void startAll() throws IOException {\n        shutdownAll();\n        for (int i = 1; i <= ALL; ++i) {\n            start(i);\n            LOG.info(\"Started QuorumPeer {}\", i);\n        }\n\n        LOG.info(\"Checking ports {}\", hostPort);\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"waiting for server \" + hp + \" up\", ClientBase.waitForServerUp(hp, ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(\"{} is accepting client connections\", hp);\n        }\n\n        \r\n        if (disableJMXTest) {\n            return;\n        }\n\n        \r\n        try {\n            JMXEnv.dump();\n            \r\n            Set<String> ensureNames = new LinkedHashSet<String>();\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"InMemoryDataTree\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + i + \",name2=\");\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                for (int j = 1; j <= ALL; ++j) {\n                    ensureNames.add(\"name0=ReplicatedServer_id\" + i + \",name1=replica.\" + j);\n                }\n            }\n            for (int i = 1; i <= ALL; ++i) {\n                ensureNames.add(\"name0=ReplicatedServer_id\" + i);\n            }\n            JMXEnv.ensureAll(ensureNames.toArray(new String[ensureNames.size()]));\n        } catch (IOException e) {\n            LOG.warn(\"IOException during JMXEnv operation\", e);\n        } catch (InterruptedException e) {\n            LOG.warn(\"InterruptedException during JMXEnv operation\", e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":5,"curCode":"    public void shutdownAll() {\n        for (int i = 1; i <= ALL; ++i) {\n            shutdown(i);\n        }\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(ClientBase.waitForServerDown(hp, ClientBase.CONNECTION_TIMEOUT), \"Waiting for server down\");\n            LOG.info(\"{} is no longer accepting client connections\", hp);\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":249,"groupId":"10639","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shutdownAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/98/153b9acacc3af50c6b88e834309d92ad797539.src","preCode":"    public void shutdownAll() {\n        for (int i = 1; i <= ALL; ++i) {\n            shutdown(i);\n        }\n        for (String hp : hostPort.split(\",\")) {\n            assertTrue(\"Waiting for server down\", ClientBase.waitForServerDown(hp, ClientBase.CONNECTION_TIMEOUT));\n            LOG.info(\"{} is no longer accepting client connections\", hp);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
