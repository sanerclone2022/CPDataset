[{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2021-03-02 12:51:05","commitOrder":4,"curCode":"    public static void shutdown(QuorumPeer qp) {\n        if (qp == null) {\n            return;\n        }\n        try {\n            LOG.info(\"Shutting down quorum peer {}\", qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election {}\", qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown {}\", qp.getName());\n            }\n            LOG.info(\"Waiting for {} to exit thread\", qp.getName());\n            long readTimeout = qp.getTickTime() * qp.getInitLimit();\n            long connectTimeout = qp.getTickTime() * qp.getSyncLimit();\n            long maxTimeout = Math.max(readTimeout, connectTimeout);\n            maxTimeout = Math.max(maxTimeout, ClientBase.CONNECTION_TIMEOUT);\n            qp.join(maxTimeout * 2);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in \" + (maxTimeout * 2) + \" seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: {}\", qp.getName(), e);\n        }\n    }\n","date":"2021-03-02 12:51:05","endLine":335,"groupId":"3786","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"shutdown","params":"(QuorumPeerqp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/48/2027d1a9ae44c93f7aa7569f868613f32255d7.src","preCode":"    public static void shutdown(QuorumPeer qp) {\n        if (qp == null) {\n            return;\n        }\n        try {\n            LOG.info(\"Shutting down quorum peer {}\", qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election {}\", qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown {}\", qp.getName());\n            }\n            LOG.info(\"Waiting for {} to exit thread\", qp.getName());\n            long readTimeout = qp.getTickTime() * qp.getInitLimit();\n            long connectTimeout = qp.getTickTime() * qp.getSyncLimit();\n            long maxTimeout = Math.max(readTimeout, connectTimeout);\n            maxTimeout = Math.max(maxTimeout, ClientBase.CONNECTION_TIMEOUT);\n            qp.join(maxTimeout * 2);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in \" + (maxTimeout * 2) + \" seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: {}\", qp.getName(), e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBaseOracle_2Nodes.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"B"},{"authorDate":"2019-10-10 20:37:45","commitOrder":4,"curCode":"    public void shutdown(int id) {\n        QuorumPeer qp = getPeer(id).peer;\n        try {\n            LOG.info(\"Shutting down quorum peer {}\", qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election {}\", qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown {}\", qp.getName());\n            }\n            LOG.info(\"Waiting for {} to exit thread\", qp.getName());\n            qp.join(30000);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in 30 seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: {}\", qp.getName(), e);\n        }\n    }\n","date":"2019-10-10 20:37:45","endLine":267,"groupId":"762","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shutdown","params":"(intid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d6/c016312a97c967c3eb40f01215bf34bbbcb458.src","preCode":"    public void shutdown(int id) {\n        QuorumPeer qp = getPeer(id).peer;\n        try {\n            LOG.info(\"Shutting down quorum peer {}\", qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election {}\", qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown {}\", qp.getName());\n            }\n            LOG.info(\"Waiting for {} to exit thread\", qp.getName());\n            qp.join(30000);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in 30 seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: {}\", qp.getName(), e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"NB"}],"commitId":"b4f9aab099880ba8ef08eaff697debe6cdeae057","commitMessage":"@@@ZOOKEEPER-3922: The introduction of the oracle.  a failure detector.\n\nThe introduction of the oracle makes ZooKeeper fault-tolerant in two-node systems.\n\nThe major changes are:\n1. QuorumPeerConfig.java\n- The changes allow users to enable the oracle and provide essential information.\n- Create QuorumOracleMaj if configured.\n2. FastLeaderElection.java\n- A re-check mechanism checks the current received votes once the timeout expires.\n- Add another case when receiving a LEADING notification for a node to locate the existed leader in two-node systems.\n3. Leader.java\n- Add a re-validation of outstanding proposals mechanism after the only follower goes away\n- Add another handling case when the quorum is not maintainable. It queries the Oracle for maintaining the quorum along.\n4. QuorumVerifier.java\n- Add methods for QuorumOracleMaj.java\n5. QuorumOracleMaj.java (This is a new file.)\n- A sub-class of QuorumMaj\n- It default reads a file that contains a binary value to behave as an Oracle.\n\nAuthor: Ching-Chan Lee <leechingchankyo@gmail.com>\n\nReviewers: Benjamin Reed <breed@apache.org>.  Michael Han <hanm@apache.org>\n\nCloses #1444 from chingchan1996/ZOOKEEPER-3922\n","date":"2021-03-02 12:51:05","modifiedFileCount":"18","status":"M","submitter":"Ching-Chan Lee"},{"authorTime":"2021-03-07 03:38:43","codes":[{"authorDate":"2021-03-02 12:51:05","commitOrder":5,"curCode":"    public static void shutdown(QuorumPeer qp) {\n        if (qp == null) {\n            return;\n        }\n        try {\n            LOG.info(\"Shutting down quorum peer {}\", qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election {}\", qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown {}\", qp.getName());\n            }\n            LOG.info(\"Waiting for {} to exit thread\", qp.getName());\n            long readTimeout = qp.getTickTime() * qp.getInitLimit();\n            long connectTimeout = qp.getTickTime() * qp.getSyncLimit();\n            long maxTimeout = Math.max(readTimeout, connectTimeout);\n            maxTimeout = Math.max(maxTimeout, ClientBase.CONNECTION_TIMEOUT);\n            qp.join(maxTimeout * 2);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in \" + (maxTimeout * 2) + \" seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: {}\", qp.getName(), e);\n        }\n    }\n","date":"2021-03-02 12:51:05","endLine":335,"groupId":"10520","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"shutdown","params":"(QuorumPeerqp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/48/2027d1a9ae44c93f7aa7569f868613f32255d7.src","preCode":"    public static void shutdown(QuorumPeer qp) {\n        if (qp == null) {\n            return;\n        }\n        try {\n            LOG.info(\"Shutting down quorum peer {}\", qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election {}\", qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown {}\", qp.getName());\n            }\n            LOG.info(\"Waiting for {} to exit thread\", qp.getName());\n            long readTimeout = qp.getTickTime() * qp.getInitLimit();\n            long connectTimeout = qp.getTickTime() * qp.getSyncLimit();\n            long maxTimeout = Math.max(readTimeout, connectTimeout);\n            maxTimeout = Math.max(maxTimeout, ClientBase.CONNECTION_TIMEOUT);\n            qp.join(maxTimeout * 2);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in \" + (maxTimeout * 2) + \" seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: {}\", qp.getName(), e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBaseOracle_2Nodes.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"N"},{"authorDate":"2021-03-07 03:38:43","commitOrder":5,"curCode":"    public void shutdown(int id) {\n        QuorumPeer qp = getPeer(id).peer;\n        try {\n            LOG.info(\"Shutting down quorum peer {} with id {}\", qp.getName(), id);\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election {} with id {}\", qp.getName(), id);\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown {} with id {}\", qp.getName(), id);\n            }\n            LOG.info(\"Waiting for {} with id {} to exit thread\", qp.getName(), id);\n            qp.join(30000);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in 30 seconds: \" + qp.getName() + \" \" + id);\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: {} {}\", qp.getName(), id, e);\n        }\n    }\n","date":"2021-03-07 03:40:32","endLine":271,"groupId":"10520","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"shutdown","params":"(intid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ce/1cd1b3c5f3579c8e3bae7740bcdb2b8fe350ef.src","preCode":"    public void shutdown(int id) {\n        QuorumPeer qp = getPeer(id).peer;\n        try {\n            LOG.info(\"Shutting down quorum peer {}\", qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election {}\", qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown {}\", qp.getName());\n            }\n            LOG.info(\"Waiting for {} to exit thread\", qp.getName());\n            qp.join(30000);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in 30 seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: {}\", qp.getName(), e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"}],"commitId":"1214d3bf611d153ae8c3987523da01d3d6c82686","commitMessage":"@@@ZOOKEEPER-3781: Create snapshots on followers when snapshot.trust.empty is true\n\nsnapshot.trust.empty is an escape hatch for users upgrading from 3.4.x to later Zookeeper\nversions.  allowing nodes to start with a non-empty transaction log but no snapshot.\n\nThe intent is for this setting to be enabled for a short while during the upgrade. \nand then disabled again.  as the check it disables is a safety feature.\n\nPrior to this PR.  a node would only write a snapshot locally if it became leader. \nor if it had fallen so far behind the leader that the leader sent a SNAP message instead\nof a DIFF. This made the upgrade process inconvenient.  as not all nodes would create\na snapshot when snapshot.trust.empty was true.  meaning that the safety check could\nnot be flipped back on.\n\nThis PR makes follower nodes write a local snapshot when they receive NEWLEADER. \nif they have no local snapshot and snapshot.trust.empty is true.\n\nAuthor: Stig Rohde D?ssing <stig@humio.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Damien Diederen <ddiederen@apache.org>\n\nCloses #1581 from srdo/zookeeper-3781\n","date":"2021-03-07 03:40:32","modifiedFileCount":"5","status":"M","submitter":"Stig Rohde D?ssing"}]
