[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testSequentialNodeData() throws Exception {\n        ZooKeeper zk= null;\n        String queue_handle = \"/queue\";\n        try {\n            zk = createClient();\n\n            zk.create(queue_handle, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n            zk.create(queue_handle + \"/element\", \"0\".getBytes(),\n                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);\n            zk.create(queue_handle + \"/element\", \"1\".getBytes(),\n                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);\n            List<String> children = zk.getChildren(queue_handle, true);\n            Assert.assertEquals(children.size(), 2);\n            String child1 = children.get(0);\n            String child2 = children.get(1);\n            int compareResult = child1.compareTo(child2);\n            Assert.assertNotSame(compareResult, 0);\n            if (compareResult < 0) {\n            } else {\n                String temp = child1;\n                child1 = child2;\n                child2 = temp;\n            }\n            String child1data = new String(zk.getData(queue_handle\n                    + \"/\" + child1, false, null));\n            String child2data = new String(zk.getData(queue_handle\n                    + \"/\" + child2, false, null));\n            Assert.assertEquals(child1data, \"0\");\n            Assert.assertEquals(child2data, \"1\");\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n\n    }\n","date":"2018-10-19 20:39:50","endLine":595,"groupId":"1576","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSequentialNodeData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/63/73bb36e3e58159c95655b0344608b7412f2244.src","preCode":"    public void testSequentialNodeData() throws Exception {\n        ZooKeeper zk= null;\n        String queue_handle = \"/queue\";\n        try {\n            zk = createClient();\n\n            zk.create(queue_handle, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n            zk.create(queue_handle + \"/element\", \"0\".getBytes(),\n                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);\n            zk.create(queue_handle + \"/element\", \"1\".getBytes(),\n                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);\n            List<String> children = zk.getChildren(queue_handle, true);\n            Assert.assertEquals(children.size(), 2);\n            String child1 = children.get(0);\n            String child2 = children.get(1);\n            int compareResult = child1.compareTo(child2);\n            Assert.assertNotSame(compareResult, 0);\n            if (compareResult < 0) {\n            } else {\n                String temp = child1;\n                child1 = child2;\n                child2 = temp;\n            }\n            String child1data = new String(zk.getData(queue_handle\n                    + \"/\" + child1, false, null));\n            String child2data = new String(zk.getData(queue_handle\n                    + \"/\" + child2, false, null));\n            Assert.assertEquals(child1data, \"0\");\n            Assert.assertEquals(child2data, \"1\");\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testLargeNodeData() throws Exception {\n        ZooKeeper zk= null;\n        String queue_handle = \"/large\";\n        try {\n            zk = createClient();\n\n            zk.create(queue_handle, new byte[500000], Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n\n    }\n","date":"2018-10-19 20:39:50","endLine":612,"groupId":"1576","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLargeNodeData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/63/73bb36e3e58159c95655b0344608b7412f2244.src","preCode":"    public void testLargeNodeData() throws Exception {\n        ZooKeeper zk= null;\n        String queue_handle = \"/large\";\n        try {\n            zk = createClient();\n\n            zk.create(queue_handle, new byte[500000], Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":598,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testSequentialNodeData() throws Exception {\n        ZooKeeper zk = null;\n        String queue_handle = \"/queue\";\n        try {\n            zk = createClient();\n\n            zk.create(queue_handle, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            zk.create(queue_handle + \"/element\", \"0\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);\n            zk.create(queue_handle + \"/element\", \"1\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);\n            List<String> children = zk.getChildren(queue_handle, true);\n            assertEquals(children.size(), 2);\n            String child1 = children.get(0);\n            String child2 = children.get(1);\n            int compareResult = child1.compareTo(child2);\n            assertNotSame(compareResult, 0);\n            if (compareResult < 0) {\n            } else {\n                String temp = child1;\n                child1 = child2;\n                child2 = temp;\n            }\n            String child1data = new String(zk.getData(queue_handle + \"/\" + child1, false, null));\n            String child2data = new String(zk.getData(queue_handle + \"/\" + child2, false, null));\n            assertEquals(child1data, \"0\");\n            assertEquals(child2data, \"1\");\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n\n    }\n","date":"2019-08-17 23:13:15","endLine":569,"groupId":"10610","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSequentialNodeData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3f/e2f5d5ec8130ade35c43cc36cff0552fb71872.src","preCode":"    public void testSequentialNodeData() throws Exception {\n        ZooKeeper zk= null;\n        String queue_handle = \"/queue\";\n        try {\n            zk = createClient();\n\n            zk.create(queue_handle, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n            zk.create(queue_handle + \"/element\", \"0\".getBytes(),\n                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);\n            zk.create(queue_handle + \"/element\", \"1\".getBytes(),\n                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);\n            List<String> children = zk.getChildren(queue_handle, true);\n            Assert.assertEquals(children.size(), 2);\n            String child1 = children.get(0);\n            String child2 = children.get(1);\n            int compareResult = child1.compareTo(child2);\n            Assert.assertNotSame(compareResult, 0);\n            if (compareResult < 0) {\n            } else {\n                String temp = child1;\n                child1 = child2;\n                child2 = temp;\n            }\n            String child1data = new String(zk.getData(queue_handle\n                    + \"/\" + child1, false, null));\n            String child2data = new String(zk.getData(queue_handle\n                    + \"/\" + child2, false, null));\n            Assert.assertEquals(child1data, \"0\");\n            Assert.assertEquals(child2data, \"1\");\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":538,"status":"M"},{"authorDate":"2018-10-19 20:39:50","commitOrder":2,"curCode":"    public void testLargeNodeData() throws Exception {\n        ZooKeeper zk= null;\n        String queue_handle = \"/large\";\n        try {\n            zk = createClient();\n\n            zk.create(queue_handle, new byte[500000], Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n\n    }\n","date":"2018-10-19 20:39:50","endLine":612,"groupId":"10610","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLargeNodeData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/63/73bb36e3e58159c95655b0344608b7412f2244.src","preCode":"    public void testLargeNodeData() throws Exception {\n        ZooKeeper zk= null;\n        String queue_handle = \"/large\";\n        try {\n            zk = createClient();\n\n            zk.create(queue_handle, new byte[500000], Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":598,"status":"N"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"}]
