[{"authorTime":"2021-01-19 16:05:37","codes":[{"authorDate":"2021-01-19 16:05:37","commitOrder":1,"curCode":"    public void testSetQuotaWhenSetChildDataExceedBytesQuota() throws Exception {\n\n        final String path = \"/test/quota\";\n        zk.create(\"/test\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/test/quota\", \"01234\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/test/quota/data\", \"56789\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        StatsTrack quota = new StatsTrack();\n        quota.setByteHardLimit(10);\n        SetQuotaCommand.createQuota(zk, path, quota);\n        try {\n            zk.setData(\"/test/quota/data\", \"567891\".getBytes(), -1);\n            fail(\"should not set data when exceed hard byte quota\");\n        } catch (QuotaExceededException e) {\n            \r\n        }\n    }\n","date":"2021-01-19 16:05:37","endLine":280,"groupId":"1235","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetQuotaWhenSetChildDataExceedBytesQuota","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/67/b524accefc3a62d31f9a1fd16a61a158d76225.src","preCode":"    public void testSetQuotaWhenSetChildDataExceedBytesQuota() throws Exception {\n\n        final String path = \"/test/quota\";\n        zk.create(\"/test\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/test/quota\", \"01234\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/test/quota/data\", \"56789\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        StatsTrack quota = new StatsTrack();\n        quota.setByteHardLimit(10);\n        SetQuotaCommand.createQuota(zk, path, quota);\n        try {\n            zk.setData(\"/test/quota/data\", \"567891\".getBytes(), -1);\n            fail(\"should not set data when exceed hard byte quota\");\n        } catch (QuotaExceededException e) {\n            \r\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ZooKeeperQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"B"},{"authorDate":"2021-01-19 16:05:37","commitOrder":1,"curCode":"    public void testSetQuotaWhenCreateNodeExceedBytesQuota() throws Exception {\n\n        final String path = \"/test/quota\";\n        zk.create(\"/test\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/test/quota\", \"01234\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        StatsTrack quota = new StatsTrack();\n        quota.setByteHardLimit(10);\n        SetQuotaCommand.createQuota(zk, path, quota);\n        try {\n            zk.create(\"/test/quota/data\", \"567891\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            fail(\"should not set data when exceed hard byte quota\");\n        } catch (QuotaExceededException e) {\n            \r\n        }\n    }\n","date":"2021-01-19 16:05:37","endLine":298,"groupId":"2571","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSetQuotaWhenCreateNodeExceedBytesQuota","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/67/b524accefc3a62d31f9a1fd16a61a158d76225.src","preCode":"    public void testSetQuotaWhenCreateNodeExceedBytesQuota() throws Exception {\n\n        final String path = \"/test/quota\";\n        zk.create(\"/test\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/test/quota\", \"01234\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        StatsTrack quota = new StatsTrack();\n        quota.setByteHardLimit(10);\n        SetQuotaCommand.createQuota(zk, path, quota);\n        try {\n            zk.create(\"/test/quota/data\", \"567891\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            fail(\"should not set data when exceed hard byte quota\");\n        } catch (QuotaExceededException e) {\n            \r\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ZooKeeperQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"B"}],"commitId":"190a227aa9d4655ebfe6ba9f5c2da426da8c5d98","commitMessage":"@@@ZOOKEEPER-3301: Enforce the quota limit\n\n- Thanks for the original work from ZOOKEEPER-1383.  ZOOKEEPER-2593.  ZOOKEEPER-451.  especially the work from ZOOKEEPER-1383 contributed by [Thawan Kooburat](https://issues.apache.org/jira/secure/ViewProfile.jspa?name=thawan)(I also sign off his name in the commit message) which also implemented the very valuable throughput quota.In the further.  we will also do this.\n- `zookeeper.enforeQuota`. When enabled and the client exceeds the total bytes or children count hard quota under a znode.  the server will reject the request and reply the client a `QuotaExceededException` by force. The default value is: false.\n- the checkQuota involves the `create()` and `setData()` api.  not including the `delete()`.\n- When users set the quota which's less than the existing stats.  we give a thoughtful warning info.\n- the following code in the StatsTrack has a bad augmentability:\n\n  >             if (split.length != 2) {\n  >                 throw new IllegalArgumentException(\"invalid string \" + stats);\n  >             }\n\n   we do a trick to solve it for the expansibility.  but we will get a little strange quota info(`Output quota for /c2 count=-1. bytes=-1=;byteHardLimit=-1;countHardLimit=5`) when using `listquota`. some UTs has covered it.\n- the logic about `checkQuota` should be put in the `PrepRequestProcessor`.  other than `DataTree`.\n  we will get the following two negative effects if putting `checkQuota` in the `DataTree`:\n  - 1. When the write request has exceeded the quota.  the corresponding transaction log will load into disk successfully.It's not good.  although it has any data inconsistency issue.  because when the server restart.  so long as the transaction logs are applied in the same order.  the exceeded nodes will not be applied into the state machine.\n  - 2. the client will be blocking and waiting for the response.  because when throwing `QuotaExceededException` in the the `DataTree`.  the` rc.stat` will be `null` and `BinaryOutputArchive#writeRecord` will throw `NPE`.\n  - 3. Overall.  the pre-check about the write request should be done in the `PrepRequestProcessor`(at least before `SyncRequestProcessor`)(Look at an example from `checkACL()`)\n- more detail in the [ZOOKEEPER-3301](https://issues.apache.org/jira/browse/ZOOKEEPER-3301).\n- [Added in 2020-02-25] use `RateLogger` to replace `LOG` to avoid quota exceed logs flooding the disk\n- A `TODO` improvement is: only users have admin permission can write to `/zookeeper/quota`(just like `/zookeeper/config`) to avoid some users' misoperation\n\nAuthor: maoling <maoling199210191@sina.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Damien Diederen <ddiederen@apache.org>.  Enrico Olivelli <eolivelli@apache.org>.  Michael Han <hanm@apache.org>\n\nCloses #934 from maoling/ZOOKEEPER-3301\n","date":"2021-01-19 16:05:37","modifiedFileCount":"14","status":"B","submitter":"maoling"},{"authorTime":"2021-07-29 17:35:47","codes":[{"authorDate":"2021-07-29 17:35:47","commitOrder":2,"curCode":"    public void testSetQuotaWhenSetChildDataExceedBytesQuota() throws Exception {\n\n        final String namespace = UUID.randomUUID().toString();\n        final String path = \"/\" + namespace + \"/quota\";\n        zk.create(\"/\" + namespace, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(path, \"01234\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(path + \"/data\", \"56789\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        StatsTrack quota = new StatsTrack();\n        quota.setByteHardLimit(10);\n        SetQuotaCommand.createQuota(zk, path, quota);\n        try {\n            zk.setData(path + \"/data\", \"567891\".getBytes(), -1);\n            fail(\"should not set data when exceed hard byte quota\");\n        } catch (QuotaExceededException e) {\n            \r\n            validateQuotaExceededMetrics(namespace);\n        }\n    }\n","date":"2021-07-29 17:35:47","endLine":298,"groupId":"10551","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testSetQuotaWhenSetChildDataExceedBytesQuota","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/bb/c81c758d6489038dba0b4b4058b0ae754da08d.src","preCode":"    public void testSetQuotaWhenSetChildDataExceedBytesQuota() throws Exception {\n\n        final String path = \"/test/quota\";\n        zk.create(\"/test\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/test/quota\", \"01234\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/test/quota/data\", \"56789\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        StatsTrack quota = new StatsTrack();\n        quota.setByteHardLimit(10);\n        SetQuotaCommand.createQuota(zk, path, quota);\n        try {\n            zk.setData(\"/test/quota/data\", \"567891\".getBytes(), -1);\n            fail(\"should not set data when exceed hard byte quota\");\n        } catch (QuotaExceededException e) {\n            \r\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ZooKeeperQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"},{"authorDate":"2021-07-29 17:35:47","commitOrder":2,"curCode":"    public void testSetQuotaWhenCreateNodeExceedBytesQuota() throws Exception {\n\n        final String namespace = UUID.randomUUID().toString();\n        final String path = \"/\" + namespace + \"/quota\";\n        zk.create(\"/\" + namespace, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(path, \"01234\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        StatsTrack quota = new StatsTrack();\n        quota.setByteHardLimit(10);\n        SetQuotaCommand.createQuota(zk, path, quota);\n        try {\n            zk.create(path + \"/data\", \"567891\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            fail(\"should not set data when exceed hard byte quota\");\n        } catch (QuotaExceededException e) {\n            \r\n            validateQuotaExceededMetrics(namespace);\n        }\n    }\n","date":"2021-07-29 17:35:47","endLine":318,"groupId":"10551","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testSetQuotaWhenCreateNodeExceedBytesQuota","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/bb/c81c758d6489038dba0b4b4058b0ae754da08d.src","preCode":"    public void testSetQuotaWhenCreateNodeExceedBytesQuota() throws Exception {\n\n        final String path = \"/test/quota\";\n        zk.create(\"/test\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.create(\"/test/quota\", \"01234\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        StatsTrack quota = new StatsTrack();\n        quota.setByteHardLimit(10);\n        SetQuotaCommand.createQuota(zk, path, quota);\n        try {\n            zk.create(\"/test/quota/data\", \"567891\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            fail(\"should not set data when exceed hard byte quota\");\n        } catch (QuotaExceededException e) {\n            \r\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ZooKeeperQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"}],"commitId":"b05ea1a8454d806394e1ecdfca550e8c709d4c21","commitMessage":"@@@ZOOKEEPER-4211: Expose Per Namespace Quota Metrics to Prometheus\n\nMotivation\n\nIn 3.7.  Quota limit can be enforced and the quota related stats are captured.  From the \"listquota\" CLI command.  we can the quota limit and usage info. This is an addition to that so we can collect the quota metrics per top namespace and expose them to the Prometheus for monitor and alert purpose.\n\nSummary of Changes\n\n- added 5 quota metrics\n- added GaugeSet metric type to group gauge metrics by key\n- changed PrometheusMetricsProvider to to support the GaugeSet\n- changed ZookeeperServer and DataTree to collect/publish quota metrics\n\nAuthor: liwang <liwang@apple.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Damien Diederen <ddiederen@apache.org>\n\nCloses #1644 from li4wang/ZOOKEEPER-4211\n","date":"2021-07-29 17:35:47","modifiedFileCount":"14","status":"M","submitter":"liwang"}]
