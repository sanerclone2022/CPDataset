[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public boolean exec() throws CliException {\n        String path = args[1];\n        String aclStr = args[2];\n        List<ACL> acl = AclParser.parse(aclStr);\n        int version;\n        if (cl.hasOption(\"v\")) {\n            version = Integer.parseInt(cl.getOptionValue(\"v\"));\n        } else {\n            version = -1;\n        }\n        try {\n            if (cl.hasOption(\"R\")) {\n                ZKUtil.visitSubTreeDFS(zk, path, false, new StringCallback() {\n                    @Override\n                    public void processResult(int rc, String p, Object ctx, String name) {\n                        try {\n                            zk.setACL(p, acl, version);\n                        } catch (KeeperException | InterruptedException e) {\n                            out.print(e.getMessage());\n                        }\n                    }\n                });\n            } else {\n                Stat stat = zk.setACL(path, acl, version);\n                if (cl.hasOption(\"s\")) {\n                    new StatPrinter(out).print(stat);\n                }\n            }\n        } catch (IllegalArgumentException ex) {\n            throw new MalformedPathException(ex.getMessage());\n        } catch (KeeperException|InterruptedException ex) {\n            throw new CliWrapperException(ex);\n        }\n\n        return false;\n\n    }\n","date":"2018-10-19 20:39:50","endLine":103,"groupId":"443","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"exec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/9d/1b4606e1e35de2ec55c4f776bbbe43de4bf16c.src","preCode":"    public boolean exec() throws CliException {\n        String path = args[1];\n        String aclStr = args[2];\n        List<ACL> acl = AclParser.parse(aclStr);\n        int version;\n        if (cl.hasOption(\"v\")) {\n            version = Integer.parseInt(cl.getOptionValue(\"v\"));\n        } else {\n            version = -1;\n        }\n        try {\n            if (cl.hasOption(\"R\")) {\n                ZKUtil.visitSubTreeDFS(zk, path, false, new StringCallback() {\n                    @Override\n                    public void processResult(int rc, String p, Object ctx, String name) {\n                        try {\n                            zk.setACL(p, acl, version);\n                        } catch (KeeperException | InterruptedException e) {\n                            out.print(e.getMessage());\n                        }\n                    }\n                });\n            } else {\n                Stat stat = zk.setACL(path, acl, version);\n                if (cl.hasOption(\"s\")) {\n                    new StatPrinter(out).print(stat);\n                }\n            }\n        } catch (IllegalArgumentException ex) {\n            throw new MalformedPathException(ex.getMessage());\n        } catch (KeeperException|InterruptedException ex) {\n            throw new CliWrapperException(ex);\n        }\n\n        return false;\n\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetAclCommand.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public boolean exec() throws CliException {\n        String path = args[1];\n        byte[] data = args[2].getBytes();\n        int version;\n        if (cl.hasOption(\"v\")) {\n            version = Integer.parseInt(cl.getOptionValue(\"v\"));\n        } else {\n            version = -1;\n        }\n\n        try {\n            Stat stat = zk.setData(path, data, version);\n            if (cl.hasOption(\"s\")) {\n                new StatPrinter(out).print(stat);\n            }\n        } catch (IllegalArgumentException ex) {\n            throw new MalformedPathException(ex.getMessage());\n        } catch (KeeperException|InterruptedException ex) {\n            throw new CliWrapperException(ex);\n        }\n        return false;\n    }\n","date":"2018-10-19 20:39:50","endLine":80,"groupId":"3771","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"exec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/43/ca2e1c364bbf110001a6c11eb994d250041737.src","preCode":"    public boolean exec() throws CliException {\n        String path = args[1];\n        byte[] data = args[2].getBytes();\n        int version;\n        if (cl.hasOption(\"v\")) {\n            version = Integer.parseInt(cl.getOptionValue(\"v\"));\n        } else {\n            version = -1;\n        }\n\n        try {\n            Stat stat = zk.setData(path, data, version);\n            if (cl.hasOption(\"s\")) {\n                new StatPrinter(out).print(stat);\n            }\n        } catch (IllegalArgumentException ex) {\n            throw new MalformedPathException(ex.getMessage());\n        } catch (KeeperException|InterruptedException ex) {\n            throw new CliWrapperException(ex);\n        }\n        return false;\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetCommand.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2019-12-28 23:17:54","commitOrder":2,"curCode":"    public boolean exec() throws CliException {\n        String path = args[1];\n        String aclStr = args[2];\n        List<ACL> acl = AclParser.parse(aclStr);\n        int version;\n        if (cl.hasOption(\"v\")) {\n            version = Integer.parseInt(cl.getOptionValue(\"v\"));\n        } else {\n            version = -1;\n        }\n        try {\n            if (cl.hasOption(\"R\")) {\n                ZKUtil.visitSubTreeDFS(zk, path, false, (rc, p, ctx, name) -> {\n                    try {\n                        zk.setACL(p, acl, version);\n                    } catch (KeeperException | InterruptedException e) {\n                        out.print(e.getMessage());\n                    }\n                });\n            } else {\n                Stat stat = zk.setACL(path, acl, version);\n                if (cl.hasOption(\"s\")) {\n                    new StatPrinter(out).print(stat);\n                }\n            }\n        } catch (IllegalArgumentException ex) {\n            throw new MalformedPathException(ex.getMessage());\n        } catch (KeeperException | InterruptedException ex) {\n            throw new CliWrapperException(ex);\n        }\n\n        return false;\n\n    }\n","date":"2019-12-28 23:17:54","endLine":104,"groupId":"443","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"exec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/25/aa3dda0a011d39c0987ad164004fff87aa48bc.src","preCode":"    public boolean exec() throws CliException {\n        String path = args[1];\n        String aclStr = args[2];\n        List<ACL> acl = AclParser.parse(aclStr);\n        int version;\n        if (cl.hasOption(\"v\")) {\n            version = Integer.parseInt(cl.getOptionValue(\"v\"));\n        } else {\n            version = -1;\n        }\n        try {\n            if (cl.hasOption(\"R\")) {\n                ZKUtil.visitSubTreeDFS(zk, path, false, new StringCallback() {\n                    @Override\n                    public void processResult(int rc, String p, Object ctx, String name) {\n                        try {\n                            zk.setACL(p, acl, version);\n                        } catch (KeeperException | InterruptedException e) {\n                            out.print(e.getMessage());\n                        }\n                    }\n                });\n            } else {\n                Stat stat = zk.setACL(path, acl, version);\n                if (cl.hasOption(\"s\")) {\n                    new StatPrinter(out).print(stat);\n                }\n            }\n        } catch (IllegalArgumentException ex) {\n            throw new MalformedPathException(ex.getMessage());\n        } catch (KeeperException | InterruptedException ex) {\n            throw new CliWrapperException(ex);\n        }\n\n        return false;\n\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetAclCommand.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2018-10-19 20:39:50","commitOrder":2,"curCode":"    public boolean exec() throws CliException {\n        String path = args[1];\n        byte[] data = args[2].getBytes();\n        int version;\n        if (cl.hasOption(\"v\")) {\n            version = Integer.parseInt(cl.getOptionValue(\"v\"));\n        } else {\n            version = -1;\n        }\n\n        try {\n            Stat stat = zk.setData(path, data, version);\n            if (cl.hasOption(\"s\")) {\n                new StatPrinter(out).print(stat);\n            }\n        } catch (IllegalArgumentException ex) {\n            throw new MalformedPathException(ex.getMessage());\n        } catch (KeeperException|InterruptedException ex) {\n            throw new CliWrapperException(ex);\n        }\n        return false;\n    }\n","date":"2018-10-19 20:39:50","endLine":80,"groupId":"3771","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"exec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/43/ca2e1c364bbf110001a6c11eb994d250041737.src","preCode":"    public boolean exec() throws CliException {\n        String path = args[1];\n        byte[] data = args[2].getBytes();\n        int version;\n        if (cl.hasOption(\"v\")) {\n            version = Integer.parseInt(cl.getOptionValue(\"v\"));\n        } else {\n            version = -1;\n        }\n\n        try {\n            Stat stat = zk.setData(path, data, version);\n            if (cl.hasOption(\"s\")) {\n                new StatPrinter(out).print(stat);\n            }\n        } catch (IllegalArgumentException ex) {\n            throw new MalformedPathException(ex.getMessage());\n        } catch (KeeperException|InterruptedException ex) {\n            throw new CliWrapperException(ex);\n        }\n        return false;\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetCommand.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"N"}],"commitId":"d784e4dc8e042bd622500f861163bb315fa856fe","commitMessage":"@@@ZOOKEEPER-3582: refactor the async api call to lambda style\n\nAuthor: ZWShuai91 <17610028856@163.com>\n\nReviewers: eolivelli@apache.org.  andor@apache.org\n\nCloses #1142 from ZWShuai91/ZOOKEEPER-3582\n","date":"2019-12-28 23:17:54","modifiedFileCount":"15","status":"M","submitter":"ZWShuai91"},{"authorTime":"2020-10-30 19:03:41","codes":[{"authorDate":"2019-12-28 23:17:54","commitOrder":3,"curCode":"    public boolean exec() throws CliException {\n        String path = args[1];\n        String aclStr = args[2];\n        List<ACL> acl = AclParser.parse(aclStr);\n        int version;\n        if (cl.hasOption(\"v\")) {\n            version = Integer.parseInt(cl.getOptionValue(\"v\"));\n        } else {\n            version = -1;\n        }\n        try {\n            if (cl.hasOption(\"R\")) {\n                ZKUtil.visitSubTreeDFS(zk, path, false, (rc, p, ctx, name) -> {\n                    try {\n                        zk.setACL(p, acl, version);\n                    } catch (KeeperException | InterruptedException e) {\n                        out.print(e.getMessage());\n                    }\n                });\n            } else {\n                Stat stat = zk.setACL(path, acl, version);\n                if (cl.hasOption(\"s\")) {\n                    new StatPrinter(out).print(stat);\n                }\n            }\n        } catch (IllegalArgumentException ex) {\n            throw new MalformedPathException(ex.getMessage());\n        } catch (KeeperException | InterruptedException ex) {\n            throw new CliWrapperException(ex);\n        }\n\n        return false;\n\n    }\n","date":"2019-12-28 23:17:54","endLine":104,"groupId":"10710","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"exec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/25/aa3dda0a011d39c0987ad164004fff87aa48bc.src","preCode":"    public boolean exec() throws CliException {\n        String path = args[1];\n        String aclStr = args[2];\n        List<ACL> acl = AclParser.parse(aclStr);\n        int version;\n        if (cl.hasOption(\"v\")) {\n            version = Integer.parseInt(cl.getOptionValue(\"v\"));\n        } else {\n            version = -1;\n        }\n        try {\n            if (cl.hasOption(\"R\")) {\n                ZKUtil.visitSubTreeDFS(zk, path, false, (rc, p, ctx, name) -> {\n                    try {\n                        zk.setACL(p, acl, version);\n                    } catch (KeeperException | InterruptedException e) {\n                        out.print(e.getMessage());\n                    }\n                });\n            } else {\n                Stat stat = zk.setACL(path, acl, version);\n                if (cl.hasOption(\"s\")) {\n                    new StatPrinter(out).print(stat);\n                }\n            }\n        } catch (IllegalArgumentException ex) {\n            throw new MalformedPathException(ex.getMessage());\n        } catch (KeeperException | InterruptedException ex) {\n            throw new CliWrapperException(ex);\n        }\n\n        return false;\n\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetAclCommand.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2020-10-30 19:03:41","commitOrder":3,"curCode":"    public boolean exec() throws CliException {\n        String path = args[1];\n        byte[] data = args[2].getBytes(UTF_8);\n        int version;\n        if (cl.hasOption(\"v\")) {\n            version = Integer.parseInt(cl.getOptionValue(\"v\"));\n        } else {\n            version = -1;\n        }\n\n        try {\n            Stat stat = zk.setData(path, data, version);\n            if (cl.hasOption(\"s\")) {\n                new StatPrinter(out).print(stat);\n            }\n        } catch (IllegalArgumentException ex) {\n            throw new MalformedPathException(ex.getMessage());\n        } catch (KeeperException | InterruptedException ex) {\n            throw new CliWrapperException(ex);\n        }\n        return false;\n    }\n","date":"2020-10-30 19:03:41","endLine":85,"groupId":"10710","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"exec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/5d82aadf8f38291e562fbfe9b58e1a5b423ac6.src","preCode":"    public boolean exec() throws CliException {\n        String path = args[1];\n        byte[] data = args[2].getBytes();\n        int version;\n        if (cl.hasOption(\"v\")) {\n            version = Integer.parseInt(cl.getOptionValue(\"v\"));\n        } else {\n            version = -1;\n        }\n\n        try {\n            Stat stat = zk.setData(path, data, version);\n            if (cl.hasOption(\"s\")) {\n                new StatPrinter(out).print(stat);\n            }\n        } catch (IllegalArgumentException ex) {\n            throw new MalformedPathException(ex.getMessage());\n        } catch (KeeperException | InterruptedException ex) {\n            throw new CliWrapperException(ex);\n        }\n        return false;\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetCommand.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"8654e7ed37717df79eb06f75de43eafe4f47b175","commitMessage":"@@@ZOOKEEPER-3342: Use StandardCharsets\n\n> Encodes this String into a sequence of bytes using the platform's default charset.  storing the result into a new byte array.  The behavior of this method when this string cannot be encoded in the default charset is unspecified.\n\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/String.html#getBytes--\n\n1.  Since this is a distributed system.  it is always possible that different nodes have different default charsets defined.  I think it's most safe to specify it explicitly across all nodes for safety sake.  You could for example see a situation where an upgrade JVM uses a different default and during a rolling upgrade of the JVM.  different nodes now have a different default.\n2.  The default charset is usually \"ISO-8859-1\".  UTF-8 covers more of our international friends.\n3. Explicitly specifying the CharSet yields slight performance gains\n4. Explicitly specifying the CharSet removes the need for try/catch blocks of UnsupportedEncodingException\n\nhttps://blog.codecentric.de/en/2014/04/faster-cleaner-code-since-java-7/\n\nAuthor: David Mollitor <dmollitor@apache.org>\nAuthor: Beluga Behr <dam6923@gmail.com>\nAuthor: David Mollitor <dam6923@gmail.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Andor Molnar <anmolnar@apache.org>\n\nCloses #882 from belugabehr/ZOOKEEPER-3342\n","date":"2020-10-30 19:03:41","modifiedFileCount":"32","status":"M","submitter":"David Mollitor"}]
