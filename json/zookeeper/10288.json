[{"authorTime":"2019-08-24 01:43:02","codes":[{"authorDate":"2019-08-24 01:43:02","commitOrder":1,"curCode":"    public void testCircularBuffer() {\n        final int capacity = 3;\n        CircularBuffer<String> buffer = new CircularBuffer<>(String.class, capacity);\n\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"A\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"B\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"C\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        \r\n        \r\n        Assert.assertEquals(\"A\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"B\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"C\", buffer.take());\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"1\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"2\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"3\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"4\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        \r\n        \r\n        Assert.assertEquals(\"2\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"3\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"4\", buffer.take());\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"a\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"b\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"c\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"d\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"e\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"f\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"g\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        \r\n        \r\n        Assert.assertEquals(\"e\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"f\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"g\", buffer.take());\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n    }\n","date":"2019-08-24 01:43:02","endLine":134,"groupId":"4452","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCircularBuffer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ff/3c83c423915032652fe3724fef59d1385a239a.src","preCode":"    public void testCircularBuffer() {\n        final int capacity = 3;\n        CircularBuffer<String> buffer = new CircularBuffer<>(String.class, capacity);\n\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"A\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"B\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"C\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        \r\n        \r\n        Assert.assertEquals(\"A\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"B\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"C\", buffer.take());\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"1\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"2\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"3\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"4\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        \r\n        \r\n        Assert.assertEquals(\"2\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"3\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"4\", buffer.take());\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"a\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"b\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"c\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"d\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"e\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"f\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"g\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        \r\n        \r\n        Assert.assertEquals(\"e\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"f\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"g\", buffer.take());\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/util/CircularBufferTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"B"},{"authorDate":"2019-08-24 01:43:02","commitOrder":1,"curCode":"    public void testCircularBufferWithCapacity1() {\n        final int capacity = 1;\n        CircularBuffer<String> buffer = new CircularBuffer<>(String.class, capacity);\n\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"A\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"B\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        \r\n        \r\n        Assert.assertEquals(\"B\", buffer.take());\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n    }\n","date":"2019-08-24 01:43:02","endLine":158,"groupId":"4452","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCircularBufferWithCapacity1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ff/3c83c423915032652fe3724fef59d1385a239a.src","preCode":"    public void testCircularBufferWithCapacity1() {\n        final int capacity = 1;\n        CircularBuffer<String> buffer = new CircularBuffer<>(String.class, capacity);\n\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"A\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"B\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        \r\n        \r\n        Assert.assertEquals(\"B\", buffer.take());\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/util/CircularBufferTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"}],"commitId":"b5817fbb12b88bc28be72f109c695ebf51bebf3b","commitMessage":"@@@ZOOKEEPER-3448: Introduce MessageTracker to assist debug leader and leaner connectivity issues.\n\nWe want to have better insight on the state of the world when learners lost connection with leader.  so we need capture more information when that happens. We capture more information through MessageTracker which will record the last few sent and received messages at various protocol stage.  and these information will be dumped to log files for further analysis.\n\nAuthor: Michael Han <lhan@twitter.com>\nAuthor: Michael Han <hanm@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Fangmin Lyu <fangmin@apache.org>\n\nCloses #1007 from hanm/twitter/2765eb0629d2f63f07d112270b582e8e931f734f\n","date":"2019-08-24 01:43:02","modifiedFileCount":"4","status":"B","submitter":"Michael Han"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":2,"curCode":"    public void testCircularBuffer() {\n        final int capacity = 3;\n        CircularBuffer<String> buffer = new CircularBuffer<>(String.class, capacity);\n\n        assertTrue(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"A\");\n        assertFalse(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        buffer.write(\"B\");\n        assertFalse(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        buffer.write(\"C\");\n        assertFalse(buffer.isEmpty());\n        assertTrue(buffer.isFull());\n\n        \r\n        \r\n        assertEquals(\"A\", buffer.take());\n        assertFalse(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        assertEquals(\"B\", buffer.take());\n        assertFalse(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        assertEquals(\"C\", buffer.take());\n        assertTrue(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"1\");\n        assertFalse(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        buffer.write(\"2\");\n        assertFalse(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        buffer.write(\"3\");\n        assertFalse(buffer.isEmpty());\n        assertTrue(buffer.isFull());\n\n        buffer.write(\"4\"); \r\n        assertFalse(buffer.isEmpty());\n        assertTrue(buffer.isFull());\n\n        \r\n        \r\n        assertEquals(\"2\", buffer.take());\n        assertFalse(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        assertEquals(\"3\", buffer.take());\n        assertFalse(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        assertEquals(\"4\", buffer.take());\n        assertTrue(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"a\");\n        assertFalse(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        buffer.write(\"b\");\n        assertFalse(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        buffer.write(\"c\");\n        assertFalse(buffer.isEmpty());\n        assertTrue(buffer.isFull());\n\n        buffer.write(\"d\"); \r\n        assertFalse(buffer.isEmpty());\n        assertTrue(buffer.isFull());\n\n        buffer.write(\"e\"); \r\n        assertFalse(buffer.isEmpty());\n        assertTrue(buffer.isFull());\n\n        buffer.write(\"f\"); \r\n        assertFalse(buffer.isEmpty());\n        assertTrue(buffer.isFull());\n\n        buffer.write(\"g\"); \r\n        assertFalse(buffer.isEmpty());\n        assertTrue(buffer.isFull());\n\n        \r\n        \r\n        assertEquals(\"e\", buffer.take());\n        assertFalse(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        assertEquals(\"f\", buffer.take());\n        assertFalse(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        assertEquals(\"g\", buffer.take());\n        assertTrue(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n    }\n","date":"2020-08-04 21:01:52","endLine":138,"groupId":"10288","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testCircularBuffer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/bf/33dc74bfce98cc493c7c5359002618e8853c76.src","preCode":"    public void testCircularBuffer() {\n        final int capacity = 3;\n        CircularBuffer<String> buffer = new CircularBuffer<>(String.class, capacity);\n\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"A\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"B\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"C\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        \r\n        \r\n        Assert.assertEquals(\"A\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"B\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"C\", buffer.take());\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"1\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"2\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"3\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"4\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        \r\n        \r\n        Assert.assertEquals(\"2\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"3\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"4\", buffer.take());\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"a\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"b\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        buffer.write(\"c\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"d\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"e\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"f\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"g\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        \r\n        \r\n        Assert.assertEquals(\"e\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"f\", buffer.take());\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        Assert.assertEquals(\"g\", buffer.take());\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/util/CircularBufferTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":2,"curCode":"    public void testCircularBufferWithCapacity1() {\n        final int capacity = 1;\n        CircularBuffer<String> buffer = new CircularBuffer<>(String.class, capacity);\n\n        assertTrue(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"A\");\n        assertFalse(buffer.isEmpty());\n        assertTrue(buffer.isFull());\n\n        buffer.write(\"B\"); \r\n        assertFalse(buffer.isEmpty());\n        assertTrue(buffer.isFull());\n\n        \r\n        \r\n        assertEquals(\"B\", buffer.take());\n        assertTrue(buffer.isEmpty());\n        assertFalse(buffer.isFull());\n    }\n","date":"2020-08-04 21:01:52","endLine":162,"groupId":"10288","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testCircularBufferWithCapacity1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/bf/33dc74bfce98cc493c7c5359002618e8853c76.src","preCode":"    public void testCircularBufferWithCapacity1() {\n        final int capacity = 1;\n        CircularBuffer<String> buffer = new CircularBuffer<>(String.class, capacity);\n\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n\n        \r\n        buffer.write(\"A\");\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        buffer.write(\"B\"); \r\n        Assert.assertFalse(buffer.isEmpty());\n        Assert.assertTrue(buffer.isFull());\n\n        \r\n        \r\n        Assert.assertEquals(\"B\", buffer.take());\n        Assert.assertTrue(buffer.isEmpty());\n        Assert.assertFalse(buffer.isFull());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/util/CircularBufferTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
