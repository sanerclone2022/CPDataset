[{"authorTime":"2018-08-17 17:56:09","codes":[{"authorDate":"2018-08-17 17:56:09","commitOrder":1,"curCode":"    public void testOffer2() throws Exception {\n        String dir = \"/testOffer2\";\n        String testString = \"Hello World\";\n        final int num_clients = 2;\n        ZooKeeper clients[] = new ZooKeeper[num_clients];\n        DistributedQueue queueHandles[] = new DistributedQueue[num_clients];\n        for(int i=0; i < clients.length; i++){\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte dequeuedBytes[] = queueHandles[1].remove();\n        Assert.assertEquals(new String(dequeuedBytes), testString);\n    }\n","date":"2018-08-17 17:56:09","endLine":74,"groupId":"83","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOffer2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c6/cfae20a569f1ef1913e8c37439ff98e6ba310e.src","preCode":"    public void testOffer2() throws Exception {\n        String dir = \"/testOffer2\";\n        String testString = \"Hello World\";\n        final int num_clients = 2;\n        ZooKeeper clients[] = new ZooKeeper[num_clients];\n        DistributedQueue queueHandles[] = new DistributedQueue[num_clients];\n        for(int i=0; i < clients.length; i++){\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte dequeuedBytes[] = queueHandles[1].remove();\n        Assert.assertEquals(new String(dequeuedBytes), testString);\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"},{"authorDate":"2018-08-17 17:56:09","commitOrder":1,"curCode":"    public void testTake1() throws Exception {\n        String dir = \"/testTake1\";\n        String testString = \"Hello World\";\n        final int num_clients = 1;\n        ZooKeeper clients[] = new ZooKeeper[num_clients];\n        DistributedQueue queueHandles[] = new DistributedQueue[num_clients];\n        for(int i=0; i < clients.length; i++){\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte dequeuedBytes[] = queueHandles[0].take();\n        Assert.assertEquals(new String(dequeuedBytes), testString);\n    }\n","date":"2018-08-17 17:56:09","endLine":92,"groupId":"83","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTake1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c6/cfae20a569f1ef1913e8c37439ff98e6ba310e.src","preCode":"    public void testTake1() throws Exception {\n        String dir = \"/testTake1\";\n        String testString = \"Hello World\";\n        final int num_clients = 1;\n        ZooKeeper clients[] = new ZooKeeper[num_clients];\n        DistributedQueue queueHandles[] = new DistributedQueue[num_clients];\n        for(int i=0; i < clients.length; i++){\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte dequeuedBytes[] = queueHandles[0].take();\n        Assert.assertEquals(new String(dequeuedBytes), testString);\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"}],"commitId":"2584625cdf4bb917192479f637222d6e64518336","commitMessage":"@@@ZOOKEEPER-3033: MAVEN MIGRATION - fix directory structure\n\nI reopened step 1.2 to fix the directory structure of the recipes.  as it is better to do every directory change at once. (As it has been done in step 1.3 already - first step.  docs is irrelevant in this manner).\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #599 from nkalmar/ZOOKEEPER-3033_fix\n","date":"2018-08-17 17:56:09","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testOffer2() throws Exception {\n        String dir = \"/testOffer2\";\n        String testString = \"Hello World\";\n        final int num_clients = 2;\n        ZooKeeper[] clients = new ZooKeeper[num_clients];\n        DistributedQueue[] queueHandles = new DistributedQueue[num_clients];\n        for(int i=0; i < clients.length; i++){\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte[] dequeuedBytes = queueHandles[1].remove();\n        Assert.assertEquals(new String(dequeuedBytes), testString);\n    }\n","date":"2019-08-17 23:13:15","endLine":74,"groupId":"83","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOffer2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/16/63d03b25ca02aee5788a10168d5ccfa179a391.src","preCode":"    public void testOffer2() throws Exception {\n        String dir = \"/testOffer2\";\n        String testString = \"Hello World\";\n        final int num_clients = 2;\n        ZooKeeper clients[] = new ZooKeeper[num_clients];\n        DistributedQueue queueHandles[] = new DistributedQueue[num_clients];\n        for(int i=0; i < clients.length; i++){\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte dequeuedBytes[] = queueHandles[1].remove();\n        Assert.assertEquals(new String(dequeuedBytes), testString);\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testTake1() throws Exception {\n        String dir = \"/testTake1\";\n        String testString = \"Hello World\";\n        final int num_clients = 1;\n        ZooKeeper[] clients = new ZooKeeper[num_clients];\n        DistributedQueue[] queueHandles = new DistributedQueue[num_clients];\n        for(int i=0; i < clients.length; i++){\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte[] dequeuedBytes = queueHandles[0].take();\n        Assert.assertEquals(new String(dequeuedBytes), testString);\n    }\n","date":"2019-08-17 23:13:15","endLine":92,"groupId":"83","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTake1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/16/63d03b25ca02aee5788a10168d5ccfa179a391.src","preCode":"    public void testTake1() throws Exception {\n        String dir = \"/testTake1\";\n        String testString = \"Hello World\";\n        final int num_clients = 1;\n        ZooKeeper clients[] = new ZooKeeper[num_clients];\n        DistributedQueue queueHandles[] = new DistributedQueue[num_clients];\n        for(int i=0; i < clients.length; i++){\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte dequeuedBytes[] = queueHandles[0].take();\n        Assert.assertEquals(new String(dequeuedBytes), testString);\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-08-27 15:23:11","codes":[{"authorDate":"2019-08-27 15:23:11","commitOrder":3,"curCode":"    public void testOffer2() throws Exception {\n        String dir = \"/testOffer2\";\n        String testString = \"Hello World\";\n        final int numClients = 2;\n        ZooKeeper[] clients = new ZooKeeper[numClients];\n        DistributedQueue[] queueHandles = new DistributedQueue[numClients];\n        for (int i = 0; i < clients.length; i++) {\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte[] dequeuedBytes = queueHandles[1].remove();\n        Assert.assertEquals(new String(dequeuedBytes), testString);\n    }\n","date":"2019-08-27 15:23:11","endLine":74,"groupId":"83","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testOffer2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/33/9ba0966e59a2bf1d625a5d2a7750136044f8d2.src","preCode":"    public void testOffer2() throws Exception {\n        String dir = \"/testOffer2\";\n        String testString = \"Hello World\";\n        final int num_clients = 2;\n        ZooKeeper[] clients = new ZooKeeper[num_clients];\n        DistributedQueue[] queueHandles = new DistributedQueue[num_clients];\n        for(int i=0; i < clients.length; i++){\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte[] dequeuedBytes = queueHandles[1].remove();\n        Assert.assertEquals(new String(dequeuedBytes), testString);\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2019-08-27 15:23:11","commitOrder":3,"curCode":"    public void testTake1() throws Exception {\n        String dir = \"/testTake1\";\n        String testString = \"Hello World\";\n        final int numClients = 1;\n        ZooKeeper[] clients = new ZooKeeper[numClients];\n        DistributedQueue[] queueHandles = new DistributedQueue[numClients];\n        for (int i = 0; i < clients.length; i++) {\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte[] dequeuedBytes = queueHandles[0].take();\n        Assert.assertEquals(new String(dequeuedBytes), testString);\n    }\n","date":"2019-08-27 15:23:11","endLine":92,"groupId":"83","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTake1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/33/9ba0966e59a2bf1d625a5d2a7750136044f8d2.src","preCode":"    public void testTake1() throws Exception {\n        String dir = \"/testTake1\";\n        String testString = \"Hello World\";\n        final int num_clients = 1;\n        ZooKeeper[] clients = new ZooKeeper[num_clients];\n        DistributedQueue[] queueHandles = new DistributedQueue[num_clients];\n        for(int i=0; i < clients.length; i++){\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte[] dequeuedBytes = queueHandles[0].take();\n        Assert.assertEquals(new String(dequeuedBytes), testString);\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"b8d5d9c1c163f3be4f6ec7d2eb520d37d9352c73","commitMessage":"@@@ZOOKEEPER-3517: Turn on BookKeeper checkstyle configuration at project level\n\nTurn on BookKeeper checkstyle configuration at project level.\n\nIn zookeeper-contrib we still use checkstyle-simple because there are lots of conflicts which is not worth to fix.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1060 from TisonKun/ZOOKEEPER-3517\n","date":"2019-08-27 15:23:11","modifiedFileCount":"13","status":"M","submitter":"tison"},{"authorTime":"2020-08-07 18:46:19","codes":[{"authorDate":"2020-08-07 18:46:19","commitOrder":4,"curCode":"    public void testOffer2() throws Exception {\n        String dir = \"/testOffer2\";\n        String testString = \"Hello World\";\n        final int numClients = 2;\n        ZooKeeper[] clients = new ZooKeeper[numClients];\n        DistributedQueue[] queueHandles = new DistributedQueue[numClients];\n        for (int i = 0; i < clients.length; i++) {\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte[] dequeuedBytes = queueHandles[1].remove();\n        assertEquals(new String(dequeuedBytes), testString);\n    }\n","date":"2020-08-07 18:46:45","endLine":75,"groupId":"83","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testOffer2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/04/93d87923508679a988b9279bf113e4eaf0c6cc.src","preCode":"    public void testOffer2() throws Exception {\n        String dir = \"/testOffer2\";\n        String testString = \"Hello World\";\n        final int numClients = 2;\n        ZooKeeper[] clients = new ZooKeeper[numClients];\n        DistributedQueue[] queueHandles = new DistributedQueue[numClients];\n        for (int i = 0; i < clients.length; i++) {\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte[] dequeuedBytes = queueHandles[1].remove();\n        Assert.assertEquals(new String(dequeuedBytes), testString);\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-08-07 18:46:19","commitOrder":4,"curCode":"    public void testTake1() throws Exception {\n        String dir = \"/testTake1\";\n        String testString = \"Hello World\";\n        final int numClients = 1;\n        ZooKeeper[] clients = new ZooKeeper[numClients];\n        DistributedQueue[] queueHandles = new DistributedQueue[numClients];\n        for (int i = 0; i < clients.length; i++) {\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte[] dequeuedBytes = queueHandles[0].take();\n        assertEquals(new String(dequeuedBytes), testString);\n    }\n","date":"2020-08-07 18:46:45","endLine":93,"groupId":"83","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTake1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/04/93d87923508679a988b9279bf113e4eaf0c6cc.src","preCode":"    public void testTake1() throws Exception {\n        String dir = \"/testTake1\";\n        String testString = \"Hello World\";\n        final int numClients = 1;\n        ZooKeeper[] clients = new ZooKeeper[numClients];\n        DistributedQueue[] queueHandles = new DistributedQueue[numClients];\n        for (int i = 0; i < clients.length; i++) {\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte[] dequeuedBytes = queueHandles[0].take();\n        Assert.assertEquals(new String(dequeuedBytes), testString);\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"08ae49dee4d698fb8c926f3842acdcb0f5b3c58e","commitMessage":"@@@ZOOKEEPER-3854: Upgrade jUnit in ZooKeeper-Recipes\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Norbert Kalmar <nkalmar@apache.org>.  Mate Szalay-Beko <symat@apache.org>\n\nCloses #1423 from tamaashu/ZOOKEEPER-3854\n","date":"2020-08-07 18:46:45","modifiedFileCount":"4","status":"M","submitter":"Tamas Penzes"},{"authorTime":"2020-10-30 19:03:41","codes":[{"authorDate":"2020-10-30 19:03:41","commitOrder":5,"curCode":"    public void testOffer2() throws Exception {\n        String dir = \"/testOffer2\";\n        String testString = \"Hello World\";\n        final int numClients = 2;\n        ZooKeeper[] clients = new ZooKeeper[numClients];\n        DistributedQueue[] queueHandles = new DistributedQueue[numClients];\n        for (int i = 0; i < clients.length; i++) {\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes(UTF_8));\n\n        byte[] dequeuedBytes = queueHandles[1].remove();\n        assertEquals(new String(dequeuedBytes, UTF_8), testString);\n    }\n","date":"2020-10-30 19:03:41","endLine":76,"groupId":"10810","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testOffer2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f5/ec02f9d83edfa334c347a95443fedde9dc3c8f.src","preCode":"    public void testOffer2() throws Exception {\n        String dir = \"/testOffer2\";\n        String testString = \"Hello World\";\n        final int numClients = 2;\n        ZooKeeper[] clients = new ZooKeeper[numClients];\n        DistributedQueue[] queueHandles = new DistributedQueue[numClients];\n        for (int i = 0; i < clients.length; i++) {\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte[] dequeuedBytes = queueHandles[1].remove();\n        assertEquals(new String(dequeuedBytes), testString);\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-10-30 19:03:41","commitOrder":5,"curCode":"    public void testTake1() throws Exception {\n        String dir = \"/testTake1\";\n        String testString = \"Hello World\";\n        final int numClients = 1;\n        ZooKeeper[] clients = new ZooKeeper[numClients];\n        DistributedQueue[] queueHandles = new DistributedQueue[numClients];\n        for (int i = 0; i < clients.length; i++) {\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes(UTF_8));\n\n        byte[] dequeuedBytes = queueHandles[0].take();\n        assertEquals(new String(dequeuedBytes, UTF_8), testString);\n    }\n","date":"2020-10-30 19:03:41","endLine":94,"groupId":"10810","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testTake1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f5/ec02f9d83edfa334c347a95443fedde9dc3c8f.src","preCode":"    public void testTake1() throws Exception {\n        String dir = \"/testTake1\";\n        String testString = \"Hello World\";\n        final int numClients = 1;\n        ZooKeeper[] clients = new ZooKeeper[numClients];\n        DistributedQueue[] queueHandles = new DistributedQueue[numClients];\n        for (int i = 0; i < clients.length; i++) {\n            clients[i] = createClient();\n            queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n        }\n\n        queueHandles[0].offer(testString.getBytes());\n\n        byte[] dequeuedBytes = queueHandles[0].take();\n        assertEquals(new String(dequeuedBytes), testString);\n    }\n","realPath":"zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"8654e7ed37717df79eb06f75de43eafe4f47b175","commitMessage":"@@@ZOOKEEPER-3342: Use StandardCharsets\n\n> Encodes this String into a sequence of bytes using the platform's default charset.  storing the result into a new byte array.  The behavior of this method when this string cannot be encoded in the default charset is unspecified.\n\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/String.html#getBytes--\n\n1.  Since this is a distributed system.  it is always possible that different nodes have different default charsets defined.  I think it's most safe to specify it explicitly across all nodes for safety sake.  You could for example see a situation where an upgrade JVM uses a different default and during a rolling upgrade of the JVM.  different nodes now have a different default.\n2.  The default charset is usually \"ISO-8859-1\".  UTF-8 covers more of our international friends.\n3. Explicitly specifying the CharSet yields slight performance gains\n4. Explicitly specifying the CharSet removes the need for try/catch blocks of UnsupportedEncodingException\n\nhttps://blog.codecentric.de/en/2014/04/faster-cleaner-code-since-java-7/\n\nAuthor: David Mollitor <dmollitor@apache.org>\nAuthor: Beluga Behr <dam6923@gmail.com>\nAuthor: David Mollitor <dam6923@gmail.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Andor Molnar <anmolnar@apache.org>\n\nCloses #882 from belugabehr/ZOOKEEPER-3342\n","date":"2020-10-30 19:03:41","modifiedFileCount":"32","status":"M","submitter":"David Mollitor"}]
