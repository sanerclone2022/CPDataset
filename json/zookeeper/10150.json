[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"        protected Follower makeFollower(FileTxnSnapLog logFactory)\n                throws IOException {\n            return new Follower(this, new FollowerZooKeeperServer(logFactory,\n                    this, this.getZkDb())) {\n                @Override\n                void followLeader() throws InterruptedException {\n                    if (context.quitFollowing) {\n                        \r\n                        context.quitFollowing = false;\n                        LOG.info(\"Quit following\");\n                        return;\n                    } else {\n                        super.followLeader();\n                    }\n                }\n\n                @Override\n                void writePacket(QuorumPacket pp, boolean flush) throws IOException {\n                    if (pp != null && pp.getType() == Leader.ACK\n                            && context.exitWhenAckNewLeader) {\n                        if (context.newLeaderAckCallback != null) {\n                            context.newLeaderAckCallback.start();\n                        }\n                    }\n                    super.writePacket(pp, flush);\n                }\n            };\n        }\n","date":"2018-10-05 20:25:43","endLine":1945,"groupId":"1766","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"makeFollower","params":"(FileTxnSnapLoglogFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0f/abaf7785d6e795c5acbfa325007494a15a3dc9.src","preCode":"        protected Follower makeFollower(FileTxnSnapLog logFactory)\n                throws IOException {\n            return new Follower(this, new FollowerZooKeeperServer(logFactory,\n                    this, this.getZkDb())) {\n                @Override\n                void followLeader() throws InterruptedException {\n                    if (context.quitFollowing) {\n                        \r\n                        context.quitFollowing = false;\n                        LOG.info(\"Quit following\");\n                        return;\n                    } else {\n                        super.followLeader();\n                    }\n                }\n\n                @Override\n                void writePacket(QuorumPacket pp, boolean flush) throws IOException {\n                    if (pp != null && pp.getType() == Leader.ACK\n                            && context.exitWhenAckNewLeader) {\n                        if (context.newLeaderAckCallback != null) {\n                            context.newLeaderAckCallback.start();\n                        }\n                    }\n                    super.writePacket(pp, flush);\n                }\n            };\n        }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":1918,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"        protected Follower makeFollower(FileTxnSnapLog logFactory) throws IOException {\n\n            return new Follower(this, new FollowerZooKeeperServer(logFactory, this, this.getZkDb())) {\n\n                @Override\n                void writePacket(QuorumPacket pp, boolean flush) throws IOException {\n                    if (pp != null && pp.getType() == Leader.ACK) {\n                        newLeaderMessage = true;\n                        try {\n                            \r\n\r\n\r\n\r\n\n                            Thread.sleep(100);\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    super.writePacket(pp, flush);\n                }\n            };\n        }\n","date":"2018-10-05 20:25:43","endLine":250,"groupId":"214","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"makeFollower","params":"(FileTxnSnapLoglogFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f3/50abf05ad40dc2e7baca270a48948fbc10fa69.src","preCode":"        protected Follower makeFollower(FileTxnSnapLog logFactory) throws IOException {\n\n            return new Follower(this, new FollowerZooKeeperServer(logFactory, this, this.getZkDb())) {\n\n                @Override\n                void writePacket(QuorumPacket pp, boolean flush) throws IOException {\n                    if (pp != null && pp.getType() == Leader.ACK) {\n                        newLeaderMessage = true;\n                        try {\n                            \r\n\r\n\r\n\r\n\n                            Thread.sleep(100);\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    super.writePacket(pp, flush);\n                }\n            };\n        }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReconfigDuringLeaderSyncTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2020-11-23 19:53:14","commitOrder":2,"curCode":"        protected Follower makeFollower(FileTxnSnapLog logFactory) throws IOException {\n            return new Follower(this, new FollowerZooKeeperServer(logFactory, this, this.getZkDb())) {\n                @Override\n                void followLeader() throws InterruptedException {\n                    if (context.quitFollowing) {\n                        \r\n                        context.quitFollowing = false;\n                        LOG.info(\"Quit following\");\n                        return;\n                    } else {\n                        super.followLeader();\n                    }\n                }\n\n                @Override\n                void writePacket(QuorumPacket pp, boolean flush) throws IOException {\n                    if (pp != null && pp.getType() == Leader.ACK && context.exitWhenAckNewLeader) {\n                        if (context.newLeaderAckCallback != null) {\n                            context.newLeaderAckCallback.start();\n                        }\n                    }\n                    super.writePacket(pp, flush);\n                }\n\n                @Override\n                void readPacket(QuorumPacket qp) throws IOException {\n                    super.readPacket(qp);\n                    if (qp.getType() == Leader.NEWLEADER && context.newLeaderReceivedCallback != null) {\n                        context.newLeaderReceivedCallback.process();\n                    }\n                }\n            };\n        }\n","date":"2020-11-23 19:53:14","endLine":1846,"groupId":"10150","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"makeFollower","params":"(FileTxnSnapLoglogFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/bc/00d2133088e91eba5104a43b1a7fe1750e3ec9.src","preCode":"        protected Follower makeFollower(FileTxnSnapLog logFactory) throws IOException {\n            return new Follower(this, new FollowerZooKeeperServer(logFactory, this, this.getZkDb())) {\n                @Override\n                void followLeader() throws InterruptedException {\n                    if (context.quitFollowing) {\n                        \r\n                        context.quitFollowing = false;\n                        LOG.info(\"Quit following\");\n                        return;\n                    } else {\n                        super.followLeader();\n                    }\n                }\n\n                @Override\n                void writePacket(QuorumPacket pp, boolean flush) throws IOException {\n                    if (pp != null && pp.getType() == Leader.ACK && context.exitWhenAckNewLeader) {\n                        if (context.newLeaderAckCallback != null) {\n                            context.newLeaderAckCallback.start();\n                        }\n                    }\n                    super.writePacket(pp, flush);\n                }\n            };\n        }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":1814,"status":"M"},{"authorDate":"2018-10-05 20:25:43","commitOrder":2,"curCode":"        protected Follower makeFollower(FileTxnSnapLog logFactory) throws IOException {\n\n            return new Follower(this, new FollowerZooKeeperServer(logFactory, this, this.getZkDb())) {\n\n                @Override\n                void writePacket(QuorumPacket pp, boolean flush) throws IOException {\n                    if (pp != null && pp.getType() == Leader.ACK) {\n                        newLeaderMessage = true;\n                        try {\n                            \r\n\r\n\r\n\r\n\n                            Thread.sleep(100);\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    super.writePacket(pp, flush);\n                }\n            };\n        }\n","date":"2018-10-05 20:25:43","endLine":250,"groupId":"10150","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"makeFollower","params":"(FileTxnSnapLoglogFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f3/50abf05ad40dc2e7baca270a48948fbc10fa69.src","preCode":"        protected Follower makeFollower(FileTxnSnapLog logFactory) throws IOException {\n\n            return new Follower(this, new FollowerZooKeeperServer(logFactory, this, this.getZkDb())) {\n\n                @Override\n                void writePacket(QuorumPacket pp, boolean flush) throws IOException {\n                    if (pp != null && pp.getType() == Leader.ACK) {\n                        newLeaderMessage = true;\n                        try {\n                            \r\n\r\n\r\n\r\n\n                            Thread.sleep(100);\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    super.writePacket(pp, flush);\n                }\n            };\n        }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReconfigDuringLeaderSyncTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"N"}],"commitId":"efbd660e1c4b90a8f538f2cccb5dcb7094cf9a22","commitMessage":"@@@ZOOKEEPER-3642: Fix potential data inconsistency due to DIFF sync after partial SNAP sync.\n\nBased on https://github.com/apache/zookeeper/pull/1224 ; fixed unit test build issue.\n\nAuthor: Fangmin Lyu <fangmin@apache.org>\nAuthor: Michael Han <hanm@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Originally developed by Fangmin Lyu <fangmin@apache.org>\n\nCloses #1515 from hanm/ZOOKEEPER-3642\n","date":"2020-11-23 19:53:14","modifiedFileCount":"3","status":"M","submitter":"Michael Han"}]
