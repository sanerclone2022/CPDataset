[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testCreateEphemeral(boolean localSessionEnabled) throws Exception {\n        if (localSessionEnabled) {\n            qu.enableLocalSession(true);\n        }\n        qu.startAll();\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/impossible\",\n                new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer()\n                .getServerId();\n        long fakeSessionId = (sid << 56) + 1;\n\n        LOG.info(\"Fake session Id: \" + Long.toHexString(fakeSessionId));\n\n        Request request = new Request(null, fakeSessionId, 0, OpCode.create,\n                bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/impossible\", null);\n        Assert.assertEquals(\"Node from fake session get created\", null, stat);\n\n    }\n","date":"2018-10-19 20:39:50","endLine":120,"groupId":"3939","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateEphemeral","params":"(booleanlocalSessionEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a4/5b9cbfff651824e7a9ec2e0f324201f927f549.src","preCode":"    public void testCreateEphemeral(boolean localSessionEnabled) throws Exception {\n        if (localSessionEnabled) {\n            qu.enableLocalSession(true);\n        }\n        qu.startAll();\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/impossible\",\n                new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer()\n                .getServerId();\n        long fakeSessionId = (sid << 56) + 1;\n\n        LOG.info(\"Fake session Id: \" + Long.toHexString(fakeSessionId));\n\n        Request request = new Request(null, fakeSessionId, 0, OpCode.create,\n                bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/impossible\", null);\n        Assert.assertEquals(\"Node from fake session get created\", null, stat);\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/LeaderSessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testCreatePersistent() throws Exception {\n        qu.enableLocalSession(true);\n        qu.startAll();\n\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/success\",\n                new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer()\n                .getServerId();\n        long locallSession = (sid << 56) + 1;\n\n        LOG.info(\"Local session Id: \" + Long.toHexString(locallSession));\n\n        Request request = new Request(null, locallSession, 0, OpCode.create,\n                bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/success\", null);\n        Assert.assertTrue(\"Request from local sesson failed\", stat != null);\n\n    }\n","date":"2018-10-19 20:39:50","endLine":162,"groupId":"3940","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePersistent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a4/5b9cbfff651824e7a9ec2e0f324201f927f549.src","preCode":"    public void testCreatePersistent() throws Exception {\n        qu.enableLocalSession(true);\n        qu.startAll();\n\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/success\",\n                new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer()\n                .getServerId();\n        long locallSession = (sid << 56) + 1;\n\n        LOG.info(\"Local session Id: \" + Long.toHexString(locallSession));\n\n        Request request = new Request(null, locallSession, 0, OpCode.create,\n                bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/success\", null);\n        Assert.assertTrue(\"Request from local sesson failed\", stat != null);\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/LeaderSessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testCreateEphemeral(boolean localSessionEnabled) throws Exception {\n        if (localSessionEnabled) {\n            qu.enableLocalSession(true);\n        }\n        qu.startAll();\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/impossible\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer().getServerId();\n        long fakeSessionId = (sid << 56) + 1;\n\n        LOG.info(\"Fake session Id: \" + Long.toHexString(fakeSessionId));\n\n        Request request = new Request(null, fakeSessionId, 0, OpCode.create, bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/impossible\", null);\n        assertEquals(\"Node from fake session get created\", null, stat);\n\n    }\n","date":"2019-08-17 23:13:15","endLine":114,"groupId":"3939","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateEphemeral","params":"(booleanlocalSessionEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/cc/92efae4a475cf7d3fbebfb771660d738e53960.src","preCode":"    public void testCreateEphemeral(boolean localSessionEnabled) throws Exception {\n        if (localSessionEnabled) {\n            qu.enableLocalSession(true);\n        }\n        qu.startAll();\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/impossible\",\n                new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer()\n                .getServerId();\n        long fakeSessionId = (sid << 56) + 1;\n\n        LOG.info(\"Fake session Id: \" + Long.toHexString(fakeSessionId));\n\n        Request request = new Request(null, fakeSessionId, 0, OpCode.create,\n                bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/impossible\", null);\n        Assert.assertEquals(\"Node from fake session get created\", null, stat);\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/LeaderSessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testCreatePersistent() throws Exception {\n        qu.enableLocalSession(true);\n        qu.startAll();\n\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/success\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer().getServerId();\n        long locallSession = (sid << 56) + 1;\n\n        LOG.info(\"Local session Id: \" + Long.toHexString(locallSession));\n\n        Request request = new Request(null, locallSession, 0, OpCode.create, bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/success\", null);\n        assertTrue(\"Request from local sesson failed\", stat != null);\n\n    }\n","date":"2019-08-17 23:13:15","endLine":152,"groupId":"3940","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePersistent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/cc/92efae4a475cf7d3fbebfb771660d738e53960.src","preCode":"    public void testCreatePersistent() throws Exception {\n        qu.enableLocalSession(true);\n        qu.startAll();\n\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/success\",\n                new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer()\n                .getServerId();\n        long locallSession = (sid << 56) + 1;\n\n        LOG.info(\"Local session Id: \" + Long.toHexString(locallSession));\n\n        Request request = new Request(null, locallSession, 0, OpCode.create,\n                bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/success\", null);\n        Assert.assertTrue(\"Request from local sesson failed\", stat != null);\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/LeaderSessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2019-10-10 20:37:45","commitOrder":3,"curCode":"    public void testCreateEphemeral(boolean localSessionEnabled) throws Exception {\n        if (localSessionEnabled) {\n            qu.enableLocalSession(true);\n        }\n        qu.startAll();\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/impossible\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer().getServerId();\n        long fakeSessionId = (sid << 56) + 1;\n\n        LOG.info(\"Fake session Id: {}\", Long.toHexString(fakeSessionId));\n\n        Request request = new Request(null, fakeSessionId, 0, OpCode.create, bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/impossible\", null);\n        assertEquals(\"Node from fake session get created\", null, stat);\n\n    }\n","date":"2019-10-10 20:37:45","endLine":114,"groupId":"3939","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateEphemeral","params":"(booleanlocalSessionEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/dd/6e4cdd739e3ec0f6d5121cd31dd893f599d0fb.src","preCode":"    public void testCreateEphemeral(boolean localSessionEnabled) throws Exception {\n        if (localSessionEnabled) {\n            qu.enableLocalSession(true);\n        }\n        qu.startAll();\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/impossible\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer().getServerId();\n        long fakeSessionId = (sid << 56) + 1;\n\n        LOG.info(\"Fake session Id: \" + Long.toHexString(fakeSessionId));\n\n        Request request = new Request(null, fakeSessionId, 0, OpCode.create, bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/impossible\", null);\n        assertEquals(\"Node from fake session get created\", null, stat);\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/LeaderSessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2019-10-10 20:37:45","commitOrder":3,"curCode":"    public void testCreatePersistent() throws Exception {\n        qu.enableLocalSession(true);\n        qu.startAll();\n\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/success\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer().getServerId();\n        long locallSession = (sid << 56) + 1;\n\n        LOG.info(\"Local session Id: {}\", Long.toHexString(locallSession));\n\n        Request request = new Request(null, locallSession, 0, OpCode.create, bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/success\", null);\n        assertTrue(\"Request from local sesson failed\", stat != null);\n\n    }\n","date":"2019-10-10 20:37:45","endLine":152,"groupId":"1984","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePersistent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/dd/6e4cdd739e3ec0f6d5121cd31dd893f599d0fb.src","preCode":"    public void testCreatePersistent() throws Exception {\n        qu.enableLocalSession(true);\n        qu.startAll();\n\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/success\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer().getServerId();\n        long locallSession = (sid << 56) + 1;\n\n        LOG.info(\"Local session Id: \" + Long.toHexString(locallSession));\n\n        Request request = new Request(null, locallSession, 0, OpCode.create, bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/success\", null);\n        assertTrue(\"Request from local sesson failed\", stat != null);\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/LeaderSessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testCreateEphemeral(boolean localSessionEnabled) throws Exception {\n        if (localSessionEnabled) {\n            qu.enableLocalSession(true);\n        }\n        qu.startAll();\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/impossible\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer().getServerId();\n        long fakeSessionId = (sid << 56) + 1;\n\n        LOG.info(\"Fake session Id: {}\", Long.toHexString(fakeSessionId));\n\n        Request request = new Request(null, fakeSessionId, 0, OpCode.create, bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/impossible\", null);\n        assertEquals(null, stat, \"Node from fake session get created\");\n\n    }\n","date":"2020-08-04 21:01:52","endLine":114,"groupId":"10666","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testCreateEphemeral","params":"(booleanlocalSessionEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/99/cd171c01f52567a28ae543f3fb4a3f904fd988.src","preCode":"    public void testCreateEphemeral(boolean localSessionEnabled) throws Exception {\n        if (localSessionEnabled) {\n            qu.enableLocalSession(true);\n        }\n        qu.startAll();\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/impossible\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer().getServerId();\n        long fakeSessionId = (sid << 56) + 1;\n\n        LOG.info(\"Fake session Id: {}\", Long.toHexString(fakeSessionId));\n\n        Request request = new Request(null, fakeSessionId, 0, OpCode.create, bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/impossible\", null);\n        assertEquals(\"Node from fake session get created\", null, stat);\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/LeaderSessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testCreatePersistent() throws Exception {\n        qu.enableLocalSession(true);\n        qu.startAll();\n\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/success\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer().getServerId();\n        long locallSession = (sid << 56) + 1;\n\n        LOG.info(\"Local session Id: {}\", Long.toHexString(locallSession));\n\n        Request request = new Request(null, locallSession, 0, OpCode.create, bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/success\", null);\n        assertTrue(stat != null, \"Request from local sesson failed\");\n\n    }\n","date":"2020-08-04 21:01:52","endLine":152,"groupId":"10666","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testCreatePersistent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/99/cd171c01f52567a28ae543f3fb4a3f904fd988.src","preCode":"    public void testCreatePersistent() throws Exception {\n        qu.enableLocalSession(true);\n        qu.startAll();\n\n        QuorumPeer leader = qu.getLeaderQuorumPeer();\n\n        ZooKeeper zk = ClientBase.createZKClient(qu.getConnectString(leader));\n\n        CreateRequest createRequest = new CreateRequest(\"/success\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT.toFlag());\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n        createRequest.serialize(boa, \"request\");\n        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n        \r\n        long sid = qu.getFollowerQuorumPeers().get(0).getActiveServer().getServerId();\n        long locallSession = (sid << 56) + 1;\n\n        LOG.info(\"Local session Id: {}\", Long.toHexString(locallSession));\n\n        Request request = new Request(null, locallSession, 0, OpCode.create, bb, new ArrayList<Id>());\n\n        \r\n        leader.getActiveServer().submitRequest(request);\n\n        \r\n        zk.create(\"/ok\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        Stat stat = zk.exists(\"/success\", null);\n        assertTrue(\"Request from local sesson failed\", stat != null);\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/LeaderSessionTrackerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
