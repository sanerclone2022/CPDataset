[{"authorTime":"2018-11-07 09:29:49","codes":[{"authorDate":"2018-11-07 09:29:49","commitOrder":1,"curCode":"    public static X509Certificate newSelfSignedCACert(\n            X500Name subject,\n            KeyPair keyPair,\n            long expirationMillis) throws IOException, OperatorCreationException, GeneralSecurityException {\n        Date now = new Date();\n        X509v3CertificateBuilder builder = initCertBuilder(\n                subject, \r\n                now,\n                new Date(now.getTime() + expirationMillis),\n                subject,\n                keyPair.getPublic());\n        builder.addExtension(Extension.basicConstraints, true, new BasicConstraints(true)); \r\n        builder.addExtension(\n                Extension.keyUsage,\n                true,\n                new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n        return buildAndSignCertificate(keyPair.getPrivate(), builder);\n    }\n","date":"2018-11-07 09:29:49","endLine":120,"groupId":"49","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newSelfSignedCACert","params":"(X500Namesubject@KeyPairkeyPair@longexpirationMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/59/b7634a41c6e890fc6ed2406715d2b129da6b8c.src","preCode":"    public static X509Certificate newSelfSignedCACert(\n            X500Name subject,\n            KeyPair keyPair,\n            long expirationMillis) throws IOException, OperatorCreationException, GeneralSecurityException {\n        Date now = new Date();\n        X509v3CertificateBuilder builder = initCertBuilder(\n                subject, \r\n                now,\n                new Date(now.getTime() + expirationMillis),\n                subject,\n                keyPair.getPublic());\n        builder.addExtension(Extension.basicConstraints, true, new BasicConstraints(true)); \r\n        builder.addExtension(\n                Extension.keyUsage,\n                true,\n                new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n        return buildAndSignCertificate(keyPair.getPrivate(), builder);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/X509TestHelpers.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"},{"authorDate":"2018-11-07 09:29:49","commitOrder":1,"curCode":"    public static X509Certificate newCert(\n            X509Certificate caCert,\n            KeyPair caKeyPair,\n            X500Name certSubject,\n            PublicKey certPublicKey,\n            long expirationMillis) throws IOException, OperatorCreationException, GeneralSecurityException {\n        if (!caKeyPair.getPublic().equals(caCert.getPublicKey())) {\n            throw new IllegalArgumentException(\"CA private key does not match the public key in the CA cert\");\n        }\n        Date now = new Date();\n        X509v3CertificateBuilder builder = initCertBuilder(\n                new X500Name(caCert.getIssuerDN().getName()),\n                now,\n                new Date(now.getTime() + expirationMillis),\n                certSubject,\n                certPublicKey);\n        builder.addExtension(Extension.basicConstraints, true, new BasicConstraints(false)); \r\n        builder.addExtension(\n                Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyAgreement));\n        builder.addExtension(\n                Extension.extendedKeyUsage,\n                true,\n                new ExtendedKeyUsage(new KeyPurposeId[] { KeyPurposeId.id_kp_serverAuth, KeyPurposeId.id_kp_clientAuth }));\n\n        builder.addExtension(\n                Extension.subjectAlternativeName,\n                false,\n                getLocalhostSubjectAltNames());\n        return buildAndSignCertificate(caKeyPair.getPrivate(), builder);\n    }\n","date":"2018-11-07 09:29:49","endLine":166,"groupId":"375","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newCert","params":"(X509CertificatecaCert@KeyPaircaKeyPair@X500NamecertSubject@PublicKeycertPublicKey@longexpirationMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/59/b7634a41c6e890fc6ed2406715d2b129da6b8c.src","preCode":"    public static X509Certificate newCert(\n            X509Certificate caCert,\n            KeyPair caKeyPair,\n            X500Name certSubject,\n            PublicKey certPublicKey,\n            long expirationMillis) throws IOException, OperatorCreationException, GeneralSecurityException {\n        if (!caKeyPair.getPublic().equals(caCert.getPublicKey())) {\n            throw new IllegalArgumentException(\"CA private key does not match the public key in the CA cert\");\n        }\n        Date now = new Date();\n        X509v3CertificateBuilder builder = initCertBuilder(\n                new X500Name(caCert.getIssuerDN().getName()),\n                now,\n                new Date(now.getTime() + expirationMillis),\n                certSubject,\n                certPublicKey);\n        builder.addExtension(Extension.basicConstraints, true, new BasicConstraints(false)); \r\n        builder.addExtension(\n                Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyAgreement));\n        builder.addExtension(\n                Extension.extendedKeyUsage,\n                true,\n                new ExtendedKeyUsage(new KeyPurposeId[] { KeyPurposeId.id_kp_serverAuth, KeyPurposeId.id_kp_clientAuth }));\n\n        builder.addExtension(\n                Extension.subjectAlternativeName,\n                false,\n                getLocalhostSubjectAltNames());\n        return buildAndSignCertificate(caKeyPair.getPrivate(), builder);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/X509TestHelpers.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"}],"commitId":"03286f29d29f4c1d3496ce87d1441df91422220e","commitMessage":"@@@ZOOKEEPER-3173: Quorum TLS - support PEM trust/key stores\n\nAdd support for loading key and trust stores from PEM files.\n\nUnfortunately.  this PR includes 2 JIRAs.  because it was quite difficult\nto untangle the two features as they were developed at the same time\noriginally:\n\n- ZOOKEEPER-3173: Quorum TLS - support PEM trust/key stores\n- ZOOKEEPER-3175: Quorum TLS - test improvements\n\n## Added support for PEM formatted key stores and trust stores\n- key store and trust store files can now be in PEM format as well as JKS.\n- Added config properties to tell ZK what type of trust/key store to load:\n- `zookeeper.ssl.keyStore.type` and `zookeeper.ssl.trustStore.type` for ClientX509Util\n- `zookeeper.ssl.quorum.keyStore.type` and `zookeeper.ssl.quorum.trustStore.type` for QuorumX509Util\n- store type properties could have the values \"JKS\".  \"PEM\".  or not set\n- leaving the type properties unset will cause auto-detection of the store type based on the file extension (\".jks\" or \".pem\")\n\n## Added test utilities for easily creating X509 certs and using them in unit tests\n- added new class `X509TestContext` and its friend.  `X509TestHelpers`\n- rewrote some existing unit tests to use these classes.  and added new tests that use them\n- some existing tests (i.e. `QuorumSSLTest`) should probably be ported to use this as well.  haven't got around to it yet\n\nAuthor: Ilya Maykov <ilyam@fb.com>\n\nReviewers: andor@apache.org\n\nCloses #678 from ivmaykov/ZOOKEEPER-3173\n","date":"2018-11-07 09:29:49","modifiedFileCount":"4","status":"B","submitter":"Ilya Maykov"},{"authorTime":"2019-01-02 20:41:06","codes":[{"authorDate":"2018-11-07 09:29:49","commitOrder":2,"curCode":"    public static X509Certificate newSelfSignedCACert(\n            X500Name subject,\n            KeyPair keyPair,\n            long expirationMillis) throws IOException, OperatorCreationException, GeneralSecurityException {\n        Date now = new Date();\n        X509v3CertificateBuilder builder = initCertBuilder(\n                subject, \r\n                now,\n                new Date(now.getTime() + expirationMillis),\n                subject,\n                keyPair.getPublic());\n        builder.addExtension(Extension.basicConstraints, true, new BasicConstraints(true)); \r\n        builder.addExtension(\n                Extension.keyUsage,\n                true,\n                new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n        return buildAndSignCertificate(keyPair.getPrivate(), builder);\n    }\n","date":"2018-11-07 09:29:49","endLine":120,"groupId":"10363","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"newSelfSignedCACert","params":"(X500Namesubject@KeyPairkeyPair@longexpirationMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/59/b7634a41c6e890fc6ed2406715d2b129da6b8c.src","preCode":"    public static X509Certificate newSelfSignedCACert(\n            X500Name subject,\n            KeyPair keyPair,\n            long expirationMillis) throws IOException, OperatorCreationException, GeneralSecurityException {\n        Date now = new Date();\n        X509v3CertificateBuilder builder = initCertBuilder(\n                subject, \r\n                now,\n                new Date(now.getTime() + expirationMillis),\n                subject,\n                keyPair.getPublic());\n        builder.addExtension(Extension.basicConstraints, true, new BasicConstraints(true)); \r\n        builder.addExtension(\n                Extension.keyUsage,\n                true,\n                new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n        return buildAndSignCertificate(keyPair.getPrivate(), builder);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/X509TestHelpers.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2019-01-02 20:41:06","commitOrder":2,"curCode":"    public static X509Certificate newCert(\n            X509Certificate caCert,\n            KeyPair caKeyPair,\n            X500Name certSubject,\n            PublicKey certPublicKey,\n            long expirationMillis) throws IOException, OperatorCreationException, GeneralSecurityException {\n        if (!caKeyPair.getPublic().equals(caCert.getPublicKey())) {\n            throw new IllegalArgumentException(\"CA private key does not match the public key in the CA cert\");\n        }\n        Date now = new Date();\n        X509v3CertificateBuilder builder = initCertBuilder(\n                new X500Name(caCert.getIssuerDN().getName()),\n                now,\n                new Date(now.getTime() + expirationMillis),\n                certSubject,\n                certPublicKey);\n        builder.addExtension(Extension.basicConstraints, true, new BasicConstraints(false)); \r\n        builder.addExtension(\n                Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));\n        builder.addExtension(\n                Extension.extendedKeyUsage,\n                true,\n                new ExtendedKeyUsage(new KeyPurposeId[] { KeyPurposeId.id_kp_serverAuth, KeyPurposeId.id_kp_clientAuth }));\n\n        builder.addExtension(\n                Extension.subjectAlternativeName,\n                false,\n                getLocalhostSubjectAltNames());\n        return buildAndSignCertificate(caKeyPair.getPrivate(), builder);\n    }\n","date":"2019-01-02 20:41:06","endLine":166,"groupId":"10363","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"newCert","params":"(X509CertificatecaCert@KeyPaircaKeyPair@X500NamecertSubject@PublicKeycertPublicKey@longexpirationMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/2c/a250da8ac4254d701281ac37f4b0d57bb23f3a.src","preCode":"    public static X509Certificate newCert(\n            X509Certificate caCert,\n            KeyPair caKeyPair,\n            X500Name certSubject,\n            PublicKey certPublicKey,\n            long expirationMillis) throws IOException, OperatorCreationException, GeneralSecurityException {\n        if (!caKeyPair.getPublic().equals(caCert.getPublicKey())) {\n            throw new IllegalArgumentException(\"CA private key does not match the public key in the CA cert\");\n        }\n        Date now = new Date();\n        X509v3CertificateBuilder builder = initCertBuilder(\n                new X500Name(caCert.getIssuerDN().getName()),\n                now,\n                new Date(now.getTime() + expirationMillis),\n                certSubject,\n                certPublicKey);\n        builder.addExtension(Extension.basicConstraints, true, new BasicConstraints(false)); \r\n        builder.addExtension(\n                Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyAgreement));\n        builder.addExtension(\n                Extension.extendedKeyUsage,\n                true,\n                new ExtendedKeyUsage(new KeyPurposeId[] { KeyPurposeId.id_kp_serverAuth, KeyPurposeId.id_kp_clientAuth }));\n\n        builder.addExtension(\n                Extension.subjectAlternativeName,\n                false,\n                getLocalhostSubjectAltNames());\n        return buildAndSignCertificate(caKeyPair.getPrivate(), builder);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/X509TestHelpers.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"2a3800f00f4c14dde97c42a54806ba3485f27183","commitMessage":"@@@ZOOKEEPER-3228: [TLS] Fix key usage extension in test certs\n\nKey usage extension is wrong in test certs created by X509TestHelpers. This works with Java SSL stack because it allows sloppy certs.  but breaks with Netty's OpenSSL stack. My Netty OpenSSL code is not ready for upstream yet.  but fixing the test cert extensions is a prerequisite and can go in separately.\n\nAuthor: Ilya Maykov <ilyam@fb.com>\n\nReviewers: fangmin@apache.org.  andor@apache.org\n\nCloses #743 from ivmaykov/ZOOKEEPER-3228\n","date":"2019-01-02 20:41:06","modifiedFileCount":"1","status":"M","submitter":"Ilya Maykov"}]
