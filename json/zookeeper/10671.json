[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testDefaultWatcherAutoResetWithChroot() throws Exception {\n        ZooKeeper zk1 = createClient();\n\n        zk1.create(\"/ch1\", null, Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n\n        MyWatcher watcher = new MyWatcher();\n        ZooKeeper zk2 = createClient(watcher, hostPort + \"/ch1\");\n        zk2.getChildren(\"/\", true );\n\n        \r\n        zk1.create(\"/youdontmatter1\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        \r\n        zk1.create(\"/ch1/youshouldmatter1\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        WatchedEvent e = watcher.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/\", e.getPath());\n\n        zk2.getChildren(\"/\", true );\n\n        stopServer();\n        watcher.waitForDisconnected(3000);\n        startServer();\n        watcher.waitForConnected(3000);\n\n        \r\n        zk1.create(\"/ch1/youshouldmatter2\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        e = watcher.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/\", e.getPath());\n    }\n","date":"2018-10-19 20:39:50","endLine":135,"groupId":"3853","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultWatcherAutoResetWithChroot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/65e219f6b61b56f8040b57dbb755bbe407c4ba.src","preCode":"    public void testDefaultWatcherAutoResetWithChroot() throws Exception {\n        ZooKeeper zk1 = createClient();\n\n        zk1.create(\"/ch1\", null, Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n\n        MyWatcher watcher = new MyWatcher();\n        ZooKeeper zk2 = createClient(watcher, hostPort + \"/ch1\");\n        zk2.getChildren(\"/\", true );\n\n        \r\n        zk1.create(\"/youdontmatter1\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        \r\n        zk1.create(\"/ch1/youshouldmatter1\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        WatchedEvent e = watcher.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/\", e.getPath());\n\n        zk2.getChildren(\"/\", true );\n\n        stopServer();\n        watcher.waitForDisconnected(3000);\n        startServer();\n        watcher.waitForConnected(3000);\n\n        \r\n        zk1.create(\"/ch1/youshouldmatter2\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        e = watcher.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/\", e.getPath());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/DisconnectedWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testDeepChildWatcherAutoResetWithChroot() throws Exception {\n        ZooKeeper zk1 = createClient();\n\n        zk1.create(\"/ch1\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here/we\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here/we/are\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        MyWatcher watcher = new MyWatcher();\n        ZooKeeper zk2 = createClient(watcher, hostPort + \"/ch1/here/we\");\n        zk2.getChildren(\"/are\", true );\n\n        \r\n        zk1.create(\"/ch1/here/we/are/now\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        WatchedEvent e = watcher.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/are\", e.getPath());\n\n        MyWatcher childWatcher = new MyWatcher();\n        zk2.getChildren(\"/are\", childWatcher);\n        \n        stopServer();\n        watcher.waitForDisconnected(3000);\n        startServer();\n        watcher.waitForConnected(3000);\n\n        \r\n        zk1.create(\"/ch1/here/we/are/again\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        e = childWatcher.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/are\", e.getPath());\n    }\n","date":"2018-10-19 20:39:50","endLine":177,"groupId":"4713","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeepChildWatcherAutoResetWithChroot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/65e219f6b61b56f8040b57dbb755bbe407c4ba.src","preCode":"    public void testDeepChildWatcherAutoResetWithChroot() throws Exception {\n        ZooKeeper zk1 = createClient();\n\n        zk1.create(\"/ch1\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here/we\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here/we/are\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        MyWatcher watcher = new MyWatcher();\n        ZooKeeper zk2 = createClient(watcher, hostPort + \"/ch1/here/we\");\n        zk2.getChildren(\"/are\", true );\n\n        \r\n        zk1.create(\"/ch1/here/we/are/now\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        WatchedEvent e = watcher.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/are\", e.getPath());\n\n        MyWatcher childWatcher = new MyWatcher();\n        zk2.getChildren(\"/are\", childWatcher);\n        \n        stopServer();\n        watcher.waitForDisconnected(3000);\n        startServer();\n        watcher.waitForConnected(3000);\n\n        \r\n        zk1.create(\"/ch1/here/we/are/again\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        e = childWatcher.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/are\", e.getPath());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/DisconnectedWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-03-12 04:56:36","codes":[{"authorDate":"2019-03-12 04:56:36","commitOrder":2,"curCode":"    public void testDefaultWatcherAutoResetWithChroot() throws Exception {\n        zk1.create(\"/ch1\", null, Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n\n        zk2 = createClient(watcher2, hostPort + \"/ch1\");\n        zk2.getChildren(\"/\", true );\n\n        \r\n        zk1.create(\"/youdontmatter1\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        \r\n        zk1.create(\"/ch1/youshouldmatter1\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        WatchedEvent e = watcher2.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/\", e.getPath());\n\n        zk2.getChildren(\"/\", true );\n\n        stopServer();\n        watcher2.waitForDisconnected(3000);\n        startServer();\n        watcher2.waitForConnected(3000);\n        watcher1.waitForConnected(3000);\n\n        \r\n        zk1.create(\"/ch1/youshouldmatter2\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        e = watcher2.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/\", e.getPath());\n    }\n","date":"2019-03-12 04:56:36","endLine":157,"groupId":"3460","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultWatcherAutoResetWithChroot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f4/59919edf30bb20f528958d432f9c0d9a88f6fe.src","preCode":"    public void testDefaultWatcherAutoResetWithChroot() throws Exception {\n        ZooKeeper zk1 = createClient();\n\n        zk1.create(\"/ch1\", null, Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n\n        MyWatcher watcher = new MyWatcher();\n        ZooKeeper zk2 = createClient(watcher, hostPort + \"/ch1\");\n        zk2.getChildren(\"/\", true );\n\n        \r\n        zk1.create(\"/youdontmatter1\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        \r\n        zk1.create(\"/ch1/youshouldmatter1\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        WatchedEvent e = watcher.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/\", e.getPath());\n\n        zk2.getChildren(\"/\", true );\n\n        stopServer();\n        watcher.waitForDisconnected(3000);\n        startServer();\n        watcher.waitForConnected(3000);\n\n        \r\n        zk1.create(\"/ch1/youshouldmatter2\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        e = watcher.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/\", e.getPath());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/DisconnectedWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2019-03-12 04:56:36","commitOrder":2,"curCode":"    public void testDeepChildWatcherAutoResetWithChroot() throws Exception {\n        zk1.create(\"/ch1\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here/we\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here/we/are\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk2 = createClient(watcher2, hostPort + \"/ch1/here/we\");\n        zk2.getChildren(\"/are\", true );\n\n        \r\n        zk1.create(\"/ch1/here/we/are/now\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        WatchedEvent e = watcher2.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/are\", e.getPath());\n\n        MyWatcher childWatcher = new MyWatcher();\n        zk2.getChildren(\"/are\", childWatcher);\n        \n        stopServer();\n        watcher2.waitForDisconnected(3000);\n        startServer();\n        watcher2.waitForConnected(3000);\n        watcher1.waitForConnected(3000);\n\n        \r\n        zk1.create(\"/ch1/here/we/are/again\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        e = childWatcher.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/are\", e.getPath());\n    }\n","date":"2019-03-12 04:56:36","endLine":197,"groupId":"4713","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeepChildWatcherAutoResetWithChroot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f4/59919edf30bb20f528958d432f9c0d9a88f6fe.src","preCode":"    public void testDeepChildWatcherAutoResetWithChroot() throws Exception {\n        ZooKeeper zk1 = createClient();\n\n        zk1.create(\"/ch1\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here/we\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here/we/are\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        MyWatcher watcher = new MyWatcher();\n        ZooKeeper zk2 = createClient(watcher, hostPort + \"/ch1/here/we\");\n        zk2.getChildren(\"/are\", true );\n\n        \r\n        zk1.create(\"/ch1/here/we/are/now\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        WatchedEvent e = watcher.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/are\", e.getPath());\n\n        MyWatcher childWatcher = new MyWatcher();\n        zk2.getChildren(\"/are\", childWatcher);\n        \n        stopServer();\n        watcher.waitForDisconnected(3000);\n        startServer();\n        watcher.waitForConnected(3000);\n\n        \r\n        zk1.create(\"/ch1/here/we/are/again\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        e = childWatcher.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/are\", e.getPath());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/DisconnectedWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"bb39b83e125bb40597346aa4412e21851d1e871e","commitMessage":"@@@ZOOKEEPER-3046: wait for clients to reconnect after restarting server\n\nComment from ZOOKEEPER-3046.  explaining what failure signature motivated this change:\n\nStill seeing test failures; basically a variant of ZOOKEEPER-2508. (After stopping/starting the server.  we have to wait for all clients to reconnect before continuing the test.)\n\n```\n422005     [junit] 2018-11-25 21:25:50. 228 [myid:127.0.0.1:16611] - INFO  [Time-limited test-SendThread(127.0.0.1:16611):ClientCnxn$SendThread1390] - Session establishment complete on serve       r localhost/127.0.0.1:16611.  sessionid = 0x100007077c50001.  negotiated timeout = 30000\n422006     [junit] 2018-11-25 21:25:50. 286 [myid:] - INFO  [Time-limited test:JUnit4ZKTestRunner$LoggedInvokeMethod98] - TEST METHOD FAILED testManyChildWatchersAutoReset\n422007     [junit] org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /long-path-000000000-111111111-222222222-333333333-444444444-555555555-6       66666666-777777777-888888888-999999999/ch-0000000000/ch\n422008     [junit]     at org.apache.zookeeper.KeeperException.create(KeeperException.java:102)\n422009     [junit]     at org.apache.zookeeper.KeeperException.create(KeeperException.java:54)\n422010     [junit]     at org.apache.zookeeper.ZooKeeper.create(ZooKeeper.java:1459)\n422011     [junit]     at org.apache.zookeeper.test.DisconnectedWatcherTest.testManyChildWatchersAutoReset(DisconnectedWatcherTest.java:229)\n```\n\nAuthor: Michael Edwards <Michael Edwards>\n\nReviewers: andor@apache.org\n\nCloses #721 from mkedwards/ZOOKEEPER-3046 and squashes the following commits:\n\n20fd64c71 [Michael Edwards] ZOOKEEPER-3046: call setUp/tearDown from ClientBase in the setUp/tearDown of the subclass\n3965ae81e [Michael Edwards] ZOOKEEPER-3046: factor common setup in DisconnectedWatcherTest tests to a setUp() method\n62e6bca24 [Michael Edwards] ZOOKEEPER-3046: wait for clients to reconnect after restarting server\n","date":"2019-03-12 04:56:36","modifiedFileCount":"1","status":"M","submitter":"Michael Edwards"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testDefaultWatcherAutoResetWithChroot() throws Exception {\n        zk1.create(\"/ch1\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk2 = createClient(watcher2, hostPort + \"/ch1\");\n        zk2.getChildren(\"/\", true);\n\n        \r\n        zk1.create(\"/youdontmatter1\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        \r\n        zk1.create(\"/ch1/youshouldmatter1\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        WatchedEvent e = watcher2.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        assertNotNull(e);\n        assertEquals(EventType.NodeChildrenChanged, e.getType());\n        assertEquals(\"/\", e.getPath());\n\n        zk2.getChildren(\"/\", true);\n\n        stopServer();\n        watcher2.waitForDisconnected(3000);\n        startServer();\n        watcher2.waitForConnected(3000);\n        watcher1.waitForConnected(3000);\n\n        \r\n        zk1.create(\"/ch1/youshouldmatter2\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        e = watcher2.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        assertNotNull(e);\n        assertEquals(EventType.NodeChildrenChanged, e.getType());\n        assertEquals(\"/\", e.getPath());\n    }\n","date":"2019-08-17 23:13:15","endLine":151,"groupId":"10671","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultWatcherAutoResetWithChroot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/dc/ff76cca861ed550ca5b00fdf8f1b152d2b3e7f.src","preCode":"    public void testDefaultWatcherAutoResetWithChroot() throws Exception {\n        zk1.create(\"/ch1\", null, Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n\n        zk2 = createClient(watcher2, hostPort + \"/ch1\");\n        zk2.getChildren(\"/\", true );\n\n        \r\n        zk1.create(\"/youdontmatter1\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        \r\n        zk1.create(\"/ch1/youshouldmatter1\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        WatchedEvent e = watcher2.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/\", e.getPath());\n\n        zk2.getChildren(\"/\", true );\n\n        stopServer();\n        watcher2.waitForDisconnected(3000);\n        startServer();\n        watcher2.waitForConnected(3000);\n        watcher1.waitForConnected(3000);\n\n        \r\n        zk1.create(\"/ch1/youshouldmatter2\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        e = watcher2.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/\", e.getPath());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/DisconnectedWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testDeepChildWatcherAutoResetWithChroot() throws Exception {\n        zk1.create(\"/ch1\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here/we\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here/we/are\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk2 = createClient(watcher2, hostPort + \"/ch1/here/we\");\n        zk2.getChildren(\"/are\", true);\n\n        \r\n        zk1.create(\"/ch1/here/we/are/now\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        WatchedEvent e = watcher2.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        assertNotNull(e);\n        assertEquals(EventType.NodeChildrenChanged, e.getType());\n        assertEquals(\"/are\", e.getPath());\n\n        MyWatcher childWatcher = new MyWatcher();\n        zk2.getChildren(\"/are\", childWatcher);\n\n        stopServer();\n        watcher2.waitForDisconnected(3000);\n        startServer();\n        watcher2.waitForConnected(3000);\n        watcher1.waitForConnected(3000);\n\n        \r\n        zk1.create(\"/ch1/here/we/are/again\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        e = childWatcher.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        assertNotNull(e);\n        assertEquals(EventType.NodeChildrenChanged, e.getType());\n        assertEquals(\"/are\", e.getPath());\n    }\n","date":"2019-08-17 23:13:15","endLine":185,"groupId":"10671","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeepChildWatcherAutoResetWithChroot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/dc/ff76cca861ed550ca5b00fdf8f1b152d2b3e7f.src","preCode":"    public void testDeepChildWatcherAutoResetWithChroot() throws Exception {\n        zk1.create(\"/ch1\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here/we\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        zk1.create(\"/ch1/here/we/are\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk2 = createClient(watcher2, hostPort + \"/ch1/here/we\");\n        zk2.getChildren(\"/are\", true );\n\n        \r\n        zk1.create(\"/ch1/here/we/are/now\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        WatchedEvent e = watcher2.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/are\", e.getPath());\n\n        MyWatcher childWatcher = new MyWatcher();\n        zk2.getChildren(\"/are\", childWatcher);\n        \n        stopServer();\n        watcher2.waitForDisconnected(3000);\n        startServer();\n        watcher2.waitForConnected(3000);\n        watcher1.waitForConnected(3000);\n\n        \r\n        zk1.create(\"/ch1/here/we/are/again\", null, Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        e = childWatcher.events.poll(TIMEOUT, TimeUnit.MILLISECONDS);\n        Assert.assertNotNull(e);\n        Assert.assertEquals(EventType.NodeChildrenChanged, e.getType());\n        Assert.assertEquals(\"/are\", e.getPath());\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/DisconnectedWatcherTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"}]
