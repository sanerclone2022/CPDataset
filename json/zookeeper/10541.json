[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testThreadsShutdownOnAuthFailed() throws Exception {\n        MyWatcher watcher = new MyWatcher();\n        ZooKeeper zk = null;\n        try {\n            zk = new ZooKeeper(hostPort, CONNECTION_TIMEOUT, watcher);\n            watcher.waitForConnected(CONNECTION_TIMEOUT);\n            try {\n                zk.addAuthInfo(\"FOO\", \"BAR\".getBytes());\n                zk.getData(\"/path1\", false, null);\n                Assert.fail(\"Should get auth state error\");\n            } catch (KeeperException.AuthFailedException e) {\n                if (!authFailed.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS)) {\n                    Assert.fail(\"Should have called my watcher\");\n                }\n            }\n            Field cnxnField = zk.getClass().getDeclaredField(\"cnxn\");\n            cnxnField.setAccessible(true);\n            ClientCnxn clientCnxn = (ClientCnxn) cnxnField.get(zk);\n            Field sendThreadField = clientCnxn.getClass().getDeclaredField(\"sendThread\");\n            sendThreadField.setAccessible(true);\n            SendThread sendThread = (SendThread) sendThreadField.get(clientCnxn);\n            Field eventThreadField = clientCnxn.getClass().getDeclaredField(\"eventThread\");\n            eventThreadField.setAccessible(true);\n            EventThread eventThread = (EventThread) eventThreadField.get(clientCnxn);\n            sendThread.join(CONNECTION_TIMEOUT);\n            eventThread.join(CONNECTION_TIMEOUT);\n            Assert.assertFalse(\"SendThread did not shutdown after authFail\", sendThread.isAlive());\n            Assert.assertFalse(\"EventThread did not shutdown after authFail\",\n                eventThread.isAlive());\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n    }\n","date":"2018-10-19 20:39:50","endLine":250,"groupId":"1735","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testThreadsShutdownOnAuthFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/08/8fe1f02752cd830c6970fe4f64012159d13126.src","preCode":"    public void testThreadsShutdownOnAuthFailed() throws Exception {\n        MyWatcher watcher = new MyWatcher();\n        ZooKeeper zk = null;\n        try {\n            zk = new ZooKeeper(hostPort, CONNECTION_TIMEOUT, watcher);\n            watcher.waitForConnected(CONNECTION_TIMEOUT);\n            try {\n                zk.addAuthInfo(\"FOO\", \"BAR\".getBytes());\n                zk.getData(\"/path1\", false, null);\n                Assert.fail(\"Should get auth state error\");\n            } catch (KeeperException.AuthFailedException e) {\n                if (!authFailed.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS)) {\n                    Assert.fail(\"Should have called my watcher\");\n                }\n            }\n            Field cnxnField = zk.getClass().getDeclaredField(\"cnxn\");\n            cnxnField.setAccessible(true);\n            ClientCnxn clientCnxn = (ClientCnxn) cnxnField.get(zk);\n            Field sendThreadField = clientCnxn.getClass().getDeclaredField(\"sendThread\");\n            sendThreadField.setAccessible(true);\n            SendThread sendThread = (SendThread) sendThreadField.get(clientCnxn);\n            Field eventThreadField = clientCnxn.getClass().getDeclaredField(\"eventThread\");\n            eventThreadField.setAccessible(true);\n            EventThread eventThread = (EventThread) eventThreadField.get(clientCnxn);\n            sendThread.join(CONNECTION_TIMEOUT);\n            eventThread.join(CONNECTION_TIMEOUT);\n            Assert.assertFalse(\"SendThread did not shutdown after authFail\", sendThread.isAlive());\n            Assert.assertFalse(\"EventThread did not shutdown after authFail\",\n                eventThread.isAlive());\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/SaslAuthTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testBadAuthThenSendOtherCommands() throws Exception {\n        ZooKeeper zk = createClient();     \n        try {        \n            zk.addAuthInfo(\"INVALID\", \"BAR\".getBytes());\n            zk.exists(\"/foobar\", false);             \n            zk.getData(\"/path1\", false, null);\n            Assert.fail(\"Should get auth state error\");\n        } catch(KeeperException.AuthFailedException e) {\n            if(!authFailed.await(CONNECTION_TIMEOUT,\n                    TimeUnit.MILLISECONDS))\n            {\n                Assert.fail(\"Should have called my watcher\");\n            }\n        }\n        finally {\n            zk.close();          \n        }\n    }\n","date":"2018-10-19 20:39:50","endLine":102,"groupId":"1735","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadAuthThenSendOtherCommands","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/60/e3453bbc705cbb2a37604165647a37a8198b53.src","preCode":"    public void testBadAuthThenSendOtherCommands() throws Exception {\n        ZooKeeper zk = createClient();     \n        try {        \n            zk.addAuthInfo(\"INVALID\", \"BAR\".getBytes());\n            zk.exists(\"/foobar\", false);             \n            zk.getData(\"/path1\", false, null);\n            Assert.fail(\"Should get auth state error\");\n        } catch(KeeperException.AuthFailedException e) {\n            if(!authFailed.await(CONNECTION_TIMEOUT,\n                    TimeUnit.MILLISECONDS))\n            {\n                Assert.fail(\"Should have called my watcher\");\n            }\n        }\n        finally {\n            zk.close();          \n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/AuthTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testThreadsShutdownOnAuthFailed() throws Exception {\n        MyWatcher watcher = new MyWatcher();\n        ZooKeeper zk = null;\n        try {\n            zk = new ZooKeeper(hostPort, CONNECTION_TIMEOUT, watcher);\n            watcher.waitForConnected(CONNECTION_TIMEOUT);\n            try {\n                zk.addAuthInfo(\"FOO\", \"BAR\".getBytes());\n                zk.getData(\"/path1\", false, null);\n                fail(\"Should get auth state error\");\n            } catch (KeeperException.AuthFailedException e) {\n                if (!authFailed.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS)) {\n                    fail(\"Should have called my watcher\");\n                }\n            }\n            Field cnxnField = zk.getClass().getDeclaredField(\"cnxn\");\n            cnxnField.setAccessible(true);\n            ClientCnxn clientCnxn = (ClientCnxn) cnxnField.get(zk);\n            Field sendThreadField = clientCnxn.getClass().getDeclaredField(\"sendThread\");\n            sendThreadField.setAccessible(true);\n            SendThread sendThread = (SendThread) sendThreadField.get(clientCnxn);\n            Field eventThreadField = clientCnxn.getClass().getDeclaredField(\"eventThread\");\n            eventThreadField.setAccessible(true);\n            EventThread eventThread = (EventThread) eventThreadField.get(clientCnxn);\n            sendThread.join(CONNECTION_TIMEOUT);\n            eventThread.join(CONNECTION_TIMEOUT);\n            assertFalse(\"SendThread did not shutdown after authFail\", sendThread.isAlive());\n            assertFalse(\"EventThread did not shutdown after authFail\", eventThread.isAlive());\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":244,"groupId":"1735","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testThreadsShutdownOnAuthFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a6/3ab10145ace70ae18ac38e2ea0751f57c802ae.src","preCode":"    public void testThreadsShutdownOnAuthFailed() throws Exception {\n        MyWatcher watcher = new MyWatcher();\n        ZooKeeper zk = null;\n        try {\n            zk = new ZooKeeper(hostPort, CONNECTION_TIMEOUT, watcher);\n            watcher.waitForConnected(CONNECTION_TIMEOUT);\n            try {\n                zk.addAuthInfo(\"FOO\", \"BAR\".getBytes());\n                zk.getData(\"/path1\", false, null);\n                Assert.fail(\"Should get auth state error\");\n            } catch (KeeperException.AuthFailedException e) {\n                if (!authFailed.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS)) {\n                    Assert.fail(\"Should have called my watcher\");\n                }\n            }\n            Field cnxnField = zk.getClass().getDeclaredField(\"cnxn\");\n            cnxnField.setAccessible(true);\n            ClientCnxn clientCnxn = (ClientCnxn) cnxnField.get(zk);\n            Field sendThreadField = clientCnxn.getClass().getDeclaredField(\"sendThread\");\n            sendThreadField.setAccessible(true);\n            SendThread sendThread = (SendThread) sendThreadField.get(clientCnxn);\n            Field eventThreadField = clientCnxn.getClass().getDeclaredField(\"eventThread\");\n            eventThreadField.setAccessible(true);\n            EventThread eventThread = (EventThread) eventThreadField.get(clientCnxn);\n            sendThread.join(CONNECTION_TIMEOUT);\n            eventThread.join(CONNECTION_TIMEOUT);\n            Assert.assertFalse(\"SendThread did not shutdown after authFail\", sendThread.isAlive());\n            Assert.assertFalse(\"EventThread did not shutdown after authFail\",\n                eventThread.isAlive());\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/SaslAuthTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testBadAuthThenSendOtherCommands() throws Exception {\n        ZooKeeper zk = createClient();\n        try {\n            zk.addAuthInfo(\"INVALID\", \"BAR\".getBytes());\n            zk.exists(\"/foobar\", false);\n            zk.getData(\"/path1\", false, null);\n            fail(\"Should get auth state error\");\n        } catch (KeeperException.AuthFailedException e) {\n            if (!authFailed.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS)) {\n                fail(\"Should have called my watcher\");\n            }\n        } finally {\n            zk.close();\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":94,"groupId":"1735","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadAuthThenSendOtherCommands","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c7/8f6202b3d5c3e9dda2ac1d119f532af79e964c.src","preCode":"    public void testBadAuthThenSendOtherCommands() throws Exception {\n        ZooKeeper zk = createClient();     \n        try {        \n            zk.addAuthInfo(\"INVALID\", \"BAR\".getBytes());\n            zk.exists(\"/foobar\", false);             \n            zk.getData(\"/path1\", false, null);\n            Assert.fail(\"Should get auth state error\");\n        } catch(KeeperException.AuthFailedException e) {\n            if(!authFailed.await(CONNECTION_TIMEOUT,\n                    TimeUnit.MILLISECONDS))\n            {\n                Assert.fail(\"Should have called my watcher\");\n            }\n        }\n        finally {\n            zk.close();          \n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/AuthTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":3,"curCode":"    public void testThreadsShutdownOnAuthFailed() throws Exception {\n        MyWatcher watcher = new MyWatcher();\n        ZooKeeper zk = null;\n        try {\n            zk = new ZooKeeper(hostPort, CONNECTION_TIMEOUT, watcher);\n            watcher.waitForConnected(CONNECTION_TIMEOUT);\n            try {\n                zk.addAuthInfo(\"FOO\", \"BAR\".getBytes());\n                zk.getData(\"/path1\", false, null);\n                fail(\"Should get auth state error\");\n            } catch (KeeperException.AuthFailedException e) {\n                if (!authFailed.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS)) {\n                    fail(\"Should have called my watcher\");\n                }\n            }\n            Field cnxnField = zk.getClass().getDeclaredField(\"cnxn\");\n            cnxnField.setAccessible(true);\n            ClientCnxn clientCnxn = (ClientCnxn) cnxnField.get(zk);\n            Field sendThreadField = clientCnxn.getClass().getDeclaredField(\"sendThread\");\n            sendThreadField.setAccessible(true);\n            SendThread sendThread = (SendThread) sendThreadField.get(clientCnxn);\n            Field eventThreadField = clientCnxn.getClass().getDeclaredField(\"eventThread\");\n            eventThreadField.setAccessible(true);\n            EventThread eventThread = (EventThread) eventThreadField.get(clientCnxn);\n            sendThread.join(CONNECTION_TIMEOUT);\n            eventThread.join(CONNECTION_TIMEOUT);\n            assertFalse(sendThread.isAlive(), \"SendThread did not shutdown after authFail\");\n            assertFalse(eventThread.isAlive(), \"EventThread did not shutdown after authFail\");\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n    }\n","date":"2020-08-04 21:01:52","endLine":244,"groupId":"10541","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testThreadsShutdownOnAuthFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/1d/0bffaafb7a84184d944af869b4561846f179df.src","preCode":"    public void testThreadsShutdownOnAuthFailed() throws Exception {\n        MyWatcher watcher = new MyWatcher();\n        ZooKeeper zk = null;\n        try {\n            zk = new ZooKeeper(hostPort, CONNECTION_TIMEOUT, watcher);\n            watcher.waitForConnected(CONNECTION_TIMEOUT);\n            try {\n                zk.addAuthInfo(\"FOO\", \"BAR\".getBytes());\n                zk.getData(\"/path1\", false, null);\n                fail(\"Should get auth state error\");\n            } catch (KeeperException.AuthFailedException e) {\n                if (!authFailed.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS)) {\n                    fail(\"Should have called my watcher\");\n                }\n            }\n            Field cnxnField = zk.getClass().getDeclaredField(\"cnxn\");\n            cnxnField.setAccessible(true);\n            ClientCnxn clientCnxn = (ClientCnxn) cnxnField.get(zk);\n            Field sendThreadField = clientCnxn.getClass().getDeclaredField(\"sendThread\");\n            sendThreadField.setAccessible(true);\n            SendThread sendThread = (SendThread) sendThreadField.get(clientCnxn);\n            Field eventThreadField = clientCnxn.getClass().getDeclaredField(\"eventThread\");\n            eventThreadField.setAccessible(true);\n            EventThread eventThread = (EventThread) eventThreadField.get(clientCnxn);\n            sendThread.join(CONNECTION_TIMEOUT);\n            eventThread.join(CONNECTION_TIMEOUT);\n            assertFalse(\"SendThread did not shutdown after authFail\", sendThread.isAlive());\n            assertFalse(\"EventThread did not shutdown after authFail\", eventThread.isAlive());\n        } finally {\n            if (zk != null) {\n                zk.close();\n            }\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/SaslAuthTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testBadAuthThenSendOtherCommands() throws Exception {\n        ZooKeeper zk = createClient();\n        try {\n            zk.addAuthInfo(\"INVALID\", \"BAR\".getBytes());\n            zk.exists(\"/foobar\", false);\n            zk.getData(\"/path1\", false, null);\n            fail(\"Should get auth state error\");\n        } catch (KeeperException.AuthFailedException e) {\n            if (!authFailed.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS)) {\n                fail(\"Should have called my watcher\");\n            }\n        } finally {\n            zk.close();\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":94,"groupId":"10541","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadAuthThenSendOtherCommands","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c7/8f6202b3d5c3e9dda2ac1d119f532af79e964c.src","preCode":"    public void testBadAuthThenSendOtherCommands() throws Exception {\n        ZooKeeper zk = createClient();\n        try {\n            zk.addAuthInfo(\"INVALID\", \"BAR\".getBytes());\n            zk.exists(\"/foobar\", false);\n            zk.getData(\"/path1\", false, null);\n            fail(\"Should get auth state error\");\n        } catch (KeeperException.AuthFailedException e) {\n            if (!authFailed.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS)) {\n                fail(\"Should have called my watcher\");\n            }\n        } finally {\n            zk.close();\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/AuthTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
