[{"authorTime":"2019-07-15 20:46:48","codes":[{"authorDate":"2019-07-15 20:46:48","commitOrder":2,"curCode":"    public void testFromFilename() {\n        Assert.assertEquals(KeyStoreFileType.JKS,\n                KeyStoreFileType.fromFilename(\"mykey.jks\"));\n        Assert.assertEquals(KeyStoreFileType.JKS,\n                KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.jks\"));\n        Assert.assertEquals(KeyStoreFileType.PEM,\n                KeyStoreFileType.fromFilename(\"mykey.pem\"));\n        Assert.assertEquals(KeyStoreFileType.PEM,\n                KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.pem\"));\n        Assert.assertEquals(KeyStoreFileType.PKCS12,\n            KeyStoreFileType.fromFilename(\"mykey.p12\"));\n        Assert.assertEquals(KeyStoreFileType.PKCS12,\n            KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.p12\"));\n    }\n","date":"2019-07-15 20:46:48","endLine":70,"groupId":"1194","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFromFilename","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/92/65af90b557a9bdf18fbbbe8d64d4c6a393b169.src","preCode":"    public void testFromFilename() {\n        Assert.assertEquals(KeyStoreFileType.JKS,\n                KeyStoreFileType.fromFilename(\"mykey.jks\"));\n        Assert.assertEquals(KeyStoreFileType.JKS,\n                KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.jks\"));\n        Assert.assertEquals(KeyStoreFileType.PEM,\n                KeyStoreFileType.fromFilename(\"mykey.pem\"));\n        Assert.assertEquals(KeyStoreFileType.PEM,\n                KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.pem\"));\n        Assert.assertEquals(KeyStoreFileType.PKCS12,\n            KeyStoreFileType.fromFilename(\"mykey.p12\"));\n        Assert.assertEquals(KeyStoreFileType.PKCS12,\n            KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.p12\"));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/KeyStoreFileTypeTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"MB"},{"authorDate":"2019-07-15 20:46:48","commitOrder":2,"curCode":"    public void testFromPropertyValueOrFileName() {\n        \r\n        Assert.assertEquals(KeyStoreFileType.JKS,\n                KeyStoreFileType.fromPropertyValueOrFileName(\n                        \"JKS\", \"prod.key\"));\n        Assert.assertEquals(KeyStoreFileType.PEM,\n            KeyStoreFileType.fromPropertyValueOrFileName(\n                \"PEM\", \"prod.key\"));\n        Assert.assertEquals(KeyStoreFileType.PKCS12,\n            KeyStoreFileType.fromPropertyValueOrFileName(\n                \"PKCS12\", \"prod.key\"));\n        \r\n        Assert.assertEquals(KeyStoreFileType.JKS,\n                KeyStoreFileType.fromPropertyValueOrFileName(\"\", \"prod.jks\"));\n    }\n","date":"2019-07-15 20:46:48","endLine":92,"groupId":"1990","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFromPropertyValueOrFileName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/92/65af90b557a9bdf18fbbbe8d64d4c6a393b169.src","preCode":"    public void testFromPropertyValueOrFileName() {\n        \r\n        Assert.assertEquals(KeyStoreFileType.JKS,\n                KeyStoreFileType.fromPropertyValueOrFileName(\n                        \"JKS\", \"prod.key\"));\n        Assert.assertEquals(KeyStoreFileType.PEM,\n            KeyStoreFileType.fromPropertyValueOrFileName(\n                \"PEM\", \"prod.key\"));\n        Assert.assertEquals(KeyStoreFileType.PKCS12,\n            KeyStoreFileType.fromPropertyValueOrFileName(\n                \"PKCS12\", \"prod.key\"));\n        \r\n        Assert.assertEquals(KeyStoreFileType.JKS,\n                KeyStoreFileType.fromPropertyValueOrFileName(\"\", \"prod.jks\"));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/KeyStoreFileTypeTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"}],"commitId":"1c83846615701e88749690f06993a6e77452b83c","commitMessage":"@@@ZOOKEEPER-3443: Add support of PKCS12 trust/key stores\n\nThis commit adds support of PKCS12 trust store and key store type.\nThe existing mechanism for trust/key store types that support JKS and\nPEM were extended with PKCS12.\n\nThe implementations of JKSFileLoader and PKCS12FileLoader were almost\nidentical so most of it were abstracted away in\nStandardTypeFileKeyStoreLoader.\n\nAuthor: Ivan Yurchenko <ivanyu@aiven.io>\n\nReviewers: eolivelli@apache.org.  andor@apache.org\n\nCloses #1003 from ivanyu/ZOOKEEPER-3443\n","date":"2019-07-15 20:46:48","modifiedFileCount":"8","status":"M","submitter":"Ivan Yurchenko"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testFromFilename() {\n        assertEquals(KeyStoreFileType.JKS, KeyStoreFileType.fromFilename(\"mykey.jks\"));\n        assertEquals(KeyStoreFileType.JKS, KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.jks\"));\n        assertEquals(KeyStoreFileType.PEM, KeyStoreFileType.fromFilename(\"mykey.pem\"));\n        assertEquals(KeyStoreFileType.PEM, KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.pem\"));\n        assertEquals(KeyStoreFileType.PKCS12, KeyStoreFileType.fromFilename(\"mykey.p12\"));\n        assertEquals(KeyStoreFileType.PKCS12, KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.p12\"));\n    }\n","date":"2019-08-17 23:13:15","endLine":66,"groupId":"1988","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFromFilename","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fe/eed81034530a9c487f9465c0560f3a88115f4a.src","preCode":"    public void testFromFilename() {\n        Assert.assertEquals(KeyStoreFileType.JKS,\n                KeyStoreFileType.fromFilename(\"mykey.jks\"));\n        Assert.assertEquals(KeyStoreFileType.JKS,\n                KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.jks\"));\n        Assert.assertEquals(KeyStoreFileType.PEM,\n                KeyStoreFileType.fromFilename(\"mykey.pem\"));\n        Assert.assertEquals(KeyStoreFileType.PEM,\n                KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.pem\"));\n        Assert.assertEquals(KeyStoreFileType.PKCS12,\n            KeyStoreFileType.fromFilename(\"mykey.p12\"));\n        Assert.assertEquals(KeyStoreFileType.PKCS12,\n            KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.p12\"));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/KeyStoreFileTypeTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testFromPropertyValueOrFileName() {\n        \r\n        assertEquals(KeyStoreFileType.JKS, KeyStoreFileType.fromPropertyValueOrFileName(\"JKS\", \"prod.key\"));\n        assertEquals(KeyStoreFileType.PEM, KeyStoreFileType.fromPropertyValueOrFileName(\"PEM\", \"prod.key\"));\n        assertEquals(KeyStoreFileType.PKCS12, KeyStoreFileType.fromPropertyValueOrFileName(\"PKCS12\", \"prod.key\"));\n        \r\n        assertEquals(KeyStoreFileType.JKS, KeyStoreFileType.fromPropertyValueOrFileName(\"\", \"prod.jks\"));\n    }\n","date":"2019-08-17 23:13:15","endLine":81,"groupId":"1990","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFromPropertyValueOrFileName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fe/eed81034530a9c487f9465c0560f3a88115f4a.src","preCode":"    public void testFromPropertyValueOrFileName() {\n        \r\n        Assert.assertEquals(KeyStoreFileType.JKS,\n                KeyStoreFileType.fromPropertyValueOrFileName(\n                        \"JKS\", \"prod.key\"));\n        Assert.assertEquals(KeyStoreFileType.PEM,\n            KeyStoreFileType.fromPropertyValueOrFileName(\n                \"PEM\", \"prod.key\"));\n        Assert.assertEquals(KeyStoreFileType.PKCS12,\n            KeyStoreFileType.fromPropertyValueOrFileName(\n                \"PKCS12\", \"prod.key\"));\n        \r\n        Assert.assertEquals(KeyStoreFileType.JKS,\n                KeyStoreFileType.fromPropertyValueOrFileName(\"\", \"prod.jks\"));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/KeyStoreFileTypeTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-10-06 17:29:46","codes":[{"authorDate":"2020-10-06 17:29:46","commitOrder":4,"curCode":"    public void testFromFilename() {\n        assertEquals(KeyStoreFileType.JKS, KeyStoreFileType.fromFilename(\"mykey.jks\"));\n        assertEquals(KeyStoreFileType.JKS, KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.jks\"));\n        assertEquals(KeyStoreFileType.PEM, KeyStoreFileType.fromFilename(\"mykey.pem\"));\n        assertEquals(KeyStoreFileType.PEM, KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.pem\"));\n        assertEquals(KeyStoreFileType.PKCS12, KeyStoreFileType.fromFilename(\"mykey.p12\"));\n        assertEquals(KeyStoreFileType.PKCS12, KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.p12\"));\n        assertEquals(KeyStoreFileType.BCFKS, KeyStoreFileType.fromFilename(\"mykey.bcfks\"));\n        assertEquals(KeyStoreFileType.BCFKS, KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.bcfks\"));\n    }\n","date":"2020-10-06 17:29:46","endLine":74,"groupId":"10496","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testFromFilename","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3f/7faaabcc56e88dbb6df90e16216d198b0b5592.src","preCode":"    public void testFromFilename() {\n        assertEquals(KeyStoreFileType.JKS, KeyStoreFileType.fromFilename(\"mykey.jks\"));\n        assertEquals(KeyStoreFileType.JKS, KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.jks\"));\n        assertEquals(KeyStoreFileType.PEM, KeyStoreFileType.fromFilename(\"mykey.pem\"));\n        assertEquals(KeyStoreFileType.PEM, KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.pem\"));\n        assertEquals(KeyStoreFileType.PKCS12, KeyStoreFileType.fromFilename(\"mykey.p12\"));\n        assertEquals(KeyStoreFileType.PKCS12, KeyStoreFileType.fromFilename(\"/path/to/key/dir/mykey.p12\"));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/KeyStoreFileTypeTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2020-10-06 17:29:46","commitOrder":4,"curCode":"    public void testFromPropertyValueOrFileName() {\n        \r\n        assertEquals(KeyStoreFileType.JKS, KeyStoreFileType.fromPropertyValueOrFileName(\"JKS\", \"prod.key\"));\n        assertEquals(KeyStoreFileType.PEM, KeyStoreFileType.fromPropertyValueOrFileName(\"PEM\", \"prod.key\"));\n        assertEquals(KeyStoreFileType.PKCS12, KeyStoreFileType.fromPropertyValueOrFileName(\"PKCS12\", \"prod.key\"));\n        assertEquals(KeyStoreFileType.BCFKS, KeyStoreFileType.fromPropertyValueOrFileName(\"BCFKS\", \"prod.key\"));\n        \r\n        assertEquals(KeyStoreFileType.JKS, KeyStoreFileType.fromPropertyValueOrFileName(\"\", \"prod.jks\"));\n    }\n","date":"2020-10-06 17:29:46","endLine":92,"groupId":"10496","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testFromPropertyValueOrFileName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/3f/7faaabcc56e88dbb6df90e16216d198b0b5592.src","preCode":"    public void testFromPropertyValueOrFileName() {\n        \r\n        assertEquals(KeyStoreFileType.JKS, KeyStoreFileType.fromPropertyValueOrFileName(\"JKS\", \"prod.key\"));\n        assertEquals(KeyStoreFileType.PEM, KeyStoreFileType.fromPropertyValueOrFileName(\"PEM\", \"prod.key\"));\n        assertEquals(KeyStoreFileType.PKCS12, KeyStoreFileType.fromPropertyValueOrFileName(\"PKCS12\", \"prod.key\"));\n        \r\n        assertEquals(KeyStoreFileType.JKS, KeyStoreFileType.fromPropertyValueOrFileName(\"\", \"prod.jks\"));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/common/KeyStoreFileTypeTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"ec1503bb00945471baa248f392eed51064bb48ab","commitMessage":"@@@ZOOKEEPER-3950: Add support for BCFKS key/trust store format\n\nThe BCFKS key store format is widely used in the industry.  as it provides an open source alternative if someone has to use FIPS compliant key stores due to some regulatory constraints.\n\nCurrently in the ZooKeeper java client.  only PEM.  JKS and PEM12 is supported. I extend the list of supported key store formats with BCFKS.\n\nI also tested this patch on a real FIPS compliant cluster.  having the appropriate java security configs.  security providers and also running a RedHat-based Linux distro (Centos 7.8) with FIPS mode enabled.\n\nI tested both the client and the quorum SSL too. If someone wants to test this patch.  and the keystore/truststore file names are not ending with \".bckfs\".  then (beside the usual SSL configs) make sure to also set the following parameters in the zoo.cfg:\n```\nssl.keyStore.type=bcfks\nssl.trustStore.type=bcfks\nssl.quorum.keyStore.type=bcfks\nssl.quorum.trustStore.type=bcfks\n```\n\nand also provide the following parameters for the command line java client:\n```\n -Dzookeeper.ssl.keyStore.type=bcfks -Dzookeeper.ssl.trustStore.type=bcfks\n```\n\nThis patch doesn't contain any modification for the c-client (that can be handled with a separate Jira.  but I don't plan to work on that part right now).\n\nAuthor: Mate Szalay-Beko <symat@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Norbert Kalmar <nkalmar@apache.org>.  Andor Molnar <andor@apache.org>\n\nCloses #1480 from symat/zookeeper-3950\n","date":"2020-10-06 17:29:46","modifiedFileCount":"9","status":"M","submitter":"Mate Szalay-Beko"}]
