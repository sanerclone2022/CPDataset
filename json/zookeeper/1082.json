[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Long.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class)\n        ));\n        for (String metric : ServerMetrics.getAllValues().keySet()) {\n            fields.add(new Field(metric, Long.class));\n        }\n        Field fieldsArray[] = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","date":"2018-10-05 20:25:43","endLine":200,"groupId":"1938","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMonitor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fe/dbe0fe873c600780304c1a069154b6ea1a99a1.src","preCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Long.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class)\n        ));\n        for (String metric : ServerMetrics.getAllValues().keySet()) {\n            fields.add(new Field(metric, Long.class));\n        }\n        Field fieldsArray[] = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","date":"2018-10-05 20:25:43","endLine":234,"groupId":"1495","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fe/dbe0fe873c600780304c1a069154b6ea1a99a1.src","preCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2019-01-07 21:39:13","commitOrder":2,"curCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Double.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class)\n        ));\n        for (String metric : ServerMetrics.getAllValues().keySet()) {\n            if (metric.startsWith(\"avg_\")) {\n                fields.add(new Field(metric, Double.class));  \n            } else {\n                fields.add(new Field(metric, Long.class));\n            }\n        }\n        Field fieldsArray[] = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","date":"2019-01-07 21:39:13","endLine":204,"groupId":"1938","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMonitor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/9b/30c555dc025efe0813ebbc23afd5381040d2ff.src","preCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Long.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class)\n        ));\n        for (String metric : ServerMetrics.getAllValues().keySet()) {\n            fields.add(new Field(metric, Long.class));\n        }\n        Field fieldsArray[] = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2018-10-05 20:25:43","commitOrder":2,"curCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","date":"2018-10-05 20:25:43","endLine":234,"groupId":"1495","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fe/dbe0fe873c600780304c1a069154b6ea1a99a1.src","preCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"}],"commitId":"bc992480ec938a3fad4b90f75a52dd186e1b968a","commitMessage":"@@@ZOOKEEPER-2641: AvgRequestLatency metric improves to be more accurate\n\n- some original review historys were included [here ](https://github.com/apache/zookeeper/pull/629)\n- more details in [ZOOKEEPER-2641](https://issues.apache.org/jira/browse/ZOOKEEPER-2641)\n\nAuthor: maoling <maoling199210191@sina.com>\n\nReviewers: andor@apache.org\n\nCloses #748 from maoling/ZOOKEEPER-2641 and squashes the following commits:\n\ne0d4fc890 [maoling] fix the flaky test in the FourLetterWordsTest.testValidateStatOutput\n1739dbf1c [maoling] fix the flaky test in the CommandsTest.testMonitor\n01af4002e [maoling] ZOOKEEPER-2641:AvgRequestLatency metric improves to be more accurate\n","date":"2019-01-07 21:39:13","modifiedFileCount":"12","status":"M","submitter":"maoling"},{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2019-01-23 21:00:13","commitOrder":3,"curCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Double.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class),\n                new Field(\"connection_drop_probability\", Double.class)\n        ));\n        for (String metric : ServerMetrics.getAllValues().keySet()) {\n            if (metric.startsWith(\"avg_\")) {\n                fields.add(new Field(metric, Double.class));  \n            } else {\n                fields.add(new Field(metric, Long.class));\n            }\n        }\n        Field fieldsArray[] = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","date":"2019-01-23 21:00:13","endLine":205,"groupId":"1938","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMonitor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/00/0b3cea413c91bad41bdb4b182c8d5794a69aa9.src","preCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Double.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class)\n        ));\n        for (String metric : ServerMetrics.getAllValues().keySet()) {\n            if (metric.startsWith(\"avg_\")) {\n                fields.add(new Field(metric, Double.class));  \n            } else {\n                fields.add(new Field(metric, Long.class));\n            }\n        }\n        Field fieldsArray[] = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2018-10-05 20:25:43","commitOrder":3,"curCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","date":"2018-10-05 20:25:43","endLine":234,"groupId":"1495","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fe/dbe0fe873c600780304c1a069154b6ea1a99a1.src","preCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"}],"commitId":"668828503389f3e542b846019bace8b9842fa428","commitMessage":"@@@ZOOKEEPER-3242: Add server side connecting throttling\n\nAuthor: Jie Huang <jiehuang@fb.com>\n\nReviewers: fangmin@apache.org.  andor@apache.org\n\nCloses #769 from jhuan31/ZOOKEEPER-3242 and squashes the following commits:\n\nc3ec81f4e [Jie Huang] refactoring\n86cad39c4 [Jie Huang] Use a mock random number generator to make the unit test flaky-proof\na278504d4 [Jie Huang] Add unit tests for server-side connection throttling\nfd966502b [Jie Huang] update doc for server-side connection throttling\n2f1ed0b87 [Jie Huang] Fix FindBugs Warnings\na48b0fcb1 [Jie Huang] ZOOKEEPER-3242: Add server side connecting throttling\n","date":"2019-01-23 21:00:13","modifiedFileCount":"10","status":"M","submitter":"Jie Huang"},{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2019-04-13 01:01:37","commitOrder":4,"curCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Double.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class),\n                new Field(\"connection_drop_probability\", Double.class)\n        ));        \n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n        \n        for (String metric : metrics.keySet()) {\n            if (metric.startsWith(\"avg_\")) {\n                fields.add(new Field(metric, Double.class));  \n            } else {\n                fields.add(new Field(metric, Long.class));\n            }\n        }\n        Field fieldsArray[] = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","date":"2019-04-13 01:01:37","endLine":209,"groupId":"1938","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMonitor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/32/93a7d573c22caef56e9d5190e0efe1089103f9.src","preCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Double.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class),\n                new Field(\"connection_drop_probability\", Double.class)\n        ));\n        for (String metric : ServerMetrics.getAllValues().keySet()) {\n            if (metric.startsWith(\"avg_\")) {\n                fields.add(new Field(metric, Double.class));  \n            } else {\n                fields.add(new Field(metric, Long.class));\n            }\n        }\n        Field fieldsArray[] = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2018-10-05 20:25:43","commitOrder":4,"curCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","date":"2018-10-05 20:25:43","endLine":234,"groupId":"1495","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fe/dbe0fe873c600780304c1a069154b6ea1a99a1.src","preCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"}],"commitId":"f69ad1b0fed88da3c1b67fd73031e7248c0564f7","commitMessage":"@@@ZOOKEEPER-3143: Pluggable metrics system for ZooKeeper - Data Collection on Server\n\n- Make ServerMetrics a class.  not an enum.\n- Make ServerMetrics use MetricsProvider\n- After the bootstrap of the MetricsProvider reconfigure ServerMetrics in order to push data to the provider.\n- Introduce a default implementation of MetricsProvider.  based on current implementation\n- Change MetricsContext interface in order to support several types of Metrics.  in order to cover current metrics facilities. \n\nThe MetricsProvider API will allow ZooKeeper users to integrate ZooKeeper with other metrics systems.  like Prometheus.io/Dropwizard.....\n\nAuthor: Enrico Olivelli <eolivelli@apache.org>\n\nReviewers: fangmin@apache.org.  andor@apache.org\n\nCloses #854 from eolivelli/fix/metrics-provider-port-static and squashes the following commits:\n\nc5714ee66 [Enrico Olivelli] Fix dump and reset for SummarySets\ned6230e51 [Enrico Olivelli] Fix build\n8e8d87bdd [Enrico Olivelli] Merge branch 'master' into fix/metrics-provider-port-static\n02722b55b [Enrico Olivelli] Fix tests\n7ebc091e6 [Enrico Olivelli] Use toString in Monitor Command\n49a5c801a [Enrico Olivelli] Add Metrics to 4lw interface - mntr command\n137bda23a [Enrico Olivelli] A few nits\n80396915f [Enrico Olivelli] Introduce MetricsUtils\n9f28747bc [Enrico Olivelli] Fix after merge master\ne380607ae [Enrico Olivelli] Fix imports\nc2d0c358c [Enrico Olivelli] Introduce SummarySet\n4674d2350 [Enrico Olivelli] Fix trailing spaces\n6580b4a53 [Enrico Olivelli] Use a global static variable\nad8d44241 [Enrico Olivelli] Make DefaultMetricsProvider the default\nd455a1c8c [Enrico Olivelli] Fix test\nf997c30f3 [Enrico Olivelli] Fix spotbugs\n228c1d268 [Enrico Olivelli] ZOOKEEPER-3143 Pluggable metrics system for ZooKeeper - Data Collection on Server\n","date":"2019-04-13 01:01:37","modifiedFileCount":"47","status":"M","submitter":"Enrico Olivelli"},{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2019-06-04 16:55:09","commitOrder":5,"curCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Double.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class),\n                new Field(\"connection_drop_probability\", Double.class)\n        ));        \n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n        \n        for (String metric : metrics.keySet()) {\n            boolean alreadyDefined = fields\n                    .stream()\n                    .anyMatch(f -> {\n                        return f.key.equals(metric);\n                    });\n            if (alreadyDefined) {\n                \r\n                continue;\n            }\n            if (metric.startsWith(\"avg_\")) {\n                fields.add(new Field(metric, Double.class));  \n            } else {\n                fields.add(new Field(metric, Long.class));\n            }\n        }\n        Field fieldsArray[] = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","date":"2019-06-04 16:55:09","endLine":222,"groupId":"1938","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMonitor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/be/803c0e06b0ca948e3c44149a82092134aa4658.src","preCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Double.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class),\n                new Field(\"connection_drop_probability\", Double.class)\n        ));        \n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n        \n        for (String metric : metrics.keySet()) {\n            if (metric.startsWith(\"avg_\")) {\n                fields.add(new Field(metric, Double.class));  \n            } else {\n                fields.add(new Field(metric, Long.class));\n            }\n        }\n        Field fieldsArray[] = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"},{"authorDate":"2018-10-05 20:25:43","commitOrder":5,"curCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","date":"2018-10-05 20:25:43","endLine":234,"groupId":"1495","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testStat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fe/dbe0fe873c600780304c1a069154b6ea1a99a1.src","preCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"}],"commitId":"6af151a7e44760c33165e58d3b33a4d2760283a4","commitMessage":"@@@ZOOKEEPER-3366: Pluggable metrics system for ZooKeeper - move remaining metrics to MetricsProvider\n\nMigrate all remaining metrics to MetricsProvider.\nWe are introducing now *Gauges* which are callbacks to be called when the Provider needs to publish current values.  a Gauge is a numeric value that can go up and down.\n\nAs during the lifecycle of a ZK server process we can have several ZooKeeperServer instances (we have several subclasses).  depending on the role of the local peer.  sometimes we have to clean up unused Gauges.\nThe old approach  in 4lw and on http admin  API was to hard code metrics.  with multiple 'instanceof' conditions.\nSo we introduce ZooKeeperServer#registerMetrics and ZooKeeperServer#unregisterMetrics: these overridable functions enable each  ZooKeeperServer subclass to declare specific Gauges.\nWe are also introducing ZooKeeperServer#collectMonitorValues in order to push non-metrics to monitor commands (admin and 4lw).  like \"server state\" or \"version\".\n\nAuthor: Enrico Olivelli <eolivelli@apache.org>\n\nReviewers: Norbert Kalmar <nkalmar@apache.org>\n\nCloses #918 from eolivelli/fix/other-metrics\n","date":"2019-06-04 16:55:09","modifiedFileCount":"15","status":"M","submitter":"Enrico Olivelli"},{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":6,"curCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(new Field(\"version\", String.class), new Field(\"avg_latency\", Double.class), new Field(\"max_latency\", Long.class), new Field(\"min_latency\", Long.class), new Field(\"packets_received\", Long.class), new Field(\"packets_sent\", Long.class), new Field(\"num_alive_connections\", Integer.class), new Field(\"outstanding_requests\", Long.class), new Field(\"server_state\", String.class), new Field(\"znode_count\", Integer.class), new Field(\"watch_count\", Integer.class), new Field(\"ephemerals_count\", Integer.class), new Field(\"approximate_data_size\", Long.class), new Field(\"open_file_descriptor_count\", Long.class), new Field(\"max_file_descriptor_count\", Long.class), new Field(\"last_client_response_size\", Integer.class), new Field(\"max_client_response_size\", Integer.class), new Field(\"min_client_response_size\", Integer.class), new Field(\"uptime\", Long.class), new Field(\"global_sessions\", Long.class), new Field(\"local_sessions\", Long.class), new Field(\"connection_drop_probability\", Double.class)));\n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n\n        for (String metric : metrics.keySet()) {\n            boolean alreadyDefined = fields.stream().anyMatch(f -> {\n                return f.key.equals(metric);\n            });\n            if (alreadyDefined) {\n                \r\n                continue;\n            }\n            if (metric.startsWith(\"avg_\")) {\n                fields.add(new Field(metric, Double.class));\n            } else {\n                fields.add(new Field(metric, Long.class));\n            }\n        }\n        Field[] fieldsArray = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","date":"2019-08-17 23:13:15","endLine":177,"groupId":"1938","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testMonitor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/6a/fbbe2e0279619cdb6411076488df6f0907a02f.src","preCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Double.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class),\n                new Field(\"connection_drop_probability\", Double.class)\n        ));        \n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n        \n        for (String metric : metrics.keySet()) {\n            boolean alreadyDefined = fields\n                    .stream()\n                    .anyMatch(f -> {\n                        return f.key.equals(metric);\n                    });\n            if (alreadyDefined) {\n                \r\n                continue;\n            }\n            if (metric.startsWith(\"avg_\")) {\n                fields.add(new Field(metric, Double.class));  \n            } else {\n                fields.add(new Field(metric, Long.class));\n            }\n        }\n        Field fieldsArray[] = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2018-10-05 20:25:43","commitOrder":6,"curCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","date":"2018-10-05 20:25:43","endLine":234,"groupId":"1495","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testStat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fe/dbe0fe873c600780304c1a069154b6ea1a99a1.src","preCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2019-11-24 00:08:23","commitOrder":7,"curCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Double.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class),\n                new Field(\"connection_drop_probability\", Double.class),\n                new Field(\"outstanding_tls_handshake\", Integer.class)\n        ));\n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n\n        for (String metric : metrics.keySet()) {\n            boolean alreadyDefined = fields.stream().anyMatch(f -> {\n                return f.key.equals(metric);\n            });\n            if (alreadyDefined) {\n                \r\n                continue;\n            }\n            if (metric.startsWith(\"avg_\")) {\n                fields.add(new Field(metric, Double.class));\n            } else {\n                fields.add(new Field(metric, Long.class));\n            }\n        }\n        Field[] fieldsArray = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","date":"2019-11-24 00:08:23","endLine":201,"groupId":"1938","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testMonitor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/9f/62a3fd5475abc5dc05d1e005476590c98266f4.src","preCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(new Field(\"version\", String.class), new Field(\"avg_latency\", Double.class), new Field(\"max_latency\", Long.class), new Field(\"min_latency\", Long.class), new Field(\"packets_received\", Long.class), new Field(\"packets_sent\", Long.class), new Field(\"num_alive_connections\", Integer.class), new Field(\"outstanding_requests\", Long.class), new Field(\"server_state\", String.class), new Field(\"znode_count\", Integer.class), new Field(\"watch_count\", Integer.class), new Field(\"ephemerals_count\", Integer.class), new Field(\"approximate_data_size\", Long.class), new Field(\"open_file_descriptor_count\", Long.class), new Field(\"max_file_descriptor_count\", Long.class), new Field(\"last_client_response_size\", Integer.class), new Field(\"max_client_response_size\", Integer.class), new Field(\"min_client_response_size\", Integer.class), new Field(\"uptime\", Long.class), new Field(\"global_sessions\", Long.class), new Field(\"local_sessions\", Long.class), new Field(\"connection_drop_probability\", Double.class)));\n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n\n        for (String metric : metrics.keySet()) {\n            boolean alreadyDefined = fields.stream().anyMatch(f -> {\n                return f.key.equals(metric);\n            });\n            if (alreadyDefined) {\n                \r\n                continue;\n            }\n            if (metric.startsWith(\"avg_\")) {\n                fields.add(new Field(metric, Double.class));\n            } else {\n                fields.add(new Field(metric, Long.class));\n            }\n        }\n        Field[] fieldsArray = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2018-10-05 20:25:43","commitOrder":7,"curCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","date":"2018-10-05 20:25:43","endLine":234,"groupId":"1495","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testStat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fe/dbe0fe873c600780304c1a069154b6ea1a99a1.src","preCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"}],"commitId":"804095c060e3b11c33b201a304031dc3ac18cfb6","commitMessage":"@@@ZOOKEEPER-3473: Improving successful TLS handshake throughput with concurrent control\n\nWhen there are lots of clients trying to re-establish sessions.  there might be lots of half finished handshake timed out.  and those failed ones keep reconnecting to another server and restarting the handshake from beginning again.  which caused herd effect.\n\nAnd the number of total ZK sessions could be supported within session timeout are impacted a lot after enabling TLS.\n\nTo improve the throughput.  we added the TLS concurrent control to reduce the herd effect.  and from out benchmark this doubled the sessions we could support within session timeout.\n\nE2E test result:\n\nTested performance and correctness from E2E. For correctness.  tested both secure and insecure\nconnections.  the outstandingHandshakeNum will go to 0 eventually.\n\nFor performance.  tested with 110k sessions with 10s session timeout.  there is no session expire when leader election triggered.  while before it can only support 50k sessions.\n\nAuthor: Fangmin Lyu <fangmin@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Andor Molnar <andor@apache.org>\n\nCloses #1027 from lvfangmin/ZOOKEEPER-3473\n","date":"2019-11-24 00:08:23","modifiedFileCount":"6","status":"M","submitter":"Fangmin Lyu"},{"authorTime":"2019-12-03 17:01:22","codes":[{"authorDate":"2019-11-24 00:08:23","commitOrder":8,"curCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Double.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class),\n                new Field(\"connection_drop_probability\", Double.class),\n                new Field(\"outstanding_tls_handshake\", Integer.class)\n        ));\n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n\n        for (String metric : metrics.keySet()) {\n            boolean alreadyDefined = fields.stream().anyMatch(f -> {\n                return f.key.equals(metric);\n            });\n            if (alreadyDefined) {\n                \r\n                continue;\n            }\n            if (metric.startsWith(\"avg_\")) {\n                fields.add(new Field(metric, Double.class));\n            } else {\n                fields.add(new Field(metric, Long.class));\n            }\n        }\n        Field[] fieldsArray = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","date":"2019-11-24 00:08:23","endLine":201,"groupId":"1938","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testMonitor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/9f/62a3fd5475abc5dc05d1e005476590c98266f4.src","preCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Double.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class),\n                new Field(\"connection_drop_probability\", Double.class),\n                new Field(\"outstanding_tls_handshake\", Integer.class)\n        ));\n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n\n        for (String metric : metrics.keySet()) {\n            boolean alreadyDefined = fields.stream().anyMatch(f -> {\n                return f.key.equals(metric);\n            });\n            if (alreadyDefined) {\n                \r\n                continue;\n            }\n            if (metric.startsWith(\"avg_\")) {\n                fields.add(new Field(metric, Double.class));\n            } else {\n                fields.add(new Field(metric, Long.class));\n            }\n        }\n        Field[] fieldsArray = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"N"},{"authorDate":"2019-12-03 17:01:22","commitOrder":8,"curCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"secure_connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","date":"2019-12-03 17:01:22","endLine":231,"groupId":"1495","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testStat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/5f/6879e7a207b6b1322ed8be726421eecf1868cb.src","preCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"01e198aec9ceae52f160ddcf2e45cd234823e505","commitMessage":"@@@ZOOKEEPER-3633: AdminServer commands throw NPE when only secure client port is used\n\nWhen only secureClientPort is defined in the config and there is no regular clientPort. \nthen both the stat and the conf commands on the AdminServer result in 500 Server Error caused by\nNullPointerExceptions. The problem is that no serverCnxFactory is defined in the\nZooKeeperServer in this case.  we have only secureServerCnxnFactory.\n\nIn the fix we return info about both the secure and unsecure connections.\nExample of the stat command output for secure-only configuration:\n```\n{\n  \"version\" : \"3.6.0-SNAPSHOT-8e8905069f4bff670c0492fe9e28ced0f86bca00.  built on 11/29/2019 08:04 GMT\". \n  \"read_only\" : false. \n  \"server_stats\" : {\n    \"packets_sent\" : 1. \n    \"packets_received\" : 1. \n    \"fsync_threshold_exceed_count\" : 0. \n    \"client_response_stats\" : {\n      \"last_buffer_size\" : -1. \n      \"min_buffer_size\" : -1. \n      \"max_buffer_size\" : -1\n    }. \n    \"data_dir_size\" : 671094270. \n    \"log_dir_size\" : 671094270. \n    \"last_processed_zxid\" : 20. \n    \"outstanding_requests\" : 0. \n    \"server_state\" : \"standalone\". \n    \"avg_latency\" : 5.0. \n    \"max_latency\" : 5. \n    \"min_latency\" : 5. \n    \"num_alive_client_connections\" : 1. \n    \"provider_null\" : false. \n    \"uptime\" : 15020\n  }. \n  \"client_response\" : {\n    \"last_buffer_size\" : -1. \n    \"min_buffer_size\" : -1. \n    \"max_buffer_size\" : -1\n  }. \n  \"node_count\" : 6. \n  \"connections\" : [ ]. \n  \"secure_connections\" : [ {\n    \"remote_socket_address\" : \"127.0.0.1:57276\". \n    \"interest_ops\" : 1. \n    \"outstanding_requests\" : 0. \n    \"packets_received\" : 1. \n    \"packets_sent\" : 1\n  } ]. \n  \"command\" : \"stats\". \n  \"error\" : null\n}\n```\n\nAuthor: Mate Szalay-Beko <szalay.beko.mate@gmail.com>\n\nReviewers: Andor Molnar <andor@apache.org>.  Enrico Olivelli <eolivelli@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1161 from symat/ZOOKEEPER-3633\n","date":"2019-12-03 17:01:22","modifiedFileCount":"3","status":"M","submitter":"Mate Szalay-Beko"},{"authorTime":"2019-12-03 17:01:22","codes":[{"authorDate":"2020-11-16 18:00:18","commitOrder":9,"curCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Double.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"auth_failed_count\", Long.class),\n                new Field(\"non_mtls_remote_conn_count\", Long.class),\n                new Field(\"non_mtls_local_conn_count\", Long.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class),\n                new Field(\"connection_drop_probability\", Double.class),\n                new Field(\"outstanding_tls_handshake\", Integer.class)\n        ));\n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n\n        for (String metric : metrics.keySet()) {\n            boolean alreadyDefined = fields.stream().anyMatch(f -> {\n                return f.key.equals(metric);\n            });\n            if (alreadyDefined) {\n                \r\n                continue;\n            }\n            if (metric.startsWith(\"avg_\")) {\n                fields.add(new Field(metric, Double.class));\n            } else {\n                fields.add(new Field(metric, Long.class));\n            }\n        }\n        Field[] fieldsArray = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","date":"2020-11-16 18:00:18","endLine":195,"groupId":"1082","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"testMonitor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ff/8dc2033028c1f65fa0cc7acbc289731ca18617.src","preCode":"    public void testMonitor() throws IOException, InterruptedException {\n        ArrayList<Field> fields = new ArrayList<>(Arrays.asList(\n                new Field(\"version\", String.class),\n                new Field(\"avg_latency\", Double.class),\n                new Field(\"max_latency\", Long.class),\n                new Field(\"min_latency\", Long.class),\n                new Field(\"packets_received\", Long.class),\n                new Field(\"packets_sent\", Long.class),\n                new Field(\"num_alive_connections\", Integer.class),\n                new Field(\"outstanding_requests\", Long.class),\n                new Field(\"server_state\", String.class),\n                new Field(\"znode_count\", Integer.class),\n                new Field(\"watch_count\", Integer.class),\n                new Field(\"ephemerals_count\", Integer.class),\n                new Field(\"approximate_data_size\", Long.class),\n                new Field(\"open_file_descriptor_count\", Long.class),\n                new Field(\"max_file_descriptor_count\", Long.class),\n                new Field(\"last_client_response_size\", Integer.class),\n                new Field(\"max_client_response_size\", Integer.class),\n                new Field(\"min_client_response_size\", Integer.class),\n                new Field(\"uptime\", Long.class),\n                new Field(\"global_sessions\", Long.class),\n                new Field(\"local_sessions\", Long.class),\n                new Field(\"connection_drop_probability\", Double.class),\n                new Field(\"outstanding_tls_handshake\", Integer.class)\n        ));\n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n\n        for (String metric : metrics.keySet()) {\n            boolean alreadyDefined = fields.stream().anyMatch(f -> {\n                return f.key.equals(metric);\n            });\n            if (alreadyDefined) {\n                \r\n                continue;\n            }\n            if (metric.startsWith(\"avg_\")) {\n                fields.add(new Field(metric, Double.class));\n            } else {\n                fields.add(new Field(metric, Long.class));\n            }\n        }\n        Field[] fieldsArray = fields.toArray(new Field[0]);\n        testCommand(\"monitor\", fieldsArray);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2019-12-03 17:01:22","commitOrder":9,"curCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"secure_connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","date":"2019-12-03 17:01:22","endLine":231,"groupId":"1082","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testStat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/5f/6879e7a207b6b1322ed8be726421eecf1868cb.src","preCode":"    public void testStat() throws IOException, InterruptedException {\n        testCommand(\"stats\",\n                    new Field(\"version\", String.class),\n                    new Field(\"read_only\", Boolean.class),\n                    new Field(\"server_stats\", ServerStats.class),\n                    new Field(\"node_count\", Integer.class),\n                    new Field(\"connections\", Iterable.class),\n                    new Field(\"secure_connections\", Iterable.class),\n                    new Field(\"client_response\", BufferStats.class));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"N"}],"commitId":"b842cd4b463a7c3674963f6f66fc392293c1334c","commitMessage":"@@@ZOOKEEPER-3978: Adding additional security metrics to zookeeper\n\nThis is same as https://github.com/apache/zookeeper/pull/1513 for master branch with additional changes using junit5 jupiter lib.\n\nThe changes include adding 3 metrics for security for zookeeper for better monitoring\n\nMonitoring all authN and AuthZ errors\nMonitoring all local non mtls local connections counts\nMonitoring all remote non mtls connection counts.\n\nAuthor: Pooja Malik <pmalik@salesforce.com>\n\nReviewers: Michael Han <hanm@apache.org>.  Enrico Olivelli <eolivelli@apache.org>.  Damien Diederen <ddiederen@apache.org>\n\nCloses #1523 from p-malik/zk_sec_master\n","date":"2020-11-16 18:00:18","modifiedFileCount":"11","status":"M","submitter":"Pooja Malik"}]
