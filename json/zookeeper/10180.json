[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testNormalFollowerRun() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa,\n                    Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    Assert.assertEquals(0, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                    Stat stat = new Stat();\n                    Assert.assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    Assert.assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    Assert.assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    Assert.assertEquals(learnInfo.getServerid(), 0);\n                \n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte protoBytes[] = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n                \n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACKEPOCH, qp.getType());\n                    Assert.assertEquals(0, qp.getZxid());\n                    Assert.assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    Assert.assertEquals(1, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(0, f.self.getCurrentEpoch());\n                    \n                    \r\n                    qp.setType(Leader.SNAP);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    zkDb.serializeSnapshot(oa);\n                    oa.writeString(\"BenWasHere\", null);\n                    Thread.sleep(10); \r\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACK, qp.getType());\n                    Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    Assert.assertEquals(1, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(1, f.self.getCurrentEpoch());\n                    \r\n                    verify(f.zk).takeSnapshot(true);\n                    Assert.assertEquals(firstZxid, f.fzk.getLastProcessedZxid());\n                    \n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    long lastZxid = zkDb2.loadDataBase();\n                    Assert.assertEquals(\"data1\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    Assert.assertEquals(firstZxid, lastZxid);\n\n                    \r\n                    long proposalZxid = ZxidUtils.makeZxid(1, 1000);\n                    proposeSetData(qp, proposalZxid, \"data2\", 2);\n                    oa.writeRecord(qp, null);\n                    \n                    TrackerWatcher watcher = new TrackerWatcher();\n                    \n                    \r\n                    Assert.assertEquals(\"data1\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, watcher)));\n                    \n                    \r\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(proposalZxid);\n                    oa.writeRecord(qp, null);\n                    \n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n                    \n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACK, qp.getType());\n                    Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    \n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACK, qp.getType());\n                    Assert.assertEquals(proposalZxid, qp.getZxid());\n                    \n                    watcher.waitForChange();\n                    Assert.assertEquals(\"data2\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, null)));\n                    \n                    \r\n                    zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    lastZxid = zkDb2.loadDataBase();\n                    Assert.assertEquals(\"data2\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    Assert.assertEquals(proposalZxid, lastZxid);\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n                \n            }\n\n            private void proposeSetData(QuorumPacket qp, long zxid, String data, int version) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.setData);\n                SetDataTxn sdt = new SetDataTxn(\"/foo\", data.getBytes(), version);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(sdt, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","date":"2018-10-05 20:25:43","endLine":715,"groupId":"3376","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormalFollowerRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/bd9d88222077beb805541ba9fd2c22644bce83.src","preCode":"    public void testNormalFollowerRun() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa,\n                    Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    Assert.assertEquals(0, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                    Stat stat = new Stat();\n                    Assert.assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    Assert.assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    Assert.assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    Assert.assertEquals(learnInfo.getServerid(), 0);\n                \n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte protoBytes[] = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n                \n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACKEPOCH, qp.getType());\n                    Assert.assertEquals(0, qp.getZxid());\n                    Assert.assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    Assert.assertEquals(1, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(0, f.self.getCurrentEpoch());\n                    \n                    \r\n                    qp.setType(Leader.SNAP);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    zkDb.serializeSnapshot(oa);\n                    oa.writeString(\"BenWasHere\", null);\n                    Thread.sleep(10); \r\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACK, qp.getType());\n                    Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    Assert.assertEquals(1, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(1, f.self.getCurrentEpoch());\n                    \r\n                    verify(f.zk).takeSnapshot(true);\n                    Assert.assertEquals(firstZxid, f.fzk.getLastProcessedZxid());\n                    \n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    long lastZxid = zkDb2.loadDataBase();\n                    Assert.assertEquals(\"data1\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    Assert.assertEquals(firstZxid, lastZxid);\n\n                    \r\n                    long proposalZxid = ZxidUtils.makeZxid(1, 1000);\n                    proposeSetData(qp, proposalZxid, \"data2\", 2);\n                    oa.writeRecord(qp, null);\n                    \n                    TrackerWatcher watcher = new TrackerWatcher();\n                    \n                    \r\n                    Assert.assertEquals(\"data1\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, watcher)));\n                    \n                    \r\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(proposalZxid);\n                    oa.writeRecord(qp, null);\n                    \n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n                    \n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACK, qp.getType());\n                    Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    \n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACK, qp.getType());\n                    Assert.assertEquals(proposalZxid, qp.getZxid());\n                    \n                    watcher.waitForChange();\n                    Assert.assertEquals(\"data2\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, null)));\n                    \n                    \r\n                    zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    lastZxid = zkDb2.loadDataBase();\n                    Assert.assertEquals(\"data2\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    Assert.assertEquals(proposalZxid, lastZxid);\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n                \n            }\n\n            private void proposeSetData(QuorumPacket qp, long zxid, String data, int version) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.setData);\n                SetDataTxn sdt = new SetDataTxn(\"/foo\", data.getBytes(), version);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(sdt, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":583,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testNormalFollowerRunWithDiff() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa,\n                    Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    Assert.assertEquals(0, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                    Stat stat = new Stat();\n                    Assert.assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    Assert.assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    Assert.assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    Assert.assertEquals(learnInfo.getServerid(), 0);\n                \n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte protoBytes[] = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n                \n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACKEPOCH, qp.getType());\n                    Assert.assertEquals(0, qp.getZxid());\n                    Assert.assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    Assert.assertEquals(1, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(0, f.self.getCurrentEpoch());\n                    \n                    \r\n                    qp.setType(Leader.DIFF);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    final long createSessionZxid = ZxidUtils.makeZxid(1, 2);\n                    proposeNewSession(qp, createSessionZxid, 0x333);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(createSessionZxid);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    qp.setData(null);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n                    \n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACK, qp.getType());\n                    Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    \n                  \n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACK, qp.getType());\n                    Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    Assert.assertEquals(1, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(1, f.self.getCurrentEpoch());\n                    \n                    \r\n                    \r\n                    long start = System.currentTimeMillis();\n                    while (createSessionZxid != f.fzk.getLastProcessedZxid() && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                    }\n                    \n                    Assert.assertEquals(createSessionZxid, f.fzk.getLastProcessedZxid());\n                    \n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    start = System.currentTimeMillis();\n                    zkDb2.loadDataBase();\n                    while (zkDb2.getSessionWithTimeOuts().isEmpty() && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                        zkDb2.loadDataBase();\n                    }\n                    LOG.info(\"zkdb2 sessions:\" + zkDb2.getSessions());\n                    LOG.info(\"zkdb2 with timeouts:\" + zkDb2.getSessionWithTimeOuts());\n                    Assert.assertNotNull(zkDb2.getSessionWithTimeOuts().get(4L));\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n                \n            }\n\n            private void proposeNewSession(QuorumPacket qp, long zxid, long sessionId) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.createSession);\n                CreateSessionTxn cst = new CreateSessionTxn(30000);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(cst, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","date":"2018-10-05 20:25:43","endLine":837,"groupId":"2305","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormalFollowerRunWithDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/aa/bd9d88222077beb805541ba9fd2c22644bce83.src","preCode":"    public void testNormalFollowerRunWithDiff() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa,\n                    Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    Assert.assertEquals(0, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                    Stat stat = new Stat();\n                    Assert.assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    Assert.assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    Assert.assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    Assert.assertEquals(learnInfo.getServerid(), 0);\n                \n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte protoBytes[] = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n                \n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACKEPOCH, qp.getType());\n                    Assert.assertEquals(0, qp.getZxid());\n                    Assert.assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    Assert.assertEquals(1, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(0, f.self.getCurrentEpoch());\n                    \n                    \r\n                    qp.setType(Leader.DIFF);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    final long createSessionZxid = ZxidUtils.makeZxid(1, 2);\n                    proposeNewSession(qp, createSessionZxid, 0x333);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(createSessionZxid);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    qp.setData(null);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n                    \n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACK, qp.getType());\n                    Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    \n                  \n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACK, qp.getType());\n                    Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    Assert.assertEquals(1, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(1, f.self.getCurrentEpoch());\n                    \n                    \r\n                    \r\n                    long start = System.currentTimeMillis();\n                    while (createSessionZxid != f.fzk.getLastProcessedZxid() && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                    }\n                    \n                    Assert.assertEquals(createSessionZxid, f.fzk.getLastProcessedZxid());\n                    \n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    start = System.currentTimeMillis();\n                    zkDb2.loadDataBase();\n                    while (zkDb2.getSessionWithTimeOuts().isEmpty() && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                        zkDb2.loadDataBase();\n                    }\n                    LOG.info(\"zkdb2 sessions:\" + zkDb2.getSessions());\n                    LOG.info(\"zkdb2 with timeouts:\" + zkDb2.getSessionWithTimeOuts());\n                    Assert.assertNotNull(zkDb2.getSessionWithTimeOuts().get(4L));\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n                \n            }\n\n            private void proposeNewSession(QuorumPacket qp, long zxid, long sessionId) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.createSession);\n                CreateSessionTxn cst = new CreateSessionTxn(30000);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(cst, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":718,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testNormalFollowerRun() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa, Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    assertEquals(0, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                    Stat stat = new Stat();\n                    assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    assertEquals(learnInfo.getServerid(), 0);\n\n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte[] protoBytes = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACKEPOCH, qp.getType());\n                    assertEquals(0, qp.getZxid());\n                    assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    qp.setType(Leader.SNAP);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    zkDb.serializeSnapshot(oa);\n                    oa.writeString(\"BenWasHere\", null);\n                    Thread.sleep(10); \r\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(1, f.self.getCurrentEpoch());\n                    \r\n                    verify(f.zk).takeSnapshot(true);\n                    assertEquals(firstZxid, f.fzk.getLastProcessedZxid());\n\n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    long lastZxid = zkDb2.loadDataBase();\n                    assertEquals(\"data1\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    assertEquals(firstZxid, lastZxid);\n\n                    \r\n                    long proposalZxid = ZxidUtils.makeZxid(1, 1000);\n                    proposeSetData(qp, proposalZxid, \"data2\", 2);\n                    oa.writeRecord(qp, null);\n\n                    TrackerWatcher watcher = new TrackerWatcher();\n\n                    \r\n                    assertEquals(\"data1\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, watcher)));\n\n                    \r\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(proposalZxid);\n                    oa.writeRecord(qp, null);\n\n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(proposalZxid, qp.getZxid());\n\n                    watcher.waitForChange();\n                    assertEquals(\"data2\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, null)));\n\n                    \r\n                    zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    lastZxid = zkDb2.loadDataBase();\n                    assertEquals(\"data2\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    assertEquals(proposalZxid, lastZxid);\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n\n            }\n\n            private void proposeSetData(QuorumPacket qp, long zxid, String data, int version) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.setData);\n                SetDataTxn sdt = new SetDataTxn(\"/foo\", data.getBytes(), version);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(sdt, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","date":"2019-08-17 23:13:15","endLine":701,"groupId":"3206","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormalFollowerRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/7f81f265db319f5227680702d6a4be01a76445.src","preCode":"    public void testNormalFollowerRun() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa,\n                    Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    Assert.assertEquals(0, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                    Stat stat = new Stat();\n                    Assert.assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    Assert.assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    Assert.assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    Assert.assertEquals(learnInfo.getServerid(), 0);\n                \n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte protoBytes[] = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n                \n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACKEPOCH, qp.getType());\n                    Assert.assertEquals(0, qp.getZxid());\n                    Assert.assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    Assert.assertEquals(1, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(0, f.self.getCurrentEpoch());\n                    \n                    \r\n                    qp.setType(Leader.SNAP);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    zkDb.serializeSnapshot(oa);\n                    oa.writeString(\"BenWasHere\", null);\n                    Thread.sleep(10); \r\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACK, qp.getType());\n                    Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    Assert.assertEquals(1, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(1, f.self.getCurrentEpoch());\n                    \r\n                    verify(f.zk).takeSnapshot(true);\n                    Assert.assertEquals(firstZxid, f.fzk.getLastProcessedZxid());\n                    \n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    long lastZxid = zkDb2.loadDataBase();\n                    Assert.assertEquals(\"data1\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    Assert.assertEquals(firstZxid, lastZxid);\n\n                    \r\n                    long proposalZxid = ZxidUtils.makeZxid(1, 1000);\n                    proposeSetData(qp, proposalZxid, \"data2\", 2);\n                    oa.writeRecord(qp, null);\n                    \n                    TrackerWatcher watcher = new TrackerWatcher();\n                    \n                    \r\n                    Assert.assertEquals(\"data1\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, watcher)));\n                    \n                    \r\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(proposalZxid);\n                    oa.writeRecord(qp, null);\n                    \n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n                    \n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACK, qp.getType());\n                    Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    \n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACK, qp.getType());\n                    Assert.assertEquals(proposalZxid, qp.getZxid());\n                    \n                    watcher.waitForChange();\n                    Assert.assertEquals(\"data2\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, null)));\n                    \n                    \r\n                    zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    lastZxid = zkDb2.loadDataBase();\n                    Assert.assertEquals(\"data2\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    Assert.assertEquals(proposalZxid, lastZxid);\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n                \n            }\n\n            private void proposeSetData(QuorumPacket qp, long zxid, String data, int version) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.setData);\n                SetDataTxn sdt = new SetDataTxn(\"/foo\", data.getBytes(), version);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(sdt, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testNormalFollowerRunWithDiff() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa, Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    assertEquals(0, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                    Stat stat = new Stat();\n                    assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    assertEquals(learnInfo.getServerid(), 0);\n\n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte[] protoBytes = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACKEPOCH, qp.getType());\n                    assertEquals(0, qp.getZxid());\n                    assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    qp.setType(Leader.DIFF);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    final long createSessionZxid = ZxidUtils.makeZxid(1, 2);\n                    proposeNewSession(qp, createSessionZxid, 0x333);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(createSessionZxid);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    qp.setData(null);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(1, f.self.getCurrentEpoch());\n\n                    \r\n                    \r\n                    long start = System.currentTimeMillis();\n                    while (createSessionZxid != f.fzk.getLastProcessedZxid()\n                                   && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                    }\n\n                    assertEquals(createSessionZxid, f.fzk.getLastProcessedZxid());\n\n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    start = System.currentTimeMillis();\n                    zkDb2.loadDataBase();\n                    while (zkDb2.getSessionWithTimeOuts().isEmpty() && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                        zkDb2.loadDataBase();\n                    }\n                    LOG.info(\"zkdb2 sessions:\" + zkDb2.getSessions());\n                    LOG.info(\"zkdb2 with timeouts:\" + zkDb2.getSessionWithTimeOuts());\n                    assertNotNull(zkDb2.getSessionWithTimeOuts().get(4L));\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n\n            }\n\n            private void proposeNewSession(QuorumPacket qp, long zxid, long sessionId) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.createSession);\n                CreateSessionTxn cst = new CreateSessionTxn(30000);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(cst, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","date":"2019-08-17 23:13:15","endLine":822,"groupId":"1864","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormalFollowerRunWithDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/7f81f265db319f5227680702d6a4be01a76445.src","preCode":"    public void testNormalFollowerRunWithDiff() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa,\n                    Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    Assert.assertEquals(0, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                    Stat stat = new Stat();\n                    Assert.assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    Assert.assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    Assert.assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    Assert.assertEquals(learnInfo.getServerid(), 0);\n                \n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte protoBytes[] = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n                \n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACKEPOCH, qp.getType());\n                    Assert.assertEquals(0, qp.getZxid());\n                    Assert.assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    Assert.assertEquals(1, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(0, f.self.getCurrentEpoch());\n                    \n                    \r\n                    qp.setType(Leader.DIFF);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    final long createSessionZxid = ZxidUtils.makeZxid(1, 2);\n                    proposeNewSession(qp, createSessionZxid, 0x333);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(createSessionZxid);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    qp.setData(null);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n                    \n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACK, qp.getType());\n                    Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    \n                  \n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    Assert.assertEquals(Leader.ACK, qp.getType());\n                    Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    Assert.assertEquals(1, f.self.getAcceptedEpoch());\n                    Assert.assertEquals(1, f.self.getCurrentEpoch());\n                    \n                    \r\n                    \r\n                    long start = System.currentTimeMillis();\n                    while (createSessionZxid != f.fzk.getLastProcessedZxid() && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                    }\n                    \n                    Assert.assertEquals(createSessionZxid, f.fzk.getLastProcessedZxid());\n                    \n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    start = System.currentTimeMillis();\n                    zkDb2.loadDataBase();\n                    while (zkDb2.getSessionWithTimeOuts().isEmpty() && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                        zkDb2.loadDataBase();\n                    }\n                    LOG.info(\"zkdb2 sessions:\" + zkDb2.getSessions());\n                    LOG.info(\"zkdb2 with timeouts:\" + zkDb2.getSessionWithTimeOuts());\n                    Assert.assertNotNull(zkDb2.getSessionWithTimeOuts().get(4L));\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n                \n            }\n\n            private void proposeNewSession(QuorumPacket qp, long zxid, long sessionId) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.createSession);\n                CreateSessionTxn cst = new CreateSessionTxn(30000);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(cst, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void testNormalFollowerRun() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa, Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    assertEquals(0, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                    Stat stat = new Stat();\n                    assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    assertEquals(learnInfo.getServerid(), 0);\n\n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte[] protoBytes = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACKEPOCH, qp.getType());\n                    assertEquals(0, qp.getZxid());\n                    assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    qp.setType(Leader.SNAP);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    zkDb.serializeSnapshot(oa);\n                    oa.writeString(\"BenWasHere\", null);\n                    Thread.sleep(10); \r\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(1, f.self.getCurrentEpoch());\n                    \r\n                    verify(f.zk).takeSnapshot(true);\n                    assertEquals(firstZxid, f.fzk.getLastProcessedZxid());\n\n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    long lastZxid = zkDb2.loadDataBase();\n                    assertEquals(\"data1\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    assertEquals(firstZxid, lastZxid);\n\n                    \r\n                    long proposalZxid = ZxidUtils.makeZxid(1, 1000);\n                    proposeSetData(qp, proposalZxid, \"data2\", 2);\n                    oa.writeRecord(qp, null);\n\n                    TrackerWatcher watcher = new TrackerWatcher();\n\n                    \r\n                    assertEquals(\"data1\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, watcher)));\n\n                    \r\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(proposalZxid);\n                    oa.writeRecord(qp, null);\n\n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(proposalZxid, qp.getZxid());\n\n                    watcher.waitForChange();\n                    assertEquals(\"data2\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, null)));\n\n                    \r\n                    zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    lastZxid = zkDb2.loadDataBase();\n                    assertEquals(\"data2\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    assertEquals(proposalZxid, lastZxid);\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n\n            }\n\n            private void proposeSetData(QuorumPacket qp, long zxid, String data, int version) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.setData);\n                SetDataTxn sdt = new SetDataTxn(\"/foo\", data.getBytes(), version);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(sdt, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","date":"2019-08-17 23:13:15","endLine":701,"groupId":"3206","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormalFollowerRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/03/7f81f265db319f5227680702d6a4be01a76445.src","preCode":"    public void testNormalFollowerRun() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa, Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    assertEquals(0, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                    Stat stat = new Stat();\n                    assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    assertEquals(learnInfo.getServerid(), 0);\n\n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte[] protoBytes = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACKEPOCH, qp.getType());\n                    assertEquals(0, qp.getZxid());\n                    assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    qp.setType(Leader.SNAP);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    zkDb.serializeSnapshot(oa);\n                    oa.writeString(\"BenWasHere\", null);\n                    Thread.sleep(10); \r\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(1, f.self.getCurrentEpoch());\n                    \r\n                    verify(f.zk).takeSnapshot(true);\n                    assertEquals(firstZxid, f.fzk.getLastProcessedZxid());\n\n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    long lastZxid = zkDb2.loadDataBase();\n                    assertEquals(\"data1\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    assertEquals(firstZxid, lastZxid);\n\n                    \r\n                    long proposalZxid = ZxidUtils.makeZxid(1, 1000);\n                    proposeSetData(qp, proposalZxid, \"data2\", 2);\n                    oa.writeRecord(qp, null);\n\n                    TrackerWatcher watcher = new TrackerWatcher();\n\n                    \r\n                    assertEquals(\"data1\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, watcher)));\n\n                    \r\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(proposalZxid);\n                    oa.writeRecord(qp, null);\n\n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(proposalZxid, qp.getZxid());\n\n                    watcher.waitForChange();\n                    assertEquals(\"data2\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, null)));\n\n                    \r\n                    zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    lastZxid = zkDb2.loadDataBase();\n                    assertEquals(\"data2\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    assertEquals(proposalZxid, lastZxid);\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n\n            }\n\n            private void proposeSetData(QuorumPacket qp, long zxid, String data, int version) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.setData);\n                SetDataTxn sdt = new SetDataTxn(\"/foo\", data.getBytes(), version);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(sdt, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"N"},{"authorDate":"2019-10-10 20:37:45","commitOrder":3,"curCode":"    public void testNormalFollowerRunWithDiff() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa, Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    assertEquals(0, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                    Stat stat = new Stat();\n                    assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    assertEquals(learnInfo.getServerid(), 0);\n\n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte[] protoBytes = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACKEPOCH, qp.getType());\n                    assertEquals(0, qp.getZxid());\n                    assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    qp.setType(Leader.DIFF);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    final long createSessionZxid = ZxidUtils.makeZxid(1, 2);\n                    proposeNewSession(qp, createSessionZxid, 0x333);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(createSessionZxid);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    qp.setData(null);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(1, f.self.getCurrentEpoch());\n\n                    \r\n                    \r\n                    long start = System.currentTimeMillis();\n                    while (createSessionZxid != f.fzk.getLastProcessedZxid()\n                                   && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                    }\n\n                    assertEquals(createSessionZxid, f.fzk.getLastProcessedZxid());\n\n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    start = System.currentTimeMillis();\n                    zkDb2.loadDataBase();\n                    while (zkDb2.getSessionWithTimeOuts().isEmpty() && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                        zkDb2.loadDataBase();\n                    }\n                    LOG.info(\"zkdb2 sessions:{}\", zkDb2.getSessions());\n                    LOG.info(\"zkdb2 with timeouts:{}\", zkDb2.getSessionWithTimeOuts());\n                    assertNotNull(zkDb2.getSessionWithTimeOuts().get(4L));\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n\n            }\n\n            private void proposeNewSession(QuorumPacket qp, long zxid, long sessionId) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.createSession);\n                CreateSessionTxn cst = new CreateSessionTxn(30000);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(cst, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","date":"2019-10-10 20:37:45","endLine":822,"groupId":"1864","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormalFollowerRunWithDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/53/02416edb092d2f584561e1996ed537e2568cc8.src","preCode":"    public void testNormalFollowerRunWithDiff() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa, Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    assertEquals(0, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                    Stat stat = new Stat();\n                    assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    assertEquals(learnInfo.getServerid(), 0);\n\n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte[] protoBytes = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACKEPOCH, qp.getType());\n                    assertEquals(0, qp.getZxid());\n                    assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    qp.setType(Leader.DIFF);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    final long createSessionZxid = ZxidUtils.makeZxid(1, 2);\n                    proposeNewSession(qp, createSessionZxid, 0x333);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(createSessionZxid);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    qp.setData(null);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(1, f.self.getCurrentEpoch());\n\n                    \r\n                    \r\n                    long start = System.currentTimeMillis();\n                    while (createSessionZxid != f.fzk.getLastProcessedZxid()\n                                   && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                    }\n\n                    assertEquals(createSessionZxid, f.fzk.getLastProcessedZxid());\n\n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    start = System.currentTimeMillis();\n                    zkDb2.loadDataBase();\n                    while (zkDb2.getSessionWithTimeOuts().isEmpty() && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                        zkDb2.loadDataBase();\n                    }\n                    LOG.info(\"zkdb2 sessions:\" + zkDb2.getSessions());\n                    LOG.info(\"zkdb2 with timeouts:\" + zkDb2.getSessionWithTimeOuts());\n                    assertNotNull(zkDb2.getSessionWithTimeOuts().get(4L));\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n\n            }\n\n            private void proposeNewSession(QuorumPacket qp, long zxid, long sessionId) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.createSession);\n                CreateSessionTxn cst = new CreateSessionTxn(30000);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(cst, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"M"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"},{"authorTime":"2019-12-28 05:33:26","codes":[{"authorDate":"2019-12-28 05:33:26","commitOrder":4,"curCode":"    public void testNormalFollowerRun() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa, Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    assertEquals(0, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1), null);\n                    Stat stat = new Stat();\n                    assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    assertEquals(learnInfo.getServerid(), 0);\n\n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte[] protoBytes = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACKEPOCH, qp.getType());\n                    assertEquals(0, qp.getZxid());\n                    assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    qp.setType(Leader.SNAP);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    zkDb.serializeSnapshot(oa);\n                    oa.writeString(\"BenWasHere\", null);\n                    Thread.sleep(10); \r\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(1, f.self.getCurrentEpoch());\n                    \r\n                    verify(f.zk).takeSnapshot(true);\n                    assertEquals(firstZxid, f.fzk.getLastProcessedZxid());\n\n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    long lastZxid = zkDb2.loadDataBase();\n                    assertEquals(\"data1\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    assertEquals(firstZxid, lastZxid);\n\n                    \r\n                    long proposalZxid = ZxidUtils.makeZxid(1, 1000);\n                    proposeSetData(qp, proposalZxid, \"data2\", 2);\n                    oa.writeRecord(qp, null);\n\n                    TrackerWatcher watcher = new TrackerWatcher();\n\n                    \r\n                    assertEquals(\"data1\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, watcher)));\n\n                    \r\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(proposalZxid);\n                    oa.writeRecord(qp, null);\n\n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(proposalZxid, qp.getZxid());\n\n                    watcher.waitForChange();\n                    assertEquals(\"data2\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, null)));\n\n                    \r\n                    zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    lastZxid = zkDb2.loadDataBase();\n                    assertEquals(\"data2\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    assertEquals(proposalZxid, lastZxid);\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n\n            }\n\n            private void proposeSetData(QuorumPacket qp, long zxid, String data, int version) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.setData);\n                SetDataTxn sdt = new SetDataTxn(\"/foo\", data.getBytes(), version);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(sdt, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","date":"2019-12-28 05:33:26","endLine":702,"groupId":"10180","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormalFollowerRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b8/630ae13195f0fd833061588750b41539fbf8d1.src","preCode":"    public void testNormalFollowerRun() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa, Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    assertEquals(0, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                    Stat stat = new Stat();\n                    assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    assertEquals(learnInfo.getServerid(), 0);\n\n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte[] protoBytes = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACKEPOCH, qp.getType());\n                    assertEquals(0, qp.getZxid());\n                    assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    qp.setType(Leader.SNAP);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    zkDb.serializeSnapshot(oa);\n                    oa.writeString(\"BenWasHere\", null);\n                    Thread.sleep(10); \r\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(1, f.self.getCurrentEpoch());\n                    \r\n                    verify(f.zk).takeSnapshot(true);\n                    assertEquals(firstZxid, f.fzk.getLastProcessedZxid());\n\n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    long lastZxid = zkDb2.loadDataBase();\n                    assertEquals(\"data1\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    assertEquals(firstZxid, lastZxid);\n\n                    \r\n                    long proposalZxid = ZxidUtils.makeZxid(1, 1000);\n                    proposeSetData(qp, proposalZxid, \"data2\", 2);\n                    oa.writeRecord(qp, null);\n\n                    TrackerWatcher watcher = new TrackerWatcher();\n\n                    \r\n                    assertEquals(\"data1\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, watcher)));\n\n                    \r\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(proposalZxid);\n                    oa.writeRecord(qp, null);\n\n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(proposalZxid, qp.getZxid());\n\n                    watcher.waitForChange();\n                    assertEquals(\"data2\", new String(f.fzk.getZKDatabase().getData(\"/foo\", stat, null)));\n\n                    \r\n                    zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    lastZxid = zkDb2.loadDataBase();\n                    assertEquals(\"data2\", new String(zkDb2.getData(\"/foo\", stat, null)));\n                    assertEquals(proposalZxid, lastZxid);\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n\n            }\n\n            private void proposeSetData(QuorumPacket qp, long zxid, String data, int version) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.setData);\n                SetDataTxn sdt = new SetDataTxn(\"/foo\", data.getBytes(), version);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(sdt, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":571,"status":"M"},{"authorDate":"2019-12-28 05:33:26","commitOrder":4,"curCode":"    public void testNormalFollowerRunWithDiff() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa, Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    assertEquals(0, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1), null);\n                    Stat stat = new Stat();\n                    assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    assertEquals(learnInfo.getServerid(), 0);\n\n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte[] protoBytes = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACKEPOCH, qp.getType());\n                    assertEquals(0, qp.getZxid());\n                    assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    qp.setType(Leader.DIFF);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    final long createSessionZxid = ZxidUtils.makeZxid(1, 2);\n                    proposeNewSession(qp, createSessionZxid, 0x333);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(createSessionZxid);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    qp.setData(null);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(1, f.self.getCurrentEpoch());\n\n                    \r\n                    \r\n                    long start = System.currentTimeMillis();\n                    while (createSessionZxid != f.fzk.getLastProcessedZxid()\n                                   && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                    }\n\n                    assertEquals(createSessionZxid, f.fzk.getLastProcessedZxid());\n\n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    start = System.currentTimeMillis();\n                    zkDb2.loadDataBase();\n                    while (zkDb2.getSessionWithTimeOuts().isEmpty() && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                        zkDb2.loadDataBase();\n                    }\n                    LOG.info(\"zkdb2 sessions:{}\", zkDb2.getSessions());\n                    LOG.info(\"zkdb2 with timeouts:{}\", zkDb2.getSessionWithTimeOuts());\n                    assertNotNull(zkDb2.getSessionWithTimeOuts().get(4L));\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n\n            }\n\n            private void proposeNewSession(QuorumPacket qp, long zxid, long sessionId) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.createSession);\n                CreateSessionTxn cst = new CreateSessionTxn(30000);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(cst, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","date":"2019-12-28 05:33:26","endLine":823,"groupId":"10180","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormalFollowerRunWithDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b8/630ae13195f0fd833061588750b41539fbf8d1.src","preCode":"    public void testNormalFollowerRunWithDiff() throws Exception {\n        testFollowerConversation(new FollowerConversation() {\n            @Override\n            public void converseWithFollower(InputArchive ia, OutputArchive oa, Follower f) throws Exception {\n                File tmpDir = File.createTempFile(\"test\", \"dir\", testData);\n                tmpDir.delete();\n                tmpDir.mkdir();\n                File logDir = f.fzk.getTxnLogFactory().getDataDir().getParentFile();\n                File snapDir = f.fzk.getTxnLogFactory().getSnapDir().getParentFile();\n                \r\n                f.zk = spy(f.zk);\n                try {\n                    assertEquals(0, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    ZKDatabase zkDb = new ZKDatabase(new FileTxnSnapLog(tmpDir, tmpDir));\n                    final long firstZxid = ZxidUtils.makeZxid(1, 1);\n                    zkDb.processTxn(new TxnHeader(13, 1313, firstZxid, 33, ZooDefs.OpCode.create), new CreateTxn(\"/foo\", \"data1\".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, false, 1));\n                    Stat stat = new Stat();\n                    assertEquals(\"data1\", new String(zkDb.getData(\"/foo\", stat, null)));\n\n                    QuorumPacket qp = new QuorumPacket();\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.FOLLOWERINFO, qp.getType());\n                    assertEquals(qp.getZxid(), 0);\n                    LearnerInfo learnInfo = new LearnerInfo();\n                    ByteBufferInputStream.byteBuffer2Record(ByteBuffer.wrap(qp.getData()), learnInfo);\n                    assertEquals(learnInfo.getProtocolVersion(), 0x10000);\n                    assertEquals(learnInfo.getServerid(), 0);\n\n                    \r\n                    qp.setType(Leader.LEADERINFO);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    byte[] protoBytes = new byte[4];\n                    ByteBuffer.wrap(protoBytes).putInt(0x10000);\n                    qp.setData(protoBytes);\n                    oa.writeRecord(qp, null);\n\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACKEPOCH, qp.getType());\n                    assertEquals(0, qp.getZxid());\n                    assertEquals(ZxidUtils.makeZxid(0, 0), ByteBuffer.wrap(qp.getData()).getInt());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(0, f.self.getCurrentEpoch());\n\n                    \r\n                    qp.setType(Leader.DIFF);\n                    qp.setData(new byte[0]);\n                    qp.setZxid(zkDb.getDataTreeLastProcessedZxid());\n                    oa.writeRecord(qp, null);\n                    final long createSessionZxid = ZxidUtils.makeZxid(1, 2);\n                    proposeNewSession(qp, createSessionZxid, 0x333);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.COMMIT);\n                    qp.setZxid(createSessionZxid);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.NEWLEADER);\n                    qp.setZxid(ZxidUtils.makeZxid(1, 0));\n                    qp.setData(null);\n                    oa.writeRecord(qp, null);\n                    qp.setType(Leader.UPTODATE);\n                    qp.setZxid(0);\n                    oa.writeRecord(qp, null);\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n\n                    \r\n                    readPacketSkippingPing(ia, qp);\n                    assertEquals(Leader.ACK, qp.getType());\n                    assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid());\n                    assertEquals(1, f.self.getAcceptedEpoch());\n                    assertEquals(1, f.self.getCurrentEpoch());\n\n                    \r\n                    \r\n                    long start = System.currentTimeMillis();\n                    while (createSessionZxid != f.fzk.getLastProcessedZxid()\n                                   && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                    }\n\n                    assertEquals(createSessionZxid, f.fzk.getLastProcessedZxid());\n\n                    \r\n                    ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                    start = System.currentTimeMillis();\n                    zkDb2.loadDataBase();\n                    while (zkDb2.getSessionWithTimeOuts().isEmpty() && (System.currentTimeMillis() - start) < 50) {\n                        Thread.sleep(1);\n                        zkDb2.loadDataBase();\n                    }\n                    LOG.info(\"zkdb2 sessions:{}\", zkDb2.getSessions());\n                    LOG.info(\"zkdb2 with timeouts:{}\", zkDb2.getSessionWithTimeOuts());\n                    assertNotNull(zkDb2.getSessionWithTimeOuts().get(4L));\n                    \r\n                    verify(f.zk, never()).takeSnapshot();\n                } finally {\n                    TestUtils.deleteFileRecursively(tmpDir);\n                }\n\n            }\n\n            private void proposeNewSession(QuorumPacket qp, long zxid, long sessionId) throws IOException {\n                qp.setType(Leader.PROPOSAL);\n                qp.setZxid(zxid);\n                TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.createSession);\n                CreateSessionTxn cst = new CreateSessionTxn(30000);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                OutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                boa.writeRecord(hdr, null);\n                boa.writeRecord(cst, null);\n                qp.setData(baos.toByteArray());\n            }\n        });\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/Zab1_0Test.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":705,"status":"M"}],"commitId":"2805e8982c0e8964e5f8d86f4b01a293d75d4aed","commitMessage":"@@@ZOOKEEPER-3512: Real time data consistency check during broadcast time\n\nThis is the 2nd part of data consistency based on digest.  it checks the DataTree digest on every txn during broadcast time.\n\nAuthor: Fangmin Lyu <fangmin@apache.org>\nAuthor: Enrico Olivelli <eolivelli@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Andor Molnar <andor@apache.org>.  Michael Han <hanm@apache.org>\n\nCloses #1059 from lvfangmin/ZOOKEEPER-3512\n","date":"2019-12-28 05:33:26","modifiedFileCount":"43","status":"M","submitter":"Fangmin Lyu"}]
