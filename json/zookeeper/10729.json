[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    private boolean checkFourLetterWord(final Channel channel,\n            ChannelBuffer message, final int len) throws IOException\n    {\n        \r\n        \r\n        if (!FourLetterCommands.isKnown(len)) {\n            return false;\n        }\n\n        String cmd = FourLetterCommands.getCommandString(len);\n\n        channel.setInterestOps(0).awaitUninterruptibly();\n        packetReceived(4);\n\n        final PrintWriter pwriter = new PrintWriter(\n                new BufferedWriter(new SendBufferWriter()));\n\n        \r\n        if (!FourLetterCommands.isEnabled(cmd)) {\n            LOG.debug(\"Command {} is not executed because it is not in the whitelist.\", cmd);\n            NopCommand nopCmd = new NopCommand(pwriter, this, cmd +\n                    \" is not executed because it is not in the whitelist.\");\n            nopCmd.start();\n            return true;\n        }\n\n        LOG.info(\"Processing \" + cmd + \" command from \"\n                + channel.getRemoteAddress());\n\n       if (len == FourLetterCommands.setTraceMaskCmd) {\n            ByteBuffer mask = ByteBuffer.allocate(8);\n            message.readBytes(mask);\n            mask.flip();\n            long traceMask = mask.getLong();\n            ZooTrace.setTextTraceLevel(traceMask);\n            SetTraceMaskCommand setMask = new SetTraceMaskCommand(pwriter, this, traceMask);\n            setMask.start();\n            return true;\n        } else {\n            CommandExecutor commandExecutor = new CommandExecutor();\n            return commandExecutor.execute(this, pwriter, len, zkServer,factory);\n        }\n    }\n","date":"2018-10-05 20:25:43","endLine":309,"groupId":"2813","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkFourLetterWord","params":"(finalChannelchannel@ChannelBuffermessage@finalintlen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0b/2772433b38c4a7651bdb77966984222526b1e9.src","preCode":"    private boolean checkFourLetterWord(final Channel channel,\n            ChannelBuffer message, final int len) throws IOException\n    {\n        \r\n        \r\n        if (!FourLetterCommands.isKnown(len)) {\n            return false;\n        }\n\n        String cmd = FourLetterCommands.getCommandString(len);\n\n        channel.setInterestOps(0).awaitUninterruptibly();\n        packetReceived(4);\n\n        final PrintWriter pwriter = new PrintWriter(\n                new BufferedWriter(new SendBufferWriter()));\n\n        \r\n        if (!FourLetterCommands.isEnabled(cmd)) {\n            LOG.debug(\"Command {} is not executed because it is not in the whitelist.\", cmd);\n            NopCommand nopCmd = new NopCommand(pwriter, this, cmd +\n                    \" is not executed because it is not in the whitelist.\");\n            nopCmd.start();\n            return true;\n        }\n\n        LOG.info(\"Processing \" + cmd + \" command from \"\n                + channel.getRemoteAddress());\n\n       if (len == FourLetterCommands.setTraceMaskCmd) {\n            ByteBuffer mask = ByteBuffer.allocate(8);\n            message.readBytes(mask);\n            mask.flip();\n            long traceMask = mask.getLong();\n            ZooTrace.setTextTraceLevel(traceMask);\n            SetTraceMaskCommand setMask = new SetTraceMaskCommand(pwriter, this, traceMask);\n            setMask.start();\n            return true;\n        } else {\n            CommandExecutor commandExecutor = new CommandExecutor();\n            return commandExecutor.execute(this, pwriter, len, zkServer,factory);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    private boolean checkFourLetterWord(final SelectionKey k, final int len)\n    throws IOException\n    {\n        \r\n        \r\n        if (!FourLetterCommands.isKnown(len)) {\n            return false;\n        }\n\n        String cmd = FourLetterCommands.getCommandString(len);\n        packetReceived(4);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (k != null) {\n            try {\n                k.cancel();\n            } catch(Exception e) {\n                LOG.error(\"Error cancelling command selection key \", e);\n            }\n        }\n\n        final PrintWriter pwriter = new PrintWriter(\n                new BufferedWriter(new SendBufferWriter()));\n\n        \r\n        if (!FourLetterCommands.isEnabled(cmd)) {\n            LOG.debug(\"Command {} is not executed because it is not in the whitelist.\", cmd);\n            NopCommand nopCmd = new NopCommand(pwriter, this, cmd +\n                    \" is not executed because it is not in the whitelist.\");\n            nopCmd.start();\n            return true;\n        }\n\n        LOG.info(\"Processing \" + cmd + \" command from \"\n                + sock.socket().getRemoteSocketAddress());\n\n        if (len == FourLetterCommands.setTraceMaskCmd) {\n            incomingBuffer = ByteBuffer.allocate(8);\n            int rc = sock.read(incomingBuffer);\n            if (rc < 0) {\n                throw new IOException(\"Read error\");\n            }\n            incomingBuffer.flip();\n            long traceMask = incomingBuffer.getLong();\n            ZooTrace.setTextTraceLevel(traceMask);\n            SetTraceMaskCommand setMask = new SetTraceMaskCommand(pwriter, this, traceMask);\n            setMask.start();\n            return true;\n        } else {\n            CommandExecutor commandExecutor = new CommandExecutor();\n            return commandExecutor.execute(this, pwriter, len, zkServer, factory);\n        }\n    }\n","date":"2018-10-05 20:25:43","endLine":537,"groupId":"2418","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkFourLetterWord","params":"(finalSelectionKeyk@finalintlen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c3/44c659deea68b5f8c9051eb50ec93a8cefa2ca.src","preCode":"    private boolean checkFourLetterWord(final SelectionKey k, final int len)\n    throws IOException\n    {\n        \r\n        \r\n        if (!FourLetterCommands.isKnown(len)) {\n            return false;\n        }\n\n        String cmd = FourLetterCommands.getCommandString(len);\n        packetReceived(4);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (k != null) {\n            try {\n                k.cancel();\n            } catch(Exception e) {\n                LOG.error(\"Error cancelling command selection key \", e);\n            }\n        }\n\n        final PrintWriter pwriter = new PrintWriter(\n                new BufferedWriter(new SendBufferWriter()));\n\n        \r\n        if (!FourLetterCommands.isEnabled(cmd)) {\n            LOG.debug(\"Command {} is not executed because it is not in the whitelist.\", cmd);\n            NopCommand nopCmd = new NopCommand(pwriter, this, cmd +\n                    \" is not executed because it is not in the whitelist.\");\n            nopCmd.start();\n            return true;\n        }\n\n        LOG.info(\"Processing \" + cmd + \" command from \"\n                + sock.socket().getRemoteSocketAddress());\n\n        if (len == FourLetterCommands.setTraceMaskCmd) {\n            incomingBuffer = ByteBuffer.allocate(8);\n            int rc = sock.read(incomingBuffer);\n            if (rc < 0) {\n                throw new IOException(\"Read error\");\n            }\n            incomingBuffer.flip();\n            long traceMask = incomingBuffer.getLong();\n            ZooTrace.setTextTraceLevel(traceMask);\n            SetTraceMaskCommand setMask = new SetTraceMaskCommand(pwriter, this, traceMask);\n            setMask.start();\n            return true;\n        } else {\n            CommandExecutor commandExecutor = new CommandExecutor();\n            return commandExecutor.execute(this, pwriter, len, zkServer, factory);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":477,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-11-23 00:56:01","commitOrder":2,"curCode":"    private boolean checkFourLetterWord(final Channel channel, ByteBuf message, final int len) {\n        \r\n        \r\n        if (!FourLetterCommands.isKnown(len)) {\n            return false;\n        }\n\n        String cmd = FourLetterCommands.getCommandString(len);\n\n        \r\n        \r\n        \r\n        channel.config().setAutoRead(false);\n        packetReceived(4);\n\n        final PrintWriter pwriter = new PrintWriter(\n                new BufferedWriter(new SendBufferWriter()));\n\n        \r\n        if (!FourLetterCommands.isEnabled(cmd)) {\n            LOG.debug(\"Command {} is not executed because it is not in the whitelist.\", cmd);\n            NopCommand nopCmd = new NopCommand(pwriter, this, cmd +\n                    \" is not executed because it is not in the whitelist.\");\n            nopCmd.start();\n            return true;\n        }\n\n        LOG.info(\"Processing {} command from {}\", cmd, channel.remoteAddress());\n\n       if (len == FourLetterCommands.setTraceMaskCmd) {\n            ByteBuffer mask = ByteBuffer.allocate(8);\n            message.readBytes(mask);\n            mask.flip();\n            long traceMask = mask.getLong();\n            ZooTrace.setTextTraceLevel(traceMask);\n            SetTraceMaskCommand setMask = new SetTraceMaskCommand(pwriter, this, traceMask);\n            setMask.start();\n            return true;\n        } else {\n            CommandExecutor commandExecutor = new CommandExecutor();\n            return commandExecutor.execute(this, pwriter, len, zkServer,factory);\n        }\n    }\n","date":"2018-11-23 00:56:01","endLine":274,"groupId":"2813","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkFourLetterWord","params":"(finalChannelchannel@ByteBufmessage@finalintlen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/31/1d3c1d2046e176a1b4368f8b8449865bdf84a6.src","preCode":"    private boolean checkFourLetterWord(final Channel channel,\n            ChannelBuffer message, final int len) throws IOException\n    {\n        \r\n        \r\n        if (!FourLetterCommands.isKnown(len)) {\n            return false;\n        }\n\n        String cmd = FourLetterCommands.getCommandString(len);\n\n        channel.setInterestOps(0).awaitUninterruptibly();\n        packetReceived(4);\n\n        final PrintWriter pwriter = new PrintWriter(\n                new BufferedWriter(new SendBufferWriter()));\n\n        \r\n        if (!FourLetterCommands.isEnabled(cmd)) {\n            LOG.debug(\"Command {} is not executed because it is not in the whitelist.\", cmd);\n            NopCommand nopCmd = new NopCommand(pwriter, this, cmd +\n                    \" is not executed because it is not in the whitelist.\");\n            nopCmd.start();\n            return true;\n        }\n\n        LOG.info(\"Processing \" + cmd + \" command from \"\n                + channel.getRemoteAddress());\n\n       if (len == FourLetterCommands.setTraceMaskCmd) {\n            ByteBuffer mask = ByteBuffer.allocate(8);\n            message.readBytes(mask);\n            mask.flip();\n            long traceMask = mask.getLong();\n            ZooTrace.setTextTraceLevel(traceMask);\n            SetTraceMaskCommand setMask = new SetTraceMaskCommand(pwriter, this, traceMask);\n            setMask.start();\n            return true;\n        } else {\n            CommandExecutor commandExecutor = new CommandExecutor();\n            return commandExecutor.execute(this, pwriter, len, zkServer,factory);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"},{"authorDate":"2018-10-05 20:25:43","commitOrder":2,"curCode":"    private boolean checkFourLetterWord(final SelectionKey k, final int len)\n    throws IOException\n    {\n        \r\n        \r\n        if (!FourLetterCommands.isKnown(len)) {\n            return false;\n        }\n\n        String cmd = FourLetterCommands.getCommandString(len);\n        packetReceived(4);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (k != null) {\n            try {\n                k.cancel();\n            } catch(Exception e) {\n                LOG.error(\"Error cancelling command selection key \", e);\n            }\n        }\n\n        final PrintWriter pwriter = new PrintWriter(\n                new BufferedWriter(new SendBufferWriter()));\n\n        \r\n        if (!FourLetterCommands.isEnabled(cmd)) {\n            LOG.debug(\"Command {} is not executed because it is not in the whitelist.\", cmd);\n            NopCommand nopCmd = new NopCommand(pwriter, this, cmd +\n                    \" is not executed because it is not in the whitelist.\");\n            nopCmd.start();\n            return true;\n        }\n\n        LOG.info(\"Processing \" + cmd + \" command from \"\n                + sock.socket().getRemoteSocketAddress());\n\n        if (len == FourLetterCommands.setTraceMaskCmd) {\n            incomingBuffer = ByteBuffer.allocate(8);\n            int rc = sock.read(incomingBuffer);\n            if (rc < 0) {\n                throw new IOException(\"Read error\");\n            }\n            incomingBuffer.flip();\n            long traceMask = incomingBuffer.getLong();\n            ZooTrace.setTextTraceLevel(traceMask);\n            SetTraceMaskCommand setMask = new SetTraceMaskCommand(pwriter, this, traceMask);\n            setMask.start();\n            return true;\n        } else {\n            CommandExecutor commandExecutor = new CommandExecutor();\n            return commandExecutor.execute(this, pwriter, len, zkServer, factory);\n        }\n    }\n","date":"2018-10-05 20:25:43","endLine":537,"groupId":"2418","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkFourLetterWord","params":"(finalSelectionKeyk@finalintlen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c3/44c659deea68b5f8c9051eb50ec93a8cefa2ca.src","preCode":"    private boolean checkFourLetterWord(final SelectionKey k, final int len)\n    throws IOException\n    {\n        \r\n        \r\n        if (!FourLetterCommands.isKnown(len)) {\n            return false;\n        }\n\n        String cmd = FourLetterCommands.getCommandString(len);\n        packetReceived(4);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (k != null) {\n            try {\n                k.cancel();\n            } catch(Exception e) {\n                LOG.error(\"Error cancelling command selection key \", e);\n            }\n        }\n\n        final PrintWriter pwriter = new PrintWriter(\n                new BufferedWriter(new SendBufferWriter()));\n\n        \r\n        if (!FourLetterCommands.isEnabled(cmd)) {\n            LOG.debug(\"Command {} is not executed because it is not in the whitelist.\", cmd);\n            NopCommand nopCmd = new NopCommand(pwriter, this, cmd +\n                    \" is not executed because it is not in the whitelist.\");\n            nopCmd.start();\n            return true;\n        }\n\n        LOG.info(\"Processing \" + cmd + \" command from \"\n                + sock.socket().getRemoteSocketAddress());\n\n        if (len == FourLetterCommands.setTraceMaskCmd) {\n            incomingBuffer = ByteBuffer.allocate(8);\n            int rc = sock.read(incomingBuffer);\n            if (rc < 0) {\n                throw new IOException(\"Read error\");\n            }\n            incomingBuffer.flip();\n            long traceMask = incomingBuffer.getLong();\n            ZooTrace.setTextTraceLevel(traceMask);\n            SetTraceMaskCommand setMask = new SetTraceMaskCommand(pwriter, this, traceMask);\n            setMask.start();\n            return true;\n        } else {\n            CommandExecutor commandExecutor = new CommandExecutor();\n            return commandExecutor.execute(this, pwriter, len, zkServer, factory);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":477,"status":"N"}],"commitId":"caca062767c36525e6ecead2ae0f34c447394809","commitMessage":"@@@ZOOKEEPER-3152: Port ZK netty stack to netty4\n\nSummary: Ported the client connection netty stack from netty3 to netty4. This includes both the server side (NettyServerCnxn and friends) and the client side (ClientCnxnSocketNetty).\n\nTest Plan: Modified `FourLetterWordsTest` and `NettyServerCnxnTest`.  plus manual testing on a regional ensemble.\n\nFB Reviewers: nixon\n\nAuthor: Ilya Maykov <ilyam@fb.com>\n\nReviewers: andor@apache.org\n\nCloses #669 from ivmaykov/ZOOKEEPER-3152\n","date":"2018-11-23 00:56:01","modifiedFileCount":"12","status":"M","submitter":"Ilya Maykov"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2018-11-23 00:56:01","commitOrder":3,"curCode":"    private boolean checkFourLetterWord(final Channel channel, ByteBuf message, final int len) {\n        \r\n        \r\n        if (!FourLetterCommands.isKnown(len)) {\n            return false;\n        }\n\n        String cmd = FourLetterCommands.getCommandString(len);\n\n        \r\n        \r\n        \r\n        channel.config().setAutoRead(false);\n        packetReceived(4);\n\n        final PrintWriter pwriter = new PrintWriter(\n                new BufferedWriter(new SendBufferWriter()));\n\n        \r\n        if (!FourLetterCommands.isEnabled(cmd)) {\n            LOG.debug(\"Command {} is not executed because it is not in the whitelist.\", cmd);\n            NopCommand nopCmd = new NopCommand(pwriter, this, cmd +\n                    \" is not executed because it is not in the whitelist.\");\n            nopCmd.start();\n            return true;\n        }\n\n        LOG.info(\"Processing {} command from {}\", cmd, channel.remoteAddress());\n\n       if (len == FourLetterCommands.setTraceMaskCmd) {\n            ByteBuffer mask = ByteBuffer.allocate(8);\n            message.readBytes(mask);\n            mask.flip();\n            long traceMask = mask.getLong();\n            ZooTrace.setTextTraceLevel(traceMask);\n            SetTraceMaskCommand setMask = new SetTraceMaskCommand(pwriter, this, traceMask);\n            setMask.start();\n            return true;\n        } else {\n            CommandExecutor commandExecutor = new CommandExecutor();\n            return commandExecutor.execute(this, pwriter, len, zkServer,factory);\n        }\n    }\n","date":"2018-11-23 00:56:01","endLine":274,"groupId":"10729","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkFourLetterWord","params":"(finalChannelchannel@ByteBufmessage@finalintlen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/31/1d3c1d2046e176a1b4368f8b8449865bdf84a6.src","preCode":"    private boolean checkFourLetterWord(final Channel channel, ByteBuf message, final int len) {\n        \r\n        \r\n        if (!FourLetterCommands.isKnown(len)) {\n            return false;\n        }\n\n        String cmd = FourLetterCommands.getCommandString(len);\n\n        \r\n        \r\n        \r\n        channel.config().setAutoRead(false);\n        packetReceived(4);\n\n        final PrintWriter pwriter = new PrintWriter(\n                new BufferedWriter(new SendBufferWriter()));\n\n        \r\n        if (!FourLetterCommands.isEnabled(cmd)) {\n            LOG.debug(\"Command {} is not executed because it is not in the whitelist.\", cmd);\n            NopCommand nopCmd = new NopCommand(pwriter, this, cmd +\n                    \" is not executed because it is not in the whitelist.\");\n            nopCmd.start();\n            return true;\n        }\n\n        LOG.info(\"Processing {} command from {}\", cmd, channel.remoteAddress());\n\n       if (len == FourLetterCommands.setTraceMaskCmd) {\n            ByteBuffer mask = ByteBuffer.allocate(8);\n            message.readBytes(mask);\n            mask.flip();\n            long traceMask = mask.getLong();\n            ZooTrace.setTextTraceLevel(traceMask);\n            SetTraceMaskCommand setMask = new SetTraceMaskCommand(pwriter, this, traceMask);\n            setMask.start();\n            return true;\n        } else {\n            CommandExecutor commandExecutor = new CommandExecutor();\n            return commandExecutor.execute(this, pwriter, len, zkServer,factory);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"N"},{"authorDate":"2019-10-10 20:37:45","commitOrder":3,"curCode":"    private boolean checkFourLetterWord(final SelectionKey k, final int len) throws IOException {\n        \r\n        \r\n        if (!FourLetterCommands.isKnown(len)) {\n            return false;\n        }\n\n        String cmd = FourLetterCommands.getCommandString(len);\n        packetReceived(4);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (k != null) {\n            try {\n                k.cancel();\n            } catch (Exception e) {\n                LOG.error(\"Error cancelling command selection key\", e);\n            }\n        }\n\n        final PrintWriter pwriter = new PrintWriter(new BufferedWriter(new SendBufferWriter()));\n\n        \r\n        if (!FourLetterCommands.isEnabled(cmd)) {\n            LOG.debug(\"Command {} is not executed because it is not in the whitelist.\", cmd);\n            NopCommand nopCmd = new NopCommand(\n                pwriter,\n                this,\n                cmd + \" is not executed because it is not in the whitelist.\");\n            nopCmd.start();\n            return true;\n        }\n\n        LOG.info(\"Processing {} command from {}\", cmd, sock.socket().getRemoteSocketAddress());\n\n        if (len == FourLetterCommands.setTraceMaskCmd) {\n            incomingBuffer = ByteBuffer.allocate(8);\n            int rc = sock.read(incomingBuffer);\n            if (rc < 0) {\n                throw new IOException(\"Read error\");\n            }\n            incomingBuffer.flip();\n            long traceMask = incomingBuffer.getLong();\n            ZooTrace.setTextTraceLevel(traceMask);\n            SetTraceMaskCommand setMask = new SetTraceMaskCommand(pwriter, this, traceMask);\n            setMask.start();\n            return true;\n        } else {\n            CommandExecutor commandExecutor = new CommandExecutor();\n            return commandExecutor.execute(this, pwriter, len, zkServer, factory);\n        }\n    }\n","date":"2019-10-10 20:37:45","endLine":523,"groupId":"10729","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkFourLetterWord","params":"(finalSelectionKeyk@finalintlen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/91/5717473477780c3063c3a20620e9218a0d91a0.src","preCode":"    private boolean checkFourLetterWord(final SelectionKey k, final int len) throws IOException {\n        \r\n        \r\n        if (!FourLetterCommands.isKnown(len)) {\n            return false;\n        }\n\n        String cmd = FourLetterCommands.getCommandString(len);\n        packetReceived(4);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        if (k != null) {\n            try {\n                k.cancel();\n            } catch (Exception e) {\n                LOG.error(\"Error cancelling command selection key \", e);\n            }\n        }\n\n        final PrintWriter pwriter = new PrintWriter(new BufferedWriter(new SendBufferWriter()));\n\n        \r\n        if (!FourLetterCommands.isEnabled(cmd)) {\n            LOG.debug(\"Command {} is not executed because it is not in the whitelist.\", cmd);\n            NopCommand nopCmd = new NopCommand(\n                pwriter,\n                this,\n                cmd + \" is not executed because it is not in the whitelist.\");\n            nopCmd.start();\n            return true;\n        }\n\n        LOG.info(\"Processing \" + cmd + \" command from \" + sock.socket().getRemoteSocketAddress());\n\n        if (len == FourLetterCommands.setTraceMaskCmd) {\n            incomingBuffer = ByteBuffer.allocate(8);\n            int rc = sock.read(incomingBuffer);\n            if (rc < 0) {\n                throw new IOException(\"Read error\");\n            }\n            incomingBuffer.flip();\n            long traceMask = incomingBuffer.getLong();\n            ZooTrace.setTextTraceLevel(traceMask);\n            SetTraceMaskCommand setMask = new SetTraceMaskCommand(pwriter, this, traceMask);\n            setMask.start();\n            return true;\n        } else {\n            CommandExecutor commandExecutor = new CommandExecutor();\n            return commandExecutor.execute(this, pwriter, len, zkServer, factory);\n        }\n    }\n","realPath":"zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":465,"status":"M"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"}]
