[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public static void shutdown(QuorumPeer qp) {\n        if (qp == null) {\n            return;\n        }\n        try {\n            LOG.info(\"Shutting down quorum peer \" + qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election \" + qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown \" + qp.getName());\n            }\n            LOG.info(\"Waiting for \" + qp.getName() + \" to exit thread\");\n            long readTimeout = qp.getTickTime() * qp.getInitLimit();\n            long connectTimeout = qp.getTickTime() * qp.getSyncLimit();\n            long maxTimeout = Math.max(readTimeout, connectTimeout);\n            maxTimeout = Math.max(maxTimeout, ClientBase.CONNECTION_TIMEOUT);\n            qp.join(maxTimeout * 2);\n            if (qp.isAlive()) {\n                Assert.fail(\"QP failed to shutdown in \" + (maxTimeout * 2) + \" seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: \" + qp.getName(), e);\n        }\n    }\n","date":"2018-10-19 20:39:50","endLine":416,"groupId":"1999","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shutdown","params":"(QuorumPeerqp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/fc/aa9b68385350fef2f00a1ef84cf40bfe4eb070.src","preCode":"    public static void shutdown(QuorumPeer qp) {\n        if (qp == null) {\n            return;\n        }\n        try {\n            LOG.info(\"Shutting down quorum peer \" + qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election \" + qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown \" + qp.getName());\n            }\n            LOG.info(\"Waiting for \" + qp.getName() + \" to exit thread\");\n            long readTimeout = qp.getTickTime() * qp.getInitLimit();\n            long connectTimeout = qp.getTickTime() * qp.getSyncLimit();\n            long maxTimeout = Math.max(readTimeout, connectTimeout);\n            maxTimeout = Math.max(maxTimeout, ClientBase.CONNECTION_TIMEOUT);\n            qp.join(maxTimeout * 2);\n            if (qp.isAlive()) {\n                Assert.fail(\"QP failed to shutdown in \" + (maxTimeout * 2) + \" seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: \" + qp.getName(), e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void shutdown(int id) {\n        QuorumPeer qp = getPeer(id).peer;\n        try {\n            LOG.info(\"Shutting down quorum peer \" + qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election \" + qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown \" + qp.getName());\n            }\n            LOG.info(\"Waiting for \" + qp.getName() + \" to exit thread\");\n            qp.join(30000);\n            if (qp.isAlive()) {\n                Assert.fail(\"QP failed to shutdown in 30 seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: \" + qp.getName(), e);\n        }\n    }\n","date":"2018-10-19 20:39:50","endLine":267,"groupId":"2923","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shutdown","params":"(intid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/31/4171d873a3adf6c9c60439dd24942a39f23fc9.src","preCode":"    public void shutdown(int id) {\n        QuorumPeer qp = getPeer(id).peer;\n        try {\n            LOG.info(\"Shutting down quorum peer \" + qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election \" + qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown \" + qp.getName());\n            }\n            LOG.info(\"Waiting for \" + qp.getName() + \" to exit thread\");\n            qp.join(30000);\n            if (qp.isAlive()) {\n                Assert.fail(\"QP failed to shutdown in 30 seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: \" + qp.getName(), e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public static void shutdown(QuorumPeer qp) {\n        if (qp == null) {\n            return;\n        }\n        try {\n            LOG.info(\"Shutting down quorum peer \" + qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election \" + qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown \" + qp.getName());\n            }\n            LOG.info(\"Waiting for \" + qp.getName() + \" to exit thread\");\n            long readTimeout = qp.getTickTime() * qp.getInitLimit();\n            long connectTimeout = qp.getTickTime() * qp.getSyncLimit();\n            long maxTimeout = Math.max(readTimeout, connectTimeout);\n            maxTimeout = Math.max(maxTimeout, ClientBase.CONNECTION_TIMEOUT);\n            qp.join(maxTimeout * 2);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in \" + (maxTimeout * 2) + \" seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: \" + qp.getName(), e);\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":385,"groupId":"1999","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shutdown","params":"(QuorumPeerqp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/73/4e5935f34e521c48715ef530fc4f5092fa6afa.src","preCode":"    public static void shutdown(QuorumPeer qp) {\n        if (qp == null) {\n            return;\n        }\n        try {\n            LOG.info(\"Shutting down quorum peer \" + qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election \" + qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown \" + qp.getName());\n            }\n            LOG.info(\"Waiting for \" + qp.getName() + \" to exit thread\");\n            long readTimeout = qp.getTickTime() * qp.getInitLimit();\n            long connectTimeout = qp.getTickTime() * qp.getSyncLimit();\n            long maxTimeout = Math.max(readTimeout, connectTimeout);\n            maxTimeout = Math.max(maxTimeout, ClientBase.CONNECTION_TIMEOUT);\n            qp.join(maxTimeout * 2);\n            if (qp.isAlive()) {\n                Assert.fail(\"QP failed to shutdown in \" + (maxTimeout * 2) + \" seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: \" + qp.getName(), e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void shutdown(int id) {\n        QuorumPeer qp = getPeer(id).peer;\n        try {\n            LOG.info(\"Shutting down quorum peer \" + qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election \" + qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown \" + qp.getName());\n            }\n            LOG.info(\"Waiting for \" + qp.getName() + \" to exit thread\");\n            qp.join(30000);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in 30 seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: \" + qp.getName(), e);\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":267,"groupId":"2923","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shutdown","params":"(intid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/46/511ebd9d12a3a7399a1bed1e90a31629970efa.src","preCode":"    public void shutdown(int id) {\n        QuorumPeer qp = getPeer(id).peer;\n        try {\n            LOG.info(\"Shutting down quorum peer \" + qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election \" + qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown \" + qp.getName());\n            }\n            LOG.info(\"Waiting for \" + qp.getName() + \" to exit thread\");\n            qp.join(30000);\n            if (qp.isAlive()) {\n                Assert.fail(\"QP failed to shutdown in 30 seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: \" + qp.getName(), e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2019-10-10 20:37:45","commitOrder":3,"curCode":"    public static void shutdown(QuorumPeer qp) {\n        if (qp == null) {\n            return;\n        }\n        try {\n            LOG.info(\"Shutting down quorum peer {}\", qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election {}\", qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown {}\", qp.getName());\n            }\n            LOG.info(\"Waiting for {} to exit thread\", qp.getName());\n            long readTimeout = qp.getTickTime() * qp.getInitLimit();\n            long connectTimeout = qp.getTickTime() * qp.getSyncLimit();\n            long maxTimeout = Math.max(readTimeout, connectTimeout);\n            maxTimeout = Math.max(maxTimeout, ClientBase.CONNECTION_TIMEOUT);\n            qp.join(maxTimeout * 2);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in \" + (maxTimeout * 2) + \" seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: {}\", qp.getName(), e);\n        }\n    }\n","date":"2019-10-10 20:37:45","endLine":385,"groupId":"3786","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shutdown","params":"(QuorumPeerqp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b9/1aa19e915d0311fa9855d3ed1ebe4ccfcd15f2.src","preCode":"    public static void shutdown(QuorumPeer qp) {\n        if (qp == null) {\n            return;\n        }\n        try {\n            LOG.info(\"Shutting down quorum peer \" + qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election \" + qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown \" + qp.getName());\n            }\n            LOG.info(\"Waiting for \" + qp.getName() + \" to exit thread\");\n            long readTimeout = qp.getTickTime() * qp.getInitLimit();\n            long connectTimeout = qp.getTickTime() * qp.getSyncLimit();\n            long maxTimeout = Math.max(readTimeout, connectTimeout);\n            maxTimeout = Math.max(maxTimeout, ClientBase.CONNECTION_TIMEOUT);\n            qp.join(maxTimeout * 2);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in \" + (maxTimeout * 2) + \" seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: \" + qp.getName(), e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"M"},{"authorDate":"2019-10-10 20:37:45","commitOrder":3,"curCode":"    public void shutdown(int id) {\n        QuorumPeer qp = getPeer(id).peer;\n        try {\n            LOG.info(\"Shutting down quorum peer {}\", qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election {}\", qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown {}\", qp.getName());\n            }\n            LOG.info(\"Waiting for {} to exit thread\", qp.getName());\n            qp.join(30000);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in 30 seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: {}\", qp.getName(), e);\n        }\n    }\n","date":"2019-10-10 20:37:45","endLine":267,"groupId":"762","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shutdown","params":"(intid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d6/c016312a97c967c3eb40f01215bf34bbbcb458.src","preCode":"    public void shutdown(int id) {\n        QuorumPeer qp = getPeer(id).peer;\n        try {\n            LOG.info(\"Shutting down quorum peer \" + qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election \" + qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown \" + qp.getName());\n            }\n            LOG.info(\"Waiting for \" + qp.getName() + \" to exit thread\");\n            qp.join(30000);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in 30 seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: \" + qp.getName(), e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"},{"authorTime":"2021-03-07 03:38:43","codes":[{"authorDate":"2019-10-10 20:37:45","commitOrder":4,"curCode":"    public static void shutdown(QuorumPeer qp) {\n        if (qp == null) {\n            return;\n        }\n        try {\n            LOG.info(\"Shutting down quorum peer {}\", qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election {}\", qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown {}\", qp.getName());\n            }\n            LOG.info(\"Waiting for {} to exit thread\", qp.getName());\n            long readTimeout = qp.getTickTime() * qp.getInitLimit();\n            long connectTimeout = qp.getTickTime() * qp.getSyncLimit();\n            long maxTimeout = Math.max(readTimeout, connectTimeout);\n            maxTimeout = Math.max(maxTimeout, ClientBase.CONNECTION_TIMEOUT);\n            qp.join(maxTimeout * 2);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in \" + (maxTimeout * 2) + \" seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: {}\", qp.getName(), e);\n        }\n    }\n","date":"2019-10-10 20:37:45","endLine":385,"groupId":"10519","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shutdown","params":"(QuorumPeerqp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/b9/1aa19e915d0311fa9855d3ed1ebe4ccfcd15f2.src","preCode":"    public static void shutdown(QuorumPeer qp) {\n        if (qp == null) {\n            return;\n        }\n        try {\n            LOG.info(\"Shutting down quorum peer {}\", qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election {}\", qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown {}\", qp.getName());\n            }\n            LOG.info(\"Waiting for {} to exit thread\", qp.getName());\n            long readTimeout = qp.getTickTime() * qp.getInitLimit();\n            long connectTimeout = qp.getTickTime() * qp.getSyncLimit();\n            long maxTimeout = Math.max(readTimeout, connectTimeout);\n            maxTimeout = Math.max(maxTimeout, ClientBase.CONNECTION_TIMEOUT);\n            qp.join(maxTimeout * 2);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in \" + (maxTimeout * 2) + \" seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: {}\", qp.getName(), e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumBase.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"N"},{"authorDate":"2021-03-07 03:38:43","commitOrder":4,"curCode":"    public void shutdown(int id) {\n        QuorumPeer qp = getPeer(id).peer;\n        try {\n            LOG.info(\"Shutting down quorum peer {} with id {}\", qp.getName(), id);\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election {} with id {}\", qp.getName(), id);\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown {} with id {}\", qp.getName(), id);\n            }\n            LOG.info(\"Waiting for {} with id {} to exit thread\", qp.getName(), id);\n            qp.join(30000);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in 30 seconds: \" + qp.getName() + \" \" + id);\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: {} {}\", qp.getName(), id, e);\n        }\n    }\n","date":"2021-03-07 03:40:32","endLine":271,"groupId":"10519","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"shutdown","params":"(intid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ce/1cd1b3c5f3579c8e3bae7740bcdb2b8fe350ef.src","preCode":"    public void shutdown(int id) {\n        QuorumPeer qp = getPeer(id).peer;\n        try {\n            LOG.info(\"Shutting down quorum peer {}\", qp.getName());\n            qp.shutdown();\n            Election e = qp.getElectionAlg();\n            if (e != null) {\n                LOG.info(\"Shutting down leader election {}\", qp.getName());\n                e.shutdown();\n            } else {\n                LOG.info(\"No election available to shutdown {}\", qp.getName());\n            }\n            LOG.info(\"Waiting for {} to exit thread\", qp.getName());\n            qp.join(30000);\n            if (qp.isAlive()) {\n                fail(\"QP failed to shutdown in 30 seconds: \" + qp.getName());\n            }\n        } catch (InterruptedException e) {\n            LOG.debug(\"QP interrupted: {}\", qp.getName(), e);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumUtil.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"}],"commitId":"1214d3bf611d153ae8c3987523da01d3d6c82686","commitMessage":"@@@ZOOKEEPER-3781: Create snapshots on followers when snapshot.trust.empty is true\n\nsnapshot.trust.empty is an escape hatch for users upgrading from 3.4.x to later Zookeeper\nversions.  allowing nodes to start with a non-empty transaction log but no snapshot.\n\nThe intent is for this setting to be enabled for a short while during the upgrade. \nand then disabled again.  as the check it disables is a safety feature.\n\nPrior to this PR.  a node would only write a snapshot locally if it became leader. \nor if it had fallen so far behind the leader that the leader sent a SNAP message instead\nof a DIFF. This made the upgrade process inconvenient.  as not all nodes would create\na snapshot when snapshot.trust.empty was true.  meaning that the safety check could\nnot be flipped back on.\n\nThis PR makes follower nodes write a local snapshot when they receive NEWLEADER. \nif they have no local snapshot and snapshot.trust.empty is true.\n\nAuthor: Stig Rohde D?ssing <stig@humio.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Damien Diederen <ddiederen@apache.org>\n\nCloses #1581 from srdo/zookeeper-3781\n","date":"2021-03-07 03:40:32","modifiedFileCount":"5","status":"M","submitter":"Stig Rohde D?ssing"}]
