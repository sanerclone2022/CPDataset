[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testAbortExistingFile() throws IOException {\n        FileOutputStream fos1 = new FileOutputStream(dstFile);\n        fos1.write(TEST_STRING.getBytes());\n        fos1.close();\n\n        AtomicFileOutputStream fos2 = new AtomicFileOutputStream(dstFile);\n\n        fos2.abort();\n\n        \r\n        assertEquals(TEST_STRING, ClientBase.readFile(dstFile));\n        assertEquals(1, testDir.list().length);\n    }\n","date":"2018-10-19 20:39:50","endLine":178,"groupId":"3119","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAbortExistingFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/cb/d2b7700dc4686c80d12fb0f227ff35e5174133.src","preCode":"    public void testAbortExistingFile() throws IOException {\n        FileOutputStream fos1 = new FileOutputStream(dstFile);\n        fos1.write(TEST_STRING.getBytes());\n        fos1.close();\n\n        AtomicFileOutputStream fos2 = new AtomicFileOutputStream(dstFile);\n\n        fos2.abort();\n\n        \r\n        assertEquals(TEST_STRING, ClientBase.readFile(dstFile));\n        assertEquals(1, testDir.list().length);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/AtomicFileOutputStreamTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testAbortExistingFileAfterFlush() throws IOException {\n        FileOutputStream fos1 = new FileOutputStream(dstFile);\n        fos1.write(TEST_STRING.getBytes());\n        fos1.close();\n\n        AtomicFileOutputStream fos2 = new AtomicFileOutputStream(dstFile);\n        fos2.write(TEST_STRING_2.getBytes());\n        fos2.flush();\n\n        fos2.abort();\n\n        \r\n        assertEquals(TEST_STRING, ClientBase.readFile(dstFile));\n        assertEquals(1, testDir.list().length);\n    }\n","date":"2018-10-19 20:39:50","endLine":199,"groupId":"3120","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAbortExistingFileAfterFlush","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/cb/d2b7700dc4686c80d12fb0f227ff35e5174133.src","preCode":"    public void testAbortExistingFileAfterFlush() throws IOException {\n        FileOutputStream fos1 = new FileOutputStream(dstFile);\n        fos1.write(TEST_STRING.getBytes());\n        fos1.close();\n\n        AtomicFileOutputStream fos2 = new AtomicFileOutputStream(dstFile);\n        fos2.write(TEST_STRING_2.getBytes());\n        fos2.flush();\n\n        fos2.abort();\n\n        \r\n        assertEquals(TEST_STRING, ClientBase.readFile(dstFile));\n        assertEquals(1, testDir.list().length);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/AtomicFileOutputStreamTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2020-11-09 22:33:15","codes":[{"authorDate":"2020-11-09 22:33:15","commitOrder":2,"curCode":"    public void testAbortExistingFile() throws IOException {\n        FileOutputStream fos1 = new FileOutputStream(dstFile);\n        fos1.write(TEST_STRING.getBytes());\n        fos1.close();\n\n        AtomicFileOutputStream fos2 = new AtomicFileOutputStream(dstFile);\n\n        fos2.abort();\n\n        \r\n        assertEquals(TEST_STRING, new String(Files.readAllBytes(dstFile.toPath()), UTF_8));\n        assertEquals(1, testDir.list().length);\n    }\n","date":"2020-11-09 22:33:15","endLine":179,"groupId":"10560","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testAbortExistingFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a3/d7096c6bfd9d3649f0d70eecbb44ee7c45eccf.src","preCode":"    public void testAbortExistingFile() throws IOException {\n        FileOutputStream fos1 = new FileOutputStream(dstFile);\n        fos1.write(TEST_STRING.getBytes());\n        fos1.close();\n\n        AtomicFileOutputStream fos2 = new AtomicFileOutputStream(dstFile);\n\n        fos2.abort();\n\n        \r\n        assertEquals(TEST_STRING, ClientBase.readFile(dstFile));\n        assertEquals(1, testDir.list().length);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/AtomicFileOutputStreamTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2020-11-09 22:33:15","commitOrder":2,"curCode":"    public void testAbortExistingFileAfterFlush() throws IOException {\n        FileOutputStream fos1 = new FileOutputStream(dstFile);\n        fos1.write(TEST_STRING.getBytes());\n        fos1.close();\n\n        AtomicFileOutputStream fos2 = new AtomicFileOutputStream(dstFile);\n        fos2.write(TEST_STRING_2.getBytes());\n        fos2.flush();\n\n        fos2.abort();\n\n        \r\n        assertEquals(TEST_STRING, new String(Files.readAllBytes(dstFile.toPath()), UTF_8));\n        assertEquals(1, testDir.list().length);\n    }\n","date":"2020-11-09 22:33:15","endLine":200,"groupId":"10560","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testAbortExistingFileAfterFlush","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/a3/d7096c6bfd9d3649f0d70eecbb44ee7c45eccf.src","preCode":"    public void testAbortExistingFileAfterFlush() throws IOException {\n        FileOutputStream fos1 = new FileOutputStream(dstFile);\n        fos1.write(TEST_STRING.getBytes());\n        fos1.close();\n\n        AtomicFileOutputStream fos2 = new AtomicFileOutputStream(dstFile);\n        fos2.write(TEST_STRING_2.getBytes());\n        fos2.flush();\n\n        fos2.abort();\n\n        \r\n        assertEquals(TEST_STRING, ClientBase.readFile(dstFile));\n        assertEquals(1, testDir.list().length);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/AtomicFileOutputStreamTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"7f66c7680f7b79eb1ba1cf253b4534de88ad3404","commitMessage":"@@@ZOOKEEPER-3836: Use Commons and JDK Functions in ClientBase\n\nRelated to #1357\n\nAuthor: David Mollitor <dmollitor@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1358 from belugabehr/ZOOKEEPER-3836\n","date":"2020-11-09 22:33:15","modifiedFileCount":"2","status":"M","submitter":"David Mollitor"}]
