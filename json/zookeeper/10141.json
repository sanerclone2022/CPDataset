[{"authorTime":"2019-07-12 23:01:44","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":2,"curCode":"    public void connectionInitLimitTimeoutTest() throws Exception {\n        TimeoutLearner learner = new TimeoutLearner();\n        learner.self = new QuorumPeer();\n        learner.self.setTickTime(2000);\n        learner.self.setInitLimit(5);\n        learner.self.setSyncLimit(2);\n\n        \r\n        InetSocketAddress addr = new InetSocketAddress(1111);\n        \n        \r\n        learner.setTimeMultiplier((long)4000 * 1000000);\n        \n        learner.setPassConnectAttempt(5);\n\n        \r\n        try {\n            learner.connectToLeader(addr, \"\");\n            Assert.fail(\"should have thrown IOException!\");\n        } catch (IOException e) {\n            \r\n            Assert.assertTrue(learner.nanoTime() > 2000*5*1000000);\n            Assert.assertEquals(3, learner.getSockConnectAttempt());\n        }\n    }\n","date":"2018-10-05 20:25:43","endLine":140,"groupId":"331","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"connectionInitLimitTimeoutTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/17/935505ca7f41445ea21824818a969568bfdf13.src","preCode":"    public void connectionInitLimitTimeoutTest() throws Exception {\n        TimeoutLearner learner = new TimeoutLearner();\n        learner.self = new QuorumPeer();\n        learner.self.setTickTime(2000);\n        learner.self.setInitLimit(5);\n        learner.self.setSyncLimit(2);\n\n        \r\n        InetSocketAddress addr = new InetSocketAddress(1111);\n        \n        \r\n        learner.setTimeMultiplier((long)4000 * 1000000);\n        \n        learner.setPassConnectAttempt(5);\n\n        \r\n        try {\n            learner.connectToLeader(addr, \"\");\n            Assert.fail(\"should have thrown IOException!\");\n        } catch (IOException e) {\n            \r\n            Assert.assertTrue(learner.nanoTime() > 2000*5*1000000);\n            Assert.assertEquals(3, learner.getSockConnectAttempt());\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"NB"},{"authorDate":"2019-07-12 23:01:44","commitOrder":2,"curCode":"    public void connectToLearnerMasterLimitTest() throws Exception {\n      TimeoutLearner learner = new TimeoutLearner();\n      learner.self = new QuorumPeer();\n      learner.self.setTickTime(2000);\n      learner.self.setInitLimit(2);\n      learner.self.setSyncLimit(2);\n      learner.self.setConnectToLearnerMasterLimit(5);\n      \n      InetSocketAddress addr = new InetSocketAddress(1111);\n      learner.setTimeMultiplier((long)4000 * 1000000);\n      learner.setPassConnectAttempt(5);\n      \n      try {\n          learner.connectToLeader(addr, \"\");\n          Assert.fail(\"should have thrown IOException!\");\n      } catch (IOException e) {\n        Assert.assertTrue(learner.nanoTime() > 2000*5*1000000);\n        Assert.assertEquals(3, learner.getSockConnectAttempt());\n      }\n    }\n","date":"2019-07-12 23:01:44","endLine":162,"groupId":"331","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"connectToLearnerMasterLimitTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/7e/ccf608994549db8683a0e12b925a942b20367d.src","preCode":"    public void connectToLearnerMasterLimitTest() throws Exception {\n      TimeoutLearner learner = new TimeoutLearner();\n      learner.self = new QuorumPeer();\n      learner.self.setTickTime(2000);\n      learner.self.setInitLimit(2);\n      learner.self.setSyncLimit(2);\n      learner.self.setConnectToLearnerMasterLimit(5);\n      \n      InetSocketAddress addr = new InetSocketAddress(1111);\n      learner.setTimeMultiplier((long)4000 * 1000000);\n      learner.setPassConnectAttempt(5);\n      \n      try {\n          learner.connectToLeader(addr, \"\");\n          Assert.fail(\"should have thrown IOException!\");\n      } catch (IOException e) {\n        Assert.assertTrue(learner.nanoTime() > 2000*5*1000000);\n        Assert.assertEquals(3, learner.getSockConnectAttempt());\n      }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"B"}],"commitId":"43ce772db000721546fcd13dd8523002dfa97741","commitMessage":"@@@ZOOKEEPER-3398: Learner.connectToLeader() may take too long to time-out\n\nAfter leader election happens.  the followers will connect to the leader which is facilitated by the Learner.connectToLeader() method.\n\nLearner.connectToLeader() is relying on the initLimit configuration value to time-out in case the network connection is unreliable. This config may have a high value that could leave the ensemble retrying and waiting in the state of not having quorum for too long. The follower will retry up to 5 times.\n\nThis patch introduces a new configuration directive that will allow Zookeeper to use different time-out value `connectToLeaderLimit` which then could be set to lower value than `initLimit`.\n\nTest plan:\n- ant clean\n- ant test-core-java\n\nNOTE: Lots of whitespace changes.  hope it helps.\n\nAuthor: Vladimir Ivic <vladimir.ivic@me.com>\n\nReviewers: eolivelli@apache.org.  hanm@apache.org.  andor@apache.org\n\nCloses #953 from vladimirivic/ZOOKEEPER-3398 and squashes the following commits:\n\nda4ecd055 [Vladimir Ivic] Removed redundant test.  chaning LearnerTest.connectToLearnerMasterLimitTest() params and assertions\n6c413311c [Vladimir Ivic] Updating the tests with the new timeout parameter\n5a89cbd7e [Vladimir Ivic] Rewriting timeout logic inside Leader.connectToLeader\n99c065616 [Vladimir Ivic] Adding config connectToLearnerMasterLimit to prevent long connect timeout\n","date":"2019-07-12 23:01:44","modifiedFileCount":"23","status":"M","submitter":"Vladimir Ivic"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void connectionInitLimitTimeoutTest() throws Exception {\n        TimeoutLearner learner = new TimeoutLearner();\n        learner.self = new QuorumPeer();\n        learner.self.setTickTime(2000);\n        learner.self.setInitLimit(5);\n        learner.self.setSyncLimit(2);\n\n        \r\n        InetSocketAddress addr = new InetSocketAddress(1111);\n\n        \r\n        learner.setTimeMultiplier((long) 4000 * 1000000);\n\n        learner.setPassConnectAttempt(5);\n\n        \r\n        try {\n            learner.connectToLeader(addr, \"\");\n            fail(\"should have thrown IOException!\");\n        } catch (IOException e) {\n            \r\n            assertTrue(learner.nanoTime() > 2000 * 5 * 1000000);\n            assertEquals(3, learner.getSockConnectAttempt());\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":144,"groupId":"331","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"connectionInitLimitTimeoutTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/88/647a22b621937108a99b80d881b408cfa79c18.src","preCode":"    public void connectionInitLimitTimeoutTest() throws Exception {\n        TimeoutLearner learner = new TimeoutLearner();\n        learner.self = new QuorumPeer();\n        learner.self.setTickTime(2000);\n        learner.self.setInitLimit(5);\n        learner.self.setSyncLimit(2);\n\n        \r\n        InetSocketAddress addr = new InetSocketAddress(1111);\n        \n        \r\n        learner.setTimeMultiplier((long)4000 * 1000000);\n        \n        learner.setPassConnectAttempt(5);\n\n        \r\n        try {\n            learner.connectToLeader(addr, \"\");\n            Assert.fail(\"should have thrown IOException!\");\n        } catch (IOException e) {\n            \r\n            Assert.assertTrue(learner.nanoTime() > 2000*5*1000000);\n            Assert.assertEquals(3, learner.getSockConnectAttempt());\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":3,"curCode":"    public void connectToLearnerMasterLimitTest() throws Exception {\n        TimeoutLearner learner = new TimeoutLearner();\n        learner.self = new QuorumPeer();\n        learner.self.setTickTime(2000);\n        learner.self.setInitLimit(2);\n        learner.self.setSyncLimit(2);\n        learner.self.setConnectToLearnerMasterLimit(5);\n\n        InetSocketAddress addr = new InetSocketAddress(1111);\n        learner.setTimeMultiplier((long) 4000 * 1000000);\n        learner.setPassConnectAttempt(5);\n\n        try {\n            learner.connectToLeader(addr, \"\");\n            fail(\"should have thrown IOException!\");\n        } catch (IOException e) {\n            assertTrue(learner.nanoTime() > 2000 * 5 * 1000000);\n            assertEquals(3, learner.getSockConnectAttempt());\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":166,"groupId":"331","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"connectToLearnerMasterLimitTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/88/647a22b621937108a99b80d881b408cfa79c18.src","preCode":"    public void connectToLearnerMasterLimitTest() throws Exception {\n      TimeoutLearner learner = new TimeoutLearner();\n      learner.self = new QuorumPeer();\n      learner.self.setTickTime(2000);\n      learner.self.setInitLimit(2);\n      learner.self.setSyncLimit(2);\n      learner.self.setConnectToLearnerMasterLimit(5);\n      \n      InetSocketAddress addr = new InetSocketAddress(1111);\n      learner.setTimeMultiplier((long)4000 * 1000000);\n      learner.setPassConnectAttempt(5);\n      \n      try {\n          learner.connectToLeader(addr, \"\");\n          Assert.fail(\"should have thrown IOException!\");\n      } catch (IOException e) {\n        Assert.assertTrue(learner.nanoTime() > 2000*5*1000000);\n        Assert.assertEquals(3, learner.getSockConnectAttempt());\n      }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-11-29 21:49:13","codes":[{"authorDate":"2019-11-29 21:49:13","commitOrder":4,"curCode":"    public void connectionInitLimitTimeoutTest() throws Exception {\n        TestLearner learner = new TestLearner();\n        learner.self = new QuorumPeer();\n        learner.self.setTickTime(2000);\n        learner.self.setInitLimit(5);\n        learner.self.setSyncLimit(2);\n\n        \r\n        InetSocketAddress addr = new InetSocketAddress(1111);\n\n        \r\n        learner.setTimeMultiplier((long) 4000 * 1000_000);\n\n        learner.setPassConnectAttempt(5);\n\n        \r\n        try {\n            learner.connectToLeader(new MultipleAddresses(addr), \"\");\n            fail(\"should have thrown IOException!\");\n        } catch (IOException e) {\n            \r\n            assertTrue(learner.nanoTime() > 2000 * 5 * 1000_000);\n            assertEquals(3, learner.getSockConnectAttempt());\n        }\n    }\n","date":"2019-11-29 21:49:13","endLine":171,"groupId":"10141","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"connectionInitLimitTimeoutTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/1d/121ac8bde7050a56e3d16ce517d4c3a4255b02.src","preCode":"    public void connectionInitLimitTimeoutTest() throws Exception {\n        TimeoutLearner learner = new TimeoutLearner();\n        learner.self = new QuorumPeer();\n        learner.self.setTickTime(2000);\n        learner.self.setInitLimit(5);\n        learner.self.setSyncLimit(2);\n\n        \r\n        InetSocketAddress addr = new InetSocketAddress(1111);\n\n        \r\n        learner.setTimeMultiplier((long) 4000 * 1000000);\n\n        learner.setPassConnectAttempt(5);\n\n        \r\n        try {\n            learner.connectToLeader(addr, \"\");\n            fail(\"should have thrown IOException!\");\n        } catch (IOException e) {\n            \r\n            assertTrue(learner.nanoTime() > 2000 * 5 * 1000000);\n            assertEquals(3, learner.getSockConnectAttempt());\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2019-11-29 21:49:13","commitOrder":4,"curCode":"    public void connectToLearnerMasterLimitTest() throws Exception {\n        TestLearner learner = new TestLearner();\n        learner.self = new QuorumPeer();\n        learner.self.setTickTime(2000);\n        learner.self.setInitLimit(2);\n        learner.self.setSyncLimit(2);\n        learner.self.setConnectToLearnerMasterLimit(5);\n\n        InetSocketAddress addr = new InetSocketAddress(1111);\n        learner.setTimeMultiplier((long) 4000 * 1000_000);\n        learner.setPassConnectAttempt(5);\n\n        try {\n            learner.connectToLeader(new MultipleAddresses(addr), \"\");\n            fail(\"should have thrown IOException!\");\n        } catch (IOException e) {\n            assertTrue(learner.nanoTime() > 2000 * 5 * 1000_000);\n            assertEquals(3, learner.getSockConnectAttempt());\n        }\n    }\n","date":"2019-11-29 21:49:13","endLine":252,"groupId":"10141","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"connectToLearnerMasterLimitTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/1d/121ac8bde7050a56e3d16ce517d4c3a4255b02.src","preCode":"    public void connectToLearnerMasterLimitTest() throws Exception {\n        TimeoutLearner learner = new TimeoutLearner();\n        learner.self = new QuorumPeer();\n        learner.self.setTickTime(2000);\n        learner.self.setInitLimit(2);\n        learner.self.setSyncLimit(2);\n        learner.self.setConnectToLearnerMasterLimit(5);\n\n        InetSocketAddress addr = new InetSocketAddress(1111);\n        learner.setTimeMultiplier((long) 4000 * 1000000);\n        learner.setPassConnectAttempt(5);\n\n        try {\n            learner.connectToLeader(addr, \"\");\n            fail(\"should have thrown IOException!\");\n        } catch (IOException e) {\n            assertTrue(learner.nanoTime() > 2000 * 5 * 1000000);\n            assertEquals(3, learner.getSockConnectAttempt());\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"}],"commitId":"815c8f2130b8b43e11abe52b226707f707a93581","commitMessage":"@@@ZOOKEEPER-3188: Improve resilience to network\n\nThis PR is the rebase of the [previous pull request](https://github.com/apache/zookeeper/pull/730).  so all the kudos should go to the original authors...\n\nIn [ZOOKEEPER-3188](https://issues.apache.org/jira/browse/ZOOKEEPER-3188) we add ability to specify several addresses for quorum operations. Also added reconnection attempts if connection to leader lost.\n\nIn this PR I rebased the changes on the current master.  resolving some minor conflicts with:\n- [ZOOKEEPER-3296](https://issues.apache.org/jira/browse/ZOOKEEPER-3296): Explicitly closing the sslsocket when it failed handshake to prevent issue where peers cannot join quorum\n- [ZOOKEEPER-3320](https://issues.apache.org/jira/browse/ZOOKEEPER-3320): Leader election port stop listen when hostname unresolvable for some time\n- [ZOOKEEPER-3385](https://issues.apache.org/jira/browse/ZOOKEEPER-3385): Add admin command to display leader\n- [ZOOKEEPER-3386](https://issues.apache.org/jira/browse/ZOOKEEPER-3386): Add admin command to display voting view\n- [ZOOKEEPER-3398](https://issues.apache.org/jira/browse/ZOOKEEPER-3398): Learner.connectToLeader() may take too long to time-out\n\nI still want to test the feature manually (e.g. using docker containers with multiple virtual networks / interfaces). The steps to the manual test could be recorded in the [google docs](https://docs.google.com/document/d/1iGVwxeHp57qogwfdodCh9b32P2_kOQaJZ2GDo7j36fI/edit?usp=sharing) as well.\n\nAlso I think we could add a few more unit tests where we are using multiple addresses. The current tests are using a single address only.\n\nAlso the Zookeeper documentation needs to be changed (e.g. by a follow-up Jira?) to promote the new feature and the new config format (possibly including also the admin command documentation in relation with [ZOOKEEPER-3386](https://issues.apache.org/jira/browse/ZOOKEEPER-3386) and [ZOOKEEPER-3461](https://issues.apache.org/jira/browse/ZOOKEEPER-3461))\n\nAuthor: Mate Szalay-Beko <szalay.beko.mate@gmail.com>\nAuthor: Mate Szalay-Beko <mszalay@cloudera.com>\n\nReviewers: eolivelli@apache.org.  andor@apache.org\n\nCloses #1048 from symat/ZOOKEEPER-3188 and squashes the following commits:\n\n3c6fc52d7 [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n356882d46 [Mate Szalay-Beko] ZOOKEEPER-3188: document new configuration format for using multiple addresses\n45b6c0fdb [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n4b6bcea48 [Mate Szalay-Beko] ZOOKEEPER-3188: MultiAddress unit tests for Quorum TLS and Kerberos/Digest authentication\n40bc44c23 [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\nf875f5c67 [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n31805e79b [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n0f95678ca [Mate Szalay-Beko] ZOOKEEPER-3188: skip unreachable addresses when Learner connects to Leader\ne232c55da [Mate Szalay-Beko] ZOOKEEPER-3188: fix flaky unit MultiAddress unit test\ne892d8d8e [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n6f2ab755f [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\n2eedf2687 [Mate Szalay-Beko] ZOOKEEPER-3188: fix PR commits; handle case when Leader can not bind to port on startup\n483d2fc9c [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\na5d6bcb97 [Mate Szalay-Beko] ZOOKEEPER-3188: support for dynamic reconfig + add more unit tests\ned31d2ce9 [Mate Szalay-Beko] ZOOKEEPER-3188: better shutdown for executors (following PR comments)\n8713a5bbf [Mate Szalay-Beko] ZOOKEEPER-3188: add fixes for PR comments\n05eae83c0 [Mate Szalay-Beko] Merge remote-tracking branch 'apache/master' into ZOOKEEPER-3188\ne823af4b1 [Mate Szalay-Beko] Merge remote-tracking branch 'origin/master' into ZOOKEEPER-3188\nde7bad2a6 [Mate Szalay-Beko] Merge remote-tracking branch 'origin/master' into ZOOKEEPER-3188\nda98a8da6 [Mate Szalay-Beko] ZOOKEEPER-3188: fix JDK-13 warning\n5bd1f4e2c [Mate Szalay-Beko] ZOOKEEPER-3188: supress spotbugs warning\n42a52a688 [Mate Szalay-Beko] ZOOKEEPER-3188: improve based on code review comments\n6c4220a0d [Mate Szalay-Beko] ZOOKEEPER-3188: fix SendWorker.asyncValidateIfSocketIsStillReachable\n5b22432c1 [Mate Szalay-Beko] ZOOKEEPER-3188: fix LeaderElection to work with multiple election addresses\n7bfbe7e5c [Mate Szalay-Beko] ZOOKEEPER-3188: Improve resilience to network\n","date":"2019-11-29 21:49:13","modifiedFileCount":"26","status":"M","submitter":"Mate Szalay-Beko"}]
