[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testBehindLeader() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        cleanAndInitializeDataDir(qb.s1dir);\n        cleanAndInitializeDataDir(qb.s2dir);\n        cleanAndInitializeDataDir(qb.s3dir);\n        cleanAndInitializeDataDir(qb.s4dir);\n        qb.setupServers();\n        qb.s1.start();\n        qb.s2.start();\n        qb.s3.start();\n        qb.s4.start();\n        Assert.assertTrue(\"Servers didn't come up\", ClientBase.waitForServerUp(qb.hostPort, 10000));\n        qb.s5.start();\n        String hostPort = \"127.0.0.1:\" + qb.s5.getClientPort();\n        Assert.assertFalse(\"Servers came up, but shouldn't have since it's ahead of leader\",\n                ClientBase.waitForServerUp(hostPort, 10000));\n    }\n","date":"2018-10-19 20:39:50","endLine":93,"groupId":"4603","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBehindLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/61/556bf7ee6c9c778e4d2ea11a8f8a983f7ed894.src","preCode":"    public void testBehindLeader() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        cleanAndInitializeDataDir(qb.s1dir);\n        cleanAndInitializeDataDir(qb.s2dir);\n        cleanAndInitializeDataDir(qb.s3dir);\n        cleanAndInitializeDataDir(qb.s4dir);\n        qb.setupServers();\n        qb.s1.start();\n        qb.s2.start();\n        qb.s3.start();\n        qb.s4.start();\n        Assert.assertTrue(\"Servers didn't come up\", ClientBase.waitForServerUp(qb.hostPort, 10000));\n        qb.s5.start();\n        String hostPort = \"127.0.0.1:\" + qb.s5.getClientPort();\n        Assert.assertFalse(\"Servers came up, but shouldn't have since it's ahead of leader\",\n                ClientBase.waitForServerUp(hostPort, 10000));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumZxidSyncTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testLateLogs() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        deleteLogs(qb.s1dir);\n        deleteLogs(qb.s2dir);\n        deleteLogs(qb.s3dir);\n        deleteLogs(qb.s4dir);\n        deleteLogs(qb.s5dir);\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        boolean saw2 = false;\n        for(String child: zk.getChildren(\"/\", false)) {\n            if (child.equals(\"2\")) {\n                saw2 = true;\n            }\n        }\n        zk.close();\n        Assert.assertTrue(\"Didn't see /2 (went back in time)\", saw2);\n    }\n","date":"2018-10-19 20:39:50","endLine":158,"groupId":"113","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLateLogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/61/556bf7ee6c9c778e4d2ea11a8f8a983f7ed894.src","preCode":"    public void testLateLogs() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        deleteLogs(qb.s1dir);\n        deleteLogs(qb.s2dir);\n        deleteLogs(qb.s3dir);\n        deleteLogs(qb.s4dir);\n        deleteLogs(qb.s5dir);\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        boolean saw2 = false;\n        for(String child: zk.getChildren(\"/\", false)) {\n            if (child.equals(\"2\")) {\n                saw2 = true;\n            }\n        }\n        zk.close();\n        Assert.assertTrue(\"Didn't see /2 (went back in time)\", saw2);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumZxidSyncTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testBehindLeader() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        cleanAndInitializeDataDir(qb.s1dir);\n        cleanAndInitializeDataDir(qb.s2dir);\n        cleanAndInitializeDataDir(qb.s3dir);\n        cleanAndInitializeDataDir(qb.s4dir);\n        qb.setupServers();\n        qb.s1.start();\n        qb.s2.start();\n        qb.s3.start();\n        qb.s4.start();\n        assertTrue(\"Servers didn't come up\", ClientBase.waitForServerUp(qb.hostPort, 10000));\n        qb.s5.start();\n        String hostPort = \"127.0.0.1:\" + qb.s5.getClientPort();\n        assertFalse(\"Servers came up, but shouldn't have since it's ahead of leader\", ClientBase.waitForServerUp(hostPort, 10000));\n    }\n","date":"2019-08-17 23:13:15","endLine":96,"groupId":"4603","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBehindLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0c/deb0d182d5dbab59c5ab31cc25e2097a838e18.src","preCode":"    public void testBehindLeader() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        cleanAndInitializeDataDir(qb.s1dir);\n        cleanAndInitializeDataDir(qb.s2dir);\n        cleanAndInitializeDataDir(qb.s3dir);\n        cleanAndInitializeDataDir(qb.s4dir);\n        qb.setupServers();\n        qb.s1.start();\n        qb.s2.start();\n        qb.s3.start();\n        qb.s4.start();\n        Assert.assertTrue(\"Servers didn't come up\", ClientBase.waitForServerUp(qb.hostPort, 10000));\n        qb.s5.start();\n        String hostPort = \"127.0.0.1:\" + qb.s5.getClientPort();\n        Assert.assertFalse(\"Servers came up, but shouldn't have since it's ahead of leader\",\n                ClientBase.waitForServerUp(hostPort, 10000));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumZxidSyncTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testLateLogs() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        deleteLogs(qb.s1dir);\n        deleteLogs(qb.s2dir);\n        deleteLogs(qb.s3dir);\n        deleteLogs(qb.s4dir);\n        deleteLogs(qb.s5dir);\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        boolean saw2 = false;\n        for (String child : zk.getChildren(\"/\", false)) {\n            if (child.equals(\"2\")) {\n                saw2 = true;\n            }\n        }\n        zk.close();\n        assertTrue(\"Didn't see /2 (went back in time)\", saw2);\n    }\n","date":"2019-08-17 23:13:15","endLine":165,"groupId":"113","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLateLogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/0c/deb0d182d5dbab59c5ab31cc25e2097a838e18.src","preCode":"    public void testLateLogs() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        deleteLogs(qb.s1dir);\n        deleteLogs(qb.s2dir);\n        deleteLogs(qb.s3dir);\n        deleteLogs(qb.s4dir);\n        deleteLogs(qb.s5dir);\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }});\n        boolean saw2 = false;\n        for(String child: zk.getChildren(\"/\", false)) {\n            if (child.equals(\"2\")) {\n                saw2 = true;\n            }\n        }\n        zk.close();\n        Assert.assertTrue(\"Didn't see /2 (went back in time)\", saw2);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumZxidSyncTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-09-18 17:20:31","codes":[{"authorDate":"2019-09-18 17:20:31","commitOrder":3,"curCode":"    public void testBehindLeader() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        cleanAndInitializeDataDir(qb.s1dir);\n        cleanAndInitializeDataDir(qb.s2dir);\n        cleanAndInitializeDataDir(qb.s3dir);\n        cleanAndInitializeDataDir(qb.s4dir);\n        qb.setupServers();\n        qb.s1.start();\n        qb.s2.start();\n        qb.s3.start();\n        qb.s4.start();\n        assertTrue(\"Servers didn't come up\", ClientBase.waitForServerUp(qb.hostPort, 10000));\n        qb.s5.start();\n        String hostPort = \"127.0.0.1:\" + qb.s5.getClientPort();\n        assertFalse(\"Servers came up, but shouldn't have since it's ahead of leader\", ClientBase.waitForServerUp(hostPort, 10000));\n    }\n","date":"2019-09-18 17:20:31","endLine":86,"groupId":"2884","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBehindLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/80/d2b9c64bb949cb5c1a8fc7ff3d84b26b26b491.src","preCode":"    public void testBehindLeader() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        cleanAndInitializeDataDir(qb.s1dir);\n        cleanAndInitializeDataDir(qb.s2dir);\n        cleanAndInitializeDataDir(qb.s3dir);\n        cleanAndInitializeDataDir(qb.s4dir);\n        qb.setupServers();\n        qb.s1.start();\n        qb.s2.start();\n        qb.s3.start();\n        qb.s4.start();\n        assertTrue(\"Servers didn't come up\", ClientBase.waitForServerUp(qb.hostPort, 10000));\n        qb.s5.start();\n        String hostPort = \"127.0.0.1:\" + qb.s5.getClientPort();\n        assertFalse(\"Servers came up, but shouldn't have since it's ahead of leader\", ClientBase.waitForServerUp(hostPort, 10000));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumZxidSyncTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2019-09-18 17:20:31","commitOrder":3,"curCode":"    public void testLateLogs() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        deleteLogs(qb.s1dir);\n        deleteLogs(qb.s2dir);\n        deleteLogs(qb.s3dir);\n        deleteLogs(qb.s4dir);\n        deleteLogs(qb.s5dir);\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        boolean saw2 = false;\n        for (String child : zk.getChildren(\"/\", false)) {\n            if (child.equals(\"2\")) {\n                saw2 = true;\n            }\n        }\n        zk.close();\n        assertTrue(\"Didn't see /2 (went back in time)\", saw2);\n    }\n","date":"2019-09-18 17:20:31","endLine":143,"groupId":"2886","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLateLogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/80/d2b9c64bb949cb5c1a8fc7ff3d84b26b26b491.src","preCode":"    public void testLateLogs() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        deleteLogs(qb.s1dir);\n        deleteLogs(qb.s2dir);\n        deleteLogs(qb.s3dir);\n        deleteLogs(qb.s4dir);\n        deleteLogs(qb.s5dir);\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, new Watcher() {\n            public void process(WatchedEvent event) {\n            }\n        });\n        boolean saw2 = false;\n        for (String child : zk.getChildren(\"/\", false)) {\n            if (child.equals(\"2\")) {\n                saw2 = true;\n            }\n        }\n        zk.close();\n        assertTrue(\"Didn't see /2 (went back in time)\", saw2);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumZxidSyncTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"7b8b37617bd86989f94510acac32e7fa94058a6b","commitMessage":"@@@ZOOKEEPER-3523: Replace dummy watcher with a unified singleton\n\nRevisit subclasses of `Watcher` and replace dummy implement with a global singleton `Watcher.DUMMY_WATCHER`.\n\nA followup could be use separated `Watcher` in tests instead of implement `Watcher` for `XXXTests`. It would be better to keep test case \"class\" alone IMO.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Michael Han <hanm@apache.org>.  Enrico Olivelli <eolivelli@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1064 from TisonKun/ZOOKEEPER-3523\n","date":"2019-09-18 17:20:31","modifiedFileCount":"16","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testBehindLeader() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        cleanAndInitializeDataDir(qb.s1dir);\n        cleanAndInitializeDataDir(qb.s2dir);\n        cleanAndInitializeDataDir(qb.s3dir);\n        cleanAndInitializeDataDir(qb.s4dir);\n        qb.setupServers();\n        qb.s1.start();\n        qb.s2.start();\n        qb.s3.start();\n        qb.s4.start();\n        assertTrue(ClientBase.waitForServerUp(qb.hostPort, 10000), \"Servers didn't come up\");\n        qb.s5.start();\n        String hostPort = \"127.0.0.1:\" + qb.s5.getClientPort();\n        assertFalse(ClientBase.waitForServerUp(hostPort, 10000), \"Servers came up, but shouldn't have since it's ahead of leader\");\n    }\n","date":"2020-08-04 21:01:52","endLine":86,"groupId":"10570","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testBehindLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c4/c0bdee747a87828ceeaedeb31369a3e6af8364.src","preCode":"    public void testBehindLeader() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        cleanAndInitializeDataDir(qb.s1dir);\n        cleanAndInitializeDataDir(qb.s2dir);\n        cleanAndInitializeDataDir(qb.s3dir);\n        cleanAndInitializeDataDir(qb.s4dir);\n        qb.setupServers();\n        qb.s1.start();\n        qb.s2.start();\n        qb.s3.start();\n        qb.s4.start();\n        assertTrue(\"Servers didn't come up\", ClientBase.waitForServerUp(qb.hostPort, 10000));\n        qb.s5.start();\n        String hostPort = \"127.0.0.1:\" + qb.s5.getClientPort();\n        assertFalse(\"Servers came up, but shouldn't have since it's ahead of leader\", ClientBase.waitForServerUp(hostPort, 10000));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumZxidSyncTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":4,"curCode":"    public void testLateLogs() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        deleteLogs(qb.s1dir);\n        deleteLogs(qb.s2dir);\n        deleteLogs(qb.s3dir);\n        deleteLogs(qb.s4dir);\n        deleteLogs(qb.s5dir);\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        boolean saw2 = false;\n        for (String child : zk.getChildren(\"/\", false)) {\n            if (child.equals(\"2\")) {\n                saw2 = true;\n            }\n        }\n        zk.close();\n        assertTrue(saw2, \"Didn't see /2 (went back in time)\");\n    }\n","date":"2020-08-04 21:01:52","endLine":143,"groupId":"10570","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testLateLogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/c4/c0bdee747a87828ceeaedeb31369a3e6af8364.src","preCode":"    public void testLateLogs() throws Exception {\n        \r\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        ZooKeeper zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/0\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/1\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        qb.shutdownServers();\n        deleteLogs(qb.s1dir);\n        deleteLogs(qb.s2dir);\n        deleteLogs(qb.s3dir);\n        deleteLogs(qb.s4dir);\n        deleteLogs(qb.s5dir);\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        zk.create(\"/2\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        zk.close();\n        qb.shutdownServers();\n        qb.startServers();\n        ClientBase.waitForServerUp(qb.hostPort, 10000);\n        zk = new ZooKeeper(qb.hostPort, 10000, DummyWatcher.INSTANCE);\n        boolean saw2 = false;\n        for (String child : zk.getChildren(\"/\", false)) {\n            if (child.equals(\"2\")) {\n                saw2 = true;\n            }\n        }\n        zk.close();\n        assertTrue(\"Didn't see /2 (went back in time)\", saw2);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumZxidSyncTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"}]
