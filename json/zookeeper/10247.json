[{"authorTime":"2018-10-05 20:25:43","codes":[{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testTxnLog() throws Exception {\n        long peerZxid;\n        db.txnLog.add(createProposal(2));\n        db.txnLog.add(createProposal(3));\n        db.txnLog.add(createProposal(5));\n        db.txnLog.add(createProposal(6));\n        db.txnLog.add(createProposal(7));\n        db.txnLog.add(createProposal(8));\n        db.txnLog.add(createProposal(9));\n\n        db.lastProcessedZxid = 9;\n        db.committedLog.add(createProposal(6));\n        db.committedLog.add(createProposal(7));\n        db.committedLog.add(createProposal(8));\n\n        \r\n        peerZxid = 4;\n        assertFalse(learnerHandler.syncFollower(peerZxid, db, leader));\n        \r\n        assertOpType(Leader.TRUNC, 3, db.getmaxCommittedLog());\n        \r\n        assertEquals(9, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 5, 6, 7, 8 });\n        reset();\n\n        \r\n        peerZxid = 3;\n        assertFalse(learnerHandler.syncFollower(peerZxid, db, leader));\n        \r\n        assertOpType(Leader.DIFF, db.getmaxCommittedLog(),\n                db.getmaxCommittedLog());\n        \r\n        assertEquals(9, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 5, 6, 7, 8 });\n        reset();\n\n    }\n","date":"2018-10-05 20:25:43","endLine":319,"groupId":"2673","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTxnLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f2/389714b9c3806bca83575221e6d64878869268.src","preCode":"    public void testTxnLog() throws Exception {\n        long peerZxid;\n        db.txnLog.add(createProposal(2));\n        db.txnLog.add(createProposal(3));\n        db.txnLog.add(createProposal(5));\n        db.txnLog.add(createProposal(6));\n        db.txnLog.add(createProposal(7));\n        db.txnLog.add(createProposal(8));\n        db.txnLog.add(createProposal(9));\n\n        db.lastProcessedZxid = 9;\n        db.committedLog.add(createProposal(6));\n        db.committedLog.add(createProposal(7));\n        db.committedLog.add(createProposal(8));\n\n        \r\n        peerZxid = 4;\n        assertFalse(learnerHandler.syncFollower(peerZxid, db, leader));\n        \r\n        assertOpType(Leader.TRUNC, 3, db.getmaxCommittedLog());\n        \r\n        assertEquals(9, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 5, 6, 7, 8 });\n        reset();\n\n        \r\n        peerZxid = 3;\n        assertFalse(learnerHandler.syncFollower(peerZxid, db, leader));\n        \r\n        assertOpType(Leader.DIFF, db.getmaxCommittedLog(),\n                db.getmaxCommittedLog());\n        \r\n        assertEquals(9, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 5, 6, 7, 8 });\n        reset();\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"B"},{"authorDate":"2018-10-05 20:25:43","commitOrder":1,"curCode":"    public void testTxnLogOnly() throws Exception {\n        long peerZxid;\n\n        \r\n        db.lastProcessedZxid = 7;\n        db.txnLog.add(createProposal(2));\n        db.txnLog.add(createProposal(3));\n        db.txnLog.add(createProposal(5));\n        db.txnLog.add(createProposal(6));\n        db.txnLog.add(createProposal(7));\n        db.txnLog.add(createProposal(8));\n\n        \r\n        peerZxid = 4;\n        assertFalse(learnerHandler.syncFollower(peerZxid, db, leader));\n        \r\n        \r\n        assertOpType(Leader.TRUNC, 3, db.lastProcessedZxid);\n        \r\n        assertEquals(7, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 5, 6, 7 });\n        reset();\n\n        \r\n        peerZxid = 2;\n        assertFalse(learnerHandler.syncFollower(peerZxid, db, leader));\n        \r\n        assertOpType(Leader.DIFF, db.lastProcessedZxid, db.lastProcessedZxid);\n        \r\n        assertEquals(9, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 3, 5, 6, 7 });\n        reset();\n\n        \r\n        peerZxid = 1;\n        assertTrue(learnerHandler.syncFollower(peerZxid, db, leader));\n        \r\n        assertEquals(0, learnerHandler.getQueuedPackets().size());\n        reset();\n    }\n","date":"2018-10-05 20:25:43","endLine":390,"groupId":"2054","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTxnLogOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/f2/389714b9c3806bca83575221e6d64878869268.src","preCode":"    public void testTxnLogOnly() throws Exception {\n        long peerZxid;\n\n        \r\n        db.lastProcessedZxid = 7;\n        db.txnLog.add(createProposal(2));\n        db.txnLog.add(createProposal(3));\n        db.txnLog.add(createProposal(5));\n        db.txnLog.add(createProposal(6));\n        db.txnLog.add(createProposal(7));\n        db.txnLog.add(createProposal(8));\n\n        \r\n        peerZxid = 4;\n        assertFalse(learnerHandler.syncFollower(peerZxid, db, leader));\n        \r\n        \r\n        assertOpType(Leader.TRUNC, 3, db.lastProcessedZxid);\n        \r\n        assertEquals(7, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 5, 6, 7 });\n        reset();\n\n        \r\n        peerZxid = 2;\n        assertFalse(learnerHandler.syncFollower(peerZxid, db, leader));\n        \r\n        assertOpType(Leader.DIFF, db.lastProcessedZxid, db.lastProcessedZxid);\n        \r\n        assertEquals(9, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 3, 5, 6, 7 });\n        reset();\n\n        \r\n        peerZxid = 1;\n        assertTrue(learnerHandler.syncFollower(peerZxid, db, leader));\n        \r\n        assertEquals(0, learnerHandler.getQueuedPackets().size());\n        reset();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"B"}],"commitId":"faa7cec71fddfb959a7d67923acffdb67d93c953","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - move java server.  client\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: hanm@apache.org.  andor@apache.org\n\nCloses #633 from nkalmar/ZOOKEEPER-3032 and squashes the following commits:\n\n3f9a0eca [Norbert Kalmar] ZOOKEEPER-3032 fix flaky QuorumPeerMainTest.testLeaderElectionWithDisloyalVoter_stillHasMajority\n27295ed6 [Norbert Kalmar] ZOOKEEPER-3032 - MAVEN MIGRATION - move java server.  client\n","date":"2018-10-05 20:25:43","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2018-12-09 10:16:58","codes":[{"authorDate":"2018-12-09 10:16:58","commitOrder":2,"curCode":"    public void testTxnLog() throws Exception {\n        long peerZxid;\n        db.txnLog.add(createProposal(2));\n        db.txnLog.add(createProposal(3));\n        db.txnLog.add(createProposal(5));\n        db.txnLog.add(createProposal(6));\n        db.txnLog.add(createProposal(7));\n        db.txnLog.add(createProposal(8));\n        db.txnLog.add(createProposal(9));\n\n        db.lastProcessedZxid = 9;\n        db.committedLog.add(createProposal(6));\n        db.committedLog.add(createProposal(7));\n        db.committedLog.add(createProposal(8));\n\n        \r\n        peerZxid = 4;\n        assertFalse(learnerHandler.syncFollower(peerZxid, leader));\n        \r\n        assertOpType(Leader.TRUNC, 3, db.getmaxCommittedLog());\n        \r\n        assertEquals(9, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 5, 6, 7, 8 });\n        reset();\n\n        \r\n        peerZxid = 3;\n        assertFalse(learnerHandler.syncFollower(peerZxid, leader));\n        \r\n        assertOpType(Leader.DIFF, db.getmaxCommittedLog(),\n                db.getmaxCommittedLog());\n        \r\n        assertEquals(9, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 5, 6, 7, 8 });\n        reset();\n\n    }\n","date":"2018-12-09 10:16:58","endLine":319,"groupId":"10247","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTxnLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/1c/d33ec917842b58d578607ca8f19fa6d819c765.src","preCode":"    public void testTxnLog() throws Exception {\n        long peerZxid;\n        db.txnLog.add(createProposal(2));\n        db.txnLog.add(createProposal(3));\n        db.txnLog.add(createProposal(5));\n        db.txnLog.add(createProposal(6));\n        db.txnLog.add(createProposal(7));\n        db.txnLog.add(createProposal(8));\n        db.txnLog.add(createProposal(9));\n\n        db.lastProcessedZxid = 9;\n        db.committedLog.add(createProposal(6));\n        db.committedLog.add(createProposal(7));\n        db.committedLog.add(createProposal(8));\n\n        \r\n        peerZxid = 4;\n        assertFalse(learnerHandler.syncFollower(peerZxid, db, leader));\n        \r\n        assertOpType(Leader.TRUNC, 3, db.getmaxCommittedLog());\n        \r\n        assertEquals(9, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 5, 6, 7, 8 });\n        reset();\n\n        \r\n        peerZxid = 3;\n        assertFalse(learnerHandler.syncFollower(peerZxid, db, leader));\n        \r\n        assertOpType(Leader.DIFF, db.getmaxCommittedLog(),\n                db.getmaxCommittedLog());\n        \r\n        assertEquals(9, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 5, 6, 7, 8 });\n        reset();\n\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"},{"authorDate":"2018-12-09 10:16:58","commitOrder":2,"curCode":"    public void testTxnLogOnly() throws Exception {\n        long peerZxid;\n\n        \r\n        db.lastProcessedZxid = 7;\n        db.txnLog.add(createProposal(2));\n        db.txnLog.add(createProposal(3));\n        db.txnLog.add(createProposal(5));\n        db.txnLog.add(createProposal(6));\n        db.txnLog.add(createProposal(7));\n        db.txnLog.add(createProposal(8));\n\n        \r\n        peerZxid = 4;\n        assertFalse(learnerHandler.syncFollower(peerZxid, leader));\n        \r\n        \r\n        assertOpType(Leader.TRUNC, 3, db.lastProcessedZxid);\n        \r\n        assertEquals(7, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 5, 6, 7 });\n        reset();\n\n        \r\n        peerZxid = 2;\n        assertFalse(learnerHandler.syncFollower(peerZxid, leader));\n        \r\n        assertOpType(Leader.DIFF, db.lastProcessedZxid, db.lastProcessedZxid);\n        \r\n        assertEquals(9, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 3, 5, 6, 7 });\n        reset();\n\n        \r\n        peerZxid = 1;\n        assertTrue(learnerHandler.syncFollower(peerZxid, leader));\n        \r\n        assertEquals(0, learnerHandler.getQueuedPackets().size());\n        reset();\n    }\n","date":"2018-12-09 10:16:58","endLine":391,"groupId":"10247","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTxnLogOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/1c/d33ec917842b58d578607ca8f19fa6d819c765.src","preCode":"    public void testTxnLogOnly() throws Exception {\n        long peerZxid;\n\n        \r\n        db.lastProcessedZxid = 7;\n        db.txnLog.add(createProposal(2));\n        db.txnLog.add(createProposal(3));\n        db.txnLog.add(createProposal(5));\n        db.txnLog.add(createProposal(6));\n        db.txnLog.add(createProposal(7));\n        db.txnLog.add(createProposal(8));\n\n        \r\n        peerZxid = 4;\n        assertFalse(learnerHandler.syncFollower(peerZxid, db, leader));\n        \r\n        \r\n        assertOpType(Leader.TRUNC, 3, db.lastProcessedZxid);\n        \r\n        assertEquals(7, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 5, 6, 7 });\n        reset();\n\n        \r\n        peerZxid = 2;\n        assertFalse(learnerHandler.syncFollower(peerZxid, db, leader));\n        \r\n        assertOpType(Leader.DIFF, db.lastProcessedZxid, db.lastProcessedZxid);\n        \r\n        assertEquals(9, learnerHandler.getQueuedPackets().size());\n        queuedPacketMatches(new long[] { 3, 5, 6, 7 });\n        reset();\n\n        \r\n        peerZxid = 1;\n        assertTrue(learnerHandler.syncFollower(peerZxid, db, leader));\n        \r\n        assertEquals(0, learnerHandler.getQueuedPackets().size());\n        reset();\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"M"}],"commitId":"b2513c114931dc377bac5e1d39e2f81c6e8cf17e","commitMessage":"@@@ZOOKEEPER-3140: Allow Followers to host Observers\n\nCreates a new abstraction.  LearnerMaster.  to represent the portions of the Leader logic that are used in LearnerHandler. Leader implements LearnerMaster and a new class ObserverMaster implements LearnerMaster. Followers have the option of instantiating a ObserverMaster thread when they assume their role and so support Learner traffic.\n\nA new parameter 'observerMasterPort' is used to control which Follower instances host Observers.\n\nAuthor: Brian Nixon <nixon@fb.com>\n\nReviewers: fangmin@apache.org.  hanm@apache.org.  eolivelli@gmail.com\n\nCloses #628 from enixon/learner-master\n","date":"2018-12-09 10:16:58","modifiedFileCount":"21","status":"M","submitter":"Brian Nixon"}]
