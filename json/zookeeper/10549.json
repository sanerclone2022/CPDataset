[{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testQuota() throws IOException,\n        InterruptedException, KeeperException, Exception {\n        final ZooKeeper zk = createClient();\n        final String path = \"/a/b/v\";\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/d\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        ZooKeeperMain.createQuota(zk, path, 5L, 10);\n\n        \r\n        String absolutePath = Quotas.quotaZookeeper + path + \"/\" + Quotas.limitNode;\n        byte[] data = zk.getData(absolutePath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 5L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 10);\n\n        String statPath = Quotas.quotaZookeeper + path + \"/\" + Quotas.statNode;\n        byte[] qdata = zk.getData(statPath, false, new Stat());\n        StatsTrack qst = new StatsTrack(new String(qdata));\n        Assert.assertTrue(\"bytes are set\", qst.getBytes() == 8L);\n        Assert.assertTrue(\"count is set\", qst.getCount() == 2);\n\n        \r\n        stopServer();\n        startServer();\n        stopServer();\n        startServer();\n        ZooKeeperServer server = getServer(serverFactory);\n        Assert.assertNotNull(\"Quota is still set\",\n            server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null);\n    }\n","date":"2018-10-19 20:39:50","endLine":78,"groupId":"347","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuota","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/70/a1486e1fd4032547a17abeec8c100495b68e94.src","preCode":"    public void testQuota() throws IOException,\n        InterruptedException, KeeperException, Exception {\n        final ZooKeeper zk = createClient();\n        final String path = \"/a/b/v\";\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/d\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        ZooKeeperMain.createQuota(zk, path, 5L, 10);\n\n        \r\n        String absolutePath = Quotas.quotaZookeeper + path + \"/\" + Quotas.limitNode;\n        byte[] data = zk.getData(absolutePath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 5L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 10);\n\n        String statPath = Quotas.quotaZookeeper + path + \"/\" + Quotas.statNode;\n        byte[] qdata = zk.getData(statPath, false, new Stat());\n        StatsTrack qst = new StatsTrack(new String(qdata));\n        Assert.assertTrue(\"bytes are set\", qst.getBytes() == 8L);\n        Assert.assertTrue(\"count is set\", qst.getCount() == 2);\n\n        \r\n        stopServer();\n        startServer();\n        stopServer();\n        startServer();\n        ZooKeeperServer server = getServer(serverFactory);\n        Assert.assertNotNull(\"Quota is still set\",\n            server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ZooKeeperQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"},{"authorDate":"2018-10-19 20:39:50","commitOrder":1,"curCode":"    public void testQuotaWithQuorum() throws Exception {\n        ZooKeeper zk = createClient();\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        int i = 0;\n        for (i=0; i < 300;i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        ZooKeeperMain.createQuota(zk, \"/a\", 1000L, 5000);\n        String statPath = Quotas.quotaZookeeper + \"/a\"+ \"/\" + Quotas.statNode;\n        byte[] data = zk.getData(statPath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 1204L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 301);\n        for (i=300; i < 600; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        data = zk.getData(statPath, false, new Stat());\n        st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 2404L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 601);\n    }\n","date":"2018-10-19 20:39:50","endLine":58,"groupId":"709","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testQuotaWithQuorum","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/41/5bb7dbf26caa3d2e0561263c372635ecb92896.src","preCode":"    public void testQuotaWithQuorum() throws Exception {\n        ZooKeeper zk = createClient();\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        int i = 0;\n        for (i=0; i < 300;i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        ZooKeeperMain.createQuota(zk, \"/a\", 1000L, 5000);\n        String statPath = Quotas.quotaZookeeper + \"/a\"+ \"/\" + Quotas.statNode;\n        byte[] data = zk.getData(statPath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 1204L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 301);\n        for (i=300; i < 600; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        data = zk.getData(statPath, false, new Stat());\n        st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 2404L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 601);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"B"}],"commitId":"cb9f303bda9137d1aebe8eff3eab85c8a59f3cdd","commitMessage":"@@@ZOOKEEPER-3032: MAVEN MIGRATION - zookeeper-server\n\nSeparating the java code is not feasible. Moving common and client back to server.\n\nAuthor: Norbert Kalmar <nkalmar@yahoo.com>\n\nReviewers: andor@apache.org\n\nCloses #672 from nkalmar/ZOOKEEPER-3032r\n","date":"2018-10-19 20:39:50","modifiedFileCount":"0","status":"B","submitter":"Norbert Kalmar"},{"authorTime":"2018-10-19 20:39:50","codes":[{"authorDate":"2019-06-07 20:13:24","commitOrder":2,"curCode":"    public void testQuota() throws IOException,\n        InterruptedException, KeeperException, Exception {\n        final ZooKeeper zk = createClient();\n        final String path = \"/a/b/v\";\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/d\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        ZooKeeperMain.createQuota(zk, path, 5L, 10);\n\n        \r\n        String absolutePath = Quotas.quotaZookeeper + path + \"/\" + Quotas.limitNode;\n        byte[] data = zk.getData(absolutePath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 5L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 10);\n\n        String statPath = Quotas.quotaZookeeper + path + \"/\" + Quotas.statNode;\n        byte[] qdata = zk.getData(statPath, false, new Stat());\n        StatsTrack qst = new StatsTrack(new String(qdata));\n        Assert.assertTrue(\"bytes are set\", qst.getBytes() == 8L);\n        Assert.assertTrue(\"count is set\", qst.getCount() == 2);\n\n        \r\n        stopServer();\n        startServer();\n        stopServer();\n        startServer();\n        ZooKeeperServer server = serverFactory.getZooKeeperServer();\n        Assert.assertNotNull(\"Quota is still set\",\n            server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null);\n    }\n","date":"2019-06-07 20:13:24","endLine":78,"groupId":"347","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuota","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d4/d217de199a3eb2676c9d45b0e986a76ed45d67.src","preCode":"    public void testQuota() throws IOException,\n        InterruptedException, KeeperException, Exception {\n        final ZooKeeper zk = createClient();\n        final String path = \"/a/b/v\";\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/d\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        ZooKeeperMain.createQuota(zk, path, 5L, 10);\n\n        \r\n        String absolutePath = Quotas.quotaZookeeper + path + \"/\" + Quotas.limitNode;\n        byte[] data = zk.getData(absolutePath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 5L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 10);\n\n        String statPath = Quotas.quotaZookeeper + path + \"/\" + Quotas.statNode;\n        byte[] qdata = zk.getData(statPath, false, new Stat());\n        StatsTrack qst = new StatsTrack(new String(qdata));\n        Assert.assertTrue(\"bytes are set\", qst.getBytes() == 8L);\n        Assert.assertTrue(\"count is set\", qst.getCount() == 2);\n\n        \r\n        stopServer();\n        startServer();\n        stopServer();\n        startServer();\n        ZooKeeperServer server = getServer(serverFactory);\n        Assert.assertNotNull(\"Quota is still set\",\n            server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ZooKeeperQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2018-10-19 20:39:50","commitOrder":2,"curCode":"    public void testQuotaWithQuorum() throws Exception {\n        ZooKeeper zk = createClient();\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        int i = 0;\n        for (i=0; i < 300;i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        ZooKeeperMain.createQuota(zk, \"/a\", 1000L, 5000);\n        String statPath = Quotas.quotaZookeeper + \"/a\"+ \"/\" + Quotas.statNode;\n        byte[] data = zk.getData(statPath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 1204L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 301);\n        for (i=300; i < 600; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        data = zk.getData(statPath, false, new Stat());\n        st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 2404L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 601);\n    }\n","date":"2018-10-19 20:39:50","endLine":58,"groupId":"709","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testQuotaWithQuorum","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/41/5bb7dbf26caa3d2e0561263c372635ecb92896.src","preCode":"    public void testQuotaWithQuorum() throws Exception {\n        ZooKeeper zk = createClient();\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        int i = 0;\n        for (i=0; i < 300;i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        ZooKeeperMain.createQuota(zk, \"/a\", 1000L, 5000);\n        String statPath = Quotas.quotaZookeeper + \"/a\"+ \"/\" + Quotas.statNode;\n        byte[] data = zk.getData(statPath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 1204L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 301);\n        for (i=300; i < 600; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        data = zk.getData(statPath, false, new Stat());\n        st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 2404L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 601);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"89e7e55811b7115a9155f25cd572520055af00fc","commitMessage":"@@@ZOOKEEPER-3416: Remove redundant ServerCnxnFactoryAccessor.\n\nWe have two ways to access the private zkServer inside ServerCnxnFactory.  and there is really no need to keep maintaining both. We could remove ServerCnxnFactoryAccessor when we added the public accessor for ServerCnxnFactory in ZOOKEEPER-1346.  but we did not.\n\nThe solution is to consolidate all access of the zkServer through the public accessor of ServerCnxnFactory. The end result is cleaner code base and less confusion.\n\nAuthor: Michael Han <lhan@twitter.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>\n\nCloses #969 from hanm/twitter/91216a8821e3aac9ab56f8cc51bd30d425eebae8\n","date":"2019-06-07 20:13:24","modifiedFileCount":"10","status":"M","submitter":"Michael Han"},{"authorTime":"2019-07-17 19:42:32","codes":[{"authorDate":"2019-07-17 19:42:32","commitOrder":3,"curCode":"    public void testQuota() throws IOException,\n        InterruptedException, KeeperException, Exception {\n        final ZooKeeper zk = createClient();\n        final String path = \"/a/b/v\";\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/d\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        SetQuotaCommand.createQuota(zk, path, 5L, 10);\n\n        \r\n        String absolutePath = Quotas.quotaZookeeper + path + \"/\" + Quotas.limitNode;\n        byte[] data = zk.getData(absolutePath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 5L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 10);\n\n        String statPath = Quotas.quotaZookeeper + path + \"/\" + Quotas.statNode;\n        byte[] qdata = zk.getData(statPath, false, new Stat());\n        StatsTrack qst = new StatsTrack(new String(qdata));\n        Assert.assertTrue(\"bytes are set\", qst.getBytes() == 8L);\n        Assert.assertTrue(\"count is set\", qst.getCount() == 2);\n\n        \r\n        stopServer();\n        startServer();\n        stopServer();\n        startServer();\n        ZooKeeperServer server = serverFactory.getZooKeeperServer();\n        Assert.assertNotNull(\"Quota is still set\",\n            server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null);\n    }\n","date":"2019-07-17 19:42:32","endLine":79,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuota","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/8c/18d78aa493865ae4d11cf653314edd5ce71584.src","preCode":"    public void testQuota() throws IOException,\n        InterruptedException, KeeperException, Exception {\n        final ZooKeeper zk = createClient();\n        final String path = \"/a/b/v\";\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/d\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        ZooKeeperMain.createQuota(zk, path, 5L, 10);\n\n        \r\n        String absolutePath = Quotas.quotaZookeeper + path + \"/\" + Quotas.limitNode;\n        byte[] data = zk.getData(absolutePath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 5L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 10);\n\n        String statPath = Quotas.quotaZookeeper + path + \"/\" + Quotas.statNode;\n        byte[] qdata = zk.getData(statPath, false, new Stat());\n        StatsTrack qst = new StatsTrack(new String(qdata));\n        Assert.assertTrue(\"bytes are set\", qst.getBytes() == 8L);\n        Assert.assertTrue(\"count is set\", qst.getCount() == 2);\n\n        \r\n        stopServer();\n        startServer();\n        stopServer();\n        startServer();\n        ZooKeeperServer server = serverFactory.getZooKeeperServer();\n        Assert.assertNotNull(\"Quota is still set\",\n            server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ZooKeeperQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2019-07-17 19:42:32","commitOrder":3,"curCode":"    public void testQuotaWithQuorum() throws Exception {\n        ZooKeeper zk = createClient();\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        int i = 0;\n        for (i=0; i < 300;i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        SetQuotaCommand.createQuota(zk, \"/a\", 1000L, 5000);\n        String statPath = Quotas.quotaZookeeper + \"/a\"+ \"/\" + Quotas.statNode;\n        byte[] data = zk.getData(statPath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 1204L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 301);\n        for (i=300; i < 600; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        data = zk.getData(statPath, false, new Stat());\n        st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 2404L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 601);\n    }\n","date":"2019-07-17 19:42:32","endLine":59,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testQuotaWithQuorum","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/43/91ce95529dfeb3b0cf0813bdaa855910412907.src","preCode":"    public void testQuotaWithQuorum() throws Exception {\n        ZooKeeper zk = createClient();\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        int i = 0;\n        for (i=0; i < 300;i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        ZooKeeperMain.createQuota(zk, \"/a\", 1000L, 5000);\n        String statPath = Quotas.quotaZookeeper + \"/a\"+ \"/\" + Quotas.statNode;\n        byte[] data = zk.getData(statPath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 1204L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 301);\n        for (i=300; i < 600; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        data = zk.getData(statPath, false, new Stat());\n        st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 2404L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 601);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"a6c36b69cc72d7d67e392dab5360007d6f737bef","commitMessage":"@@@ZOOKEEPER-2563: A revisit to setquota\n\n- remove some useless methods in the `ZooKeeperMain.java`\n- cannot set the quota on the path under` /zookeeper/quota`.  because this path is reserved for storing the quota info. if we do something like this:\n`setquota -n 5 /zookeeper/quota`\nwhich will let us only have five chances to use the setquota.  that violates the quota semantics.\n- handle the Exception when users set a quota on the parent/child node.([ZOOKEEPER-2565](https://issues.apache.org/jira/browse/ZOOKEEPER-2565)).\n- more detail in the [ZOOKEEPER-2563](https://issues.apache.org/jira/browse/ZOOKEEPER-2563)\n\nAuthor: maoling <maoling199210191@sina.com>\n\nReviewers: andor@apache.org\n\nCloses #936 from maoling/ZOOKEEPER-2563 and squashes the following commits:\n\n9d46e862c [maoling] strength the doc. especially for the concept:namespaces\n3777359bd [maoling] ZOOKEEPER-2563: A revisit to setquota\n","date":"2019-07-17 19:42:32","modifiedFileCount":"4","status":"M","submitter":"maoling"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":4,"curCode":"    public void testQuota() throws Exception {\n        final ZooKeeper zk = createClient();\n        final String path = \"/a/b/v\";\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/d\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        SetQuotaCommand.createQuota(zk, path, 5L, 10);\n\n        \r\n        String absolutePath = Quotas.quotaZookeeper + path + \"/\" + Quotas.limitNode;\n        byte[] data = zk.getData(absolutePath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        assertTrue(\"bytes are set\", st.getBytes() == 5L);\n        assertTrue(\"num count is set\", st.getCount() == 10);\n\n        String statPath = Quotas.quotaZookeeper + path + \"/\" + Quotas.statNode;\n        byte[] qdata = zk.getData(statPath, false, new Stat());\n        StatsTrack qst = new StatsTrack(new String(qdata));\n        assertTrue(\"bytes are set\", qst.getBytes() == 8L);\n        assertTrue(\"count is set\", qst.getCount() == 2);\n\n        \r\n        stopServer();\n        startServer();\n        stopServer();\n        startServer();\n        ZooKeeperServer server = serverFactory.getZooKeeperServer();\n        assertNotNull(\"Quota is still set\", server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path)\n                                                           != null);\n    }\n","date":"2019-08-17 23:13:15","endLine":75,"groupId":"3722","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuota","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/2e/b2c6caabe7289605da033ff75bdaeb642b66b5.src","preCode":"    public void testQuota() throws IOException,\n        InterruptedException, KeeperException, Exception {\n        final ZooKeeper zk = createClient();\n        final String path = \"/a/b/v\";\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/d\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        SetQuotaCommand.createQuota(zk, path, 5L, 10);\n\n        \r\n        String absolutePath = Quotas.quotaZookeeper + path + \"/\" + Quotas.limitNode;\n        byte[] data = zk.getData(absolutePath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 5L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 10);\n\n        String statPath = Quotas.quotaZookeeper + path + \"/\" + Quotas.statNode;\n        byte[] qdata = zk.getData(statPath, false, new Stat());\n        StatsTrack qst = new StatsTrack(new String(qdata));\n        Assert.assertTrue(\"bytes are set\", qst.getBytes() == 8L);\n        Assert.assertTrue(\"count is set\", qst.getCount() == 2);\n\n        \r\n        stopServer();\n        startServer();\n        stopServer();\n        startServer();\n        ZooKeeperServer server = serverFactory.getZooKeeperServer();\n        Assert.assertNotNull(\"Quota is still set\",\n            server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ZooKeeperQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":4,"curCode":"    public void testQuotaWithQuorum() throws Exception {\n        ZooKeeper zk = createClient();\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        int i = 0;\n        for (i = 0; i < 300; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        SetQuotaCommand.createQuota(zk, \"/a\", 1000L, 5000);\n        String statPath = Quotas.quotaZookeeper + \"/a\" + \"/\" + Quotas.statNode;\n        byte[] data = zk.getData(statPath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        assertTrue(\"bytes are set\", st.getBytes() == 1204L);\n        assertTrue(\"num count is set\", st.getCount() == 301);\n        for (i = 300; i < 600; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        data = zk.getData(statPath, false, new Stat());\n        st = new StatsTrack(new String(data));\n        assertTrue(\"bytes are set\", st.getBytes() == 2404L);\n        assertTrue(\"num count is set\", st.getCount() == 601);\n    }\n","date":"2019-08-17 23:13:15","endLine":55,"groupId":"709","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testQuotaWithQuorum","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/60/25a158a3c24b52be19f5ce8a2e978f3e6e5cac.src","preCode":"    public void testQuotaWithQuorum() throws Exception {\n        ZooKeeper zk = createClient();\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        int i = 0;\n        for (i=0; i < 300;i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        SetQuotaCommand.createQuota(zk, \"/a\", 1000L, 5000);\n        String statPath = Quotas.quotaZookeeper + \"/a\"+ \"/\" + Quotas.statNode;\n        byte[] data = zk.getData(statPath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 1204L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 301);\n        for (i=300; i < 600; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                    CreateMode.PERSISTENT);\n        }\n        data = zk.getData(statPath, false, new Stat());\n        st = new StatsTrack(new String(data));\n        Assert.assertTrue(\"bytes are set\", st.getBytes() == 2404L);\n        Assert.assertTrue(\"num count is set\", st.getCount() == 601);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2020-08-04 21:01:52","codes":[{"authorDate":"2020-08-04 21:01:52","commitOrder":5,"curCode":"    public void testQuota() throws Exception {\n        final ZooKeeper zk = createClient();\n        final String path = \"/a/b/v\";\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/d\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        SetQuotaCommand.createQuota(zk, path, 5L, 10);\n\n        \r\n        String absolutePath = Quotas.quotaZookeeper + path + \"/\" + Quotas.limitNode;\n        byte[] data = zk.getData(absolutePath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        assertTrue(st.getBytes() == 5L, \"bytes are set\");\n        assertTrue(st.getCount() == 10, \"num count is set\");\n\n        String statPath = Quotas.quotaZookeeper + path + \"/\" + Quotas.statNode;\n        byte[] qdata = zk.getData(statPath, false, new Stat());\n        StatsTrack qst = new StatsTrack(new String(qdata));\n        assertTrue(qst.getBytes() == 8L, \"bytes are set\");\n        assertTrue(qst.getCount() == 2, \"count is set\");\n\n        \r\n        stopServer();\n        startServer();\n        stopServer();\n        startServer();\n        ZooKeeperServer server = serverFactory.getZooKeeperServer();\n        assertNotNull(server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null, \"Quota is still set\");\n    }\n","date":"2020-08-04 21:01:52","endLine":74,"groupId":"3722","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuota","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/99/a595f42a1606b73ec400d2bb271cebf2dd45a1.src","preCode":"    public void testQuota() throws Exception {\n        final ZooKeeper zk = createClient();\n        final String path = \"/a/b/v\";\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/d\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        SetQuotaCommand.createQuota(zk, path, 5L, 10);\n\n        \r\n        String absolutePath = Quotas.quotaZookeeper + path + \"/\" + Quotas.limitNode;\n        byte[] data = zk.getData(absolutePath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        assertTrue(\"bytes are set\", st.getBytes() == 5L);\n        assertTrue(\"num count is set\", st.getCount() == 10);\n\n        String statPath = Quotas.quotaZookeeper + path + \"/\" + Quotas.statNode;\n        byte[] qdata = zk.getData(statPath, false, new Stat());\n        StatsTrack qst = new StatsTrack(new String(qdata));\n        assertTrue(\"bytes are set\", qst.getBytes() == 8L);\n        assertTrue(\"count is set\", qst.getCount() == 2);\n\n        \r\n        stopServer();\n        startServer();\n        stopServer();\n        startServer();\n        ZooKeeperServer server = serverFactory.getZooKeeperServer();\n        assertNotNull(\"Quota is still set\", server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path)\n                                                           != null);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ZooKeeperQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2020-08-04 21:01:52","commitOrder":5,"curCode":"    public void testQuotaWithQuorum() throws Exception {\n        ZooKeeper zk = createClient();\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        int i = 0;\n        for (i = 0; i < 300; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        SetQuotaCommand.createQuota(zk, \"/a\", 1000L, 5000);\n        String statPath = Quotas.quotaZookeeper + \"/a\" + \"/\" + Quotas.statNode;\n        byte[] data = zk.getData(statPath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        assertTrue(st.getBytes() == 1204L, \"bytes are set\");\n        assertTrue(st.getCount() == 301, \"num count is set\");\n        for (i = 300; i < 600; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        data = zk.getData(statPath, false, new Stat());\n        st = new StatsTrack(new String(data));\n        assertTrue(st.getBytes() == 2404L, \"bytes are set\");\n        assertTrue(st.getCount() == 601, \"num count is set\");\n    }\n","date":"2020-08-04 21:01:52","endLine":55,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testQuotaWithQuorum","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/2e/ed9d3bf5a6f9074aa26ec4f707d09521ce8bba.src","preCode":"    public void testQuotaWithQuorum() throws Exception {\n        ZooKeeper zk = createClient();\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        int i = 0;\n        for (i = 0; i < 300; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        SetQuotaCommand.createQuota(zk, \"/a\", 1000L, 5000);\n        String statPath = Quotas.quotaZookeeper + \"/a\" + \"/\" + Quotas.statNode;\n        byte[] data = zk.getData(statPath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        assertTrue(\"bytes are set\", st.getBytes() == 1204L);\n        assertTrue(\"num count is set\", st.getCount() == 301);\n        for (i = 300; i < 600; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        data = zk.getData(statPath, false, new Stat());\n        st = new StatsTrack(new String(data));\n        assertTrue(\"bytes are set\", st.getBytes() == 2404L);\n        assertTrue(\"num count is set\", st.getCount() == 601);\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"c42c8c94085ed1d94a22158fbdfe2945118a82bc","commitMessage":"@@@ZOOKEEPER-3872: Upgrade jUnit in ZooKeeper-server\n\nSub-task of ZOOKEEPER-3732.  updating jUnit to 5.6.2 in zookeeper-server sub-component.\n\nChange-Id: I1fc2a7f860eae0f1d285cb278f6eca7a3b947695\n\nAuthor: Tamas Penzes <tamaas@cloudera.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1417 from tamaashu/ZOOKEEPER-3872\n","date":"2020-08-04 21:01:52","modifiedFileCount":"303","status":"M","submitter":"Tamas Penzes"},{"authorTime":"2021-01-19 16:05:37","codes":[{"authorDate":"2021-01-19 16:05:37","commitOrder":6,"curCode":"    public void testQuota() throws Exception {\n\n        final String path = \"/a/b/v\";\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/d\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        StatsTrack quota = new StatsTrack();\n        quota.setCount(4);\n        quota.setCountHardLimit(4);\n        quota.setBytes(9L);\n        quota.setByteHardLimit(15L);\n        SetQuotaCommand.createQuota(zk, path, quota);\n\n        \r\n        String absolutePath = Quotas.limitPath(path);\n        byte[] data = zk.getData(absolutePath, false, new Stat());\n        StatsTrack st = new StatsTrack(data);\n        assertTrue(st.getBytes() == 9L, \"bytes are set\");\n        assertTrue(st.getByteHardLimit() == 15L, \"byte hard limit is set\");\n        assertTrue(st.getCount() == 4, \"num count is set\");\n        assertTrue(st.getCountHardLimit() == 4, \"count hard limit is set\");\n\n        \r\n        OldStatsTrack ost = new OldStatsTrack(new String(data));\n        assertTrue(ost.getBytes() == 9L, \"bytes are set\");\n        assertTrue(ost.getCount() == 4, \"num count is set\");\n\n        String statPath = Quotas.statPath(path);\n        byte[] qdata = zk.getData(statPath, false, new Stat());\n        StatsTrack qst = new StatsTrack(qdata);\n        assertTrue(qst.getBytes() == 8L, \"bytes are set\");\n        assertTrue(qst.getCount() == 2, \"count is set\");\n\n        \r\n        stopServer();\n        startServer();\n        stopServer();\n        startServer();\n        ZooKeeperServer server = serverFactory.getZooKeeperServer();\n        assertNotNull(server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null, \"Quota is still set\");\n    }\n","date":"2021-01-19 16:05:37","endLine":112,"groupId":"10549","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuota","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/67/b524accefc3a62d31f9a1fd16a61a158d76225.src","preCode":"    public void testQuota() throws Exception {\n        final ZooKeeper zk = createClient();\n        final String path = \"/a/b/v\";\n        \r\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\n        zk.create(\"/a/b/v/d\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        SetQuotaCommand.createQuota(zk, path, 5L, 10);\n\n        \r\n        String absolutePath = Quotas.quotaZookeeper + path + \"/\" + Quotas.limitNode;\n        byte[] data = zk.getData(absolutePath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        assertTrue(st.getBytes() == 5L, \"bytes are set\");\n        assertTrue(st.getCount() == 10, \"num count is set\");\n\n        String statPath = Quotas.quotaZookeeper + path + \"/\" + Quotas.statNode;\n        byte[] qdata = zk.getData(statPath, false, new Stat());\n        StatsTrack qst = new StatsTrack(new String(qdata));\n        assertTrue(qst.getBytes() == 8L, \"bytes are set\");\n        assertTrue(qst.getCount() == 2, \"count is set\");\n\n        \r\n        stopServer();\n        startServer();\n        stopServer();\n        startServer();\n        ZooKeeperServer server = serverFactory.getZooKeeperServer();\n        assertNotNull(server.getZKDatabase().getDataTree().getMaxPrefixWithQuota(path) != null, \"Quota is still set\");\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/ZooKeeperQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2021-01-19 16:05:37","commitOrder":6,"curCode":"    public void testQuotaWithQuorum() throws Exception {\n        ZooKeeper zk = createClient();\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        int i = 0;\n        for (i = 0; i < 300; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        StatsTrack quota = new StatsTrack();\n        quota.setCount(1000);\n        quota.setBytes(5000);\n        SetQuotaCommand.createQuota(zk, \"/a\", quota);\n        String statPath = Quotas.statPath(\"/a\");\n        byte[] data = zk.getData(statPath, false, new Stat());\n        StatsTrack st = new StatsTrack(data);\n        assertTrue(st.getBytes() == 1204L, \"bytes are set\");\n        assertTrue(st.getCount() == 301, \"num count is set\");\n        for (i = 300; i < 600; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        data = zk.getData(statPath, false, new Stat());\n        st = new StatsTrack(data);\n        assertTrue(st.getBytes() == 2404L, \"bytes are set\");\n        assertTrue(st.getCount() == 601, \"num count is set\");\n    }\n","date":"2021-01-19 16:05:37","endLine":59,"groupId":"10549","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testQuotaWithQuorum","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/ac/6319be1bffa6503bfd42bd4b665f1ce758ca3a.src","preCode":"    public void testQuotaWithQuorum() throws Exception {\n        ZooKeeper zk = createClient();\n        zk.setData(\"/\", \"some\".getBytes(), -1);\n        zk.create(\"/a\", \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        int i = 0;\n        for (i = 0; i < 300; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        SetQuotaCommand.createQuota(zk, \"/a\", 1000L, 5000);\n        String statPath = Quotas.quotaZookeeper + \"/a\" + \"/\" + Quotas.statNode;\n        byte[] data = zk.getData(statPath, false, new Stat());\n        StatsTrack st = new StatsTrack(new String(data));\n        assertTrue(st.getBytes() == 1204L, \"bytes are set\");\n        assertTrue(st.getCount() == 301, \"num count is set\");\n        for (i = 300; i < 600; i++) {\n            zk.create(\"/a/\" + i, \"some\".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        data = zk.getData(statPath, false, new Stat());\n        st = new StatsTrack(new String(data));\n        assertTrue(st.getBytes() == 2404L, \"bytes are set\");\n        assertTrue(st.getCount() == 601, \"num count is set\");\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/QuorumQuotaTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"190a227aa9d4655ebfe6ba9f5c2da426da8c5d98","commitMessage":"@@@ZOOKEEPER-3301: Enforce the quota limit\n\n- Thanks for the original work from ZOOKEEPER-1383.  ZOOKEEPER-2593.  ZOOKEEPER-451.  especially the work from ZOOKEEPER-1383 contributed by [Thawan Kooburat](https://issues.apache.org/jira/secure/ViewProfile.jspa?name=thawan)(I also sign off his name in the commit message) which also implemented the very valuable throughput quota.In the further.  we will also do this.\n- `zookeeper.enforeQuota`. When enabled and the client exceeds the total bytes or children count hard quota under a znode.  the server will reject the request and reply the client a `QuotaExceededException` by force. The default value is: false.\n- the checkQuota involves the `create()` and `setData()` api.  not including the `delete()`.\n- When users set the quota which's less than the existing stats.  we give a thoughtful warning info.\n- the following code in the StatsTrack has a bad augmentability:\n\n  >             if (split.length != 2) {\n  >                 throw new IllegalArgumentException(\"invalid string \" + stats);\n  >             }\n\n   we do a trick to solve it for the expansibility.  but we will get a little strange quota info(`Output quota for /c2 count=-1. bytes=-1=;byteHardLimit=-1;countHardLimit=5`) when using `listquota`. some UTs has covered it.\n- the logic about `checkQuota` should be put in the `PrepRequestProcessor`.  other than `DataTree`.\n  we will get the following two negative effects if putting `checkQuota` in the `DataTree`:\n  - 1. When the write request has exceeded the quota.  the corresponding transaction log will load into disk successfully.It's not good.  although it has any data inconsistency issue.  because when the server restart.  so long as the transaction logs are applied in the same order.  the exceeded nodes will not be applied into the state machine.\n  - 2. the client will be blocking and waiting for the response.  because when throwing `QuotaExceededException` in the the `DataTree`.  the` rc.stat` will be `null` and `BinaryOutputArchive#writeRecord` will throw `NPE`.\n  - 3. Overall.  the pre-check about the write request should be done in the `PrepRequestProcessor`(at least before `SyncRequestProcessor`)(Look at an example from `checkACL()`)\n- more detail in the [ZOOKEEPER-3301](https://issues.apache.org/jira/browse/ZOOKEEPER-3301).\n- [Added in 2020-02-25] use `RateLogger` to replace `LOG` to avoid quota exceed logs flooding the disk\n- A `TODO` improvement is: only users have admin permission can write to `/zookeeper/quota`(just like `/zookeeper/config`) to avoid some users' misoperation\n\nAuthor: maoling <maoling199210191@sina.com>\n\nReviewers: Mate Szalay-Beko <symat@apache.org>.  Damien Diederen <ddiederen@apache.org>.  Enrico Olivelli <eolivelli@apache.org>.  Michael Han <hanm@apache.org>\n\nCloses #934 from maoling/ZOOKEEPER-3301\n","date":"2021-01-19 16:05:37","modifiedFileCount":"14","status":"M","submitter":"maoling"}]
