[{"authorTime":"2019-07-09 05:26:11","codes":[{"authorDate":"2019-07-09 05:26:11","commitOrder":1,"curCode":"    public void testRequestThrottler() throws Exception {\n        ServerMetrics.getMetrics().resetAll();\n\n        \r\n        RequestThrottler.setMaxRequests(2);\n\n        RequestThrottler.setStallTime(STALL_TIME);\n        RequestThrottler.setDropStaleRequests(false);\n\n        \r\n        resumeProcess = new CountDownLatch(1);\n        submitted = new CountDownLatch(TOTAL_REQUESTS);\n        entered = new CountDownLatch(TOTAL_REQUESTS);\n\n        \r\n        for (int i =0; i < TOTAL_REQUESTS; i++) {\n            zk.create(\"/request_throttle_test- \" + i , (\"/request_throttle_test- \" + i).getBytes(),\n                    ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, (rc, path, ctx, name) -> {}, null);\n        }\n\n        \r\n        submitted.await(5, TimeUnit.SECONDS);\n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n\n        \r\n        Assert.assertEquals(2L, (long)metrics.get(\"prep_processor_request_queued\"));\n        Assert.assertEquals(1L, (long)metrics.get(\"request_throttle_wait_count\"));\n\n        \r\n        \r\n        resumeProcess.countDown();\n        entered.await(STALL_TIME, TimeUnit.MILLISECONDS);\n\n        metrics = MetricsUtils.currentServerMetrics();\n        Assert.assertEquals(TOTAL_REQUESTS, (long)metrics.get(\"prep_processor_request_queued\"));\n    }\n","date":"2019-07-09 05:26:11","endLine":193,"groupId":"3979","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestThrottler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/9e/ee9269c6eee99022e8c0a9ee2c6ef4a4879204.src","preCode":"    public void testRequestThrottler() throws Exception {\n        ServerMetrics.getMetrics().resetAll();\n\n        \r\n        RequestThrottler.setMaxRequests(2);\n\n        RequestThrottler.setStallTime(STALL_TIME);\n        RequestThrottler.setDropStaleRequests(false);\n\n        \r\n        resumeProcess = new CountDownLatch(1);\n        submitted = new CountDownLatch(TOTAL_REQUESTS);\n        entered = new CountDownLatch(TOTAL_REQUESTS);\n\n        \r\n        for (int i =0; i < TOTAL_REQUESTS; i++) {\n            zk.create(\"/request_throttle_test- \" + i , (\"/request_throttle_test- \" + i).getBytes(),\n                    ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, (rc, path, ctx, name) -> {}, null);\n        }\n\n        \r\n        submitted.await(5, TimeUnit.SECONDS);\n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n\n        \r\n        Assert.assertEquals(2L, (long)metrics.get(\"prep_processor_request_queued\"));\n        Assert.assertEquals(1L, (long)metrics.get(\"request_throttle_wait_count\"));\n\n        \r\n        \r\n        resumeProcess.countDown();\n        entered.await(STALL_TIME, TimeUnit.MILLISECONDS);\n\n        metrics = MetricsUtils.currentServerMetrics();\n        Assert.assertEquals(TOTAL_REQUESTS, (long)metrics.get(\"prep_processor_request_queued\"));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"B"},{"authorDate":"2019-07-09 05:26:11","commitOrder":1,"curCode":"    public void testDropStaleRequests() throws Exception {\n        ServerMetrics.getMetrics().resetAll();\n\n        \r\n        RequestThrottler.setMaxRequests(2);\n\n        RequestThrottler.setStallTime(STALL_TIME);\n\n        RequestThrottler.setDropStaleRequests(true);\n\n        \r\n        resumeProcess = new CountDownLatch(1);\n        submitted = new CountDownLatch(TOTAL_REQUESTS);\n\n        \r\n        for (int i=0; i<TOTAL_REQUESTS; i++) {\n            zk.create(\"/request_throttle_test- \" + i , (\"/request_throttle_test- \" + i).getBytes(),\n                    ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, (rc, path, ctx, name) -> {}, null);\n        }\n\n        \r\n        submitted.await(5, TimeUnit.SECONDS);\n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n\n        \r\n        Assert.assertEquals(2L, (long)metrics.get(\"prep_processor_request_queued\"));\n        Assert.assertEquals(1L, (long)metrics.get(\"request_throttle_wait_count\"));\n\n        for (ServerCnxn cnxn : f.cnxns){\n            cnxn.setStale();\n        }\n        zk = null;\n\n        resumeProcess.countDown();\n        LOG.info(\"raise the latch\");\n\n        while (zks.getInflight() > 0) {\n            Thread.sleep(50);\n        }\n\n        \r\n        \r\n        metrics = MetricsUtils.currentServerMetrics();\n        Assert.assertEquals(2L, (long)metrics.get(\"prep_processor_request_queued\"));\n        Assert.assertEquals(1, (long)metrics.get(\"stale_requests_dropped\"));\n    }\n","date":"2019-07-09 05:26:11","endLine":241,"groupId":"1442","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropStaleRequests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/9e/ee9269c6eee99022e8c0a9ee2c6ef4a4879204.src","preCode":"    public void testDropStaleRequests() throws Exception {\n        ServerMetrics.getMetrics().resetAll();\n\n        \r\n        RequestThrottler.setMaxRequests(2);\n\n        RequestThrottler.setStallTime(STALL_TIME);\n\n        RequestThrottler.setDropStaleRequests(true);\n\n        \r\n        resumeProcess = new CountDownLatch(1);\n        submitted = new CountDownLatch(TOTAL_REQUESTS);\n\n        \r\n        for (int i=0; i<TOTAL_REQUESTS; i++) {\n            zk.create(\"/request_throttle_test- \" + i , (\"/request_throttle_test- \" + i).getBytes(),\n                    ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, (rc, path, ctx, name) -> {}, null);\n        }\n\n        \r\n        submitted.await(5, TimeUnit.SECONDS);\n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n\n        \r\n        Assert.assertEquals(2L, (long)metrics.get(\"prep_processor_request_queued\"));\n        Assert.assertEquals(1L, (long)metrics.get(\"request_throttle_wait_count\"));\n\n        for (ServerCnxn cnxn : f.cnxns){\n            cnxn.setStale();\n        }\n        zk = null;\n\n        resumeProcess.countDown();\n        LOG.info(\"raise the latch\");\n\n        while (zks.getInflight() > 0) {\n            Thread.sleep(50);\n        }\n\n        \r\n        \r\n        metrics = MetricsUtils.currentServerMetrics();\n        Assert.assertEquals(2L, (long)metrics.get(\"prep_processor_request_queued\"));\n        Assert.assertEquals(1, (long)metrics.get(\"stale_requests_dropped\"));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"B"}],"commitId":"7b3de52cdb15068aa343879ae283f4e456c68f39","commitMessage":"@@@ZOOKEEPER-3243: Add server-side request throttling\n\nAuthor: Jie Huang <jiehuang@fb.com>\nAuthor: Joseph Blomstedt <jdb@fb.com>\n\nReviewers: Michael Han <hanm@apache.org>\n\nCloses #986 from jhuan31/ZOOKEEPER-3243\n","date":"2019-07-09 05:26:11","modifiedFileCount":"9","status":"B","submitter":"Jie Huang"},{"authorTime":"2019-08-17 23:13:15","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testRequestThrottler() throws Exception {\n        ServerMetrics.getMetrics().resetAll();\n\n        \r\n        RequestThrottler.setMaxRequests(2);\n\n        RequestThrottler.setStallTime(STALL_TIME);\n        RequestThrottler.setDropStaleRequests(false);\n\n        \r\n        resumeProcess = new CountDownLatch(1);\n        submitted = new CountDownLatch(TOTAL_REQUESTS);\n        entered = new CountDownLatch(TOTAL_REQUESTS);\n\n        \r\n        for (int i = 0; i < TOTAL_REQUESTS; i++) {\n            zk.create(\"/request_throttle_test- \" + i, (\"/request_throttle_test- \"\n                                                               + i).getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, (rc, path, ctx, name) -> {\n            }, null);\n        }\n\n        \r\n        submitted.await(5, TimeUnit.SECONDS);\n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n\n        \r\n        assertEquals(2L, (long) metrics.get(\"prep_processor_request_queued\"));\n        assertEquals(1L, (long) metrics.get(\"request_throttle_wait_count\"));\n\n        \r\n        \r\n        resumeProcess.countDown();\n        entered.await(STALL_TIME, TimeUnit.MILLISECONDS);\n\n        metrics = MetricsUtils.currentServerMetrics();\n        assertEquals(TOTAL_REQUESTS, (long) metrics.get(\"prep_processor_request_queued\"));\n    }\n","date":"2019-08-17 23:13:15","endLine":190,"groupId":"1035","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestThrottler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/db/40d86fdbced5a8e31ee37dc8d57dce9adfc2d8.src","preCode":"    public void testRequestThrottler() throws Exception {\n        ServerMetrics.getMetrics().resetAll();\n\n        \r\n        RequestThrottler.setMaxRequests(2);\n\n        RequestThrottler.setStallTime(STALL_TIME);\n        RequestThrottler.setDropStaleRequests(false);\n\n        \r\n        resumeProcess = new CountDownLatch(1);\n        submitted = new CountDownLatch(TOTAL_REQUESTS);\n        entered = new CountDownLatch(TOTAL_REQUESTS);\n\n        \r\n        for (int i =0; i < TOTAL_REQUESTS; i++) {\n            zk.create(\"/request_throttle_test- \" + i , (\"/request_throttle_test- \" + i).getBytes(),\n                    ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, (rc, path, ctx, name) -> {}, null);\n        }\n\n        \r\n        submitted.await(5, TimeUnit.SECONDS);\n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n\n        \r\n        Assert.assertEquals(2L, (long)metrics.get(\"prep_processor_request_queued\"));\n        Assert.assertEquals(1L, (long)metrics.get(\"request_throttle_wait_count\"));\n\n        \r\n        \r\n        resumeProcess.countDown();\n        entered.await(STALL_TIME, TimeUnit.MILLISECONDS);\n\n        metrics = MetricsUtils.currentServerMetrics();\n        Assert.assertEquals(TOTAL_REQUESTS, (long)metrics.get(\"prep_processor_request_queued\"));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2019-08-17 23:13:15","commitOrder":2,"curCode":"    public void testDropStaleRequests() throws Exception {\n        ServerMetrics.getMetrics().resetAll();\n\n        \r\n        RequestThrottler.setMaxRequests(2);\n\n        RequestThrottler.setStallTime(STALL_TIME);\n\n        RequestThrottler.setDropStaleRequests(true);\n\n        \r\n        resumeProcess = new CountDownLatch(1);\n        submitted = new CountDownLatch(TOTAL_REQUESTS);\n\n        \r\n        for (int i = 0; i < TOTAL_REQUESTS; i++) {\n            zk.create(\"/request_throttle_test- \" + i, (\"/request_throttle_test- \"\n                                                               + i).getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, (rc, path, ctx, name) -> {\n            }, null);\n        }\n\n        \r\n        submitted.await(5, TimeUnit.SECONDS);\n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n\n        \r\n        assertEquals(2L, (long) metrics.get(\"prep_processor_request_queued\"));\n        assertEquals(1L, (long) metrics.get(\"request_throttle_wait_count\"));\n\n        for (ServerCnxn cnxn : f.cnxns) {\n            cnxn.setStale();\n        }\n        zk = null;\n\n        resumeProcess.countDown();\n        LOG.info(\"raise the latch\");\n\n        while (zks.getInflight() > 0) {\n            Thread.sleep(50);\n        }\n\n        \r\n        \r\n        metrics = MetricsUtils.currentServerMetrics();\n        assertEquals(2L, (long) metrics.get(\"prep_processor_request_queued\"));\n        assertEquals(1, (long) metrics.get(\"stale_requests_dropped\"));\n    }\n","date":"2019-08-17 23:13:15","endLine":239,"groupId":"1035","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropStaleRequests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/db/40d86fdbced5a8e31ee37dc8d57dce9adfc2d8.src","preCode":"    public void testDropStaleRequests() throws Exception {\n        ServerMetrics.getMetrics().resetAll();\n\n        \r\n        RequestThrottler.setMaxRequests(2);\n\n        RequestThrottler.setStallTime(STALL_TIME);\n\n        RequestThrottler.setDropStaleRequests(true);\n\n        \r\n        resumeProcess = new CountDownLatch(1);\n        submitted = new CountDownLatch(TOTAL_REQUESTS);\n\n        \r\n        for (int i=0; i<TOTAL_REQUESTS; i++) {\n            zk.create(\"/request_throttle_test- \" + i , (\"/request_throttle_test- \" + i).getBytes(),\n                    ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, (rc, path, ctx, name) -> {}, null);\n        }\n\n        \r\n        submitted.await(5, TimeUnit.SECONDS);\n        Map<String, Object> metrics = MetricsUtils.currentServerMetrics();\n\n        \r\n        Assert.assertEquals(2L, (long)metrics.get(\"prep_processor_request_queued\"));\n        Assert.assertEquals(1L, (long)metrics.get(\"request_throttle_wait_count\"));\n\n        for (ServerCnxn cnxn : f.cnxns){\n            cnxn.setStale();\n        }\n        zk = null;\n\n        resumeProcess.countDown();\n        LOG.info(\"raise the latch\");\n\n        while (zks.getInflight() > 0) {\n            Thread.sleep(50);\n        }\n\n        \r\n        \r\n        metrics = MetricsUtils.currentServerMetrics();\n        Assert.assertEquals(2L, (long)metrics.get(\"prep_processor_request_queued\"));\n        Assert.assertEquals(1, (long)metrics.get(\"stale_requests_dropped\"));\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"}]
