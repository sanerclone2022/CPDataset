[{"authorTime":"2019-01-15 02:38:53","codes":[{"authorDate":"2018-10-19 20:39:50","commitOrder":2,"curCode":"    public static void ensureNone(String... expectedNames)\n        throws IOException, InterruptedException\n    {\n        Set<ObjectName> beans;\n        int nTry = 0;\n        boolean foundUnexpected = false;\n        String unexpectedName = \"\";\n        do {\n            if (nTry++ > 0) {\n                Thread.sleep(100);\n            }\n            try {\n                beans = conn().queryNames(\n                        new ObjectName(CommonNames.DOMAIN + \":*\"), null);\n            } catch (MalformedObjectNameException e) {\n                throw new RuntimeException(e);\n            }\n  \n            foundUnexpected = false; \n            for (String name : expectedNames) {\n                for (ObjectName bean : beans) {\n                    if (bean.toString().contains(name)) {\n                        LOG.info(\"didntexpect:\" + name);\n                        foundUnexpected = true;\n                        unexpectedName = name + \" \" + bean.toString();\n                        break;\n                    }\n                }\n                if (foundUnexpected) {\n                    break;\n                }\n            }\n        } while ((foundUnexpected) && (nTry < 600));\n        if (foundUnexpected) {\n            LOG.info(\"List of all beans follows:\");\n            for (ObjectName bean : beans) {\n                LOG.info(\"bean:\" + bean.toString());\n            }\n            Assert.fail(unexpectedName);\n        }\n    }\n","date":"2018-10-19 20:39:50","endLine":195,"groupId":"2530","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureNone","params":"(String...expectedNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/4e/dcc0eb12300ca2c49699aa706eeae383132ce4.src","preCode":"    public static void ensureNone(String... expectedNames)\n        throws IOException, InterruptedException\n    {\n        Set<ObjectName> beans;\n        int nTry = 0;\n        boolean foundUnexpected = false;\n        String unexpectedName = \"\";\n        do {\n            if (nTry++ > 0) {\n                Thread.sleep(100);\n            }\n            try {\n                beans = conn().queryNames(\n                        new ObjectName(CommonNames.DOMAIN + \":*\"), null);\n            } catch (MalformedObjectNameException e) {\n                throw new RuntimeException(e);\n            }\n  \n            foundUnexpected = false; \n            for (String name : expectedNames) {\n                for (ObjectName bean : beans) {\n                    if (bean.toString().contains(name)) {\n                        LOG.info(\"didntexpect:\" + name);\n                        foundUnexpected = true;\n                        unexpectedName = name + \" \" + bean.toString();\n                        break;\n                    }\n                }\n                if (foundUnexpected) {\n                    break;\n                }\n            }\n        } while ((foundUnexpected) && (nTry < 600));\n        if (foundUnexpected) {\n            LOG.info(\"List of all beans follows:\");\n            for (ObjectName bean : beans) {\n                LOG.info(\"bean:\" + bean.toString());\n            }\n            Assert.fail(unexpectedName);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/JMXEnv.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"NB"},{"authorDate":"2019-01-15 02:38:53","commitOrder":2,"curCode":"    public static List<ObjectName> getServerBeans() throws IOException {\n        ArrayList<ObjectName> serverBeans = new ArrayList<>();\n        Set<ObjectName> beans;\n        try {\n            beans = conn().queryNames(\n                    new ObjectName(CommonNames.DOMAIN + \":*\"), null);\n        } catch (MalformedObjectNameException e) {\n            throw new RuntimeException(e);\n        }\n        for (ObjectName bean : beans) {\n            String name = bean.toString();\n            LOG.info(\"bean:\" + name);\n            for (Pattern pattern : beanPatterns) {\n                if (pattern.matcher(name).find()) {\n                    serverBeans.add(bean);\n                }\n            }\n        }\n        return serverBeans;\n    }\n","date":"2019-01-15 02:38:53","endLine":358,"groupId":"4142","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getServerBeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/d8/a923a865ad4a320e1f2e3fc729a71fe3800948.src","preCode":"    public static List<ObjectName> getServerBeans() throws IOException {\n        ArrayList<ObjectName> serverBeans = new ArrayList<>();\n        Set<ObjectName> beans;\n        try {\n            beans = conn().queryNames(\n                    new ObjectName(CommonNames.DOMAIN + \":*\"), null);\n        } catch (MalformedObjectNameException e) {\n            throw new RuntimeException(e);\n        }\n        for (ObjectName bean : beans) {\n            String name = bean.toString();\n            LOG.info(\"bean:\" + name);\n            for (Pattern pattern : beanPatterns) {\n                if (pattern.matcher(name).find()) {\n                    serverBeans.add(bean);\n                }\n            }\n        }\n        return serverBeans;\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/JMXEnv.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"B"}],"commitId":"9828685d20bc99272ec0689a590d27b0f8f7ebb6","commitMessage":"@@@ZOOKEEPER-3180: Add response cache to improve the throughput of read ?\n\n?heavy traffic\n\nIntroduces a ResponseCache that interacts with ServerCnxn to cache the serialized response for getData requests.\n\nAuthor: Brian Nixon <nixon@fb.com>\n\nReviewers: hanm@apache.org.  fangmin@apache.org.  andor@apache.org\n\nCloses #684 from enixon/response-cache and squashes the following commits:\n\nc264b88f8 [Brian Nixon] fix the types in ResponseCacheTest::checkCacheStatus to match the recent change\n5e36b396a [Brian Nixon] add documentation\ne413de1a6 [Brian Nixon] remove JMX use from ResponseCacheTest\nc7a3f8eb0 [Brian Nixon] ZOOKEEPER-3180: Add response cache to improve the throughput of read heavy traffic\n","date":"2019-01-15 02:38:53","modifiedFileCount":"11","status":"M","submitter":"Brian Nixon"},{"authorTime":"2019-05-03 23:37:55","codes":[{"authorDate":"2019-05-03 23:37:55","commitOrder":3,"curCode":"    public static void ensureNone(String... expectedNames)\n        throws IOException, InterruptedException\n    {\n        Set<ObjectName> beans;\n        int nTry = 0;\n        boolean foundUnexpected = false;\n        String unexpectedName = \"\";\n        do {\n            if (nTry++ > 0) {\n                Thread.sleep(100);\n            }\n            try {\n                beans = conn().queryNames(\n                        new ObjectName(MBeanRegistry.DOMAIN + \":*\"), null);\n            } catch (MalformedObjectNameException e) {\n                throw new RuntimeException(e);\n            }\n  \n            foundUnexpected = false; \n            for (String name : expectedNames) {\n                for (ObjectName bean : beans) {\n                    if (bean.toString().contains(name)) {\n                        LOG.info(\"didntexpect:\" + name);\n                        foundUnexpected = true;\n                        unexpectedName = name + \" \" + bean.toString();\n                        break;\n                    }\n                }\n                if (foundUnexpected) {\n                    break;\n                }\n            }\n        } while ((foundUnexpected) && (nTry < 600));\n        if (foundUnexpected) {\n            LOG.info(\"List of all beans follows:\");\n            for (ObjectName bean : beans) {\n                LOG.info(\"bean:\" + bean.toString());\n            }\n            Assert.fail(unexpectedName);\n        }\n    }\n","date":"2019-05-03 23:37:55","endLine":197,"groupId":"2530","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureNone","params":"(String...expectedNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/af/7eb3f3dc84540715f3b51401ba871b27745519.src","preCode":"    public static void ensureNone(String... expectedNames)\n        throws IOException, InterruptedException\n    {\n        Set<ObjectName> beans;\n        int nTry = 0;\n        boolean foundUnexpected = false;\n        String unexpectedName = \"\";\n        do {\n            if (nTry++ > 0) {\n                Thread.sleep(100);\n            }\n            try {\n                beans = conn().queryNames(\n                        new ObjectName(CommonNames.DOMAIN + \":*\"), null);\n            } catch (MalformedObjectNameException e) {\n                throw new RuntimeException(e);\n            }\n  \n            foundUnexpected = false; \n            for (String name : expectedNames) {\n                for (ObjectName bean : beans) {\n                    if (bean.toString().contains(name)) {\n                        LOG.info(\"didntexpect:\" + name);\n                        foundUnexpected = true;\n                        unexpectedName = name + \" \" + bean.toString();\n                        break;\n                    }\n                }\n                if (foundUnexpected) {\n                    break;\n                }\n            }\n        } while ((foundUnexpected) && (nTry < 600));\n        if (foundUnexpected) {\n            LOG.info(\"List of all beans follows:\");\n            for (ObjectName bean : beans) {\n                LOG.info(\"bean:\" + bean.toString());\n            }\n            Assert.fail(unexpectedName);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/JMXEnv.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2019-05-03 23:37:55","commitOrder":3,"curCode":"    public static List<ObjectName> getServerBeans() throws IOException {\n        ArrayList<ObjectName> serverBeans = new ArrayList<>();\n        Set<ObjectName> beans;\n        try {\n            beans = conn().queryNames(\n                    new ObjectName(MBeanRegistry.DOMAIN + \":*\"), null);\n        } catch (MalformedObjectNameException e) {\n            throw new RuntimeException(e);\n        }\n        for (ObjectName bean : beans) {\n            String name = bean.toString();\n            LOG.info(\"bean:\" + name);\n            for (Pattern pattern : beanPatterns) {\n                if (pattern.matcher(name).find()) {\n                    serverBeans.add(bean);\n                }\n            }\n        }\n        return serverBeans;\n    }\n","date":"2019-05-03 23:37:55","endLine":357,"groupId":"4142","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getServerBeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/af/7eb3f3dc84540715f3b51401ba871b27745519.src","preCode":"    public static List<ObjectName> getServerBeans() throws IOException {\n        ArrayList<ObjectName> serverBeans = new ArrayList<>();\n        Set<ObjectName> beans;\n        try {\n            beans = conn().queryNames(\n                    new ObjectName(CommonNames.DOMAIN + \":*\"), null);\n        } catch (MalformedObjectNameException e) {\n            throw new RuntimeException(e);\n        }\n        for (ObjectName bean : beans) {\n            String name = bean.toString();\n            LOG.info(\"bean:\" + name);\n            for (Pattern pattern : beanPatterns) {\n                if (pattern.matcher(name).find()) {\n                    serverBeans.add(bean);\n                }\n            }\n        }\n        return serverBeans;\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/JMXEnv.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"M"}],"commitId":"bee2ef8da3c4a7a2a1925ac8fc5375a7dee702ae","commitMessage":"@@@ZOOKEEPER-3350: Remove CommonNames\n\nRemove `CommonNames`.\n\n- Delete unused `DATA_TREE_KEY`(superseded by `DataTreeBean#getName`)\n- Delete unused `STANDALONE_SERVER_KEY `(superseded by `ZooKeeperServerBean#getName`)\n- Move `DOMAIN` into `MBeanRegistry` where it is actually used.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: fangmin@apache.org.  andor@apache.org\n\nCloses #914 from TisonKun/ZOOKEEPER-3350\n","date":"2019-05-03 23:37:55","modifiedFileCount":"6","status":"M","submitter":"tison"},{"authorTime":"2019-05-03 23:37:55","codes":[{"authorDate":"2019-08-17 23:13:15","commitOrder":4,"curCode":"    public static void ensureNone(String... expectedNames) throws IOException, InterruptedException {\n        Set<ObjectName> beans;\n        int nTry = 0;\n        boolean foundUnexpected = false;\n        String unexpectedName = \"\";\n        do {\n            if (nTry++ > 0) {\n                Thread.sleep(100);\n            }\n            try {\n                beans = conn().queryNames(new ObjectName(MBeanRegistry.DOMAIN + \":*\"), null);\n            } catch (MalformedObjectNameException e) {\n                throw new RuntimeException(e);\n            }\n\n            foundUnexpected = false;\n            for (String name : expectedNames) {\n                for (ObjectName bean : beans) {\n                    if (bean.toString().contains(name)) {\n                        LOG.info(\"didntexpect:\" + name);\n                        foundUnexpected = true;\n                        unexpectedName = name + \" \" + bean.toString();\n                        break;\n                    }\n                }\n                if (foundUnexpected) {\n                    break;\n                }\n            }\n        } while ((foundUnexpected) && (nTry < 600));\n        if (foundUnexpected) {\n            LOG.info(\"List of all beans follows:\");\n            for (ObjectName bean : beans) {\n                LOG.info(\"bean:\" + bean.toString());\n            }\n            fail(unexpectedName);\n        }\n    }\n","date":"2019-08-17 23:13:15","endLine":187,"groupId":"2530","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureNone","params":"(String...expectedNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/97/61f33f761fb5c0ce8eef141a395a6b7a77e3c4.src","preCode":"    public static void ensureNone(String... expectedNames)\n        throws IOException, InterruptedException\n    {\n        Set<ObjectName> beans;\n        int nTry = 0;\n        boolean foundUnexpected = false;\n        String unexpectedName = \"\";\n        do {\n            if (nTry++ > 0) {\n                Thread.sleep(100);\n            }\n            try {\n                beans = conn().queryNames(\n                        new ObjectName(MBeanRegistry.DOMAIN + \":*\"), null);\n            } catch (MalformedObjectNameException e) {\n                throw new RuntimeException(e);\n            }\n  \n            foundUnexpected = false; \n            for (String name : expectedNames) {\n                for (ObjectName bean : beans) {\n                    if (bean.toString().contains(name)) {\n                        LOG.info(\"didntexpect:\" + name);\n                        foundUnexpected = true;\n                        unexpectedName = name + \" \" + bean.toString();\n                        break;\n                    }\n                }\n                if (foundUnexpected) {\n                    break;\n                }\n            }\n        } while ((foundUnexpected) && (nTry < 600));\n        if (foundUnexpected) {\n            LOG.info(\"List of all beans follows:\");\n            for (ObjectName bean : beans) {\n                LOG.info(\"bean:\" + bean.toString());\n            }\n            Assert.fail(unexpectedName);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/JMXEnv.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2019-05-03 23:37:55","commitOrder":4,"curCode":"    public static List<ObjectName> getServerBeans() throws IOException {\n        ArrayList<ObjectName> serverBeans = new ArrayList<>();\n        Set<ObjectName> beans;\n        try {\n            beans = conn().queryNames(\n                    new ObjectName(MBeanRegistry.DOMAIN + \":*\"), null);\n        } catch (MalformedObjectNameException e) {\n            throw new RuntimeException(e);\n        }\n        for (ObjectName bean : beans) {\n            String name = bean.toString();\n            LOG.info(\"bean:\" + name);\n            for (Pattern pattern : beanPatterns) {\n                if (pattern.matcher(name).find()) {\n                    serverBeans.add(bean);\n                }\n            }\n        }\n        return serverBeans;\n    }\n","date":"2019-05-03 23:37:55","endLine":357,"groupId":"4142","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getServerBeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/af/7eb3f3dc84540715f3b51401ba871b27745519.src","preCode":"    public static List<ObjectName> getServerBeans() throws IOException {\n        ArrayList<ObjectName> serverBeans = new ArrayList<>();\n        Set<ObjectName> beans;\n        try {\n            beans = conn().queryNames(\n                    new ObjectName(MBeanRegistry.DOMAIN + \":*\"), null);\n        } catch (MalformedObjectNameException e) {\n            throw new RuntimeException(e);\n        }\n        for (ObjectName bean : beans) {\n            String name = bean.toString();\n            LOG.info(\"bean:\" + name);\n            for (Pattern pattern : beanPatterns) {\n                if (pattern.matcher(name).find()) {\n                    serverBeans.add(bean);\n                }\n            }\n        }\n        return serverBeans;\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/JMXEnv.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"N"}],"commitId":"fe940cdd8fb23ba09684cefb73233d570f4a20fa","commitMessage":"@@@ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server\n\n- [x] org/apache/zookeeper\n- [x] org/apache/zookeeper/admin\n- [x] org/apache/zookeeper/cli\n- [x] org/apache/zookeeper/client\n- [x] org/apache/zookeeper/common\n- [x] org/apache/zookeeper/jmx\n- [x] org/apache/zookeeper/metrics\n- [x] org/apache/zookeeper/metrics/impl\n- [x] org/apache/zookeeper/server\n- [x] org/apache/zookeeper/server/admin\n- [x] org/apache/zookeeper/server/auth\n- [x] org/apache/zookeeper/server/command\n- [x] org/apache/zookeeper/server/metric\n- [x] org/apache/zookeeper/server/persistence\n- [x] org/apache/zookeeper/server/quorum\n- [x] org/apache/zookeeper/server/quorum/auth\n- [x] org/apache/zookeeper/server/quorum/flexible\n- [x] org/apache/zookeeper/server/util\n- [x] org/apache/zookeeper/server/watch\n- [x] org/apache/zookeeper/test\n- [x] org/apache/zookeeper/util\n- [x] org/apache/zookeeper/version/util\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: Brian Nixon <nixon@fb.com>.  Enrico Olivelli <eolivelli@gmail.com>.  Michael Han <hanm@apache.org>\n\nCloses #1049 from TisonKun/ZOOKEEPER-3475\n","date":"2019-08-17 23:13:15","modifiedFileCount":"631","status":"M","submitter":"tison"},{"authorTime":"2019-10-10 20:37:45","codes":[{"authorDate":"2019-10-10 20:37:45","commitOrder":5,"curCode":"    public static void ensureNone(String... expectedNames) throws IOException, InterruptedException {\n        Set<ObjectName> beans;\n        int nTry = 0;\n        boolean foundUnexpected = false;\n        String unexpectedName = \"\";\n        do {\n            if (nTry++ > 0) {\n                Thread.sleep(100);\n            }\n            try {\n                beans = conn().queryNames(new ObjectName(MBeanRegistry.DOMAIN + \":*\"), null);\n            } catch (MalformedObjectNameException e) {\n                throw new RuntimeException(e);\n            }\n\n            foundUnexpected = false;\n            for (String name : expectedNames) {\n                for (ObjectName bean : beans) {\n                    if (bean.toString().contains(name)) {\n                        LOG.info(\"didntexpect:{}\", name);\n                        foundUnexpected = true;\n                        unexpectedName = name + \" \" + bean.toString();\n                        break;\n                    }\n                }\n                if (foundUnexpected) {\n                    break;\n                }\n            }\n        } while ((foundUnexpected) && (nTry < 600));\n        if (foundUnexpected) {\n            LOG.info(\"List of all beans follows:\");\n            for (ObjectName bean : beans) {\n                LOG.info(\"bean:{}\", bean.toString());\n            }\n            fail(unexpectedName);\n        }\n    }\n","date":"2019-10-10 20:37:45","endLine":187,"groupId":"10655","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureNone","params":"(String...expectedNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/6f/bb62006412f03d760e876e6eb5ab4cc1f916fd.src","preCode":"    public static void ensureNone(String... expectedNames) throws IOException, InterruptedException {\n        Set<ObjectName> beans;\n        int nTry = 0;\n        boolean foundUnexpected = false;\n        String unexpectedName = \"\";\n        do {\n            if (nTry++ > 0) {\n                Thread.sleep(100);\n            }\n            try {\n                beans = conn().queryNames(new ObjectName(MBeanRegistry.DOMAIN + \":*\"), null);\n            } catch (MalformedObjectNameException e) {\n                throw new RuntimeException(e);\n            }\n\n            foundUnexpected = false;\n            for (String name : expectedNames) {\n                for (ObjectName bean : beans) {\n                    if (bean.toString().contains(name)) {\n                        LOG.info(\"didntexpect:\" + name);\n                        foundUnexpected = true;\n                        unexpectedName = name + \" \" + bean.toString();\n                        break;\n                    }\n                }\n                if (foundUnexpected) {\n                    break;\n                }\n            }\n        } while ((foundUnexpected) && (nTry < 600));\n        if (foundUnexpected) {\n            LOG.info(\"List of all beans follows:\");\n            for (ObjectName bean : beans) {\n                LOG.info(\"bean:\" + bean.toString());\n            }\n            fail(unexpectedName);\n        }\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/JMXEnv.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2019-10-10 20:37:45","commitOrder":5,"curCode":"    public static List<ObjectName> getServerBeans() throws IOException {\n        ArrayList<ObjectName> serverBeans = new ArrayList<>();\n        Set<ObjectName> beans;\n        try {\n            beans = conn().queryNames(new ObjectName(MBeanRegistry.DOMAIN + \":*\"), null);\n        } catch (MalformedObjectNameException e) {\n            throw new RuntimeException(e);\n        }\n        for (ObjectName bean : beans) {\n            String name = bean.toString();\n            LOG.info(\"bean:{}\", name);\n            for (Pattern pattern : beanPatterns) {\n                if (pattern.matcher(name).find()) {\n                    serverBeans.add(bean);\n                }\n            }\n        }\n        return serverBeans;\n    }\n","date":"2019-10-10 20:37:45","endLine":329,"groupId":"10655","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getServerBeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zookeeper-10-0.7/blobInfo/CC_OUT/blobs/6f/bb62006412f03d760e876e6eb5ab4cc1f916fd.src","preCode":"    public static List<ObjectName> getServerBeans() throws IOException {\n        ArrayList<ObjectName> serverBeans = new ArrayList<>();\n        Set<ObjectName> beans;\n        try {\n            beans = conn().queryNames(new ObjectName(MBeanRegistry.DOMAIN + \":*\"), null);\n        } catch (MalformedObjectNameException e) {\n            throw new RuntimeException(e);\n        }\n        for (ObjectName bean : beans) {\n            String name = bean.toString();\n            LOG.info(\"bean:\" + name);\n            for (Pattern pattern : beanPatterns) {\n                if (pattern.matcher(name).find()) {\n                    serverBeans.add(bean);\n                }\n            }\n        }\n        return serverBeans;\n    }\n","realPath":"zookeeper-server/src/test/java/org/apache/zookeeper/test/JMXEnv.java","repoName":"zookeeper","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"M"}],"commitId":"11c07921c15e2fb7692375327b53f26a583b77ca","commitMessage":"@@@ZOOKEEPER-3509: Revisit log format\n\n1. Always wrap `.trace` with `isTraceEnabled`. It is because that some of trace calls are a bit complex.\n2. Never wrap other levels with `isXXXEnabled`. Logger already checks log level and we don't make side effect or expensive operation in log statement.\n3. Always use `{}` instead of string concatenation or `String.format`. Just for unification and it is what is recommended.\n4. Always log throwable in warn or error level or debug if omit\n5. Always log throwable as the last arg and never log `throwable.getMessage` since Logger already log stack trace.\n\nAuthor: tison <wander4096@gmail.com>\n\nReviewers: enixon@apache.org.  andor@apache.org\n\nCloses #1100 from TisonKun/ZOOKEEPER-3509 and squashes the following commits:\n\n0c3a4ded8 [tison] Address comment\ndcb68eb61 [tison] ZOOKEEPER-3509: Revisit log format\n","date":"2019-10-10 20:37:45","modifiedFileCount":"155","status":"M","submitter":"tison"}]
