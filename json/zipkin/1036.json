[{"authorTime":"2019-08-04 04:43:21","codes":[{"authorDate":"2019-08-24 11:17:27","commitOrder":3,"curCode":"  @Test public void wrongScheme() {\n    context.close();\n    context = new AnnotationConfigApplicationContext();\n    initWithHosts(\"https://localhost:\" + server1.httpPort());\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      \r\n      assertThat(result.error()).isInstanceOf(ClosedSessionException.class);\n    }\n  }\n","date":"2019-08-24 11:17:27","endLine":104,"groupId":"1507","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"wrongScheme","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/be/1fc9bc1418c6727c65aff620d0a9f1067d6205.src","preCode":"  @Test public void wrongScheme() {\n    context.close();\n    context = new AnnotationConfigApplicationContext();\n    initWithHosts(\"https://localhost:\" + server1.httpPort());\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      \r\n      assertThat(result.error()).isInstanceOf(ClosedSessionException.class);\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2019-08-04 04:43:21","commitOrder":3,"curCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","date":"2019-08-04 04:43:21","endLine":146,"groupId":"308","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"notHealthyThenHealthyThenNotHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/a7/b80896291d0921923ea2c38a6ba4f1a0a5a9a5.src","preCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"NB"}],"commitId":"1d48abfb20d8929cb7d6190e7b78f99a6a1ab8e7","commitMessage":"@@@Falls back to simple name and stops prefixing rejected ES exceptions (#2777)\n\nArmeria has a number of constant throwables.  which neither have a stack\ntrace.  nor a message. This switches to use these while we figure out if\nthere is a better way to unveil an underlying http connection problem\nthe health-check sees.  but a health-checked client would not.\n\nThe approach is used all over in zipkin.  most notably Brave.\n\nThis also stops prefixing RejectionException messages also with the word\nas it is annoying to read it twice in toString.\n\nMost importantly.  this unwraps RejectionException in health check as it\ndoesn't effectively describe the cause of the problem.  rather obfuscates\nit.\n\nBefore:\n```bash\ncurl -s localhost:9411/health\n{\"status\":\"DOWN\". \"zipkin\":{\"status\":\"DOWN\". \"details\":{\"ElasticsearchStorage{initialEndpoints=https://localhost:9200.  index=zipkin}\":{\"status\":\"DOWN\". \"details\":{\"error\":\"java.util.concurrent.RejectedExecutionException: Rejected execution: null\"}}}}}\n```\n\nNow:\n```bash\ncurl -s localhost:9411/health\n{\"status\":\"DOWN\". \"zipkin\":{\"status\":\"DOWN\". \"details\":{\"ElasticsearchStorage{initialEndpoints=https://localhost:9200.  index=zipkin}\":{\"status\":\"DOWN\". \"details\":{\"error\":\"com.linecorp.armeria.common.ClosedSessionException\"}}}}}\n```","date":"2019-08-24 11:17:27","modifiedFileCount":"6","status":"M","submitter":"Adrian Cole"},{"authorTime":"2019-10-01 19:13:42","codes":[{"authorDate":"2019-08-24 11:17:27","commitOrder":4,"curCode":"  @Test public void wrongScheme() {\n    context.close();\n    context = new AnnotationConfigApplicationContext();\n    initWithHosts(\"https://localhost:\" + server1.httpPort());\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      \r\n      assertThat(result.error()).isInstanceOf(ClosedSessionException.class);\n    }\n  }\n","date":"2019-08-24 11:17:27","endLine":104,"groupId":"1507","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"wrongScheme","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/be/1fc9bc1418c6727c65aff620d0a9f1067d6205.src","preCode":"  @Test public void wrongScheme() {\n    context.close();\n    context = new AnnotationConfigApplicationContext();\n    initWithHosts(\"https://localhost:\" + server1.httpPort());\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      \r\n      assertThat(result.error()).isInstanceOf(ClosedSessionException.class);\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"},{"authorDate":"2019-10-01 19:13:42","commitOrder":4,"curCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n      pretendIndexTemplatesExist(storage);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","date":"2019-10-01 19:13:42","endLine":175,"groupId":"308","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"notHealthyThenHealthyThenNotHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/a2/04af04a1cc848bc10eca28ccf317483ad94971.src","preCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"}],"commitId":"797f36d0ab169173d43de5de1cb7e7bd98dcd39a","commitMessage":"@@@Ensures index templates are verified before passing health. (#2827)\n\nCurrently.  we pass health checks which can hide errors provisioning\nindex templates.  and also worsen template provisioning race conditions.\n\nThis makes sure index templates are at least checked once per startup.\n\nThis also refactors the code so that someone can later do offline\ntemplate installation.\n\nFixes #2825","date":"2019-10-01 19:13:42","modifiedFileCount":"11","status":"M","submitter":"Adrian Cole"},{"authorTime":"2019-10-01 19:13:42","codes":[{"authorDate":"2020-02-25 15:32:20","commitOrder":5,"curCode":"  @Test public void wrongScheme() {\n    context.close();\n    context = new AnnotationConfigApplicationContext();\n    initWithHosts(\"https://localhost:\" + server1.httpPort());\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      \r\n      assertThat(result.error()).isInstanceOf(SSLHandshakeException.class);\n    }\n  }\n","date":"2020-02-25 15:32:20","endLine":115,"groupId":"1507","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"wrongScheme","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/dd/acf53d4caed23568bbc1f976ea5e4a9be741c0.src","preCode":"  @Test public void wrongScheme() {\n    context.close();\n    context = new AnnotationConfigApplicationContext();\n    initWithHosts(\"https://localhost:\" + server1.httpPort());\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      \r\n      assertThat(result.error()).isInstanceOf(ClosedSessionException.class);\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2019-10-01 19:13:42","commitOrder":5,"curCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n      pretendIndexTemplatesExist(storage);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","date":"2019-10-01 19:13:42","endLine":175,"groupId":"308","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"notHealthyThenHealthyThenNotHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/a2/04af04a1cc848bc10eca28ccf317483ad94971.src","preCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n      pretendIndexTemplatesExist(storage);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"}],"commitId":"7f60427c86daf1e35aefcd911edbc3ca8025b246","commitMessage":"@@@Migrate to Armeria 0.98.2 (#2977)\n\n* Migrate to Armeria 0.98.1\n\n* Exclamation\n\n* Scrubs\n\n* Remove RawContentLogger\n\n* Workaround https://github.com/line/armeria/issues/2493\n\n* Different exception\n\n* 0.98.2 and fixes\n\n* Man\n\n* Nice test\n","date":"2020-02-25 15:32:20","modifiedFileCount":"14","status":"M","submitter":"Anuraag Agrawal"},{"authorTime":"2020-04-15 13:30:04","codes":[{"authorDate":"2020-02-25 15:32:20","commitOrder":6,"curCode":"  @Test public void wrongScheme() {\n    context.close();\n    context = new AnnotationConfigApplicationContext();\n    initWithHosts(\"https://localhost:\" + server1.httpPort());\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      \r\n      assertThat(result.error()).isInstanceOf(SSLHandshakeException.class);\n    }\n  }\n","date":"2020-02-25 15:32:20","endLine":115,"groupId":"1507","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"wrongScheme","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/dd/acf53d4caed23568bbc1f976ea5e4a9be741c0.src","preCode":"  @Test public void wrongScheme() {\n    context.close();\n    context = new AnnotationConfigApplicationContext();\n    initWithHosts(\"https://localhost:\" + server1.httpPort());\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      \r\n      assertThat(result.error()).isInstanceOf(SSLHandshakeException.class);\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"N"},{"authorDate":"2020-04-15 13:30:04","commitOrder":6,"curCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","date":"2020-04-15 13:30:04","endLine":167,"groupId":"308","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"notHealthyThenHealthyThenNotHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/58/3d30461bc0955271bfc3fcd67f2e68ae7f4be8.src","preCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n      pretendIndexTemplatesExist(storage);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"10c478ba049696e9ef32e8400a3d7209e3f31c5a","commitMessage":"@@@Allows opting out via ES_ENSURE_TEMPLATES=false (#3063)\n\nUsers can now disable Elasticsearch index template creation at startup\nvia `ES_ENSURE_TEMPLATES=false`. This breaks the warranty of the install\nand any upgrades when they do this.\n\nFixes #3025","date":"2020-04-15 13:30:04","modifiedFileCount":"9","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-07-03 22:03:22","codes":[{"authorDate":"2020-02-25 15:32:20","commitOrder":7,"curCode":"  @Test public void wrongScheme() {\n    context.close();\n    context = new AnnotationConfigApplicationContext();\n    initWithHosts(\"https://localhost:\" + server1.httpPort());\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      \r\n      assertThat(result.error()).isInstanceOf(SSLHandshakeException.class);\n    }\n  }\n","date":"2020-02-25 15:32:20","endLine":115,"groupId":"1507","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"wrongScheme","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/dd/acf53d4caed23568bbc1f976ea5e4a9be741c0.src","preCode":"  @Test public void wrongScheme() {\n    context.close();\n    context = new AnnotationConfigApplicationContext();\n    initWithHosts(\"https://localhost:\" + server1.httpPort());\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      \r\n      assertThat(result.error()).isInstanceOf(SSLHandshakeException.class);\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"N"},{"authorDate":"2020-07-03 22:03:22","commitOrder":7,"curCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      awaitTimeout.untilAsserted(() -> assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      awaitTimeout.untilAsserted(() -> assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","date":"2020-07-03 22:03:22","endLine":170,"groupId":"308","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"notHealthyThenHealthyThenNotHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/26/6baed7b5d4c6a49c8e9fc368aa2ce81a78b843.src","preCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"}],"commitId":"5cfde9ea1264779dadce175a5c2fd1e43294a13c","commitMessage":"@@@Updates versions.  most notably Armeria (#3130)\n\n","date":"2020-07-03 22:03:22","modifiedFileCount":"17","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-07-03 22:03:22","codes":[{"authorDate":"2020-10-28 16:13:34","commitOrder":8,"curCode":"  @Test public void wrongScheme() {\n    context.close();\n    context = new AnnotationConfigApplicationContext();\n    initWithHosts(\"https://localhost:\" + server1.httpPort());\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      \r\n      \r\n      assertThat(result.error()).isInstanceOf(SSLException.class);\n    }\n  }\n","date":"2020-10-28 16:13:34","endLine":125,"groupId":"1036","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"wrongScheme","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/0a/0eacd7070168c8c08dcdc01c5c1e0bd71e2251.src","preCode":"  @Test public void wrongScheme() {\n    context.close();\n    context = new AnnotationConfigApplicationContext();\n    initWithHosts(\"https://localhost:\" + server1.httpPort());\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      \r\n      assertThat(result.error()).isInstanceOf(SSLHandshakeException.class);\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2020-07-03 22:03:22","commitOrder":8,"curCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      awaitTimeout.untilAsserted(() -> assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      awaitTimeout.untilAsserted(() -> assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","date":"2020-07-03 22:03:22","endLine":170,"groupId":"1036","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"notHealthyThenHealthyThenNotHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/26/6baed7b5d4c6a49c8e9fc368aa2ce81a78b843.src","preCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      awaitTimeout.untilAsserted(() -> assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      awaitTimeout.untilAsserted(() -> assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"}],"commitId":"bfaa01fbfe51b4227eab20461e433862f40d856e","commitMessage":"@@@Republishes zipkin-builder only when on master.  as a separate job (#3265)\n\n","date":"2020-10-28 16:13:34","modifiedFileCount":"3","status":"M","submitter":"Adrian Cole"}]
