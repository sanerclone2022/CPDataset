[{"authorTime":"2019-08-10 10:37:37","codes":[{"authorDate":"2019-08-10 10:37:37","commitOrder":1,"curCode":"  @Test public void executionException_5xx() throws Exception {\n    MOCK_RESPONSE.set(AggregatedHttpResponse.of(HttpStatus.INTERNAL_SERVER_ERROR));\n\n    Call<?> call = http.newCall(REQUEST, NULL, \"test\");\n\n    try {\n      call.execute();\n      failBecauseExceptionWasNotThrown(RuntimeException.class);\n    } catch (RuntimeException expected) {\n      assertThat(expected).hasMessage(\"response for / failed: 500 Internal Server Error\");\n    }\n  }\n","date":"2019-08-10 10:37:37","endLine":166,"groupId":"3355","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"executionException_5xx","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/e4/ab10c08b671a200b14ad58d17c27adaae9c1bb.src","preCode":"  @Test public void executionException_5xx() throws Exception {\n    MOCK_RESPONSE.set(AggregatedHttpResponse.of(HttpStatus.INTERNAL_SERVER_ERROR));\n\n    Call<?> call = http.newCall(REQUEST, NULL, \"test\");\n\n    try {\n      call.execute();\n      failBecauseExceptionWasNotThrown(RuntimeException.class);\n    } catch (RuntimeException expected) {\n      assertThat(expected).hasMessage(\"response for / failed: 500 Internal Server Error\");\n    }\n  }\n","realPath":"zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/internal/client/HttpCallTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"B"},{"authorDate":"2019-08-10 10:37:37","commitOrder":1,"curCode":"  @Test public void executionException_404() throws Exception {\n    MOCK_RESPONSE.set(AggregatedHttpResponse.of(HttpStatus.NOT_FOUND));\n\n    Call<?> call = http.newCall(REQUEST, NULL, \"test\");\n\n    try {\n      call.execute();\n      failBecauseExceptionWasNotThrown(FileNotFoundException.class);\n    } catch (FileNotFoundException expected) {\n      assertThat(expected).hasMessage(\"/\");\n    }\n  }\n","date":"2019-08-10 10:37:37","endLine":179,"groupId":"3355","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"executionException_404","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/e4/ab10c08b671a200b14ad58d17c27adaae9c1bb.src","preCode":"  @Test public void executionException_404() throws Exception {\n    MOCK_RESPONSE.set(AggregatedHttpResponse.of(HttpStatus.NOT_FOUND));\n\n    Call<?> call = http.newCall(REQUEST, NULL, \"test\");\n\n    try {\n      call.execute();\n      failBecauseExceptionWasNotThrown(FileNotFoundException.class);\n    } catch (FileNotFoundException expected) {\n      assertThat(expected).hasMessage(\"/\");\n    }\n  }\n","realPath":"zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/internal/client/HttpCallTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"B"}],"commitId":"909ee5ff1421c752b611f2ed8817c3297751f3f8","commitMessage":"@@@Updates to latest armeria (#2743)\n\n","date":"2019-08-10 10:37:37","modifiedFileCount":"6","status":"B","submitter":"Adrian Cole"},{"authorTime":"2019-08-22 14:08:49","codes":[{"authorDate":"2019-08-22 14:08:49","commitOrder":2,"curCode":"  @Test void executionException_5xx() throws Exception {\n    server.enqueue(AggregatedHttpResponse.of(HttpStatus.INTERNAL_SERVER_ERROR));\n\n    Call<?> call = http.newCall(REQUEST, NULL, \"test\");\n\n    try {\n      call.execute();\n      failBecauseExceptionWasNotThrown(RuntimeException.class);\n    } catch (RuntimeException expected) {\n      assertThat(expected).hasMessage(\"response for / failed: 500 Internal Server Error\");\n    }\n  }\n","date":"2019-08-22 14:08:49","endLine":159,"groupId":"3355","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"executionException_5xx","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/46/ce863971df6aea87fb81b844379806b5279574.src","preCode":"  @Test public void executionException_5xx() throws Exception {\n    MOCK_RESPONSE.set(AggregatedHttpResponse.of(HttpStatus.INTERNAL_SERVER_ERROR));\n\n    Call<?> call = http.newCall(REQUEST, NULL, \"test\");\n\n    try {\n      call.execute();\n      failBecauseExceptionWasNotThrown(RuntimeException.class);\n    } catch (RuntimeException expected) {\n      assertThat(expected).hasMessage(\"response for / failed: 500 Internal Server Error\");\n    }\n  }\n","realPath":"zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/internal/client/HttpCallTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2019-08-22 14:08:49","commitOrder":2,"curCode":"  @Test void executionException_404() throws Exception {\n    server.enqueue(AggregatedHttpResponse.of(HttpStatus.NOT_FOUND));\n\n    Call<?> call = http.newCall(REQUEST, NULL, \"test\");\n\n    try {\n      call.execute();\n      failBecauseExceptionWasNotThrown(FileNotFoundException.class);\n    } catch (FileNotFoundException expected) {\n      assertThat(expected).hasMessage(\"/\");\n    }\n  }\n","date":"2019-08-22 14:08:49","endLine":172,"groupId":"3355","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"executionException_404","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/46/ce863971df6aea87fb81b844379806b5279574.src","preCode":"  @Test public void executionException_404() throws Exception {\n    MOCK_RESPONSE.set(AggregatedHttpResponse.of(HttpStatus.NOT_FOUND));\n\n    Call<?> call = http.newCall(REQUEST, NULL, \"test\");\n\n    try {\n      call.execute();\n      failBecauseExceptionWasNotThrown(FileNotFoundException.class);\n    } catch (FileNotFoundException expected) {\n      assertThat(expected).hasMessage(\"/\");\n    }\n  }\n","realPath":"zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/internal/client/HttpCallTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"8423afc56c0bdc4bfca15ec43b5add974c383405","commitMessage":"@@@Define an interface for supplying a request to give call sites more c? (#2761)\n\n* Define an interface for supplying a request to give call sites more control over how the request is created (e.g..  using pooled buffers or streaming).\n\n* Don't serialize if request aborted.\n\n* Refactor\n\n* Test\n\n* Fix\n\n* Better test\n\n* javadoc drifted\n","date":"2019-08-22 14:08:49","modifiedFileCount":"4","status":"M","submitter":"Anuraag Agrawal"},{"authorTime":"2020-07-04 15:40:49","codes":[{"authorDate":"2020-07-04 15:40:49","commitOrder":3,"curCode":"  @Test void executionException_5xx() {\n    server.enqueue(AggregatedHttpResponse.of(HttpStatus.INTERNAL_SERVER_ERROR));\n\n    Call<?> call = http.newCall(REQUEST, NULL, \"test\");\n\n    assertThatThrownBy(call::execute)\n      .isInstanceOf(RuntimeException.class)\n      .hasMessage(\"response for / failed: 500 Internal Server Error\");\n  }\n","date":"2020-07-04 15:40:49","endLine":142,"groupId":"10379","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"executionException_5xx","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/7f/1fa87e07c84b314e7fc613202433393e8a666b.src","preCode":"  @Test void executionException_5xx() throws Exception {\n    server.enqueue(AggregatedHttpResponse.of(HttpStatus.INTERNAL_SERVER_ERROR));\n\n    Call<?> call = http.newCall(REQUEST, NULL, \"test\");\n\n    try {\n      call.execute();\n      failBecauseExceptionWasNotThrown(RuntimeException.class);\n    } catch (RuntimeException expected) {\n      assertThat(expected).hasMessage(\"response for / failed: 500 Internal Server Error\");\n    }\n  }\n","realPath":"zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/internal/client/HttpCallTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2020-07-04 15:40:49","commitOrder":3,"curCode":"  @Test void executionException_404() {\n    server.enqueue(AggregatedHttpResponse.of(HttpStatus.NOT_FOUND));\n\n    Call<?> call = http.newCall(REQUEST, NULL, \"test\");\n\n    assertThatThrownBy(call::execute)\n      .isInstanceOf(FileNotFoundException.class)\n      .hasMessage(\"/\");\n  }\n","date":"2020-07-04 15:40:49","endLine":152,"groupId":"10379","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"executionException_404","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/7f/1fa87e07c84b314e7fc613202433393e8a666b.src","preCode":"  @Test void executionException_404() throws Exception {\n    server.enqueue(AggregatedHttpResponse.of(HttpStatus.NOT_FOUND));\n\n    Call<?> call = http.newCall(REQUEST, NULL, \"test\");\n\n    try {\n      call.execute();\n      failBecauseExceptionWasNotThrown(FileNotFoundException.class);\n    } catch (FileNotFoundException expected) {\n      assertThat(expected).hasMessage(\"/\");\n    }\n  }\n","realPath":"zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/internal/client/HttpCallTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"854fe8c689eef3071c14fa4e6b33943fbab5cd8a","commitMessage":"@@@Removes guava dep in preparation of Datastax Driver 4.x (#3134)\n\nWe only needed guava for Cassandra. Removing it here makes migration easier.\n\nNote: there's still a guava left in cassandra-v1 which is too complex to undo\nin this PR (Table and Cache apis).","date":"2020-07-04 15:40:49","modifiedFileCount":"40","status":"M","submitter":"Adrian Cole"}]
