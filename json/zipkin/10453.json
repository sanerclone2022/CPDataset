[{"authorTime":"2019-05-02 12:01:47","codes":[{"authorDate":"2019-05-02 12:01:47","commitOrder":1,"curCode":"  public void check_failsOnInvalidBootstrapServers() throws Exception {\n\n    KafkaCollector.Builder builder =\n        builder(\"fail_invalid_bootstrap_servers\").bootstrapServers(\"1.1.1.1\");\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n\n      Thread.sleep(1000L); \r\n\n      assertThat(collector.check().error())\n          .isInstanceOf(KafkaException.class)\n          .hasMessage(\"Invalid url in bootstrap.servers: 1.1.1.1\");\n    }\n  }\n","date":"2019-05-02 12:01:47","endLine":123,"groupId":"342","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"check_failsOnInvalidBootstrapServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/09/90128931bb91567dde8bc417843a046538c4c3.src","preCode":"  public void check_failsOnInvalidBootstrapServers() throws Exception {\n\n    KafkaCollector.Builder builder =\n        builder(\"fail_invalid_bootstrap_servers\").bootstrapServers(\"1.1.1.1\");\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n\n      Thread.sleep(1000L); \r\n\n      assertThat(collector.check().error())\n          .isInstanceOf(KafkaException.class)\n          .hasMessage(\"Invalid url in bootstrap.servers: 1.1.1.1\");\n    }\n  }\n","realPath":"zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/ITKafkaCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"},{"authorDate":"2019-05-02 12:01:47","commitOrder":1,"curCode":"  public void reconnectsIndefinitelyAndReportsUnhealthyWhenKafkaUnavailable() throws Exception {\n    KafkaCollector.Builder builder =\n        builder(\"fail_invalid_bootstrap_servers\")\n            .bootstrapServers(\"localhost:\" + InstanceSpec.getRandomPort());\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      Thread.sleep(TimeUnit.SECONDS.toMillis(1));\n      assertThat(collector.check().error()).isInstanceOf(TimeoutException.class);\n    }\n  }\n","date":"2019-05-02 12:01:47","endLine":145,"groupId":"343","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"reconnectsIndefinitelyAndReportsUnhealthyWhenKafkaUnavailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/09/90128931bb91567dde8bc417843a046538c4c3.src","preCode":"  public void reconnectsIndefinitelyAndReportsUnhealthyWhenKafkaUnavailable() throws Exception {\n    KafkaCollector.Builder builder =\n        builder(\"fail_invalid_bootstrap_servers\")\n            .bootstrapServers(\"localhost:\" + InstanceSpec.getRandomPort());\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      Thread.sleep(TimeUnit.SECONDS.toMillis(1));\n      assertThat(collector.check().error()).isInstanceOf(TimeoutException.class);\n    }\n  }\n","realPath":"zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/ITKafkaCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"}],"commitId":"134b53c4abb1b3209a534799b8cdc901478dbb56","commitMessage":"@@@Fixes logging and metrics for collectors (#2552)\n\nBefore.  we were inconsistent about incrementing metrics.  and in worst\ncase.  we double-incremented. This adds tests for the messaging based\ncollectors and backfills tests to make the base Collector class 100%\ncoverage.\n\nSeparately.  we have recently changed our web endpoint to produce its\nown error messages to the client. In other words.  we no longer rely on\n(often unnecessary) wrapping of exceptions to correct the message being\nsent back. This changes the logic around message formatting so it is\nonly used when logging is enabled.\n","date":"2019-05-02 12:01:47","modifiedFileCount":"15","status":"B","submitter":"Adrian Cole"},{"authorTime":"2020-08-21 13:41:36","codes":[{"authorDate":"2019-05-02 12:01:47","commitOrder":2,"curCode":"  public void check_failsOnInvalidBootstrapServers() throws Exception {\n\n    KafkaCollector.Builder builder =\n        builder(\"fail_invalid_bootstrap_servers\").bootstrapServers(\"1.1.1.1\");\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n\n      Thread.sleep(1000L); \r\n\n      assertThat(collector.check().error())\n          .isInstanceOf(KafkaException.class)\n          .hasMessage(\"Invalid url in bootstrap.servers: 1.1.1.1\");\n    }\n  }\n","date":"2019-05-02 12:01:47","endLine":123,"groupId":"342","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"check_failsOnInvalidBootstrapServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/09/90128931bb91567dde8bc417843a046538c4c3.src","preCode":"  public void check_failsOnInvalidBootstrapServers() throws Exception {\n\n    KafkaCollector.Builder builder =\n        builder(\"fail_invalid_bootstrap_servers\").bootstrapServers(\"1.1.1.1\");\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n\n      Thread.sleep(1000L); \r\n\n      assertThat(collector.check().error())\n          .isInstanceOf(KafkaException.class)\n          .hasMessage(\"Invalid url in bootstrap.servers: 1.1.1.1\");\n    }\n  }\n","realPath":"zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/ITKafkaCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"N"},{"authorDate":"2020-08-21 13:41:36","commitOrder":2,"curCode":"  public void reconnectsIndefinitelyAndReportsUnhealthyWhenKafkaUnavailable() throws Exception {\n    KafkaCollector.Builder builder =\n      builder(\"fail_invalid_bootstrap_servers\").bootstrapServers(\"localhost:\" + 9092);\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      Thread.sleep(TimeUnit.SECONDS.toMillis(1));\n      assertThat(collector.check().error()).isInstanceOf(TimeoutException.class);\n    }\n  }\n","date":"2020-08-21 13:41:36","endLine":135,"groupId":"343","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"reconnectsIndefinitelyAndReportsUnhealthyWhenKafkaUnavailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/25/6c711bfd263d3bf84d25d047ea1c0ed8aa98c1.src","preCode":"  public void reconnectsIndefinitelyAndReportsUnhealthyWhenKafkaUnavailable() throws Exception {\n    KafkaCollector.Builder builder =\n        builder(\"fail_invalid_bootstrap_servers\")\n            .bootstrapServers(\"localhost:\" + InstanceSpec.getRandomPort());\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      Thread.sleep(TimeUnit.SECONDS.toMillis(1));\n      assertThat(collector.check().error()).isInstanceOf(TimeoutException.class);\n    }\n  }\n","realPath":"zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/ITKafkaCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"390f2e1830d9d22ba921ce65cad18d4b5875912d","commitMessage":"@@@Replace kafka-junit with testcontainer (#3178)\n\n","date":"2020-08-21 13:41:36","modifiedFileCount":"1","status":"M","submitter":"Jorge Esteban Quilcate Otoya"},{"authorTime":"2020-08-21 13:41:36","codes":[{"authorDate":"2020-11-11 13:54:53","commitOrder":3,"curCode":"  @Test public void check_failsOnInvalidBootstrapServers() throws Exception {\n\n    KafkaCollector.Builder builder =\n      builder(\"fail_invalid_bootstrap_servers\").bootstrapServers(\"1.1.1.1\");\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n\n      Thread.sleep(1000L); \r\n\n      assertThat(collector.check().error())\n        .isInstanceOf(KafkaException.class)\n        .hasMessage(\"Invalid url in bootstrap.servers: 1.1.1.1\");\n    }\n  }\n","date":"2020-11-11 13:54:53","endLine":107,"groupId":"342","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"check_failsOnInvalidBootstrapServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/8a/ac9c202ef0e904aadecaa476c7d531993f9d37.src","preCode":"  public void check_failsOnInvalidBootstrapServers() throws Exception {\n\n    KafkaCollector.Builder builder =\n      builder(\"fail_invalid_bootstrap_servers\").bootstrapServers(\"1.1.1.1\");\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n\n      Thread.sleep(1000L); \r\n\n      assertThat(collector.check().error())\n        .isInstanceOf(KafkaException.class)\n        .hasMessage(\"Invalid url in bootstrap.servers: 1.1.1.1\");\n    }\n  }\n","realPath":"zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/ITKafkaCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2020-08-21 13:41:36","commitOrder":3,"curCode":"  public void reconnectsIndefinitelyAndReportsUnhealthyWhenKafkaUnavailable() throws Exception {\n    KafkaCollector.Builder builder =\n      builder(\"fail_invalid_bootstrap_servers\").bootstrapServers(\"localhost:\" + 9092);\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      Thread.sleep(TimeUnit.SECONDS.toMillis(1));\n      assertThat(collector.check().error()).isInstanceOf(TimeoutException.class);\n    }\n  }\n","date":"2020-08-21 13:41:36","endLine":135,"groupId":"343","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"reconnectsIndefinitelyAndReportsUnhealthyWhenKafkaUnavailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/25/6c711bfd263d3bf84d25d047ea1c0ed8aa98c1.src","preCode":"  public void reconnectsIndefinitelyAndReportsUnhealthyWhenKafkaUnavailable() throws Exception {\n    KafkaCollector.Builder builder =\n      builder(\"fail_invalid_bootstrap_servers\").bootstrapServers(\"localhost:\" + 9092);\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      Thread.sleep(TimeUnit.SECONDS.toMillis(1));\n      assertThat(collector.check().error()).isInstanceOf(TimeoutException.class);\n    }\n  }\n","realPath":"zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/ITKafkaCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"N"}],"commitId":"9576e4705f8025e893d674b175a15fa558d48239","commitMessage":"@@@Changes docker tests to use HEALTHCHECK where defined (#3297)\n\nNote: we currently don't publish a standard rabbitmq image.. the one we copied\ndoesn't include a HEALTHCHECK so we inline one.\n\nFixes #3295","date":"2020-11-11 13:54:53","modifiedFileCount":"14","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-12-07 13:22:06","codes":[{"authorDate":"2020-12-07 13:22:06","commitOrder":4,"curCode":"  @Test void check_failsOnInvalidBootstrapServers() throws Exception {\n\n    KafkaCollector.Builder builder =\n      builder(\"fail_invalid_bootstrap_servers\").bootstrapServers(\"1.1.1.1\");\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n\n      Thread.sleep(1000L); \r\n\n      assertThat(collector.check().error())\n        .isInstanceOf(KafkaException.class)\n        .hasMessage(\"Invalid url in bootstrap.servers: 1.1.1.1\");\n    }\n  }\n","date":"2020-12-07 13:22:06","endLine":106,"groupId":"10453","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"check_failsOnInvalidBootstrapServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/75/919116cf9f5d291356892ca426010065c79b37.src","preCode":"  @Test public void check_failsOnInvalidBootstrapServers() throws Exception {\n\n    KafkaCollector.Builder builder =\n      builder(\"fail_invalid_bootstrap_servers\").bootstrapServers(\"1.1.1.1\");\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n\n      Thread.sleep(1000L); \r\n\n      assertThat(collector.check().error())\n        .isInstanceOf(KafkaException.class)\n        .hasMessage(\"Invalid url in bootstrap.servers: 1.1.1.1\");\n    }\n  }\n","realPath":"zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/ITKafkaCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2020-12-07 13:22:06","commitOrder":4,"curCode":"  @Test void reconnectsIndefinitelyAndReportsUnhealthyWhenKafkaUnavailable() throws Exception {\n    KafkaCollector.Builder builder =\n      builder(\"fail_invalid_bootstrap_servers\").bootstrapServers(\"localhost:\" + 9092);\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      Thread.sleep(TimeUnit.SECONDS.toMillis(1));\n      assertThat(collector.check().error()).isInstanceOf(TimeoutException.class);\n    }\n  }\n","date":"2020-12-07 13:22:06","endLine":127,"groupId":"10453","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"reconnectsIndefinitelyAndReportsUnhealthyWhenKafkaUnavailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/75/919116cf9f5d291356892ca426010065c79b37.src","preCode":"  public void reconnectsIndefinitelyAndReportsUnhealthyWhenKafkaUnavailable() throws Exception {\n    KafkaCollector.Builder builder =\n      builder(\"fail_invalid_bootstrap_servers\").bootstrapServers(\"localhost:\" + 9092);\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      Thread.sleep(TimeUnit.SECONDS.toMillis(1));\n      assertThat(collector.check().error()).isInstanceOf(TimeoutException.class);\n    }\n  }\n","realPath":"zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/ITKafkaCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"28d9529e3fa7ff807bd6c7cb757587fbdb8ae108","commitMessage":"@@@Ports last docker tests to jupiter (#3326)\n\nThis cleans up testcontainers fixtures and ports the two remaining\ndocker tests to jupiter (kafka and rabbit).\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>","date":"2020-12-07 13:22:06","modifiedFileCount":"9","status":"M","submitter":"Adrian Cole"}]
