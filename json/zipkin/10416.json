[{"authorTime":"2019-07-19 18:56:37","codes":[{"authorDate":"2019-07-19 18:56:37","commitOrder":1,"curCode":"  static Span parseSpan(JsonParser parser) throws IOException {\n    if (!parser.isExpectedStartObjectToken()) {\n      throw new IllegalArgumentException(\"Not a valid JSON object, start token: \" +\n        parser.currentToken());\n    }\n\n    Span.Builder result = Span.newBuilder();\n\n    JsonToken value;\n    while ((value = parser.nextValue()) != JsonToken.END_OBJECT) {\n      if (value == null) {\n        throw new IOException(\"End of input while parsing object.\");\n      }\n      if (value == JsonToken.VALUE_NULL) {\n        continue;\n      }\n      switch (parser.currentName()) {\n        case \"traceId\":\n          result.traceId(parser.getText());\n          break;\n        case \"parentId\":\n          result.parentId(parser.getText());\n          break;\n        case \"id\":\n          result.id(parser.getText());\n          break;\n        case \"kind\":\n          result.kind(Span.Kind.valueOf(parser.getText()));\n          break;\n        case \"name\":\n          result.name(parser.getText());\n          break;\n        case \"timestamp\":\n          result.timestamp(parser.getLongValue());\n          break;\n        case \"duration\":\n          result.duration(parser.getLongValue());\n          break;\n        case \"localEndpoint\":\n          result.localEndpoint(parseEndpoint(parser));\n          break;\n        case \"remoteEndpoint\":\n          result.remoteEndpoint(parseEndpoint(parser));\n          break;\n        case \"annotations\":\n          if (value != JsonToken.START_ARRAY) {\n            throw new IOException(\"Invalid span, expecting annotations array start, got: \" +\n              value);\n          }\n          while (parser.nextToken() != JsonToken.END_ARRAY) {\n            Annotation a = parseAnnotation(parser);\n            result.addAnnotation(a.timestamp(), a.value());\n          }\n          break;\n        case \"tags\":\n          if (value != JsonToken.START_OBJECT) {\n            throw new IOException(\"Invalid span, expecting tags object, got: \" + value);\n          }\n          while (parser.nextValue() != JsonToken.END_OBJECT) {\n            result.putTag(parser.currentName(), parser.getValueAsString());\n          }\n          break;\n        case \"debug\":\n          result.debug(parser.getBooleanValue());\n          break;\n        case \"shared\":\n          result.shared(parser.getBooleanValue());\n          break;\n        default:\n          \r\n      }\n    }\n\n    return result.build();\n  }\n","date":"2019-07-19 18:56:37","endLine":150,"groupId":"1015","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parseSpan","params":"(JsonParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/6f/800ec42415356072b7228343838973e1a94be0.src","preCode":"  static Span parseSpan(JsonParser parser) throws IOException {\n    if (!parser.isExpectedStartObjectToken()) {\n      throw new IllegalArgumentException(\"Not a valid JSON object, start token: \" +\n        parser.currentToken());\n    }\n\n    Span.Builder result = Span.newBuilder();\n\n    JsonToken value;\n    while ((value = parser.nextValue()) != JsonToken.END_OBJECT) {\n      if (value == null) {\n        throw new IOException(\"End of input while parsing object.\");\n      }\n      if (value == JsonToken.VALUE_NULL) {\n        continue;\n      }\n      switch (parser.currentName()) {\n        case \"traceId\":\n          result.traceId(parser.getText());\n          break;\n        case \"parentId\":\n          result.parentId(parser.getText());\n          break;\n        case \"id\":\n          result.id(parser.getText());\n          break;\n        case \"kind\":\n          result.kind(Span.Kind.valueOf(parser.getText()));\n          break;\n        case \"name\":\n          result.name(parser.getText());\n          break;\n        case \"timestamp\":\n          result.timestamp(parser.getLongValue());\n          break;\n        case \"duration\":\n          result.duration(parser.getLongValue());\n          break;\n        case \"localEndpoint\":\n          result.localEndpoint(parseEndpoint(parser));\n          break;\n        case \"remoteEndpoint\":\n          result.remoteEndpoint(parseEndpoint(parser));\n          break;\n        case \"annotations\":\n          if (value != JsonToken.START_ARRAY) {\n            throw new IOException(\"Invalid span, expecting annotations array start, got: \" +\n              value);\n          }\n          while (parser.nextToken() != JsonToken.END_ARRAY) {\n            Annotation a = parseAnnotation(parser);\n            result.addAnnotation(a.timestamp(), a.value());\n          }\n          break;\n        case \"tags\":\n          if (value != JsonToken.START_OBJECT) {\n            throw new IOException(\"Invalid span, expecting tags object, got: \" + value);\n          }\n          while (parser.nextValue() != JsonToken.END_OBJECT) {\n            result.putTag(parser.currentName(), parser.getValueAsString());\n          }\n          break;\n        case \"debug\":\n          result.debug(parser.getBooleanValue());\n          break;\n        case \"shared\":\n          result.shared(parser.getBooleanValue());\n          break;\n        default:\n          \r\n      }\n    }\n\n    return result.build();\n  }\n","realPath":"zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/JsonSerializers.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2019-07-19 18:56:37","commitOrder":1,"curCode":"    new ObjectParser<DependencyLink>() {\n      @Override public DependencyLink parse(JsonParser parser) throws IOException {\n        if (!parser.isExpectedStartObjectToken()) {\n          throw new IllegalArgumentException(\"Expected start of dependency link object but was \"\n            + parser.currentToken());\n        }\n\n        DependencyLink.Builder result = DependencyLink.newBuilder();\n        JsonToken value;\n        while ((value = parser.nextValue()) != JsonToken.END_OBJECT) {\n          if (value == null) {\n            throw new IOException(\"End of input while parsing object.\");\n          }\n          switch (parser.currentName()) {\n            case \"parent\":\n              result.parent(parser.getText());\n              break;\n            case \"child\":\n              result.child(parser.getText());\n              break;\n            case \"callCount\":\n              result.callCount(parser.getLongValue());\n              break;\n            case \"errorCount\":\n              result.errorCount(parser.getLongValue());\n              break;\n            default:\n              \r\n          }\n        }\n        return result.build();\n      }\n    };\n","date":"2019-07-19 18:56:37","endLine":255,"groupId":"1019","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"DEPENDENCY_LINK_PARSER","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/6f/800ec42415356072b7228343838973e1a94be0.src","preCode":"    new ObjectParser<DependencyLink>() {\n      @Override public DependencyLink parse(JsonParser parser) throws IOException {\n        if (!parser.isExpectedStartObjectToken()) {\n          throw new IllegalArgumentException(\"Expected start of dependency link object but was \"\n            + parser.currentToken());\n        }\n\n        DependencyLink.Builder result = DependencyLink.newBuilder();\n        JsonToken value;\n        while ((value = parser.nextValue()) != JsonToken.END_OBJECT) {\n          if (value == null) {\n            throw new IOException(\"End of input while parsing object.\");\n          }\n          switch (parser.currentName()) {\n            case \"parent\":\n              result.parent(parser.getText());\n              break;\n            case \"child\":\n              result.child(parser.getText());\n              break;\n            case \"callCount\":\n              result.callCount(parser.getLongValue());\n              break;\n            case \"errorCount\":\n              result.errorCount(parser.getLongValue());\n              break;\n            default:\n              \r\n          }\n        }\n        return result.build();\n      }\n    };\n","realPath":"zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/JsonSerializers.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"B"}],"commitId":"d985e932aa8b700b82c39859adbc4b3ef2c0ca1b","commitMessage":"@@@Migrate from moshi/okio to jackson (#2688)\n\n","date":"2019-07-19 18:56:37","modifiedFileCount":"19","status":"B","submitter":"Anuraag Agrawal"},{"authorTime":"2019-07-29 17:35:45","codes":[{"authorDate":"2019-07-19 18:56:37","commitOrder":2,"curCode":"  static Span parseSpan(JsonParser parser) throws IOException {\n    if (!parser.isExpectedStartObjectToken()) {\n      throw new IllegalArgumentException(\"Not a valid JSON object, start token: \" +\n        parser.currentToken());\n    }\n\n    Span.Builder result = Span.newBuilder();\n\n    JsonToken value;\n    while ((value = parser.nextValue()) != JsonToken.END_OBJECT) {\n      if (value == null) {\n        throw new IOException(\"End of input while parsing object.\");\n      }\n      if (value == JsonToken.VALUE_NULL) {\n        continue;\n      }\n      switch (parser.currentName()) {\n        case \"traceId\":\n          result.traceId(parser.getText());\n          break;\n        case \"parentId\":\n          result.parentId(parser.getText());\n          break;\n        case \"id\":\n          result.id(parser.getText());\n          break;\n        case \"kind\":\n          result.kind(Span.Kind.valueOf(parser.getText()));\n          break;\n        case \"name\":\n          result.name(parser.getText());\n          break;\n        case \"timestamp\":\n          result.timestamp(parser.getLongValue());\n          break;\n        case \"duration\":\n          result.duration(parser.getLongValue());\n          break;\n        case \"localEndpoint\":\n          result.localEndpoint(parseEndpoint(parser));\n          break;\n        case \"remoteEndpoint\":\n          result.remoteEndpoint(parseEndpoint(parser));\n          break;\n        case \"annotations\":\n          if (value != JsonToken.START_ARRAY) {\n            throw new IOException(\"Invalid span, expecting annotations array start, got: \" +\n              value);\n          }\n          while (parser.nextToken() != JsonToken.END_ARRAY) {\n            Annotation a = parseAnnotation(parser);\n            result.addAnnotation(a.timestamp(), a.value());\n          }\n          break;\n        case \"tags\":\n          if (value != JsonToken.START_OBJECT) {\n            throw new IOException(\"Invalid span, expecting tags object, got: \" + value);\n          }\n          while (parser.nextValue() != JsonToken.END_OBJECT) {\n            result.putTag(parser.currentName(), parser.getValueAsString());\n          }\n          break;\n        case \"debug\":\n          result.debug(parser.getBooleanValue());\n          break;\n        case \"shared\":\n          result.shared(parser.getBooleanValue());\n          break;\n        default:\n          \r\n      }\n    }\n\n    return result.build();\n  }\n","date":"2019-07-19 18:56:37","endLine":150,"groupId":"10416","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"parseSpan","params":"(JsonParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/6f/800ec42415356072b7228343838973e1a94be0.src","preCode":"  static Span parseSpan(JsonParser parser) throws IOException {\n    if (!parser.isExpectedStartObjectToken()) {\n      throw new IllegalArgumentException(\"Not a valid JSON object, start token: \" +\n        parser.currentToken());\n    }\n\n    Span.Builder result = Span.newBuilder();\n\n    JsonToken value;\n    while ((value = parser.nextValue()) != JsonToken.END_OBJECT) {\n      if (value == null) {\n        throw new IOException(\"End of input while parsing object.\");\n      }\n      if (value == JsonToken.VALUE_NULL) {\n        continue;\n      }\n      switch (parser.currentName()) {\n        case \"traceId\":\n          result.traceId(parser.getText());\n          break;\n        case \"parentId\":\n          result.parentId(parser.getText());\n          break;\n        case \"id\":\n          result.id(parser.getText());\n          break;\n        case \"kind\":\n          result.kind(Span.Kind.valueOf(parser.getText()));\n          break;\n        case \"name\":\n          result.name(parser.getText());\n          break;\n        case \"timestamp\":\n          result.timestamp(parser.getLongValue());\n          break;\n        case \"duration\":\n          result.duration(parser.getLongValue());\n          break;\n        case \"localEndpoint\":\n          result.localEndpoint(parseEndpoint(parser));\n          break;\n        case \"remoteEndpoint\":\n          result.remoteEndpoint(parseEndpoint(parser));\n          break;\n        case \"annotations\":\n          if (value != JsonToken.START_ARRAY) {\n            throw new IOException(\"Invalid span, expecting annotations array start, got: \" +\n              value);\n          }\n          while (parser.nextToken() != JsonToken.END_ARRAY) {\n            Annotation a = parseAnnotation(parser);\n            result.addAnnotation(a.timestamp(), a.value());\n          }\n          break;\n        case \"tags\":\n          if (value != JsonToken.START_OBJECT) {\n            throw new IOException(\"Invalid span, expecting tags object, got: \" + value);\n          }\n          while (parser.nextValue() != JsonToken.END_OBJECT) {\n            result.putTag(parser.currentName(), parser.getValueAsString());\n          }\n          break;\n        case \"debug\":\n          result.debug(parser.getBooleanValue());\n          break;\n        case \"shared\":\n          result.shared(parser.getBooleanValue());\n          break;\n        default:\n          \r\n      }\n    }\n\n    return result.build();\n  }\n","realPath":"zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/JsonSerializers.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"},{"authorDate":"2019-07-29 17:35:45","commitOrder":2,"curCode":"  public static final ObjectParser<DependencyLink> DEPENDENCY_LINK_PARSER = parser -> {\n    if (!parser.isExpectedStartObjectToken()) {\n      throw new IllegalArgumentException(\"Expected start of dependency link object but was \"\n        + parser.currentToken());\n    }\n\n    DependencyLink.Builder result = DependencyLink.newBuilder();\n    JsonToken value;\n    while ((value = parser.nextValue()) != JsonToken.END_OBJECT) {\n      if (value == null) {\n        throw new IOException(\"End of input while parsing object.\");\n      }\n      switch (parser.currentName()) {\n        case \"parent\":\n          result.parent(parser.getText());\n          break;\n        case \"child\":\n          result.child(parser.getText());\n          break;\n        case \"callCount\":\n          result.callCount(parser.getLongValue());\n          break;\n        case \"errorCount\":\n          result.errorCount(parser.getLongValue());\n          break;\n        default:\n          \r\n      }\n    }\n    return result.build();\n  };\n","date":"2019-07-29 17:35:45","endLine":227,"groupId":"10416","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"DEPENDENCY_LINK_PARSER","params":"default","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/c8/8b8232664facf7d075ace64f093c78bfdeae93.src","preCode":"    new ObjectParser<DependencyLink>() {\n      @Override public DependencyLink parse(JsonParser parser) throws IOException {\n        if (!parser.isExpectedStartObjectToken()) {\n          throw new IllegalArgumentException(\"Expected start of dependency link object but was \"\n            + parser.currentToken());\n        }\n\n        DependencyLink.Builder result = DependencyLink.newBuilder();\n        JsonToken value;\n        while ((value = parser.nextValue()) != JsonToken.END_OBJECT) {\n          if (value == null) {\n            throw new IOException(\"End of input while parsing object.\");\n          }\n          switch (parser.currentName()) {\n            case \"parent\":\n              result.parent(parser.getText());\n              break;\n            case \"child\":\n              result.child(parser.getText());\n              break;\n            case \"callCount\":\n              result.callCount(parser.getLongValue());\n              break;\n            case \"errorCount\":\n              result.errorCount(parser.getLongValue());\n              break;\n            default:\n              \r\n          }\n        }\n        return result.build();\n      }\n    };\n","realPath":"zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/JsonSerializers.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"81a481b490399a797bc5d04c00ee7de400a4f015","commitMessage":"@@@Uses more things from Armeria 0.89 and more polish (#2710)\n\n","date":"2019-07-29 17:35:45","modifiedFileCount":"18","status":"M","submitter":"Adrian Cole"}]
