[{"authorTime":"2018-06-11 12:40:25","codes":[{"authorDate":"2018-06-11 12:40:25","commitOrder":1,"curCode":"  public void processAnnotationRecord_nulls() {\n    Record4<Integer, Long, String, byte[]> annotationRecord =\n        annotationRecord(null, null, null, null);\n\n    V1Span.Builder builder = V1Span.newBuilder().traceId(1).id(1);\n    SelectSpansAndAnnotations.processAnnotationRecord(annotationRecord, builder, null);\n\n    assertThat(builder)\n        .isEqualToComparingFieldByFieldRecursively(V1Span.newBuilder().traceId(1).id(1));\n  }\n","date":"2018-06-11 13:36:58","endLine":39,"groupId":"2101","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"processAnnotationRecord_nulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/13/5ed2ff5a32ab548f4fdea47577e3f3e0576e3e.src","preCode":"  public void processAnnotationRecord_nulls() {\n    Record4<Integer, Long, String, byte[]> annotationRecord =\n        annotationRecord(null, null, null, null);\n\n    V1Span.Builder builder = V1Span.newBuilder().traceId(1).id(1);\n    SelectSpansAndAnnotations.processAnnotationRecord(annotationRecord, builder, null);\n\n    assertThat(builder)\n        .isEqualToComparingFieldByFieldRecursively(V1Span.newBuilder().traceId(1).id(1));\n  }\n","realPath":"zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/SelectSpansAndAnnotationsTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"B"},{"authorDate":"2018-06-11 12:40:25","commitOrder":1,"curCode":"  public void processAnnotationRecord_annotation() {\n    Record4<Integer, Long, String, byte[]> annotationRecord = annotationRecord(-1, 0L, \"foo\", null);\n\n    V1Span.Builder builder = V1Span.newBuilder().traceId(1).id(1);\n    SelectSpansAndAnnotations.processAnnotationRecord(annotationRecord, builder, null);\n\n    assertThat(builder.build().annotations().get(0))\n        .isEqualTo(V1Annotation.create(0L, \"foo\", null));\n  }\n","date":"2018-06-11 13:36:58","endLine":50,"groupId":"2102","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"processAnnotationRecord_annotation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/13/5ed2ff5a32ab548f4fdea47577e3f3e0576e3e.src","preCode":"  public void processAnnotationRecord_annotation() {\n    Record4<Integer, Long, String, byte[]> annotationRecord = annotationRecord(-1, 0L, \"foo\", null);\n\n    V1Span.Builder builder = V1Span.newBuilder().traceId(1).id(1);\n    SelectSpansAndAnnotations.processAnnotationRecord(annotationRecord, builder, null);\n\n    assertThat(builder.build().annotations().get(0))\n        .isEqualTo(V1Annotation.create(0L, \"foo\", null));\n  }\n","realPath":"zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/SelectSpansAndAnnotationsTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"}],"commitId":"55094d356fb3c93026eca50079d1b7e9d34e5987","commitMessage":"@@@Skip incomplete mysql rows instead of NPE\n","date":"2018-06-11 13:36:58","modifiedFileCount":"1","status":"B","submitter":"Adrian Cole"},{"authorTime":"2018-06-11 12:40:25","codes":[{"authorDate":"2019-09-23 10:13:35","commitOrder":2,"curCode":"  public void processAnnotationRecord_nulls() {\n    Record4<Integer, Long, String, byte[]> annotationRecord =\n        annotationRecord(null, null, null, null);\n\n    V1Span.Builder builder = V1Span.newBuilder().traceId(1).id(1);\n    SelectSpansAndAnnotations.processAnnotationRecord(annotationRecord, builder, null);\n\n    assertThat(builder)\n      .usingRecursiveComparison().isEqualTo(V1Span.newBuilder().traceId(1).id(1));\n  }\n","date":"2019-09-23 10:13:35","endLine":39,"groupId":"10326","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"processAnnotationRecord_nulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/9a/26bc21b15d298d419de841c2ab838caa6ee70d.src","preCode":"  public void processAnnotationRecord_nulls() {\n    Record4<Integer, Long, String, byte[]> annotationRecord =\n        annotationRecord(null, null, null, null);\n\n    V1Span.Builder builder = V1Span.newBuilder().traceId(1).id(1);\n    SelectSpansAndAnnotations.processAnnotationRecord(annotationRecord, builder, null);\n\n    assertThat(builder)\n        .isEqualToComparingFieldByFieldRecursively(V1Span.newBuilder().traceId(1).id(1));\n  }\n","realPath":"zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/SelectSpansAndAnnotationsTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"M"},{"authorDate":"2018-06-11 12:40:25","commitOrder":2,"curCode":"  public void processAnnotationRecord_annotation() {\n    Record4<Integer, Long, String, byte[]> annotationRecord = annotationRecord(-1, 0L, \"foo\", null);\n\n    V1Span.Builder builder = V1Span.newBuilder().traceId(1).id(1);\n    SelectSpansAndAnnotations.processAnnotationRecord(annotationRecord, builder, null);\n\n    assertThat(builder.build().annotations().get(0))\n        .isEqualTo(V1Annotation.create(0L, \"foo\", null));\n  }\n","date":"2018-06-11 13:36:58","endLine":50,"groupId":"10326","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"processAnnotationRecord_annotation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/13/5ed2ff5a32ab548f4fdea47577e3f3e0576e3e.src","preCode":"  public void processAnnotationRecord_annotation() {\n    Record4<Integer, Long, String, byte[]> annotationRecord = annotationRecord(-1, 0L, \"foo\", null);\n\n    V1Span.Builder builder = V1Span.newBuilder().traceId(1).id(1);\n    SelectSpansAndAnnotations.processAnnotationRecord(annotationRecord, builder, null);\n\n    assertThat(builder.build().annotations().get(0))\n        .isEqualTo(V1Annotation.create(0L, \"foo\", null));\n  }\n","realPath":"zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/SelectSpansAndAnnotationsTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"}],"commitId":"1214e77c08b63529f4f3d7416d45bc09e24e3df3","commitMessage":"@@@Updates to Armeria 0.92 and cleans up things (#2813)\n\n","date":"2019-09-23 10:13:35","modifiedFileCount":"32","status":"M","submitter":"Adrian Cole"}]
