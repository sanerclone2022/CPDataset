[{"authorTime":"2019-07-30 22:07:29","codes":[{"authorDate":"2019-07-30 22:07:29","commitOrder":1,"curCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured()\n    throws Exception {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearchHttp(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\n    Client<HttpRequest, HttpResponse> decorated =\n      factory.options.decoration().decorate(HttpRequest.class, HttpResponse.class, delegate);\n\n    \r\n    HttpRequest req = HttpRequest.of(HttpMethod.GET, \"/\");\n    ClientRequestContext ctx = spy(ClientRequestContext.of(req));\n    when(delegate.execute(any(), any())).thenReturn(HttpResponse.of(HttpStatus.OK));\n\n    decorated.execute(ctx, req);\n\n    verify(ctx, never()).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION), any());\n  }\n","date":"2019-07-30 22:07:29","endLine":330,"groupId":"1651","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/2e/1d6ef68cfc28a24e8143b25617bea4bed83e89.src","preCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured()\n    throws Exception {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearchHttp(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\n    Client<HttpRequest, HttpResponse> decorated =\n      factory.options.decoration().decorate(HttpRequest.class, HttpResponse.class, delegate);\n\n    \r\n    HttpRequest req = HttpRequest.of(HttpMethod.GET, \"/\");\n    ClientRequestContext ctx = spy(ClientRequestContext.of(req));\n    when(delegate.execute(any(), any())).thenReturn(HttpResponse.of(HttpStatus.OK));\n\n    decorated.execute(ctx, req);\n\n    verify(ctx, never()).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION), any());\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"B"},{"authorDate":"2019-07-30 22:07:29","commitOrder":1,"curCode":"  @Test public void providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured()\n    throws Exception {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.username:somename\",\n      \"zipkin.storage.elasticsearch.password:pass\")\n      .applyTo(context);\n    Access.registerElasticsearchHttp(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\n    Client<HttpRequest, HttpResponse> decorated = factory.options.decoration()\n      .decorate(HttpRequest.class, HttpResponse.class, delegate);\n\n    \r\n    HttpRequest req = HttpRequest.of(HttpMethod.GET, \"/\");\n    ClientRequestContext ctx = spy(ClientRequestContext.of(req));\n    when(delegate.execute(any(), any())).thenReturn(HttpResponse.of(HttpStatus.OK));\n\n    decorated.execute(ctx, req);\n\n    verify(ctx).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION), any());\n  }\n","date":"2019-07-30 22:07:29","endLine":357,"groupId":"1651","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/2e/1d6ef68cfc28a24e8143b25617bea4bed83e89.src","preCode":"  @Test public void providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured()\n    throws Exception {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.username:somename\",\n      \"zipkin.storage.elasticsearch.password:pass\")\n      .applyTo(context);\n    Access.registerElasticsearchHttp(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\n    Client<HttpRequest, HttpResponse> decorated = factory.options.decoration()\n      .decorate(HttpRequest.class, HttpResponse.class, delegate);\n\n    \r\n    HttpRequest req = HttpRequest.of(HttpMethod.GET, \"/\");\n    ClientRequestContext ctx = spy(ClientRequestContext.of(req));\n    when(delegate.execute(any(), any())).thenReturn(HttpResponse.of(HttpStatus.OK));\n\n    decorated.execute(ctx, req);\n\n    verify(ctx).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION), any());\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"B"}],"commitId":"473fdc76991452c9c81b8bafa21a1e4b5322f568","commitMessage":"@@@Moves Elasticsearch Armeria client wiring to spring (#2711)\n\n","date":"2019-07-30 22:07:29","modifiedFileCount":"14","status":"B","submitter":"Adrian Cole"},{"authorTime":"2019-08-06 17:09:05","codes":[{"authorDate":"2019-08-06 17:09:05","commitOrder":2,"curCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured()\n    throws Exception {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\n    Client<HttpRequest, HttpResponse> decorated =\n      factory.options.decoration().decorate(HttpRequest.class, HttpResponse.class, delegate);\n\n    \r\n    HttpRequest req = HttpRequest.of(HttpMethod.GET, \"/\");\n    ClientRequestContext ctx = spy(ClientRequestContext.of(req));\n    when(delegate.execute(any(), any())).thenReturn(HttpResponse.of(HttpStatus.OK));\n\n    decorated.execute(ctx, req);\n\n    verify(ctx, never()).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION), any());\n  }\n","date":"2019-08-06 17:09:05","endLine":342,"groupId":"1651","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/7d/c3f08ea82e11672d06587dee27985d369ab775.src","preCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured()\n    throws Exception {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearchHttp(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\n    Client<HttpRequest, HttpResponse> decorated =\n      factory.options.decoration().decorate(HttpRequest.class, HttpResponse.class, delegate);\n\n    \r\n    HttpRequest req = HttpRequest.of(HttpMethod.GET, \"/\");\n    ClientRequestContext ctx = spy(ClientRequestContext.of(req));\n    when(delegate.execute(any(), any())).thenReturn(HttpResponse.of(HttpStatus.OK));\n\n    decorated.execute(ctx, req);\n\n    verify(ctx, never()).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION), any());\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"},{"authorDate":"2019-08-06 17:09:05","commitOrder":2,"curCode":"  @Test public void providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured()\n    throws Exception {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.username:somename\",\n      \"zipkin.storage.elasticsearch.password:pass\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\n    Client<HttpRequest, HttpResponse> decorated = factory.options.decoration()\n      .decorate(HttpRequest.class, HttpResponse.class, delegate);\n\n    \r\n    HttpRequest req = HttpRequest.of(HttpMethod.GET, \"/\");\n    ClientRequestContext ctx = spy(ClientRequestContext.of(req));\n    when(delegate.execute(any(), any())).thenReturn(HttpResponse.of(HttpStatus.OK));\n\n    decorated.execute(ctx, req);\n\n    verify(ctx).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION), any());\n  }\n","date":"2019-08-06 17:09:05","endLine":369,"groupId":"1651","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/7d/c3f08ea82e11672d06587dee27985d369ab775.src","preCode":"  @Test public void providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured()\n    throws Exception {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.username:somename\",\n      \"zipkin.storage.elasticsearch.password:pass\")\n      .applyTo(context);\n    Access.registerElasticsearchHttp(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\n    Client<HttpRequest, HttpResponse> decorated = factory.options.decoration()\n      .decorate(HttpRequest.class, HttpResponse.class, delegate);\n\n    \r\n    HttpRequest req = HttpRequest.of(HttpMethod.GET, \"/\");\n    ClientRequestContext ctx = spy(ClientRequestContext.of(req));\n    when(delegate.execute(any(), any())).thenReturn(HttpResponse.of(HttpStatus.OK));\n\n    decorated.execute(ctx, req);\n\n    verify(ctx).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION), any());\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"M"}],"commitId":"68412118cf8df493bb0e54beb223120663e5ce22","commitMessage":"@@@Instruments when STORAGE_THROTTLE_ENABLED=true (#2735)\n\n","date":"2019-08-06 17:09:05","modifiedFileCount":"14","status":"M","submitter":"Adrian Cole"},{"authorTime":"2019-09-23 10:13:35","codes":[{"authorDate":"2019-09-23 10:13:35","commitOrder":3,"curCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured()\n    throws Exception {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\n    Client<HttpRequest, HttpResponse> decorated =\n      factory.options.decoration().decorate(HttpRequest.class, HttpResponse.class, delegate);\n\n    HttpRequest req = HttpRequest.of(RequestHeaders.builder()\n      .method(HttpMethod.GET)\n      .scheme(\"http\")\n      .authority(\"localhost\")\n      .path(\"/\")\n      .build()\n    );\n    \r\n    ClientRequestContext ctx = spy(ClientRequestContext.of(req));\n    when(delegate.execute(any(), any())).thenReturn(HttpResponse.of(HttpStatus.OK));\n\n    decorated.execute(ctx, req);\n\n    verify(ctx, never()).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION), any());\n  }\n","date":"2019-09-23 10:13:35","endLine":320,"groupId":"1651","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/dd/74d22c3c0f8ced7e611f34c3ebbdc5aba02435.src","preCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured()\n    throws Exception {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\n    Client<HttpRequest, HttpResponse> decorated =\n      factory.options.decoration().decorate(HttpRequest.class, HttpResponse.class, delegate);\n\n    \r\n    HttpRequest req = HttpRequest.of(HttpMethod.GET, \"/\");\n    ClientRequestContext ctx = spy(ClientRequestContext.of(req));\n    when(delegate.execute(any(), any())).thenReturn(HttpResponse.of(HttpStatus.OK));\n\n    decorated.execute(ctx, req);\n\n    verify(ctx, never()).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION), any());\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"},{"authorDate":"2019-09-23 10:13:35","commitOrder":3,"curCode":"  @Test public void providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured()\n    throws Exception {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.username:somename\",\n      \"zipkin.storage.elasticsearch.password:pass\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\n    Client<HttpRequest, HttpResponse> decorated = factory.options.decoration()\n      .decorate(HttpRequest.class, HttpResponse.class, delegate);\n\n    HttpRequest req = HttpRequest.of(RequestHeaders.builder()\n      .method(HttpMethod.GET)\n      .scheme(\"http\")\n      .authority(\"localhost\")\n      .path(\"/\")\n      .build()\n    );\n    \r\n    ClientRequestContext ctx = spy(ClientRequestContext.of(req));\n    when(delegate.execute(any(), any())).thenReturn(HttpResponse.of(HttpStatus.OK));\n\n    decorated.execute(ctx, req);\n\n    verify(ctx).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION), any());\n  }\n","date":"2019-09-23 10:13:35","endLine":353,"groupId":"1651","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/dd/74d22c3c0f8ced7e611f34c3ebbdc5aba02435.src","preCode":"  @Test public void providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured()\n    throws Exception {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.username:somename\",\n      \"zipkin.storage.elasticsearch.password:pass\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\n    Client<HttpRequest, HttpResponse> decorated = factory.options.decoration()\n      .decorate(HttpRequest.class, HttpResponse.class, delegate);\n\n    \r\n    HttpRequest req = HttpRequest.of(HttpMethod.GET, \"/\");\n    ClientRequestContext ctx = spy(ClientRequestContext.of(req));\n    when(delegate.execute(any(), any())).thenReturn(HttpResponse.of(HttpStatus.OK));\n\n    decorated.execute(ctx, req);\n\n    verify(ctx).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION), any());\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"M"}],"commitId":"1214e77c08b63529f4f3d7416d45bc09e24e3df3","commitMessage":"@@@Updates to Armeria 0.92 and cleans up things (#2813)\n\n","date":"2019-09-23 10:13:35","modifiedFileCount":"32","status":"M","submitter":"Adrian Cole"},{"authorTime":"2019-12-08 16:51:25","codes":[{"authorDate":"2019-12-08 16:51:25","commitOrder":4,"curCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured() {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOption.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isEmpty();\n  }\n","date":"2019-12-08 16:51:25","endLine":291,"groupId":"1666","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/75/6f0b2768c9a20ab4b3d4093aa90dd17d54fe5c.src","preCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured()\n    throws Exception {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\n    Client<HttpRequest, HttpResponse> decorated =\n      factory.options.decoration().decorate(HttpRequest.class, HttpResponse.class, delegate);\n\n    HttpRequest req = HttpRequest.of(RequestHeaders.builder()\n      .method(HttpMethod.GET)\n      .scheme(\"http\")\n      .authority(\"localhost\")\n      .path(\"/\")\n      .build()\n    );\n    \r\n    ClientRequestContext ctx = spy(ClientRequestContext.of(req));\n    when(delegate.execute(any(), any())).thenReturn(HttpResponse.of(HttpStatus.OK));\n\n    decorated.execute(ctx, req);\n\n    verify(ctx, never()).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION), any());\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"},{"authorDate":"2019-12-08 16:51:25","commitOrder":4,"curCode":"  @Test public void providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured() {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.username:somename\",\n      \"zipkin.storage.elasticsearch.password:pass\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOption.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isPresent();\n  }\n","date":"2019-12-08 16:51:25","endLine":309,"groupId":"1666","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/75/6f0b2768c9a20ab4b3d4093aa90dd17d54fe5c.src","preCode":"  @Test public void providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured()\n    throws Exception {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.username:somename\",\n      \"zipkin.storage.elasticsearch.password:pass\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\n    Client<HttpRequest, HttpResponse> decorated = factory.options.decoration()\n      .decorate(HttpRequest.class, HttpResponse.class, delegate);\n\n    HttpRequest req = HttpRequest.of(RequestHeaders.builder()\n      .method(HttpMethod.GET)\n      .scheme(\"http\")\n      .authority(\"localhost\")\n      .path(\"/\")\n      .build()\n    );\n    \r\n    ClientRequestContext ctx = spy(ClientRequestContext.of(req));\n    when(delegate.execute(any(), any())).thenReturn(HttpResponse.of(HttpStatus.OK));\n\n    decorated.execute(ctx, req);\n\n    verify(ctx).addAdditionalRequestHeader(eq(HttpHeaderNames.AUTHORIZATION), any());\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"}],"commitId":"05bfa8f33cfe50ac5a8ba899636c77b07e47f044","commitMessage":"@@@Update to Armeria 0.97.0 (#2943)\n\n* Update to Armeria 0.97.0\n\n* Update benchmark too\n","date":"2019-12-08 16:51:25","modifiedFileCount":"22","status":"M","submitter":"Anuraag Agrawal"},{"authorTime":"2020-02-25 15:32:20","codes":[{"authorDate":"2020-02-25 15:32:20","commitOrder":5,"curCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured() {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOption.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isNull();\n  }\n","date":"2020-02-25 15:32:20","endLine":291,"groupId":"1666","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/b8/e8d1931177531aa381efaee1d0a53cfb4fbb2d.src","preCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured() {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOption.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isEmpty();\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"},{"authorDate":"2020-02-25 15:32:20","commitOrder":5,"curCode":"  @Test public void providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured() {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.username:somename\",\n      \"zipkin.storage.elasticsearch.password:pass\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOption.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isNotNull();\n  }\n","date":"2020-02-25 15:32:20","endLine":309,"groupId":"1666","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/b8/e8d1931177531aa381efaee1d0a53cfb4fbb2d.src","preCode":"  @Test public void providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured() {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.username:somename\",\n      \"zipkin.storage.elasticsearch.password:pass\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOption.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isPresent();\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"}],"commitId":"7f60427c86daf1e35aefcd911edbc3ca8025b246","commitMessage":"@@@Migrate to Armeria 0.98.2 (#2977)\n\n* Migrate to Armeria 0.98.1\n\n* Exclamation\n\n* Scrubs\n\n* Remove RawContentLogger\n\n* Workaround https://github.com/line/armeria/issues/2493\n\n* Different exception\n\n* 0.98.2 and fixes\n\n* Man\n\n* Nice test\n","date":"2020-02-25 15:32:20","modifiedFileCount":"14","status":"M","submitter":"Anuraag Agrawal"},{"authorTime":"2020-08-07 11:57:00","codes":[{"authorDate":"2020-08-07 11:57:00","commitOrder":6,"curCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured() {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOptions.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isNull();\n  }\n","date":"2020-08-07 11:57:00","endLine":293,"groupId":"1050","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/73/cdd87ff47d2c0aa32e94686943903cf7175fb0.src","preCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured() {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOption.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isNull();\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"},{"authorDate":"2020-08-07 11:57:00","commitOrder":6,"curCode":"  @Test public void providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured() {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.username:somename\",\n      \"zipkin.storage.elasticsearch.password:pass\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOptions.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isNotNull();\n  }\n","date":"2020-08-07 11:57:00","endLine":311,"groupId":"1050","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/73/cdd87ff47d2c0aa32e94686943903cf7175fb0.src","preCode":"  @Test public void providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured() {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.username:somename\",\n      \"zipkin.storage.elasticsearch.password:pass\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOption.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isNotNull();\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"M"}],"commitId":"1845702272992ec430af6dc23a340186b5c9d285","commitMessage":"@@@Update Armeria and Netty dependencies (#3167)\n\nArmeria 0.99.8 -> 0.99.9\nNetty 4.1.50.Final -> 4.1.51.Final","date":"2020-08-07 11:57:00","modifiedFileCount":"11","status":"M","submitter":"minux"}]
