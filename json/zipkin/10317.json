[{"authorTime":"2019-08-22 14:08:49","codes":[{"authorDate":"2019-08-22 14:08:49","commitOrder":4,"curCode":"  @Benchmark public HttpRequest buildAndWriteRequest_singleSpan() {\n    BulkCallBuilder builder = new BulkCallBuilder(es, 6.7f, \"index-span\");\n    builder.index(spanIndex, \"span\", CLIENT_SPAN, BulkIndexWriter.SPAN);\n    HttpCall.RequestSupplier supplier =  builder.build().request;\n    HttpRequestWriter request = HttpRequest.streaming(supplier.headers());\n    supplier.writeBody(request::tryWrite);\n    return request;\n  }\n","date":"2019-08-22 14:08:49","endLine":72,"groupId":"1876","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildAndWriteRequest_singleSpan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/6f/433e3ec836a00a1171e639af279de0654512c0.src","preCode":"  @Benchmark public HttpRequest buildAndWriteRequest_singleSpan() {\n    BulkCallBuilder builder = new BulkCallBuilder(es, 6.7f, \"index-span\");\n    builder.index(spanIndex, \"span\", CLIENT_SPAN, BulkIndexWriter.SPAN);\n    HttpCall.RequestSupplier supplier =  builder.build().request;\n    HttpRequestWriter request = HttpRequest.streaming(supplier.headers());\n    supplier.writeBody(request::tryWrite);\n    return request;\n  }\n","realPath":"benchmarks/src/main/java/zipkin2/elasticsearch/internal/BulkRequestBenchmarks.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2019-08-22 14:08:49","commitOrder":4,"curCode":"  @Benchmark public HttpRequest buildAndWriteRequest_tenSpans() {\n    BulkCallBuilder builder = new BulkCallBuilder(es, 6.7f, \"index-span\");\n    for (int i = 0; i < 10; i++) {\n      builder.index(spanIndex, \"span\", CLIENT_SPAN, BulkIndexWriter.SPAN);\n    }\n    HttpCall.RequestSupplier supplier =  builder.build().request;\n    HttpRequestWriter request = HttpRequest.streaming(supplier.headers());\n    supplier.writeBody(request::tryWrite);\n    return request;\n  }\n","date":"2019-08-22 14:08:49","endLine":83,"groupId":"1876","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildAndWriteRequest_tenSpans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/6f/433e3ec836a00a1171e639af279de0654512c0.src","preCode":"  @Benchmark public HttpRequest buildAndWriteRequest_tenSpans() {\n    BulkCallBuilder builder = new BulkCallBuilder(es, 6.7f, \"index-span\");\n    for (int i = 0; i < 10; i++) {\n      builder.index(spanIndex, \"span\", CLIENT_SPAN, BulkIndexWriter.SPAN);\n    }\n    HttpCall.RequestSupplier supplier =  builder.build().request;\n    HttpRequestWriter request = HttpRequest.streaming(supplier.headers());\n    supplier.writeBody(request::tryWrite);\n    return request;\n  }\n","realPath":"benchmarks/src/main/java/zipkin2/elasticsearch/internal/BulkRequestBenchmarks.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"MB"}],"commitId":"8423afc56c0bdc4bfca15ec43b5add974c383405","commitMessage":"@@@Define an interface for supplying a request to give call sites more c? (#2761)\n\n* Define an interface for supplying a request to give call sites more control over how the request is created (e.g..  using pooled buffers or streaming).\n\n* Don't serialize if request aborted.\n\n* Refactor\n\n* Test\n\n* Fix\n\n* Better test\n\n* javadoc drifted\n","date":"2019-08-22 14:08:49","modifiedFileCount":"4","status":"M","submitter":"Anuraag Agrawal"},{"authorTime":"2020-12-25 09:44:40","codes":[{"authorDate":"2020-12-25 09:44:40","commitOrder":5,"curCode":"  @Benchmark public HttpRequest buildAndWriteRequest_singleSpan() {\n    BulkCallBuilder builder = new BulkCallBuilder(es, V6_0, \"index-span\");\n    builder.index(spanIndex, \"span\", CLIENT_SPAN, BulkIndexWriter.SPAN);\n    HttpCall.RequestSupplier supplier = builder.build().request;\n    HttpRequestWriter request = HttpRequest.streaming(supplier.headers());\n    supplier.writeBody(request::tryWrite);\n    return request;\n  }\n","date":"2020-12-25 09:44:40","endLine":74,"groupId":"10317","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"buildAndWriteRequest_singleSpan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/05/1d046ccc4a870b0a6e3d0faf427c4c4a5092ab.src","preCode":"  @Benchmark public HttpRequest buildAndWriteRequest_singleSpan() {\n    BulkCallBuilder builder = new BulkCallBuilder(es, 6.7f, \"index-span\");\n    builder.index(spanIndex, \"span\", CLIENT_SPAN, BulkIndexWriter.SPAN);\n    HttpCall.RequestSupplier supplier =  builder.build().request;\n    HttpRequestWriter request = HttpRequest.streaming(supplier.headers());\n    supplier.writeBody(request::tryWrite);\n    return request;\n  }\n","realPath":"benchmarks/src/main/java/zipkin2/elasticsearch/internal/BulkRequestBenchmarks.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-12-25 09:44:40","commitOrder":5,"curCode":"  @Benchmark public HttpRequest buildAndWriteRequest_tenSpans() {\n    BulkCallBuilder builder = new BulkCallBuilder(es, V6_0, \"index-span\");\n    for (int i = 0; i < 10; i++) {\n      builder.index(spanIndex, \"span\", CLIENT_SPAN, BulkIndexWriter.SPAN);\n    }\n    HttpCall.RequestSupplier supplier = builder.build().request;\n    HttpRequestWriter request = HttpRequest.streaming(supplier.headers());\n    supplier.writeBody(request::tryWrite);\n    return request;\n  }\n","date":"2020-12-25 09:44:40","endLine":85,"groupId":"10317","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"buildAndWriteRequest_tenSpans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/05/1d046ccc4a870b0a6e3d0faf427c4c4a5092ab.src","preCode":"  @Benchmark public HttpRequest buildAndWriteRequest_tenSpans() {\n    BulkCallBuilder builder = new BulkCallBuilder(es, 6.7f, \"index-span\");\n    for (int i = 0; i < 10; i++) {\n      builder.index(spanIndex, \"span\", CLIENT_SPAN, BulkIndexWriter.SPAN);\n    }\n    HttpCall.RequestSupplier supplier =  builder.build().request;\n    HttpRequestWriter request = HttpRequest.streaming(supplier.headers());\n    supplier.writeBody(request::tryWrite);\n    return request;\n  }\n","realPath":"benchmarks/src/main/java/zipkin2/elasticsearch/internal/BulkRequestBenchmarks.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"ad8520e1e535d52d9f20a94a1086924726158a05","commitMessage":"@@@Adds support for Elasticsearch 7.10 (#3333)\n\nThis fixes a comparison bug which installed the incorrect template.\n\nWhat happened was v7.10 was mistaken for v7.1","date":"2020-12-25 09:44:40","modifiedFileCount":"12","status":"M","submitter":"Adrian Cole"}]
