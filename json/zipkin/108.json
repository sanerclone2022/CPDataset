[{"authorTime":"2019-07-18 17:29:01","codes":[{"authorDate":"2019-07-18 17:29:01","commitOrder":1,"curCode":"  @Test public void postIsTraced_v1() throws Exception {\n    post(\"v1\");\n\n    awaitSpans();\n\n    assertThat(getTraces(QueryRequest.newBuilder()\n      .annotationQuery(singletonMap(\"http.path\", \"/api/v1/spans\")))).isNotEmpty();\n\n    assertThat(getTraces(QueryRequest.newBuilder().spanName(\"accept-spans\"))).isNotEmpty();\n  }\n","date":"2019-07-18 17:29:01","endLine":89,"groupId":"631","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"postIsTraced_v1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/80/cd675e5bcad299253d5d6bb03eb09e585f5fec.src","preCode":"  @Test public void postIsTraced_v1() throws Exception {\n    post(\"v1\");\n\n    awaitSpans();\n\n    assertThat(getTraces(QueryRequest.newBuilder()\n      .annotationQuery(singletonMap(\"http.path\", \"/api/v1/spans\")))).isNotEmpty();\n\n    assertThat(getTraces(QueryRequest.newBuilder().spanName(\"accept-spans\"))).isNotEmpty();\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/brave/ITZipkinSelfTracing.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"},{"authorDate":"2019-07-18 17:29:01","commitOrder":1,"curCode":"  @Test public void postIsTraced_v2() throws Exception {\n    post(\"v2\");\n\n    awaitSpans();\n\n    assertThat(getTraces(QueryRequest.newBuilder()\n      .annotationQuery(singletonMap(\"http.path\", \"/api/v2/spans\")))).isNotEmpty();\n\n    assertThat(getTraces(QueryRequest.newBuilder().spanName(\"accept-spans\"))).isNotEmpty();\n  }\n","date":"2019-07-18 17:29:01","endLine":100,"groupId":"631","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"postIsTraced_v2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/80/cd675e5bcad299253d5d6bb03eb09e585f5fec.src","preCode":"  @Test public void postIsTraced_v2() throws Exception {\n    post(\"v2\");\n\n    awaitSpans();\n\n    assertThat(getTraces(QueryRequest.newBuilder()\n      .annotationQuery(singletonMap(\"http.path\", \"/api/v2/spans\")))).isNotEmpty();\n\n    assertThat(getTraces(QueryRequest.newBuilder().spanName(\"accept-spans\"))).isNotEmpty();\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/brave/ITZipkinSelfTracing.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"}],"commitId":"cc6912779526ffa72523bf85f68511104bc2999e","commitMessage":"@@@Trace storage commands (#2682)\n\n","date":"2019-07-18 17:29:01","modifiedFileCount":"4","status":"B","submitter":"Adrian Cole"},{"authorTime":"2019-08-24 21:27:44","codes":[{"authorDate":"2019-08-24 21:27:44","commitOrder":2,"curCode":"  public void postIsTraced_v1() throws Exception {\n    postSpan(\"v1\");\n\n    List<List<Span>> traces = awaitSpans(3); \r\n\n    assertQueryReturnsResults(QueryRequest.newBuilder()\n      .annotationQuery(singletonMap(\"http.path\", \"/api/v1/spans\")), traces);\n\n    assertQueryReturnsResults(QueryRequest.newBuilder().spanName(\"accept-spans\"), traces);\n  }\n","date":"2019-08-24 21:27:44","endLine":96,"groupId":"108","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"postIsTraced_v1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/b2/5485ce2cf54295bf788f96938b4662f8317bac.src","preCode":"  @Test public void postIsTraced_v1() throws Exception {\n    post(\"v1\");\n\n    awaitSpans();\n\n    assertThat(getTraces(QueryRequest.newBuilder()\n      .annotationQuery(singletonMap(\"http.path\", \"/api/v1/spans\")))).isNotEmpty();\n\n    assertThat(getTraces(QueryRequest.newBuilder().spanName(\"accept-spans\"))).isNotEmpty();\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/brave/ITZipkinSelfTracing.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2019-08-24 21:27:44","commitOrder":2,"curCode":"  public void postIsTraced_v2() throws Exception {\n    postSpan(\"v2\");\n\n    List<List<Span>> traces = awaitSpans(3); \r\n\n    assertQueryReturnsResults(QueryRequest.newBuilder()\n      .annotationQuery(singletonMap(\"http.path\", \"/api/v2/spans\")), traces);\n\n    assertQueryReturnsResults(QueryRequest.newBuilder().spanName(\"accept-spans\"), traces);\n  }\n","date":"2019-08-24 21:27:44","endLine":108,"groupId":"108","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"postIsTraced_v2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/b2/5485ce2cf54295bf788f96938b4662f8317bac.src","preCode":"  @Test public void postIsTraced_v2() throws Exception {\n    post(\"v2\");\n\n    awaitSpans();\n\n    assertThat(getTraces(QueryRequest.newBuilder()\n      .annotationQuery(singletonMap(\"http.path\", \"/api/v2/spans\")))).isNotEmpty();\n\n    assertThat(getTraces(QueryRequest.newBuilder().spanName(\"accept-spans\"))).isNotEmpty();\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/brave/ITZipkinSelfTracing.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"afd63b55d7d710ee607e99d3f393f3109e3e4a9e","commitMessage":"@@@Fixes thread safety bug on in-memory storage regarding accept count (#2779)\n\nBefore.  we were using an unsafe means to increment a counter for the\nin-memory storage. This contributed to a test flake. This fixes the\nstate bug and also tightens up the flakey test.\n\nThe flakey test still exists.  so is disabled for now.\n","date":"2019-08-24 21:27:44","modifiedFileCount":"2","status":"M","submitter":"Adrian Cole"}]
