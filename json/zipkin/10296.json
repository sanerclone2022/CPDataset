[{"authorTime":"2019-05-06 19:43:58","codes":[{"authorDate":"2019-05-06 19:43:58","commitOrder":2,"curCode":"  @Test public void getTraces_serviceNames() throws Exception {\n    accept(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(\"frontend\" + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched even with invalid service name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(\"frontend\")\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .remoteServiceName(CLIENT_SPAN.remoteServiceName() + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched even with invalid remote service name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .remoteServiceName(CLIENT_SPAN.remoteServiceName())\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n  }\n","date":"2019-05-06 21:18:27","endLine":229,"groupId":"1066","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getTraces_serviceNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/ed/ac7a5b6569e72145cb8eca9894ade122bc9e3c.src","preCode":"  @Test public void getTraces_serviceNames() throws Exception {\n    accept(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(\"frontend\" + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched even with invalid service name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(\"frontend\")\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .remoteServiceName(CLIENT_SPAN.remoteServiceName() + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched even with invalid remote service name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .remoteServiceName(CLIENT_SPAN.remoteServiceName())\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITSpanStore.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"B"},{"authorDate":"2019-05-06 19:43:58","commitOrder":2,"curCode":"  @Test public void getTraces_spanName() throws Exception {\n    accept(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .spanName(CLIENT_SPAN.name() + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched with an invalid span name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .spanName(CLIENT_SPAN.name() + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched with a value service name, but an invalid span name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .spanName(CLIENT_SPAN.name())\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .spanName(CLIENT_SPAN.name())\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n  }\n","date":"2019-05-06 21:18:27","endLine":266,"groupId":"2134","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getTraces_spanName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/ed/ac7a5b6569e72145cb8eca9894ade122bc9e3c.src","preCode":"  @Test public void getTraces_spanName() throws Exception {\n    accept(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .spanName(CLIENT_SPAN.name() + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched with an invalid span name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .spanName(CLIENT_SPAN.name() + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched with a value service name, but an invalid span name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .spanName(CLIENT_SPAN.name())\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .spanName(CLIENT_SPAN.name())\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITSpanStore.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"MB"}],"commitId":"ff0be70b4a762519827fe8a8fbabd08d754adefc","commitMessage":"@@@Compresses similar integration tests to reduce overall runtime\n","date":"2019-05-06 21:18:27","modifiedFileCount":"2","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-03-11 18:07:43","codes":[{"authorDate":"2020-03-11 18:07:43","commitOrder":3,"curCode":"  @Test protected void getTraces_serviceNames() throws Exception {\n    accept(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(\"frontend\" + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched even with invalid service name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(\"frontend\")\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .remoteServiceName(CLIENT_SPAN.remoteServiceName() + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched even with invalid remote service name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .remoteServiceName(CLIENT_SPAN.remoteServiceName())\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n  }\n","date":"2020-03-11 18:07:43","endLine":229,"groupId":"1066","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getTraces_serviceNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/96/ef18602349647d6476416852890ef243bfd11d.src","preCode":"  @Test public void getTraces_serviceNames() throws Exception {\n    accept(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(\"frontend\" + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched even with invalid service name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(\"frontend\")\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .remoteServiceName(CLIENT_SPAN.remoteServiceName() + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched even with invalid remote service name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .remoteServiceName(CLIENT_SPAN.remoteServiceName())\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITSpanStore.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"},{"authorDate":"2020-03-11 18:07:43","commitOrder":3,"curCode":"  @Test protected void getTraces_spanName() throws Exception {\n    accept(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .spanName(CLIENT_SPAN.name() + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched with an invalid span name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .spanName(CLIENT_SPAN.name() + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched with a value service name, but an invalid span name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .spanName(CLIENT_SPAN.name())\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .spanName(CLIENT_SPAN.name())\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n  }\n","date":"2020-03-11 18:07:43","endLine":266,"groupId":"2134","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getTraces_spanName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/96/ef18602349647d6476416852890ef243bfd11d.src","preCode":"  @Test public void getTraces_spanName() throws Exception {\n    accept(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .spanName(CLIENT_SPAN.name() + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched with an invalid span name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .spanName(CLIENT_SPAN.name() + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched with a value service name, but an invalid span name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .spanName(CLIENT_SPAN.name())\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .spanName(CLIENT_SPAN.name())\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITSpanStore.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"946b96ce18e9b5cdc31bb447bcf09dc1df383f0f","commitMessage":"@@@Fixes incorrect handling of getTrace and IT access modifiers (#3019)\n\nI noticed porting zipkin-voltdb to latest.  that we incorrectly handled\ngetTrace in some places. Basically.  we treated a non-nullable result as\nnullable. This fixes that and also corrects method protection so that\nsubclasses of the IT can override (ex to ignore).","date":"2020-03-11 18:07:43","modifiedFileCount":"12","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-10-21 10:53:01","codes":[{"authorDate":"2020-10-21 10:53:01","commitOrder":4,"curCode":"  void getTraces_serviceNames(Span clientSpan) throws Exception {\n    accept(clientSpan);\n\n    assertGetTracesReturnsEmpty(\n      requestBuilder().serviceName(clientSpan.localServiceName() + 1).build());\n\n    assertGetTracesReturns(\n      requestBuilder().serviceName(clientSpan.localServiceName()).build(),\n      asList(clientSpan));\n\n    assertGetTracesReturnsEmpty(\n      requestBuilder()\n        .serviceName(clientSpan.localServiceName())\n        .remoteServiceName(clientSpan.remoteServiceName() + 1)\n        .build());\n\n    assertGetTracesReturns(\n      requestBuilder()\n        .serviceName(clientSpan.localServiceName())\n        .remoteServiceName(clientSpan.remoteServiceName())\n        .build(),\n      asList(clientSpan));\n  }\n","date":"2020-10-21 10:53:01","endLine":241,"groupId":"10296","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getTraces_serviceNames","params":"(SpanclientSpan)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/87/fe48d363de664b28196f167c663bd0ee5ef641.src","preCode":"  @Test protected void getTraces_serviceNames() throws Exception {\n    accept(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(\"frontend\" + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched even with invalid service name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(\"frontend\")\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .remoteServiceName(CLIENT_SPAN.remoteServiceName() + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched even with invalid remote service name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .remoteServiceName(CLIENT_SPAN.remoteServiceName())\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITSpanStore.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2020-10-21 10:53:01","commitOrder":4,"curCode":"  void getTraces_spanName(Span clientSpan) throws Exception {\n    accept(clientSpan);\n\n    assertGetTracesReturnsEmpty(\n      requestBuilder().spanName(clientSpan.name() + 1).build());\n\n    assertGetTracesReturnsEmpty(\n      requestBuilder()\n        .serviceName(clientSpan.localServiceName())\n        .spanName(clientSpan.name() + 1)\n        .build());\n\n    assertGetTracesReturns(\n      requestBuilder().spanName(clientSpan.name()).build(),\n      asList(clientSpan));\n\n    assertGetTracesReturns(\n      requestBuilder()\n        .serviceName(clientSpan.localServiceName())\n        .spanName(clientSpan.name())\n        .build(),\n      asList(clientSpan));\n  }\n","date":"2020-10-21 10:53:01","endLine":285,"groupId":"10296","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getTraces_spanName","params":"(SpanclientSpan)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/87/fe48d363de664b28196f167c663bd0ee5ef641.src","preCode":"  @Test protected void getTraces_spanName() throws Exception {\n    accept(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .spanName(CLIENT_SPAN.name() + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched with an invalid span name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .spanName(CLIENT_SPAN.name() + 1)\n      .build()).execute())\n      .withFailMessage(\"Results matched with a value service name, but an invalid span name\")\n      .isEmpty();\n\n    assertThat(store().getTraces(requestBuilder()\n      .spanName(CLIENT_SPAN.name())\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n\n    assertThat(store().getTraces(requestBuilder()\n      .serviceName(CLIENT_SPAN.localServiceName())\n      .spanName(CLIENT_SPAN.name())\n      .build()).execute()).flatExtracting(l -> l).contains(CLIENT_SPAN);\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITSpanStore.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"}],"commitId":"eeb17681af780e563b44503d5af1eadb3ca6abfc","commitMessage":"@@@Refactors integration tests to be more isolated (#3249)\n\nThis makes all integration tests use unique data. Notably.  they no\nlonger use constant trace ID or service names.  as this can lead to\ndifficulty when a keyspace is re-used. For example.  service names and\ntrace IDs are often partitions. When debugging it is easier when test\ndata is isolated by a service name as it can be easily queried.\n\nThis also pulls the heaviest tests into their own classes so that they\ndon't overload the storage containers used by the bulk of our tests.\n\nFinally.  this fixes a few glitches in the v1 cassandra storage.","date":"2020-10-21 10:53:01","modifiedFileCount":"46","status":"M","submitter":"Adrian Cole"}]
