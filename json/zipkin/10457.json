[{"authorTime":"2019-05-02 12:01:47","codes":[{"authorDate":"2019-05-02 12:01:47","commitOrder":2,"curCode":"  public void skipsMalformedData() throws Exception {\n    KafkaCollector.Builder builder = builder(\"decoder_exception\");\n\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n    produceSpans(new byte[0], builder.topic);\n    produceSpans(malformed1, builder.topic);\n    produceSpans(malformed2, builder.topic);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n      \r\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n    }\n\n    assertThat(kafkaMetrics.messages()).isEqualTo(5);\n    assertThat(kafkaMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(kafkaMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(kafkaMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(kafkaMetrics.spansDropped()).isZero();\n  }\n","date":"2019-05-02 12:01:47","endLine":235,"groupId":"780","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"skipsMalformedData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/09/90128931bb91567dde8bc417843a046538c4c3.src","preCode":"  public void skipsMalformedData() throws Exception {\n    KafkaCollector.Builder builder = builder(\"decoder_exception\");\n\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n    produceSpans(new byte[0], builder.topic);\n    produceSpans(malformed1, builder.topic);\n    produceSpans(malformed2, builder.topic);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n      \r\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n    }\n\n    assertThat(kafkaMetrics.messages()).isEqualTo(5);\n    assertThat(kafkaMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(kafkaMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(kafkaMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(kafkaMetrics.spansDropped()).isZero();\n  }\n","realPath":"zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/ITKafkaCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"B"},{"authorDate":"2019-05-02 12:01:47","commitOrder":2,"curCode":"  public void skipsMalformedData() throws Exception {\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    rabbit.publish(THRIFT.encodeList(spans));\n    rabbit.publish(new byte[0]);\n    rabbit.publish(malformed1);\n    rabbit.publish(malformed2);\n    rabbit.publish(THRIFT.encodeList(spans));\n\n    Thread.sleep(1000);\n\n    assertThat(rabbit.rabbitmqMetrics.messages()).isEqualTo(5);\n    assertThat(rabbit.rabbitmqMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(rabbit.rabbitmqMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(rabbit.rabbitmqMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(rabbit.rabbitmqMetrics.spansDropped()).isZero();\n  }\n","date":"2019-05-02 12:01:47","endLine":123,"groupId":"2658","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"skipsMalformedData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/45/359dcb5bc9ab0dead9bf6b1c582d933aa9d516.src","preCode":"  public void skipsMalformedData() throws Exception {\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    rabbit.publish(THRIFT.encodeList(spans));\n    rabbit.publish(new byte[0]);\n    rabbit.publish(malformed1);\n    rabbit.publish(malformed2);\n    rabbit.publish(THRIFT.encodeList(spans));\n\n    Thread.sleep(1000);\n\n    assertThat(rabbit.rabbitmqMetrics.messages()).isEqualTo(5);\n    assertThat(rabbit.rabbitmqMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(rabbit.rabbitmqMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(rabbit.rabbitmqMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(rabbit.rabbitmqMetrics.spansDropped()).isZero();\n  }\n","realPath":"zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ITRabbitMQCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"MB"}],"commitId":"134b53c4abb1b3209a534799b8cdc901478dbb56","commitMessage":"@@@Fixes logging and metrics for collectors (#2552)\n\nBefore.  we were inconsistent about incrementing metrics.  and in worst\ncase.  we double-incremented. This adds tests for the messaging based\ncollectors and backfills tests to make the base Collector class 100%\ncoverage.\n\nSeparately.  we have recently changed our web endpoint to produce its\nown error messages to the client. In other words.  we no longer rely on\n(often unnecessary) wrapping of exceptions to correct the message being\nsent back. This changes the logic around message formatting so it is\nonly used when logging is enabled.\n","date":"2019-05-02 12:01:47","modifiedFileCount":"15","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-05-26 13:57:47","codes":[{"authorDate":"2019-05-02 12:01:47","commitOrder":3,"curCode":"  public void skipsMalformedData() throws Exception {\n    KafkaCollector.Builder builder = builder(\"decoder_exception\");\n\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n    produceSpans(new byte[0], builder.topic);\n    produceSpans(malformed1, builder.topic);\n    produceSpans(malformed2, builder.topic);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n      \r\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n    }\n\n    assertThat(kafkaMetrics.messages()).isEqualTo(5);\n    assertThat(kafkaMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(kafkaMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(kafkaMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(kafkaMetrics.spansDropped()).isZero();\n  }\n","date":"2019-05-02 12:01:47","endLine":235,"groupId":"780","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"skipsMalformedData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/09/90128931bb91567dde8bc417843a046538c4c3.src","preCode":"  public void skipsMalformedData() throws Exception {\n    KafkaCollector.Builder builder = builder(\"decoder_exception\");\n\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n    produceSpans(new byte[0], builder.topic);\n    produceSpans(malformed1, builder.topic);\n    produceSpans(malformed2, builder.topic);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n      \r\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n    }\n\n    assertThat(kafkaMetrics.messages()).isEqualTo(5);\n    assertThat(kafkaMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(kafkaMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(kafkaMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(kafkaMetrics.spansDropped()).isZero();\n  }\n","realPath":"zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/ITKafkaCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"N"},{"authorDate":"2020-05-26 13:57:47","commitOrder":3,"curCode":"  @Test public void skipsMalformedData() throws Exception {\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    publish(THRIFT.encodeList(spans));\n    publish(new byte[0]);\n    publish(malformed1);\n    publish(malformed2);\n    publish(THRIFT.encodeList(spans));\n\n    Thread.sleep(200L);\n\n    assertThat(rabbitmqMetrics.messages()).isEqualTo(5);\n    assertThat(rabbitmqMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(rabbitmqMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(rabbitmqMetrics.spansDropped()).isZero();\n  }\n","date":"2020-05-26 13:57:47","endLine":96,"groupId":"776","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"skipsMalformedData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/f7/b2632fda140f67ade77d0151b48d160aeda852.src","preCode":"  public void skipsMalformedData() throws Exception {\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    rabbit.publish(THRIFT.encodeList(spans));\n    rabbit.publish(new byte[0]);\n    rabbit.publish(malformed1);\n    rabbit.publish(malformed2);\n    rabbit.publish(THRIFT.encodeList(spans));\n\n    Thread.sleep(1000);\n\n    assertThat(rabbit.rabbitmqMetrics.messages()).isEqualTo(5);\n    assertThat(rabbit.rabbitmqMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(rabbit.rabbitmqMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(rabbit.rabbitmqMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(rabbit.rabbitmqMetrics.spansDropped()).isZero();\n  }\n","realPath":"zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ITRabbitMQCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"aedded56faeae9c5bc92bad6cb4bc6e6a2704071","commitMessage":"@@@Stops looking for local RabbitMQ connection (#3093)\n\nThis improves the Docker based RabbitMQ tests in the same manner as\nhttps://github.com/openzipkin/zipkin-reporter-java/pull/176\n\nThis notably stops looking for a local RabbitMQ install. It also reduces\nflakes by using the CLI and not sharing static collector resources in\ninstance-level tests.\n","date":"2020-05-26 13:57:47","modifiedFileCount":"5","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-05-26 13:57:47","codes":[{"authorDate":"2020-11-11 13:54:53","commitOrder":4,"curCode":"  @Test public void skipsMalformedData() throws Exception {\n    KafkaCollector.Builder builder = builder(\"decoder_exception\");\n\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n    produceSpans(new byte[0], builder.topic);\n    produceSpans(malformed1, builder.topic);\n    produceSpans(malformed2, builder.topic);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n      \r\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n    }\n\n    assertThat(kafkaMetrics.messages()).isEqualTo(5);\n    assertThat(kafkaMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(kafkaMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(kafkaMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(kafkaMetrics.spansDropped()).isZero();\n  }\n","date":"2020-11-11 13:54:53","endLine":213,"groupId":"780","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"skipsMalformedData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/8a/ac9c202ef0e904aadecaa476c7d531993f9d37.src","preCode":"  public void skipsMalformedData() throws Exception {\n    KafkaCollector.Builder builder = builder(\"decoder_exception\");\n\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n    produceSpans(new byte[0], builder.topic);\n    produceSpans(malformed1, builder.topic);\n    produceSpans(malformed2, builder.topic);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n      \r\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n    }\n\n    assertThat(kafkaMetrics.messages()).isEqualTo(5);\n    assertThat(kafkaMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(kafkaMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(kafkaMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(kafkaMetrics.spansDropped()).isZero();\n  }\n","realPath":"zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/ITKafkaCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"},{"authorDate":"2020-05-26 13:57:47","commitOrder":4,"curCode":"  @Test public void skipsMalformedData() throws Exception {\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    publish(THRIFT.encodeList(spans));\n    publish(new byte[0]);\n    publish(malformed1);\n    publish(malformed2);\n    publish(THRIFT.encodeList(spans));\n\n    Thread.sleep(200L);\n\n    assertThat(rabbitmqMetrics.messages()).isEqualTo(5);\n    assertThat(rabbitmqMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(rabbitmqMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(rabbitmqMetrics.spansDropped()).isZero();\n  }\n","date":"2020-05-26 13:57:47","endLine":96,"groupId":"776","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"skipsMalformedData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/f7/b2632fda140f67ade77d0151b48d160aeda852.src","preCode":"  @Test public void skipsMalformedData() throws Exception {\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    publish(THRIFT.encodeList(spans));\n    publish(new byte[0]);\n    publish(malformed1);\n    publish(malformed2);\n    publish(THRIFT.encodeList(spans));\n\n    Thread.sleep(200L);\n\n    assertThat(rabbitmqMetrics.messages()).isEqualTo(5);\n    assertThat(rabbitmqMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(rabbitmqMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(rabbitmqMetrics.spansDropped()).isZero();\n  }\n","realPath":"zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ITRabbitMQCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"N"}],"commitId":"9576e4705f8025e893d674b175a15fa558d48239","commitMessage":"@@@Changes docker tests to use HEALTHCHECK where defined (#3297)\n\nNote: we currently don't publish a standard rabbitmq image.. the one we copied\ndoesn't include a HEALTHCHECK so we inline one.\n\nFixes #3295","date":"2020-11-11 13:54:53","modifiedFileCount":"14","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-12-07 13:22:06","codes":[{"authorDate":"2020-12-07 13:22:06","commitOrder":5,"curCode":"  @Test void skipsMalformedData() throws Exception {\n    KafkaCollector.Builder builder = builder(\"decoder_exception\");\n\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n    produceSpans(new byte[0], builder.topic);\n    produceSpans(malformed1, builder.topic);\n    produceSpans(malformed2, builder.topic);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n      \r\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n    }\n\n    assertThat(kafkaMetrics.messages()).isEqualTo(5);\n    assertThat(kafkaMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(kafkaMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(kafkaMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(kafkaMetrics.spansDropped()).isZero();\n  }\n","date":"2020-12-07 13:22:06","endLine":211,"groupId":"10457","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"skipsMalformedData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/75/919116cf9f5d291356892ca426010065c79b37.src","preCode":"  @Test public void skipsMalformedData() throws Exception {\n    KafkaCollector.Builder builder = builder(\"decoder_exception\");\n\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n    produceSpans(new byte[0], builder.topic);\n    produceSpans(malformed1, builder.topic);\n    produceSpans(malformed2, builder.topic);\n    produceSpans(THRIFT.encodeList(spans), builder.topic);\n\n    try (KafkaCollector collector = builder.build()) {\n      collector.start();\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n      \r\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n    }\n\n    assertThat(kafkaMetrics.messages()).isEqualTo(5);\n    assertThat(kafkaMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(kafkaMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(kafkaMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(kafkaMetrics.spansDropped()).isZero();\n  }\n","realPath":"zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/ITKafkaCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"},{"authorDate":"2020-12-07 13:22:06","commitOrder":5,"curCode":"  @Test void skipsMalformedData() throws Exception {\n    RabbitMQCollector.Builder builder = builder(\"decoder_exception\");\n\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    produceSpans(THRIFT.encodeList(spans), builder.queue);\n    produceSpans(new byte[0], builder.queue);\n    produceSpans(malformed1, builder.queue);\n    produceSpans(malformed2, builder.queue);\n    produceSpans(THRIFT.encodeList(spans), builder.queue);\n\n    try (RabbitMQCollector collector = builder.build()) {\n      collector.start();\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n      \r\n      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n    }\n\n    assertThat(rabbitmqMetrics.messages()).isEqualTo(5);\n    assertThat(rabbitmqMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(rabbitmqMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(rabbitmqMetrics.spansDropped()).isZero();\n  }\n","date":"2020-12-07 13:22:06","endLine":145,"groupId":"10457","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"skipsMalformedData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/5e/084020e15d636cd7e521628ade580d07aeed59.src","preCode":"  @Test public void skipsMalformedData() throws Exception {\n    byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); \r\n    byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n    publish(THRIFT.encodeList(spans));\n    publish(new byte[0]);\n    publish(malformed1);\n    publish(malformed2);\n    publish(THRIFT.encodeList(spans));\n\n    Thread.sleep(200L);\n\n    assertThat(rabbitmqMetrics.messages()).isEqualTo(5);\n    assertThat(rabbitmqMetrics.messagesDropped()).isEqualTo(2); \r\n    assertThat(rabbitmqMetrics.bytes())\n      .isEqualTo(THRIFT.encodeList(spans).length * 2 + malformed1.length + malformed2.length);\n    assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size() * 2);\n    assertThat(rabbitmqMetrics.spansDropped()).isZero();\n  }\n","realPath":"zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ITRabbitMQCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"28d9529e3fa7ff807bd6c7cb757587fbdb8ae108","commitMessage":"@@@Ports last docker tests to jupiter (#3326)\n\nThis cleans up testcontainers fixtures and ports the two remaining\ndocker tests to jupiter (kafka and rabbit).\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>","date":"2020-12-07 13:22:06","modifiedFileCount":"9","status":"M","submitter":"Adrian Cole"}]
