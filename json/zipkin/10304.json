[{"authorTime":"2018-07-02 13:18:34","codes":[{"authorDate":"2019-09-19 11:31:13","commitOrder":2,"curCode":"  @Test void getTraces_onlyReturnsTracesThatMatch() throws IOException {\n    List<String> traceIds = asList(LOTS_OF_SPANS[0].traceId(), LOTS_OF_SPANS[1].traceId());\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .isEmpty();\n\n    accept(LOTS_OF_SPANS[0], LOTS_OF_SPANS[2]);\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .containsOnly(asList(LOTS_OF_SPANS[0]));\n\n    List<String> longTraceIds = traceIds.stream().map(t -> \"a\" + t).collect(Collectors.toList());\n    assertThat(traces().getTraces(longTraceIds).execute())\n      .isEmpty();\n  }\n","date":"2019-09-19 11:31:13","endLine":65,"groupId":"3305","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getTraces_onlyReturnsTracesThatMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/45/75c36cefe8e6ff49bc6ddf99886841d2968599.src","preCode":"  @Test void getTraces_onlyReturnsTracesThatMatch() throws IOException {\n    List<String> traceIds = asList(LOTS_OF_SPANS[0].traceId(), LOTS_OF_SPANS[1].traceId());\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .isEmpty();\n\n    accept(LOTS_OF_SPANS[0], LOTS_OF_SPANS[2]);\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .containsOnly(asList(LOTS_OF_SPANS[0]));\n\n    List<String> longTraceIds = traceIds.stream().map(t -> \"a\" + t).collect(Collectors.toList());\n    assertThat(traces().getTraces(longTraceIds).execute())\n      .isEmpty();\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITTraces.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2018-07-02 13:18:34","commitOrder":2,"curCode":"  @Test void getTraces_returnsEmptyOnNotFound() throws IOException {\n    List<String> traceIds = asList(LOTS_OF_SPANS[0].traceId(), LOTS_OF_SPANS[1].traceId());\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .isEmpty();\n\n    accept(LOTS_OF_SPANS[0], LOTS_OF_SPANS[1]);\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .containsExactlyInAnyOrder(asList(LOTS_OF_SPANS[0]), asList(LOTS_OF_SPANS[1]));\n\n    List<String> longTraceIds = traceIds.stream().map(t -> \"a\" + t).collect(Collectors.toList());\n    assertThat(traces().getTraces(longTraceIds).execute())\n      .isEmpty();\n  }\n","date":"2019-09-19 10:56:54","endLine":64,"groupId":"3305","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getTraces_returnsEmptyOnNotFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/82/96d5f8c1e04854a88df9289f25025173b34199.src","preCode":"  @Test void getTraces_returnsEmptyOnNotFound() throws IOException {\n    List<String> traceIds = asList(LOTS_OF_SPANS[0].traceId(), LOTS_OF_SPANS[1].traceId());\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .isEmpty();\n\n    accept(LOTS_OF_SPANS[0], LOTS_OF_SPANS[1]);\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .containsExactlyInAnyOrder(asList(LOTS_OF_SPANS[0]), asList(LOTS_OF_SPANS[1]));\n\n    List<String> longTraceIds = traceIds.stream().map(t -> \"a\" + t).collect(Collectors.toList());\n    assertThat(traces().getTraces(longTraceIds).execute())\n      .isEmpty();\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITTraces.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"NB"}],"commitId":"b71813d2e0ff9525db0e0ca991cf3c1e8d267541","commitMessage":"@@@Slightly revised Traces code so that the license plugin works again\n","date":"2019-09-19 11:31:13","modifiedFileCount":"2","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-03-11 18:07:43","codes":[{"authorDate":"2020-03-11 18:07:43","commitOrder":3,"curCode":"  @Test protected void getTraces_onlyReturnsTracesThatMatch() throws IOException {\n    List<String> traceIds = asList(LOTS_OF_SPANS[0].traceId(), LOTS_OF_SPANS[1].traceId());\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .isEmpty();\n\n    accept(LOTS_OF_SPANS[0], LOTS_OF_SPANS[2]);\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .containsOnly(asList(LOTS_OF_SPANS[0]));\n\n    List<String> longTraceIds = traceIds.stream().map(t -> \"a\" + t).collect(Collectors.toList());\n    assertThat(traces().getTraces(longTraceIds).execute())\n      .isEmpty();\n  }\n","date":"2020-03-11 18:07:43","endLine":65,"groupId":"3305","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getTraces_onlyReturnsTracesThatMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/05/5b77922c1339aa66dd52174235f15cd0353c2c.src","preCode":"  @Test void getTraces_onlyReturnsTracesThatMatch() throws IOException {\n    List<String> traceIds = asList(LOTS_OF_SPANS[0].traceId(), LOTS_OF_SPANS[1].traceId());\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .isEmpty();\n\n    accept(LOTS_OF_SPANS[0], LOTS_OF_SPANS[2]);\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .containsOnly(asList(LOTS_OF_SPANS[0]));\n\n    List<String> longTraceIds = traceIds.stream().map(t -> \"a\" + t).collect(Collectors.toList());\n    assertThat(traces().getTraces(longTraceIds).execute())\n      .isEmpty();\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITTraces.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-03-11 18:07:43","commitOrder":3,"curCode":"  @Test protected void getTraces_returnsEmptyOnNotFound() throws IOException {\n    List<String> traceIds = asList(LOTS_OF_SPANS[0].traceId(), LOTS_OF_SPANS[1].traceId());\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .isEmpty();\n\n    accept(LOTS_OF_SPANS[0], LOTS_OF_SPANS[1]);\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .containsExactlyInAnyOrder(asList(LOTS_OF_SPANS[0]), asList(LOTS_OF_SPANS[1]));\n\n    List<String> longTraceIds = traceIds.stream().map(t -> \"a\" + t).collect(Collectors.toList());\n    assertThat(traces().getTraces(longTraceIds).execute())\n      .isEmpty();\n  }\n","date":"2020-03-11 18:07:43","endLine":81,"groupId":"3305","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getTraces_returnsEmptyOnNotFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/05/5b77922c1339aa66dd52174235f15cd0353c2c.src","preCode":"  @Test void getTraces_returnsEmptyOnNotFound() throws IOException {\n    List<String> traceIds = asList(LOTS_OF_SPANS[0].traceId(), LOTS_OF_SPANS[1].traceId());\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .isEmpty();\n\n    accept(LOTS_OF_SPANS[0], LOTS_OF_SPANS[1]);\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .containsExactlyInAnyOrder(asList(LOTS_OF_SPANS[0]), asList(LOTS_OF_SPANS[1]));\n\n    List<String> longTraceIds = traceIds.stream().map(t -> \"a\" + t).collect(Collectors.toList());\n    assertThat(traces().getTraces(longTraceIds).execute())\n      .isEmpty();\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITTraces.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"946b96ce18e9b5cdc31bb447bcf09dc1df383f0f","commitMessage":"@@@Fixes incorrect handling of getTrace and IT access modifiers (#3019)\n\nI noticed porting zipkin-voltdb to latest.  that we incorrectly handled\ngetTrace in some places. Basically.  we treated a non-nullable result as\nnullable. This fixes that and also corrects method protection so that\nsubclasses of the IT can override (ex to ignore).","date":"2020-03-11 18:07:43","modifiedFileCount":"12","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-10-21 10:53:01","codes":[{"authorDate":"2020-10-21 10:53:01","commitOrder":4,"curCode":"  @Test protected void getTraces_onlyReturnsTracesThatMatch(TestInfo testInfo) throws Exception {\n    String testSuffix = testSuffix(testInfo);\n    Span span1 = spanBuilder(testSuffix).build(), span2 = spanBuilder(testSuffix).build();\n    List<String> traceIds = asList(span1.traceId(), newTraceId());\n\n    assertGetTracesReturnsEmpty(traceIds);\n\n    accept(span1, span2);\n\n    assertGetTracesReturns(traceIds, asList(span1));\n\n    List<String> shortTraceIds =\n      traceIds.stream().map(t -> t.substring(16)).collect(Collectors.toList());\n    assertGetTracesReturnsEmpty(shortTraceIds);\n  }\n","date":"2020-10-21 10:53:01","endLine":65,"groupId":"10304","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getTraces_onlyReturnsTracesThatMatch","params":"(TestInfotestInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/4e/e70fdd9d76292b9feccbc61b9c654a2e71be09.src","preCode":"  @Test protected void getTraces_onlyReturnsTracesThatMatch() throws IOException {\n    List<String> traceIds = asList(LOTS_OF_SPANS[0].traceId(), LOTS_OF_SPANS[1].traceId());\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .isEmpty();\n\n    accept(LOTS_OF_SPANS[0], LOTS_OF_SPANS[2]);\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .containsOnly(asList(LOTS_OF_SPANS[0]));\n\n    List<String> longTraceIds = traceIds.stream().map(t -> \"a\" + t).collect(Collectors.toList());\n    assertThat(traces().getTraces(longTraceIds).execute())\n      .isEmpty();\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITTraces.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-10-21 10:53:01","commitOrder":4,"curCode":"  @Test protected void getTraces_returnsEmptyOnNotFound(TestInfo testInfo) throws Exception {\n    String testSuffix = testSuffix(testInfo);\n    Span span1 = spanBuilder(testSuffix).build(), span2 = spanBuilder(testSuffix).build();\n    List<String> traceIds = asList(span1.traceId(), span2.traceId());\n\n    assertGetTracesReturnsEmpty(traceIds);\n\n    accept(span1, span2);\n\n    assertGetTracesReturns(traceIds, asList(span1), asList(span2));\n\n    List<String> shortTraceIds =\n      traceIds.stream().map(t -> t.substring(16)).collect(Collectors.toList());\n    assertGetTracesReturnsEmpty(shortTraceIds);\n  }\n","date":"2020-10-21 10:53:01","endLine":81,"groupId":"10304","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getTraces_returnsEmptyOnNotFound","params":"(TestInfotestInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/4e/e70fdd9d76292b9feccbc61b9c654a2e71be09.src","preCode":"  @Test protected void getTraces_returnsEmptyOnNotFound() throws IOException {\n    List<String> traceIds = asList(LOTS_OF_SPANS[0].traceId(), LOTS_OF_SPANS[1].traceId());\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .isEmpty();\n\n    accept(LOTS_OF_SPANS[0], LOTS_OF_SPANS[1]);\n\n    assertThat(traces().getTraces(traceIds).execute())\n      .containsExactlyInAnyOrder(asList(LOTS_OF_SPANS[0]), asList(LOTS_OF_SPANS[1]));\n\n    List<String> longTraceIds = traceIds.stream().map(t -> \"a\" + t).collect(Collectors.toList());\n    assertThat(traces().getTraces(longTraceIds).execute())\n      .isEmpty();\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITTraces.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"eeb17681af780e563b44503d5af1eadb3ca6abfc","commitMessage":"@@@Refactors integration tests to be more isolated (#3249)\n\nThis makes all integration tests use unique data. Notably.  they no\nlonger use constant trace ID or service names.  as this can lead to\ndifficulty when a keyspace is re-used. For example.  service names and\ntrace IDs are often partitions. When debugging it is easier when test\ndata is isolated by a service name as it can be easily queried.\n\nThis also pulls the heaviest tests into their own classes so that they\ndon't overload the storage containers used by the bulk of our tests.\n\nFinally.  this fixes a few glitches in the v1 cassandra storage.","date":"2020-10-21 10:53:01","modifiedFileCount":"46","status":"M","submitter":"Adrian Cole"}]
