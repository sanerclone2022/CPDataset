[{"authorTime":"2019-07-17 18:26:25","codes":[{"authorDate":"2019-07-17 18:26:25","commitOrder":2,"curCode":"  @Test public void providesCollectorComponent_whenUrlSet() {\n    TestPropertyValues.of(\"zipkin.collector.activemq.url=vm://localhost\")\n      .applyTo(context);\n    context.register(\n      PropertyPlaceholderAutoConfiguration.class,\n      ZipkinActiveMQCollectorConfiguration.class,\n      InMemoryConfiguration.class);\n\n    try {\n      context.refresh();\n      failBecauseExceptionWasNotThrown(BeanCreationException.class);\n    } catch (BeanCreationException e) {\n      assertThat(e.getCause()).hasMessage(\n        \"Unable to establish connection to ActiveMQ broker: Transport scheme NOT recognized: [vm]\");\n    }\n  }\n","date":"2019-07-17 18:26:25","endLine":79,"groupId":"2083","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"providesCollectorComponent_whenUrlSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/62/58f600c9f87afc3f57f614dbe7936d9189c41d.src","preCode":"  @Test public void providesCollectorComponent_whenUrlSet() {\n    TestPropertyValues.of(\"zipkin.collector.activemq.url=vm://localhost\")\n      .applyTo(context);\n    context.register(\n      PropertyPlaceholderAutoConfiguration.class,\n      ZipkinActiveMQCollectorConfiguration.class,\n      InMemoryConfiguration.class);\n\n    try {\n      context.refresh();\n      failBecauseExceptionWasNotThrown(BeanCreationException.class);\n    } catch (BeanCreationException e) {\n      assertThat(e.getCause()).hasMessage(\n        \"Unable to establish connection to ActiveMQ broker: Transport scheme NOT recognized: [vm]\");\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/activemq/ZipkinActiveMQCollectorConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"},{"authorDate":"2019-07-17 18:26:25","commitOrder":2,"curCode":"  @Test public void providesCollectorComponent_whenAddressesSet() {\n    context = new AnnotationConfigApplicationContext();\n    TestPropertyValues.of(\"zipkin.collector.rabbitmq.addresses=localhost:1234\").applyTo(context);\n    context.register(\n      PropertyPlaceholderAutoConfiguration.class,\n      ZipkinRabbitMQCollectorConfiguration.class,\n      InMemoryConfiguration.class);\n\n    try {\n      context.refresh();\n      failBecauseExceptionWasNotThrown(BeanCreationException.class);\n    } catch (BeanCreationException e) {\n      assertThat(e.getCause()).hasMessage(\n        \"Unable to establish connection to RabbitMQ server: Connection refused (Connection refused)\");\n    }\n  }\n","date":"2019-07-17 18:26:25","endLine":83,"groupId":"2083","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"providesCollectorComponent_whenAddressesSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/0f/4657c4ac1adef6e32d59f9f66056c95d4f6c50.src","preCode":"  @Test public void providesCollectorComponent_whenAddressesSet() {\n    context = new AnnotationConfigApplicationContext();\n    TestPropertyValues.of(\"zipkin.collector.rabbitmq.addresses=localhost:1234\").applyTo(context);\n    context.register(\n      PropertyPlaceholderAutoConfiguration.class,\n      ZipkinRabbitMQCollectorConfiguration.class,\n      InMemoryConfiguration.class);\n\n    try {\n      context.refresh();\n      failBecauseExceptionWasNotThrown(BeanCreationException.class);\n    } catch (BeanCreationException e) {\n      assertThat(e.getCause()).hasMessage(\n        \"Unable to establish connection to RabbitMQ server: Connection refused (Connection refused)\");\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/rabbitmq/ZipkinRabbitMQCollectorConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"MB"}],"commitId":"d2342f183f4ad81c6800cbf4595d0d66783da858","commitMessage":"@@@Reverts usage of Kotlin in tests (#2679)\n\n","date":"2019-07-17 18:26:25","modifiedFileCount":"1","status":"M","submitter":"Adrian Cole"},{"authorTime":"2019-08-23 12:04:12","codes":[{"authorDate":"2019-07-17 18:26:25","commitOrder":3,"curCode":"  @Test public void providesCollectorComponent_whenUrlSet() {\n    TestPropertyValues.of(\"zipkin.collector.activemq.url=vm://localhost\")\n      .applyTo(context);\n    context.register(\n      PropertyPlaceholderAutoConfiguration.class,\n      ZipkinActiveMQCollectorConfiguration.class,\n      InMemoryConfiguration.class);\n\n    try {\n      context.refresh();\n      failBecauseExceptionWasNotThrown(BeanCreationException.class);\n    } catch (BeanCreationException e) {\n      assertThat(e.getCause()).hasMessage(\n        \"Unable to establish connection to ActiveMQ broker: Transport scheme NOT recognized: [vm]\");\n    }\n  }\n","date":"2019-07-17 18:26:25","endLine":79,"groupId":"2083","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"providesCollectorComponent_whenUrlSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/62/58f600c9f87afc3f57f614dbe7936d9189c41d.src","preCode":"  @Test public void providesCollectorComponent_whenUrlSet() {\n    TestPropertyValues.of(\"zipkin.collector.activemq.url=vm://localhost\")\n      .applyTo(context);\n    context.register(\n      PropertyPlaceholderAutoConfiguration.class,\n      ZipkinActiveMQCollectorConfiguration.class,\n      InMemoryConfiguration.class);\n\n    try {\n      context.refresh();\n      failBecauseExceptionWasNotThrown(BeanCreationException.class);\n    } catch (BeanCreationException e) {\n      assertThat(e.getCause()).hasMessage(\n        \"Unable to establish connection to ActiveMQ broker: Transport scheme NOT recognized: [vm]\");\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/activemq/ZipkinActiveMQCollectorConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2019-08-23 12:04:12","commitOrder":3,"curCode":"  @Test public void providesCollectorComponent_whenAddressesSet() {\n    context = new AnnotationConfigApplicationContext();\n    TestPropertyValues.of(\"zipkin.collector.rabbitmq.addresses:localhost:1234\").applyTo(context);\n    context.register(\n      PropertyPlaceholderAutoConfiguration.class,\n      ZipkinRabbitMQCollectorConfiguration.class,\n      InMemoryConfiguration.class);\n\n    try {\n      context.refresh();\n      failBecauseExceptionWasNotThrown(BeanCreationException.class);\n    } catch (BeanCreationException e) {\n      assertThat(e.getCause()).hasMessage(\n        \"Unable to establish connection to RabbitMQ server: Connection refused (Connection refused)\");\n    }\n  }\n","date":"2019-08-23 12:04:12","endLine":83,"groupId":"2083","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"providesCollectorComponent_whenAddressesSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/cf/7e9293c52093fc9fe283fdae0d3285d338f204.src","preCode":"  @Test public void providesCollectorComponent_whenAddressesSet() {\n    context = new AnnotationConfigApplicationContext();\n    TestPropertyValues.of(\"zipkin.collector.rabbitmq.addresses=localhost:1234\").applyTo(context);\n    context.register(\n      PropertyPlaceholderAutoConfiguration.class,\n      ZipkinRabbitMQCollectorConfiguration.class,\n      InMemoryConfiguration.class);\n\n    try {\n      context.refresh();\n      failBecauseExceptionWasNotThrown(BeanCreationException.class);\n    } catch (BeanCreationException e) {\n      assertThat(e.getCause()).hasMessage(\n        \"Unable to establish connection to RabbitMQ server: Connection refused (Connection refused)\");\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/rabbitmq/ZipkinRabbitMQCollectorConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"b40b9656551fcf28ebd9c8f13698b1757d67bcb2","commitMessage":"@@@Add enabled variable for collectors (#2770)\n\n","date":"2019-08-23 12:04:12","modifiedFileCount":"7","status":"M","submitter":"Jorge Quilcate Otoya"},{"authorTime":"2019-08-24 18:50:44","codes":[{"authorDate":"2019-07-17 18:26:25","commitOrder":4,"curCode":"  @Test public void providesCollectorComponent_whenUrlSet() {\n    TestPropertyValues.of(\"zipkin.collector.activemq.url=vm://localhost\")\n      .applyTo(context);\n    context.register(\n      PropertyPlaceholderAutoConfiguration.class,\n      ZipkinActiveMQCollectorConfiguration.class,\n      InMemoryConfiguration.class);\n\n    try {\n      context.refresh();\n      failBecauseExceptionWasNotThrown(BeanCreationException.class);\n    } catch (BeanCreationException e) {\n      assertThat(e.getCause()).hasMessage(\n        \"Unable to establish connection to ActiveMQ broker: Transport scheme NOT recognized: [vm]\");\n    }\n  }\n","date":"2019-07-17 18:26:25","endLine":79,"groupId":"1033","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"providesCollectorComponent_whenUrlSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/62/58f600c9f87afc3f57f614dbe7936d9189c41d.src","preCode":"  @Test public void providesCollectorComponent_whenUrlSet() {\n    TestPropertyValues.of(\"zipkin.collector.activemq.url=vm://localhost\")\n      .applyTo(context);\n    context.register(\n      PropertyPlaceholderAutoConfiguration.class,\n      ZipkinActiveMQCollectorConfiguration.class,\n      InMemoryConfiguration.class);\n\n    try {\n      context.refresh();\n      failBecauseExceptionWasNotThrown(BeanCreationException.class);\n    } catch (BeanCreationException e) {\n      assertThat(e.getCause()).hasMessage(\n        \"Unable to establish connection to ActiveMQ broker: Transport scheme NOT recognized: [vm]\");\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/activemq/ZipkinActiveMQCollectorConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2019-08-24 18:50:44","commitOrder":4,"curCode":"  @Test public void providesCollectorComponent_whenAddressesSet() {\n    context = new AnnotationConfigApplicationContext();\n    TestPropertyValues.of(\"zipkin.collector.rabbitmq.addresses:localhost:1234\").applyTo(context);\n    context.register(\n      PropertyPlaceholderAutoConfiguration.class,\n      ZipkinRabbitMQCollectorConfiguration.class,\n      InMemoryConfiguration.class);\n\n    try {\n      context.refresh();\n      failBecauseExceptionWasNotThrown(BeanCreationException.class);\n    } catch (BeanCreationException e) {\n      assertThat(e.getCause()).hasMessageContaining(\n        \"Unable to establish connection to RabbitMQ server: Connection refused\");\n    }\n  }\n","date":"2019-08-24 18:50:44","endLine":83,"groupId":"1033","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"providesCollectorComponent_whenAddressesSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/e2/9ab7c46c6b5630996e2379862e55f600a6f10f.src","preCode":"  @Test public void providesCollectorComponent_whenAddressesSet() {\n    context = new AnnotationConfigApplicationContext();\n    TestPropertyValues.of(\"zipkin.collector.rabbitmq.addresses:localhost:1234\").applyTo(context);\n    context.register(\n      PropertyPlaceholderAutoConfiguration.class,\n      ZipkinRabbitMQCollectorConfiguration.class,\n      InMemoryConfiguration.class);\n\n    try {\n      context.refresh();\n      failBecauseExceptionWasNotThrown(BeanCreationException.class);\n    } catch (BeanCreationException e) {\n      assertThat(e.getCause()).hasMessage(\n        \"Unable to establish connection to RabbitMQ server: Connection refused (Connection refused)\");\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/rabbitmq/ZipkinRabbitMQCollectorConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"106a21ed6bafb0c35af401a2180344e111871db1","commitMessage":"@@@Loosen exception message assertion for compatibility with Windows. (#2780)\n\n","date":"2019-08-24 18:50:44","modifiedFileCount":"2","status":"M","submitter":"Anuraag Agrawal"}]
