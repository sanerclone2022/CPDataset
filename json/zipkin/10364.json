[{"authorTime":"2020-10-21 11:36:40","codes":[{"authorDate":"2020-10-21 11:36:40","commitOrder":3,"curCode":"  static CqlSession mockSession() {\n    CqlSession session = mock(CqlSession.class);\n    Metadata metadata = mock(Metadata.class);\n\n    KeyspaceMetadata keyspaceMetadata = mock(KeyspaceMetadata.class);\n    when(session.getMetadata()).thenReturn(metadata);\n    when(metadata.getKeyspace(\"zipkin2\")).thenReturn(Optional.of(keyspaceMetadata));\n\n    when(keyspaceMetadata.getTable(TABLE_SERVICE_REMOTE_SERVICES))\n      .thenReturn(Optional.of(mock(TableMetadata.class)));\n    return session;\n  }\n","date":"2020-10-21 11:36:40","endLine":46,"groupId":"1197","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mockSession","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/09/049fa02c9da0a7f8f069df30101708aa10c1bf.src","preCode":"  static CqlSession mockSession() {\n    CqlSession session = mock(CqlSession.class);\n    Metadata metadata = mock(Metadata.class);\n\n    KeyspaceMetadata keyspaceMetadata = mock(KeyspaceMetadata.class);\n    when(session.getMetadata()).thenReturn(metadata);\n    when(metadata.getKeyspace(\"zipkin2\")).thenReturn(Optional.of(keyspaceMetadata));\n\n    when(keyspaceMetadata.getTable(TABLE_SERVICE_REMOTE_SERVICES))\n      .thenReturn(Optional.of(mock(TableMetadata.class)));\n    return session;\n  }\n","realPath":"zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/InternalForTests.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"B"},{"authorDate":"2020-10-21 11:36:40","commitOrder":3,"curCode":"  @Test public void ensureKeyspaceMetadata_failsWhenKeyspaceMetadataIsNotNull() {\n    CqlSession session = mock(CqlSession.class);\n    Metadata metadata = mock(Metadata.class);\n    Node node = mock(Node.class);\n\n    when(session.getMetadata()).thenReturn(metadata);\n    when(metadata.getNodes()).thenReturn(Collections.singletonMap(\n      UUID.fromString(\"11111111-1111-1111-1111-111111111111\"), node\n    ));\n    when(node.getCassandraVersion()).thenReturn(Version.parse(\"3.11.3\"));\n\n    assertThatThrownBy(() -> Schema.ensureKeyspaceMetadata(session, \"zipkin2\"))\n      .isInstanceOf(RuntimeException.class)\n      .hasMessageStartingWith(\"Cannot read keyspace metadata for keyspace\");\n  }\n","date":"2020-10-21 11:36:40","endLine":119,"groupId":"1197","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"ensureKeyspaceMetadata_failsWhenKeyspaceMetadataIsNotNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/23/81400e6721cbb4f7cab74a43d4813af405d40b.src","preCode":"  @Test public void ensureKeyspaceMetadata_failsWhenKeyspaceMetadataIsNotNull() {\n    CqlSession session = mock(CqlSession.class);\n    Metadata metadata = mock(Metadata.class);\n    Node node = mock(Node.class);\n\n    when(session.getMetadata()).thenReturn(metadata);\n    when(metadata.getNodes()).thenReturn(Collections.singletonMap(\n      UUID.fromString(\"11111111-1111-1111-1111-111111111111\"), node\n    ));\n    when(node.getCassandraVersion()).thenReturn(Version.parse(\"3.11.3\"));\n\n    assertThatThrownBy(() -> Schema.ensureKeyspaceMetadata(session, \"zipkin2\"))\n      .isInstanceOf(RuntimeException.class)\n      .hasMessageStartingWith(\"Cannot read keyspace metadata for keyspace\");\n  }\n","realPath":"zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/SchemaTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"MB"}],"commitId":"9674c46fa82b5f281fee30c23138aa09c18ee816","commitMessage":"@@@Migrates to Datastax Driver v4 (#3246)\n\nThis migrates to the Netty-based Datastax Driver v4.  which no longer\nuses guava. This is very different library architecture.  most obvious in\nhow configuration is managed. This migration tries to be as conventional\nas possible while retaining defaults as close to as they were as\npossible.","date":"2020-10-21 11:36:40","modifiedFileCount":"81","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-10-21 11:36:40","codes":[{"authorDate":"2020-11-27 14:20:30","commitOrder":4,"curCode":"  static CqlSession mockSession() {\n    CqlSession session = mock(CqlSession.class);\n    Metadata metadata = mock(Metadata.class);\n    Node node = mock(Node.class);\n\n    when(session.getMetadata()).thenReturn(metadata);\n    when(metadata.getNodes()).thenReturn(Collections.singletonMap(\n      UUID.fromString(\"11111111-1111-1111-1111-111111111111\"), node\n    ));\n    when(node.getCassandraVersion()).thenReturn(Version.parse(\"3.11.9\"));\n\n    KeyspaceMetadata keyspaceMetadata = mock(KeyspaceMetadata.class);\n    when(session.getMetadata()).thenReturn(metadata);\n    when(metadata.getKeyspace(\"zipkin2\")).thenReturn(Optional.of(keyspaceMetadata));\n\n    when(keyspaceMetadata.getTable(TABLE_SERVICE_REMOTE_SERVICES))\n      .thenReturn(Optional.of(mock(TableMetadata.class)));\n    return session;\n  }\n","date":"2020-11-27 14:20:30","endLine":56,"groupId":"10364","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"mockSession","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/af/11be71ad786e5088b241186199b499aee84f33.src","preCode":"  static CqlSession mockSession() {\n    CqlSession session = mock(CqlSession.class);\n    Metadata metadata = mock(Metadata.class);\n\n    KeyspaceMetadata keyspaceMetadata = mock(KeyspaceMetadata.class);\n    when(session.getMetadata()).thenReturn(metadata);\n    when(metadata.getKeyspace(\"zipkin2\")).thenReturn(Optional.of(keyspaceMetadata));\n\n    when(keyspaceMetadata.getTable(TABLE_SERVICE_REMOTE_SERVICES))\n      .thenReturn(Optional.of(mock(TableMetadata.class)));\n    return session;\n  }\n","realPath":"zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/InternalForTests.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2020-10-21 11:36:40","commitOrder":4,"curCode":"  @Test public void ensureKeyspaceMetadata_failsWhenKeyspaceMetadataIsNotNull() {\n    CqlSession session = mock(CqlSession.class);\n    Metadata metadata = mock(Metadata.class);\n    Node node = mock(Node.class);\n\n    when(session.getMetadata()).thenReturn(metadata);\n    when(metadata.getNodes()).thenReturn(Collections.singletonMap(\n      UUID.fromString(\"11111111-1111-1111-1111-111111111111\"), node\n    ));\n    when(node.getCassandraVersion()).thenReturn(Version.parse(\"3.11.3\"));\n\n    assertThatThrownBy(() -> Schema.ensureKeyspaceMetadata(session, \"zipkin2\"))\n      .isInstanceOf(RuntimeException.class)\n      .hasMessageStartingWith(\"Cannot read keyspace metadata for keyspace\");\n  }\n","date":"2020-10-21 11:36:40","endLine":119,"groupId":"10364","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"ensureKeyspaceMetadata_failsWhenKeyspaceMetadataIsNotNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/23/81400e6721cbb4f7cab74a43d4813af405d40b.src","preCode":"  @Test public void ensureKeyspaceMetadata_failsWhenKeyspaceMetadataIsNotNull() {\n    CqlSession session = mock(CqlSession.class);\n    Metadata metadata = mock(Metadata.class);\n    Node node = mock(Node.class);\n\n    when(session.getMetadata()).thenReturn(metadata);\n    when(metadata.getNodes()).thenReturn(Collections.singletonMap(\n      UUID.fromString(\"11111111-1111-1111-1111-111111111111\"), node\n    ));\n    when(node.getCassandraVersion()).thenReturn(Version.parse(\"3.11.3\"));\n\n    assertThatThrownBy(() -> Schema.ensureKeyspaceMetadata(session, \"zipkin2\"))\n      .isInstanceOf(RuntimeException.class)\n      .hasMessageStartingWith(\"Cannot read keyspace metadata for keyspace\");\n  }\n","realPath":"zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/SchemaTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"N"}],"commitId":"686d86b0d1d4dd19e44118ed99da1c2a41ee91c3","commitMessage":"@@@Adjusts Cassandra image to work with JRE 11 and preps for Cassandra 4 (#3318)\n\nThis adds some workarounds for Cassandra when used on JRE 11.  allowing\nus a single base image in this repo (note zipkin-dependencies still\nuses JRE 8 until Elasticsearch updates their spark support).\n\nA single base image helps us as we don't need to download a couple\nhundred meg only for one storage option. This also carves in Cassandra\n4 support based on 4.0.0-beta-3 which passes almost all tests.  but\ndeserves to wait until the next beta before we formalize in any way.","date":"2020-11-27 14:20:30","modifiedFileCount":"5","status":"M","submitter":"Adrian Cole"}]
