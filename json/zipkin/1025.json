[{"authorTime":"2019-09-24 11:23:06","codes":[{"authorDate":"2019-09-24 11:23:06","commitOrder":1,"curCode":"  @Test public void writeSpans_updatesMetrics() throws Exception {\n    List<Span> spans = asList(LOTS_OF_SPANS[0], LOTS_OF_SPANS[1], LOTS_OF_SPANS[2]);\n    byte[] body = SpanBytesEncoder.JSON_V2.encodeList(spans);\n    double messagesCount =\n      registry.counter(\"zipkin_collector.messages\", \"transport\", \"http\").count();\n    double bytesCount = registry.counter(\"zipkin_collector.bytes\", \"transport\", \"http\").count();\n    double spansCount = registry.counter(\"zipkin_collector.spans\", \"transport\", \"http\").count();\n    post(\"/api/v2/spans\", body);\n    post(\"/api/v2/spans\", body);\n\n    String json = getAsString(\"/metrics\");\n\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.messages.http']\"))\n      .isEqualTo(messagesCount + 2.0);\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.bytes.http']\"))\n      .isEqualTo(bytesCount + (body.length * 2));\n    assertThat(readDouble(json, \"$.['gauge.zipkin_collector.message_bytes.http']\"))\n      .isEqualTo(body.length);\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.spans.http']\"))\n      .isEqualTo(spansCount + (spans.size() * 2));\n    assertThat(readDouble(json, \"$.['gauge.zipkin_collector.message_spans.http']\"))\n      .isEqualTo(spans.size());\n  }\n","date":"2019-09-24 11:23:06","endLine":91,"groupId":"2499","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"writeSpans_updatesMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/6d/3af11e03639f519cd11a08c7a13125600cabe6.src","preCode":"  @Test public void writeSpans_updatesMetrics() throws Exception {\n    List<Span> spans = asList(LOTS_OF_SPANS[0], LOTS_OF_SPANS[1], LOTS_OF_SPANS[2]);\n    byte[] body = SpanBytesEncoder.JSON_V2.encodeList(spans);\n    double messagesCount =\n      registry.counter(\"zipkin_collector.messages\", \"transport\", \"http\").count();\n    double bytesCount = registry.counter(\"zipkin_collector.bytes\", \"transport\", \"http\").count();\n    double spansCount = registry.counter(\"zipkin_collector.spans\", \"transport\", \"http\").count();\n    post(\"/api/v2/spans\", body);\n    post(\"/api/v2/spans\", body);\n\n    String json = getAsString(\"/metrics\");\n\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.messages.http']\"))\n      .isEqualTo(messagesCount + 2.0);\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.bytes.http']\"))\n      .isEqualTo(bytesCount + (body.length * 2));\n    assertThat(readDouble(json, \"$.['gauge.zipkin_collector.message_bytes.http']\"))\n      .isEqualTo(body.length);\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.spans.http']\"))\n      .isEqualTo(spansCount + (spans.size() * 2));\n    assertThat(readDouble(json, \"$.['gauge.zipkin_collector.message_spans.http']\"))\n      .isEqualTo(spans.size());\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/prometheus/ITZipkinMetricsDirty.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"},{"authorDate":"2019-09-24 11:23:06","commitOrder":1,"curCode":"  @Test public void writeSpans_malformedUpdatesMetrics() throws Exception {\n    byte[] body = {'h', 'e', 'l', 'l', 'o'};\n    double messagesCount =\n      registry.counter(\"zipkin_collector.messages\", \"transport\", \"http\").count();\n    double messagesDroppedCount =\n      registry.counter(\"zipkin_collector.messages_dropped\", \"transport\", \"http\").count();\n    post(\"/api/v2/spans\", body);\n\n    String json = getAsString(\"/metrics\");\n\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.messages.http']\"))\n      .isEqualTo(messagesCount + 1);\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.messages_dropped.http']\"))\n      .isEqualTo(messagesDroppedCount + 1);\n  }\n","date":"2019-09-24 11:23:06","endLine":107,"groupId":"1099","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"writeSpans_malformedUpdatesMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/6d/3af11e03639f519cd11a08c7a13125600cabe6.src","preCode":"  @Test public void writeSpans_malformedUpdatesMetrics() throws Exception {\n    byte[] body = {'h', 'e', 'l', 'l', 'o'};\n    double messagesCount =\n      registry.counter(\"zipkin_collector.messages\", \"transport\", \"http\").count();\n    double messagesDroppedCount =\n      registry.counter(\"zipkin_collector.messages_dropped\", \"transport\", \"http\").count();\n    post(\"/api/v2/spans\", body);\n\n    String json = getAsString(\"/metrics\");\n\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.messages.http']\"))\n      .isEqualTo(messagesCount + 1);\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.messages_dropped.http']\"))\n      .isEqualTo(messagesDroppedCount + 1);\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/prometheus/ITZipkinMetricsDirty.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"00bab807d36ffe01b3964ecf8271e5ef4a129de4","commitMessage":"@@@Decouples health and metrics controllers.  backfills tests for health (#2819)\n\nBefore.  we had health and metrics code mixed in the same controller.\nThis decouples that and ensures not only that health json is pretty by\ndefault.  but that it is also verified. For example.  we had an encoding\nbug on an error path we didn't notice.","date":"2019-09-24 11:23:06","modifiedFileCount":"2","status":"B","submitter":"Adrian Cole"},{"authorTime":"2020-08-17 09:57:04","codes":[{"authorDate":"2020-08-17 09:57:04","commitOrder":2,"curCode":"  @Test void writeSpans_updatesMetrics() throws Exception {\n    List<Span> spans = asList(LOTS_OF_SPANS[0], LOTS_OF_SPANS[1], LOTS_OF_SPANS[2]);\n    byte[] body = SpanBytesEncoder.JSON_V2.encodeList(spans);\n    double messagesCount =\n      registry.counter(\"zipkin_collector.messages\", \"transport\", \"http\").count();\n    double bytesCount = registry.counter(\"zipkin_collector.bytes\", \"transport\", \"http\").count();\n    double spansCount = registry.counter(\"zipkin_collector.spans\", \"transport\", \"http\").count();\n    post(\"/api/v2/spans\", body);\n    post(\"/api/v2/spans\", body);\n\n    String json = getAsString(\"/metrics\");\n\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.messages.http']\"))\n      .isEqualTo(messagesCount + 2.0);\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.bytes.http']\"))\n      .isEqualTo(bytesCount + (body.length * 2));\n    assertThat(readDouble(json, \"$.['gauge.zipkin_collector.message_bytes.http']\"))\n      .isEqualTo(body.length);\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.spans.http']\"))\n      .isEqualTo(spansCount + (spans.size() * 2));\n    assertThat(readDouble(json, \"$.['gauge.zipkin_collector.message_spans.http']\"))\n      .isEqualTo(spans.size());\n  }\n","date":"2020-08-17 09:57:04","endLine":97,"groupId":"1025","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"writeSpans_updatesMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/fb/ca082eeff0f85499ea9ce4043b2be0bef6c7cc.src","preCode":"  @Test public void writeSpans_updatesMetrics() throws Exception {\n    List<Span> spans = asList(LOTS_OF_SPANS[0], LOTS_OF_SPANS[1], LOTS_OF_SPANS[2]);\n    byte[] body = SpanBytesEncoder.JSON_V2.encodeList(spans);\n    double messagesCount =\n      registry.counter(\"zipkin_collector.messages\", \"transport\", \"http\").count();\n    double bytesCount = registry.counter(\"zipkin_collector.bytes\", \"transport\", \"http\").count();\n    double spansCount = registry.counter(\"zipkin_collector.spans\", \"transport\", \"http\").count();\n    post(\"/api/v2/spans\", body);\n    post(\"/api/v2/spans\", body);\n\n    String json = getAsString(\"/metrics\");\n\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.messages.http']\"))\n      .isEqualTo(messagesCount + 2.0);\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.bytes.http']\"))\n      .isEqualTo(bytesCount + (body.length * 2));\n    assertThat(readDouble(json, \"$.['gauge.zipkin_collector.message_bytes.http']\"))\n      .isEqualTo(body.length);\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.spans.http']\"))\n      .isEqualTo(spansCount + (spans.size() * 2));\n    assertThat(readDouble(json, \"$.['gauge.zipkin_collector.message_spans.http']\"))\n      .isEqualTo(spans.size());\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/prometheus/ITZipkinMetricsDirty.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2020-08-17 09:57:04","commitOrder":2,"curCode":"  @Test void writeSpans_malformedUpdatesMetrics() throws Exception {\n    byte[] body = {'h', 'e', 'l', 'l', 'o'};\n    double messagesCount =\n      registry.counter(\"zipkin_collector.messages\", \"transport\", \"http\").count();\n    double messagesDroppedCount =\n      registry.counter(\"zipkin_collector.messages_dropped\", \"transport\", \"http\").count();\n    post(\"/api/v2/spans\", body);\n\n    String json = getAsString(\"/metrics\");\n\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.messages.http']\"))\n      .isEqualTo(messagesCount + 1);\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.messages_dropped.http']\"))\n      .isEqualTo(messagesDroppedCount + 1);\n  }\n","date":"2020-08-17 09:57:04","endLine":113,"groupId":"1025","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"writeSpans_malformedUpdatesMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/fb/ca082eeff0f85499ea9ce4043b2be0bef6c7cc.src","preCode":"  @Test public void writeSpans_malformedUpdatesMetrics() throws Exception {\n    byte[] body = {'h', 'e', 'l', 'l', 'o'};\n    double messagesCount =\n      registry.counter(\"zipkin_collector.messages\", \"transport\", \"http\").count();\n    double messagesDroppedCount =\n      registry.counter(\"zipkin_collector.messages_dropped\", \"transport\", \"http\").count();\n    post(\"/api/v2/spans\", body);\n\n    String json = getAsString(\"/metrics\");\n\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.messages.http']\"))\n      .isEqualTo(messagesCount + 1);\n    assertThat(readDouble(json, \"$.['counter.zipkin_collector.messages_dropped.http']\"))\n      .isEqualTo(messagesDroppedCount + 1);\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/prometheus/ITZipkinMetricsDirty.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"ab604b0fb5dee05bf5ff9ded2f3703ff70f50b88","commitMessage":"@@@Moves tests that read back prometheus metrics to ITZipkinMetricsDirty (#3176)\n\nBefore.  we moved most tests that read back metrics to `ITZipkinMetricsDirty`. \nbut \"we missed a spot\" and in doing so it causes flakes in Travis at the\nmoment on random change. This moves the last over and strengthens the\ncomments.","date":"2020-08-17 09:57:04","modifiedFileCount":"2","status":"M","submitter":"Adrian Cole"}]
