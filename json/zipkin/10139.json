[{"authorTime":"2020-09-29 15:05:45","codes":[{"authorDate":"2020-09-29 15:05:45","commitOrder":1,"curCode":"  public void linksSingleHostSpans() {\n    List<Span> singleHostSpans = asList(\n      span2(\"a\", null, \"a\", Kind.CLIENT, \"web\", null, false),\n      span2(\"a\", \"a\", \"b\", Kind.SERVER, \"app\", null, false)\n    );\n\n    assertThat(new DependencyLinker().putTrace(singleHostSpans).link()).containsOnly(\n      DependencyLink.newBuilder().parent(\"web\").child(\"app\").callCount(1L).build()\n    );\n  }\n","date":"2020-09-29 15:05:45","endLine":551,"groupId":"1126","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"linksSingleHostSpans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/68/30ac5914ff2beca0e9e3125fb70245384eee96.src","preCode":"  public void linksSingleHostSpans() {\n    List<Span> singleHostSpans = asList(\n      span2(\"a\", null, \"a\", Kind.CLIENT, \"web\", null, false),\n      span2(\"a\", \"a\", \"b\", Kind.SERVER, \"app\", null, false)\n    );\n\n    assertThat(new DependencyLinker().putTrace(singleHostSpans).link()).containsOnly(\n      DependencyLink.newBuilder().parent(\"web\").child(\"app\").callCount(1L).build()\n    );\n  }\n","realPath":"zipkin-tests/src/test/java/zipkin2/internal/DependencyLinkerTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":542,"status":"B"},{"authorDate":"2020-09-29 15:05:45","commitOrder":1,"curCode":"  public void missingSpan() {\n    List<Span> singleHostSpans = asList(\n      span2(\"a\", null, \"a\", Kind.SERVER, \"web\", null, false),\n      span2(\"a\", \"a\", \"b\", Kind.CLIENT, \"app\", null, false)\n    );\n\n    assertThat(new DependencyLinker(logger).putTrace(singleHostSpans).link())\n      .containsOnly(DependencyLink.newBuilder().parent(\"web\").child(\"app\").callCount(1L).build());\n\n    assertThat(messages).contains(\n      \"detected missing link to client span\"\n    );\n  }\n","date":"2020-09-29 15:05:45","endLine":579,"groupId":"3168","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"missingSpan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/68/30ac5914ff2beca0e9e3125fb70245384eee96.src","preCode":"  public void missingSpan() {\n    List<Span> singleHostSpans = asList(\n      span2(\"a\", null, \"a\", Kind.SERVER, \"web\", null, false),\n      span2(\"a\", \"a\", \"b\", Kind.CLIENT, \"app\", null, false)\n    );\n\n    assertThat(new DependencyLinker(logger).putTrace(singleHostSpans).link())\n      .containsOnly(DependencyLink.newBuilder().parent(\"web\").child(\"app\").callCount(1L).build());\n\n    assertThat(messages).contains(\n      \"detected missing link to client span\"\n    );\n  }\n","realPath":"zipkin-tests/src/test/java/zipkin2/internal/DependencyLinkerTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":567,"status":"B"}],"commitId":"95ace09d004c92c225ffcf70782ea42a5825760a","commitMessage":"@@@Allows use of JDK 15+ (#3216)\n\nThis allows builds to work with JDK 15+ even if that JDK cannot compile\nJava 1.6 anymore. Specifically.  this removes Retrolambda.  which formerly\nrewrote our main tree to 1.6 bytecode. We had to do this as Retrolambda\nno longer works in JDK 15.\n\nIn order to publish a JRE compatible 1.6 jar to Maven Central.  we use\nJDK during the release process (Travis). To ensure normal usage and\nDocker can use JDK 15.  we change our GitHub actions to use JDK 15.\n\nThis also adds a RATIONALE.md which covers the major aspects around\nsource.  largely duplicated from Brave (though not exactly the same as\ncontext slightly differs here.)","date":"2020-09-29 15:05:45","modifiedFileCount":"31","status":"B","submitter":"Adrian Cole"},{"authorTime":"2020-10-21 10:53:01","codes":[{"authorDate":"2020-10-21 10:53:01","commitOrder":2,"curCode":"  @Test void linksSingleHostSpans() {\n    List<Span> singleHostSpans = asList(\n      span(\"a\", null, \"a\", Kind.CLIENT, \"web\", null, false),\n      span(\"a\", \"a\", \"b\", Kind.SERVER, \"app\", null, false)\n    );\n\n    assertThat(new DependencyLinker().putTrace(singleHostSpans).link()).containsOnly(\n      DependencyLink.newBuilder().parent(\"web\").child(\"app\").callCount(1L).build()\n    );\n  }\n","date":"2020-10-21 10:53:01","endLine":533,"groupId":"10139","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"linksSingleHostSpans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/af/d808efca9ef4a299434024b2d5242a426d4e89.src","preCode":"  public void linksSingleHostSpans() {\n    List<Span> singleHostSpans = asList(\n      span2(\"a\", null, \"a\", Kind.CLIENT, \"web\", null, false),\n      span2(\"a\", \"a\", \"b\", Kind.SERVER, \"app\", null, false)\n    );\n\n    assertThat(new DependencyLinker().putTrace(singleHostSpans).link()).containsOnly(\n      DependencyLink.newBuilder().parent(\"web\").child(\"app\").callCount(1L).build()\n    );\n  }\n","realPath":"zipkin-tests/src/test/java/zipkin2/internal/DependencyLinkerTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":524,"status":"M"},{"authorDate":"2020-10-21 10:53:01","commitOrder":2,"curCode":"  @Test void missingSpan() {\n    List<Span> singleHostSpans = asList(\n      span(\"a\", null, \"a\", Kind.SERVER, \"web\", null, false),\n      span(\"a\", \"a\", \"b\", Kind.CLIENT, \"app\", null, false)\n    );\n\n    assertThat(new DependencyLinker(logger).putTrace(singleHostSpans).link())\n      .containsOnly(DependencyLink.newBuilder().parent(\"web\").child(\"app\").callCount(1L).build());\n\n    assertThat(messages).contains(\n      \"detected missing link to client span\"\n    );\n  }\n","date":"2020-10-21 10:53:01","endLine":559,"groupId":"10139","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"missingSpan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/af/d808efca9ef4a299434024b2d5242a426d4e89.src","preCode":"  public void missingSpan() {\n    List<Span> singleHostSpans = asList(\n      span2(\"a\", null, \"a\", Kind.SERVER, \"web\", null, false),\n      span2(\"a\", \"a\", \"b\", Kind.CLIENT, \"app\", null, false)\n    );\n\n    assertThat(new DependencyLinker(logger).putTrace(singleHostSpans).link())\n      .containsOnly(DependencyLink.newBuilder().parent(\"web\").child(\"app\").callCount(1L).build());\n\n    assertThat(messages).contains(\n      \"detected missing link to client span\"\n    );\n  }\n","realPath":"zipkin-tests/src/test/java/zipkin2/internal/DependencyLinkerTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":547,"status":"M"}],"commitId":"eeb17681af780e563b44503d5af1eadb3ca6abfc","commitMessage":"@@@Refactors integration tests to be more isolated (#3249)\n\nThis makes all integration tests use unique data. Notably.  they no\nlonger use constant trace ID or service names.  as this can lead to\ndifficulty when a keyspace is re-used. For example.  service names and\ntrace IDs are often partitions. When debugging it is easier when test\ndata is isolated by a service name as it can be easily queried.\n\nThis also pulls the heaviest tests into their own classes so that they\ndon't overload the storage containers used by the bulk of our tests.\n\nFinally.  this fixes a few glitches in the v1 cassandra storage.","date":"2020-10-21 10:53:01","modifiedFileCount":"46","status":"M","submitter":"Adrian Cole"}]
