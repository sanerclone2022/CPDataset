[{"authorTime":"2019-08-01 15:59:08","codes":[{"authorDate":"2019-08-01 15:59:08","commitOrder":1,"curCode":"  @Test public void noneHealthy() throws Exception {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n    }\n  }\n","date":"2019-08-01 15:59:08","endLine":87,"groupId":"308","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"noneHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/78/9abca994ed26125b93514bc3e496917ba42c83.src","preCode":"  @Test public void noneHealthy() throws Exception {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"},{"authorDate":"2019-08-01 15:59:08","commitOrder":1,"curCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() throws Exception {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","date":"2019-08-01 15:59:08","endLine":129,"groupId":"308","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"notHealthyThenHealthyThenNotHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/78/9abca994ed26125b93514bc3e496917ba42c83.src","preCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() throws Exception {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"}],"commitId":"17346391769d92f6ef376f493aa01b033a393b83","commitMessage":"@@@Add support for health-checking ES client. (#2722)\n\n* Add support for health-checking ES client.\n\n* Configure\n\n* Less flaky test?\n\n* Finish\n\n* Explicitly set duration unit.\n","date":"2019-08-01 15:59:08","modifiedFileCount":"6","status":"B","submitter":"Anuraag Agrawal"},{"authorTime":"2019-08-04 04:43:21","codes":[{"authorDate":"2019-08-04 04:43:21","commitOrder":2,"curCode":"  @Test public void noneHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      assertThat(result.error()).hasMessage(String.format(\n        \"couldn't connect any of [Endpoint{127.0.0.1:%s, weight=1000}, Endpoint{127.0.0.1:%s, weight=1000}]\",\n        server1.httpPort(), server2.httpPort()\n      ));\n    }\n  }\n","date":"2019-08-04 04:43:21","endLine":104,"groupId":"1507","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"noneHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/a7/b80896291d0921923ea2c38a6ba4f1a0a5a9a5.src","preCode":"  @Test public void noneHealthy() throws Exception {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2019-08-04 04:43:21","commitOrder":2,"curCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","date":"2019-08-04 04:43:21","endLine":146,"groupId":"308","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"notHealthyThenHealthyThenNotHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/a7/b80896291d0921923ea2c38a6ba4f1a0a5a9a5.src","preCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() throws Exception {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"7f6801286e2d7f19fc1198e7cdc4c6345e99b6fa","commitMessage":"@@@Makes the toString of Elasticsearch nicer as it is in the health check (#2730)\n\n","date":"2019-08-04 04:43:21","modifiedFileCount":"5","status":"M","submitter":"Adrian Cole"},{"authorTime":"2019-08-04 04:43:21","codes":[{"authorDate":"2019-09-23 10:13:35","commitOrder":3,"curCode":"  @Test public void noneHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      assertThat(result.error()).hasMessage(String.format(\n        \"couldn't connect any of [Endpoint{127.0.0.1:%s, weight=1000}, Endpoint{127.0.0.1:%s, weight=1000}]\",\n        server1.httpPort(), server2.httpPort()\n      ));\n      assertThat(result.error())\n        .hasCause(null); \r\n    }\n  }\n","date":"2019-09-23 10:13:35","endLine":120,"groupId":"1507","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"noneHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/78/e1244bd14c98e0abe7bef7dcdc7c9d98c4539a.src","preCode":"  @Test public void noneHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      assertThat(result.error()).hasMessage(String.format(\n        \"couldn't connect any of [Endpoint{127.0.0.1:%s, weight=1000}, Endpoint{127.0.0.1:%s, weight=1000}]\",\n        server1.httpPort(), server2.httpPort()\n      ));\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2019-08-04 04:43:21","commitOrder":3,"curCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","date":"2019-08-04 04:43:21","endLine":146,"groupId":"308","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"notHealthyThenHealthyThenNotHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/a7/b80896291d0921923ea2c38a6ba4f1a0a5a9a5.src","preCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"N"}],"commitId":"1214e77c08b63529f4f3d7416d45bc09e24e3df3","commitMessage":"@@@Updates to Armeria 0.92 and cleans up things (#2813)\n\n","date":"2019-09-23 10:13:35","modifiedFileCount":"32","status":"M","submitter":"Adrian Cole"},{"authorTime":"2019-10-01 19:13:42","codes":[{"authorDate":"2019-09-23 10:13:35","commitOrder":4,"curCode":"  @Test public void noneHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      assertThat(result.error()).hasMessage(String.format(\n        \"couldn't connect any of [Endpoint{127.0.0.1:%s, weight=1000}, Endpoint{127.0.0.1:%s, weight=1000}]\",\n        server1.httpPort(), server2.httpPort()\n      ));\n      assertThat(result.error())\n        .hasCause(null); \r\n    }\n  }\n","date":"2019-09-23 10:13:35","endLine":120,"groupId":"1507","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"noneHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/78/e1244bd14c98e0abe7bef7dcdc7c9d98c4539a.src","preCode":"  @Test public void noneHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      assertThat(result.error()).hasMessage(String.format(\n        \"couldn't connect any of [Endpoint{127.0.0.1:%s, weight=1000}, Endpoint{127.0.0.1:%s, weight=1000}]\",\n        server1.httpPort(), server2.httpPort()\n      ));\n      assertThat(result.error())\n        .hasCause(null); \r\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2019-10-01 19:13:42","commitOrder":4,"curCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n      pretendIndexTemplatesExist(storage);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","date":"2019-10-01 19:13:42","endLine":175,"groupId":"308","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"notHealthyThenHealthyThenNotHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/a2/04af04a1cc848bc10eca28ccf317483ad94971.src","preCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"}],"commitId":"797f36d0ab169173d43de5de1cb7e7bd98dcd39a","commitMessage":"@@@Ensures index templates are verified before passing health. (#2827)\n\nCurrently.  we pass health checks which can hide errors provisioning\nindex templates.  and also worsen template provisioning race conditions.\n\nThis makes sure index templates are at least checked once per startup.\n\nThis also refactors the code so that someone can later do offline\ntemplate installation.\n\nFixes #2825","date":"2019-10-01 19:13:42","modifiedFileCount":"11","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-04-15 13:30:04","codes":[{"authorDate":"2019-09-23 10:13:35","commitOrder":5,"curCode":"  @Test public void noneHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      assertThat(result.error()).hasMessage(String.format(\n        \"couldn't connect any of [Endpoint{127.0.0.1:%s, weight=1000}, Endpoint{127.0.0.1:%s, weight=1000}]\",\n        server1.httpPort(), server2.httpPort()\n      ));\n      assertThat(result.error())\n        .hasCause(null); \r\n    }\n  }\n","date":"2019-09-23 10:13:35","endLine":120,"groupId":"1507","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"noneHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/78/e1244bd14c98e0abe7bef7dcdc7c9d98c4539a.src","preCode":"  @Test public void noneHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      assertThat(result.error()).hasMessage(String.format(\n        \"couldn't connect any of [Endpoint{127.0.0.1:%s, weight=1000}, Endpoint{127.0.0.1:%s, weight=1000}]\",\n        server1.httpPort(), server2.httpPort()\n      ));\n      assertThat(result.error())\n        .hasCause(null); \r\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2020-04-15 13:30:04","commitOrder":5,"curCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","date":"2020-04-15 13:30:04","endLine":167,"groupId":"308","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"notHealthyThenHealthyThenNotHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/58/3d30461bc0955271bfc3fcd67f2e68ae7f4be8.src","preCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n      pretendIndexTemplatesExist(storage);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"10c478ba049696e9ef32e8400a3d7209e3f31c5a","commitMessage":"@@@Allows opting out via ES_ENSURE_TEMPLATES=false (#3063)\n\nUsers can now disable Elasticsearch index template creation at startup\nvia `ES_ENSURE_TEMPLATES=false`. This breaks the warranty of the install\nand any upgrades when they do this.\n\nFixes #3025","date":"2020-04-15 13:30:04","modifiedFileCount":"9","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-07-03 22:03:22","codes":[{"authorDate":"2020-07-03 22:03:22","commitOrder":6,"curCode":"  @Test public void noneHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      assertThat(result.error())\n        .isInstanceOf(EmptyEndpointGroupException.class);\n    }\n  }\n","date":"2020-07-03 22:03:22","endLine":133,"groupId":"1037","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"noneHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/26/6baed7b5d4c6a49c8e9fc368aa2ce81a78b843.src","preCode":"  @Test public void noneHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n      assertThat(result.error()).hasMessage(String.format(\n        \"couldn't connect any of [Endpoint{127.0.0.1:%s, weight=1000}, Endpoint{127.0.0.1:%s, weight=1000}]\",\n        server1.httpPort(), server2.httpPort()\n      ));\n      assertThat(result.error())\n        .hasCause(null); \r\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2020-07-03 22:03:22","commitOrder":6,"curCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      awaitTimeout.untilAsserted(() -> assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      awaitTimeout.untilAsserted(() -> assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","date":"2020-07-03 22:03:22","endLine":170,"groupId":"1037","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"notHealthyThenHealthyThenNotHealthy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/26/6baed7b5d4c6a49c8e9fc368aa2ce81a78b843.src","preCode":"  @Test public void notHealthyThenHealthyThenNotHealthy() {\n    server1Health.setHealthy(false);\n    server2Health.setHealthy(false);\n\n    try (ElasticsearchStorage storage = context.getBean(ElasticsearchStorage.class)) {\n      CheckResult result = storage.check();\n      assertThat(result.ok()).isFalse();\n\n      server2Health.setHealthy(true);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isTrue());\n\n      server2Health.setHealthy(false);\n\n      \r\n      await().timeout(300, TimeUnit.MILLISECONDS).untilAsserted(() ->\n        assertThat(storage.check().ok()).isFalse());\n    }\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"}],"commitId":"5cfde9ea1264779dadce175a5c2fd1e43294a13c","commitMessage":"@@@Updates versions.  most notably Armeria (#3130)\n\n","date":"2020-07-03 22:03:22","modifiedFileCount":"17","status":"M","submitter":"Adrian Cole"}]
