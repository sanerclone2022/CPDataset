[{"authorTime":"2019-07-14 15:44:26","codes":[{"authorDate":"2019-07-14 15:44:26","commitOrder":1,"curCode":"  @Test public void getRemoteServiceNames_dedupes() throws IOException {\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> CLIENT_SPAN.toBuilder().id(i + 1).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(serviceAndSpanNames().getRemoteServiceNames(\"frontend\").execute())\n      .containsExactly(CLIENT_SPAN.remoteServiceName());\n  }\n","date":"2019-07-14 15:44:26","endLine":102,"groupId":"337","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getRemoteServiceNames_dedupes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/78/89c51581b3746b5d7389e7371d6cae003a6717.src","preCode":"  @Test public void getRemoteServiceNames_dedupes() throws IOException {\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> CLIENT_SPAN.toBuilder().id(i + 1).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(serviceAndSpanNames().getRemoteServiceNames(\"frontend\").execute())\n      .containsExactly(CLIENT_SPAN.remoteServiceName());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"},{"authorDate":"2019-07-14 15:44:26","commitOrder":1,"curCode":"  @Test public void getSpanNames_dedupes() throws IOException {\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> CLIENT_SPAN.toBuilder().id(i + 1).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(serviceAndSpanNames().getSpanNames(\"frontend\").execute())\n      .containsExactly(CLIENT_SPAN.name());\n  }\n","date":"2019-07-14 15:44:26","endLine":160,"groupId":"337","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSpanNames_dedupes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/78/89c51581b3746b5d7389e7371d6cae003a6717.src","preCode":"  @Test public void getSpanNames_dedupes() throws IOException {\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> CLIENT_SPAN.toBuilder().id(i + 1).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(serviceAndSpanNames().getSpanNames(\"frontend\").execute())\n      .containsExactly(CLIENT_SPAN.name());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"B"}],"commitId":"f43f1905d0d0fc057ba1da0631a6be9fab4d0e2d","commitMessage":"@@@Accept many spans at once instead of in a loop in service name ITs. (#2665)\n\n","date":"2019-07-14 15:44:26","modifiedFileCount":"1","status":"B","submitter":"Anuraag Agrawal"},{"authorTime":"2019-07-24 17:27:05","codes":[{"authorDate":"2019-07-24 17:27:05","commitOrder":2,"curCode":"  @Test void getRemoteServiceNames_dedupes() throws IOException {\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> CLIENT_SPAN.toBuilder().id(i + 1).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(names().getRemoteServiceNames(\"frontend\").execute())\n      .containsExactly(CLIENT_SPAN.remoteServiceName());\n  }\n","date":"2019-07-24 17:27:05","endLine":95,"groupId":"337","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getRemoteServiceNames_dedupes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/9c/8d5001e7a6610cb9344b867094471b91663155.src","preCode":"  @Test public void getRemoteServiceNames_dedupes() throws IOException {\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> CLIENT_SPAN.toBuilder().id(i + 1).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(serviceAndSpanNames().getRemoteServiceNames(\"frontend\").execute())\n      .containsExactly(CLIENT_SPAN.remoteServiceName());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2019-07-24 17:27:05","commitOrder":2,"curCode":"  @Test void getSpanNames_dedupes() throws IOException {\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> CLIENT_SPAN.toBuilder().id(i + 1).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(names().getSpanNames(\"frontend\").execute())\n      .containsExactly(CLIENT_SPAN.name());\n  }\n","date":"2019-07-24 17:27:05","endLine":153,"groupId":"337","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getSpanNames_dedupes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/9c/8d5001e7a6610cb9344b867094471b91663155.src","preCode":"  @Test public void getSpanNames_dedupes() throws IOException {\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> CLIENT_SPAN.toBuilder().id(i + 1).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(serviceAndSpanNames().getSpanNames(\"frontend\").execute())\n      .containsExactly(CLIENT_SPAN.name());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"b2b86267d0cfe7d37bcf89ae7e66118fae76836f","commitMessage":"@@@Migrate storage IT to JUnit5 (#2705)\n\n","date":"2019-07-24 17:27:05","modifiedFileCount":"18","status":"M","submitter":"Anuraag Agrawal"},{"authorTime":"2020-03-11 18:07:43","codes":[{"authorDate":"2020-03-11 18:07:43","commitOrder":3,"curCode":"  @Test protected void getRemoteServiceNames_dedupes() throws IOException {\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> CLIENT_SPAN.toBuilder().id(i + 1).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(names().getRemoteServiceNames(\"frontend\").execute())\n      .containsExactly(CLIENT_SPAN.remoteServiceName());\n  }\n","date":"2020-03-11 18:07:43","endLine":94,"groupId":"337","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getRemoteServiceNames_dedupes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/98/c197cae917a93a6ca176abee62a6294c54c27a.src","preCode":"  @Test void getRemoteServiceNames_dedupes() throws IOException {\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> CLIENT_SPAN.toBuilder().id(i + 1).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(names().getRemoteServiceNames(\"frontend\").execute())\n      .containsExactly(CLIENT_SPAN.remoteServiceName());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2020-03-11 18:07:43","commitOrder":3,"curCode":"  @Test protected void getSpanNames_dedupes() throws IOException {\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> CLIENT_SPAN.toBuilder().id(i + 1).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(names().getSpanNames(\"frontend\").execute())\n      .containsExactly(CLIENT_SPAN.name());\n  }\n","date":"2020-03-11 18:07:43","endLine":152,"groupId":"337","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getSpanNames_dedupes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/98/c197cae917a93a6ca176abee62a6294c54c27a.src","preCode":"  @Test void getSpanNames_dedupes() throws IOException {\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> CLIENT_SPAN.toBuilder().id(i + 1).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(names().getSpanNames(\"frontend\").execute())\n      .containsExactly(CLIENT_SPAN.name());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"946b96ce18e9b5cdc31bb447bcf09dc1df383f0f","commitMessage":"@@@Fixes incorrect handling of getTrace and IT access modifiers (#3019)\n\nI noticed porting zipkin-voltdb to latest.  that we incorrectly handled\ngetTrace in some places. Basically.  we treated a non-nullable result as\nnullable. This fixes that and also corrects method protection so that\nsubclasses of the IT can override (ex to ignore).","date":"2020-03-11 18:07:43","modifiedFileCount":"12","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-10-21 10:53:01","codes":[{"authorDate":"2020-10-21 10:53:01","commitOrder":4,"curCode":"  @Test protected void getRemoteServiceNames_dedupes(TestInfo testInfo) throws Exception {\n    String testSuffix = testSuffix(testInfo);\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> spanBuilder(testSuffix).remoteEndpoint(BACKEND).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(names().getRemoteServiceNames(spans.get(0).localServiceName()).execute())\n      .containsExactly(BACKEND.serviceName());\n  }\n","date":"2020-10-21 10:53:01","endLine":106,"groupId":"10293","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"getRemoteServiceNames_dedupes","params":"(TestInfotestInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/0b/52f97114db4969ab10ec1c6666cc67d192e1fb.src","preCode":"  @Test protected void getRemoteServiceNames_dedupes() throws IOException {\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> CLIENT_SPAN.toBuilder().id(i + 1).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(names().getRemoteServiceNames(\"frontend\").execute())\n      .containsExactly(CLIENT_SPAN.remoteServiceName());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2020-10-21 10:53:01","commitOrder":4,"curCode":"  @Test protected void getSpanNames_dedupes(TestInfo testInfo) throws Exception {\n    String testSuffix = testSuffix(testInfo);\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> spanBuilder(testSuffix).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(names().getSpanNames(spans.get(0).localServiceName()).execute())\n      .containsExactly(spans.get(0).name());\n  }\n","date":"2020-10-21 10:53:01","endLine":183,"groupId":"10293","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"getSpanNames_dedupes","params":"(TestInfotestInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/0b/52f97114db4969ab10ec1c6666cc67d192e1fb.src","preCode":"  @Test protected void getSpanNames_dedupes() throws IOException {\n    List<Span> spans = IntStream.rangeClosed(0, 50)\n      .mapToObj(i -> CLIENT_SPAN.toBuilder().id(i + 1).build())\n      .collect(Collectors.toList());\n    accept(spans);\n\n    assertThat(names().getSpanNames(\"frontend\").execute())\n      .containsExactly(CLIENT_SPAN.name());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"}],"commitId":"eeb17681af780e563b44503d5af1eadb3ca6abfc","commitMessage":"@@@Refactors integration tests to be more isolated (#3249)\n\nThis makes all integration tests use unique data. Notably.  they no\nlonger use constant trace ID or service names.  as this can lead to\ndifficulty when a keyspace is re-used. For example.  service names and\ntrace IDs are often partitions. When debugging it is easier when test\ndata is isolated by a service name as it can be easily queried.\n\nThis also pulls the heaviest tests into their own classes so that they\ndon't overload the storage containers used by the bulk of our tests.\n\nFinally.  this fixes a few glitches in the v1 cassandra storage.","date":"2020-10-21 10:53:01","modifiedFileCount":"46","status":"M","submitter":"Adrian Cole"}]
