[{"authorTime":"2019-05-02 12:01:47","codes":[{"authorDate":"2019-06-24 09:11:48","commitOrder":3,"curCode":"  void messageWithMultipleSpans(SpanBytesEncoder encoder) throws Exception {\n    byte[] message = encoder.encodeList(spans);\n    activemq.pushMessage(collector.queue, message);\n\n    assertThat(receivedSpans.take()).isEqualTo(spans);\n\n    assertThat(activemqMetrics.messages()).isEqualTo(1);\n    assertThat(activemqMetrics.messagesDropped()).isZero();\n    assertThat(activemqMetrics.bytes()).isEqualTo(message.length);\n    assertThat(activemqMetrics.spans()).isEqualTo(spans.size());\n    assertThat(activemqMetrics.spansDropped()).isZero();\n  }\n","date":"2019-06-24 09:11:48","endLine":126,"groupId":"779","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"messageWithMultipleSpans","params":"(SpanBytesEncoderencoder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/52/34423eaa58c7161174fcd747d2195f3c4e5ed6.src","preCode":"  void messageWithMultipleSpans(SpanBytesEncoder encoder) throws Exception {\n    byte[] message = encoder.encodeList(spans);\n    activemq.pushMessage(collector.queue, message);\n\n    assertThat(receivedSpans.take()).isEqualTo(spans);\n\n    assertThat(activemqMetrics.messages()).isEqualTo(1);\n    assertThat(activemqMetrics.messagesDropped()).isZero();\n    assertThat(activemqMetrics.bytes()).isEqualTo(message.length);\n    assertThat(activemqMetrics.spans()).isEqualTo(spans.size());\n    assertThat(activemqMetrics.spansDropped()).isZero();\n  }\n","realPath":"zipkin-collector/activemq/src/test/java/zipkin2/collector/activemq/ITActiveMQCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"},{"authorDate":"2019-05-02 12:01:47","commitOrder":3,"curCode":"  void messageWithMultipleSpans(SpanBytesEncoder encoder) throws Exception {\n    byte[] message = encoder.encodeList(spans);\n    rabbit.publish(message);\n\n    Thread.sleep(1000);\n    assertThat(rabbit.storage.acceptedSpanCount()).isEqualTo(spans.size());\n\n    assertThat(rabbit.rabbitmqMetrics.messages()).isEqualTo(1);\n    assertThat(rabbit.rabbitmqMetrics.messagesDropped()).isZero();\n    assertThat(rabbit.rabbitmqMetrics.bytes()).isEqualTo(message.length);\n    assertThat(rabbit.rabbitmqMetrics.spans()).isEqualTo(spans.size());\n    assertThat(rabbit.rabbitmqMetrics.spansDropped()).isZero();\n  }\n","date":"2019-05-02 12:01:47","endLine":102,"groupId":"2655","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"messageWithMultipleSpans","params":"(SpanBytesEncoderencoder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/45/359dcb5bc9ab0dead9bf6b1c582d933aa9d516.src","preCode":"  void messageWithMultipleSpans(SpanBytesEncoder encoder) throws Exception {\n    byte[] message = encoder.encodeList(spans);\n    rabbit.publish(message);\n\n    Thread.sleep(1000);\n    assertThat(rabbit.storage.acceptedSpanCount()).isEqualTo(spans.size());\n\n    assertThat(rabbit.rabbitmqMetrics.messages()).isEqualTo(1);\n    assertThat(rabbit.rabbitmqMetrics.messagesDropped()).isZero();\n    assertThat(rabbit.rabbitmqMetrics.bytes()).isEqualTo(message.length);\n    assertThat(rabbit.rabbitmqMetrics.spans()).isEqualTo(spans.size());\n    assertThat(rabbit.rabbitmqMetrics.spansDropped()).isZero();\n  }\n","realPath":"zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ITRabbitMQCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"NB"}],"commitId":"3e9e876d65bd0b98a105976b3e5087b65cf597ec","commitMessage":"@@@Adds ActiveMQ 5.x transport (#2639)\n\nDue to popular demand.  this adds support for ActiveMQ 5.x.\nThis is enabled when the env variable `ACTIVEMQ_URL` is set to a valid\nbroker. Thanks very much to @IAMTJW for early work towards this change.","date":"2019-06-24 09:11:48","modifiedFileCount":"1","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-05-26 13:57:47","codes":[{"authorDate":"2019-06-24 09:11:48","commitOrder":4,"curCode":"  void messageWithMultipleSpans(SpanBytesEncoder encoder) throws Exception {\n    byte[] message = encoder.encodeList(spans);\n    activemq.pushMessage(collector.queue, message);\n\n    assertThat(receivedSpans.take()).isEqualTo(spans);\n\n    assertThat(activemqMetrics.messages()).isEqualTo(1);\n    assertThat(activemqMetrics.messagesDropped()).isZero();\n    assertThat(activemqMetrics.bytes()).isEqualTo(message.length);\n    assertThat(activemqMetrics.spans()).isEqualTo(spans.size());\n    assertThat(activemqMetrics.spansDropped()).isZero();\n  }\n","date":"2019-06-24 09:11:48","endLine":126,"groupId":"779","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"messageWithMultipleSpans","params":"(SpanBytesEncoderencoder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/52/34423eaa58c7161174fcd747d2195f3c4e5ed6.src","preCode":"  void messageWithMultipleSpans(SpanBytesEncoder encoder) throws Exception {\n    byte[] message = encoder.encodeList(spans);\n    activemq.pushMessage(collector.queue, message);\n\n    assertThat(receivedSpans.take()).isEqualTo(spans);\n\n    assertThat(activemqMetrics.messages()).isEqualTo(1);\n    assertThat(activemqMetrics.messagesDropped()).isZero();\n    assertThat(activemqMetrics.bytes()).isEqualTo(message.length);\n    assertThat(activemqMetrics.spans()).isEqualTo(spans.size());\n    assertThat(activemqMetrics.spansDropped()).isZero();\n  }\n","realPath":"zipkin-collector/activemq/src/test/java/zipkin2/collector/activemq/ITActiveMQCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"N"},{"authorDate":"2020-05-26 13:57:47","commitOrder":4,"curCode":"  void messageWithMultipleSpans(SpanBytesEncoder encoder) throws Exception {\n    byte[] message = encoder.encodeList(spans);\n    publish(message);\n\n    Thread.sleep(200L);\n    assertThat(storage.acceptedSpanCount()).isEqualTo(spans.size());\n\n    assertThat(rabbitmqMetrics.messages()).isEqualTo(1);\n    assertThat(rabbitmqMetrics.messagesDropped()).isZero();\n    assertThat(rabbitmqMetrics.bytes()).isEqualTo(message.length);\n    assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size());\n    assertThat(rabbitmqMetrics.spansDropped()).isZero();\n  }\n","date":"2020-05-26 13:57:47","endLine":76,"groupId":"779","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"messageWithMultipleSpans","params":"(SpanBytesEncoderencoder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/f7/b2632fda140f67ade77d0151b48d160aeda852.src","preCode":"  void messageWithMultipleSpans(SpanBytesEncoder encoder) throws Exception {\n    byte[] message = encoder.encodeList(spans);\n    rabbit.publish(message);\n\n    Thread.sleep(1000);\n    assertThat(rabbit.storage.acceptedSpanCount()).isEqualTo(spans.size());\n\n    assertThat(rabbit.rabbitmqMetrics.messages()).isEqualTo(1);\n    assertThat(rabbit.rabbitmqMetrics.messagesDropped()).isZero();\n    assertThat(rabbit.rabbitmqMetrics.bytes()).isEqualTo(message.length);\n    assertThat(rabbit.rabbitmqMetrics.spans()).isEqualTo(spans.size());\n    assertThat(rabbit.rabbitmqMetrics.spansDropped()).isZero();\n  }\n","realPath":"zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ITRabbitMQCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"aedded56faeae9c5bc92bad6cb4bc6e6a2704071","commitMessage":"@@@Stops looking for local RabbitMQ connection (#3093)\n\nThis improves the Docker based RabbitMQ tests in the same manner as\nhttps://github.com/openzipkin/zipkin-reporter-java/pull/176\n\nThis notably stops looking for a local RabbitMQ install. It also reduces\nflakes by using the CLI and not sharing static collector resources in\ninstance-level tests.\n","date":"2020-05-26 13:57:47","modifiedFileCount":"5","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-12-07 13:22:06","codes":[{"authorDate":"2019-06-24 09:11:48","commitOrder":5,"curCode":"  void messageWithMultipleSpans(SpanBytesEncoder encoder) throws Exception {\n    byte[] message = encoder.encodeList(spans);\n    activemq.pushMessage(collector.queue, message);\n\n    assertThat(receivedSpans.take()).isEqualTo(spans);\n\n    assertThat(activemqMetrics.messages()).isEqualTo(1);\n    assertThat(activemqMetrics.messagesDropped()).isZero();\n    assertThat(activemqMetrics.bytes()).isEqualTo(message.length);\n    assertThat(activemqMetrics.spans()).isEqualTo(spans.size());\n    assertThat(activemqMetrics.spansDropped()).isZero();\n  }\n","date":"2019-06-24 09:11:48","endLine":126,"groupId":"10456","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"messageWithMultipleSpans","params":"(SpanBytesEncoderencoder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/52/34423eaa58c7161174fcd747d2195f3c4e5ed6.src","preCode":"  void messageWithMultipleSpans(SpanBytesEncoder encoder) throws Exception {\n    byte[] message = encoder.encodeList(spans);\n    activemq.pushMessage(collector.queue, message);\n\n    assertThat(receivedSpans.take()).isEqualTo(spans);\n\n    assertThat(activemqMetrics.messages()).isEqualTo(1);\n    assertThat(activemqMetrics.messagesDropped()).isZero();\n    assertThat(activemqMetrics.bytes()).isEqualTo(message.length);\n    assertThat(activemqMetrics.spans()).isEqualTo(spans.size());\n    assertThat(activemqMetrics.spansDropped()).isZero();\n  }\n","realPath":"zipkin-collector/activemq/src/test/java/zipkin2/collector/activemq/ITActiveMQCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"N"},{"authorDate":"2020-12-07 13:22:06","commitOrder":5,"curCode":"  void messageWithMultipleSpans(RabbitMQCollector.Builder builder, SpanBytesEncoder encoder)\n    throws Exception {\n    byte[] message = encoder.encodeList(spans);\n\n    produceSpans(message, builder.queue);\n\n    try (RabbitMQCollector collector = builder.build()) {\n      collector.start();\n      assertThat(receivedSpans.take()).containsAll(spans);\n    }\n\n    assertThat(rabbitmqMetrics.messages()).isEqualTo(1);\n    assertThat(rabbitmqMetrics.messagesDropped()).isZero();\n    assertThat(rabbitmqMetrics.bytes()).isEqualTo(message.length);\n    assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size());\n    assertThat(rabbitmqMetrics.spansDropped()).isZero();\n  }\n","date":"2020-12-07 13:22:06","endLine":118,"groupId":"10456","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"messageWithMultipleSpans","params":"(RabbitMQCollector.Builderbuilder@SpanBytesEncoderencoder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/5e/084020e15d636cd7e521628ade580d07aeed59.src","preCode":"  void messageWithMultipleSpans(SpanBytesEncoder encoder) throws Exception {\n    byte[] message = encoder.encodeList(spans);\n    publish(message);\n\n    Thread.sleep(200L);\n    assertThat(storage.acceptedSpanCount()).isEqualTo(spans.size());\n\n    assertThat(rabbitmqMetrics.messages()).isEqualTo(1);\n    assertThat(rabbitmqMetrics.messagesDropped()).isZero();\n    assertThat(rabbitmqMetrics.bytes()).isEqualTo(message.length);\n    assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size());\n    assertThat(rabbitmqMetrics.spansDropped()).isZero();\n  }\n","realPath":"zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ITRabbitMQCollector.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"28d9529e3fa7ff807bd6c7cb757587fbdb8ae108","commitMessage":"@@@Ports last docker tests to jupiter (#3326)\n\nThis cleans up testcontainers fixtures and ports the two remaining\ndocker tests to jupiter (kafka and rabbit).\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>","date":"2020-12-07 13:22:06","modifiedFileCount":"9","status":"M","submitter":"Adrian Cole"}]
