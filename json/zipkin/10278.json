[{"authorTime":"2019-04-28 08:05:51","codes":[{"authorDate":"2019-04-28 08:05:51","commitOrder":1,"curCode":"  @Test public void getRemoteServiceNames() throws Exception {\n    assertThat(serviceAndSpanNames().getRemoteServiceNames(\"frontend\").execute())\n      .isEmpty();\n\n    accept(CLIENT_SPAN);\n\n    assertThat(serviceAndSpanNames().getRemoteServiceNames(\"frontend\" + 1).execute())\n      .isEmpty();\n\n    assertThat(serviceAndSpanNames().getRemoteServiceNames(\"frontend\").execute())\n      .contains(CLIENT_SPAN.remoteServiceName());\n  }\n","date":"2019-04-28 08:05:51","endLine":76,"groupId":"3479","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getRemoteServiceNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/c8/c3f1591648b1401726fe393667419818f38616.src","preCode":"  @Test public void getRemoteServiceNames() throws Exception {\n    assertThat(serviceAndSpanNames().getRemoteServiceNames(\"frontend\").execute())\n      .isEmpty();\n\n    accept(CLIENT_SPAN);\n\n    assertThat(serviceAndSpanNames().getRemoteServiceNames(\"frontend\" + 1).execute())\n      .isEmpty();\n\n    assertThat(serviceAndSpanNames().getRemoteServiceNames(\"frontend\").execute())\n      .contains(CLIENT_SPAN.remoteServiceName());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2019-04-28 08:05:51","commitOrder":1,"curCode":"  @Test public void getSpanNames() throws Exception {\n    assertThat(serviceAndSpanNames().getSpanNames(\"frontend\").execute())\n      .isEmpty();\n\n    accept(CLIENT_SPAN);\n\n    assertThat(serviceAndSpanNames().getSpanNames(\"frontend\" + 1).execute())\n      .isEmpty();\n\n    assertThat(serviceAndSpanNames().getSpanNames(\"frontend\").execute())\n      .contains(CLIENT_SPAN.name());\n  }\n","date":"2019-04-28 08:05:51","endLine":133,"groupId":"3479","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSpanNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/c8/c3f1591648b1401726fe393667419818f38616.src","preCode":"  @Test public void getSpanNames() throws Exception {\n    assertThat(serviceAndSpanNames().getSpanNames(\"frontend\").execute())\n      .isEmpty();\n\n    accept(CLIENT_SPAN);\n\n    assertThat(serviceAndSpanNames().getSpanNames(\"frontend\" + 1).execute())\n      .isEmpty();\n\n    assertThat(serviceAndSpanNames().getSpanNames(\"frontend\").execute())\n      .contains(CLIENT_SPAN.name());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"}],"commitId":"6b68e31e779ca60a1936ddcfcf96abde2b529bc0","commitMessage":"@@@Extracts zipkin-tests jar before we publish to o.a.z.zipkin2 namespace (#2546)\n\nThis fixes an anti-pattern before we commit to it in the new namespace.","date":"2019-04-28 08:05:51","modifiedFileCount":"3","status":"B","submitter":"Adrian Cole"},{"authorTime":"2019-07-24 17:27:05","codes":[{"authorDate":"2019-07-24 17:27:05","commitOrder":2,"curCode":"  @Test void getRemoteServiceNames() throws Exception {\n    assertThat(names().getRemoteServiceNames(\"frontend\").execute())\n      .isEmpty();\n\n    accept(CLIENT_SPAN);\n\n    assertThat(names().getRemoteServiceNames(\"frontend\" + 1).execute())\n      .isEmpty();\n\n    assertThat(names().getRemoteServiceNames(\"frontend\").execute())\n      .contains(CLIENT_SPAN.remoteServiceName());\n  }\n","date":"2019-07-24 17:27:05","endLine":67,"groupId":"3479","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getRemoteServiceNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/9c/8d5001e7a6610cb9344b867094471b91663155.src","preCode":"  @Test public void getRemoteServiceNames() throws Exception {\n    assertThat(serviceAndSpanNames().getRemoteServiceNames(\"frontend\").execute())\n      .isEmpty();\n\n    accept(CLIENT_SPAN);\n\n    assertThat(serviceAndSpanNames().getRemoteServiceNames(\"frontend\" + 1).execute())\n      .isEmpty();\n\n    assertThat(serviceAndSpanNames().getRemoteServiceNames(\"frontend\").execute())\n      .contains(CLIENT_SPAN.remoteServiceName());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2019-07-24 17:27:05","commitOrder":2,"curCode":"  @Test void getSpanNames() throws Exception {\n    assertThat(names().getSpanNames(\"frontend\").execute())\n      .isEmpty();\n\n    accept(CLIENT_SPAN);\n\n    assertThat(names().getSpanNames(\"frontend\" + 1).execute())\n      .isEmpty();\n\n    assertThat(names().getSpanNames(\"frontend\").execute())\n      .contains(CLIENT_SPAN.name());\n  }\n","date":"2019-07-24 17:27:05","endLine":128,"groupId":"3479","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getSpanNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/9c/8d5001e7a6610cb9344b867094471b91663155.src","preCode":"  @Test public void getSpanNames() throws Exception {\n    assertThat(serviceAndSpanNames().getSpanNames(\"frontend\").execute())\n      .isEmpty();\n\n    accept(CLIENT_SPAN);\n\n    assertThat(serviceAndSpanNames().getSpanNames(\"frontend\" + 1).execute())\n      .isEmpty();\n\n    assertThat(serviceAndSpanNames().getSpanNames(\"frontend\").execute())\n      .contains(CLIENT_SPAN.name());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"b2b86267d0cfe7d37bcf89ae7e66118fae76836f","commitMessage":"@@@Migrate storage IT to JUnit5 (#2705)\n\n","date":"2019-07-24 17:27:05","modifiedFileCount":"18","status":"M","submitter":"Anuraag Agrawal"},{"authorTime":"2020-03-11 18:07:43","codes":[{"authorDate":"2020-03-11 18:07:43","commitOrder":3,"curCode":"  @Test protected void getRemoteServiceNames() throws Exception {\n    assertThat(names().getRemoteServiceNames(\"frontend\").execute())\n      .isEmpty();\n\n    accept(CLIENT_SPAN);\n\n    assertThat(names().getRemoteServiceNames(\"frontend\" + 1).execute())\n      .isEmpty();\n\n    assertThat(names().getRemoteServiceNames(\"frontend\").execute())\n      .contains(CLIENT_SPAN.remoteServiceName());\n  }\n","date":"2020-03-11 18:07:43","endLine":66,"groupId":"3479","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getRemoteServiceNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/98/c197cae917a93a6ca176abee62a6294c54c27a.src","preCode":"  @Test void getRemoteServiceNames() throws Exception {\n    assertThat(names().getRemoteServiceNames(\"frontend\").execute())\n      .isEmpty();\n\n    accept(CLIENT_SPAN);\n\n    assertThat(names().getRemoteServiceNames(\"frontend\" + 1).execute())\n      .isEmpty();\n\n    assertThat(names().getRemoteServiceNames(\"frontend\").execute())\n      .contains(CLIENT_SPAN.remoteServiceName());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2020-03-11 18:07:43","commitOrder":3,"curCode":"  @Test protected void getSpanNames() throws Exception {\n    assertThat(names().getSpanNames(\"frontend\").execute())\n      .isEmpty();\n\n    accept(CLIENT_SPAN);\n\n    assertThat(names().getSpanNames(\"frontend\" + 1).execute())\n      .isEmpty();\n\n    assertThat(names().getSpanNames(\"frontend\").execute())\n      .contains(CLIENT_SPAN.name());\n  }\n","date":"2020-03-11 18:07:43","endLine":127,"groupId":"3479","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getSpanNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/98/c197cae917a93a6ca176abee62a6294c54c27a.src","preCode":"  @Test void getSpanNames() throws Exception {\n    assertThat(names().getSpanNames(\"frontend\").execute())\n      .isEmpty();\n\n    accept(CLIENT_SPAN);\n\n    assertThat(names().getSpanNames(\"frontend\" + 1).execute())\n      .isEmpty();\n\n    assertThat(names().getSpanNames(\"frontend\").execute())\n      .contains(CLIENT_SPAN.name());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"946b96ce18e9b5cdc31bb447bcf09dc1df383f0f","commitMessage":"@@@Fixes incorrect handling of getTrace and IT access modifiers (#3019)\n\nI noticed porting zipkin-voltdb to latest.  that we incorrectly handled\ngetTrace in some places. Basically.  we treated a non-nullable result as\nnullable. This fixes that and also corrects method protection so that\nsubclasses of the IT can override (ex to ignore).","date":"2020-03-11 18:07:43","modifiedFileCount":"12","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-10-21 10:53:01","codes":[{"authorDate":"2020-10-21 10:53:01","commitOrder":4,"curCode":"  @Test protected void getRemoteServiceNames(TestInfo testInfo) throws Exception {\n    String testSuffix = testSuffix(testInfo);\n    Span clientSpan = newClientSpan(testSuffix);\n\n    assertThat(names().getRemoteServiceNames(clientSpan.localServiceName()).execute())\n      .isEmpty();\n\n    accept(clientSpan);\n\n    assertThat(names().getRemoteServiceNames(clientSpan.localServiceName() + 1).execute())\n      .isEmpty();\n\n    assertThat(names().getRemoteServiceNames(clientSpan.localServiceName()).execute())\n      .contains(clientSpan.remoteServiceName());\n  }\n","date":"2020-10-21 10:53:01","endLine":76,"groupId":"10278","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"getRemoteServiceNames","params":"(TestInfotestInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/0b/52f97114db4969ab10ec1c6666cc67d192e1fb.src","preCode":"  @Test protected void getRemoteServiceNames() throws Exception {\n    assertThat(names().getRemoteServiceNames(\"frontend\").execute())\n      .isEmpty();\n\n    accept(CLIENT_SPAN);\n\n    assertThat(names().getRemoteServiceNames(\"frontend\" + 1).execute())\n      .isEmpty();\n\n    assertThat(names().getRemoteServiceNames(\"frontend\").execute())\n      .contains(CLIENT_SPAN.remoteServiceName());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-10-21 10:53:01","commitOrder":4,"curCode":"  @Test protected void getSpanNames(TestInfo testInfo) throws Exception {\n    String testSuffix = testSuffix(testInfo);\n    Span span = spanBuilder(testSuffix).build();\n\n    assertThat(names().getSpanNames(span.localServiceName()).execute())\n      .isEmpty();\n\n    accept(span);\n\n    assertThat(names().getSpanNames(span.localServiceName() + 1).execute())\n      .isEmpty();\n\n    assertThat(names().getSpanNames(span.localServiceName()).execute())\n      .contains(span.name());\n  }\n","date":"2020-10-21 10:53:01","endLine":156,"groupId":"10278","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"getSpanNames","params":"(TestInfotestInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/0b/52f97114db4969ab10ec1c6666cc67d192e1fb.src","preCode":"  @Test protected void getSpanNames() throws Exception {\n    assertThat(names().getSpanNames(\"frontend\").execute())\n      .isEmpty();\n\n    accept(CLIENT_SPAN);\n\n    assertThat(names().getSpanNames(\"frontend\" + 1).execute())\n      .isEmpty();\n\n    assertThat(names().getSpanNames(\"frontend\").execute())\n      .contains(CLIENT_SPAN.name());\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"}],"commitId":"eeb17681af780e563b44503d5af1eadb3ca6abfc","commitMessage":"@@@Refactors integration tests to be more isolated (#3249)\n\nThis makes all integration tests use unique data. Notably.  they no\nlonger use constant trace ID or service names.  as this can lead to\ndifficulty when a keyspace is re-used. For example.  service names and\ntrace IDs are often partitions. When debugging it is easier when test\ndata is isolated by a service name as it can be easily queried.\n\nThis also pulls the heaviest tests into their own classes so that they\ndon't overload the storage containers used by the bulk of our tests.\n\nFinally.  this fixes a few glitches in the v1 cassandra storage.","date":"2020-10-21 10:53:01","modifiedFileCount":"46","status":"M","submitter":"Adrian Cole"}]
