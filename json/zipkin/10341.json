[{"authorTime":"2019-04-14 16:15:45","codes":[{"authorDate":"2019-04-14 16:15:45","commitOrder":1,"curCode":"  @Test public void upgradesOldSchema_autocomplete() {\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema-indexes-original.cql\");\n\n    Schema.ensureExists(keyspace(), true, session());\n\n    KeyspaceMetadata metadata = session().getCluster().getMetadata().getKeyspace(keyspace());\n    assertThat(metadata).isNotNull();\n    assertThat(Schema.hasUpgrade1_autocompleteTags(metadata)).isTrue();\n  }\n","date":"2019-04-14 16:15:45","endLine":75,"groupId":"3339","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"upgradesOldSchema_autocomplete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/66/ba90f0dae3fc94fb226a21c65abed552cb0e35.src","preCode":"  @Test public void upgradesOldSchema_autocomplete() {\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema-indexes-original.cql\");\n\n    Schema.ensureExists(keyspace(), true, session());\n\n    KeyspaceMetadata metadata = session().getCluster().getMetadata().getKeyspace(keyspace());\n    assertThat(metadata).isNotNull();\n    assertThat(Schema.hasUpgrade1_autocompleteTags(metadata)).isTrue();\n  }\n","realPath":"zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITEnsureSchema.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"},{"authorDate":"2019-04-14 16:15:45","commitOrder":1,"curCode":"  @Test public void upgradesOldSchema_remoteService() {\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema-indexes-original.cql\");\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema-upgrade-1.cql\");\n\n    Schema.ensureExists(keyspace(), true, session());\n\n    KeyspaceMetadata metadata = session().getCluster().getMetadata().getKeyspace(keyspace());\n    assertThat(metadata).isNotNull();\n    assertThat(Schema.hasUpgrade2_remoteService(metadata)).isTrue();\n  }\n","date":"2019-04-14 16:15:45","endLine":87,"groupId":"3339","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"upgradesOldSchema_remoteService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/66/ba90f0dae3fc94fb226a21c65abed552cb0e35.src","preCode":"  @Test public void upgradesOldSchema_remoteService() {\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema-indexes-original.cql\");\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema-upgrade-1.cql\");\n\n    Schema.ensureExists(keyspace(), true, session());\n\n    KeyspaceMetadata metadata = session().getCluster().getMetadata().getKeyspace(keyspace());\n    assertThat(metadata).isNotNull();\n    assertThat(Schema.hasUpgrade2_remoteService(metadata)).isTrue();\n  }\n","realPath":"zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITEnsureSchema.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"}],"commitId":"b8646142fa15c8c5f47ff2a2a48dc663c7bb65b3","commitMessage":"@@@De-conflate local from remote service names (#2484)\n\nEspecially mentioned in #1794.  local and remote service names are undeniably serving different use cases.  yet currently conflated in the api.\n\n/services -> only local serviceNames\n/remoteServices?serviceName=X -> new: only remote serviceNames for auto-complete\n/spans?remoteServiceName=X -> new: to restore functionality @llinder mentioned","date":"2019-04-14 16:15:45","modifiedFileCount":"67","status":"B","submitter":"Adrian Cole"},{"authorTime":"2019-07-24 17:27:05","codes":[{"authorDate":"2019-07-24 17:27:05","commitOrder":2,"curCode":"  @Test void upgradesOldSchema_autocomplete() {\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema-indexes-original.cql\");\n\n    Schema.ensureExists(keyspace(), true, session());\n\n    KeyspaceMetadata metadata = session().getCluster().getMetadata().getKeyspace(keyspace());\n    assertThat(metadata).isNotNull();\n    assertThat(Schema.hasUpgrade1_autocompleteTags(metadata)).isTrue();\n  }\n","date":"2019-07-24 17:27:05","endLine":75,"groupId":"3339","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"upgradesOldSchema_autocomplete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/fa/cbf9c1d80a347fa87c81305ffe57f551a45ede.src","preCode":"  @Test public void upgradesOldSchema_autocomplete() {\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema-indexes-original.cql\");\n\n    Schema.ensureExists(keyspace(), true, session());\n\n    KeyspaceMetadata metadata = session().getCluster().getMetadata().getKeyspace(keyspace());\n    assertThat(metadata).isNotNull();\n    assertThat(Schema.hasUpgrade1_autocompleteTags(metadata)).isTrue();\n  }\n","realPath":"zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITEnsureSchema.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2019-07-24 17:27:05","commitOrder":2,"curCode":"  @Test void upgradesOldSchema_remoteService() {\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema-indexes-original.cql\");\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema-upgrade-1.cql\");\n\n    Schema.ensureExists(keyspace(), true, session());\n\n    KeyspaceMetadata metadata = session().getCluster().getMetadata().getKeyspace(keyspace());\n    assertThat(metadata).isNotNull();\n    assertThat(Schema.hasUpgrade2_remoteService(metadata)).isTrue();\n  }\n","date":"2019-07-24 17:27:05","endLine":87,"groupId":"3339","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"upgradesOldSchema_remoteService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/fa/cbf9c1d80a347fa87c81305ffe57f551a45ede.src","preCode":"  @Test public void upgradesOldSchema_remoteService() {\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema-indexes-original.cql\");\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema-upgrade-1.cql\");\n\n    Schema.ensureExists(keyspace(), true, session());\n\n    KeyspaceMetadata metadata = session().getCluster().getMetadata().getKeyspace(keyspace());\n    assertThat(metadata).isNotNull();\n    assertThat(Schema.hasUpgrade2_remoteService(metadata)).isTrue();\n  }\n","realPath":"zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITEnsureSchema.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"b2b86267d0cfe7d37bcf89ae7e66118fae76836f","commitMessage":"@@@Migrate storage IT to JUnit5 (#2705)\n\n","date":"2019-07-24 17:27:05","modifiedFileCount":"18","status":"M","submitter":"Anuraag Agrawal"},{"authorTime":"2020-10-21 10:53:01","codes":[{"authorDate":"2020-10-21 10:53:01","commitOrder":3,"curCode":"  @Test void upgradesOldSchema_autocomplete() {\n    Schema.applyCqlFile(storage.keyspace, session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(storage.keyspace, session(), \"/zipkin2-schema-indexes-original.cql\");\n\n    Schema.ensureExists(storage.keyspace, true, session());\n\n    KeyspaceMetadata metadata = session().getCluster().getMetadata().getKeyspace(storage.keyspace);\n    assertThat(Schema.hasUpgrade1_autocompleteTags(metadata)).isTrue();\n  }\n","date":"2020-10-21 10:53:01","endLine":101,"groupId":"1205","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"upgradesOldSchema_autocomplete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/77/f0fff5364d460bed16a2d07dff09524a8255d9.src","preCode":"  @Test void upgradesOldSchema_autocomplete() {\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema-indexes-original.cql\");\n\n    Schema.ensureExists(keyspace(), true, session());\n\n    KeyspaceMetadata metadata = session().getCluster().getMetadata().getKeyspace(keyspace());\n    assertThat(metadata).isNotNull();\n    assertThat(Schema.hasUpgrade1_autocompleteTags(metadata)).isTrue();\n  }\n","realPath":"zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITEnsureSchema.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2020-10-21 10:53:01","commitOrder":3,"curCode":"  @Test void upgradesOldSchema_remoteService() {\n    Schema.applyCqlFile(storage.keyspace, session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(storage.keyspace, session(), \"/zipkin2-schema-indexes-original.cql\");\n    Schema.applyCqlFile(storage.keyspace, session(), \"/zipkin2-schema-upgrade-1.cql\");\n\n    Schema.ensureExists(storage.keyspace, true, session());\n\n    KeyspaceMetadata metadata = session().getCluster().getMetadata().getKeyspace(storage.keyspace);\n    assertThat(Schema.hasUpgrade2_remoteService(metadata)).isTrue();\n  }\n","date":"2020-10-21 10:53:01","endLine":112,"groupId":"1205","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"upgradesOldSchema_remoteService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/77/f0fff5364d460bed16a2d07dff09524a8255d9.src","preCode":"  @Test void upgradesOldSchema_remoteService() {\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema-indexes-original.cql\");\n    Schema.applyCqlFile(keyspace(), session(), \"/zipkin2-schema-upgrade-1.cql\");\n\n    Schema.ensureExists(keyspace(), true, session());\n\n    KeyspaceMetadata metadata = session().getCluster().getMetadata().getKeyspace(keyspace());\n    assertThat(metadata).isNotNull();\n    assertThat(Schema.hasUpgrade2_remoteService(metadata)).isTrue();\n  }\n","realPath":"zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITEnsureSchema.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"eeb17681af780e563b44503d5af1eadb3ca6abfc","commitMessage":"@@@Refactors integration tests to be more isolated (#3249)\n\nThis makes all integration tests use unique data. Notably.  they no\nlonger use constant trace ID or service names.  as this can lead to\ndifficulty when a keyspace is re-used. For example.  service names and\ntrace IDs are often partitions. When debugging it is easier when test\ndata is isolated by a service name as it can be easily queried.\n\nThis also pulls the heaviest tests into their own classes so that they\ndon't overload the storage containers used by the bulk of our tests.\n\nFinally.  this fixes a few glitches in the v1 cassandra storage.","date":"2020-10-21 10:53:01","modifiedFileCount":"46","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-10-21 11:36:40","codes":[{"authorDate":"2020-10-21 11:36:40","commitOrder":4,"curCode":"  @Test void upgradesOldSchema_autocomplete() {\n    Schema.applyCqlFile(storage.keyspace, session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(storage.keyspace, session(), \"/zipkin2-schema-indexes-original.cql\");\n\n    Schema.ensureExists(storage.keyspace, true, session());\n\n    KeyspaceMetadata metadata = session().getMetadata().getKeyspace(storage.keyspace).get();\n    assertThat(Schema.hasUpgrade1_autocompleteTags(metadata)).isTrue();\n  }\n","date":"2020-10-21 11:36:40","endLine":101,"groupId":"10341","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"upgradesOldSchema_autocomplete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/5c/77f212e109817534b8c0fe6d0fe5e938c72ac4.src","preCode":"  @Test void upgradesOldSchema_autocomplete() {\n    Schema.applyCqlFile(storage.keyspace, session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(storage.keyspace, session(), \"/zipkin2-schema-indexes-original.cql\");\n\n    Schema.ensureExists(storage.keyspace, true, session());\n\n    KeyspaceMetadata metadata = session().getCluster().getMetadata().getKeyspace(storage.keyspace);\n    assertThat(Schema.hasUpgrade1_autocompleteTags(metadata)).isTrue();\n  }\n","realPath":"zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITEnsureSchema.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2020-10-21 11:36:40","commitOrder":4,"curCode":"  @Test void upgradesOldSchema_remoteService() {\n    Schema.applyCqlFile(storage.keyspace, session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(storage.keyspace, session(), \"/zipkin2-schema-indexes-original.cql\");\n    Schema.applyCqlFile(storage.keyspace, session(), \"/zipkin2-schema-upgrade-1.cql\");\n\n    Schema.ensureExists(storage.keyspace, true, session());\n\n    KeyspaceMetadata metadata = session().getMetadata().getKeyspace(storage.keyspace).get();\n    assertThat(Schema.hasUpgrade2_remoteService(metadata)).isTrue();\n  }\n","date":"2020-10-21 11:36:40","endLine":112,"groupId":"10341","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"upgradesOldSchema_remoteService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/5c/77f212e109817534b8c0fe6d0fe5e938c72ac4.src","preCode":"  @Test void upgradesOldSchema_remoteService() {\n    Schema.applyCqlFile(storage.keyspace, session(), \"/zipkin2-schema.cql\");\n    Schema.applyCqlFile(storage.keyspace, session(), \"/zipkin2-schema-indexes-original.cql\");\n    Schema.applyCqlFile(storage.keyspace, session(), \"/zipkin2-schema-upgrade-1.cql\");\n\n    Schema.ensureExists(storage.keyspace, true, session());\n\n    KeyspaceMetadata metadata = session().getCluster().getMetadata().getKeyspace(storage.keyspace);\n    assertThat(Schema.hasUpgrade2_remoteService(metadata)).isTrue();\n  }\n","realPath":"zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITEnsureSchema.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"9674c46fa82b5f281fee30c23138aa09c18ee816","commitMessage":"@@@Migrates to Datastax Driver v4 (#3246)\n\nThis migrates to the Netty-based Datastax Driver v4.  which no longer\nuses guava. This is very different library architecture.  most obvious in\nhow configuration is managed. This migration tries to be as conventional\nas possible while retaining defaults as close to as they were as\npossible.","date":"2020-10-21 11:36:40","modifiedFileCount":"81","status":"M","submitter":"Adrian Cole"}]
