[{"authorTime":"2019-04-28 08:05:51","codes":[{"authorDate":"2019-04-28 08:05:51","commitOrder":1,"curCode":"  public void spanKindIsNotRequiredWhenEndpointsArePresent() throws Exception {\n    Endpoint someClient = Endpoint.newBuilder().serviceName(\"some-client\").ip(\"172.17.0.4\").build();\n\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(someClient)\n        .remoteEndpoint(FRONTEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(FRONTEND)\n        .remoteEndpoint(BACKEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(BACKEND)\n        .remoteEndpoint(DB).build()\n    );\n\n    processDependencies(trace);\n\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder().parent(\"some-client\").child(\"frontend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build()\n    );\n  }\n","date":"2019-04-28 08:05:51","endLine":519,"groupId":"2304","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"spanKindIsNotRequiredWhenEndpointsArePresent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/5f/0a6fc7675393a4a48ff961e64b98f8061e298c.src","preCode":"  public void spanKindIsNotRequiredWhenEndpointsArePresent() throws Exception {\n    Endpoint someClient = Endpoint.newBuilder().serviceName(\"some-client\").ip(\"172.17.0.4\").build();\n\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(someClient)\n        .remoteEndpoint(FRONTEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(FRONTEND)\n        .remoteEndpoint(BACKEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(BACKEND)\n        .remoteEndpoint(DB).build()\n    );\n\n    processDependencies(trace);\n\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder().parent(\"some-client\").child(\"frontend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build()\n    );\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITDependencies.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":494,"status":"B"},{"authorDate":"2019-04-28 08:05:51","commitOrder":1,"curCode":"  public void unnamedEndpointsAreSkipped() throws Exception {\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(Endpoint.newBuilder().ip(\"172.17.0.4\").build())\n        .remoteEndpoint(FRONTEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(FRONTEND)\n        .remoteEndpoint(BACKEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(BACKEND)\n        .remoteEndpoint(DB).build()\n    );\n\n    processDependencies(trace);\n\n    \r\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build()\n    );\n  }\n","date":"2019-04-28 08:05:51","endLine":545,"groupId":"1514","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unnamedEndpointsAreSkipped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/5f/0a6fc7675393a4a48ff961e64b98f8061e298c.src","preCode":"  public void unnamedEndpointsAreSkipped() throws Exception {\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(Endpoint.newBuilder().ip(\"172.17.0.4\").build())\n        .remoteEndpoint(FRONTEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(FRONTEND)\n        .remoteEndpoint(BACKEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(BACKEND)\n        .remoteEndpoint(DB).build()\n    );\n\n    processDependencies(trace);\n\n    \r\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build()\n    );\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITDependencies.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":522,"status":"B"}],"commitId":"6b68e31e779ca60a1936ddcfcf96abde2b529bc0","commitMessage":"@@@Extracts zipkin-tests jar before we publish to o.a.z.zipkin2 namespace (#2546)\n\nThis fixes an anti-pattern before we commit to it in the new namespace.","date":"2019-04-28 08:05:51","modifiedFileCount":"3","status":"B","submitter":"Adrian Cole"},{"authorTime":"2019-07-24 17:27:05","codes":[{"authorDate":"2019-07-24 17:27:05","commitOrder":2,"curCode":"  @Test void spanKindIsNotRequiredWhenEndpointsArePresent() throws Exception {\n    Endpoint someClient = Endpoint.newBuilder().serviceName(\"some-client\").ip(\"172.17.0.4\").build();\n\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(someClient)\n        .remoteEndpoint(FRONTEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(FRONTEND)\n        .remoteEndpoint(BACKEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(BACKEND)\n        .remoteEndpoint(DB).build()\n    );\n\n    processDependencies(trace);\n\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder().parent(\"some-client\").child(\"frontend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build()\n    );\n  }\n","date":"2019-07-24 17:27:05","endLine":491,"groupId":"2304","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"spanKindIsNotRequiredWhenEndpointsArePresent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/ae/dae8546b69a8a3a1fcd419b1b9b291c0a5f81e.src","preCode":"  public void spanKindIsNotRequiredWhenEndpointsArePresent() throws Exception {\n    Endpoint someClient = Endpoint.newBuilder().serviceName(\"some-client\").ip(\"172.17.0.4\").build();\n\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(someClient)\n        .remoteEndpoint(FRONTEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(FRONTEND)\n        .remoteEndpoint(BACKEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(BACKEND)\n        .remoteEndpoint(DB).build()\n    );\n\n    processDependencies(trace);\n\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder().parent(\"some-client\").child(\"frontend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build()\n    );\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITDependencies.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":466,"status":"M"},{"authorDate":"2019-07-24 17:27:05","commitOrder":2,"curCode":"  @Test void unnamedEndpointsAreSkipped() throws Exception {\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(Endpoint.newBuilder().ip(\"172.17.0.4\").build())\n        .remoteEndpoint(FRONTEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(FRONTEND)\n        .remoteEndpoint(BACKEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(BACKEND)\n        .remoteEndpoint(DB).build()\n    );\n\n    processDependencies(trace);\n\n    \r\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build()\n    );\n  }\n","date":"2019-07-24 17:27:05","endLine":516,"groupId":"1514","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unnamedEndpointsAreSkipped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/ae/dae8546b69a8a3a1fcd419b1b9b291c0a5f81e.src","preCode":"  public void unnamedEndpointsAreSkipped() throws Exception {\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(Endpoint.newBuilder().ip(\"172.17.0.4\").build())\n        .remoteEndpoint(FRONTEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(FRONTEND)\n        .remoteEndpoint(BACKEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(BACKEND)\n        .remoteEndpoint(DB).build()\n    );\n\n    processDependencies(trace);\n\n    \r\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build()\n    );\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITDependencies.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"M"}],"commitId":"b2b86267d0cfe7d37bcf89ae7e66118fae76836f","commitMessage":"@@@Migrate storage IT to JUnit5 (#2705)\n\n","date":"2019-07-24 17:27:05","modifiedFileCount":"18","status":"M","submitter":"Anuraag Agrawal"},{"authorTime":"2020-03-11 18:07:43","codes":[{"authorDate":"2020-03-11 18:07:43","commitOrder":3,"curCode":"  @Test protected void spanKindIsNotRequiredWhenEndpointsArePresent() throws Exception {\n    Endpoint someClient = Endpoint.newBuilder().serviceName(\"some-client\").ip(\"172.17.0.4\").build();\n\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(someClient)\n        .remoteEndpoint(FRONTEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(FRONTEND)\n        .remoteEndpoint(BACKEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(BACKEND)\n        .remoteEndpoint(DB).build()\n    );\n\n    processDependencies(trace);\n\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder().parent(\"some-client\").child(\"frontend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build()\n    );\n  }\n","date":"2020-03-11 18:07:43","endLine":491,"groupId":"2304","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"spanKindIsNotRequiredWhenEndpointsArePresent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/7f/ae63615912a5d460375a6b637b150a5f49a6f7.src","preCode":"  @Test void spanKindIsNotRequiredWhenEndpointsArePresent() throws Exception {\n    Endpoint someClient = Endpoint.newBuilder().serviceName(\"some-client\").ip(\"172.17.0.4\").build();\n\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(someClient)\n        .remoteEndpoint(FRONTEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(FRONTEND)\n        .remoteEndpoint(BACKEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(BACKEND)\n        .remoteEndpoint(DB).build()\n    );\n\n    processDependencies(trace);\n\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder().parent(\"some-client\").child(\"frontend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build()\n    );\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITDependencies.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":466,"status":"M"},{"authorDate":"2020-03-11 18:07:43","commitOrder":3,"curCode":"  @Test protected void unnamedEndpointsAreSkipped() throws Exception {\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(Endpoint.newBuilder().ip(\"172.17.0.4\").build())\n        .remoteEndpoint(FRONTEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(FRONTEND)\n        .remoteEndpoint(BACKEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(BACKEND)\n        .remoteEndpoint(DB).build()\n    );\n\n    processDependencies(trace);\n\n    \r\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build()\n    );\n  }\n","date":"2020-03-11 18:07:43","endLine":516,"groupId":"1514","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unnamedEndpointsAreSkipped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/7f/ae63615912a5d460375a6b637b150a5f49a6f7.src","preCode":"  @Test void unnamedEndpointsAreSkipped() throws Exception {\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(Endpoint.newBuilder().ip(\"172.17.0.4\").build())\n        .remoteEndpoint(FRONTEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(FRONTEND)\n        .remoteEndpoint(BACKEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(BACKEND)\n        .remoteEndpoint(DB).build()\n    );\n\n    processDependencies(trace);\n\n    \r\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build()\n    );\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITDependencies.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"M"}],"commitId":"946b96ce18e9b5cdc31bb447bcf09dc1df383f0f","commitMessage":"@@@Fixes incorrect handling of getTrace and IT access modifiers (#3019)\n\nI noticed porting zipkin-voltdb to latest.  that we incorrectly handled\ngetTrace in some places. Basically.  we treated a non-nullable result as\nnullable. This fixes that and also corrects method protection so that\nsubclasses of the IT can override (ex to ignore).","date":"2020-03-11 18:07:43","modifiedFileCount":"12","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-10-21 10:53:01","codes":[{"authorDate":"2020-10-21 10:53:01","commitOrder":4,"curCode":"  protected void spanKindIsNotRequiredWhenEndpointsArePresent(TestInfo testInfo) throws Exception {\n    String testSuffix = testSuffix(testInfo);\n    String traceId = newTraceId();\n\n    Endpoint kafka = suffixServiceName(TestObjects.KAFKA, testSuffix);\n    Endpoint frontend = suffixServiceName(TestObjects.FRONTEND, testSuffix);\n    Endpoint backend = suffixServiceName(TestObjects.BACKEND, testSuffix);\n    Endpoint db = suffixServiceName(TestObjects.DB, testSuffix);\n\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(traceId).id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(kafka)\n        .remoteEndpoint(frontend).build(),\n      Span.newBuilder().traceId(traceId).parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(frontend)\n        .remoteEndpoint(backend).build(),\n      Span.newBuilder().traceId(traceId).parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(backend)\n        .remoteEndpoint(db).build()\n    );\n\n    processDependencies(trace);\n\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder()\n        .parent(kafka.serviceName())\n        .child(frontend.serviceName())\n        .callCount(1)\n        .build(),\n      DependencyLink.newBuilder()\n        .parent(frontend.serviceName())\n        .child(backend.serviceName())\n        .callCount(1)\n        .build(),\n      DependencyLink.newBuilder()\n        .parent(backend.serviceName())\n        .child(db.serviceName())\n        .callCount(1)\n        .build()\n    );\n  }\n","date":"2020-10-21 10:53:01","endLine":554,"groupId":"10275","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"spanKindIsNotRequiredWhenEndpointsArePresent","params":"(TestInfotestInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/c9/ead8a48ff267959fc04e5a7747f936825144d4.src","preCode":"  @Test protected void spanKindIsNotRequiredWhenEndpointsArePresent() throws Exception {\n    Endpoint someClient = Endpoint.newBuilder().serviceName(\"some-client\").ip(\"172.17.0.4\").build();\n\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(someClient)\n        .remoteEndpoint(FRONTEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(FRONTEND)\n        .remoteEndpoint(BACKEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(BACKEND)\n        .remoteEndpoint(DB).build()\n    );\n\n    processDependencies(trace);\n\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder().parent(\"some-client\").child(\"frontend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build()\n    );\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITDependencies.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":511,"status":"M"},{"authorDate":"2020-10-21 10:53:01","commitOrder":4,"curCode":"  @Test protected void unnamedEndpointsAreSkipped(TestInfo testInfo) throws Exception {\n    String testSuffix = testSuffix(testInfo);\n    String traceId = newTraceId();\n\n    Endpoint frontend = suffixServiceName(TestObjects.FRONTEND, testSuffix);\n    Endpoint backend = suffixServiceName(TestObjects.BACKEND, testSuffix);\n    Endpoint db = suffixServiceName(TestObjects.DB, testSuffix);\n\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(traceId).id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(Endpoint.newBuilder().ip(\"172.17.0.4\").build())\n        .remoteEndpoint(frontend).build(),\n      Span.newBuilder().traceId(traceId).parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(frontend)\n        .remoteEndpoint(backend).build(),\n      Span.newBuilder().traceId(traceId).parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(backend)\n        .remoteEndpoint(db).build()\n    );\n\n    processDependencies(trace);\n\n    \r\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder()\n        .parent(frontend.serviceName())\n        .child(backend.serviceName())\n        .callCount(1)\n        .build(),\n      DependencyLink.newBuilder()\n        .parent(backend.serviceName())\n        .child(db.serviceName())\n        .callCount(1)\n        .build()\n    );\n  }\n","date":"2020-10-21 10:53:01","endLine":594,"groupId":"10275","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"unnamedEndpointsAreSkipped","params":"(TestInfotestInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/c9/ead8a48ff267959fc04e5a7747f936825144d4.src","preCode":"  @Test protected void unnamedEndpointsAreSkipped() throws Exception {\n    List<Span> trace = asList(\n      Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\")\n        .timestamp(TODAY * 1000L).duration(350L * 1000L)\n        .localEndpoint(Endpoint.newBuilder().ip(\"172.17.0.4\").build())\n        .remoteEndpoint(FRONTEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\")\n        .timestamp((TODAY + 50) * 1000L).duration(250L * 1000L)\n        .localEndpoint(FRONTEND)\n        .remoteEndpoint(BACKEND).build(),\n      Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\")\n        .timestamp((TODAY + 150) * 1000L).duration(50L * 1000L)\n        .localEndpoint(BACKEND)\n        .remoteEndpoint(DB).build()\n    );\n\n    processDependencies(trace);\n\n    \r\n    assertThat(store().getDependencies(TODAY + 1000, 1000L).execute()).containsOnly(\n      DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),\n      DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build()\n    );\n  }\n","realPath":"zipkin-tests/src/main/java/zipkin2/storage/ITDependencies.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":556,"status":"M"}],"commitId":"eeb17681af780e563b44503d5af1eadb3ca6abfc","commitMessage":"@@@Refactors integration tests to be more isolated (#3249)\n\nThis makes all integration tests use unique data. Notably.  they no\nlonger use constant trace ID or service names.  as this can lead to\ndifficulty when a keyspace is re-used. For example.  service names and\ntrace IDs are often partitions. When debugging it is easier when test\ndata is isolated by a service name as it can be easily queried.\n\nThis also pulls the heaviest tests into their own classes so that they\ndon't overload the storage containers used by the bulk of our tests.\n\nFinally.  this fixes a few glitches in the v1 cassandra storage.","date":"2020-10-21 10:53:01","modifiedFileCount":"46","status":"M","submitter":"Adrian Cole"}]
