[{"authorTime":"2019-05-10 09:06:23","codes":[{"authorDate":"2019-08-24 11:56:27","commitOrder":5,"curCode":"  @Test public void consumerExceptionBeforeCallbackDoesntSetFutureException() {\n    consumer = (input) -> {\n      throw new NullPointerException(\"endpoint was null\");\n    };\n\n    ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\", consumer);\n\n    LogEntry entry = new LogEntry();\n    entry.category = \"zipkin\";\n    entry.message = encodedSpan;\n\n    CaptureAsyncMethodCallback callback = new CaptureAsyncMethodCallback();\n    scribe.Log(asList(entry), callback);\n\n    \r\n    assertThat(callback.error).isNull();\n\n    assertThat(scribeMetrics.messages()).isEqualTo(1);\n    assertThat(scribeMetrics.messagesDropped()).isZero();\n    assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length);\n    assertThat(scribeMetrics.spans()).isEqualTo(1);\n    assertThat(scribeMetrics.spansDropped()).isEqualTo(1);\n  }\n","date":"2019-08-24 11:56:27","endLine":178,"groupId":"3104","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"consumerExceptionBeforeCallbackDoesntSetFutureException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/e6/3118259640b635cf7b964f346babdd30eed9f8.src","preCode":"  @Test public void consumerExceptionBeforeCallbackDoesntSetFutureException() {\n    consumer = (input) -> {\n      throw new NullPointerException(\"endpoint was null\");\n    };\n\n    ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\", consumer);\n\n    LogEntry entry = new LogEntry();\n    entry.category = \"zipkin\";\n    entry.message = encodedSpan;\n\n    CaptureAsyncMethodCallback callback = new CaptureAsyncMethodCallback();\n    scribe.Log(asList(entry), callback);\n\n    \r\n    assertThat(callback.error).isNull();\n\n    assertThat(scribeMetrics.messages()).isEqualTo(1);\n    assertThat(scribeMetrics.messagesDropped()).isZero();\n    assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length);\n    assertThat(scribeMetrics.spans()).isEqualTo(1);\n    assertThat(scribeMetrics.spansDropped()).isEqualTo(1);\n  }\n","realPath":"zipkin-collector/scribe/src/test/java/zipkin2/collector/scribe/ScribeSpanConsumerTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"},{"authorDate":"2019-05-10 09:06:23","commitOrder":5,"curCode":"  @Test public void callbackExceptionDoesntThrow() {\n    consumer = (input) -> new Call.Base<Void>() {\n      @Override protected Void doExecute() {\n        throw new AssertionError();\n      }\n\n      @Override protected void doEnqueue(Callback<Void> callback) {\n        callback.onError(new NullPointerException());\n      }\n\n      @Override public Call<Void> clone() {\n        throw new AssertionError();\n      }\n    };\n\n    ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\", consumer);\n\n    LogEntry entry = new LogEntry();\n    entry.category = \"zipkin\";\n    entry.message = encodedSpan;\n\n    expectSuccess(scribe, entry);\n\n    assertThat(scribeMetrics.messages()).isEqualTo(1);\n    assertThat(scribeMetrics.messagesDropped()).isZero();\n    assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length);\n    assertThat(scribeMetrics.spans()).isEqualTo(1);\n    assertThat(scribeMetrics.spansDropped()).isEqualTo(1);\n  }\n","date":"2019-05-10 09:06:23","endLine":214,"groupId":"1160","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"callbackExceptionDoesntThrow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/fb/00c054c05f77292727b1da78b3a75b5addd364.src","preCode":"  @Test public void callbackExceptionDoesntThrow() {\n    consumer = (input) -> new Call.Base<Void>() {\n      @Override protected Void doExecute() {\n        throw new AssertionError();\n      }\n\n      @Override protected void doEnqueue(Callback<Void> callback) {\n        callback.onError(new NullPointerException());\n      }\n\n      @Override public Call<Void> clone() {\n        throw new AssertionError();\n      }\n    };\n\n    ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\", consumer);\n\n    LogEntry entry = new LogEntry();\n    entry.category = \"zipkin\";\n    entry.message = encodedSpan;\n\n    expectSuccess(scribe, entry);\n\n    assertThat(scribeMetrics.messages()).isEqualTo(1);\n    assertThat(scribeMetrics.messagesDropped()).isZero();\n    assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length);\n    assertThat(scribeMetrics.spans()).isEqualTo(1);\n    assertThat(scribeMetrics.spansDropped()).isEqualTo(1);\n  }\n","realPath":"zipkin-collector/scribe/src/test/java/zipkin2/collector/scribe/ScribeSpanConsumerTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"NB"}],"commitId":"40bdee934d1c27f39f8a43b3ce3cde46d625f8b7","commitMessage":"@@@Adds vintage engine to zipkin-tests to help avoid time lost downstream (#2778)\n\nThis prevents us from interfering with JUnit 4 runtimes.\n\nSee https://github.com/openzipkin/zipkin-gcp/issues/130\n","date":"2019-08-24 11:56:27","modifiedFileCount":"1","status":"M","submitter":"Adrian Cole"},{"authorTime":"2020-03-13 14:24:53","codes":[{"authorDate":"2020-03-13 14:24:53","commitOrder":6,"curCode":"  @Test void consumerExceptionBeforeCallbackDoesntSetFutureException() {\n    consumer = (input) -> {\n      throw new NullPointerException(\"endpoint was null\");\n    };\n\n    ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\", consumer);\n\n    LogEntry entry = new LogEntry();\n    entry.category = \"zipkin\";\n    entry.message = encodedSpan;\n\n    CaptureAsyncMethodCallback callback = new CaptureAsyncMethodCallback();\n    scribe.Log(asList(entry), callback);\n\n    \r\n    assertThat(callback.error).isNull();\n\n    assertThat(scribeMetrics.messages()).isEqualTo(1);\n    assertThat(scribeMetrics.messagesDropped()).isZero();\n    assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length);\n    assertThat(scribeMetrics.spans()).isEqualTo(1);\n    assertThat(scribeMetrics.spansDropped()).isEqualTo(1);\n  }\n","date":"2020-03-13 14:24:53","endLine":188,"groupId":"3104","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"consumerExceptionBeforeCallbackDoesntSetFutureException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/bf/da324acd13aa9ec8b55973d0ef1f12b1aaf422.src","preCode":"  @Test public void consumerExceptionBeforeCallbackDoesntSetFutureException() {\n    consumer = (input) -> {\n      throw new NullPointerException(\"endpoint was null\");\n    };\n\n    ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\", consumer);\n\n    LogEntry entry = new LogEntry();\n    entry.category = \"zipkin\";\n    entry.message = encodedSpan;\n\n    CaptureAsyncMethodCallback callback = new CaptureAsyncMethodCallback();\n    scribe.Log(asList(entry), callback);\n\n    \r\n    assertThat(callback.error).isNull();\n\n    assertThat(scribeMetrics.messages()).isEqualTo(1);\n    assertThat(scribeMetrics.messagesDropped()).isZero();\n    assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length);\n    assertThat(scribeMetrics.spans()).isEqualTo(1);\n    assertThat(scribeMetrics.spansDropped()).isEqualTo(1);\n  }\n","realPath":"zipkin-collector/scribe/src/test/java/zipkin2/collector/scribe/ScribeSpanConsumerTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2020-03-13 14:24:53","commitOrder":6,"curCode":"  @Test void callbackExceptionDoesntThrow() throws Exception {\n    consumer = (input) -> new Call.Base<Void>() {\n      @Override protected Void doExecute() {\n        throw new AssertionError();\n      }\n\n      @Override protected void doEnqueue(Callback<Void> callback) {\n        callback.onError(new NullPointerException());\n      }\n\n      @Override public Call<Void> clone() {\n        throw new AssertionError();\n      }\n    };\n\n    ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\", consumer);\n\n    LogEntry entry = new LogEntry();\n    entry.category = \"zipkin\";\n    entry.message = encodedSpan;\n\n    expectSuccess(scribe, entry);\n\n    assertThat(scribeMetrics.messages()).isEqualTo(1);\n    assertThat(scribeMetrics.messagesDropped()).isZero();\n    assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length);\n    assertThat(scribeMetrics.spans()).isEqualTo(1);\n    assertThat(scribeMetrics.spansDropped()).isEqualTo(1);\n  }\n","date":"2020-03-13 14:24:53","endLine":222,"groupId":"1160","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"callbackExceptionDoesntThrow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/bf/da324acd13aa9ec8b55973d0ef1f12b1aaf422.src","preCode":"  @Test public void callbackExceptionDoesntThrow() {\n    consumer = (input) -> new Call.Base<Void>() {\n      @Override protected Void doExecute() {\n        throw new AssertionError();\n      }\n\n      @Override protected void doEnqueue(Callback<Void> callback) {\n        callback.onError(new NullPointerException());\n      }\n\n      @Override public Call<Void> clone() {\n        throw new AssertionError();\n      }\n    };\n\n    ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\", consumer);\n\n    LogEntry entry = new LogEntry();\n    entry.category = \"zipkin\";\n    entry.message = encodedSpan;\n\n    expectSuccess(scribe, entry);\n\n    assertThat(scribeMetrics.messages()).isEqualTo(1);\n    assertThat(scribeMetrics.messagesDropped()).isZero();\n    assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length);\n    assertThat(scribeMetrics.spans()).isEqualTo(1);\n    assertThat(scribeMetrics.spansDropped()).isEqualTo(1);\n  }\n","realPath":"zipkin-collector/scribe/src/test/java/zipkin2/collector/scribe/ScribeSpanConsumerTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"45fa8ea2f1dcbf1bbbe9a65e9e05879fe7799f73","commitMessage":"@@@Use blocking executor for delegating span collection in scribe collec? (#3029)\n\n* Use blocking executor for delegating span collection in scribe collector.\n\n* Revert unnecessary\n\n* Cleanup\n\n* Fix test and reduce boilerplate by letting Netty handle deframing.\n\n* Licenses\n\n* Switch to jupiter since RepeatedTest helped debug flakiness and wait for storage write.","date":"2020-03-13 14:24:53","modifiedFileCount":"5","status":"M","submitter":"Anuraag Agrawal"},{"authorTime":"2020-03-18 15:11:57","codes":[{"authorDate":"2020-03-18 15:11:57","commitOrder":7,"curCode":"  @Test void consumerExceptionBeforeCallbackDoesntSetFutureException() {\n    consumer = (input) -> {\n      throw new NullPointerException(\"endpoint was null\");\n    };\n\n    ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\", consumer);\n\n    LogEntry entry = new LogEntry();\n    entry.category = \"zipkin\";\n    entry.message = encodedSpan;\n\n    CaptureAsyncMethodCallback callback = new CaptureAsyncMethodCallback();\n    scribe.Log(asList(entry), callback);\n\n    \r\n    assertThat(callback.error).isNull();\n\n    \r\n    await().untilAsserted(() -> assertThat(scribeMetrics.messages()).isEqualTo(1));\n    assertThat(scribeMetrics.messagesDropped()).isZero();\n    assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length);\n    assertThat(scribeMetrics.spans()).isEqualTo(1);\n    assertThat(scribeMetrics.spansDropped()).isEqualTo(1);\n  }\n","date":"2020-03-18 15:11:57","endLine":190,"groupId":"10421","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"consumerExceptionBeforeCallbackDoesntSetFutureException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/1d/0ccc493d6ea7cf94206805a83c4d857aee181f.src","preCode":"  @Test void consumerExceptionBeforeCallbackDoesntSetFutureException() {\n    consumer = (input) -> {\n      throw new NullPointerException(\"endpoint was null\");\n    };\n\n    ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\", consumer);\n\n    LogEntry entry = new LogEntry();\n    entry.category = \"zipkin\";\n    entry.message = encodedSpan;\n\n    CaptureAsyncMethodCallback callback = new CaptureAsyncMethodCallback();\n    scribe.Log(asList(entry), callback);\n\n    \r\n    assertThat(callback.error).isNull();\n\n    assertThat(scribeMetrics.messages()).isEqualTo(1);\n    assertThat(scribeMetrics.messagesDropped()).isZero();\n    assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length);\n    assertThat(scribeMetrics.spans()).isEqualTo(1);\n    assertThat(scribeMetrics.spansDropped()).isEqualTo(1);\n  }\n","realPath":"zipkin-collector/scribe/src/test/java/zipkin2/collector/scribe/ScribeSpanConsumerTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2020-03-18 15:11:57","commitOrder":7,"curCode":"  @Test void callbackExceptionDoesntThrow() throws Exception {\n    consumer = (input) -> new Call.Base<Void>() {\n      @Override protected Void doExecute() {\n        throw new AssertionError();\n      }\n\n      @Override protected void doEnqueue(Callback<Void> callback) {\n        callback.onError(new NullPointerException());\n      }\n\n      @Override public Call<Void> clone() {\n        throw new AssertionError();\n      }\n    };\n\n    ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\", consumer);\n\n    LogEntry entry = new LogEntry();\n    entry.category = \"zipkin\";\n    entry.message = encodedSpan;\n\n    expectSuccess(scribe, entry);\n\n    \r\n    await().untilAsserted(() -> assertThat(scribeMetrics.messages()).isEqualTo(1));\n    assertThat(scribeMetrics.messagesDropped()).isZero();\n    assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length);\n    assertThat(scribeMetrics.spans()).isEqualTo(1);\n    assertThat(scribeMetrics.spansDropped()).isEqualTo(1);\n  }\n","date":"2020-03-18 15:11:57","endLine":225,"groupId":"10421","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"callbackExceptionDoesntThrow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/1d/0ccc493d6ea7cf94206805a83c4d857aee181f.src","preCode":"  @Test void callbackExceptionDoesntThrow() throws Exception {\n    consumer = (input) -> new Call.Base<Void>() {\n      @Override protected Void doExecute() {\n        throw new AssertionError();\n      }\n\n      @Override protected void doEnqueue(Callback<Void> callback) {\n        callback.onError(new NullPointerException());\n      }\n\n      @Override public Call<Void> clone() {\n        throw new AssertionError();\n      }\n    };\n\n    ScribeSpanConsumer scribe = newScribeSpanConsumer(\"zipkin\", consumer);\n\n    LogEntry entry = new LogEntry();\n    entry.category = \"zipkin\";\n    entry.message = encodedSpan;\n\n    expectSuccess(scribe, entry);\n\n    assertThat(scribeMetrics.messages()).isEqualTo(1);\n    assertThat(scribeMetrics.messagesDropped()).isZero();\n    assertThat(scribeMetrics.bytes()).isEqualTo(bytes.length);\n    assertThat(scribeMetrics.spans()).isEqualTo(1);\n    assertThat(scribeMetrics.spansDropped()).isEqualTo(1);\n  }\n","realPath":"zipkin-collector/scribe/src/test/java/zipkin2/collector/scribe/ScribeSpanConsumerTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"707e56f53d3be2985ffac033bb67adcfc50917a0","commitMessage":"@@@Default unsupported locales to English. (#3038)\n\n* Default unsupported locales to English.\n\n* Lint\n\n* Wait for scribe on all tests not just success.","date":"2020-03-18 15:11:57","modifiedFileCount":"1","status":"M","submitter":"Anuraag Agrawal"}]
