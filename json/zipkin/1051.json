[{"authorTime":"2020-04-14 09:10:22","codes":[{"authorDate":"2020-02-25 15:32:20","commitOrder":6,"curCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured() {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOption.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isNull();\n  }\n","date":"2020-02-25 15:32:20","endLine":291,"groupId":"1666","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/b8/e8d1931177531aa381efaee1d0a53cfb4fbb2d.src","preCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured() {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOption.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isNull();\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"NB"},{"authorDate":"2020-04-14 09:10:22","commitOrder":6,"curCode":"  public void providesBasicAuthInterceptor_whenDynamicCredentialsConfigured() {\n    String credentialsFile = pathOfResource(\"es-credentials\");\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.credentials-file:\" + credentialsFile,\n      \"zipkin.storage.elasticsearch.credentials-refresh-interval:2\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOption.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isNotNull();\n    BasicCredentials basicCredentials =\n      Objects.requireNonNull(client.as(BasicAuthInterceptor.class)).basicCredentials;\n    String credentials = basicCredentials.getCredentials();\n    assertThat(credentials).isEqualTo(\"Basic Zm9vOmJhcg==\");\n  }\n","date":"2020-04-14 09:10:22","endLine":335,"groupId":"1666","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"providesBasicAuthInterceptor_whenDynamicCredentialsConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/2a/22cab57d580510864677e3b2f0df1c56b05afe.src","preCode":"  public void providesBasicAuthInterceptor_whenDynamicCredentialsConfigured() {\n    String credentialsFile = pathOfResource(\"es-credentials\");\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.credentials-file:\" + credentialsFile,\n      \"zipkin.storage.elasticsearch.credentials-refresh-interval:2\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOption.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isNotNull();\n    BasicCredentials basicCredentials =\n      Objects.requireNonNull(client.as(BasicAuthInterceptor.class)).basicCredentials;\n    String credentials = basicCredentials.getCredentials();\n    assertThat(credentials).isEqualTo(\"Basic Zm9vOmJhcg==\");\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"B"}],"commitId":"e3e4832dd4e9f3737c612db7128b3a7f5c56d01f","commitMessage":"@@@Adds Dynamic elasticsearch credentials file (#3050)\n\nLoad elasticsearch credentials from a properties file in a fixed rate interval. There are two parameters to control it:\n\n    ES_CREDENTIALS_FILE: An absolute path of the file.\n    ES_CREDENTIALS_REFRESH_INTERVAL: Refresh interval in\n    seconds.\n","date":"2020-04-14 09:10:22","modifiedFileCount":"4","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2020-08-07 11:57:00","codes":[{"authorDate":"2020-08-07 11:57:00","commitOrder":7,"curCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured() {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOptions.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isNull();\n  }\n","date":"2020-08-07 11:57:00","endLine":293,"groupId":"1051","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/73/cdd87ff47d2c0aa32e94686943903cf7175fb0.src","preCode":"  public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNotConfigured() {\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOption.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isNull();\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"},{"authorDate":"2020-08-07 11:57:00","commitOrder":7,"curCode":"  public void providesBasicAuthInterceptor_whenDynamicCredentialsConfigured() {\n    String credentialsFile = pathOfResource(\"es-credentials\");\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.credentials-file:\" + credentialsFile,\n      \"zipkin.storage.elasticsearch.credentials-refresh-interval:2\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOptions.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isNotNull();\n    BasicCredentials basicCredentials =\n      Objects.requireNonNull(client.as(BasicAuthInterceptor.class)).basicCredentials;\n    String credentials = basicCredentials.getCredentials();\n    assertThat(credentials).isEqualTo(\"Basic Zm9vOmJhcg==\");\n  }\n","date":"2020-08-07 11:57:00","endLine":335,"groupId":"1051","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"providesBasicAuthInterceptor_whenDynamicCredentialsConfigured","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-zipkin-10-0.7/blobInfo/CC_OUT/blobs/73/cdd87ff47d2c0aa32e94686943903cf7175fb0.src","preCode":"  public void providesBasicAuthInterceptor_whenDynamicCredentialsConfigured() {\n    String credentialsFile = pathOfResource(\"es-credentials\");\n    TestPropertyValues.of(\n      \"zipkin.storage.type:elasticsearch\",\n      \"zipkin.storage.elasticsearch.hosts:127.0.0.1:1234\",\n      \"zipkin.storage.elasticsearch.credentials-file:\" + credentialsFile,\n      \"zipkin.storage.elasticsearch.credentials-refresh-interval:2\")\n      .applyTo(context);\n    Access.registerElasticsearch(context);\n    context.refresh();\n\n    HttpClientFactory factory = context.getBean(HttpClientFactory.class);\n\n    WebClient client = WebClient.builder(\"http://127.0.0.1:1234\")\n      .option(ClientOption.DECORATION, factory.options.decoration())\n      .build();\n    assertThat(client.as(BasicAuthInterceptor.class)).isNotNull();\n    BasicCredentials basicCredentials =\n      Objects.requireNonNull(client.as(BasicAuthInterceptor.class)).basicCredentials;\n    String credentials = basicCredentials.getCredentials();\n    assertThat(credentials).isEqualTo(\"Basic Zm9vOmJhcg==\");\n  }\n","realPath":"zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java","repoName":"zipkin","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"}],"commitId":"1845702272992ec430af6dc23a340186b5c9d285","commitMessage":"@@@Update Armeria and Netty dependencies (#3167)\n\nArmeria 0.99.8 -> 0.99.9\nNetty 4.1.50.Final -> 4.1.51.Final","date":"2020-08-07 11:57:00","modifiedFileCount":"11","status":"M","submitter":"minux"}]
