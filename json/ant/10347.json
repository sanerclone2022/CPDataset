[{"authorTime":"2006-09-22 03:10:48","codes":[{"authorDate":"2006-09-22 03:10:48","commitOrder":1,"curCode":"    public void testGroups() {\n        reg.setPattern(\"aaaa\");\n        Vector v = reg.getGroups(\"xaaaa\");\n        assertEquals(\"No parens -> no extra groups\", 1, v.size());\n        assertEquals(\"Trivial match with no parens\", \"aaaa\",\n                     (String) v.elementAt(0));\n\n        reg.setPattern(\"(aaaa)\");\n        v = reg.getGroups(\"xaaaa\");\n        assertEquals(\"Trivial match with single paren\", 2, v.size());\n        assertEquals(\"Trivial match with single paren, full match\", \"aaaa\",\n                     (String) v.elementAt(0));\n        assertEquals(\"Trivial match with single paren, matched paren\", \"aaaa\",\n                     (String) v.elementAt(0));\n\n        reg.setPattern(\"(a+)b(b+)\");\n        v = reg.getGroups(\"xaabb\");\n        assertEquals(3, v.size());\n        assertEquals(\"aabb\", (String) v.elementAt(0));\n        assertEquals(\"aa\", (String) v.elementAt(1));\n        assertEquals(\"b\", (String) v.elementAt(2));\n    }\n","date":"2006-09-22 03:10:48","endLine":95,"groupId":"3403","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroups","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/09/508274088daf64025cfd15ff6e52460ca25a9b.src","preCode":"    public void testGroups() {\n        reg.setPattern(\"aaaa\");\n        Vector v = reg.getGroups(\"xaaaa\");\n        assertEquals(\"No parens -> no extra groups\", 1, v.size());\n        assertEquals(\"Trivial match with no parens\", \"aaaa\",\n                     (String) v.elementAt(0));\n\n        reg.setPattern(\"(aaaa)\");\n        v = reg.getGroups(\"xaaaa\");\n        assertEquals(\"Trivial match with single paren\", 2, v.size());\n        assertEquals(\"Trivial match with single paren, full match\", \"aaaa\",\n                     (String) v.elementAt(0));\n        assertEquals(\"Trivial match with single paren, matched paren\", \"aaaa\",\n                     (String) v.elementAt(0));\n\n        reg.setPattern(\"(a+)b(b+)\");\n        v = reg.getGroups(\"xaabb\");\n        assertEquals(3, v.size());\n        assertEquals(\"aabb\", (String) v.elementAt(0));\n        assertEquals(\"aa\", (String) v.elementAt(1));\n        assertEquals(\"b\", (String) v.elementAt(2));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/util/regexp/RegexpMatcherTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"},{"authorDate":"2006-09-22 03:10:48","commitOrder":1,"curCode":"    public void testBugzillaReport14619() {\n        reg.setPattern(\"^(.*)/src/((.*/)*)([a-zA-Z0-9_\\\\.]+)\\\\.java$\");\n        Vector v = reg.getGroups(\"de/tom/src/Google.java\");\n        assertEquals(5, v.size());\n        assertEquals(\"de/tom\", v.elementAt(1));\n        assertEquals(\"\", v.elementAt(2));\n        assertEquals(\"\", v.elementAt(3));\n        assertEquals(\"Google\", v.elementAt(4));\n    }\n","date":"2006-09-22 03:10:48","endLine":105,"groupId":"4092","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBugzillaReport14619","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/09/508274088daf64025cfd15ff6e52460ca25a9b.src","preCode":"    public void testBugzillaReport14619() {\n        reg.setPattern(\"^(.*)/src/((.*/)*)([a-zA-Z0-9_\\\\.]+)\\\\.java$\");\n        Vector v = reg.getGroups(\"de/tom/src/Google.java\");\n        assertEquals(5, v.size());\n        assertEquals(\"de/tom\", v.elementAt(1));\n        assertEquals(\"\", v.elementAt(2));\n        assertEquals(\"\", v.elementAt(3));\n        assertEquals(\"Google\", v.elementAt(4));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/util/regexp/RegexpMatcherTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"}],"commitId":"73d66d2c6d6e0384fd66eba1f20ef97469c49b18","commitMessage":"@@@Restructuring to allow junit and antunit tests both.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@448636 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-09-22 03:10:48","modifiedFileCount":"0","status":"B","submitter":"Matthew Jason Benson"},{"authorTime":"2006-09-22 03:10:48","codes":[{"authorDate":"2018-04-02 02:07:39","commitOrder":2,"curCode":"    public void testGroups() {\n        reg.setPattern(\"aaaa\");\n        Vector v = reg.getGroups(\"xaaaa\");\n        assertEquals(\"No parens -> no extra groups\", 1, v.size());\n        assertEquals(\"Trivial match with no parens\", \"aaaa\",\n                v.elementAt(0));\n\n        reg.setPattern(\"(aaaa)\");\n        v = reg.getGroups(\"xaaaa\");\n        assertEquals(\"Trivial match with single paren\", 2, v.size());\n        assertEquals(\"Trivial match with single paren, full match\", \"aaaa\",\n                v.elementAt(0));\n        assertEquals(\"Trivial match with single paren, matched paren\", \"aaaa\",\n                v.elementAt(0));\n\n        reg.setPattern(\"(a+)b(b+)\");\n        v = reg.getGroups(\"xaabb\");\n        assertEquals(3, v.size());\n        assertEquals(\"aabb\", v.elementAt(0));\n        assertEquals(\"aa\", v.elementAt(1));\n        assertEquals(\"b\", v.elementAt(2));\n    }\n","date":"2018-04-02 02:07:39","endLine":100,"groupId":"3403","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroups","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7f/4d15241265ca33dcd266a950b7d06d0abe04ba.src","preCode":"    public void testGroups() {\n        reg.setPattern(\"aaaa\");\n        Vector v = reg.getGroups(\"xaaaa\");\n        assertEquals(\"No parens -> no extra groups\", 1, v.size());\n        assertEquals(\"Trivial match with no parens\", \"aaaa\",\n                     (String) v.elementAt(0));\n\n        reg.setPattern(\"(aaaa)\");\n        v = reg.getGroups(\"xaaaa\");\n        assertEquals(\"Trivial match with single paren\", 2, v.size());\n        assertEquals(\"Trivial match with single paren, full match\", \"aaaa\",\n                     (String) v.elementAt(0));\n        assertEquals(\"Trivial match with single paren, matched paren\", \"aaaa\",\n                     (String) v.elementAt(0));\n\n        reg.setPattern(\"(a+)b(b+)\");\n        v = reg.getGroups(\"xaabb\");\n        assertEquals(3, v.size());\n        assertEquals(\"aabb\", (String) v.elementAt(0));\n        assertEquals(\"aa\", (String) v.elementAt(1));\n        assertEquals(\"b\", (String) v.elementAt(2));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/util/regexp/RegexpMatcherTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2006-09-22 03:10:48","commitOrder":2,"curCode":"    public void testBugzillaReport14619() {\n        reg.setPattern(\"^(.*)/src/((.*/)*)([a-zA-Z0-9_\\\\.]+)\\\\.java$\");\n        Vector v = reg.getGroups(\"de/tom/src/Google.java\");\n        assertEquals(5, v.size());\n        assertEquals(\"de/tom\", v.elementAt(1));\n        assertEquals(\"\", v.elementAt(2));\n        assertEquals(\"\", v.elementAt(3));\n        assertEquals(\"Google\", v.elementAt(4));\n    }\n","date":"2006-09-22 03:10:48","endLine":105,"groupId":"4092","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBugzillaReport14619","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/09/508274088daf64025cfd15ff6e52460ca25a9b.src","preCode":"    public void testBugzillaReport14619() {\n        reg.setPattern(\"^(.*)/src/((.*/)*)([a-zA-Z0-9_\\\\.]+)\\\\.java$\");\n        Vector v = reg.getGroups(\"de/tom/src/Google.java\");\n        assertEquals(5, v.size());\n        assertEquals(\"de/tom\", v.elementAt(1));\n        assertEquals(\"\", v.elementAt(2));\n        assertEquals(\"\", v.elementAt(3));\n        assertEquals(\"Google\", v.elementAt(4));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/util/regexp/RegexpMatcherTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"}],"commitId":"95495d57aa5cca8fc350ebfb10f6d390f40290cb","commitMessage":"@@@Remove extraneous casts and (un)boxing.  tersify logic","date":"2018-04-02 02:07:39","modifiedFileCount":"178","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-04-03 01:55:27","codes":[{"authorDate":"2018-04-03 01:55:27","commitOrder":3,"curCode":"    public void testGroups() {\n        reg.setPattern(\"aaaa\");\n        Vector<String> v = reg.getGroups(\"xaaaa\");\n        assertEquals(\"No parens -> no extra groups\", 1, v.size());\n        assertEquals(\"Trivial match with no parens\", \"aaaa\",\n                v.elementAt(0));\n\n        reg.setPattern(\"(aaaa)\");\n        v = reg.getGroups(\"xaaaa\");\n        assertEquals(\"Trivial match with single paren\", 2, v.size());\n        assertEquals(\"Trivial match with single paren, full match\", \"aaaa\",\n                v.elementAt(0));\n        assertEquals(\"Trivial match with single paren, matched paren\", \"aaaa\",\n                v.elementAt(0));\n\n        reg.setPattern(\"(a+)b(b+)\");\n        v = reg.getGroups(\"xaabb\");\n        assertEquals(3, v.size());\n        assertEquals(\"aabb\", v.elementAt(0));\n        assertEquals(\"aa\", v.elementAt(1));\n        assertEquals(\"b\", v.elementAt(2));\n    }\n","date":"2018-04-03 01:55:27","endLine":100,"groupId":"10347","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroups","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/9f/eb67ce9d05a6a1451fed0ad9e542c047c1d997.src","preCode":"    public void testGroups() {\n        reg.setPattern(\"aaaa\");\n        Vector v = reg.getGroups(\"xaaaa\");\n        assertEquals(\"No parens -> no extra groups\", 1, v.size());\n        assertEquals(\"Trivial match with no parens\", \"aaaa\",\n                v.elementAt(0));\n\n        reg.setPattern(\"(aaaa)\");\n        v = reg.getGroups(\"xaaaa\");\n        assertEquals(\"Trivial match with single paren\", 2, v.size());\n        assertEquals(\"Trivial match with single paren, full match\", \"aaaa\",\n                v.elementAt(0));\n        assertEquals(\"Trivial match with single paren, matched paren\", \"aaaa\",\n                v.elementAt(0));\n\n        reg.setPattern(\"(a+)b(b+)\");\n        v = reg.getGroups(\"xaabb\");\n        assertEquals(3, v.size());\n        assertEquals(\"aabb\", v.elementAt(0));\n        assertEquals(\"aa\", v.elementAt(1));\n        assertEquals(\"b\", v.elementAt(2));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/util/regexp/RegexpMatcherTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2018-04-03 01:55:27","commitOrder":3,"curCode":"    public void testBugzillaReport14619() {\n        reg.setPattern(\"^(.*)/src/((.*/)*)([a-zA-Z0-9_\\\\.]+)\\\\.java$\");\n        Vector<String> v = reg.getGroups(\"de/tom/src/Google.java\");\n        assertEquals(5, v.size());\n        assertEquals(\"de/tom\", v.elementAt(1));\n        assertEquals(\"\", v.elementAt(2));\n        assertEquals(\"\", v.elementAt(3));\n        assertEquals(\"Google\", v.elementAt(4));\n    }\n","date":"2018-04-03 01:55:27","endLine":111,"groupId":"10347","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBugzillaReport14619","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/9f/eb67ce9d05a6a1451fed0ad9e542c047c1d997.src","preCode":"    public void testBugzillaReport14619() {\n        reg.setPattern(\"^(.*)/src/((.*/)*)([a-zA-Z0-9_\\\\.]+)\\\\.java$\");\n        Vector v = reg.getGroups(\"de/tom/src/Google.java\");\n        assertEquals(5, v.size());\n        assertEquals(\"de/tom\", v.elementAt(1));\n        assertEquals(\"\", v.elementAt(2));\n        assertEquals(\"\", v.elementAt(3));\n        assertEquals(\"Google\", v.elementAt(4));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/util/regexp/RegexpMatcherTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"1c9118e27e66b669d46e1600649b57cc87b5a97c","commitMessage":"@@@Generify","date":"2018-04-03 01:55:27","modifiedFileCount":"21","status":"M","submitter":"Gintas Grigelionis"}]
