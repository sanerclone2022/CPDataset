[{"authorTime":"2010-02-16 22:41:11","codes":[{"authorDate":"2010-02-16 22:41:11","commitOrder":1,"curCode":"    public void testParseWithRead() throws Exception {\n        ZipExtraField[] ze =\n            ExtraFieldUtils.parse(data, true,\n                                  ExtraFieldUtils.UnparseableExtraField.READ);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField);\n        assertEquals(\"data length field 2\", 1,\n                     ze[1].getLocalFileDataLength().getValue());\n\n        byte[] data2 = new byte[data.length-1];\n        System.arraycopy(data, 0, data2, 0, data2.length);\n        ze = ExtraFieldUtils.parse(data2, true,\n                                   ExtraFieldUtils.UnparseableExtraField.READ);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertTrue(\"type field 2\", ze[1] instanceof UnparseableExtraFieldData);\n        assertEquals(\"data length field 2\", 4,\n                     ze[1].getLocalFileDataLength().getValue());\n        byte[] expectedData = new byte[4];\n        for (int i = 0; i < 4; i++) {\n            assertEquals(\"byte number \" + i,\n                         data2[data.length - 5 + i],\n                         ze[1].getLocalFileDataData()[i]);\n        }\n    }\n","date":"2010-02-16 22:41:11","endLine":117,"groupId":"7167","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseWithRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/40/0efd266f6a5246545357837a6319400fca1278.src","preCode":"    public void testParseWithRead() throws Exception {\n        ZipExtraField[] ze =\n            ExtraFieldUtils.parse(data, true,\n                                  ExtraFieldUtils.UnparseableExtraField.READ);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField);\n        assertEquals(\"data length field 2\", 1,\n                     ze[1].getLocalFileDataLength().getValue());\n\n        byte[] data2 = new byte[data.length-1];\n        System.arraycopy(data, 0, data2, 0, data2.length);\n        ze = ExtraFieldUtils.parse(data2, true,\n                                   ExtraFieldUtils.UnparseableExtraField.READ);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertTrue(\"type field 2\", ze[1] instanceof UnparseableExtraFieldData);\n        assertEquals(\"data length field 2\", 4,\n                     ze[1].getLocalFileDataLength().getValue());\n        byte[] expectedData = new byte[4];\n        for (int i = 0; i < 4; i++) {\n            assertEquals(\"byte number \" + i,\n                         data2[data.length - 5 + i],\n                         ze[1].getLocalFileDataData()[i]);\n        }\n    }\n","realPath":"src/tests/junit/org/apache/tools/zip/ExtraFieldUtilsTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"},{"authorDate":"2010-02-16 22:41:11","commitOrder":1,"curCode":"    public void testParseWithSkip() throws Exception {\n        ZipExtraField[] ze =\n            ExtraFieldUtils.parse(data, true,\n                                  ExtraFieldUtils.UnparseableExtraField.SKIP);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField);\n        assertEquals(\"data length field 2\", 1,\n                     ze[1].getLocalFileDataLength().getValue());\n\n        byte[] data2 = new byte[data.length-1];\n        System.arraycopy(data, 0, data2, 0, data2.length);\n        ze = ExtraFieldUtils.parse(data2, true,\n                                   ExtraFieldUtils.UnparseableExtraField.SKIP);\n        assertEquals(\"number of fields\", 1, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n    }\n","date":"2010-02-16 22:41:11","endLine":139,"groupId":"909","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseWithSkip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/40/0efd266f6a5246545357837a6319400fca1278.src","preCode":"    public void testParseWithSkip() throws Exception {\n        ZipExtraField[] ze =\n            ExtraFieldUtils.parse(data, true,\n                                  ExtraFieldUtils.UnparseableExtraField.SKIP);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField);\n        assertEquals(\"data length field 2\", 1,\n                     ze[1].getLocalFileDataLength().getValue());\n\n        byte[] data2 = new byte[data.length-1];\n        System.arraycopy(data, 0, data2, 0, data2.length);\n        ze = ExtraFieldUtils.parse(data2, true,\n                                   ExtraFieldUtils.UnparseableExtraField.SKIP);\n        assertEquals(\"number of fields\", 1, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n    }\n","realPath":"src/tests/junit/org/apache/tools/zip/ExtraFieldUtilsTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"}],"commitId":"f665a4d33564ecc12851996978a9847024643829","commitMessage":"@@@accept a wider range of existing zip archives by being more lenient when parsing extra fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@910537 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-02-16 22:41:11","modifiedFileCount":"6","status":"B","submitter":"Stefan Bodewig"},{"authorTime":"2010-02-16 22:41:11","codes":[{"authorDate":"2010-11-22 20:27:03","commitOrder":2,"curCode":"    public void testParseWithRead() throws Exception {\n        ZipExtraField[] ze =\n            ExtraFieldUtils.parse(data, true,\n                                  ExtraFieldUtils.UnparseableExtraField.READ);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField);\n        assertEquals(\"data length field 2\", 1,\n                     ze[1].getLocalFileDataLength().getValue());\n\n        byte[] data2 = new byte[data.length-1];\n        System.arraycopy(data, 0, data2, 0, data2.length);\n        ze = ExtraFieldUtils.parse(data2, true,\n                                   ExtraFieldUtils.UnparseableExtraField.READ);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertTrue(\"type field 2\", ze[1] instanceof UnparseableExtraFieldData);\n        assertEquals(\"data length field 2\", 4,\n                     ze[1].getLocalFileDataLength().getValue());\n        for (int i = 0; i < 4; i++) {\n            assertEquals(\"byte number \" + i,\n                         data2[data.length - 5 + i],\n                         ze[1].getLocalFileDataData()[i]);\n        }\n    }\n","date":"2010-11-22 20:27:03","endLine":115,"groupId":"7167","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseWithRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/51/a77f1af92f1b364ca85921569361e91344f5d2.src","preCode":"    public void testParseWithRead() throws Exception {\n        ZipExtraField[] ze =\n            ExtraFieldUtils.parse(data, true,\n                                  ExtraFieldUtils.UnparseableExtraField.READ);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField);\n        assertEquals(\"data length field 2\", 1,\n                     ze[1].getLocalFileDataLength().getValue());\n\n        byte[] data2 = new byte[data.length-1];\n        System.arraycopy(data, 0, data2, 0, data2.length);\n        ze = ExtraFieldUtils.parse(data2, true,\n                                   ExtraFieldUtils.UnparseableExtraField.READ);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertTrue(\"type field 2\", ze[1] instanceof UnparseableExtraFieldData);\n        assertEquals(\"data length field 2\", 4,\n                     ze[1].getLocalFileDataLength().getValue());\n        byte[] expectedData = new byte[4];\n        for (int i = 0; i < 4; i++) {\n            assertEquals(\"byte number \" + i,\n                         data2[data.length - 5 + i],\n                         ze[1].getLocalFileDataData()[i]);\n        }\n    }\n","realPath":"src/tests/junit/org/apache/tools/zip/ExtraFieldUtilsTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2010-02-16 22:41:11","commitOrder":2,"curCode":"    public void testParseWithSkip() throws Exception {\n        ZipExtraField[] ze =\n            ExtraFieldUtils.parse(data, true,\n                                  ExtraFieldUtils.UnparseableExtraField.SKIP);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField);\n        assertEquals(\"data length field 2\", 1,\n                     ze[1].getLocalFileDataLength().getValue());\n\n        byte[] data2 = new byte[data.length-1];\n        System.arraycopy(data, 0, data2, 0, data2.length);\n        ze = ExtraFieldUtils.parse(data2, true,\n                                   ExtraFieldUtils.UnparseableExtraField.SKIP);\n        assertEquals(\"number of fields\", 1, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n    }\n","date":"2010-02-16 22:41:11","endLine":139,"groupId":"909","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseWithSkip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/40/0efd266f6a5246545357837a6319400fca1278.src","preCode":"    public void testParseWithSkip() throws Exception {\n        ZipExtraField[] ze =\n            ExtraFieldUtils.parse(data, true,\n                                  ExtraFieldUtils.UnparseableExtraField.SKIP);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField);\n        assertEquals(\"data length field 2\", 1,\n                     ze[1].getLocalFileDataLength().getValue());\n\n        byte[] data2 = new byte[data.length-1];\n        System.arraycopy(data, 0, data2, 0, data2.length);\n        ze = ExtraFieldUtils.parse(data2, true,\n                                   ExtraFieldUtils.UnparseableExtraField.SKIP);\n        assertEquals(\"number of fields\", 1, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n    }\n","realPath":"src/tests/junit/org/apache/tools/zip/ExtraFieldUtilsTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"}],"commitId":"a28f64f5cf1b63d9342683d77d79a5cdf9e67f85","commitMessage":"@@@fix a bunch of warnings you get when building on Harmony which uses Eclipse's compiler.  There are still lots (more than 100) of deprecation warnings and warnings about missing serialversionids that I have ignored.\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@1037691 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-11-22 20:27:03","modifiedFileCount":"49","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2018-04-24 12:55:31","codes":[{"authorDate":"2018-04-24 12:55:31","commitOrder":3,"curCode":"    public void testParseWithRead() throws Exception {\n        ZipExtraField[] ze =\n            ExtraFieldUtils.parse(data, true,\n                                  ExtraFieldUtils.UnparseableExtraField.READ);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertThat(\"type field 1\", ze[0], instanceOf(AsiExtraField.class));\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertThat(\"type field 2\", ze[1], instanceOf(UnrecognizedExtraField.class));\n        assertEquals(\"data length field 2\", 1,\n                     ze[1].getLocalFileDataLength().getValue());\n\n        byte[] data2 = new byte[data.length - 1];\n        System.arraycopy(data, 0, data2, 0, data2.length);\n        ze = ExtraFieldUtils.parse(data2, true,\n                                   ExtraFieldUtils.UnparseableExtraField.READ);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertThat(\"type field 1\", ze[0], instanceOf(AsiExtraField.class));\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertThat(\"type field 2\", ze[1], instanceOf(UnparseableExtraFieldData.class));\n        assertEquals(\"data length field 2\", 4,\n                     ze[1].getLocalFileDataLength().getValue());\n        for (int i = 0; i < 4; i++) {\n            assertEquals(\"byte number \" + i,\n                         data2[data.length - 5 + i],\n                         ze[1].getLocalFileDataData()[i]);\n        }\n    }\n","date":"2018-04-24 13:08:44","endLine":130,"groupId":"109","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseWithRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/4b/d94aac3a3474600960689c6202ee1cab7b3128.src","preCode":"    public void testParseWithRead() throws Exception {\n        ZipExtraField[] ze =\n            ExtraFieldUtils.parse(data, true,\n                                  ExtraFieldUtils.UnparseableExtraField.READ);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField);\n        assertEquals(\"data length field 2\", 1,\n                     ze[1].getLocalFileDataLength().getValue());\n\n        byte[] data2 = new byte[data.length - 1];\n        System.arraycopy(data, 0, data2, 0, data2.length);\n        ze = ExtraFieldUtils.parse(data2, true,\n                                   ExtraFieldUtils.UnparseableExtraField.READ);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertTrue(\"type field 2\", ze[1] instanceof UnparseableExtraFieldData);\n        assertEquals(\"data length field 2\", 4,\n                     ze[1].getLocalFileDataLength().getValue());\n        for (int i = 0; i < 4; i++) {\n            assertEquals(\"byte number \" + i,\n                         data2[data.length - 5 + i],\n                         ze[1].getLocalFileDataData()[i]);\n        }\n    }\n","realPath":"src/tests/junit/org/apache/tools/zip/ExtraFieldUtilsTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2018-04-24 12:55:31","commitOrder":3,"curCode":"    public void testParseWithSkip() throws Exception {\n        ZipExtraField[] ze =\n            ExtraFieldUtils.parse(data, true,\n                                  ExtraFieldUtils.UnparseableExtraField.SKIP);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertThat(\"type field 1\", ze[0], instanceOf(AsiExtraField.class));\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertThat(\"type field 2\", ze[1], instanceOf(UnrecognizedExtraField.class));\n        assertEquals(\"data length field 2\", 1,\n                     ze[1].getLocalFileDataLength().getValue());\n\n        byte[] data2 = new byte[data.length - 1];\n        System.arraycopy(data, 0, data2, 0, data2.length);\n        ze = ExtraFieldUtils.parse(data2, true,\n                                   ExtraFieldUtils.UnparseableExtraField.SKIP);\n        assertEquals(\"number of fields\", 1, ze.length);\n        assertThat(\"type field 1\", ze[0], instanceOf(AsiExtraField.class));\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n    }\n","date":"2018-04-24 13:08:44","endLine":153,"groupId":"109","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseWithSkip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/4b/d94aac3a3474600960689c6202ee1cab7b3128.src","preCode":"    public void testParseWithSkip() throws Exception {\n        ZipExtraField[] ze =\n            ExtraFieldUtils.parse(data, true,\n                                  ExtraFieldUtils.UnparseableExtraField.SKIP);\n        assertEquals(\"number of fields\", 2, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n        assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField);\n        assertEquals(\"data length field 2\", 1,\n                     ze[1].getLocalFileDataLength().getValue());\n\n        byte[] data2 = new byte[data.length - 1];\n        System.arraycopy(data, 0, data2, 0, data2.length);\n        ze = ExtraFieldUtils.parse(data2, true,\n                                   ExtraFieldUtils.UnparseableExtraField.SKIP);\n        assertEquals(\"number of fields\", 1, ze.length);\n        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n        assertEquals(\"mode field 1\", 040755,\n                     ((AsiExtraField) ze[0]).getMode());\n    }\n","realPath":"src/tests/junit/org/apache/tools/zip/ExtraFieldUtilsTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"97080ce1dbfc2c1d1f8570851389b85fb9a0a8ff","commitMessage":"@@@More matchers","date":"2018-04-24 13:08:44","modifiedFileCount":"14","status":"M","submitter":"Gintas Grigelionis"}]
